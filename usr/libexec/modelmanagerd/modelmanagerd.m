int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  os_log_s *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v41;
  __int128 v42;
  uint64_t v43;
  v3 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6 = sub_100003B20(&qword_10010B210);
  v7 = sub_100007460(v6, 64LL);
  *(_OWORD *)(v7 + 16) = xmmword_1000D8890;
  *(void *)(v7 + 56) = &type metadata for String;
  strcpy((char *)(v7 + 32), "Entered Daemon");
  *(_BYTE *)(v7 + 47) = -18;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease(v7);
  type metadata accessor for _OSActivity(0LL);
  qword_10010B050 = _OSActivity.__allocating_init(_:)("Daemon initialization", 21LL, 2LL);
  v8 = type metadata accessor for Logger(0LL);
  sub_100003B60(v8, qword_10010B058);
  v9 = sub_100003BA0(v8, (uint64_t)qword_10010B058);
  v10 = *(void *)(v8 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  generalLogger.getter(v11);
  v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v9, v13, v8);
  v15 = (os_log_s *)Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Initializing Daemon...", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  v18 = type metadata accessor for ModelCatalogProvider(0LL);
  sub_10000749C(v18);
  v19 = sub_1000A95F0();
  v20 = type metadata accessor for FilesystemProvider();
  v21 = sub_100007460(v20, 16LL);
  v22 = type metadata accessor for RunningBoardProvider(0LL);
  sub_10000749C(v22);
  v23 = sub_100098BB8();
  v24 = type metadata accessor for TrialFrameworkProvider();
  swift_allocObject(v24, 120LL, 15LL);
  v25 = sub_10004FC14();
  v26 = type metadata accessor for NeuralEngine();
  v27 = sub_100007460(v26, 16LL);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100003F84( (uint64_t)&_swiftEmptyArrayStorage,  &qword_10010B288,  (void (*)(void *))sub_100091270,  (void (*)(void))type metadata accessor for InferenceProviderAsset,  (uint64_t (*)(uint64_t, uint64_t))sub_100091114);
    v28 = v41;
  }

  else
  {
    v28 = &_swiftEmptySetSingleton;
  }

  v29 = type metadata accessor for TelemetryManager();
  v30 = (void *)sub_100007460(v29, 88LL);
  v31 = sub_1000B50D4(v30);
  *((void *)&v42 + 1) = v28;
  *(void *)&v42 = 0LL;
  v32 = sub_100005CB0(v19, v27, v21, v23, v25, 0LL, 0LL, 0LL, v42, (uint64_t)v31);
  qword_10010B070 = v32;
  v33 = type metadata accessor for Daemon(0LL);
  sub_10000749C(v33);
  v34 = swift_retain(v32);
  qword_10010B078 = sub_100022EFC(v34);
  _OSActivity.close()();
  v35 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v5, 1LL, 1LL, v35);
  type metadata accessor for MainActor(0LL);
  v36 = static MainActor.shared.getter();
  v37 = sub_100007460((uint64_t)&unk_1001028C0, 32LL);
  *(void *)(v37 + 16) = v36;
  *(void *)(v37 + 24) = &protocol witness table for MainActor;
  v38 = sub_1000038AC( (uint64_t)v5,  (uint64_t)&unk_10010B220,  v37,  (uint64_t)&unk_100102938,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_10010B290);
  swift_release(v38);
  v39 = [(id)objc_opt_self(NSRunLoop) mainRunLoop];
  [v39 run];

  return 0;
}

uint64_t sub_10000372C()
{
  uint64_t v1 = type metadata accessor for MainActor(0LL);
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[3] = v2;
  v0[4] = v3;
  return swift_task_switch(sub_100003794, v2, v3);
}

uint64_t sub_100003794()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010BC94);
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000037E0;
  return sub_100023448();
}

uint64_t sub_1000037E0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  return swift_task_switch(sub_10000382C, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10000382C()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100003854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000038AC(a1, a2, a3, (uint64_t)&unk_100102938, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_10010B290);
}

uint64_t sub_100003874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000038AC(a1, a2, a3, (uint64_t)&unk_100102910, (uint64_t)&unk_100105070, (uint64_t)&unk_10010B280);
}

uint64_t sub_100003890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000038AC(a1, a2, a3, (uint64_t)&unk_1001028E8, (uint64_t)&type metadata for Bool, (uint64_t)&unk_10010B270);
}

uint64_t sub_1000038AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  if (sub_1000060B4(a1, 1LL, v12) == 1)
  {
    sub_1000060C0(a1);
    uint64_t v13 = 7168LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
    uint64_t v13 = v14 | 0x1C00LL;
  }

  uint64_t v15 = *(void *)(a3 + 16);
  if (v15)
  {
    uint64_t v16 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v15);
    uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
    uint64_t v20 = v19;
    swift_unknownObjectRelease(v15);
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t v20 = 0LL;
  }

  uint64_t v21 = sub_100007460(a4, 32LL);
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  if (v20 | v18)
  {
    v24[0] = 0LL;
    v24[1] = 0LL;
    v22 = v24;
    v24[2] = v18;
    v24[3] = v20;
  }

  else
  {
    v22 = 0LL;
  }

  return swift_task_create(v13, v22, a5, a6, v21);
}

uint64_t variable initialization expression of InferenceProviderManager.ConnectionCollection.groupsByIdentifier()
{
  uint64_t v0 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
  return Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v0,  &protocol witness table for String);
}

uint64_t variable initialization expression of InferenceProviderManager.waitingForFirstUpdate()
{
  return 0LL;
}

void *variable initialization expression of InferenceProviderManager.firstUpdateContinuations()
{
  return &_swiftEmptyArrayStorage;
}

_UNKNOWN **variable initialization expression of InferenceProviderManager.eligibilityControlledIPs()
{
  return &off_100102790;
}

void sub_100003A3C(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100007530();
    sub_100007424( (uint64_t)"Fatal error",  v1,  v2,  (uint64_t)"Can't construct Array with count < 0",  v3,  v4,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for String) + 16) = a1;
    }
    sub_100007578();
  }
}

void sub_100003AA8(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100007530();
    sub_100007424( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = type metadata accessor for InferenceProviderAsset(0LL);
      *(void *)((static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) & 0xFFFFFFFFFFFFF8LL) + 0x10) = a1;
    }

    sub_100007578();
  }

uint64_t sub_100003B20(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t *sub_100003B60(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100003BA0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_100003BB8(uint64_t a1)
{
}

void sub_100003BDC(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v6 = sub_100007558(v5);
  __chkstk_darwin(v6);
  sub_100007508();
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - v8;
  if (*(void *)(a1 + 16)
    && (sub_100003B20(&qword_10010B248), uint64_t v10 = sub_100007548(), (v29 = *(void *)(a1 + 16)) != 0))
  {
    unint64_t v11 = 0LL;
    sub_1000074BC();
    uint64_t v27 = a1;
    uint64_t v28 = a1 + v12;
    while (v11 < *(void *)(a1 + 16))
    {
      uint64_t v13 = v31[9];
      unsigned __int8 v14 = (void (*)(char *, unint64_t, uint64_t))v31[2];
      v14(v9, v28 + v13 * v11, v2);
      sub_100006080(&qword_10010B250);
      sub_1000074D8(v15);
      sub_1000073B0();
      if (v18)
      {
LABEL_11:
        sub_1000075C8(v16);
        sub_1000074A8(v23 + v1 * v13);
        uint64_t v24 = *(void *)(v10 + 16);
        BOOL v25 = __OFADD__(v24, 1LL);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_17;
        }
        *(void *)(v10 + 16) = v26;
      }

      else
      {
        unint64_t v30 = v11;
        uint64_t v19 = ~v17;
        while (1)
        {
          v14(v3, *(void *)(v10 + 48) + v1 * v13, v2);
          sub_100006080(&qword_10010B258);
          char v21 = sub_100007468(v20);
          v22 = (void (*)(char *, uint64_t))v31[1];
          v22(v3, v2);
          if ((v21 & 1) != 0) {
            break;
          }
          uint64_t v1 = (v1 + 1) & v19;
          sub_100007480();
          if (v18)
          {
            a1 = v27;
            unint64_t v11 = v30;
            goto LABEL_11;
          }
        }

        v22(v9, v2);
        a1 = v27;
        unint64_t v11 = v30;
      }

      if (++v11 == v29) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a1);
    sub_100007448();
  }

void sub_100003D94(uint64_t a1)
{
  uint64_t v5 = sub_100003B20(&qword_10010B228);
  uint64_t v6 = sub_100007558(v5);
  __chkstk_darwin(v6);
  sub_100007508();
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - v8;
  if (*(void *)(a1 + 16)
    && (sub_100003B20(&qword_10010B230), uint64_t v10 = sub_100007548(), (v29 = *(void *)(a1 + 16)) != 0))
  {
    unint64_t v11 = 0LL;
    sub_1000074BC();
    uint64_t v27 = a1;
    uint64_t v28 = a1 + v12;
    while (v11 < *(void *)(a1 + 16))
    {
      uint64_t v13 = v31[9];
      unsigned __int8 v14 = (void (*)(char *, unint64_t, uint64_t))v31[2];
      v14(v9, v28 + v13 * v11, v2);
      sub_1000071C0(&qword_10010B238, &qword_10010B228);
      sub_1000074D8(v15);
      sub_1000073B0();
      if (v18)
      {
LABEL_11:
        sub_1000075C8(v16);
        sub_1000074A8(v23 + v1 * v13);
        uint64_t v24 = *(void *)(v10 + 16);
        BOOL v25 = __OFADD__(v24, 1LL);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_17;
        }
        *(void *)(v10 + 16) = v26;
      }

      else
      {
        unint64_t v30 = v11;
        uint64_t v19 = ~v17;
        while (1)
        {
          v14(v3, *(void *)(v10 + 48) + v1 * v13, v2);
          sub_1000071C0(&qword_10010B240, &qword_10010B228);
          char v21 = sub_100007468(v20);
          v22 = (void (*)(char *, uint64_t))v31[1];
          v22(v3, v2);
          if ((v21 & 1) != 0) {
            break;
          }
          uint64_t v1 = (v1 + 1) & v19;
          sub_100007480();
          if (v18)
          {
            a1 = v27;
            unint64_t v11 = v30;
            goto LABEL_11;
          }
        }

        v22(v9, v2);
        a1 = v27;
        unint64_t v11 = v30;
      }

      if (++v11 == v29) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a1);
    sub_100007448();
  }

void sub_100003F60(uint64_t a1)
{
}

void sub_100003F84( uint64_t a1, uint64_t *a2, void (*a3)(void *), void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = a1;
  unint64_t v8 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v12);
    sub_100007570();
    if (v9)
    {
LABEL_3:
      sub_100003B20(a2);
      uint64_t v10 = (void *)static _SetStorage.allocate(capacity:)(v9);
      if (!v8) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v10 = &_swiftEmptySetSingleton;
  if (!v8)
  {
LABEL_4:
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v11)
    {
LABEL_31:
      sub_100007570();
      return;
    }

    goto LABEL_15;
  }

LABEL_11:
  if (v7 < 0) {
    uint64_t v13 = v7;
  }
  else {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v13);
  sub_100007570();
  if (!v11) {
    goto LABEL_31;
  }
LABEL_15:
  unint64_t v14 = 0LL;
  unint64_t v37 = v7 & 0xC000000000000001LL;
  uint64_t v32 = v7 + 32;
  uint64_t v33 = v7 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v34 = v11;
  uint64_t v35 = v7;
  while (1)
  {
    if (v37)
    {
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v7);
    }

    else
    {
      if (v14 >= *(void *)(v33 + 16)) {
        goto LABEL_34;
      }
      uint64_t v15 = *(void *)(v32 + 8 * v14);
      swift_retain(v15);
    }

    BOOL v16 = __OFADD__(v14++, 1LL);
    if (v16) {
      break;
    }
    Hasher.init(_seed:)(v39, v10[5]);
    a3(v39);
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1LL << *((_BYTE *)v10 + 32);
    uint64_t v19 = v17 & ~v18;
    sub_100007584();
    if ((v22 & v21) != 0)
    {
      a4(0LL);
      uint64_t v23 = *(void *)(v10[6] + 8 * v19);
      uint64_t v24 = swift_retain(v23);
      char v25 = a5(v24, v15);
      swift_release(v23);
      if ((v25 & 1) != 0)
      {
LABEL_26:
        swift_release(v15);
        uint64_t v11 = v34;
        uint64_t v7 = v35;
        goto LABEL_30;
      }

      uint64_t v26 = ~v18;
      while (1)
      {
        uint64_t v19 = (v19 + 1) & v26;
        sub_100007584();
        if ((v21 & v22) == 0) {
          break;
        }
        uint64_t v27 = *(void *)(v10[6] + 8 * v19);
        uint64_t v28 = swift_retain(v27);
        char v29 = a5(v28, v15);
        swift_release(v27);
        if ((v29 & 1) != 0) {
          goto LABEL_26;
        }
      }

      uint64_t v11 = v34;
      uint64_t v7 = v35;
    }

    v10[v20 + 7] = v22 | v21;
    *(void *)(v10[6] + 8 * v19) = v15;
    uint64_t v30 = v10[2];
    BOOL v16 = __OFADD__(v30, 1LL);
    uint64_t v31 = v30 + 1;
    if (v16) {
      goto LABEL_33;
    }
    v10[2] = v31;
LABEL_30:
    if (v14 == v11) {
      goto LABEL_31;
    }
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

    static _HashTable.scale(forCapacity:)(v15);
    sub_1000CCB08();
    goto LABEL_14;
  }

  sub_1000CCA88();
  if (*v3)
  {
    sub_1000D115C((void *)(*v3 + 16LL), *v3 + 32LL, a2);
    goto LABEL_14;
  }

  __break(1u);
}

    static _HashTable.scale(forCapacity:)(v21);
    sub_1000CCAD0();
    goto LABEL_14;
  }

  sub_1000CCA88();
  if (*v7)
  {
    sub_1000D115C((void *)(*v7 + 16LL), *v7 + 32LL, v24);
    goto LABEL_14;
  }

  __break(1u);
}

uint64_t sub_1000041E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v18 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v19 = &off_100104BD0;
  *(void *)&__int128 v17 = a1;
  swift_defaultActor_initialize(a7);
  uint64_t v14 = type metadata accessor for WorkQueueState();
  uint64_t v15 = swift_allocObject(v14, 32LL, 7LL);
  *(void *)(a7 + 112) = v15;
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask) = 0LL;
  *(void *)(v15 + 16) = 0LL;
  *(void *)(v15 + 24) = 0LL;
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask) = 0LL;
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask) = 0LL;
  *(_BYTE *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) = 0;
  sub_1000070EC(&v17, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_providerManager) = a2;
  sub_1000070EC(a5, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_telemetryManager);
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_neuralEngine) = a6;
  sub_1000072C0(a3, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy);
  *(void *)(a7 + 120) = a4;
  return a7;
}

uint64_t sub_100004320(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v28[3] = type metadata accessor for InferenceProviderAssetManager(0LL);
  v28[4] = &off_100103FF0;
  v28[0] = a1;
  uint64_t v10 = type metadata accessor for ModelCatalogProvider(0LL);
  v27[3] = v10;
  v27[4] = &off_100104BD0;
  v27[0] = a4;
  swift_defaultActor_initialize(a5);
  uint64_t v11 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy);
  uint64_t v12 = (char *)v11 + *(int *)(type metadata accessor for RequestManagerPolicy(0LL) + 20);
  uint64_t v13 = enum case for RequestPriority.none(_:);
  uint64_t v14 = type metadata accessor for RequestPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104LL))(v12, v13, v14);
  *uint64_t v11 = &_swiftEmptySetSingleton;
  uint64_t v15 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
  {
    sub_1000CAE68();
    *uint64_t v15 = 0LL;
    v15[1] = &_swiftEmptyArrayStorage;
    v15[2] = v24;
    sub_1000CAE68();
    char v25 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    *char v25 = 0LL;
    v25[1] = &_swiftEmptyArrayStorage;
    v25[2] = v26;
    sub_1000CAE68();
  }

  else
  {
    *uint64_t v15 = 0LL;
    v15[1] = &_swiftEmptyArrayStorage;
    v15[2] = &_swiftEmptyArrayStorage;
    BOOL v16 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    *BOOL v16 = 0LL;
    v16[1] = &_swiftEmptyArrayStorage;
    v16[2] = &_swiftEmptyArrayStorage;
    __int128 v17 = &_swiftEmptyArrayStorage;
  }

  uint64_t v18 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  *uint64_t v18 = 0LL;
  v18[1] = &_swiftEmptyArrayStorage;
  v18[2] = v17;
  uint64_t v19 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_workQueueState;
  uint64_t v20 = type metadata accessor for WorkQueueState();
  uint64_t v21 = swift_allocObject(v20, 32LL, 7LL);
  *(void *)(a5 + v19) = v21;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_inferenceMonitors) = &_swiftEmptySetSingleton;
  *(void *)(v21 + 16) = 0LL;
  *(void *)(v21 + 24) = 0LL;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire) = 0LL;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests) = &_swiftEmptySetSingleton;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests) = &_swiftEmptySetSingleton;
  sub_100007104((uint64_t)v28, a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager);
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_neuralEngine) = a2;
  sub_100007104((uint64_t)a3, a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_telemetryManager);
  uint64_t v22 = *(void *)(*sub_10000729C(v27, v10) + 120LL);
  sub_100006F7C(a3);
  sub_100006F7C(v28);
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_foregroundOvercommitBudget) = v22;
  sub_100006F7C(v27);
  return a5;
}

uint64_t sub_100004580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = type metadata accessor for FilesystemProvider();
  uint64_t v12 = &off_100104560;
  *(void *)&__int128 v10 = a1;
  uint64_t v8 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v9 = &off_100104BD0;
  *(void *)&__int128 v7 = a2;
  swift_defaultActor_initialize(a3);
  *(void *)(a3 + 192) = &_swiftEmptySetSingleton;
  sub_1000070EC(&v10, a3 + 112);
  sub_1000070EC(&v7, a3 + 152);
  return a3;
}

void *sub_100004614( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v38 = a8;
  uint64_t v39 = a4;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  v40 = a5;
  uint64_t v12 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v45[3] = type metadata accessor for RunningBoardProvider(0LL);
  v45[4] = &off_1001045A8;
  v45[0] = a1;
  v44[3] = type metadata accessor for ModelCatalogProvider(0LL);
  v44[4] = &off_100104BD0;
  v44[0] = a3;
  swift_defaultActor_initialize(a9);
  sub_100007144();
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v43 = &_swiftEmptyArrayStorage;
  unint64_t v22 = sub_100007180();
  uint64_t v23 = sub_100003B20(&qword_10010B2B8);
  sub_1000071C0(&qword_10010B2C0, &qword_10010B2B8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v23, v24, v19, v22);
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v28 + 104))( v27,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  uint64_t v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x4D6E6F6973736553LL,  0xEE00726567616E61LL,  v18,  v21,  v27,  0LL);
  a9[35] = 0LL;
  a9[14] = v38;
  a9[15] = v29;
  sub_100007104((uint64_t)v45, (uint64_t)(a9 + 16));
  a9[21] = a2;
  sub_100007104((uint64_t)v44, (uint64_t)(a9 + 22));
  uint64_t v31 = v39;
  uint64_t v30 = v40;
  a9[27] = v39;
  sub_100007104((uint64_t)v30, (uint64_t)(a9 + 28));
  uint64_t v33 = v41;
  uint64_t v32 = v42;
  a9[33] = v41;
  a9[34] = v32;
  uint64_t v34 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v14, 1LL, 1LL, v34);
  uint64_t v35 = (void *)swift_allocObject(&unk_100102988, 40LL, 7LL);
  v35[2] = 0LL;
  v35[3] = 0LL;
  v35[4] = a9;
  swift_retain(a2);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v32);
  swift_retain(a9);
  uint64_t v36 = sub_1000038AC( (uint64_t)v14,  (uint64_t)&unk_10010B2C8,  (uint64_t)v35,  (uint64_t)&unk_100102938,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_10010B290);
  swift_release(a2);
  swift_release(v31);
  swift_release(v33);
  swift_release(v32);
  swift_release(v36);
  sub_100006F7C(v30);
  sub_100006F7C(v44);
  sub_100006F7C(v45);
  return a9;
}

void *sub_100004964( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = type metadata accessor for RequestPriority(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v33[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for AssetPolicy(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v33[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[3] = type metadata accessor for FilesystemProvider();
  v36[4] = &off_100104560;
  v36[0] = a1;
  v35[3] = &type metadata for OSVariantProvider;
  v35[4] = &off_100104478;
  v34[3] = type metadata accessor for InferenceProviderAssetManager(0LL);
  v34[4] = &off_100103FF0;
  v34[0] = a3;
  v33[3] = type metadata accessor for ModelCatalogProvider(0LL);
  v33[4] = &off_100104BD0;
  v33[0] = a4;
  swift_defaultActor_initialize(a8);
  uint64_t v22 = type metadata accessor for WorkQueueState();
  uint64_t v23 = swift_allocObject(v22, 32LL, 7LL);
  *(void *)(v23 + 16) = 0LL;
  *(void *)(v23 + 24) = 0LL;
  a8[39] = v23;
  a8[40] = &_swiftEmptySetSingleton;
  uint64_t v24 = default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  uint64_t v25 = default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v24);
  uint64_t v26 = default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  uint64_t v27 = default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v26);
  uint64_t v28 = default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)( v21,  v25,  v18,  v27,  v28);
  sub_100007104((uint64_t)v36, (uint64_t)(a8 + 14));
  sub_100007104((uint64_t)v35, (uint64_t)(a8 + 19));
  a8[24] = a2;
  sub_100007104((uint64_t)v34, (uint64_t)(a8 + 25));
  sub_100007104((uint64_t)v33, (uint64_t)(a8 + 30));
  a8[35] = a5;
  a8[36] = a6;
  swift_bridgeObjectRetain_n(a5, 2LL);
  uint64_t v29 = swift_bridgeObjectRetain(a6);
  uint64_t v30 = sub_10000E2DC(v29, a5, a5);
  sub_100006F7C(v33);
  sub_100006F7C(v34);
  sub_100006F7C(v35);
  sub_100006F7C(v36);
  a8[37] = v30;
  a8[38] = a7;
  return a8;
}

void *sub_100004B8C(__int128 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v13 = type metadata accessor for PolicyManager(0LL);
  uint64_t v14 = &off_100102CB8;
  *(void *)&__int128 v12 = a2;
  swift_defaultActor_initialize(a4);
  uint64_t v8 = type metadata accessor for WorkQueueState();
  uint64_t v9 = swift_allocObject(v8, 32LL, 7LL);
  *(void *)(v9 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  a4[24] = v9;
  uint64_t v10 = type metadata accessor for Policy(0LL);
  a4[26] = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v10,  &protocol witness table for String);
  sub_1000070EC(a1, (uint64_t)(a4 + 14));
  sub_1000070EC(&v12, (uint64_t)(a4 + 19));
  a4[25] = a3;
  return a4;
}

uint64_t sub_100004C4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = a7;
  uint64_t v15 = type metadata accessor for RunningBoardProvider(0LL);
  v46[3] = v15;
  v46[4] = &off_1001045A8;
  v46[0] = a1;
  v45[3] = &type metadata for OSVariantProvider;
  v45[4] = &off_100104478;
  v44[3] = type metadata accessor for ModelCatalogProvider(0LL);
  v44[4] = &off_100104BD0;
  v44[0] = a5;
  uint64_t v16 = a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_logHandle;
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  generalLogger.getter(v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v16, v21, v17);
  sub_100007104((uint64_t)v46, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_runningBoard);
  sub_100007104((uint64_t)v45, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_osVariant);
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager) = a2;
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager) = a4;
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager) = a3;
  sub_100007104((uint64_t)v44, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog);
  uint64_t v22 = a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager;
  *(void *)(v22 + 48) = *((void *)a6 + 6);
  __int128 v23 = a6[2];
  __int128 v24 = *a6;
  *(_OWORD *)(v22 + 16) = a6[1];
  *(_OWORD *)(v22 + 32) = v23;
  *(_OWORD *)uint64_t v22 = v24;
  sub_100007104((uint64_t)v46, (uint64_t)v43);
  uint64_t v25 = sub_100006F54((uint64_t)v43, v43[3]);
  __chkstk_darwin(v25);
  uint64_t v27 = (uint64_t *)((char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  uint64_t v29 = *v27;
  v42[4] = &off_1001045A8;
  v42[3] = v15;
  v42[0] = v29;
  uint64_t v30 = type metadata accessor for AssertionRequestDispatcher();
  uint64_t v31 = swift_allocObject(v30, 160LL, 15LL);
  uint64_t v32 = sub_100006F54((uint64_t)v42, v15);
  __chkstk_darwin(v32);
  uint64_t v34 = (uint64_t *)((char *)&v38 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v35 + 16))(v34);
  uint64_t v36 = *v34;
  uint64_t v41 = &off_1001045A8;
  uint64_t v40 = v15;
  *(void *)&__int128 v39 = v36;
  swift_retain(a2);
  swift_retain(a4);
  swift_retain(a3);
  sub_100006FF4(a6);
  swift_defaultActor_initialize(v31);
  sub_1000070EC(&v39, v31 + 112);
  *(void *)(v31 + 152) = a4;
  sub_100006F7C(v42);
  sub_100006F7C(v43);
  sub_100007070((uint64_t *)a6);
  swift_release(a2);
  swift_release(a3);
  sub_100006F7C(v44);
  sub_100006F7C(v45);
  sub_100006F7C(v46);
  *(void *)(a8 + 16) = v31;
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager) = v38;
  return a8;
}

uint64_t sub_100004F90(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16[3] = type metadata accessor for PolicyManager(0LL);
  v16[4] = &off_100102CB8;
  v16[0] = a1;
  v15[3] = &type metadata for MemoryPressureEventProvider;
  v15[4] = &off_100105218;
  swift_defaultActor_initialize(a2);
  uint64_t v9 = a2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
  uint64_t v10 = sub_100003B20(&qword_10010B228);
  sub_100005FB0(v9, 1LL, 1LL, v10);
  *(void *)(a2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask) = 0LL;
  sub_100007104((uint64_t)v16, a2 + 112);
  sub_100007104((uint64_t)v15, a2 + 152);
  *(double *)(a2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogInterval) = a3;
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v8, 1LL, 1LL, v11);
  __int128 v12 = (void *)swift_allocObject(&unk_100102960, 40LL, 7LL);
  v12[2] = 0LL;
  v12[3] = 0LL;
  v12[4] = a2;
  swift_retain(a2);
  uint64_t v13 = sub_1000038AC( (uint64_t)v8,  (uint64_t)&unk_10010B2A0,  (uint64_t)v12,  (uint64_t)&unk_100102938,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_10010B290);
  swift_release(v13);
  sub_100006F7C(v15);
  sub_100006F7C(v16);
  return a2;
}

uint64_t sub_10000512C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v22 = type metadata accessor for ModelCatalogProvider(0LL);
  __int128 v23 = &off_100104BD0;
  v21[0] = a1;
  uint64_t v12 = type metadata accessor for InferenceProviderAssetManager(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v14 = sub_100006F54((uint64_t)v21, v22);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)&v21[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_1000041E0(*v16, a2, a3, a4, a5, a6, v13);
  sub_100006F7C(v21);
  return v18;
}

uint64_t sub_10000522C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v24 = type metadata accessor for InferenceProviderAssetManager(0LL);
  uint64_t v25 = &off_100103FF0;
  v23[0] = a1;
  uint64_t v21 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v22 = &off_100104BD0;
  v20[0] = a4;
  uint64_t v8 = type metadata accessor for RequestManager(0LL);
  uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v10 = sub_100006F54((uint64_t)v23, v24);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_100006F54((uint64_t)v20, v21);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_100004320(*v12, a2, a3, *v16, v9);
  sub_100006F7C(v20);
  sub_100006F7C(v23);
  return v18;
}

uint64_t sub_100005384(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for FilesystemProvider();
  uint64_t v21 = &off_100104560;
  v19[0] = a1;
  uint64_t v17 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v18 = &off_100104BD0;
  v16[0] = a2;
  uint64_t v4 = type metadata accessor for UseCaseManager();
  uint64_t v5 = swift_allocObject(v4, 200LL, 15LL);
  uint64_t v6 = sub_100006F54((uint64_t)v19, v20);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_100006F54((uint64_t)v16, v17);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_100004580(*v8, *v12, v5);
  sub_100006F7C(v16);
  sub_100006F7C(v19);
  return v14;
}

void *sub_1000054C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = type metadata accessor for RunningBoardProvider(0LL);
  uint64_t v33 = &off_1001045A8;
  v31[0] = a1;
  uint64_t v29 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v30 = &off_100104BD0;
  v28[0] = a3;
  uint64_t v16 = type metadata accessor for SessionManager();
  uint64_t v17 = (void *)swift_allocObject(v16, 288LL, 15LL);
  uint64_t v18 = sub_100006F54((uint64_t)v31, v32);
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_100006F54((uint64_t)v28, v29);
  __chkstk_darwin(v22);
  uint64_t v24 = (void *)((char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_100004614(*v20, a2, *v24, a4, a5, a6, a7, a8, v17);
  sub_100006F7C(v28);
  sub_100006F7C(v31);
  return v26;
}

void *sub_100005650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v43 = type metadata accessor for FilesystemProvider();
  v44 = &off_100104560;
  v42[0] = a1;
  uint64_t v40 = &type metadata for OSVariantProvider;
  uint64_t v41 = &off_100104478;
  uint64_t v37 = type metadata accessor for InferenceProviderAssetManager(0LL);
  uint64_t v38 = &off_100103FF0;
  v36[0] = a3;
  uint64_t v34 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v35 = &off_100104BD0;
  v33[0] = a4;
  uint64_t v14 = type metadata accessor for PolicyManager(0LL);
  uint64_t v15 = (void *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v16 = sub_100006F54((uint64_t)v42, v43);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = sub_100006F54((uint64_t)v39, (uint64_t)v40);
  __chkstk_darwin(v20);
  (*(void (**)(char *))(v22 + 16))((char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = sub_100006F54((uint64_t)v36, v37);
  __chkstk_darwin(v23);
  uint64_t v25 = (void *)((char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_100006F54((uint64_t)v33, v34);
  __chkstk_darwin(v27);
  uint64_t v29 = (void *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = sub_100004964(*v18, a2, *v25, *v29, a5, a6, a7, v15);
  sub_100006F7C(v33);
  sub_100006F7C(v36);
  sub_100006F7C(v39);
  sub_100006F7C(v42);
  return v31;
}

void *sub_1000058A8(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = type metadata accessor for PolicyManager(0LL);
  uint64_t v17 = &off_100102CB8;
  v15[0] = a2;
  uint64_t v6 = type metadata accessor for TrialManager();
  uint64_t v7 = (void *)swift_allocObject(v6, 216LL, 15LL);
  uint64_t v8 = sub_100006F54((uint64_t)v15, v16);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = sub_100004B8C(a1, *v10, a3, v7);
  sub_100006F7C(v15);
  return v12;
}

uint64_t sub_100005988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v36 = type metadata accessor for RunningBoardProvider(0LL);
  uint64_t v37 = &off_1001045A8;
  v35[0] = a1;
  uint64_t v33 = &type metadata for OSVariantProvider;
  uint64_t v34 = &off_100104478;
  uint64_t v30 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v31 = &off_100104BD0;
  v29[0] = a5;
  uint64_t v14 = type metadata accessor for ModelXPCDispatcher(0LL);
  uint64_t v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v16 = sub_100006F54((uint64_t)v35, v36);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)&v29[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = sub_100006F54((uint64_t)v32, (uint64_t)v33);
  __chkstk_darwin(v20);
  (*(void (**)(void))(v21 + 16))();
  uint64_t v22 = sub_100006F54((uint64_t)v29, v30);
  __chkstk_darwin(v22);
  uint64_t v24 = (void *)((char *)&v29[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_100004C4C(*v18, a2, a3, a4, *v24, a6, a7, v15);
  sub_100006F7C(v29);
  sub_100006F7C(v32);
  sub_100006F7C(v35);
  return v26;
}

uint64_t sub_100005B70(uint64_t a1, double a2)
{
  uint64_t v18 = type metadata accessor for PolicyManager(0LL);
  uint64_t v19 = &off_100102CB8;
  v17[0] = a1;
  uint64_t v15 = &type metadata for MemoryPressureEventProvider;
  uint64_t v16 = &off_100105218;
  uint64_t v4 = type metadata accessor for MemoryPressureObserver(0LL);
  uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v6 = sub_100006F54((uint64_t)v17, v18);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_100006F54((uint64_t)v14, (uint64_t)v15);
  __chkstk_darwin(v10);
  (*(void (**)(void))(v11 + 16))();
  uint64_t v12 = sub_100004F90(*v8, v5, a2);
  sub_100006F7C(v14);
  sub_100006F7C(v17);
  return v12;
}

uint64_t sub_100005CB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  uint64_t v38 = a8;
  __int128 v37 = a9;
  uint64_t v52 = type metadata accessor for ModelCatalogProvider(0LL);
  v53 = &off_100104BD0;
  v51[0] = a1;
  uint64_t v49 = type metadata accessor for FilesystemProvider();
  v50 = &off_100104560;
  v48[0] = a3;
  uint64_t v46 = type metadata accessor for RunningBoardProvider(0LL);
  v47 = &off_1001045A8;
  v45[0] = a4;
  uint64_t v43 = &type metadata for OSVariantProvider;
  v44 = &off_100104478;
  uint64_t v40 = &type metadata for MemoryPressureEventProvider;
  uint64_t v41 = &off_100105218;
  uint64_t v17 = type metadata accessor for DaemonContext();
  uint64_t v18 = swift_allocObject(v17, 392LL, 7LL);
  uint64_t v19 = sub_100006F54((uint64_t)v51, v52);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_100006F54((uint64_t)v48, v49);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_100006F54((uint64_t)v45, v46);
  __chkstk_darwin(v27);
  uint64_t v29 = (uint64_t *)((char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = sub_100006F54((uint64_t)v42, (uint64_t)v43);
  __chkstk_darwin(v31);
  (*(void (**)(void))(v32 + 16))();
  uint64_t v33 = sub_100006F54((uint64_t)v39, (uint64_t)v40);
  __chkstk_darwin(v33);
  (*(void (**)(void))(v34 + 16))();
  uint64_t v35 = sub_100006100(*v21, a2, *v25, *v29, a5, a6, a7, v38, v37, *((uint64_t *)&v37 + 1), a10, v18);
  sub_100006F7C(v39);
  sub_100006F7C(v42);
  sub_100006F7C(v45);
  sub_100006F7C(v48);
  sub_100006F7C(v51);
  return v35;
}

uint64_t sub_100005FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_100005FBC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100005FE0()
{
  uint64_t v1 = swift_task_alloc(dword_10010B21C);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_100007374;
  return sub_10000372C();
}

uint64_t sub_10000603C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

void sub_100006080(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = type metadata accessor for Assertion.DaemonRep(255LL);
    atomic_store(sub_1000075DC(v2), a1);
  }

  sub_1000075C0();
}

uint64_t sub_1000060B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_1000060C0(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010B208);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100006100( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v134 = a7;
  uint64_t v135 = a8;
  v132 = (void *)a10;
  uint64_t v18 = type metadata accessor for AssetPolicy(0LL);
  uint64_t v123 = *(void *)(v18 - 8);
  uint64_t v124 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
  __chkstk_darwin(v121);
  v122 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v148[3] = type metadata accessor for TelemetryManager();
  v148[4] = &off_1001050C8;
  v148[0] = a11;
  v147[3] = type metadata accessor for TrialFrameworkProvider();
  v147[4] = &off_100103F08;
  v147[0] = a5;
  v146[3] = type metadata accessor for ModelCatalogProvider(0LL);
  v146[4] = &off_100104BD0;
  v146[0] = a1;
  uint64_t v22 = a6;
  v145[3] = type metadata accessor for FilesystemProvider();
  v145[4] = &off_100104560;
  v145[0] = a3;
  uint64_t v23 = type metadata accessor for RunningBoardProvider(0LL);
  v144[4] = &off_1001045A8;
  v144[3] = v23;
  v144[0] = a4;
  v143[3] = &type metadata for OSVariantProvider;
  v143[4] = &off_100104478;
  v142[3] = &type metadata for MemoryPressureEventProvider;
  v142[4] = &off_100105218;
  uint64_t v24 = a12 + 64;
  sub_100007104((uint64_t)v146, a12 + 64);
  *(void *)(a12 + 152) = a2;
  v128 = (uint64_t *)(a12 + 160);
  sub_100007104((uint64_t)v145, a12 + 160);
  v133 = (uint64_t *)(a12 + 200);
  sub_100007104((uint64_t)v144, a12 + 200);
  uint64_t v125 = a12 + 240;
  sub_100007104((uint64_t)v147, a12 + 240);
  v129 = (uint64_t *)(a12 + 280);
  sub_100007104((uint64_t)v143, a12 + 280);
  uint64_t v131 = a2;
  if (a6)
  {
    swift_retain(a2);
    uint64_t v25 = a6;
  }

  else
  {
    type metadata accessor for InferenceProviderManager();
    swift_retain(a2);
    sub_100049BB4();
    uint64_t v25 = v26;
  }

  *(void *)(a12 + 16) = v25;
  sub_100007104((uint64_t)v148, a12 + 112);
  sub_100007104((uint64_t)v146, (uint64_t)&v149);
  uint64_t v27 = v134;
  uint64_t v28 = v135;
  uint64_t v126 = v22;
  v127 = (void *)(a12 + 112);
  v130 = (uint64_t *)(a12 + 64);
  if (v134)
  {
    swift_retain(v134);
    swift_retain(v22);
    swift_bridgeObjectRelease(v132);
    sub_100006F7C(&v149);
    uint64_t v29 = v27;
  }

  else
  {
    sub_100007104((uint64_t)&v149, (uint64_t)v140);
    uint64_t v31 = v123;
    uint64_t v30 = v124;
    (*(void (**)(char *, void, uint64_t))(v123 + 104))(v20, enum case for AssetPolicy.standard(_:), v124);
    swift_retain(v22);
    swift_retain(v25);
    uint64_t v32 = swift_retain(v131);
    uint64_t v33 = static Policy.defaultMemoryBudgetMarker.getter(v32);
    uint64_t v34 = v122;
    uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 16))(v122, v20, v30);
    uint64_t v36 = (int *)v121;
    *(void *)&v34[*(int *)(v121 + 20)] = v33;
    *(void *)&v34[v36[8]] = &_swiftEmptySetSingleton;
    static Policy.defaultInactiveAssetTimeout.getter(v35);
    *(void *)&v34[v36[6]] = 0x408C200000000000LL;
    sub_100052A5C();
    uint64_t v38 = v37;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v30);
    *(void *)&v34[v36[7]] = v38;
    sub_100007104(a12 + 112, (uint64_t)&v138);
    uint64_t v39 = sub_100006F54((uint64_t)v140, v141);
    __chkstk_darwin(v39);
    uint64_t v41 = (uint64_t *)((char *)&v120 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v42 + 16))(v41);
    uint64_t v43 = (uint64_t)v34;
    uint64_t v24 = (uint64_t)v130;
    uint64_t v29 = sub_10000512C(*v41, v25, v43, (uint64_t)v132, &v138, v131);
    sub_100006F7C(v140);
    uint64_t v28 = v135;
    sub_100006F7C(&v149);
  }

  *(void *)(a12 + 24) = v29;
  if (v28)
  {
    uint64_t v44 = v28;
  }

  else
  {
    uint64_t v45 = *(void *)(a12 + 152);
    sub_100007104((uint64_t)v127, (uint64_t)v140);
    sub_100007104(v24, (uint64_t)&v138);
    uint64_t v46 = sub_100006F54((uint64_t)&v138, v139);
    __chkstk_darwin(v46);
    v48 = (uint64_t *)((char *)&v120 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v49 + 16))(v48);
    uint64_t v50 = *v48;
    swift_retain_n(v29, 2LL);
    swift_retain(v45);
    uint64_t v44 = sub_10000522C(v29, v45, v140, v50);
    sub_100006F7C(&v138);
    swift_release(v29);
  }

  *(void *)(a12 + 32) = v44;
  sub_100007104((uint64_t)v128, (uint64_t)v140);
  sub_100007104(v24, (uint64_t)&v138);
  uint64_t v51 = sub_100006F54((uint64_t)v140, v141);
  __chkstk_darwin(v51);
  v53 = (uint64_t *)((char *)&v120 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v54 + 16))(v53);
  uint64_t v55 = sub_100006F54((uint64_t)&v138, v139);
  __chkstk_darwin(v55);
  v57 = (uint64_t *)((char *)&v120 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v58 + 16))(v57);
  uint64_t v59 = *v53;
  uint64_t v60 = *v57;
  swift_retain(v28);
  uint64_t v61 = sub_100005384(v59, v60);
  sub_100006F7C(&v138);
  sub_100006F7C(v140);
  *(void *)(a12 + 320) = v61;
  sub_100007104((uint64_t)v133, (uint64_t)v140);
  uint64_t v62 = *(void *)(a12 + 24);
  sub_100007104(v24, (uint64_t)&v138);
  uint64_t v63 = *(void *)(a12 + 32);
  sub_100007104((uint64_t)v127, (uint64_t)v136);
  uint64_t v64 = *(void *)(a12 + 16);
  swift_retain(v62);
  swift_retain(v63);
  swift_retain(v61);
  swift_retain(v64);
  v132 = (void *)a9;
  uint64_t v124 = v62;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100003F84( (uint64_t)&_swiftEmptyArrayStorage,  &qword_10010B298,  (void (*)(void *))sub_1000A7478,  (void (*)(void))type metadata accessor for DaemonSession,  (uint64_t (*)(uint64_t, uint64_t))sub_1000A7390);
    v127 = v119;
  }

  else
  {
    v127 = &_swiftEmptySetSingleton;
  }

  uint64_t v65 = sub_100006F54((uint64_t)v140, v141);
  __chkstk_darwin(v65);
  v67 = (uint64_t *)((char *)&v120 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v68 + 16))(v67);
  uint64_t v69 = sub_100006F54((uint64_t)&v138, v139);
  __chkstk_darwin(v69);
  v71 = (uint64_t *)((char *)&v120 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v72 + 16))(v71);
  v73 = sub_1000054C4(*v67, v124, *v71, v63, v136, v61, v64, (uint64_t)v127);
  sub_100006F7C(&v138);
  sub_100006F7C(v140);
  *(void *)(a12 + 40) = v73;
  uint64_t v74 = (uint64_t)v132;
  if (v132)
  {
    v75 = v132;
  }

  else
  {
    sub_100007104((uint64_t)v128, (uint64_t)v140);
    sub_100007104((uint64_t)v129, (uint64_t)&v138);
    uint64_t v77 = *(void *)(a12 + 24);
    uint64_t v76 = *(void *)(a12 + 32);
    sub_100007104((uint64_t)v130, (uint64_t)v136);
    uint64_t v78 = type metadata accessor for Policy(0LL);
    swift_retain(v76);
    swift_retain(v77);
    v127 = (void *)Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v78,  &protocol witness table for String);
    uint64_t v124 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v78,  &protocol witness table for String);
    uint64_t v79 = sub_100006F54((uint64_t)v140, v141);
    v128 = &v120;
    __chkstk_darwin(v79);
    v81 = (uint64_t *)((char *)&v120 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v82 + 16))(v81);
    uint64_t v83 = sub_100006F54((uint64_t)&v138, v139);
    __chkstk_darwin(v83);
    (*(void (**)(void))(v84 + 16))();
    uint64_t v85 = sub_100006F54((uint64_t)v136, v137);
    __chkstk_darwin(v85);
    v87 = (uint64_t *)((char *)&v120 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v88 + 16))(v87);
    uint64_t v89 = *v81;
    uint64_t v90 = *v87;
    uint64_t v74 = 0LL;
    swift_retain(v77);
    v75 = sub_100005650(v89, v76, v77, v90, (uint64_t)v127, v124, (uint64_t)&_swiftEmptyArrayStorage);
    sub_100006F7C(v136);
    swift_release(v77);
    sub_100006F7C(&v138);
    sub_100006F7C(v140);
  }

  *(void *)(a12 + 48) = v75;
  sub_100007104(v125, (uint64_t)&v149);
  uint64_t v91 = qword_10010B100;
  swift_retain(v74);
  swift_retain(v75);
  if (v91 != -1) {
    swift_once(&qword_10010B100, sub_10009D518);
  }
  uint64_t v92 = qword_1001100B0;
  swift_bridgeObjectRetain(qword_1001100B0);
  v93 = sub_1000058A8(&v149, (uint64_t)v75, v92);
  *(void *)(a12 + 56) = v93;
  uint64_t v94 = *(void *)(a12 + 24);
  uint64_t v96 = *(void *)(a12 + 40);
  uint64_t v95 = *(void *)(a12 + 48);
  uint64_t v97 = *(void *)(a12 + 32);
  uint64_t v98 = *(void *)(a12 + 320);
  v127 = *(void **)(a12 + 16);
  v128 = (uint64_t *)v98;
  *(void *)&__int128 v149 = v94;
  *((void *)&v149 + 1) = v127;
  *(void *)&__int128 v150 = v95;
  *((void *)&v150 + 1) = v96;
  *(void *)&__int128 v151 = v97;
  *((void *)&v151 + 1) = v98;
  v152 = v93;
  *(void *)(a12 + 384) = v93;
  __int128 v99 = v150;
  *(_OWORD *)(a12 + 336) = v149;
  *(_OWORD *)(a12 + 352) = v99;
  *(_OWORD *)(a12 + 368) = v151;
  sub_100007104((uint64_t)v133, (uint64_t)v140);
  sub_100007104((uint64_t)v129, (uint64_t)&v138);
  sub_100007104((uint64_t)v130, (uint64_t)v136);
  uint64_t v100 = sub_100006F54((uint64_t)v140, v141);
  v133 = &v120;
  __chkstk_darwin(v100);
  v102 = (uint64_t *)((char *)&v120 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v103 + 16))(v102);
  uint64_t v104 = sub_100006F54((uint64_t)&v138, v139);
  v130 = &v120;
  __chkstk_darwin(v104);
  (*(void (**)(void))(v105 + 16))();
  uint64_t v106 = sub_100006F54((uint64_t)v136, v137);
  v129 = &v120;
  __chkstk_darwin(v106);
  v108 = (uint64_t *)((char *)&v120 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v109 + 16))(v108);
  uint64_t v110 = *v102;
  uint64_t v111 = *v108;
  swift_retain_n(v94, 3LL);
  swift_retain_n(v95, 3LL);
  swift_retain_n(v96, 3LL);
  swift_retain_n(v97, 3LL);
  swift_retain_n(v127, 2LL);
  swift_retain_n(v128, 2LL);
  swift_retain_n(v93, 2LL);
  uint64_t v112 = sub_100005988(v110, v94, v96, v95, v111, &v149, v97);
  sub_100006F7C(v136);
  sub_100006F7C(&v138);
  sub_100006F7C(v140);
  *(void *)(a12 + 104) = v112;
  uint64_t v113 = *(void *)(a12 + 48);
  sub_100007104((uint64_t)v142, (uint64_t)v140);
  uint64_t v114 = sub_100006F54((uint64_t)v140, v141);
  __chkstk_darwin(v114);
  (*(void (**)(void))(v115 + 16))();
  uint64_t v116 = swift_retain_n(v113, 2LL);
  uint64_t v117 = sub_100005B70(v116, 600.0);
  sub_100006F7C(v140);
  swift_release(v131);
  swift_release(v135);
  swift_release(v132);
  swift_release(v113);
  swift_release(v134);
  swift_release(v126);
  sub_100006F7C(v148);
  sub_100006F7C(v142);
  sub_100006F7C(v143);
  sub_100006F7C(v147);
  sub_100006F7C(v144);
  sub_100006F7C(v145);
  sub_100006F7C(v146);
  *(void *)(a12 + 328) = v117;
  return a12;
}

uint64_t sub_100006DB8(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100006E20;
  return v5(v2 + 32);
}

uint64_t sub_100006E20()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000075AC();
  return sub_10000743C(v0);
}

uint64_t sub_100006E44()
{
  uint64_t v0 = sub_100007598();
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_100007390(v1);
  return sub_100007380(v2, v3, v4, v5);
}

uint64_t sub_100006E84()
{
  uint64_t v0 = sub_100007598();
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_100007390(v1);
  return sub_100007380(v2, v3, v4, v5);
}

uint64_t sub_100006EC4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100006EF0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100006F14()
{
  uint64_t v0 = sub_100007598();
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_100007390(v1);
  return sub_100007380(v2, v3, v4, v5);
}

uint64_t sub_100006F54(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_100006F7C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100006FA0()
{
  uint64_t v0 = swift_task_alloc(dword_10010FECC);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_1000D417C(v2, v3, v4, v5);
}

void *sub_100006FF4(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *sub_100007070(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  swift_release(a1[6]);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t sub_1000070EC(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_100007104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_1000075C0();
}

unint64_t sub_100007144()
{
  unint64_t result = qword_10010B2A8;
  if (!qword_10010B2A8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10010B2A8);
  }

  return result;
}

unint64_t sub_100007180()
{
  unint64_t result = qword_10010B2B0;
  if (!qword_10010B2B0)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10010B2B0);
  }

  return result;
}

void sub_1000071C0(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_10000603C(a2);
    atomic_store(sub_1000075DC(v3), a1);
  }

  sub_1000075C0();
}

uint64_t sub_1000071F8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100007224()
{
  uint64_t v0 = swift_task_alloc(dword_10010C0AC);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_1000074EC(v1);
  return sub_100023D08();
}

uint64_t sub_100007278()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_10000729C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_1000072C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void sub_10000732C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_100007380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100007390(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_1000073DC()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_1000073FC()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(v2 + 24);
  *uint64_t v3 = *v0;
  return swift_task_dealloc(v4);
}

uint64_t sub_100007418(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100007424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

uint64_t sub_10000743C(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_100007460(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_100007468(uint64_t a1)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v3, v1, a1);
}

  ;
}

uint64_t sub_10000749C(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_1000074A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 88) + 32LL))(a1, v2, v1);
}

void sub_1000074BC()
{
  *(void *)(v1 - 96) = v0 + 56;
}

uint64_t sub_1000074D8(uint64_t a1)
{
  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_1000074EC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_100007524(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

  ;
}

uint64_t sub_100007548()
{
  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_100007558(uint64_t result)
{
  *(void *)(v1 - 88) = *(void *)(result - 8);
  return result;
}

uint64_t sub_100007570()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

uint64_t sub_100007598()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

  ;
}

uint64_t sub_1000075AC()
{
  _BYTE *v0 = *(_BYTE *)(v1 + 32);
  return *(void *)(v2 + 8);
}

  ;
}

void sub_1000075C8(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v3 - 96) + 8 * a1) = v2 | v1;
}

uint64_t sub_1000075DC(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_1000075E8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010B2E0);
  sub_100003BA0(v0, (uint64_t)qword_10010B2E0);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

BOOL sub_100007658(char a1, char a2)
{
  return a1 == a2;
}

void sub_100007668(uint64_t a1, unsigned __int8 a2)
{
}

BOOL sub_10000768C(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

Swift::Int sub_10000769C(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000076E0(char *a1, char *a2)
{
  return sub_100007658(*a1, *a2);
}

Swift::Int sub_1000076EC()
{
  return sub_10000769C(*v0);
}

void sub_1000076F4(uint64_t a1)
{
}

Swift::Int sub_1000076FC(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_10000773C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10000768C(*a1, *a2);
}

BOOL sub_100007748(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100007754(*a1, *a2);
}

BOOL sub_100007754(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 >= a1;
}

BOOL sub_100007764(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000BC3EC(*a1, *a2);
}

BOOL sub_100007770(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10000777C(*a1, *a2);
}

BOOL sub_10000777C(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

void sub_10000778C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a1;
  uint64_t v67 = a5;
  uint64_t v65 = a3;
  uint64_t v70 = a2;
  uint64_t v69 = *(void *)(type metadata accessor for ModelCatalogAsset(0LL) - 8);
  sub_10000C240();
  __chkstk_darwin(v9);
  sub_10000C110();
  uint64_t v12 = (uint64_t *)(v10 - v11);
  __chkstk_darwin(v13);
  uint64_t v68 = (uint64_t)v56 - v14;
  uint64_t v15 = v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  sub_10000C074();
  sub_100003B20(&qword_10010B470);
  sub_10000BAC0(&qword_10010B478, type metadata accessor for DaemonRequest, (uint64_t)&unk_1000DAE90);
  uint64_t v16 = sub_10000C0E0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v17 = v6;
  uint64_t v18 = sub_10000C0E0((uint64_t)_swiftEmptyArrayStorage);
  *(_BYTE *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0LL;
  *(void *)(v15 + 16) = 0LL;
  *(void *)(v15 + 24) = 0LL;
  *(void *)(v15 + 32) = v16;
  uint64_t v19 = v66;
  *(void *)(v15 + 40) = v18;
  uint64_t v20 = v70;
  uint64_t v21 = v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_id;
  uint64_t v22 = sub_10000BE28();
  uint64_t v63 = *(void *)(v22 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v21, v19, v22);
  *(void *)(v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets) = v20;
  uint64_t v23 = (void *)(v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_acquireBlock);
  *uint64_t v23 = v65;
  v23[1] = a4;
  uint64_t v24 = (uint64_t *)(v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_releaseBlock);
  *uint64_t v24 = v67;
  v24[1] = a6;
  uint64_t v25 = (void *)qword_10010B080;
  swift_bridgeObjectRetain(v20);
  uint64_t v64 = a4;
  swift_retain();
  uint64_t v65 = a6;
  swift_retain();
  while (1)
  {
    uint64_t v26 = sub_10000BF6C();
    sub_100003BA0(v26, (uint64_t)qword_10010B2E0);
    sub_10000BD20(v17);
    uint64_t v27 = swift_bridgeObjectRetain(v20);
    Logger.logObject.getter(v27);
    int v28 = sub_10000C108();
    if (!os_log_type_enabled((os_log_t)v25, (os_log_type_t)v28))
    {
      sub_10000BCDC(v17);
      sub_10000C1B0(v20);

      swift_release(v64);
      __n128 v47 = swift_release(v65);
      (*(void (**)(uint64_t, uint64_t, __n128))(v63 + 8))(v19, v22, v47);
      goto LABEL_17;
    }

    int v59 = v28;
    uint64_t v61 = (os_log_s *)v25;
    uint64_t v29 = sub_10000BCF4(22LL);
    uint64_t v58 = sub_10000BCF4(64LL);
    uint64_t v72 = v58;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v25 = (void *)(v29 + 4);
    uint64_t v30 = sub_10000BAC0( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v62 = v22;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v22, v30);
    sub_100015EF8(v31, v32, &v72);
    v71 = v33;
    v57 = &v72;
    sub_10000C04C((uint64_t)&v71, (uint64_t)&v72);
    sub_10000BCDC(v17);
    sub_10000BD28();
    uint64_t v60 = (uint8_t *)v29;
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v22 = *(void *)(v20 + 16);
    if (!v22) {
      break;
    }
    v56[1] = v17;
    v71 = _swiftEmptyArrayStorage;
    sub_100016BD0(0, v22, 0);
    uint64_t v34 = sub_100020E24(v20);
    uint64_t v19 = v35;
    uint64_t v17 = v36 & 1;
    uint64_t v67 = v20 + 56;
    while ((v34 & 0x8000000000000000LL) == 0 && v34 < 1LL << *(_BYTE *)(v20 + 32))
    {
      if (*(_DWORD *)(v20 + 36) != (_DWORD)v19) {
        goto LABEL_20;
      }
      uint64_t v37 = v68;
      sub_10000B76C(*(void *)(v20 + 48) + *(void *)(v69 + 72) * v34, v68);
      sub_10000B7B0(v37, (uint64_t)v12);
      uint64_t v39 = *v12;
      uint64_t v38 = v12[1];
      swift_bridgeObjectRetain(v38);
      sub_10000B7F4((uint64_t)v12);
      uint64_t v40 = v71;
      if ((sub_10000BFBC() & 1) == 0)
      {
        sub_10000BDA4(0, v40[2] + 1LL);
        uint64_t v40 = v71;
      }

      unint64_t v42 = v40[2];
      unint64_t v41 = v40[3];
      uint64_t v25 = (void *)(v42 + 1);
      if (v42 >= v41 >> 1)
      {
        sub_10000BDA4(v41 > 1, v42 + 1);
        uint64_t v40 = v71;
      }

      v40[2] = v25;
      uint64_t v43 = &v40[2 * v42];
      v43[4] = v39;
      void v43[5] = v38;
      uint64_t v20 = v70;
      uint64_t v44 = sub_100020D3C(v34, v19, v17 & 1, v70);
      uint64_t v34 = v44;
      uint64_t v19 = v45;
      uint64_t v17 = v46 & 1;
      if (!--v22)
      {
        sub_10000B830(v44, v45, v46 & 1);
        uint64_t v19 = v66;
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once(&qword_10010B080, sub_1000075E8);
  }

LABEL_16:
  v48 = v60;
  uint64_t v49 = sub_10000C038();
  uint64_t v51 = v50;
  sub_10000BD28();
  sub_100015EF8(v49, v51, &v72);
  v71 = v52;
  sub_10000C04C((uint64_t)&v71, (uint64_t)v57);
  sub_10000C1B0(v20);
  swift_bridgeObjectRelease(v51);
  v53 = v61;
  sub_10000BFDC( (void *)&_mh_execute_header,  v61,  (os_log_type_t)v59,  "Created new execution group %s with assets %s",  v48);
  uint64_t v54 = v58;
  sub_10000BD8C();
  sub_10000BCC4(v54);
  sub_10000BCC4((uint64_t)v48);

  swift_release(v64);
  __n128 v55 = swift_release(v65);
  (*(void (**)(uint64_t, uint64_t, __n128))(v63 + 8))(v19, v62, v55);
LABEL_17:
  sub_100007448();
}

    uint64_t v8 = (v14 - 1) & v14;
    uint64_t v9 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_17;
  }

uint64_t sub_100007C98()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_id;
  uint64_t v2 = sub_10000BE28();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets));
  sub_10000C1CC(OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_acquireBlock);
  sub_10000C1CC(OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_releaseBlock);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState + 8);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState + 32);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState
                                      + 40));
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  sub_10000BF84();
  sub_10000C1F0();
  return v0;
}

uint64_t sub_100007D44()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100007D68()
{
  return _s14ExecutionGroupCMa(0LL);
}

uint64_t _s14ExecutionGroupCMa(uint64_t a1)
{
  uint64_t result = qword_10010B320;
  if (!qword_10010B320) {
    return swift_getSingletonMetadata(a1, &_s14ExecutionGroupCMn);
  }
  return result;
}

uint64_t sub_100007DA8(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for () + 64;
    v4[3] = (char *)&value witness table for () + 64;
    v4[4] = "0";
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AssetInferenceProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwxx(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwcp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v7;
  swift_retain(v7);
  swift_release(v6);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v8);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 _s14ExecutionGroupC17ManagerOwnedStateVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwta(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  swift_release(*(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s14ExecutionGroupC17ManagerOwnedStateVMa()
{
  return &_s14ExecutionGroupC17ManagerOwnedStateVN;
}

uint64_t sub_1000080E8()
{
  return sub_10000BAC0(&qword_10010B3C8, type metadata accessor for RequestManager, (uint64_t)&unk_1000DAC74);
}

uint64_t sub_100008114(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100008148 + 4 * byte_1000D8910[a1]))( 0x6C616974696E69LL,  0xE700000000000000LL);
}

uint64_t sub_100008148()
{
  return 0x6E69726975716361LL;
}

uint64_t sub_100008184()
{
  return 1701736292LL;
}

uint64_t sub_100008194()
{
  return sub_100008114(*v0);
}

void sub_10000819C()
{
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10000C110();
  uint64_t v5 = v3 - v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
  uint64_t v10 = *(void *)(v9 + 56);
  uint64_t v31 = v9 + 56;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  sub_10000C2A8(v9);
  int64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v17 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v15 << 6))
  {
    sub_10000B76C(*(void *)(v9 + 48) + *(void *)(v2 + 72) * i, (uint64_t)v8);
    uint64_t v27 = sub_10000B7B0((uint64_t)v8, v5);
    uint64_t v28 = AssetCost.onDeviceMemory.getter(v27);
    BOOL v29 = __CFADD__(v16, v28);
    v16 += v28;
    if (v29)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    sub_10000B7F4(v5);
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      sub_10000C0B8();
      if (!v20)
      {
        int64_t v15 = v21 + 2;
        if (v21 + 2 >= v14) {
          goto LABEL_26;
        }
        sub_10000C0B8();
        if (!v20)
        {
          int64_t v15 = v22 + 3;
          if (v22 + 3 >= v14) {
            goto LABEL_26;
          }
          sub_10000C0B8();
          if (!v20)
          {
            int64_t v15 = v23 + 4;
            if (v23 + 4 >= v14) {
              goto LABEL_26;
            }
            sub_10000C0B8();
            if (!v20) {
              break;
            }
          }
        }
      }
    }

LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
  }

  int64_t v25 = v24 + 5;
  if (v25 >= v14)
  {
LABEL_26:
    sub_10000C1F0();
    swift_bridgeObjectRelease();
    sub_100007448();
    return;
  }

  unint64_t v20 = *(void *)(v31 + 8 * v25);
  if (v20)
  {
    int64_t v15 = v25;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v15 >= v14) {
      goto LABEL_26;
    }
    sub_10000C0B8();
    int64_t v25 = v26 + 1;
    if (v20) {
      goto LABEL_22;
    }
  }

  v71 = 0LL;
  uint64_t v72 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v58._object = (void *)0x80000001000DB590LL;
  v58._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v58);
  _print_unlocked<A, B>(_:_:)( &v73,  &v71,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v59._countAndFlagsBits = 39LL;
  v59._object = (void *)0xE100000000000000LL;
  String.append(_:)(v59);
  sub_1000222FC();
  __n128 result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v71,  v72,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

      uint64_t v12 = (v18 - 1) & v18;
    }
  }

  swift_release(v6);
  uint64_t v39 = v42;
LABEL_34:
  *uint64_t v39 = v8;
}

    unint64_t v13 = (v19 - 1) & v19;
  }

  unint64_t v20 = v18 + 3;
  if (v20 < v33)
  {
    int64_t v19 = v34[v20];
    if (!v19)
    {
      while (1)
      {
        int64_t v15 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_41;
        }
        if (v15 >= v33) {
          goto LABEL_34;
        }
        int64_t v19 = v34[v15];
        ++v20;
        if (v19) {
          goto LABEL_22;
        }
      }
    }

    int64_t v15 = v20;
    goto LABEL_22;
  }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  int64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    unint64_t v13 = (v19 - 1) & v19;
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_34:
    swift_release_n(v7, 2LL);
    uint64_t v2 = v31;
    goto LABEL_36;
  }

  int64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19)
  {
    int64_t v15 = v20;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_34;
    }
    int64_t v19 = *(void *)(v32 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }

  uint64_t v11 = &_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v11;
}

      sub_1000B43FC();
      sub_1000B400C();
      sub_1000B4110();
      if (!v25) {
        goto LABEL_25;
      }
    }

    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_once(&qword_10010B110, sub_1000A9510);
  }

  uint64_t v1 = v0[5];
LABEL_25:
  uint64_t v26 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask;
  uint64_t v27 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask);
  v0[17] = v27;
  if (v27)
  {
    sub_10000C030();
    uint64_t v28 = (void *)sub_10002287C();
    v0[18] = v28;
    sub_100003B20(&qword_10010B468);
    BOOL v29 = sub_1000ABFAC;
LABEL_29:
    *uint64_t v28 = v0;
    v28[1] = v29;
    sub_1000B459C();
    return sub_1000B3FF0();
  }

  else
  {
    uint64_t v30 = v0[6];
    uint64_t v31 = sub_100021FC8();
    sub_10002FF3C(v30, v32, v33, v31);
    sub_1000B3968(&qword_10010ECD8, type metadata accessor for ModelCatalogProvider);
    uint64_t v34 = (void *)sub_100007460((uint64_t)&unk_100104D80, 40LL);
    uint64_t v35 = sub_1000B4148(v34);
    sub_1000B448C(v35, (uint64_t)&unk_10010ED10);
    sub_1000B4334(v36);
    uint64_t v37 = *(void *)(v1 + v26);
    v0[20] = v37;
    if (v37)
    {
      sub_10000C030();
      uint64_t v28 = (void *)sub_10002287C();
      v0[21] = v28;
      sub_100003B20(&qword_10010B468);
      BOOL v29 = sub_1000AC038;
      goto LABEL_29;
    }

    sub_1000B4100();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    uint64_t v40 = (uint64_t (*)(void))sub_1000227B8();
    return sub_10002FDE0(v40);
  }

    swift_once(&qword_10010B1F0, sub_1000BD7F0);
    goto LABEL_12;
  }

  v48 = *(void *)(v0 + 80);
  uint64_t v49 = *(void *)(v31 + *(int *)(*(void *)(v0 + 112) + 48LL));
  *(void *)(v0 + 152) = v49;
  uint64_t v50 = *(void (**)(void))(v48 + 8);
  v50();
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  uint64_t v51 = v0 + 56;
  uint64_t v52 = v0;
  v53 = *(os_log_s **)(v0 + 88);
  uint64_t v54 = sub_10000BF6C();
  sub_100003BA0(v54, (uint64_t)qword_10010F3D8);
  __n128 v55 = sub_100084F2C();
  sub_100083B50(v55, v56, v57);
  sub_10000BD20(v49);
  sub_10003D390();
  uint64_t v58 = sub_10000C160();
  int v59 = os_log_type_enabled(v53, v58);
  uint64_t v60 = *(void *)(v51 + 32);
  uint64_t v61 = *(void *)(v51 + 16);
  if (v59)
  {
    uint64_t v82 = v52;
    uint64_t v62 = sub_10000BCF4(22LL);
    uint64_t v85 = sub_10000BCF4(64LL);
    *(_DWORD *)uint64_t v62 = 136315394;
    sub_100021AD0(&qword_10010B420, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v63 = sub_1000D10C4();
    sub_1000D0F98(v63, v64);
    *(void *)(v52 + 40) = v65;
    uint64_t v66 = v52 + 40;
    uint64_t v67 = (void *)(v52 + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, v67);
    sub_1000228C4();
    ((void (*)(uint64_t, uint64_t))v50)(v60, v61);
    *(_WORD *)(v62 + 12) = 2080;
    uint64_t v68 = sub_1000D10C4();
    sub_1000D0F98(v68, v69);
    uint64_t *v67 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, v51);
    sub_10000BCDC(v49);
    sub_10000BD28();
    sub_10000BFDC( (void *)&_mh_execute_header,  v53,  v58,  "ExecutionGroup %s waiting for group %s to complete",  (uint8_t *)v62);
    sub_10000BD8C();
    sub_10000BCC4(v85);
    sub_10000BCC4(v62);

    v71 = v82;
  }

  else
  {
    ((void (*)(void, void))v50)(*(void *)(v51 + 32), *(void *)(v51 + 16));

    sub_10000BCDC(v49);
    v71 = v52;
  }

  uint64_t v72 = (void *)swift_task_alloc(dword_10010B4C4);
  *(void *)(v71 + 160) = v72;
  *uint64_t v72 = v71;
  v72[1] = sub_1000BEEA4;
  v73 = sub_1000D03E4(*(void *)(v71 + 64));
  return sub_1000084EC(v73);
}

        sub_1000304F8();
        __break(1u);
        goto LABEL_23;
      }

LABEL_29:
  __break(1u);
}

  if (v5)
  {
    if (a1 < 0) {
      uint64_t v27 = a1;
    }
    else {
      uint64_t v27 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v24 = _CocoaArrayWrapper.subscript.getter(v7, v6, v27);
    int64_t v25 = v28;
    uint64_t v7 = v29;
    uint64_t v26 = v30;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8LL;
    int64_t v25 = (a1 & 0xFFFFFFFFFFFFFF8LL) + 32;
    uint64_t v26 = (2 * v6) | 1;
    swift_bridgeObjectRetain(a1);
  }

  sub_100080094(v24, v25, v7, v26);
  swift_unknownObjectRelease(v24);
  swift_bridgeObjectRelease(a1);
  swift_release(v4);
}

  sub_1000225A4();
  v128 = sub_100084C3C();
  sub_100022B4C();
  if (!v128) {
    goto LABEL_30;
  }
LABEL_3:
  uint64_t v5 = v2 + 28;
  sub_100085F34();
  uint64_t v4 = v2[29];
  uint64_t v6 = sub_1000225A4();
  uint64_t v7 = sub_100085208(v6);
  uint64_t v9 = v8;
  uint64_t v10 = sub_100022B4C();
  v273 = v2;
  v264 = *(void *)(v9 + 16);
  if (!v264)
  {
    Logger.logObject.getter(v10);
    uint64_t v39 = sub_100084270();
    uint64_t v40 = sub_100083DF0(v1);
    unint64_t v41 = v2[50];
    unint64_t v42 = v2[51];
    if (v40)
    {
      v276 = v2[56];
      v270 = v9;
      uint64_t v43 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v44 = sub_10000BCF4(32LL);
      sub_100084308(v44);
      v275 = v42;
      sub_100085888(4.8149e-34);
      v265 = v45;
      sub_10002FFE4((uint64_t)(v2 + 29), (uint64_t)(v2 + 20));
      v233 = v7;
      char v46 = sub_100022DB0();
      sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
      __n128 v47 = sub_100021EB0();
      sub_1000851AC(v47, v46);
      sub_10000C1E0();
      sub_100085730();
      *uint64_t v5 = v48;
      uint64_t v49 = sub_1000854A8();
      sub_100084490(v49, v50, v265);
      sub_100022D34();
      sub_100022210( (void *)&_mh_execute_header,  v1,  v39,  "All remaining assets that need transitioning have failed to unload or move to dynamic, %s",  v43);
      sub_100021F38((uint64_t)v5);
      sub_10000BCC4((uint64_t)v5);
      sub_10000BCC4((uint64_t)v43);

      int v59 = sub_1000850F0( v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v184,  v192,  v200,  v208,  (uint64_t)v216,  v224,  v233,  (uint64_t)v241,  v247,  v253,  v259,  v265,  v270);
      sub_100083970(v59, v60, v61, v62, v63, v64, v65, v66, v185, v193, v201, v209, v217, v225, v234);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v276, v41);
    }

    else
    {

      sub_1000308D8();
      sub_10000C280();
      uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      uint64_t v117 = sub_1000307DC();
      v116(v117, v118);
    }

    sub_1000846EC(v2[55]);
    sub_1000839EC();
    goto LABEL_33;
  }

  v200 = (uint64_t)(v2 + 23);
  v208 = (uint64_t)(v2 + 28);
  v192 = (uint64_t)(v2 + 26);
  v253 = v2[51];
  v259 = (uint64_t)(v2 + 14);
  v216 = v2 + 27;
  v224 = (uint64_t)(v2 + 17);
  v247 = v2[47];
  sub_10002FF3C(v2[35], v11, v12, v2[50]);
  v232 = v7;
  sub_10000C278();
  sub_1000837AC();
  unint64_t v13 = 0LL;
  v269 = v9;
  while (1)
  {
    if (v13 >= *(void *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_29;
    }

    v276 = v2[61];
    v277 = v2[56];
    int64_t v15 = v2[53];
    int64_t v14 = v2[54];
    uint64_t v16 = v2[50];
    uint64_t v1 = (os_log_s *)v2[48];
    v275 = v2[32] + v2[60];
    sub_10002FFE4( *(void *)(v9 + 8 * v13 + 32) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v259);
    unint64_t v17 = sub_100085A7C();
    sub_1000849DC(v17, v18);
    int64_t v19 = (char *)v1 + *(int *)(v247 + 36);
    unint64_t v20 = (char *)v1 + *(int *)(v247 + 32);
    sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_1000224B4();
    uint64_t v21 = (sub_1000852F8() & 1) != 0 ? v20 : v19;
    uint64_t v2 = v273;
    v241 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v253 + 16);
    v241(v15, (uint64_t)v21, v16);
    sub_100084D50((uint64_t)v1);
    static Date.+ infix(_:_:)(v15, *(double *)(v275 + *(int *)(v276 + 28)));
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v253 + 8);
    sub_1000856D4(v15);
    uint64_t v4 = static Date.> infix(_:_:)(v14, v277);
    uint64_t v23 = sub_100021DDC();
    if ((v4 & 1) != 0) {
      break;
    }
    ++v13;
    uint64_t v31 = v22(v273[54], v273[50]);
    uint64_t v9 = v269;
    if (v264 == v13)
    {
      sub_100083970(v31, v32, v33, v34, v35, v36, v37, v38, v184, v192, v200, v208, (uint64_t)v216, v224, v232);
      sub_1000308D8();
      goto LABEL_15;
    }
  }

  uint64_t v67 = v273[51];
  uint64_t v68 = v273[35];
  sub_100083970(v23, v24, v25, v26, v27, v28, v29, v30, v184, v192, v200, v208, (uint64_t)v216, v224, v232);
  uint64_t v9 = v269;
  uint64_t v69 = sub_1000308D8();
  sub_100084028(v69, &qword_10010DAD0);
  sub_100083158(v68, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32));
  sub_100083478(v68);
LABEL_15:
  uint64_t v70 = v273[50];
  v71 = v273[34];
  sub_1000834C8(v273[35]);
  uint64_t v72 = sub_1000060B4(v71, 1LL, v70);
  sub_100083C64(v71);
  if (v72 == 1)
  {
    sub_10000BD20(v232);
    v73 = sub_10000BD20(v9);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    v75 = static os_log_type_t.fault.getter();
    uint64_t v76 = sub_100083B48(v74);
    uint64_t v77 = v273[50];
    if (v76)
    {
      v278 = v273[56];
      uint64_t v78 = (uint8_t *)sub_10000BCF4(12LL);
      v275 = sub_10000BCF4(32LL);
      v279 = v275;
      v276 = v77;
      *(_DWORD *)uint64_t v78 = 136315138;
      v264 = (uint64_t)(v78 + 4);
      sub_10000C0A0();
      sub_1000837AC();
      uint64_t v79 = v9;
      uint64_t v80 = sub_100085EBC(v232);
      uint64_t v82 = v81;
      sub_1000304F8();
      sub_10000BF84();
      uint64_t v2 = v273;
      sub_100015EF8(v80, v82, &v279);
      *v216 = v83;
      sub_1000851D8((uint64_t)v216, v208, (uint64_t)(v78 + 4));
      sub_10000BD28();
      sub_10000BCDC(v232);
      sub_10000BCDC(v79);
      sub_100022210( (void *)&_mh_execute_header,  v74,  v75,  "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task",  v78);
      sub_100021F38(v275);
      sub_10000BCC4(v275);
      sub_10000BCC4((uint64_t)v78);

      sub_1000304F8();
      sub_10000BF84();
      uint64_t v85 = v77;
      uint64_t v84 = v278;
    }

    else
    {

      sub_10008332C(v232);
      sub_10008332C(v9);
      uint64_t v84 = sub_1000307DC();
    }

    v22(v84, v85);
    v22(v2[55], v2[50]);
    goto LABEL_27;
  }

  uint64_t v86 = v273[56];
  v87 = v273[52];
  uint64_t v88 = *(void *)(v273[57] - 8LL);
  uint64_t v89 = sub_100021CF0(*(void *)(v88 + 64));
  sub_100083158(v89, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 16));
  sub_100085CA8(v87, v86, v90, v91, v92, v93, v94, v95, v184, v192, v200, v208, (uint64_t)v216, v224, v232, v241);
  uint64_t v96 = (void *)sub_1000228BC();
  uint64_t v97 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v96, v97))
  {

    v108 = sub_10008376C();
    goto LABEL_26;
  }

  uint64_t v98 = v273[35];
  __int128 v99 = v273[33];
  uint64_t v100 = (uint8_t *)sub_10000BCF4(12LL);
  *(_DWORD *)uint64_t v100 = 134217984;
  uint64_t v101 = sub_10002FFE4(v98, v202);
  sub_1000845D0(v101, v102, &qword_10010DAD0);
  sub_100083334(v99);
  if (!v103)
  {
    uint64_t v104 = v273[52];
    uint64_t v105 = v273[33];
    sub_100085914();
    uint64_t v107 = v106;
    sub_100083D8C(v105);
    v273[26] = v107;
    uint64_t v2 = v273;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v194, v218);
    sub_100083D8C(v104);
    sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v96,  v97,  "Additional assets need transitioning, next task wake in %f seconds",  v100);
    sub_10000BCC4((uint64_t)v100);

LABEL_26:
    sub_100083970(v108, v109, v110, v111, v112, v113, v114, v115, v186, v194, v202, v210, v218, v226, v235);
    sub_1000308D8();
    uint64_t v123 = v2[56];
    uint64_t v124 = v2[55];
    sub_1000307BC(v88);
    sub_100083D8C(v123);
    sub_100083D8C(v124);
    sub_10002FF04();
LABEL_27:
    uint64_t v125 = v2[35];
    uint64_t v126 = sub_100085030();
    sub_10002FFE4(v126, v127);
    sub_1000834C8(v125);
    sub_100083AE4();
    goto LABEL_34;
  }

  sub_10002F99C(v273[35], &qword_10010DAD0);
  __break(1u);
}

          uint64_t v58 = *(void *)(v0 + 432);
          v57 = *(void *)(v0 + 440);
          int v59 = *(void *)(*(void *)(v57 + *(int *)(v414 + 48)) + 16LL);
          sub_10008424C(v57);
          sub_100083850(v51, v58);
          uint64_t v7 = v320;
          if (v59) {
            goto LABEL_30;
          }
          sub_100085548();
          sub_10008424C(v60);
          sub_100083734();
          if (v58) {
            goto LABEL_32;
          }
          sub_100084A0C();
          if (!(!v41 & v72))
          {
            sub_100085D34( v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v272,  v284,  (uint64_t)v296,  v308,  v320,  (uint64_t)v332,  v344,  v359,  v373,  v386,  v396,  v405,  v414,  v423,  (uint64_t)v429,  (uint64_t)v432,  (uint64_t)v434,  v435[0],  v435[1],  v435[2],  v435[3],  v435[4],  v435[5],  v435[6]);
            v71 = (uint64_t)v434;
          }

          sub_100085C80( v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v272,  v284,  v71,  v308,  v320,  (uint64_t)v332,  v344,  v359,  v373,  v386,  v396,  v405,  v414,  v423,  (uint64_t)v429,  (uint64_t)v432,  (uint64_t)v434,  v435[0]);
          sub_100084D48((uint64_t)v435);
          Hasher._finalize()();
          sub_100082D00();
          if (!v41)
          {
            sub_100082E1C();
            goto LABEL_45;
          }

          sub_100082E08();
          while (1)
          {
            sub_100083820();
            if (v41 && (v74 & 1) != 0) {
              break;
            }
            sub_100083980();
            sub_10008310C();
            if (!v41)
            {
              sub_100082DF4();
LABEL_45:
              sub_100082F0C(v73);
LABEL_33:
              uint64_t v27 = __CocoaSet.Iterator.next()(v61);
              if (!v27)
              {
LABEL_47:
                v75 = sub_10000BCDC(*(void *)(v0 + 304));
                sub_100085514( v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v272,  v284,  (uint64_t)v296,  v308,  v320,  (uint64_t)v332,  v344,  v359,  v373,  v386,  v396,  v405);
                uint64_t v28 = 0LL;
                uint64_t v83 = (uint64_t)v296;
                goto LABEL_49;
              }

              goto LABEL_15;
            }
          }

          __break(1u);
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }

        sub_10000C1B0(*(void *)(v0 + 192));
      }
    }

    v53 = *(void *)(v0 + 448);
    uint64_t v54 = *(void *)(v0 + 360);
    uint64_t v5 = *(void *)(v0 + 336);
    sub_100083680(*(void *)(v0 + 352));
    sub_10008424C(v53);
    sub_100083680(v54);
    uint64_t v51 = (uint64_t)v432;
    __n128 v55 = sub_100085FB0();
    sub_100083850(v55, v56);
    goto LABEL_29;
  }

  sub_100021D80();
  uint64_t v84 = sub_100022944();
  uint64_t v83 = sub_100083D00(v84, v28, (uint64_t)sub_100053ECC);
LABEL_49:
  uint64_t v85 = sub_1000854CC(v83);
  uint64_t v86 = sub_1000CAF08(v85);
  sub_10000C280();
  v435[0] = (uint64_t)v86;
  sub_100083FA4(v435, (uint64_t (*)(uint64_t, uint64_t))sub_1000539CC);
  if (v28)
  {
    sub_100083FDC(v435[0]);
    return;
  }

  sub_10000C280();
  uint64_t v51 = v435[0];
  if (v435[0] < 0 || (v435[0] & 0x4000000000000000LL) != 0)
  {
LABEL_77:
    v264 = sub_10000C278();
    v87 = _CocoaArrayWrapper.endIndex.getter(v264);
    sub_10000C280();
    if (!v87) {
      goto LABEL_78;
    }
    goto LABEL_54;
  }

  v87 = *(void *)(v435[0] + 16);
  if (!v87)
  {
LABEL_78:
    v265 = *(void **)(v0 + 536);
    sub_10000C280();
    v266 = sub_10000C1E0();
    Logger.logObject.getter(v266);
    v267 = sub_100022604();
    if (sub_10002275C(v267))
    {
      v268 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v268);
      sub_10003F1B4( (void *)&_mh_execute_header,  v269,  v270,  "While unloading assets for pending version change: no more assets can be unloaded, attempting version switch");
      sub_10000BCC4(v87);
    }

    sub_100085B54(&dword_10010B8D8);
    sub_1000224B4();
    v271 = (void *)sub_100022D14();
    *(void *)(v0 + 584) = v271;
    *v271 = v0;
    v271[1] = sub_100078018;
    sub_100083FFC(v432);
    return;
  }

      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

  sub_1000301C0();
  sub_1000301C0();
  sub_100022BF8(v112, *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8));
  sub_10000C1B0((uint64_t)v110);
  sub_10000C1B0(v106);
  sub_100095FF4(v97, *(uint64_t (**)(uint64_t, void))(v98 + 8));
  __break(1u);
}

              sub_1000212AC(v29);
              return v34;
            }
          }
        }
      }
    }

uint64_t sub_1000083A0(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return sub_10000C088((uint64_t)sub_1000083B4, a1);
}

uint64_t sub_1000083B4()
{
  uint64_t result = sub_10000BE64((uint64_t)v1, v0 + 16, 0LL);
  if (*v1 > 1u) {
    return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
  }
  uint64_t v3 = *((void *)v1 + 1);
  *(void *)(v0 + 56) = v3;
  if (v3)
  {
    uint64_t v4 = async function pointer to Task.value.getter[1];
    sub_10000C030();
    uint64_t v5 = (void *)swift_task_alloc(v4);
    *(void *)(v0 + 64) = v5;
    uint64_t v6 = sub_100003B20(&qword_10010B468);
    *uint64_t v5 = v0;
    v5[1] = sub_100008484;
    return Task.value.getter( v0 + 72,  v3,  &type metadata for Bool,  v6,  &protocol self-conformance witness table for Error);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100008484()
{
  if (v1) {
    swift_errorRelease(v1);
  }
  sub_10000BF84();
  sub_10000C0D4();
  return sub_10000BF5C();
}

uint64_t sub_1000084EC(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return sub_10000C088((uint64_t)sub_100008500, a1);
}

uint64_t sub_100008500( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void *)(v12 + 48) + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  uint64_t result = sub_10000BE64(v13, v12 + 16, 0LL);
  if (*(_BYTE *)v13 == 4) {
    return (*(uint64_t (**)(void))(v12 + 8))();
  }
  uint64_t v15 = *(void *)(v13 + 24);
  *(void *)(v12 + 56) = v15;
  if (v15)
  {
    uint64_t v16 = async function pointer to Task<>.value.getter[1];
    sub_10000C030();
    unint64_t v17 = (void *)swift_task_alloc(v16);
    *(void *)(v12 + 64) = v17;
    *unint64_t v17 = v12;
    v17[1] = sub_1000085B0;
    return Task<>.value.getter(v17, v15, (char *)&type metadata for () + 8, v18, v19, v20, v21, v22, a9, a10, a11, a12);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000085B0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_10000BCE4(*(void *)(v0 + 64));
  swift_release(v1);
  sub_10000C0D4();
  return sub_10000BCD0();
}

uint64_t sub_1000085F0()
{
  uint64_t v7 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  sub_1000CAE8C();
  uint64_t v2 = v1;
  sub_10000B4BC(&v7);
  uint64_t v6 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_1000CAE8C();
  unint64_t v4 = v3;
  sub_10000B4BC(&v6);
  sub_1000CAB64(v4);
  return v2;
}

uint64_t sub_100008664()
{
  uint64_t v0 = type metadata accessor for RequestPriority(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10000C110();
  uint64_t v4 = v2 - v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - v6;
  unint64_t v8 = sub_1000085F0();
  uint64_t v9 = v8;
  if (v8 >> 62) {
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v10)
  {
    unint64_t v25 = v9 & 0xC000000000000001LL;
    unsigned int v24 = enum case for RequestPriority.foreground(_:);
    uint64_t v11 = 4LL;
    uint64_t v23 = v7;
    while (1)
    {
      uint64_t v12 = v25 ? specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v9) : swift_retain();
      if (__OFADD__(v11 - 4, 1LL)) {
        break;
      }
      uint64_t v27 = v11 - 3;
      uint64_t v13 = *(void *)(v12 + 64);
      uint64_t v14 = (*(unsigned int *)(*(void *)v13 + 48LL) + 3LL) & 0x1FFFFFFFCLL;
      uint64_t v28 = v12;
      uint64_t v15 = (os_unfair_lock_s *)(v13 + v14);
      os_unfair_lock_lock((os_unfair_lock_t)(v13 + v14));
      sub_1000D1998();
      os_unfair_lock_unlock(v15);
      (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v4, v24, v0);
      sub_10000BAC0( &qword_10010B4D0,  (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority,  (uint64_t)&protocol conformance descriptor for RequestPriority);
      sub_10000C1C0();
      sub_10000C1C0();
      if (v31 == v29 && v32 == v30)
      {
        sub_10000C1B0(v32);
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
        v19(v4, v0);
        v19((uint64_t)v7, v0);
        swift_release();
LABEL_16:
        uint64_t v18 = 1LL;
        goto LABEL_17;
      }

      int v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v29, v30, 0LL);
      sub_10000BD28();
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
      uint64_t v7 = v23;
      v17(v4, v0);
      v17((uint64_t)v7, v0);
      swift_release();
      if ((v26 & 1) != 0) {
        goto LABEL_16;
      }
      ++v11;
      if (v27 == v10) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_19:
    if (v9 < 0) {
      uint64_t v21 = v9;
    }
    else {
      uint64_t v21 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000C2A8(v9);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v21);
    sub_10000C000();
  }

LABEL_14:
  uint64_t v18 = 0LL;
LABEL_17:
  sub_10000C1B0(v9);
  return v18;
}

    if ((sub_10004F550(v8[3], v1[3]) & 1) != 0
      && (static AssetCost.== infix(_:_:)((char *)v8 + *(int *)(v50 + 28), (char *)v1 + *(int *)(v50 + 28)) & 1) != 0)
    {
      sub_1000226FC();
      if (v21)
      {
        sub_1000226FC();
        if (v21)
        {
          sub_1000226FC();
          if (v21)
          {
            sub_10002282C((uint64_t)v8);
            sub_100022024();
            sub_10002282C((uint64_t)v1);
            sub_10002270C(*(void *)(*v47 + 48LL) + v17, v48);
            goto LABEL_48;
          }
        }
      }
    }

    goto LABEL_44;
  }

  sub_100022024();
LABEL_47:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v45 = v49;
  sub_100021A5C((uint64_t)v1, (uint64_t)v49, type metadata accessor for ModelCatalogAsset);
  uint64_t v54 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  sub_10001BB38(v45, v14, isUniquelyReferenced_nonNull_native);
  char v46 = *v4;
  *uint64_t v4 = v54;
  swift_bridgeObjectRelease(v46);
  sub_100021AB0((uint64_t)v1, v2, type metadata accessor for ModelCatalogAsset);
LABEL_48:
  sub_100007448();
}

  uint64_t v16 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  unint64_t v17 = *(void *)(v16 + 48) + 16 * a3;
  *(void *)unint64_t v17 = a1;
  *(_DWORD *)(v17 + 8) = a2;
  uint64_t v18 = *(void *)(v16 + 16);
  uint64_t v19 = __OFADD__(v18, 1LL);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v20;
  }
}

  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = __OFADD__(v20, 1LL);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

    uint64_t v21 = *(_OWORD *)v19;
    uint64_t v22 = *((_OWORD *)v19 + 1);
    *((void *)v18 + 4) = *((void *)v19 + 4);
    *(_OWORD *)uint64_t v18 = v21;
    *((_OWORD *)v18 + 1) = v22;
    goto LABEL_15;
  }

  if (!v20)
  {
    sub_100006F7C(v18);
    goto LABEL_14;
  }

  sub_10004D298(v18, v19);
LABEL_15:
  uint64_t v23 = *(int *)(a3 + 24);
  unsigned int v24 = *(void *)((char *)a2 + v23);
  unint64_t v25 = *(void *)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

  __break(1u);
  return result;
}

  __break(1u);
}

uint64_t sub_100008904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_100003B20(&qword_10010B408);
  uint64_t v75 = *(void *)(v10 - 8);
  uint64_t v76 = v10;
  sub_10000C240();
  __chkstk_darwin(v11);
  sub_10000C120();
  uint64_t v74 = v13 - v12;
  sub_100003B20(&qword_10010B208);
  sub_10000C240();
  __chkstk_darwin(v14);
  sub_10000C120();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = (unsigned __int8 *)(v4 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState);
  uint64_t result = swift_beginAccess( v4 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  v79,  1LL,  0LL);
  int v20 = *v18;
  if ((v20 - 1) >= 2)
  {
    if ((v20 - 3) < 2)
    {
      if (qword_10010B080 != -1) {
        swift_once(&qword_10010B080, sub_1000075E8);
      }
      uint64_t v21 = type metadata accessor for Logger(0LL);
      sub_100003BA0(v21, (uint64_t)qword_10010B2E0);
      sub_10000BD20(v4);
      uint64_t v22 = sub_10000BD20(a2);
      uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = sub_10000BCF4(32LL);
        uint64_t v77 = sub_10000BCF4(96LL);
        uint64_t v80 = v77;
        *(_DWORD *)uint64_t v25 = 136315650;
        RequestMetadata.id.getter(v77);
        unint64_t v26 = sub_10000B4E4();
        dispatch thunk of CustomStringConvertible.description.getter(v76, v26);
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
        sub_10000C0A8();
        sub_10000BED0();
        sub_10000BCDC(a2);
        sub_10000C1E8();
        *(_WORD *)(v25 + 12) = 2080;
        type metadata accessor for UUID(0LL);
        uint64_t v27 = sub_10000BAC0( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v28 = sub_10000C290(v27);
        sub_10000C054(v28, v29);
        sub_10000BED0();
        sub_10000BCDC(v5);
        sub_10000BD28();
        *(_WORD *)(v25 + 22) = 2080;
        uint64_t v30 = sub_100008114(v20);
        sub_10000C054(v30, v31);
        sub_10000BED0();
        sub_10000BD28();
        _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Tried to add request %s to execution group %s in illegal state %s",  (uint8_t *)v25,  0x20u);
        swift_arrayDestroy(v77, 3LL);
        sub_10000BCC4(v77);
        sub_10000BCC4(v25);
      }

      else
      {

        sub_10000BCDC(v5);
        sub_10000BCDC(a2);
      }

      uint64_t v57 = type metadata accessor for ModelManagerError(0LL);
      uint64_t v58 = sub_10000BAC0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v57, v58, 0LL, 0LL);
      uint64_t v60 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v57 - 8) + 104LL))( v59,  enum case for ModelManagerError.internalError(_:),  v57);
      return swift_willThrow(v60, v61, v62, v63, v64, v65, v66, v67);
    }

    uint64_t result = sub_100009030(a1);
  }

  uint64_t v32 = *((void *)v18 + 1);
  if (v32)
  {
    uint64_t v33 = type metadata accessor for TaskPriority(0LL);
    sub_100005FB0(v17, 1LL, 1LL, v33);
    uint64_t v34 = sub_10000BAC0(&qword_10010B3C8, type metadata accessor for RequestManager, (uint64_t)&unk_1000DAC74);
    uint64_t v35 = (void *)swift_allocObject(&unk_100102A98, 80LL, 7LL);
    v35[2] = a1;
    void v35[3] = v34;
    v35[4] = a1;
    void v35[5] = v32;
    v35[6] = v5;
    v35[7] = a2;
    v35[8] = a3;
    v35[9] = a4;
    uint64_t v69 = v32;
    sub_10000BD20(v32);
    sub_10000BD20(a1);
    swift_retain();
    swift_retain();
    sub_10000C0A0();
    sub_10000C81C(v17, (uint64_t)&unk_10010B430, (uint64_t)v35);
    uint64_t v78 = v5;
    uint64_t v37 = v36;
    unsigned __int8 v72 = *v18;
    uint64_t v38 = *((void *)v18 + 1);
    uint64_t v39 = *((void *)v18 + 2);
    uint64_t v41 = *((void *)v18 + 3);
    uint64_t v40 = *((void *)v18 + 4);
    uint64_t v42 = *((void *)v18 + 5);
    sub_10000C0F0();
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v42);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000C0A0();
    sub_10000C20C();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
    uint64_t v80 = v40;
    uint64_t v68 = v37;
    sub_100096A14(v37, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v44 = v80;
    swift_release(a2);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_release(a1);
    uint64_t v45 = *((void *)v18 + 1);
    uint64_t v70 = *((void *)v18 + 2);
    uint64_t v71 = *((void *)v18 + 3);
    uint64_t v46 = *((void *)v18 + 5);
    *uint64_t v18 = v72;
    *((void *)v18 + 1) = v38;
    *((void *)v18 + 2) = v39;
    *((void *)v18 + 3) = v41;
    *((void *)v18 + 4) = v44;
    *((void *)v18 + 5) = v42;
    sub_10000C0A0();
    sub_10000C20C();
    uint64_t v47 = sub_10000C0F0();
    swift_release(v47);
    swift_release(v39);
    swift_release(v38);
    swift_bridgeObjectRelease(v46);
    sub_10000C1E8();
    swift_release(v45);
    swift_release(v70);
    swift_release(v71);
    if (qword_10010B080 != -1) {
      swift_once(&qword_10010B080, sub_1000075E8);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v48, (uint64_t)qword_10010B2E0);
    sub_10000BD20(v78);
    uint64_t v49 = sub_10000BD20(a2);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = sub_10000BCF4(22LL);
      uint64_t v73 = sub_10000BCF4(64LL);
      uint64_t v80 = v73;
      *(_DWORD *)uint64_t v52 = 136315394;
      RequestMetadata.id.getter(v73);
      unint64_t v53 = sub_10000B4E4();
      dispatch thunk of CustomStringConvertible.description.getter(v76, v53);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
      sub_10000C0A8();
      sub_10000C090();
      sub_10000BCDC(a2);
      sub_10000C1E8();
      *(_WORD *)(v52 + 12) = 2080;
      type metadata accessor for UUID(0LL);
      uint64_t v54 = sub_10000BAC0( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v55 = sub_10000C290(v54);
      sub_10000C054(v55, v56);
      sub_10000C090();
      sub_10000BCDC(v78);
      sub_10000BD28();
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Added request %s to execution group %s",  (uint8_t *)v52,  0x16u);
      swift_arrayDestroy(v73, 2LL);
      sub_10000BCC4(v73);
      sub_10000BCC4(v52);
      swift_release(v69);
    }

    else
    {

      sub_10000BCDC(v78);
      sub_10000BCDC(a2);
      swift_release(v69);
    }

    return v68;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100009030(uint64_t a1)
{
  uint64_t v6 = v5 - v4;
  uint64_t v7 = v1 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  sub_10000BE64( v1 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  (uint64_t)v20,  1LL);
  *(_BYTE *)uint64_t v7 = 1;
  type metadata accessor for TaskPriority(0LL);
  sub_10000BE50();
  uint64_t v8 = sub_10000BAC0(&qword_10010B3C8, type metadata accessor for RequestManager, (uint64_t)&unk_1000DAC74);
  uint64_t v9 = (void *)sub_100007460((uint64_t)&unk_100102AC0, 48LL);
  v9[2] = a1;
  v9[3] = v8;
  v9[4] = a1;
  v9[5] = v1;
  sub_10000BD20(a1);
  sub_10000C030();
  sub_10000C810(v6, (uint64_t)&unk_10010B440, (uint64_t)v9);
  uint64_t v11 = v10;
  sub_10000BE50();
  uint64_t v12 = (void *)sub_100007460((uint64_t)&unk_100102AE8, 56LL);
  v12[2] = a1;
  v12[3] = v8;
  v12[4] = a1;
  v12[5] = v11;
  v12[6] = v1;
  sub_10000BD20(a1);
  sub_10000C030();
  sub_10000C278();
  sub_10000C81C(v6, (uint64_t)&unk_10010B450, (uint64_t)v12);
  uint64_t v14 = v13;
  sub_10000BE50();
  uint64_t v15 = (void *)sub_100007460((uint64_t)&unk_100102B10, 56LL);
  v15[2] = a1;
  void v15[3] = v8;
  v15[4] = a1;
  void v15[5] = v14;
  v15[6] = v1;
  sub_10000BD20(a1);
  sub_10000C030();
  sub_10000C0F0();
  uint64_t v16 = sub_100003854(v6, (uint64_t)&unk_10010B460, (uint64_t)v15);
  uint64_t v17 = *(void *)(v7 + 8);
  *(void *)(v7 + 8) = v11;
  *(void *)(v7 + 16) = v14;
  *(void *)(v7 + 24) = v16;
  sub_10000C278();
  uint64_t v18 = sub_10000C0F0();
  swift_release(v18);
  sub_10000C280();
  swift_release(v17);
  sub_10000BF84();
  return sub_10000C1F0();
}

uint64_t sub_1000091F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a8;
  v8[8] = v15;
  v8[5] = a6;
  v8[6] = a7;
  v8[4] = a4;
  uint64_t v10 = sub_100003B20(&qword_10010B408);
  v8[9] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[10] = v11;
  v8[11] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v8[12] = v12;
  uint64_t v13 = sub_100003B20(&qword_10010B468);
  *uint64_t v12 = v8;
  v12[1] = sub_1000092B0;
  return ((uint64_t (*)(void *, uint64_t, void *, uint64_t, void *))Task.value.getter)( v8 + 15,  a5,  &type metadata for Bool,  v13,  &protocol self-conformance witness table for Error);
}

uint64_t sub_1000092B0()
{
  uint64_t v3 = *(void *)(v2 + 96);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc(v3);
  sub_10000C0D4();
  return sub_10000BCD0();
}

uint64_t sub_100009304()
{
  if (qword_10010B080 != -1) {
    swift_once(&qword_10010B080, sub_1000075E8);
  }
  uint64_t v1 = (os_log_s *)v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = sub_10000BF6C();
  sub_100003BA0(v3, (uint64_t)qword_10010B2E0);
  sub_10000BD20((uint64_t)v1);
  uint64_t v4 = sub_10000BD20(v2);
  Logger.logObject.getter(v4);
  os_log_type_t v5 = sub_10000C108();
  if (os_log_type_enabled(v1, v5))
  {
    uint64_t v6 = v0[11];
    uint64_t v26 = v0[10];
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[5];
    uint64_t v25 = v0[6];
    uint64_t v9 = sub_10000BCF4(22LL);
    uint64_t v28 = sub_10000BCF4(64LL);
    uint64_t v30 = v28;
    *(_DWORD *)uint64_t v9 = 136315394;
    os_log_type_t v27 = v5;
    uint64_t v10 = sub_10000BE28();
    uint64_t v11 = sub_10000BAC0( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    sub_100015EF8(v12, v13, &v30);
    v0[2] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4);
    sub_10000BD28();
    uint64_t v15 = sub_10000BCDC(v8);
    *(_WORD *)(v9 + 12) = 2080;
    RequestMetadata.id.getter(v15);
    unint64_t v16 = sub_10000B4E4();
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v7, v16);
    uint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v6, v7);
    sub_100015EF8(v17, v19, &v30);
    v0[3] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 14);
    swift_bridgeObjectRelease(v19);
    sub_10000BCDC(v25);
    sub_10000BFDC((void *)&_mh_execute_header, v1, v27, "ExecutionGroup %s executing request %s", (uint8_t *)v9);
    sub_10000BD8C();
    sub_10000BCC4(v28);
    sub_10000BCC4(v9);
  }

  else
  {
    uint64_t v21 = v0[6];
    sub_10000BCDC(v0[5]);
    sub_10000BCDC(v21);
  }

  uint64_t v22 = (int *)v0[7];
  uint64_t v29 = (uint64_t (*)(void))((char *)v22 + *v22);
  uint64_t v23 = (void *)swift_task_alloc(v22[1]);
  v0[14] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_10000958C;
  return v29();
}

uint64_t sub_10000958C()
{
  uint64_t v2 = *v1;
  sub_10000BE20(*(void *)(v0 + 112), v3);
  swift_task_dealloc(*(void *)(v0 + 88));
  return sub_10000743C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000095C4()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000095F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[14] = a1;
  uint64_t v7 = *(void *)(type metadata accessor for ModelCatalogAsset(0LL) - 8);
  v5[17] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[18] = swift_task_alloc(v8);
  v5[19] = swift_task_alloc(v8);
  return swift_task_switch(sub_100009664, a4, 0LL);
}

#error "10000972C: call analysis failed (funcsize=155)"
uint64_t sub_1000098EC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  sub_10000C130();
  *(void *)(v0 + 56) = v1;
  *(_BYTE *)(v0 + 48) = v3;
  *(void *)(v0 + 40) = v2;
  uint64_t v4 = *(void *)(v0 + 168);
  *os_log_type_t v5 = *v2;
  *(void *)(v0 + 176) = v1;
  swift_task_dealloc(v4);
  return sub_10000BCD0();
}

void sub_10000994C()
{
  uint64_t v3 = sub_10000C0CC(*(void *)(v1 + 128));
  Logger.logObject.getter(v3);
  os_log_type_t v4 = sub_10000C160();
  if (!sub_10000BF0C(v4))
  {
    sub_10000C0C4(*(void *)(v1 + 128));
LABEL_18:

    char v57 = *(_BYTE *)(v1 + 48);
    uint64_t v58 = *(_BYTE **)(v1 + 112);
    uint64_t v59 = (_BYTE *)(*(void *)(v1 + 128)
                  + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState);
    sub_10000BE64((uint64_t)v59, v1 + 16, 1LL);
    *uint64_t v59 = 2;
    *uint64_t v58 = v57;
    sub_10000C140();
    sub_10000BFE4();
    (*(void (**)(void))(v1 + 8))();
    return;
  }

  uint64_t v5 = *(void *)(v1 + 128);
  uint64_t v6 = sub_10000BCF4(22LL);
  uint64_t v72 = sub_10000BCF4(64LL);
  *(_DWORD *)uint64_t v6 = 136315394;
  sub_10000BE28();
  uint64_t v7 = sub_10000BAC0( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v8 = sub_10000C07C(v7);
  sub_10000C060(v8, v9, v10, v11, v12, v13, v14, v15, v60, v64, v67);
  *(void *)(v1 + 80) = v16;
  uint64_t v70 = v1 + 88;
  sub_10000C04C(v1 + 80, v1 + 88);
  sub_10000BD28();
  sub_10000BCDC(v5);
  *(_WORD *)(v6 + 12) = 2080;
  uint64_t v17 = *(void *)(v5 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
  if (!*(void *)(v17 + 16))
  {
LABEL_17:
    uint64_t v41 = *(void *)(v1 + 128);
    sub_10000C038();
    uint64_t v42 = sub_10000BD28();
    sub_10000BEFC(v42, v43, v44, v45, v46, v47, v48, v49, v61);
    *(void *)(v1 + 88) = v50;
    sub_10000C040(v50, v1 + 96, v51, v6 + 22, v52, v53, v54, v55, v63, v65, v68, v70);
    sub_10000C000();
    sub_10000BCDC(v41);
    sub_10000BF74((void *)&_mh_execute_header, v56, (os_log_type_t)v2, "ExecutionGroup %s finished acquiring assets %s");
    sub_10000BD8C();
    sub_10000BCC4(v72);
    sub_10000BCC4(v6);
    goto LABEL_18;
  }

  sub_10000BE80();
  sub_10000BE10();
  sub_10000C288();
  sub_10000BEA0();
  while ((v2 & 0x8000000000000000LL) == 0)
  {
    sub_10000BFAC();
    if (v18 == v19) {
      break;
    }
    sub_10000BD5C();
    if ((v28 & 1) == 0) {
      goto LABEL_20;
    }
    if (*(_DWORD *)(v17 + 36) != (_DWORD)v1 + 88) {
      goto LABEL_21;
    }
    uint64_t v29 = *(void *)(v1 + 144);
    sub_10000BD40(v20, v21, v22, v23, v24, v25, v26, v27, v61, v65, v68, v70, v72, v74);
    uint64_t v30 = sub_10000C024();
    sub_10000BE6C(v30, v31, v32, v33, v34, v35, v36, v37, v62, v66, v69, v71, v73, v75, v76);
    sub_10000C1D8();
    if ((sub_10000BFBC() & 1) == 0) {
      sub_10000BD74();
    }
    sub_10000C148();
    if (v39) {
      sub_10000BDA4(v38 > 1, v29);
    }
    sub_10000BCFC();
    sub_10000BEB8();
    if (v40)
    {
      sub_10000BE30();
      uint64_t v6 = v65;
      uint64_t v0 = (void *)v68;
      LOBYTE(sub_10000BE20(*(void *)(v0 + 64), v2) = BYTE4(v61);
      goto LABEL_17;
    }
  }

  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
}

void sub_100009BD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000C0CC(*(void *)(v0 + 128));
  uint64_t v3 = (void *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v3, v4))
  {
    sub_10000C0C4(*(void *)(v1 + 128));
LABEL_17:

    swift_willThrow(v39, v40, v41, v42, v43, v44, v45, v46);
    sub_10000C140();
    sub_10000BFE4();
    (*(void (**)(void))(v1 + 8))();
    return;
  }

  os_log_type_t v50 = v4;
  uint64_t v5 = *(void *)(v1 + 128);
  uint64_t v6 = sub_10000BCF4(22LL);
  uint64_t v49 = sub_10000BCF4(64LL);
  uint64_t v55 = v49;
  *(_DWORD *)uint64_t v6 = 136315394;
  uint64_t v7 = sub_10000BE28();
  uint64_t v8 = sub_10000BAC0( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  sub_100015EF8(v9, v10, &v55);
  *(void *)(v1 + 72) = v11;
  uint64_t v48 = v1 + 72;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v6 + 4);
  sub_10000BD28();
  sub_10000BCDC(v5);
  uint64_t v51 = (uint8_t *)v6;
  *(_WORD *)(v6 + 12) = 2080;
  uint64_t v12 = *(void *)(v5 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
LABEL_16:
    uint64_t v34 = *(void *)(v1 + 128);
    uint64_t v35 = sub_10000C038();
    uint64_t v37 = v36;
    sub_10000BD28();
    sub_100015EF8(v35, v37, &v55);
    *(void *)(v1 + 64) = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v48, v51 + 14);
    swift_bridgeObjectRelease(v37);
    sub_10000BCDC(v34);
    sub_10000BFDC( (void *)&_mh_execute_header,  (os_log_s *)v3,  v50,  "ExecutionGroup %s failed to acquire assets %s",  v51);
    sub_10000BD8C();
    sub_10000BCC4(v49);
    sub_10000BCC4((uint64_t)v51);
    goto LABEL_17;
  }

  uint64_t v47 = v3;
  uint64_t v54 = v1;
  uint64_t v52 = *(void *)(v1 + 136);
  uint64_t v53 = *(void *)(v1 + 144);
  uint64_t v56 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v12);
  sub_10000BE10();
  uint64_t v14 = sub_100020E24(v12);
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  while ((v14 & 0x8000000000000000LL) == 0)
  {
    sub_10000BFAC();
    if (v19 == v20) {
      break;
    }
    sub_10000BD5C();
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    if (*(_DWORD *)(v12 + 36) != (_DWORD)v16) {
      goto LABEL_20;
    }
    uint64_t v23 = *(uint64_t **)(v54 + 144);
    uint64_t v22 = *(void *)(v54 + 152);
    uint64_t v24 = v12;
    sub_10000B76C(*(void *)(v12 + 48) + *(void *)(v52 + 72) * v14, v22);
    sub_10000B7B0(v22, (uint64_t)v23);
    uint64_t v25 = *v23;
    uint64_t v26 = *(void *)(v53 + 8);
    swift_bridgeObjectRetain(v26);
    sub_10000B7F4((uint64_t)v23);
    uint64_t v27 = v56;
    if ((sub_10000BFBC() & 1) == 0)
    {
      sub_10000BDA4(0, v27[2] + 1LL);
      uint64_t v27 = v56;
    }

    unint64_t v29 = v27[2];
    unint64_t v28 = v27[3];
    if (v29 >= v28 >> 1)
    {
      sub_10000BDA4(v28 > 1, v29 + 1);
      uint64_t v27 = v56;
    }

    v27[2] = v29 + 1;
    uint64_t v30 = (char *)&v27[2 * v29];
    *((void *)v30 + 4) = v25;
    *((void *)v30 + 5) = v26;
    uint64_t v12 = v24;
    uint64_t v31 = sub_100020D3C(v14, v16, v18 & 1, v24);
    uint64_t v14 = v31;
    uint64_t v16 = v32;
    char v18 = v33 & 1;
    if (!--v13)
    {
      sub_10000B830(v31, v32, v33 & 1);
      sub_10000C1E0();
      uint64_t v1 = v54;
      uint64_t v3 = v47;
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_100009F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a4;
  v6[10] = a6;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v6[11] = v8;
  uint64_t v9 = sub_100003B20(&qword_10010B468);
  *uint64_t v8 = v6;
  v8[1] = sub_100009FE0;
  return Task.value.getter(v6 + 17, a5, &type metadata for Bool, v9, &protocol self-conformance witness table for Error);
}

uint64_t sub_100009FE0()
{
  uint64_t v2 = sub_10000C24C();
  *uint64_t v3 = *v1;
  *(void *)(v4 + 96) = v0;
  swift_task_dealloc(v2);
  sub_10000C0D4();
  return sub_10000BCD0();
}

#error "10000A25C: call analysis failed (funcsize=153)"
uint64_t sub_10000A2D0()
{
  uint64_t v0;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 128));
  sub_10000C1E0();
  sub_10000C140();
  return sub_10000BF5C();
}

#error "10000A524: call analysis failed (funcsize=145)"
uint64_t sub_10000A59C()
{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000A5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  unint64_t v7 = (*(void *)(*(void *)(sub_100003B20(&qword_10010B208) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[17] = swift_task_alloc(v7);
  v5[18] = swift_task_alloc(v7);
  uint64_t v8 = sub_100003B20(&qword_10010B490);
  v5[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[20] = v9;
  v5[21] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000A648, a5, 0LL);
}

uint64_t sub_10000A648()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v43 = v1 + 64;
  uint64_t v45 = v1;
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  unint64_t v4 = v2 & *(void *)(v1 + 64);
  int64_t v44 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain(v1);
  int64_t v6 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 144);
    uint64_t v14 = *(void *)(*(void *)(v45 + 48) + 8 * i);
    uint64_t v15 = *(void *)(*(void *)(v45 + 56) + 8 * i);
    uint64_t v16 = type metadata accessor for TaskPriority(0LL);
    sub_100005FB0(v12, 1LL, 1LL, v16);
    char v17 = (void *)sub_100007460((uint64_t)&unk_100102B38, 48LL);
    v17[2] = 0LL;
    char v18 = v17 + 2;
    void v17[3] = 0LL;
    v17[4] = v15;
    v17[5] = v14;
    sub_10000B93C(v12, v13);
    LODWORD(v13) = sub_1000060B4(v13, 1LL, v16);
    sub_10000BD20(v14);
    uint64_t v19 = sub_10000BD20(v15);
    uint64_t v20 = *(void *)(v0 + 136);
    int64_t v46 = v6;
    if ((_DWORD)v13 == 1)
    {
      sub_1000060C0(v20);
      uint64_t v21 = 0LL;
    }

    else
    {
      unsigned __int8 v22 = TaskPriority.rawValue.getter(v19);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v20, v16);
      uint64_t v21 = v22;
    }

    uint64_t v23 = *v18;
    if (*v18)
    {
      uint64_t v24 = v17[3];
      uint64_t ObjectType = swift_getObjectType(*v18);
      swift_unknownObjectRetain(v23);
      uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v24);
      uint64_t v28 = v27;
      swift_unknownObjectRelease(v23);
    }

    else
    {
      uint64_t v26 = 0LL;
      uint64_t v28 = 0LL;
    }

    uint64_t v29 = **(void **)(v0 + 104);
    uint64_t v30 = sub_100007460((uint64_t)&unk_100102B60, 32LL);
    *(void *)(v30 + 16) = &unk_10010B4A0;
    *(void *)(v30 + 24) = v17;
    uint64_t v31 = sub_10000C074();
    uint64_t v32 = v28 | v26;
    if (v28 | v26)
    {
      uint64_t v32 = v0 + 16;
      *(void *)(v0 + 16) = 0LL;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = v26;
      *(void *)(v0 + 40) = v28;
    }

    uint64_t v33 = *(void *)(v0 + 144);
    *(void *)(v0 + 48) = 1LL;
    *(void *)(v0 + 56) = v32;
    *(void *)(v0 + 64) = v29;
    swift_task_create(v21 | 0x3100, v0 + 48, v31, &unk_10010B4B0, v30);
    swift_release(v14);
    swift_release(v15);
    sub_10000C280();
    uint64_t result = sub_1000060C0(v33);
    int64_t v6 = v46;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v9 >= v44) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v43 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v44) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v43 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v44) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v43 + 8 * v6);
        if (!v10) {
          break;
        }
      }
    }

LABEL_18:
    unint64_t v4 = (v10 - 1) & v10;
  }

  int64_t v11 = v9 + 3;
  if (v11 >= v44)
  {
LABEL_29:
    uint64_t v34 = *(void *)(v0 + 120);
    uint64_t v35 = *(uint64_t **)(v0 + 104);
    swift_release(*(void *)(v0 + 112));
    uint64_t v36 = *v35;
    uint64_t v37 = sub_10000C074();
    *(void *)(v0 + 176) = v37;
    TaskGroup.makeAsyncIterator()(v36, v37);
    uint64_t v38 = sub_10000BAC0(&qword_10010B3C8, type metadata accessor for RequestManager, (uint64_t)&unk_1000DAC74);
    uint64_t v39 = OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
    *(void *)(v0 + 184) = v38;
    *(void *)(v0 + 192) = v39;
    sub_10000BE64(v34 + v39, v0 + 72, 1LL);
    uint64_t v40 = *(void *)(v0 + 184);
    uint64_t v41 = *(void *)(v0 + 128);
    uint64_t v42 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 200) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_10000AA1C;
    return TaskGroup.Iterator.next(isolation:)(v0 + 96, v41, v40, *(void *)(v0 + 152));
  }

  unint64_t v10 = *(void *)(v43 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v6 >= v44) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v43 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_18;
    }
  }

    uint64_t v15 = (v21 - 1) & v21;
  }

  uint64_t v25 = v24 + 4;
  if (v25 >= v17)
  {
LABEL_21:
    sub_100021DDC();
    sub_100007448();
    return;
  }

  uint64_t v21 = *(void *)(v27[0] + 8 * v25);
  if (v21)
  {
    uint64_t v12 = v25;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v12 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v12 >= v17) {
      goto LABEL_21;
    }
    sub_100022AD0();
    uint64_t v25 = v26 + 1;
    if (v21) {
      goto LABEL_18;
    }
  }

    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    uint64_t v61 = v13;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    a19 = (v30 - 1) & v30;
    a17 = v31;
  }

  uint64_t v32 = v27 + 4;
  if (v27 + 4 >= v77)
  {
LABEL_29:
    uint64_t v61 = *(uint64_t **)(v22 + 128);
    swift_release(*(void *)(v22 + 136));
    uint64_t v62 = *v61;
    uint64_t v63 = sub_100022DB0();
    uint64_t v64 = sub_100003B20(&qword_10010B468);
    ThrowingTaskGroup.makeAsyncIterator()(v62, v63, v64, &protocol self-conformance witness table for Error);
    sub_100048A38(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager, (uint64_t)&unk_1000D9CE8);
    *(void *)(v22 + 248) = v65;
    uint64_t v66 = (void *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(void *)(v22 + 256) = v66;
    *uint64_t v66 = v22;
    v66[1] = sub_1000610CC;
    sub_100030888();
    _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF( v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  a17,  a18,  a19,  a20,  a21,  a22);
    return;
  }

  uint64_t v30 = *(void *)(v76 + 8 * v32);
  if (v30)
  {
    uint64_t v31 = v27 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v31 >= v77) {
      goto LABEL_29;
    }
    uint64_t v30 = *(void *)(v76 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_18;
    }
  }

  uint64_t v16 = a1;
LABEL_42:
  sub_100015888(v20, (uint64_t)(v18 - (void)v20) / 8, v16);
  return 1LL;
}

      sub_1000B43FC();
      sub_1000B400C();
      sub_1000B4110();
      if (!v23) {
        goto LABEL_19;
      }
    }

    sub_1000B44C8();
    while (v20 - 8 < v21)
    {
      if (*(void *)(v6 + 8 * v20++)) {
        goto LABEL_3;
      }
    }

      sub_1000B43FC();
      sub_1000B400C();
      sub_1000B4110();
      if (!v20) {
        goto LABEL_19;
      }
    }

    sub_1000B44C8();
    while (v17 - 8 < v18)
    {
      if (*(void *)(v1 + 8 * v17++)) {
        goto LABEL_3;
      }
    }

    ;
  }

  int64_t v11 = v9 + 3;
  if (v11 >= v6)
  {
LABEL_21:
    sub_100021DDC();
    return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
  }

  unint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10)
  {
    uint64_t v8 = v11;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v8 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_21;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v8);
    ++v11;
    if (v10) {
      goto LABEL_18;
    }
  }

LABEL_31:
  __break(1u);
  return result;
}

              sub_1000212AC(v3);
              return;
            }
          }
        }
      }
    }

    uint64_t v23 = (v31 - 1) & v31;
    uint64_t v24 = __clz(__rbit64(v31)) + (v25 << 6);
LABEL_32:
    uint64_t v29 = *(void *)(*(void *)(a2 + 48) + 8 * v24);
    swift_retain(v29);
    if (!v29) {
      return sub_1000212AC(v39);
    }
    while (1)
    {
      static AssetCost.+ infix(_:_:)(a3, v29 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost);
      swift_release(v29);
      uint64_t v33 = v38;
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(a3, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(a3, v8, v6);
      uint64_t v16 = v25;
      char v17 = v23;
      a2 = v39;
      if ((v39 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v26 = __CocoaSet.Iterator.next()(result);
      if (v26)
      {
        uint64_t v27 = v26;
        v40[0] = v26;
        uint64_t v28 = type metadata accessor for InferenceProviderAsset(0LL);
        swift_unknownObjectRetain(v27);
        swift_dynamicCast(&v41, v40, v35, v28, 7LL);
        uint64_t v29 = v41;
        swift_unknownObjectRelease(v27);
        uint64_t v25 = v16;
        uint64_t v23 = v17;
        if (v29) {
          continue;
        }
      }

      return sub_1000212AC(v39);
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
LABEL_32:
  __break(1u);
}

      uint64_t v8 = v18;
LABEL_32:
      if (v8 >= v3) {
        goto LABEL_41;
      }
      if (__OFSUB__(v8, v10)) {
        goto LABEL_144;
      }
      if (v8 - v10 >= v103) {
        goto LABEL_41;
      }
      if (__OFADD__(v10, v103)) {
        goto LABEL_147;
      }
      if (v10 + v103 >= v3) {
        uint64_t v33 = v3;
      }
      else {
        uint64_t v33 = v10 + v103;
      }
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }

      if (v8 == v33)
      {
LABEL_41:
        uint64_t v34 = v107;
      }

      else
      {
        uint64_t v85 = (void *)(v9 + 16 * v8);
        uint64_t v34 = v107;
        do
        {
          uint64_t v86 = (uint64_t *)(v9 + 16 * v8);
          v87 = *v86;
          uint64_t v88 = v86[1];
          uint64_t v89 = v10;
          uint64_t v90 = v85;
          do
          {
            uint64_t v91 = *(v90 - 2);
            uint64_t v92 = *(v90 - 1);
            v93 = v87 == v91 && v88 == v92;
            if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1LL) & 1) == 0) {
              break;
            }
            if (!v9) {
              goto LABEL_151;
            }
            v87 = *v90;
            uint64_t v88 = v90[1];
            *(_OWORD *)uint64_t v90 = *((_OWORD *)v90 - 1);
            *(v90 - 1) = v88;
            *(v90 - 2) = v87;
            v90 -= 2;
            ++v89;
          }

          while (v8 != v89);
          ++v8;
          v85 += 2;
        }

        while (v8 != v33);
        uint64_t v8 = v33;
      }

      if (v8 < v10) {
        goto LABEL_143;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0) {
        uint64_t v34 = sub_10007F2D4(0LL, *((void *)v34 + 2) + 1LL, 1, v34);
      }
      uint64_t v36 = *((void *)v34 + 2);
      uint64_t v35 = *((void *)v34 + 3);
      uint64_t v37 = v36 + 1;
      if (v36 >= v35 >> 1) {
        uint64_t v34 = sub_10007F2D4((char *)(v35 > 1), v36 + 1, 1, v34);
      }
      *((void *)v34 + 2) = v37;
      uint64_t v38 = v34 + 32;
      uint64_t v39 = &v34[16 * v36 + 32];
      *(void *)uint64_t v39 = v10;
      *((void *)v39 + 1) = v8;
      uint64_t v107 = v34;
      if (v36)
      {
        while (1)
        {
          uint64_t v40 = v37 - 1;
          if (v37 >= 4)
          {
            uint64_t v45 = &v38[16 * v37];
            int64_t v46 = *((void *)v45 - 8);
            uint64_t v47 = *((void *)v45 - 7);
            uint64_t v51 = __OFSUB__(v47, v46);
            uint64_t v48 = v47 - v46;
            if (v51) {
              goto LABEL_128;
            }
            os_log_type_t v50 = *((void *)v45 - 6);
            uint64_t v49 = *((void *)v45 - 5);
            uint64_t v51 = __OFSUB__(v49, v50);
            uint64_t v43 = v49 - v50;
            int64_t v44 = v51;
            if (v51) {
              goto LABEL_129;
            }
            uint64_t v52 = v37 - 2;
            uint64_t v53 = &v38[16 * v37 - 32];
            uint64_t v55 = *(void *)v53;
            uint64_t v54 = *((void *)v53 + 1);
            uint64_t v51 = __OFSUB__(v54, v55);
            uint64_t v56 = v54 - v55;
            if (v51) {
              goto LABEL_130;
            }
            uint64_t v51 = __OFADD__(v43, v56);
            char v57 = v43 + v56;
            if (v51) {
              goto LABEL_132;
            }
            if (v57 >= v48)
            {
              uint64_t v75 = &v38[16 * v40];
              uint64_t v77 = *(void *)v75;
              uint64_t v76 = *((void *)v75 + 1);
              uint64_t v51 = __OFSUB__(v76, v77);
              uint64_t v78 = v76 - v77;
              if (v51) {
                goto LABEL_138;
              }
              uint64_t v68 = v43 < v78;
              goto LABEL_79;
            }
          }

          else
          {
            if (v37 != 3)
            {
              uint64_t v69 = *((void *)v34 + 4);
              uint64_t v70 = *((void *)v34 + 5);
              uint64_t v51 = __OFSUB__(v70, v69);
              uint64_t v62 = v70 - v69;
              uint64_t v63 = v51;
              goto LABEL_73;
            }

            uint64_t v42 = *((void *)v34 + 4);
            uint64_t v41 = *((void *)v34 + 5);
            uint64_t v51 = __OFSUB__(v41, v42);
            uint64_t v43 = v41 - v42;
            int64_t v44 = v51;
          }

          if ((v44 & 1) != 0) {
            goto LABEL_131;
          }
          uint64_t v52 = v37 - 2;
          uint64_t v58 = &v38[16 * v37 - 32];
          uint64_t v60 = *(void *)v58;
          uint64_t v59 = *((void *)v58 + 1);
          uint64_t v61 = __OFSUB__(v59, v60);
          uint64_t v62 = v59 - v60;
          uint64_t v63 = v61;
          if (v61) {
            goto LABEL_133;
          }
          uint64_t v64 = &v38[16 * v40];
          uint64_t v66 = *(void *)v64;
          uint64_t v65 = *((void *)v64 + 1);
          uint64_t v51 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          if (v51) {
            goto LABEL_135;
          }
          if (__OFADD__(v62, v67)) {
            goto LABEL_137;
          }
          if (v62 + v67 >= v43)
          {
            uint64_t v68 = v43 < v67;
LABEL_79:
            if (v68) {
              uint64_t v40 = v52;
            }
            goto LABEL_81;
          }

      ++v9;
      unint64_t v4 = v37;
      unint64_t v7 = v35;
      int64_t v6 = v36;
      if (v9 == v38)
      {
        swift_release_n(v37, 2LL);
        swift_release_n(a3, 2LL);
        return 0LL;
      }
    }

    __break(1u);
  }

  else
  {
    swift_release(a4);
    swift_release(a3);
    return 0LL;
  }

  return result;
}

uint64_t sub_10000AA1C()
{
  return sub_10000BD98();
}

uint64_t sub_10000AA58()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 128);
    uint64_t v3 = (char *)(*(void *)(v0 + 120) + *(void *)(v0 + 192));
    char v31 = *v3;
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v5 = *((void *)v3 + 2);
    uint64_t v6 = *((void *)v3 + 3);
    uint64_t v7 = *((void *)v3 + 4);
    uint64_t v8 = (void *)*((void *)v3 + 5);
    sub_10000C20C();
    swift_bridgeObjectRetain(v7);
    sub_10000C2A8((uint64_t)v8);
    swift_retain(v1);
    swift_retain(v2);
    uint64_t v32 = v4;
    sub_10000C278();
    uint64_t v30 = v5;
    sub_10000C0A0();
    unint64_t v10 = sub_100016620(v1, v9);
    char v12 = v11;
    sub_10000BD28();
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = *(void *)(v0 + 176);
      char v14 = sub_10000BFBC();
      Swift::Int v15 = v8[3];
      sub_100003B20(&qword_10010B4B8);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v14, v15);
      swift_release(*(void *)(v8[6] + 8 * v10));
      uint64_t v16 = *(void *)(v8[7] + 8 * v10);
      uint64_t v17 = sub_100003B20(&qword_10010B470);
      sub_10000BAC0(&qword_10010B478, type metadata accessor for DaemonRequest, (uint64_t)&unk_1000DAE90);
      _NativeDictionary._delete(at:)(v10, v8, v13, v17);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_10000BF84();
      uint64_t v18 = v16;
    }

    else
    {
      uint64_t v18 = v1;
    }

    swift_release(v18);
    uint64_t v20 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 120);
    swift_release(*(void *)(v0 + 128));
    uint64_t v22 = v21 + v20;
    uint64_t v23 = *(void *)(v21 + v20 + 16);
    uint64_t v25 = *(void *)(v21 + v20 + 24);
    uint64_t v24 = *(void *)(v21 + v20 + 32);
    uint64_t v26 = *(void *)(v21 + v20 + 40);
    *(_BYTE *)uint64_t v22 = v31;
    *(void *)(v22 + 8) = v32;
    *(void *)(v22 + 16) = v30;
    *(void *)(v22 + 24) = v6;
    *(void *)(v22 + 32) = v7;
    *(void *)(v22 + 40) = v8;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v26);
    sub_10000C280();
    sub_10000BF84();
    swift_release(v23);
    swift_release(v25);
    uint64_t v27 = *(void *)(v0 + 184);
    uint64_t v28 = *(void *)(v0 + 128);
    uint64_t v29 = (void *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 200) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_10000AA1C;
    return TaskGroup.Iterator.next(isolation:)(v0 + 96, v28, v27, *(void *)(v0 + 152));
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 160) + 8LL))(*(void *)(v0 + 168), *(void *)(v0 + 152));
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10000ACA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = a5;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v5[4] = v7;
  uint64_t v8 = sub_100003B20(&qword_10010B468);
  *uint64_t v7 = v5;
  v7[1] = sub_10000AD24;
  return Task.value.getter( v8,  a4,  (char *)&type metadata for () + 8,  v8,  &protocol self-conformance witness table for Error);
}

uint64_t sub_10000AD24()
{
  if (v0) {
    swift_errorRelease(v0);
  }
  return sub_10000BD98();
}

uint64_t sub_10000AD74()
{
  uint64_t v1 = *(void *)(v0 + 24);
  **(void **)(v0 + 16) = v1;
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain(v1);
  return sub_100007418(v3);
}

uint64_t sub_10000ADA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a4;
  v6[5] = a6;
  uint64_t v8 = *(void *)(type metadata accessor for ModelCatalogAsset(0LL) - 8);
  v6[6] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[7] = swift_task_alloc(v9);
  v6[8] = swift_task_alloc(v9);
  unint64_t v10 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v6[9] = v10;
  uint64_t v11 = sub_100003B20(&qword_10010B468);
  *unint64_t v10 = v6;
  v10[1] = sub_10000AE58;
  return Task.value.getter( v11,  a5,  (char *)&type metadata for () + 8,  v11,  &protocol self-conformance witness table for Error);
}

uint64_t sub_10000AE58()
{
  uint64_t v3 = *(void *)(v2 + 72);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc(v3);
  sub_10000C0D4();
  return sub_10000BCD0();
}

#error "10000AF70: call analysis failed (funcsize=161)"
uint64_t sub_10000B14C()
{
  uint64_t v0;
  uint64_t v0 = sub_10000C24C();
  sub_10000BCE4(v0);
  return sub_10000BD98();
}

uint64_t sub_10000B184()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000B1B4()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000B1EC()
{
  if (qword_10010B080 != -1) {
    swift_once(&qword_10010B080, sub_1000075E8);
  }
  uint64_t v2 = sub_10000BF6C();
  sub_100003BA0(v2, (uint64_t)qword_10010B2E0);
  uint64_t v3 = sub_10000BD20(v0);
  Logger.logObject.getter(v3);
  os_log_type_t v4 = sub_10000C160();
  if (os_log_type_enabled(v1, v4))
  {
    uint64_t v5 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v6 = sub_10000BCF4(32LL);
    *(_DWORD *)uint64_t v5 = 136315138;
    v16[0] = v6;
    uint64_t v7 = sub_10000BE28();
    uint64_t v8 = sub_10000BAC0( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
    sub_100015EF8(v9, v10, v16);
    uint64_t v14 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4);
    sub_10000BCDC(v0);
    sub_10000BD28();
    _os_log_impl((void *)&_mh_execute_header, v1, v4, "Execution group %s done", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL);
    sub_10000BCC4(v6);
    sub_10000BCC4((uint64_t)v5);
  }

  else
  {

    sub_10000BCDC(v0);
  }

  uint64_t v12 = v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  sub_10000BE64( v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  (uint64_t)v16,  33LL);
  sub_10000B3C4(v12);
  return swift_endAccess(v16);
}

uint64_t sub_10000B3C4(uint64_t a1)
{
  *(_BYTE *)a1 = 4;
  swift_release(*(void *)(a1 + 8));
  *(void *)(a1 + 8) = 0LL;
  swift_release(*(void *)(a1 + 16));
  *(void *)(a1 + 16) = 0LL;
  swift_release(*(void *)(a1 + 24));
  *(void *)(a1 + 24) = 0LL;
  uint64_t v2 = type metadata accessor for DaemonRequest(0LL);
  uint64_t v3 = sub_100003B20(&qword_10010B470);
  uint64_t v4 = sub_10000BAC0(&qword_10010B478, type metadata accessor for DaemonRequest, (uint64_t)&unk_1000DAE90);
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v2, v3, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v2, v3, v4);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 40));
  *(void *)(a1 + 40) = v6;
  return result;
}

void *sub_10000B4BC(void *a1)
{
  return a1;
}

unint64_t sub_10000B4E4()
{
  unint64_t result = qword_10010B418;
  if (!qword_10010B418)
  {
    uint64_t v1 = sub_10000603C(&qword_10010B408);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUIDIdentifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010B418);
  }

  return result;
}

uint64_t sub_10000B528()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10000B568()
{
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v10 = v0[8];
  uint64_t v11 = swift_task_alloc(dword_10010B42C);
  uint64_t v12 = (void *)sub_100007524(v11);
  *uint64_t v12 = v1;
  v12[1] = sub_10000B5F8;
  return sub_1000091F0(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10000B5F8()
{
  return sub_100007418(v0[1]);
}

uint64_t sub_10000B630()
{
  uint64_t v0 = swift_task_alloc(dword_10010B43C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_1000095F0(v2, v3, v4, v5, v6);
}

uint64_t sub_10000B690()
{
  uint64_t v0 = swift_task_alloc(dword_10010B44C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF1C(v1);
  return sub_100009F58(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10000B6E8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10000B718()
{
  uint64_t v0 = swift_task_alloc(dword_10010B45C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF1C(v1);
  return sub_10000ADA8(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10000B76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelCatalogAsset(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelCatalogAsset(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B7F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000B830(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10000B83C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = swift_task_alloc(dword_10010B484);
  uint64_t v10 = (void *)sub_100007524(v9);
  *uint64_t v10 = v3;
  v10[1] = sub_10000BCBC;
  return sub_10000A5A8(a1, a2, v6, v7, v8);
}

uint64_t sub_10000B8B8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10000B8E0()
{
  uint64_t v0 = swift_task_alloc(dword_10010B49C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_10000BF8C(v1);
  return sub_10000ACA8(v2, v3, v4, v5, v6);
}

uint64_t sub_10000B93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B984(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10000B9EC;
  return v5(v2 + 16);
}

uint64_t sub_10000B9EC()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v5 = v1;
  uint64_t v2 = (void *)v1[3];
  uint64_t v3 = (void *)*v0;
  sub_10000BE20(v1[4], &v5);
  *uint64_t v2 = v1[2];
  return sub_10000743C((uint64_t (*)(void))v3[1]);
}

uint64_t sub_10000BA30()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000BA54(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = swift_task_alloc(dword_10010B4AC);
  uint64_t v6 = (void *)sub_100007524(v5);
  *uint64_t v6 = v2;
  v6[1] = sub_10000BCBC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10010B4A8 + dword_10010B4A8))(a1, v4);
}

uint64_t sub_10000BAC0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

_BYTE *_s14ExecutionGroupC17ManagerOwnedStateV5StateOwCP(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateV5StateOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

    uint64_t v23 = (v30 - 1) & v30;
  }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

      sub_100022A20();
    }
  }

  sub_10000BF84();
  *uint64_t v32 = v40;
  sub_1000222A8();
}

      sub_100022180();
    }
  }

  sub_1000228B4();
  *int v3 = v10;
  sub_100007448();
}

      sub_100022168();
    }
  }

  swift_release(v9);
  *int v5 = v10;
  sub_100007448();
}

    int64_t v44 = (v53 - 1) & v53;
  }

  uint64_t v54 = v52 + 3;
  if (v54 >= v61)
  {
LABEL_28:
    sub_10000BCDC(v37);
    goto LABEL_30;
  }

  uint64_t v53 = *(void *)(v41 + 8 * v54);
  if (v53)
  {
    uint64_t v49 = v54;
    goto LABEL_17;
  }

  while (1)
  {
    uint64_t v49 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      break;
    }
    if (v49 >= v61) {
      goto LABEL_28;
    }
    uint64_t v53 = *(void *)(v41 + 8 * v49);
    ++v54;
    if (v53) {
      goto LABEL_17;
    }
  }

    sub_100022168();
  }

  if (v17 + 3 >= v32)
  {
LABEL_30:
    sub_10000BCDC(v11);
    int v4 = v30;
    goto LABEL_32;
  }

  sub_100022D50();
  if (v20)
  {
    uint64_t v15 = v19;
    goto LABEL_17;
  }

  while (1)
  {
    uint64_t v15 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v15 >= v32) {
      goto LABEL_30;
    }
    ++v19;
    if (*(void *)(v31 + 8 * v15)) {
      goto LABEL_17;
    }
  }

    sub_100022A20();
  }

  if (v17 + 3 >= v31)
  {
LABEL_28:
    sub_10000BCDC(v8);
    goto LABEL_30;
  }

  sub_100022C38();
  if (v20)
  {
    uint64_t v14 = v19;
    goto LABEL_17;
  }

  while (1)
  {
    uint64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_28;
    }
    ++v19;
    if (*(void *)(v30 + 8 * v14)) {
      goto LABEL_17;
    }
  }

        uint64_t v29 = sub_1000855CC();
        sub_100084520(v29);
        sub_100084D40();
        if (v18) {
          goto LABEL_18;
        }
        char v31 = v61;
        sub_1000855A8();
        if (!(!v20 & v40))
        {
          sub_100083EE0( v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55[0],  v55[1],  v55[2],  v55[3],  v55[4],  v55[5],  v55[6],  v55[7],  v55[8],  v56,  v57,  v58,  v59,  v60);
          char v31 = v61;
        }

        sub_100085C2C(v31[5]);
        sub_100085C48();
        sub_100085C24();
        sub_100082D00();
        if (v20)
        {
          sub_100082E08();
          while (1)
          {
            sub_100083820();
            if (v20 && (v42 & 1) != 0) {
              break;
            }
            sub_100083980();
            sub_10008310C();
            if (!v20)
            {
              sub_100082DF4();
              goto LABEL_29;
            }
          }

          __break(1u);
LABEL_38:
          sub_100085C04();
          __break(1u);
          return;
        }

        sub_100082E1C();
LABEL_29:
        sub_100083E78(v41);
LABEL_30:
        if (!__CocoaSet.Iterator.next()(v30)) {
          goto LABEL_33;
        }
      }

      sub_10000C1B0(v59);
      sub_100084EEC();
      uint64_t v22 = v13;
      sub_1000225D4(v51, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
LABEL_16:
      sub_1000855B4();
      sub_10002F90C(v19, v22);
      sub_1000860C0();
      sub_1000858B0();
      sub_10002F8E0(v26, v27, v28);
      uint64_t v13 = v22;
      goto LABEL_17;
    }

        uint64_t v28 = *(void *)(*(void *)&v9[*(int *)(v59 + 48)] + 16LL);
        sub_100083B84((uint64_t)v9);
        uint64_t v26 = v55;
        sub_100083C6C(v18, v55);
        if (v28) {
          goto LABEL_18;
        }
        uint64_t v29 = *(void *)(*(void *)(v26 + *(int *)(v59 + 44)) + 16LL);
        sub_100083B84(v26);
        sub_100084D40();
        if (v29) {
          goto LABEL_20;
        }
        uint64_t v38 = v65;
        uint64_t v39 = v66;
        uint64_t v40 = v66[2];
        if (v66[3] <= v40)
        {
          sub_100083EE0( v30,  v31,  v32,  v33,  v34,  v35,  v36,  v40,  v47,  v48,  v49,  v50,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60[0],  v60[1],  v60[2],  v60[3],  v60[4],  v60[5],  v60[6],  v60[7],  v60[8],  v61,  v62,  v63);
          uint64_t v39 = v66;
        }

        sub_100085C2C(v39[5]);
        sub_100084D48((uint64_t)v60);
        sub_100085C24();
        sub_100082D00();
        if (v20)
        {
          sub_100082E08();
          while (1)
          {
            sub_100083820();
            if (v20 && (v42 & 1) != 0) {
              break;
            }
            sub_100083980();
            sub_10008310C();
            if (!v20)
            {
              sub_100082DF4();
              goto LABEL_34;
            }
          }

          __break(1u);
LABEL_40:
          sub_100085C04();
          __break(1u);
          return;
        }

        sub_100082E1C();
LABEL_34:
        sub_100084A80(v41);
        *(void *)(v43 + 8 * v44) = v38;
        ++v39[2];
        sub_10008553C();
LABEL_21:
        if (!__CocoaSet.Iterator.next()(v37)) {
          goto LABEL_35;
        }
      }

      sub_10000C1B0(v64);
      sub_100083C6C(v18, (uint64_t)v11);
      uint64_t v27 = v56;
      sub_100085F7C(v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
      uint64_t v23 = v27;
LABEL_16:
      sub_10008547C(v23);
      sub_100083B84((uint64_t)v11);
      sub_10008547C(v19);
      sub_100083C6C(v18, (uint64_t)v9);
      goto LABEL_17;
    }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

    sub_10002FF3C(v0[9], v11, v12, v0[7]);
    goto LABEL_18;
  }

    sub_10002FF3C(v0[9], v8, v9, v0[7]);
    goto LABEL_18;
  }

  __break(1u);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateV5StateOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10000BBE4 + 4 * byte_1000D891A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10000BC18 + 4 * byte_1000D8915[v4]))();
}

uint64_t sub_10000BC18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000BC20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000BC28LL);
  }
  return result;
}

uint64_t sub_10000BC34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000BC3CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10000BC40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000BC48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000BC54(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000BC60(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *_s14ExecutionGroupC17ManagerOwnedStateV5StateOMa()
{
  return &_s14ExecutionGroupC17ManagerOwnedStateV5StateON;
}

unint64_t sub_10000BC7C()
{
  unint64_t result = qword_10010B4D8;
  if (!qword_10010B4D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D8A38, &_s14ExecutionGroupC17ManagerOwnedStateV5StateON);
    atomic_store(result, (unint64_t *)&qword_10010B4D8);
  }

  return result;
}

uint64_t sub_10000BCC4(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_10000BCD0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10000BCDC(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

uint64_t sub_10000BCE4(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10000BCF4(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_10000BCFC()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v9 = v1 + 16 * v7;
  *(void *)(v9 + 32) = v2;
  *(void *)(v9 + 40) = v4;
  return sub_100020D3C(v8, v6, v5 & 1, v3);
}

uint64_t sub_10000BD20(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

uint64_t sub_10000BD28()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000BD30(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000BD40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_10000B76C(*(void *)(v15 + 48) + *(void *)(a14 + 72) * v16, v14);
}

  ;
}

void sub_10000BD74()
{
}

uint64_t sub_10000BD8C()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_10000BD98()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

void sub_10000BDA4(char a1, uint64_t a2)
{
}

uint64_t sub_10000BDAC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000BDC8()
{
  return ((uint64_t (*)(void))withTaskGroup<A, B>(of:returning:isolation:body:))();
}

void sub_10000BDE4()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10000BDF4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_10000BE10()
{
}

uint64_t sub_10000BE20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10000BE28()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_10000BE30()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000BE50()
{
  return sub_100005FB0(v0, 1LL, 1LL, v1);
}

uint64_t sub_10000BE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_10000BE6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_bridgeObjectRetain(*(void *)(a15 + 8));
}

uint64_t sub_10000BE80()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

uint64_t sub_10000BED0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v1, v0);
}

uint64_t sub_10000BEE0(uint64_t a1)
{
  *uint64_t v2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v3, v1);
}

void sub_10000BEFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_10000BF0C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000BF1C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10000BF40@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(*(void *)(a1 + v1) + 4LL));
}

uint64_t sub_10000BF5C()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10000BF6C()
{
  return type metadata accessor for Logger(0LL);
}

void sub_10000BF74(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_10000BF84()
{
  return swift_release(v0);
}

uint64_t sub_10000BF8C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_10000BFBC()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10000BFC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v9 + 72, v10);
}

void sub_10000BFDC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10000BFE4()
{
  return swift_task_dealloc(v0);
}

void sub_10000BFEC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10000C000()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000C008()
{
  *(_BYTE *)(v0[10] + v0[13]) = 3;
  return v0[1];
}

uint64_t sub_10000C024()
{
  return sub_10000B7B0(v1, v0);
}

uint64_t sub_10000C030()
{
  return swift_retain(v0);
}

uint64_t sub_10000C038()
{
  return Array.description.getter(v0);
}

uint64_t sub_10000C040( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, a2, v12);
}

uint64_t sub_10000C04C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void sub_10000C054(uint64_t a1, uint64_t a2)
{
}

void sub_10000C060( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10000C06C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000C074()
{
  return type metadata accessor for DaemonRequest(0LL);
}

uint64_t sub_10000C07C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10000C088(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0LL);
}

uint64_t sub_10000C090()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v1, v0);
}

uint64_t sub_10000C0A0()
{
  return swift_retain(v0);
}

void sub_10000C0A8()
{
}

  ;
}

uint64_t sub_10000C0C4(uint64_t a1)
{
  return swift_release_n(a1, 4LL);
}

uint64_t sub_10000C0CC(uint64_t a1)
{
  return swift_retain_n(a1, 4LL);
}

  ;
}

uint64_t sub_10000C0E0(uint64_t a1)
{
  return Dictionary.init(dictionaryLiteral:)(a1, v1, v3, v2);
}

uint64_t sub_10000C0F0()
{
  return swift_retain(v0);
}

BOOL sub_10000C0F8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000C108()
{
  return static os_log_type_t.default.getter();
}

  ;
}

  ;
}

void sub_10000C130()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10000C140()
{
  return swift_task_dealloc(v0);
}

  ;
}

uint64_t sub_10000C158()
{
  return Logger.logObject.getter();
}

uint64_t sub_10000C160()
{
  return static os_log_type_t.default.getter();
}

  ;
}

  ;
}

uint64_t sub_10000C1A0()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_10000C1B0(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_10000C1B8()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000C1C0()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10000C1CC@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1 + 8));
}

uint64_t sub_10000C1D8()
{
  return sub_10000B7F4(v0);
}

uint64_t sub_10000C1E0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000C1E8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000C1F0()
{
  return swift_release(v0);
}

uint64_t sub_10000C1F8(uint64_t result, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v3 + 24) = result;
  return result;
}

uint64_t sub_10000C20C()
{
  return swift_retain(v0);
}

uint64_t sub_10000C214()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_10000C21C()
{
  return swift_release(*(void *)(v0 + 40));
}

  ;
}

uint64_t sub_10000C238()
{
  return swift_release(*(void *)(v0 + 32));
}

  ;
}

uint64_t sub_10000C24C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 88);
}

uint64_t sub_10000C260()
{
  return sub_10000B1EC();
}

void sub_10000C26C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10000C278()
{
  return swift_retain(v0);
}

uint64_t sub_10000C280()
{
  return swift_release(v0);
}

uint64_t sub_10000C288()
{
  return sub_100020E24(v0);
}

uint64_t sub_10000C290(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10000C29C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10000C2A8(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

void sub_10000C2B0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  sub_10000C240();
  __chkstk_darwin(v4);
  sub_10002252C(v5, v34[0]);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)v34 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    v34[1] = v1;
    uint64_t v41 = &_swiftEmptyArrayStorage;
    sub_100016BD0(0, v8, 0);
    uint64_t v9 = sub_100020E68(a1);
    int v11 = v10;
    uint64_t v35 = a1;
    uint64_t v36 = a1 + 56;
    while ((v9 & 0x8000000000000000LL) == 0)
    {
      sub_100022404();
      if (v9 >= v12) {
        break;
      }
      if (*(_DWORD *)(a1 + 36) != v11) {
        goto LABEL_16;
      }
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v15 = v39;
      uint64_t v14 = v40;
      uint64_t v16 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v13 + *(void *)(v39 + 72) * v9, v40);
      uint64_t v17 = v38;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v38, v16, v14);
      uint64_t v19 = Assertion.DaemonRep.policy.getter(v18);
      uint64_t v21 = v20;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
      uint64_t v22 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
      {
        sub_100016BD0(0, v22[2] + 1LL, 1);
        uint64_t v22 = v41;
      }

      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_100016BD0(v23 > 1, v24 + 1, 1);
        uint64_t v22 = v41;
      }

      v22[2] = v24 + 1;
      uint64_t v25 = (char *)&v22[2 * v24];
      *((void *)v25 + 4) = v19;
      *((void *)v25 + 5) = v21;
      int64_t v26 = sub_100022CB4();
      a1 = v35;
      uint64_t v9 = sub_100020D40(v26, v27, v28, v35);
      int v11 = v29;
      char v31 = v30 & 1;
      if (!--v8)
      {
        uint64_t v32 = sub_100022CB4();
        sub_10000B830(v32, v33, v31);
        return;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

uint64_t sub_10000C4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a3;
  uint64_t v35 = a4;
  uint64_t v7 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  int v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v38 = (char *)&v35 - v12;
  uint64_t v13 = type metadata accessor for Policy(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v43 = (uint64_t)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v39 = v19;
  uint64_t v40 = v18;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v35 - v16, a1);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v36 = a2 + 56;
  uint64_t v21 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v37 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v41 = a2;
  uint64_t result = swift_bridgeObjectRetain(a2);
  int64_t v25 = 0LL;
  uint64_t v26 = v40;
  if (!v23) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v27 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  for (unint64_t i = v27 | (v25 << 6); ; unint64_t i = __clz(__rbit64(v30)) + (v25 << 6))
  {
    uint64_t v32 = v38;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( v38,  *(void *)(v41 + 48) + *(void *)(v8 + 72) * i,  v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v32, v7);
    sub_100013644((uint64_t)v17, (uint64_t)v11, v42, v43);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      swift_release(v41);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
      return swift_release(v42);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v33 = v39;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v26);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 32))(v17, v43, v26);
    if (v23) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v25++, 1LL)) {
      break;
    }
    if (v25 >= v37) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v25);
    if (!v30)
    {
      int64_t v31 = v25 + 1;
      if (v25 + 1 >= v37) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (v30) {
        goto LABEL_16;
      }
      int64_t v31 = v25 + 2;
      if (v25 + 2 >= v37) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (v30) {
        goto LABEL_16;
      }
      int64_t v31 = v25 + 3;
      if (v25 + 3 >= v37) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (v30)
      {
LABEL_16:
        int64_t v25 = v31;
        goto LABEL_17;
      }

      int64_t v31 = v25 + 4;
      if (v25 + 4 < v37)
      {
        unint64_t v30 = *(void *)(v36 + 8 * v31);
        if (!v30)
        {
          while (1)
          {
            int64_t v25 = v31 + 1;
            if (__OFADD__(v31, 1LL)) {
              goto LABEL_29;
            }
            if (v25 >= v37) {
              goto LABEL_26;
            }
            unint64_t v30 = *(void *)(v36 + 8 * v25);
            ++v31;
            if (v30) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

LABEL_26:
      uint64_t v34 = v35;
      swift_release(v41);
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v34, v17, v40);
      return swift_release(v42);
    }

          uint64_t v26 = v28;
          swift_release(v33);
          unint64_t v24 = v26;
          int64_t v25 = 1LL;
LABEL_27:
          sub_100005FB0(v24, v25, 1LL, v32);
          return;
        }
      }
    }

  __break(1u);
  return result;
}

    uint64_t v19 = (v26 - 1) & v26;
    uint64_t v20 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_27:
    int64_t v25 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    swift_retain(v25);
    if (v25)
    {
      while (1)
      {
        uint64_t v33 = v25;
        a1(&v33);
        uint64_t result = swift_release(v25);
        if (v4) {
          break;
        }
        uint64_t v13 = v21;
        uint64_t v14 = v19;
        if ((v5 & 0x8000000000000000LL) == 0) {
          goto LABEL_11;
        }
LABEL_13:
        uint64_t v22 = __CocoaSet.Iterator.next()(result);
        if (v22)
        {
          unint64_t v23 = v22;
          v32[0] = v22;
          unint64_t v24 = type metadata accessor for InferenceProviderAsset(0LL);
          swift_unknownObjectRetain(v23);
          swift_dynamicCast(&v33, v32, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
          int64_t v25 = v33;
          swift_unknownObjectRelease(v23);
          uint64_t v21 = v13;
          uint64_t v19 = v14;
          if (v25) {
            continue;
          }
        }

        goto LABEL_38;
      }

      int v29 = v5;
      return sub_1000212AC(v29);
    }

    swift_release(a6);
    swift_release(v7);
    uint64_t v7 = v17;
  }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease(v0[28]);
LABEL_20:
    int64_t v25 = v0[9];
    sub_100011B24();
    v0[29] = v26;
    return swift_task_switch(sub_1000A14CC, v25, 0LL);
  }

  return result;
}

          v22 += 40;
          if (!--v16) {
            goto LABEL_31;
          }
        }

        if (v14) {
          goto LABEL_26;
        }
        goto LABEL_23;
      }

    sub_1000212AC(*(void *)(v22 + 448));
    uint64_t v54 = (void *)swift_task_alloc(dword_10010F464);
    *(void *)(v22 + 504) = v54;
    *uint64_t v54 = v22;
    v54[1] = sub_1000C81F4;
    sub_100030544();
    return sub_1000C2CDC();
  }

  uint64_t v33 = __CocoaSet.Iterator.next()(result);
  if (!v33) {
    goto LABEL_26;
  }
  *(void *)(v22 + 216) = v33;
  uint64_t v34 = sub_10000C074();
  sub_100022CFC();
  sub_100022CC0(v22 + 224, v22 + 216, (uint64_t)&type metadata for Swift.AnyObject + 8, v34);
  uint64_t v32 = *(void *)(v22 + 224);
  sub_100030590();
  int64_t v31 = v26;
  int v29 = v27;
LABEL_7:
  *(void *)(v22 + 48sub_100016BD0(0, v0, 0) = v31;
  *(void *)(v22 + 488) = v29;
  *(void *)(v22 + 472) = v32;
  if (!v32) {
    goto LABEL_26;
  }
  uint64_t v35 = sub_10000BD20(v32);
  Logger.logObject.getter(v35);
  uint64_t v36 = sub_10000C160();
  if (sub_100030840(v36))
  {
    int64_t v37 = *(void *)(v22 + 328);
    uint64_t v55 = *(void *)(v22 + 320);
    uint64_t v38 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v39 = sub_10000BCF4(32LL);
    a11 = v39;
    *(_DWORD *)uint64_t v38 = 136315138;
    sub_1000D0B54();
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    sub_1000D056C(v40);
    uint64_t v41 = sub_10003029C(v37, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
    sub_1000A86C8(v41, v42, &a11);
    sub_1000D0508(v43);
    sub_10000BCDC(v32);
    sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v26,  (os_log_type_t)v29,  "Cancelling request %s due to policy change",  v38);
    sub_100021F38(v39);
    sub_10000BCC4(v39);
    sub_10000BCC4((uint64_t)v38);
  }

  else
  {
    sub_10000BCDC(v32);
  }

  sub_1000D0D10(*(void **)(v22 + 304), *(void *)(v22 + 440));
  uint64_t v48 = dword_10010FBC4;
  sub_100022944();
  uint64_t v49 = (void *)swift_task_alloc(v48);
  *(void *)(v22 + 496) = v49;
  *uint64_t v49 = v22;
  v49[1] = sub_1000C7E98;
  sub_1000D03E4(*(void *)(v22 + 280));
  sub_100030544();
  return sub_1000D2DDC(v50, v51);
}

void sub_10000C810(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10000C81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10000C82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100021FC8();
  uint64_t v9 = sub_1000060B4(a1, 1LL, v8);
  if ((_DWORD)v9 == 1)
  {
    sub_1000212DC(a1, &qword_10010B208);
    uint64_t v10 = 7168LL;
  }

  else
  {
    unsigned __int8 v11 = TaskPriority.rawValue.getter(v9);
    sub_100022CF4(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL));
    uint64_t v10 = v11 | 0x1C00LL;
  }

  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v12);
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
    uint64_t v17 = v16;
    swift_unknownObjectRelease(v12);
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
  }

  if (v17 | v15)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v18 = v19;
    v19[2] = v15;
    void v19[3] = v17;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  swift_task_create(v10, v18, a4, a2, a3);
  sub_1000224F0();
}

void sub_10000C934(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10000C940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_1000060B4(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_1000212DC(a1, &qword_10010B208);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = sub_100003B20(&qword_10010B938);
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v13;
    void v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, v16, a2, a3);
}

void sub_10000CA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100021FC8();
  uint64_t v7 = sub_1000060B4(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_1000212DC(a1, &qword_10010B208);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0LL);
  if (v15 | v13)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v17 = v18;
    v18[2] = v13;
    v18[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  swift_task_create(v8, v17, v16, a2, a3);
  sub_1000224F0();
}

uint64_t sub_10000CB7C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010B4E0);
  sub_100003BA0(v0, (uint64_t)qword_10010B4E0);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_10000CBEC()
{
  uint64_t v1 = sub_100022258();
  sub_1000220F4(v1);
  swift_defaultActor_destroy(v0);
  sub_1000075C0();
}

uint64_t sub_10000CC78()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10000CC90()
{
  return type metadata accessor for PolicyManager(0LL);
}

uint64_t type metadata accessor for PolicyManager(uint64_t a1)
{
  uint64_t result = qword_10010B520;
  if (!qword_10010B520) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PolicyManager);
  }
  return result;
}

uint64_t sub_10000CCD0(uint64_t a1)
{
  v4[1] = &unk_1000D8B18;
  v4[2] = &unk_1000D8B18;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_1000D8B18;
  void v4[5] = &unk_1000D8B18;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Policy(319LL);
  if (v3 <= 0x3F)
  {
    v4[12] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 13LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_10000CD7C(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

uint64_t InferenceProviderManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10000CDC4()
{
  return InferenceProviderManager.unownedExecutor.getter();
}

uint64_t sub_10000CDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(sub_100003B20(&qword_10010B728) - 8);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v3[7] = v5;
  v3[8] = sub_100021CF0(v5);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10000CE2C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[2];
  sub_100021138(v0[4], v1);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  unint64_t v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_100102E00, v10 + 16, v7 | 7);
  v0[9] = v11;
  sub_1000212B4(v1, v11 + v8, &qword_10010B728);
  *(void *)(v11 + v9) = v3;
  uint64_t v12 = (void *)(v11 + v10);
  *uint64_t v12 = v6;
  v12[1] = v5;
  sub_100022B54(&dword_10010B6D0);
  sub_1000224B4();
  sub_1000225A4();
  uint64_t v13 = (void *)sub_100022D14();
  v0[10] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10000CF20;
  return v15();
}

uint64_t sub_10000CF20()
{
  return sub_10000BCD0();
}

uint64_t sub_10000CF5C()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000CF84(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_10002269C();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[6] = v5;
  v2[7] = sub_100021CF0(v5);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10000CFD0()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  sub_1000222C4(v1, v0[2], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = swift_allocObject(&unk_100102D88, v6 + v2, v5 | 7);
  v0[8] = v7;
  *(void *)(v7 + 16) = v4;
  sub_1000222C4(v7 + v6, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  sub_100022B54(dword_10010B790);
  sub_100021D80();
  uint64_t v8 = (void *)sub_100022D14();
  v0[9] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10000D098;
  return v10();
}

uint64_t sub_10000D098()
{
  if (!v1) {
    swift_release(*(void *)(v0 + 64));
  }
  return sub_10000BCD0();
}

uint64_t sub_10000D0E8()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v1);
}

uint64_t sub_10000D110()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000D140(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010B228);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[6] = v5;
  v2[7] = sub_100021CF0(v5);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10000D194( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v10[6];
  uint64_t v11 = v10[7];
  uint64_t v13 = v10[5];
  uint64_t v14 = v10[3];
  sub_1000222C4(v11, v10[2], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  unint64_t v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_100102D60, v17 + 8, v15 | 7);
  v10[8] = v18;
  sub_1000222C4(v18 + v16, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
  *(void *)(v18 + v17) = v14;
  int v29 = (char *)&dword_10010B6D0 + dword_10010B6D0;
  sub_100021D80();
  uint64_t v19 = (void *)sub_100022D14();
  v10[9] = (uint64_t)v19;
  *uint64_t v19 = v10;
  v19[1] = sub_10000D268;
  sub_100021F54();
  return v20(v20, v21, v22, v23, v24, v25, v26, v27, v29, a10);
}

uint64_t sub_10000D268()
{
  uint64_t v0 = sub_100022B1C();
  sub_10000BCE4(v0);
  sub_100021E70();
  sub_10000C0D4();
  return sub_10000BCD0();
}

uint64_t sub_10000D2A0()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000D2C8()
{
  *(void *)(v1 + 96) = v0;
  return sub_10000C088((uint64_t)sub_10000D2DC, v0);
}

uint64_t sub_10000D2DC()
{
  if (qword_10010B1E0 != -1) {
    swift_once(&qword_10010B1E0, sub_1000BAE74);
  }
  uint64_t v1 = type metadata accessor for FilePath(0LL);
  v0[13] = v1;
  v0[14] = sub_100003BA0(v1, (uint64_t)qword_1001102E8);
  uint64_t v2 = (void *)sub_100021EFC((uint64_t)&unk_10010CA00);
  v0[15] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10000D388;
  uint64_t v3 = sub_1000226A4();
  return v5(v3);
}

uint64_t sub_10000D388(uint64_t a1, uint64_t a2)
{
  v3[16] = v2;
  swift_task_dealloc(v7);
  uint64_t v8 = v3[12];
  if (v2)
  {
    unint64_t v9 = sub_10000D60C;
  }

  else
  {
    v3[17] = a2;
    v3[18] = a1;
    unint64_t v9 = sub_10000D3F0;
  }

  return sub_100021BCC((uint64_t)v9, v8, 0LL);
}

uint64_t sub_10000D3F0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 96);
  *(void *)(v2 + 28sub_100016BD0(0, v0, 0) = *(void *)(v0 + 144);
  sub_100021EB0();
  sub_100022B4C();
  swift_beginAccess(v2 + 304, v0 + 40, 1LL, 0LL);
  uint64_t v3 = *(void *)(v2 + 304);
  *(void *)(v2 + 304) = v1;
  swift_bridgeObjectRelease(v3);
  sub_10000C1E0();
  if (os_variant_has_internal_content("ModelManager"))
  {
    sub_10000729C((void *)(*(void *)(v0 + 96) + 112LL), *(void *)(*(void *)(v0 + 96) + 136LL));
    if (qword_10010B1E8 != -1) {
      swift_once(&qword_10010B1E8, sub_1000BAE94);
    }
    *(void *)(v0 + 152) = sub_100003BA0(*(void *)(v0 + 104), (uint64_t)qword_100110300);
    uint64_t v4 = (void *)sub_100021BB8((uint64_t)&unk_10010CA00);
    *(void *)(v0 + 16sub_100016BD0(0, v0, 0) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10000D4F8;
    sub_1000226A4();
    sub_100022084();
    return v6(v5, v6, v7, v8, v9, v10, v11, v12);
  }

  else
  {
    sub_10000E434();
    return sub_1000221B0(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10000D4F8(uint64_t a1, uint64_t a2)
{
  v3[21] = v2;
  swift_task_dealloc(v7);
  uint64_t v8 = v3[12];
  if (v2)
  {
    uint64_t v9 = (uint64_t (*)())sub_10000D868;
  }

  else
  {
    v3[22] = a2;
    v3[23] = a1;
    uint64_t v9 = sub_10000D560;
  }

  return sub_100021BCC((uint64_t)v9, v8, 0LL);
}

uint64_t sub_10000D560()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v1 + 280);
  sub_10000C030();
  sub_10002289C();
  uint64_t v3 = sub_100022C50();
  uint64_t v4 = sub_10000E388(v3, v2, v1);
  uint64_t v5 = *(void *)(v1 + 280);
  *(void *)(v1 + 28sub_100016BD0(0, v0, 0) = v4;
  swift_bridgeObjectRelease(v5);
  sub_10002257C(v1 + 304, v0 + 16);
  sub_100021EB0();
  sub_1000CAD14();
  swift_endAccess(v0 + 16);
  sub_1000228C4();
  sub_10000C1E0();
  sub_10000E434();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D60C()
{
  if (qword_10010B088 != -1) {
    swift_once(&qword_10010B088, sub_10000CB7C);
  }
  uint64_t v1 = sub_10000BF6C();
  sub_100003BA0(v1, (uint64_t)qword_10010B4E0);
  sub_10002293C();
  uint64_t v2 = sub_10002293C();
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  static os_log_type_t.fault.getter();
  BOOL v4 = sub_100022444(v3);
  uint64_t v5 = *(void *)(v0 + 128);
  if (v4)
  {
    uint64_t v6 = (_DWORD *)sub_10000BCF4(22LL);
    uint64_t v7 = (void *)sub_10000BCF4(8LL);
    uint64_t v27 = sub_10000BCF4(32LL);
    *uint64_t v6 = 136315394;
    sub_100021AD0(&qword_10010BA50, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath);
    uint64_t v9 = sub_100022BE0(v8);
    sub_1000229F4(v9, v10, v11, v12);
    *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v13;
    sub_1000229E4(v13, v14, v15, (uint64_t)(v6 + 3), v16, v17, v18, v19, v0 + 88, v0 + 80);
    sub_10000BD28();
    sub_1000226B0();
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 88) = v20;
    sub_100022A14(v20, v0 + 96);
    *uint64_t v7 = v20;
    sub_100021F6C();
    sub_100021F6C();
    sub_100022590((void *)&_mh_execute_header, v21, v22, "Failed to load policy file %s: %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v7);
    sub_10000BCC4((uint64_t)v7);
    sub_100021F38(v27);
    sub_10000BCC4(v27);
    sub_10000BCC4((uint64_t)v6);

    sub_100021F6C();
  }

  else
  {
    sub_100021F6C();
    sub_100021F6C();
    sub_100021F6C();
  }

  if (os_variant_has_internal_content("ModelManager"))
  {
    sub_10000729C((void *)(*(void *)(v0 + 96) + 112LL), *(void *)(*(void *)(v0 + 96) + 136LL));
    if (qword_10010B1E8 != -1) {
      swift_once(&qword_10010B1E8, sub_1000BAE94);
    }
    *(void *)(v0 + 152) = sub_100003BA0(*(void *)(v0 + 104), (uint64_t)qword_100110300);
    uint64_t v23 = (void *)sub_100021EFC((uint64_t)&unk_10010CA00);
    *(void *)(v0 + 16sub_100016BD0(0, v0, 0) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10000D4F8;
    uint64_t v24 = sub_1000226A4();
    return v26(v24);
  }

  else
  {
    sub_10000E434();
    return sub_100021CD4(*(uint64_t (**)(void))(v0 + 8));
  }

#error "10000D94C: call analysis failed (funcsize=103)"
uint64_t sub_10000DA20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_s *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v7 = sub_100003B20(&qword_10010B858);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void *)(a2 + 280);
  int64_t v31 = a1;
  swift_bridgeObjectRetain(v10);
  sub_10000DCC4((uint64_t (*)(char *))sub_100021B80, v10, (uint64_t)v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = sub_100003B20(&qword_10010B830);
  uint64_t result = sub_1000060B4((uint64_t)v9, 1LL, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = *v9;
    uint64_t v13 = v9[1];
    uint64_t v15 = (char *)v9 + *(int *)(v11 + 48);
    uint64_t v16 = type metadata accessor for Policy(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    if (qword_10010B088 != -1) {
      swift_once(&qword_10010B088, sub_10000CB7C);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v18, (uint64_t)qword_10010B4E0);
    uint64_t v19 = swift_bridgeObjectRetain(v13);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    uint64_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v30 = a1;
      uint64_t v22 = swift_slowAlloc(12LL, -1LL);
      v28[1] = v3;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      int v29 = a3;
      uint64_t v25 = v24;
      uint64_t v34 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain(v13);
      sub_100015EF8(v14, v13, &v34);
      uint64_t v32 = v26;
      a1 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v23 + 4);
      swift_bridgeObjectRelease_n(v13, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Internal policy file contains policy with same name as existing policy: %s",  v23,  0xCu);
      swift_arrayDestroy(v25, 1LL);
      uint64_t v27 = v25;
      a3 = v29;
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v13, 2LL);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a3, a1, v16);
  }

  return result;
}

void sub_10000DCC4(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int64_t v31 = a1;
  uint64_t v28 = a3;
  uint64_t v32 = sub_100003B20(&qword_10010B830);
  uint64_t v5 = __chkstk_darwin(v32);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v27 - v8;
  sub_100020D04(a2, v34);
  uint64_t v33 = v34[0];
  int64_t v35 = v34[3];
  unint64_t v10 = v34[4];
  uint64_t v29 = v34[1];
  int64_t v30 = (unint64_t)(v34[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a2);
  if (!v10) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  unint64_t v12 = v11 | (v35 << 6);
  while (1)
  {
    uint64_t v16 = *(void *)(v33 + 56);
    uint64_t v17 = (uint64_t *)(*(void *)(v33 + 48) + 16 * v12);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = type metadata accessor for Policy(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))( &v9[*(int *)(v32 + 48)],  v16 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  v20);
    *(void *)uint64_t v9 = v18;
    *((void *)v9 + sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v19;
    sub_1000212B4((uint64_t)v9, (uint64_t)v7, &qword_10010B830);
    swift_bridgeObjectRetain(v19);
    char v21 = v31(v7);
    if (v3)
    {
      sub_1000212DC((uint64_t)v7, &qword_10010B830);
      swift_release(v33);
      return;
    }

    if ((v21 & 1) != 0)
    {
      swift_release(v33);
      uint64_t v23 = v28;
      sub_1000212B4((uint64_t)v7, v28, &qword_10010B830);
      uint64_t v24 = v23;
      uint64_t v25 = 0LL;
      goto LABEL_27;
    }

    sub_1000212DC((uint64_t)v7, &qword_10010B830);
    if (v10) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v13 >= v30) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v35 + 2;
      if (v35 + 2 >= v30) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v15);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v35 + 3;
      if (v35 + 3 >= v30) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v15);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v35 + 4;
      if (v35 + 4 >= v30) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v15);
      if (v14)
      {
LABEL_12:
        int64_t v13 = v15;
      }

      else
      {
        int64_t v13 = v35 + 5;
        if (v35 + 5 >= v30) {
          goto LABEL_26;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v13);
        if (!v14)
        {
          int64_t v22 = v35 + 6;
          while (v22 < v30)
          {
            unint64_t v14 = *(void *)(v29 + 8 * v22++);
            if (v14)
            {
              int64_t v13 = v22 - 1;
              goto LABEL_13;
            }
          }

LABEL_13:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v35 = v13;
  }

  __break(1u);
}

      uint64_t v29 = (v47 - 1) & v47;
      int64_t v30 = __clz(__rbit64(v47)) + (v31 << 6);
      goto LABEL_4;
    }

void sub_10000DFA4(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
}

void sub_10000DFD0(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
}

void sub_10000DFFC( uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = v4;
  uint64_t v7 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100022418();
    uint64_t v11 = __CocoaSet.makeIterator()(v10);
    uint64_t v5 = a4(0LL);
    unint64_t v12 = (unint64_t *)sub_100022D1C();
    sub_100021AD0(v12, v13);
    uint64_t v15 = Set.Iterator.init(_cocoa:)(v11, v5, v14);
    uint64_t v7 = v44[1];
    uint64_t v43 = v44[2];
    uint64_t v16 = v44[3];
    int64_t v17 = v44[4];
    uint64_t v18 = v44[5];
  }

  else
  {
    sub_1000223F8();
    uint64_t v43 = v7 + 56;
    uint64_t v20 = ~v19;
    sub_100022D3C();
    uint64_t v18 = v21 & v22;
    uint64_t v15 = sub_100022418();
    uint64_t v16 = v20;
    int64_t v17 = 0LL;
  }

  int64_t v42 = (unint64_t)(v16 + 64) >> 6;
  if (v7 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v18)
  {
    sub_100022CD4();
    uint64_t v24 = v23 | (v17 << 6);
    int64_t v25 = v17;
    goto LABEL_27;
  }

  int64_t v25 = v17 + 1;
  if (!__OFADD__(v17, 1LL))
  {
    if (v25 >= v42) {
      goto LABEL_39;
    }
    if (!*(void *)(v43 + 8 * v25))
    {
      sub_100022CA8();
      if (v30 == v31)
      {
LABEL_39:
        sub_100022C70(v7);
        return;
      }

      sub_100022C9C();
      if (v33) {
        goto LABEL_25;
      }
      sub_100022CA8();
      if (v30 == v31) {
        goto LABEL_39;
      }
      sub_100022C9C();
      if (v34) {
        goto LABEL_25;
      }
      sub_100022CA8();
      if (v30 == v31) {
        goto LABEL_39;
      }
      sub_100022C9C();
      if (v35)
      {
LABEL_25:
        int64_t v25 = v32;
      }

      else
      {
        int64_t v25 = v17 + 5;
        if (v17 + 5 >= v42) {
          goto LABEL_39;
        }
        if (!*(void *)(v43 + 8 * v25))
        {
          while (1)
          {
            sub_100022CA8();
            if (v30 == v31) {
              goto LABEL_39;
            }
            sub_100022C9C();
            uint64_t v39 = v38 + 1;
            if (v40)
            {
              int64_t v25 = v39 - 1;
              break;
            }
          }
        }
      }
    }

    sub_100022C7C();
    uint64_t v24 = v36 + (v25 << 6);
LABEL_27:
    uint64_t v29 = *(void *)(*(void *)(v7 + 48) + 8 * v24);
    sub_10000C20C();
    if (v29)
    {
      while (1)
      {
        uint64_t v45 = v29;
        char v37 = a1(&v45);
        if (v6) {
          break;
        }
        if ((v37 & 1) != 0) {
          goto LABEL_39;
        }
        swift_release(v29);
        int64_t v17 = v25;
        uint64_t v18 = v5;
        if ((v7 & 0x8000000000000000LL) == 0) {
          goto LABEL_8;
        }
LABEL_10:
        uint64_t v26 = __CocoaSet.Iterator.next()(v15);
        if (v26)
        {
          uint64_t v27 = v26;
          v44[0] = v26;
          uint64_t v28 = a4(0LL);
          sub_100022CFC();
          swift_dynamicCast(&v45, v44, (char *)&type metadata for Swift.AnyObject + 8, v28, 7LL);
          uint64_t v29 = v45;
          swift_unknownObjectRelease(v27);
          int64_t v25 = v17;
          uint64_t v5 = v18;
          if (v29) {
            continue;
          }
        }

        goto LABEL_39;
      }

      swift_release(v29);
    }

    goto LABEL_39;
  }

  __break(1u);
}

void sub_10000E2B0(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10000E2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v10 = a2;
  sub_100017600( a1,  (uint64_t)sub_1000175A0,  0LL,  isUniquelyReferenced_nonNull_native,  (uint64_t)&v10,  a3,  (uint64_t)&_swift_bridgeObjectRelease,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100012D60);
  uint64_t v8 = v10;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_bridgeObjectRelease(a3);
  if (v3) {
    swift_bridgeObjectRelease(v8);
  }
  return v8;
}

uint64_t sub_10000E388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v10 = a2;
  sub_100017600( a1,  (uint64_t)sub_1000175A0,  0LL,  isUniquelyReferenced_nonNull_native,  (uint64_t)&v10,  a3,  (uint64_t)&_swift_release,  (void (*)(uint64_t, uint64_t, uint64_t))sub_10000DA20);
  uint64_t v8 = v10;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_release(a3);
  if (v3) {
    swift_bridgeObjectRelease(v8);
  }
  return v8;
}

void sub_10000E434()
{
  uint64_t v1 = *(void *)(v0 + 280);
  swift_beginAccess(v0 + 288, v5, 0LL, 0LL);
  sub_10000C2A8(v1);
  uint64_t v2 = sub_1000225A4();
  uint64_t v3 = sub_10000E2DC(v2, v1, v1);
  uint64_t v4 = *(void *)(v0 + 296);
  *(void *)(v0 + 296) = v3;
  swift_bridgeObjectRelease(v4);
  sub_1000223A4();
}

uint64_t sub_10000E498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  uint64_t v7 = sub_100003B20(&qword_10010B728);
  v5[11] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000E4FC, a3, 0LL);
}

uint64_t sub_10000E4FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  sub_100022258();
  uint64_t v25 = sub_100022C08();
  if (sub_1000060B4(v25, 1LL, v26) == 1)
  {
    uint64_t v28 = *(void *)(v22 + 72);
    uint64_t v27 = *(void *)(v22 + 80);
    uint64_t v29 = sub_10002289C();
    sub_10000C2B0(v29);
    char v31 = v30;
    sub_10000C000();
    char v32 = sub_10000E704(v28, v27, v31);
    sub_10000BD28();
    if ((v32 & 1) != 0)
    {
      if (qword_10010B088 != -1) {
        swift_once(&qword_10010B088, sub_10000CB7C);
      }
      uint64_t v33 = *(void *)(v22 + 80);
      uint64_t v34 = sub_10000BF6C();
      os_log_type_t v35 = sub_100003BA0(v34, (uint64_t)qword_10010B4E0);
      uint64_t v36 = sub_10000C2A8(v33);
      char v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.fault.getter();
      BOOL v39 = sub_1000228A4(v38);
      uint64_t v40 = *(void *)(v22 + 80);
      if (v39)
      {
        uint64_t v41 = *(void *)(v22 + 72);
        int64_t v42 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v43 = sub_10000BCF4(32LL);
        a10 = v43;
        *(_DWORD *)int64_t v42 = 136315138;
        sub_100022C50();
        sub_100015EF8(v41, v40, &a10);
        *(void *)(v22 + 48) = v44;
        sub_100022C00(v22 + 48, v22 + 56, (uint64_t)(v42 + 4));
        swift_bridgeObjectRelease_n(v40, 3LL);
        sub_100022210( (void *)&_mh_execute_header,  v37,  v35,  "Removed trial policy %s while it was still in use by an assertion",  v42);
        sub_100021F38(v43);
        sub_10000BCC4(v43);
        sub_10000BCC4((uint64_t)v42);
      }

      else
      {
        sub_10000C1B0(*(void *)(v22 + 80));
      }
    }
  }

  uint64_t v45 = *(void *)(v22 + 80);
  uint64_t v46 = *(void *)(v22 + 88);
  uint64_t v48 = *(void *)(v22 + 64);
  uint64_t v47 = *(void *)(v22 + 72);
  sub_100021138(*(void *)(v22 + 56), v46);
  sub_10002257C(v48 + 288, v22 + 16);
  sub_100022944();
  sub_10009D234(v46, v47, v45);
  swift_endAccess(v22 + 16);
  sub_10000E434();
  sub_10000C1B8();
  return sub_100021CD4(*(uint64_t (**)(void))(v22 + 8));
}

uint64_t sub_10000E704(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = sub_100021EB8(v7, v8, a1, a2);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_100021EB8(v14, v15, a1, a2) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10000E7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010B208);
  v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000E820, v3, 0LL);
}

void sub_10000E820()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = *(void *)(*(void *)(v1 + 312) + 16LL);
  v0[7] = v4;
  sub_100021FC8();
  sub_100021C1C();
  sub_100021AD0(&qword_10010B6B0, type metadata accessor for PolicyManager);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)sub_100007460((uint64_t)&unk_100102D10, 64LL);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10000BD20(v4);
  sub_100021C84();
  uint64_t v8 = sub_100021D80();
  uint64_t v9 = sub_1000220E8(v8, (uint64_t)&unk_10010B6E0);
  v0[8] = v9;
  sub_100021C1C();
  uint64_t v10 = (void *)sub_100007460((uint64_t)&unk_100102D38, 48LL);
  v10[2] = v1;
  v10[3] = v6;
  v10[4] = v1;
  v10[5] = v9;
  sub_100021C84();
  sub_10000C20C();
  uint64_t v11 = sub_100021D80();
  uint64_t v12 = sub_100021F2C(v11, (uint64_t)&unk_10010B6F0);
  sub_100021E00(v12);
  sub_100021DDC();
  sub_100022204();
  if (v15)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v13 + 24) = v14;
    BOOL v16 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[9] = v16;
    sub_100022818(v16);
    sub_1000221DC();
    sub_100021C9C();
  }

uint64_t sub_10000E95C()
{
  return sub_10000BD98();
}

void sub_10000E99C()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DE4(v1);
    sub_100021E70();
    sub_10000BFE4();
    sub_10000743C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10000E9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  *(void *)(v3 + 48) = sub_100021CA4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_10000EA1C()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = *(void *)(*(void *)(v1 + 192) + 16LL);
  v0[7] = v4;
  sub_100021FC8();
  sub_100021C1C();
  sub_100021AD0(&qword_10010B868, (uint64_t (*)(uint64_t))type metadata accessor for TrialManager);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)sub_100007460((uint64_t)&unk_100102E28, 64LL);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10000BD20(v4);
  sub_100021C84();
  uint64_t v8 = sub_100021D80();
  uint64_t v9 = sub_1000220E8(v8, (uint64_t)&unk_10010B878);
  v0[8] = v9;
  sub_100021C1C();
  uint64_t v10 = (void *)sub_100007460((uint64_t)&unk_100102E50, 48LL);
  v10[2] = v1;
  v10[3] = v6;
  v10[4] = v1;
  v10[5] = v9;
  sub_100021C84();
  sub_10000C20C();
  uint64_t v11 = sub_100021D80();
  uint64_t v12 = sub_100021F2C(v11, (uint64_t)&unk_10010B888);
  sub_100021E00(v12);
  sub_100021DDC();
  sub_100022204();
  if (v15)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v13 + 24) = v14;
    BOOL v16 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[9] = v16;
    sub_100022818(v16);
    sub_1000221DC();
    sub_100021C9C();
  }

uint64_t sub_10000EB58()
{
  return sub_10000BD98();
}

void sub_10000EB98()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DE4(v1);
    sub_100021E70();
    sub_10000BFE4();
    sub_10000743C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10000EBD8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  v3[5] = sub_100021CA4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_10000EC1C()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = *(void *)(*(void *)(v2 + 112) + 16LL);
  v0[6] = v5;
  sub_100021FC8();
  sub_100021C1C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)sub_100007460((uint64_t)&unk_100102F68, 64LL);
  v8[2] = v2;
  v8[3] = v7;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v4;
  v8[7] = v3;
  sub_10000BD20(v5);
  sub_100021C84();
  sub_100021D80();
  uint64_t v9 = sub_100003890(v1, (uint64_t)&unk_10010B958, (uint64_t)v8);
  v0[7] = v9;
  sub_100021C1C();
  uint64_t v10 = (void *)sub_100007460((uint64_t)&unk_100102F90, 48LL);
  v10[2] = v2;
  v10[3] = v7;
  v10[4] = v2;
  v10[5] = v9;
  sub_100021C84();
  sub_10000C20C();
  uint64_t v11 = sub_100021D80();
  uint64_t v12 = sub_100021F2C(v11, (uint64_t)&unk_10010B968);
  sub_100021E00(v12);
  sub_100021DDC();
  sub_100022204();
  if (v15)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v13 + 24) = v14;
    uint64_t v16 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    int64_t v17 = (void *)sub_100021E64(v16);
    *int64_t v17 = v0;
    v17[1] = sub_10000ED68;
    sub_100021C9C();
  }

uint64_t sub_10000ED68()
{
  return sub_10000BD98();
}

void sub_10000EDA8()
{
  if (v3)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 56);
    *(void *)(v1 + 24) = v2;
    swift_release(v4);
    sub_100021E70();
    uint64_t v5 = *(unsigned __int8 *)(v0 + 72);
    sub_10000BFE4();
    (*(void (**)(uint64_t))(v0 + 8))(v5);
  }

uint64_t sub_10000EE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  *(void *)(v3 + 48) = sub_100021CA4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_10000EE44()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v0[7] = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  uint64_t v5 = *(void *)(*(void *)(v1 + v4) + 16LL);
  v0[8] = v5;
  sub_100021FC8();
  sub_100021C1C();
  sub_100021AD0(&qword_10010B9E0, type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)sub_100007460((uint64_t)&unk_100103008, 64LL);
  v8[2] = v1;
  v8[3] = v7;
  v8[4] = v1;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v2;
  sub_10000BD20(v5);
  sub_100021C84();
  uint64_t v9 = sub_100021D80();
  uint64_t v10 = sub_1000220E8(v9, (uint64_t)&unk_10010BA18);
  v0[9] = v10;
  sub_100021C1C();
  uint64_t v11 = (void *)sub_100007460((uint64_t)&unk_100103030, 48LL);
  v11[2] = v1;
  v11[3] = v7;
  v11[4] = v1;
  v11[5] = v10;
  sub_100021C84();
  sub_10000C20C();
  uint64_t v12 = sub_100021D80();
  uint64_t v13 = sub_100021F2C(v12, (uint64_t)&unk_10010BA28);
  sub_100021E00(v13);
  sub_100021DDC();
  sub_100022204();
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v14 + 24) = v15;
    int64_t v17 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[10] = v17;
    sub_100022818(v17);
    sub_1000221DC();
    sub_100021FEC();
  }

uint64_t sub_10000EF80()
{
  return sub_10000BD98();
}

uint64_t sub_10000EFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  *(void *)(v3 + 48) = sub_100021CA4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_10000F000()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = *(void *)(*(void *)(v1 + 112) + 16LL);
  v0[7] = v4;
  sub_100021FC8();
  sub_100021C1C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)sub_100007460((uint64_t)&unk_100102EC8, 64LL);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10000BD20(v4);
  sub_100021C84();
  uint64_t v8 = sub_100021D80();
  uint64_t v9 = sub_1000220E8(v8, (uint64_t)&unk_10010B8F0);
  v0[8] = v9;
  sub_100021C1C();
  uint64_t v10 = (void *)sub_100007460((uint64_t)&unk_100102EF0, 48LL);
  v10[2] = v1;
  v10[3] = v6;
  v10[4] = v1;
  v10[5] = v9;
  sub_100021C84();
  sub_10000C20C();
  uint64_t v11 = sub_100021D80();
  uint64_t v12 = sub_100021F2C(v11, (uint64_t)&unk_10010B900);
  sub_100021E00(v12);
  sub_100021DDC();
  sub_100022204();
  if (v15)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v13 + 24) = v14;
    char v16 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[9] = v16;
    sub_100022818(v16);
    sub_1000221DC();
    sub_100021C9C();
  }

uint64_t sub_10000F13C()
{
  return sub_10000BD98();
}

void sub_10000F17C()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DE4(v1);
    sub_100021E70();
    sub_10000BFE4();
    sub_10000743C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10000F1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  *(void *)(v3 + 48) = sub_100021CA4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_10000F1FC()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_workQueueState;
  v0[7] = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_workQueueState;
  uint64_t v5 = *(void *)(*(void *)(v1 + v4) + 16LL);
  v0[8] = v5;
  sub_100021FC8();
  sub_100021C1C();
  sub_100021AD0(&qword_10010B898, type metadata accessor for RunningBoardProvider);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)sub_100007460((uint64_t)&unk_100102E78, 64LL);
  v8[2] = v1;
  v8[3] = v7;
  v8[4] = v1;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v2;
  sub_10000BD20(v5);
  sub_100021C84();
  uint64_t v9 = sub_100021D80();
  uint64_t v10 = sub_1000220E8(v9, (uint64_t)&unk_10010B8A8);
  v0[9] = v10;
  sub_100021C1C();
  uint64_t v11 = (void *)sub_100007460((uint64_t)&unk_100102EA0, 48LL);
  v11[2] = v1;
  v11[3] = v7;
  v11[4] = v1;
  v11[5] = v10;
  sub_100021C84();
  sub_10000C20C();
  uint64_t v12 = sub_100021D80();
  uint64_t v13 = sub_100021F2C(v12, (uint64_t)&unk_10010B8B8);
  sub_100021E00(v13);
  sub_100021DDC();
  sub_100022204();
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v14 + 24) = v15;
    int64_t v17 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[10] = v17;
    sub_100022818(v17);
    sub_1000221DC();
    sub_100021FEC();
  }

uint64_t sub_10000F338()
{
  return sub_10000BD98();
}

void sub_10000F378()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DF4(*(void *)(v0 + 72), v1);
    sub_100021E70();
    sub_10000BFE4();
    sub_10000743C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10000F3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep(0LL);
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[8] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  v3[11] = swift_task_alloc(v7);
  v3[12] = swift_task_alloc(v7);
  uint64_t v8 = sub_100003B20(&qword_10010B728);
  v3[13] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000F470, a2, 0LL);
}

uint64_t sub_10000F470(uint64_t a1)
{
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[13];
  uint64_t v4 = Assertion.DaemonRep.policy.getter(a1);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v2 + 296);
  sub_10002289C();
  sub_10000FAE0(v4, v6, v7);
  sub_10000C000();
  sub_1000228C4();
  uint64_t v8 = sub_100022258();
  LODWORD(v4) = sub_1000060B4(v3, 1LL, v8);
  sub_1000212DC(v3, &qword_10010B728);
  if ((_DWORD)v4 == 1)
  {
    if (qword_10010B088 != -1) {
      swift_once(&qword_10010B088, sub_10000CB7C);
    }
    uint64_t v10 = v1[8];
    uint64_t v9 = v1[9];
    uint64_t v11 = v1[6];
    uint64_t v12 = sub_10000BF6C();
    sub_100003BA0(v12, (uint64_t)qword_10010B4E0);
    sub_1000222C4(v9, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
    uint64_t v13 = (os_log_s *)sub_1000228BC();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = sub_100022444(v13);
    uint64_t v17 = v1[8];
    uint64_t v16 = v1[9];
    if (v15)
    {
      uint64_t v104 = v1[7];
      uint64_t v18 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v19 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v20 = Assertion.DaemonRep.policy.getter(v19);
      sub_100022788(v20, v21, v22, v23, v24, v25, v26);
      v1[2] = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v18 + 4);
      sub_10000C1E0();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v104);
      sub_100022210((void *)&_mh_execute_header, v13, v14, "Failed to acquire assertion: Policy %s does not exist", v18);
      sub_100021F38(v19);
      sub_10000BCC4(v19);
      sub_10000BCC4((uint64_t)v18);
    }

    else
    {
      (*(void (**)(void, void))(v17 + 8))(v1[9], v1[7]);
    }

    uint64_t v50 = v1[12];
    uint64_t v51 = v1[13];
    uint64_t v52 = v1[11];
    uint64_t v53 = type metadata accessor for ModelManagerError(0LL);
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v55 = swift_allocError(v53, v54, 0LL, 0LL);
    char v57 = v56;
    *uint64_t v56 = Assertion.DaemonRep.policy.getter(v55);
    v57[1] = v58;
    uint64_t v59 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v53 - 8) + 104LL))( v57,  enum case for ModelManagerError.policyNotFound(_:),  v53);
    swift_willThrow(v59, v60, v61, v62, v63, v64, v65, v66);
    swift_task_dealloc(v51);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    sub_10002294C();
    sub_10000BFE4();
    goto LABEL_19;
  }

  sub_100022C50();
  sub_100030FBC();
  char v29 = v28;
  sub_1000228C4();
  if ((v29 & 1) != 0)
  {
    if (qword_10010B088 != -1) {
      swift_once(&qword_10010B088, sub_10000CB7C);
    }
    uint64_t v30 = v1[10];
    uint64_t v31 = v1[7];
    uint64_t v32 = v1[8];
    uint64_t v33 = v1[6];
    uint64_t v34 = sub_10000BF6C();
    sub_100003BA0(v34, (uint64_t)qword_10010B4E0);
    os_log_type_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v35(v30, v33, v31);
    uint64_t v36 = (os_log_s *)sub_1000228BC();
    os_log_type_t v37 = static os_log_type_t.fault.getter();
    if (sub_10002275C(v37))
    {
      uint64_t v38 = v1[11];
      uint64_t v102 = v1[8];
      uint64_t v39 = v1[7];
      uint64_t v40 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v105 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v41 = sub_100022D1C();
      ((void (*)(uint64_t))v35)(v41);
      uint64_t v42 = String.init<A>(describing:)(v38, v39);
      sub_100022788(v42, v43, v44, v45, v46, v47, v48);
      v1[4] = v49;
      sub_100022C00((uint64_t)(v1 + 4), (uint64_t)(v1 + 5), (uint64_t)(v40 + 4));
      sub_100022D34();
      sub_1000228D4(v102);
      sub_100022210( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v31,  "Failed to acquire assetion: redundant assertion ID: %s",  v40);
      sub_100021F38(v105);
      sub_10000BCC4(v105);
      sub_10000BCC4((uint64_t)v40);
    }

    else
    {
      (*(void (**)(void, void))(v1[8] + 8LL))(v1[10], v1[7]);
    }

    swift_task_dealloc(v1[13]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_1000227B8();
LABEL_19:
    sub_10002228C();
    __asm { BR              X0 }
  }

  if (qword_10010B088 != -1) {
    swift_once(&qword_10010B088, sub_10000CB7C);
  }
  uint64_t v67 = v1[12];
  uint64_t v69 = v1[7];
  uint64_t v68 = v1[8];
  uint64_t v70 = v1[6];
  uint64_t v71 = sub_10000BF6C();
  uint64_t v72 = sub_100003BA0(v71, (uint64_t)qword_10010B4E0);
  uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 16);
  uint64_t v74 = v73(v67, v70, v69);
  uint64_t v75 = (os_log_s *)v72;
  Logger.logObject.getter(v74);
  os_log_type_t v76 = sub_100022604();
  BOOL v77 = sub_100022260(v76);
  uint64_t v78 = v1[12];
  if (v77)
  {
    uint64_t v103 = (void (*)(uint64_t, uint64_t, uint64_t))v73;
    uint64_t v79 = v1[11];
    uint64_t v80 = v1[7];
    uint64_t v101 = v1[8];
    v81 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v82 = sub_10000BCF4(32LL);
    *(_DWORD *)v81 = 136315138;
    v103(v79, v78, v80);
    uint64_t v83 = String.init<A>(describing:)(v79, v80);
    uint64_t v85 = v84;
    sub_100022788(v83, v84, v86, v87, v88, v89, v90);
    v1[3] = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v81 + 4);
    uint64_t v92 = v85;
    uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v103;
    swift_bridgeObjectRelease(v92);
    sub_1000228D4(v101);
    sub_100022210((void *)&_mh_execute_header, v75, (os_log_type_t)v70, "Acquiring assertion: %s", v81);
    sub_100021F38(v82);
    sub_10000BCC4(v82);
    sub_10000BCC4((uint64_t)v81);
  }

  else
  {
    (*(void (**)(void, void))(v1[8] + 8LL))(v1[12], v1[7]);
  }

  uint64_t v94 = sub_100003B20(&qword_10010B7B8);
  uint64_t v95 = (__n128 *)sub_100022270(v94);
  uint64_t v96 = sub_100022A50(v95, (__n128)xmmword_1000D8890);
  ((void (*)(char *))v73)(v96);
  sub_100003BDC((uint64_t)v95);
  v1[14] = v97;
  uint64_t v98 = (void *)swift_task_alloc(dword_10010B7C4);
  v1[15] = v98;
  *uint64_t v98 = v1;
  v98[1] = sub_10000FA80;
  sub_1000226A4();
  sub_10002228C();
  return sub_10000FD20(v99);
}

uint64_t sub_10000FA80()
{
  uint64_t v2 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v2);
}

uint64_t sub_10000FAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100022574(), (v3 & 1) != 0))
  {
    uint64_t v4 = sub_100022258();
    sub_100022220(v4);
    uint64_t v5 = sub_1000224BC();
  }

  else
  {
    sub_100022258();
    uint64_t v5 = sub_10002244C();
  }

  return sub_100021FBC(v5, v6, v7, v8);
}

uint64_t sub_10000FB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = sub_100022574();
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 16 * v4);
  sub_10000C030();
  return v6;
}

double sub_10000FB78@<D0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100022574(), (v5 & 1) != 0))
  {
    sub_100021868(*(void *)(v2 + 56) + 40 * v4, a2);
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

uint64_t sub_10000FBCC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10001668C(), (v2 & 1) != 0))
  {
    uint64_t v3 = sub_100022694();
    sub_100022220(v3);
    uint64_t v4 = sub_1000224BC();
  }

  else
  {
    sub_100022694();
    uint64_t v4 = sub_10002244C();
  }

  return sub_100021FBC(v4, v5, v6, v7);
}

uint64_t sub_10000FC34@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100022574(), (v5 & 1) != 0))
  {
    unint64_t v6 = v4;
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v8 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
    sub_100021A5C( v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * v6,  a2,  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    uint64_t v9 = sub_1000224BC();
  }

  else
  {
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
    uint64_t v9 = sub_10002244C();
  }

  return sub_100021FBC(v9, v10, v11, v12);
}

uint64_t sub_10000FCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_100022574(), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(v3 + 56) + 8 * v4);
  }
  else {
    return 0LL;
  }
}

void sub_10000FCE4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    sub_100016714(a1);
    if ((v2 & 1) != 0) {
      swift_retain();
    }
  }

  sub_1000075C0();
}

uint64_t sub_10000FD20(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10000C088((uint64_t)sub_10000FD34, v1);
}

uint64_t sub_10000FD34()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 320LL);
  sub_100021EB0();
  uint64_t v2 = sub_100022944();
  *(void *)(v0 + 32) = sub_10001235C(v2, v1);
  sub_100021EB0();
  char v3 = sub_100022D28();
  sub_10000C1E0();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    char v5 = (void *)swift_task_alloc(dword_10010B70C);
    *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = v5;
    uint64_t v6 = sub_100022B30(v5, (uint64_t)sub_10000FDD4);
    return sub_100012740(v6);
  }

uint64_t sub_10000FDD4()
{
  uint64_t v1 = *v0;
  uint64_t v4 = v1;
  uint64_t v2 = *v0;
  sub_10000BE20(*(void *)(v1 + 40), &v4);
  swift_bridgeObjectRelease(*(void *)(v1 + 32));
  return sub_100007418(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10000FE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010B208);
  v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000FE74, v3, 0LL);
}

void sub_10000FE74()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = *(void *)(*(void *)(v1 + 312) + 16LL);
  v0[7] = v4;
  sub_100021FC8();
  sub_100021F18();
  sub_100021AD0(&qword_10010B6B0, type metadata accessor for PolicyManager);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)sub_100007460((uint64_t)&unk_100102DB0, 64LL);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10000BD20(v4);
  sub_100021C84();
  uint64_t v8 = sub_100021D80();
  sub_10002286C(v8, (uint64_t)&unk_10010B7A0);
  uint64_t v10 = v9;
  v0[8] = v9;
  uint64_t v11 = *(void *)(v1 + 312);
  sub_100021F18();
  uint64_t v12 = (void *)sub_100007460((uint64_t)&unk_100102DD8, 48LL);
  v12[2] = v1;
  v12[3] = v6;
  v12[4] = v1;
  v12[5] = v10;
  sub_100021C84();
  sub_10000C0F0();
  uint64_t v13 = swift_retain(v10);
  *(void *)(v11 + 16) = sub_100022BD4(v13, (uint64_t)&unk_10010B7B0);
  sub_1000228B4();
  sub_100021DDC();
  sub_100022204();
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v14 + 24) = v15;
    uint64_t v17 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[9] = v17;
    sub_100003B20(&qword_10010B468);
    *uint64_t v17 = v0;
    v17[1] = sub_10000FFE0;
    sub_100022930();
    sub_100021F10();
  }

uint64_t sub_10000FFE0()
{
  return sub_10000BCD0();
}

void sub_100010020()
{
  if (v1)
  {
    __break(1u);
  }

  else
  {
    sub_100021DE4(v0);
    sub_100021E70();
    sub_10000BFE4();
    uint64_t v2 = (uint64_t (*)(void))sub_1000227B8();
    sub_100021E4C(v2);
  }

void sub_100010064()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DE4(v1);
    sub_100021E70();
    sub_10000BFE4();
    sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000100AC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  v3[6] = sub_100021CA4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_1000100F0()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = *(void *)(*(void *)(v2 + 112) + 16LL);
  v0[7] = v5;
  sub_100021FC8();
  sub_100021C1C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)sub_100007460((uint64_t)&unk_100102F18, 64LL);
  v8[2] = v2;
  v8[3] = v7;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v4;
  v8[7] = v3;
  sub_10000BD20(v5);
  sub_100021C84();
  sub_100021D80();
  uint64_t v9 = sub_10000C940(v1, (uint64_t)&unk_10010B920, (uint64_t)v8);
  v0[8] = v9;
  sub_100021C1C();
  uint64_t v10 = (void *)sub_100007460((uint64_t)&unk_100102F40, 48LL);
  v10[2] = v2;
  v10[3] = v7;
  v10[4] = v2;
  v10[5] = v9;
  sub_100021C84();
  sub_10000C20C();
  uint64_t v11 = sub_100021D80();
  uint64_t v12 = sub_100021F2C(v11, (uint64_t)&unk_10010B930);
  sub_100021E00(v12);
  sub_100021DDC();
  sub_100022204();
  if (v15)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v13 + 24) = v14;
    char v16 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[9] = v16;
    sub_100003B20(&qword_10010B938);
    sub_100003B20(&qword_10010B468);
    *char v16 = v0;
    v16[1] = sub_100010264;
    sub_100021F10();
  }

uint64_t sub_100010264()
{
  return sub_10000BCD0();
}

void sub_1000102A4()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DE4(v1);
    sub_100021E70();
    uint64_t v3 = *(void *)(v0 + 16);
    sub_10000BFE4();
    (*(void (**)(uint64_t))(v0 + 8))(v3);
  }

void sub_1000102F8()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DE4(v1);
    sub_100021E70();
    sub_10000BFE4();
    (*(void (**)(void))(v0 + 8))();
  }

uint64_t sub_100010344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  *(void *)(v3 + 48) = sub_100021CA4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_100010384()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v0[7] = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  uint64_t v5 = *(void *)(*(void *)(v1 + v4) + 16LL);
  v0[8] = v5;
  sub_100021FC8();
  sub_100021F18();
  sub_100021AD0(&qword_10010B9E0, type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)sub_100007460((uint64_t)&unk_100102FB8, 64LL);
  v8[2] = v1;
  v8[3] = v7;
  v8[4] = v1;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v2;
  sub_10000BD20(v5);
  sub_100021C84();
  uint64_t v9 = sub_100021D80();
  sub_10002286C(v9, (uint64_t)&unk_10010B9F0);
  uint64_t v11 = v10;
  v0[9] = v10;
  uint64_t v12 = *(void *)(v1 + v4);
  sub_100021F18();
  uint64_t v13 = (void *)sub_100007460((uint64_t)&unk_100102FE0, 48LL);
  v13[2] = v1;
  v13[3] = v7;
  v13[4] = v1;
  v13[5] = v11;
  sub_100021C84();
  sub_10000C0F0();
  uint64_t v14 = swift_retain();
  *(void *)(v12 + 16) = sub_100022BD4(v14, (uint64_t)&unk_10010BA00);
  sub_1000228B4();
  sub_100021DDC();
  sub_100022204();
  if (v17)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v15 + 24) = v16;
    uint64_t v18 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[10] = v18;
    sub_100003B20(&qword_10010B468);
    *uint64_t v18 = v0;
    v18[1] = sub_100010508;
    sub_100022930();
    Task.value.getter(v19, v20, v21, v22, v23);
  }

uint64_t sub_100010508()
{
  *(void *)(v0 + 88) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

void sub_100010558()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DF4(*(void *)(v0 + 72), v1);
    sub_100021E70();
    sub_10000BFE4();
    uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
    sub_100021E4C(v3);
  }

void sub_1000105A4()
{
  if (v2)
  {
    __break(1u);
  }

  else
  {
    sub_100021DF4(*(void *)(v0 + 72), v1);
    sub_100021E70();
    sub_10000BFE4();
    sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000105F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v5 = sub_100003B20(&qword_10010B228);
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  v3[7] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10001065C, a3, 0LL);
}

uint64_t sub_10001065C()
{
  if (qword_10010B088 != -1) {
    swift_once(&qword_10010B088, sub_10000CB7C);
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = sub_10000BF6C();
  sub_100003BA0(v5, (uint64_t)qword_10010B4E0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v2, v1, v4);
  uint64_t v7 = (os_log_s *)sub_1000228BC();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[5];
  if (v9)
  {
    uint64_t v26 = v6;
    uint64_t v11 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v25 = sub_10000BCF4(32LL);
    uint64_t v27 = v25;
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_1000071C0(&qword_10010B770, &qword_10010B228);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    uint64_t v15 = v14;
    sub_100015EF8(v13, v14, &v27);
    v0[2] = v16;
    sub_100022C00((uint64_t)(v0 + 2), (uint64_t)(v0 + 3), (uint64_t)(v11 + 4));
    uint64_t v17 = v15;
    uint64_t v6 = v26;
    swift_bridgeObjectRelease(v17);
    sub_100022970();
    sub_100022210((void *)&_mh_execute_header, v7, v8, "Releasing assertion: %s", v11);
    sub_100021F38(v25);
    sub_10000BCC4(v25);
    sub_10000BCC4((uint64_t)v11);
  }

  else
  {
    sub_100022970();
  }

  uint64_t v18 = sub_100003B20(&qword_10010B748);
  uint64_t v19 = (__n128 *)sub_100022270(v18);
  uint64_t v20 = sub_100022A50(v19, (__n128)xmmword_1000D8890);
  ((void (*)(char *))v6)(v20);
  sub_100003D94((uint64_t)v19);
  v0[8] = v21;
  uint64_t v22 = (void *)swift_task_alloc(dword_10010B6FC);
  v0[9] = v22;
  void *v22 = v0;
  v22[1] = sub_10001086C;
  sub_1000226A4();
  sub_100022954();
  return sub_1000108A0(v23);
}

uint64_t sub_10001086C()
{
  uint64_t v1 = sub_100022B1C();
  sub_10000BCE4(v1);
  sub_10000BD28();
  sub_10000BFE4();
  return sub_10000743C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000108A0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10000C088((uint64_t)sub_1000108B4, v1);
}

uint64_t sub_1000108B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100022944();
  uint64_t v2 = sub_100021EB0();
  *(void *)(v0 + 32) = sub_10001F1A0(v2, v1);
  sub_100021EB0();
  char v3 = sub_100022D28();
  sub_10000C1E0();
  if ((v3 & 1) != 0)
  {
    swift_release(*(void *)(v0 + 32));
    return sub_1000221B0(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_10010B70C);
    *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = v5;
    sub_100022B30(v5, (uint64_t)sub_10001094C);
    sub_100022084();
    return sub_100012740(v6);
  }

uint64_t sub_10001094C()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_10000BE20(*(void *)(v3 + 40), &v3);
  sub_10000C238();
  return sub_100007418(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100010988(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10000C088((uint64_t)sub_10001099C, v1);
}

uint64_t sub_10001099C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = sub_100007460((uint64_t)&unk_100103058, 32LL);
  v0[4] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = unk_10010B6D4;
  uint64_t v7 = (uint64_t (*)(void))((char *)&dword_10010B6D0 + dword_10010B6D0);
  sub_100021EB0();
  sub_10000C030();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100010A3C;
  return v7();
}

uint64_t sub_100010A3C()
{
  return sub_10000BCD0();
}

uint64_t sub_100010A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  return swift_task_switch(sub_100010A90, a3, 0LL);
}

uint64_t sub_100010A90()
{
  uint64_t v2 = v0[4];
  sub_1000224B4();
  uint64_t v3 = sub_100022944();
  uint64_t v4 = sub_10001F36C(v3, v2);
  v0[5] = v4;
  if (!*(void *)(v4 + 16))
  {
    sub_100021DDC();
    sub_100022954();
    __asm { BR              X0 }
  }

  if (qword_10010B088 != -1) {
    swift_once(&qword_10010B088, sub_10000CB7C);
  }
  uint64_t v5 = sub_10000BF6C();
  uint64_t v6 = (os_log_s *)sub_100003BA0(v5, (uint64_t)qword_10010B4E0);
  uint64_t v7 = sub_10000BD20(v4);
  Logger.logObject.getter(v7);
  os_log_type_t v8 = sub_100022604();
  if (sub_100022260(v8))
  {
    BOOL v9 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v10 = sub_10000BCF4(32LL);
    uint64_t v23 = v10;
    *(_DWORD *)BOOL v9 = 136315138;
    uint64_t v11 = sub_10002269C();
    sub_100021AD0(&qword_10010B250, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000224B4();
    uint64_t v15 = Set.description.getter(v14, v11, v13);
    uint64_t v17 = v16;
    sub_100021DDC();
    sub_100015EF8(v15, v17, &v23);
    v0[2] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4);
    sub_100007570();
    sub_10000BCDC(v4);
    sub_100022210((void *)&_mh_execute_header, v6, v1, "Restoring assertions: %s", v9);
    sub_100021F38(v10);
    sub_10000BCC4(v10);
    sub_10000BCC4((uint64_t)v9);
  }

  else
  {
    sub_10000BCDC(v4);
  }

  uint64_t v20 = (void *)swift_task_alloc(dword_10010B7C4);
  v0[6] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100010C94;
  sub_1000226A4();
  sub_100022954();
  return sub_10000FD20(v21);
}

uint64_t sub_100010C94()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

#error "100010CD8: call analysis failed (funcsize=11)"
uint64_t sub_100010CF0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  *(void *)(v2 + 16) = v1;
  *(_DWORD *)(v2 + 4sub_100016BD0(0, v0, 0) = a1;
  return sub_10000C088((uint64_t)sub_100010D08, v1);
}

uint64_t sub_100010D08()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int v2 = *(_DWORD *)(v0 + 40);
  uint64_t v3 = sub_100007460((uint64_t)&unk_100102CE8, 28LL);
  *(void *)(v0 + 24) = v3;
  *(void *)(v3 + 16) = v1;
  *(_DWORD *)(v3 + 24) = v2;
  uint64_t v4 = unk_10010B6D4;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10010B6D0 + dword_10010B6D0);
  sub_10000C030();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100010DA8;
  return v7((uint64_t)v7, (uint64_t)&unk_10010B6C8, v3);
}

uint64_t sub_100010DA8()
{
  return sub_10000BCD0();
}

uint64_t sub_100010DE4(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(v3 + 108) = a3;
  *(void *)(v3 + 24) = a2;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep(0LL);
  *(void *)(v3 + 32) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 4sub_100016BD0(0, v0, 0) = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 48) = swift_task_alloc(v7);
  *(void *)(v3 + 56) = swift_task_alloc(v7);
  uint64_t v8 = sub_100003B20(&qword_10010B228);
  *(void *)(v3 + 64) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 72) = v9;
  *(void *)(v3 + 8sub_100016BD0(0, v0, 0) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100010E88, a2, 0LL);
}

uint64_t sub_100010E88()
{
  uint64_t v1 = (void *)v0;
  int v2 = *(_DWORD *)(v0 + 108);
  uint64_t v45 = v0 + 108;
  uint64_t v46 = v0 + 24;
  uint64_t v3 = swift_bridgeObjectRetain(*(void *)(*(void *)(v0 + 24) + 320LL));
  uint64_t v4 = sub_10001F538(v3, v2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v1[5];
    uint64_t v49 = (char *)_swiftEmptyArrayStorage;
    sub_100016BEC();
    int64_t v7 = sub_100020E68(v4);
    int v9 = v8;
    char v11 = v10 & 1;
    uint64_t v47 = v4;
    uint64_t v48 = v4 + 56;
    while ((v7 & 0x8000000000000000LL) == 0)
    {
      sub_100022404();
      if (v7 >= v12) {
        break;
      }
      sub_1000228E4();
      if (((*(void *)(v48 + v13) >> v7) & 1) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v4 + 36) != v9) {
        goto LABEL_23;
      }
      uint64_t v14 = v1[6];
      uint64_t v15 = v1[7];
      sub_1000228F0( v15,  *(void *)(v4 + 48) + *(void *)(v6 + 72) * v7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
      uint64_t v16 = sub_1000228F0(v14, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
      Assertion.DaemonRep.id.getter(v16);
      sub_100022CF4(v14, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
      uint64_t v17 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
      {
        sub_100016BEC();
        uint64_t v17 = v49;
      }

      unint64_t v18 = *((void *)v17 + 2);
      if (v18 >= *((void *)v17 + 3) >> 1)
      {
        sub_100016BEC();
        uint64_t v17 = v49;
      }

      *((void *)v17 + 2) = v18 + 1;
      sub_100022C2C();
      (*(void (**)(char *))(v20 + 32))(&v17[v19 + *(void *)(v20 + 72) * v18]);
      uint64_t v4 = v47;
      int64_t v21 = sub_100020D40(v7, v9, v11 & 1, v47);
      int64_t v7 = v21;
      int v9 = v22;
      char v11 = v23 & 1;
      if (!--v5)
      {
        sub_10000B830(v21, v22, v23 & 1);
        sub_10000C1F0();
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  sub_10000C1F0();
  uint64_t v17 = (char *)_swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v6 = sub_100011410((uint64_t)v17);
  v1[11] = v6;
  if (!*(void *)(v6 + 16))
  {
    sub_100022B4C();
    swift_task_dealloc(v1[10]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10002228C();
    __asm { BR              X0 }
  }

  if (qword_10010B088 != -1) {
LABEL_24:
  }
    swift_once(&qword_10010B088, sub_10000CB7C);
  uint64_t v24 = sub_10000BF6C();
  uint64_t v25 = (os_log_s *)sub_100003BA0(v24, (uint64_t)qword_10010B4E0);
  uint64_t v26 = sub_10000C2A8(v6);
  Logger.logObject.getter(v26);
  os_log_type_t v27 = sub_100022604();
  if (sub_100022260(v27))
  {
    char v28 = v1;
    uint64_t v29 = v1[8];
    int v30 = *((_DWORD *)v28 + 27);
    uint64_t v31 = sub_10000BCF4(18LL);
    uint64_t v32 = sub_10000BCF4(32LL);
    uint64_t v49 = (char *)v32;
    *(_DWORD *)uint64_t v31 = 67109378;
    *((_DWORD *)v28 + 26) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45 - 4, v45, v31 + 4);
    *(_WORD *)(v31 + 8) = 2080;
    sub_1000071C0(&qword_10010B238, &qword_10010B228);
    uint64_t v34 = v33;
    uint64_t v35 = sub_1000225A4();
    uint64_t v36 = Set.description.getter(v35, v29, v34);
    uint64_t v38 = v37;
    sub_100022B4C();
    uint64_t v39 = v36;
    uint64_t v1 = v28;
    sub_100015EF8(v39, v38, (uint64_t *)&v49);
    v28[2] = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45 - 92, v46, v31 + 10);
    sub_100007570();
    sub_10000C1B0(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v5,  "Releasing all assertions from pid %d: %s",  (uint8_t *)v31,  0x12u);
    sub_100021F38(v32);
    sub_10000BCC4(v32);
    sub_10000BCC4(v31);
  }

  else
  {
    sub_10000C1B0(v6);
  }

  uint64_t v42 = (void *)swift_task_alloc(dword_10010B6FC);
  v1[12] = v42;
  *uint64_t v42 = v1;
  v42[1] = sub_1000112AC;
  sub_10002228C();
  return sub_1000108A0(v43);
}

uint64_t sub_1000112AC()
{
  uint64_t v2 = *v1;
  sub_10000BE20(*(void *)(v0 + 96), v3);
  sub_10000BD28();
  swift_task_dealloc(*(void *)(v0 + 80));
  sub_10000C140();
  sub_10000BFE4();
  return sub_10000743C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000112F4()
{
  return swift_deallocObject(v0, 28LL, 7LL);
}

uint64_t sub_100011318(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(_DWORD *)(v1 + 24);
  uint64_t v6 = swift_task_alloc(dword_10010B6C4);
  int64_t v7 = (void *)sub_100007524(v6);
  *int64_t v7 = v2;
  v7[1] = sub_10000BCBC;
  return sub_100010DE4(a1, v4, v5);
}

void sub_10001137C(uint64_t a1)
{
  v6[2] = Set.init(minimumCapacity:)( *(void *)(a1 + 16),  &type metadata for String,  &protocol witness table for String);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      sub_100022418();
      sub_100017AF4(v6, v4, v5);
      swift_bridgeObjectRelease(v6[1]);
      v3 += 2;
      --v2;
    }

    while (v2);
    sub_10000C1E0();
  }

  else
  {
    sub_10000C1E0();
  }

  sub_10002260C();
}

uint64_t sub_100011410(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010B228);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  int v8 = (char *)&v20 - v7;
  uint64_t v9 = sub_100003B20(&qword_10010B740);
  __chkstk_darwin(v9);
  char v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  sub_1000071C0(&qword_10010B238, &qword_10010B228);
  uint64_t v14 = Set.init(minimumCapacity:)(v12, v2, v13);
  uint64_t v20 = a1;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v17 = *(void *)(v3 + 72);
    unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v18(v11, v16, v2);
      sub_100005FB0((uint64_t)v11, 0LL, 1LL, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100018F4C();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v16 += v17;
      if (!--v15) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    sub_100005FB0((uint64_t)v11, 1LL, 1LL, v2);
  }

  swift_bridgeObjectRelease(v20);
  return v21;
}

void sub_1000115F8()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1000229CC();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10002265C();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v15 - v6;
  uint64_t v8 = *(void *)(v2 + 16);
  sub_100021AD0(&qword_10010B800, v9);
  v15[1] = Set.init(minimumCapacity:)(v8, v3, v10);
  uint64_t v11 = *(void *)(v2 + 16);
  if (v11)
  {
    sub_100022C2C();
    uint64_t v13 = v2 + v12;
    uint64_t v14 = *(void *)(v4 + 72);
    do
    {
      sub_1000229DC(v13, v0);
      sub_100022D68();
      sub_100022620((uint64_t)v7);
      v13 += v14;
      --v11;
    }

    while (v11);
  }

  sub_10000C1E0();
  sub_100022108();
}

void sub_1000116F0()
{
}

void sub_100011714(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_100021EB0();
    sub_100022D0C();
    sub_10000C1E0();
  }

  sub_100022DB0();
  sub_100021AD0(&qword_10010B908, type metadata accessor for InferenceProviderAsset);
  sub_100022014(v3);
  if (v2)
  {
    sub_100021EB0();
    uint64_t v4 = sub_100022B44();
    sub_10000C1E0();
    if (v4) {
      goto LABEL_5;
    }
LABEL_11:
    sub_10000C1E0();
    sub_100022378();
    return;
  }

  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_5:
  if (v4 >= 1)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        uint64_t v5 = sub_100022628();
      }
      else {
        uint64_t v5 = sub_1000227F8();
      }
      sub_1000220B0(v5, v6, v7, v8, v9, v10, v11, v12, v13);
      swift_release(v13);
    }
  }

  __break(1u);
}

void sub_100011840()
{
}

void sub_100011864()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = sub_100022A84(v9, v7);
  sub_1000224A4();
  __chkstk_darwin(v11);
  sub_100022640();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v23 - v13;
  uint64_t v15 = *(void *)(v0 + 16);
  sub_100021AD0(v6, v8);
  v23[1] = Set.init(minimumCapacity:)(v15, v10, v16);
  uint64_t v17 = *(void *)(v0 + 16);
  if (v17)
  {
    sub_100022C2C();
    v23[0] = v0;
    uint64_t v19 = v0 + v18;
    uint64_t v20 = *(void *)(v2 + 72);
    uint64_t v21 = *(void (**)(uint64_t))(v2 + 16);
    do
    {
      uint64_t v22 = sub_100022D1C();
      v21(v22);
      v4(v14, v1);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v14, v10);
      v19 += v20;
      --v17;
    }

    while (v17);
    swift_bridgeObjectRelease(v23[0]);
  }

  else
  {
    sub_10000C1E0();
  }

  sub_100007448();
}

void sub_100011968()
{
}

void sub_10001198C()
{
}

void sub_1000119B0()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100003B20(&qword_10010B408);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000C110();
  sub_1000227A8();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v18 - v7;
  sub_100003B20(&qword_10010BAA0);
  sub_10000C240();
  __chkstk_darwin(v9);
  sub_1000229A8();
  sub_1000071C0(&qword_10010B9B0, &qword_10010B408);
  uint64_t v11 = sub_100022014(v10);
  v18[0] = v3;
  v18[1] = v11;
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12)
  {
    sub_100022C2C();
    uint64_t v14 = v18[0] + v13;
    uint64_t v15 = *(void *)(v5 + 72);
    uint64_t v16 = *(void (**)(uint64_t))(v5 + 16);
    while (1)
    {
      uint64_t v17 = sub_100022C44();
      v16(v17);
      sub_100022CC8(v1, 0LL);
      sub_100022218(v0, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
      sub_100018F4C();
      sub_100022BF8((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      v14 += v15;
      if (!--v12) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    sub_100022CC8(v1, 1LL);
  }

  swift_bridgeObjectRelease(v18[0]);
  sub_100007448();
}

void sub_100011B24()
{
}

uint64_t sub_100011B48(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_100021EB0();
    sub_100022D0C();
    sub_10000C1E0();
  }

  sub_100021464();
  unint64_t v3 = sub_1000214A0();
  uint64_t result = sub_100022014(v3);
  uint64_t v5 = result;
  uint64_t v10 = result;
  if (!v2)
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v6) {
      goto LABEL_5;
    }
LABEL_13:
    sub_10000C1E0();
    return v5;
  }

  sub_100021EB0();
  uint64_t v6 = sub_100022B44();
  uint64_t result = sub_10000C1E0();
  if (!v6) {
    goto LABEL_13;
  }
LABEL_5:
  if (v6 >= 1)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v8 = (id)sub_100022628();
      }
      else {
        id v8 = *(id *)(a1 + 8 * i + 32);
      }
      sub_10001979C((Swift::Int *)&v9, v8);
    }

    sub_10000C1E0();
    return v10;
  }

  __break(1u);
  return result;
}

void sub_100011C5C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_100021EB0();
    sub_100022D0C();
    sub_10000C1E0();
  }

  type metadata accessor for DaemonRequest(0LL);
  sub_100021AD0(&qword_10010B478, type metadata accessor for DaemonRequest);
  sub_100022014(v3);
  if (v2)
  {
    sub_100021EB0();
    uint64_t v4 = sub_100022B44();
    sub_10000C1E0();
    if (v4) {
      goto LABEL_5;
    }
LABEL_11:
    sub_10000C1E0();
    sub_100022378();
    return;
  }

  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_5:
  if (v4 >= 1)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        uint64_t v5 = sub_100022628();
      }
      else {
        uint64_t v5 = sub_1000227F8();
      }
      sub_1000220B0(v5, v6, v7, v8, v9, v10, v11, v12, v13);
      swift_release();
    }
  }

  __break(1u);
}

void sub_100011D8C()
{
  uint64_t v68 = v1;
  uint64_t v2 = sub_100022694();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v64 = v2;
  uint64_t v65 = v3;
  sub_10000C240();
  __chkstk_darwin(v4);
  uint64_t v67 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022634();
  __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v55 - v7;
  sub_100022634();
  __chkstk_darwin(v8);
  uint64_t v60 = (char *)&v55 - v9;
  sub_100022634();
  __chkstk_darwin(v10);
  uint64_t v63 = (uint64_t)&v55 - v11;
  uint64_t v12 = sub_100022D7C();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10002252C(v14, v55);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v55 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v55 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v55 - v23;
  uint64_t v59 = (uint64_t)&v55 - v23;
  uint64_t v25 = Policy.memoryBudget.getter(v22);
  uint64_t v26 = Policy.memoryBudget.getter(v25);
  uint64_t v55 = v0;
  uint64_t v27 = ((uint64_t (*)(void))Policy.assetPolicy.getter)();
  Policy.assetPolicy.getter(v27);
  sub_100021AD0(&qword_10010B730, (uint64_t (*)(uint64_t))&type metadata accessor for AssetPolicy);
  char v29 = dispatch thunk of static Comparable.>= infix(_:_:)(v18, v21, v12, v28);
  int v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v58 = v30;
  if ((v29 & 1) != 0) {
    uint64_t v31 = (uint64_t)v18;
  }
  else {
    uint64_t v31 = (uint64_t)v21;
  }
  sub_100022824((uint64_t)v24, v31, v30);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  sub_100022D74((uint64_t)v18);
  uint64_t v32 = sub_100022D74((uint64_t)v21);
  uint64_t v33 = (uint64_t)v60;
  uint64_t v34 = Policy.cancelPriority.getter(v32);
  uint64_t v35 = (uint64_t)v62;
  Policy.cancelPriority.getter(v34);
  sub_100021AD0(&qword_10010B738, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority);
  uint64_t v36 = v64;
  char v38 = dispatch thunk of static Comparable.>= infix(_:_:)(v35, v33, v64, v37);
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
  char v57 = v39;
  if ((v38 & 1) != 0) {
    uint64_t v40 = v35;
  }
  else {
    uint64_t v40 = v33;
  }
  uint64_t v41 = v63;
  sub_1000222C4(v63, v40, v39);
  if (v26 >= v25) {
    uint64_t v42 = v25;
  }
  else {
    uint64_t v42 = v26;
  }
  if (v26 == -1) {
    uint64_t v42 = v25;
  }
  if (v25 == -1) {
    uint64_t v42 = v26;
  }
  uint64_t v56 = v42;
  sub_1000227D4(v35);
  uint64_t v43 = sub_1000227D4(v33);
  uint64_t v44 = Policy.inactiveAssetTimeout.getter(v43);
  uint64_t v45 = Policy.inactiveAssetTimeout.getter(v44);
  if (v45 >= v44) {
    uint64_t v46 = v44;
  }
  else {
    uint64_t v46 = v45;
  }
  if (v45 == -1) {
    uint64_t v46 = v44;
  }
  if (v44 == -1) {
    uint64_t v47 = v45;
  }
  else {
    uint64_t v47 = v46;
  }
  uint64_t v48 = Policy.assetTransitionDelay.getter();
  uint64_t v49 = Policy.assetTransitionDelay.getter();
  if (v49 >= v48) {
    uint64_t v50 = v48;
  }
  else {
    uint64_t v50 = v49;
  }
  if (v49 == -1) {
    uint64_t v50 = v48;
  }
  if (v48 == -1) {
    uint64_t v51 = v49;
  }
  else {
    uint64_t v51 = v50;
  }
  uint64_t v52 = v66;
  uint64_t v53 = v59;
  sub_100022824(v66, v59, v58);
  uint64_t v54 = v67;
  v57((uint64_t)v67, v41, v36);
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)( v52,  v56,  v54,  v47,  v51);
  sub_1000227D4(v41);
  v61(v53, v12);
  sub_100007448();
}

void sub_1000120B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v26[1] = a2;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v4 = __CocoaSet.makeIterator()(a1);
    uint64_t v5 = sub_100022DB0();
    sub_100021AD0(&qword_10010B908, type metadata accessor for InferenceProviderAsset);
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v4, v5, v6);
    uint64_t v3 = v26[2];
    uint64_t v24 = v26[3];
    uint64_t v8 = v26[4];
    uint64_t v9 = v26[5];
    uint64_t v10 = v26[6];
  }

  else
  {
    uint64_t v9 = 0LL;
    sub_1000223F8();
    uint64_t v24 = v3 + 56;
    sub_100022D3C();
    uint64_t v10 = v11 & v12;
  }

  int64_t v23 = (unint64_t)(v8 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_9;
  }
  while (1)
  {
    if (v10)
    {
      sub_100022CD4();
      uint64_t v14 = v13 | (v9 << 6);
      uint64_t v15 = v9;
      goto LABEL_28;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v20 >= v23) {
      goto LABEL_31;
    }
    uint64_t v15 = v9 + 1;
    if (!*(void *)(v24 + 8 * v20))
    {
      uint64_t v15 = v9 + 2;
      if (v9 + 2 >= v23) {
        goto LABEL_31;
      }
      if (!*(void *)(v24 + 8 * v15))
      {
        uint64_t v15 = v9 + 3;
        if (v9 + 3 >= v23) {
          goto LABEL_31;
        }
        if (!*(void *)(v24 + 8 * v15))
        {
          uint64_t v15 = v9 + 4;
          if (v9 + 4 >= v23) {
            goto LABEL_31;
          }
          if (!*(void *)(v24 + 8 * v15))
          {
            uint64_t v15 = v9 + 5;
            if (v9 + 5 >= v23) {
              goto LABEL_31;
            }
            if (!*(void *)(v24 + 8 * v15))
            {
              int64_t v21 = v9 + 6;
              while (v21 < v23)
              {
                if (*(void *)(v24 + 8 * v21++))
                {
                  uint64_t v15 = v21 - 1;
                  goto LABEL_27;
                }
              }

LABEL_27:
    sub_100022168();
LABEL_28:
    uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v14);
    sub_10000C20C();
    if (!v19) {
      goto LABEL_31;
    }
    while (1)
    {
      sub_1000181E4( v26,  v19,  (void (*)(_BYTE *))sub_100091270,  type metadata accessor for InferenceProviderAsset,  (uint64_t (*)(uint64_t, uint64_t))sub_100091114,  (uint64_t)&qword_10010B288);
      uint64_t v7 = swift_release(v26[0]);
      uint64_t v9 = v15;
      uint64_t v10 = v2;
      if ((v3 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_9:
      uint64_t v16 = __CocoaSet.Iterator.next()(v7);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v25 = v16;
        uint64_t v18 = sub_100022DB0();
        sub_100022CFC();
        sub_100022CC0((uint64_t)v26, (uint64_t)&v25, (uint64_t)&type metadata for Swift.AnyObject + 8, v18);
        uint64_t v19 = v26[0];
        swift_unknownObjectRelease(v17);
        uint64_t v15 = v9;
        uint64_t v2 = v10;
        if (v19) {
          continue;
        }
      }

      goto LABEL_31;
    }
  }

  __break(1u);
}

  __break(1u);
}

  *(void *)&a1 = v7;
  return a1;
}

uint64_t sub_10001235C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v26 - v13;
  int64_t v15 = 0LL;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v26 = a1 + 56;
  uint64_t v27 = a2;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  if ((v18 & v16) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v21 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))( v14,  *(void *)(a1 + 48) + *(void *)(v5 + 72) * i,  v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v14, v4);
    sub_100017C54((uint64_t)v11, v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v23 >= v20) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v23);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v20) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v26 + 8 * v15);
      if (!v24)
      {
        int64_t v15 = v23 + 2;
        if (v23 + 2 >= v20) {
          goto LABEL_23;
        }
        unint64_t v24 = *(void *)(v26 + 8 * v15);
        if (!v24)
        {
          int64_t v15 = v23 + 3;
          if (v23 + 3 >= v20) {
            goto LABEL_23;
          }
          unint64_t v24 = *(void *)(v26 + 8 * v15);
          if (!v24) {
            break;
          }
        }
      }
    }

LABEL_20:
    unint64_t v19 = (v24 - 1) & v24;
  }

  int64_t v25 = v23 + 4;
  if (v25 >= v20)
  {
LABEL_23:
    swift_release(a1);
    return v27;
  }

  unint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24)
  {
    int64_t v15 = v25;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v15 >= v20) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v15);
    ++v25;
    if (v24) {
      goto LABEL_20;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
  }

  uint64_t v22 = v20 + 2;
  if (v22 < v42)
  {
    unint64_t v21 = v43[v22];
    if (!v21)
    {
      while (1)
      {
        uint64_t v17 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_43;
        }
        if (v17 >= v42) {
          goto LABEL_35;
        }
        unint64_t v21 = v43[v17];
        ++v22;
        if (v21) {
          goto LABEL_20;
        }
      }
    }

    uint64_t v17 = v22;
    goto LABEL_20;
  }

        uint64_t v58 = (v27 - 1) & v27;
        int64_t v25 = __clz(__rbit64(v27)) + (v17 << 6);
      }

      char v29 = *(void *)(v55 + 48);
      int v30 = *(void *)(v13 + 72);
      char v57 = v25;
      uint64_t v31 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v13 + 16))(v16, v29 + v30 * v25, v12);
      Assertion.DaemonRep.id.getter(v31);
      uint64_t v32 = *(void *)(a4 + 16);
      uint64_t v59 = v17;
      if (!v32) {
        break;
      }
      uint64_t v33 = *(void *)(a4 + 40);
      sub_1000071C0(&qword_10010B238, &qword_10010B228);
      uint64_t v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
      uint64_t v36 = -1LL << *(_BYTE *)(a4 + 32);
      uint64_t v37 = v35 & ~v36;
      if (((*(void *)(v60 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
        break;
      }
      char v38 = ~v36;
      uint64_t v39 = v62[9];
      uint64_t v40 = (void (*)(char *, unint64_t, uint64_t))v62[2];
      while (1)
      {
        v40(v9, *(void *)(v61 + 48) + v39 * v37, v6);
        sub_1000071C0(&qword_10010B240, &qword_10010B228);
        uint64_t v42 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v24, v6, v41);
        uint64_t v43 = (void (*)(char *, uint64_t))v62[1];
        v43(v9, v6);
        if ((v42 & 1) != 0) {
          break;
        }
        uint64_t v37 = (v37 + 1) & v38;
        if (((*(void *)(v60 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
          goto LABEL_26;
        }
      }

      v43(v24, v6);
      uint64_t v16 = v52;
      uint64_t v13 = v53;
      uint64_t v12 = v54;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
      a4 = v61;
      int64_t v23 = v58;
      uint64_t v17 = v59;
    }

    uint64_t v43 = (void (*)(char *, uint64_t))v62[1];
LABEL_26:
    v43(v24, v6);
    uint64_t v16 = v52;
    uint64_t v13 = v53;
    uint64_t v12 = v54;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
    *(unint64_t *)((char *)v49 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v57;
    uint64_t v44 = __OFADD__(v56++, 1LL);
    a4 = v61;
    int64_t v23 = v58;
    uint64_t v17 = v59;
  }

  while (!v44);
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

    sub_1000309D8();
    goto LABEL_21;
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v19 - 1) & v19;
  }

  int64_t v20 = v18 + 4;
  if (v20 >= v29)
  {
LABEL_23:
    swift_release(v27);
    swift_release(v35);
    swift_release(v32);
    return;
  }

  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19)
  {
    uint64_t v14 = v20;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }

    sub_100072908();
    uint64_t v46 = v45;
    if (v45 >> 62)
    {
LABEL_47:
      sub_1000225A4();
      v180 = sub_100084C3C();
      sub_100022B4C();
      if (v180) {
        goto LABEL_22;
      }
    }

    else if (*(void *)((v45 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_22:
      sub_100085F34();
      uint64_t v47 = sub_1000225A4();
      uint64_t v48 = sub_100085208(v47);
      uint64_t v50 = v49;
      uint64_t v51 = sub_100022B4C();
      v317 = *(void *)(v50 + 16);
      v322 = v50;
      v281 = (void *)(v0 + 224);
      v290 = v48;
      if (v317)
      {
        v245 = v0 + 208;
        v254 = v0 + 184;
        v305 = *(void *)(v0 + 408);
        v311 = v0 + 112;
        v263 = (void *)(v0 + 216);
        v272 = v0 + 136;
        v299 = *(void *)(v0 + 376);
        sub_100005FB0(*(void *)(v0 + 280), 1LL, 1LL, *(void *)(v0 + 400));
        sub_10000C030();
        sub_1000837AC();
        uint64_t v46 = 0LL;
        while (1)
        {
          if (v46 >= *(void *)(v50 + 16))
          {
            __break(1u);
            goto LABEL_47;
          }

          v333 = *(void *)(v0 + 488);
          v334 = *(void *)(v0 + 448);
          uint64_t v52 = *(void *)(v0 + 424);
          uint64_t v53 = *(void *)(v0 + 384);
          v330 = *(void *)(v0 + 256) + *(void *)(v0 + 480);
          v332 = *(void *)(v0 + 432);
          v327 = *(void *)(v50 + 8 * v46 + 32);
          sub_10002FFE4(v327 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v311);
          uint64_t v54 = sub_100085A7C();
          sub_10002F8E0(v54, v55, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          uint64_t v5 = v53 + *(int *)(v299 + 36);
          uint64_t v56 = v53 + *(int *)(v299 + 32);
          sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          sub_1000224B4();
          char v57 = (sub_1000852F8() & 1) != 0 ? v56 : v5;
          sub_100085C3C(v52, v57, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v305 + 16));
          sub_10002F90C(v53, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          static Date.+ infix(_:_:)(v52, *(double *)(v330 + *(int *)(v333 + 28)));
          uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v305 + 8);
          sub_1000856D4(v52);
          uint64_t v58 = static Date.> infix(_:_:)(v332, v334);
          uint64_t v59 = v58;
          uint64_t v67 = sub_1000850F0( v58,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v236,  v245,  v254,  (uint64_t)v263,  v272,  (uint64_t)v281,  v290,  v299,  v305,  v311,  v317,  v322,  v327);
          if ((v59 & 1) != 0) {
            break;
          }
          ++v46;
          v1(*(void *)(v0 + 432), *(void *)(v0 + 400));
          uint64_t v50 = v322;
          if (v317 == v46)
          {
            uint64_t v75 = sub_1000308D8();
            sub_100083970( v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v236,  v245,  v254,  (uint64_t)v263,  v272,  (uint64_t)v281,  v290);
            goto LABEL_35;
          }
        }

        uint64_t v112 = *(void *)(v0 + 408);
        uint64_t v113 = *(void *)(v0 + 280);
        uint64_t v114 = sub_100085514( v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v236,  v245,  v254,  (uint64_t)v263,  v272,  (uint64_t)v281,  v290,  v299,  v305,  v311,  v317,  v322);
        v122 = sub_100083970(v114, v115, v116, v117, v118, v119, v120, v121, v238, v247, v256, v265, v274, v283, v292);
        sub_100084028(v122, &qword_10010DAD0);
        sub_100083158(v113, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 32));
        sub_100083478(v113);
LABEL_35:
        uint64_t v123 = *(void *)(v0 + 400);
        uint64_t v124 = *(void *)(v0 + 272);
        sub_1000834C8(*(void *)(v0 + 280));
        uint64_t v125 = sub_1000060B4(v124, 1LL, v123);
        sub_100083C64(v124);
        uint64_t v126 = *(os_log_s **)(v0 + 464);
        if (v125 == 1)
        {
          sub_10000BD20(v290);
          v127 = sub_10000BD20(v322);
          Logger.logObject.getter(v127);
          v128 = sub_10003CEEC();
          v129 = sub_100083B48(v126);
          v333 = *(void *)(v0 + 400);
          v336 = *(void *)(v0 + 448);
          if (v129)
          {
            v130 = (uint8_t *)sub_10000BCF4(12LL);
            v332 = sub_10000BCF4(32LL);
            v337 = v332;
            *(_DWORD *)v130 = 136315138;
            v330 = (uint64_t)(v130 + 4);
            sub_100021D80();
            sub_10000C0A0();
            uint64_t v131 = sub_100085860();
            v133 = sub_100081F28(v131, v132);
            sub_1000304F8();
            sub_10000BF84();
            sub_100083B9C(v133, v134, &v337);
            v143 = sub_100085F88(v135, v136, v137, v138, v139, v140, v141, v142, v236, v245, v254, v263);
            sub_1000851D8((uint64_t)v143, v144, (uint64_t)(v130 + 4));
            sub_10000BCDC(v322);
            sub_10000BCDC(v290);
            sub_100022024();
            sub_100022210( (void *)&_mh_execute_header,  v126,  v128,  "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task",  v130);
            sub_100021F38(v332);
            sub_10000BCC4(v332);
            sub_10000BCC4((uint64_t)v130);
            sub_1000304F8();
            sub_10000BF84();
          }

          else
          {
            sub_10008332C(v322);
            sub_10008332C(v290);
          }

          v1(v336, v333);
          v1(*(void *)(v0 + 440), *(void *)(v0 + 400));
          goto LABEL_45;
        }

        v145 = *(void *)(v0 + 448);
        v146 = *(void *)(v0 + 416);
        v147 = *(void *)(v0 + 400);
        v148 = *(void *)(*(void *)(v0 + 456) - 8LL);
        __int128 v149 = sub_100021CF0(*(void *)(v148 + 64));
        sub_100083158(v149, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 16));
        ((void (*)(uint64_t, uint64_t, uint64_t))v5)(v146, v145, v147);
        sub_1000228BC();
        __int128 v150 = sub_100085ECC();
        if (!sub_10008516C(v150))
        {

          v161 = sub_10008376C();
          goto LABEL_44;
        }

        __int128 v151 = *(void *)(v0 + 280);
        v152 = *(void *)(v0 + 264);
        v153 = (uint8_t *)sub_10000BCF4(12LL);
        *(_DWORD *)v153 = 134217984;
        v154 = sub_10002FFE4(v151, v254);
        sub_1000845D0(v154, v155, &qword_10010DAD0);
        sub_100083334(v152);
        if (!v156)
        {
          v157 = *(void *)(v0 + 416);
          v158 = *(void *)(v0 + 264);
          sub_100085914();
          v160 = v159;
          sub_100083D8C(v158);
          *(void *)(v0 + 208) = v160;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v245, v263);
          sub_100083D8C(v157);
          sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v5,  v150,  "Additional assets need transitioning, next task wake in %f seconds",  v153);
          sub_10000BCC4((uint64_t)v153);

LABEL_44:
          v169 = sub_100085514( v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v236,  v245,  v254,  (uint64_t)v263,  v272,  (uint64_t)v281,  v290,  v299,  v305,  v311,  v317,  v322);
          sub_100083970(v169, v170, v171, v172, v173, v174, v175, v176, v239, v248, v257, v266, v275, v284, v293);
          v177 = *(void *)(v0 + 448);
          v178 = *(void *)(v0 + 440);
          sub_1000307BC(v148);
          sub_100083D8C(v177);
          sub_100083D8C(v178);
          sub_10002FF04();
LABEL_45:
          v179 = *(void *)(v0 + 280);
          sub_10002FFE4(v179, v272);
          sub_1000834C8(v179);
          sub_100083AE4();
          goto LABEL_52;
        }

        sub_10002F99C(*(void *)(v0 + 280), &qword_10010DAD0);
        __break(1u);
        return;
      }

      Logger.logObject.getter(v51);
      uint64_t v83 = sub_100085214();
      uint64_t v84 = sub_1000842D8(v83);
      v335 = *(void *)(v0 + 448);
      v332 = *(void *)(v0 + 408);
      v333 = *(void *)(v0 + 400);
      if ((_DWORD)v84)
      {
        uint64_t v92 = (uint8_t *)sub_10000BCF4(12LL);
        v93 = sub_10000BCF4(32LL);
        sub_100084308(v93);
        sub_100085888(4.8149e-34);
        v330 = v94;
        sub_10002FFE4((uint64_t)v1, v0 + 160);
        uint64_t v95 = sub_100022DB0();
        sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
        uint64_t v96 = sub_100021EB0();
        uint64_t v97 = sub_1000851AC(v96, v95);
        sub_10000C1E0();
        sub_100030304(v97, v98, &v337);
        *v281 = v99;
        sub_100084490((uint64_t)v281, (uint64_t)v1, v330);
        sub_10000C000();
        sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)&OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  (os_log_type_t)v5,  "All remaining assets that need transitioning have failed to unload or move to dynamic, %s",  v92);
        sub_100021F38(v0 + 224);
        sub_10000BCC4(v0 + 224);
        uint64_t v84 = sub_10000BCC4((uint64_t)v92);
      }

      sub_100085514( v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v236,  v245,  v254,  (uint64_t)v263,  v272,  (uint64_t)v281,  v290,  v299,  v305,  v311,  0LL,  v322);

      sub_100083970(v100, v101, v102, v103, v104, v105, v106, v107, v237, v246, v255, v264, v273, v282, v291);
      (*(void (**)(uint64_t, uint64_t))(v332 + 8))(v335, v333);
      sub_1000846EC(*(void *)(v0 + 440));
      sub_1000839EC();
LABEL_51:
      sub_100005FB0(v108, v109, v110, v111);
LABEL_52:
      sub_100083BA4();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      sub_100030760();
      sub_10000C140();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002294C();
      v188 = sub_10002FF04();
      v196 = sub_100083F18( v188,  v189,  v190,  v191,  v192,  v193,  v194,  v195,  v236,  v245,  v254,  (uint64_t)v263,  v272,  (uint64_t)v281,  v290,  v299,  v305,  v311);
      v204 = sub_100083C14( v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v240,  v249,  v258,  v267,  v276,  v285,  v294,  v300,  v306,  v312,  v317);
      v212 = sub_100083D58( v204,  v205,  v206,  v207,  v208,  v209,  v210,  v211,  v241,  v250,  v259,  v268,  v277,  v286,  v295,  v301,  v307,  v313,  v318,  v322);
      v220 = sub_100083D50( v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v242,  v251,  v260,  v269,  v278,  v287,  v296,  v302,  v308,  v314,  v319,  v323,  v326);
      v228 = sub_100083DD0( v220,  v221,  v222,  v223,  v224,  v225,  v226,  v227,  v243,  v252,  v261,  v270,  v279,  v288,  v297,  v303,  v309,  v315,  v320,  v324,  v328,  v330);
      sub_1000846A4( v228,  v229,  v230,  v231,  v232,  v233,  v234,  v235,  v244,  v253,  v262,  v271,  v280,  v289,  v298,  v304,  v310,  v316,  v321,  v325,  v329,  v331,  v332);
      swift_task_dealloc(v333);
      sub_100083A80();
      sub_100083F78(*(uint64_t (**)(void))(v0 + 8));
      return;
    }

    v181 = *(void **)(v0 + 464);
    v182 = sub_100022B4C();
    Logger.logObject.getter(v182);
    v183 = sub_100022604();
    if (sub_10002275C(v183))
    {
      v184 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v184);
      sub_10003F1B4((void *)&_mh_execute_header, v185, v186, "No more assets need to be transitioned");
      sub_10000BCC4(v46);
    }

    v187 = *(void *)(v0 + 448);

    sub_100083670(v187);
    sub_1000834D4();
    v108 = sub_100083AC8();
    goto LABEL_51;
  }

  uint64_t v11 = v10 - 1;
  *(void *)(v0 + 504) = v10 - 1;
  if (__OFSUB__(v10, 1LL))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v12 = sub_100082F94(v8, v9, *(void *)(v0 + 496));
  uint64_t v13 = *(void *)(v0 + 496);
  if (v3)
  {
    uint64_t v14 = sub_1000837CC(v12, v13);
  }

  else
  {
    uint64_t v14 = *(void *)(v13 + 8 * v11 + 32);
    sub_100021D80();
  }

  *(void *)(v0 + 512) = v14;
  if (*(_BYTE *)(*(void *)(v0 + 256) + *(void *)(v0 + 472)) == 1)
  {
    int64_t v15 = *(void *)(v0 + 328);
    sub_100030768(*(void *)(v0 + 344));
    uint64_t v16 = sub_100030CC0();
    sub_10002FF3C(v15, v17, v18, v16);
    unint64_t v19 = (void *)swift_task_alloc(dword_10010D694);
    *(void *)(v0 + 52sub_100016BD0(0, v0, 0) = v19;
    *unint64_t v19 = v0;
    v19[1] = sub_100074228;
  }

  else
  {
    int64_t v20 = *(void *)(v0 + 336);
    unint64_t v21 = *(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 344) + 104LL);
    uint64_t v22 = *(unsigned int *)(v0 + 552);
    if (*(_BYTE *)(v14 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
    {
      v21(*(void *)(v0 + 360), v22, v20);
      int64_t v23 = (void *)swift_task_alloc(dword_10010D684);
      *(void *)(v0 + 528) = v23;
      *int64_t v23 = v0;
      v23[1] = sub_1000742B4;
      sub_100084E20();
      sub_10006467C(v24, v25, v26);
      return;
    }

    uint64_t v27 = *(void *)(v0 + 320);
    v21(*(void *)(v0 + 352), v22, v20);
    uint64_t v28 = sub_100030CC0();
    sub_10002FF3C(v27, v29, v30, v28);
    uint64_t v31 = (void *)swift_task_alloc(dword_10010D694);
    *(void *)(v0 + 536) = v31;
    void *v31 = v0;
    v31[1] = sub_100074320;
  }

  sub_100084094();
  sub_100084E20();
  sub_10006A2C8(v32, v33, v34);
}

    uint64_t v56 = (v22 - 1) & v22;
    uint64_t v62 = v23;
    uint64_t v17 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_21:
    int64_t v25 = v17;
    uint64_t v26 = *(void *)(*(void *)(v52 + 48) + 8 * v17);
    uint64_t v27 = v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v61,  0LL,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v18, v27, v20);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v19, HIDWORD(v51), v20);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    char v29 = v28;
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter(v20, v29);
    dispatch thunk of RawRepresentable.rawValue.getter(v20, v29);
    int v30 = v60;
    uint64_t v31 = v58;
    if (v59 == v57 && v60 == v58)
    {
      swift_bridgeObjectRelease_n(v60, 2LL);
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v35(v19, v20);
      v35(v18, v20);
      swift_release(v26);
      uint64_t v10 = v62;
      uint64_t v16 = v56;
LABEL_28:
      uint64_t v36 = v48;
      *(void *)(v47 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v37 = __OFADD__(v36, 1LL);
      uint64_t v9 = v36 + 1;
      if (!v37) {
        goto LABEL_4;
      }
      __break(1u);
LABEL_31:
      char v38 = v52;
      swift_retain();
      sub_100020238( v47,  v44,  v48,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  State,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61[0],  v61[1],  v61[2],  v61[3],  v61[4],  v62);
      swift_release(v45);
      return;
    }

    uint64_t v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v57, v58, 0LL);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v31);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v34(v19, v20);
    v34(v18, v20);
    swift_release(v26);
    uint64_t v10 = v62;
    uint64_t v16 = v56;
    if ((v33 & 1) != 0) {
      goto LABEL_28;
    }
  }

  unint64_t v24 = v10 + 4;
  if (v10 + 4 >= v50) {
    goto LABEL_31;
  }
  uint64_t v22 = *(void *)(v49 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v10 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v23 >= v50) {
      goto LABEL_31;
    }
    uint64_t v22 = *(void *)(v49 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_20;
    }
  }

  __break(1u);
}

  sub_100095C24();
  sub_100030650(v51, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
  __break(1u);
}

  sub_100095C24();
  sub_100030650(v51, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
  __break(1u);
}

LABEL_25:
  __break(1u);
  return result;
}

    uint64_t v13 = (v18 - 1) & v18;
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

              uint64_t v36 = swift_release(v21);
              a2 = v42;
              ((void (*)(uint64_t, char *, uint64_t, __n128))v26)(v42, v15, v4, v36);
              uint64_t v37 = 0LL;
              return (void *)sub_100005FB0(a2, v37, 1LL, v4);
            }
          }
        }
      }
    }

    sub_100085EEC();
    uint64_t v13 = v24 + (v14 << 6);
LABEL_26:
    int64_t v20 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    sub_10000C030();
    if (!v20) {
      goto LABEL_37;
    }
    while (1)
    {
      uint64_t v53 = v1;
      uint64_t v54 = v14;
      int64_t v25 = v2;
      uint64_t v27 = *(void *)(v0 + 160);
      uint64_t v26 = *(void *)(v0 + 168);
      uint64_t v28 = *(void *)(v0 + 144);
      char v29 = *(void *)(v0 + 152);
      int v30 = sub_100021FC8();
      sub_100085ED4();
      sub_100005FB0(v31, v32, v33, v30);
      uint64_t v34 = (void *)sub_100007460((uint64_t)&unk_100104088, 56LL);
      uint64_t v34[2] = 0LL;
      uint64_t v35 = v34 + 2;
      v34[3] = 0LL;
      v34[4] = v28;
      void v34[5] = v29;
      v34[6] = v20;
      sub_10004DE58(v26, v27, &qword_10010B208);
      LODWORD(v26) = sub_1000060B4(v27, 1LL, v30);
      uint64_t v36 = sub_100021D80();
      uint64_t v37 = *(void *)(v0 + 160);
      if ((_DWORD)v26 == 1)
      {
        sub_100084088();
        char v38 = 0LL;
      }

      else
      {
        uint64_t v39 = TaskPriority.rawValue.getter(v36);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL))(v37, v30);
        char v38 = v39;
      }

      uint64_t v2 = v25;
      uint64_t v1 = v53;
      uint64_t v40 = *v35;
      if (*v35)
      {
        uint64_t v41 = v34[3];
        uint64_t ObjectType = swift_getObjectType(*v35);
        swift_unknownObjectRetain(v40);
        uint64_t v43 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v41);
        uint64_t v45 = v44;
        sub_100085E9C();
      }

      else
      {
        uint64_t v43 = 0LL;
        uint64_t v45 = 0LL;
      }

      uint64_t v8 = v54;
      uint64_t v46 = **(void **)(v0 + 128);
      uint64_t v47 = v45 | v43;
      if (v45 | v43)
      {
        uint64_t v47 = v0 + 56;
        *(void *)(v0 + 56) = 0LL;
        *(void *)(v0 + 64) = 0LL;
        *(void *)(v0 + 72) = v43;
        *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v45;
      }

      uint64_t v48 = *(void *)(v0 + 168);
      *(void *)(v0 + 88) = 1LL;
      *(void *)(v0 + 96) = v47;
      *(void *)(v0 + 104) = v46;
      uint64_t v49 = swift_task_create(v38 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_10010DA68, v34);
      swift_release(v49);
      sub_10002F99C(v48, &qword_10010B208);
      uint64_t v9 = v53;
      if ((v2 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_7:
      int64_t v15 = __CocoaSet.Iterator.next()(v6);
      if (v15)
      {
        uint64_t v16 = v15;
        *(void *)(v0 + 12sub_100016BD0(0, v0, 0) = v15;
        uint64_t v17 = sub_100022DB0();
        swift_unknownObjectRetain(v16);
        uint64_t v18 = sub_100085860();
        sub_100022CC0(v18, v19, (uint64_t)&type metadata for Swift.AnyObject + 8, v17);
        int64_t v20 = *(void *)(v0 + 112);
        swift_unknownObjectRelease(v16);
        uint64_t v14 = v8;
        uint64_t v1 = v9;
        if (v20) {
          continue;
        }
      }

      goto LABEL_37;
    }
  }

  __break(1u);
}

  __break(1u);
}

    sub_100085EEC();
  }

  unint64_t v24 = v22 + 5;
  if (v24 >= v51)
  {
LABEL_39:
    swift_release(v53);
    sub_100007448();
    return;
  }

  if (*(void *)(v50 + 8 * v24))
  {
    uint64_t v12 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    sub_100085740();
    if (v14 == v15) {
      goto LABEL_39;
    }
    sub_100085724();
    unint64_t v24 = v25 + 1;
    if (v26) {
      goto LABEL_25;
    }
  }

    *(void *)(v9 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v5) - 1;
    sub_1000308D8();
    uint64_t v0 = v33;
  }

  else
  {
    *(void *)(v9 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v5) - 1;
  }

  char v29 = *v0;
  int v30 = *(void *)(*v0 + 16);
  uint64_t v31 = __OFSUB__(v30, 1LL);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v29 + 16) = v32;
    ++*(_DWORD *)(v29 + 36);
    sub_100007448();
  }

void sub_100012590()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000229CC();
  sub_1000226EC();
  __chkstk_darwin(v7);
  sub_10002265C();
  __chkstk_darwin(v8);
  sub_1000227A8();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v27 - v10;
  int64_t v12 = 0LL;
  v27[0] = v6 + 56;
  v27[1] = v4;
  sub_1000226C4();
  unint64_t v15 = v14 & v13;
  int64_t v17 = (unint64_t)(v16 + 63) >> 6;
  if ((v14 & v13) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v12 << 6))
  {
    sub_1000229DC(*(void *)(v6 + 48) + *(void *)(v2 + 72) * i, (uint64_t)v11);
    sub_100021AB0((uint64_t)v11, v0, type metadata accessor for ModelCatalogAsset);
    sub_100022D68();
    sub_100022620(v1);
    if (v15) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v20 >= v17) {
      goto LABEL_21;
    }
    unint64_t v21 = *(void *)(v27[0] + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v17) {
        goto LABEL_21;
      }
      sub_100022AD0();
      if (!v21)
      {
        int64_t v12 = v22 + 2;
        if (v22 + 2 >= v17) {
          goto LABEL_21;
        }
        sub_100022AD0();
        if (!v21)
        {
          int64_t v12 = v23 + 3;
          if (v23 + 3 >= v17) {
            goto LABEL_21;
          }
          sub_100022AD0();
          if (!v21) {
            break;
          }
        }
      }
    }

LABEL_23:
  __break(1u);
}

      uint64_t v40 = (v21 - 1) & v21;
      uint64_t v41 = v22;
    }

    uint64_t v35 = (void (*)(char *, uint64_t))v43[1];
LABEL_33:
    v35(v10, v4);
  }

  return 0LL;
}

      uint64_t v9 = (v17 - 1) & v17;
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

      uint64_t v11 = (v17 - 1) & v17;
    }
  }

  swift_release(v3);
  *uint64_t v2 = v6;
}

      uint64_t v10 = (v17 - 1) & v17;
    }
  }

  swift_release();
  *uint64_t v2 = v6;
}

    sub_100022180();
  }

  uint64_t v16 = v15 + 3;
  if (v16 >= v3) {
    goto LABEL_26;
  }
  if (*(void *)(v2 + 8 * v16))
  {
    uint64_t v4 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_26;
    }
    ++v16;
    if (*(void *)(v2 + 8 * v4)) {
      goto LABEL_23;
    }
  }

    sub_100022180();
  }

  unint64_t v15 = v14 + 3;
  if (v15 >= v3) {
    goto LABEL_26;
  }
  if (*(void *)(v2 + 8 * v15))
  {
    uint64_t v4 = v15;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_26;
    }
    ++v15;
    if (*(void *)(v2 + 8 * v4)) {
      goto LABEL_23;
    }
  }

    sub_100022198();
  }

  int64_t v20 = v19 + 3;
  if (v20 >= v4)
  {
LABEL_26:
    sub_10000C1F0();
    uint64_t v9 = v22;
    goto LABEL_28;
  }

  if (*(void *)(v2 + 8 * v20))
  {
    uint64_t v5 = v20;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v5 >= v4) {
      goto LABEL_26;
    }
    ++v20;
    if (*(void *)(v2 + 8 * v5)) {
      goto LABEL_23;
    }
  }

    sub_100022198();
  }

  unint64_t v21 = v20 + 3;
  if (v21 >= v4)
  {
LABEL_26:
    sub_10000C1F0();
    uint64_t v11 = v26;
    goto LABEL_28;
  }

  if (*(void *)(v2 + 8 * v21))
  {
    uint64_t v5 = v21;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v5 >= v4) {
      goto LABEL_26;
    }
    ++v21;
    if (*(void *)(v2 + 8 * v5)) {
      goto LABEL_23;
    }
  }

    sub_100022198();
  }

  int64_t v20 = v19 + 3;
  if (v20 >= v4)
  {
LABEL_26:
    sub_10000C1F0();
    uint64_t v9 = v22;
    goto LABEL_28;
  }

  if (*(void *)(v2 + 8 * v20))
  {
    uint64_t v5 = v20;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v5 >= v4) {
      goto LABEL_26;
    }
    ++v20;
    if (*(void *)(v2 + 8 * v5)) {
      goto LABEL_23;
    }
  }

    uint64_t v10 = (v17 - 1) & v17;
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  int64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    uint64_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    int64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    uint64_t v13 = (v19 - 1) & v19;
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v43)
  {
LABEL_30:
    swift_release_n(v6, 2LL);
    goto LABEL_32;
  }

  unint64_t v19 = *(void *)(v42 + 8 * v20);
  if (v19)
  {
    uint64_t v14 = v20;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v43) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v42 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }

    uint64_t v11 = (v16 - 1) & v16;
  }

  int64_t v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_35:
    swift_release(v3);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  uint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16)
  {
    uint64_t v7 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v7 >= v32) {
      goto LABEL_35;
    }
    uint64_t v16 = *(void *)(v8 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    uint64_t v10 = (v17 - 1) & v17;
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v11)
  {
LABEL_35:
    swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_37;
  }

  int64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    uint64_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v11) {
      goto LABEL_35;
    }
    int64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    sub_100022C7C();
    uint64_t v53 = v56 + (v50 << 6);
LABEL_24:
    char v57 = *(void *)(*(void *)(v40 + 48) + 8 * v53);
    sub_1000227A0(*(void *)(v48 + 40), v45, v46, v47);
    sub_10000C0F0();
    v42(&a12);
    uint64_t v58 = sub_100022844() & ~(-1LL << *(_BYTE *)(v48 + 32));
    if (((-1LL << v58) & ~*(void *)(v51 + 8 * (v58 >> 6))) == 0)
    {
      sub_100021D9C();
      while (1)
      {
        sub_1000223EC();
        if (v62)
        {
          if ((v59 & 1) != 0) {
            break;
          }
        }

        if (v60 == v61) {
          uint64_t v60 = 0LL;
        }
        if (*(void *)(v51 + 8 * v60) != -1LL)
        {
          sub_100021D88();
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    sub_100021DB0();
LABEL_34:
    sub_100022ADC();
    *(void *)(v51 + v63) |= v64;
    *(void *)(*(void *)(v48 + 48) + 8 * v65) = v57;
    sub_10002202C();
    if (__OFSUB__(v41--, 1LL)) {
      goto LABEL_39;
    }
    if (!v41) {
      goto LABEL_36;
    }
  }

  uint64_t v55 = v54 + 3;
  if (v55 >= v67) {
    goto LABEL_36;
  }
  if (v68[v55])
  {
    uint64_t v50 = v55;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v50 = v55 + 1;
    if (__OFADD__(v55, 1LL)) {
      break;
    }
    if (v50 >= v67) {
      goto LABEL_36;
    }
    ++v55;
    if (v68[v50]) {
      goto LABEL_23;
    }
  }

  uint64_t v89 = *v253;
  uint64_t v90 = Array.description.getter(v24);
  sub_10000BD28();
  sub_1000845DC(v90, v91, &v259);
  *v174 = v92;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v174, v253, v195 + 14);
  sub_10000C1B0(v89);
  sub_1000228C4();
  sub_10000BFDC((void *)&_mh_execute_header, v209, BYTE4(v202), "Session %s trying to prewarm assets %s", v195);
  swift_arrayDestroy(v188, 2LL);
  sub_10000BCC4(v188);
  sub_10000BCC4((uint64_t)v195);

  uint64_t v71 = (void (*)(uint64_t))v181;
LABEL_24:
  *(void *)(v3 + 512) = v71;
  uint64_t v94 = *(uint8_t **)(v3 + 384);
  v93 = *(void *)(v3 + 392);
  uint64_t v95 = *(void *)(v3 + 376);
  uint64_t v96 = *(void *)(v3 + 272) + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_10002FFE4(v96, v3 + 136);
  sub_1000843A8(v93, v96, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 16));
  sub_1000843A8( (uint64_t)v94,  enum case for AssetPolicy.unloadCached(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 104));
  sub_100048A38( &qword_10010DBF0,  (uint64_t (*)(uint64_t))&type metadata accessor for AssetPolicy,  (uint64_t)&protocol conformance descriptor for AssetPolicy);
  sub_1000858B0();
  uint64_t v101 = dispatch thunk of static Equatable.== infix(_:_:)(v97, v98, v99, v100);
  uint64_t v102 = *(void (**)(uint64_t))(v95 + 8);
  uint64_t v103 = sub_100085FD0();
  v102(v103);
  uint64_t v104 = sub_100030C8C();
  uint64_t v105 = ((uint64_t (*)(uint64_t))v102)(v104);
  if ((v101 & 1) != 0)
  {
    Logger.logObject.getter(v105);
    uint64_t v106 = sub_100022604();
    if (sub_10002275C(v106))
    {
      uint64_t v107 = (_WORD *)sub_10000BCF4(2LL);
      sub_100084CB8(v107);
      sub_1000495CC((void *)&_mh_execute_header, v222, (os_log_type_t)v93, "Prewarm not allowed by current policy", v94);
      sub_10000BCC4((uint64_t)v94);
    }

    v108 = sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    sub_1000302B0(v108, v109);
    uint64_t v111 = (uint64_t)v110;
    *uint64_t v110 = *(void *)(v96 + *(int *)(sub_100084F64() + 32));
    sub_1000843A8( v111,  enum case for ModelManagerError.deniedDueToSpecifiedSystemState(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104LL));
    uint64_t v112 = sub_1000225A4();
    sub_100085F0C( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  (uint64_t)v174,  v181,  v188,  (uint64_t)v195,  v202,  (uint64_t)v209);
    sub_10002F99C(v228, &qword_10010C008);
    sub_100006F7C(v216);
LABEL_28:
    v229 = *(void *)(v3 + 352);
    v237 = *(void *)(v3 + 328);
    sub_100085B84();
    v244 = v121;
    v250 = v120;
    v255 = *(void *)(v3 + 304);
    v258 = *(void *)(v3 + 296);
    swift_task_dealloc(v122);
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    sub_10000BFE4();
    sub_10000C140();
    uint64_t v123 = sub_10000C1B8();
    uint64_t v131 = sub_100084474( v123,  v124,  v125,  v126,  v127,  v128,  v129,  v130,  v175,  v182,  v189,  v196,  v203,  v210,  (uint64_t)v216,  (uint64_t)v222,  v229);
    uint64_t v139 = sub_100083F18( v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v176,  v183,  v190,  v197,  v204,  v211,  v217,  v223,  v230,  v237);
    v147 = sub_100083C14( v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  v177,  v184,  v191,  v198,  v205,  v212,  v218,  v224,  v231,  v238,  v244);
    v155 = sub_100083D58( v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v178,  v185,  v192,  v199,  v206,  v213,  v219,  v225,  v232,  v239,  v245,  v250);
    v163 = sub_100083D50( v155,  v156,  v157,  v158,  v159,  v160,  v161,  v162,  v179,  v186,  v193,  v200,  v207,  v214,  v220,  v226,  v233,  v240,  v246,  v251,  v255);
    sub_100083DD0( v163,  v164,  v165,  v166,  v167,  v168,  v169,  v170,  v180,  v187,  v194,  v201,  v208,  v215,  v221,  v227,  v234,  v241,  v247,  v252,  v256,  v258);
    return sub_100082EB8(*(uint64_t (**)(void))(v3 + 8));
  }

  v172 = (void *)swift_task_alloc(dword_10010D654);
  *(void *)(v3 + 52sub_100016BD0(0, v0, 0) = v172;
  *v172 = v3;
  v172[1] = sub_100058EF4;
  v173 = sub_1000306EC(*(void *)(v3 + 224));
  return sub_100060828(v173, (uint64_t)v216);
}

  swift_bridgeObjectRelease(a1);
  uint64_t v22 = 0LL;
LABEL_24:
  swift_bridgeObjectRelease(v7);
  return v22;
}

    _HashTable.BucketIterator.advance()();
    uint64_t v72 = v68;
    uint64_t v73 = v69;
    uint64_t v74 = v70;
    uint64_t v75 = v71;
    uint64_t result = _HashTable.BucketIterator.currentValue.getter( v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v52,  v53,  v54,  v55,  v56,  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68);
    if ((v51 & 1) != 0) {
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

  sub_10008339C();
  sub_10008339C();
  sub_10000C1B0(v4);
  sub_100095FFC();
  __break(1u);
}

  sub_10008339C();
  sub_10008339C();
  sub_10000C1B0(v4);
  sub_100095FFC();
  __break(1u);
}

    unint64_t v21 = sub_1000A85A4();
    sub_1000A8828(v21, enum case for DaemonSessionState.cancelled(_:));
    sub_1000A8754();
    sub_1000A8660();
    sub_1000A87B4();
    sub_10002257C(v4, v2);
    sub_1000A8804();
    swift_endAccess(v2);
    sub_1000A8834();
    sub_10002294C();
    swift_task_dealloc(v3);
    swift_task_dealloc(v0);
    sub_10002FDE0(*(uint64_t (**)(void))(v1 + 8));
    return;
  }

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

uint64_t sub_100012740(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = sub_100022694();
  v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_100021CC4(v4);
  uint64_t v5 = type metadata accessor for RequestManagerPolicy(0LL);
  v2[12] = v5;
  v2[13] = sub_100021CA4(v5);
  uint64_t v6 = type metadata accessor for AssetPolicy(0LL);
  v2[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[15] = v7;
  v2[16] = sub_100021CC4(v7);
  uint64_t v8 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
  v2[17] = v8;
  v2[18] = sub_100021CA4(v8);
  uint64_t v9 = sub_100022258();
  v2[19] = v9;
  v2[20] = *(void *)(v9 - 8);
  v2[21] = sub_10002287C();
  v2[22] = sub_10002287C();
  v2[23] = sub_10002287C();
  v2[24] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_100012804()
{
  if (qword_10010B088 != -1) {
    swift_once(&qword_10010B088, sub_10000CB7C);
  }
  uint64_t v2 = v0[23];
  uint64_t v1 = (os_log_s *)v0[24];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = sub_10000BF6C();
  v0[25] = sub_100003BA0(v5, (uint64_t)qword_10010B4E0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[26] = v6;
  uint64_t v48 = v6;
  v6(v2, (uint64_t)v1, v3);
  sub_1000228BC();
  os_log_type_t v7 = sub_100022604();
  BOOL v8 = sub_1000228A4(v7);
  uint64_t v9 = v0[23];
  if (v8)
  {
    uint64_t v10 = v0[22];
    uint64_t v11 = v0[19];
    uint64_t v46 = v0[20];
    int64_t v12 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v49 = sub_10000BCF4(32LL);
    *(_DWORD *)int64_t v12 = 136315138;
    v48(v10, v9, v11);
    uint64_t v13 = String.init<A>(describing:)(v10, v11);
    sub_100022788(v13, v14, v15, v16, v17, v18, v19);
    v0[6] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v12 + 4);
    sub_100007570();
    unint64_t v21 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    sub_100022D74(v9);
    sub_100022210((void *)&_mh_execute_header, v1, (os_log_type_t)v2, "Applying new policy: %s", v12);
    sub_100021F38(v49);
    sub_10000BCC4(v49);
    sub_10000BCC4((uint64_t)v12);
  }

  else
  {
    unint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8LL);
    v21(v0[23], v0[19]);
  }

  uint64_t v47 = v21;
  v0[27] = v21;
  uint64_t v22 = v0[24];
  uint64_t v23 = v0[21];
  uint64_t v24 = v0[18];
  uint64_t v25 = v0[19];
  uint64_t v26 = v0[16];
  uint64_t v27 = (int *)v0[17];
  uint64_t v28 = v0[15];
  uint64_t v45 = v0[8];
  sub_10000C2B0(v0[7]);
  sub_10001137C(v29);
  uint64_t v31 = v30;
  v0[28] = v30;
  v48(v23, v22, v25);
  uint64_t v32 = sub_1000225A4();
  uint64_t v33 = Policy.assetPolicy.getter(v32);
  uint64_t v34 = Policy.memoryBudget.getter(v33);
  double v35 = (double)Policy.inactiveAssetTimeout.getter(v34);
  Policy.assetTransitionDelay.getter();
  uint64_t v36 = sub_1000225D4(v24, v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
  *(void *)(v24 + v27[5]) = v34;
  *(void *)(v24 + v27[8]) = v31;
  uint64_t v37 = static Policy.defaultInactiveAssetTimeout.getter(v36);
  double v38 = 900.0;
  *(double *)(v24 + v27[6]) = v38;
  sub_100052A5C();
  uint64_t v40 = v39;
  uint64_t v41 = sub_100022C44();
  v42(v41);
  *(void *)(v24 + v27[7]) = v40;
  v47(v23, v25);
  sub_10000729C((void *)(v45 + 200), *(void *)(v45 + 224));
  uint64_t v43 = (void *)swift_task_alloc(dword_10010D624);
  v0[29] = v43;
  void *v43 = v0;
  v43[1] = sub_100012AF0;
  return sub_10005E364(v0[18]);
}

uint64_t sub_100012AF0()
{
  return sub_10000BD98();
}

uint64_t sub_100012B28()
{
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v6 = sub_1000222C4(v1, *(void *)(v0 + 192), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 208));
  ((void (*)(uint64_t))Policy.cancelPriority.getter)(v6);
  sub_1000227D4(v1);
  *uint64_t v2 = v9;
  sub_1000228F0((uint64_t)v2 + *(int *)(v3 + 20), v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
  os_log_type_t v7 = (void *)swift_task_alloc(dword_10010F494);
  *(void *)(v0 + 24sub_100016BD0(0, v0, 0) = v7;
  *os_log_type_t v7 = v0;
  v7[1] = sub_100012BE4;
  return sub_1000C70C4(*(void *)(v0 + 104));
}

uint64_t sub_100012BE4()
{
  return sub_10000BD98();
}

uint64_t sub_100012C1C()
{
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(os_log_s **)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  *(void *)(v5 + 32sub_100016BD0(0, v0, 0) = v4;
  swift_bridgeObjectRetain(v4);
  sub_1000228C4();
  uint64_t v6 = v5 + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy;
  sub_10002257C(v5 + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy, v0 + 16);
  sub_1000228F0(v6, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 24));
  uint64_t v7 = swift_endAccess(v0 + 16);
  Logger.logObject.getter(v7);
  os_log_type_t v8 = sub_100022604();
  if (sub_10002275C(v8))
  {
    uint64_t v9 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, (os_log_type_t)(v0 + 16), "Finished applying policy", v9, 2u);
    sub_10000BCC4((uint64_t)v9);
  }

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 152);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 88);

  sub_100021A90(v15, type metadata accessor for RequestManagerPolicy);
  sub_100021A90(v14, type metadata accessor for InferenceProviderAssetManagerPolicy);
  v10(v11, v13);
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  return sub_100021CD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100012D60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100003B20(&qword_10010B858);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = a1;
  sub_10000DCC4((uint64_t (*)(char *))sub_100021300, a2, (uint64_t)v9);
  uint64_t v10 = sub_100003B20(&qword_10010B830);
  uint64_t result = sub_1000060B4((uint64_t)v9, 1LL, v10);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = *v9;
    uint64_t v12 = v9[1];
    uint64_t v14 = (char *)v9 + *(int *)(v10 + 48);
    uint64_t v15 = type metadata accessor for Policy(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    if (qword_10010B088 != -1) {
      swift_once(&qword_10010B088, sub_10000CB7C);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v17, (uint64_t)qword_10010B4E0);
    uint64_t v18 = swift_bridgeObjectRetain(v12);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v28 = a3;
      uint64_t v21 = swift_slowAlloc(12LL, -1LL);
      v27[1] = v3;
      uint64_t v22 = (uint8_t *)v21;
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = a1;
      uint64_t v24 = v23;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain(v12);
      sub_100015EF8(v13, v12, &v33);
      uint64_t v31 = v25;
      a3 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 4);
      swift_bridgeObjectRelease_n(v12, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Trial policy with same name as file policy: %s", v22, 0xCu);
      swift_arrayDestroy(v24, 1LL);
      uint64_t v26 = v24;
      a1 = v29;
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a3, a1, v15);
  }

  return result;
}

uint64_t sub_100012FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B830);
  return static Policy.== infix(_:_:)(a1 + *(int *)(v4 + 48), a2) & 1;
}

void sub_100013040()
{
  uint64_t v93 = v2;
  uint64_t v94 = v0;
  uint64_t v4 = v3;
  sub_100022694();
  sub_10000C240();
  __chkstk_darwin(v5);
  sub_100022518();
  uint64_t v92 = v6;
  sub_100022D7C();
  sub_10000C240();
  __chkstk_darwin(v7);
  sub_100022518();
  uint64_t v88 = v8;
  uint64_t v9 = sub_100022258();
  uint64_t v90 = *(void *)(v9 - 8);
  uint64_t v91 = v9;
  sub_10000C240();
  __chkstk_darwin(v10);
  sub_100022518();
  uint64_t v89 = v11;
  uint64_t v12 = sub_100003B20(&qword_10010B228);
  uint64_t v100 = *(void *)(v12 - 8);
  sub_10000C240();
  __chkstk_darwin(v13);
  sub_100022990();
  uint64_t v14 = sub_10002269C();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_10000C110();
  uint64_t v18 = v16 - v17;
  __chkstk_darwin(v19);
  uint64_t v98 = (uint64_t)&v86 - v20;
  sub_1000071C0(&qword_10010B238, &qword_10010B228);
  uint64_t v101 = v12;
  uint64_t v87 = v21;
  uint64_t v22 = (void *)Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v12, &type metadata for String, v21);
  uint64_t v95 = v4 + 56;
  sub_1000226C4();
  unint64_t v25 = v24 & v23;
  int64_t v96 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v99 = v4;
  sub_100021EB0();
  uint64_t v27 = 0LL;
  uint64_t v97 = v15;
  if (!v25) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v102 = (v25 - 1) & v25;
  uint64_t v103 = v27;
  for (unint64_t i = __clz(__rbit64(v25)) | (v27 << 6); ; unint64_t i = v42 + (v41 << 6))
  {
    uint64_t v43 = v98;
    sub_1000225D4( v98,  *(void *)(v99 + 48) + *(void *)(v15 + 72) * i,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16));
    uint64_t v44 = v14;
    uint64_t v45 = sub_1000225D4(v18, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
    uint64_t v46 = Assertion.DaemonRep.id.getter(v45);
    uint64_t v47 = v18;
    uint64_t v48 = Assertion.DaemonRep.policy.getter(v46);
    uint64_t v50 = v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    uint64_t v106 = v22;
    uint64_t v52 = v1;
    unint64_t v53 = sub_10001668C();
    uint64_t v55 = v22[2];
    BOOL v56 = (v54 & 1) == 0;
    uint64_t v22 = (void *)(v55 + v56);
    if (__OFADD__(v55, v56))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    unint64_t v57 = v53;
    char v58 = v54;
    sub_100003B20(&qword_10010B720);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v22))
    {
      unint64_t v59 = sub_10001668C();
      if ((v58 & 1) != (v60 & 1)) {
        goto LABEL_45;
      }
      unint64_t v57 = v59;
    }

    uint64_t v22 = v106;
    if ((v58 & 1) != 0)
    {
      uint64_t v61 = (uint64_t *)(v106[7] + 16 * v57);
      swift_bridgeObjectRelease(v61[1]);
      *uint64_t v61 = v48;
      v61[1] = v50;
      uint64_t v1 = v52;
    }

    else
    {
      v106[(v57 >> 6) + 8] |= 1LL << v57;
      uint64_t v1 = v52;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v100 + 16))( v22[6] + *(void *)(v100 + 72) * v57,  v52,  v101);
      uint64_t v62 = (uint64_t *)(v22[7] + 16 * v57);
      *uint64_t v62 = v48;
      v62[1] = v50;
      uint64_t v63 = v22[2];
      BOOL v31 = __OFADD__(v63, 1LL);
      uint64_t v64 = v63 + 1;
      if (v31) {
        goto LABEL_41;
      }
      v22[2] = v64;
    }

    swift_bridgeObjectRelease(0x8000000000000000LL);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v1, v101);
    uint64_t v15 = v97;
    uint64_t v18 = v47;
    uint64_t v14 = v44;
    sub_100022CF4(v47, *(uint64_t (**)(uint64_t, uint64_t))(v97 + 8));
    unint64_t v25 = v102;
    uint64_t v27 = v103;
    if (v102) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v29 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      goto LABEL_42;
    }
    if (v29 >= v96) {
      goto LABEL_35;
    }
    if (!*(void *)(v95 + 8 * v29))
    {
      sub_100022890();
      if (v30 == v31) {
        goto LABEL_35;
      }
      sub_100022884();
      if (!v32)
      {
        sub_100022890();
        if (v30 == v31) {
          goto LABEL_35;
        }
        sub_100022884();
        if (!v33)
        {
          sub_100022890();
          if (v30 == v31) {
            goto LABEL_35;
          }
          sub_100022884();
          if (!v34)
          {
            sub_100022890();
            if (v30 == v31) {
              goto LABEL_35;
            }
            sub_100022884();
            if (!v36) {
              break;
            }
          }
        }
      }
    }

LABEL_24:
    sub_100022A34();
    uint64_t v102 = v40;
    uint64_t v103 = v41;
  }

  int64_t v37 = v35 + 5;
  if (v37 < v96)
  {
    if (!*(void *)(v95 + 8 * v37))
    {
      while (!__OFADD__(v37, 1LL))
      {
        sub_100022890();
        if (v30 == v31) {
          goto LABEL_35;
        }
        sub_100022884();
        int64_t v37 = v38 + 1;
        if (v39) {
          goto LABEL_24;
        }
      }

      __break(1u);
LABEL_45:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v101);
      __break(1u);
      return;
    }

    goto LABEL_24;
  }

      uint64_t v14 = (v21 - 1) & v21;
      uint64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }

    uint64_t v23 = a4;
    uint64_t v24 = *(void *)(a4 + 48);
    unint64_t v25 = *(void *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    uint64_t v26 = *(void *)(v12 + 40);
    sub_100021AD0(&qword_10010B250, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    uint64_t v28 = -1LL << *(_BYTE *)(v12 + 32);
    int64_t v29 = result & ~v28;
    char v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) == 0) {
      break;
    }
    BOOL v31 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    uint64_t v17 = v40;
LABEL_34:
    *(void *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))( *(void *)(v12 + 48) + v31 * v25,  v11,  v8);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      goto LABEL_39;
    }
    a4 = v23;
    if (!a3) {
      goto LABEL_36;
    }
  }

  uint64_t v32 = 0;
  uint64_t v33 = (unint64_t)(63 - v28) >> 6;
  uint64_t v17 = v40;
  while (++v30 != v33 || (v32 & 1) == 0)
  {
    uint64_t v34 = v30 == v33;
    if (v30 == v33) {
      char v30 = 0LL;
    }
    v32 |= v34;
    uint64_t v35 = *(void *)(v16 + 8 * v30);
    if (v35 != -1)
    {
      BOOL v31 = __clz(__rbit64(~v35)) + (v30 << 6);
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

      uint64_t v12 = (v18 - 1) & v18;
      uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }

    uint64_t v20 = *(void *)(v31 + 72);
    sub_10002270C(*(void *)(v2 + 48) + v20 * v16, v0);
    Hasher.init(_seed:)(v32, *(void *)(v11 + 40));
    UUID.hash(into:)(v32);
    sub_100022A48();
    sub_100021F40();
    sub_10002277C();
    if (v21) {
      break;
    }
    sub_100021DB0();
LABEL_35:
    sub_10002276C();
    *(void *)(v14 + vsub_100006F7C(v0 + 25) = v26;
    sub_100021AB0( v0,  *(void *)(v11 + 48) + v27 * v20,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    sub_10002202C();
    if (__OFSUB__(v4--, 1LL)) {
      goto LABEL_40;
    }
    if (!v4) {
      goto LABEL_37;
    }
  }

  sub_100021D9C();
  while (1)
  {
    sub_1000223EC();
    if (v21)
    {
      if ((v22 & 1) != 0) {
        break;
      }
    }

    if (v23 == v24) {
      uint64_t v23 = 0LL;
    }
    if (*(void *)(v14 + 8 * v23) != -1LL)
    {
      sub_100021D88();
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

  uint64_t v45 = v16;
  sub_100005FB0((uint64_t)v11, 1LL, 1LL, v3);
  uint64_t v19 = 0LL;
LABEL_25:
  *uint64_t v1 = v12;
  v1[1] = v13;
  uint64_t v33 = v45;
  v1[2] = v15;
  v1[3] = v33;
  v1[4] = v19;
  uint64_t v34 = (void (*)(uint64_t))v1[5];
  sub_1000212B4((uint64_t)v11, (uint64_t)v9, &qword_10010B858);
  uint64_t v35 = 1LL;
  if (sub_1000060B4((uint64_t)v9, 1LL, v3) != 1)
  {
    uint64_t v36 = (uint64_t)v9;
    int64_t v37 = (uint64_t)v41;
    sub_1000212B4(v36, (uint64_t)v41, &qword_10010B830);
    v34(v37);
    sub_1000212DC(v37, &qword_10010B830);
    uint64_t v35 = 0LL;
  }

  uint64_t v38 = sub_100003B20(&qword_10010B838);
  return sub_100005FB0(a1, v35, 1LL, v38);
}

        uint64_t v11 = (v11 + 1) & v12;
        uint64_t v9 = v15;
        if (((*(void *)(v15 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
          goto LABEL_25;
        }
      }

      swift_arrayInitWithTakeFrontToBack();
LABEL_23:
      uint64_t v5 = v11;
      goto LABEL_24;
    }

LABEL_35:
  swift_release(v99);
  if (qword_10010B088 == -1) {
    goto LABEL_36;
  }
LABEL_43:
  swift_once(&qword_10010B088, sub_10000CB7C);
LABEL_36:
  uint64_t v65 = sub_10000BF6C();
  sub_100003BA0(v65, (uint64_t)qword_10010B4E0);
  uint64_t v66 = sub_100022418();
  uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v70 = sub_10000BCF4(32LL);
    uint64_t v106 = (void *)v70;
    *(_DWORD *)uint64_t v69 = 136315138;
    uint64_t v71 = sub_100022418();
    uint64_t v72 = Dictionary.description.getter(v71, v101, &type metadata for String, v87);
    uint64_t v74 = v73;
    sub_10000C1E8();
    sub_100015EF8(v72, v74, (uint64_t *)&v106);
    uint64_t v104 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v69 + 4);
    sub_10000C1B0((uint64_t)v22);
    swift_bridgeObjectRelease(v74);
    sub_100022210((void *)&_mh_execute_header, v67, v68, "Building effective policy from assertions: %s", v69);
    sub_100021F38(v70);
    sub_10000BCC4(v70);
    sub_10000BCC4((uint64_t)v69);
  }

  else
  {

    uint64_t v76 = sub_10000C1B0((uint64_t)v22);
  }

  uint64_t v77 = v88;
  uint64_t v78 = default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v76);
  uint64_t v79 = default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v78);
  uint64_t v80 = v92;
  uint64_t v81 = default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  uint64_t v82 = default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v81);
  uint64_t v83 = default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  uint64_t v84 = v89;
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)( v77,  v79,  v80,  v82,  v83);
  uint64_t v85 = v94;
  sub_1000224B4();
  sub_10000C4C8(v84, v99, v85, v93);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v84, v91);
  sub_100007448();
}

  swift_release(v8);
  uint64_t v3 = v41;
  if ((v44 & 1) != 0)
  {
    uint64_t v39 = 1LL << *(_BYTE *)(v8 + 32);
    if (v39 >= 64) {
      sub_100017524(0LL, (unint64_t)(v39 + 63) >> 6, v43);
    }
    else {
      void *v43 = -1LL << v39;
    }
    *(void *)(v8 + 16) = 0LL;
  }

  __break(1u);
}

    uint64_t result = *(void *)(v0 + 136);
LABEL_36:
    sub_1000212AC(result);
    sub_10000C140();
    return sub_10002FDE0(*(uint64_t (**)(void))(v0 + 8));
  }

  __break(1u);
  return result;
}

    sub_10000BCDC(v47);
    swift_release(v57);
    uint64_t v4 = v48;
  }

  else
  {
    sub_10000C030();
    uint64_t v45 = sub_100022418();
    sub_100083EEC(v45, v46, (uint64_t)sub_100053ECC);
  }

  v60[0] = (uint64_t)sub_100086014();
  sub_100083FA4(v60, (uint64_t (*)(uint64_t, uint64_t))sub_1000539CC);
  if (v4) {
    goto LABEL_40;
  }
  sub_100021DDC();
  sub_100007448();
}

    ++v7;
    swift_release(v9);
    if (v7 == v5)
    {
      swift_unknownObjectRelease(a1);
      return;
    }
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

    sub_1000D0BDC();
LABEL_36:
    uint64_t v28 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
    sub_10000C030();
    if (!v28) {
      goto LABEL_47;
    }
    while (1)
    {
      int64_t v29 = sub_1000D0464();
      sub_1000D06D0(v29);
      char v30 = (void *)sub_100007460((uint64_t)&unk_1001056F8, 56LL);
      BOOL v31 = sub_1000D1004(v30);
      sub_1000D0918((uint64_t)v31);
      uint64_t v32 = sub_1000060B4(v4, 1LL, v6);
      uint64_t v33 = sub_100021D80();
      uint64_t v34 = v2[20];
      if (v32 == 1)
      {
        sub_1000D0210(v2[20]);
      }

      else
      {
        uint64_t v1 = TaskPriority.rawValue.getter(v33);
        sub_1000D0434(v34, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL));
      }

      uint64_t v35 = *(void *)v0;
      if (*(void *)v0)
      {
        sub_1000D0EF4();
        sub_1000D0AA0();
        uint64_t v36 = sub_1000D0CD0();
        uint64_t v38 = v37;
        sub_1000D0B18();
      }

      else
      {
        uint64_t v36 = 0LL;
        uint64_t v38 = 0LL;
      }

      sub_1000D0BBC();
      uint64_t v39 = sub_100007460((uint64_t)&unk_100105720, 32LL);
      *(void *)(v39 + 16) = &unk_10010F998;
      *(void *)(v39 + 24) = v5;
      uint64_t v40 = v38 | v36;
      if (v38 | v36)
      {
        uint64_t v40 = (uint64_t)v50;
        *uint64_t v50 = 0LL;
        v50[1] = 0LL;
        v2[9] = v36;
        v2[10] = v38;
      }

      uint64_t v41 = sub_1000D0670(v40);
      swift_task_create(v41, v42, v43, &unk_10010F9A0, v44);
      swift_release();
      sub_1000CF88C(v36, &qword_10010B208);
      uint64_t v5 = v3;
      uint64_t v6 = v35;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v14 = __CocoaSet.Iterator.next()(v12);
      if (v14)
      {
        *uint64_t v45 = v14;
        sub_100022DB0();
        sub_1000D10B8();
        sub_100022CC0((uint64_t)v46, (uint64_t)v45, (uint64_t)&type metadata for Swift.AnyObject + 8, v47);
        uint64_t v15 = *v46;
        sub_1000D0B18();
        uint64_t v0 = v5;
        if (v15) {
          continue;
        }
      }

      goto LABEL_47;
    }
  }

  __break(1u);
}

    sub_1000D0BDC();
LABEL_36:
    uint64_t v28 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
    sub_10000C030();
    if (!v28) {
      goto LABEL_47;
    }
    while (1)
    {
      int64_t v29 = sub_1000D0464();
      sub_1000D06D0(v29);
      char v30 = (void *)sub_100007460((uint64_t)&unk_100105680, 56LL);
      BOOL v31 = sub_1000D1004(v30);
      sub_1000D0918((uint64_t)v31);
      uint64_t v32 = sub_1000060B4(v4, 1LL, v6);
      uint64_t v33 = sub_100021D80();
      uint64_t v34 = v2[20];
      if (v32 == 1)
      {
        sub_1000D0210(v2[20]);
      }

      else
      {
        uint64_t v1 = TaskPriority.rawValue.getter(v33);
        sub_1000D0434(v34, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL));
      }

      uint64_t v35 = *(void *)v0;
      if (*(void *)v0)
      {
        sub_1000D0EF4();
        sub_1000D0AA0();
        uint64_t v36 = sub_1000D0CD0();
        uint64_t v38 = v37;
        sub_1000D0B18();
      }

      else
      {
        uint64_t v36 = 0LL;
        uint64_t v38 = 0LL;
      }

      sub_1000D0BBC();
      uint64_t v39 = sub_100007460((uint64_t)&unk_1001056A8, 32LL);
      *(void *)(v39 + 16) = &unk_10010F938;
      *(void *)(v39 + 24) = v5;
      uint64_t v40 = v38 | v36;
      if (v38 | v36)
      {
        uint64_t v40 = (uint64_t)v50;
        *uint64_t v50 = 0LL;
        v50[1] = 0LL;
        v2[9] = v36;
        v2[10] = v38;
      }

      uint64_t v41 = sub_1000D0670(v40);
      swift_task_create(v41, v42, v43, &unk_10010F948, v44);
      swift_release();
      sub_1000CF88C(v36, &qword_10010B208);
      uint64_t v5 = v3;
      uint64_t v6 = v35;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v14 = __CocoaSet.Iterator.next()(v12);
      if (v14)
      {
        *uint64_t v45 = v14;
        sub_10000C074();
        sub_1000D10B8();
        sub_100022CC0((uint64_t)v46, (uint64_t)v45, (uint64_t)&type metadata for Swift.AnyObject + 8, v47);
        uint64_t v15 = *v46;
        sub_1000D0B18();
        uint64_t v0 = v5;
        if (v15) {
          continue;
        }
      }

      goto LABEL_47;
    }
  }

  __break(1u);
}

uint64_t sub_100013644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  uint64_t v44 = v9;
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003B20(&qword_10010B728);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Policy(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = Assertion.DaemonRep.policy.getter(v16);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(a3 + 296);
  swift_bridgeObjectRetain(v22);
  sub_10000FAE0(v19, v21, v22);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  if (sub_1000060B4((uint64_t)v13, 1LL, v14) == 1)
  {
    uint64_t v40 = a4;
    uint64_t v41 = v15;
    uint64_t v39 = a1;
    sub_1000212DC((uint64_t)v13, &qword_10010B728);
    if (qword_10010B088 != -1) {
      swift_once(&qword_10010B088, sub_10000CB7C);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v23, (uint64_t)qword_10010B4E0);
    uint64_t v25 = v43;
    uint64_t v24 = v44;
    uint64_t v26 = v42;
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, a2, v43);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      char v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = v31;
      *(_DWORD *)char v30 = 136315138;
      uint64_t v38 = v30 + 4;
      uint64_t v32 = Assertion.DaemonRep.policy.getter(v31);
      uint64_t v34 = v33;
      sub_100015EF8(v32, v33, &v47);
      uint64_t v45 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v38);
      swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v25);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error while building policy: No such policy %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v25);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v39, v14);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
    sub_100011D8C();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }

void sub_100013980()
{
  uint64_t v39 = v0;
  uint64_t v40 = v3;
  if (v1 == v2) {
    return;
  }
  uint64_t v5 = v2;
  if (*(void *)(v1 + 16) != *(void *)(v2 + 16)) {
    return;
  }
  int64_t v6 = 0LL;
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v35 = v1 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(v1 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & v7;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v2 + 56;
  if ((v9 & v7) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  int64_t v37 = v6;
  for (unint64_t i = v12 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v16 << 6))
  {
    uint64_t v18 = v1;
    uint64_t v19 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    sub_1000227A0(*(void *)(v5 + 40), v2, v3, v4, v35);
    sub_100022418();
    sub_100022CE8((uint64_t)&v38);
    Swift::Int v22 = sub_100022844();
    uint64_t v23 = -1LL << *(_BYTE *)(v5 + 32);
    unint64_t v24 = v22 & ~v23;
    if (((*(void *)(v11 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v24) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v25 = *(void *)(v5 + 48);
    uint64_t v26 = sub_100022AC4(v25 + 16 * v24);
    BOOL v28 = v28 && v27 == v20;
    if (!v28 && (sub_100021EB8(v26, v27, v21, v20) & 1) == 0)
    {
      uint64_t v29 = ~v23;
      for (unint64_t j = v24 + 1; ; unint64_t j = v31 + 1)
      {
        uint64_t v31 = j & v29;
        uint64_t v32 = sub_100022AC4(v25 + 16 * v31);
        BOOL v34 = v28 && v33 == v20;
        if (v34 || (sub_100021EB8(v32, v33, v21, v20) & 1) != 0) {
          goto LABEL_28;
        }
      }

LABEL_39:
      sub_10000C1E8();
      return;
    }

  __break(1u);
}

              swift_release(v51);
              return (uint64_t)v8;
            }
          }
        }
      }
    }

              uint64_t v21 = 0LL;
              goto LABEL_38;
            }

            goto LABEL_26;
          }
        }
      }
    }

  __break(1u);
LABEL_40:
  __break(1u);
}

      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    char v30 = v41;
LABEL_27:
    uint64_t v29 = (v34 - 1) & v34;
  }

  __break(1u);
  return result;
}

LABEL_28:
    sub_10000C1E8();
    uint64_t v1 = v18;
    int64_t v6 = v37;
    if (v10) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_42;
    }

    if (v14 >= v36) {
      return;
    }
    unint64_t v15 = *(void *)(v35 + 8 * v14);
    int64_t v16 = v6 + 1;
    if (!v15)
    {
      int64_t v16 = v6 + 2;
      if (v6 + 2 >= v36) {
        return;
      }
      unint64_t v15 = *(void *)(v35 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v6 + 3;
        if (v6 + 3 >= v36) {
          return;
        }
        unint64_t v15 = *(void *)(v35 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }

  __break(1u);
}

  __break(1u);
}

    if ((*(void *)(v31 + 120) & 0xC000000000000001LL) == 0)
    {
      uint64_t v120 = v1[82];
      sub_10000C030();
      uint64_t v121 = sub_100022418();
      sub_100083EEC(v121, v122, (uint64_t)sub_100053510);
LABEL_62:
      uint64_t v123 = sub_100021EB0();
      uint64_t v124 = sub_1000CAF08(v123);
      sub_100021DDC();
      v442[0] = (uint64_t)v124;
      sub_100083FA4(v442, (uint64_t (*)(uint64_t, uint64_t))sub_10005363C);
      if (v120)
      {
        sub_100083F38(v442[0]);
        return;
      }

      v422 = v1;
      sub_100021DDC();
      uint64_t v81 = v442[0];
      if ((v442[0] & 0x8000000000000000LL) == 0 && (v442[0] & 0x4000000000000000LL) == 0)
      {
        uint64_t v125 = *(void *)(v442[0] + 16);
        if (!v125)
        {
LABEL_91:
          v254 = (os_log_s *)v422[71];
          v255 = sub_10000C1F0();
          Logger.logObject.getter(v255);
          v256 = sub_100022604();
          if (sub_10002275C(v256))
          {
            v257 = (uint8_t *)sub_10000BCF4(2LL);
            *(_WORD *)v257 = 0;
            sub_1000495CC( (void *)&_mh_execute_header,  v254,  (os_log_type_t)v125,  "No more inactive assets need purging",  v257);
            sub_10000BCC4((uint64_t)v257);
          }

          v191 = v422;

          sub_10008551C();
          sub_100085FEC();
          v192 = sub_100085FBC();
LABEL_94:
          sub_100005FB0(v192, v193, v194, v195);
LABEL_95:
          v385 = v191[56];
          v397 = v191[55];
          v405 = v191[54];
          v412 = v191[51];
          v418 = v191[50];
          sub_100085A98();
          v427 = v259;
          v434 = v258;
          v440 = v191[46];
          swift_bridgeObjectRelease(v191[42]);
          sub_10002FF04();
          sub_10002FF48();
          sub_100030494();
          sub_100030500();
          sub_100030760();
          sub_10000C140();
          sub_10000BFE4();
          sub_10000C1B8();
          v260 = sub_10002294C();
          v268 = sub_10008432C( v260,  v261,  v262,  v263,  v264,  v265,  v266,  v267,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  v385);
          v276 = sub_100084970(v268, v269, v270, v271, v272, v273, v274, v275, v328, v339, v350, v361, v372, v386, v397);
          v284 = sub_100084C94( v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v329,  v340,  v351,  v362,  v373,  v387,  v398,  v405);
          v292 = sub_100084474( v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v330,  v341,  v352,  v363,  v374,  v388,  v399,  v406,  v412);
          v300 = sub_100083F18( v292,  v293,  v294,  v295,  v296,  v297,  v298,  v299,  v331,  v342,  v353,  v364,  v375,  v389,  v400,  v407,  v413,  v418);
          v308 = sub_100083D58( v300,  v301,  v302,  v303,  v304,  v305,  v306,  v307,  v332,  v343,  v354,  v365,  v376,  v390,  v401,  v408,  v414,  v419,  (uint64_t)v422,  v427);
          v316 = sub_100083D50( v308,  v309,  v310,  v311,  v312,  v313,  v314,  v315,  v333,  v344,  v355,  v366,  v377,  v391,  v402,  v409,  v415,  v420,  v423,  v428,  v434);
          sub_100083DD0( v316,  v317,  v318,  v319,  v320,  v321,  v322,  v323,  v334,  v345,  v356,  v367,  v378,  v392,  v403,  v410,  v416,  v421,  v424,  v429,  v435,  v440);
          sub_100083F58((uint64_t (*)(void))v191[1]);
          return;
        }

    sub_1000A87A4();
    v177 = v38 & v37;
  }

  v175 = v19;
  v181 = v44 + 32;
  v174 = v43;
  uint64_t v46 = v44;
  sub_10000C030();
  v173 = v46;
  swift_retain(v46);
  uint64_t v47 = 0LL;
  while (1)
  {
    uint64_t v48 = v181 + 40 * v47;
    uint64_t v49 = *(_OWORD *)v48;
    uint64_t v50 = *(_OWORD *)(v48 + 16);
    v189 = *(_BYTE *)(v48 + 32);
    v187 = v49;
    v188 = v50;
    v190 = *(_OWORD *)v48;
    uint64_t v51 = *((void *)&v50 + 1);
    uint64_t v52 = v191[0];
    unint64_t v53 = *(void *)(v191[0] + 16);
    if (!v18)
    {
      v179 = 0LL;
      v180 = v47;
      if (!v53)
      {
LABEL_54:
        sub_1000A87FC();
        sub_1000854A0();
        uint64_t v19 = 0LL;
        uint64_t v18 = v179;
        uint64_t v47 = v180;
        goto LABEL_55;
      }

      v183 = v188;
      char v60 = v190;
      uint64_t v61 = (unsigned __int8 *)(v191[0] + 64);
      LODWORD(v184) = v189;
      while (1)
      {
        uint64_t v62 = *((void *)v61 - 4);
        uint64_t v63 = *((void *)v61 - 3);
        uint64_t v65 = *((void *)v61 - 2);
        uint64_t v64 = *((void *)v61 - 1);
        uint64_t v66 = *v61;
        uint64_t v67 = v62 == (void)v60 && v63 == *((void *)&v60 + 1);
        if (!v67 && (_stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v60, *((void *)&v60 + 1), 0LL) & 1) == 0) {
          goto LABEL_53;
        }
        if (!v64) {
          break;
        }
        if (!v51) {
          goto LABEL_53;
        }
        if (v65 != v183 || v64 != v51)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v65, v64, v183, v51, 0LL) & 1) == 0) {
            goto LABEL_53;
          }
LABEL_50:
          goto LABEL_53;
        }

        if (v66 == (v184 & 1))
        {
LABEL_76:
          uint64_t v18 = 0LL;
          uint64_t v47 = v180;
          goto LABEL_83;
        }

LABEL_21:
    unint64_t v10 = (v15 - 1) & v15;
    int64_t v37 = v16;
  }

  uint64_t v17 = v6 + 4;
  if (v6 + 4 >= v36) {
    return;
  }
  unint64_t v15 = *(void *)(v35 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v6 + 4;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v36) {
      return;
    }
    unint64_t v15 = *(void *)(v35 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_21;
    }
  }

        if ((sub_10004F550(v9[3], a1[3]) & 1) != 0
          && (static AssetCost.== infix(_:_:)((char *)v9 + v49[7], (char *)a1 + v49[7]) & 1) != 0
          && *((unsigned __int8 *)v9 + v49[8]) == *((unsigned __int8 *)a1 + v49[8])
          && *((unsigned __int8 *)v9 + v49[9]) == *((unsigned __int8 *)a1 + v49[9])
          && *((unsigned __int8 *)v9 + v49[10]) == *((unsigned __int8 *)a1 + v49[10]))
        {
          goto LABEL_53;
        }

    uint64_t v18 = (v30 - 1) & v30;
    BOOL v28 = __clz(__rbit64(v30)) + (v31 << 6);
    uint64_t v20 = v31;
LABEL_22:
    v25(v7, *(void *)(v21 + 56) + v28 * v23, v4);
    v26(v10, v7, v4);
    sub_100048A38( &qword_10010B738,  (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority,  (uint64_t)&protocol conformance descriptor for RequestPriority);
    BOOL v34 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v10, v4, v33);
    uint64_t v35 = (void (*)(char *, uint64_t))v47[1];
    if ((v34 & 1) != 0)
    {
      v35(v15, v4);
      uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v26)(v15, v10, v4);
    }

    else
    {
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v35)(v10, v4);
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

  int64_t v6 = v7;
LABEL_47:
  sub_100015830(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

            sub_10002FF3C(v0[9], v13, v14, v0[7]);
            goto LABEL_22;
          }
        }
      }

      __break(1u);
      goto LABEL_22;
    }

    __break(1u);
    goto LABEL_21;
  }

  if ((v33 & 1) != 0)
  {
    uint64_t v38 = sub_1000D10A0();
    __CocoaSet.element(at:)(v38);
    uint64_t v39 = sub_1000D0D90();
    sub_100022CFC();
    sub_100022CC0((uint64_t)&a9, (uint64_t)&a18, (uint64_t)&type metadata for Swift.AnyObject + 8, v39);
    sub_100030590();
LABEL_18:
    sub_1000CFDE8();
    return;
  }

LABEL_42:
  __break(1u);
}

    sub_100022470();
    if (!v30) {
      goto LABEL_97;
    }
    sub_100022470();
    if (!v30) {
      goto LABEL_97;
    }
    sub_100022470();
    if (!v30) {
      goto LABEL_97;
    }
    sub_100022620((uint64_t)v0);
    sub_100022620((uint64_t)v110);
    uint64_t v2 = v107;
    uint64_t v4 = v99;
    int64_t v16 = v100;
    uint64_t v8 = v98;
    unint64_t v10 = v97;
    unint64_t v12 = v101;
    uint64_t v11 = v96;
    unint64_t v15 = v95;
    if (v95) {
      continue;
    }
    break;
  }

    swift_bridgeObjectRetain(a1);
    sub_100049090(v48);
    int64_t v37 = 1LL;
    return (void *)sub_100005FB0(a2, v37, 1LL, v4);
  }

  uint64_t v17 = v13;
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v18 = (v51 - 1) & v51;
  uint64_t v19 = __clz(__rbit64(v51)) | (v50 << 6);
  uint64_t v46 = (unint64_t)(v49 + 64) >> 6;
  uint64_t v20 = v50;
LABEL_3:
  Swift::Int v22 = v47;
  uint64_t v21 = v48[0];
  uint64_t v23 = v47[9];
  unint64_t v24 = *(void *)(v48[0] + 56LL) + v23 * v19;
  uint64_t v25 = (void (*)(char *, unint64_t, uint64_t))v47[2];
  uint64_t v44 = v17;
  v25(v17, v24, v4);
  uint64_t v26 = (void (*)(char *, char *, uint64_t))v22[4];
  v26(v15, v44, v4);
  uint64_t result = (void *)swift_bridgeObjectRetain(v43);
  while (1)
  {
    if (v18)
    {
      uint64_t v27 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      BOOL v28 = v27 | (v20 << 6);
      goto LABEL_22;
    }

    uint64_t v29 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v29 >= v46) {
      goto LABEL_25;
    }
    char v30 = *(void *)(v45 + 8 * v29);
    uint64_t v31 = v20 + 1;
    if (!v30)
    {
      uint64_t v31 = v20 + 2;
      if (v20 + 2 >= v46) {
        goto LABEL_25;
      }
      char v30 = *(void *)(v45 + 8 * v31);
      if (!v30)
      {
        uint64_t v31 = v20 + 3;
        if (v20 + 3 >= v46) {
          goto LABEL_25;
        }
        char v30 = *(void *)(v45 + 8 * v31);
        if (!v30)
        {
          uint64_t v31 = v20 + 4;
          if (v20 + 4 >= v46) {
            goto LABEL_25;
          }
          char v30 = *(void *)(v45 + 8 * v31);
          if (!v30)
          {
            uint64_t v31 = v20 + 5;
            if (v20 + 5 >= v46) {
              goto LABEL_25;
            }
            char v30 = *(void *)(v45 + 8 * v31);
            if (!v30)
            {
              uint64_t v32 = v20 + 6;
              while (v32 < v46)
              {
                char v30 = *(void *)(v45 + 8 * v32++);
                if (v30)
                {
                  uint64_t v31 = v32 - 1;
                  goto LABEL_21;
                }
              }

  BOOL v56 = swift_bridgeObjectRetain();
  unint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v56);
  if (!v53) {
    goto LABEL_43;
  }
LABEL_31:
  if (v53 >= 1)
  {
    char v54 = 0LL;
    do
    {
      if ((v8 & 0xC000000000000001LL) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v8);
      }
      else {
        swift_retain();
      }
      ++v54;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100012590();
      swift_bridgeObjectRelease();
      swift_release();
    }

    while (v53 != v54);
LABEL_43:
    swift_release_n(v8, 2LL);
    sub_100012590();
    char v58 = v57;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000BCAE4(a4, a5, a6, v58);
    char v60 = v59;
    uint64_t v61 = _swiftEmptyArrayStorage;
    uint64_t v86 = _swiftEmptyArrayStorage;
    if (v59 >> 62) {
      goto LABEL_53;
    }
    uint64_t v62 = *(void *)((v59 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    for (; v62; uint64_t v62 = _CocoaArrayWrapper.endIndex.getter(v71))
    {
      uint64_t v83 = v60;
      uint64_t v84 = v60 & 0xC000000000000001LL;
      uint64_t v63 = 4LL;
      while (1)
      {
        uint64_t v61 = (void *)(v63 - 4);
        if (v84)
        {
          uint64_t v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(v63 - 4, v60);
        }

        else
        {
          uint64_t v64 = *(void *)(v60 + 8 * v63);
          swift_retain();
        }

        uint64_t v65 = v63 - 3;
        if (__OFADD__(v61, 1LL)) {
          break;
        }
        swift_beginAccess( v64 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  &v85,  0LL,  0LL);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_1000CAE8C();
        uint64_t v67 = v66;
        swift_bridgeObjectRetain();
        sub_1000CAE8C();
        uint64_t v69 = v68;
        swift_bridgeObjectRelease();
        sub_1000CAB64(v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        char v60 = v83;
        sub_1000CAB64(v67);
        ++v63;
        if (v65 == v62)
        {
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v70 = (uint64_t)v86;
          uint64_t v61 = _swiftEmptyArrayStorage;
          goto LABEL_58;
        }
      }

      __break(1u);
LABEL_53:
      if (v60 < 0) {
        uint64_t v71 = v60;
      }
      else {
        uint64_t v71 = v60 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_retain();
      swift_bridgeObjectRetain();
    }

    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v70 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_58:
    swift_bridgeObjectRelease();
    uint64_t v86 = v61;
    if ((unint64_t)v70 >> 62)
    {
      if (v70 < 0) {
        uint64_t v79 = v70;
      }
      else {
        uint64_t v79 = v70 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = _CocoaArrayWrapper.endIndex.getter(v79);
      swift_bridgeObjectRelease();
      if (v72)
      {
LABEL_60:
        if (v72 >= 1)
        {
          for (unint64_t i = 0LL; i != v72; ++i)
          {
            if ((v70 & 0xC000000000000001LL) != 0)
            {
              uint64_t v74 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v70);
              uint64_t v75 = v74;
            }

            else
            {
              uint64_t v75 = *(void *)(v70 + 8 * i + 32);
              uint64_t v74 = swift_retain();
            }

            if (*(_BYTE *)(v75 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) == 1)
            {
              swift_release();
            }

            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v74);
              uint64_t v76 = v86[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v76);
              uint64_t v77 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v76, v75);
              specialized ContiguousArray._endMutation()(v77);
            }
          }

          swift_bridgeObjectRelease();
          uint64_t v78 = v86;
          goto LABEL_75;
        }

        goto LABEL_77;
      }
    }

    else
    {
      uint64_t v72 = *(void *)((v70 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v72) {
        goto LABEL_60;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v78 = _swiftEmptyArrayStorage;
LABEL_75:
    sub_100011C5C((unint64_t)v78);
    return;
  }

  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
    sub_100003F60((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100013BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v43 = *(void **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v36 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    int64_t v14 = 0LL;
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v37 = a1;
    uint64_t v38 = a1 + 56;
    uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v18 = v17 & v15;
    int64_t v39 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v42 = a2 + 56;
    int64_t v36 = (char *)&v36 - v12;
    if (!v18) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v40 = (v18 - 1) & v18;
    int64_t v41 = v14;
    for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v22 << 6))
    {
      unint64_t v24 = v43;
      uint64_t v25 = v43[9];
      uint64_t v26 = (void (*)(char *, unint64_t, uint64_t))v43[2];
      v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
      ((void (*)(char *, char *, uint64_t))v24[4])(v10, v13, v4);
      uint64_t v27 = *(void *)(a2 + 40);
      sub_100021AD0(&qword_10010B250, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      uint64_t v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
      uint64_t v30 = -1LL << *(_BYTE *)(a2 + 32);
      unint64_t v31 = v29 & ~v30;
      if (((*(void *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v31) & 1) == 0) {
        break;
      }
      uint64_t v32 = ~v30;
      while (1)
      {
        v26(v7, *(void *)(a2 + 48) + v31 * v25, v4);
        sub_100021AD0( &qword_10010B258,  (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v10, v4, v33);
        uint64_t v35 = (void (*)(char *, uint64_t))v43[1];
        v35(v7, v4);
        if ((v34 & 1) != 0) {
          break;
        }
        unint64_t v31 = (v31 + 1) & v32;
        if (((*(void *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v31) & 1) == 0) {
          goto LABEL_33;
        }
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v10, v4);
      uint64_t v13 = v36;
      a1 = v37;
      unint64_t v18 = v40;
      int64_t v14 = v41;
      if (v40) {
        goto LABEL_7;
      }
LABEL_8:
      int64_t v20 = v14 + 1;
      if (__OFADD__(v14, 1LL))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        return result;
      }

      if (v20 >= v39) {
        return 1LL;
      }
      unint64_t v21 = *(void *)(v38 + 8 * v20);
      int64_t v22 = v14 + 1;
      if (!v21)
      {
        int64_t v22 = v20 + 1;
        if (v20 + 1 >= v39) {
          return 1LL;
        }
        unint64_t v21 = *(void *)(v38 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v20 + 2;
          if (v20 + 2 >= v39) {
            return 1LL;
          }
          unint64_t v21 = *(void *)(v38 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v20 + 3;
            if (v20 + 3 >= v39) {
              return 1LL;
            }
            unint64_t v21 = *(void *)(v38 + 8 * v22);
            if (!v21)
            {
              int64_t v23 = v20 + 4;
              if (v23 >= v39) {
                return 1LL;
              }
              unint64_t v21 = *(void *)(v38 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1LL)) {
                    goto LABEL_36;
                  }
                  if (v22 >= v39) {
                    return 1LL;
                  }
                  unint64_t v21 = *(void *)(v38 + 8 * v22);
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v22 = v23;
            }
          }
        }
      }

void sub_100013F44()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v102 = sub_1000229CC();
  __chkstk_darwin(v102);
  sub_100022640();
  __chkstk_darwin(v5);
  uint64_t v110 = (uint64_t *)((char *)&v95 - v6);
  sub_100022634();
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v95 - v9;
  if (v4 == v2 || *(void *)(v4 + 16) != *(void *)(v2 + 16)) {
    goto LABEL_103;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = v4 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(v4 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & *(void *)(v4 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v109 = v2 + 56;
  int64_t v100 = v16;
  uint64_t v101 = v4 + 56;
  if (!v15) {
    goto LABEL_8;
  }
  while (2)
  {
    uint64_t v95 = (v15 - 1) & v15;
    uint64_t v96 = v11;
    unint64_t v17 = __clz(__rbit64(v15)) | (v11 << 6);
LABEL_23:
    uint64_t v99 = v4;
    uint64_t v24 = *(void *)(v4 + 48);
    uint64_t v98 = v8;
    uint64_t v108 = *(void *)(v8 + 72);
    sub_1000229DC(v24 + v108 * v17, (uint64_t)v10);
    uint64_t v97 = v10;
    sub_100021AB0((uint64_t)v10, (uint64_t)v110, type metadata accessor for ModelCatalogAsset);
    Hasher.init(_seed:)(v111, *(void *)(v2 + 40));
    sub_10004EA94((uint64_t)v111);
    Swift::Int v25 = Hasher._finalize()();
    uint64_t v26 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v27 = v25 & ~v26;
    if (((*(void *)(v109 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0) {
      goto LABEL_102;
    }
    uint64_t v106 = ~v26;
    uint64_t v107 = v2;
    while (1)
    {
      sub_1000229DC(*(void *)(v2 + 48) + v27 * v108, (uint64_t)v0);
      uint64_t v28 = v0[1];
      uint64_t v29 = v110[1];
      BOOL v30 = *v0 == *v110 && v28 == v29;
      if (!v30 && (sub_100021EB8(*v0, v28, *v110, v29) & 1) == 0) {
        goto LABEL_97;
      }
      unint64_t v31 = (void *)v0[2];
      uint64_t v32 = (void *)v110[2];
      unint64_t v33 = v31[2];
      if (v33 != v32[2]) {
        goto LABEL_97;
      }
      if (v33) {
        BOOL v34 = v31 == v32;
      }
      else {
        BOOL v34 = 1;
      }
      if (!v34)
      {
        uint64_t v39 = v31[4];
        uint64_t v40 = v31[5];
        uint64_t v41 = v32[4];
        uint64_t v42 = v32[5];
        BOOL v43 = v39 == v41 && v40 == v42;
        if (!v43 && (sub_100021EB8(v39, v40, v41, v42) & 1) == 0) {
          goto LABEL_97;
        }
        if (v33 != 1)
        {
          uint64_t v44 = v31[6];
          uint64_t v45 = v31[7];
          uint64_t v46 = v32[6];
          uint64_t v47 = v32[7];
          BOOL v48 = v44 == v46 && v45 == v47;
          if (!v48 && (sub_100021EB8(v44, v45, v46, v47) & 1) == 0) {
            goto LABEL_97;
          }
          if (v33 != 2)
          {
            uint64_t v49 = v31 + 9;
            uint64_t v50 = v32 + 9;
            for (unint64_t i = 2LL; i != v33; ++i)
            {
              if (i >= v33) {
                goto LABEL_106;
              }
              uint64_t v52 = *(v49 - 1);
              uint64_t v53 = *v49;
              uint64_t v54 = *(v50 - 1);
              uint64_t v55 = *v50;
              BOOL v56 = v52 == v54 && v53 == v55;
              if (!v56 && (sub_100021EB8(v52, v53, v54, v55) & 1) == 0) {
                goto LABEL_97;
              }
              v49 += 2;
              v50 += 2;
            }
          }
        }
      }

      uint64_t v35 = v0[3];
      uint64_t v36 = v110[3];
      unint64_t v37 = *(void *)(v35 + 16);
      if (v37 != *(void *)(v36 + 16)) {
        goto LABEL_97;
      }
      if (!v37 || v35 == v36) {
        break;
      }
      uint64_t v57 = *(void *)(v35 + 32);
      uint64_t v58 = *(void *)(v35 + 40);
      uint64_t v59 = *(void *)(v35 + 48);
      uint64_t v60 = *(void *)(v35 + 56);
      int v61 = *(unsigned __int8 *)(v35 + 64);
      uint64_t v62 = *(void *)(v36 + 32);
      uint64_t v63 = *(void *)(v36 + 40);
      uint64_t v65 = *(void *)(v36 + 48);
      uint64_t v64 = *(void *)(v36 + 56);
      int v66 = *(unsigned __int8 *)(v36 + 64);
      if (v57 != v62 || v58 != v63)
      {
        int v68 = *(unsigned __int8 *)(v35 + 64);
        uint64_t v69 = *(void *)(v36 + 56);
        uint64_t v105 = *(void *)(v36 + 48);
        char v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v62, v63, 0LL);
        uint64_t v65 = v105;
        uint64_t v64 = v69;
        int v61 = v68;
        if ((v70 & 1) == 0) {
          goto LABEL_97;
        }
      }

      uint64_t v71 = 0LL;
      unint64_t v72 = 1LL;
      if (v60)
      {
LABEL_77:
        if (v64)
        {
          if (v59 != v65 || v60 != v64)
          {
            uint64_t v74 = sub_100022CB4();
            int v75 = v66;
            int v77 = v76;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v74, v78, v80, v79, 0LL) & 1) == 0
              || ((v75 ^ v77) & 1) != 0)
            {
              goto LABEL_97;
            }

            goto LABEL_87;
          }

          goto LABEL_86;
        }
      }

      else
      {
        while (!v64)
        {
LABEL_86:
          if (((v66 ^ v61) & 1) != 0) {
            break;
          }
LABEL_87:
          if (v37 == v72) {
            goto LABEL_42;
          }
          if (v72 >= v37)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }

          if (v72 >= *(void *)(v36 + 16)) {
            goto LABEL_105;
          }
          uint64_t v81 = *(void *)(v35 + v71 + 72);
          uint64_t v82 = *(void *)(v35 + v71 + 80);
          uint64_t v59 = *(void *)(v35 + v71 + 88);
          uint64_t v60 = *(void *)(v35 + v71 + 96);
          int v61 = *(unsigned __int8 *)(v35 + v71 + 104);
          uint64_t v83 = *(void *)(v36 + v71 + 72);
          uint64_t v84 = *(void *)(v36 + v71 + 80);
          uint64_t v65 = *(void *)(v36 + v71 + 88);
          uint64_t v64 = *(void *)(v36 + v71 + 96);
          int v66 = *(unsigned __int8 *)(v36 + v71 + 104);
          if (v81 != v83 || v82 != v84)
          {
            uint64_t v104 = *(void *)(v35 + v71 + 96);
            uint64_t v105 = v71;
            uint64_t v103 = v59;
            uint64_t v86 = v36;
            unint64_t v87 = v37;
            uint64_t v88 = v0;
            uint64_t v89 = v35;
            int v90 = v66;
            int v91 = v61;
            uint64_t v92 = v64;
            uint64_t v93 = v65;
            char v94 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, v83, v84, 0LL);
            uint64_t v65 = v93;
            uint64_t v64 = v92;
            int v61 = v91;
            int v66 = v90;
            uint64_t v35 = v89;
            uint64_t v0 = v88;
            unint64_t v37 = v87;
            uint64_t v36 = v86;
            uint64_t v59 = v103;
            uint64_t v60 = v104;
            uint64_t v71 = v105;
            if ((v94 & 1) == 0) {
              break;
            }
          }

          v71 += 40LL;
          ++v72;
          if (v60) {
            goto LABEL_77;
          }
        }
      }

LABEL_97:
      sub_100022620((uint64_t)v0);
      uint64_t v2 = v107;
      unint64_t v27 = (v27 + 1) & v106;
      if (((*(void *)(v109 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0)
      {
LABEL_102:
        sub_100021A90((uint64_t)v110, type metadata accessor for ModelCatalogAsset);
LABEL_103:
        sub_100007448();
        return;
      }
    }

LABEL_8:
  int64_t v18 = v11 + 1;
  if (__OFADD__(v11, 1LL)) {
    goto LABEL_107;
  }
  if (v18 >= v16) {
    goto LABEL_103;
  }
  if (*(void *)(v12 + 8 * v18)) {
    goto LABEL_22;
  }
  if (v11 + 2 >= v16) {
    goto LABEL_103;
  }
  if (*(void *)(v12 + 8 * (v11 + 2))) {
    goto LABEL_22;
  }
  if (v11 + 3 >= v16) {
    goto LABEL_103;
  }
  if (*(void *)(v12 + 8 * (v11 + 3))) {
    goto LABEL_22;
  }
  if (v11 + 4 >= v16) {
    goto LABEL_103;
  }
  if (*(void *)(v12 + 8 * (v11 + 4))) {
    goto LABEL_22;
  }
  uint64_t v19 = v11 + 5;
  if (v11 + 5 >= v16) {
    goto LABEL_103;
  }
  if (*(void *)(v12 + 8 * v19))
  {
LABEL_22:
    sub_100022A34();
    uint64_t v95 = v21;
    uint64_t v96 = v22;
    unint64_t v17 = v23 + (v22 << 6);
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v20 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v20 >= v16) {
      goto LABEL_103;
    }
    ++v19;
    if (*(void *)(v12 + 8 * v20)) {
      goto LABEL_22;
    }
  }

  unint64_t v17 = *(int *)(a3 + 20);
  int64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int64_t v20 = *(void *)((char *)a2 + v17 + 24);
  if (!*(void *)((char *)a1 + v17 + 24))
  {
    if (v20)
    {
      *((void *)v18 + 3) = v20;
      *((void *)v18 + 4) = *((void *)v19 + 4);
      (**(void (***)(char *, char *))(v20 - 8))(v18, v19);
      goto LABEL_15;
    }

  int64_t v16 = *(int *)(a3 + 20);
  unint64_t v17 = (char *)a1 + v16;
  int64_t v18 = *(_OWORD *)((char *)a2 + v16 + 16);
  *(_OWORD *)unint64_t v17 = *(_OWORD *)((char *)a2 + v16);
  *((_OWORD *)v17 + sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v18;
  *((void *)v17 + 4) = *(void *)((char *)a2 + v16 + 32);
  uint64_t v19 = *(int *)(a3 + 24);
  int64_t v20 = *(void *)((char *)a1 + v19);
  *(void *)((char *)a1 + vsub_100006F7C(v0 + 19) = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

    swift_endAccess();
    return v56;
  }

  sub_10000C1F0();
  sub_100021DDC();
  sub_1000308D8();
  unint64_t v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  int64_t v18 = sub_10002FFE4(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, (uint64_t)v54);
  uint64_t v19 = *v17;
  int64_t v20 = v17[1];
  uint64_t v21 = v17[2];
  __chkstk_darwin(v18);
  v48[-4] = v19;
  v48[-3] = v20;
  v48[-2] = a1;
  sub_10000C030();
  sub_1000837AC();
  sub_1000224B4();
  uint64_t v22 = sub_1000D05AC((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CFC50);
  if ((v23 & 1) == 0)
  {
    BOOL v56 = sub_1000CC44C((unint64_t)v22, v21);
    sub_100021DDC();
    sub_1000308D8();
    uint64_t v24 = sub_100021E70();
    Swift::Int v25 = sub_1000D0DD8(v24, (uint64_t)v53);
    uint64_t v26 = *v17;
    unint64_t v27 = v17[1];
    __chkstk_darwin(v25);
    v48[-4] = v26;
    v48[-3] = v27;
    v48[-2] = a1;
    sub_100084314();
    sub_1000837AC();
    sub_1000D05AC((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1000CFC50);
    uint64_t v29 = v28;
    sub_1000308D8();
    sub_10000C1F0();
    if ((v29 & 1) == 0)
    {
      sub_1000D085C();
      sub_1000D0D40();
      sub_1000D1134();
      swift_release();
    }

    goto LABEL_8;
  }

  sub_100021DDC();
  sub_1000308D8();
  sub_100021E70();
  if (qword_10010B1F0 != -1) {
    swift_once(&qword_10010B1F0, sub_1000BD7F0);
  }
  unint64_t v31 = sub_10000BF6C();
  uint64_t v32 = sub_100003BA0(v31, (uint64_t)qword_10010F3D8);
  unint64_t v33 = v32;
  BOOL v34 = (os_log_s *)Logger.logObject.getter(v32);
  uint64_t v35 = static os_log_type_t.fault.getter();
  if (sub_10003D070(v35))
  {
    uint64_t v36 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v33,  "findGroupInPendingAndRemove couldn't find pending group with assets",  v36,  2u);
    sub_10000BCC4((uint64_t)v36);
  }

  unint64_t v37 = type metadata accessor for ModelManagerError(0LL);
  sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  swift_allocError(v37, v38, 0LL, 0LL);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104LL))( v39,  enum case for ModelManagerError.internalError(_:),  v37);
  return swift_willThrow(v40, v41, v42, v43, v44, v45, v46, v47);
}

LABEL_108:
  __break(1u);
}

uint64_t sub_1000144F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_100014518, a4, 0LL);
}

uint64_t sub_100014518()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10000CC90();
  sub_100021AD0(&qword_10010B6B0, type metadata accessor for PolicyManager);
  sub_100021D08((uint64_t)sub_100015824, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v3, (uint64_t)sub_1000145C8);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v5 = sub_100021BA0();
    uint64_t v6 = (void *)sub_100021E64(v5);
    uint64_t v7 = sub_100021C30(v6);
    return sub_100021C48(v7, v8);
  }

uint64_t sub_1000145C8()
{
  return sub_10000BD98();
}

uint64_t sub_100014608()
{
  uint64_t v0 = sub_100021BA0();
  uint64_t v1 = (void *)sub_100021E64(v0);
  uint64_t v2 = sub_100021C30(v1);
  return sub_100021CB8(v2, v3);
}

uint64_t sub_10001463C()
{
  uint64_t v1 = swift_task_alloc(dword_10010B6DC);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_100021BE8();
  sub_100021F54();
  return sub_1000144F8(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001468C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_1000146AC, a4, 0LL);
}

uint64_t sub_1000146AC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for TrialManager();
  sub_100021AD0(&qword_10010B868, (uint64_t (*)(uint64_t))type metadata accessor for TrialManager);
  sub_100021D08((uint64_t)sub_100015824, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v3, (uint64_t)sub_100014760);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v5 = sub_100021BA0();
    uint64_t v6 = (void *)sub_100021E64(v5);
    uint64_t v7 = sub_100021C30(v6);
    return sub_100021C48(v7, v8);
  }

uint64_t sub_100014760()
{
  return sub_10000BD98();
}

uint64_t sub_1000147A0()
{
  uint64_t v0 = sub_100021BA0();
  uint64_t v1 = (void *)sub_100021E64(v0);
  uint64_t v2 = sub_100021C30(v1);
  return sub_100021CB8(v2, v3);
}

uint64_t sub_1000147D0()
{
  return sub_100007418(v0[1]);
}

uint64_t sub_100014804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a3;
  uint64_t v6[3] = a4;
  return swift_task_switch(sub_100014820, a3, 0LL);
}

uint64_t sub_100014820()
{
  uint64_t v1 = v0[3];
  sub_10002256C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  sub_100021D08((uint64_t)sub_100015824, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[6] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000148E4;
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v5 = (void *)sub_100021BB8(v0[4]);
    v0[7] = v5;
    uint64_t v6 = sub_100022B90(v5);
    return sub_100021C48(v6, v7);
  }

uint64_t sub_1000148E4()
{
  return sub_10000BD98();
}

uint64_t sub_10001491C()
{
  uint64_t v1 = (void *)sub_100021EFC(*(void *)(v0 + 32));
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_100022B90(v1);
  return sub_100021C48(v2, v4);
}

uint64_t sub_100014960()
{
  return sub_10000BD98();
}

uint64_t sub_1000149A0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1000149AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_1000149CC, a4, 0LL);
}

uint64_t sub_1000149CC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1000229D4();
  sub_100021AD0(&qword_10010B9E0, type metadata accessor for InferenceProviderExtensionConnection);
  sub_100021D08((uint64_t)sub_100015824, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v3, (uint64_t)sub_1000145C8);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v5 = sub_100021BA0();
    uint64_t v6 = (void *)sub_100021E64(v5);
    uint64_t v7 = sub_100021C30(v6);
    return sub_100021C48(v7, v8);
  }

uint64_t sub_100014A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_100014A9C, a4, 0LL);
}

uint64_t sub_100014A9C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10002256C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  sub_100021D08((uint64_t)sub_100015824, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v3, (uint64_t)sub_1000145C8);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v5 = sub_100021BA0();
    uint64_t v6 = (void *)sub_100021E64(v5);
    uint64_t v7 = sub_100021C30(v6);
    return sub_100021C48(v7, v8);
  }

uint64_t sub_100014B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_100014B6C, a4, 0LL);
}

uint64_t sub_100014B6C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for RunningBoardProvider(0LL);
  sub_100021AD0(&qword_10010B898, type metadata accessor for RunningBoardProvider);
  sub_100021D08((uint64_t)sub_100015824, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v3, (uint64_t)sub_1000145C8);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v5 = sub_100021BA0();
    uint64_t v6 = (void *)sub_100021E64(v5);
    uint64_t v7 = sub_100021C30(v6);
    return sub_100021C48(v7, v8);
  }

uint64_t sub_100014C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100014C38, a4, 0LL);
}

uint64_t sub_100014C38()
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 32) = v2;
  sub_1000227EC(v2, (uint64_t)sub_100014CC4);
  sub_1000229C0();
  return sub_100021C9C();
}

uint64_t sub_100014CC4()
{
  return sub_10000BD98();
}

uint64_t sub_100014D08()
{
  uint64_t v0 = swift_task_alloc(dword_10010B6EC);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_100014C20(v2, v3, v4, v5, v6);
}

uint64_t sub_100014D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100014D6C, a4, 0LL);
}

uint64_t sub_100014D6C()
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 32) = v2;
  sub_1000227EC(v2, (uint64_t)sub_100014DFC);
  sub_1000229C0();
  return sub_100021C9C();
}

uint64_t sub_100014DFC()
{
  return sub_10000BD98();
}

uint64_t sub_100014E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100014E54, a4, 0LL);
}

uint64_t sub_100014E54()
{
  uint64_t v1 = sub_10002256C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  Actor.assertIsolated(_:file:line:)(sub_100015824, 0LL, "modelmanagerd/WorkQueue.swift", 29LL, 2LL, 44LL, v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100014DFC;
  return sub_100021C0C();
}

uint64_t sub_100014F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100014F1C, a4, 0LL);
}

uint64_t sub_100014F1C()
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 32) = v2;
  sub_1000227EC(v2, (uint64_t)sub_100014CC4);
  sub_1000229C0();
  return sub_100021C9C();
}

uint64_t sub_100014FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100014FC0, a4, 0LL);
}

uint64_t sub_100014FC0()
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 32) = v2;
  sub_1000227EC(v2, (uint64_t)sub_100014CC4);
  sub_1000229C0();
  return sub_100021C9C();
}

uint64_t sub_10001504C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100015064, a4, 0LL);
}

uint64_t sub_100015064()
{
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 32) = v2;
  sub_1000227EC(v2, (uint64_t)sub_100014CC4);
  sub_1000229C0();
  return sub_100021C9C();
}

uint64_t sub_1000150F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_100015114, a4, 0LL);
}

uint64_t sub_100015114()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10000CC90();
  sub_100021AD0(&qword_10010B6B0, type metadata accessor for PolicyManager);
  sub_100021E78((uint64_t)sub_100015824, 0LL, (uint64_t)"modelmanagerd/WorkQueue.swift", 29LL, 2LL, 56LL);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v2, (uint64_t)sub_100014760);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v4 = sub_100021BA0();
    uint64_t v5 = (void *)sub_100021E64(v4);
    uint64_t v6 = sub_100021C30(v5);
    return sub_100021C48(v6, v7);
  }

uint64_t sub_1000151D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  uint64_t v6[3] = a3;
  v6[4] = a4;
  return swift_task_switch(sub_1000151F0, a3, 0LL);
}

uint64_t sub_1000151F0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10002256C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  sub_100021E78((uint64_t)sub_100015824, 0LL, (uint64_t)"modelmanagerd/WorkQueue.swift", 29LL, 2LL, 56LL);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v2, (uint64_t)sub_1000152B8);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v4 = sub_100021BA0();
    uint64_t v5 = (void *)sub_100021E64(v4);
    uint64_t v6 = sub_100022B7C(v5);
    return sub_100021C48(v6, v7);
  }

uint64_t sub_1000152B8()
{
  return sub_10000BD98();
}

uint64_t sub_1000152F8()
{
  uint64_t v1 = sub_100021EFC(*(void *)(v0 + 40));
  uint64_t v2 = (void *)sub_100021E64(v1);
  uint64_t v3 = sub_100022B7C(v2);
  return sub_100021C48(v3, v5);
}

uint64_t sub_100015338()
{
  *(void *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_100015388()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100015394()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000153A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_1000153C0, a4, 0LL);
}

uint64_t sub_1000153C0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1000229D4();
  sub_100021AD0(&qword_10010B9E0, type metadata accessor for InferenceProviderExtensionConnection);
  sub_100021E78((uint64_t)sub_100015824, 0LL, (uint64_t)"modelmanagerd/WorkQueue.swift", 29LL, 2LL, 56LL);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_1000222CC(v2, (uint64_t)sub_1000145C8);
    sub_100021E80();
    return sub_100021C0C();
  }

  else
  {
    uint64_t v4 = sub_100021BA0();
    uint64_t v5 = (void *)sub_100021E64(v4);
    uint64_t v6 = sub_100021C30(v5);
    return sub_100021C48(v6, v7);
  }

uint64_t sub_100015480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100015498, a4, 0LL);
}

uint64_t sub_100015498()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(void *)(v0 + 32) = v1;
  sub_100003B20(&qword_10010B468);
  *uint64_t v1 = v0;
  v1[1] = sub_100015558;
  return sub_100021F10();
}

uint64_t sub_100015558()
{
  uint64_t v3 = *v1;
  sub_10000BE20(*(void *)(v3 + 32), &v3);
  if (v0) {
    sub_100022D04();
  }
  sub_10000C0D4();
  return sub_10000BCD0();
}

uint64_t sub_1000155B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return swift_task_switch(sub_1000155C8, a4, 0LL);
}

uint64_t sub_1000155C8()
{
  uint64_t v1 = sub_10002256C();
  sub_100021AD0(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager);
  Actor.assertIsolated(_:file:line:)(sub_100015824, 0LL, "modelmanagerd/WorkQueue.swift", 29LL, 2LL, 62LL, v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = v2;
  uint64_t v3 = sub_100003B20(&qword_10010B938);
  uint64_t v4 = sub_100003B20(&qword_10010B468);
  *uint64_t v2 = v0;
  v2[1] = sub_1000156A8;
  return Task.value.getter(v0 + 16, *(void *)(v0 + 32), v3, v4, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000156A8()
{
  if (v1) {
    sub_100022D04();
  }
  sub_10000C0D4();
  return sub_10000BCD0();
}

uint64_t sub_1000156F8()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100015720()
{
  *(void *)(v0 + 16) = 0LL;
  swift_bridgeObjectRelease(0LL);
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001574C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_100015764, a4, 0LL);
}

uint64_t sub_100015764()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(void *)(v0 + 32) = v1;
  sub_100003B20(&qword_10010B468);
  *uint64_t v1 = v0;
  v1[1] = sub_100015558;
  return sub_100021F10();
}

uint64_t sub_100015824()
{
  return 0LL;
}

char *sub_100015830(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    uint64_t result = (char *)sub_100021C6C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100021D5C(a3, result);
  }

  return result;
}

void sub_10001588C(uint64_t a1, uint64_t a2)
{
}

char *sub_100015898(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    uint64_t result = (char *)sub_100021C6C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100021D5C(a3, result);
  }

  return result;
}

void sub_1000158F4(uint64_t a1, uint64_t a2)
{
}

void sub_100015900(uint64_t a1, uint64_t a2)
{
}

char *sub_10001590C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    uint64_t result = (char *)sub_100021C6C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100021D5C(a3, result);
  }

  return result;
}

char *sub_100015964(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    sub_100021BD4();
    __src = (char *)sub_100021C6C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

void sub_1000159C8(uint64_t a1, uint64_t a2)
{
}

void sub_1000159D4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_100021C6C( (uint64_t)"Fatal error",  v6,  v7,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v8,  v9,  (uint64_t)"Swift/UnsafePointer.swift",  v10,  v11,  v12,  v13);
    __break(1u);
  }

  else
  {
    sub_100022918();
    if (v4 && (sub_100022410(), sub_100022D9C(), !v5 & v4))
    {
      if (v3 == v2)
      {
        sub_1000223A4();
      }

      else
      {
        sub_100022070();
        sub_1000223B4();
      }
    }

    else
    {
      sub_100022410();
      sub_100022070();
      sub_100022394();
    }
  }

char *sub_100015A54(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    uint64_t result = (char *)sub_100021C6C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100021D5C(a3, result);
  }

  return result;
}

void sub_100015AB4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_100021C6C( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v9,  v10,  (uint64_t)"Swift/UnsafePointer.swift",  v11,  v12,  v13,  v14);
    __break(1u);
  }

  else
  {
    sub_100022918();
    if (v5 && (v4(0LL), sub_100022D9C(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_1000223A4();
      }

      else
      {
        sub_100022070();
        sub_1000223B4();
      }
    }

    else
    {
      v4(0LL);
      sub_100022070();
      sub_100022394();
    }
  }

uint64_t sub_100015B3C(uint64_t a1, uint64_t a2)
{
  return sub_100015DD0(a1, a2);
}

uint64_t sub_100015B48(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_10002204C();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return sub_100022588();
    }
    sub_100021BD4();
    sub_10002203C();
  }

  uint64_t result = sub_100021CFC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100015BE0(uint64_t a1, uint64_t a2)
{
  return sub_100015DD0(a1, a2);
}

uint64_t sub_100015BEC(uint64_t a1, uint64_t a2)
{
  return sub_100015E68(a1, a2);
}

uint64_t sub_100015BF8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_10002204C();
  }

  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3) {
      return sub_100022588();
    }
    sub_100021BD4();
    sub_10002203C();
  }

  uint64_t result = sub_100021CFC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100015C94(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_10002204C();
  }

  else
  {
    sub_100022460();
    sub_100003B20(v3);
    sub_100022678();
    if (!v6 && v5)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5)
    {
      sub_10002205C();
      return sub_100021E10();
    }

    sub_100021BD4();
    sub_10002203C();
  }

  uint64_t result = sub_100021CFC(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100015D24(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_10002204C();
  }

  else
  {
    sub_100022460();
    unint64_t v5 = v3 + 40 * v4;
    if (v2 + 40 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_100003B20(&qword_10010BB28);
      sub_10002205C();
      return sub_100021E10();
    }

    sub_100021BD4();
    sub_10002203C();
  }

  uint64_t result = sub_100021CFC(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_100015DC4(uint64_t a1, uint64_t a2)
{
  return sub_100015DD0(a1, a2);
}

uint64_t sub_100015DD0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_10002204C();
  }

  else
  {
    sub_100022460();
    if (v4 + 8 * v3 <= v2 || v2 + 8 * v3 <= v4)
    {
      v5(0LL);
      sub_10002205C();
      return sub_100021E10();
    }

    sub_100021BD4();
    sub_10002203C();
  }

  uint64_t result = sub_100021CFC(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100015E68(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100021BD4();
    sub_10002204C();
  }

  else
  {
    sub_100022460();
    v3(0LL);
    sub_100022678();
    if (!v6 & v5) {
      BOOL v7 = v4 > v2;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7)
    {
      sub_10002205C();
      return sub_100021E10();
    }

    sub_100021BD4();
    sub_10002203C();
  }

  uint64_t result = sub_100021CFC(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

void sub_100015EF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6 = sub_100015FB0(v10, 0LL, 0LL, 1, v4, v3);
  if (v6)
  {
    BOOL v7 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v10[0] = v7;
    uint64_t v8 = *a3;
    if (*a3)
    {
      sub_100020E28((uint64_t)v10, *a3);
      *a3 = v8 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v10[0] = v4;
    v10[1] = v3;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100020E28((uint64_t)v10, *a3);
      *a3 = v9 + 32;
    }

    sub_1000225A4();
  }

  sub_100006F7C(v10);
  sub_10002260C();
}

void *sub_100015FB0(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100016104((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_1000161C8(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100016104(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_1000161C8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_10001625C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    unint64_t v2 = sub_100016430(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100016430((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10001625C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  char v5 = sub_1000163CC(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  char v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

void *sub_1000163CC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100003B20(&qword_10010B700);
  char v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_100016430(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003B20(&qword_10010B700);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100015964(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_100016504(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100016504(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

unint64_t sub_1000165C8()
{
  Swift::Int v4 = sub_100022308();
  return sub_100016780(v2, v1, v4);
}

unint64_t sub_100016620(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = sub_100022308();
  return sub_100016860(a1, v4);
}

unint64_t sub_100016670()
{
  return sub_10001668C();
}

unint64_t sub_10001668C()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_1000224D0(v4, v2);
  sub_1000071C0(v1, v3);
  uint64_t v5 = sub_100022C44();
  dispatch thunk of Hashable._rawHashValue(seed:)(v5, v6, v7);
  return sub_100016970();
}

unint64_t sub_100016714(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  sub_100021AD0(&qword_10010B7F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100016A90(a1, v7);
}

unint64_t sub_100016780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100016860(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    type metadata accessor for DaemonRequest(0LL);
    uint64_t v6 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    swift_retain(v6);
    char v7 = sub_1000D3B1C();
    swift_release(v6);
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v2 + 48) + 8 * i);
        swift_retain(v9);
        char v10 = sub_1000D3B1C();
        swift_release(v9);
        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_100016970()
{
  uint64_t v26 = v2;
  uint64_t v27 = v3;
  uint64_t v24 = v4;
  Swift::Int v25 = v5;
  uint64_t v6 = v0;
  uint64_t v8 = v7;
  uint64_t v23 = v9;
  uint64_t v10 = sub_1000228CC(v9, v7, v4);
  sub_1000224A4();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000223F8();
  unint64_t v15 = v8 & ~v14;
  if (((*(void *)(v6 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
  {
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v1 + 72);
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    do
    {
      v18(v13, *(void *)(v6 + 48) + v17 * v15, v10);
      sub_1000071C0(v25, v24);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v23, v10, v19);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v13, v10);
      if ((v20 & 1) != 0) {
        break;
      }
      unint64_t v15 = (v15 + 1) & v16;
    }

    while (((*(void *)(v6 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0);
  }

  return v15;
}

unint64_t sub_100016A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_100021AD0(&qword_10010B7F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

void sub_100016BD0(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_100016BEC()
{
  void *v0 = v1;
}

void sub_100016C18()
{
  void *v0 = v1;
}

char *sub_100016C44(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016F0C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100016C60()
{
  void *v0 = v1;
}

void sub_100016C8C()
{
  void *v0 = v1;
}

void sub_100016CB8()
{
  void *v0 = v1;
}

void sub_100016CE4()
{
  void *v0 = v1;
}

void sub_100016D10()
{
  void *v0 = v1;
}

void sub_100016D3C()
{
  void *v0 = v1;
}

void sub_100016D68()
{
  void *v0 = v1;
}

void sub_100016D94()
{
  void *v0 = v1;
}

void sub_100016DC0()
{
  void *v0 = v1;
}

void sub_100016DEC()
{
  void *v0 = v1;
}

void sub_100016E18()
{
  void *v0 = v1;
}

void sub_100016E44(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10002284C();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      sub_100022834();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_100003B20(&qword_10010B718);
    uint64_t v12 = (char *)sub_100007460(v11, 16 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 16);
  }

  else
  {
    uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  char v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_100015830(v15, v9, v14);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_100015B48((unint64_t)v15, v9, (unint64_t)v14);
  }

  sub_100021DDC();
}

char *sub_100016F0C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003B20(&qword_10010B810);
    uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100015898(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_100015BF8((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

void sub_100016FF4()
{
  uint64_t v8 = v7;
  uint64_t v9 = v5;
  char v10 = v2;
  if ((v4 & 1) != 0)
  {
    sub_10002284C();
    if (v12 != v13)
    {
      if (v11 + 0x4000000000000000LL < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }

      sub_100022834();
    }
  }

  else
  {
    uint64_t v11 = v3;
  }

  uint64_t v14 = *(void *)(v9 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15) {
    goto LABEL_17;
  }
  sub_100022BA4(v2, v3, v4, v5, v6);
  uint64_t v16 = v8(0LL);
  uint64_t v17 = (void *)sub_10002211C(v16);
  size_t v18 = j__malloc_size(v17);
  if (!v0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v18 - v1 == 0x8000000000000000LL && v0 == -1) {
    goto LABEL_22;
  }
  v17[2] = v14;
  void v17[3] = 2 * ((uint64_t)(v18 - v1) / v0);
LABEL_17:
  uint64_t v20 = v8(0LL);
  uint64_t v21 = sub_100022420(v20);
  if ((v10 & 1) != 0)
  {
    sub_100015AB4(v21, v22);
    *(void *)(v9 + 16) = 0LL;
  }

  else
  {
    sub_100015E68(v21, v22);
  }

  sub_100021DDC();
  sub_100022108();
}

void sub_1000170D0()
{
}

void sub_1000170E4()
{
  uint64_t v8 = v7;
  uint64_t v9 = v5;
  char v10 = v2;
  if ((v4 & 1) != 0)
  {
    sub_10002284C();
    if (v12 != v13)
    {
      if (v11 + 0x4000000000000000LL < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }

      sub_100022834();
    }
  }

  else
  {
    uint64_t v11 = v3;
  }

  uint64_t v14 = *(void *)(v9 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15) {
    goto LABEL_17;
  }
  sub_100022BA4(v2, v3, v4, v5, v6);
  uint64_t v16 = sub_100003B20(v8);
  uint64_t v17 = (void *)sub_10002211C(v16);
  size_t v18 = j__malloc_size(v17);
  if (!v0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v18 - v1 == 0x8000000000000000LL && v0 == -1) {
    goto LABEL_22;
  }
  v17[2] = v14;
  void v17[3] = 2 * ((uint64_t)(v18 - v1) / v0);
LABEL_17:
  uint64_t v20 = sub_100003B20(v8);
  uint64_t v21 = sub_100022420(v20);
  if ((v10 & 1) != 0)
  {
    sub_1000159D4(v21, v22);
    *(void *)(v9 + 16) = 0LL;
  }

  else
  {
    sub_100015C94(v21, v22);
  }

  sub_100021DDC();
  sub_100022108();
}

Swift::Int sub_1000171C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = type metadata accessor for Policy(0LL);
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100003B20(&qword_10010B850);
  int v44 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_40;
  }
  uint64_t v41 = v3;
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  BOOL v43 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  Swift::Int result = swift_retain(v8);
  int64_t v17 = 0LL;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(v8 + 56);
    uint64_t v24 = v8;
    Swift::Int v25 = (uint64_t *)(*(void *)(v8 + 48) + 16 * i);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v6 + 72);
    uint64_t v29 = v23 + v28 * i;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v29, v46);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v29, v46);
      swift_bridgeObjectRetain(v26);
    }

    Hasher.init(_seed:)(v47, *(void *)(v10 + 40));
    String.hash(into:)(v47, v27, v26);
    Swift::Int result = Hasher._finalize()();
    uint64_t v30 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) == 0)
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v30) >> 6;
      while (++v32 != v35 || (v34 & 1) == 0)
      {
        BOOL v36 = v32 == v35;
        if (v32 == v35) {
          unint64_t v32 = 0LL;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v32);
        if (v37 != -1)
        {
          unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    unint64_t v33 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v15 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v33;
    uint64_t v38 = (void *)(*(void *)(v10 + 48) + 16 * v33);
    *uint64_t v38 = v27;
    v38[1] = v26;
    Swift::Int result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v10 + 56) + v28 * v33,  v45,  v46);
    ++*(void *)(v10 + 16);
    uint64_t v8 = v24;
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      goto LABEL_42;
    }
    if (v20 >= v42) {
      goto LABEL_35;
    }
    unint64_t v21 = v43[v20];
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v42) {
        goto LABEL_35;
      }
      unint64_t v21 = v43[v17];
      if (!v21) {
        break;
      }
    }

LABEL_40:
  Swift::Int result = swift_release(v8);
  *uint64_t v3 = v10;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v1 = (unint64_t)v169;
    uint64_t v65 = v169[35];
    sub_1000212AC(v37);
    int v66 = (uint64_t *)(v65 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
    Swift::Int result = sub_10002FFE4((uint64_t)v66, v148);
    int v68 = v66[2];
    v153 = *(void *)(v68 + 16);
    if (!v153) {
      break;
    }
    char v70 = v66;
    uint64_t v69 = *v66;
    uint64_t v0 = (void *)v70[1];
    __int128 v149 = v169[44];
    __int128 v150 = v169[47];
    v147 = *(int *)(v149 + 48);
    uint64_t v71 = sub_10000BE28();
    unint64_t v72 = *(void *)(v71 - 8);
    sub_100022C2C();
    v152 = (char *)v0 + v73;
    v146 = v68 + 32;
    sub_1000224B4();
    uint64_t v141 = v69;
    sub_10000C030();
    v157 = v0;
    sub_100084314();
    uint64_t v74 = 0LL;
    v144 = v71;
    v145 = v68;
    v163 = v72;
    while (v74 < v157[2])
    {
      int v75 = *(void (**)(void *, char *, uint64_t))(v72 + 16);
      v75(*(void **)(v1 + 344), &v152[*(void *)(v72 + 72) * v74], v71);
      if (v74 >= *(void *)(v68 + 16)) {
        goto LABEL_97;
      }
      int v77 = *(void *)(v1 + 368);
      int v76 = *(void *)(v1 + 376);
      uint64_t v0 = *(void **)(v1 + 360);
      uint64_t v78 = *(void *)(v1 + 336);
      v160 = v74;
      uint64_t v79 = *(void *)(v146 + 8 * v74);
      sub_1000D1050(v78, *(void *)(v1 + 344));
      sub_1000D1050(v76, v78);
      *(void *)(v150 + v147) = v79;
      uint64_t v80 = *(int *)(v149 + 48);
      sub_1000D1050(v77, v76);
      *(void *)(v77 + v8sub_100016BD0(0, v0, 0) = v79;
      uint64_t v81 = *(int *)(v149 + 48);
      v75(v0, (char *)v77, v71);
      *(void *)((char *)v0 + v8sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v79;
      uint64_t v82 = v79 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
      sub_10002FFE4( v79 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState,  v154);
      uint64_t v83 = *(void *)(v82 + 32);
      sub_1000224B4();
      swift_bridgeObjectRetain(v83);
      sub_100083500();
      sub_10000C030();
      sub_100021D80();
      sub_10000C0F0();
      sub_1000CAE8C();
      uint64_t v85 = v84;
      sub_100083500();
      sub_1000CAE8C();
      uint64_t v1 = v86;
      sub_100022D34();
      v171 = v85;
      sub_1000CAB64(v1);
      sub_10000BF84();
      sub_1000228B4();
      sub_100021DDC();
      swift_bridgeObjectRelease(v83);
      sub_100022D34();
      unint64_t v87 = v171;
      sub_1000304C4((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v163 + 8));
      if ((unint64_t)v87 >> 62)
      {
        if (v87 < 0) {
          uint64_t v102 = v87;
        }
        else {
          uint64_t v102 = v87 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_100083500();
        uint64_t v88 = _CocoaArrayWrapper.endIndex.getter(v102);
        sub_100022D34();
        if (!v88) {
          goto LABEL_55;
        }
      }

      else
      {
        uint64_t v88 = *(void *)((v87 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v88) {
          goto LABEL_55;
        }
      }

      if (v88 < 1) {
        goto LABEL_98;
      }
      for (unint64_t i = 0LL; i != v88; ++i)
      {
        if ((v87 & 0xC000000000000001LL) != 0)
        {
          int v90 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v87);
        }

        else
        {
          int v90 = *(void *)(v87 + 8 * i + 32);
          sub_10000C030();
        }

        sub_100022218( v169[50],  v168 + *(int *)(v167 + 20),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
        int v91 = sub_1000D370C();
        sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
        if ((v91 & 1) != 0)
        {
          sub_100017AD0(&v171, v90);
          uint64_t v92 = v171;
        }

        else
        {
          uint64_t v92 = v90;
        }

        swift_release(v92);
      }

uint64_t sub_100017524(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t sub_100017540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Policy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a4, v8);
  swift_bridgeObjectRetain(a3);
  return a2;
}

uint64_t sub_1000175A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(sub_100003B20(&qword_10010B830) + 48);
  uint64_t v5 = sub_100003B20(&qword_10010B838);
  uint64_t result = sub_100017540((uint64_t)a2 + *(int *)(v5 + 48), *a1, a1[1], v4);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t sub_100017600( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v64 = a8;
  uint64_t v65 = a6;
  uint64_t v62 = a7;
  uint64_t v70 = a5;
  uint64_t v67 = type metadata accessor for Policy(0LL);
  sub_1000226EC();
  __chkstk_darwin(v15);
  sub_10000C110();
  uint64_t v18 = v16 - v17;
  __chkstk_darwin(v19);
  sub_1000227A8();
  __chkstk_darwin(v20);
  int64_t v22 = (char *)v60 - v21;
  sub_100003B20(&qword_10010B840);
  sub_10000C240();
  __chkstk_darwin(v23);
  sub_100021FA4();
  sub_1000209B4(a1, a2, a3, v75);
  uint64_t v61 = a1;
  swift_bridgeObjectRetain(a1);
  v60[1] = a3;
  sub_10000C0A0();
  sub_1000209F0((uint64_t)v10);
  uint64_t v24 = sub_100003B20(&qword_10010B838);
  if (sub_1000060B4((uint64_t)v10, 1LL, v24) == 1)
  {
LABEL_2:
    sub_100022B04();
    swift_bridgeObjectRelease(v61);
    sub_1000227DC();
    uint64_t v25 = v76;
    sub_1000222FC();
    return swift_release(v25);
  }

  uint64_t v69 = *(void *)(v9 + 32);
  int v66 = v10;
  uint64_t v63 = v8;
  while (1)
  {
    uint64_t v27 = v18;
    uint64_t v28 = v9;
    uint64_t v29 = (uint64_t)v10 + *(int *)(v24 + 48);
    uint64_t v31 = *v10;
    uint64_t v30 = v10[1];
    uint64_t v73 = *v10;
    uint64_t v74 = v30;
    uint64_t v32 = (uint64_t)v22;
    sub_100022C58((uint64_t)v22, v29);
    unint64_t v33 = *(void **)v70;
    unint64_t v35 = sub_100022C14();
    uint64_t v36 = v33[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      sub_1000222FC();
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_22;
    }

    char v39 = v34;
    if (v33[3] >= v38)
    {
      if ((a4 & 1) == 0)
      {
        sub_100003B20(&qword_10010B848);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_1000171C0(v38, a4 & 1);
      unint64_t v40 = sub_100022C14();
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_21;
      }
      unint64_t v35 = v40;
    }

    int64_t v42 = *(void **)v70;
    if ((v39 & 1) != 0) {
      break;
    }
    v42[(v35 >> 6) + 8] |= 1LL << v35;
    uint64_t v51 = (void *)(v42[6] + 16 * v35);
    *uint64_t v51 = v31;
    v51[1] = v30;
    uint64_t v9 = v28;
    int64_t v22 = (char *)v32;
    sub_100022C58(v42[7] + *(void *)(v28 + 72) * v35, v32);
    uint64_t v52 = v42[2];
    BOOL v53 = __OFADD__(v52, 1LL);
    uint64_t v54 = v52 + 1;
    if (v53) {
      goto LABEL_20;
    }
    v42[2] = v54;
    uint64_t v18 = v27;
LABEL_15:
    uint64_t v10 = v66;
    sub_1000209F0((uint64_t)v66);
    uint64_t v24 = sub_100003B20(&qword_10010B838);
    a4 = 1;
  }

  uint64_t v43 = v42[7];
  uint64_t v9 = v28;
  unint64_t v44 = *(void *)(v28 + 72) * v35;
  uint64_t v45 = v43 + v44;
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  uint64_t v18 = v27;
  uint64_t v47 = v67;
  v46(v27, v45, v67);
  uint64_t v48 = v63;
  int64_t v22 = (char *)v32;
  uint64_t v49 = v68;
  v64(v18, v32, v65);
  if (!v49)
  {
    uint64_t v68 = 0LL;
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v50(v18, v47);
    v50(v32, v47);
    swift_bridgeObjectRelease(v74);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))( *(void *)(*(void *)v70 + 56LL) + v44,  v48,  v47);
    goto LABEL_15;
  }

  uint64_t v55 = v18;
  BOOL v56 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v56(v55, v47);
  uint64_t v77 = v49;
  swift_errorRetain(v49);
  uint64_t v57 = sub_100003B20(&qword_10010B468);
  if ((swift_dynamicCast(v57, &v77, v57, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    sub_100022B04();
    swift_bridgeObjectRelease(v61);
    v56(v32, v47);
    swift_bridgeObjectRelease(v74);
    sub_1000227DC();
    swift_release(v76);
    swift_errorRelease(v77);
    return sub_1000222FC();
  }

uint64_t sub_100017AAC(uint64_t *a1, uint64_t a2)
{
  return sub_1000181E4( a1,  a2,  (void (*)(_BYTE *))sub_100091270,  type metadata accessor for InferenceProviderAsset,  (uint64_t (*)(uint64_t, uint64_t))sub_100091114,  (uint64_t)&qword_10010B288);
}

uint64_t sub_100017AD0(uint64_t *a1, uint64_t a2)
{
  return sub_1000181E4( a1,  a2,  (void (*)(_BYTE *))sub_1000D3C08,  type metadata accessor for DaemonRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_1000D3B1C,  (uint64_t)&unk_10010B260);
}

uint64_t sub_100017AF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1000223C4(*(void *)(*v3 + 40LL), a2);
  sub_10002289C();
  sub_100022CE8((uint64_t)v26);
  Swift::Int v8 = sub_100022308();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_100022A9C();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = sub_100022AC4(v12 + 16 * v10);
    BOOL v15 = v15 && v14 == a3;
    if (v15 || (sub_100021EB8(v13, v14, a2, a3) & 1) != 0)
    {
LABEL_7:
      sub_10000C1E8();
      sub_10000C000();
      uint64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_100022A9C();
      if ((v20 & 1) == 0) {
        break;
      }
      uint64_t v21 = sub_100022AC4(v12 + 16 * v10);
      BOOL v23 = v15 && v22 == a3;
      if (v23 || (sub_100021EB8(v21, v22, a2, a3) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  sub_10000C000();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v26[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_100022418();
  sub_10001B74C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *v3;
  *uint64_t v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100017C54(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  sub_100021AD0(&qword_10010B250, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain(v10);
  uint64_t v36 = a2;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v17 = v15 & ~v16;
  uint64_t v18 = v10;
  uint64_t v19 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    uint64_t v32 = v3;
    uint64_t v33 = a1;
    uint64_t v34 = ~v16;
    uint64_t v35 = v7;
    uint64_t v20 = *(void *)(v7 + 72);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v22 = v18;
      BOOL v23 = v21;
      v21(v9, *(void *)(v18 + 48) + v20 * v17, v6);
      sub_100021AD0(&qword_10010B258, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      uint64_t v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v34;
      uint64_t v18 = v22;
      uint64_t v21 = v23;
      if (((*(void *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v3 = v32;
        a1 = v33;
        uint64_t v27 = v35;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(void *)(*v32 + 48LL) + v20 * v17, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v27 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v29 = v36;
    v21(v9, v36, v6);
    uint64_t v37 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10001B8E4((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    *uint64_t v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1LL;
  }

void sub_100017EB0()
{
  uint64_t v4 = v0;
  sub_100022C20();
  uint64_t v50 = sub_1000229CC();
  uint64_t v5 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  sub_10000C110();
  uint64_t v8 = (uint64_t *)(v6 - v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - v10;
  sub_100022714();
  sub_1000225FC();
  sub_10004EA94((uint64_t)&v54);
  sub_100022A48();
  sub_1000223F8();
  unint64_t v14 = v13 & ~v12;
  uint64_t v53 = v3 + 56;
  uint64_t v15 = *(void *)(v3 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14;
  uint64_t v49 = v11;
  if ((v15 & 1) != 0)
  {
    uint64_t v47 = v0;
    uint64_t v48 = v2;
    uint64_t v51 = ~v12;
    uint64_t v52 = *(void *)(v5 + 72);
    uint64_t v16 = type metadata accessor for ModelCatalogAsset;
    while (1)
    {
      unint64_t v17 = v52 * v14;
      uint64_t v18 = v16;
      sub_100021A5C(*(void *)(v3 + 48) + v52 * v14, (uint64_t)v8, v16);
      uint64_t v19 = v8[1];
      uint64_t v20 = v1[1];
      BOOL v21 = *v8 == *v1 && v19 == v20;
      if (v21 || (sub_100021EB8(*v8, v19, *v1, v20) & 1) != 0)
      {
        uint64_t v22 = (void *)v8[2];
        BOOL v23 = (void *)v1[2];
        unint64_t v24 = v22[2];
        if (v24 == v23[2])
        {
          if (v24) {
            BOOL v25 = v22 == v23;
          }
          else {
            BOOL v25 = 1;
          }
          if (v25) {
            goto LABEL_14;
          }
          uint64_t v26 = v22[4];
          uint64_t v27 = v22[5];
          uint64_t v28 = v23[4];
          uint64_t v29 = v23[5];
          BOOL v30 = v26 == v28 && v27 == v29;
          if (v30 || (sub_100021EB8(v26, v27, v28, v29) & 1) != 0)
          {
            if (v24 == 1) {
              goto LABEL_14;
            }
            uint64_t v31 = v22[6];
            uint64_t v32 = v22[7];
            uint64_t v33 = v23[6];
            uint64_t v34 = v23[7];
            BOOL v35 = v31 == v33 && v32 == v34;
            if (v35 || (sub_100021EB8(v31, v32, v33, v34) & 1) != 0) {
              break;
            }
          }
        }
      }

LABEL_44:
      uint64_t v16 = v18;
      sub_100021A90((uint64_t)v8, v18);
      unint64_t v14 = (v14 + 1) & v51;
      if (((*(void *)(v53 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0)
      {
        sub_100022024();
        uint64_t v4 = v47;
        uint64_t v2 = v48;
        goto LABEL_47;
      }
    }

    if (v24 != 2)
    {
      uint64_t v36 = v22 + 9;
      uint64_t v37 = v23 + 9;
      unint64_t v38 = 2LL;
      while (v38 < v24)
      {
        uint64_t v39 = *(v36 - 1);
        uint64_t v40 = *v36;
        uint64_t v41 = *(v37 - 1);
        uint64_t v42 = *v37;
        BOOL v43 = v39 == v41 && v40 == v42;
        if (!v43 && (sub_100021EB8(v39, v40, v41, v42) & 1) == 0) {
          goto LABEL_44;
        }
        ++v38;
        v36 += 2;
        v37 += 2;
        if (v24 == v38) {
          goto LABEL_14;
        }
      }

      __break(1u);
      return;
    }

      sub_100030770();
      return v5;
    }

          uint64_t v96 = v1[50];
          uint64_t v97 = *(void *)(*(void *)(v96 + *(int *)(v436 + 48)) + 16LL);
          sub_100084520(v96);
          sub_1000853AC();
          uint64_t v10 = v379;
          if (v97) {
            goto LABEL_45;
          }
          uint64_t v99 = *(void *)v379;
          sub_1000855A8();
          if (!(!v73 & v108))
          {
            sub_1000851E0( v100,  v101,  v102,  v103,  v104,  v105,  v106,  v107,  v324,  (uint64_t)v335,  v346,  (char)v357,  v368,  (uint64_t)v379,  v393,  (uint64_t)v404,  v411,  v417,  (uint64_t)v422,  v425,  v430,  v436,  (uint64_t)v441,  v442[0],  v442[1],  v442[2],  v442[3],  v442[4],  v442[5],  v442[6],  v442[7],  v442[8]);
            uint64_t v22 = v441;
          }

          Hasher.init(_seed:)(v442, v22[5]);
          sub_100085B7C((uint64_t)v442);
          Hasher._finalize()();
          sub_100082D00();
          if (!v73)
          {
            sub_100082E1C();
            goto LABEL_56;
          }

          sub_100082E08();
          while (1)
          {
            sub_100083820();
            if (v73 && (v111 & 1) != 0) {
              break;
            }
            sub_100083980();
            sub_10008310C();
            if (!v73)
            {
              sub_100082DF4();
LABEL_56:
              *(void *)(v109 + ((v110 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v110;
              *(void *)(v22[6] + 8 * v11sub_100016BD0(0, v0, 0) = v99;
              ++v22[2];
LABEL_57:
              Swift::String v59 = __CocoaSet.Iterator.next()(v98);
              if (!v59)
              {
LABEL_60:
                uint64_t v112 = sub_10000BCDC(v1[45]);
                sub_1000850F0( v112,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  (uint64_t)v379,  v393,  (uint64_t)v404,  v411,  v417,  (uint64_t)v422,  v425,  v430);
                uint64_t v120 = v1[82];
                goto LABEL_62;
              }

              goto LABEL_31;
            }
          }

          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }

        sub_10000C1B0(v422[30]);
      }
    }

    int v91 = v1[51];
    uint64_t v81 = v1[52];
    uint64_t v92 = *(void (**)(void))(v60 + 8);
    ((void (*)(void, int64_t))v92)(v1[54], v81);
    sub_10008424C(v91);
    uint64_t v93 = sub_1000848B4();
    v92(v93);
    char v94 = sub_1000845E4();
    sub_100083850(v94, v95);
    goto LABEL_44;
  }

  *((_DWORD *)v1 + 168) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.purgeInactiveAssets(_:);
  *((_DWORD *)v1 + 169) = enum case for LoadState.loaded(_:);
  uint64_t v31 = v30 - 1;
  v1[76] = v30 - 1;
  if (__OFSUB__(v30, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v32 = v1[75] & 0xC000000000000001LL;
  uint64_t v33 = sub_10008314C();
  uint64_t v34 = v1[75];
  if (v32)
  {
    BOOL v35 = sub_1000837CC(v33, v34);
  }

  else
  {
    BOOL v35 = *(void *)(v34 + 8 * v31 + 32);
    sub_1000224B4();
  }

  v1[77] = v35;
  if ((*(_BYTE *)(v35 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    uint64_t v36 = *(void (**)(void, void, void))(v1[60] + 104LL);
    if ((*(_BYTE *)(v1[45] + v1[72]) & 1) == 0)
    {
      v36(v1[62], *((unsigned int *)v1 + 168), v1[59]);
      uint64_t v37 = (void *)swift_task_alloc(dword_10010D684);
      v1[78] = v37;
      *uint64_t v37 = v1;
      v37[1] = sub_10006F254;
      sub_100083690();
      sub_100084DE0();
      sub_10006467C(v38, v39, v40);
      return;
    }
  }

  else
  {
    uint64_t v36 = *(void (**)(void, void, void))(v1[60] + 104LL);
  }

  uint64_t v41 = v1[58];
  v36(v1[61], *((unsigned int *)v1 + 168), v1[59]);
  uint64_t v42 = sub_100030CC0();
  sub_10002FF3C(v41, v43, v44, v42);
  uint64_t v45 = (void *)swift_task_alloc(dword_10010D694);
  v1[80] = v45;
  *uint64_t v45 = v1;
  v45[1] = sub_10006FD68;
  sub_1000226A4();
  sub_100084DE0();
  sub_10006A2C8(v46, v47, v48);
}

uint64_t sub_1000181C0(uint64_t *a1, uint64_t a2)
{
  return sub_1000181E4( a1,  a2,  (void (*)(_BYTE *))sub_1000A7478,  type metadata accessor for DaemonSession,  (uint64_t (*)(uint64_t, uint64_t))sub_1000A7390,  (uint64_t)&qword_10010B298);
}

uint64_t sub_1000181E4( uint64_t *a1, uint64_t a2, void (*a3)(_BYTE *), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10 = v6;
  uint64_t v13 = *v6;
  if ((*v6 & 0xC000000000000001LL) != 0)
  {
    if (v13 < 0) {
      uint64_t v14 = *v6;
    }
    else {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000225FC();
    uint64_t v15 = sub_100021D80();
    uint64_t v16 = __CocoaSet.member(for:)(v15, v14);
    sub_10000BF84();
    if (v16)
    {
      sub_100022024();
      sub_10000BF84();
      v52[0] = v16;
      uint64_t v17 = a4(0LL);
      sub_100022CFC();
      sub_100022CC0((uint64_t)v51, (uint64_t)v52, (uint64_t)&type metadata for Swift.AnyObject + 8, v17);
      *a1 = v51[0];
      swift_unknownObjectRelease(v16);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v14);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v31 = sub_100019A4C(v14, result + 1, a6, a4, a3);
    v51[0] = v31;
    unint64_t v32 = *(void *)(v31 + 16);
    if (*(void *)(v31 + 24) <= v32)
    {
      uint64_t v36 = v32 + 1;
      sub_100021D80();
      sub_10001A524( v36,  a6,  (uint64_t)a3,  v37,  v38,  v39,  v40,  v41,  v43,  v45,  v47,  v49,  v51[0],  v51[1],  v51[2],  v51[3],  v51[4],  v51[5],  v51[6],  v51[7],  v51[8],  v52[0],  v52[1],  v52[2],  v52[3],  v52[4],  v52[5],  v52[6],  v52[7],  v52[8],  v52[9],  v52[10]);
      uint64_t v33 = v51[0];
    }

    else
    {
      uint64_t v33 = v31;
      sub_100021D80();
    }

    sub_10001B4C0(a2, v33, a3);
    uint64_t v42 = *v10;
    *uint64_t v10 = v33;
    swift_bridgeObjectRelease(v42);
    *a1 = a2;
  }

  else
  {
    Hasher.init(_seed:)(v51, *(void *)(v13 + 40));
    sub_1000225FC();
    uint64_t v48 = a3;
    a3(v51);
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v21 = v19 & ~v20;
    sub_100022D88();
    unint64_t v44 = a4;
    if ((v22 & 1) != 0)
    {
      a4(0LL);
      uint64_t v23 = sub_1000224B4();
      char v24 = a5(v23, a2);
      sub_100021DDC();
      if ((v24 & 1) != 0)
      {
LABEL_12:
        sub_10000BF84();
        sub_100022024();
        uint64_t v29 = *(void *)(*(void *)(*v6 + 48) + 8 * v21);
        *a1 = v29;
        swift_retain(v29);
        return 0LL;
      }

      uint64_t v25 = ~v20;
      while (1)
      {
        uint64_t v21 = (v21 + 1) & v25;
        sub_100022D88();
        if ((v26 & 1) == 0) {
          break;
        }
        uint64_t v27 = sub_1000224B4();
        char v28 = a5(v27, a2);
        sub_100021DDC();
        if ((v28 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    sub_100022024();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    v51[0] = *v6;
    *uint64_t v6 = 0x8000000000000000LL;
    uint64_t v35 = sub_100021D80();
    sub_10001B5CC(v35, v21, isUniquelyReferenced_nonNull_native, a6, v48, v44, a5);
    sub_100022D5C(v51[0]);
    *a1 = a2;
  }

  return 1LL;
}

uint64_t sub_100018474(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  sub_100021AD0(&qword_10010B978, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain(v10);
  uint64_t v36 = a2;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v17 = v15 & ~v16;
  uint64_t v18 = v10;
  uint64_t v19 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    unint64_t v32 = v3;
    uint64_t v33 = a1;
    uint64_t v34 = ~v16;
    uint64_t v35 = v7;
    uint64_t v20 = *(void *)(v7 + 72);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v22 = v18;
      uint64_t v23 = v21;
      v21(v9, *(void *)(v18 + 48) + v20 * v17, v6);
      sub_100021AD0( &qword_10010B980,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      char v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v34;
      uint64_t v18 = v22;
      uint64_t v21 = v23;
      if (((*(void *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v3 = v32;
        a1 = v33;
        uint64_t v27 = v35;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(void *)(*v32 + 48LL) + v20 * v17, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v27 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v29 = v36;
    v21(v9, v36, v6);
    uint64_t v37 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10001BE84((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    *uint64_t v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1LL;
  }

uint64_t sub_1000186D0(uint64_t a1, Swift::UInt a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  sub_1000223C4(*(void *)(*v3 + 40), a2);
  Hasher._combine(_:)(a2);
  Swift::Int v9 = sub_100022308();
  uint64_t v10 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = *(void *)(v8 + 48);
    uint64_t v13 = 16 * v11;
    if (*(void *)(v12 + 16 * v11) == a2)
    {
LABEL_6:
      sub_10000BF84();
      uint64_t v15 = *(void *)(*v4 + 48) + v13;
      uint64_t v16 = *(void *)v15;
      LODWORD(v15) = *(_DWORD *)(v15 + 8);
      *(void *)a1 = v16;
      *(_DWORD *)(a1 + 8) = v15;
      swift_retain();
      return 0LL;
    }

    uint64_t v14 = ~v10;
    while (1)
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
        break;
      }
      uint64_t v13 = 16 * v11;
      if (*(void *)(v12 + 16 * v11) == a2) {
        goto LABEL_6;
      }
    }
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v20 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  Swift::UInt v19 = sub_100021D80();
  sub_10001C0D8(v19, a3, v11, isUniquelyReferenced_nonNull_native);
  sub_100022D5C(v20);
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  return 1LL;
}

uint64_t sub_100018814(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for StateDump.AssetState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::Int v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  sub_100021AD0(&qword_10010BAE8, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain(v10);
  uint64_t v36 = a2;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v17 = v15 & ~v16;
  uint64_t v18 = v10;
  uint64_t v19 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    unint64_t v32 = v3;
    uint64_t v33 = a1;
    uint64_t v34 = ~v16;
    uint64_t v35 = v7;
    uint64_t v20 = *(void *)(v7 + 72);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v22 = v18;
      uint64_t v23 = v21;
      v21(v9, *(void *)(v18 + 48) + v20 * v17, v6);
      sub_100021AD0(&qword_10010BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      char v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v34;
      uint64_t v18 = v22;
      uint64_t v21 = v23;
      if (((*(void *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v3 = v32;
        a1 = v33;
        uint64_t v27 = v35;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(void *)(*v32 + 48LL) + v20 * v17, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v27 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v29 = v36;
    v21(v9, v36, v6);
    uint64_t v37 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10001C238((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    *uint64_t v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1LL;
  }

uint64_t sub_100018A70(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for StateDump.SessionState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::Int v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  sub_100021AD0(&qword_10010BAC8, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain(v10);
  uint64_t v36 = a2;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v17 = v15 & ~v16;
  uint64_t v18 = v10;
  uint64_t v19 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    unint64_t v32 = v3;
    uint64_t v33 = a1;
    uint64_t v34 = ~v16;
    uint64_t v35 = v7;
    uint64_t v20 = *(void *)(v7 + 72);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v22 = v18;
      uint64_t v23 = v21;
      v21(v9, *(void *)(v18 + 48) + v20 * v17, v6);
      sub_100021AD0( &qword_10010BAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      char v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v34;
      uint64_t v18 = v22;
      uint64_t v21 = v23;
      if (((*(void *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v3 = v32;
        a1 = v33;
        uint64_t v27 = v35;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(void *)(*v32 + 48LL) + v20 * v17, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v27 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v29 = v36;
    v21(v9, v36, v6);
    uint64_t v37 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10001C48C((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    *uint64_t v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1LL;
  }

uint64_t sub_100018CCC(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for StateDump.RequestState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::Int v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  sub_100021AD0(&qword_10010BAA8, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain(v10);
  uint64_t v36 = a2;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v17 = v15 & ~v16;
  uint64_t v18 = v10;
  uint64_t v19 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    unint64_t v32 = v3;
    uint64_t v33 = a1;
    uint64_t v34 = ~v16;
    uint64_t v35 = v7;
    uint64_t v20 = *(void *)(v7 + 72);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v22 = v18;
      uint64_t v23 = v21;
      v21(v9, *(void *)(v18 + 48) + v20 * v17, v6);
      sub_100021AD0( &qword_10010BAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      char v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v34;
      uint64_t v18 = v22;
      uint64_t v21 = v23;
      if (((*(void *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v3 = v32;
        a1 = v33;
        uint64_t v27 = v35;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(void *)(*v32 + 48LL) + v20 * v17, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v27 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v29 = v36;
    v21(v9, v36, v6);
    uint64_t v37 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10001C6E0((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    *uint64_t v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1LL;
  }

void sub_100018F28()
{
}

void sub_100018F4C()
{
  uint64_t v41 = v1;
  uint64_t v36 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = sub_1000228CC(v10, v8, v5);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v0;
  uint64_t v17 = *(void *)(*v0 + 40LL);
  uint64_t v40 = v6;
  sub_1000071C0(v4, v6);
  uint64_t v19 = v18;
  swift_bridgeObjectRetain(v16);
  uint64_t v42 = (char *)v9;
  sub_100022BEC(v17);
  sub_100022508();
  sub_100022C90();
  uint64_t v22 = *(void *)(v16 + 56 + v21) >> v19;
  uint64_t v37 = v4;
  if ((v22 & 1) != 0)
  {
    uint64_t v34 = v7;
    uint64_t v35 = v11;
    uint64_t v38 = ~v20;
    uint64_t v23 = v13;
    uint64_t v24 = *(void *)(v13 + 72);
    uint64_t v39 = v23;
    char v25 = *(void (**)(void))(v23 + 16);
    while (1)
    {
      char v26 = v25;
      ((void (*)(char *, uint64_t, uint64_t))v25)(v15, *(void *)(v16 + 48) + v24 * v19, v12);
      sub_1000071C0(v41, v40);
      char v29 = sub_1000225F0((uint64_t)v15, (uint64_t)v42, v28, v27);
      uint64_t v30 = *(void (**)(char *, uint64_t))(v39 + 8);
      v30(v15, v12);
      if ((v29 & 1) != 0) {
        break;
      }
      uint64_t v19 = (v19 + 1) & v38;
      sub_1000228E4();
      char v25 = v26;
      if (((*(void *)(v16 + 56 + v31) >> v19) & 1) == 0)
      {
        sub_100022D34();
        uint64_t v7 = v34;
        uint64_t v11 = v35;
        uint64_t v13 = v39;
        goto LABEL_7;
      }
    }

    sub_100022024();
    v30(v42, v12);
    sub_100022AB0();
    v26();
  }

  else
  {
    sub_100022D34();
    char v25 = *(void (**)(void))(v13 + 16);
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(*v7);
    uint64_t v32 = (uint64_t)v42;
    ((void (*)(char *, char *, uint64_t))v25)(v15, v42, v12);
    uint64_t v43 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    sub_10001CFC8();
    uint64_t v33 = *v7;
    *uint64_t v7 = v43;
    swift_bridgeObjectRelease(v33);
    sub_100022218(v11, v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
  }

  sub_100007448();
}

uint64_t sub_100019170(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest(0LL);
  uint64_t v7 = *(void *)(active - 8);
  __chkstk_darwin(active);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  sub_100021AD0(&qword_10010BA78, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain(v10);
  uint64_t v36 = a2;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, active, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v17 = v15 & ~v16;
  uint64_t v18 = v10;
  uint64_t v19 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    uint64_t v32 = v3;
    uint64_t v33 = a1;
    uint64_t v34 = ~v16;
    uint64_t v35 = v7;
    uint64_t v20 = *(void *)(v7 + 72);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v22 = v18;
      uint64_t v23 = v21;
      v21(v9, *(void *)(v18 + 48) + v20 * v17, active);
      sub_100021AD0( &qword_10010BA80,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, active, v24);
      char v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, active);
      if ((v25 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v34;
      uint64_t v18 = v22;
      uint64_t v21 = v23;
      if (((*(void *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v3 = v32;
        a1 = v33;
        uint64_t v27 = v35;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v22);
    v26(v36, active);
    v23(v33, *(void *)(*v32 + 48LL) + v20 * v17, active);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v21 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v27 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    char v29 = v36;
    v21(v9, v36, active);
    uint64_t v37 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10001C934((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    *uint64_t v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, active);
    return 1LL;
  }

void sub_1000193CC()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for StateDump.InferenceProviderState(0LL);
  uint64_t v8 = *(void **)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000229A8();
  uint64_t v9 = *v2;
  uint64_t v10 = *(void *)(*v2 + 40LL);
  sub_100021AD0(&qword_10010BA60, v11);
  uint64_t v13 = v12;
  sub_1000225FC();
  uint64_t v35 = v4;
  sub_100022BEC(v10);
  sub_100022508();
  uint64_t v14 = v9 + 56;
  sub_100022C90();
  if (((*(void *)(v9 + 56 + v17) >> v13) & 1) != 0)
  {
    uint64_t v32 = v2;
    uint64_t v33 = v6;
    uint64_t v34 = ~v16;
    uint64_t v18 = v8[9];
    uint64_t v19 = (void (*)(void))v8[2];
    while (1)
    {
      uint64_t v20 = v15;
      uint64_t v21 = v19;
      ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v1, *(void *)(v15 + 48) + v18 * v13, v7);
      sub_100021AD0( &qword_10010BA68,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
      char v24 = sub_1000225F0(v1, v35, v23, v22);
      char v25 = (void (*)(uint64_t, uint64_t))v8[1];
      v25(v1, v7);
      if ((v24 & 1) != 0) {
        break;
      }
      uint64_t v13 = (v13 + 1) & v34;
      sub_1000228E4();
      uint64_t v15 = v20;
      uint64_t v19 = v21;
      if (((*(void *)(v14 + v26) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease(v20);
        uint64_t v2 = v32;
        uint64_t v6 = v33;
        uint64_t v27 = v8;
        goto LABEL_7;
      }
    }

    sub_100007570();
    v25(v35, v7);
    sub_100022AB0();
    v21();
  }

  else
  {
    swift_bridgeObjectRelease(v15);
    uint64_t v19 = (void (*)(void))v8[2];
    uint64_t v27 = v8;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    sub_100022930();
    v19();
    uint64_t v36 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    uint64_t v29 = sub_100022C44();
    sub_10001CB88(v29, v30, isUniquelyReferenced_nonNull_native);
    uint64_t v31 = *v2;
    *uint64_t v2 = v36;
    swift_bridgeObjectRelease(v31);
    sub_100022218(v6, v35, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27[4]);
  }

  sub_100007448();
}

void sub_1000195BC()
{
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  sub_1000224A4();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022714();
  uint64_t v29 = v9;
  uint64_t v13 = v6 + *(int *)(v9 + 20);
  sub_1000225FC();
  UUID.hash(into:)(&v30);
  sub_100022A48();
  sub_100022508();
  sub_100022C90();
  if (((*(void *)(v2 + 56 + v15) >> v1) & 1) != 0)
  {
    uint64_t v26 = v0;
    uint64_t v27 = v6;
    uint64_t v28 = v8;
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v3 + 72);
    while (1)
    {
      sub_10002270C(*(void *)(v2 + 48) + v17 * v1, (uint64_t)v12);
      char v18 = static UUID.== infix(_:_:)(&v12[*(int *)(v29 + 20)], v13);
      sub_10002282C((uint64_t)v12);
      if ((v18 & 1) != 0) {
        break;
      }
      uint64_t v1 = (v1 + 1) & v16;
      sub_1000228E4();
      if (((*(void *)(v2 + 56 + v19) >> v1) & 1) == 0)
      {
        sub_100022024();
        uint64_t v6 = v27;
        uint64_t v8 = v28;
        uint64_t v4 = v26;
        goto LABEL_7;
      }
    }

    sub_100022024();
    sub_10002282C(v27);
    sub_10002270C(*(void *)(*v26 + 48) + v17 * v1, v28);
  }

  else
  {
    sub_100022024();
LABEL_7:
    uint64_t v20 = v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    sub_100021A5C( v6,  (uint64_t)v12,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    uint64_t v30 = *v20;
    *uint64_t v20 = 0x8000000000000000LL;
    uint64_t v22 = sub_100022D1C();
    sub_10001CDDC(v22, v23, isUniquelyReferenced_nonNull_native);
    uint64_t v24 = *v20;
    *uint64_t v20 = v30;
    swift_bridgeObjectRelease(v24);
    sub_100021AB0(v6, v8, type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  }

  sub_100007448();
}

void sub_100019778()
{
}

uint64_t sub_10001979C(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v31 = v9;
      unint64_t v10 = sub_100021464();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_100019C34(v7, result + 1);
    Swift::Int v32 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v29 = v24 + 1;
      id v30 = v8;
      sub_10001B228(v29);
      uint64_t v25 = v32;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    sub_10001B54C((uint64_t)v8, v25);
    uint64_t v28 = *v3;
    *uint64_t v3 = v25;
  }

  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
    {
      sub_100021464();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = (Swift::Int)v20;
        id v21 = v20;
        return 0LL;
      }

      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v32 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_10001D1A4((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v3;
    *uint64_t v3 = v32;
  }

  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1LL;
}

uint64_t sub_100019A14(uint64_t a1, uint64_t a2)
{
  return sub_100019A4C(a1, a2, &qword_10010B288, type metadata accessor for InferenceProviderAsset, sub_100091270);
}

uint64_t sub_100019A30(uint64_t a1, uint64_t a2)
{
  return sub_100019A4C(a1, a2, &qword_10010B260, type metadata accessor for DaemonRequest, sub_1000D3C08);
}

#error "100019B0C: call analysis failed (funcsize=115)"
uint64_t sub_100019C18(uint64_t a1, uint64_t a2)
{
  return sub_100019A4C(a1, a2, &qword_10010B298, type metadata accessor for DaemonSession, sub_1000A7478);
}

Swift::Int sub_100019C34(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptySetSingleton;
  }

  sub_100003B20(&qword_10010B8D0);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v23 = v4;
  uint64_t v5 = __CocoaSet.makeIterator()(a1);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (!v6)
  {
LABEL_16:
    swift_release();
    return v4;
  }

  uint64_t v7 = v6;
  unint64_t v8 = sub_100021464();
  while (1)
  {
    uint64_t v21 = v7;
    swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
    uint64_t v4 = v23;
    unint64_t v9 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v9)
    {
      sub_10001B228(v9 + 1);
      uint64_t v4 = v23;
    }

    uint64_t v10 = v22;
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v12 = v4 + 56;
    uint64_t v13 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6))) == 0) {
      break;
    }
    unint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v4 + 48) + 8 * v16) = v10;
    ++*(void *)(v4 + 16);
    uint64_t v7 = __CocoaSet.Iterator.next()(result);
    if (!v7) {
      goto LABEL_16;
    }
  }

  char v17 = 0;
  unint64_t v18 = (unint64_t)(63 - v13) >> 6;
  while (++v15 != v18 || (v17 & 1) == 0)
  {
    BOOL v19 = v15 == v18;
    if (v15 == v18) {
      unint64_t v15 = 0LL;
    }
    v17 |= v19;
    uint64_t v20 = *(void *)(v12 + 8 * v15);
    if (v20 != -1)
    {
      unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

void sub_100019E08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

Swift::Int sub_100019E1C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B710);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    Swift::Int v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      BOOL v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      id v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *id v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_100017524(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

void sub_10001A0F4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = (int *)v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v42 = v1;
  uint64_t v6 = *v1;
  if (*(void *)(*v1 + 24) > a1) {
    a1 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B7E0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 1LL);
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v43 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & v10;
    int64_t v44 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v45 = v7 + 56;
    swift_retain(v6);
    int64_t v13 = 0LL;
    unint64_t v14 = type metadata accessor for ModelCatalogAsset;
    if (!v12) {
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (unint64_t i = v15 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
    {
      uint64_t v20 = *(void *)(v6 + 48);
      uint64_t v49 = *(void *)(v46 + 72);
      sub_100021AB0(v20 + v49 * i, (uint64_t)v5, v14);
      Hasher.init(_seed:)(v50, *(void *)(v8 + 40));
      uint64_t v21 = *v5;
      uint64_t v22 = v5[1];
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v50, v21, v22);
      swift_bridgeObjectRelease(v22);
      uint64_t v23 = v5[2];
      Hasher._combine(_:)(*(void *)(v23 + 16));
      uint64_t v24 = *(void *)(v23 + 16);
      if (v24)
      {
        unint64_t v48 = v12;
        int64_t v25 = v13;
        uint64_t v26 = v8;
        unint64_t v27 = v14;
        uint64_t v28 = v6;
        swift_bridgeObjectRetain(v23);
        uint64_t v29 = (void *)(v23 + 40);
        do
        {
          uint64_t v30 = *(v29 - 1);
          uint64_t v31 = *v29;
          swift_bridgeObjectRetain(*v29);
          String.hash(into:)(v50, v30, v31);
          swift_bridgeObjectRelease(v31);
          v29 += 2;
          --v24;
        }

        while (v24);
        swift_bridgeObjectRelease(v23);
        uint64_t v6 = v28;
        unint64_t v14 = v27;
        uint64_t v8 = v26;
        int64_t v13 = v25;
        unint64_t v12 = v48;
      }

      uint64_t v32 = v5[3];
      swift_bridgeObjectRetain(v32);
      sub_10004F648((uint64_t)v50, v32);
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = v47;
      uint64_t v34 = type metadata accessor for AssetCost(0LL);
      sub_100021AD0(&qword_10010B7E8, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
      dispatch thunk of Hashable.hash(into:)(v50, v34, v35);
      Hasher._combine(_:)(*((_BYTE *)v5 + v33[8]));
      Hasher._combine(_:)(*((_BYTE *)v5 + v33[9]));
      Hasher._combine(_:)(*((_BYTE *)v5 + v33[10]));
      Swift::Int v36 = Hasher._finalize()();
      uint64_t v37 = v45;
      unint64_t v38 = _HashTable.nextHole(atOrAfter:)(v36 & ~(-1LL << *(_BYTE *)(v8 + 32)), v45, ~(-1LL << *(_BYTE *)(v8 + 32)));
      *(void *)(v37 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v38;
      sub_100021AB0((uint64_t)v5, *(void *)(v8 + 48) + v38 * v49, v14);
      ++*(void *)(v8 + 16);
      if (v12) {
        goto LABEL_8;
      }
LABEL_9:
      int64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1LL))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }

      if (v17 >= v44) {
        goto LABEL_29;
      }
      unint64_t v18 = v43[v17];
      ++v13;
      if (!v18)
      {
        int64_t v13 = v17 + 1;
        if (v17 + 1 >= v44) {
          goto LABEL_29;
        }
        unint64_t v18 = v43[v13];
        if (!v18)
        {
          int64_t v13 = v17 + 2;
          if (v17 + 2 >= v44) {
            goto LABEL_29;
          }
          unint64_t v18 = v43[v13];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v44)
            {
LABEL_29:
              swift_release(v6);
              uint64_t v39 = v42;
              uint64_t v40 = 1LL << *(_BYTE *)(v6 + 32);
              if (v40 > 63) {
                sub_100017524(0LL, (unint64_t)(v40 + 63) >> 6, v43);
              }
              else {
                void *v43 = -1LL << v40;
              }
              *(void *)(v6 + 16) = 0LL;
              swift_release(v6);
              goto LABEL_34;
            }

            unint64_t v18 = v43[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_36;
                }
                if (v13 >= v44) {
                  goto LABEL_29;
                }
                unint64_t v18 = v43[v13];
                ++v19;
                if (v18) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v13 = v19;
          }
        }
      }

void sub_10001A510( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

void sub_10001A524( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  a31 = v33;
  a32 = v34;
  Swift::Int v36 = v35;
  uint64_t v37 = *v32;
  sub_1000224D0(v38, v39);
  uint64_t v40 = sub_100022320(v37);
  if (*(void *)(v37 + 16))
  {
    sub_100022404();
    uint64_t v64 = (void *)(v37 + 56);
    sub_100022BC0();
    uint64_t v43 = v42 & v41;
    int64_t v45 = (unint64_t)(v44 + 63) >> 6;
    sub_100021D80();
    int64_t v46 = 0LL;
    if (!v43) {
      goto LABEL_4;
    }
LABEL_3:
    sub_100022B68();
    for (int64_t i = v50 | (v46 << 6); ; int64_t i = v54 + (v46 << 6))
    {
      uint64_t v55 = *(void *)(*(void *)(v37 + 48) + 8 * i);
      sub_1000227A0(*(void *)(v40 + 40), v47, v48, v49);
      v36(&a12);
      sub_100022844();
      sub_1000225AC();
      if (v56)
      {
        sub_100021D9C();
        while (1)
        {
          sub_1000223EC();
          if (v56)
          {
            if ((v58 & 1) != 0) {
              break;
            }
          }

          sub_1000227C4();
          if (!v56)
          {
            sub_100021D88();
            goto LABEL_26;
          }
        }

        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        return;
      }

      sub_100021DB0();
LABEL_26:
      *(void *)(v40 + 56 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v57;
      *(void *)(*(void *)(v40 + 48) + 8 * v57) = v55;
      sub_10002285C();
      if (v43) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v52 = v46 + 1;
      if (__OFADD__(v46, 1LL)) {
        goto LABEL_34;
      }
      if (v52 >= v45) {
        goto LABEL_28;
      }
      ++v46;
      if (!v64[v52])
      {
        int64_t v46 = v52 + 1;
        if (v52 + 1 >= v45) {
          goto LABEL_28;
        }
        if (!v64[v46])
        {
          int64_t v46 = v52 + 2;
          if (v52 + 2 >= v45) {
            goto LABEL_28;
          }
          if (!v64[v46])
          {
            int64_t v53 = v52 + 3;
            if (v53 >= v45)
            {
LABEL_28:
              sub_10000BF84();
              sub_100022980();
              if (v59 ^ v60 | v56)
              {
                sub_1000223F8();
                *uint64_t v64 = v61;
              }

              else
              {
                uint64_t v62 = sub_100022808();
                sub_100017524(v62, v63, v64);
              }

              *(void *)(v37 + 16) = 0LL;
              break;
            }

            if (!v64[v53])
            {
              while (1)
              {
                int64_t v46 = v53 + 1;
                if (__OFADD__(v53, 1LL)) {
                  goto LABEL_35;
                }
                if (v46 >= v45) {
                  goto LABEL_28;
                }
                ++v53;
                if (v64[v46]) {
                  goto LABEL_17;
                }
              }
            }

            int64_t v46 = v53;
          }
        }
      }

void sub_10001A720()
{
  uint64_t v45 = v1;
  uint64_t v46 = v2;
  uint64_t v3 = v0;
  uint64_t v6 = sub_100022908(v4, v5);
  uint64_t v44 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - v7;
  uint64_t v9 = (void *)*v0;
  sub_100022410();
  uint64_t v10 = sub_100022320((uint64_t)v9);
  if (v9[2])
  {
    sub_100022404();
    uint64_t v43 = v9 + 7;
    sub_100022AF0();
    uint64_t v13 = v12 & v11;
    uint64_t v41 = v0;
    int64_t v42 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v15 = v10 + 56;
    sub_10000C0F0();
    int64_t v16 = 0LL;
    if (!v13) {
      goto LABEL_4;
    }
LABEL_3:
    sub_1000221C4();
    while (1)
    {
      uint64_t v22 = v9;
      uint64_t v23 = v9[6];
      uint64_t v24 = *(void *)(v44 + 72);
      int64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
      v25(v8, v23 + v24 * v17, v6);
      sub_100022A90();
      uint64_t v26 = sub_100022C08();
      dispatch thunk of Hashable._rawHashValue(seed:)(v26, v6, v27);
      sub_100021F40();
      sub_10002277C();
      if (v28)
      {
        sub_100021D9C();
        while (1)
        {
          sub_1000223EC();
          if (v28)
          {
            if ((v29 & 1) != 0) {
              break;
            }
          }

          if (v30 == v31) {
            uint64_t v30 = 0LL;
          }
          if (*(void *)(v15 + 8 * v30) != -1LL)
          {
            sub_100021D88();
            goto LABEL_28;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }

      sub_100021DB0();
LABEL_28:
      sub_10002276C();
      *(void *)(v15 + v32) = v33;
      v25((char *)(*(void *)(v10 + 48) + v34 * v24), (uint64_t)v8, v6);
      sub_10002285C();
      uint64_t v9 = v22;
      if (v13) {
        goto LABEL_3;
      }
LABEL_4:
      if (__OFADD__(v16, 1LL)) {
        goto LABEL_36;
      }
      if (v16 + 1 >= v42) {
        goto LABEL_30;
      }
      sub_100022D50();
      int64_t v16 = v18;
      if (!v19)
      {
        int64_t v16 = v18 + 1;
        if (v18 + 1 >= v42) {
          goto LABEL_30;
        }
        if (!v43[v16])
        {
          int64_t v16 = v18 + 2;
          if (v18 + 2 >= v42) {
            goto LABEL_30;
          }
          if (!v43[v16])
          {
            if (v18 + 3 >= v42)
            {
LABEL_30:
              sub_1000228B4();
              uint64_t v3 = v41;
              sub_100022980();
              if (v35 ^ v36 | v28)
              {
                sub_1000223F8();
                void *v43 = v37;
              }

              else
              {
                uint64_t v38 = sub_100022808();
                sub_100017524(v38, v39, v43);
              }

              v9[2] = 0LL;
              break;
            }

            sub_100022D50();
            if (!v21)
            {
              while (1)
              {
                int64_t v16 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_37;
                }
                if (v16 >= v42) {
                  goto LABEL_30;
                }
                ++v20;
                if (v43[v16]) {
                  goto LABEL_17;
                }
              }
            }

            int64_t v16 = v20;
          }
        }
      }

void sub_10001A998(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B7C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v33 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = *(void *)(v3 + 56);
    uint64_t v34 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & v8;
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v5 + 56;
    if ((v10 & v8) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
    {
      uint64_t v19 = *(void *)(v3 + 48) + 16 * i;
      Swift::UInt v20 = *(void *)v19;
      int v21 = *(_DWORD *)(v19 + 8);
      Hasher.init(_seed:)(v35, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      Swift::Int v22 = Hasher._finalize()();
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v24 = v22 & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) == 0)
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          BOOL v29 = v25 == v28;
          if (v25 == v28) {
            unint64_t v25 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v25);
          if (v30 != -1)
          {
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }

      unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v13 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
      uint64_t v31 = *(void *)(v6 + 48) + 16 * v26;
      *(void *)uint64_t v31 = v20;
      *(_DWORD *)(v31 + 8) = v21;
      ++*(void *)(v6 + 16);
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v12) {
        goto LABEL_35;
      }
      unint64_t v17 = v34[v16];
      ++v7;
      if (!v17)
      {
        int64_t v7 = v16 + 1;
        if (v16 + 1 >= v12) {
          goto LABEL_35;
        }
        unint64_t v17 = v34[v7];
        if (!v17)
        {
          int64_t v7 = v16 + 2;
          if (v16 + 2 >= v12) {
            goto LABEL_35;
          }
          unint64_t v17 = v34[v7];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v12)
            {
LABEL_35:
              uint64_t v32 = 1LL << *(_BYTE *)(v3 + 32);
              if (v32 > 63) {
                sub_100017524(0LL, (unint64_t)(v32 + 63) >> 6, v34);
              }
              else {
                *uint64_t v34 = -1LL << v32;
              }
              uint64_t v2 = v33;
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v34[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v7 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v7 >= v12) {
                  goto LABEL_35;
                }
                unint64_t v17 = v34[v7];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v7 = v18;
          }
        }
      }

void sub_10001AC68()
{
  uint64_t v39 = v3;
  uint64_t v40 = v4;
  uint64_t v5 = v0;
  uint64_t v7 = sub_1000224D0(v6, v3);
  uint64_t v38 = *(void *)(v7 - 8);
  sub_10000C240();
  __chkstk_darwin(v8);
  sub_100022990();
  uint64_t v9 = *v0;
  sub_100022410();
  uint64_t v10 = sub_100022320(v9);
  if (*(void *)(v9 + 16))
  {
    sub_100022404();
    uint64_t v37 = (void *)(v9 + 56);
    sub_100022484();
    uint64_t v36 = v11;
    uint64_t v12 = v10 + 56;
    swift_retain(v9);
    uint64_t v13 = 0LL;
    if (!v1) {
      goto LABEL_4;
    }
LABEL_3:
    sub_100022744();
    while (1)
    {
      uint64_t v19 = v9;
      uint64_t v20 = *(void *)(v9 + 48);
      uint64_t v21 = *(void *)(v38 + 72);
      Swift::Int v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
      v22(v2, v20 + v21 * v14, v7);
      sub_1000071C0(v40, v39);
      sub_1000225DC(v23);
      sub_100021F40();
      sub_10002277C();
      if (v24)
      {
        sub_100021D9C();
        while (1)
        {
          sub_1000223EC();
          if (v24)
          {
            if ((v25 & 1) != 0) {
              break;
            }
          }

          if (v26 == v27) {
            uint64_t v26 = 0LL;
          }
          if (*(void *)(v12 + 8 * v26) != -1LL)
          {
            sub_100021D88();
            goto LABEL_28;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }

      sub_100021DB0();
LABEL_28:
      sub_10002276C();
      *(void *)(v12 + v28) = v29;
      v22(*(void *)(v10 + 48) + v30 * v21, v2, v7);
      sub_10002285C();
      uint64_t v9 = v19;
      if (v1) {
        goto LABEL_3;
      }
LABEL_4:
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_36;
      }
      if (v13 + 1 >= v36) {
        goto LABEL_30;
      }
      sub_100022C38();
      uint64_t v13 = v15;
      if (!v16)
      {
        uint64_t v13 = v15 + 1;
        if (v15 + 1 >= v36) {
          goto LABEL_30;
        }
        if (!v37[v13])
        {
          uint64_t v13 = v15 + 2;
          if (v15 + 2 >= v36) {
            goto LABEL_30;
          }
          if (!v37[v13])
          {
            if (v15 + 3 >= v36)
            {
LABEL_30:
              swift_release(v9);
              uint64_t v5 = v0;
              sub_100022980();
              if (v31 ^ v32 | v24)
              {
                sub_1000223F8();
                *uint64_t v37 = v33;
              }

              else
              {
                uint64_t v34 = sub_100022808();
                sub_100017524(v34, v35, v37);
              }

              *(void *)(v9 + 16) = 0LL;
              break;
            }

            sub_100022C38();
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_37;
                }
                if (v13 >= v36) {
                  goto LABEL_30;
                }
                ++v17;
                if (v37[v13]) {
                  goto LABEL_17;
                }
              }
            }

            uint64_t v13 = v17;
          }
        }
      }

void sub_10001AED4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100003B20(&qword_10010BA30);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_38;
  }
  char v32 = v2;
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v34 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v33 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  swift_retain();
  int64_t v15 = 0LL;
  if (!v13) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    uint64_t v21 = *(void *)(v35 + 72);
    sub_100021AB0( *(void *)(v7 + 48) + v21 * i,  (uint64_t)v6,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    Hasher.init(_seed:)(v37, *(void *)(v9 + 40));
    UUID.hash(into:)(v37);
    Swift::Int v22 = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    sub_100021AB0( (uint64_t)v6,  *(void *)(v9 + 48) + v26 * v21,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    ++*(void *)(v9 + 16);
    if (v13) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      goto LABEL_40;
    }
    if (v18 >= v33) {
      goto LABEL_34;
    }
    unint64_t v19 = v34[v18];
    ++v15;
    if (!v19)
    {
      int64_t v15 = v18 + 1;
      if (v18 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = v34[v15];
      if (!v19)
      {
        int64_t v15 = v18 + 2;
        if (v18 + 2 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v15];
        if (!v19) {
          break;
        }
      }
    }

LABEL_34:
  swift_release(v7);
  uint64_t v2 = v32;
  uint64_t v31 = 1LL << *(_BYTE *)(v7 + 32);
  if (v31 > 63) {
    sub_100017524(0LL, (unint64_t)(v31 + 63) >> 6, v34);
  }
  else {
    *uint64_t v34 = -1LL << v31;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_38:
  swift_release(v7);
  *uint64_t v2 = v9;
}

  __break(1u);
}

  __break(1u);
}

        v25 += 40;
        if (!--v24)
        {
          int64_t v33 = v19;
          uint64_t v34 = v21;
          uint64_t v10 = v39;
          a1 = v40;
          goto LABEL_37;
        }
      }

      if (v21) {
        goto LABEL_34;
      }
      goto LABEL_31;
    }

    int64_t v33 = *(void *)(v18 + 24);
    uint64_t v34 = *(void *)(v18 + 8);
LABEL_37:
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    uint64_t v35 = *(void *)(v43 + 16);
    uint64_t v36 = *(void *)(v43 + 24);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    if (v35 >= v36 >> 1)
    {
      sub_1000B2880(v36 > 1, v35 + 1, 1, v43);
      uint64_t v43 = v38;
    }

    uint64_t v17 = v42 + 1;
    *(void *)(v43 + 16) = v35 + 1;
    unint64_t v16 = v43;
    uint64_t v37 = v43 + 40 * v35;
    *(void *)(v37 + 32) = v20;
    *(void *)(v37 + 4sub_100016BD0(0, v0, 0) = v19;
    *(void *)(v37 + 48) = v22;
    *(void *)(v37 + 56) = v21;
    *(_BYTE *)(v37 + 64) = v23;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19);
    if (v42 + 1 == v10)
    {
      swift_bridgeObjectRelease(v43);
      goto LABEL_11;
    }
  }

  __break(1u);
}

void sub_10001B228(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B8D0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    swift_retain();
    int64_t v13 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Swift::Int v20 = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = v20 & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(void *)(*(void *)(v6 + 48) + 8 * v24) = v19;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v11) {
        goto LABEL_35;
      }
      unint64_t v17 = v8[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v17 = v8[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v17 = v8[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v11)
            {
LABEL_35:
              swift_release();
              uint64_t v2 = v30;
              uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
              if (v29 > 63) {
                sub_100017524(0LL, (unint64_t)(v29 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *uint64_t v8 = -1LL << v29;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

void sub_10001B4C0(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  unint64_t v9 = _HashTable.nextHole(atOrAfter:)(v7 & ~v8, v3 + 56, ~v8);
  *(void *)(v3 + 56 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v9;
  *(void *)(*(void *)(v3 + 48) + 8 * v9) = v4;
  sub_10002202C();
}

unint64_t sub_10001B54C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

#error "10001B650: call analysis failed (funcsize=96)"
uint64_t sub_10001B74C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void v28[9];
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  int64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100019E1C(v11);
  }

  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)sub_10001D330();
      goto LABEL_22;
    }

    sub_10001DCD4(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  unint64_t result = Hasher._finalize()();
  int64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  unint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    int64_t v15 = *(void *)(v12 + 48);
    int64_t v16 = (void *)(v15 + 16 * a3);
    unint64_t v17 = v16[1];
    int64_t v18 = *v16 == v8 && v17 == a2;
    if (v18 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        Swift::Int v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_10001B8E4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_10001A720();
  }

  else
  {
    if (v11 > v10)
    {
      sub_10001D718();
      goto LABEL_12;
    }

    sub_10001E52C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100021AD0(&qword_10010B250, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100021AD0(&qword_10010B258, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  active);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(active);
  __break(1u);
  return result;
}

  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  char v21 = v28;
  uint64_t v22 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  sub_100021AB0( v21,  *(void *)(v22 + 48) + *(void *)(v26 + 72) * a2,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  uint64_t v23 = *(void *)(v22 + 16);
  unint64_t v24 = __OFADD__(v23, 1LL);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v22 + 16) = v25;
    return;
  }

  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
  __break(1u);
}

  uint64_t v28 = *v32;
  *(void *)(v28 + 8 * (v8 >> 6) + 56) |= 1LL << v8;
  sub_100022218( *(void *)(v28 + 48) + *(void *)(v34 + 72) * v8,  v35,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32));
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v30 = __OFADD__(v29, 1LL);
  uint64_t v31 = v29 + 1;
  if (!v30)
  {
    *(void *)(v28 + 16) = v31;
    sub_100007448();
    return;
  }

  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
}

void sub_10001BB38(void *a1, unint64_t a2, char a3)
{
  uint64_t v49 = (int *)type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v7 = *((void *)v49 - 1);
  __chkstk_darwin(v49);
  unint64_t v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v47 = v7;
  uint64_t v48 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    uint64_t v12 = v10 + 1;
    if ((a3 & 1) != 0)
    {
      sub_10001A0F4(v12);
    }

    else
    {
      if (v11 > v10)
      {
        sub_10001D870();
        goto LABEL_49;
      }

      sub_10001DF7C(v12);
    }

    uint64_t v13 = *v3;
    Hasher.init(_seed:)(v52, *(void *)(*v3 + 40));
    sub_10004EA94((uint64_t)v52);
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v13 + 32);
    a2 = v14 & ~v15;
    if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
    {
      uint64_t v50 = ~v15;
      uint64_t v51 = *(void *)(v7 + 72);
      uint64_t v16 = type metadata accessor for ModelCatalogAsset;
      do
      {
        uint64_t v17 = v16;
        sub_100021A5C(*(void *)(v13 + 48) + v51 * a2, (uint64_t)v9, v16);
        uint64_t v18 = v9[1];
        uint64_t v19 = a1[1];
        BOOL v20 = *v9 == *a1 && v18 == v19;
        if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v9, v18, *a1, v19, 0LL) & 1) == 0) {
          goto LABEL_48;
        }
        char v21 = (void *)v9[2];
        uint64_t v22 = (void *)a1[2];
        unint64_t v23 = v21[2];
        if (v23 != v22[2]) {
          goto LABEL_48;
        }
        if (v23) {
          BOOL v24 = v21 == v22;
        }
        else {
          BOOL v24 = 1;
        }
        if (!v24)
        {
          uint64_t v25 = v21[4];
          uint64_t v26 = v21[5];
          uint64_t v27 = v22[4];
          uint64_t v28 = v22[5];
          BOOL v29 = v25 == v27 && v26 == v28;
          if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0LL) & 1) == 0) {
            goto LABEL_48;
          }
          if (v23 != 1)
          {
            uint64_t v30 = v21[6];
            uint64_t v31 = v21[7];
            uint64_t v32 = v22[6];
            uint64_t v33 = v22[7];
            BOOL v34 = v30 == v32 && v31 == v33;
            if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) == 0) {
              goto LABEL_48;
            }
            if (v23 != 2)
            {
              uint64_t v35 = v21 + 9;
              uint64_t v36 = v22 + 9;
              unint64_t v37 = 2LL;
              while (v37 < v23)
              {
                uint64_t v38 = *(v35 - 1);
                uint64_t v39 = *v35;
                uint64_t v40 = *(v36 - 1);
                uint64_t v41 = *v36;
                BOOL v42 = v38 == v40 && v39 == v41;
                if (!v42 && (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v40, v41, 0LL) & 1) == 0) {
                  goto LABEL_48;
                }
                ++v37;
                v35 += 2;
                v36 += 2;
                if (v23 == v37) {
                  goto LABEL_21;
                }
              }

              __break(1u);
              goto LABEL_52;
            }
          }
        }

LABEL_48:
        uint64_t v16 = v17;
        sub_100021A90((uint64_t)v9, v17);
        a2 = (a2 + 1) & v50;
      }

      while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
    }
  }

    sub_1000D06E8();
    if (v51) {
      break;
    }
LABEL_104:
    uint64_t v0 = v128;
    sub_1000D0A68(v128[25]);
    sub_1000D0410();
    if ((v81 & 1) == 0) {
      goto LABEL_107;
    }
  }

  if (v14) {
    char v56 = v54 == v55;
  }
  else {
    char v56 = 1;
  }
  if (!v56)
  {
    uint64_t v73 = v55 + 64;
    uint64_t v74 = v54 + 64;
    while (1)
    {
      int v75 = sub_1000D06B0();
      uint64_t v79 = v51 && v76 == v78;
      if (!v79 && (sub_100021EB8(v75, v76, v77, v78) & 1) == 0) {
        goto LABEL_104;
      }
      if (v44)
      {
        if (!v1) {
          goto LABEL_104;
        }
        if (v46 == v35 && v44 == (uint64_t *)v1)
        {
          if ((_DWORD)v0 != (_DWORD)v5) {
            goto LABEL_104;
          }
          goto LABEL_102;
        }
      }

      else if (v1)
      {
        goto LABEL_104;
      }

LABEL_49:
  uint64_t v43 = *v48;
  *(void *)(*v48 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  sub_100021AB0( (uint64_t)a1,  *(void *)(v43 + 48) + *(void *)(v47 + 72) * a2,  type metadata accessor for ModelCatalogAsset);
  uint64_t v44 = *(void *)(v43 + 16);
  BOOL v45 = __OFADD__(v44, 1LL);
  uint64_t v46 = v44 + 1;
  if (v45)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    sub_100021A90((uint64_t)v9, type metadata accessor for ModelCatalogAsset);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
    __break(1u);
  }

  else
  {
    *(void *)(v43 + 16) = v46;
  }

    Array.description.getter(v30);
    sub_1000309A8();
    sub_10003086C();
    sub_100030560(v68);
    sub_100030770();
    sub_1000228C4();
    int v66 = a4;
    uint64_t v67 = "Request specified required asset IDs, using asset subset: %s";
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v28, v66, v67, a2, 0xCu);
    uint64_t v69 = v71;
    swift_arrayDestroy(v71, 1LL);
    sub_10000BCC4(v69);
    sub_10000BCC4((uint64_t)a2);
  }

  return v5;
}

uint64_t sub_10001BE84(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_10001A720();
  }

  else
  {
    if (v11 > v10)
    {
      sub_10001D718();
      goto LABEL_12;
    }

    sub_10001E52C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100021AD0( &qword_10010B978,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100021AD0( &qword_10010B980,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_10001C0D8(Swift::UInt a1, int a2, unint64_t a3, char a4)
{
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10001A998(v10);
  }

  else
  {
    if (v9 > v8)
    {
      sub_10001D5EC();
      goto LABEL_14;
    }

    sub_10001E74C(v10);
  }

  uint64_t v11 = *v4;
  Hasher.init(_seed:)(v21, *(void *)(*v4 + 40));
  Hasher._combine(_:)(a1);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v11 + 48);
    if (*(void *)(v14 + 16 * a3) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DaemonInferenceMonitor);
      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v15;
        if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        if (*(void *)(v14 + 16 * a3) == a1) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10001C238(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for StateDump.AssetState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_10001A720();
  }

  else
  {
    if (v11 > v10)
    {
      sub_10001D718();
      goto LABEL_12;
    }

    sub_10001E52C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100021AD0(&qword_10010BAE8, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100021AD0(&qword_10010BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_10001C48C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for StateDump.SessionState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_10001A720();
  }

  else
  {
    if (v11 > v10)
    {
      sub_10001D718();
      goto LABEL_12;
    }

    sub_10001E52C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100021AD0(&qword_10010BAC8, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100021AD0( &qword_10010BAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_10001C6E0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for StateDump.RequestState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_10001A720();
  }

  else
  {
    if (v11 > v10)
    {
      sub_10001D718();
      goto LABEL_12;
    }

    sub_10001E52C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100021AD0(&qword_10010BAA8, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100021AD0( &qword_10010BAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_10001C934(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest(0LL);
  uint64_t v7 = *(void *)(active - 8);
  __chkstk_darwin(active);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_10001A720();
  }

  else
  {
    if (v11 > v10)
    {
      sub_10001D718();
      goto LABEL_12;
    }

    sub_10001E52C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100021AD0( &qword_10010BA78,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, active, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, active);
      sub_100021AD0( &qword_10010BA80,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, active, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, active);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_10001CB88(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for StateDump.InferenceProviderState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_10001A720();
  }

  else
  {
    if (v11 > v10)
    {
      sub_10001D718();
      goto LABEL_12;
    }

    sub_10001E52C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100021AD0( &qword_10010BA60,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100021AD0( &qword_10010BA68,  (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_10001CDDC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v27 = v3;
  uint64_t v28 = a1;
  uint64_t v26 = v8;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10001AED4(v13);
  }

  else
  {
    if (v12 > v11)
    {
      sub_10001D870();
      goto LABEL_12;
    }

    sub_10001EC14(v13);
  }

  uint64_t v14 = *v3;
  Hasher.init(_seed:)(v29, *(void *)(*v3 + 40));
  uint64_t v15 = a1 + *(int *)(v7 + 20);
  UUID.hash(into:)(v29);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1LL << *(_BYTE *)(v14 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v8 + 72);
    do
    {
      sub_100021A5C( *(void *)(v14 + 48) + v19 * a2,  (uint64_t)v10,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
      char v20 = static UUID.== infix(_:_:)(&v10[*(int *)(v7 + 20)], v15);
      sub_100021A90( (uint64_t)v10,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
      if ((v20 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_10001CFC8()
{
  uint64_t v33 = v2;
  Swift::Int v4 = v3;
  char v6 = v5;
  unint64_t v8 = v7;
  uint64_t v35 = v9;
  uint64_t v10 = sub_100003B20(v3);
  uint64_t v34 = *(void *)(v10 - 8);
  sub_10000C240();
  __chkstk_darwin(v11);
  sub_100021FA4();
  unint64_t v12 = *(void *)(*v0 + 16);
  unint64_t v13 = *(void *)(*v0 + 24);
  uint64_t v32 = v0;
  if (v13 > v12 && (v6 & 1) != 0) {
    goto LABEL_12;
  }
  if ((v6 & 1) != 0)
  {
    sub_10001AC68();
  }

  else
  {
    if (v13 > v12)
    {
      sub_10001D9D4();
      goto LABEL_12;
    }

    sub_10001E9F0();
  }

  uint64_t v14 = *v0;
  uint64_t v15 = (unint64_t *)sub_100022CB4();
  sub_1000071C0(v15, v16);
  uint64_t v17 = sub_100022C08();
  dispatch thunk of Hashable._rawHashValue(seed:)(v17, v10, v18);
  sub_100022508();
  sub_100022C90();
  if (((*(void *)(v14 + 56 + v20) >> v8) & 1) != 0)
  {
    uint64_t v21 = ~v19;
    uint64_t v22 = *(void *)(v34 + 72);
    uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16);
    do
    {
      v23(v1, *(void *)(v14 + 48) + v22 * v8, v10);
      sub_1000071C0(v33, v4);
      char v26 = sub_1000225F0(v1, v35, v25, v24);
      sub_100022BF8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
      if ((v26 & 1) != 0) {
        goto LABEL_15;
      }
      unint64_t v8 = (v8 + 1) & v21;
      sub_1000228E4();
    }

    while (((*(void *)(v14 + 56 + v27) >> v8) & 1) != 0);
  }

void sub_10001D1A4(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10001B228(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_10001DB2C();
      goto LABEL_14;
    }

    sub_10001EF2C(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    unint64_t v13 = sub_100021464();
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void sub_10001D318()
{
}

void sub_10001D324()
{
}

void *sub_10001D330()
{
  uint64_t v1 = v0;
  sub_100003B20(&qword_10010B710);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    void *v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

LABEL_30:
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

      v36 += 40;
      if (!--v26) {
        goto LABEL_31;
      }
    }

    if (v25) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }

  sub_100021DDC();
  uint64_t v0 = v71;
  sub_100022218(v71, (uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  BOOL v30 = *(void *)(v14 + 8);
  ((void (*)(char *, uint64_t))v30)(v70, v13);
  BOOL v45 = sub_10000C1E0();
  uint64_t v46 = AssetCost.onDeviceMemory.getter(v45);
  uint64_t v24 = v46;
  uint64_t v10 = v72;
  uint64_t v47 = AssetCost.onDeviceMemory.getter(v46);
  unint64_t v18 = (char *)(v47 - (void)v10);
  if (qword_10010B1F0 == -1) {
    goto LABEL_33;
  }
LABEL_41:
  swift_once(&qword_10010B1F0, sub_1000BD7F0);
LABEL_33:
  uint64_t v48 = sub_10000BF6C();
  sub_100003BA0(v48, (uint64_t)qword_10010F3D8);
  uint64_t v49 = v69;
  uint64_t v50 = sub_10000BD20(v69);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  int64_t v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    int64_t v53 = sub_10000BCF4(22LL);
    uint64_t v54 = sub_10000BCF4(32LL);
    uint64_t v76 = v18;
    uint64_t v55 = v54;
    uint64_t v78 = v54;
    *(_DWORD *)int64_t v53 = 136315394;
    int v75 = v53 + 4;
    char v56 = v49;
    unint64_t v57 = sub_10000BE28();
    sub_100021AD0(&qword_10010B420, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    char v59 = dispatch thunk of CustomStringConvertible.description.getter(v57, v58);
    sub_1000D0F98(v59, v60);
    uint64_t v77 = v61;
    uint64_t v62 = sub_1000D0F8C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, v63);
    sub_10000BCDC(v56);
    sub_10000BD28();
    *(_WORD *)(v53 + 12) = 2048;
    uint64_t v77 = v76;
    uint64_t v64 = sub_1000D0F8C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v65);
    sub_10000BFDC( (void *)&_mh_execute_header,  v51,  v52,  "Defering execution group %s: would go over budget by %lluKB",  (uint8_t *)v53);
    sub_100021F38(v55);
    sub_10000BCC4(v55);
    int v66 = v53;
    uint64_t v10 = v72;
    sub_10000BCC4(v66);

    uint64_t v67 = v71;
    goto LABEL_37;
  }

  sub_10000BCDC(v49);

LABEL_36:
  uint64_t v67 = v0;
LABEL_37:
  ((void (*)(uint64_t, uint64_t))v30)(v67, v13);
  return v24 <= (unint64_t)v10;
}

void sub_10001D4E0()
{
}

void sub_10001D4EC()
{
  uint64_t v6 = v0;
  sub_100003B20(v7);
  uint64_t v8 = sub_1000228F8();
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    sub_10000BF84();
    *uint64_t v6 = v8;
    sub_100022108();
    return;
  }

  int64_t v9 = (void *)sub_100022140();
  if (v12) {
    BOOL v13 = (unint64_t)v9 >= v11;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    sub_100022DB8(v9, v10);
  }
  sub_100021EC0();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_1000221C4();
  while (1)
  {
    uint64_t v17 = *(void *)(*(void *)(v1 + 48) + 8 * v14);
    *(void *)(*(void *)(v8 + 48) + 8 * vsub_100006F7C(v0 + 14) = v17;
    swift_retain(v17);
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v15 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*(void *)(v2 + 8 * v15))
    {
      uint64_t v4 = v15 + 1;
      if (v15 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*(void *)(v2 + 8 * v4))
      {
        uint64_t v4 = v15 + 2;
        if (v15 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*(void *)(v2 + 8 * v4)) {
          break;
        }
      }
    }

void sub_10001D5EC()
{
  uint64_t v6 = v0;
  sub_100003B20(&qword_10010B7C8);
  uint64_t v7 = sub_1000228F8();
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    sub_10000BF84();
    *uint64_t v6 = v7;
    sub_100022108();
    return;
  }

  uint64_t v8 = (void *)sub_100022140();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    sub_100022DB8(v8, v9);
  }
  sub_100021EC0();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_1000221C4();
  while (1)
  {
    uint64_t v16 = *(void *)(v1 + 48) + 16 * v13;
    uint64_t v17 = *(void *)v16;
    LODWORD(v16) = *(_DWORD *)(v16 + 8);
    uint64_t v18 = *(void *)(v7 + 48) + 16 * v13;
    *(void *)uint64_t v18 = v17;
    *(_DWORD *)(v18 + 8) = v16;
    swift_retain();
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v14 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*(void *)(v2 + 8 * v14))
    {
      uint64_t v4 = v14 + 1;
      if (v14 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*(void *)(v2 + 8 * v4))
      {
        uint64_t v4 = v14 + 2;
        if (v14 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*(void *)(v2 + 8 * v4)) {
          break;
        }
      }
    }

void sub_10001D704()
{
}

void sub_10001D718()
{
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  v10(0LL);
  sub_100022A00();
  __chkstk_darwin(v11);
  sub_100022368();
  uint64_t v12 = sub_1000223DC();
  if (!*(void *)(v8 + 16))
  {
    sub_10000C1F0();
LABEL_28:
    uint64_t *v9 = v12;
    sub_100007448();
    return;
  }

  uint64_t v13 = (void *)sub_100021E20();
  if (v16) {
    BOOL v17 = (unint64_t)v13 >= v15;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    sub_1000226E0(v13, v14);
  }
  sub_100021D20();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_9:
  sub_100022240();
  while (1)
  {
    uint64_t v21 = *(void *)(v3 + 72) * v18;
    sub_100022218(v1, *(void *)(v8 + 48) + v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    sub_100022218(*(void *)(v12 + 48) + v21, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    if (v6) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v19 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v4) {
      goto LABEL_26;
    }
    ++v5;
    if (!*(void *)(v2 + 8 * v19))
    {
      uint64_t v5 = v19 + 1;
      if (v19 + 1 >= v4) {
        goto LABEL_26;
      }
      if (!*(void *)(v2 + 8 * v5))
      {
        uint64_t v5 = v19 + 2;
        if (v19 + 2 >= v4) {
          goto LABEL_26;
        }
        if (!*(void *)(v2 + 8 * v5)) {
          break;
        }
      }
    }

void sub_10001D870()
{
  uint64_t v8 = v7;
  unint64_t v10 = (uint64_t (*)(void))v9;
  uint64_t v11 = v0;
  v9(0LL);
  sub_100022A00();
  __chkstk_darwin(v12);
  sub_100022368();
  uint64_t v13 = sub_1000223DC();
  if (!*(void *)(v8 + 16))
  {
    sub_10000C1F0();
LABEL_28:
    *uint64_t v11 = v13;
    sub_100007448();
    return;
  }

  uint64_t v14 = (void *)sub_100021E20();
  if (v17) {
    BOOL v18 = (unint64_t)v14 >= v16;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18) {
    sub_1000226E0(v14, v15);
  }
  sub_100021D20();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_9:
  sub_100022240();
  while (1)
  {
    uint64_t v22 = *(void *)(v3 + 72) * v19;
    sub_100022930();
    sub_100021A5C(v23, v24, v25);
    sub_100021AB0(v1, *(void *)(v13 + 48) + v22, v10);
    if (v6) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v20 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v4) {
      goto LABEL_26;
    }
    ++v5;
    if (!*(void *)(v2 + 8 * v20))
    {
      uint64_t v5 = v20 + 1;
      if (v20 + 1 >= v4) {
        goto LABEL_26;
      }
      if (!*(void *)(v2 + 8 * v5))
      {
        uint64_t v5 = v20 + 2;
        if (v20 + 2 >= v4) {
          goto LABEL_26;
        }
        if (!*(void *)(v2 + 8 * v5)) {
          break;
        }
      }
    }

void sub_10001D9C0()
{
}

void sub_10001D9D4()
{
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  sub_100003B20(v10);
  sub_1000226EC();
  __chkstk_darwin(v11);
  sub_100022368();
  uint64_t v12 = sub_1000223DC();
  if (!*(void *)(v8 + 16))
  {
    sub_10000C1F0();
LABEL_28:
    uint64_t *v9 = v12;
    sub_100007448();
    return;
  }

  uint64_t v13 = (void *)sub_100021E20();
  if (v16) {
    BOOL v17 = (unint64_t)v13 >= v15;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    sub_1000226E0(v13, v14);
  }
  sub_100021D20();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_9:
  sub_100022240();
  while (1)
  {
    uint64_t v21 = *(void *)(v3 + 72) * v18;
    sub_100022218(v1, *(void *)(v8 + 48) + v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    sub_100022218(*(void *)(v12 + 48) + v21, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    if (v6) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v19 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v4) {
      goto LABEL_26;
    }
    ++v5;
    if (!*(void *)(v2 + 8 * v19))
    {
      uint64_t v5 = v19 + 1;
      if (v19 + 1 >= v4) {
        goto LABEL_26;
      }
      if (!*(void *)(v2 + 8 * v5))
      {
        uint64_t v5 = v19 + 2;
        if (v19 + 2 >= v4) {
          goto LABEL_26;
        }
        if (!*(void *)(v2 + 8 * v5)) {
          break;
        }
      }
    }

void sub_10001DB2C()
{
  uint64_t v1 = v0;
  sub_100003B20(&qword_10010B8D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id v21 = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_10001DCD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B710);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    BOOL v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *BOOL v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

void sub_10001DF7C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = (int *)v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = v1;
  uint64_t v6 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B7E0);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v6, v7, 0LL);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16))
  {
    swift_release(v6);
LABEL_32:
    *uint64_t v41 = v9;
    return;
  }

  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v11 = *(void *)(v6 + 56);
  uint64_t v42 = v6 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v44 = v8 + 56;
  swift_retain(v6);
  int64_t v14 = 0LL;
  unint64_t v15 = type metadata accessor for ModelCatalogAsset;
  if (!v13) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    uint64_t v21 = *(void *)(v6 + 48);
    uint64_t v48 = *(void *)(v45 + 72);
    sub_100021A5C(v21 + v48 * i, (uint64_t)v5, v15);
    Hasher.init(_seed:)(v49, *(void *)(v9 + 40));
    uint64_t v22 = *v5;
    uint64_t v23 = v5[1];
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v49, v22, v23);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = v5[2];
    Hasher._combine(_:)(*(void *)(v24 + 16));
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      unint64_t v47 = v13;
      int64_t v26 = v14;
      uint64_t v27 = v9;
      BOOL v28 = v15;
      uint64_t v29 = v6;
      swift_bridgeObjectRetain(v24);
      BOOL v30 = (void *)(v24 + 40);
      do
      {
        uint64_t v31 = *(v30 - 1);
        uint64_t v32 = *v30;
        swift_bridgeObjectRetain(*v30);
        String.hash(into:)(v49, v31, v32);
        swift_bridgeObjectRelease(v32);
        v30 += 2;
        --v25;
      }

      while (v25);
      swift_bridgeObjectRelease(v24);
      uint64_t v6 = v29;
      unint64_t v15 = v28;
      uint64_t v9 = v27;
      int64_t v14 = v26;
      unint64_t v13 = v47;
    }

    uint64_t v33 = v5[3];
    swift_bridgeObjectRetain(v33);
    sub_10004F648((uint64_t)v49, v33);
    swift_bridgeObjectRelease(v33);
    uint64_t v34 = v46;
    uint64_t v35 = type metadata accessor for AssetCost(0LL);
    sub_100021AD0(&qword_10010B7E8, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
    dispatch thunk of Hashable.hash(into:)(v49, v35, v36);
    Hasher._combine(_:)(*((_BYTE *)v5 + v34[8]));
    Hasher._combine(_:)(*((_BYTE *)v5 + v34[9]));
    Hasher._combine(_:)(*((_BYTE *)v5 + v34[10]));
    Swift::Int v37 = Hasher._finalize()();
    uint64_t v38 = v44;
    unint64_t v39 = _HashTable.nextHole(atOrAfter:)(v37 & ~(-1LL << *(_BYTE *)(v9 + 32)), v44, ~(-1LL << *(_BYTE *)(v9 + 32)));
    *(void *)(v38 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v39;
    sub_100021AB0((uint64_t)v5, *(void *)(v9 + 48) + v39 * v48, v15);
    ++*(void *)(v9 + 16);
    if (v13) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v18 >= v43) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v42 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v19 = *(void *)(v42 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v19 = *(void *)(v42 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

void sub_10001E350( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  a31 = v33;
  a32 = v34;
  uint64_t v36 = v35;
  uint64_t v37 = *v32;
  sub_1000224D0(v38, v39);
  uint64_t v40 = sub_100022310(v37);
  if (!*(void *)(v37 + 16))
  {
    sub_10000C1F0();
LABEL_30:
    *uint64_t v32 = v40;
    sub_1000222A8();
    return;
  }

  sub_100022404();
  uint64_t v41 = v37 + 56;
  sub_100022BC0();
  unint64_t v44 = v43 & v42;
  int64_t v61 = (unint64_t)(v45 + 63) >> 6;
  swift_retain(v37);
  int64_t v49 = 0LL;
  if (!v44) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v50 = __clz(__rbit64(v44));
  v44 &= v44 - 1;
  for (unint64_t i = v50 | (v49 << 6); ; unint64_t i = __clz(__rbit64(v53)) + (v49 << 6))
  {
    uint64_t v55 = *(void *)(*(void *)(v37 + 48) + 8 * i);
    sub_1000227A0(*(void *)(v40 + 40), v46, v47, v48);
    sub_10000C0A0();
    v36(&a12);
    sub_100022844();
    sub_1000225AC();
    if (v56)
    {
      sub_100021D9C();
      while (1)
      {
        sub_1000223EC();
        if (v56)
        {
          if ((v58 & 1) != 0) {
            break;
          }
        }

        sub_1000227C4();
        if (!v56)
        {
          sub_100021D88();
          goto LABEL_26;
        }
      }

      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    sub_100021DB0();
LABEL_26:
    sub_1000222D8(v57);
    *(void *)(v60 + 8 * v59) = v55;
    sub_10002202C();
    if (v44) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v52 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      goto LABEL_32;
    }
    if (v52 >= v61) {
      goto LABEL_28;
    }
    unint64_t v53 = *(void *)(v41 + 8 * v52);
    ++v49;
    if (!v53)
    {
      int64_t v49 = v52 + 1;
      if (v52 + 1 >= v61) {
        goto LABEL_28;
      }
      unint64_t v53 = *(void *)(v41 + 8 * v49);
      if (!v53)
      {
        int64_t v49 = v52 + 2;
        if (v52 + 2 >= v61) {
          goto LABEL_28;
        }
        unint64_t v53 = *(void *)(v41 + 8 * v49);
        if (!v53) {
          break;
        }
      }
    }

LABEL_33:
  __break(1u);
}

  __break(1u);
}

    sub_10000BCDC(v46);
    swift_release(v53);
    uint64_t v2 = v47;
  }

  else
  {
    sub_10000C030();
    uint64_t v43 = sub_100022418();
    sub_100083EEC(v43, v44, (uint64_t)sub_100053510);
  }

  v55[0] = (uint64_t)sub_100086014();
  sub_100083FA4(v55, (uint64_t (*)(uint64_t, uint64_t))sub_10005363C);
  if (v2) {
    goto LABEL_38;
  }
  sub_100021DDC();
  sub_100007448();
}

  __break(1u);
}

void sub_10001E52C()
{
  uint64_t v33 = v2;
  uint64_t v34 = v3;
  uint64_t v4 = v0;
  uint64_t v7 = sub_100022908(v5, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = *v0;
  sub_100022790();
  uint64_t v12 = sub_100022310(v11);
  if (!*(void *)(v11 + 16))
  {
    swift_release(v11);
LABEL_32:
    *uint64_t v4 = v12;
    sub_100007448();
    return;
  }

  sub_100022404();
  BOOL v30 = v0;
  uint64_t v31 = v11 + 56;
  sub_100022484();
  uint64_t v32 = v13;
  uint64_t v14 = v12 + 56;
  sub_10000C20C();
  uint64_t v15 = 0LL;
  if (!v1) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100022744();
  while (1)
  {
    uint64_t v21 = *(void *)(v8 + 72);
    sub_100022824( (uint64_t)v10,  *(void *)(v11 + 48) + v21 * v16,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
    sub_100022A90();
    sub_1000225DC(v22);
    sub_100021F40();
    sub_10002277C();
    if (v23)
    {
      sub_100021D9C();
      while (1)
      {
        sub_1000223EC();
        if (v23)
        {
          if ((v24 & 1) != 0) {
            break;
          }
        }

        if (v25 == v26) {
          uint64_t v25 = 0LL;
        }
        if (*(void *)(v14 + 8 * v25) != -1LL)
        {
          sub_100021D88();
          goto LABEL_28;
        }
      }

      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    sub_100021DB0();
LABEL_28:
    sub_100022ADC();
    *(void *)(v14 + v27) |= v28;
    sub_100022824( *(void *)(v12 + 48) + v29 * v21,  (uint64_t)v10,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    sub_10002202C();
    if (v1) {
      goto LABEL_3;
    }
LABEL_4:
    if (__OFADD__(v15, 1LL)) {
      goto LABEL_34;
    }
    if (v15 + 1 >= v32) {
      goto LABEL_30;
    }
    sub_100022D50();
    uint64_t v15 = v17;
    if (!v18)
    {
      uint64_t v15 = v17 + 1;
      if (v17 + 1 >= v32) {
        goto LABEL_30;
      }
      if (!*(void *)(v31 + 8 * v15))
      {
        uint64_t v15 = v17 + 2;
        if (v17 + 2 >= v32) {
          goto LABEL_30;
        }
        if (!*(void *)(v31 + 8 * v15)) {
          break;
        }
      }
    }

void sub_10001E74C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B7C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return;
  }

  uint64_t v31 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v32 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v7 << 6))
  {
    uint64_t v18 = *(void *)(v3 + 48) + 16 * i;
    Swift::UInt v19 = *(void *)v18;
    int v20 = *(_DWORD *)(v18 + 8);
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    Hasher._combine(_:)(v19);
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = *(void *)(v6 + 48) + 16 * v25;
    *(void *)uint64_t v30 = v19;
    *(_DWORD *)(v30 + 8) = v20;
    ++*(void *)(v6 + 16);
    swift_retain();
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= v32) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      int64_t v7 = v15 + 1;
      if (v15 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v8 + 8 * v7);
      if (!v16)
      {
        int64_t v7 = v15 + 2;
        if (v15 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16) {
          break;
        }
      }
    }

void sub_10001E9F0()
{
  int64_t v32 = v3;
  uint64_t v33 = v4;
  uint64_t v6 = sub_1000224D0(v5, v3);
  sub_1000224A4();
  __chkstk_darwin(v7);
  sub_100021FA4();
  uint64_t v8 = *v0;
  sub_100022790();
  uint64_t v9 = sub_100022310(v8);
  if (!*(void *)(v8 + 16))
  {
    swift_release(v8);
LABEL_30:
    uint64_t *v0 = v9;
    sub_100007448();
    return;
  }

  sub_100022404();
  uint64_t v30 = v8 + 56;
  sub_100022AF0();
  uint64_t v12 = v11 & v10;
  int64_t v31 = (unint64_t)(v13 + 63) >> 6;
  sub_10000C0A0();
  int64_t v14 = 0LL;
  if (!v12) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100022B68();
  for (int64_t i = v15 | (v14 << 6); ; int64_t i = v21 + (v14 << 6))
  {
    uint64_t v22 = *(void *)(v2 + 72);
    sub_1000225D4(v1, *(void *)(v8 + 48) + v22 * i, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    sub_1000071C0(v33, v32);
    uint64_t v23 = sub_100022C08();
    dispatch thunk of Hashable._rawHashValue(seed:)(v23, v6, v24);
    sub_100021F40();
    sub_10002277C();
    if (v25)
    {
      sub_100021D9C();
      while (1)
      {
        sub_1000223EC();
        if (v25)
        {
          if ((v27 & 1) != 0) {
            break;
          }
        }

        sub_1000227C4();
        if (!v25)
        {
          sub_100021D88();
          goto LABEL_26;
        }
      }

      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    sub_100021DB0();
LABEL_26:
    sub_1000222D8(v26);
    sub_1000225D4(v29 + v28 * v22, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    sub_10002202C();
    if (v12) {
      goto LABEL_3;
    }
LABEL_4:
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_32;
    }
    if (v14 + 1 >= v31) {
      goto LABEL_28;
    }
    sub_100022C38();
    int64_t v14 = v17;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v31) {
        goto LABEL_28;
      }
      if (!*(void *)(v30 + 8 * v14))
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v31) {
          goto LABEL_28;
        }
        if (!*(void *)(v30 + 8 * v14)) {
          break;
        }
      }
    }

void sub_10001EC14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100003B20(&qword_10010BA30);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    swift_release(v7);
LABEL_36:
    *uint64_t v2 = v9;
    return;
  }

  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  int64_t v31 = v2;
  uint64_t v32 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v33 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  swift_retain();
  int64_t v15 = 0LL;
  if (!v13) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    uint64_t v21 = *(void *)(v34 + 72);
    sub_100021A5C( *(void *)(v7 + 48) + v21 * i,  (uint64_t)v6,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    Hasher.init(_seed:)(v36, *(void *)(v9 + 40));
    UUID.hash(into:)(v36);
    Swift::Int v22 = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    sub_100021AB0( (uint64_t)v6,  *(void *)(v9 + 48) + v26 * v21,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    ++*(void *)(v9 + 16);
    if (v13) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      goto LABEL_38;
    }
    if (v18 >= v33) {
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v18);
    ++v15;
    if (!v19)
    {
      int64_t v15 = v18 + 1;
      if (v18 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v32 + 8 * v15);
      if (!v19)
      {
        int64_t v15 = v18 + 2;
        if (v18 + 2 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v32 + 8 * v15);
        if (!v19) {
          break;
        }
      }
    }

void sub_10001EF2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100003B20(&qword_10010B8D0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    swift_release();
LABEL_37:
    *uint64_t v2 = v6;
    return;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  swift_retain();
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    Swift::Int v19 = *(void *)(v6 + 40);
    id v20 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    Swift::Int v21 = NSObject._rawHashValue(seed:)(v19);
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    *(void *)(*(void *)(v6 + 48) + 8 * vsub_100006F7C(v0 + 25) = v20;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v11) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v11) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v11) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_10001F1A0(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1LL << v5) + 63) >> 6;
  uint64_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2LL);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    unint64_t v10 = (unint64_t *)((char *)&v22 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017524(0LL, v7, v10);
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = sub_10001F6AC(v10, v7, a1, a2);
    uint64_t v12 = swift_release(a1);
    if (v2) {
      swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  else
  {
    id v20 = (unint64_t *)swift_slowAlloc(v8, -1LL);
    sub_100017524(0LL, v7, v20);
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = sub_10001F6AC(v20, v7, a1, a2);
    swift_release(a1);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  swift_bridgeObjectRelease(a2);
  return v11;
}

uint64_t sub_10001F36C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(_BYTE *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1LL << v6) + 63) >> 6;
  uint64_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n(a2, 2LL);
  if (v7 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v11 = (unint64_t *)((char *)&v23 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017524(0LL, v8, v11);
    swift_retain(a2);
    uint64_t v12 = sub_10001FAD0(v11, v8, a1, a2);
    uint64_t v13 = swift_release(a1);
    if (v3) {
      swift_willThrow(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    swift_release_n(a2, 2LL);
  }

  else
  {
    Swift::Int v21 = (unint64_t *)swift_slowAlloc(v9, -1LL);
    sub_100017524(0LL, v8, v21);
    swift_retain(a2);
    uint64_t v12 = sub_10001FAD0(v21, v8, a1, a2);
    swift_release(a1);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_release_n(a2, 2LL);
  }

  swift_release(a2);
  return v12;
}

uint64_t sub_10001F538(uint64_t isStackAllocationSafe, int a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  uint64_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    unint64_t v10 = (unint64_t *)((char *)&v22 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017524(0LL, v8, v10);
    uint64_t v11 = sub_10002000C(v10, v8, v4, a2);
    uint64_t v12 = swift_release(v4);
    if (v2) {
      swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }

  else
  {
    uint64_t v20 = (unint64_t *)swift_slowAlloc(v9, -1LL);
    sub_100017524(0LL, v8, v20);
    uint64_t v11 = sub_10002000C(v20, v8, v4, a2);
    swift_release(v4);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  return v11;
}

uint64_t sub_10001F6AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a2;
  int64_t v49 = a1;
  uint64_t v6 = sub_100003B20(&qword_10010B228);
  uint64_t v62 = *(void **)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v47 - v10;
  uint64_t v12 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = a3;
  uint64_t v56 = 0LL;
  int64_t v17 = 0LL;
  uint64_t v20 = *(void *)(a3 + 56);
  uint64_t v19 = a3 + 56;
  uint64_t v18 = v20;
  uint64_t v21 = 1LL << *(_BYTE *)(v19 - 24);
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  else {
    uint64_t v22 = -1LL;
  }
  unint64_t v23 = v22 & v18;
  uint64_t v50 = v19;
  int64_t v51 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v60 = a4 + 56;
  uint64_t v61 = a4;
  unint64_t v24 = v11;
  uint64_t v53 = v13;
  uint64_t v54 = result;
  int64_t v52 = v16;
  do
  {
    while (1)
    {
      if (v23)
      {
        uint64_t v58 = (v23 - 1) & v23;
        unint64_t v25 = __clz(__rbit64(v23)) | (v17 << 6);
      }

      else
      {
        int64_t v26 = v17 + 1;
        if (__OFADD__(v17, 1LL)) {
          goto LABEL_32;
        }
        if (v26 >= v51)
        {
LABEL_31:
          uint64_t v45 = v55;
          swift_retain(v55);
          uint64_t v46 = sub_10002024C(v49, v48, v56, v45);
          swift_bridgeObjectRelease(a4);
          return v46;
        }

        unint64_t v27 = *(void *)(v50 + 8 * v26);
        ++v17;
        if (!v27)
        {
          int64_t v17 = v26 + 1;
          if (v26 + 1 >= v51) {
            goto LABEL_31;
          }
          unint64_t v27 = *(void *)(v50 + 8 * v17);
          if (!v27)
          {
            int64_t v17 = v26 + 2;
            if (v26 + 2 >= v51) {
              goto LABEL_31;
            }
            unint64_t v27 = *(void *)(v50 + 8 * v17);
            if (!v27)
            {
              int64_t v28 = v26 + 3;
              if (v28 >= v51) {
                goto LABEL_31;
              }
              unint64_t v27 = *(void *)(v50 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  int64_t v17 = v28 + 1;
                  if (__OFADD__(v28, 1LL)) {
                    goto LABEL_33;
                  }
                  if (v17 >= v51) {
                    goto LABEL_31;
                  }
                  unint64_t v27 = *(void *)(v50 + 8 * v17);
                  ++v28;
                  if (v27) {
                    goto LABEL_20;
                  }
                }
              }

              int64_t v17 = v28;
            }
          }
        }

uint64_t sub_10001FAD0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = a2;
  uint64_t v74 = a4;
  int v66 = a1;
  uint64_t v5 = sub_100003B20(&qword_10010B728);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v72 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v64 - v12;
  uint64_t v67 = 0LL;
  int64_t v16 = 0LL;
  uint64_t v73 = a3;
  uint64_t v19 = *(void *)(a3 + 56);
  uint64_t v18 = a3 + 56;
  uint64_t v17 = v19;
  uint64_t v20 = 1LL << *(_BYTE *)(v18 - 24);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v17;
  uint64_t v70 = v18;
  int64_t v71 = (unint64_t)(v20 + 63) >> 6;
  *(void *)&__int128 v14 = 136315138LL;
  __int128 v69 = v14;
  uint64_t v68 = (char *)&type metadata for Any + 8;
  int v75 = v7;
  uint64_t v76 = (char *)&v64 - v12;
  uint64_t v78 = v13;
  while (v22)
  {
    unint64_t v23 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    unint64_t v24 = v23 | (v16 << 6);
LABEL_20:
    int64_t v28 = (uint64_t (*)(char *, unint64_t, uint64_t))v78[2];
    uint64_t v29 = v8;
    uint64_t v30 = v28(v15, *(void *)(v73 + 48) + v78[9] * v24, v8);
    Assertion.DaemonRep.policy.getter(v30);
    uint64_t v32 = v31;
    uint64_t v33 = *(void *)(v74 + 296);
    uint64_t v34 = *(void *)(v33 + 16);
    unint64_t v77 = v24;
    if (v34)
    {
      swift_bridgeObjectRetain(v33);
      unint64_t v35 = sub_1000165C8();
      if ((v36 & 1) != 0)
      {
        unint64_t v37 = v35;
        uint64_t v38 = *(void *)(v33 + 56);
        uint64_t v39 = type metadata accessor for Policy(0LL);
        uint64_t v40 = *(void *)(v39 - 8);
        uint64_t v41 = v38 + *(void *)(v40 + 72) * v37;
        uint64_t v7 = v75;
        uint64_t v15 = v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v75, v41, v39);
        uint64_t v42 = (uint64_t)v7;
        uint64_t v43 = 0LL;
      }

      else
      {
        uint64_t v39 = type metadata accessor for Policy(0LL);
        uint64_t v7 = v75;
        uint64_t v42 = (uint64_t)v75;
        uint64_t v43 = 1LL;
      }

      sub_100005FB0(v42, v43, 1LL, v39);
      swift_bridgeObjectRelease(v32);
      uint64_t v44 = v33;
    }

    else
    {
      uint64_t v39 = type metadata accessor for Policy(0LL);
      sub_100005FB0((uint64_t)v7, 1LL, 1LL, v39);
      uint64_t v44 = v32;
    }

    swift_bridgeObjectRelease(v44);
    type metadata accessor for Policy(0LL);
    int v45 = sub_1000060B4((uint64_t)v7, 1LL, v39);
    sub_1000212DC((uint64_t)v7, &qword_10010B728);
    if (v45 == 1)
    {
      unint64_t v77 = v16;
      if (qword_10010B088 != -1) {
        swift_once(&qword_10010B088, sub_10000CB7C);
      }
      uint64_t v46 = type metadata accessor for Logger(0LL);
      sub_100003BA0(v46, (uint64_t)qword_10010B4E0);
      uint64_t v47 = v72;
      uint64_t v48 = v15;
      uint64_t v49 = v29;
      uint64_t v50 = v28(v72, (unint64_t)v48, v29);
      int64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc(12LL, -1LL);
        uint64_t v54 = swift_slowAlloc(32LL, -1LL);
        uint64_t v79 = v54;
        *(_DWORD *)uint64_t v53 = v69;
        uint64_t v55 = Assertion.DaemonRep.policy.getter(v54);
        uint64_t v57 = v56;
        sub_100015EF8(v55, v56, &v79);
        *(void *)(v53 + 4) = v58;
        swift_bridgeObjectRelease(v57);
        int64_t v59 = (void (*)(char *, uint64_t))v78[1];
        v59(v47, v49);
        _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Cannot restore assertion with non-existent policy: %s",  (uint8_t *)v53,  0xCu);
        swift_arrayDestroy(v54, 1LL);
        swift_slowDealloc(v54, -1LL, -1LL);
        uint64_t v60 = v53;
        uint64_t v7 = v75;
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {
        int64_t v59 = (void (*)(char *, uint64_t))v78[1];
        v59(v47, v49);
      }

      uint64_t v8 = v49;
      uint64_t v15 = v76;
      int64_t v16 = v77;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v76, v8);
    }

    else
    {
      uint64_t v8 = v29;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v78[1])(v15, v29);
      *(unint64_t *)((char *)v66 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v77;
      if (__OFADD__(v67++, 1LL)) {
        goto LABEL_39;
      }
    }
  }

  int64_t v25 = v16 + 1;
  if (__OFADD__(v16, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v25 >= v71) {
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v70 + 8 * v25);
  ++v16;
  if (v26) {
    goto LABEL_19;
  }
  int64_t v16 = v25 + 1;
  if (v25 + 1 >= v71) {
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v70 + 8 * v16);
  if (v26) {
    goto LABEL_19;
  }
  int64_t v16 = v25 + 2;
  if (v25 + 2 >= v71) {
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v70 + 8 * v16);
  if (v26)
  {
LABEL_19:
    unint64_t v22 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v16 << 6);
    goto LABEL_20;
  }

  int64_t v27 = v25 + 3;
  if (v27 >= v71)
  {
LABEL_36:
    uint64_t v62 = v73;
    swift_retain(v73);
    uint64_t v63 = sub_10002024C(v66, v65, v67, v62);
    swift_release(v74);
    return v63;
  }

  unint64_t v26 = *(void *)(v70 + 8 * v27);
  if (v26)
  {
    int64_t v16 = v27;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v16 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v16 >= v71) {
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v70 + 8 * v16);
    ++v27;
    if (v26) {
      goto LABEL_19;
    }
  }

LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

    uint64_t v29 = v5;
    return sub_1000212AC(v29);
  }

  __break(1u);
  return result;
}

uint64_t sub_10002000C(unint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v25 = a2;
  unint64_t v26 = a1;
  uint64_t v6 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v11 = 0LL;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v27 = 0LL;
  uint64_t v28 = a3 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_20;
    }

    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v18 >= v29) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v29) {
        goto LABEL_24;
      }
      unint64_t v19 = *(void *)(v28 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v29) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v28 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }

LABEL_19:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_20:
    uint64_t v21 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v7 + 16))( v10,  *(void *)(a3 + 48) + *(void *)(v7 + 72) * v17,  v6);
    int v22 = Assertion.DaemonRep.acquirerPID.getter(v21);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v22 == a4)
    {
      *(unint64_t *)((char *)v26 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      if (__OFADD__(v27++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_10002024C(v26, v25, v27, a3);
      }
    }
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v29) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }

    uint64_t v9 = (v13 - 1) & v13;
    uint64_t v10 = __clz(__rbit64(v13)) + (v14 << 6);
    uint64_t v8 = v14;
LABEL_20:
    unint64_t v16 = *(unsigned int *)(*(void *)(v29 + 48) + 4 * v10);
    uint64_t v32 = v8;
    uint64_t v33 = v9;
    unint64_t v17 = [(id)objc_opt_self(RBSProcessIdentifier) identifierWithPid:v16];
    if (v17)
    {
      int64_t v18 = v17;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      int64_t v20 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v19 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v20 >= v19 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
      }
      uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
      specialized Array._endMutation()(v21);
    }

    else
    {
      if (qword_10010B0D8 != -1) {
        swift_once(&qword_10010B0D8, sub_100098AF0);
      }
      int v22 = type metadata accessor for Logger(0LL);
      unint64_t v23 = sub_100003BA0(v22, (uint64_t)qword_10010E198);
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      uint64_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        unint64_t v26 = swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)unint64_t v26 = v28;
        *(_DWORD *)(v26 + 4) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Could not get RBSProcessIdentifier for %d",  (uint8_t *)v26,  8u);
        swift_slowDealloc(v26, -1LL, -1LL);
      }
    }
  }

  __break(1u);
  return result;
}

  uint64_t v24 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask;
  uint64_t v25 = *(void *)(v4 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask);
  v0[17] = v25;
  if (v25)
  {
    sub_10000C030();
    unint64_t v26 = (void *)sub_10002287C();
    v0[18] = v26;
    sub_100003B20(&qword_10010B468);
    uint64_t v27 = sub_1000ABFAC;
  }

  else
  {
    uint64_t v28 = v0[6];
    int64_t v29 = sub_100021FC8();
    sub_10002FF3C(v28, v30, v31, v29);
    sub_1000B3968(&qword_10010ECD8, type metadata accessor for ModelCatalogProvider);
    uint64_t v32 = (void *)sub_100007460((uint64_t)&unk_100104D80, 40LL);
    uint64_t v33 = sub_1000B4148(v32);
    sub_1000B448C(v33, (uint64_t)&unk_10010ED10);
    sub_1000B4334(v34);
    unint64_t v35 = *(void *)(v4 + v24);
    v0[20] = v35;
    if (!v35)
    {
      sub_1000B4100();
      sub_10000C140();
      sub_10000BFE4();
      sub_10000C1B8();
      unint64_t v37 = (uint64_t (*)(void))sub_1000227B8();
      sub_10002FDE0(v37);
      return;
    }

    sub_10000C030();
    unint64_t v26 = (void *)sub_10002287C();
    v0[21] = v26;
    sub_100003B20(&qword_10010B468);
    uint64_t v27 = sub_1000AC038;
  }

  *unint64_t v26 = v0;
  v26[1] = v27;
  sub_1000B459C();
LABEL_24:
  sub_1000B3FF0();
}

  uint64_t v21 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask;
  int v22 = *(void *)(v2 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask);
  v0[17] = v22;
  if (v22)
  {
    sub_10000C030();
    unint64_t v23 = (void *)sub_10002287C();
    v0[18] = v23;
    sub_100003B20(&qword_10010B468);
    uint64_t v24 = sub_1000ABFAC;
  }

  else
  {
    uint64_t v25 = v0[6];
    unint64_t v26 = sub_100021FC8();
    sub_10002FF3C(v25, v27, v28, v26);
    sub_1000B3968(&qword_10010ECD8, type metadata accessor for ModelCatalogProvider);
    int64_t v29 = (void *)sub_100007460((uint64_t)&unk_100104D80, 40LL);
    uint64_t v30 = sub_1000B4148(v29);
    sub_1000B448C(v30, (uint64_t)&unk_10010ED10);
    sub_1000B4334(v31);
    uint64_t v32 = *(void *)(v2 + v21);
    v0[20] = v32;
    if (!v32)
    {
      sub_1000B4100();
      sub_10000C140();
      sub_10000BFE4();
      sub_10000C1B8();
      uint64_t v34 = (uint64_t (*)(void))sub_1000227B8();
      sub_10002FDE0(v34);
      return;
    }

    sub_10000C030();
    unint64_t v23 = (void *)sub_10002287C();
    v0[21] = v23;
    sub_100003B20(&qword_10010B468);
    uint64_t v24 = sub_1000AC038;
  }

  *unint64_t v23 = v0;
  v23[1] = v24;
  sub_1000B459C();
LABEL_24:
  sub_1000B3FF0();
}

  swift_release();
  swift_bridgeObjectRelease();
  return 0LL;
}

    uint64_t v14 = (uint64_t *)((v20 - 1) & v20);
    unint64_t v15 = __clz(__rbit64(v20)) + (v12 << 6);
    goto LABEL_20;
  }

void sub_100020238( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

uint64_t sub_10002024C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Assertion.DaemonRep(0LL);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  uint64_t v40 = v9;
  sub_100003B20(&qword_10010B248);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v12 = result;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0LL;
  uint64_t v16 = result + 56;
  uint64_t v17 = v40;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v15 << 6);
    }

    else
    {
      uint64_t v20 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_40;
      }
      if (v20 >= v39)
      {
LABEL_36:
        swift_release(a4);
        return v12;
      }

      unint64_t v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        uint64_t v15 = v20 + 1;
        if (v20 + 1 >= v39) {
          goto LABEL_36;
        }
        unint64_t v21 = v38[v15];
        if (!v21)
        {
          uint64_t v15 = v20 + 2;
          if (v20 + 2 >= v39) {
            goto LABEL_36;
          }
          unint64_t v21 = v38[v15];
          if (!v21)
          {
            uint64_t v22 = v20 + 3;
            if (v22 >= v39) {
              goto LABEL_36;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v15 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v15 >= v39) {
                  goto LABEL_36;
                }
                unint64_t v21 = v38[v15];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v15 = v22;
          }
        }
      }

void sub_100020544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
}

void sub_100020558( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  a31 = v32;
  a32 = v39;
  uint64_t v40 = v36;
  uint64_t v68 = (unint64_t *)v33;
  if (!v35)
  {
LABEL_36:
    sub_100021DDC();
    goto LABEL_37;
  }

  uint64_t v41 = v35;
  if (*(void *)(v36 + 16) == v35)
  {
LABEL_37:
    sub_1000222A8();
    return;
  }

  uint64_t v42 = v38;
  uint64_t v43 = v34;
  sub_100022BA4(v33, v34, v35, v36, v37);
  uint64_t v44 = static _SetStorage.allocate(capacity:)(v41);
  uint64_t v48 = v44;
  uint64_t v67 = v43;
  if (v43 < 1) {
    unint64_t v49 = 0LL;
  }
  else {
    unint64_t v49 = *v68;
  }
  uint64_t v50 = 0LL;
  uint64_t v51 = v44 + 56;
  while (1)
  {
    if (v49)
    {
      unint64_t v52 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      unint64_t v53 = v52 | (v50 << 6);
      goto LABEL_24;
    }

    uint64_t v54 = v50 + 1;
    if (__OFADD__(v50, 1LL)) {
      goto LABEL_40;
    }
    if (v54 >= v67) {
      goto LABEL_36;
    }
    ++v50;
    if (!v68[v54])
    {
      uint64_t v50 = v54 + 1;
      if (v54 + 1 >= v67) {
        goto LABEL_36;
      }
      if (!v68[v50])
      {
        uint64_t v50 = v54 + 2;
        if (v54 + 2 >= v67) {
          goto LABEL_36;
        }
        if (!v68[v50]) {
          break;
        }
      }
    }

LABEL_41:
  __break(1u);
}

  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

      uint64_t v121 = sub_10000C038();
      sub_10000BD28();
      sub_1000845DC(v121, v122, &a10);
      v144 = v123;
      sub_10000C04C((uint64_t)&v144, v131);
      sub_10000C1B0(v141);
      sub_1000228C4();
      sub_1000A88C8( (void *)&_mh_execute_header,  v65,  (os_log_type_t)v133,  "Session %s selected alternate inference provider %s for assets %s");
      uint64_t v124 = v132;
      sub_1000A881C();
      sub_10000BCC4(v124);
      sub_10000BCC4(v67);

      sub_1000A8690();
    }

    else
    {
      sub_10000BCDC(v46);
      sub_100030250(v63, v59[1]);

      sub_1000A8690();
      sub_10000C1B0(v27);
    }

    swift_release(v136);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_100020758()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v31 = *(void *)(type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL) - 8);
  sub_10000C240();
  __chkstk_darwin(v9);
  sub_100021FA4();
  if (!v4)
  {
    sub_100021DDC();
LABEL_38:
    sub_100007448();
    return;
  }

  if (*(void *)(v2 + 16) == v4) {
    goto LABEL_38;
  }
  sub_100003B20(&qword_10010BA30);
  uint64_t v10 = static _SetStorage.allocate(capacity:)(v4);
  uint64_t v11 = v10;
  unint64_t v29 = v8;
  uint64_t v30 = v6;
  if (v6 < 1) {
    unint64_t v12 = 0LL;
  }
  else {
    unint64_t v12 = *v8;
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = v10 + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }

    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v30)
      {
LABEL_37:
        sub_100021DDC();
        goto LABEL_38;
      }

      unint64_t v18 = v29[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v30) {
          goto LABEL_37;
        }
        unint64_t v18 = v29[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v30) {
            goto LABEL_37;
          }
          unint64_t v18 = v29[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v30) {
              goto LABEL_37;
            }
            unint64_t v18 = v29[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v30) {
                  goto LABEL_37;
                }
                unint64_t v18 = v29[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v13 = v19;
          }
        }
      }

uint64_t sub_1000209B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1000209F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003B20(&qword_10010B830);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003B20(&qword_10010B858);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = *v1;
  uint64_t v13 = v1[1];
  uint64_t v15 = v1[2];
  int64_t v14 = v1[3];
  int64_t v16 = v14;
  unint64_t v17 = v1[4];
  uint64_t v41 = v5;
  if (v17)
  {
    uint64_t v44 = v9;
    int64_t v45 = v14;
    uint64_t v42 = v15;
    uint64_t v43 = v13;
    uint64_t v18 = a1;
    uint64_t v19 = (v17 - 1) & v17;
    unint64_t v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    uint64_t v21 = *(void *)(v12 + 56);
    char v22 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v20);
    uint64_t v23 = v12;
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v26 = type metadata accessor for Policy(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))( &v11[*(int *)(v3 + 48)],  v21 + *(void *)(*(void *)(v26 - 8) + 72LL) * v20,  v26);
    *(void *)uint64_t v11 = v24;
    *((void *)v11 + sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v25;
    sub_100005FB0((uint64_t)v11, 0LL, 1LL, v3);
    uint64_t v27 = v25;
    uint64_t v12 = v23;
    swift_bridgeObjectRetain(v27);
    a1 = v18;
    uint64_t v13 = v43;
    uint64_t v9 = v44;
    uint64_t v15 = v42;
    goto LABEL_25;
  }

  int64_t v28 = v14 + 1;
  if (__OFADD__(v14, 1LL))
  {
    __break(1u);
LABEL_23:
    int64_t v16 = v10;
    goto LABEL_24;
  }

  int64_t v29 = (unint64_t)(v15 + 64) >> 6;
  if (v28 < v29)
  {
    unint64_t v30 = *(void *)(v13 + 8 * v28);
    if (v30)
    {
LABEL_7:
      uint64_t v42 = v15;
      uint64_t v43 = v13;
      uint64_t v44 = v9;
      int64_t v45 = v28;
      uint64_t v18 = a1;
      uint64_t v19 = (v30 - 1) & v30;
      unint64_t v20 = __clz(__rbit64(v30)) + (v28 << 6);
      goto LABEL_3;
    }

    int64_t v31 = v14 + 2;
    int64_t v16 = v14 + 1;
    if (v14 + 2 < v29)
    {
      unint64_t v30 = *(void *)(v13 + 8 * v31);
      if (v30)
      {
LABEL_10:
        int64_t v28 = v31;
        goto LABEL_7;
      }

      int64_t v16 = v14 + 2;
      if (v14 + 3 < v29)
      {
        unint64_t v30 = *(void *)(v13 + 8 * (v14 + 3));
        if (v30)
        {
          int64_t v28 = v14 + 3;
          goto LABEL_7;
        }

        int64_t v31 = v14 + 4;
        int64_t v16 = v14 + 3;
        if (v14 + 4 < v29)
        {
          unint64_t v30 = *(void *)(v13 + 8 * v31);
          if (v30) {
            goto LABEL_10;
          }
          int64_t v28 = v14 + 5;
          int64_t v16 = v14 + 4;
          if (v14 + 5 < v29)
          {
            unint64_t v30 = *(void *)(v13 + 8 * v28);
            if (v30) {
              goto LABEL_7;
            }
            int64_t v10 = v29 - 1;
            int64_t v32 = v14 + 6;
            while (v32 < v29)
            {
              unint64_t v30 = *(void *)(v13 + 8 * v32++);
              if (v30)
              {
                int64_t v28 = v32 - 1;
                goto LABEL_7;
              }
            }

            goto LABEL_23;
          }
        }
      }
    }
  }

uint64_t sub_100020D04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

int64_t sub_100020D40(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_100020E28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100020E68(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 9LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_100020EE8()
{
  uint64_t v1 = sub_100003B20(&qword_10010B228);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100020F60()
{
  uint64_t v0 = swift_task_alloc(dword_10010B764);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000221EC(v1);
  return sub_1000105F4(v2, v3, v4);
}

uint64_t sub_100020FC8()
{
  uint64_t v1 = sub_10002269C();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return sub_1000223CC(v0, v5, v6);
}

uint64_t sub_10002102C()
{
  uint64_t v0 = swift_task_alloc(dword_10010B784);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000221EC(v1);
  return sub_10000F3C0(v2, v3, v4);
}

uint64_t sub_100021098()
{
  uint64_t v1 = swift_task_alloc(dword_10010B79C);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_100021BE8();
  sub_100021F54();
  return sub_1000150F4(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000210EC()
{
  uint64_t v0 = swift_task_alloc(dword_10010B7AC);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_100015480(v2, v3, v4, v5, v6);
}

uint64_t sub_100021138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100021180()
{
  uint64_t v1 = *(void *)(sub_100003B20(&qword_10010B728) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = sub_100022258();
  unint64_t v6 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + v6));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  return sub_1000223CC(v0, v7 + 16, v2 | 7);
}

uint64_t sub_100021220()
{
  uint64_t v1 = swift_task_alloc(dword_10010B824);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000B5F8;
  sub_100022930();
  sub_100022084();
  return sub_10000E498(v3, v4, v5, v6, v7);
}

uint64_t sub_1000212AC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_1000212B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1000228CC(a1, a2, a3);
  sub_1000224D8(v3);
  sub_1000075C0();
}

void sub_1000212DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_1000224D0(a1, a2);
  sub_1000220F4(v2);
  sub_1000075C0();
}

uint64_t sub_100021300(uint64_t a1)
{
  return sub_100012FF0(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100021320()
{
  uint64_t v1 = swift_task_alloc(dword_10010B874);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_100021BE8();
  sub_100021F54();
  return sub_10001468C(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100021374()
{
  uint64_t v0 = swift_task_alloc(dword_10010B884);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_100014D54(v2, v3, v4, v5, v6);
}

uint64_t sub_1000213C4()
{
  uint64_t v1 = swift_task_alloc(dword_10010B8A4);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_100021BE8();
  sub_100021F54();
  return sub_100014B4C(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100021418()
{
  uint64_t v0 = swift_task_alloc(dword_10010B8B4);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_10001504C(v2, v3, v4, v5, v6);
}

unint64_t sub_100021464()
{
  unint64_t result = qword_10010B8C0;
  if (!qword_10010B8C0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___RBSProcessIdentifier);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10010B8C0);
  }

  return result;
}

unint64_t sub_1000214A0()
{
  unint64_t result = qword_10010B8C8;
  if (!qword_10010B8C8)
  {
    unint64_t v1 = sub_100021464();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10010B8C8);
  }

  return result;
}

uint64_t sub_1000214E4()
{
  uint64_t v1 = swift_task_alloc(dword_10010B8EC);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_100021BE8();
  sub_100021F54();
  return sub_100014A7C(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100021538()
{
  uint64_t v0 = swift_task_alloc(dword_10010B8FC);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_100014FA8(v2, v3, v4, v5, v6);
}

uint64_t sub_100021584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  int64_t v14 = (void *)swift_task_alloc(dword_10010B944);
  *(void *)(v7 + 24) = v14;
  *int64_t v14 = v7;
  v14[1] = sub_10002160C;
  return sub_1000151D4(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10002160C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v7 = v4;
  uint64_t v5 = *v2;
  sub_10000BE20(*(void *)(v4 + 24), &v7);
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100021668()
{
  uint64_t v1 = swift_task_alloc(dword_10010B91C);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  uint64_t v3 = sub_100021BE8();
  return sub_100022098(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000216BC()
{
  uint64_t v0 = swift_task_alloc(dword_10010B92C);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_1000155B0(v2, v3, v4, v5, v6);
}

uint64_t sub_100021708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  int64_t v14 = (void *)swift_task_alloc(dword_10010B974);
  *(void *)(v7 + 24) = v14;
  *int64_t v14 = v7;
  v14[1] = sub_100021790;
  return sub_100014804(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100021790(char a1)
{
  uint64_t v4 = *(_BYTE **)(v3 + 16);
  sub_10000BCE4(*(void *)(v3 + 24));
  *uint64_t v4 = a1;
  return sub_10000743C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000217C8()
{
  uint64_t v1 = swift_task_alloc(dword_10010B954);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  uint64_t v3 = sub_100021BE8();
  return sub_100022098(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10002181C()
{
  uint64_t v0 = swift_task_alloc(dword_10010B964);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_100014E3C(v2, v3, v4, v5, v6);
}

uint64_t sub_100021868(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000218B0()
{
  uint64_t v1 = swift_task_alloc(dword_10010B9EC);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_100021BE8();
  sub_100021F54();
  return sub_1000153A0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100021904()
{
  uint64_t v0 = swift_task_alloc(dword_10010B9FC);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_10001574C(v2, v3, v4, v5, v6);
}

uint64_t sub_100021954()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10002198C()
{
  uint64_t v1 = swift_task_alloc(dword_10010BA14);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_100021BE8();
  sub_100021F54();
  return sub_1000149AC(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000219E0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100021A10()
{
  uint64_t v0 = swift_task_alloc(dword_10010BA24);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_100014F04(v2, v3, v4, v5, v6);
}

void sub_100021A5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_100022734(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  sub_1000075C0();
}

void sub_100021A90(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = sub_100022A84(a1, a2);
  sub_1000220F4(v2);
  sub_1000075C0();
}

void sub_100021AB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100022734(a1, a2, a3);
  sub_1000224D8(v3);
  sub_1000075C0();
}

void sub_100021AD0(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_1000075DC(v3), a1);
  }

  sub_1000075C0();
}

uint64_t sub_100021B04()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100021B30()
{
  uint64_t v0 = swift_task_alloc(dword_10010BB1C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000221EC(v1);
  return sub_100010A78(v2, v3, v4);
}

uint64_t sub_100021B80(uint64_t a1)
{
  return sub_100021300(a1) & 1;
}

uint64_t sub_100021BA0()
{
  return swift_task_alloc(*(unsigned int *)(*(void *)(v0 + 40) + 4LL));
}

uint64_t sub_100021BB8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_100021BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

  ;
}

uint64_t sub_100021BE8()
{
  return v0;
}

uint64_t sub_100021C0C()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_100021C1C()
{
  return sub_100005FB0(v0, 1LL, 1LL, v1);
}

uint64_t sub_100021C30(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t sub_100021C48(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

  ;
}

uint64_t sub_100021C6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_100021C84()
{
  return swift_retain_n(v0, 2LL);
}

  ;
}

uint64_t sub_100021C9C()
{
  return Task<>.value.getter();
}

uint64_t sub_100021CA4(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100021CB8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100021CC4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100021CD4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100021CF0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100021CFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_100021D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Actor.assertIsolated(_:file:line:)(a1, 0LL, a3, 29LL, 2LL, 38LL, v3);
}

void sub_100021D20()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

void *sub_100021D5C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

  ;
}

uint64_t sub_100021D80()
{
  return swift_retain(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100021DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Actor.assertIsolated(_:file:line:)(a1, 0LL, a3, 29LL, 2LL, 44LL, v3);
}

uint64_t sub_100021DDC()
{
  return swift_release(v0);
}

uint64_t sub_100021DE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 64);
  *(void *)(a1 + 24) = v1;
  return swift_release(v3);
}

uint64_t sub_100021DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = v2;
  return swift_release(a1);
}

uint64_t sub_100021E00(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_release(v1);
}

uint64_t sub_100021E10()
{
  return ((uint64_t (*)(void))swift_arrayInitWithCopy)();
}

uint64_t sub_100021E20()
{
  *(void *)(v2 - 88) = v0;
  return v1 + 56;
}

uint64_t sub_100021E4C(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_100021E64(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_100021E70()
{
  return swift_release(v0);
}

uint64_t sub_100021E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Actor.assertIsolated(_:file:line:)(a1, a2, a3, a4, a5, a6, v6);
}

  ;
}

uint64_t sub_100021E90()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 8sub_100016BD0(0, v0, 0) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100021EB0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100021EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

void sub_100021EC0()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_100021EFC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_100021F10()
{
  return Task.value.getter();
}

uint64_t sub_100021F18()
{
  return sub_100005FB0(v0, 1LL, 1LL, v1);
}

uint64_t sub_100021F2C(uint64_t a1, uint64_t a2)
{
  return sub_100003854(v2, a2, v3);
}

uint64_t sub_100021F38(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

  ;
}

  ;
}

uint64_t sub_100021F6C()
{
  return swift_errorRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100021FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005FB0(a1, a2, a3, a4);
}

uint64_t sub_100021FC8()
{
  return type metadata accessor for TaskPriority(0LL);
}

  ;
}

uint64_t sub_100021FEC()
{
  return Task<>.value.getter();
}

  ;
}

uint64_t sub_100022014(uint64_t a1)
{
  return Set.init(minimumCapacity:)(v1, v2, a1);
}

uint64_t sub_100022024()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10002202C()
{
}

  ;
}

  ;
}

uint64_t sub_10002205C()
{
  return v0;
}

uint64_t sub_100022070()
{
  return v0;
}

  ;
}

uint64_t sub_100022098( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return a8();
}

uint64_t sub_1000220B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000181E4(&a9, v13, v9, v10, v11, v12);
}

  ;
}

uint64_t sub_1000220E8(uint64_t a1, uint64_t a2)
{
  return sub_100003854(v2, a2, v3);
}

uint64_t sub_1000220F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

  ;
}

uint64_t sub_10002211C(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_100022140()
{
  return v0 + 56;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000221B0(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

  ;
}

uint64_t sub_1000221EC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

void sub_100022210(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100022218@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100022220(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))( v1,  v3 + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,  a1);
}

  ;
}

uint64_t sub_100022258()
{
  return type metadata accessor for Policy(0LL);
}

BOOL sub_100022260(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100022270(uint64_t a1)
{
  return swift_allocObject( a1,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
         + *(void *)(v1 + 72),
           *(unsigned __int8 *)(v1 + 80) | 7LL);
}

  ;
}

  ;
}

uint64_t sub_1000222C4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void *sub_1000222CC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 56) = result;
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

void sub_1000222D8(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
}

uint64_t sub_1000222FC()
{
  return (*(uint64_t (**)(void))(v0 - 248))(*(void *)(v0 - 224));
}

Swift::Int sub_100022308()
{
  return Hasher._finalize()();
}

uint64_t sub_100022310(uint64_t a1)
{
  return static _SetStorage.resize(original:capacity:move:)(a1, v1, 0LL);
}

uint64_t sub_100022320(uint64_t a1)
{
  return static _SetStorage.resize(original:capacity:move:)(a1, v1, 1LL);
}

  ;
}

  ;
}

uint64_t sub_100022368()
{
  return sub_100003B20(v0);
}

  ;
}

uint64_t sub_100022394()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

  ;
}

uint64_t sub_1000223B4()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

void *sub_1000223C4(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

uint64_t sub_1000223CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000223DC()
{
  return static _SetStorage.copy(original:)(*v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100022410()
{
  return sub_100003B20(v0);
}

uint64_t sub_100022418()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100022420(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL);
  return v1 + ((v2 + 32) & ~v2);
}

BOOL sub_100022444(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10002244C()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000224B4()
{
  return swift_retain(v0);
}

uint64_t sub_1000224BC()
{
  return v0;
}

uint64_t sub_1000224D0(uint64_t a1, uint64_t *a2)
{
  return sub_100003B20(a2);
}

uint64_t sub_1000224D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

  ;
}

  ;
}

  ;
}

void sub_10002252C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t sub_10002256C()
{
  return type metadata accessor for InferenceProviderAssetManager(0LL);
}

unint64_t sub_100022574()
{
  return sub_1000165C8();
}

uint64_t sub_10002257C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_100022588()
{
  return ((uint64_t (*)(void))swift_arrayInitWithCopy)();
}

void sub_100022590(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000225A4()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_1000225C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  v4[2] = result;
  v4[3] = a2;
  return result;
}

uint64_t sub_1000225D4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000225DC(uint64_t a1)
{
  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_1000225F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_1000225FC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100022604()
{
  return static os_log_type_t.default.getter();
}

  ;
}

void sub_100022620(uint64_t a1)
{
}

uint64_t sub_100022628()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100022694()
{
  return type metadata accessor for RequestPriority(0LL);
}

uint64_t sub_10002269C()
{
  return type metadata accessor for Assertion.DaemonRep(0LL);
}

uint64_t sub_1000226A4()
{
  return v0;
}

uint64_t sub_1000226B0()
{
  *(_WORD *)(v1 + 12) = 2112;
  return swift_errorRetain(v0);
}

  ;
}

void *sub_1000226E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return memmove(a1, v2, 8 * a2);
}

  ;
}

  ;
}

void sub_10002270C(uint64_t a1, uint64_t a2)
{
}

void *sub_100022714()
{
  return Hasher.init(_seed:)((void *)(v1 - 152), *(void *)(*(void *)v0 + 40LL));
}

void sub_100022724()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100022734(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

  ;
}

BOOL sub_10002275C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

  ;
}

void sub_100022788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100022790()
{
  return sub_100003B20(v0);
}

void *sub_1000227A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

  ;
}

uint64_t sub_1000227B8()
{
  return *(void *)(v0 + 8);
}

  ;
}

uint64_t sub_1000227D4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000227DC()
{
  return sub_1000212AC(*(void *)(v0 - 144));
}

void *sub_1000227EC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000227F8()
{
  return swift_retain(*(void *)(v0 + 8 * v1 + 32));
}

uint64_t sub_100022808()
{
  return 0LL;
}

uint64_t sub_100022818(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return *(void *)(v2 + 16);
}

uint64_t sub_100022824@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_10002282C(uint64_t a1)
{
}

  ;
}

Swift::Int sub_100022844()
{
  return Hasher._finalize()();
}

  ;
}

void sub_10002285C()
{
}

void sub_10002286C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10002287C()
{
  return swift_task_alloc(v0);
}

  ;
}

  ;
}

uint64_t sub_10002289C()
{
  return swift_bridgeObjectRetain(v0);
}

BOOL sub_1000228A4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000228B4()
{
  return swift_release(v0);
}

uint64_t sub_1000228BC()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000228C4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000228CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100003B20(a3);
}

uint64_t sub_1000228D4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

  ;
}

uint64_t sub_1000228F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000228F8()
{
  return static _SetStorage.copy(original:)(*v0);
}

uint64_t sub_100022908(uint64_t a1, uint64_t (*a2)(void))
{
  *(void *)(v2 - 104) = a2;
  return a2(0LL);
}

  ;
}

  ;
}

uint64_t sub_10002293C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100022944()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10002294C()
{
  return swift_task_dealloc(v0);
}

  ;
}

uint64_t sub_100022970()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000229CC()
{
  return type metadata accessor for ModelCatalogAsset(0LL);
}

uint64_t sub_1000229D4()
{
  return type metadata accessor for InferenceProviderExtensionConnection(0LL);
}

void sub_1000229DC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000229E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, a9, v10);
}

void sub_1000229F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

  ;
}

uint64_t sub_100022A14(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, a2, v2);
}

  ;
}

  ;
}

Swift::Int sub_100022A48()
{
  return Hasher._finalize()();
}

char *sub_100022A50(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return (char *)a1 + v2;
}

  ;
}

uint64_t sub_100022A78()
{
  return swift_release(v0);
}

uint64_t sub_100022A84(uint64_t a1, uint64_t (*a2)(void))
{
  return a2(0LL);
}

void sub_100022A90()
{
}

  ;
}

  ;
}

uint64_t sub_100022AC4@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100022B04()
{
  return swift_release(*(void *)(v0 - 264));
}

void sub_100022B10(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100022B1C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 72);
}

uint64_t sub_100022B30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_100022B44()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100022B4C()
{
  return swift_bridgeObjectRelease(v0);
}

char *sub_100022B54@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

  ;
}

uint64_t sub_100022B7C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100022B90(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100022BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_100003B20(a5);
}

  ;
}

  ;
}

uint64_t sub_100022BD4(uint64_t a1, uint64_t a2)
{
  return sub_100003854(v2, a2, v3);
}

uint64_t sub_100022BE0(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_100022BEC(uint64_t a1)
{
  return dispatch thunk of Hashable._rawHashValue(seed:)(a1, v1, v2);
}

uint64_t sub_100022BF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100022C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_100022C08()
{
  return v0;
}

unint64_t sub_100022C14()
{
  return sub_1000165C8();
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100022C44()
{
  return v0;
}

uint64_t sub_100022C50()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100022C58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 192))(a1, a2, v2);
}

uint64_t sub_100022C64(uint64_t a1)
{
  return sub_1000060B4(a1, 1LL, v1);
}

uint64_t sub_100022C70(uint64_t a1)
{
  return sub_1000212AC(a1);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100022CB4()
{
  return v0;
}

uint64_t sub_100022CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7LL);
}

uint64_t sub_100022CC8(uint64_t a1, uint64_t a2)
{
  return sub_100005FB0(a1, a2, 1LL, v2);
}

  ;
}

uint64_t sub_100022CE8(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

uint64_t sub_100022CF4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100022CFC()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100022D04()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100022D0C()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100022D14()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100022D1C()
{
  return v0;
}

uint64_t sub_100022D28()
{
  return sub_100013BD0(v1, v0);
}

uint64_t sub_100022D34()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

uint64_t sub_100022D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  *uint64_t v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

void sub_100022D68()
{
}

uint64_t sub_100022D74(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_100022D7C()
{
  return type metadata accessor for AssetPolicy(0LL);
}

  ;
}

  ;
}

uint64_t sub_100022DB0()
{
  return type metadata accessor for InferenceProviderAsset(0LL);
}

void *sub_100022DB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return memmove(a1, v2, 8 * a2);
}

void *sub_100022DC4()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[44];
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[47];
  swift_release(v0[48]);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v1);
  return v0;
}

uint64_t sub_100022EBC()
{
  return swift_deallocClassInstance(v0, 392LL, 7LL);
}

uint64_t type metadata accessor for DaemonContext()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd13DaemonContext);
}

uint64_t sub_100022EFC(uint64_t a1)
{
  *(void *)(v1 + 112) = [objc_allocWithZone(NSProcessInfo) init];
  uint64_t v3 = v1 + OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin();
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  generalLogger.getter(v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v3, v8, v4);
  *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) = a1;
  return v1;
}

uint64_t sub_100022FC0()
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_100022FD4, 0LL);
}

uint64_t sub_100022FD4()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100023048;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100023048()
{
  return sub_10000BD98();
}

uint64_t sub_100023080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  v3[4] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000230DC, 0LL, 0LL);
}

uint64_t sub_1000230DC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for TaskPriority(0LL);
  sub_100021C1C();
  uint64_t v2 = (void *)sub_100023C54((uint64_t)&unk_1001030A0);
  uint64_t v3 = sub_100023C44(v2);
  sub_100023C70(v3, (uint64_t)&unk_10010BD60);
  sub_100023C7C();
  sub_100021C1C();
  uint64_t v4 = (void *)sub_100023C54((uint64_t)&unk_1001030C8);
  uint64_t v5 = sub_100023C44(v4);
  sub_100023C70(v5, (uint64_t)&unk_10010BD70);
  sub_100023C7C();
  sub_100021C1C();
  uint64_t v6 = (void *)sub_100023C54((uint64_t)&unk_1001030F0);
  uint64_t v7 = sub_100023C44(v6);
  sub_100023C70(v7, (uint64_t)&unk_10010BD80);
  sub_100023C7C();
  sub_100021C1C();
  uint64_t v8 = (void *)sub_100023C54((uint64_t)&unk_100103118);
  sub_100023C44(v8);
  sub_1000BC690(v1, (uint64_t)&unk_10010BD90, (uint64_t)v8);
  sub_100023C7C();
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
  *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = v9;
  uint64_t v10 = sub_100003B20(&qword_10010BD98);
  void *v9 = v0;
  v9[1] = sub_100023210;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(0LL, 0LL, v10);
}

uint64_t sub_100023210()
{
  uint64_t v2 = *(void *)(v1 + 32);
  sub_10000BCE4(*(void *)(v1 + 40));
  swift_task_dealloc(v2);
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100023244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(v0 + 16) = a4;
  return swift_task_switch(sub_10002325C, 0LL, 0LL);
}

uint64_t sub_10002325C()
{
  v0[3] = *(void *)(*(void *)(v0[2] + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 56LL);
  sub_10000C030();
  uint64_t v1 = (void *)sub_10002287C();
  v0[4] = v1;
  sub_100023C84(v1, (uint64_t)sub_100023C3C);
  return sub_10009D564();
}

uint64_t sub_1000232B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(v0 + 16) = a4;
  return swift_task_switch(sub_1000232D0, 0LL, 0LL);
}

uint64_t sub_1000232D0()
{
  v0[3] = *(void *)(*(void *)(v0[2] + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 48LL);
  sub_10000C030();
  uint64_t v1 = (void *)sub_10002287C();
  v0[4] = v1;
  sub_100023C84(v1, (uint64_t)sub_10002332C);
  return sub_10000D2C8();
}

uint64_t sub_10002332C()
{
  uint64_t v2 = *(void *)(v1 + 24);
  sub_10000BCE4(*(void *)(v1 + 32));
  swift_release(v2);
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100023360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(v0 + 16) = a4;
  return swift_task_switch(sub_100023378, 0LL, 0LL);
}

uint64_t sub_100023378()
{
  v0[3] = *(void *)(*(void *)(v0[2] + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 320LL);
  sub_10000C030();
  uint64_t v1 = (void *)sub_10002287C();
  v0[4] = v1;
  sub_100023C84(v1, (uint64_t)sub_100023C3C);
  return sub_10003DAAC();
}

uint64_t sub_1000233D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(v0 + 16) = a4;
  return swift_task_switch(sub_1000233EC, 0LL, 0LL);
}

uint64_t sub_1000233EC()
{
  v0[3] = *(void *)(*(void *)(v0[2] + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 24LL);
  sub_10000C030();
  uint64_t v1 = (void *)sub_10002287C();
  v0[4] = v1;
  sub_100023C84(v1, (uint64_t)sub_100023C3C);
  return sub_100063170();
}

uint64_t sub_100023448()
{
  *(void *)(v1 + 24) = v0;
  return sub_10000C088((uint64_t)sub_10002345C, v0);
}

uint64_t sub_10002345C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for _OSActivity(0LL);
  uint64_t v2 = _OSActivity.__allocating_init(_:)("Daemon setup", 12LL, 2LL);
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = v3;
  uint64_t v4 = swift_retain(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v8 = (uint8_t *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v8 = 67109120;
    *(_DWORD *)(v0 + 56) = [*(id *)(v7 + 112) processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 60, v8 + 4);
    swift_release(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Daemon started with pid: %d", v8, 8u);
    sub_10000BCC4((uint64_t)v8);
  }

  else
  {
    swift_release(*(void *)(v0 + 24));
  }

  uint64_t v9 = (void *)swift_task_alloc(dword_10010BC8C);
  *(void *)(v0 + 4sub_100006F7C(v0 + 8) = v9;
  void *v9 = v0;
  v9[1] = sub_1000235A8;
  return sub_100022FC0();
}

uint64_t sub_1000235A8()
{
  return sub_10000BD98();
}

uint64_t sub_1000235E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Daemon setup complete", v4, 2u);
    sub_10000BCC4((uint64_t)v4);
  }

  uint64_t v5 = *(void *)(v1 + 24);

  uint64_t v6 = static ModelXPCRequest.serviceName.getter();
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for XPCListener.InitializationOptions(0LL);
  uint64_t v10 = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = swift_retain(v5);
  static XPCListener.InitializationOptions.none.getter(v11);
  uint64_t v12 = type metadata accessor for XPCListener(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = XPCListener.init(service:targetQueue:options:incomingSessionHandler:)(v6, v8, 0LL, v10, sub_100023A1C, v5);
  swift_release(v13);
  swift_task_dealloc(v10);
  uint64_t v14 = *(void *)(v1 + 32);
  _OSActivity.close()();
  swift_release(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100023854(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context);
  uint64_t v3 = *(void *)(v2 + 104);
  if (v3)
  {
    swift_retain(*(void *)(v2 + 104));
    uint64_t v4 = sub_100003B20(&qword_10010BD38);
    unint64_t v5 = sub_100023A2C();
    dispatch thunk of XPCListener.IncomingSessionRequest.accept<A>(_:)(sub_100023A24, v3, v4, v5);
    swift_release(v3);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000238D0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100023934()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10002394C()
{
  return type metadata accessor for Daemon(0LL);
}

uint64_t type metadata accessor for Daemon(uint64_t a1)
{
  uint64_t result = qword_10010BC78;
  if (!qword_10010BC78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Daemon);
  }
  return result;
}

uint64_t sub_10002398C(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_100023A1C(uint64_t a1)
{
}

void sub_100023A24(void *a1@<X8>)
{
}

unint64_t sub_100023A2C()
{
  unint64_t result = qword_10010BD40;
  if (!qword_10010BD40)
  {
    uint64_t v1 = sub_10000603C(&qword_10010BD38);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TaskCancellingXPCPeerHandler<A>, v1);
    atomic_store(result, &qword_10010BD40);
  }

  return result;
}

uint64_t sub_100023A70(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc(dword_10010BD4C);
  uint64_t v7 = (void *)sub_100007524(v6);
  *uint64_t v7 = v3;
  v7[1] = sub_100023AD0;
  return sub_100023080(a1, a2, v2);
}

uint64_t sub_100023AD0()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100023B00()
{
  uint64_t v0 = swift_task_alloc(dword_10010BD5C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_100023244(v2, v3, v4, v5);
}

uint64_t sub_100023B50()
{
  uint64_t v0 = swift_task_alloc(dword_10010BD6C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_1000232B8(v2, v3, v4, v5);
}

uint64_t sub_100023BA0()
{
  uint64_t v0 = swift_task_alloc(dword_10010BD7C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_100023360(v2, v3, v4, v5);
}

uint64_t sub_100023BF0()
{
  uint64_t v0 = swift_task_alloc(dword_10010BD8C);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_1000233D4(v2, v3, v4, v5);
}

uint64_t sub_100023C44(void *a1)
{
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = v1;
  return swift_retain(v1);
}

uint64_t sub_100023C54(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

  ;
}

uint64_t sub_100023C70(uint64_t a1, uint64_t a2)
{
  return sub_1000BC690(v2, a2, v3);
}

uint64_t sub_100023C7C()
{
  return sub_1000060C0(v0);
}

void *sub_100023C84@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_100023C90()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100023C98()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010BDA0);
  sub_100003BA0(v0, (uint64_t)qword_10010BDA0);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100023D08()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010BE0C);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  sub_100023C84(v1, (uint64_t)sub_10000BCBC);
  return sub_100027474();
}

uint64_t sub_100023D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0LL);
  v4[28] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[29] = v6;
  v4[30] = sub_100021CC4(v6);
  uint64_t v7 = sub_100003B20(&qword_10010B208);
  v4[31] = sub_100021CC4(*(void *)(v7 - 8));
  uint64_t v8 = sub_100003B20(&qword_10010C000);
  v4[32] = sub_100021CC4(*(void *)(v8 - 8));
  uint64_t v9 = sub_1000306E4();
  v4[33] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[34] = v10;
  v4[35] = sub_10002FDFC(v10);
  v4[36] = sub_10002287C();
  uint64_t v11 = sub_100030CC0();
  v4[37] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[38] = v12;
  v4[39] = sub_100021CC4(v12);
  uint64_t v13 = type metadata accessor for Session.Metadata(0LL);
  v4[40] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[41] = v14;
  v4[42] = sub_10002FDFC(v14);
  v4[43] = sub_10002287C();
  uint64_t v15 = sub_100003B20(&qword_10010B9A0);
  v4[44] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[45] = v16;
  v4[46] = sub_10002FDFC(v16);
  v4[47] = sub_10002287C();
  v4[48] = sub_10002287C();
  v4[49] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v17, v18, v19);
}

uint64_t sub_100023E60()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = Session.Metadata.supportedAssetBundleIdentifiers.getter(v2);
  *(void *)(v0 + 40sub_100016BD0(0, v0, 0) = v3;
  uint64_t v4 = Session.Metadata.useCaseID.getter(v3);
  *(void *)(v0 + 40sub_100006F7C(v0 + 8) = v4;
  *(void *)(v0 + 4++*(void *)(v0 + 16) = v5;
  uint64_t v6 = Session.Metadata.onBehalfOfPID.getter(v4);
  *(void *)(v0 + 424) = v6;
  uint64_t v7 = Session.Metadata.id.getter(v6);
  *(_DWORD *)(v0 + 544) = AuditToken.processIdentifier.getter(v7);
  sub_100030C18((void *)(v1 + 224));
  uint64_t v8 = sub_1000307F0();
  *(void *)(v0 + 432) = v9(v8);
  uint64_t v10 = *(void *)(v1 + 264);
  *(void *)(v0 + 44sub_100016BD0(0, v0, 0) = v10;
  return sub_100030334((uint64_t)sub_100023F20, v10, 0LL);
}

uint64_t sub_100023F20()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 440) + 192LL);
  *(void *)(v0 + 44sub_100006F7C(v0 + 8) = v1;
  swift_bridgeObjectRetain(v1);
  sub_100021C90();
  return sub_10000BD98();
}

void *sub_100023F5C()
{
  char v2 = v1;
  sub_10000BD28();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 400));
    if (qword_10010B090 != -1) {
      swift_once(&qword_10010B090, sub_100023C98);
    }
    uint64_t v3 = *(void *)(v0 + 416);
    uint64_t v4 = *(os_log_s **)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 360);
    uint64_t v5 = *(void *)(v0 + 368);
    uint64_t v7 = sub_10000BF6C();
    sub_100003BA0(v7, (uint64_t)qword_10010BDA0);
    sub_1000228F0(v5, (uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    swift_bridgeObjectRetain_n(v3, 2LL);
    sub_1000228BC();
    os_log_type_t v8 = sub_10000C108();
    if (sub_100030934(v8))
    {
      uint64_t v71 = *(int *)(v0 + 544);
      uint64_t v74 = *(void *)(v0 + 408);
      uint64_t v9 = *(void *)(v0 + 368);
      uint64_t v77 = *(void *)(v0 + 360);
      uint64_t v10 = *(void *)(v0 + 352);
      uint64_t v11 = sub_10000BCF4(32LL);
      uint64_t v12 = sub_10000BCF4(64LL);
      v79[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      sub_100015EF8(v14, v15, v79);
      *(void *)(v0 + 184) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v11 + 4);
      sub_1000303D0();
      uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
      v78(v9, v10);
      *(_WORD *)(v11 + 12) = 2048;
      *(void *)(v0 + 152) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v11 + 14);
      *(_WORD *)(v11 + 22) = 2080;
      sub_10002289C();
      sub_100030304(v74, v17, v79);
      *(void *)(v0 + 136) = v18;
      sub_1000301B8(v0 + 136, v0 + 144);
      sub_100030B80();
      _os_log_impl( (void *)&_mh_execute_header,  v4,  (os_log_type_t)v5,  "Blocking creation of session %s for pid %ld: Use case %s has been disabled",  (uint8_t *)v11,  0x20u);
      sub_1000307B4(v12);
      sub_10000BCC4(v12);
      sub_10000BCC4(v11);
    }

    else
    {
      uint64_t v23 = *(void *)(v0 + 416);
      uint64_t v78 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 360) + 8LL);
      v78(*(void *)(v0 + 368), *(void *)(v0 + 352));

      sub_10000C1B0(v23);
    }

    uint64_t v24 = *(void *)(v0 + 432);
    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 392);
    uint64_t v64 = *(void *)(v0 + 384);
    uint64_t v66 = *(void *)(v0 + 376);
    uint64_t v60 = *(void *)(v0 + 416);
    uint64_t v62 = *(void *)(v0 + 352);
    uint64_t v67 = *(void *)(v0 + 368);
    uint64_t v68 = *(void *)(v0 + 344);
    uint64_t v69 = *(void *)(v0 + 336);
    uint64_t v70 = *(void *)(v0 + 312);
    uint64_t v72 = *(void *)(v0 + 288);
    uint64_t v73 = *(void *)(v0 + 280);
    uint64_t v27 = *(void *)(v0 + 240);
    uint64_t v75 = *(void *)(v0 + 256);
    uint64_t v76 = *(void *)(v0 + 248);
    uint64_t v28 = *(void *)(v0 + 232);
    int64_t v29 = *(void **)(v0 + 216);
    uint64_t v30 = v29[31];
    uint64_t v31 = v29[32];
    sub_100030C08(v29 + 28);
    sub_100022218( v27,  enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.failedDueToUseCaseDisabled(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 104));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 64))(v26, v27, v24, v30, v31);
    sub_100022BF8(v27, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    uint64_t v32 = sub_1000305BC();
    sub_1000302EC( (unint64_t *)&qword_10010B410,  v33,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v32, v34);
    *uint64_t v35 = v25;
    v35[1] = v60;
    uint64_t v36 = sub_100022218( (uint64_t)v35,  enum case for ModelManagerError.useCaseDisabled(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104LL));
    swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
    sub_1000308D8();
    v78(v26, v62);
    uint64_t v44 = sub_100030500();
    uint64_t v52 = sub_100030B50(v44, v45, v46, v47, v48, v49, v50, v51, v60, v62, v64);
    sub_1000308B0(v52, v53, v54, v55, v56, v57, v58, v59, v61, v63, v65, v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    sub_10000BFE4();
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    int64_t v19 = *(void *)(v0 + 424);
    unint64_t result = sub_10000729C((void *)(*(void *)(v0 + 216) + 128LL), *(void *)(*(void *)(v0 + 216) + 152LL));
    if (v19 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 424);
      if (v21 <= 0x7FFFFFFF)
      {
        char v22 = (void *)swift_task_alloc(dword_10010E1F4);
        *(void *)(v0 + 456) = v22;
        void *v22 = v0;
        v22[1] = sub_1000243B0;
        return (void *)sub_1000995F4(v21);
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000243B0()
{
  return sub_10000BD98();
}

uint64_t sub_1000243E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  uint64_t v27 = v24[43];
  uint64_t v28 = v24[40];
  uint64_t v30 = v24[38];
  uint64_t v29 = v24[39];
  uint64_t v31 = v24[27];
  uint64_t v32 = v24[24];
  uint64_t v33 = v24[25];
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24[41] + 16LL);
  v24[58] = v34;
  v34(v27, v32, v28);
  sub_100022218(v29, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
  uint64_t v35 = *(void *)(v31 + 216);
  uint64_t v36 = sub_100030C8C();
  sub_100007104(v36, v37);
  sub_100021D80();
  uint64_t v74 = v31 + 176;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100003F60((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v71 = v70;
  }

  else
  {
    uint64_t v71 = _swiftEmptySetSingleton;
  }

  uint64_t v38 = v24[32];
  uint64_t v72 = v24[26];
  uint64_t v73 = v24[33];
  uint64_t v39 = v24[5];
  uint64_t v40 = sub_1000307DC();
  sub_100006F54(v40, v41);
  uint64_t v42 = *(void *)(v39 - 8);
  sub_100021CF0(*(void *)(v42 + 64));
  (*(void (**)(void))(v42 + 16))();
  uint64_t v43 = sub_100022C44();
  uint64_t v46 = sub_10002F714(v43, v44, v35, v45, (uint64_t)v71);
  v24[59] = v46;
  sub_100006F7C(v24 + 2);
  sub_10002294C();
  sub_10002FB20(v72, v38, &qword_10010C000);
  if (sub_1000060B4(v38, 1LL, v73) == 1)
  {
    sub_10002F99C(v24[32], &qword_10010C000);
  }

  else
  {
    uint64_t v47 = v24[36];
    uint64_t v48 = v24[34];
    sub_1000228F0(v47, v24[32], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 32));
    sub_1000A2DD0(v47);
    sub_100022CF4(v47, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
  }

  uint64_t v49 = v24[53];
  uint64_t v50 = v24[31];
  uint64_t v51 = v24[27];
  uint64_t v52 = sub_1000307DC();
  sub_10000BE64(v52, v53, 33LL);
  sub_100021D80();
  sub_1000181C0(&a13, v46);
  sub_100030A20();
  swift_release(a13);
  uint64_t v54 = sub_100021FC8();
  sub_10002FF28(v54);
  sub_10002F9E8(&qword_10010C040, v55, (uint64_t (*)(uint64_t))type metadata accessor for SessionManager);
  uint64_t v57 = v56;
  uint64_t v58 = (void *)sub_100007460((uint64_t)&unk_100103218, 48LL);
  v58[2] = v51;
  v58[3] = v57;
  v58[4] = v51;
  v58[5] = v49;
  sub_10000BD20(v51);
  v24[60] = sub_100003874(v50, (uint64_t)&unk_10010C080, (uint64_t)v58);
  uint64_t v59 = (void *)swift_task_alloc(48LL);
  v24[61] = v59;
  v59[2] = v51;
  v59[3] = v46;
  v59[4] = v74;
  uint64_t v60 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v24[62] = v60;
  *uint64_t v60 = v24;
  v60[1] = sub_100024698;
  sub_100022954();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v71,  v72,  v73,  v74,  a13,  a14,  a15,  a16);
}

uint64_t sub_100024698()
{
  v0[63] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[27];
    uint64_t v5 = sub_1000250F0;
  }

  else
  {
    uint64_t v6 = v0[27];
    swift_task_dealloc(v0[61]);
    uint64_t v5 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000246FC;
    uint64_t v4 = v6;
  }

  return sub_100021BCC((uint64_t)v5, v4, 0LL);
}

uint64_t sub_1000246FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  a22 = v24;
  uint64_t v28 = v24[63];
  uint64_t v29 = sub_1000A324C();
  v24[64] = v29;
  if (v28)
  {
    if (qword_10010B090 != -1) {
      swift_once(&qword_10010B090, sub_100023C98);
    }
    uint64_t v31 = sub_10000BF6C();
    uint64_t v32 = (os_log_s *)sub_100003BA0(v31, (uint64_t)qword_10010BDA0);
    sub_10000C030();
    sub_100023C90();
    sub_10000C030();
    sub_100023C90();
    sub_10000C158();
    os_log_type_t v33 = sub_100030BCC();
    if (sub_100030134(v33))
    {
      uint64_t v34 = (_DWORD *)sub_10000BCF4(22LL);
      uint64_t v35 = (void *)sub_10000BCF4(8LL);
      uint64_t v48 = sub_10000BCF4(32LL);
      a12 = v48;
      *uint64_t v34 = 136315394;
      sub_10000C030();
      uint64_t v36 = sub_1000A75D8();
      sub_100021E70();
      sub_100030304(v36, v37, &a12);
      v24[21] = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 21, v24 + 22, v34 + 1);
      sub_10000C000();
      sub_10002FDD4();
      sub_1000226B0();
      uint64_t v39 = sub_100030588();
      v24[22] = v39;
      sub_1000301B8((uint64_t)(v24 + 22), (uint64_t)(v24 + 23));
      *uint64_t v35 = v39;
      sub_100021F6C();
      sub_100021F6C();
      sub_1000300DC( (void *)&_mh_execute_header,  v32,  v25,  "Session %s couldn't mark assets as in use by the session: %@");
      sub_100003B20(&qword_10010BA58);
      sub_100021F38((uint64_t)v35);
      sub_10000BCC4((uint64_t)v35);
      sub_100021F38(v48);
      sub_10000BCC4(v48);
      sub_10000BCC4((uint64_t)v34);

      sub_100021F6C();
    }

    else
    {
      sub_100021F6C();
      sub_10002FDD4();
      sub_100021F6C();
      sub_100021F6C();
    }

    uint64_t v40 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    uint64_t v41 = (void *)sub_100030CF0(v40);
    sub_100030CE4(v41);
    sub_100030BD4();
    return sub_10002FE58();
  }

  else
  {
    uint64_t v30 = v24[35];
    Session.Metadata.id.getter(v29);
    sub_1000A329C(v30);
    uint64_t v42 = (void *)swift_task_alloc(dword_10010D5E4);
    v24[65] = v42;
    *uint64_t v42 = v24;
    v42[1] = sub_100024984;
    sub_1000226A4();
    sub_100022954();
    return sub_1000543C8(v43, v44, v45, v46);
  }

uint64_t sub_100024984()
{
  v0[66] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[45];
  uint64_t v7 = v0[34];
  uint64_t v6 = v0[35];
  swift_bridgeObjectRelease(v0[64]);
  sub_100030650(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  sub_100022CF4(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_10000C0D4();
  return sub_100021BCC(v8, v9, v10);
}

uint64_t sub_100024A20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  uint64_t v13 = (void *)sub_100030CF0(v12);
  sub_100030CE4(v13);
  uint64_t v14 = sub_100030BD4();
  return Task<>.value.getter(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t sub_100024A74()
{
  return sub_10000BD98();
}

uint64_t sub_100024AAC()
{
  uint64_t v88 = v0 + 88;
  char v1 = *(_BYTE *)(v0 + 549);
  if (qword_10010B090 != -1) {
    swift_once(&qword_10010B090, sub_100023C98);
  }
  uint64_t v2 = sub_10000BF6C();
  uint64_t v3 = (void *)sub_100003BA0(v2, (uint64_t)qword_10010BDA0);
  sub_100021C84();
  sub_10000C158();
  os_log_type_t v4 = sub_10000C108();
  if (sub_10000C0F8(v4))
  {
    *(void *)type = *(void *)(v0 + 424);
    char v77 = v1;
    uint64_t v5 = sub_10000BCF4(32LL);
    uint64_t v6 = sub_10000BCF4(64LL);
    uint64_t v90 = v6;
    *(_DWORD *)uint64_t v5 = 136315650;
    sub_10000C030();
    uint64_t v7 = sub_1000A75D8();
    uint64_t v9 = v8;
    sub_100021E70();
    sub_100015EF8(v7, v9, &v90);
    *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v88, v5 + 4);
    sub_100022B4C();
    sub_10002FDD4();
    *(_WORD *)(v5 + 12) = 2048;
    *(void *)(v0 + 144) = *(void *)type;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v5 + 14);
    *(_WORD *)(v5 + 22) = 2080;
    *(_BYTE *)(v0 + 54sub_100006F7C(v0 + 8) = v77;
    uint64_t v11 = String.init<A>(describing:)(v0 + 548, &unk_100105070);
    sub_100030C60(v11, v12);
    *(void *)(v0 + 16sub_100016BD0(0, v0, 0) = v13;
    sub_1000301B8(v0 + 160, v0 + 168);
    sub_100022B4C();
    sub_100030670();
    _os_log_impl(v14, v15, v16, v17, (uint8_t *)v5, 0x20u);
    sub_1000307B4(v6);
    sub_10000BCC4(v6);
    sub_10000BCC4(v5);
  }

  else
  {
    sub_10002FDD4();
  }

  uint64_t v80 = *(void (**)(void, uint64_t, uint64_t))(v0 + 464);
  uint64_t v18 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 392);
  uint64_t v82 = *(void *)(v0 + 416);
  uint64_t v84 = *(void *)(v0 + 400);
  uint64_t v20 = *(void *)(v0 + 360);
  uint64_t v71 = *(void *)(v0 + 352);
  uint64_t v72 = *(void *)(v0 + 376);
  *(void *)typea = *(void *)(v0 + 336);
  uint64_t v78 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 232);
  uint64_t v22 = *(void *)(v0 + 240);
  uint64_t v23 = *(void **)(v0 + 216);
  uint64_t v70 = *(void *)(v0 + 192);
  uint64_t v25 = v23[31];
  uint64_t v24 = v23[32];
  sub_10000729C(v23 + 28, v25);
  sub_1000222C4( v22,  enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.success(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 104));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 64))(v19, v22, v18, v25, v24);
  sub_100030250(v22, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v72, v19, v71);
  v80(*(void *)typea, v70, v78);
  swift_bridgeObjectRetain(v82);
  uint64_t v26 = swift_bridgeObjectRetain(v84);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  uint64_t v85 = v27;
  BOOL v29 = sub_100030684(v27);
  uint64_t v83 = *(void *)(v0 + 480);
  uint64_t v86 = *(void *)(v0 + 472);
  if (v29)
  {
    os_log_type_t typeb = v28;
    uint64_t v64 = *(int *)(v0 + 544);
    uint64_t v65 = *(void *)(v0 + 424);
    uint64_t v30 = *(void *)(v0 + 400);
    uint64_t v69 = *(void *)(v0 + 408);
    uint64_t v79 = *(void *)(v0 + 432);
    uint64_t v81 = *(void *)(v0 + 392);
    uint64_t v31 = *(void *)(v0 + 376);
    uint64_t v32 = *(void *)(v0 + 352);
    uint64_t v63 = *(void *)(v0 + 360);
    uint64_t v66 = *(void *)(v0 + 336);
    uint64_t v67 = *(void *)(v0 + 328);
    uint64_t v68 = *(void *)(v0 + 320);
    uint64_t v33 = sub_10000BCF4(62LL);
    uint64_t v73 = sub_10000BCF4(128LL);
    uint64_t v90 = v73;
    *(_DWORD *)uint64_t v33 = 136316418;
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v32, v34);
    sub_100030C60(v35, v36);
    *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v88, v0 + 96, v33 + 4);
    sub_1000228C4();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v38(v31, v32);
    *(_WORD *)(v33 + 12) = 2048;
    *(void *)(v0 + 96) = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v33 + 14);
    *(_WORD *)(v33 + 22) = 2048;
    *(void *)(v0 + 104) = v65;
    uint64_t v39 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v33 + 24);
    *(_WORD *)(v33 + 32) = 2080;
    uint64_t v40 = Session.Metadata.loggingIdentifier.getter(v39);
    sub_100030C60(v40, v41);
    *(void *)(v0 + 112) = v42;
    sub_10000C04C(v0 + 112, v0 + 120);
    sub_10000BD28();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    *(_WORD *)(v33 + 42) = 2080;
    sub_10002289C();
    sub_100030304(v69, v43, &v90);
    *(void *)(v0 + 12sub_100016BD0(0, v0, 0) = v44;
    sub_1000301B8(v0 + 120, v0 + 128);
    sub_100030B80();
    *(_WORD *)(v33 + 52) = 2080;
    uint64_t v45 = swift_bridgeObjectRetain(v30);
    uint64_t v46 = Array.description.getter(v45);
    uint64_t v48 = v47;
    sub_100022B4C();
    sub_100015EF8(v46, v48, &v90);
    *(void *)(v0 + 12sub_100006F7C(v0 + 8) = v49;
    sub_1000301B8(v0 + 128, v0 + 136);
    sub_1000228C4();
    sub_10000C1B0(v30);
    _os_log_impl( (void *)&_mh_execute_header,  v85,  typeb,  "Added session %s for pid %ld (on behalf of pid %ld), loggingIdentifier: %s, useCaseIdentifier: %s, supportedAssets: %s",  (uint8_t *)v33,  0x3Eu);
    swift_arrayDestroy(v73, 4LL);
    sub_10000BCC4(v73);
    sub_10000BCC4(v33);
    swift_release(v79);
    swift_release(v83);

    __n128 v50 = swift_release(v86);
    ((void (*)(uint64_t, uint64_t, __n128))v38)(v81, v32, v50);
  }

  else
  {
    uint64_t v51 = *(void *)(v0 + 416);
    uint64_t v53 = *(void *)(v0 + 392);
    uint64_t v52 = *(void *)(v0 + 400);
    uint64_t v55 = *(void *)(v0 + 352);
    uint64_t v54 = *(void *)(v0 + 360);
    uint64_t v57 = *(void *)(v0 + 328);
    uint64_t v56 = *(void *)(v0 + 336);
    swift_release(*(void *)(v0 + 432));
    swift_release(v83);

    sub_10000C1B0(v52);
    sub_10000C1B0(v51);
    sub_10003029C(v56, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
    uint64_t v58 = *(void (**)(uint64_t))(v54 + 8);
    uint64_t v59 = sub_100022C44();
    v58(v59);
    __n128 v60 = swift_release(v86);
    ((void (*)(uint64_t, uint64_t, __n128))v58)(v53, v55, v60);
  }

  uint64_t v87 = *(void *)(v0 + 248);
  uint64_t v89 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 392));
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  uint64_t v61 = (uint64_t (*)(void))sub_1000227B8();
  return v61();
}

#error "1000251C8: call analysis failed (funcsize=117)"
#error "1000253B4: call analysis failed (funcsize=115)"
uint64_t sub_1000254D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_1000254EC, a4, 0LL);
}

void *sub_1000254EC()
{
  int64_t v1 = v0[4];
  unint64_t result = sub_10000729C((void *)(v0[3] + 128LL), *(void *)(v0[3] + 152LL));
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = v0[4];
    if (v3 <= 0x7FFFFFFF)
    {
      os_log_type_t v4 = (void *)swift_task_alloc(dword_10010E20C);
      v0[5] = v4;
      *os_log_type_t v4 = v0;
      v4[1] = sub_10002556C;
      return (void *)sub_10009A2BC(v3);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10002556C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(_BYTE *)(*(void *)v1 + 48LL) = a1;
  sub_100030924(v2);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000255BC()
{
  **(_BYTE **)(v0 + ++*(void *)(v0 + 16) = *(_BYTE *)(v0 + 48);
  return sub_10000C06C();
}

double sub_1000255CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100003B20(&qword_10010C088);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  v28[1] = *(void *)(a2 + 120);
  sub_100007104(a4, (uint64_t)v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v8);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 72) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_100103240, v12 + v10, v11 | 7);
  *(void *)(v13 + ++*(void *)(v0 + 16) = a3;
  sub_1000070EC(v32, v13 + 24);
  *(void *)(v13 + 64) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))( v13 + v12,  (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
  aBlock[4] = sub_10002FC30;
  uint64_t v31 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000A94E8;
  aBlock[3] = &unk_100103258;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  uint64_t v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v29 = _swiftEmptyArrayStorage;
  unint64_t v24 = sub_10002FC78();
  uint64_t v25 = sub_100003B20(&qword_10010C090);
  sub_1000071C0(&qword_10010F150, &qword_10010C090);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v25, v26, v20, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v23, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(void *)&double result = swift_release(v31).n128_u64[0];
  return result;
}

double sub_100025840(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100003B20(&qword_10010C088);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000A2E40();
  uint64_t v30 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = a1;
  uint64_t v33 = a4;
  uint64_t v16 = v15;
  uint64_t v17 = v14;
  sub_10000729C(a2, a2[3]);
  uint64_t v31 = v17;
  uint64_t v34 = v16;
  uint64_t v18 = sub_1000A9BA4(v17, v16);
  uint64_t v19 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v13, 1LL, 1LL, v19);
  uint64_t v20 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v30, v33, v8);
  uint64_t v21 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = (v21 + 72) & ~v21;
  uint64_t v23 = (char *)swift_allocObject(&unk_100103290, v22 + v10, v21 | 7);
  *((void *)v23 + 2) = 0LL;
  *((void *)v23 + 3) = 0LL;
  uint64_t v24 = v31;
  uint64_t v25 = v32;
  *((void *)v23 + 4) = a3;
  *((void *)v23 + 5) = v25;
  uint64_t v26 = v34;
  *((void *)v23 + 6) = v24;
  *((void *)v23 + 7) = v26;
  *((void *)v23 + sub_100006F7C(v0 + 8) = v18;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v22], v20, v8);
  swift_retain();
  swift_retain();
  uint64_t v27 = sub_100003854((uint64_t)v13, (uint64_t)&unk_10010C0A0, (uint64_t)v23);
  *(void *)&double result = swift_release(v27).n128_u64[0];
  return result;
}

uint64_t sub_100025A1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v12;
  v8[4] = a6;
  v8[5] = a7;
  v8[3] = a5;
  uint64_t v10 = type metadata accessor for DaemonSession.LazyState(0LL);
  v8[8] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100025A84, a4, 0LL);
}

uint64_t sub_100025A84()
{
  v0[9] = 0LL;
  sub_10002F90C(v0[8], type metadata accessor for DaemonSession.LazyState);
  return sub_10002FF74((uint64_t)sub_100025AF0, 0LL, 0LL);
}

uint64_t sub_100025AF0()
{
  uint64_t v1 = sub_100003B20(&qword_10010C088);
  CheckedContinuation.resume(returning:)(v1, v1);
  swift_task_dealloc(*(void *)(v0 + 64));
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100025B30()
{
  *(void *)(v0 + ++*(void *)(v0 + 16) = *(void *)(v0 + 72);
  uint64_t v1 = sub_100003B20(&qword_10010C088);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100025B88(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B9A0);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_100021CC4(v5);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_100025BD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  uint64_t v27 = v24 + 16;
  uint64_t v87 = v24 + 96;
  if (qword_10010B090 != -1) {
    swift_once(&qword_10010B090, sub_100023C98);
  }
  uint64_t v28 = *(void *)(v24 + 104);
  uint64_t v29 = sub_10000BF6C();
  uint64_t v30 = sub_100003BA0(v29, (uint64_t)qword_10010BDA0);
  *(void *)(v24 + 152) = v30;
  swift_retain_n(v28, 4LL);
  uint64_t v31 = (os_log_s *)sub_100030758();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v24 + 104);
  if (v33)
  {
    a9 = v24 + 216;
    a11 = v30;
    uint64_t v35 = sub_10000BCF4(18LL);
    a10 = sub_10000BCF4(32LL);
    a13 = a10;
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_retain();
    uint64_t v36 = sub_1000A75D8();
    uint64_t v38 = v37;
    sub_1000308D8();
    sub_100015EF8(v36, v38, &a13);
    *(void *)(v24 + 96) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, v24 + 104, v35 + 4);
    uint64_t v40 = v38;
    uint64_t v27 = v24 + 16;
    swift_bridgeObjectRelease(v40);
    uint64_t v41 = sub_10000BCDC(v34);
    *(_WORD *)(v35 + 12) = 1024;
    LODWORD(v36) = AuditToken.processIdentifier.getter(v41);
    sub_1000308D8();
    *(_DWORD *)(v24 + 2++*(void *)(v0 + 16) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 216, v24 + 220, v35 + 14);
    sub_1000308D8();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Removing session %s for pid %d", (uint8_t *)v35, 0x12u);
    sub_100021F38(a10);
    sub_10000BCC4(a10);
    sub_10000BCC4(v35);
  }

  else
  {
    swift_release_n(*(void *)(v24 + 104), 4LL);
  }

  uint64_t v42 = *(void *)(v24 + 104);
  sub_10000BE64(*(void *)(v24 + 120) + 112LL, v27, 33LL);
  uint64_t v43 = (uint8_t *)sub_1000CB640(v42);
  swift_endAccess(v27);
  if (v43)
  {
    uint64_t v44 = v24 + 88;
    sub_100021DDC();
    sub_100021C84();
    uint64_t v45 = (os_log_s *)sub_100030758();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    uint64_t v47 = &loc_1000D8000;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v43 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v48 = sub_10000BCF4(32LL);
      a13 = v48;
      *(_DWORD *)uint64_t v43 = 136315138;
      sub_10000C030();
      uint64_t v49 = sub_1000A75D8();
      uint64_t v51 = v50;
      sub_100021E70();
      uint64_t v52 = v49;
      uint64_t v44 = v24 + 88;
      sub_100015EF8(v52, v51, &a13);
      *(void *)(v24 + 8sub_100006F7C(v0 + 8) = v53;
      uint64_t v47 = (void *)&loc_1000D8000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 88, v87, v43 + 4);
      swift_bridgeObjectRelease(v51);
      sub_10002FDD4();
      sub_100022210((void *)&_mh_execute_header, v45, v46, "Removing session %s waiting on update task", v43);
      sub_100021F38(v48);
      sub_10000BCC4(v48);
      sub_10000BCC4((uint64_t)v43);
    }

    else
    {
      sub_10002FDD4();
    }

    uint64_t v63 = *(void *)(*(void *)(v24 + 120) + 280LL);
    *(void *)(v24 + 16sub_100016BD0(0, v0, 0) = v63;
    if (v63)
    {
      sub_10000C030();
      uint64_t v64 = (void *)sub_10002287C();
      *(void *)(v24 + 16sub_100006F7C(v0 + 8) = v64;
      *uint64_t v64 = v24;
      v64[1] = sub_100026188;
      sub_10002FE58();
      return;
    }

    uint64_t v65 = sub_10000BD20(*(void *)(v24 + 104));
    Logger.logObject.getter(v65);
    os_log_type_t v66 = sub_10000C108();
    if (sub_100030134(v66))
    {
      uint64_t v67 = (_DWORD *)sub_10000BCF4(12LL);
      uint64_t v68 = sub_10000BCF4(32LL);
      a13 = v68;
      _DWORD *v67 = v47[289];
      sub_10000C030();
      sub_1000A75D8();
      uint64_t v69 = sub_100021E70();
      sub_1000302A4(v69, v70, &a13);
      uint64_t v72 = sub_100030AF0(v71, (void *)(v24 + 80));
      sub_100030C00((uint64_t)v72, v44, v73);
      sub_1000303D0();
      sub_10002FDD4();
      sub_10002FE40( (void *)&_mh_execute_header,  (os_log_s *)v43,  (os_log_type_t)v45,  "Removing session %s stopping monitoring process events");
      sub_100021F38(v68);
      sub_10000BCC4(v68);
      sub_10000BCC4((uint64_t)v67);
    }

    else
    {
      sub_10002FDD4();
    }

    sub_100030908(*(void *)(v24 + 120));
    *(void *)(v24 + 176) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
    sub_100030AE8();
    sub_100030B64();
    if (v82 != v83)
    {
      __break(1u);
    }

    else
    {
      sub_1000308E0();
      if (v82 ^ v83 | v84)
      {
        uint64_t v85 = (void *)swift_task_alloc(dword_10010E1FC);
        *(void *)(v24 + 184) = v85;
        sub_100030A58(v85, (uint64_t)sub_10002631C);
        sub_100022954();
        sub_100099870(v86);
        return;
      }
    }

    __break(1u);
  }

  else
  {
    sub_100021C84();
    uint64_t v54 = (void *)sub_100030758();
    os_log_type_t v55 = static os_log_type_t.fault.getter();
    if (sub_10000C0F8(v55))
    {
      uint64_t v87 = v24 + 40;
      uint64_t v56 = (_DWORD *)sub_10000BCF4(12LL);
      uint64_t v57 = sub_10000BCF4(32LL);
      a13 = v57;
      *uint64_t v56 = 136315138;
      sub_10000C030();
      uint64_t v58 = sub_1000A75D8();
      sub_100021E70();
      sub_100030304(v58, v59, &a13);
      *(void *)(v24 + 4sub_100016BD0(0, v0, 0) = v60;
      sub_100030C00(v24 + 40, v24 + 48, (uint64_t)(v56 + 1));
      sub_10000C000();
      sub_10002FDD4();
      sub_10000BFEC((void *)&_mh_execute_header, v61, v62, "Session manager was not managing session %s");
      sub_100021F38(v57);
      sub_10000BCC4(v57);
      sub_10000BCC4((uint64_t)v56);
    }

    else
    {
      sub_10002FDD4();
    }

    swift_task_dealloc(*(void *)(v24 + 144));
    sub_100022954();
    v74(v74, v75, v76, v77, v78, v79, v80, v81, a9, a10, a11, v87, a13, a14, a15, a16);
  }

uint64_t sub_100026188()
{
  return sub_100021BCC(v1, v2, v3);
}

void sub_1000261C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  a18 = v21;
  uint64_t v25 = sub_10000BD20(v21[13]);
  Logger.logObject.getter(v25);
  os_log_type_t v26 = sub_10000C108();
  if (sub_10000C0F8(v26))
  {
    uint64_t v27 = (_DWORD *)sub_10000BCF4(12LL);
    sub_10000BCF4(32LL);
    sub_10003099C();
    *uint64_t v27 = 136315138;
    sub_10000C030();
    sub_1000A75D8();
    uint64_t v28 = sub_100021E70();
    sub_10002FF50(v28, v29, &a9);
    v21[10] = v30;
    sub_10002FE4C((uint64_t)(v21 + 10), (uint64_t)(v21 + 11));
    sub_100007570();
    sub_10002FDD4();
    sub_10000BFEC((void *)&_mh_execute_header, v31, v32, "Removing session %s stopping monitoring process events");
    sub_100021F38(v22);
    sub_10000BCC4(v22);
    sub_10000BCC4((uint64_t)v27);
  }

  else
  {
    sub_10000BCDC(v21[13]);
  }

  sub_100030908(v21[15]);
  v21[22] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
  sub_100030AE8();
  sub_100030B64();
  if (v33 != v34)
  {
    __break(1u);
  }

  else
  {
    sub_1000308E0();
    if (v33 ^ v34 | v35)
    {
      uint64_t v36 = (void *)swift_task_alloc(dword_10010E1FC);
      v21[23] = v36;
      sub_100030A58(v36, (uint64_t)sub_10002631C);
      sub_10002FF0C();
      sub_100099870(v37);
      return;
    }
  }

  __break(1u);
}

uint64_t sub_10002631C()
{
  uint64_t v0 = sub_100030B28();
  sub_10000BCE4(v0);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100026350( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  a18 = v21;
  uint64_t v25 = sub_10000BD20(v21[13]);
  Logger.logObject.getter(v25);
  os_log_type_t v26 = sub_10000C108();
  if (sub_10000C0F8(v26))
  {
    uint64_t v27 = (_DWORD *)sub_10000BCF4(12LL);
    sub_10000BCF4(32LL);
    sub_10003099C();
    *uint64_t v27 = 136315138;
    sub_10000C030();
    sub_1000A75D8();
    uint64_t v28 = sub_100021E70();
    sub_10002FF50(v28, v29, &a9);
    void v21[9] = v30;
    sub_10002FE4C((uint64_t)(v21 + 9), (uint64_t)(v21 + 10));
    sub_100007570();
    sub_10002FDD4();
    sub_10000BFEC((void *)&_mh_execute_header, v31, v32, "Removing session %s cancelling all requests");
    sub_100021F38(v22);
    sub_10000BCC4(v22);
    sub_10000BCC4((uint64_t)v27);
  }

  else
  {
    sub_10000BCDC(v21[13]);
  }

  char v33 = (void *)swift_task_alloc(dword_10010E98C);
  v21[24] = v33;
  *char v33 = v21;
  v33[1] = sub_100026474;
  sub_1000306EC(v21[15]);
  sub_10002FF0C();
  return sub_1000A32F0(v34, v35);
}

uint64_t sub_100026474()
{
  return sub_10000BD98();
}

uint64_t sub_1000264AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  a18 = v21;
  uint64_t v25 = sub_10000BD20(v21[13]);
  Logger.logObject.getter(v25);
  os_log_type_t v26 = sub_10000C108();
  if (sub_10000C0F8(v26))
  {
    uint64_t v27 = (_DWORD *)sub_10000BCF4(12LL);
    sub_10000BCF4(32LL);
    sub_10003099C();
    *uint64_t v27 = 136315138;
    sub_10000C030();
    sub_1000A75D8();
    uint64_t v28 = sub_100021E70();
    sub_10002FF50(v28, v29, &a9);
    v21[8] = v30;
    sub_10002FE4C((uint64_t)(v21 + 8), (uint64_t)(v21 + 9));
    sub_100007570();
    sub_10002FDD4();
    sub_10000BFEC((void *)&_mh_execute_header, v31, v32, "Removing session %s waiting for fully cancelled unloads");
    sub_100021F38(v22);
    sub_10000BCC4(v22);
    sub_10000BCC4((uint64_t)v27);
  }

  else
  {
    sub_10000BCDC(v21[13]);
  }

  char v33 = (void *)swift_task_alloc(dword_10010F464);
  v21[25] = v33;
  sub_100023C84(v33, (uint64_t)sub_1000265CC);
  sub_10002FF0C();
  return sub_1000C2CDC();
}

uint64_t sub_1000265CC()
{
  return sub_10000BD98();
}

uint64_t sub_100026604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  a18 = v21;
  uint64_t v25 = sub_10000BD20(v21[13]);
  Logger.logObject.getter(v25);
  os_log_type_t v26 = sub_10000C108();
  if (sub_10000C0F8(v26))
  {
    uint64_t v27 = (_DWORD *)sub_10000BCF4(12LL);
    sub_10000BCF4(32LL);
    sub_10003099C();
    *uint64_t v27 = 136315138;
    sub_10000C030();
    sub_1000A75D8();
    uint64_t v28 = sub_100021E70();
    sub_10002FF50(v28, v29, &a9);
    v21[7] = v30;
    sub_10002FE4C((uint64_t)(v21 + 7), (uint64_t)(v21 + 8));
    sub_100007570();
    sub_10002FDD4();
    sub_10000BFEC((void *)&_mh_execute_header, v31, v32, "Removing session %s releasing assets");
    sub_100021F38(v22);
    sub_10000BCC4(v22);
    sub_10000BCC4((uint64_t)v27);
  }

  else
  {
    sub_10000BCDC(v21[13]);
  }

  Session.Metadata.id.getter(v33);
  uint64_t v34 = (void *)swift_task_alloc(dword_10010D614);
  v21[26] = v34;
  *uint64_t v34 = v21;
  v34[1] = sub_100026748;
  sub_10002FF0C();
  return sub_10005D514(v35);
}

uint64_t sub_100026748()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100026794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  a18 = v21;
  uint64_t v25 = sub_10000BD20(*(void *)(v21 + 104));
  Logger.logObject.getter(v25);
  os_log_type_t v26 = sub_10000C108();
  if (sub_10000C0F8(v26))
  {
    uint64_t v27 = (_DWORD *)sub_10000BCF4(12LL);
    sub_10000BCF4(32LL);
    sub_10003099C();
    *uint64_t v27 = 136315138;
    sub_10000C030();
    sub_1000A75D8();
    uint64_t v28 = sub_100021E70();
    sub_10002FF50(v28, v29, &a9);
    *(void *)(v21 + 4sub_100006F7C(v0 + 8) = v30;
    sub_10002FE4C(v21 + 48, v21 + 56);
    sub_100007570();
    sub_10002FDD4();
    sub_10000BFEC((void *)&_mh_execute_header, v31, v32, "Removing session %s complete");
    sub_100021F38(v22);
    sub_10000BCC4(v22);
    sub_10000BCC4((uint64_t)v27);
  }

  else
  {
    sub_10000BCDC(*(void *)(v21 + 104));
  }

  swift_task_dealloc(*(void *)(v21 + 144));
  return sub_10002FDE0(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_100026890(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  v2[9] = sub_100021CC4(v4);
  uint64_t v5 = sub_100030A38();
  v2[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[11] = v6;
  v2[12] = sub_100021CC4(v6);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000268F0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 48);
  uint64_t v4 = v3[31];
  uint64_t v5 = v3[32];
  sub_10000729C(v3 + 28, v4);
  *(void *)(v0 + 104) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 72))(v2, v4, v5);
  sub_10002FFE4((uint64_t)(v3 + 14), v0 + 16);
  uint64_t v6 = v3[14];
  uint64_t v7 = swift_task_alloc(32LL);
  *(void *)(v7 + ++*(void *)(v0 + 16) = v2;
  sub_100021EB0();
  sub_10000DFD0((uint64_t (*)(uint64_t *))sub_10002FDBC, v7, v6);
  uint64_t v9 = v8;
  *(void *)(v0 + 112) = v8;
  sub_10000C1E0();
  sub_10002294C();
  if (v9)
  {
    sub_100030768(*(void *)(v0 + 88));
    uint64_t v10 = (void *)swift_task_alloc(dword_10010BDEC);
    *(void *)(v0 + 12sub_100016BD0(0, v0, 0) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100026A10;
    return sub_10002FFC8(v9, *(void *)(v0 + 96));
  }

  else
  {
    uint64_t v12 = sub_1000305E0();
    sub_100030830( (uint64_t)v12,  enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.success(_:));
    sub_10003041C();
    sub_100021DDC();
    sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_10000C1B8();
    sub_10002294C();
    return sub_10002FDE0(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_100026A10()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100026A60()
{
  uint64_t v2 = sub_1000305E0();
  sub_100030830( (uint64_t)v2,  enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.success(_:));
  sub_10003041C();
  sub_100021DDC();
  sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10000C1B8();
  sub_10002294C();
  return sub_10002FDE0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100026AB8(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = sub_100030A38();
  v2[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_100021CC4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100026AFC()
{
  uint64_t v3 = *(void *)(v0 + 104);
  sub_10002FFE4(v3 + 112, v0 + 56);
  uint64_t v4 = *(void *)(v3 + 112);
  if ((v4 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *(void *)(v3 + 112);
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v6 = __CocoaSet.makeIterator()(v5);
    uint64_t v7 = sub_1000303C0();
    sub_1000302EC(&qword_10010BA40, v8, type metadata accessor for DaemonSession);
    Set.Iterator.init(_cocoa:)(v6, v7, v9);
    uint64_t result = *(void *)(v0 + 16);
    uint64_t v11 = *(void *)(v0 + 24);
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v14 = *(void *)(v0 + 48);
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
    uint64_t v11 = v4 + 56;
    uint64_t v13 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    uint64_t v14 = v17 & *(void *)(v4 + 56);
    uint64_t result = swift_bridgeObjectRetain(v4);
    uint64_t v12 = 0LL;
  }

  *(void *)(v0 + 144) = v11;
  *(void *)(v0 + 152) = v13;
  *(void *)(v0 + 136) = result;
  *(_DWORD *)(v0 + 192) = enum case for RequestCancellationReason.clientTermination(_:);
  if (result < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v14)
  {
    sub_1000307FC();
    goto LABEL_29;
  }

  int64_t v22 = v12 + 1;
  if (!__OFADD__(v12, 1LL))
  {
    unint64_t v23 = *(void *)(v0 + 152) + 64LL;
    if (v22 < (uint64_t)(v23 >> 6))
    {
      uint64_t v24 = *(void *)(v0 + 144);
      int64_t v2 = v12 + 1;
      if (*(void *)(v24 + 8 * v22)) {
        goto LABEL_28;
      }
      int64_t v25 = v23 >> 6;
      int64_t v2 = v12 + 2;
      if (v12 + 2 >= v25) {
        goto LABEL_35;
      }
      if (*(void *)(v24 + 8 * v2)) {
        goto LABEL_28;
      }
      int64_t v2 = v12 + 3;
      if (v12 + 3 >= v25) {
        goto LABEL_35;
      }
      if (*(void *)(v24 + 8 * v2))
      {
LABEL_28:
        sub_1000309D8();
LABEL_29:
        sub_1000309C8(v18, v19);
        while (1)
        {
          *(void *)(v0 + 16sub_100006F7C(v0 + 8) = v2;
          *(void *)(v0 + 176) = v13;
          *(void *)(v0 + 16sub_100016BD0(0, v0, 0) = v1;
          if (!v1) {
            goto LABEL_35;
          }
          if (v12 == (int)sub_1000309B8())
          {
            sub_100030768(*(void *)(v0 + 120));
            uint64_t v28 = (void *)swift_task_alloc(dword_10010BDEC);
            *(void *)(v0 + 184) = v28;
            uint64_t v29 = sub_100030A40(v28, (uint64_t)sub_100026D7C);
            return sub_10002FFC8(v29, v30);
          }

          sub_1000228B4();
          uint64_t result = *(void *)(v0 + 136);
          uint64_t v12 = v2;
          uint64_t v14 = v13;
          if ((result & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v20 = sub_1000302BC();
          if (!v20) {
            goto LABEL_35;
          }
          *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v20;
          uint64_t v21 = sub_1000303C0();
          sub_100022CFC();
          sub_100022CC0(v0 + 80, v0 + 88, (uint64_t)&type metadata for Swift.AnyObject + 8, v21);
          uint64_t v1 = *(void *)(v0 + 80);
          sub_100030590();
          int64_t v2 = v12;
          uint64_t v13 = v14;
        }
      }

      int64_t v2 = v12 + 4;
      if (v12 + 4 < v25)
      {
        if (!*(void *)(v24 + 8 * v2))
        {
          int64_t v26 = v12 + 5;
          while (v26 < v25)
          {
            sub_1000306D8();
            if (v27)
            {
              int64_t v2 = v26 - 1;
              goto LABEL_28;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_28;
      }
    }

uint64_t sub_100026D7C()
{
  uint64_t v0 = sub_100030B28();
  sub_10000BCE4(v0);
  sub_10002FFB8();
  sub_1000306A4();
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100026DC4()
{
  uint64_t v4 = *(void *)(v1 + 168);
  for (uint64_t i = *(void *)(v1 + 176); ; uint64_t i = v0)
  {
    uint64_t result = *(void *)(v1 + 136);
    if ((result & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v9 = sub_1000302BC();
    if (!v9) {
      goto LABEL_26;
    }
    *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v9;
    uint64_t v10 = sub_1000303C0();
    sub_100022CFC();
    sub_100022CC0(v1 + 80, v1 + 88, (uint64_t)&type metadata for Swift.AnyObject + 8, v10);
    uint64_t v2 = *(void *)(v1 + 80);
    sub_100030590();
    int64_t v3 = v4;
    uint64_t v0 = i;
LABEL_22:
    *(void *)(v1 + 16sub_100006F7C(v0 + 8) = v3;
    *(void *)(v1 + 176) = v0;
    *(void *)(v1 + 16sub_100016BD0(0, v0, 0) = v2;
    if (!v2)
    {
LABEL_26:
      uint64_t result = *(void *)(v1 + 136);
LABEL_27:
      sub_1000212AC(result);
      sub_10000C140();
      return sub_10002FDE0(*(uint64_t (**)(void))(v1 + 8));
    }

    if (v4 == (int)sub_1000309B8())
    {
      sub_100030768(*(void *)(v1 + 120));
      uint64_t v17 = (void *)swift_task_alloc(dword_10010BDEC);
      *(void *)(v1 + 184) = v17;
      uint64_t v18 = sub_100030A40(v17, (uint64_t)sub_100026D7C);
      return sub_10002FFC8(v18, v19);
    }

    sub_1000228B4();
    uint64_t v4 = v3;
  }

  if (i)
  {
    sub_1000307FC();
LABEL_21:
    sub_1000309C8(v7, v8);
    goto LABEL_22;
  }

  int64_t v11 = v4 + 1;
  if (!__OFADD__(v4, 1LL))
  {
    unint64_t v12 = *(void *)(v1 + 152) + 64LL;
    uint64_t v13 = *(void *)(v1 + 144);
    int64_t v3 = v4 + 1;
    if (!*(void *)(v13 + 8 * v11))
    {
      int64_t v14 = v12 >> 6;
      int64_t v3 = v4 + 2;
      if (v4 + 2 >= v14) {
        goto LABEL_26;
      }
      if (!*(void *)(v13 + 8 * v3))
      {
        int64_t v3 = v4 + 3;
        if (v4 + 3 >= v14) {
          goto LABEL_26;
        }
        if (!*(void *)(v13 + 8 * v3))
        {
          int64_t v3 = v4 + 4;
          if (v4 + 4 >= v14) {
            goto LABEL_26;
          }
          if (!*(void *)(v13 + 8 * v3))
          {
            int64_t v15 = v4 + 5;
            while (v15 < v14)
            {
              sub_1000306D8();
              if (v16)
              {
                int64_t v3 = v15 - 1;
                goto LABEL_20;
              }
            }

            goto LABEL_27;
          }
        }
      }
    }

uint64_t sub_100026F7C(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010B9A0);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[9] = v4;
  v2[10] = sub_10002FDFC(v4);
  v2[11] = sub_10002287C();
  uint64_t v5 = sub_100030A38();
  v2[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[13] = v6;
  v2[14] = sub_100021CC4(v6);
  sub_100021C90();
  return sub_100021BCC(v7, v8, v9);
}

#error "100027184: call analysis failed (funcsize=166)"
uint64_t sub_1000272AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v0 = sub_100030B3C();
  sub_10000BCE4(v0);
  sub_10002FFB8();
  sub_1000306A4();
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_1000272F8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010F464);
  *(void *)(v0 + 136) = v1;
  sub_100023C84(v1, (uint64_t)sub_100027340);
  return sub_1000C2CDC();
}

uint64_t sub_100027340()
{
  return sub_10000BD98();
}

uint64_t sub_100027378()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D614);
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000273E8;
  return sub_10005D514(*(void *)(v0 + 88));
}

uint64_t sub_1000273E8()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100027438()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v1);
}

uint64_t sub_100027474()
{
  v1[6] = v0;
  uint64_t v2 = sub_100003B20(&qword_10010B208);
  v1[7] = sub_100021CC4(*(void *)(v2 - 8));
  uint64_t v3 = sub_100003B20(&qword_10010C030);
  v1[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[9] = v4;
  v1[10] = sub_100021CC4(v4);
  uint64_t v5 = sub_100003B20(&qword_10010C038);
  v1[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[12] = v6;
  v1[13] = sub_100021CC4(v6);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000274F8()
{
  *(void *)(v0 + 112) = sub_10000729C( (void *)(*(void *)(v0 + 48) + 128LL),  *(void *)(*(void *)(v0 + 48) + 152LL));
  return sub_10000BD98();
}

uint64_t sub_100027538()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100027578()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  AsyncStream.makeAsyncIterator()(v0[8]);
  sub_100022BF8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10002F9E8(&qword_10010C040, v3, (uint64_t (*)(uint64_t))type metadata accessor for SessionManager);
  v0[15] = v4;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[16] = v5;
  sub_100030270(v5);
  return sub_1000304DC();
}

uint64_t sub_100027608()
{
  uint64_t v0 = sub_100030B3C();
  sub_10000BCE4(v0);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10002763C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v13 = *(unsigned int *)(v12 + 160) | ((unint64_t)*(unsigned __int8 *)(v12 + 164) << 32);
  if ((v13 & 0xFF00000000LL) == 0x500000000LL)
  {
    (*(void (**)(void, void))(*(void *)(v12 + 96) + 8LL))( *(void *)(v12 + 104),  *(void *)(v12 + 88));
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    return sub_10002FDE0(*(uint64_t (**)(void))(v12 + 8));
  }

  uint64_t v15 = *(void *)(v12 + 120);
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v17 = *(void *)(v12 + 56);
  type metadata accessor for _OSActivity(0LL);
  *(void *)(v12 + 136) = _OSActivity.__allocating_init(_:)("Process State Update", 20LL, 2LL);
  uint64_t v18 = sub_100021FC8();
  sub_100005FB0(v17, 1LL, 1LL, v18);
  uint64_t v19 = sub_100007460((uint64_t)&unk_100103178, 45LL);
  *(void *)(v19 + ++*(void *)(v0 + 16) = v16;
  *(void *)(v19 + 24) = v15;
  *(void *)(v19 + 32) = v16;
  *(_DWORD *)(v19 + 4sub_100016BD0(0, v0, 0) = v13;
  *(_BYTE *)(v19 + 44) = BYTE4(v13);
  LODWORD(v17) = sub_1000060B4(v17, 1LL, v18);
  uint64_t v20 = sub_10000BD20(v16);
  uint64_t v21 = *(void *)(v12 + 56);
  if ((_DWORD)v17 != 1)
  {
    unsigned __int8 v26 = TaskPriority.rawValue.getter(v20);
    sub_1000304C4(v21, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL));
    uint64_t v22 = v26 | 0x1C00LL;
    uint64_t v16 = *(void *)(v19 + 16);
    if (v16) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v25 = 0LL;
    uint64_t v23 = 0LL;
    goto LABEL_8;
  }

  sub_10003096C(v20, &qword_10010B208);
  uint64_t v22 = 7168LL;
  if (!v16) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v23 = *(void *)(v19 + 24);
  uint64_t ObjectType = swift_getObjectType(v16);
  swift_unknownObjectRetain(v16);
  uint64_t v25 = v16;
  dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v23);
  sub_100030B58();
  swift_unknownObjectRelease(v16);
LABEL_8:
  uint64_t v27 = sub_100007460((uint64_t)&unk_1001031A0, 32LL);
  *(void *)(v27 + ++*(void *)(v0 + 16) = &unk_10010C050;
  *(void *)(v27 + 24) = v19;
  if (v23 | v25)
  {
    uint64_t v28 = v12 + 16;
    *(void *)(v12 + ++*(void *)(v0 + 16) = 0LL;
    *(void *)(v12 + 24) = 0LL;
    *(void *)(v12 + 32) = v25;
    *(void *)(v12 + 4sub_100016BD0(0, v0, 0) = v23;
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  uint64_t v29 = *(void *)(v12 + 48);
  uint64_t v30 = swift_task_create(v22, v28, (char *)&type metadata for () + 8, &unk_10010B290, v27);
  uint64_t v31 = *(void *)(v29 + 280);
  *(void *)(v29 + 28sub_100016BD0(0, v0, 0) = v30;
  swift_release(v31);
  uint64_t v32 = *(void *)(v29 + 280);
  *(void *)(v12 + 144) = v32;
  if (v32)
  {
    sub_100021D80();
    uint64_t v33 = (void *)sub_10002287C();
    *(void *)(v12 + 152) = v33;
    sub_100023C84(v33, (uint64_t)sub_1000278C8);
    sub_10002FF0C();
    return Task<>.value.getter(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12);
  }

  else
  {
    *(void *)(*(void *)(v12 + 48) + 28Hasher.init(_seed:)(v3, 0LL) = 0LL;
    _OSActivity.close()();
    sub_100021E70();
    uint64_t v42 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v12 + 12sub_100006F7C(v0 + 8) = v42;
    sub_100030270(v42);
    sub_10002FF0C();
    return AsyncStream.Iterator.next(isolation:)(v43, v44, v45, v46);
  }

uint64_t sub_1000278C8()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100027908()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 280);
  *(void *)(v1 + 28sub_100016BD0(0, v0, 0) = 0LL;
  swift_release(v2);
  _OSActivity.close()();
  sub_100021E70();
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 12sub_100006F7C(v0 + 8) = v3;
  sub_100030270(v3);
  return sub_1000304DC();
}

uint64_t sub_100027974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[28] = a4;
  v5[29] = a5;
  uint64_t v7 = type metadata accessor for InferenceProviderDescriptor(0LL);
  v5[30] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[31] = v8;
  v5[32] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003B20(&qword_10010B208);
  v5[33] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003B20(&qword_10010B9A0);
  v5[34] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[35] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[36] = swift_task_alloc(v12);
  v5[37] = swift_task_alloc(v12);
  return swift_task_switch(sub_100027A38, a4, 0LL);
}

uint64_t sub_100027A38()
{
  uint64_t v2 = *(void *)(v0 + 224);
  sub_10002FFE4(v2 + 112, v0 + 96);
  uint64_t v3 = *(void *)(v2 + 112);
  if ((v3 & 0xC000000000000001LL) != 0)
  {
    uint64_t v4 = (uint64_t)_swiftEmptySetSingleton;
    v216 = _swiftEmptySetSingleton;
    sub_1000300CC(v3);
    uint64_t v5 = sub_10003067C();
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(int *)(v0 + 232);
      uint64_t v1 = (_DWORD *)sub_1000303C0();
      do
      {
        *(void *)(v0 + 2++*(void *)(v0 + 16) = v7;
        uint64_t v9 = sub_100022CC0(v0 + 208, v0 + 216, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t)v1);
        uint64_t v10 = Session.Metadata.onBehalfOfPID.getter(v9);
        uint64_t v18 = *(void *)(v0 + 208);
        if (v10 == v8)
        {
          unint64_t v19 = *(void *)(v4 + 16);
          if (*(void *)(v4 + 24) <= v19)
          {
            sub_10001A510( v19 + 1,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v176,  v177,  v180,  v182,  v184,  v186,  v188,  v190,  v191,  v192,  v194,  v196,  v199,  v201,  v202,  v203,  v204,  v206,  v207,  v209,  v211,  v213,  v215,  (uint64_t)v216);
            uint64_t v4 = (uint64_t)v216;
          }

          Hasher.init(_seed:)(v217, *(void *)(v4 + 40));
          sub_1000A7478((uint64_t)v217);
          Swift::Int v20 = Hasher._finalize()();
          uint64_t v21 = v4 + 56;
          uint64_t v22 = -1LL << *(_BYTE *)(v4 + 32);
          unint64_t v23 = v20 & ~v22;
          unint64_t v24 = v23 >> 6;
          if (((-1LL << v23) & ~*(void *)(v4 + 56 + 8 * (v23 >> 6))) != 0)
          {
            unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v4 + 56 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v26 = 0;
            unint64_t v27 = (unint64_t)(63 - v22) >> 6;
            do
            {
              if (++v24 == v27 && (v26 & 1) != 0)
              {
                __break(1u);
LABEL_99:
                sub_1000212AC(v4);
                sub_10000C140();
                sub_10000C1B8();
                sub_10002FF48();
                sub_100030494();
                sub_100030118();
                __asm { BR              X0 }
              }

              BOOL v28 = v24 == v27;
              if (v24 == v27) {
                unint64_t v24 = 0LL;
              }
              v26 |= v28;
              uint64_t v29 = *(void *)(v21 + 8 * v24);
            }

            while (v29 == -1);
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          }

          *(void *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
          *(void *)(*(void *)(v4 + 48) + 8 * vsub_100006F7C(v0 + 25) = v18;
          ++*(void *)(v4 + 16);
        }

        else
        {
          Swift::Int v20 = sub_100030B98();
        }

        uint64_t v7 = __CocoaSet.Iterator.next()(v20);
      }

      while (v7);
    }

    uint64_t v30 = sub_100021DDC();
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 232) & 0xFFFFFFFFFFLL;
    uint64_t v33 = swift_bridgeObjectRetain(v3);
    uint64_t v30 = sub_10002F194(v33, v32);
    uint64_t v4 = v30;
  }

  uint64_t v197 = v0 + 152;
  uint64_t v193 = v0 + 160;
  if ((v4 & 0xC000000000000001LL) != 0)
  {
    uint64_t v34 = __CocoaSet.makeIterator()(v4);
    uint64_t v35 = sub_1000303C0();
    sub_1000302EC(&qword_10010BA40, v36, type metadata accessor for DaemonSession);
    uint64_t v30 = Set.Iterator.init(_cocoa:)(v34, v35, v37);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v38 = *(void *)(v0 + 64);
    uint64_t v39 = *(void *)(v0 + 72);
    uint64_t v40 = *(void *)(v0 + 80);
    unint64_t v41 = *(void *)(v0 + 88);
  }

  else
  {
    uint64_t v40 = 0LL;
    uint64_t v42 = -1LL;
    uint64_t v43 = -1LL << *(_BYTE *)(v4 + 32);
    uint64_t v38 = v4 + 56;
    uint64_t v39 = ~v43;
    uint64_t v44 = -v43;
    if (v44 < 64) {
      uint64_t v42 = ~(-1LL << v44);
    }
    unint64_t v41 = v42 & *(void *)(v4 + 56);
  }

  uint64_t v178 = v0 + 144;
  v214 = (void *)(v0 + 168);
  v205 = (uint64_t *)(v0 + 176);
  v187 = (uint64_t *)(v0 + 192);
  v183 = (void *)(v0 + 184);
  v185 = (void *)(v0 + 200);
  *(void *)(v0 + 312) = v38;
  *(void *)(v0 + 32sub_100016BD0(0, v0, 0) = v39;
  *(void *)(v0 + 304) = v4;
  *(void *)&__int128 v31 = 136315138LL;
  __int128 v200 = v31;
  v195 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v31 = 136315394LL;
  __int128 v189 = v31;
  v181 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    *(void *)(v0 + 32sub_100006F7C(v0 + 8) = 0LL;
    if ((v4 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v47 = __CocoaSet.Iterator.next()(v30);
    if (!v47) {
      goto LABEL_98;
    }
    uint64_t v55 = v47;
    uint64_t v56 = sub_100030178(v47, v48, v49, v50, v51, v52, v53, v54, v176, v178, (uint64_t)v181, (uint64_t)v183, v185);
    swift_unknownObjectRetain(v55);
    uint64_t v4 = (uint64_t)v187;
    uint64_t v57 = sub_100022C44();
    sub_100022CC0(v57, v58, v59, v56);
    uint64_t v60 = *v187;
    swift_unknownObjectRelease(v55);
    uint64_t v46 = v40;
    uint64_t v1 = (_DWORD *)v41;
LABEL_48:
    *(void *)(v0 + 344) = v46;
    *(void *)(v0 + 352) = v1;
    *(void *)(v0 + 336) = v60;
    if (!v60)
    {
LABEL_98:
      uint64_t v4 = *(void *)(v0 + 304);
      goto LABEL_99;
    }

    uint64_t v69 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
    *(void *)(v0 + 36sub_100016BD0(0, v0, 0) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
    sub_10002FFE4(v60 + v69, v0 + 120);
    uint64_t v70 = sub_10003087C();
    if (v71)
    {
      uint64_t v80 = -1LL << *(_BYTE *)(v70 + 32);
      uint64_t v76 = v70 + 56;
      uint64_t v78 = ~v80;
      uint64_t v81 = -v80;
      if (v81 < 64) {
        uint64_t v82 = ~(-1LL << v81);
      }
      else {
        uint64_t v82 = -1LL;
      }
      uint64_t v79 = v82 & *(void *)(v70 + 56);
      uint64_t v75 = swift_bridgeObjectRetain(v70);
      uint64_t v77 = 0LL;
    }

    else
    {
      sub_1000300CC(v70);
      uint64_t v72 = sub_10003067C();
      uint64_t v73 = sub_10000C074();
      sub_10002F9E8(&qword_10010B478, 255LL, type metadata accessor for DaemonRequest);
      Set.Iterator.init(_cocoa:)(v72, v73, v74);
      uint64_t v75 = *(void *)(v0 + 16);
      uint64_t v76 = *(void *)(v0 + 24);
      uint64_t v78 = *(void *)(v0 + 32);
      uint64_t v77 = *(void *)(v0 + 40);
      uint64_t v79 = *(void *)(v0 + 48);
    }

    *(void *)(v0 + 376) = v76;
    *(void *)(v0 + 384) = v78;
    *(void *)(v0 + 36sub_100006F7C(v0 + 8) = v75;
    if (v75 < 0)
    {
      uint64_t v86 = sub_1000302BC();
      if (!v86) {
        goto LABEL_62;
      }
      uint64_t v94 = sub_100030188(v86, v87, v88, v89, v90, v91, v92, v93, v176, v178, (uint64_t)v181, v183);
      sub_100022CFC();
      uint64_t v95 = sub_100022C44();
      sub_100022CC0(v95, v96, (uint64_t)v181, v94);
      uint64_t v85 = *v205;
      sub_100030590();
      uint64_t v4 = v77;
      uint64_t v83 = v79;
    }

    else
    {
      if (v79)
      {
        uint64_t v83 = (v79 - 1) & v79;
        unint64_t v84 = __clz(__rbit64(v79)) | (v77 << 6);
        uint64_t v4 = v77;
      }

      else
      {
        int64_t v143 = v77 + 1;
        if (__OFADD__(v77, 1LL)) {
          goto LABEL_103;
        }
        if (v143 >= (uint64_t)((unint64_t)(v78 + 64) >> 6))
        {
LABEL_91:
          uint64_t v79 = 0LL;
          goto LABEL_62;
        }

        unint64_t v144 = *(void *)(v76 + 8 * v143);
        uint64_t v4 = v77 + 1;
        if (!v144)
        {
          int64_t v145 = (unint64_t)(v78 + 64) >> 6;
          uint64_t v4 = v77 + 2;
          if (v77 + 2 >= v145) {
            goto LABEL_91;
          }
          unint64_t v144 = *(void *)(v76 + 8 * v4);
          if (!v144)
          {
            uint64_t v4 = v77 + 3;
            if (v77 + 3 >= v145) {
              goto LABEL_91;
            }
            unint64_t v144 = *(void *)(v76 + 8 * v4);
            if (!v144)
            {
              uint64_t v4 = v77 + 4;
              if (v77 + 4 >= v145) {
                goto LABEL_91;
              }
              unint64_t v144 = *(void *)(v76 + 8 * v4);
              if (!v144)
              {
                int64_t v146 = v77 + 5;
                do
                {
                  if (v146 >= v145) {
                    goto LABEL_91;
                  }
                  sub_100030AA4();
                }

                while (!v144);
                uint64_t v4 = v146 - 1;
              }
            }
          }
        }

        uint64_t v83 = (v144 - 1) & v144;
        unint64_t v84 = __clz(__rbit64(v144)) + (v4 << 6);
      }

      uint64_t v85 = *(void *)(*(void *)(v75 + 48) + 8 * v84);
      sub_10000C278();
    }

    *(void *)(v0 + 40sub_100016BD0(0, v0, 0) = v4;
    *(void *)(v0 + 40sub_100006F7C(v0 + 8) = v83;
    *(void *)(v0 + 392) = v85;
    if (v85)
    {
      sub_100030454();
      sub_100030118();
      return swift_task_switch(v164, v165, v166);
    }

LABEL_62:
    unint64_t v97 = (unint64_t)*(unsigned __int8 *)(v0 + 236) << 32;
    sub_1000212AC(*(void *)(v0 + 368));
    if (v97)
    {
      if (qword_10010B090 == -1) {
        goto LABEL_93;
      }
      goto LABEL_104;
    }

    if (qword_10010B090 != -1) {
      swift_once(&qword_10010B090, sub_100023C98);
    }
    uint64_t v98 = sub_10000BF6C();
    uint64_t v99 = (void *)sub_100003BA0(v98, (uint64_t)qword_10010BDA0);
    *(void *)(v0 + 432) = v99;
    sub_100021C84();
    sub_10000C158();
    os_log_type_t v100 = sub_10000C108();
    if (sub_10000C0F8(v100))
    {
      uint64_t v79 = sub_10000BCF4(12LL);
      uint64_t v101 = sub_10000BCF4(32LL);
      *uint64_t v1 = sub_100030C40( v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v176,  v178,  (uint64_t)v181,  (uint64_t)v183,  (uint64_t)v185,  (uint64_t)v187,  v189,  *((uint64_t *)&v189 + 1),  v191,  v193,  (uint64_t)v195,  v197,  v200).n128_u32[0];
      v1 += 3;
      sub_10000C030();
      sub_1000A75D8();
      uint64_t v109 = sub_100021E70();
      sub_1000302A4(v109, v110, v217);
      uint64_t v112 = sub_100030AF0(v111, v214);
      sub_10002FE4C((uint64_t)v112, (uint64_t)v205);
      sub_10002FDD4();
      sub_1000303D0();
      sub_100030670();
      sub_10002FE40( v113,  v114,  v115,  "Client state reporter event: session %s is foreground, marking assets as in use by the session");
      sub_1000302F4();
      sub_10000BCC4(v4);
      sub_10000BCC4(v79);
    }

    else
    {

      sub_10002FDD4();
    }

    *(void *)(v0 + 44sub_100016BD0(0, v0, 0) = sub_100030168();
    if (!v79)
    {
      sub_10003023C();
      sub_100030750();
      uint64_t v116 = sub_100021FC8();
      sub_10002FF28(v116);
      uint64_t v117 = sub_100007460((uint64_t)&unk_1001031F0, 32LL);
      uint64_t v118 = sub_1000304CC(v117);
      uint64_t v120 = sub_100003874(v118, (uint64_t)&unk_10010C070, v119);
      sub_10002FF5C(v120);
      v170 = (void *)swift_task_alloc(dword_10010D5E4);
      *(void *)(v0 + 456) = v170;
      sub_10002FEE4(v170, (uint64_t)sub_10002961C);
      sub_100030118();
      return sub_1000543C8(v171, v172, v173, v174);
    }

    uint64_t v121 = *(void *)(v0 + 432);
    v122 = *(os_log_s **)(v0 + 336);
    sub_1000224B4();
    sub_100023C90();
    sub_1000224B4();
    uint64_t v123 = sub_100023C90();
    Logger.logObject.getter(v123);
    os_log_type_t v124 = sub_100030BCC();
    BOOL v125 = sub_100030134(v124);
    uint64_t v126 = *(void *)(v0 + 336);
    if (v125)
    {
      uint64_t v127 = *(void *)(v0 + 296);
      uint64_t v208 = *(void *)(v0 + 280);
      v128 = (_DWORD *)sub_10000BCF4(22LL);
      v210 = (void *)sub_10000BCF4(8LL);
      uint64_t v212 = sub_10000BCF4(32LL);
      v217[0] = v212;
      _DWORD *v128 = v189;
      uint64_t v129 = v126 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
      sub_100030734();
      sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
      sub_100030534(v130);
      sub_100030B58();
      sub_1000303C8(v127, *(uint64_t (**)(uint64_t, uint64_t))(v208 + 8));
      sub_100030304(v129, v131, v217);
      *(void *)(v0 + 152) = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v197, v193, v128 + 1);
      sub_10000BCDC(v126);
      sub_10000C000();
      sub_1000226B0();
      uint64_t v1 = (_DWORD *)sub_100030588();
      *(void *)(v0 + 16sub_100016BD0(0, v0, 0) = v1;
      sub_1000301B8(v193, (uint64_t)v214);
      void *v210 = v1;
      sub_100021F6C();
      sub_100021F6C();
      sub_1000300DC( (void *)&_mh_execute_header,  v122,  (os_log_type_t)v4,  "Session %s is foreground but couldn't claim assets: %@");
      sub_100003B20(&qword_10010BA58);
      sub_100021F38((uint64_t)v210);
      sub_10000BCC4((uint64_t)v210);
      uint64_t v121 = v212;
      sub_100021F38(v212);
      sub_10000BCC4(v212);
      sub_10000BCC4((uint64_t)v128);

      sub_100021F6C();
    }

    else
    {
      sub_100021F6C();
      sub_10000BCDC(v126);
      sub_100021F6C();
      sub_100021F6C();
    }

    sub_1000301DC();
    if (v71)
    {
      uint64_t v133 = *(void *)(v0 + 264);
      uint64_t v134 = *(void *)(v0 + 224);
      uint64_t v135 = sub_100021FC8();
      sub_10002FF3C(v133, v136, v137, v135);
      sub_10002F9E8(&qword_10010C040, v138, (uint64_t (*)(uint64_t))type metadata accessor for SessionManager);
      uint64_t v140 = v139;
      uint64_t v141 = (void *)sub_100007460((uint64_t)&unk_1001031C8, 48LL);
      v141[2] = v134;
      v141[3] = v140;
      v141[4] = v121;
      v141[5] = v134;
      sub_10000BD20(v134);
      uint64_t v142 = sub_1000307E8(v133, (uint64_t)&unk_10010C060);
    }

    else
    {
      uint64_t v142 = v121;
    }

    swift_release(v142);
    uint64_t v40 = *(void *)(v0 + 344);
    unint64_t v41 = *(void *)(v0 + 352);
    uint64_t v4 = *(void *)(v0 + 304);
  }

  if (v41)
  {
    uint64_t v1 = (_DWORD *)((v41 - 1) & v41);
    unint64_t v45 = __clz(__rbit64(v41)) | (v40 << 6);
    uint64_t v46 = v40;
LABEL_47:
    uint64_t v60 = *(void *)(*(void *)(v4 + 48) + 8 * v45);
    sub_10000C030();
    goto LABEL_48;
  }

  if (!__OFADD__(v40, 1LL))
  {
    sub_100030464();
    if (v63 == v64) {
      goto LABEL_98;
    }
    uint64_t v65 = *(void *)(v0 + 312);
    unint64_t v66 = *(void *)(v65 + 8 * v62);
    uint64_t v46 = v62;
    if (!v66)
    {
      int64_t v67 = v61 >> 6;
      uint64_t v46 = v62 + 1;
      if (v62 + 1 >= v67) {
        goto LABEL_98;
      }
      unint64_t v66 = *(void *)(v65 + 8 * v46);
      if (!v66)
      {
        uint64_t v46 = v62 + 2;
        if (v62 + 2 >= v67) {
          goto LABEL_98;
        }
        unint64_t v66 = *(void *)(v65 + 8 * v46);
        if (!v66)
        {
          uint64_t v46 = v62 + 3;
          if (v62 + 3 >= v67) {
            goto LABEL_98;
          }
          unint64_t v66 = *(void *)(v65 + 8 * v46);
          if (!v66)
          {
            uint64_t v68 = v40 + 5;
            do
            {
              if (v68 >= v67) {
                goto LABEL_99;
              }
              sub_1000306D8();
            }

            while (!v66);
            uint64_t v46 = v68 - 1;
          }
        }
      }
    }

    uint64_t v1 = (_DWORD *)((v66 - 1) & v66);
    unint64_t v45 = __clz(__rbit64(v66)) + (v46 << 6);
    goto LABEL_47;
  }

  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  swift_once(&qword_10010B090, sub_100023C98);
LABEL_93:
  uint64_t v147 = sub_10000BF6C();
  v148 = (void *)sub_100003BA0(v147, (uint64_t)qword_10010BDA0);
  sub_100021C84();
  sub_10000C158();
  os_log_type_t v149 = sub_10000C108();
  if (sub_10000C0F8(v149))
  {
    uint64_t v150 = sub_10000BCF4(12LL);
    uint64_t v151 = sub_10000BCF4(32LL);
    *uint64_t v1 = sub_100030C40( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v176,  v178,  (uint64_t)v181,  (uint64_t)v183,  (uint64_t)v185,  (uint64_t)v187,  v189,  *((uint64_t *)&v189 + 1),  v191,  v193,  (uint64_t)v195,  v197,  v200).n128_u32[0];
    sub_10000C030();
    sub_1000A75D8();
    uint64_t v159 = sub_100021E70();
    sub_10002FF50(v159, v160, v217);
    void *v179 = v161;
    sub_10002FE4C((uint64_t)v179, v198);
    sub_10002FDD4();
    sub_100007570();
    sub_10000BFEC( (void *)&_mh_execute_header,  v162,  v163,  "Client state reporter event: session %s is not foreground, releasing assets");
    sub_100021F38(v4);
    sub_10000BCC4(v4);
    sub_10000BCC4(v150);
  }

  else
  {

    sub_10002FDD4();
  }

  sub_100030220();
  sub_100030598();
  v167 = (void *)swift_task_alloc(dword_10010D614);
  *(void *)(v0 + 424) = v167;
  sub_1000300B4(v167, (uint64_t)sub_100028E34);
  sub_100030118();
  return sub_10005D514(v168);
}

  uint64_t v103 = *v165;
  if ((*v165 & 0xC000000000000001LL) != 0)
  {
    if (v103 < 0) {
      uint64_t v104 = *v165;
    }
    else {
      uint64_t v104 = v103 & 0xFFFFFFFFFFFFFF8LL;
    }
    __CocoaSet.makeIterator()(v104);
    sub_10000C074();
    sub_100021AD0(&qword_10010B478, type metadata accessor for DaemonRequest);
    uint64_t v105 = sub_1000307DC();
    uint64_t result = Set.Iterator.init(_cocoa:)(v105, v106, v107);
    uint64_t v103 = *(void *)(v1 + 16);
    uint64_t v108 = *(void *)(v1 + 24);
    uint64_t v109 = *(void *)(v1 + 32);
    uint64_t v110 = *(void *)(v1 + 40);
    uint64_t v111 = *(void *)(v1 + 48);
  }

  else
  {
    uint64_t v110 = 0LL;
    uint64_t v112 = -1LL;
    uint64_t v113 = -1LL << *(_BYTE *)(v103 + 32);
    uint64_t v108 = v103 + 56;
    uint64_t v109 = ~v113;
    uint64_t v114 = -v113;
    if (v114 < 64) {
      uint64_t v112 = ~(-1LL << v114);
    }
    uint64_t v111 = v112 & *(void *)(v103 + 56);
  }

  *(void *)(v1 + 456) = v108;
  *(void *)(v1 + 464) = v109;
  *(void *)(v1 + 44sub_100006F7C(v0 + 8) = v103;
  *(_DWORD *)(v1 + 512) = enum case for RequestCancellationReason.specificPolicyChange(_:);
  if (v103 < 0)
  {
    uint64_t v119 = __CocoaSet.Iterator.next()(result);
    if (v119)
    {
      *uint64_t v142 = v119;
      uint64_t v120 = sub_10000C074();
      sub_100022CFC();
      sub_100022CC0((uint64_t)v143, (uint64_t)v142, (uint64_t)&type metadata for Swift.AnyObject + 8, v120);
      uint64_t v118 = *v143;
      sub_100030590();
      uint64_t v117 = v110;
      os_log_type_t v115 = v111;
      goto LABEL_76;
    }

    goto LABEL_95;
  }

  if (v111)
  {
    os_log_type_t v115 = (v111 - 1) & v111;
    uint64_t v116 = __clz(__rbit64(v111)) | (v110 << 6);
    uint64_t v117 = v110;
    goto LABEL_73;
  }

  uint64_t v133 = v110 + 1;
  if (__OFADD__(v110, 1LL))
  {
    __break(1u);
    return result;
  }

  uint64_t v134 = v109 + 64;
  if (v133 >= (uint64_t)(v134 >> 6))
  {
LABEL_95:
    sub_1000212AC(*(void *)(v1 + 448));
    uint64_t v139 = (unint64_t *)swift_task_alloc(dword_10010F464);
    *(void *)(v1 + 504) = v139;
    *uint64_t v139 = v1;
    v139[1] = (unint64_t)sub_1000C81F4;
    return sub_1000C2CDC();
  }

  uint64_t v135 = *(void *)(v108 + 8 * v133);
  uint64_t v117 = v110 + 1;
  if (!v135)
  {
    uint64_t v137 = v134 >> 6;
    uint64_t v117 = v110 + 2;
    if (v110 + 2 < v137)
    {
      uint64_t v135 = *(void *)(v108 + 8 * v117);
      if (v135) {
        goto LABEL_82;
      }
      uint64_t v117 = v110 + 3;
      if (v110 + 3 < v137)
      {
        uint64_t v135 = *(void *)(v108 + 8 * v117);
        if (v135) {
          goto LABEL_82;
        }
        uint64_t v117 = v110 + 4;
        if (v110 + 4 < v137)
        {
          uint64_t v135 = *(void *)(v108 + 8 * v117);
          if (v135) {
            goto LABEL_82;
          }
          uint64_t v138 = v110 + 5;
          while (v138 < v137)
          {
            uint64_t v135 = *(void *)(v108 + 8 * v138++);
            if (v135)
            {
              uint64_t v117 = v138 - 1;
              goto LABEL_82;
            }
          }
        }
      }
    }

    goto LABEL_95;
  }

uint64_t sub_1000285C0()
{
  return sub_100021BCC(v0, v1, v2);
}

#error "1000288B4: call analysis failed (funcsize=493)"
uint64_t sub_100028E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 424));
  sub_10002FFB8();
  sub_1000306A4();
  return sub_100021BCC(v1, v2, v3);
}

#error "100028F14: call analysis failed (funcsize=454)"
uint64_t sub_10002961C()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  sub_100022330();
  sub_10000C130();
  sub_100022B10(v2);
  v0[58] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = v0[35];
  uint64_t v6 = v0[31];
  uint64_t v5 = v0[32];
  swift_bridgeObjectRelease(v0[55]);
  sub_10000BF84();
  sub_1000303C8(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_10000C0D4();
  return sub_100030334(v7, v8, v9);
}

#error "1000297A8: call analysis failed (funcsize=453)"
#error "100029F9C: call analysis failed (funcsize=474)"
uint64_t sub_10002A61C(uint64_t a1)
{
  uint64_t v1;
  *(void *)(v1 + ++*(void *)(v0 + 16) = a1;
  return swift_task_switch(sub_10002A634, 0LL, 0LL);
}

uint64_t sub_10002A634()
{
  **(_BYTE **)(v0 + ++*(void *)(v0 + 16) = 0;
  return sub_10000C06C();
}

uint64_t sub_10002A640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_100003B20(&qword_10010B9A0);
  v5[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10002A6A8, a5, 0LL);
}

uint64_t sub_10002A6A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v22;
  if (qword_10010B090 != -1) {
    swift_once(&qword_10010B090, sub_100023C98);
  }
  uint64_t v26 = sub_10000BF6C();
  unint64_t v27 = (os_log_s *)sub_100003BA0(v26, (uint64_t)qword_10010BDA0);
  v22[10] = v27;
  sub_100021C84();
  sub_10000C158();
  os_log_type_t v28 = sub_10000C108();
  if (sub_100030134(v28))
  {
    uint64_t v29 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v30 = sub_10000BCF4(32LL);
    a11 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    sub_10000C030();
    uint64_t v31 = sub_1000A75D8();
    uint64_t v33 = v32;
    sub_100021E70();
    sub_100015EF8(v31, v33, &a11);
    uint64_t v35 = sub_100030AF0(v34, v22 + 4);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v22 + 5, v36);
    sub_100022024();
    sub_10002FDD4();
    sub_100022210( (void *)&_mh_execute_header,  v27,  v23,  "Session %s is foreground and been previously pre-warmed, pre-warming assets",  v29);
    sub_100021F38(v30);
    sub_10000BCC4(v30);
    sub_10000BCC4((uint64_t)v29);
  }

  else
  {
    sub_10002FDD4();
  }

  sub_100030598();
  uint64_t v37 = (void *)swift_task_alloc(dword_10010BE3C);
  v22[11] = v37;
  *uint64_t v37 = v22;
  v37[1] = sub_10002A844;
  sub_1000306EC(v22[9]);
  sub_100030544();
  return sub_10002E0D0(v38);
}

uint64_t sub_10002A844( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  Swift::Int v20 = (void *)*v17;
  a14 = v20;
  uint64_t v22 = v20[8];
  uint64_t v21 = v20[9];
  sub_100022B10(&a14);
  v20[12] = v16;
  swift_task_dealloc(v23);
  sub_100022BF8(v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  if (v16)
  {
    sub_100022084();
    return swift_task_switch(v24, v25, v26);
  }

  else
  {
    swift_task_dealloc(v20[9]);
    sub_100022084();
    return v28(v28, v29, v30, v31, v32, v33, v34, v35);
  }

uint64_t sub_10002A8D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v22;
  uint64_t v26 = (os_log_s *)v22[12];
  sub_100021D80();
  sub_100030414();
  sub_100021D80();
  uint64_t v27 = sub_100030414();
  Logger.logObject.getter(v27);
  os_log_type_t v28 = sub_100030BCC();
  if (sub_100030134(v28))
  {
    uint64_t v29 = (_DWORD *)sub_10000BCF4(22LL);
    uint64_t v30 = (void *)sub_10000BCF4(8LL);
    a10 = sub_10000BCF4(32LL);
    a11 = a10;
    *uint64_t v29 = 136315394;
    sub_10000C030();
    sub_1000A75D8();
    uint64_t v31 = sub_100021E70();
    sub_10002FF50(v31, v32, &a11);
    v22[2] = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 2, v22 + 3, v29 + 1);
    sub_100007570();
    sub_10002FDD4();
    sub_1000226B0();
    uint64_t v34 = sub_100030588();
    v22[3] = v34;
    sub_1000301B8((uint64_t)(v22 + 3), (uint64_t)(v22 + 4));
    *uint64_t v30 = v34;
    sub_100021F6C();
    sub_100021F6C();
    sub_1000300DC( (void *)&_mh_execute_header,  v26,  v23,  "Failed to pre-warm assets for newly-foregrounded session %s: %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v30);
    sub_10000BCC4((uint64_t)v30);
    sub_100021F38(a10);
    sub_10000BCC4(a10);
    sub_10000BCC4((uint64_t)v29);

    sub_100021F6C();
  }

  else
  {
    uint64_t v35 = v22[5];
    sub_100022D04();
    sub_10000BCDC(v35);
    sub_100022D04();
    sub_100022D04();
  }

  swift_task_dealloc(v22[9]);
  sub_100030544();
  return v36(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10002AA70(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 112);
  v21[2] = a1;
  swift_bridgeObjectRetain(v4);
  sub_10000DFD0((uint64_t (*)(uint64_t *))sub_10002FDBC, (uint64_t)v21, v4);
  uint64_t v6 = v5;
  sub_1000228C4();
  if (v6)
  {
    sub_10000C278();
    sub_1000A3888();
    swift_release(v6);
    if (v2) {
      swift_release(v6);
    }
  }

  else
  {
    uint64_t v6 = sub_1000305BC();
    sub_1000302EC( (unint64_t *)&qword_10010B410,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v6, v8, 0LL, 0LL);
    uint64_t v10 = v9;
    uint64_t v11 = sub_100003B20(&qword_10010B9A0);
    UUIDIdentifier.uuid.getter(v11);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104LL))( v10,  enum case for ModelManagerError.sessionNotFound(_:),  v6);
    swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
  }

  return v6;
}

uint64_t sub_10002ABAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010B9A0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000229A8();
  Session.Metadata.id.getter(v6);
  uint64_t v7 = type metadata accessor for Session(0LL);
  char v8 = static UUIDIdentifier.== infix(_:_:)(v2, a2, v7, &protocol witness table for Session);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  return v8 & 1;
}

uint64_t sub_10002AC68(uint64_t a1, uint8_t *a2, uint8_t *a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v70[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  uint64_t v76 = &v70[-v14];
  uint64_t v15 = sub_1000A3B5C();
  if (!v4)
  {
    uint64_t v17 = v16;
    BOOL v18 = (uint8_t *)v15 == a2 && v16 == a3;
    if (v18)
    {
      swift_bridgeObjectRelease(a3);
    }

    else
    {
      uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v15, v16, 0LL);
      swift_bridgeObjectRelease(v17);
      if ((v5 & 1) == 0)
      {
        uint64_t v19 = sub_1000305BC();
        sub_1000302EC( (unint64_t *)&qword_10010B410,  v20,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
        sub_1000307C8(v21);
        os_log_type_t v23 = v22;
        void *v22 = a2;
        v22[1] = a3;
        uint64_t v24 = (unsigned int *)&enum case for ModelManagerError.invalidRequestModelBundleID(_:);
LABEL_46:
        (*(void (**)(uint8_t **, void, uint64_t))(*(void *)(v19 - 8) + 104LL))(v23, *v24, v19);
        uint64_t v56 = sub_10002289C();
        swift_willThrow(v56, v57, v58, v59, v60, v61, v62, v63);
        return v5;
      }
    }

    uint64_t v5 = sub_1000A324C();
    uint64_t v74 = v13;
    uint64_t v75 = v10;
    if (!a4)
    {
      if (qword_10010B090 != -1) {
        goto LABEL_57;
      }
      goto LABEL_29;
    }

    swift_bridgeObjectRetain_n(a4, 2LL);
    sub_10002B210(v5, a4);
    swift_bridgeObjectRelease(v5);
    sub_1000115F8();
    uint64_t v5 = v25;
    if (*(void *)(v25 + 16) != *(void *)(a4 + 16))
    {
      swift_bridgeObjectRelease(v25);
      uint64_t v19 = sub_1000305BC();
      sub_1000302EC( (unint64_t *)&qword_10010B410,  v53,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_1000307C8(v54);
      os_log_type_t v23 = v55;
      *uint64_t v55 = a2;
      v55[1] = a3;
      v55[2] = (uint8_t *)a4;
      uint64_t v24 = (unsigned int *)&enum case for ModelManagerError.invalidRequestRequiredAssetIDs(_:);
      goto LABEL_46;
    }

    swift_bridgeObjectRelease(a4);
    if (qword_10010B090 != -1) {
      swift_once(&qword_10010B090, sub_100023C98);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v26, (uint64_t)qword_10010BDA0);
    uint64_t v27 = sub_1000308F0();
    uint64_t v28 = Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (!sub_1000308C8(v29)) {
      goto LABEL_44;
    }
    sub_1000308B8();
    uint64_t v71 = sub_100030984();
    uint64_t v78 = v71;
    *(_DWORD *)a2 = 136315138;
    uint64_t v30 = _swiftEmptyArrayStorage;
    if (*(void *)(v5 + 16))
    {
      sub_100030474();
      sub_100020E24(v5);
      sub_100030A90();
      uint64_t v72 = v31;
      uint64_t v32 = v5;
      while ((a4 & 0x8000000000000000LL) == 0)
      {
        sub_100030B14();
        if (v33 == v34) {
          break;
        }
        if (((*(void *)(v72 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) == 0) {
          goto LABEL_55;
        }
        if (*(_DWORD *)(v5 + 36) != (_DWORD)a2) {
          goto LABEL_56;
        }
        uint64_t v35 = sub_100030944();
        sub_10002F8E0(v35, v36, type metadata accessor for ModelCatalogAsset);
        sub_100030A10();
        uint64_t v37 = v30[1];
        uint64_t v73 = *v30;
        sub_100021EB0();
        sub_10002F90C((uint64_t)v30, type metadata accessor for ModelCatalogAsset);
        if ((sub_100030B08() & 1) == 0)
        {
          sub_100030638();
          uint64_t v30 = v77;
        }

        unint64_t v39 = v30[2];
        unint64_t v38 = v30[3];
        if (v39 >= v38 >> 1)
        {
          sub_100030610(v38);
          uint64_t v30 = v77;
        }

        v30[2] = v39 + 1;
        uint64_t v40 = &v30[2 * v39];
        v40[4] = v73;
        v40[5] = v37;
        uint64_t v5 = v32;
        sub_100020D3C(a4, a2, v28 & 1, v32);
        sub_100030818();
        if (v18)
        {
          sub_100030BA0();
          goto LABEL_49;
        }
      }

      while (1)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        swift_once(&qword_10010B090, sub_100023C98);
LABEL_29:
        uint64_t v41 = type metadata accessor for Logger(0LL);
        sub_100003BA0(v41, (uint64_t)qword_10010BDA0);
        uint64_t v42 = sub_1000308F0();
        uint64_t v28 = Logger.logObject.getter(v42);
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (!sub_1000308C8(v43)) {
          break;
        }
        sub_1000308B8();
        uint64_t v71 = sub_100030984();
        uint64_t v78 = v71;
        *(_DWORD *)a2 = 136315138;
        uint64_t v44 = _swiftEmptyArrayStorage;
        if (!*(void *)(v5 + 16))
        {
LABEL_48:
          Array.description.getter(v44);
          sub_1000309A8();
          sub_10003086C();
          sub_100030560(v65);
          sub_100030770();
          sub_1000228C4();
          os_log_type_t v66 = a4;
          int64_t v67 = "Request didn't specify required asset IDs, using full asset bundle: %s";
          goto LABEL_50;
        }

        sub_100030474();
        sub_100020E24(v5);
        sub_100030A90();
        uint64_t v72 = v5;
        uint64_t v73 = v45;
        while ((a4 & 0x8000000000000000LL) == 0)
        {
          sub_100030B14();
          if (v33 == v34) {
            break;
          }
          if (((*(void *)(v73 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) == 0) {
            goto LABEL_52;
          }
          if (*(_DWORD *)(v5 + 36) != (_DWORD)a2) {
            goto LABEL_53;
          }
          uint64_t v46 = sub_100030944();
          sub_10002F8E0(v46, v47, type metadata accessor for ModelCatalogAsset);
          sub_100030A10();
          uint64_t v49 = *v44;
          uint64_t v48 = v44[1];
          sub_100021EB0();
          sub_10002F90C((uint64_t)v44, type metadata accessor for ModelCatalogAsset);
          if ((sub_100030B08() & 1) == 0)
          {
            sub_100030638();
            uint64_t v44 = v77;
          }

          unint64_t v51 = v44[2];
          unint64_t v50 = v44[3];
          if (v51 >= v50 >> 1)
          {
            sub_100030610(v50);
            uint64_t v44 = v77;
          }

          v44[2] = v51 + 1;
          uint64_t v52 = &v44[2 * v51];
          v52[4] = v49;
          v52[5] = v48;
          uint64_t v5 = v72;
          sub_100020D3C(a4, a2, v28 & 1, v72);
          sub_100030818();
          if (v18)
          {
            sub_100030BA0();
            goto LABEL_48;
          }
        }

        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
      }

void sub_10002B210(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t v3 = sub_100003B20(&qword_10010C028);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v48 = *(void *)(v45 - 8);
  uint64_t v6 = __chkstk_darwin(v45);
  uint64_t v41 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v40 = (uint64_t)&v39 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v39 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v47 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v19 = 0LL;
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v20 = type metadata accessor for ModelCatalogAsset;
  while (v18)
  {
    unint64_t v21 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    unint64_t v22 = v21 | (v19 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v48 + 72);
    sub_10002F8E0(*(void *)(v47 + 48) + v26 * v22, (uint64_t)v14, v20);
    sub_10000B7B0((uint64_t)v14, (uint64_t)v12);
    uint64_t v27 = *v12;
    uint64_t v28 = v12[1];
    swift_bridgeObjectRetain(v28);
    sub_1000310FC(v27, v28, v46);
    os_log_type_t v29 = v20;
    char v31 = v30;
    swift_bridgeObjectRelease(v28);
    if ((v31 & 1) != 0)
    {
      sub_10002F8E0((uint64_t)v12, (uint64_t)v5, v29);
      uint64_t v32 = 0LL;
    }

    else
    {
      uint64_t v32 = 1LL;
    }

    uint64_t v20 = v29;
    uint64_t v33 = v45;
    sub_100005FB0((uint64_t)v5, v32, 1LL, v45);
    sub_10002F90C((uint64_t)v12, v20);
    if (sub_1000060B4((uint64_t)v5, 1LL, v33) == 1)
    {
      sub_10002F99C((uint64_t)v5, &qword_10010C028);
    }

    else
    {
      char v34 = v20;
      uint64_t v35 = v40;
      sub_10000B7B0((uint64_t)v5, v40);
      sub_10000B7B0(v35, v41);
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0) {
        uint64_t v42 = (void *)sub_1000B294C();
      }
      unint64_t v36 = v42[2];
      if (v36 >= v42[3] >> 1) {
        uint64_t v42 = (void *)sub_1000B294C();
      }
      uint64_t v37 = v41;
      unint64_t v38 = v42;
      v42[2] = v36 + 1;
      sub_10000B7B0( v37,  (uint64_t)v38 + ((*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
      + v36 * v26);
      uint64_t v20 = v34;
    }
  }

  int64_t v23 = v19 + 1;
  if (__OFADD__(v19, 1LL))
  {
    __break(1u);
    goto LABEL_34;
  }

  if (v23 >= v44) {
    goto LABEL_32;
  }
  unint64_t v24 = *(void *)(v43 + 8 * v23);
  ++v19;
  if (v24) {
    goto LABEL_21;
  }
  int64_t v19 = v23 + 1;
  if (v23 + 1 >= v44) {
    goto LABEL_32;
  }
  unint64_t v24 = *(void *)(v43 + 8 * v19);
  if (v24) {
    goto LABEL_21;
  }
  int64_t v19 = v23 + 2;
  if (v23 + 2 >= v44) {
    goto LABEL_32;
  }
  unint64_t v24 = *(void *)(v43 + 8 * v19);
  if (v24) {
    goto LABEL_21;
  }
  int64_t v19 = v23 + 3;
  if (v23 + 3 >= v44) {
    goto LABEL_32;
  }
  unint64_t v24 = *(void *)(v43 + 8 * v19);
  if (v24)
  {
LABEL_21:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
    goto LABEL_22;
  }

  int64_t v25 = v23 + 4;
  if (v25 >= v44)
  {
LABEL_32:
    swift_bridgeObjectRelease(v46);
    swift_release(v47);
    return;
  }

  unint64_t v24 = *(void *)(v43 + 8 * v25);
  if (v24)
  {
    int64_t v19 = v25;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v19 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v19 >= v44) {
      goto LABEL_32;
    }
    unint64_t v24 = *(void *)(v43 + 8 * v19);
    ++v25;
    if (v24) {
      goto LABEL_21;
    }
  }

uint64_t sub_10002B60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 224) = a7;
  *(void *)(v8 + 232) = v7;
  *(_BYTE *)(v8 + 376) = a5;
  *(void *)(v8 + 20sub_100006F7C(v0 + 8) = a3;
  *(void *)(v8 + 2++*(void *)(v0 + 16) = a4;
  *(void *)(v8 + 192) = a1;
  *(void *)(v8 + 20sub_100016BD0(0, v0, 0) = a2;
  uint64_t v9 = sub_100003B20(&qword_10010B408);
  *(void *)(v8 + 24sub_100016BD0(0, v0, 0) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 24sub_100006F7C(v0 + 8) = v10;
  *(void *)(v8 + 256) = sub_100021CC4(v10);
  uint64_t v11 = sub_100030CC8();
  *(void *)(v8 + 264) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 272) = v12;
  *(void *)(v8 + 28sub_100016BD0(0, v0, 0) = sub_10002FDFC(v12);
  *(void *)(v8 + 28sub_100006F7C(v0 + 8) = sub_10002287C();
  uint64_t v13 = sub_100021FC8();
  *(void *)(v8 + 296) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 304) = v14;
  *(void *)(v8 + 312) = sub_100021CC4(v14);
  uint64_t v15 = sub_1000306E4();
  *(void *)(v8 + 32sub_100016BD0(0, v0, 0) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v8 + 32sub_100006F7C(v0 + 8) = v16;
  *(void *)(v8 + 336) = sub_10002FDFC(v16);
  *(void *)(v8 + 344) = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v17, v18, v19);
}

uint64_t sub_10002B6C0()
{
  uint64_t v2 = (uint8_t *)v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = (uint8_t *)v0[24];
  unint64_t v4 = RequestMetadata.requiredAssetIDs.getter();
  v0[44] = sub_10002AC68(v1, v3, v2, v4);
  uint64_t v5 = v0[43];
  sub_1000228C4();
  sub_1000A329C(v5);
  uint64_t v6 = (void *)swift_task_alloc(dword_10010D07C);
  v0[45] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10002B7C0;
  return sub_1000303E4((uint64_t)(v0 + 2), v0[43]);
}

uint64_t sub_10002B7C0()
{
  v0[46] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[29];
    swift_bridgeObjectRelease(v0[44]);
    uint64_t v5 = sub_10002BD48;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = v0[29];
    uint64_t v5 = sub_10002B824;
  }

  return sub_100021BCC((uint64_t)v5, v6, 0LL);
}

uint64_t sub_10002B824()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void *)(v0 + 368);
    uint64_t v2 = (__int128 *)sub_1000307F0();
    sub_1000070EC(v2, v3);
    sub_1000A3B5C();
    if (!v1)
    {
      uint64_t v65 = *(void *)(v0 + 344);
      uint64_t v67 = *(void *)(v0 + 336);
      uint64_t v62 = *(void *)(v0 + 328);
      uint64_t v32 = *(void *)(v0 + 312);
      uint64_t v63 = *(void *)(v0 + 320);
      uint64_t v33 = *(void *)(v0 + 304);
      uint64_t v34 = *(void *)(v0 + 288);
      uint64_t v58 = *(void *)(v0 + 272);
      uint64_t v59 = *(void *)(v0 + 296);
      uint64_t v60 = *(void *)(v0 + 264);
      uint64_t v69 = *(void *)(v0 + 280);
      uint64_t v71 = *(void *)(v0 + 256);
      uint64_t v35 = *(void *)(v0 + 216);
      uint64_t v57 = *(void *)(v0 + 224);
      sub_10000C074();
      sub_100007104(v0 + 56, v0 + 136);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v35, v59);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v34, v57, v60);
      sub_10000C20C();
      sub_1000D14A4();
      uint64_t v37 = v36;
      sub_100006F7C((void *)(v0 + 56));
      sub_10002F99C(v0 + 16, &qword_10010C008);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v65, v63);
      sub_10000C1B8();
      swift_task_dealloc(v67);
      sub_10002294C();
      sub_10000BFE4();
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v37);
    }

    uint64_t v4 = *(void *)(v0 + 328);
    swift_bridgeObjectRelease(*(void *)(v0 + 352));
    sub_100006F7C((void *)(v0 + 56));
    sub_10002F99C(v0 + 16, &qword_10010C008);
    sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 352));
    sub_10002F99C(v0 + 96, &qword_10010C008);
    if (qword_10010B090 != -1) {
      swift_once(&qword_10010B090, sub_100023C98);
    }
    uint64_t v5 = sub_10000BF6C();
    sub_100003BA0(v5, (uint64_t)qword_10010BDA0);
    uint64_t v6 = sub_100022D1C();
    v7(v6);
    uint64_t v8 = sub_100030C8C();
    uint64_t v11 = sub_100022218(v8, v9, v10);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = sub_100030684(v12);
    uint64_t v15 = *(void *)(v0 + 328);
    uint64_t v16 = *(void *)(v0 + 320);
    uint64_t v17 = *(void *)(v0 + 272);
    uint64_t v18 = *(void *)(v0 + 280);
    if (v14)
    {
      os_log_type_t v70 = v13;
      uint64_t v19 = *(void *)(v0 + 256);
      uint64_t v61 = *(void *)(v0 + 248);
      uint64_t v64 = *(void *)(v0 + 336);
      uint64_t v20 = *(void *)(v0 + 240);
      uint64_t v21 = sub_10000BCF4(22LL);
      uint64_t v68 = sub_10000BCF4(64LL);
      v72[0] = v68;
      *(_DWORD *)uint64_t v21 = 136315394;
      os_log_type_t v66 = v12;
      sub_100030BC4();
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
      sub_100022CF4(v19, *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
      sub_100030304(v23, v24, v72);
      *(void *)(v0 + 176) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v21 + 4);
      sub_10000C000();
      sub_10003029C(v18, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
      *(_WORD *)(v21 + 12) = 2080;
      sub_1000302EC( &qword_10010C010,  v26,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v28 = sub_100030B70(v27, v27);
      sub_100015EF8(v28, v29, v72);
      *(void *)(v0 + 184) = v30;
      sub_10000C04C(v0 + 184, v0 + 192);
      sub_10000BD28();
      char v31 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v31(v64, v16);
      uint64_t v12 = v66;
      sub_10000BFDC( (void *)&_mh_execute_header,  v66,  v70,  "request %s made with unrecognized InferenceProvider %s",  (uint8_t *)v21);
      sub_1000307B4(v68);
      sub_10000BCC4(v68);
      sub_10000BCC4(v21);
    }

    else
    {
      sub_10003029C(*(void *)(v0 + 280), *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
      char v31 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      uint64_t v39 = sub_1000307F0();
      ((void (*)(uint64_t))v31)(v39);
    }

    uint64_t v40 = *(void *)(v0 + 344);
    uint64_t v41 = *(void *)(v0 + 320);
    uint64_t v42 = sub_1000305BC();
    sub_1000302EC( (unint64_t *)&qword_10010B410,  v43,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v45 = sub_1000302B0(v42, v44);
    uint64_t v47 = (uint64_t)v46;
    *uint64_t v46 = InferenceProviderDescriptor.description.getter(v45);
    *(void *)(v47 + sub_100006F7C(v0 + 8) = v48;
    uint64_t v49 = sub_1000222C4( v47,  enum case for ModelManagerError.unrecognizedInferenceProvider(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104LL));
    swift_willThrow(v49, v50, v51, v52, v53, v54, v55, v56);
    sub_10002F99C(v0 + 16, &qword_10010C008);
    v31(v40, v41);
  }

  sub_100030AB0(*(void *)(v0 + 344));
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002FF04();
  sub_10002FF48();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002BD48()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002BDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(void *)(v7 + 56) = a6;
  *(void *)(v7 + 64) = v6;
  *(_DWORD *)(v7 + 152) = a5;
  *(void *)(v7 + 4sub_100016BD0(0, v0, 0) = a3;
  *(void *)(v7 + 4sub_100006F7C(v0 + 8) = a4;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  uint64_t v8 = sub_100003B20(&qword_10010B9A0);
  *(void *)(v7 + 72) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 8sub_100016BD0(0, v0, 0) = v9;
  *(void *)(v7 + 8sub_100006F7C(v0 + 8) = sub_100021CC4(v9);
  uint64_t v10 = sub_100003B20(&qword_10010B408);
  *(void *)(v7 + 96) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 112) = sub_100021CC4(v11);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_10002BE28()
{
  if (qword_10010B090 != -1) {
    swift_once(&qword_10010B090, sub_100023C98);
  }
  uint64_t v2 = sub_10000BF6C();
  uint64_t v3 = (os_log_s *)sub_100003BA0(v2, (uint64_t)qword_10010BDA0);
  sub_10000C030();
  sub_10000C158();
  os_log_type_t v4 = sub_10000C108();
  if (sub_100030934(v4))
  {
    uint64_t v5 = (uint8_t *)sub_10000BCF4(12LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    v1[2] = Session.Metadata.onBehalfOfPID.getter(v5);
    sub_100030C00((uint64_t)(v1 + 2), (uint64_t)(v1 + 3), (uint64_t)(v5 + 4));
    sub_10000C280();
    sub_100022210((void *)&_mh_execute_header, v3, v0, "Forming DaemonRequest for session with obop %ld", v5);
    sub_10000BCC4((uint64_t)v5);
  }

  else
  {
    sub_10000C280();
  }

  sub_100030908(v1[8]);
  v1[15] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
  sub_100030AE8();
  sub_100030B64();
  if (v6 != v7)
  {
    __break(1u);
  }

  else
  {
    sub_1000308E0();
    if (v6 ^ v7 | v8)
    {
      uint64_t v9 = (void *)swift_task_alloc(dword_10010E20C);
      v1[16] = v9;
      sub_100030A58(v9, (uint64_t)sub_10002BF84);
      sub_10002FF0C();
      sub_10009A2BC(v10);
      return;
    }
  }

  __break(1u);
}

uint64_t sub_10002BF84(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(_BYTE *)(*(void *)v1 + 156LL) = a1;
  sub_100030924(v2);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10002BFD4()
{
  if (*(_BYTE *)(v0 + 156) == 3 || !Session.Metadata.onBehalfOfPID.getter(v1))
  {
    uint64_t v11 = sub_1000305BC();
    sub_1000302EC( (unint64_t *)&qword_10010B410,  v12,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v11, v13);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 104LL))( v14,  enum case for ModelManagerError.onBehalfOfProcessNotRunning(_:),  v11);
    sub_10003092C();
    sub_100030018();
    sub_100030AB8();
    uint64_t v15 = sub_10003030C(OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken, v23, v25);
    sub_100030974(v15, v16, v17, v18, v19, v20, v21, v22, v24, v26, v27, v28);
    sub_1000307BC(v29);
    sub_10003092C();
    sub_10002FF04();
    sub_10002294C();
    return sub_100030350(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_10010BE14);
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10002C0F4;
    uint64_t v3 = sub_1000306EC(*(void *)(v0 + 24));
    return sub_10002B60C(v3, v4, v5, v6, v7, v8, v9);
  }

uint64_t sub_10002C0F4(uint64_t a1)
{
  v2[18] = v1;
  swift_task_dealloc(v6);
  if (v1) {
    return sub_10002FF74((uint64_t)sub_10002C174, v2[8], 0LL);
  }
  swift_task_dealloc(v2[14]);
  sub_10000C140();
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(a1);
}

#error "10002C1A4: call analysis failed (funcsize=22)"
uint64_t sub_10002C1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = v7;
  *(void *)(v8 + 8sub_100006F7C(v0 + 8) = a4;
  *(void *)(v8 + 96) = a6;
  *(_BYTE *)(v8 + 28sub_100006F7C(v0 + 8) = a5;
  *(void *)(v8 + 72) = a2;
  *(void *)(v8 + 8sub_100016BD0(0, v0, 0) = a3;
  *(void *)(v8 + 64) = a1;
  uint64_t v9 = sub_100003B20(&qword_10010B9A0);
  *(void *)(v8 + 12sub_100016BD0(0, v0, 0) = v9;
  int v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 12sub_100006F7C(v0 + 8) = v10;
  *(void *)(v8 + 136) = sub_100021CC4(v10);
  uint64_t v11 = sub_100003B20(&qword_10010B408);
  *(void *)(v8 + 144) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 152) = v12;
  *(void *)(v8 + 16sub_100016BD0(0, v0, 0) = sub_100021CC4(v12);
  uint64_t v13 = sub_1000306E4();
  *(void *)(v8 + 16sub_100006F7C(v0 + 8) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 176) = v14;
  *(void *)(v8 + 184) = sub_10002FDFC(v14);
  *(void *)(v8 + 192) = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v15, v16, v17);
}

uint64_t sub_10002C270()
{
  uint64_t v1 = sub_1000307F0();
  v2(v1);
  uint64_t v3 = (void *)swift_task_alloc(dword_10010D62C);
  *(void *)(v0 + 20sub_100016BD0(0, v0, 0) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10002C300;
  sub_100022084();
  return sub_10005ED64(v4, v5);
}

uint64_t sub_10002C300()
{
  uint64_t v2 = v1[25];
  v1[26] = v3;
  v1[27] = v0;
  sub_100030924(v2);
  uint64_t v4 = v1[24];
  uint64_t v5 = v1[21];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v1[22] + 8LL);
  if (!v0) {
    v1[28] = v6;
  }
  v6(v4, v5);
  sub_10000C0D4();
  return sub_10002FF74(v7, v8, v9);
}

uint64_t sub_10002C378()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 208));
    if (qword_10010B090 != -1) {
      swift_once(&qword_10010B090, sub_100023C98);
    }
    uint64_t v1 = sub_10000BF6C();
    sub_100003BA0(v1, (uint64_t)qword_10010BDA0);
    sub_100021C84();
    uint64_t v2 = (void *)sub_10000C158();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (sub_10000C0F8(v3))
    {
      uint64_t v4 = *(void *)(v0 + 160);
      uint64_t v77 = *(void *)(v0 + 152);
      uint64_t v5 = *(void *)(v0 + 144);
      uint64_t v75 = *(void *)(v0 + 64);
      uint64_t v6 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v80 = sub_10000BCF4(32LL);
      v82[0] = v80;
      *(_DWORD *)uint64_t v6 = 136315138;
      RequestMetadata.id.getter(v80);
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
      sub_100030B58();
      sub_10003029C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
      sub_100030304(v4, v8, v82);
      *(void *)(v0 + 56) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4);
      sub_10000C000();
      sub_10000BCDC(v75);
      sub_100030670();
      sub_100022210(v10, v11, v12, v13, v6);
      sub_100021F38(v80);
      sub_10000BCC4(v80);
      sub_10000BCC4((uint64_t)v6);
    }

    else
    {
      sub_10000BCDC(*(void *)(v0 + 64));
    }

    uint64_t v15 = sub_1000305BC();
    sub_1000302EC( (unint64_t *)&qword_10010B410,  v16,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v15, v17);
    uint64_t v19 = sub_1000222C4( v18,  enum case for ModelManagerError.operationCancelled(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL));
    swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
LABEL_10:
    sub_100030524();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_100030118();
    __asm { BR              X0 }
  }

  uint64_t v14 = *(void *)(v0 + 216);
  sub_1000A3888();
  if (v14)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 208));
    goto LABEL_10;
  }

  uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v73 = *(void *)(v0 + 208);
  uint64_t v28 = *(void *)(v0 + 184);
  uint64_t v65 = *(void *)(v0 + 168);
  uint64_t v67 = *(void *)(v0 + 160);
  uint64_t v76 = *(void *)(v0 + 152);
  uint64_t v78 = *(void *)(v0 + 144);
  uint64_t v63 = *(void *)(v0 + 136);
  uint64_t v29 = *(void *)(v0 + 112);
  uint64_t v74 = *(void *)(v0 + 128);
  uint64_t v79 = *(void *)(v0 + 96);
  uint64_t v81 = *(void *)(v0 + 104);
  char v70 = *(_BYTE *)(v0 + 288);
  char v31 = *(void **)(v0 + 64);
  uint64_t v30 = *(void *)(v0 + 72);
  uint64_t v72 = *(void *)(v0 + 88);
  uint64_t v71 = *(void *)(v0 + 80);
  sub_100022D1C();
  sub_1000A3BB4();
  sub_100007104(v29 + 224, v0 + 16);
  uint64_t v66 = *(void *)(v0 + 40);
  uint64_t v64 = *(void *)(v0 + 48);
  uint64_t v69 = sub_10000729C((void *)(v0 + 16), v66);
  *(void *)(v0 + 232) = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
  uint64_t v32 = RequestMetadata.id.getter(v69);
  uint64_t v33 = Session.Metadata.id.getter(v32);
  uint64_t v34 = RequestMetadata.loggingIdentifier.getter(v33);
  uint64_t v61 = v35;
  uint64_t v62 = v34;
  uint64_t v36 = Session.Metadata.useCaseID.getter(v34);
  uint64_t v59 = v37;
  uint64_t v60 = v36;
  uint64_t v39 = v31[6];
  uint64_t v38 = v31[7];
  sub_10000729C(v31 + 3, v39);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v39, v38);
  uint64_t v58 = InferenceProviderDescriptor.id.getter(v40);
  uint64_t v42 = v41;
  uint64_t v43 = v68(v28, v65);
  uint64_t v44 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  *(void *)(v0 + 24sub_100016BD0(0, v0, 0) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  uint64_t v45 = v30 + v44;
  uint64_t v46 = AuditToken.processIdentifier.getter(v43);
  uint64_t v47 = (int)v46;
  uint64_t v48 = Session.Metadata.onBehalfOfPID.getter(v46);
  LOBYTE(v39) = RequestMetadata.isStream.getter(v48);
  BYTE2(v57) = RequestMetadata.isInference.getter() & 1;
  BYTE1(v57) = v70;
  LOBYTE(v57) = (v39 & 1) == 0;
  *(void *)(v0 + 24sub_100006F7C(v0 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t))(v64 + 8))( v67,  v63,  v62,  v61,  v60,  v59,  v71,  v72,  v73,  v58,  v42,  v47,  v48,  v57,  v45,  v66,  v64);
  sub_10000C000();
  sub_1000303D0();
  sub_100007570();
  sub_100022024();
  sub_1000307BC(v74);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  *(void *)(v0 + 256) = v49;
  v49(v67, v78);
  uint64_t v50 = (void *)sub_100007460((uint64_t)&unk_100103150, 48LL);
  *(void *)(v0 + 264) = v50;
  v50[2] = v30;
  v50[3] = v31;
  v50[4] = v79;
  v50[5] = v81;
  uint64_t v51 = dword_10010F48C;
  sub_10000C278();
  sub_100021D80();
  sub_10000C20C();
  uint64_t v52 = (void *)swift_task_alloc(v51);
  *(void *)(v0 + 272) = v52;
  *uint64_t v52 = v0;
  v52[1] = sub_10002C874;
  sub_100030118();
  return sub_1000C6358(v53, v54, v55);
}

uint64_t sub_10002C874()
{
  *(void *)(v0 + 28sub_100016BD0(0, v0, 0) = v1;
  swift_task_dealloc(v3);
  swift_release(*(void *)(v0 + 264));
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10002C8D0()
{
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 144);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v17 = *(void *)(v0 + 72) + *(void *)(v0 + 240);
  uint64_t v4 = v3 + 3;
  sub_1000A5670();
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = sub_10000729C((void *)(v0 + 16), v5);
  RequestMetadata.id.getter(v7);
  uint64_t v8 = v3[6];
  uint64_t v9 = v3[7];
  sub_100030C08(v4);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v11 = InferenceProviderDescriptor.id.getter(v10);
  uint64_t v13 = v12;
  v16(v1, v15);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))( v2,  v18,  0LL,  v11,  v13,  v17,  v5,  v6);
  sub_1000228C4();
  v20(v2, v19);
  sub_100030B78();
  sub_100006F7C((void *)(v0 + 16));
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10002CA28()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10002CA68()
{
  uint64_t v58 = (void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 280);
  char v2 = *(_BYTE *)(v0 + 288);
  sub_100023C90();
  uint64_t v57 = v1;
  if ((v2 & 1) == 0)
  {
    swift_errorRetain(*(void *)(v0 + 280));
    char v3 = sub_10002DD7C(v1);
    sub_100022D04();
    if ((v3 & 1) != 0)
    {
      uint64_t v4 = *(void *)(v0 + 280);
      sub_100030798();
      uint64_t v5 = *(void *)(v0 + 184);
      uint64_t v6 = *(void *)(v0 + 160);
      uint64_t v47 = *(void *)(v0 + 168);
      uint64_t v53 = *(void *)(v0 + 144);
      uint64_t v55 = v7;
      uint64_t v8 = *(void **)(v0 + 64);
      uint64_t v50 = *(void *)(v0 + 72) + v9;
      uint64_t v10 = v8 + 3;
      sub_1000A5670();
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v46 = sub_100030C08(v58);
      RequestMetadata.id.getter(v46);
      uint64_t v13 = v8[6];
      uint64_t v14 = v8[7];
      sub_10000729C(v10, v13);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
      swift_errorRetain(v4);
      uint64_t v16 = v15(v13, v14);
      uint64_t v17 = InferenceProviderDescriptor.id.getter(v16);
      uint64_t v19 = v18;
      v49(v5, v47);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))( v6,  v52,  v57,  v17,  v19,  v50,  v12,  v11);
      sub_10000C1E0();
      sub_10003069C();
      v55(v6, v53);
      sub_100030B98();
      sub_10003069C();
      sub_100006F7C(v58);
      sub_10000C140();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002FF04();
      sub_100030888();
      __asm { BR              X1 }
    }
  }

  uint64_t v21 = *(void *)(v0 + 280);
  sub_100030798();
  uint64_t v22 = *(void *)(v0 + 184);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v48 = *(void *)(v0 + 168);
  uint64_t v54 = *(void *)(v0 + 144);
  uint64_t v56 = v24;
  uint64_t v25 = *(void **)(v0 + 64);
  uint64_t v51 = *(void *)(v0 + 72) + v26;
  uint64_t v27 = v25 + 3;
  swift_willThrow(v28, v29, v30, v31, v32, v33, v34, v35);
  sub_100022D1C();
  sub_1000A5670();
  uint64_t v36 = *(void *)(v0 + 40);
  uint64_t v37 = *(void *)(v0 + 48);
  sub_100030C18(v58);
  sub_100030BC4();
  uint64_t v39 = v25[6];
  uint64_t v38 = v25[7];
  sub_10000729C(v27, v39);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
  swift_errorRetain(v21);
  uint64_t v41 = v40(v39, v38);
  uint64_t v42 = InferenceProviderDescriptor.id.getter(v41);
  uint64_t v44 = v43;
  v49(v22, v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 16))( v23,  v52,  v57,  v42,  v44,  v51,  v36,  v37);
  sub_100022D34();
  swift_errorRelease(v21);
  v56(v23, v54);
  sub_100021DDC();
  swift_errorRelease(v21);
  sub_100006F7C(v58);
  sub_100030524();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_100030888();
  __asm { BR              X0 }

uint64_t sub_10002CD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderDescriptor(0LL);
  v5[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10002CD90, 0LL, 0LL);
}

uint64_t sub_10002CD90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = v12[8];
  uint64_t v13 = v12[9];
  uint64_t v34 = v12[7];
  uint64_t v15 = (void *)v12[4];
  uint64_t v16 = (int *)v12[5];
  uint64_t v17 = v15[6];
  uint64_t v18 = v15[7];
  uint64_t v19 = (void *)sub_100022C44();
  sub_10000729C(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  sub_1000A2DD0(v13);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v12[10] = (uint64_t)v21;
  v21(v13, v34);
  uint64_t v22 = v15[6];
  uint64_t v23 = v15[7];
  sub_100030C18(v15 + 3);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  uint64_t v35 = (char *)v16 + *v16;
  uint64_t v24 = (uint64_t **)swift_task_alloc(v16[1]);
  v12[11] = (uint64_t)v24;
  *uint64_t v24 = v12;
  v24[1] = (uint64_t *)sub_10002CE74;
  sub_1000306EC(v12[2]);
  sub_10002FF0C();
  return v27(v25, v26, v27, v28, v29, v30, v31, v32, v35, a10, a11, a12);
}

uint64_t sub_10002CE74()
{
  char v2 = *(void (**)(uint64_t))(v1 + 80);
  sub_10000BCE4(*(void *)(v1 + 88));
  uint64_t v3 = sub_1000307DC();
  v2(v3);
  sub_10000C140();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CEC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 232) = a7;
  *(void *)(v8 + 24sub_100016BD0(0, v0, 0) = v7;
  *(void *)(v8 + 2++*(void *)(v0 + 16) = a5;
  *(void *)(v8 + 224) = a6;
  *(_DWORD *)(v8 + 456) = a4;
  *(void *)(v8 + 20sub_100016BD0(0, v0, 0) = a2;
  *(void *)(v8 + 20sub_100006F7C(v0 + 8) = a3;
  *(void *)(v8 + 192) = a1;
  uint64_t v9 = sub_100003B20(&qword_10010B408);
  *(void *)(v8 + 24sub_100006F7C(v0 + 8) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 256) = v10;
  *(void *)(v8 + 264) = sub_100021CC4(v10);
  uint64_t v11 = sub_100030CC8();
  *(void *)(v8 + 272) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 28sub_100016BD0(0, v0, 0) = v12;
  *(void *)(v8 + 28sub_100006F7C(v0 + 8) = sub_100021CC4(v12);
  uint64_t v13 = sub_100003B20(&qword_10010C000);
  *(void *)(v8 + 296) = sub_100021CC4(*(void *)(v13 - 8));
  uint64_t v14 = sub_1000306E4();
  *(void *)(v8 + 304) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 312) = v15;
  *(void *)(v8 + 32sub_100016BD0(0, v0, 0) = sub_10002FDFC(v15);
  *(void *)(v8 + 32sub_100006F7C(v0 + 8) = sub_10002287C();
  uint64_t v16 = sub_100003B20(&qword_10010B9A0);
  *(void *)(v8 + 336) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v8 + 344) = v17;
  *(void *)(v8 + 352) = sub_100021CC4(v17);
  sub_100021C90();
  return sub_100021BCC(v18, v19, v20);
}

uint64_t sub_10002CF94(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 352);
  uint64_t v3 = *(void *)(v1 + 240);
  RequestMetadata.sessionID.getter(a1);
  uint64_t v4 = sub_100030900(v2);
  *(void *)(v1 + 36sub_100016BD0(0, v0, 0) = v4;
  sub_100030234(*(void *)(v1 + 344));
  if (v3)
  {
    sub_100030290(*(void *)(v1 + 352));
    sub_10000C140();
    sub_10000BFE4();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    uint64_t v5 = (uint64_t (*)(void))sub_1000308A4();
    return sub_1000303FC(v5);
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_10010BE1C);
    *(void *)(v1 + 36sub_100006F7C(v0 + 8) = v7;
    *uint64_t v7 = v1;
    v7[1] = sub_10002D06C;
    return sub_10002BDB0( *(void *)(v1 + 192),  *(void *)(v1 + 200),  v4,  *(void *)(v1 + 208),  *(_DWORD *)(v1 + 456),  *(void *)(v1 + 216));
  }

uint64_t sub_10002D06C(uint64_t a1)
{
  v2[47] = a1;
  v2[48] = v1;
  swift_task_dealloc(v6);
  if (v1) {
    return sub_10002FF74((uint64_t)sub_10002D7B8, v2[30], 0LL);
  }
  uint64_t v8 = (void *)swift_task_alloc(dword_10010BE24);
  v2[49] = (uint64_t)v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10002D104;
  uint64_t v9 = sub_1000226A4();
  return sub_10002C1D0(v9, v10, v11, v12, 0, v13, v14);
}

uint64_t sub_10002D104()
{
  uint64_t v2 = v0[49];
  v0[50] = v3;
  v0[51] = v1;
  sub_100030924(v2);
  if (v1) {
    uint64_t v4 = sub_10002D804;
  }
  else {
    uint64_t v4 = sub_10002D160;
  }
  return sub_100021BCC((uint64_t)v4, v0[30], 0LL);
}

uint64_t sub_10002D160()
{
  if (*(void *)(v0 + 400))
  {
    uint64_t v2 = *(void *)(v0 + 296);
    uint64_t v1 = *(void *)(v0 + 304);
    uint64_t v3 = sub_100030414();
    sub_1000A3C9C(v3);
    if (sub_1000060B4(v2, 1LL, v1) == 1)
    {
      sub_10002F99C(*(void *)(v0 + 296), &qword_10010C000);
      sub_10003092C();
      sub_1000301C0();
      sub_100021E70();
      sub_10000C280();
      sub_100030290(*(void *)(v0 + 352));
      sub_10000C140();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      return sub_1000303FC(*(uint64_t (**)(void))(v0 + 8));
    }

    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 32LL))( *(void *)(v0 + 328),  *(void *)(v0 + 296),  *(void *)(v0 + 304));
      uint64_t v6 = (void *)swift_task_alloc(dword_10010D07C);
      *(void *)(v0 + 4++*(void *)(v0 + 16) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_10002D288;
      return sub_1000303E4(v0 + 16, *(void *)(v0 + 328));
    }
  }

  else
  {
    sub_100030AC4();
    sub_100021E70();
    sub_100030720();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    uint64_t v5 = (uint64_t (*)(void))sub_1000227B8();
    return sub_1000303FC(v5);
  }

uint64_t sub_10002D288()
{
  *(void *)(v0 + 424) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_10002D850;
  }
  else {
    uint64_t v4 = sub_10002D2DC;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 240), 0LL);
}

uint64_t sub_10002D2DC()
{
  uint64_t v1 = sub_100030C8C();
  sub_10002FB20(v1, v2, v3);
  if (!v0[15])
  {
    sub_10003096C(v4, &qword_10010C008);
    if (qword_10010B090 != -1) {
      swift_once(&qword_10010B090, sub_100023C98);
    }
    uint64_t v18 = v0[40];
    uint64_t v17 = v0[41];
    uint64_t v19 = v0[39];
    uint64_t v21 = v0[35];
    uint64_t v20 = v0[36];
    uint64_t v22 = sub_10000BF6C();
    sub_100003BA0(v22, (uint64_t)qword_10010BDA0);
    sub_100030B8C(v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
    sub_1000228F0(v18, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16));
    uint64_t v23 = (os_log_s *)sub_100030758();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = v0[40];
    uint64_t v27 = v0[35];
    uint64_t v28 = v0[36];
    if (v25)
    {
      uint64_t v58 = v0[32];
      uint64_t v29 = sub_10000BCF4(22LL);
      uint64_t v61 = sub_10000BCF4(64LL);
      v62[0] = v61;
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v60 = v23;
      sub_100030BC4();
      sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
      uint64_t v31 = sub_100030B70(v30, v30);
      os_log_type_t v59 = v24;
      uint64_t v33 = v32;
      sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
      sub_100015EF8(v31, v33, v62);
      v0[22] = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v29 + 4);
      sub_100022B4C();
      sub_10003029C(v28, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      *(_WORD *)(v29 + 12) = 2080;
      sub_1000302EC( &qword_10010C010,  v35,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v37 = sub_100030B70(v36, v36);
      sub_100015EF8(v37, v38, v62);
      v0[23] = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v29 + 14);
      sub_10000BD28();
      sub_100030C10(v26);
      uint64_t v23 = v60;
      sub_10000BFDC( (void *)&_mh_execute_header,  v60,  v59,  "request %s made with unrecognized InferenceProvider %s",  (uint8_t *)v29);
      sub_1000307B4(v61);
      sub_10000BCC4(v61);
      sub_10000BCC4(v29);
    }

    else
    {
      sub_10003029C(v0[36], *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      sub_100030C10(v26);
    }

    uint64_t v40 = v0[50];
    uint64_t v41 = v0[41];
    uint64_t v42 = sub_1000305BC();
    sub_1000302EC( (unint64_t *)&qword_10010B410,  v43,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v45 = sub_1000302B0(v42, v44);
    uint64_t v47 = (uint64_t)v46;
    *uint64_t v46 = InferenceProviderDescriptor.description.getter(v45);
    *(void *)(v47 + sub_100006F7C(v0 + 8) = v48;
    uint64_t v49 = sub_100022218( v47,  enum case for ModelManagerError.unrecognizedInferenceProvider(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104LL));
    swift_willThrow(v49, v50, v51, v52, v53, v54, v55, v56);
    swift_errorRelease(v40);
    sub_100030B98();
    sub_1000228B4();
    swift_errorRelease(v40);
    sub_10002F99C((uint64_t)(v0 + 2), &qword_10010C008);
    sub_100030C10(v41);
    swift_task_dealloc(v0[44]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030850();
    __asm { BR              X0 }
  }

  uint64_t v5 = (__int128 *)sub_1000307DC();
  sub_1000070EC(v5, v6);
  sub_10000C074();
  sub_100007104((uint64_t)(v0 + 7), (uint64_t)(v0 + 17));
  uint64_t v7 = sub_10000C278();
  v0[54] = sub_1000D16FC(v7, v0 + 17);
  uint64_t v8 = (void *)swift_task_alloc(dword_10010BE24);
  v0[55] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10002D6E8;
  sub_1000226A4();
  sub_100030850();
  return sub_10002C1D0(v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_10002D6E8()
{
  *(void *)(v0 + 44sub_100006F7C(v0 + 8) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    sub_100021F6C();
  }
  sub_10000C0D4();
  return sub_10002FF74(v4, v5, v6);
}

uint64_t sub_10002D748()
{
  uint64_t v3 = sub_100006F7C(v0);
  sub_10003096C(v3, &qword_10010C008);
  sub_10003029C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100030720();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  uint64_t v4 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10002FDE0(v4);
}

uint64_t sub_10002D7B8()
{
  return sub_1000300E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002D804()
{
  return sub_1000300E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002D850()
{
  uint64_t v1 = *(void *)(v0 + 312);
  sub_100022D04();
  sub_10000BF84();
  sub_100021DDC();
  sub_100022D04();
  sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_100030144();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_1000300E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002D8C0()
{
  uint64_t v4 = sub_100006F7C(v0);
  sub_10003096C(v4, &qword_10010C008);
  sub_10003029C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100030144();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_10002FDE0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10002D934(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = sub_100030A38();
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  void v3[9] = sub_100021CC4(v5);
  uint64_t v6 = sub_100003B20(&qword_10010B9A0);
  v3[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[11] = v7;
  v3[12] = sub_100021CC4(v7);
  uint64_t v8 = sub_100003B20(&qword_10010B408);
  v3[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[14] = v9;
  v3[15] = sub_100021CC4(v9);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10002D9BC()
{
  if (qword_10010B090 != -1) {
    swift_once(&qword_10010B090, sub_100023C98);
  }
  uint64_t v1 = v0 + 4;
  uint64_t v34 = v0;
  uint64_t v2 = v0[12];
  uint64_t v3 = v1[7];
  uint64_t v4 = sub_10000BF6C();
  sub_100003BA0(v4, (uint64_t)qword_10010BDA0);
  uint64_t v5 = sub_100030C8C();
  sub_1000228F0(v5, v6, v7);
  sub_100030B8C(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v8 = (os_log_s *)sub_100030758();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = sub_100030684(v8);
  uint64_t v12 = v1[10];
  uint64_t v11 = v1[11];
  uint64_t v13 = v1[8];
  uint64_t v14 = v1[9];
  uint64_t v16 = v1[6];
  uint64_t v15 = v1[7];
  if (v10)
  {
    uint64_t v32 = v1[7];
    uint64_t v17 = sub_10000BCF4(22LL);
    uint64_t v33 = sub_10000BCF4(64LL);
    v35[0] = v33;
    *(_DWORD *)uint64_t v17 = 136315394;
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
    sub_100015EF8(v19, v20, v35);
    uint64_t v34[2] = v21;
    sub_10000C04C((uint64_t)(v34 + 2), (uint64_t)(v34 + 3));
    sub_100007570();
    sub_10003029C(v11, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    *(_WORD *)(v17 + 12) = 2080;
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v22);
    sub_100015EF8(v23, v24, v35);
    v34[3] = v25;
    sub_10000C04C((uint64_t)(v34 + 3), (uint64_t)v1);
    sub_10000BD28();
    sub_1000303C8(v13, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
    sub_10000BFDC((void *)&_mh_execute_header, v8, v9, "Cancelling request %s for session %s", (uint8_t *)v17);
    sub_1000307B4(v33);
    sub_10000BCC4(v33);
    sub_10000BCC4(v17);
  }

  else
  {
    sub_10003029C(v1[11], *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    sub_1000303C8(v13, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  }

  v34[16] = sub_100030900(v34[5]);
  if (v1)
  {
    swift_task_dealloc(v34[15]);
    sub_10000C140();
    sub_10000BFE4();
    uint64_t v26 = (uint64_t (*)(void))sub_1000308A4();
    return sub_10003036C(v26);
  }

  else
  {
    sub_100030768(v34[8]);
    uint64_t v28 = (void *)swift_task_alloc(dword_10010E97C);
    v34[17] = v28;
    *uint64_t v28 = v34;
    v28[1] = sub_10002DC98;
    uint64_t v29 = sub_1000306EC(v34[4]);
    return sub_1000A3D98(v29, v30, v31);
  }

uint64_t sub_10002DC98()
{
  *(void *)(v0 + 144) = v1;
  swift_task_dealloc(v3);
  sub_100030234(*(void *)(v0 + 64));
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10002DCF4()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v1);
}

uint64_t sub_10002DD34()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002DD7C(uint64_t a1)
{
  uint64_t v43 = v4;
  uint64_t v5 = type metadata accessor for InferenceError.Context(0LL);
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  __chkstk_darwin(v5);
  sub_100022518();
  uint64_t v40 = v6;
  sub_100003B20(&qword_10010BFF0);
  sub_100030A28();
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100003B20(&qword_10010BFF8);
  sub_100030A28();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1000305BC();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = type metadata accessor for InferenceError(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_1000229A8();
  if (!a1)
  {
    sub_100030AD0((uint64_t)v12, 1LL);
LABEL_6:
    sub_10002F99C((uint64_t)v12, &qword_10010BFF8);
    if (a1)
    {
      sub_100030BF4();
      uint64_t v25 = sub_100003B20(&qword_10010B468);
      int v26 = swift_dynamicCast(v9, v44, v25, v20, 6LL);
      sub_100030ADC((uint64_t)v9, v26 ^ 1u);
      if (sub_1000060B4((uint64_t)v9, 1LL, v20) != 1)
      {
        uint64_t v17 = v9;
        goto LABEL_9;
      }
    }

    else
    {
      sub_100030ADC((uint64_t)v9, 1LL);
    }

    uint64_t v30 = &qword_10010BFF0;
    uint64_t v31 = (uint64_t)v9;
    goto LABEL_13;
  }

  sub_100030BF4();
  uint64_t v22 = sub_100003B20(&qword_10010B468);
  int v23 = swift_dynamicCast(v12, v44, v22, v13, 6LL);
  sub_100030AD0((uint64_t)v12, v23 ^ 1u);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v24(v19, v12, v13);
  v24(v17, v19, v13);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v17, v13) != enum case for ModelManagerError.inferenceError(_:))
  {
    sub_1000303C8((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
    goto LABEL_16;
  }

  sub_1000303C8((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 96));
LABEL_9:
  uint64_t v27 = sub_1000228F0(v1, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
  uint64_t v28 = v43;
  InferenceError.context.getter(v27);
  uint64_t v29 = v42;
  if (sub_1000060B4(v28, 1LL, v42) == 1)
  {
    sub_100022CF4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
    uint64_t v30 = &qword_10010BFE8;
    uint64_t v31 = v28;
LABEL_13:
    sub_10002F99C(v31, v30);
LABEL_16:
    char v37 = 0;
    return v37 & 1;
  }

  uint64_t v32 = v40;
  uint64_t v33 = v41;
  uint64_t v34 = sub_1000307DC();
  uint64_t v36 = v35(v34);
  char v37 = InferenceError.Context.fallbackAllowed.getter(v36);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v29);
  sub_100022CF4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  return v37 & 1;
}

uint64_t sub_10002E0D0(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = sub_100021CC4(v4);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v2[14] = sub_100021CC4(*(void *)(v5 - 8));
  uint64_t v6 = sub_100003B20(&qword_10010B9A0);
  v2[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[16] = v7;
  v2[17] = sub_10002FDFC(v7);
  v2[18] = sub_10002287C();
  uint64_t v8 = sub_100030CC0();
  v2[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[20] = v9;
  v2[21] = sub_100021CC4(v9);
  uint64_t v10 = type metadata accessor for InferenceProviderPrewarmInformation(0LL);
  v2[22] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[23] = v11;
  v2[24] = sub_100021CC4(v11);
  uint64_t v12 = sub_1000306E4();
  v2[25] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[26] = v13;
  v2[27] = sub_100021CC4(v13);
  uint64_t v14 = type metadata accessor for DaemonSession.ManagerOwnedState(0LL);
  v2[28] = sub_10002FDFC(*(void *)(v14 - 8));
  v2[29] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v15, v16, v17);
}

void sub_10002E1C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = sub_100030900(v15[9]);
  v15[30] = v16;
  if (v14)
  {
    sub_10003073C(v15[29]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    sub_1000308A4();
    sub_100030544();
    v24(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14);
    return;
  }

  uint64_t v17 = (_BYTE *)v15[29];
  uint64_t v18 = v16 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002FFE4(v16 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)(v15 + 2));
  sub_10002F8E0(v18, (uint64_t)v17, type metadata accessor for DaemonSession.ManagerOwnedState);
  *uint64_t v17 = 1;
  uint64_t v19 = sub_1000307F0();
  sub_10002F8E0(v19, v20, type metadata accessor for DaemonSession.ManagerOwnedState);
  sub_10000BE64(v18, (uint64_t)(v15 + 5), 33LL);
  uint64_t v21 = sub_100022C44();
  sub_10002F80C(v21, v22);
  sub_100030A20();
  sub_10002F90C((uint64_t)v17, type metadata accessor for DaemonSession.ManagerOwnedState);
  v15[31] = sub_1000A324C();
  sub_1000A329C(v15[27]);
  v15[32] = sub_1000A3B5C();
  v15[33] = v23;
  uint64_t v32 = v23;
  uint64_t v34 = v15[20];
  uint64_t v33 = v15[21];
  uint64_t v35 = v15[18];
  uint64_t v37 = v15[15];
  uint64_t v36 = v15[16];
  v15[34] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  (*(void (**)(uint64_t))(v34 + 16))(v33);
  uint64_t v38 = swift_bridgeObjectRetain(v32);
  Session.Metadata.id.getter(v38);
  UUIDIdentifier.uuid.getter(v37);
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8);
  v15[35] = (uint64_t)v39;
  uint64_t v40 = sub_1000303C8(v35, v39);
  uint64_t v41 = Session.Metadata.useCaseID.getter(v40);
  Session.Metadata.onBehalfOfPID.getter(v41);
  sub_100030B64();
  if (v43 != v44)
  {
    __break(1u);
  }

  else if (v42 <= 0x7FFFFFFF)
  {
    uint64_t v45 = v15[13];
    uint64_t v47 = v15[11];
    uint64_t v46 = v15[12];
    uint64_t v48 = sub_1000307F0();
    InferenceProviderPrewarmInformation.init(bundleIdentifier:requestorAuditToken:sessionUUID:useCaseIdentifier:onBehalfOfPid:)(v48);
    (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))( v45,  enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.prewarm(_:),  v47);
    uint64_t v49 = (uint64_t **)swift_task_alloc(dword_10010D5FC);
    v15[36] = (uint64_t)v49;
    *uint64_t v49 = v15;
    v49[1] = (uint64_t *)sub_10002E424;
    sub_1000226A4();
    sub_100030544();
    sub_100058470(v50, v51, v52, v53, v54, v55);
    return;
  }

  __break(1u);
}

uint64_t sub_10002E424()
{
  uint64_t v2 = v1[12];
  sub_100022B10(v3);
  v1[37] = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 8))(v1[13], v1[11]);
    sub_10000BD28();
    sub_10000C1E0();
  }

  else
  {
    swift_bridgeObjectRelease(v1[31]);
    sub_10002FFB8();
  }

  sub_1000306A4();
  return sub_100021BCC(v5, v6, v7);
}

void sub_10002E4B4()
{
  uint64_t v70 = v0[9];
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[32];
  uint64_t v3 = (void *)v0[10];
  uint64_t v4 = v0[30] + v0[34];
  uint64_t v5 = v3[31];
  uint64_t v6 = v3[32];
  uint64_t v7 = sub_10000729C(v3 + 28, v5);
  uint64_t v8 = InferenceProviderDescriptor.id.getter(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 88))( v70,  v8,  v9,  v2,  v1,  v4,  v5,  v6);
  sub_100022D34();
  sub_100022B4C();
  if (qword_10010B090 != -1) {
    swift_once(&qword_10010B090, sub_100023C98);
  }
  uint64_t v10 = sub_10000BF6C();
  sub_100003BA0(v10, (uint64_t)qword_10010BDA0);
  sub_1000306B0();
  uint64_t v11 = (os_log_s *)sub_1000228BC();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t))v0[35];
  uint64_t v68 = v0[30];
  uint64_t v15 = v0[26];
  uint64_t v14 = v0[27];
  uint64_t v17 = v0[24];
  uint64_t v16 = v0[25];
  uint64_t v69 = v0[23];
  uint64_t v71 = v0[22];
  uint64_t v18 = v0[15];
  if (v13)
  {
    uint64_t v63 = v0[24];
    uint64_t v19 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v60 = v16;
    uint64_t v20 = sub_10000BCF4(32LL);
    uint64_t v72 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
    sub_100015EF8(v22, v23, &v72);
    uint64_t v32 = sub_100030BE0(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)(v19 + 4), v0 + 8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v33, v34);
    uint64_t v35 = sub_100022024();
    sub_10003095C(v35, v36, v37, v38, v39, v40, v41, v42, v54, v56, v14, v60, v63, v15, v67);
    sub_100022210((void *)&_mh_execute_header, v11, v12, "Prewarmed assets for session %s", v19);
    sub_100021F38(v20);
    sub_10000BCC4(v20);
    sub_10000BCC4((uint64_t)v19);

    __n128 v43 = swift_release(v68);
    (*(void (**)(uint64_t, uint64_t, __n128))(v69 + 8))(v64, v71, v43);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v58, v61);
  }

  else
  {

    swift_release(v68);
    sub_10003095C(v44, v45, v46, v47, v48, v49, v50, v51, v53, v55, v57, v59, v62, v65, v67);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v17, v71);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }

  swift_task_dealloc(v0[29]);
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_1000227B8();
  sub_100030888();
  __asm { BR              X0 }

uint64_t sub_10002E76C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 184);
  swift_release(*(void *)(v0 + 240));
  sub_100022CF4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10003073C(*(void *)(v0 + 232));
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  return sub_10002FDE0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002E7E8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_1000306E4();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10002FDFC(v5);
  v3[8] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v6, v7, v8);
}

uint64_t sub_10002E83C()
{
  if (v0)
  {
    swift_task_dealloc(v1[8]);
    sub_10000C140();
    uint64_t v9 = (uint64_t (*)(void))sub_1000308A4();
  }

  else
  {
    sub_1000A329C(v1[8]);
    sub_1000A2DD0(v1[8]);
    uint64_t v3 = sub_1000A3B5C();
    uint64_t v5 = v4;
    uint64_t v7 = v1[7];
    uint64_t v6 = v1[8];
    uint64_t v8 = v1[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v1[5]);
    ModelInstance.init(assetBundleIdentifier:inferenceProvider:)(v3, v5, v7);
    sub_100021E70();
    sub_100030650(v6, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    sub_10000C1B8();
    sub_10002FF04();
    uint64_t v9 = (uint64_t (*)(void))sub_1000227B8();
  }

  return v9();
}

uint64_t sub_10002E928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  uint64_t v5 = sub_100021FC8();
  v4[23] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[24] = v6;
  v4[25] = sub_100021CC4(v6);
  uint64_t v7 = type metadata accessor for ClientData(0LL);
  v4[26] = sub_100021CC4(*(void *)(v7 - 8));
  uint64_t v8 = sub_100030CC8();
  v4[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[28] = v9;
  v4[29] = sub_100021CC4(v9);
  uint64_t v10 = sub_100003B20(&qword_10010B408);
  v4[30] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[31] = v11;
  v4[32] = sub_100021CC4(v11);
  uint64_t v12 = sub_100030CC0();
  v4[33] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[34] = v13;
  v4[35] = sub_100021CC4(v13);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  v4[36] = sub_100021CC4(*(void *)(v14 - 8));
  uint64_t v15 = sub_100003B20(&qword_10010B9A0);
  v4[37] = sub_100021CC4(*(void *)(v15 - 8));
  uint64_t v16 = type metadata accessor for Session.Metadata(0LL);
  v4[38] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[39] = v17;
  v4[40] = sub_10002FDFC(v17);
  v4[41] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v18, v19, v20);
}

uint64_t sub_10002EA28()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[39];
  uint64_t v50 = v0[38];
  uint64_t v52 = v0[40];
  uint64_t v4 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v53 = v0[33];
  uint64_t v54 = v0[35];
  uint64_t v5 = v0[22];
  uint64_t v46 = v0[21];
  uint64_t v48 = v0[34];
  uint64_t v7 = v0[19];
  uint64_t v6 = v0[20];
  uint64_t v8 = sub_100003B20(&qword_10010B718);
  uint64_t v9 = sub_100007460(v8, 48LL);
  *(_OWORD *)(v9 + ++*(void *)(v0 + 16) = xmmword_1000D8890;
  *(void *)(v9 + 32) = v7;
  *(void *)(v9 + 4sub_100016BD0(0, v0, 0) = v6;
  uint64_t v10 = type metadata accessor for Session(0LL);
  swift_bridgeObjectRetain(v6);
  uint64_t v11 = UUIDIdentifier.init()(v10, &protocol witness table for Session);
  UUID.init()(v11, v12, v13, v14, v15, v16, v17, v18);
  Session.Metadata.init(supportedAssetBundleIdentifiers:useCaseID:onBehalfOfPID:parentOfOnBehalfOfPID:loggingIdentifier:id:sessionSetID:)( v9,  0LL,  0xE000000000000000LL,  0LL,  0LL,  0xD000000000000012LL,  0x80000001000DB790LL,  v3,  v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v52, v1, v50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v54, v46, v53);
  uint64_t v19 = *(void *)(v5 + 216);
  v0[42] = v19;
  sub_100007104(v5 + 176, (uint64_t)(v0 + 2));
  sub_10000C20C();
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100003F60((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v42 = v41;
  }

  else
  {
    uint64_t v42 = _swiftEmptySetSingleton;
  }

  uint64_t v20 = v0[40];
  uint64_t v21 = v0[35];
  uint64_t v49 = v0[36];
  uint64_t v51 = v0[37];
  uint64_t v44 = v0[27];
  uint64_t v45 = v0[26];
  uint64_t v47 = v0[30];
  uint64_t v43 = v0[22];
  uint64_t v22 = v0[5];
  uint64_t v23 = sub_100006F54((uint64_t)(v0 + 2), v22);
  uint64_t v24 = *(void *)(v22 - 8);
  uint64_t v25 = (uint64_t *)sub_100021CF0(*(void *)(v24 + 64));
  sub_100022218((uint64_t)v25, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
  uint64_t v26 = sub_10002F714(v20, v21, v19, *v25, (uint64_t)v42);
  v0[43] = v26;
  sub_100006F7C(v0 + 2);
  sub_100030494();
  sub_10000BE64(v43 + 112, (uint64_t)(v0 + 7), 33LL);
  sub_10000C20C();
  sub_1000181C0(&v55, v26);
  swift_endAccess(v0 + 7);
  swift_release(v55);
  uint64_t v27 = UUIDIdentifier.init()(v44, &protocol witness table for RequestMetadata);
  uint64_t v28 = default argument 0 of ClientData.init(_:)(v27);
  ClientData.init(_:)(v28);
  uint64_t v29 = UUIDIdentifier.uuid.getter(v47);
  Session.Metadata.id.getter(v29);
  uint64_t v30 = RequestMetadata.init(loggingIdentifier:clientData:UUID:sessionID:requiredAssetIDs:isInference:isStream:)( 0xD000000000000012LL,  0x80000001000DB7B0LL,  v45,  v49,  v51,  0LL,  0LL,  0LL);
  uint64_t v31 = static TaskPriority.userInitiated.getter(v30);
  AuditToken.auditUserIdentifier.getter(v31);
  uint64_t v32 = (void *)swift_task_alloc(dword_10010BE14);
  v0[44] = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_10002ED48;
  sub_1000306EC(v0[19]);
  sub_100030850();
  return sub_10002B60C(v33, v34, v35, v36, v37, v38, v39);
}

uint64_t sub_10002ED48(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v11 = v4;
  uint64_t v6 = v4[24];
  uint64_t v5 = v4[25];
  sub_100022B10(&v11);
  v4[45] = a1;
  v4[46] = v1;
  swift_task_dealloc(v7);
  sub_100022CF4(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  if (v1) {
    return sub_100021BCC((uint64_t)sub_10002EF70, v4[22], 0LL);
  }
  uint64_t v9 = (uint64_t ***)swift_task_alloc(dword_10010F47C);
  v4[47] = (uint64_t)v9;
  char *v9 = v2;
  v9[1] = (uint64_t **)sub_10002EDFC;
  uint64_t v10 = sub_1000226A4();
  return sub_1000C4BD8(v10);
}

uint64_t sub_10002EDFC()
{
  *(void *)(v0 + 384) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = (uint64_t (*)())sub_10002F028;
  }
  else {
    uint64_t v4 = sub_10002EE50;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 176), 0LL);
}

uint64_t sub_10002EE50()
{
  uint64_t v1 = v0[43];
  uint64_t v20 = v0[41];
  uint64_t v21 = v0[40];
  uint64_t v18 = v0[39];
  uint64_t v19 = v0[38];
  uint64_t v22 = v0[37];
  uint64_t v23 = v0[36];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[28];
  uint64_t v24 = v0[35];
  uint64_t v25 = v0[26];
  uint64_t v26 = v0[25];
  uint64_t v7 = v0[22];
  swift_release(v0[45]);
  sub_10003029C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  sub_10000BE64(v7 + 112, (uint64_t)(v0 + 16), 33LL);
  sub_1000CB640(v1);
  swift_endAccess(v0 + 16);
  sub_1000228B4();
  sub_100021E70();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  uint64_t v8 = sub_10000C140();
  sub_1000308B0(v8, v9, v10, v11, v12, v13, v14, v15, v18, v19, v20, v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  sub_10000BFE4();
  sub_10002294C();
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  uint64_t v16 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10003036C(v16);
}

#error "10002F010: call analysis failed (funcsize=46)"
#error "10002F0D8: call analysis failed (funcsize=50)"
uint64_t sub_10002F0F0()
{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 112));

  sub_100006F7C((void *)(v0 + 128));
  swift_release(*(void *)(v0 + 168));
  sub_100006F7C((void *)(v0 + 176));
  swift_release(*(void *)(v0 + 216));
  sub_100006F7C((void *)(v0 + 224));
  swift_release(*(void *)(v0 + 264));
  swift_release(*(void *)(v0 + 272));
  swift_release(*(void *)(v0 + 280));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10002F15C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SessionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd14SessionManager);
}

uint64_t sub_10002F194(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  uint64_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017524(0LL, v8, v10);
    uint64_t v11 = sub_10002F308(v10, v8, v4, a2 & 0xFFFFFFFFFFLL);
    swift_release(v4);
    if (v2) {
      swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }

  else
  {
    uint64_t v20 = (void *)swift_slowAlloc(v9, -1LL);
    sub_100017524(0LL, v8, v20);
    uint64_t v11 = sub_10002F308(v20, v8, v4, a2 & 0xFFFFFFFFFFLL);
    swift_release(v4);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  return v11;
}

#error "10002F49C: call analysis failed (funcsize=112)"
uint64_t sub_10002F4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v12 = type metadata accessor for DaemonSession.LazyState(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v32 = &off_100104BD0;
  *(void *)&uint64_t v30 = a4;
  uint64_t v15 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState;
  v14[1] = 0LL;
  v14[2] = 0LL;
  *uint64_t v14 = 0LL;
  uint64_t v16 = (uint64_t)v14 + *(int *)(v12 + 24);
  uint64_t v17 = type metadata accessor for InferenceProviderDescriptor(0LL);
  sub_100005FB0(v16, 1LL, 1LL, v17);
  *((_BYTE *)v14 + *(int *)(v12 + 2sub_10000BCE4(*((void *)*v0 + 8)) = 0;
  uint64_t v18 = sub_100003B20(&qword_10010BFD8);
  uint64_t v19 = swift_allocObject( v18,  ((*(unsigned int *)(v18 + 48) + 3LL) & 0x1FFFFFFFCLL) + 4,  *(unsigned __int16 *)(v18 + 52) | 3LL);
  *(_DWORD *)(v19 + ((*(unsigned int *)(*(void *)v19 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  sub_10002F8E0( (uint64_t)v14,  v19 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v19 + 16LL),  type metadata accessor for DaemonSession.LazyState);
  sub_10002F90C((uint64_t)v14, type metadata accessor for DaemonSession.LazyState);
  *(void *)(a6 + v15) = v19;
  uint64_t v20 = a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
  uint64_t v21 = type metadata accessor for Session.Metadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32LL))(v20, a1, v21);
  uint64_t v22 = a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  uint64_t v23 = type metadata accessor for AuditToken(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v22, a2, v23);
  *(void *)(a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_requestManager) = a3;
  sub_1000070EC(&v30, a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog);
  uint64_t v24 = a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState) = 0;
  uint64_t v25 = v24 + *(int *)(type metadata accessor for DaemonSession.ManagerOwnedState(0LL) + 24);
  uint64_t v26 = enum case for DaemonSessionState.none(_:);
  uint64_t v27 = type metadata accessor for DaemonSessionState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104LL))(v25, v26, v27);
  *(void *)(v24 + sub_100006F7C(v0 + 8) = a5;
  return a6;
}

uint64_t sub_10002F714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = type metadata accessor for ModelCatalogProvider(0LL);
  uint64_t v21 = &off_100104BD0;
  v19[0] = a4;
  uint64_t v10 = type metadata accessor for DaemonSession(0LL);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v12 = sub_100006F54((uint64_t)v19, v20);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_10002F4CC(a1, a2, a3, *v14, a5, v11);
  sub_100006F7C(v19);
  return v16;
}

uint64_t sub_10002F80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DaemonSession.ManagerOwnedState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F850()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10002F880()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010C01C);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BCBC;
  sub_1000226A4();
  sub_100022084();
  return sub_10002CD28(v2, v3, v4, v5, v6);
}

void sub_10002F8E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_100030708(v3);
  sub_1000075C0();
}

void sub_10002F90C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_1000220F4(v2);
  sub_1000075C0();
}

uint64_t sub_10002F934()
{
  return sub_10002FB54();
}

uint64_t sub_10002F93C()
{
  uint64_t v0 = swift_task_alloc(dword_10010C04C);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_100027974(v2, v3, v4, v5, v6);
}

void sub_10002F99C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_100003B20(a2);
  sub_1000220F4(v2);
  sub_1000075C0();
}

uint64_t sub_10002F9C4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10002F9E8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_1000075DC(v4), a1);
  }

  sub_1000075C0();
}

uint64_t sub_10002FA1C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10002FA44()
{
  uint64_t v0 = swift_task_alloc(dword_10010C05C);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_10002A640(v2, v3, v4, v5, v6);
}

uint64_t sub_10002FA90()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002FAB0()
{
  uint64_t v1 = swift_task_alloc(dword_10010C06C);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  uint64_t v3 = sub_100030C98();
  return sub_10002A61C(v3);
}

uint64_t sub_10002FB04(uint64_t a1)
{
  return sub_10002ABAC(a1, *(void *)(v1 + 16)) & 1;
}

void sub_10002FB20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100003B20(a3);
  sub_100030708(v3);
  sub_1000075C0();
}

uint64_t sub_10002FB4C()
{
  return sub_10002FB54();
}

uint64_t sub_10002FB54()
{
  uint64_t v0 = sub_1000307DC();
  return swift_deallocObject(v0, v1, 7LL);
}

uint64_t sub_10002FB80()
{
  uint64_t v0 = swift_task_alloc(dword_10010C07C);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_10000BF8C(v1);
  sub_100022084();
  return sub_1000254D0(v2, v3, v4, v5, v6);
}

double sub_10002FBCC(uint64_t a1)
{
  return sub_1000255CC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10002FBD8()
{
  uint64_t v5 = sub_10003049C();
  swift_release(v5);
  sub_100006F7C((void *)(v0 + 24));
  swift_release(*(void *)(v0 + 64));
  sub_100030250(v0 + v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return sub_1000223CC(v0, v1, v2);
}

double sub_10002FC30()
{
  return sub_100025840(v0[2], v0 + 3, v0[8], (uint64_t)v0 + v1);
}

uint64_t sub_10002FC60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100016BD0(0, v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002FC70(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10002FC78()
{
  unint64_t result = qword_10010F140;
  if (!qword_10010F140)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10010F140);
  }

  return result;
}

uint64_t sub_10002FCB8()
{
  uint64_t v5 = sub_10003049C();
  swift_unknownObjectRelease(v5);
  sub_10000C238();
  sub_10000C21C();
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  sub_100030250(v0 + v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return sub_1000223CC(v0, v1, v2);
}

uint64_t sub_10002FD18()
{
  uint64_t v1 = swift_task_alloc(dword_10010C09C);
  uint64_t v2 = (void *)sub_100007524(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10000BCBC;
  sub_10002FF0C();
  return sub_100025A1C(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10002FDBC(uint64_t a1)
{
  return sub_10002FB04(a1) & 1;
}

uint64_t sub_10002FDD4()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10002FDE0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002FDFC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10002FE10(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

void sub_10002FE40(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_10002FE4C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10002FE58()
{
  return Task<>.value.getter();
}

uint64_t sub_10002FE74(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002FE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000543C8(a1, a2, a3, a4);
}

uint64_t sub_10002FEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002FEC8(uint64_t a1)
{
  return sub_10005D514(a1);
}

uint64_t sub_10002FEE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10002FF04()
{
  return swift_task_dealloc(v0);
}

  ;
}

uint64_t sub_10002FF28(uint64_t a1)
{
  return sub_100005FB0(v1, 1LL, 1LL, a1);
}

uint64_t sub_10002FF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005FB0(a1, 1LL, 1LL, a4);
}

uint64_t sub_10002FF48()
{
  return swift_task_dealloc(v0);
}

void sub_10002FF50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10002FF5C(uint64_t a1)
{
  *(void *)(v1 + 44sub_100006F7C(v0 + 8) = a1;
  return sub_1000A329C(v2);
}

uint64_t sub_10002FF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002FF80(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002FF9C()
{
  return sub_1000212AC(*(void *)(v0 + 368));
}

uint64_t sub_10002FFB8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10002FFC8(uint64_t a1, uint64_t a2)
{
  return sub_100025B88(a1, a2);
}

uint64_t sub_10002FFE4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

  ;
}

uint64_t sub_10003000C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100030018()
{
  uint64_t v1 = sub_10000729C((void *)(*(void *)(v0 + 64) + 224LL), *(void *)(*(void *)(v0 + 64) + 248LL));
  return RequestMetadata.id.getter(v1);
}

void sub_10003006C()
{
  *(void *)(v1 - 104) = v0 + 120;
  *(void *)(v1 - 112) = v0 + 168;
}

uint64_t sub_1000300B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 296);
}

uint64_t sub_1000300CC(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

void sub_1000300DC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1000300E8(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

  ;
}

BOOL sub_100030134(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100030144()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t sub_100030158()
{
  return (*(uint64_t (**)(void, void))(v0[35] + 8LL))(v0[36], v0[34]);
}

uint64_t sub_100030168()
{
  return sub_1000A324C();
}

uint64_t sub_100030178( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  *a13 = a1;
  return type metadata accessor for DaemonSession(0LL);
}

uint64_t sub_100030188( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  *a12 = a1;
  return type metadata accessor for DaemonRequest(0LL);
}

uint64_t sub_10003019C@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return swift_dynamicCast(a7, v8, a1 + 8, v7, 7LL);
}

uint64_t sub_1000301B8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000301C0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000301C8(uint64_t a1)
{
  return Set.Iterator.init(_cocoa:)(v2, v1, a1);
}

  ;
}

uint64_t sub_1000301F0()
{
  return swift_release(*(void *)(v0 + 344));
}

  ;
}

uint64_t sub_100030234@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

  ;
}

uint64_t sub_100030250@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

uint64_t sub_100030270(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100030290(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_10003029C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_1000302A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000302B0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_1000302BC()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_1000302C4()
{
  return swift_errorRelease(*(void *)(v0 + 400));
}

void sub_1000302EC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
}

uint64_t sub_1000302F4()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_100030304(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10003030C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 96))( v6,  v5,  a2,  a3,  v3,  v8 + a1,  v4,  v7);
}

uint64_t sub_100030334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100030350(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10003036C(uint64_t (*a1)(void))
{
  return a1();
}

__n128 sub_100030388( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 a15)
{
  *(void *)(v16 - 12sub_100016BD0(0, v0, 0) = a1;
  *(void *)(v16 - 96) = a1;
  __n128 result = a15;
  *uint64_t v15 = a15.n128_u32[0];
  return result;
}

  ;
}

uint64_t sub_1000303C0()
{
  return type metadata accessor for DaemonSession(0LL);
}

uint64_t sub_1000303C8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000303D0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000303D8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000303E4(uint64_t a1, uint64_t a2)
{
  return sub_10004C1C0(a1, a2);
}

uint64_t sub_1000303FC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100030414()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10003041C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 80))(v1, v2, v0, v3, v4);
}

  ;
}

void sub_100030454()
{
  *(void *)(v0 + 4++*(void *)(v0 + 16) = *(void *)(*(void *)(v0 + 224) + 216LL);
}

  ;
}

void sub_100030474()
{
  *(_DWORD *)(v5 - 164) = v3;
  *(void *)(v5 - 16sub_100016BD0(0, v0, 0) = v2;
  *(void *)(v5 - 152) = v1;
  *(void *)(v5 - 8sub_100006F7C(v0 + 8) = v0;
  sub_100016BD0(0, v4, 0);
}

uint64_t sub_100030494()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10003049C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1000304C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000304CC(uint64_t a1)
{
  *(void *)(a1 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return v1;
}

uint64_t sub_1000304DC()
{
  return ((uint64_t (*)(void))AsyncStream.Iterator.next(isolation:))();
}

uint64_t sub_1000304EC()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000304F8()
{
  return swift_release(v0);
}

uint64_t sub_100030500()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100030508( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  *(void *)(v25 + 152) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a20, a18, a25);
}

uint64_t sub_100030524()
{
  return swift_task_dealloc(*(void *)(v0 + 192));
}

uint64_t sub_100030534(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

  ;
}

uint64_t sub_100030560(uint64_t a1)
{
  *(void *)(v2 - 8sub_100006F7C(v0 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 88, v2 - 80, v1);
}

uint64_t sub_10003057C()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100030588()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_100030590()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100030598()
{
  return Session.Metadata.id.getter();
}

BOOL sub_1000305A0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000305B0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000305BC()
{
  return type metadata accessor for ModelManagerError(0LL);
}

  ;
}

void *sub_1000305E0()
{
  return sub_10000729C((void *)(*(void *)(v0 + 48) + 224LL), *(void *)(*(void *)(v0 + 48) + 248LL));
}

void sub_100030610(unint64_t a1@<X8>)
{
}

  ;
}

void sub_100030638()
{
}

uint64_t sub_100030650@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100030658( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + 16sub_100006F7C(v0 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, a10, v12);
}

  ;
}

uint64_t sub_10003067C()
{
  return __CocoaSet.makeIterator()(v0);
}

BOOL sub_100030684(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_10003068C()
{
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
}

uint64_t sub_10003069C()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t sub_1000306B0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
}

  ;
}

  ;
}

uint64_t sub_1000306E4()
{
  return type metadata accessor for InferenceProviderDescriptor(0LL);
}

uint64_t sub_1000306EC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1000306F8()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100030708(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

uint64_t sub_100030720()
{
  return swift_task_dealloc(*(void *)(v0 + 352));
}

uint64_t sub_100030734()
{
  return Session.Metadata.id.getter();
}

uint64_t sub_10003073C(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_100030750()
{
  return Session.Metadata.id.getter();
}

uint64_t sub_100030758()
{
  return Logger.logObject.getter();
}

uint64_t sub_100030760()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100030768@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 104))();
}

uint64_t sub_100030770()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

void sub_10003077C()
{
  *(void *)(v1 - 112) = v0 + 120;
}

  ;
}

uint64_t sub_1000307B4(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

uint64_t sub_1000307BC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000307C8(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_1000307DC()
{
  return v0;
}

uint64_t sub_1000307E8(uint64_t a1, uint64_t a2)
{
  return sub_100003854(a1, a2, v2);
}

uint64_t sub_1000307F0()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_100030830(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

BOOL sub_100030840(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

void sub_10003086C()
{
}

uint64_t sub_10003087C()
{
  return *(void *)(v0 + 8);
}

  ;
}

uint64_t sub_1000308A4()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000308B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

uint64_t sub_1000308B8()
{
  *(void *)(v1 - 136) = v0;
  return swift_slowAlloc(12LL, -1LL);
}

BOOL sub_1000308C8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000308D8()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_1000308F0()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_100030900(uint64_t a1)
{
  return sub_10002AA70(a1);
}

void *sub_100030908@<X0>(uint64_t a1@<X8>)
{
  return sub_10000729C((void *)(a1 + 128), *(void *)(a1 + 152));
}

uint64_t sub_100030924@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_10003092C()
{
  return swift_willThrow();
}

BOOL sub_100030934(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100030944()
{
  return *(void *)(v0 + 48) + *(void *)(v1 + 72) * v2;
}

uint64_t sub_10003095C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t))
{
  return a15(v15, v16);
}

void sub_10003096C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100030974( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v12, a12);
}

uint64_t sub_100030984()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_100030994()
{
  return static os_log_type_t.error.getter();
}

  ;
}

uint64_t sub_1000309A8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000309B8()
{
  return AuditToken.processIdentifier.getter();
}

uint64_t sub_1000309C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_retain(*(void *)(*(void *)(a1 + 48) + 8 * a2));
}

  ;
}

  ;
}

void sub_100030A00()
{
}

uint64_t sub_100030A10()
{
  return sub_10000B7B0(v0, *(void *)(v1 - 112));
}

uint64_t sub_100030A20()
{
  return swift_endAccess(v0);
}

  ;
}

uint64_t sub_100030A38()
{
  return type metadata accessor for RequestCancellationReason(0LL);
}

uint64_t sub_100030A40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_100030A58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

  ;
}

uint64_t sub_100030A84()
{
  return *(void *)(v0 + 304);
}

  ;
}

  ;
}

uint64_t sub_100030AB0(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_100030AB8()
{
  return Session.Metadata.id.getter();
}

uint64_t sub_100030AC4()
{
  return swift_release(*(void *)(v0 + 376));
}

uint64_t sub_100030AD0(uint64_t a1, uint64_t a2)
{
  return sub_100005FB0(a1, a2, 1LL, v2);
}

uint64_t sub_100030ADC(uint64_t a1, uint64_t a2)
{
  return sub_100005FB0(a1, a2, 1LL, v2);
}

uint64_t sub_100030AE8()
{
  return Session.Metadata.onBehalfOfPID.getter();
}

void *sub_100030AF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_100030AFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v25, a25);
}

uint64_t sub_100030B08()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 - 88));
}

  ;
}

uint64_t sub_100030B28()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
  return *(void *)(v2 + 184);
}

uint64_t sub_100030B3C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
  return *(void *)(v2 + 128);
}

uint64_t sub_100030B50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

  ;
}

  ;
}

uint64_t sub_100030B70(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_100030B78()
{
  return swift_release(v0);
}

uint64_t sub_100030B80()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_100030B8C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_100030B98()
{
  return swift_release(v0);
}

uint64_t sub_100030BA0()
{
  return sub_10000B830(v2, v1, v0);
}

uint64_t sub_100030BC4()
{
  return RequestMetadata.id.getter();
}

uint64_t sub_100030BCC()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100030BD4()
{
  return v0;
}

void *sub_100030BE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = a1;
  return a10;
}

uint64_t sub_100030BF4()
{
  *(void *)(v1 - 8sub_100006F7C(v0 + 8) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_100030C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

void *sub_100030C08(void *a1)
{
  return sub_10000729C(a1, v1);
}

uint64_t sub_100030C10(uint64_t a1)
{
  return v1(a1, v2);
}

void *sub_100030C18(void *a1)
{
  return sub_10000729C(a1, v1);
}

uint64_t sub_100030C20(uint64_t result)
{
  v3[47] = v2;
  v3[48] = v1;
  v3[46] = result;
  return result;
}

__n128 sub_100030C2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15)
{
  *(void *)(v15 - 96) = a1;
  return (__n128)a15;
}

__n128 sub_100030C40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, __int128 a21)
{
  *(void *)(v21 - 16sub_100016BD0(0, v0, 0) = a1;
  return (__n128)a21;
}

void sub_100030C54()
{
  v2[43] = v0;
  v2[44] = v3;
  v2[42] = v1;
}

void sub_100030C60(uint64_t a1, uint64_t a2)
{
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100030C8C()
{
  return v0;
}

uint64_t sub_100030C98()
{
  return v0;
}

  ;
}

uint64_t sub_100030CC0()
{
  return type metadata accessor for AuditToken(0LL);
}

uint64_t sub_100030CC8()
{
  return type metadata accessor for RequestMetadata(0LL);
}

void sub_100030CD0()
{
  *(void *)(v1 - 104) = v0 + 168;
}

void *sub_100030CE4(void *result)
{
  *__n128 result = v2;
  result[1] = v1;
  return result;
}

uint64_t sub_100030CF0(uint64_t result)
{
  *(void *)(v1 + 536) = result;
  return result;
}

void *sub_100030CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a2;
  uint64_t v4 = type metadata accessor for AssetInfo(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10003D2C8();
  unint64_t v6 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = __CocoaSet.count.getter(v7);
    if (v8) {
      goto LABEL_6;
    }
LABEL_12:
    swift_release(v45);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v53 = _swiftEmptyArrayStorage;
  sub_100016CE4();
  if (v6)
  {
    if (a1 < 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    __n128 result = (void *)__CocoaSet.startIndex.getter(v9);
    char v16 = 1;
  }

  else
  {
    __n128 result = (void *)sub_100020E24(a1);
    char v16 = v17 & 1;
  }

  uint64_t v49 = result;
  uint64_t v50 = v11;
  LOBYTE(v5sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v16;
  if (v8 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }

  else
  {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    uint64_t v43 = v4;
    uint64_t v44 = v18;
    unint64_t v41 = a1 & 0xC000000000000001LL;
    uint64_t v42 = v2;
    do
    {
      sub_1000CF1C4( (uint64_t)v49,  v50,  v51,  a1,  v12,  v13,  v14,  v15,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46[0],  v46[1],  v47,  v48,  (uint64_t)v49,  v50,  v51,  v52,  (uint64_t)v53,  v54,  v55,  v56,  v57,  v58,  v59);
      uint64_t v20 = v19;
      sub_100086D4C();
      swift_release(v20);
      uint64_t v21 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
      {
        sub_100016CE4();
        uint64_t v21 = v53;
      }

      unint64_t v22 = v21[2];
      if (v22 >= v21[3] >> 1)
      {
        sub_100016CE4();
        uint64_t v21 = v53;
      }

      v21[2] = v22 + 1;
      __n128 result = (void *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))( (unint64_t)v21 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
                         + *(void *)(v5 + 72) * v22,
                           v2,
                           v4);
      uint64_t v53 = v21;
      if (v6)
      {
        if ((v51 & 1) == 0) {
          goto LABEL_32;
        }
        uint64_t v23 = __CocoaSet.Index.handleBitPattern.getter(v49, v50);
        if (v23) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v36 = sub_100003B20(&qword_10010C6A0);
        char v37 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v46, v36);
        __CocoaSet.formIndex(after:isUnique:)(v38, isUniquelyReferenced_nonNull_native, v44);
        v37(v46, 0LL);
      }

      else
      {
        uint64_t v25 = (uint64_t)v49;
        uint64_t v26 = v50;
        char v27 = v51;
        uint64_t v28 = v5;
        uint64_t v29 = sub_100020D3C(v49, v50, v51, a1);
        uint64_t v31 = v30;
        char v33 = v32;
        char v34 = v27;
        unint64_t v6 = v41;
        sub_10000B830(v25, v26, v34);
        uint64_t v49 = (void *)v29;
        uint64_t v50 = v31;
        uint64_t v5 = v28;
        char v35 = v33 & 1;
        uint64_t v2 = v42;
        uint64_t v4 = v43;
        LOBYTE(v5sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v35;
      }

      --v8;
    }

    while (v8);
    sub_10000B830((uint64_t)v49, v50, v51);
    swift_release(v45);
    return v53;
  }

  return result;
}

void sub_100030FBC()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep(0LL);
  uint64_t v6 = sub_10003D37C(v5);
  __chkstk_darwin(v6);
  sub_10003D17C();
  if (v7)
  {
    uint64_t v8 = *(void *)(v2 + 40);
    sub_100021AD0(&qword_10010B250, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v5, v9);
    uint64_t v11 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v12 = v10 & ~v11;
    if (((*(void *)(v2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
    {
      uint64_t v13 = ~v11;
      uint64_t v14 = *(void *)(v18 + 72);
      uint64_t v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
      do
      {
        v15(v0, *(void *)(v2 + 48) + v14 * v12, v5);
        sub_100021AD0( &qword_10010B258,  (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
        char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v0, v4, v5, v16);
        sub_10003D344(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
        if ((v17 & 1) != 0) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v13;
      }

      while (((*(void *)(v2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
    }
  }

  sub_100007448();
}

void sub_1000310FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_100022A9C();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_100021EB8(*v11, v12, a1, a2) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_100022A9C();
        if ((v16 & 1) != 0)
        {
          do
          {
            char v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_100021EB8(*v17, v18, a1, a2) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_100022A9C();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

void sub_100031204()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::Int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(v2 + 16))
  {
    sub_10003D464();
    uint64_t v9 = v4 + *(int *)(v5 + 20);
    UUID.hash(into:)(&v15);
    Hasher._finalize()();
    sub_10003D368();
    if (((*(void *)(v2 + 56 + ((v0 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v0) & 1) != 0)
    {
      uint64_t v11 = ~v10;
      uint64_t v12 = *(void *)(v6 + 72);
      do
      {
        sub_10003C8BC( *(void *)(v2 + 48) + v12 * v0,  (uint64_t)v8,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
        char v13 = static UUID.== infix(_:_:)(&v8[*(int *)(v5 + 20)], v9);
        sub_10002F90C( (uint64_t)v8,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
        if ((v13 & 1) != 0) {
          break;
        }
        unint64_t v0 = (v0 + 1) & v11;
      }

      while (((*(void *)(v2 + 56 + ((v0 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v0) & 1) != 0);
    }
  }

  sub_100007448();
}

uint64_t sub_10003131C(uint64_t a1, uint64_t a2)
{
  return sub_1000314E0( a1,  a2,  (void (*)(void *))sub_100091270,  (void (*)(void))type metadata accessor for InferenceProviderAsset,  (uint64_t (*)(uint64_t, uint64_t))sub_100091114);
}

void sub_100031338()
{
}

void sub_100031354()
{
}

void sub_100031370()
{
  unint64_t v22 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_100003B20(v3);
  uint64_t v10 = sub_10003D37C(v9);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v6[2])
  {
    unint64_t v13 = v6[5];
    sub_1000071C0(v2, v4);
    dispatch thunk of Hashable._rawHashValue(seed:)(v13, v9, v14);
    sub_10003D368();
    if (((*(void *)((char *)v6 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v13) & 1) != 0)
    {
      uint64_t v21 = ~v15;
      uint64_t v16 = *(void *)(v23 + 72);
      char v17 = *(void (**)(char *, unint64_t, uint64_t))(v23 + 16);
      do
      {
        v17(v12, v6[6] + v16 * v13, v9);
        sub_1000071C0(v22, v4);
        char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v8, v9, v18);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v9);
        if ((v19 & 1) != 0) {
          break;
        }
        unint64_t v13 = (v13 + 1) & v21;
      }

      while (((*(void *)((char *)v6 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v13) & 1) != 0);
    }
  }

  sub_100007448();
}

uint64_t sub_1000314C4(uint64_t a1, uint64_t a2)
{
  return sub_1000314E0( a1,  a2,  (void (*)(void *))sub_1000D3C08,  (void (*)(void))type metadata accessor for DaemonRequest,  (uint64_t (*)(uint64_t, uint64_t))sub_1000D3B1C);
}

uint64_t sub_1000314E0( uint64_t a1, uint64_t a2, void (*a3)(void *), void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
      a3(v27);
      Swift::Int v14 = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(a2 + 32);
      Swift::Int v16 = v14 & ~v15;
      sub_10003D0E8();
      if ((v17 & 1) != 0)
      {
        a4(0LL);
        uint64_t v18 = sub_10000C278();
        char v19 = a5(v18, a1);
        sub_10000C280();
        if ((v19 & 1) != 0)
        {
          char v20 = 1;
          return v20 & 1;
        }

        uint64_t v21 = ~v15;
        uint64_t v22 = (v16 + 1) & v21;
        sub_10003D0E8();
        if ((v23 & 1) != 0)
        {
          do
          {
            uint64_t v24 = *(void *)(*(void *)(a2 + 48) + 8 * v22);
            uint64_t v25 = swift_retain();
            char v20 = a5(v25, a1);
            swift_release(v24);
            if ((v20 & 1) != 0) {
              break;
            }
            uint64_t v22 = (v22 + 1) & v21;
            sub_10003D0E8();
          }

          while ((v26 & 1) != 0);
          return v20 & 1;
        }
      }
    }

    char v20 = 0;
    return v20 & 1;
  }

  if (a2 < 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v8 = sub_1000224B4();
  char v9 = __CocoaSet.contains(_:)(v8, v7);
  sub_100021DDC();
  return v9 & 1;
}

uint64_t sub_100031634()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010C0B0);
  uint64_t v1 = sub_100003BA0(v0, (uint64_t)qword_10010C0B0);
  uint64_t v2 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  generalLogger.getter(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_1000316CC()
{
  return swift_task_switch(sub_1000316E0, 0LL, 0LL);
}

uint64_t sub_1000316E0()
{
  uint64_t v29 = v2;
  uint64_t v30 = v3;
  uint64_t v28 = v1;
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v4 = sub_10000BF6C();
  sub_10003CE68(v4, (uint64_t)qword_10010C0B0);
  os_log_type_t v5 = sub_10003CEEC();
  if (sub_1000228A4(v5))
  {
    uint64_t v6 = (_DWORD *)sub_10000BCF4(12LL);
    uint64_t v7 = sub_10000BCF4(32LL);
    uint64_t v27 = v7;
    *uint64_t v6 = 136315138;
    *(void *)(v1 + ++*(void *)(v0 + 16) = sub_10003D10C();
    uint64_t v8 = sub_100003B20(&qword_10010C7E0);
    uint64_t v9 = sub_10003CE7C(v8);
    uint64_t v11 = v10;
    sub_100015EF8(v9, v10, &v27);
    *(void *)(v1 + ++*(void *)(v0 + 16) = v12;
    sub_10002FE4C(v1 + 16, v1 + 24);
    swift_bridgeObjectRelease(v11);
    sub_10003CD7C((void *)&_mh_execute_header, v13, v14, "Unhandled message with direct reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v7);
    sub_10000BCC4((uint64_t)v6);
  }

  uint64_t v15 = sub_1000305BC();
  sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_1000302B0(v15, v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  enum case for ModelManagerError.internalError(_:),  v15);
  swift_willThrow(v18, v19, v20, v21, v22, v23, v24, v25);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100031868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100031880, 0LL, 0LL);
}

uint64_t sub_100031880()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchModelInstance(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C5B8);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_1000319B8);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_1000319B8()
{
  return sub_100007418(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000319EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100031A04, 0LL, 0LL);
}

uint64_t sub_100031A04()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.CancelRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C750);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100031B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100031B54, 0LL, 0LL);
}

uint64_t sub_100031B54()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.AcquireRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C730);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100031C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100031CA4, 0LL, 0LL);
}

uint64_t sub_100031CA4()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.PrewarmSession(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C810);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100031DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100031DF4, 0LL, 0LL);
}

uint64_t sub_100031DF4()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.ReleaseRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C710);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100031F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100031F44, 0LL, 0LL);
}

uint64_t sub_100031F44()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.HoldAssetBundle(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C620);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_10003207C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032094, 0LL, 0LL);
}

uint64_t sub_100032094()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.LoadAssetBundle(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C640);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_1000321CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_1000321E4, 0LL, 0LL);
}

uint64_t sub_1000321E4()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchAssetsRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C6B0);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_10003231C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032334, 0LL, 0LL);
}

uint64_t sub_100032334()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchPolicyRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C660);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_10003246C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032484, 0LL, 0LL);
}

uint64_t sub_100032484()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.CancelSessionRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C7F0);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_1000325BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_1000325D4, 0LL, 0LL);
}

uint64_t sub_1000325D4()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.CreateSessionRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C860);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_10003270C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032724, 0LL, 0LL);
}

uint64_t sub_100032724()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.DeleteSessionRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C840);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_10003285C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032874, 0LL, 0LL);
}

uint64_t sub_100032874()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C598);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_1000329AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_1000329C4, 0LL, 0LL);
}

uint64_t sub_1000329C4()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchAssertionsRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C6F0);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100032AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032B14, 0LL, 0LL);
}

uint64_t sub_100032B14()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C5F8);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100032C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032C64, 0LL, 0LL);
}

uint64_t sub_100032C64()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C6D0);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100032D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032DB4, 0LL, 0LL);
}

uint64_t sub_100032DB4()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C688);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_100032EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100032F04, 0LL, 0LL);
}

uint64_t sub_100032F04()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.StartMonitoringInferences(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C578);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_10003303C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 8sub_100016BD0(0, v0, 0) = a4;
  return swift_task_switch(sub_100033054, 0LL, 0LL);
}

uint64_t sub_100033054()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
  os_log_type_t v4 = sub_10003CEEC();
  if (sub_1000228A4(v4))
  {
    uint64_t v5 = sub_10003CD64();
    sub_10000BCF4(32LL);
    sub_10003CEFC();
    uint64_t v6 = sub_10003CDF8(4.8149e-34);
    *(void *)(v1 + 56) = type metadata accessor for ModelXPCRequest.DumpState(v6);
    uint64_t v7 = sub_100003B20(&qword_10010C5D8);
    uint64_t v8 = sub_10003CE7C(v7);
    sub_10003CE94(v8, v9, v10);
    sub_10003CD4C(v11);
    sub_1000228C4();
    sub_10003CD7C((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_10003CDBC();
    sub_10000BCC4(v2);
    sub_10000BCC4(v5);
  }

  sub_10003CF08();
  uint64_t v14 = sub_100003B20(&qword_10010C4F0);
  sub_10003CF14(v14);
  uint64_t v15 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v15);
  uint64_t v16 = sub_1000305BC();
  sub_10003CD34(v16);
  sub_10003CDE8();
  uint64_t v17 = (void *)sub_10003CD90();
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
  uint64_t v18 = sub_10003CDA4(v17, (uint64_t)sub_10003CD14);
  return sub_10003CD18(v18, v19);
}

uint64_t sub_10003318C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ModelXPCRequest(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for ModelXPCRequest.executeRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.ExecuteRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C158;
LABEL_41:
    sub_100021AD0(v11, v10);
    a1[4] = v12;
    sub_10003C850(a1);
    return (*(uint64_t (**)(void))(*(void *)(SessionRequest - 8) + 32LL))();
  }

  if (v8 == enum case for ModelXPCRequest.cancelRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.CancelRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C178;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.createSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.CreateSessionRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CreateSessionRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C0D8;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.deleteSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.DeleteSessionRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DeleteSessionRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C0F8;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.prewarmSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.PrewarmSession(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.PrewarmSession;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C118;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.cancelSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.CancelSessionRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelSessionRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C138;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.acquireAssertion(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.AcquireRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.AcquireRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C198;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.releaseAssertion(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.ReleaseRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ReleaseRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C1B8;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.fetchAssertions(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchAssertionsRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssertionsRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C1D8;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.restoreAssertions(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C1F8;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.fetchAssets(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchAssetsRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssetsRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C218;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.fetchDynamicAssets(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C238;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.fetchPolicy(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchPolicyRequest(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchPolicyRequest;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C258;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.loadAssetBundle(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.LoadAssetBundle(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.LoadAssetBundle;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C8A8;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.holdAssetBundle(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.HoldAssetBundle(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.HoldAssetBundle;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C890;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.forceAssetVersionSwitch(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C880;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.dumpState(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.DumpState(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DumpState;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C8A0;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.fetchModelInstance(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchModelInstance(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchModelInstance;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C898;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.setAssetsHaveUpdated(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C888;
    goto LABEL_41;
  }

  if (v8 == enum case for ModelXPCRequest.startMonitoringInferences(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.StartMonitoringInferences(0LL);
    uint64_t v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.StartMonitoringInferences;
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10010C878;
    goto LABEL_41;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "modelmanagerd/ModelXPCDispatcher.swift",  38LL,  2LL,  87LL,  0);
  __break(1u);
  return result;
}

void sub_1000338C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5) & 1) != 0
    && (os_variant_has_internal_content("ModelManager") & 1) == 0)
  {
    uint64_t v33 = sub_1000305BC();
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v33, v34);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104LL))( v35,  enum case for ModelManagerError.notSupportedOnExternalBuild(_:),  v33);
    goto LABEL_19;
  }

  uint64_t v7 = sub_1000307DC();
  uint64_t v9 = v8(v7);
  uint64_t v11 = v10;
  uint64_t v12 = (os_unfair_lock_s *)(a3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a3 + 24));
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v13 = a3 + 16;
  sub_1000310FC(v9, v11, v14);
  if (!v5)
  {
    char v16 = v15;
    sub_10003D3B8();
    if ((v16 & 1) != 0)
    {
      swift_bridgeObjectRelease(v11);
      return;
    }

    unsigned int v17 = AuditToken.processIdentifier.getter();
    *(void *)token.val = AuditToken.token.getter();
    token.val[2] = v18;
    token.val[3] = v19;
    token.val[4] = v20;
    token.val[5] = v21;
    token.val[6] = v22;
    token.val[7] = v23;
    SecTaskRef v24 = SecTaskCreateWithAuditToken(0LL, &token);
    if (v24)
    {
      *(void *)token.val = 0LL;
      uint64_t v25 = v24;
      char v26 = (__CFString *)String._bridgeToObjectiveC()();
      uint64_t v106 = v25;
      CFTypeRef v27 = SecTaskCopyValueForEntitlement(v25, v26, (CFErrorRef *)&token);

      uint64_t v28 = *(void **)token.val;
      if (*(void *)token.val)
      {
        if (qword_10010B098 != -1) {
          swift_once(&qword_10010B098, sub_100031634);
        }
        uint64_t v29 = sub_10000BF6C();
        uint64_t v30 = (os_log_s *)sub_100003BA0(v29, (uint64_t)qword_10010C0B0);
        Logger.logObject.getter(v30);
        os_log_type_t v31 = sub_100022604();
        if (os_log_type_enabled(v30, v31))
        {
          char v32 = (uint8_t *)sub_10000BCF4(8LL);
          *(_DWORD *)char v32 = 67109120;
          LODWORD(v11sub_100016BD0(0, v0, 0) = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, (char *)&v110 + 4, v32 + 4);
          _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "SecTaskCopyValueForEntitlement failed for client %d",  v32,  8u);
          sub_10000BCC4((uint64_t)v32);
        }

        goto LABEL_34;
      }

      if (v27
        && (uint64_t v110 = (uint64_t)v27,
            swift_unknownObjectRetain(v27),
            (swift_dynamicCast( &v109,  &v110,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for Bool,  6LL) & 1) != 0))
      {
        if ((v109 & 1) != 0)
        {
          os_unfair_lock_lock(v12);
          sub_1000345BC(v13, v9, v11);
          sub_10003D3B8();
          swift_bridgeObjectRelease(v11);
          swift_unknownObjectRelease(v27);

          return;
        }

        if (qword_10010B098 != -1) {
          swift_once(&qword_10010B098, sub_100031634);
        }
        uint64_t v75 = sub_10000BF6C();
        sub_100003BA0(v75, (uint64_t)qword_10010C0B0);
        uint64_t v76 = sub_10003D28C();
        Logger.logObject.getter(v76);
        os_log_type_t v77 = sub_100022604();
        if (sub_10003D1C0(v77))
        {
          uint64_t v55 = (uint8_t *)sub_10000BCF4(18LL);
          uint64_t v56 = sub_10000BCF4(32LL);
          uint64_t v110 = v56;
          sub_10003D000(1.5047e-36, v56, v78, v79, v80, v81, v82, v83, v84, (uint64_t)v106, v109, SBYTE4(v109));
          uint64_t v85 = sub_10003D114();
          sub_10003D1B0(v85, v86);
          sub_10003D0D0(v87, v88, v89, v90, v91, v92, v93, v94, v108, v109);
          sub_10003D3C0();
          uint64_t v74 = "Client %d has entitlement %s set to false";
          goto LABEL_28;
        }
      }

      else
      {
        if (qword_10010B098 != -1) {
          swift_once(&qword_10010B098, sub_100031634);
        }
        uint64_t v52 = sub_10000BF6C();
        sub_100003BA0(v52, (uint64_t)qword_10010C0B0);
        uint64_t v53 = sub_10003D28C();
        Logger.logObject.getter(v53);
        os_log_type_t v54 = sub_100022604();
        if (sub_10003D1C0(v54))
        {
          uint64_t v55 = (uint8_t *)sub_10000BCF4(18LL);
          uint64_t v56 = sub_10000BCF4(32LL);
          uint64_t v110 = v56;
          sub_10003D000(1.5047e-36, v56, v57, v58, v59, v60, v61, v62, v63, (uint64_t)v106, v109, SBYTE4(v109));
          uint64_t v64 = sub_10003D114();
          sub_10003D1B0(v64, v65);
          sub_10003D0D0(v66, v67, v68, v69, v70, v71, v72, v73, v107, v109);
          sub_10003D3C0();
          uint64_t v74 = "Client %d missing entitlement %s";
LABEL_28:
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, (os_log_type_t)v13, v74, v55, 0x12u);
          swift_arrayDestroy(v56, 1LL);
          sub_10000BCC4(v56);
          sub_10000BCC4((uint64_t)v55);

LABEL_34:
          uint64_t v95 = sub_1000305BC();
          sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
          sub_1000302B0(v95, v96);
          *unint64_t v97 = v9;
          v97[1] = v11;
          uint64_t v98 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v95 - 8) + 104LL))( v97,  enum case for ModelManagerError.missingEntitlement(_:),  v95);
          swift_willThrow(v98, v99, v100, v101, v102, v103, v104, v105);
          swift_unknownObjectRelease(v27);

          return;
        }
      }

      swift_bridgeObjectRelease_n(v11, 2LL);
      goto LABEL_34;
    }

    if (qword_10010B098 != -1) {
      swift_once(&qword_10010B098, sub_100031634);
    }
    uint64_t v44 = sub_10000BF6C();
    uint64_t v45 = sub_100003BA0(v44, (uint64_t)qword_10010C0B0);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)sub_10000BCF4(8LL);
      *(_DWORD *)uint64_t v48 = 67109120;
      token.val[0] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&token, &token.val[1], v48 + 4);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Could not find secTask for client %d", v48, 8u);
      sub_10000BCC4((uint64_t)v48);
    }

    uint64_t v49 = sub_1000305BC();
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v49, v50);
    *uint64_t v51 = v9;
    v51[1] = v11;
    uint64_t v36 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v49 - 8) + 104LL))( v51,  enum case for ModelManagerError.missingEntitlement(_:),  v49);
LABEL_19:
    swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
    return;
  }

  sub_10003D3B8();
  __break(1u);
}

uint64_t ModelXPCRequest.needsCallback.getter()
{
  uint64_t v0 = sub_10003D238();
  char v2 = v1(v0);
  sub_100006F7C(v4);
  return v2 & 1;
}

void sub_100033F88()
{
}

void sub_100033FB4()
{
}

void *sub_100033FE0()
{
  return &protocol witness table for Never;
}

void *sub_100033FEC()
{
  return &protocol witness table for Never;
}

uint64_t sub_100033FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  return sub_10003CEA0((uint64_t)sub_10003400C);
}

uint64_t sub_10003400C()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = sub_10000729C(v0 + 2, v1);
  uint64_t v4 = (void *)swift_task_alloc(dword_10010C55C);
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100034094;
  return sub_100034134(v0[7], (uint64_t)v3, v0[8], v0[9], v1, v2);
}

uint64_t sub_100034094()
{
  *(void *)(v1 + 96) = v0;
  swift_task_dealloc(v2);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000340E0()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v1);
}

uint64_t sub_100034108()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100034134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  return swift_task_switch(sub_100034154, 0LL, 0LL);
}

uint64_t sub_100034154( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12[15];
  uint64_t v14 = v12[10];
  char v15 = *(int **)(v13 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(v13 + 8),  v12[14],  &protocol requirements base descriptor for XPCRequestProtocol,  &associated type descriptor for XPCRequestProtocol.Response);
  uint64_t v17 = type metadata accessor for ModelManagerError(255LL);
  sub_10003D45C((unint64_t *)&qword_10010B410);
  uint64_t v19 = type metadata accessor for ModelXPCResult(0LL, AssociatedTypeWitness, v17, v18);
  *(void *)(v14 + 24) = v19;
  uint64_t v20 = sub_10003D134();
  uint64_t v21 = sub_10003D134();
  sub_10003D45C(&qword_10010C500);
  uint64_t v23 = v22;
  sub_10003D45C(&qword_10010C508);
  uint64_t v25 = v24;
  v12[2] = v20;
  v12[3] = v21;
  v12[4] = v23;
  v12[5] = v24;
  *(void *)(v14 + 3sub_10003318C(v0 + 2) = swift_getWitnessTable(&protocol conformance descriptor for <> ModelXPCResult<A, B>, v19);
  v12[6] = v20;
  v12[7] = v21;
  v12[8] = v23;
  v12[9] = v25;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModelXPCResult<A, B>, v19);
  sub_10003D444(WitnessTable);
  uint64_t v37 = (char *)v15 + *v15;
  CFTypeRef v27 = (void *)swift_task_alloc(v15[1]);
  v12[16] = v27;
  *CFTypeRef v27 = v12;
  v27[1] = sub_1000342D8;
  sub_10002FF0C();
  return v33(v28, v29, v30, v31, v32, v33, v34, v35, v37, a10, a11, a12);
}

uint64_t sub_1000342D8()
{
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    return sub_100007418(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_100034324()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100034350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return sub_10003CEA0((uint64_t)sub_100034368);
}

uint64_t sub_100034368()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  sub_10003318C(v0 + 2);
  uint64_t v3 = v0[6];
  sub_10000729C(v0 + 2, v0[5]);
  uint64_t v4 = sub_100007460((uint64_t)&unk_1001037F8, 32LL);
  v0[12] = v4;
  *(void *)(v4 + ++*(void *)(v0 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = *(int **)(v3 + 48);
  uint64_t v6 = v5[1];
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  sub_100021D80();
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v0[13] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100034434;
  uint64_t v8 = sub_1000306EC(v0[7]);
  return v10(v8);
}

uint64_t sub_100034434()
{
  return sub_10000BD98();
}

uint64_t sub_100034474()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003449C(void *a1, int *a2)
{
  __int128 v7 = *(_OWORD *)(a1 + 3);
  uint64_t v4 = a1[3];
  sub_10000729C(a1, v4);
  *(_OWORD *)(v2 + 4sub_100016BD0(0, v0, 0) = v7;
  sub_10003C850((void *)(v2 + 16));
  (*(void (**)(void))(*(void *)(v4 - 8) + 16LL))();
  *(void *)&__int128 v7 = (char *)a2 + *a2;
  uint64_t v5 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 56) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100034548;
  return ((uint64_t (*)(uint64_t))v7)(v2 + 16);
}

uint64_t sub_100034548()
{
  return sub_100007418(*(uint64_t (**)(void))(v1 + 8));
}

void sub_100034580(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_1000345BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(v6[1]);
}

unint64_t sub_10003461C()
{
  return 0xD000000000000020LL;
}

unint64_t sub_100034638()
{
  return 0xD000000000000020LL;
}

unint64_t sub_100034654()
{
  return 0xD00000000000001CLL;
}

void sub_100034670(uint64_t a1)
{
  uint64_t v3 = sub_100003B20(&qword_10010C560);
  uint64_t v4 = sub_100007460(v3, 24LL);
  *(void *)(v4 + ++*(void *)(v0 + 16) = 0LL;
  v1[3] = v4;
  uint64_t v5 = sub_100003B20(&qword_10010C568);
  uint64_t v6 = sub_100007460(v5, 28LL);
  *(_DWORD *)(v6 + 24) = 0;
  *(void *)(v6 + ++*(void *)(v0 + 16) = &_swiftEmptySetSingleton;
  v1[4] = v6;
  v1[2] = a1;
  sub_1000075C0();
}

void sub_1000346D4()
{
  uint64_t v1 = sub_100030CC0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10003D2C8();
  uint64_t v3 = sub_10003D3D8();
  uint32_t v4 = AuditToken.processIdentifier.getter(v3);
  sub_10003D344(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v5 + 5);
  if (!v5[4]._os_unfair_lock_opaque) {
    v5[4]._os_unfair_lock_opaque = v4;
  }
  os_unfair_lock_unlock(v5 + 5);
}

uint64_t sub_100034768(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = sub_100030CC0();
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  v3[12] = sub_10003CE24(v5);
  v3[13] = sub_100022D14();
  uint64_t v6 = type metadata accessor for ModelXPCRequest(0LL);
  v3[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[15] = v7;
  v3[16] = sub_100021CC4(v7);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000347D4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  sub_10003D3E8();
  sub_10003D398();
  sub_10003D3D8();
  sub_10003D200();
  sub_10003D040();
  uint64_t v2 = *(void *)(v0 + 104);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88);
    sub_10003D244();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    uint64_t v5 = *(void *)(v0 + 56);
    *(void *)(v5 + 24) = sub_100003B20(&qword_10010C4F0);
    *(void *)(v5 + 3sub_10003318C(v0 + 2) = sub_10003C798( &qword_10010C548,  (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
    uint64_t v6 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
    sub_10003D444(v6);
    uint64_t v8 = v7;
    swift_errorRetain(v1);
    sub_10003D15C();
    sub_10003CE5C(v8);
    swift_errorRelease(v1);
    sub_10003CF4C();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 88);
    sub_10003D244();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    *(void *)(v0 + 136) = v11;
    uint64_t v12 = sub_100022CF4(v2, v11);
    TaskCancellingXPCReceivedMessage.auditToken.getter(v12);
    uint64_t v13 = (void *)swift_task_alloc(dword_10010C554);
    *(void *)(v0 + 144) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100034948;
    return sub_100033FF8(*(void *)(v0 + 56), *(void *)(v0 + 72), *(void *)(v0 + 96));
  }

uint64_t sub_100034948()
{
  *(void *)(v0 + 15sub_10003318C(v0 + 2) = v1;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v0 + 136))(*(void *)(v0 + 96), *(void *)(v0 + 80));
  sub_10003CE0C();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_1000349A8()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000349DC()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 56);
  v2[3] = sub_100003B20(&qword_10010C4F0);
  v2[4] = sub_10003C798(&qword_10010C548, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  v2[5] = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003C850(v2);
  sub_10002293C();
  ModelManagerError.init(wrapping:)(v1);
  uint64_t v3 = sub_10003D238();
  sub_10003CEC4(v3, v4);
  sub_100022D04();
  sub_10003CF4C();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100034A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  void v4[13] = a2;
  uint64_t v5 = sub_100030CC0();
  v4[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[17] = v6;
  v4[18] = sub_10003CE24(v6);
  v4[19] = sub_100022D14();
  uint64_t v7 = type metadata accessor for ModelXPCRequest(0LL);
  v4[20] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[21] = v8;
  v4[22] = sub_100021CC4(v8);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_100034AF0()
{
  uint64_t v1 = v0[22];
  sub_10003D3E8();
  sub_10003D398();
  sub_10003D3D8();
  sub_10003D200();
  sub_10003D040();
  v0[23] = v1;
  if (v1)
  {
    uint64_t v2 = v0[17];
    uint64_t v3 = (int *)v0[13];
    sub_10003D244();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
    v0[24] = v4;
    sub_1000303D8(v4);
    v0[10] = sub_100003B20(&qword_10010C4F0);
    uint64_t v5 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
    sub_10003D450(v5);
    uint64_t v7 = v6;
    swift_errorRetain(v1);
    ModelManagerError.init(wrapping:)(v1);
    sub_10003CE5C(v7);
    uint64_t v19 = (uint64_t (*)(void *))((char *)v3 + *v3);
    uint64_t v8 = (void *)swift_task_alloc(v3[1]);
    v0[25] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100034C6C;
    return v19(v0 + 7);
  }

  else
  {
    uint64_t v10 = v0[19];
    uint64_t v11 = v0[16];
    uint64_t v12 = v0[17];
    sub_10003D244();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v13(v10, v11);
    v0[26] = v13;
    sub_10003D318();
    uint64_t v14 = (void *)swift_task_alloc(dword_10010C52C);
    v0[27] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100034D0C;
    uint64_t v15 = sub_1000306EC(v0[15]);
    return sub_100034350(v15, v16, v17, v18);
  }

uint64_t sub_100034C6C()
{
  return sub_10000BD98();
}

uint64_t sub_100034CA4()
{
  v0[26] = v0[24];
  sub_10003D318();
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_10010C52C);
  v0[27] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_100034D0C;
  uint64_t v2 = sub_1000306EC(v0[15]);
  return sub_100034350(v2, v3, v4, v5);
}

uint64_t sub_100034D0C()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 208);
  sub_10000BCE4(*(void *)(v0 + 216));
  uint64_t v2 = sub_1000307DC();
  v1(v2);
  sub_10003CE0C();
  return sub_10000BF5C();
}

uint64_t sub_100034D54()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100034D98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v5 = sub_10000BF6C();
  uint64_t v6 = (os_log_s *)sub_100003BA0(v5, (uint64_t)qword_10010C0B0);
  sub_100030414();
  uint64_t v7 = sub_100030414();
  Logger.logObject.getter(v7);
  os_log_type_t v8 = sub_10003D3E0();
  if (sub_10003D1F0(v8))
  {
    uint64_t v9 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v10 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    sub_100030414();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v21 = v11;
    sub_10002FE4C((uint64_t)&v21, (uint64_t)&v22);
    *uint64_t v10 = v11;
    sub_1000301C0();
    sub_1000301C0();
    sub_100022210((void *)&_mh_execute_header, v6, v2, "Error during decoding the message %@", v9);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v10);
    sub_10000BCC4((uint64_t)v10);
    sub_10000BCC4((uint64_t)v9);
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
  }

  uint64_t v12 = sub_100003B20(&qword_10010C4F0);
  a2[3] = v12;
  a2[4] = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003C850(a2);
  uint64_t v14 = v13;
  uint64_t v21 = 0LL;
  unint64_t v22 = 0xE000000000000000LL;
  uint64_t v20 = a1;
  uint64_t v15 = sub_100003B20(&qword_10010B468);
  _print_unlocked<A, B>(_:_:)( &v20,  &v21,  v15,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  unint64_t v16 = v22;
  *uint64_t v14 = v21;
  v14[1] = v16;
  uint64_t v17 = enum case for ModelManagerError.xpcError(_:);
  uint64_t v18 = sub_1000305BC();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104LL))(v14, v17, v18);
  return sub_10003CEC4((uint64_t)v14, v12);
}

uint64_t sub_100034F98(uint64_t a1)
{
  *(void *)(v2 + 3sub_10003318C(v0 + 2) = a1;
  *(void *)(v2 + 4sub_100016BD0(0, v0, 0) = v1;
  return sub_10003CEA0((uint64_t)sub_100034FA8);
}

uint64_t sub_100034FA8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  type metadata accessor for _OSActivity(0LL);
  *(void *)(v0 + 4sub_100006F7C(v0 + 8) = _OSActivity.__allocating_init(_:)("Client connection cancellation", 30LL, 2LL);
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 24);
  os_unfair_lock_lock(v2 + 5);
  uint64_t os_unfair_lock_opaque = (int)v2[4]._os_unfair_lock_opaque;
  *(_DWORD *)(v0 + 96) = os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 5);
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = sub_10000BF6C();
  sub_100003BA0(v5, (uint64_t)qword_10010C0B0);
  uint64_t v6 = type metadata accessor for XPCRichError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v9(v8, v4, v6);
  uint64_t v10 = (os_log_s *)sub_10003D390();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v23 = v11;
    uint64_t v12 = sub_10000BCF4(22LL);
    uint64_t v21 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v12 = 138412546;
    unint64_t v13 = sub_10003C6CC();
    unint64_t v22 = v10;
    uint64_t v14 = os_unfair_lock_opaque;
    uint64_t v15 = sub_1000302B0(v6, v13);
    v9(v16, v8, v6);
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v15);
    *(void *)(v0 + ++*(void *)(v0 + 16) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4);
    *uint64_t v21 = v17;
    uint64_t os_unfair_lock_opaque = v14;
    sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    sub_10002294C();
    *(_WORD *)(v12 + 1sub_10003318C(v0 + 2) = 2048;
    *(void *)(v0 + 24) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 14);
    sub_10000BFDC( (void *)&_mh_execute_header,  v22,  v23,  "Cancellation Handler with error %@, sessionManager invoked for removeAllSession with pid %ld",  (uint8_t *)v12);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v21);
    sub_10000BCC4((uint64_t)v21);
    sub_10000BCC4(v12);
  }

  else
  {
    sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));

    sub_10002294C();
  }

  uint64_t v18 = *(void *)(*(void *)(v0 + 40) + 16LL);
  *(void *)(v0 + 56) = v18;
  *(void *)(v0 + 64) = *(void *)(v18 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  sub_10000C030();
  uint64_t v19 = (void *)sub_10002287C();
  *(void *)(v0 + 7sub_10003318C(v0 + 2) = v19;
  sub_100023C84(v19, (uint64_t)sub_10003523C);
  return sub_100026AB8(os_unfair_lock_opaque);
}

uint64_t sub_10003523C()
{
  return sub_10000BD98();
}

uint64_t sub_100035274()
{
  *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = *(void *)(*(void *)(v0 + 56)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  sub_10000C030();
  uint64_t v1 = (void *)sub_10002287C();
  *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000352D8;
  return sub_100010CF0(*(_DWORD *)(v0 + 96));
}

uint64_t sub_1000352D8()
{
  uint64_t v0 = sub_10003D41C();
  sub_10000BCE4(v0);
  sub_100021E70();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003530C()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_100035338()
{
  return v0;
}

uint64_t sub_100035364()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_100035384(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C544);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_100034768(a1, a2);
}

uint64_t sub_1000353E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C524);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_100034A84(a1, a2, a3);
}

uint64_t sub_100035450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to TaskCancellablePeerHandler.handleIncomingRequest(_:)[1]);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return TaskCancellablePeerHandler.handleIncomingRequest(_:)(a1, a2, a3);
}

uint64_t sub_1000354B8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10010C514);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000B5F8;
  return sub_100034F98(a1);
}

uint64_t sub_100035508@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100034D98(a1, a2);
}

void sub_10003551C(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ModelXPCMessageHandler();
  uint64_t v5 = sub_100007460(v4, 40LL);
  sub_100034670(a1);
  uint64_t v6 = v5;
  sub_1000224B4();
  *a2 = TaskCancellingXPCPeerHandler.__allocating_init(handler:)(&v6);
  sub_10003D228();
}

uint64_t sub_100035580()
{
  uint64_t v1 = sub_10000BF6C();
  sub_1000220F4(v1);
  sub_10003D3A4(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_runningBoard);
  sub_10003D3A4(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_osVariant);
  sub_10003D220(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  sub_10003D220(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  sub_10003D220(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  sub_10003D3A4(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 16);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 32);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 40);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 48));
  swift_release(v4);
  swift_release(v3);
  sub_10000C280();
  swift_release(v2);
  sub_10000BF84();
  sub_100021DDC();
  sub_10003D220(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager);
  return v0;
}

uint64_t sub_100035668()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10003568C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  void v4[4] = a1;
  void v4[5] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010C000);
  v4[8] = sub_100021CC4(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Session.Metadata(0LL);
  void v4[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[10] = v7;
  v4[11] = sub_10003CE24(v7);
  v4[12] = sub_100022D14();
  uint64_t v8 = sub_100003B20(&qword_10010B9A0);
  void v4[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[14] = v9;
  v4[15] = sub_10003CE24(v9);
  v4[16] = sub_100022D14();
  v4[17] = sub_100022D14();
  v4[18] = sub_100022D14();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_100035730(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 80);
  int v3 = AuditToken.processIdentifier.getter(a1);
  uint64_t v4 = ((uint64_t (*)(void))ModelXPCRequest.CreateSessionRequest.metadata.getter)();
  Session.Metadata.id.getter(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v1 + 15sub_10003318C(v0 + 2) = v5;
  sub_1000303D8(v5);
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v6 = *(void *)(v1 + 136);
  uint64_t v7 = *(void *)(v1 + 112);
  uint64_t v8 = sub_10000BF6C();
  *(void *)(v1 + 16sub_100016BD0(0, v0, 0) = sub_100003BA0(v8, (uint64_t)qword_10010C0B0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  *(void *)(v1 + 16sub_100006F7C(v0 + 8) = v9;
  sub_10003D3AC(v6, v9);
  uint64_t v10 = (os_log_s *)sub_1000228BC();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v1 + 104);
  if (v12)
  {
    uint64_t v14 = sub_10000BCF4(18LL);
    uint64_t v15 = sub_10000BCF4(32LL);
    uint64_t v27 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v7 = v14 + 4;
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    int v26 = v3;
    uint64_t v19 = v18;
    sub_100015EF8(v17, v18, &v27);
    sub_10003D350(v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v21, v14 + 4);
    swift_bridgeObjectRelease(v19);
    sub_10003D1D0();
    *(_WORD *)(v14 + 1sub_10003318C(v0 + 2) = 1024;
    *(_DWORD *)(v1 + 20sub_100006F7C(v0 + 8) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 212, v14 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "XPC Handling createSessionRequest for client session %s from proceess %d",  (uint8_t *)v14,  0x12u);
    sub_100021F38(v15);
    sub_10000BCC4(v15);
    sub_10000BCC4(v14);
  }

  else
  {
    sub_10003D1D0();
  }

  *(void *)(v1 + 176) = v7;
  *(void *)(v1 + 184) = *(void *)(*(void *)(*(void *)(v1 + 40) + 16LL)
                                    + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  uint64_t v22 = sub_10000C278();
  uint64_t Session = ModelXPCRequest.CreateSessionRequest.metadata.getter(v22);
  ModelXPCRequest.CreateSessionRequest.alreadyLockedInferenceProvider.getter(Session);
  uint64_t v24 = (void *)swift_task_alloc(dword_10010BDE4);
  *(void *)(v1 + 19sub_10003318C(v0 + 2) = v24;
  *uint64_t v24 = v1;
  v24[1] = sub_1000359A4;
  return sub_100023D4C(*(void *)(v1 + 88), *(void *)(v1 + 48), *(void *)(v1 + 64));
}

uint64_t sub_1000359A4()
{
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v1[19];
  uint64_t v3 = v1[11];
  uint64_t v5 = v1[8];
  uint64_t v4 = v1[9];
  sub_10003D2AC();
  *(void *)(v6 + 20sub_100016BD0(0, v0, 0) = v0;
  swift_task_dealloc(v7);
  sub_100021DDC();
  sub_10002F99C(v5, &qword_10010C000);
  v2(v3, v4);
  sub_10003CE0C();
  return sub_100021BCC(v8, v9, v10);
}

uint64_t sub_100035A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v23;
  uint64_t v26 = (*(uint64_t (**)(void, void, void))(v23 + 168))( *(void *)(v23 + 128),  *(void *)(v23 + 144),  *(void *)(v23 + 104));
  Logger.logObject.getter(v26);
  os_log_type_t v27 = sub_10003CF80();
  if (os_log_type_enabled(v22, v27))
  {
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v23 + 176);
    uint64_t v28 = *(void *)(v23 + 128);
    uint64_t v29 = *(void *)(v23 + 104);
    uint64_t v30 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v31 = sub_10000BCF4(32LL);
    a11 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v29, v32);
    uint64_t v35 = v34;
    sub_100015EF8(v33, v34, &a11);
    *(void *)(v23 + ++*(void *)(v0 + 16) = v36;
    sub_10003CE18(v23 + 16, v23 + 24);
    swift_bridgeObjectRelease(v35);
    v45(v28, v29);
    sub_100022210((void *)&_mh_execute_header, v22, v27, "Completion of CreateSession for client session %s", v30);
    sub_100021F38(v31);
    sub_10000BCC4(v31);
    sub_10000BCC4((uint64_t)v30);
  }

  else
  {
    (*(void (**)(void, void))(v23 + 176))(*(void *)(v23 + 128), *(void *)(v23 + 104));
  }

  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v23 + 176);
  uint64_t v38 = *(void *)(v23 + 144);
  uint64_t v39 = *(void *)(v23 + 120);
  uint64_t v40 = *(void *)(v23 + 104);
  uint64_t v46 = *(void *)(v23 + 64);
  uint64_t v41 = *(void *)(v23 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 168))(v39, v38, v40);
  ModelXPCRequest.CreateSessionRequest.Response.init(sessionID:)(v39);
  v37(v38, v40);
  uint64_t v42 = sub_100003B20(&qword_10010C870);
  sub_10003CEF4(v41, v42);
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF48();
  sub_100030494();
  swift_task_dealloc(v46);
  uint64_t v43 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021CD4(v43);
}

uint64_t sub_100035C04()
{
  return sub_10003CF64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100035C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C86C);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_10003568C(a1, a2, a3);
}

uint64_t sub_100035CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C858 + dword_10010C858);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C85C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_100035D70(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_100035DAC(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_100035DE8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B9A0);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = sub_100021CC4(v5);
  uint64_t v6 = type metadata accessor for ModelXPCRequest.DeleteSessionRequest(0LL);
  void v3[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[10] = v7;
  v3[11] = sub_100021CC4(v7);
  sub_10003CE0C();
  return sub_10000BD98();
}

#error "100035F18: call analysis failed (funcsize=99)"
uint64_t sub_100036000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void *)(*(void *)v0 + 56LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 64LL);
  sub_10000BCE4(*(void *)(*(void *)v0 + 104LL));
  sub_100021E70();
  sub_100022BF8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10003CE0C();
  return sub_100021BCC(v3, v4, v5);
}

uint64_t sub_100036060()
{
  uint64_t v1 = *(void *)(v0 + 24);
  ModelXPCRequest.DeleteSessionRequest.Response.init()();
  uint64_t v2 = sub_100003B20(&qword_10010C850);
  sub_10003CEF4(v1, v2);
  sub_10000C140();
  sub_10000BFE4();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v3);
}

uint64_t sub_1000360B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C84C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_100035DE8(a1, a2);
}

uint64_t sub_100036118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C838 + dword_10010C838);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C83C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_1000361A0(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_1000361DC(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_100036218(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B208);
  v3[7] = sub_100021CC4(*(void *)(v4 - 8));
  uint64_t v5 = sub_1000305BC();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v3[9] = v6;
  v3[10] = sub_100021CC4(v6);
  uint64_t v7 = sub_100003B20(&qword_10010B9A0);
  v3[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[12] = v8;
  v3[13] = sub_10003CE24(v8);
  v3[14] = sub_100022D14();
  uint64_t v9 = type metadata accessor for ModelXPCRequest.PrewarmSession(0LL);
  v3[15] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[16] = v10;
  v3[17] = sub_100021CC4(v10);
  sub_10003CE0C();
  return sub_10000BD98();
}

#error "100036380: call analysis failed (funcsize=98)"
uint64_t sub_100036464()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v5 = *v1;
  uint64_t v2 = v5;
  sub_100022B10(&v5);
  *(void *)(v2 + 16sub_100016BD0(0, v0, 0) = v0;
  swift_task_dealloc(v3);
  sub_100030234(*(void *)(v2 + 96));
  sub_100021DDC();
  sub_10003CE0C();
  return sub_10000BF5C();
}

uint64_t sub_1000364D0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  ModelXPCRequest.PrewarmSession.Response.init()();
  uint64_t v2 = sub_100003B20(&qword_10010C830);
  sub_10003CEF4(v1, v2);
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v3);
}

uint64_t sub_10003654C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_errorRetain(v1);
  uint64_t v4 = sub_100003B20(&qword_10010B468);
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0LL))
  {
    int v5 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 72) + 88LL))( *(void *)(v0 + 80),  *(void *)(v0 + 64));
    uint64_t v6 = *(void *)(v0 + 72);
    if (v5 == enum case for ModelManagerError.inferenceError(_:))
    {
      sub_10003D0B8(*(uint64_t (**)(uint64_t))(v6 + 96));
      uint64_t v7 = type metadata accessor for InferenceError(0LL);
      uint64_t v8 = *(void *)(v7 - 8);
      uint64_t v9 = sub_10003D3CC(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88));
      if ((_DWORD)v9 == enum case for InferenceError.assetVersionMismatch(_:))
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)(v0 + 56);
        uint64_t v12 = *(void *)(v0 + 40);
        swift_errorRelease(*(void *)(v0 + 160));
        uint64_t v13 = type metadata accessor for TaskPriority(0LL);
        sub_100005FB0(v11, 1LL, 1LL, v13);
        uint64_t v14 = (void *)sub_100007460((uint64_t)&unk_100103898, 40LL);
        v14[2] = 0LL;
        void v14[3] = 0LL;
        v14[4] = v12;
        sub_10000C278();
        uint64_t v15 = sub_100003854(v11, (uint64_t)&unk_10010C828, (uint64_t)v14);
        swift_release(v15);
        sub_100021AD0( (unint64_t *)&qword_10010C7B0,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceError);
        sub_1000302B0(v7, v16);
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(v17, v10, v7);
        swift_willThrow(v18, v19, v20, v21, v22, v23, v24, v25);
      }

      else
      {
        (*(void (**)(void, uint64_t))(v8 + 8))(*(void *)(v0 + 80), v7);
      }
    }

    else
    {
      (*(void (**)(void, void))(v6 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    }
  }

  swift_errorRelease(*(void *)(v0 + 16));
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_10003CF64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100036724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_10010C60C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10000BCBC;
  return sub_100036770(a4);
}

uint64_t sub_100036770(uint64_t a1)
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = a1;
  return sub_10003CEA0((uint64_t)sub_100036780);
}

uint64_t sub_100036780()
{
  uint64_t v1 = *(void *)(v0[2] + 16LL);
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager;
  v0[3] = v1;
  v0[4] = v2;
  v0[5] = OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager;
  v0[6] = 0LL;
  v0[7] = *(void *)(v1 + v2);
  sub_10000C030();
  uint64_t v3 = (void *)sub_10002287C();
  v0[8] = v3;
  sub_100023C84(v3, (uint64_t)sub_1000367E8);
  return sub_10003D198();
}

uint64_t sub_1000367E8()
{
  return sub_10000BD98();
}

uint64_t sub_100036820()
{
  v0[9] = *(void *)(v0[3] + v0[5]);
  sub_10000C030();
  uint64_t v1 = (void *)sub_10002287C();
  v0[10] = v1;
  sub_100023C84(v1, (uint64_t)sub_100036874);
  return sub_10005F6DC();
}

uint64_t sub_100036874()
{
  *(_BYTE *)(v1 + 8sub_100006F7C(v0 + 8) = v0;
  sub_100030924(v2);
  sub_100021E70();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000368B4()
{
  if ((*(_BYTE *)(v2 + 88) & 1) != 0)
  {
    if (qword_10010B098 != -1) {
      swift_once(&qword_10010B098, sub_100031634);
    }
    uint64_t v3 = sub_10000BF6C();
    sub_10003CE68(v3, (uint64_t)qword_10010C0B0);
    os_log_type_t v4 = sub_10003D3E0();
    if (!sub_10003D25C(v4)) {
      goto LABEL_12;
    }
    int v5 = "Successfully forced an asset version switch";
LABEL_11:
    uint64_t v8 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v0, v5, v8, 2u);
    sub_10000BCC4((uint64_t)v8);
LABEL_12:

    return (*(uint64_t (**)(void))(v2 + 8))(*(unsigned __int8 *)(v2 + 88));
  }

  if (*(void *)(v2 + 48) == 9LL)
  {
    if (qword_10010B098 != -1) {
      swift_once(&qword_10010B098, sub_100031634);
    }
    uint64_t v6 = sub_10000BF6C();
    sub_10003CE68(v6, (uint64_t)qword_10010C0B0);
    os_log_type_t v7 = sub_10003D3E0();
    if (!sub_10003D25C(v7)) {
      goto LABEL_12;
    }
    int v5 = "Failed to force an asset version switch, multiple attempts to quiesce requests & asssets failed";
    goto LABEL_11;
  }

  ++*(void *)(v2 + 48);
  *(void *)(v2 + 56) = *(void *)(*(void *)(v2 + 24) + *(void *)(v2 + 32));
  sub_10000C030();
  uint64_t v10 = (void *)sub_10002287C();
  *(void *)(v2 + 64) = v10;
  sub_100023C84(v10, (uint64_t)sub_1000367E8);
  return sub_10003D198();
}

uint64_t sub_100036A18(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)swift_task_alloc(dword_10010C81C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *int v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_100036218(a1, a2);
}

uint64_t sub_100036A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C808 + dword_10010C808);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C80C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_100036B00(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_100036B3C(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_100036B78(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B9A0);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = sub_10003CE24(v5);
  void v3[9] = sub_100022D14();
  uint64_t v6 = type metadata accessor for ModelXPCRequest.CancelSessionRequest(0LL);
  v3[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[11] = v7;
  v3[12] = sub_100021CC4(v7);
  sub_10003CE0C();
  return sub_10000BD98();
}

#error "100036CB0: call analysis failed (funcsize=99)"
uint64_t sub_100036D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sub_1000220D4();
  sub_10000BDE4();
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  sub_10003D2AC();
  *(void *)(v4 + 12sub_100016BD0(0, v0, 0) = v0;
  swift_task_dealloc(v5);
  sub_100022CF4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100021DDC();
  sub_10003CE0C();
  return sub_10003CEE0(v6, v7, v8);
}

uint64_t sub_100036E08()
{
  uint64_t v1 = *(void *)(v0 + 24);
  ModelXPCRequest.CancelSessionRequest.Response.init()();
  uint64_t v2 = sub_100003B20(&qword_10010C800);
  sub_10003CEF4(v1, v2);
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v3);
}

uint64_t sub_100036E6C()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100036EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C7FC);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_100036B78(a1, a2);
}

uint64_t sub_100036F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C7E8 + dword_10010C7E8);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C7EC);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_100036F90(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_100036FCC(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_100037008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = sub_100003B20(&qword_10010B9A0);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = sub_100021CC4(v7);
  uint64_t v8 = type metadata accessor for RequestMetadata(0LL);
  v5[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[13] = v9;
  v5[14] = sub_100021CC4(v9);
  uint64_t v10 = sub_100003B20(&qword_10010B408);
  v5[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[16] = v11;
  v5[17] = sub_100021CC4(v11);
  uint64_t v12 = sub_10003D10C();
  v5[18] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[19] = v13;
  v5[20] = sub_10003CE24(v13);
  v5[21] = sub_100022D14();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000370B8()
{
  int v1 = AuditToken.auditUserIdentifier.getter();
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v2 = *(os_log_s **)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = sub_10000BF6C();
  sub_100003BA0(v4, (uint64_t)qword_10010C0B0);
  sub_10003D0AC(v3);
  sub_10003D0AC((uint64_t)v2);
  sub_1000228BC();
  os_log_type_t v5 = sub_10000C108();
  BOOL v6 = sub_10003D070(v5);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 144);
  if (v6)
  {
    uint64_t v42 = *(void *)(v0 + 144);
    uint64_t v38 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v46 = v2;
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v40 = *(void *)(v0 + 96);
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v43 = *(void *)(v0 + 88);
    uint64_t v44 = *(void *)(v0 + 72);
    uint64_t v45 = *(void *)(v0 + 80);
    int v47 = v1;
    uint64_t v13 = sub_10000BCF4(22LL);
    uint64_t v48 = sub_10000BCF4(64LL);
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = ModelXPCRequest.ExecuteRequest.metadata.getter(v48);
    RequestMetadata.id.getter(v14);
    uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    sub_100022BF8(v11, v39);
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    dispatch thunk of CustomStringConvertible.description.getter(v10, v15);
    sub_1000303D8(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    sub_10003CF70();
    *(void *)(v0 + ++*(void *)(v0 + 16) = v16;
    sub_10003D304(v0 + 16, v0 + 24, v17, v13 + 12, v18, v19, v20, v21, v37, v13 + 4);
    sub_10000C1E0();
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8);
    uint64_t v23 = v22(v8, v42);
    *(_WORD *)(v13 + 1sub_10003318C(v0 + 2) = 2080;
    uint64_t v24 = ModelXPCRequest.ExecuteRequest.metadata.getter(v23);
    RequestMetadata.sessionID.getter(v24);
    v39(v11, v40);
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    dispatch thunk of CustomStringConvertible.description.getter(v44, v25);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    sub_10003D1A0();
    sub_10003D350(v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v27, v13 + 14);
    sub_100022D34();
    v22(v7, v42);
    sub_10000BFDC( (void *)&_mh_execute_header,  v46,  (os_log_type_t)v3,  "Received request %s (Session: %s)",  (uint8_t *)v13);
    swift_arrayDestroy(v48, 2LL);
    sub_10000BCC4(v48);
    uint64_t v28 = v13;
    int v1 = v47;
    sub_10000BCC4(v28);
  }

  else
  {
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 152) + 8LL);
    v29(*(void *)(v0 + 168), *(void *)(v0 + 144));
    v29(v7, v9);
  }

  uint64_t v30 = *(void *)(v0 + 64);
  uint64_t v31 = *(void *)(v0 + 32);
  uint64_t v32 = swift_task_alloc(64LL);
  *(void *)(v0 + 176) = v32;
  __int128 v33 = *(_OWORD *)(v0 + 48);
  *(void *)(v32 + ++*(void *)(v0 + 16) = v31;
  *(void *)(v32 + 24) = v30;
  *(_DWORD *)(v32 + 3sub_10003318C(v0 + 2) = v1;
  *(_OWORD *)(v32 + 4sub_100016BD0(0, v0, 0) = v33;
  uint64_t v34 = swift_task_alloc(32LL);
  *(void *)(v0 + 184) = v34;
  *(void *)(v34 + ++*(void *)(v0 + 16) = v30;
  *(void *)(v34 + 24) = v31;
  uint64_t v35 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  *(void *)(v0 + 19sub_10003318C(v0 + 2) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100037444;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

uint64_t sub_100037444()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100037488()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000374E8(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010B9A0);
  uint64_t v53 = *(void *)(v2 - 8);
  uint64_t v54 = v2;
  __chkstk_darwin(v2);
  uint64_t v52 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for RequestMetadata(0LL);
  uint64_t v4 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  BOOL v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100003B20(&qword_10010B408);
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ModelXPCRequest.ExecuteRequest(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v44 - v15;
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v17, (uint64_t)qword_10010C0B0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  uint64_t v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v14, a1, v10);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    uint64_t v57 = v49;
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v45 = v23 + 4;
    os_log_t v48 = v20;
    uint64_t v24 = ((uint64_t (*)(void))ModelXPCRequest.ExecuteRequest.metadata.getter)();
    RequestMetadata.id.getter(v24);
    uint64_t v46 = *(void (**)(char *, uint64_t))(v4 + 8);
    int v47 = v22;
    v46(v6, v55);
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    uint64_t v25 = v51;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v51, v26);
    uint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v25);
    sub_100015EF8(v27, v29, &v57);
    uint64_t v56 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v45);
    swift_bridgeObjectRelease(v29);
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    uint64_t v32 = v31(v16, v10);
    *(_WORD *)(v23 + 1sub_10003318C(v0 + 2) = 2080;
    uint64_t v51 = v23 + 14;
    uint64_t v33 = ModelXPCRequest.ExecuteRequest.metadata.getter(v32);
    uint64_t v34 = v52;
    RequestMetadata.sessionID.getter(v33);
    v46(v6, v55);
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v35 = v54;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v54, v36);
    uint64_t v39 = v38;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v35);
    sub_100015EF8(v37, v39, &v57);
    uint64_t v56 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v51);
    swift_bridgeObjectRelease(v39);
    v31(v14, v10);
    os_log_t v41 = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  (os_log_type_t)v47,  "Finished request %s (Session: %s)",  (uint8_t *)v23,  0x16u);
    uint64_t v42 = v49;
    swift_arrayDestroy(v49, 2LL);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    uint64_t v43 = *(void (**)(char *, uint64_t))(v11 + 8);
    v43(v16, v10);
    v43(v14, v10);
  }

uint64_t sub_10003790C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 144) = a5;
  *(void *)(v6 + 15sub_10003318C(v0 + 2) = a6;
  *(_DWORD *)(v6 + 39sub_10003318C(v0 + 2) = a4;
  *(void *)(v6 + 12sub_100006F7C(v0 + 8) = a2;
  *(void *)(v6 + 136) = a3;
  uint64_t v7 = type metadata accessor for ModelManagerError(0LL);
  *(void *)(v6 + 16sub_100016BD0(0, v0, 0) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 16sub_100006F7C(v0 + 8) = v8;
  *(void *)(v6 + 176) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003B20(&qword_10010B408);
  *(void *)(v6 + 184) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 19sub_10003318C(v0 + 2) = v10;
  *(void *)(v6 + 20sub_100016BD0(0, v0, 0) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003B20(&qword_10010B208);
  *(void *)(v6 + 20sub_100006F7C(v0 + 8) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ModelXPCRequest.ExecuteRequest(0LL);
  *(void *)(v6 + 2++*(void *)(v0 + 16) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 224) = v13;
  uint64_t v14 = *(void *)(v13 + 64);
  *(void *)(v6 + 23sub_10003318C(v0 + 2) = v14;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 24sub_100016BD0(0, v0, 0) = swift_task_alloc(v15);
  *(void *)(v6 + 24sub_100006F7C(v0 + 8) = swift_task_alloc(v15);
  *(void *)(v6 + 256) = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for RequestMetadata(0LL);
  *(void *)(v6 + 264) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v6 + 27sub_10003318C(v0 + 2) = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 28sub_100016BD0(0, v0, 0) = swift_task_alloc(v18);
  *(void *)(v6 + 28sub_100006F7C(v0 + 8) = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for TaskPriority(0LL);
  *(void *)(v6 + 296) = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  *(void *)(v6 + 304) = v20;
  *(void *)(v6 + 31sub_10003318C(v0 + 2) = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100037A6C, 0LL, 0LL);
}

uint64_t sub_100037A6C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 232);
  uint64_t v21 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 136);
  *(void *)(v0 + 32sub_100016BD0(0, v0, 0) = *(void *)(*(void *)(*(void *)(v0 + 128) + 16LL)
                                    + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  uint64_t v6 = sub_1000224B4();
  uint64_t v22 = ((uint64_t (*)(uint64_t))ModelXPCRequest.ExecuteRequest.modelBundleID.getter)(v6);
  uint64_t v8 = v7;
  *(void *)(v0 + 32sub_100006F7C(v0 + 8) = v7;
  uint64_t v9 = ((uint64_t (*)(void))ModelXPCRequest.ExecuteRequest.taskPriority.getter)();
  uint64_t v10 = ((uint64_t (*)(uint64_t))TaskPriority.init(rawValue:))(v9);
  ModelXPCRequest.ExecuteRequest.metadata.getter(v10);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 336) = v11;
  v11(v1, v5, v3);
  uint64_t v12 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  unint64_t v14 = (v20 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_100103848, v14 + 16, v12 | 7);
  *(void *)(v0 + 344) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v15 + v13, v1, v3);
  uint64_t v16 = (void *)(v15 + v14);
  *uint64_t v16 = v21;
  v16[1] = v4;
  uint64_t v17 = dword_10010BE2C;
  swift_retain();
  unint64_t v18 = (void *)swift_task_alloc(v17);
  *(void *)(v0 + 35sub_10003318C(v0 + 2) = v18;
  *unint64_t v18 = v0;
  v18[1] = sub_100037BC0;
  return sub_10002CEC4( v22,  v8,  *(void *)(v0 + 312),  *(_DWORD *)(v0 + 392),  *(void *)(v0 + 288),  (uint64_t)&unk_10010C798,  v15);
}

uint64_t sub_100037BC0()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 352LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 328LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 304LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 288LL);
  uint64_t v14 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v15 = *(void *)(*(void *)v1 + 312LL);
  uint64_t v7 = *(void *)(*(void *)v1 + 272LL);
  uint64_t v2 = *(void **)v1;
  v2[45] = v0;
  swift_task_dealloc(v3);
  sub_100021DDC();
  swift_bridgeObjectRelease(v4);
  sub_10000C280();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v2[46] = v8;
  sub_10003029C(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v14);
  if (v0)
  {
    sub_10003CE0C();
    return sub_10003CFBC(v9, v10, v11);
  }

  else
  {
    swift_task_dealloc(v2[39]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    uint64_t v13 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021CD4(v13);
  }

uint64_t sub_100037C9C()
{
  return sub_10000BD98();
}

uint64_t sub_100037CD4()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v1);
}

uint64_t sub_100037D34()
{
  return sub_10000BD98();
}

uint64_t sub_100037D6C()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v1);
}

uint64_t sub_100037DCC()
{
  uint64_t v1 = v0[45];
  v0[12] = v1;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  swift_errorRetain(v1);
  uint64_t v4 = sub_100003B20(&qword_10010B468);
  if (swift_dynamicCast(v2, v0 + 12, v4, v3, 0LL))
  {
    int v5 = (*(uint64_t (**)(void, void))(v0[21] + 88LL))(v0[22], v0[20]);
    uint64_t v6 = v0[21];
    if (v5 == enum case for ModelManagerError.inferenceError(_:))
    {
      sub_10003D0B8(*(uint64_t (**)(uint64_t))(v6 + 96));
      uint64_t v7 = type metadata accessor for InferenceError(0LL);
      uint64_t v8 = *(void *)(v7 - 8);
      unsigned int v9 = sub_10003D3CC(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88));
      if (v9 == enum case for InferenceError.assetVersionMismatch(_:))
      {
        unsigned int v101 = v9;
        uint64_t v10 = v0[16];
        uint64_t v11 = v0[37];
        uint64_t v12 = v0[26];
        swift_errorRelease(v0[45]);
        sub_100005FB0(v12, 1LL, 1LL, v11);
        uint64_t v13 = (void *)sub_100007460((uint64_t)&unk_100103870, 40LL);
        v13[2] = 0LL;
        v13[3] = 0LL;
        v13[4] = v10;
        sub_10000C030();
        uint64_t v14 = sub_100003854(v12, (uint64_t)&unk_10010C7A8, (uint64_t)v13);
        swift_release(v14);
        if (qword_10010B098 != -1) {
          swift_once(&qword_10010B098, sub_100031634);
        }
        uint64_t v15 = (void (*)(uint64_t, uint64_t, uint64_t))v0[42];
        uint64_t v16 = v0[31];
        uint64_t v17 = v0[27];
        uint64_t v18 = v0[17];
        uint64_t v19 = sub_10000BF6C();
        sub_100003BA0(v19, (uint64_t)qword_10010C0B0);
        v15(v16, v18, v17);
        uint64_t v20 = (os_log_s *)sub_10003D390();
        os_log_type_t v21 = static os_log_type_t.error.getter();
        int v22 = v21;
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v23 = v0[35];
          uint64_t v84 = v0[33];
          uint64_t v86 = (void (*)(uint64_t, uint64_t))v0[46];
          LODWORD(v93) = v22;
          uint64_t v96 = v0[28];
          uint64_t v98 = v0[27];
          uint64_t v89 = v0[31];
          uint64_t v91 = v0[24];
          uint64_t v24 = v0[23];
          uint64_t v25 = (uint8_t *)sub_10000BCF4(12LL);
          uint64_t v103 = sub_10000BCF4(32LL);
          uint64_t v102 = (uint64_t (*)(void *))(v0 + 15);
          *(_DWORD *)uint64_t v25 = 136315138;
          ModelXPCRequest.ExecuteRequest.metadata.getter(v103);
          sub_10003D2F8();
          v86(v23, v84);
          sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
          dispatch thunk of CustomStringConvertible.description.getter(v24, v26);
          uint64_t v27 = sub_10003D274();
          v28(v27, v24);
          sub_10003CF70();
          v0[15] = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v25 + 4);
          uint64_t v30 = sub_10000C1E0();
          sub_10003D1E0( v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v84,  (uint64_t)v86,  (uint64_t)(v25 + 4),  v89,  v91,  v93,  v103,  v96,  v98);
          sub_100022210( (void *)&_mh_execute_header,  v20,  v94,  "Responding to request: %s with assetVersionMismatch",  v25);
          sub_100021F38(v95);
          sub_10000BCC4(v95);
          sub_10000BCC4((uint64_t)v25);
        }

        else
        {
          sub_100030234(v0[28]);
        }

        v0[10] = sub_100003B20(&qword_10010C4F0);
        uint64_t v76 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
        sub_10003D450(v76);
        uint64_t v78 = v77;
        sub_100021AD0( (unint64_t *)&qword_10010C7B0,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceError);
        uint64_t v80 = sub_1000302B0(v7, v79);
        (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v81, v101, v7);
        ModelManagerError.init(wrapping:)(v80);
        sub_10003CE5C(v78);
        uint64_t v82 = (void *)sub_10003D168();
        v0[47] = v82;
        *uint64_t v82 = v0;
        v82[1] = sub_100037C9C;
        uint64_t v74 = v0 + 7;
        return v102(v74);
      }

      (*(void (**)(void, uint64_t))(v8 + 8))(v0[22], v7);
    }

    else
    {
      (*(void (**)(void, void))(v6 + 8))(v0[22], v0[20]);
    }
  }

  swift_errorRelease(v0[12]);
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v38 = (void (*)(uint64_t, uint64_t, uint64_t))v0[42];
  uint64_t v39 = v0[30];
  uint64_t v40 = v0[27];
  uint64_t v41 = v0[17];
  uint64_t v42 = sub_10000BF6C();
  sub_100003BA0(v42, (uint64_t)qword_10010C0B0);
  v38(v39, v41, v40);
  sub_10002293C();
  sub_10002293C();
  uint64_t v43 = (os_log_s *)sub_10003D390();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v102 = (uint64_t (*)(void *))(v0 + 15);
    uint64_t v45 = v0[45];
    uint64_t v46 = v0[35];
    uint64_t v47 = v0[33];
    uint64_t v88 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v90 = v0[30];
    uint64_t v97 = v0[28];
    uint64_t v99 = v0[27];
    uint64_t v92 = v0[24];
    uint64_t v48 = v0[23];
    uint64_t v49 = sub_10000BCF4(22LL);
    uint64_t v100 = (void *)sub_10000BCF4(8LL);
    uint64_t v104 = sub_10000BCF4(32LL);
    *(_DWORD *)uint64_t v49 = 136315394;
    ModelXPCRequest.ExecuteRequest.metadata.getter(v104);
    sub_10003D2F8();
    v88(v46, v47);
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    dispatch thunk of CustomStringConvertible.description.getter(v48, v50);
    uint64_t v51 = sub_10003D274();
    v52(v51, v48);
    sub_10003CF70();
    v0[13] = v53;
    sub_10003D304((uint64_t)(v0 + 13), (uint64_t)(v0 + 14), v54, v49 + 12, v55, v56, v57, v58, v83, v49 + 4);
    uint64_t v59 = sub_10000C1E0();
    sub_10003D1E0( v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v85,  v87,  (uint64_t)v88,  v90,  v92,  (uint64_t)(v0 + 14),  (uint64_t)(v0 + 13),  v97,  v99);
    *(_WORD *)(v49 + 1sub_10003318C(v0 + 2) = 2112;
    swift_errorRetain(v45);
    uint64_t v67 = _swift_stdlib_bridgeErrorToNSError(v45);
    v0[14] = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v49 + 14);
    *uint64_t v100 = v67;
    swift_errorRelease(v45);
    swift_errorRelease(v45);
    sub_10000BFDC((void *)&_mh_execute_header, v43, v44, "Responding to request: %s withError %@", (uint8_t *)v49);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v100);
    sub_10000BCC4((uint64_t)v100);
    sub_100021F38(v104);
    sub_10000BCC4(v104);
    sub_10000BCC4(v49);
  }

  else
  {
    sub_100030234(v0[28]);
    sub_100022D04();
    sub_100022D04();
  }

  uint64_t v68 = v0[45];
  uint64_t v69 = sub_100003B20(&qword_10010C4F0);
  v0[5] = v69;
  uint64_t v70 = sub_10003C798(&qword_10010C4F8, (uint64_t)&protocol conformance descriptor for <> ModelXPCResult<A, B>);
  sub_10003CE88(v70);
  uint64_t v72 = v71;
  sub_100030414();
  ModelManagerError.init(wrapping:)(v68);
  sub_10003CEC4(v72, v69);
  uint64_t v73 = (void *)sub_10003D168();
  v0[48] = v73;
  void *v73 = v0;
  v73[1] = sub_100037D34;
  uint64_t v74 = v0 + 2;
  return v102(v74);
}

uint64_t sub_10003847C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderDescriptor(0LL);
  v5[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[14] = v7;
  v5[15] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for InferenceProviderRequestResult(0LL);
  v5[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[17] = v9;
  v5[18] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RequestMetadata(0LL);
  v5[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[20] = v11;
  v5[21] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003B20(&qword_10010B408);
  v5[22] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[23] = v13;
  _BYTE v5[24] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ModelXPCRequest.ExecuteRequest(0LL);
  v5[25] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[26] = v15;
  v5[27] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100038588, 0LL, 0LL);
}

uint64_t sub_100038588()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = (os_log_s *)v0[25];
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE38(v2, (uint64_t)qword_10010C0B0);
  sub_10003CFB4();
  os_log_type_t v3 = sub_10000C108();
  BOOL v4 = sub_10003CEBC(v1);
  uint64_t v5 = v0[27];
  if (v4)
  {
    uint64_t v30 = v0[25];
    uint64_t v6 = v0[24];
    uint64_t v27 = v0[23];
    uint64_t v28 = v0[26];
    uint64_t v26 = v0[20];
    uint64_t v7 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v33 = sub_10000BCF4(32LL);
    uint64_t v34 = v33;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = ModelXPCRequest.ExecuteRequest.metadata.getter(v33);
    RequestMetadata.id.getter(v8);
    sub_10003D128(v26);
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    uint64_t v10 = sub_10003CF88(v9);
    uint64_t v12 = v11;
    sub_10003029C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    sub_100015EF8(v10, v12, &v34);
    v0[7] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v7 + 4);
    swift_bridgeObjectRelease(v12);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v5, v30);
    sub_100022210((void *)&_mh_execute_header, v1, v3, "Responding to request: %s", v7);
    sub_100021F38(v33);
    sub_10000BCC4(v33);
    sub_10000BCC4((uint64_t)v7);
  }

  else
  {
    sub_1000307BC(v0[26]);
  }

  uint64_t v15 = v0[17];
  uint64_t v14 = v0[18];
  uint64_t v17 = v0[15];
  uint64_t v16 = v0[16];
  uint64_t v29 = v0[14];
  uint64_t v31 = v0[13];
  uint64_t v18 = (int *)v0[11];
  uint64_t v20 = v0[8];
  uint64_t v19 = v0[9];
  uint64_t v21 = sub_100003B20(&qword_10010C7B8);
  v0[5] = v21;
  v0[6] = sub_10003CBCC();
  sub_10003C850(v0 + 2);
  uint64_t v23 = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v20, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v17, v19, v31);
  ModelXPCRequest.ExecuteRequest.Response.init(result:lockedInferenceProvider:)(v14, v17);
  sub_10003CEF4(v23, v21);
  uint64_t v32 = (uint64_t (*)(void *))((char *)v18 + *v18);
  uint64_t v24 = (void *)swift_task_alloc(v18[1]);
  v0[28] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100038834;
  return v32(v0 + 2);
}

uint64_t sub_100038834()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003889C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_10010C60C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10000B5F8;
  return sub_100036770(a4);
}

double sub_1000388E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelXPCRequest.ExecuteRequest(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v10, 1LL, 1LL, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  unint64_t v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_100103820, v14 + 8, v12 | 7);
  *(void *)(v15 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(v15 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v15 + v13, v7, v4);
  *(void *)(v15 + vsub_100006F7C(v0 + 14) = a2;
  swift_retain();
  uint64_t v16 = sub_100003854((uint64_t)v10, (uint64_t)&unk_10010C788, v15);
  *(void *)&double result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_100038A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v6 = sub_100003B20(&qword_10010B9A0);
  v5[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003B20(&qword_10010B408);
  v5[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[10] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for RequestMetadata(0LL);
  v5[13] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[14] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[15] = swift_task_alloc(v13);
  v5[16] = swift_task_alloc(v13);
  v5[17] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for ModelXPCRequest.ExecuteRequest(0LL);
  v5[18] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v5[19] = v15;
  v5[20] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100038B3C, 0LL, 0LL);
}

uint64_t sub_100038B3C()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[19];
  uint64_t v2 = (os_log_s *)v0[20];
  uint64_t v4 = sub_10000BF6C();
  v0[21] = sub_100003BA0(v4, (uint64_t)qword_10010C0B0);
  sub_10003D3AC((uint64_t)v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  sub_1000228BC();
  os_log_type_t v5 = sub_10000C108();
  if (sub_10003D070(v5))
  {
    uint64_t v6 = v0[17];
    uint64_t v7 = v0[12];
    uint64_t v28 = v0[14];
    uint64_t v29 = v0[13];
    uint64_t v8 = v0[9];
    uint64_t v30 = v0[10];
    uint64_t v31 = v0[19];
    os_log_type_t v33 = v1;
    uint64_t v9 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v32 = sub_10000BCF4(32LL);
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = ModelXPCRequest.ExecuteRequest.metadata.getter(v32);
    RequestMetadata.id.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v6, v29);
    uint64_t v11 = UUIDIdentifier.uuidString.getter(v8);
    uint64_t v13 = v12;
    sub_10003029C(v7, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
    sub_100015EF8(v11, v13, &v34);
    v0[3] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 4);
    swift_bridgeObjectRelease(v13);
    sub_10003D128(v31);
    sub_100022210((void *)&_mh_execute_header, v2, v33, "xpcdispatcher: Request TaskCancellation handler, id: %s.", v9);
    sub_100021F38(v32);
    sub_10000BCC4(v32);
    sub_10000BCC4((uint64_t)v9);
  }

  else
  {
    sub_10003D128(v0[19]);
  }

  uint64_t v16 = v0[15];
  uint64_t v15 = v0[16];
  uint64_t v17 = v0[13];
  uint64_t v18 = v0[14];
  v0[22] = *(void *)(*(void *)(v0[5] + 16LL) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  uint64_t v19 = swift_retain();
  uint64_t v20 = ModelXPCRequest.ExecuteRequest.metadata.getter(v19);
  RequestMetadata.id.getter(v20);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
  uint64_t v22 = v21(v15, v17);
  uint64_t v23 = ModelXPCRequest.ExecuteRequest.metadata.getter(v22);
  RequestMetadata.sessionID.getter(v23);
  v21(v16, v17);
  uint64_t v24 = (void *)swift_task_alloc(dword_10010BE34);
  v0[23] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100038DD0;
  uint64_t v25 = sub_1000306EC(v0[11]);
  return sub_10002D934(v25, v26);
}

uint64_t sub_100038DD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  a18 = v21;
  uint64_t v24 = (void *)*v21;
  a18 = v24;
  uint64_t v26 = v24[10];
  uint64_t v25 = v24[11];
  uint64_t v27 = v24[7];
  sub_100022B10(&a18);
  v24[24] = v20;
  swift_task_dealloc(v28);
  sub_100021DDC();
  sub_10003D35C(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  sub_100022CF4(v25, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  if (v20)
  {
    sub_10003CE0C();
    return sub_100030334(v29, v30, v31);
  }

  else
  {
    swift_task_dealloc(v24[20]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_10002FF0C();
    return v33(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12);
  }

uint64_t sub_100038E88()
{
  uint64_t v2 = sub_100030414();
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_10003D1F0(v4))
  {
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v6 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v7 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    sub_100030414();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + ++*(void *)(v0 + 16) = v8;
    sub_10002FE4C(v0 + 16, v0 + 24);
    *uint64_t v7 = v8;
    sub_1000301C0();
    sub_1000301C0();
    sub_100022210((void *)&_mh_execute_header, v3, v1, "xpcdispatcher: Request TaskCancellation error %@", v6);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v7);
    sub_10000BCC4((uint64_t)v7);
    sub_10000BCC4((uint64_t)v6);

    sub_1000301C0();
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
    sub_1000301C0();
  }

  swift_task_dealloc(*(void *)(v0 + 160));
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100038FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10010C7D8 + dword_10010C7D8);
  uint64_t v7 = (void *)swift_task_alloc(unk_10010C7DC);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return v9(a1, a2, a3);
}

uint64_t sub_100039058()
{
  return 1LL;
}

uint64_t sub_100039060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_10010C76C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return sub_100037008(a1, a2, a3, a4);
}

void sub_1000390D4(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_100039110(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003914C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  void v4[4] = a1;
  void v4[5] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010B9A0);
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[9] = v6;
  v4[10] = sub_10003CE24(v6);
  v4[11] = sub_100022D14();
  uint64_t v7 = sub_100003B20(&qword_10010B408);
  v4[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v4[13] = v8;
  v4[14] = sub_10003CE24(v8);
  v4[15] = sub_100022D14();
  uint64_t v9 = type metadata accessor for ModelXPCRequest.CancelRequest(0LL);
  v4[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[17] = v10;
  v4[18] = sub_10003CE24(v10);
  v4[19] = sub_100022D14();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000391F0(uint64_t a1)
{
  int v2 = AuditToken.processIdentifier.getter(a1);
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v3 = *(os_log_s **)(v1 + 144);
  uint64_t v4 = *(void *)(v1 + 152);
  uint64_t v5 = sub_10000BF6C();
  sub_100003BA0(v5, (uint64_t)qword_10010C0B0);
  sub_10003D0AC(v4);
  sub_10003D0AC((uint64_t)v3);
  sub_1000228BC();
  os_log_type_t v6 = sub_10003CF80();
  BOOL v7 = sub_10003D070(v6);
  uint64_t v8 = *(void *)(v1 + 144);
  uint64_t v9 = *(void *)(v1 + 128);
  if (v7)
  {
    int v34 = v2;
    uint64_t v10 = *(void *)(v1 + 120);
    uint64_t v11 = *(void *)(v1 + 96);
    uint64_t v31 = *(void *)(v1 + 104);
    uint64_t v12 = *(void *)(v1 + 88);
    uint64_t v32 = *(void *)(v1 + 64);
    uint64_t v33 = *(void *)(v1 + 72);
    uint64_t v13 = sub_10000BCF4(28LL);
    uint64_t v35 = sub_10000BCF4(64LL);
    *(_DWORD *)uint64_t v13 = 136315650;
    ((void (*)(void))ModelXPCRequest.CancelRequest.id.getter)();
    sub_1000071C0((unint64_t *)&qword_10010B418, &qword_10010B408);
    dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    sub_100022CF4(v10, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
    sub_10003CF70();
    *(void *)(v1 + ++*(void *)(v0 + 16) = v15;
    sub_10003D304(v1 + 16, v1 + 24, v16, v13 + 12, v17, v18, v19, v20, v30, v13 + 4);
    sub_10000C1E0();
    uint64_t v21 = sub_10003D30C();
    *(_WORD *)(v13 + 1sub_10003318C(v0 + 2) = 2080;
    ModelXPCRequest.CancelRequest.sessionID.getter(v21);
    sub_1000071C0(&qword_10010BFE0, &qword_10010B9A0);
    dispatch thunk of CustomStringConvertible.description.getter(v32, v22);
    sub_100022BF8(v12, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
    sub_10003D1A0();
    sub_10003D350(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v24, v13 + 14);
    sub_100022D34();
    sub_10003D30C();
    *(_WORD *)(v13 + 2sub_10003318C(v0 + 2) = 1024;
    *(_DWORD *)(v1 + 184) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 188, v13 + 24);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  (os_log_type_t)v4,  "XPC Handling CancelRequest %s in client session %s from proceess %d",  (uint8_t *)v13,  0x1Cu);
    swift_arrayDestroy(v35, 2LL);
    sub_10000BCC4(v35);
    sub_10000BCC4(v13);
  }

  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 136) + 8LL);
    v25(*(void *)(v1 + 152), *(void *)(v1 + 128));
    v25(v8, v9);
  }

  *(void *)(v1 + 16sub_100016BD0(0, v0, 0) = *(void *)(*(void *)(*(void *)(v1 + 40) + 16LL)
                                    + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  uint64_t v26 = sub_10000C278();
  uint64_t v27 = ModelXPCRequest.CancelRequest.id.getter(v26);
  ModelXPCRequest.CancelRequest.sessionID.getter(v27);
  uint64_t v28 = (void *)swift_task_alloc(dword_10010BE34);
  *(void *)(v1 + 16sub_100006F7C(v0 + 8) = v28;
  *uint64_t v28 = v1;
  v28[1] = sub_100039528;
  return sub_10002D934(*(void *)(v1 + 112), *(void *)(v1 + 80));
}

uint64_t sub_100039528()
{
  uint64_t v3 = v1[13];
  uint64_t v2 = v1[14];
  uint64_t v4 = v1[9];
  sub_10003D2AC();
  *(void *)(v5 + 176) = v0;
  swift_task_dealloc(v6);
  sub_100021DDC();
  sub_10003D35C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_100022CF4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10003CE0C();
  return sub_100021BCC(v7, v8, v9);
}

uint64_t sub_1000395B0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  ModelXPCRequest.CancelRequest.Response.init()();
  uint64_t v2 = sub_100003B20(&qword_10010C760);
  sub_10003CEF4(v1, v2);
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10003CF64(v3);
}

uint64_t sub_100039630()
{
  return sub_1000221B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003967C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C75C);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_10003914C(a1, a2, a3);
}

uint64_t sub_1000396E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C748 + dword_10010C748);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C74C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003976C(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_1000397A8(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_1000397E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep(0LL);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_100021CC4(v6);
  uint64_t v7 = sub_100030CC0();
  void v4[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[10] = v8;
  v4[11] = sub_100021CC4(v8);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_100039848()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 72);
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE38(v2, (uint64_t)qword_10010C0B0);
  sub_10003CFB4();
  sub_10003CF80();
  if (sub_10003CEBC(v1))
  {
    uint64_t v3 = (float *)sub_10000BCF4(8LL);
    int v4 = sub_10003CF20(v3, 1.5047e-36);
    sub_10003CEAC();
    *(_DWORD *)(v0 + 12sub_100016BD0(0, v0, 0) = v4;
    sub_10003CE18(v0 + 120, v0 + 124);
    sub_10003CECC((void *)&_mh_execute_header, v5, v6, "XPC Handling acquireAssertion for pid %d");
    sub_10000BCC4((uint64_t)v3);
  }

  else
  {
    sub_10003CEAC();
  }

  uint64_t v7 = sub_10003D020();
  ModelXPCRequest.AcquireRequest.assertion.getter(v7);
  uint64_t v8 = (void *)swift_task_alloc(dword_10010E484);
  *(void *)(v0 + 104) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100039970;
  sub_10003D0FC(*(void *)(v0 + 64));
  sub_10002FF0C();
  return sub_10009C98C(v9, v10);
}

uint64_t sub_100039970()
{
  uint64_t v0 = sub_10003D408();
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  sub_10003D2B8(v0, v1);
  sub_100022CF4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100021DDC();
  sub_10003CE0C();
  return sub_10003CEE0(v4, v5, v6);
}

uint64_t sub_1000399D4()
{
  uint64_t v1 = sub_100003B20(&qword_10010C740);
  sub_10003CEF4(v0, v1);
  sub_10000C140();
  sub_10000BFE4();
  uint64_t v2 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v2);
}

uint64_t sub_100039A20()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100039A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C73C);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_1000397E4(a1, a2, a3);
}

uint64_t sub_100039AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C728 + dword_10010C728);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C72C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_100039B48(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_100039B84(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_100039BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_100003B20(&qword_10010B228);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_100021CC4(v6);
  uint64_t v7 = sub_100030CC0();
  void v4[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[10] = v8;
  v4[11] = sub_100021CC4(v8);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_100039C28()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 72);
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE38(v2, (uint64_t)qword_10010C0B0);
  sub_10003CFB4();
  uint64_t v3 = sub_10003CF80();
  if (sub_10003CEBC(v1))
  {
    uint64_t v4 = (float *)sub_10000BCF4(8LL);
    int v5 = sub_10003CF20(v4, 1.5047e-36);
    sub_10003CEAC();
    *(_DWORD *)(v0 + 11sub_10003318C(v0 + 2) = v5;
    sub_10003CE18(v0 + 112, v0 + 116);
    sub_10003CECC((void *)&_mh_execute_header, v6, v7, "XPC Handling releaseAssertion for pid %d");
    sub_10000BCC4((uint64_t)v4);
  }

  else
  {
    sub_10003CEAC();
  }

  uint64_t v8 = sub_10003D020();
  ModelXPCRequest.ReleaseRequest.id.getter(v8);
  return sub_100030334((uint64_t)sub_100039D2C, v3, 0LL);
}

uint64_t sub_100039D2C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010B75C);
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100039D7C;
  uint64_t v2 = sub_1000306EC(*(void *)(v0 + 64));
  return sub_10000D140(v2);
}

uint64_t sub_100039D7C()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 56LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 64LL);
  sub_10000BCE4(*(void *)(*(void *)v0 + 104LL));
  sub_100021E70();
  sub_100022BF8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10003CE0C();
  return sub_100021BCC(v3, v4, v5);
}

uint64_t sub_100039DDC()
{
  uint64_t v1 = sub_100003B20(&qword_10010C720);
  sub_10003CEF4(v0, v1);
  sub_10000C140();
  sub_10000BFE4();
  uint64_t v2 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v2);
}

uint64_t sub_100039E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C71C);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_100039BC0(a1, a2, a3);
}

uint64_t sub_100039E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C708 + dword_10010C708);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C70C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_100039F18(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_100039F54(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_100039F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = sub_100030CC0();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_100021CC4(v5);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_100039FD8()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 40);
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE38(v2, (uint64_t)qword_10010C0B0);
  sub_10003CFB4();
  sub_10003CF80();
  if (sub_10003CEBC(v1))
  {
    uint64_t v3 = (float *)sub_10000BCF4(8LL);
    int v4 = sub_10003CF20(v3, 1.5047e-36);
    sub_10003CEAC();
    *(_DWORD *)(v0 + 8sub_100006F7C(v0 + 8) = v4;
    sub_10003CE18(v0 + 88, v0 + 92);
    sub_10003CECC((void *)&_mh_execute_header, v5, v6, "XPC Handling fetchAssertions for pid %d");
    sub_10000BCC4((uint64_t)v3);
  }

  else
  {
    sub_10003CEAC();
  }

  sub_10003D338();
  *(void *)(v0 + 64) = *(void *)(v7 + 16);
  sub_10000C030();
  uint64_t v8 = (void *)sub_10002287C();
  *(void *)(v0 + 7sub_10003318C(v0 + 2) = v8;
  sub_100023C84(v8, (uint64_t)sub_10003A0F4);
  sub_10002FF0C();
  return sub_10009CD38();
}

uint64_t sub_10003A0F4()
{
  *(void *)(v1 + 8sub_100016BD0(0, v0, 0) = v0;
  sub_100030924(v2);
  sub_100021E70();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003A134()
{
  uint64_t v1 = *(void *)(v0 + 16);
  ModelXPCRequest.FetchAssertionsRequest.Response.init(assertions:)(*(void *)(v0 + 80));
  uint64_t v2 = sub_100003B20(&qword_10010C700);
  sub_10003CEF4(v1, v2);
  sub_10000C140();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v3);
}

uint64_t sub_10003A188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C6FC);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_100039F90(a1, a2, a3);
}

uint64_t sub_10003A1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C6E8 + dword_10010C6E8);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C6EC);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003A278(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_10003A2B4(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003A2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_100030CC0();
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_100021CC4(v6);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003A338()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 48);
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE38(v2, (uint64_t)qword_10010C0B0);
  sub_10003CFB4();
  sub_10003CF80();
  if (sub_10003CEBC(v1))
  {
    uint64_t v3 = (float *)sub_10000BCF4(8LL);
    int v4 = sub_10003CF20(v3, 1.5047e-36);
    sub_10003CEAC();
    *(_DWORD *)(v0 + 96) = v4;
    sub_10003CE18(v0 + 96, v0 + 100);
    sub_10003CECC((void *)&_mh_execute_header, v5, v6, "XPC Handling restoreAssertions for pid %d");
    sub_10000BCC4((uint64_t)v3);
  }

  else
  {
    sub_10003CEAC();
  }

  sub_10003D338();
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v0 + 7sub_10003318C(v0 + 2) = v8;
  uint64_t v9 = sub_1000224B4();
  *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = ModelXPCRequest.RestoreAssertionsRequest.assertions.getter(v9);
  return sub_100030334((uint64_t)sub_10003A44C, v8, 0LL);
}

uint64_t sub_10003A44C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010BB14);
  *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003A49C;
  uint64_t v2 = sub_1000306EC(*(void *)(v0 + 80));
  return sub_100010988(v2);
}

uint64_t sub_10003A49C()
{
  uint64_t v1 = sub_10003D41C();
  sub_10000BCE4(v1);
  swift_bridgeObjectRelease(v0);
  sub_100021DDC();
  sub_10003CE0C();
  return sub_100021BCC(v2, v3, v4);
}

uint64_t sub_10003A4E0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  ModelXPCRequest.RestoreAssertionsRequest.Response.init()();
  uint64_t v2 = sub_100003B20(&qword_10010C6E0);
  sub_10003CEF4(v1, v2);
  sub_10000C140();
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v3);
}

uint64_t sub_10003A530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C6DC);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_10003A2F0(a1, a2, a3);
}

uint64_t sub_10003A598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C6C8 + dword_10010C6C8);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C6CC);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003A620(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_10003A65C(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003A698(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3sub_10003318C(v0 + 2) = a2;
  return sub_10003CEA0((uint64_t)sub_10003A6A8);
}

uint64_t sub_10003A6A8()
{
  *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = *(void *)(*(void *)(*(void *)(v0 + 32) + 16LL)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  sub_10000C030();
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10003A6EC()
{
  *(void *)(v0 + 4sub_100006F7C(v0 + 8) = sub_10003D148();
  sub_100022D34();
  sub_100021E70();
  sub_10003CE0C();
  return sub_10003CEE0(v1, v2, v3);
}

uint64_t sub_10003A748()
{
  uint64_t v1 = *(void *)(v0 + 24);
  ModelXPCRequest.FetchAssetsRequest.Response.init(assetInfo:)(*(void *)(v0 + 48));
  uint64_t v2 = sub_100003B20(&qword_10010C6C0);
  sub_10003CEF4(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v3);
}

uint64_t sub_10003A794(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C6BC);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_10003A698(a1, a2);
}

uint64_t sub_10003A7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C6A8 + dword_10010C6A8);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C6AC);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003A874(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_10003A8B0(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003A8EC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3sub_10003318C(v0 + 2) = a2;
  return sub_10003CEA0((uint64_t)sub_10003A8FC);
}

uint64_t sub_10003A8FC()
{
  *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = *(void *)(*(void *)(*(void *)(v0 + 32) + 16LL)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  sub_10000C030();
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10003A940()
{
  *(void *)(v0 + 4sub_100006F7C(v0 + 8) = sub_10003D148();
  sub_100022D34();
  sub_100021E70();
  sub_10003CE0C();
  return sub_10003CEE0(v1, v2, v3);
}

uint64_t sub_10003A99C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  ModelXPCRequest.FetchDynamicAssetsRequest.Response.init(assetInfo:)(*(void *)(v0 + 48));
  uint64_t v2 = sub_100003B20(&qword_10010C698);
  sub_10003CEF4(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v3);
}

uint64_t sub_10003A9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C694);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_10003A8EC(a1, a2);
}

uint64_t sub_10003AA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C680 + dword_10010C680);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C684);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003AAC4(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_10003AB00(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003AB3C(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  unint64_t v5 = (*(void *)(*(void *)(sub_100003B20(&qword_10010B728) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[3] = swift_task_alloc(v5);
  uint64_t v6 = swift_task_alloc(v5);
  v3[4] = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C674);
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10003ABD8;
  return sub_10003AC7C(v6, v2, a2);
}

uint64_t sub_10003ABD8()
{
  return sub_10000BD98();
}

uint64_t sub_10003AC0C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = sub_1000307DC();
  sub_100021138(v4, v5);
  ModelXPCRequest.FetchPolicyRequest.Response.init(policy:)(v1);
  sub_10002F99C(v2, &qword_10010B728);
  uint64_t v6 = sub_100003B20(&qword_10010C678);
  sub_10003CEF4(v3, v6);
  sub_10000C140();
  sub_10000BFE4();
  uint64_t v7 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v7);
}

uint64_t sub_10003AC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch(sub_10003AC98, 0LL, 0LL);
}

uint64_t sub_10003AC98()
{
  uint64_t Policy = ModelXPCRequest.FetchPolicyRequest.policyName.getter();
  v0[8] = v2;
  uint64_t v3 = v0[7];
  if (v2)
  {
    v0[9] = Policy;
    v0[10] = *(void *)(*(void *)(v3 + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  }

  else
  {
    v0[12] = *(void *)(*(void *)(v3 + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  }

  sub_10000C030();
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10003AD14()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 296LL);
  *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v1;
  swift_bridgeObjectRetain(v1);
  sub_100021E70();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003AD50()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_10000FAE0(*(void *)(v0 + 72), *(void *)(v0 + 64), v1);
  swift_bridgeObjectRelease(v1);
  sub_10000C1E0();
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003AD98()
{
  *(void *)(v0 + 104) = type metadata accessor for Policy(0LL);
  uint64_t v1 = sub_10003D238();
  v2(v1);
  sub_100021E70();
  sub_10003CE0C();
  return sub_10000BF5C();
}

uint64_t sub_10003AE14()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003AE48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C66C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_10003AB3C(a1, a2);
}

uint64_t sub_10003AEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C658 + dword_10010C658);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C65C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003AF30(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003AF6C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_100021CC4(v5);
  sub_10003CE0C();
  return sub_10000BD98();
}

#error "10003B030: call analysis failed (funcsize=64)"
uint64_t sub_10003B0BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  sub_10000C130();
  sub_100022B10(v2);
  *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    sub_10000BF84();
    sub_10000C1E0();
  }

  else
  {
    sub_10000C1E0();
    sub_10000BF84();
  }

  sub_10003CE0C();
  return sub_10000BF5C();
}

uint64_t sub_10003B120()
{
  uint64_t v1 = *(void *)(v0 + 16);
  ModelXPCRequest.LoadAssetBundle.Response.init()();
  uint64_t v2 = sub_1000307DC();
  v3(v2);
  uint64_t v4 = sub_100003B20(&qword_10010C650);
  sub_10003CEF4(v1, v4);
  sub_10000C140();
  uint64_t v5 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v5);
}

uint64_t sub_10003B188()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_10003B1C0()
{
  return 0xD000000000000021LL;
}

uint64_t sub_10003B1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C64C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_10003AF6C(a1, a2);
}

uint64_t sub_10003B23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C638 + dword_10010C638);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C63C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003B2C4(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003B300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_10003CEA0((uint64_t)sub_10003B314);
}

uint64_t sub_10003B314()
{
  v0[6] = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  uint64_t v2 = sub_1000224B4();
  uint64_t v3 = ModelXPCRequest.HoldAssetBundle.assetBundleIdentifier.getter(v2);
  uint64_t v5 = v4;
  v0[7] = v4;
  uint64_t v6 = (uint64_t **)swift_task_alloc(dword_10010BE4C);
  v0[8] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = (uint64_t *)sub_10003B39C;
  return sub_10002E928(v3, v5, v0[4]);
}

uint64_t sub_10003B39C()
{
  *(void *)(v0 + 7sub_10003318C(v0 + 2) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    sub_100021E70();
  }

  sub_10003CE0C();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10003B3F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  ModelXPCRequest.HoldAssetBundle.Response.init()();
  uint64_t v2 = sub_100003B20(&qword_10010C630);
  sub_10003CEF4(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v3);
}

uint64_t sub_10003B43C()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003B46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C62C);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_10003B300(a1, a2, a3);
}

uint64_t sub_10003B4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C618 + dword_10010C618);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C61C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003B55C(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003B598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = sub_100030CC0();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_100021CC4(v5);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003B5E0()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 40);
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE38(v2, (uint64_t)qword_10010C0B0);
  sub_10003CFB4();
  sub_10003CF80();
  if (sub_10003CEBC(v1))
  {
    uint64_t v3 = (float *)sub_10000BCF4(8LL);
    int v4 = sub_10003CF20(v3, 1.5047e-36);
    sub_10003CEAC();
    *(_DWORD *)(v0 + 7sub_10003318C(v0 + 2) = v4;
    sub_10003CE18(v0 + 72, v0 + 76);
    sub_10003CECC((void *)&_mh_execute_header, v5, v6, "XPC Handling forceAssetVersionSwitch for pid %d");
    sub_10000BCC4((uint64_t)v3);
  }

  else
  {
    sub_10003CEAC();
  }

  uint64_t v7 = (void *)swift_task_alloc(dword_10010C60C);
  *(void *)(v0 + 64) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10003B6F4;
  sub_1000306EC(*(void *)(v0 + 24));
  sub_10002FF0C();
  return sub_100036770(v8);
}

uint64_t sub_10003B6F4()
{
  *(_BYTE *)(v1 + 76) = v0;
  sub_100030924(v2);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003B730()
{
  if (*(_BYTE *)(v0 + 76) == 1)
  {
    ModelXPCRequest.ForceAssetVersionSwitch.Response.init()();
    uint64_t v1 = 0LL;
  }

  else
  {
    uint64_t v2 = sub_1000305BC();
    sub_100021AD0( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_1000302B0(v2, v3);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for ModelManagerError.unableToForceAssetVersionSwitch(_:),  v2);
    sub_10003D15C();
    uint64_t v1 = 1LL;
  }

  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = sub_100003B20(&qword_10010C610);
  swift_storeEnumTagMultiPayload(v5, v6, v1);
  sub_10000BFE4();
  uint64_t v7 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v7);
}

unint64_t sub_10003B7F8()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_10003B814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C604);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_10003B598(a1, a2, a3);
}

uint64_t sub_10003B87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C5F0 + dword_10010C5F0);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C5F4);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003B904(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003B940(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  uint64_t v3 = type metadata accessor for StateDump(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = sub_10003CE24(v4);
  v2[14] = sub_100022D14();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003B990()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16LL) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager;
  __int128 v3 = *(_OWORD *)(v1 + 16);
  __int128 v2 = *(_OWORD *)(v1 + 32);
  __int128 v4 = *(_OWORD *)v1;
  *(void *)(v0 + 64) = *(void *)(v1 + 48);
  *(_OWORD *)(v0 + 3sub_10003318C(v0 + 2) = v3;
  *(_OWORD *)(v0 + 4sub_100006F7C(v0 + 8) = v2;
  *(_OWORD *)(v0 + ++*(void *)(v0 + 16) = v4;
  sub_100006FF4((void *)(v0 + 16));
  uint64_t v5 = (void *)swift_task_alloc(dword_10010E6E4);
  *(void *)(v0 + 12sub_100016BD0(0, v0, 0) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003BA14;
  return sub_1000A069C(*(void *)(v0 + 112));
}

uint64_t sub_10003BA14()
{
  *(void *)(v0 + 12sub_100006F7C(v0 + 8) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    sub_100007070((uint64_t *)(v0 + 16));
  }
  sub_10003CE0C();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10003BA6C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[9];
  sub_10003D24C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  ModelXPCRequest.DumpState.Response.init(stateDump:)(v1);
  sub_100022BF8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v5 = sub_100003B20(&qword_10010C5E8);
  sub_10003CEF4(v4, v5);
  sub_10000C140();
  sub_10000BFE4();
  uint64_t v6 = (uint64_t (*)(void))sub_1000227B8();
  return sub_1000221B0(v6);
}

uint64_t sub_10003BADC()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_10003BB18()
{
  return 0xD000000000000020LL;
}

uint64_t sub_10003BB34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C5E4);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_10003B940(a1, a2);
}

uint64_t sub_10003BB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C5D0 + dword_10010C5D0);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C5D4);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003BC14(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003BC50(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B9A0);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_100021CC4(v5);
  uint64_t v6 = type metadata accessor for ModelInstance(0LL);
  v3[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[9] = v7;
  v3[10] = sub_10003CE24(v7);
  v3[11] = sub_100022D14();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003BCC4()
{
  v0[12] = *(void *)(*(void *)(v0[3] + 16LL) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  uint64_t v1 = sub_100021D80();
  ModelXPCRequest.FetchModelInstance.session.getter(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_10010BE44);
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10003BD48;
  return sub_10002E7E8(v0[11], v0[7]);
}

uint64_t sub_10003BD48()
{
  uint64_t v0 = sub_10003D408();
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v2 = *(void *)(v1 + 56);
  sub_10003D2B8(v0, v1);
  sub_100022CF4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100021DDC();
  sub_10003CE0C();
  return sub_10003CEE0(v4, v5, v6);
}

uint64_t sub_10003BDAC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[2];
  sub_10003D24C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  ModelXPCRequest.FetchModelInstance.Response.init(modelInstance:)(v1);
  sub_100022BF8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v5 = sub_100003B20(&qword_10010C5C8);
  sub_10003CEF4(v4, v5);
  sub_10000C140();
  sub_10000BFE4();
  sub_10002294C();
  uint64_t v6 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v6);
}

uint64_t sub_10003BE34()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003BE70(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C5C4);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000B5F8;
  return sub_10003BC50(a1, a2);
}

uint64_t sub_10003BED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C5B0 + dword_10010C5B0);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C5B4);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003BF58(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003BF94(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + ++*(void *)(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_10003CEA0((uint64_t)sub_10003BFA4);
}

uint64_t sub_10003BFA4()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_10010EA14);
  *(void *)(v0 + 3sub_10003318C(v0 + 2) = v2;
  sub_100023C84(v2, (uint64_t)sub_10003C000);
  return sub_1000AFDA4();
}

uint64_t sub_10003C000()
{
  return sub_10000BD98();
}

uint64_t sub_10003C034()
{
  uint64_t v1 = *(void *)(v0 + 16);
  ModelXPCRequest.SetAssetsHaveUpdated.Response.init()();
  uint64_t v2 = sub_100003B20(&qword_10010C5A8);
  sub_10003CEF4(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v3);
}

unint64_t sub_10003C078()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10003C094(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10010C5A4);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_10003BF94(a1, a2);
}

uint64_t sub_10003C0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C590 + dword_10010C590);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C594);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003C174(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t sub_10003C1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_100030CC0();
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_10003CE24(v6);
  void v4[9] = sub_100022D14();
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10003C200()
{
  if (qword_10010B098 != -1) {
    swift_once(&qword_10010B098, sub_100031634);
  }
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(os_log_s **)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = sub_10000BF6C();
  sub_100003BA0(v5, (uint64_t)qword_10010C0B0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, os_log_s *))(v3 + 16);
  v6(v1, v4, v2);
  sub_10003CFB4();
  sub_10000C108();
  if (sub_10003CEBC(v2))
  {
    uint64_t v24 = v6;
    uint64_t v7 = (float *)sub_10000BCF4(8LL);
    int v8 = sub_10003CF20(v7, 1.5047e-36);
    sub_10003CEAC();
    *(_DWORD *)(v0 + 96) = v8;
    sub_10003CE18(v0 + 96, v0 + 100);
    sub_10003CECC((void *)&_mh_execute_header, v9, v10, "Adding inference monitor client from pid %d");
    uint64_t v11 = (uint64_t)v7;
    uint64_t v6 = v24;
    sub_10000BCC4(v11);
  }

  else
  {
    sub_10003CEAC();
  }

  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(os_log_s **)(v0 + 48);
  uint64_t v14 = *(void *)(v0 + 32);
  uint64_t v15 = type metadata accessor for XPCEndpoint(0LL);
  sub_100021CC4(*(void *)(v15 - 8));
  ModelXPCRequest.StartMonitoringInferences.endpoint.getter();
  v6(v12, v14, v13);
  uint64_t v16 = sub_10003D238();
  uint64_t v17 = sub_1000A8A50(v16);
  uint64_t v18 = *(void *)(v0 + 24);
  *(_DWORD *)(v0 + 10sub_100016BD0(0, v0, 0) = v19;
  *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v17;
  sub_10000BFE4();
  *(void *)(v0 + 8sub_100006F7C(v0 + 8) = *(void *)(*(void *)(v18 + 16)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager);
  sub_10000C030();
  sub_100021C90();
  return sub_10003CFBC(v20, v21, v22);
}

uint64_t sub_10003C3C4()
{
  return sub_10000BD98();
}

uint64_t sub_10003C3FC()
{
  __n128 v1 = swift_release(*(void *)(v0 + 80));
  ModelXPCRequest.StartMonitoringInferences.Response.init()(v1);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = sub_100003B20(&qword_10010C588);
  sub_10003CEF4(v2, v3);
  sub_10000C140();
  sub_10000BFE4();
  uint64_t v4 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10000BD30(v4);
}

unint64_t sub_10003C45C()
{
  return 0xD000000000000027LL;
}

uint64_t sub_10003C478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10010C584);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000BCBC;
  return sub_10003C1B0(a1, a2, a3);
}

uint64_t sub_10003C4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10010C570 + dword_10010C570);
  uint64_t v9 = (void *)swift_task_alloc(unk_10010C574);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return v11(a1, a2, a3, a4);
}

void sub_10003C568(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

uint64_t type metadata accessor for ModelXPCMessageHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd22ModelXPCMessageHandler);
}

uint64_t sub_10003C5C4()
{
  return type metadata accessor for ModelXPCDispatcher(0LL);
}

uint64_t type metadata accessor for ModelXPCDispatcher(uint64_t a1)
{
  uint64_t result = qword_10010C3F8;
  if (!qword_10010C3F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModelXPCDispatcher);
  }
  return result;
}

uint64_t sub_10003C604(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "(";
    v4[3] = "(";
    void v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = "(";
    v4[8] = &unk_1000D9220;
    void v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_10003C6A0()
{
}

unint64_t sub_10003C6CC()
{
  unint64_t result = qword_10010C518;
  if (!qword_10010C518)
  {
    uint64_t v1 = type metadata accessor for XPCRichError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for XPCRichError, v1);
    atomic_store(result, &qword_10010C518);
  }

  return result;
}

uint64_t sub_10003C70C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003C730()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010C534);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BCBC;
  uint64_t v2 = sub_10003D238();
  return v3(v2);
}

uint64_t sub_10003C798(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_10000603C(&qword_10010C4F0);
    sub_100021AD0(&qword_10010C500, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100021AD0(&qword_10010C508, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_10003C850(void *a1)
{
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0) {
    *a1 = swift_allocBox();
  }
  sub_1000075C0();
}

void *sub_10003C888(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8LL);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)swift_slowDealloc( *result,  *(void *)(v1 + 64)
  }
                     + ((*(_DWORD *)(v1 + 80) + 16LL) & ~(unint64_t)*(_DWORD *)(v1 + 80)),
                       *(_DWORD *)(v1 + 80) | 7LL);
  return result;
}

void sub_10003C8BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_1000075C0();
}

uint64_t sub_10003C8FC()
{
  int v1 = *(_DWORD *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = swift_task_alloc(dword_10010C774);
  uint64_t v5 = (void *)sub_100007524(v4);
  uint64_t v6 = sub_10003D2E0(v5);
  return sub_10003790C(v6, v7, v8, v1, v3, v2);
}

double sub_10003C968()
{
  return sub_1000388E8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003C970()
{
  uint64_t v1 = sub_10003D10C();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10003C9FC()
{
  uint64_t v3 = v0 + v2;
  uint64_t v4 = *(void *)(v0 + (v1 & 0xFFFFFFFFFFFFF8LL));
  uint64_t v5 = swift_task_alloc(dword_10010C784);
  unint64_t v6 = (void *)sub_100007524(v5);
  uint64_t v7 = sub_10003D2E0(v6);
  return sub_100038A30(v7, v8, v9, v3, v4);
}

uint64_t sub_10003CA78()
{
  uint64_t v1 = *(void *)(sub_10003D10C() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(v1 + 64) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100030234(v1);
  swift_release(*(void *)(v0 + v4 + 8));
  return swift_deallocObject(v0, v4 + 16, v3);
}

uint64_t sub_10003CAE8()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10003D10C();
  sub_10003D324();
  uint64_t v8 = v0 + v7;
  uint64_t v9 = (uint64_t *)(v0 + (v6 & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)swift_task_alloc(dword_10010C794);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v12;
  sub_100023C84(v12, (uint64_t)sub_10000BCBC);
  return sub_10003847C(v5, v3, v8, v10, v11);
}

uint64_t sub_10003CB78()
{
  uint64_t v0 = swift_task_alloc(dword_10010C7A4);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_10003889C(v2, v3, v4, v5);
}

unint64_t sub_10003CBCC()
{
  unint64_t result = qword_10010C7C0;
  if (!qword_10010C7C0)
  {
    uint64_t v1 = sub_10000603C(&qword_10010C7B8);
    sub_100021AD0( &qword_10010C7C8,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest.Response);
    sub_100021AD0( &qword_10010C7D0,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest.Response);
    sub_100021AD0(&qword_10010C500, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100021AD0(&qword_10010C508, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ModelXPCResult<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10010C7C0);
  }

  return result;
}

uint64_t sub_10003CCC0()
{
  uint64_t v0 = swift_task_alloc(dword_10010C824);
  uint64_t v1 = (void *)sub_100007524(v0);
  uint64_t v2 = sub_1000074EC(v1);
  return sub_100036724(v2, v3, v4, v5);
}

uint64_t sub_10003CD18(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10003CD34(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t sub_10003CD4C(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 72, v3);
}

uint64_t sub_10003CD64()
{
  return swift_slowAlloc(12LL, -1LL);
}

void sub_10003CD7C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10003CD90()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10003CDA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10003CDBC()
{
  return swift_arrayDestroy(v0, 1LL);
}

  ;
}

uint64_t sub_10003CDE8()
{
  return swift_storeEnumTagMultiPayload(v1, v0, 1LL);
}

uint64_t sub_10003CDF8(float a1)
{
  *uint64_t v1 = a1;
  return 0LL;
}

  ;
}

uint64_t sub_10003CE18(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10003CE24@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10003CE38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v2);
}

uint64_t sub_10003CE5C(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 1LL);
}

uint64_t sub_10003CE68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100003BA0(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_10003CE7C(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

void sub_10003CE88(uint64_t a1)
{
  *(void *)(v1 + 4sub_100006F7C(v0 + 8) = a1;
  sub_10003C850(v2);
}

void sub_10003CE94(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10003CEA0(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_10003CEAC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

BOOL sub_10003CEBC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10003CEC4(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1LL);
}

void sub_10003CECC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10003CEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10003CEEC()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_10003CEF4(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 0LL);
}

  ;
}

  ;
}

uint64_t sub_10003CF14(uint64_t result)
{
  *(void *)(v1 + 4sub_100016BD0(0, v0, 0) = result;
  return result;
}

uint64_t sub_10003CF20(float *a1, float a2)
{
  *a1 = a2;
  return AuditToken.processIdentifier.getter();
}

uint64_t sub_10003CF30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 8))(v11, v10);
}

uint64_t sub_10003CF4C()
{
  return (*(uint64_t (**)(void, void))(v0[15] + 8LL))(v0[16], v0[14]);
}

uint64_t sub_10003CF64(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10003CF70()
{
}

uint64_t sub_10003CF80()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_10003CF88(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

void sub_10003CF98(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_10003CFB4()
{
  return Logger.logObject.getter();
}

uint64_t sub_10003CFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_10003CFD8()
{
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
}

uint64_t sub_10003CFEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v13, a13);
}

uint64_t sub_10003D000( float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  *uint64_t v13 = a1;
  a11 = v12;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v13 + 1);
}

uint64_t sub_10003D020()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 24) + 16LL) + 16LL);
  *(void *)(v0 + 96) = v1;
  return swift_retain(v1);
}

void sub_10003D040()
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  os_log_type_t v6 = sub_10000729C(v0, v4);
  sub_1000338C0((uint64_t)v6, v2, v3, v4, v5);
}

BOOL sub_10003D070(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003D080( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, a2, a9);
}

uint64_t sub_10003D090()
{
  return swift_task_dealloc(*(void *)(v0 + 312));
}

uint64_t sub_10003D0AC(uint64_t a1)
{
  return v3(a1, v2, v1);
}

uint64_t sub_10003D0B8@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  return a1(v1);
}

void sub_10003D0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10003D0D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, v10 + 8, v11);
}

  ;
}

uint64_t sub_10003D0FC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10003D10C()
{
  return type metadata accessor for ModelXPCRequest.ExecuteRequest(0LL);
}

uint64_t sub_10003D114()
{
  *(_WORD *)(v1 + sub_100006F7C(v0 + 8) = 2080;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10003D128@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10003D134()
{
  return swift_getAssociatedConformanceWitness(v1, v0, v3, v2);
}

void *sub_10003D148()
{
  return sub_100030CFC(v1, v0);
}

uint64_t sub_10003D15C()
{
  return ModelManagerError.init(wrapping:)(v0);
}

uint64_t sub_10003D168()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

  ;
}

uint64_t sub_10003D198()
{
  return sub_1000BE648();
}

void sub_10003D1A0()
{
}

void sub_10003D1B0(uint64_t a1, uint64_t a2, ...)
{
}

BOOL sub_10003D1C0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003D1D0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10003D1E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a16 + 8))(a12, a17);
}

BOOL sub_10003D1F0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003D200()
{
  return sub_10003318C(v0);
}

void sub_10003D210()
{
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
}

uint64_t sub_10003D220@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

  ;
}

uint64_t sub_10003D238()
{
  return v0;
}

uint64_t sub_10003D244()
{
  return sub_100006F7C(v0);
}

uint64_t sub_10003D24C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

BOOL sub_10003D25C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003D26C()
{
  return sub_100006F7C(v0);
}

uint64_t sub_10003D274()
{
  return v0;
}

uint64_t sub_10003D28C()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void sub_10003D29C()
{
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
}

void sub_10003D2AC()
{
  void *v0 = *v1;
}

uint64_t sub_10003D2B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *uint64_t v2 = *v4;
  *(void *)(a2 + 11sub_10003318C(v0 + 2) = v3;
  return swift_task_dealloc(a1);
}

  ;
}

uint64_t sub_10003D2E0(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10003D2F8()
{
  return RequestMetadata.id.getter();
}

uint64_t sub_10003D304( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a10);
}

uint64_t sub_10003D30C()
{
  return v0(v2, v1);
}

uint64_t sub_10003D318()
{
  return TaskCancellingXPCReceivedMessage.auditToken.getter();
}

  ;
}

  ;
}

uint64_t sub_10003D344@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10003D350(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t sub_10003D35C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_10003D37C(uint64_t result)
{
  *(void *)(v1 - 8sub_100006F7C(v0 + 8) = *(void *)(result - 8);
  return result;
}

uint64_t sub_10003D390()
{
  return Logger.logObject.getter();
}

uint64_t sub_10003D398()
{
  return TaskCancellingXPCReceivedMessage.decode()();
}

uint64_t sub_10003D3A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100006F7C((void *)(v1 + a1));
}

uint64_t sub_10003D3AC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

void sub_10003D3B8()
{
}

uint64_t sub_10003D3C0()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_10003D3CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10003D3D8()
{
  return TaskCancellingXPCReceivedMessage.auditToken.getter();
}

uint64_t sub_10003D3E0()
{
  return static os_log_type_t.info.getter();
}

void sub_10003D3E8()
{
}

  ;
}

uint64_t sub_10003D408()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
  return *(void *)(v2 + 104);
}

uint64_t sub_10003D41C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
  return *(void *)(v2 + 88);
}

void sub_10003D430()
{
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
}

void sub_10003D444(uint64_t a1)
{
  v1[5] = a1;
  sub_10003C850(v1);
}

void sub_10003D450(uint64_t a1)
{
  *(void *)(v1 + 8sub_100006F7C(v0 + 8) = a1;
  sub_10003C850(v2);
}

void sub_10003D45C(unint64_t *a1)
{
}

void *sub_10003D464()
{
  return Hasher.init(_seed:)((void *)(v1 - 152), *(void *)(v0 + 40));
}

uint64_t sub_10003D470(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10010E16C);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10003D4BC;
  return sub_1000975B4(a1);
}

uint64_t sub_10003D4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*v3 + 16);
  uint64_t v5 = *v3;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 3sub_10003318C(v0 + 2) = a2;
  *(void *)(v5 + 4sub_100016BD0(0, v0, 0) = v2;
  swift_task_dealloc(v4);
  if (v2) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else {
    return sub_10000BD98();
  }
}

uint64_t sub_10003D52C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10003EC48(*(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10003EDF0(*(void *)(v0 + 24), *(void *)(v0 + 32));
  if (v1) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v5);
  }
}

uint64_t sub_10003D5A8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10010E16C);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10003D5F4;
  return sub_1000975B4(a1);
}

uint64_t sub_10003D5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*v3 + 16);
  uint64_t v7 = *v3;
  *(void *)(v7 + 24) = v2;
  swift_task_dealloc(v6);
  if (v2) {
    return (*(uint64_t (**)(void))(v7 + 8))();
  }
  *(void *)(v7 + 3sub_10003318C(v0 + 2) = a2;
  *(void *)(v7 + 4sub_100016BD0(0, v0, 0) = a1;
  return sub_100021BCC((uint64_t)sub_10003D674, 0LL, 0LL);
}

uint64_t sub_10003D674()
{
  unint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = sub_10003ECE0(v1, v2);
  uint64_t v5 = sub_10003EDF0(v1, v2);
  if (!v3) {
    uint64_t v5 = v4;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_10003D6E4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010C8B0);
  sub_100003BA0(v0, (uint64_t)qword_10010C8B0);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

BOOL sub_10003D74C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100102758, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

BOOL sub_10003D7A4@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10003D74C(*a1);
  *a2 = result;
  return result;
}

void sub_10003D7D8(void *a1@<X8>)
{
  *a1 = 0x64656C6261736964LL;
  a1[1] = 0xE800000000000000LL;
}

uint64_t sub_10003D7F4()
{
  return 0x64656C6261736964LL;
}

uint64_t sub_10003D80C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  uint64_t result = sub_10003D790(a1);
  *a2 = result != 0;
  return result;
}

uint64_t sub_10003D838()
{
  return 0LL;
}

void sub_10003D844(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10003D850(uint64_t a1)
{
  unint64_t v2 = sub_10003EF58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003D878(uint64_t a1)
{
  unint64_t v2 = sub_10003EF58();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10003D8A0(void *a1)
{
  uint64_t v3 = sub_100003B20(&qword_10010CA18);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_10000729C(a1, v7);
  unint64_t v10 = sub_10003EF58();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100103A68, &unk_100103A68, v10, v7, v8);
  if (v1)
  {
    sub_100006F7C(a1);
  }

  else
  {
    uint64_t v11 = sub_100003B20(&qword_10010CA28);
    sub_10003EF94();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v14;
    sub_100006F7C(a1);
  }

  return v9;
}

void sub_10003D9CC()
{
}

Swift::Int sub_10003D9F0()
{
  return Hasher._finalize()();
}

void *sub_10003DA30@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10003D8A0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

Swift::Int sub_10003DA60(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10003DAAC()
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = v0;
  uint64_t v2 = (void *)swift_task_alloc(dword_10010C8FC);
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10003DAF4;
  return sub_10003DD24();
}

uint64_t sub_10003DAF4()
{
  return sub_10000BD98();
}

uint64_t sub_10003DB2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10000729C((void *)(v1 + 152), *(void *)(v1 + 176));
  swift_retain(v1);
  sub_1000AF8E8((uint64_t)&unk_10010C9F8, v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DC18(uint64_t a1)
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = a1;
  return swift_task_switch(sub_10003DC30, 0LL, 0LL);
}

uint64_t sub_10003DC30()
{
  if (qword_10010B0A0 != -1) {
    swift_once(&qword_10010B0A0, sub_10003D6E4);
  }
  uint64_t v1 = sub_10000BF6C();
  uint64_t v2 = (void *)sub_10003CE68(v1, (uint64_t)qword_10010C8B0);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_10002275C(v3))
  {
    uint64_t v4 = (_WORD *)sub_10000BCF4(2LL);
    *uint64_t v4 = 0;
    sub_10003F1B4((void *)&_mh_execute_header, v5, v6, "Disabled use case asset has updated");
    sub_10000BCC4((uint64_t)v4);
  }

  uint64_t v7 = (void *)swift_task_alloc(dword_10010C8FC);
  *(void *)(v0 + 24) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10003DCF8;
  return sub_10003DD24();
}

uint64_t sub_10003DCF8()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003DD24()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for FilePath(0LL);
  v1[7] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[8] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  return sub_100021BCC((uint64_t)sub_10003DD90, v0, 0LL);
}

uint64_t sub_10003DD90()
{
  if (qword_10010B0A0 != -1) {
    swift_once(&qword_10010B0A0, sub_10003D6E4);
  }
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = sub_10000BF6C();
  v0[11] = sub_100003BA0(v5, (uint64_t)qword_10010C8B0);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[7];
  if (v9)
  {
    uint64_t v11 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v19 = sub_10000BCF4(32LL);
    uint64_t v21 = v19;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = sub_10000BAC0( &qword_10010BA50,  (uint64_t (*)(uint64_t))&type metadata accessor for FilePath,  (uint64_t)&protocol conformance descriptor for FilePath);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    uint64_t v15 = v14;
    sub_100015EF8(v13, v14, &v21);
    v0[5] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v11 + 4);
    swift_bridgeObjectRelease(v15);
    sub_10003F1DC();
    sub_100022210((void *)&_mh_execute_header, v7, v8, "Loading disabled use case asset plist: %s", v11);
    swift_arrayDestroy(v19, 1LL);
    sub_10000BCC4(v19);
    sub_10000BCC4((uint64_t)v11);
  }

  else
  {
    sub_10003F1DC();
  }

  v0[12] = v0 + 6;
  sub_10000729C((void *)(v0[6] + 112LL), *(void *)(v0[6] + 136LL));
  uint64_t v20 = (uint64_t (*)(uint64_t))((char *)&dword_10010C9E0 + dword_10010C9E0);
  uint64_t v17 = (void *)swift_task_alloc(unk_10010C9E4);
  v0[13] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10003E184;
  return v20(v0[10]);
}

uint64_t sub_10003E184(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 104);
  *(void *)(*v2 + 11sub_10003318C(v0 + 2) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 48);
  if (v1)
  {
    uint64_t v7 = sub_10003E3B4;
  }

  else
  {
    *(void *)(v4 + 12sub_100016BD0(0, v0, 0) = a1;
    uint64_t v7 = sub_10003E1F8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10003E1F8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 192);
  *(void *)(v1 + 19sub_10003318C(v0 + 2) = *(void *)(v0 + 120);
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v21 = *(void *)(v0 + 80);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 48);
    uint64_t v20 = *(void *)(v0 + 56);
    uint64_t v6 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v7 = sub_10000BCF4(32LL);
    uint64_t v23 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = *(void *)(v1 + 192);
    uint64_t v9 = swift_bridgeObjectRetain(v8);
    uint64_t v10 = Set.description.getter(v9, &type metadata for String, &protocol witness table for String);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v8);
    sub_100015EF8(v10, v12, &v23);
    *(void *)(v0 + 3sub_10003318C(v0 + 2) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v19, 2LL);
    sub_100022210((void *)&_mh_execute_header, v4, v5, "Updated disabled use case identifiers to: %s", v6);
    swift_arrayDestroy(v7, 1LL);
    sub_10000BCC4(v7);
    sub_10000BCC4((uint64_t)v6);

    v22(v21, v20);
  }

  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);

    swift_release_n(v17, 2LL);
    v14(v15, v16);
  }

  sub_10003F214();
  sub_10000C140();
  return sub_10002FF80(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003E3B4()
{
  uint64_t v3 = *(void *)(v0 + 112);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v3;
  uint64_t v4 = (void *)(v0 + 16);
  sub_100030414();
  uint64_t v5 = sub_100003B20(&qword_10010B468);
  if ((sub_10003F228(v5, v0 + 16, v6, (uint64_t)&unk_1001039D8) & 1) != 0)
  {
    sub_1000301C0();
    if (qword_10010B0A0 != -1) {
      swift_once(&qword_10010B0A0, sub_10003D6E4);
    }
    uint64_t v7 = sub_10000BF6C();
    uint64_t v8 = (void *)sub_10003CE68(v7, (uint64_t)qword_10010C8B0);
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (sub_10002275C(v9))
    {
      uint64_t v10 = (_WORD *)sub_10000BCF4(2LL);
      *uint64_t v10 = 0;
      sub_10003F1C8((void *)&_mh_execute_header, v11, v12, "Not updating disabled use case identifiers");
      sub_10000BCC4((uint64_t)v10);
    }

    uint64_t v13 = *v4;
  }

  else
  {
    swift_errorRelease(*v4);
    if (qword_10010B0A0 != -1) {
      swift_once(&qword_10010B0A0, sub_10003D6E4);
    }
    uint64_t v14 = sub_10000BF6C();
    uint64_t v15 = (void *)sub_100003BA0(v14, (uint64_t)qword_10010C8B0);
    sub_100030414();
    uint64_t v16 = sub_100030414();
    Logger.logObject.getter(v16);
    os_log_type_t v17 = sub_10003F20C();
    if (!sub_10003D1F0(v17))
    {
      sub_1000301C0();
      sub_1000301C0();
      sub_1000301C0();

      goto LABEL_13;
    }

    uint64_t v18 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v19 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v18 = 138412290;
    sub_100030414();
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(v3);
    sub_10003F198(v20);
    *uint64_t v19 = v2;
    sub_1000301C0();
    sub_1000301C0();
    sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v15,  v1,  "Failed to load disabled use case identifiers: %@",  v18);
    sub_100003B20(&qword_10010BA58);
    sub_10003F1F4();
    sub_10000BCC4((uint64_t)v19);
    sub_10000BCC4((uint64_t)v18);

    uint64_t v13 = v3;
  }

  swift_errorRelease(v13);
LABEL_13:
  sub_10003F214();
  sub_10000C140();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E5D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v77 = a1;
  uint64_t v2 = sub_100003B20(&qword_10010C9C0);
  __chkstk_darwin(v2);
  sub_100022518();
  uint64_t v78 = v3;
  uint64_t v79 = (uint8_t *)type metadata accessor for FilePath(0LL);
  uint64_t v76 = *((void *)v79 - 1);
  uint64_t v4 = __chkstk_darwin(v79);
  uint64_t v75 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v74 = (char *)&v72 - v6;
  uint64_t v7 = sub_100003B20(&qword_10010C9C8);
  __chkstk_darwin(v7);
  sub_100022518();
  uint64_t v80 = v8;
  uint64_t v81 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v81 - 8);
  uint64_t v10 = __chkstk_darwin(v81);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (os_log_s *)((char *)&v72 - v14);
  __chkstk_darwin(v13);
  os_log_type_t v17 = (char *)&v72 - v16;
  sub_10000729C((void *)(v1 + 152), *(void *)(v1 + 176));
  uint64_t v18 = sub_1000A9B40();
  uint64_t v20 = v19;
  sub_10000729C((void *)(v1 + 152), *(void *)(v1 + 176));
  uint64_t v21 = v82;
  char v22 = sub_1000AB020(v18, v20);
  if (v21) {
    return sub_10000C000();
  }
  uint64_t v72 = v12;
  uint64_t v73 = v15;
  uint64_t v82 = v17;
  uint64_t v24 = v81;
  if ((v22 & 1) == 0)
  {
    sub_10000C000();
    if (qword_10010B0A0 != -1) {
      swift_once(&qword_10010B0A0, sub_10003D6E4);
    }
    uint64_t v32 = sub_10000BF6C();
    uint64_t v33 = sub_100003BA0(v32, (uint64_t)qword_10010C8B0);
    os_log_type_t v28 = v33;
    Logger.logObject.getter(v33);
    os_log_type_t v34 = sub_10000C108();
    if (!sub_10003D070(v34)) {
      goto LABEL_14;
    }
    uint64_t v30 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v30 = 0;
    uint64_t v31 = "Disabled use case list asset is not available";
    goto LABEL_13;
  }

  sub_10000729C((void *)(v1 + 152), *(void *)(v1 + 176));
  uint64_t v15 = v80;
  sub_1000AB37C(v18, v20);
  sub_10000C000();
  uint64_t v25 = v24;
  if (sub_1000060B4((uint64_t)v15, 1LL, v24) == 1)
  {
    sub_10003EDB4((uint64_t)v15, &qword_10010C9C8);
    if (qword_10010B0A0 != -1) {
      swift_once(&qword_10010B0A0, sub_10003D6E4);
    }
    uint64_t v26 = sub_10000BF6C();
    uint64_t v27 = sub_100003BA0(v26, (uint64_t)qword_10010C8B0);
    os_log_type_t v28 = v27;
    Logger.logObject.getter(v27);
    os_log_type_t v29 = sub_10000C108();
    if (!sub_10003D070(v29)) {
      goto LABEL_14;
    }
    uint64_t v30 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v30 = 0;
    uint64_t v31 = "Disabled use case list asset is available, but has no location";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v15, v28, v31, v30, 2u);
    sub_10000BCC4((uint64_t)v30);
LABEL_14:

    unint64_t v35 = sub_10003ED78();
    uint64_t v36 = sub_1000302B0((uint64_t)&unk_1001039D8, v35);
    return swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
  }

  os_log_type_t v44 = (uint64_t (**)(uint64_t, uint64_t))v9;
  uint64_t v45 = (uint64_t)v82;
  (*(void (**)(char *, os_log_s *, uint64_t))(v9 + 32))(v82, v15, v24);
  uint64_t v46 = *(os_log_s **)(v9 + 16);
  uint64_t v47 = (uint64_t)v73;
  sub_10003F21C((uint64_t)v73);
  uint64_t v48 = v78;
  FilePath.init(_:)(v47);
  uint64_t v49 = (uint64_t)v79;
  if (sub_1000060B4(v48, 1LL, (uint64_t)v79) == 1)
  {
    sub_10003EDB4(v48, &qword_10010C9C0);
    if (qword_10010B0A0 != -1) {
      swift_once(&qword_10010B0A0, sub_10003D6E4);
    }
    uint64_t v50 = sub_10000BF6C();
    sub_100003BA0(v50, (uint64_t)qword_10010C8B0);
    uint64_t v51 = (uint64_t)v72;
    uint64_t v52 = sub_10003F21C((uint64_t)v72);
    Logger.logObject.getter(v52);
    os_log_type_t v53 = sub_10000C108();
    if (os_log_type_enabled(v46, v53))
    {
      uint64_t v54 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v55 = sub_10000BCF4(32LL);
      uint64_t v85 = v55;
      uint64_t v80 = (os_log_s *)v44;
      *(_DWORD *)uint64_t v54 = 136315138;
      uint64_t v79 = v54 + 4;
      uint64_t v56 = sub_10000BAC0( &qword_10010C9D8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v25, v56);
      uint64_t v59 = v58;
      sub_100015EF8(v57, v58, &v85);
      uint64_t v83 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v79);
      swift_bridgeObjectRelease(v59);
      sub_10003F204(v51);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v53,  "Disabled use case list asset location is not valid: %s",  v54,  0xCu);
      swift_arrayDestroy(v55, 1LL);
      sub_10000BCC4(v55);
      sub_10000BCC4((uint64_t)v54);
    }

    else
    {
      sub_10003F204(v51);
    }

    unint64_t v63 = sub_10003ED78();
    uint64_t v64 = sub_1000302B0((uint64_t)&unk_1001039D8, v63);
    swift_willThrow(v64, v65, v66, v67, v68, v69, v70, v71);
    return sub_10003F204(v45);
  }

  else
  {
    uint64_t v61 = v76;
    uint64_t v62 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v74, v48, v49);
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v75, v62, v49);
    FilePath.appending(_:)(0xD000000000000016LL, 0x80000001000DBB20LL);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v49);
    return v44[1](v45, v24);
  }

void *sub_10003EBBC()
{
  return v0;
}

uint64_t sub_10003EBF0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for UseCaseManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd14UseCaseManager);
}

void sub_10003EC28()
{
}

void sub_10003EC30()
{
}

void sub_10003EC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = PropertyListDecoder.init()();
  unint64_t v6 = sub_10003EEB8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v7,  &type metadata for PolicyFile,  a1,  a2,  &type metadata for PolicyFile,  v6);
  swift_release(v5);
}

uint64_t sub_10003ECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = PropertyListDecoder.init()();
  unint64_t v7 = sub_10003EE34();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v9, &unk_100103940, a1, a2, &unk_100103940, v7);
  uint64_t result = swift_release(v6);
  if (!v2) {
    return v9;
  }
  return result;
}

unint64_t sub_10003ED78()
{
  unint64_t result = qword_10010C9D0;
  if (!qword_10010C9D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D93D0, &unk_1001039D8);
    atomic_store(result, (unint64_t *)&qword_10010C9D0);
  }

  return result;
}

uint64_t sub_10003EDB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003B20(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10003EDF0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10003EE34()
{
  unint64_t result = qword_10010C9E8;
  if (!qword_10010C9E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D93A8, &unk_100103940);
    atomic_store(result, &qword_10010C9E8);
  }

  return result;
}

uint64_t sub_10003EE70()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_10010C9F4);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100023AD0;
  return sub_10003DC18(v0);
}

unint64_t sub_10003EEB8()
{
  unint64_t result = qword_10010CA08;
  if (!qword_10010CA08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA994, &type metadata for PolicyFile);
    atomic_store(result, (unint64_t *)&qword_10010CA08);
  }

  return result;
}

void type metadata accessor for DisabledUseCaseFile()
{
}

void type metadata accessor for DisabledUseCaseInternalError()
{
}

unint64_t sub_10003EF1C()
{
  unint64_t result = qword_10010CA10;
  if (!qword_10010CA10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D9380, &unk_1001039D8);
    atomic_store(result, (unint64_t *)&qword_10010CA10);
  }

  return result;
}

unint64_t sub_10003EF58()
{
  unint64_t result = qword_10010CA20;
  if (!qword_10010CA20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D950C, &unk_100103A68);
    atomic_store(result, (unint64_t *)&qword_10010CA20);
  }

  return result;
}

unint64_t sub_10003EF94()
{
  unint64_t result = qword_10010CA30;
  if (!qword_10010CA30)
  {
    uint64_t v1 = sub_10000603C(&qword_10010CA28);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10010CA30);
  }

  return result;
}

uint64_t sub_10003EFF0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_10003F040(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003F080 + 4 * byte_1000D9290[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003F0A0 + 4 * byte_1000D9295[v4]))();
  }
}

_BYTE *sub_10003F080(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10003F0A0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003F0A8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003F0B0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003F0B8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003F0C0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for DisabledUseCaseFile.CodingKeys()
{
}

unint64_t sub_10003F0DC()
{
  unint64_t result = qword_10010CA38;
  if (!qword_10010CA38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D94E4, &unk_100103A68);
    atomic_store(result, (unint64_t *)&qword_10010CA38);
  }

  return result;
}

unint64_t sub_10003F11C()
{
  unint64_t result = qword_10010CA40;
  if (!qword_10010CA40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D941C, &unk_100103A68);
    atomic_store(result, (unint64_t *)&qword_10010CA40);
  }

  return result;
}

unint64_t sub_10003F15C()
{
  unint64_t result = qword_10010CA48;
  if (!qword_10010CA48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D9444, &unk_100103A68);
    atomic_store(result, (unint64_t *)&qword_10010CA48);
  }

  return result;
}

uint64_t sub_10003F198(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 32, v3);
}

void sub_10003F1B4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10003F1C8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10003F1DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

uint64_t sub_10003F1F4()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_10003F204(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10003F20C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10003F214()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t sub_10003F21C(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t sub_10003F228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a1, a4, 0LL);
}

uint64_t sub_10003F234(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResponseStreamOverridingError<A, B, C>, a2);
  *(void *)(a1 + sub_100006F7C(v0 + 8) = result;
  return result;
}

uint64_t sub_10003F260()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010CA50);
  uint64_t v1 = sub_100003BA0(v0, (uint64_t)qword_10010CA50);
  uint64_t v2 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  generalLogger.getter(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_10003F2F8(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[9] = v5;
  v3[10] = *(void *)(v5 + 64);
  v3[11] = sub_10002287C();
  v3[12] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_10003F35C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  *(void *)(v1 + sub_100006F7C(v0 + 8) = 0LL;
  uint64_t v5 = swift_unknownObjectWeakInit(v1, 0LL);
  *(void *)(v1 + sub_100006F7C(v0 + 8) = v4;
  swift_unknownObjectWeakAssign(v5, v3);
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  swift_unknownObjectRetain(v3);
  v7(ObjectType, v4);
  swift_unknownObjectRelease(v3);
  uint64_t v8 = (void *)(v2 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers);
  uint64_t v9 = sub_1000307DC();
  sub_10002FFE4(v9, v10);
  swift_bridgeObjectRetain(*v8);
  sub_100031204();
  LOBYTE(vsub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v11;
  sub_10000BD28();
  uint64_t v13 = *(void *)(v0 + 88);
  if ((v1 & 1) != 0)
  {
    sub_10002F90C( *(void *)(v0 + 96),  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    sub_10000BFE4();
    sub_10000C140();
    return sub_1000495D4(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 56);
    sub_100049918( *(void *)(v0 + 96),  v12,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v19 = (v18 + 24) & ~v18;
    uint64_t v20 = swift_allocObject(&unk_100103CF8, v19 + v15, v18 | 7);
    *(void *)(v0 + 104) = v20;
    *(void *)(v20 + ++*(void *)(v0 + 16) = v17;
    sub_100049368(v13, v20 + v19);
    uint64_t v21 = unk_10010BA0C;
    uint64_t v23 = (uint64_t (*)(void))((char *)&dword_10010BA08 + dword_10010BA08);
    sub_100021D80();
    char v22 = (void *)swift_task_alloc(v21);
    *(void *)(v0 + 11sub_10003318C(v0 + 2) = v22;
    void *v22 = v0;
    v22[1] = sub_10003F50C;
    return v23();
  }

uint64_t sub_10003F50C()
{
  return sub_10000BCD0();
}

uint64_t sub_10003F548(uint64_t a1)
{
  return sub_100021E4C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10003F584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  void v3[9] = a3;
  unint64_t v5 = (*(void *)(*(void *)(type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL)
                              - 8)
                  + 64LL)
      + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[10] = swift_task_alloc(v5);
  v3[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_10003F5F0, a2, 0LL);
}

uint64_t sub_10003F5F0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_10000BE64((uint64_t)v2, v0 + 16, 1LL);
  uint64_t v3 = swift_bridgeObjectRetain(*v2);
  uint64_t v4 = sub_100048D1C(v3);
  uint64_t v5 = *v2;
  *uint64_t v2 = v4;
  swift_bridgeObjectRelease(v5);
  sub_100049A34();
  sub_100049330(v6, v7, v8);
  sub_10000BE64((uint64_t)v2, v0 + 40, 33LL);
  sub_1000195BC();
  sub_10002F90C(v1, type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  swift_endAccess(v0 + 40);
  sub_10002294C();
  sub_10000BFE4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F6C8()
{
  v1[11] = v0;
  uint64_t v2 = *(void *)(type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL) - 8);
  v1[12] = v2;
  v1[13] = sub_10002FDFC(v2);
  v1[14] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_10003F714()
{
  uint64_t v1 = (os_log_s *)(v0 + 16);
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v2 = v0 + 72;
  uint64_t v3 = sub_10000BF6C();
  *(void *)(v0 + 12sub_100016BD0(0, v0, 0) = sub_100003BA0(v3, (uint64_t)qword_10010CA50);
  sub_1000498F0();
  uint64_t v4 = (os_log_s *)sub_10000C158();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = &unk_10010F000;
  if (v6)
  {
    uint64_t v9 = sub_10000BCF4(22LL);
    uint64_t v54 = sub_10000BCF4(32LL);
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v12 = v11;
    uint64_t v13 = v10;
    uint64_t v2 = v0 + 72;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v13, v12);
    sub_1000495A8(v14, v15, v16, v17, v18, v19);
    *(void *)(v0 + 7sub_10003318C(v0 + 2) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    sub_10000BCDC(v7);
    sub_10000BD28();
    *(_WORD *)(v9 + 1sub_10003318C(v0 + 2) = 2048;
    uint64_t v21 = v7 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers;
    sub_10002FFE4( v7 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers,  v0 + 40);
    uint64_t v22 = *(void *)(*(void *)v21 + 16LL);
    swift_release(v7);
    *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v22;
    uint64_t v1 = (os_log_s *)(v0 + 16);
    uint64_t v8 = (void *)&unk_10010F000;
    sub_1000301B8(v0 + 80, v0 + 88);
    swift_release(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Inference Provider extension %s calling %ld terminationHandlers",  (uint8_t *)v9,  0x16u);
    sub_100021F38(v54);
    sub_10000BCC4(v54);
    sub_10000BCC4(v9);
  }

  else
  {

    sub_10000C0C4(v7);
  }

  uint64_t v23 = (uint64_t *)(*(void *)(v0 + 88) + v8[497]);
  sub_10002FFE4((uint64_t)v23, (uint64_t)v1);
  uint64_t v24 = *v23;
  *(void *)(v0 + 12sub_100006F7C(v0 + 8) = *v23;
  char v25 = *(_BYTE *)(v24 + 32);
  *(_BYTE *)(v0 + 16sub_100006F7C(v0 + 8) = v25;
  uint64_t v26 = -1LL;
  uint64_t v27 = -1LL << v25;
  if (-(-1LL << v25) < 64) {
    uint64_t v26 = ~(-1LL << -(char)v27);
  }
  uint64_t v28 = v26 & *(void *)(v24 + 56);
  os_log_type_t v29 = (void *)swift_bridgeObjectRetain(v24);
  if (v28)
  {
    uint64_t v30 = 0LL;
LABEL_10:
    uint64_t v31 = sub_1000498FC((uint64_t)v29, v30);
    sub_100049918(v31, v32, type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    sub_100049B50();
    sub_100022954();
    return swift_task_switch(v33, v34, v35);
  }

  unint64_t v37 = 63 - v27;
  if ((unint64_t)(63 - v27) > 0x7F)
  {
    if (v29[8])
    {
LABEL_13:
      sub_100049B64();
      goto LABEL_10;
    }

    if (v37 >= 0xC0)
    {
      if (v29[9]) {
        goto LABEL_13;
      }
      if (v37 >= 0x100)
      {
        if (v29[10]) {
          goto LABEL_13;
        }
        if (v37 >= 0x140)
        {
          if (v29[11]) {
            goto LABEL_13;
          }
          unint64_t v38 = v37 >> 6;
          uint64_t v39 = 12LL;
          while (v39 - 7 < v38)
          {
            if (v29[v39++]) {
              goto LABEL_13;
            }
          }
        }
      }
    }
  }

  sub_100049B24((uint64_t)v29);
  uint64_t v41 = sub_10000BD20(0LL);
  Logger.logObject.getter(v41);
  os_log_type_t v42 = sub_10000C160();
  BOOL v43 = sub_1000495A0(v1);
  uint64_t v44 = *(void *)(v0 + 88);
  if (v43)
  {
    uint64_t v45 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v55 = sub_10000BCF4(32LL);
    *(_DWORD *)uint64_t v45 = 136315138;
    sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v47 = sub_100022BE0(v46);
    sub_1000495A8(v47, v48, v49, v50, v51, v52);
    *(void *)(v0 + 64) = v53;
    sub_1000495FC(v0 + 64, v2, (uint64_t)(v45 + 4));
    sub_10000BCDC(v44);
    sub_10000BD28();
    sub_100022210( (void *)&_mh_execute_header,  v1,  v42,  "Inference Provider extension %s finished calling terminationHandlers",  v45);
    sub_100021F38(v55);
    sub_10000BCC4(v55);
    sub_10000BCC4((uint64_t)v45);
  }

  else
  {

    sub_10000BCDC(v44);
  }

  sub_1000499F4();
  sub_10000C140();
  return sub_10002FF80(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003FB70()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0[13]);
  v0[19] = Strong;
  if (!Strong) {
    return sub_10000BF5C();
  }
  uint64_t v2 = *(void *)(v0[13] + 8LL);
  uint64_t ObjectType = swift_getObjectType(Strong);
  uint64_t v4 = *(int **)(v2 + 16);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  os_log_type_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[20] = v5;
  *os_log_type_t v5 = v0;
  v5[1] = sub_10003FC10;
  return v7(ObjectType, v2);
}

uint64_t sub_10003FC10()
{
  uint64_t v1 = *(void *)(v0 + 152);
  sub_10000BE20(*(void *)(v0 + 160), v2);
  swift_unknownObjectRelease(v1);
  return sub_10000BCD0();
}

void sub_10003FC54()
{
  uint64_t v3 = *(void *)(v1 + 136);
  if (*(void *)(v1 + 144))
  {
    sub_100049B64();
    uint64_t v5 = *(void *)(v1 + 128);
LABEL_3:
    uint64_t v6 = sub_1000498FC(v5, v4);
    sub_100049918(v6, v7, type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    sub_100049B50();
    sub_100030544();
    swift_task_switch(v8, v9, v10);
    return;
  }

  int64_t v11 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }

  unint64_t v12 = (1LL << *(_BYTE *)(v1 + 168)) + 63;
  uint64_t v5 = *(void *)(v1 + 128);
  if (v11 < (uint64_t)(v12 >> 6))
  {
    uint64_t v13 = v5 + 56;
    uint64_t v4 = v3 + 1;
    if (*(void *)(v5 + 56 + 8 * v11)) {
      goto LABEL_3;
    }
    int64_t v14 = v12 >> 6;
    uint64_t v4 = v11 + 1;
    if (v11 + 1 < v14)
    {
      if (*(void *)(v13 + 8 * v4)) {
        goto LABEL_3;
      }
      uint64_t v4 = v11 + 2;
      if (v11 + 2 < v14)
      {
        if (*(void *)(v13 + 8 * v4)) {
          goto LABEL_3;
        }
        uint64_t v15 = v11 + 3;
        if (v15 < v14)
        {
          if (*(void *)(v13 + 8 * v15))
          {
            uint64_t v4 = v15;
            goto LABEL_3;
          }

          while (1)
          {
            uint64_t v4 = v15 + 1;
            if (__OFADD__(v15, 1LL)) {
              goto LABEL_23;
            }
            if (v4 >= v14) {
              break;
            }
            ++v15;
            if (*(void *)(v13 + 8 * v4)) {
              goto LABEL_3;
            }
          }
        }
      }
    }
  }

  sub_100049B24(v5);
  uint64_t v16 = sub_10000BD20((uint64_t)v0);
  Logger.logObject.getter(v16);
  os_log_type_t v17 = sub_10000C108();
  BOOL v18 = sub_10000C0F8(v17);
  uint64_t v19 = *(void *)(v1 + 88);
  if (v18)
  {
    uint64_t v20 = sub_10000BCF4(12LL);
    uint64_t v21 = sub_10000BCF4(32LL);
    sub_100049638(4.8149e-34);
    sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v23 = sub_10000C29C(v22);
    sub_1000229F4(v23, v24, v25, v26);
    *(void *)(v1 + 64) = v27;
    sub_1000495FC(v1 + 64, v1 + 72, v2);
    sub_10000BCDC(v19);
    sub_10000BD28();
    sub_100049524( (void *)&_mh_execute_header,  v0,  v28,  "Inference Provider extension %s finished calling terminationHandlers");
    sub_100021F38(v21);
    sub_10000BCC4(v21);
    sub_10000BCC4(v20);
  }

  else
  {

    sub_10000BCDC(v19);
  }

  sub_1000499F4();
  sub_10000C140();
  sub_100021CD4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10003FE8C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010B208);
  v2[5] = sub_100021CC4(*(void *)(v3 - 8));
  sub_100021C90();
  return sub_10000BD98();
}

#error "10003FF94: call analysis failed (funcsize=124)"
uint64_t sub_1000400F0()
{
  uint64_t v0;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 56));
  sub_100021E70();
  sub_10000C0D4();
  return sub_10000BCD0();
}

uint64_t sub_10004012C()
{
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v4 + 112);
  *(void *)(v4 + 11sub_10003318C(v0 + 2) = 0LL;
  *(void *)&double v6 = swift_release(v5).n128_u64[0];
  uint64_t v7 = *(void **)(v4 + 120);
  if (v7) {
    LODWORD(v7) = objc_msgSend(v7, "pid", v6);
  }
  sub_1000497A0((int)v7);

  sub_100049A94();
  *(_BYTE *)(v0 + 14sub_100006F7C(v0 + 8) = 1;
  uint64_t v8 = sub_100021FC8();
  sub_10002FF3C(v1, v9, v10, v8);
  sub_100048A38( &qword_10010B9E0,  type metadata accessor for InferenceProviderExtensionConnection,  (uint64_t)&unk_1000D97CC);
  uint64_t v12 = v11;
  uint64_t v13 = (void *)sub_100007460((uint64_t)&unk_100103CD0, 40LL);
  v13[2] = v0;
  v13[3] = v12;
  v13[4] = v0;
  sub_10000BD20(v0);
  uint64_t v14 = sub_100049A80(v1, (uint64_t)&unk_10010D008);
  swift_release(v14);
  sub_10000C140();
  return sub_100021E4C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000401FC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010CAAC);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000494F0;
  return sub_10003F6C8();
}

uint64_t sub_100040244(uint64_t a1)
{
  *(void *)(v2 + 3sub_10003318C(v0 + 2) = a1;
  *(void *)(v2 + 4sub_100016BD0(0, v0, 0) = v1;
  return sub_10000C088((uint64_t)sub_100040258, v1);
}

uint64_t sub_100040258()
{
  uint64_t v1 = type metadata accessor for TimeoutExecutor(0LL);
  uint64_t v2 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[6] = v2;
  swift_defaultActor_initialize(v2);
  uint64_t v3 = v2 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  uint64_t v4 = sub_100003B20(&qword_10010C088);
  sub_10002FF3C(v3, v5, v6, v4);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout) = 0;
  uint64_t v7 = dword_10010F2CC;
  sub_10000C030();
  uint64_t v8 = (uint64_t **)swift_task_alloc(v7);
  v0[7] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = (uint64_t *)sub_100040328;
  return sub_1000BB774(0x8AC7230489E80000LL, 0LL, (uint64_t)&unk_10010CFF8, v0[5]);
}

uint64_t sub_100040328(char a1)
{
  uint64_t v10 = *v2;
  uint64_t v4 = v10;
  sub_100022B10(&v10);
  *(void *)(v4 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t v7 = sub_10004084C;
  }

  else
  {
    uint64_t v8 = *(void *)(v4 + 40);
    sub_10000BF84();
    sub_100021E70();
    *(_BYTE *)(v4 + 8sub_100016BD0(0, v0, 0) = a1 & 1;
    uint64_t v7 = (uint64_t (*)())sub_1000403AC;
    uint64_t v6 = v8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000403AC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (*(_BYTE *)(v27 + 80) == 1)
  {
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v28 = sub_10000BF6C();
    sub_10003CE68(v28, (uint64_t)qword_10010CA50);
    os_log_type_t v29 = sub_10003CEEC();
    if (!sub_10002275C(v29)) {
      goto LABEL_22;
    }
    uint64_t v30 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v30);
    uint64_t v33 = "terminatedExtensionError TimeoutExecutor timed out";
LABEL_21:
    sub_10003F1B4((void *)&_mh_execute_header, v31, v32, v33);
    sub_10000BCC4(v26);
LABEL_22:
    uint64_t v60 = *(void *)(v27 + 32);

    uint64_t v61 = enum case for ModelManagerError.internalError(_:);
    uint64_t v62 = sub_1000305BC();
    unint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 104LL);
    uint64_t v64 = v60;
LABEL_31:
    uint64_t v72 = v61;
    goto LABEL_32;
  }

  uint64_t v34 = *(void **)(*(void *)(v27 + 40) + 136LL);
  if (!v34)
  {
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v57 = sub_10000BF6C();
    sub_10003CE68(v57, (uint64_t)qword_10010CA50);
    os_log_type_t v58 = sub_10003CEEC();
    if (!sub_10002275C(v58)) {
      goto LABEL_22;
    }
    uint64_t v59 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v59);
    uint64_t v33 = "terminatedExtensionError called with no exit context";
    goto LABEL_21;
  }

  uint64_t v35 = v34;
  id v36 = -[os_log_s status](v35, "status");
  if (!v36 || (unint64_t v37 = v36, v38 = [v36 isJetsam], v37, !v38))
  {
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v46 = *(void *)(v27 + 40);
    uint64_t v47 = sub_10000BF6C();
    sub_100003BA0(v47, (uint64_t)qword_10010CA50);
    sub_10000BD20(v46);
    uint64_t v48 = v35;
    uint64_t v49 = (os_log_s *)sub_10003CFB4();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    BOOL v51 = sub_100049854(v49);
    uint64_t v52 = *(void *)(v27 + 40);
    if (v51)
    {
      uint64_t v53 = sub_10000BCF4(18LL);
      os_log_type_t typea = v50;
      uint64_t v54 = (void *)sub_10000BCF4(8LL);
      *(_DWORD *)uint64_t v53 = 138412546;
      *(void *)(v27 + 24) = v48;
      uint64_t v55 = v48;
      sub_1000495FC(v27 + 24, v27 + 32, v53 + 4);
      *uint64_t v54 = v34;

      *(_WORD *)(v53 + 1sub_10003318C(v0 + 2) = 1024;
      int v56 = *(_DWORD *)(v52 + 144);
      swift_release(v52);
      *(_DWORD *)(v27 + 7sub_10003318C(v0 + 2) = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v27 + 72, v27 + 76, v53 + 14);
      swift_release(v52);
      _os_log_impl( (void *)&_mh_execute_header,  v49,  typea,  "terminatedExtensionError returning abnormal extension termination with %@ for %d",  (uint8_t *)v53,  0x12u);
      sub_100003B20(&qword_10010BA58);
      sub_100021F38((uint64_t)v54);
      sub_10000BCC4((uint64_t)v54);
      sub_10000BCC4(v53);
    }

    else
    {
      sub_10000BCDC(*(void *)(v27 + 40));
    }

    id v65 = sub_100049B84();
    if (v65)
    {
      uint64_t v66 = v65;
      unsigned int v67 = [v65 domain];
    }

    else
    {
      unsigned int v67 = 0;
    }

    id v68 = sub_100049B84();
    if (v68)
    {
      uint64_t v69 = v68;
      id v70 = [v68 code];
    }

    else
    {
      id v70 = 0LL;
    }

    uint64_t v71 = *(void *)(v27 + 32);

    *(_DWORD *)uint64_t v71 = v67;
    *(void *)(v71 + sub_100006F7C(v0 + 8) = v70;
    uint64_t v61 = enum case for ModelManagerError.inferenceProviderCrashed(_:);
    uint64_t v62 = sub_1000305BC();
    unint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 104LL);
    uint64_t v64 = v71;
    goto LABEL_31;
  }

  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v39 = sub_10000BF6C();
  sub_100003BA0(v39, (uint64_t)qword_10010CA50);
  sub_10000C030();
  uint64_t v40 = (os_log_s *)sub_10003CFB4();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  BOOL v42 = sub_1000495A0(v40);
  uint64_t v43 = *(void *)(v27 + 40);
  if (v42)
  {
    uint64_t v44 = (uint8_t *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v44 = 67109120;
    *(_DWORD *)(v27 + 76) = *(_DWORD *)(v43 + 144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v27 + 76, v27 + 80, v44 + 4);
    sub_1000304F8();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "terminatedExtensionError found process %d jettisoned", v44, 8u);
    sub_10000BCC4((uint64_t)v44);
    uint64_t v45 = v40;
  }

  else
  {
    sub_1000304F8();
    uint64_t v45 = v35;
    uint64_t v35 = v40;
  }

  sub_1000305BC();
  uint64_t v64 = sub_100049A14();
LABEL_32:
  v63(v64, v72, v62);
  return sub_10002FF80(*(uint64_t (**)(void))(v27 + 8));
}

uint64_t sub_10004084C()
{
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v2 = *(os_log_s **)(v0 + 64);
  uint64_t v3 = sub_10000BF6C();
  sub_100003BA0(v3, (uint64_t)qword_10010CA50);
  sub_10002293C();
  sub_10002293C();
  sub_10000C158();
  sub_10003CEEC();
  if (sub_1000495A0(v2))
  {
    uint64_t v4 = (_DWORD *)sub_10000BCF4(12LL);
    uint64_t v5 = (void *)sub_10000BCF4(8LL);
    *uint64_t v4 = 138412290;
    sub_100030414();
    uint64_t v6 = sub_100049B9C();
    sub_1000496D0(v6);
    *uint64_t v5 = v1;
    sub_1000301C0();
    sub_1000301C0();
    sub_100049524((void *)&_mh_execute_header, v2, v7, "terminatedExtensionError TimeoutExecutor threw %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v5);
    sub_10000BCC4((uint64_t)v5);
    sub_10000BCC4((uint64_t)v4);

    sub_1000301C0();
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
    sub_1000301C0();
  }

  sub_1000305BC();
  uint64_t v8 = sub_100049A14();
  v9(v8);
  return sub_1000495D4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000409B4(uint64_t a1)
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = a1;
  return swift_task_switch(sub_1000409CC, a1, 0LL);
}

uint64_t sub_1000409CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void *)(*(void *)(v12 + 16) + 128LL);
  *(void *)(v12 + 24) = v13;
  sub_10000C030();
  if (!v13) {
    return sub_100007418(*(uint64_t (**)(void))(v12 + 8));
  }
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v12 + 3sub_10003318C(v0 + 2) = v14;
  *uint64_t v14 = v12;
  v14[1] = sub_100040A44;
  return Task<>.value.getter(v14, v13, (char *)&type metadata for () + 8, v15, v16, v17, v18, v19, a9, a10, a11, a12);
}

uint64_t sub_100040A44()
{
  return sub_10000BD98();
}

double sub_100040A84(void *a1, uint64_t a2)
{
  uint64_t v7 = (void *)v3[15];
  v3[15] = a1;
  id v8 = a1;

  v3[14] = a2;
  swift_retain();
  sub_10000C280();
  uint64_t v9 = sub_100021FC8();
  sub_10002FF3C(v2, v10, v11, v9);
  sub_100048A38( &qword_10010B9E0,  type metadata accessor for InferenceProviderExtensionConnection,  (uint64_t)&unk_1000D97CC);
  uint64_t v13 = v12;
  uint64_t v14 = (void *)sub_100007460((uint64_t)&unk_100103C58, 48LL);
  v14[2] = v3;
  void v14[3] = v13;
  v14[4] = v8;
  v14[5] = v3;
  sub_10000BD20((uint64_t)v3);
  id v15 = v8;
  uint64_t v16 = sub_100049A80(v2, (uint64_t)&unk_10010CFD8);
  uint64_t v17 = v3[16];
  v3[16] = v16;
  *(void *)&double result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_100040B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 3sub_10003318C(v0 + 2) = a5;
  return swift_task_switch(sub_100040B90, a5, 0LL);
}

uint64_t sub_100040B90()
{
  uint64_t v1 = v0[3];
  sub_100048A38( &qword_10010B9E0,  type metadata accessor for InferenceProviderExtensionConnection,  (uint64_t)&unk_1000D97CC);
  uint64_t v2 = swift_task_alloc(32LL);
  v0[5] = v2;
  *(void *)(v2 + ++*(void *)(v0 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v3;
  sub_100049BAC((uint64_t)v3, &qword_10010CFE0, &OBJC_CLASS___RBSProcessExitContext_ptr);
  *uint64_t v3 = v0;
  v3[1] = sub_100040C68;
  sub_100049A34();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100040C68()
{
  return sub_10000BCD0();
}

uint64_t sub_100040CA4()
{
  uint64_t v2 = v1[2];
  v1[7] = v2;
  uint64_t v3 = (os_log_s *)sub_100049654();
  v1[8] = sub_10004965C((uint64_t)"InferenceProvider Extension Terminated", 38LL);
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v4 = sub_10000BF6C();
  sub_10003CE68(v4, (uint64_t)qword_10010CA50);
  os_log_type_t v5 = sub_10003D3E0();
  if (sub_1000228A4(v5))
  {
    uint64_t v6 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v6 = 0;
    sub_1000495CC((void *)&_mh_execute_header, v3, v0, "Extension marked terminated", v6);
    sub_10000BCC4((uint64_t)v6);
  }

  uint64_t v7 = (void *)swift_task_alloc(dword_10010CAB4);
  void v1[9] = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100040D9C;
  return sub_10003FE8C(v2);
}

uint64_t sub_100040D9C()
{
  uint64_t v0 = sub_100049AC4();
  sub_10000BCE4(v0);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100040DD0()
{
  uint64_t v1 = *(void **)(v0 + 56);
  _OSActivity.close()();
  sub_100021E70();

  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100040E04(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010CFE8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100103C80, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_1000491F8;
  uint64_t v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100040F78;
  aBlock[3] = &unk_100103C98;
  uint64_t v10 = _Block_copy(aBlock);
  objc_msgSend(a2, "monitorForDeath:", v10, swift_release(v12).n128_f64[0]);
  _Block_release(v10);
}

uint64_t sub_100040F34(uint64_t a1, void *a2)
{
  uint64_t v5 = a2;
  id v2 = a2;
  uint64_t v3 = sub_100003B20(&qword_10010CFE8);
  return CheckedContinuation.resume(returning:)(&v5, v3);
}

void sub_100040F78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(id, id))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(v8, v7);
  swift_release(v5);
}

uint64_t sub_100040FE4(int a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 4sub_100016BD0(0, v0, 0) = a3;
  *(void *)(v4 + 4sub_100006F7C(v0 + 8) = v3;
  *(void *)(v4 + 3sub_10003318C(v0 + 2) = a2;
  *(_DWORD *)(v4 + 84) = a1;
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100041044()
{
  id v1 =  [(id)objc_opt_self(RBSProcessIdentifier) identifierWithPid:*(unsigned int *)(v0 + 84)];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = (os_log_s *)sub_100049BAC((uint64_t)v1, &qword_10010CFB0, &OBJC_CLASS___RBSProcessHandle_ptr);
    id v4 = v2;
    uint64_t v5 = v3;
    id v27 = sub_100098A1C((uint64_t)v4);
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v28 = sub_10000BF6C();
    sub_10003CE68(v28, (uint64_t)qword_10010CA50);
    os_log_type_t v29 = sub_10003D3E0();
    if (sub_1000228A4(v29))
    {
      uint64_t v30 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)uint64_t v30 = 0;
      sub_1000495CC( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "InferenceProviderExtensionConnection setCurrentState acquiring assertion",  v30);
      sub_10000BCC4((uint64_t)v30);
    }

    uint64_t v31 = *(void *)(v0 + 40);
    uint64_t v32 = *(void *)(v0 + 32);

    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    v34._countAndFlagsBits = sub_10000C29C(v33);
    String.append(_:)(v34);
    sub_100022024();
    uint64_t v59 = v27;
    id v35 = objc_msgSend((id)objc_opt_self(RBSTarget), "targetWithPid:", objc_msgSend(v27, "pid"));
    uint64_t v36 = sub_100003B20(&qword_10010CFB8);
    uint64_t v37 = sub_100007460(v36, 40LL);
    *(_OWORD *)(v37 + ++*(void *)(v0 + 16) = xmmword_1000D9570;
    sub_100049BAC(v37, &qword_10010CFC0, &OBJC_CLASS___RBSDomainAttribute_ptr);
    swift_bridgeObjectRetain(v31);
    id v38 = sub_10004169C(0xD000000000000016LL, 0x80000001000DBE60LL, v32, v31);
    *(void *)(v37 + 3sub_10003318C(v0 + 2) = v38;
    specialized Array._endMutation()(v38);
    id v39 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
    id v40 = sub_100048A74(0xD00000000000001CLL, 0x80000001000DBE40LL, v35, v37);
    *(void *)(v0 + 24) = 0LL;
    unsigned int v41 = [v40 acquireWithError:v0 + 24];
    BOOL v42 = *(void **)(v0 + 24);
    if (v41)
    {
      uint64_t v43 = *(void *)(*(void *)(v0 + 48) + 152LL);
      uint64_t v44 = swift_task_alloc(32LL);
      *(void *)(v44 + ++*(void *)(v0 + 16) = v40;
      id v45 = v42;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v43 + 24));
      sub_10004172C((id *)(v43 + 16), *(void **)(v44 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 24));

      sub_100021DDC();
      sub_10002FF48();
      return sub_100049604((uint64_t)v59, *(uint64_t (**)(void))(v0 + 8));
    }

    id v46 = v42;
    uint64_t v17 = _convertNSErrorToError(_:)(v42);

    swift_willThrow(v47, v48, v49, v50, v51, v52, v53, v54);
  }

  else
  {
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v6 = sub_10000BF6C();
    id v7 = (os_log_s *)sub_10003CE68(v6, (uint64_t)qword_10010CA50);
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      int v9 = *(_DWORD *)(v0 + 84);
      uint64_t v10 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v60 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(_DWORD *)(v0 + 8sub_100016BD0(0, v0, 0) = v9;
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      sub_1000229F4(v11, v12, v13, v14);
      *(void *)(v0 + ++*(void *)(v0 + 16) = v15;
      sub_1000495FC(v0 + 16, v0 + 24, (uint64_t)(v10 + 4));
      sub_10000BD28();
      sub_100022210( (void *)&_mh_execute_header,  v7,  v8,  "launchIfNeededAndTake failed to get process identifier for %s.",  v10);
      sub_100021F38(v60);
      sub_10000BCC4(v60);
      sub_10000BCC4((uint64_t)v10);
    }

    sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    uint64_t v17 = sub_1000494F4(v16);
    uint64_t v19 = sub_100049944(v18, enum case for ModelManagerError.internalError(_:));
    swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
  }

  *(void *)(v0 + 56) = v17;
  sub_1000305BC();
  sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
  *(void *)(v0 + 64) = sub_1000494F4(v55);
  int v56 = (void *)swift_task_alloc(dword_10010CABC);
  *(void *)(v0 + 7sub_10003318C(v0 + 2) = v56;
  *int v56 = v0;
  v56[1] = sub_1000415CC;
  sub_10004977C();
  sub_100022954();
  return sub_100040244(v57);
}

uint64_t sub_1000415CC()
{
  uint64_t v0 = sub_100049AC4();
  sub_10000BCE4(v0);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10004162C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_willThrow();
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10004169C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [(id)swift_getObjCClassFromMetadata(v4) attributeWithDomain:v7 name:v8];

  return v9;
}

id sub_10004172C(id *a1, void *a2)
{
  *a1 = a2;
  return a2;
}

uint64_t sub_10004176C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for BuiltInInferenceProvider(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10002FDFC(v5);
  v3[8] = sub_10002287C();
  uint64_t v6 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0LL);
  void v3[9] = v6;
  v3[10] = sub_100021CC4(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for AppExtensionProcess(0LL);
  v3[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[12] = v8;
  v3[13] = sub_100021CC4(v8);
  uint64_t v9 = type metadata accessor for AppExtensionProcess._InstanceIdentifier(0LL);
  v3[14] = sub_100021CC4(*(void *)(v9 - 8));
  uint64_t v10 = type metadata accessor for AppExtensionProcess.Configuration(0LL);
  v3[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[16] = v11;
  v3[17] = sub_10002FDFC(v11);
  v3[18] = sub_10002287C();
  uint64_t v12 = sub_100049A78();
  v3[19] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[20] = v13;
  v3[21] = sub_10002FDFC(v13);
  v3[22] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

#error "100041A78: call analysis failed (funcsize=177)"
uint64_t sub_100041B64()
{
  uint64_t v0;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 200));
  sub_100021C90();
  return sub_10000BD98();
}

#error "100041BF4: call analysis failed (funcsize=27)"
uint64_t sub_100041C08()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  sub_10000C130();
  sub_100022B10(v2);
  *(void *)(v0 + 2++*(void *)(v0 + 16) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_100041C58()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[14];
  (*(void (**)(uint64_t, void, void))(v0[20] + 16LL))(v1, v0[22], v0[19]);
  uint64_t v3 = AppExtensionProcess.Configuration.init(appExtensionIdentity:onInterruption:)(v1, nullsub_1, 0LL);
  AppExtensionProcess._InstanceIdentifier.init()(v3);
  AppExtensionProcess.Configuration._instanceIdentifier.setter(v2);
  uint64_t v4 = sub_100049B78();
  sub_1000228F0(v4, v5, v6);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to AppExtensionProcess.init(configuration:)[1]);
  v0[28] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100041D14;
  return AppExtensionProcess.init(configuration:)(v0[13], v0[17]);
}

uint64_t sub_100041D14()
{
  return sub_10000BCD0();
}

uint64_t sub_100041D54()
{
  uint64_t result = AppExtensionProcess._auditToken.getter();
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = HIDWORD(v2);
    uint64_t v4 = (void *)swift_task_alloc(dword_10010CAC4);
    *(void *)(v0 + 24sub_100016BD0(0, v0, 0) = v4;
    sub_100049AE4(v4, (uint64_t)sub_100041DAC);
    return sub_100040FE4(v3, v5, v6);
  }

  return result;
}

uint64_t sub_100041DAC()
{
  uint64_t v2 = v0[30];
  v0[31] = v3;
  v0[32] = v1;
  swift_task_dealloc(v2);
  return sub_10000BCD0();
}

uint64_t sub_100041E08()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t Lib = AppExtensionProcess._makeLibXPCConnection()();
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 96);

    sub_100049708(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    sub_10003000C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    uint64_t v33 = *(void *)(v0 + 56);
    _OSActivity.close()();
    sub_100021E70();
    sub_10000BFE4();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    sub_10000C1B8();
    swift_task_dealloc(v33);
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v8 = Lib;
    type metadata accessor for XPCSession(0LL);
    uint64_t v9 = type metadata accessor for XPCSession.InitializationOptions(0LL);
    uint64_t v10 = sub_100021CC4(*(void *)(v9 - 8));
    uint64_t v11 = swift_unknownObjectRetain(v8);
    static XPCSession.InitializationOptions.none.getter(v11);
    uint64_t v14 = XPCSession.__allocating_init(fromConnection:targetQueue:options:incomingMessageHandler:cancellationHandler:)( v8,  0LL,  v10,  sub_100042380,  0LL,  sub_1000425DC,  0LL);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 32);
    sub_10002FF04();
    sub_100049918( v17 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification,  v18,  type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
    uint64_t v20 = *(void *)(v0 + 80);
    if (EnumCaseMultiPayload == 1)
    {
      sub_100049BA4();
      uint64_t v21 = swift_retain();
      uint64_t v22 = InferenceProviderXPCSender.__allocating_init(session:)(v21);
      sub_10002F90C(v20, type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    }

    else
    {
      uint64_t v23 = *(void *)(v0 + 56);
      uint64_t v24 = *(void *)(v0 + 64);
      uint64_t v25 = *(void *)(v0 + 48);
      sub_100022824(v24, *(void *)(v0 + 80), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
      sub_100049BA4();
      sub_100022824(v23, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16));
      swift_retain();
      uint64_t v22 = InferenceProviderXPCSender.__allocating_init(builtInProvider:session:)(v23, v14);
      sub_100049708(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    }

    uint64_t v26 = *(void **)(v0 + 248);
    uint64_t v34 = *(void *)(v0 + 152);
    uint64_t v35 = *(void *)(v0 + 176);
    uint64_t v31 = *(void *)(v0 + 144);
    uint64_t v32 = *(void *)(v0 + 160);
    uint64_t v27 = *(void *)(v0 + 128);
    uint64_t v30 = *(void *)(v0 + 120);
    uint64_t v28 = *(void *)(v0 + 96);
    sub_100040A84(v26, v22);
    sub_10000BF84();
    swift_unknownObjectRelease(v8);
    sub_10000C280();

    sub_100049708(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v30);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v34);
    sub_1000498A0();
    uint64_t v36 = v29;
    _OSActivity.close()();
    sub_100021E70();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    sub_100030760();
    swift_task_dealloc(v36);
    uint64_t v12 = (uint64_t (*)(void))sub_1000227B8();
  }

  return v12();
}

uint64_t sub_10004212C(void *a1)
{
  *(void *)(v1 + 27sub_10003318C(v0 + 2) = v2;
  swift_task_dealloc(v5);
  if (!v2) {

  }
  sub_10000C0D4();
  return sub_10000BF5C();
}

#error "1000421D0: call analysis failed (funcsize=22)"
#error "100042224: call analysis failed (funcsize=21)"
#error "100042294: call analysis failed (funcsize=28)"
#error "10004231C: call analysis failed (funcsize=34)"
#error "100042370: call analysis failed (funcsize=21)"
void sub_100042380(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  os_log_s *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void v20[2];
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v4, (uint64_t)qword_10010CA50);
  uint64_t v5 = type metadata accessor for XPCReceivedMessage(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v10 = v9((char *)v20 - v8, a1, v5);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v14;
    v20[0] = v20;
    uint64_t v24 = v14;
    uint64_t v22 = a2;
    *(_DWORD *)uint64_t v13 = 136315138;
    v20[1] = v13 + 4;
    __chkstk_darwin(v14);
    v9((char *)v20 - v8, (uint64_t)v20 - v8, v5);
    uint64_t v15 = String.init<A>(describing:)((char *)v20 - v8, v5);
    uint64_t v17 = v16;
    sub_100015EF8(v15, v16, &v24);
    uint64_t v23 = v18;
    a2 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v20 - v8, v5);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Unexpected message received from InferenceProvider XPC service: %s",  v13,  0xCu);
    uint64_t v19 = v21;
    swift_arrayDestroy(v21, 1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v20 - v8, v5);
  }

  a2[3] = &type metadata for String;
  a2[4] = &protocol witness table for String;
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
}

void sub_1000425DC(uint64_t a1)
{
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v2, (uint64_t)qword_10010CA50);
  uint64_t v3 = type metadata accessor for XPCRichError(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v8 = v7(v6, a1, v3);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(8LL, -1LL);
    void v18[2] = v18;
    uint64_t v13 = (void *)v12;
    *(_DWORD *)uint64_t v11 = 138412290;
    v18[1] = v11 + 4;
    unint64_t v14 = sub_10003C6CC();
    uint64_t v15 = swift_allocError(v3, v14, 0LL, 0LL);
    v7(v16, (uint64_t)v6, v3);
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v15);
    uint64_t v19 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    *uint64_t v13 = v17;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Connection to InferenceProvider XPC service cancelled: %@",  v11,  0xCu);
    sub_100003B20(&qword_10010BA58);
    swift_arrayDestroy(v13, 1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_100042800()
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_100042814, v0);
}

uint64_t sub_100042814()
{
  uint64_t v1 = unk_10010B9DC;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10010B9D8 + dword_10010B9D8);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100042888;
  return v4((uint64_t)v4, (uint64_t)&unk_10010CFA0, *(void *)(v0 + 16));
}

uint64_t sub_100042888()
{
  *(void *)(v0 + 3sub_10003318C(v0 + 2) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    sub_100021DDC();
  }
  sub_10000C0D4();
  return sub_10000BCD0();
}

uint64_t sub_1000428DC()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100042908(uint64_t a1, uint64_t a2)
{
  v2[19] = a2;
  unint64_t v4 = (*(void *)(*(void *)(sub_100003B20(&qword_10010CF90) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v4);
  v2[21] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for RequestPriority(0LL);
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[24] = swift_task_alloc(v7);
  v2[25] = swift_task_alloc(v7);
  v2[26] = swift_task_alloc(v7);
  v2[27] = swift_task_alloc(v7);
  v2[28] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000429D4, a2, 0LL);
}

uint64_t sub_1000429D4()
{
  uint64_t v1 = v0;
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v2 = (uint8_t *)(v0 + 152);
  uint64_t v3 = v4;
  uint64_t v6 = *((void *)v2 + 8);
  uint64_t v5 = *((void *)v2 + 9);
  uint64_t v7 = *((void *)v2 + 3);
  uint64_t v8 = *((void *)v2 + 4);
  uint64_t v9 = *((void *)v2 + 1);
  uint64_t v108 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount;
  uint64_t v10 = enum case for RequestPriority.none(_:);
  else {
    uint64_t v11 = enum case for RequestPriority.background(_:);
  }
  uint64_t v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104);
  v113(v6, v11, v7);
  uint64_t v12 = *(uint8_t **)(v8 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v5, v6, v7);
  uint64_t v13 = sub_100003B20(&qword_10010CFA8);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = *(void *)(v8 + 72);
  uint64_t v17 = swift_allocObject(v13, v15 + 2 * v16, v14 | 7);
  *(_OWORD *)(v17 + ++*(void *)(v0 + 16) = xmmword_1000D9580;
  uint64_t v18 = v17 + v15;
  uint64_t v109 = v3;
  uint64_t v19 = (void *)(v3 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  sub_10002FFE4((uint64_t)v19, (uint64_t)(v2 - 136));
  uint64_t v107 = v19;
  uint64_t v20 = *v19;
  uint64_t v21 = swift_bridgeObjectRetain(v20);
  sub_100043310(v21, v9);
  swift_bridgeObjectRelease(v20);
  int v22 = sub_1000499CC();
  uint64_t v23 = *((void *)v2 + 3);
  uint64_t v24 = v2;
  uint64_t v25 = *((void *)v2 + 1);
  if (v22 == 1)
  {
    uint64_t v26 = v113;
    v113(v18, v10, v23);
    sub_100048C90(v25);
  }

  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v18, v25, v23);
    uint64_t v26 = v113;
  }

  uint64_t v27 = *(void *)(v1 + 168);
  (*(void (**)(uint64_t, void, void))(*(void *)(v1 + 184) + 16LL))( v18 + v16,  *(void *)(v1 + 224),  *(void *)(v1 + 176));
  sub_100043720(v17, v27);
  swift_setDeallocating(v17);
  sub_100048BAC();
  int v28 = sub_1000499CC();
  uint64_t v29 = *(void *)(v1 + 208);
  uint64_t v31 = *(void *)(v1 + 168);
  uint64_t v30 = *(void *)(v1 + 176);
  if (v28 == 1)
  {
    v26(v29, v10, v30);
    sub_100048C90(v31);
  }

  else
  {
    ((void (*)(uint64_t, void, uint64_t))v12)(v29, *(void *)(v1 + 168), v30);
  }

  uint64_t v112 = (uint64_t)v24;
  uint64_t v32 = (uint64_t)(v24 - 112);
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v33 = *(os_log_s **)(v1 + 200);
  uint64_t v34 = *(void *)(v1 + 152);
  uint64_t v35 = sub_10000BF6C();
  uint64_t v36 = (os_log_s *)sub_100003BA0(v35, (uint64_t)qword_10010CA50);
  sub_100049A2C();
  uint64_t v37 = swift_retain_n(v34, 8LL);
  Logger.logObject.getter(v37);
  os_log_type_t v38 = sub_10000C108();
  uint64_t v111 = v33;
  BOOL v39 = sub_1000495A0(v33);
  uint64_t v40 = *(void *)(v1 + 200);
  unsigned int v110 = v10;
  if (v39)
  {
    uint64_t v12 = v24;
    uint64_t v104 = *(void *)(v1 + 184);
    uint64_t v41 = *(void *)(v1 + 176);
    os_log_type_t type = v38;
    uint64_t v42 = *(void *)(v1 + 152);
    uint64_t v106 = v32;
    uint64_t v43 = sub_10000BCF4(52LL);
    uint64_t v114 = sub_10000BCF4(96LL);
    *(_DWORD *)uint64_t v43 = 136316162;
    sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v45 = sub_10000C29C(v44);
    sub_100030C60(v45, v46);
    *(void *)(v1 + 12sub_100016BD0(0, v0, 0) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v112 - 32, v112 - 24);
    sub_10000BCDC(v42);
    sub_10000BD28();
    *(_WORD *)(v43 + 1sub_10003318C(v0 + 2) = 2080;
    uint64_t v48 = v40;
    sub_100049A2C();
    uint64_t v49 = sub_100049B30();
    sub_100030C60(v49, v50);
    *(void *)(v1 + 11sub_10003318C(v0 + 2) = v51;
    sub_1000301B8(v112 - 40, v112 - 32);
    sub_100022024();
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    v52(v40, v41);
    *(_WORD *)(v43 + 2sub_10003318C(v0 + 2) = 2080;
    sub_10002FFE4(v42 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activePriority, v112 - 64);
    sub_100049A2C();
    uint64_t v53 = sub_100049B30();
    uint64_t v55 = v54;
    sub_100030C60(v53, v54);
    *(void *)(v1 + 12sub_100006F7C(v0 + 8) = v56;
    sub_1000301B8(v112 - 24, v112 - 16);
    sub_10000BCDC(v42);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v43 + 3sub_10003318C(v0 + 2) = 2048;
    uint64_t v57 = *(void *)(v109 + v108);
    sub_10000C280();
    *(void *)(v1 + 136) = v57;
    sub_1000301B8(v112 - 16, v112 - 8);
    sub_10000C280();
    *(_WORD *)(v43 + 4sub_10003318C(v0 + 2) = 2048;
    uint64_t v58 = *(void *)(*v107 + 16LL);
    sub_10000C280();
    *(void *)(v1 + 144) = v58;
    sub_1000301B8(v112 - 8, v112);
    sub_10000C280();
    _os_log_impl( (void *)&_mh_execute_header,  v111,  type,  "InferenceProviderExtensionConnection %s setCurrentState to %s from %s [%ld, %ld",  (uint8_t *)v43,  0x34u);
    sub_100049920(v59, v60, v61, v62, v63, v64, v65, v66, v48, v104, v112 - 40, v112 - 64, v112 - 16, v112 - 8, v114);
    sub_10000BCC4(v43 + 44);
    uint64_t v67 = v43;
    uint64_t v32 = v106;
    sub_10000BCC4(v67);
  }

  else
  {
    uint64_t v69 = *(void *)(v1 + 176);
    uint64_t v68 = *(void *)(v1 + 184);
    uint64_t v70 = *(void *)(v1 + 152);
    sub_10000C0C4(v70);
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v52(v40, v69);

    sub_10000C0C4(v70);
  }

  *(void *)(v1 + 23sub_10003318C(v0 + 2) = v52;
  uint64_t v71 = *(void *)(v1 + 192);
  uint64_t v72 = *(void *)(v1 + 176);
  uint64_t v73 = *(void *)(v1 + 152) + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activePriority;
  sub_10002FFE4(v73, v32);
  sub_100049A2C();
  char v74 = sub_1000BC418();
  uint64_t v75 = ((uint64_t (*)(uint64_t, uint64_t))v52)(v71, v72);
  uint64_t v76 = *(void *)(v1 + 152);
  if ((v74 & 1) != 0 && *(void *)(v76 + 112))
  {
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v78 = static os_log_type_t.info.getter();
    if (sub_100049854(v77))
    {
      uint64_t v79 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v79);
      sub_1000495CC( (void *)&_mh_execute_header,  v77,  v78,  "InferenceProviderExtensionConnection setCurrentState not updating state",  v12);
      sub_10000BCC4((uint64_t)v12);
    }

    uint64_t v80 = v77;
LABEL_24:
    uint64_t v95 = *(void *)(v1 + 224);
    os_log_type_t v94 = *(void (**)(uint64_t, uint64_t))(v1 + 232);
    uint64_t v96 = *(void *)(v1 + 208);
    uint64_t v97 = *(void *)(v1 + 176);
    uint64_t v98 = *(void *)(v1 + 160);

    v94(v96, v97);
    v94(v95, v97);
    sub_10000C140();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030500();
    swift_task_dealloc(v98);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v81 = *(void *)(v1 + 208);
  uint64_t v83 = *(void *)(v1 + 184);
  uint64_t v82 = *(void *)(v1 + 192);
  uint64_t v84 = *(void *)(v1 + 176);
  uint64_t v85 = sub_10003D238();
  sub_10000BE64(v85, v86, 33LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 24))(v73, v81, v84);
  swift_endAccess(v112 - 88);
  uint64_t v87 = *(void *)(v76 + 152);
  sub_100021D80();
  os_unfair_lock_lock((os_unfair_lock_t)(v87 + 24));
  uint64_t v88 = *(void **)(v87 + 16);
  *(void *)(v1 + 24sub_100016BD0(0, v0, 0) = v88;
  *(void *)(v87 + ++*(void *)(v0 + 16) = 0LL;
  os_unfair_lock_unlock((os_unfair_lock_t)(v87 + 24));
  sub_10000BF84();
  uint64_t v89 = *(void (**)(uint64_t, void, uint64_t))(v83 + 104);
  v89(v82, v110, v84);
  os_log_type_t v90 = sub_1000BC418();
  uint64_t v91 = ((uint64_t (*)(uint64_t, uint64_t))v52)(v82, v84);
  if ((v90 & 1) != 0)
  {
    Logger.logObject.getter(v91);
    os_log_type_t v92 = sub_10003D3E0();
    if (sub_1000228A4(v92))
    {
      uint64_t v93 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)uint64_t v93 = 0;
      sub_1000495CC( (void *)&_mh_execute_header,  v36,  v90,  "InferenceProviderExtensionConnection setCurrentState no active requests",  v93);
      sub_10000BCC4((uint64_t)v93);
    }

    sub_1000438FC(v88);
    uint64_t v80 = (os_log_s *)v88;
    goto LABEL_24;
  }

  v89(*(void *)(v1 + 192), enum case for RequestPriority.foreground(_:), *(void *)(v1 + 176));
  sub_1000307DC();
  char v100 = sub_1000BC418();
  *(_BYTE *)(v1 + 264) = v100 & 1;
  if ((v100 & 1) != 0) {
    unsigned int v101 = "ForegroundInference";
  }
  else {
    unsigned int v101 = "BackgroundInference";
  }
  uint64_t v102 = sub_10003D238();
  ((void (*)(uint64_t))v52)(v102);
  uint64_t v103 = (void *)swift_task_alloc(dword_10010CACC);
  *(void *)(v1 + 24sub_100006F7C(v0 + 8) = v103;
  *uint64_t v103 = v1;
  v103[1] = sub_100043178;
  return sub_10004176C(0xD000000000000013LL, (unint64_t)(v101 - 32) | 0x8000000000000000LL);
}

uint64_t sub_100043178()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248LL);
  if (*(_BYTE *)(*(void *)v1 + 264LL)) {
    unint64_t v3 = 0x80000001000DBDF0LL;
  }
  else {
    unint64_t v3 = 0x80000001000DBDD0LL;
  }
  *(void *)(*(void *)v1 + 256LL) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return sub_10000BF5C();
}

uint64_t sub_100043210()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 176);

  v1(v3, v4);
  v1(v2, v4);
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_100030494();
  sub_100030500();
  uint64_t v5 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10002FDE0(v5);
}

#error "1000432FC: call analysis failed (funcsize=33)"
void *sub_100043310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *result;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  __n128 v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  void *v47;
  void v48[2];
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v4 = type metadata accessor for RequestPriority(0LL);
  uint64_t v47 = *(void **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v41 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t result = sub_100020D00(v48, a1);
  uint64_t v45 = v48[1];
  if (!v51)
  {
    os_log_type_t v38 = v50 + 1;
    if (__OFADD__(v50, 1LL)) {
      goto LABEL_45;
    }
    uint64_t v46 = (unint64_t)(v49 + 64) >> 6;
    if (v38 < v46)
    {
      BOOL v39 = *(void *)(v45 + 8 * v38);
      uint64_t v20 = v50 + 1;
      if (v39)
      {
LABEL_29:
        uint64_t v17 = v13;
        uint64_t v42 = a2;
        uint64_t v43 = a1;
        uint64_t v18 = (v39 - 1) & v39;
        uint64_t v19 = __clz(__rbit64(v39)) + (v20 << 6);
        goto LABEL_3;
      }

      uint64_t v20 = v50 + 2;
      if (v50 + 2 < v46)
      {
        BOOL v39 = *(void *)(v45 + 8 * v20);
        if (v39) {
          goto LABEL_29;
        }
        uint64_t v20 = v50 + 3;
        if (v50 + 3 < v46)
        {
          BOOL v39 = *(void *)(v45 + 8 * v20);
          if (v39) {
            goto LABEL_29;
          }
          uint64_t v20 = v50 + 4;
          if (v50 + 4 < v46)
          {
            BOOL v39 = *(void *)(v45 + 8 * v20);
            if (v39) {
              goto LABEL_29;
            }
            uint64_t v20 = v50 + 5;
            if (v50 + 5 < v46)
            {
              BOOL v39 = *(void *)(v45 + 8 * v20);
              if (!v39)
              {
                uint64_t v40 = v50 + 6;
                do
                {
                  if (v40 >= v46) {
                    goto LABEL_42;
                  }
                  BOOL v39 = *(void *)(v45 + 8 * v40++);
                }

                while (!v39);
                uint64_t v20 = v40 - 1;
              }

              goto LABEL_29;
            }
          }
        }
      }
    }

uint64_t sub_100043720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RequestPriority(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return sub_100005FB0(a2, 1LL, 1LL, v4);
  }
  uint64_t v22 = a2;
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  v13((char *)&v22 - v9, a1 + v12, v4);
  uint64_t v23 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v14 = v11 - 1;
  if (v14)
  {
    uint64_t v15 = *(void *)(v5 + 72);
    unint64_t v16 = v23 + v15 + v12;
    do
    {
      v13(v8, v16, v4);
      sub_100048A38( &qword_10010B738,  (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority,  (uint64_t)&protocol conformance descriptor for RequestPriority);
      char v18 = dispatch thunk of static Comparable.< infix(_:_:)(v10, v8, v4, v17);
      uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      if ((v18 & 1) != 0)
      {
        v19(v10, v4);
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v8, v4);
      }

      else
      {
        v19(v8, v4);
      }

      v16 += v15;
      --v14;
    }

    while (v14);
  }

  swift_bridgeObjectRelease(v23);
  uint64_t v20 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v22, v10, v4);
  return sub_100005FB0(v20, 0LL, 1LL, v4);
}

void sub_1000438FC(void *a1)
{
  if (a1)
  {
    uint64_t v1 = qword_10010B0A8;
    id v2 = a1;
    if (v1 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_100003BA0(v3, (uint64_t)qword_10010CA50);
    id v4 = v2;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v15 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      id v9 = [v4 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      sub_100015EF8(v10, v12, &v15);
      uint64_t v14 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);

      swift_bridgeObjectRelease(v12);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "InferenceProviderExtensionConnection setCurrentState invalidating assertion %s",  v7,  0xCu);
      swift_arrayDestroy(v8, 1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
    }

    [v4 invalidate];
  }

uint64_t sub_100043ADC(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v4 = sub_100003B20(&qword_10010B408);
  v3[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[17] = v5;
  v3[18] = sub_10002FDFC(v5);
  v3[19] = sub_10002287C();
  uint64_t v6 = sub_100003B20(&qword_10010CF90);
  v3[20] = sub_10002FDFC(*(void *)(v6 - 8));
  v3[21] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_100043B54()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[15];
  sub_100049654();
  uint64_t v4 = sub_10004965C((uint64_t)"Adding active InferenceProvider request", 39LL);
  uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest;
  v0[22] = v4;
  v0[23] = v5;
  uint64_t v6 = (uint64_t *)(v3 + v5);
  sub_10002FFE4((uint64_t)v6, (uint64_t)(v0 + 2));
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(*v6);
  sub_10000FBCC(v1, v7);
  sub_10000BD28();
  uint64_t v8 = sub_100022694();
  v0[24] = v8;
  LODWORD(v7) = sub_1000060B4(v2, 1LL, v8);
  sub_100048C90(v2);
  if ((_DWORD)v7 == 1)
  {
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v9 = sub_10000BF6C();
    uint64_t v10 = sub_100003BA0(v9, (uint64_t)qword_10010CA50);
    v0[25] = v10;
    uint64_t v11 = (os_log_s *)v10;
    Logger.logObject.getter(v10);
    os_log_type_t v12 = sub_10003D3E0();
    if (sub_10002275C(v12))
    {
      uint64_t v13 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)uint64_t v13 = 0;
      sub_1000495CC( (void *)&_mh_execute_header,  v11,  (os_log_type_t)((_BYTE)v0 + 104),  "In InferenceProviderExtensionConnection addActiveRequest",  v13);
      sub_10000BCC4((uint64_t)v13);
    }

    uint64_t v15 = v0[19];
    uint64_t v14 = v0[20];
    uint64_t v16 = v0[17];
    uint64_t v18 = v0[13];
    uint64_t v17 = v0[14];

    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    v0[26] = v19;
    sub_100022824(v15, v18, v19);
    sub_1000228F0(v14, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL));
    sub_100005FB0(v14, 0LL, 1LL, v8);
    sub_10000BE64((uint64_t)v6, (uint64_t)(v0 + 5), 33LL);
    sub_10009D3A8(v14);
    swift_endAccess(v0 + 5);
    uint64_t v20 = (void *)swift_task_alloc(dword_10010CAD4);
    v0[27] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100043EA4;
    return sub_100049554();
  }

  else
  {
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v23 = v0[17];
    uint64_t v22 = v0[18];
    uint64_t v24 = v0[16];
    uint64_t v25 = v0[13];
    uint64_t v26 = sub_10000BF6C();
    sub_100003BA0(v26, (uint64_t)qword_10010CA50);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    int v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    BOOL v30 = sub_1000495A0(v28);
    uint64_t v31 = v0[16];
    if (v30)
    {
      uint64_t v42 = v0[17];
      uint64_t v32 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v43 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v32 = 136315138;
      unint64_t v33 = sub_10000B4E4();
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v31, v33);
      sub_100049630(v34, v35, v36, v37, v38, v39);
      v0[12] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13);
      sub_1000303D0();
      sub_100049984(v42);
      sub_100022210( (void *)&_mh_execute_header,  v28,  v29,  "InferenceProviderExtensionConnection addActiveRequest called multiple times for %s",  v32);
      sub_100021F38(v43);
      sub_10000BCC4(v43);
      sub_10000BCC4((uint64_t)v32);
    }

    else
    {
      sub_100049984(v0[17]);
    }

    sub_100049A58();
    sub_100021E70();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    uint64_t v41 = (uint64_t (*)(void))sub_1000227B8();
    return sub_10002FF80(v41);
  }

uint64_t sub_100043EA4()
{
  *(void *)(v0 + 224) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_100043EF4()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000227B8();
  return sub_1000221B0(v0);
}

uint64_t sub_100043F30()
{
  uint64_t v1 = sub_100030414();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (sub_10003CEBC(v2))
  {
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v5 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v6 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    sub_100049B3C();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v7;
    sub_100049A48(v0 + 88);
    *uint64_t v6 = v7;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    sub_100022210( (void *)&_mh_execute_header,  v2,  v3,  "InferenceProviderExtensionConnection addActiveRequest failed with %@",  v5);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v6);
    sub_10000BCC4((uint64_t)v6);
    sub_10000BCC4((uint64_t)v5);
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
  }

  uint64_t v8 = v2;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 152);
  uint64_t v25 = *(void *)(v0 + 168);
  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 104);

  v9(v12, v15, v13);
  sub_100049974(v11);
  sub_10000BE64(v14 + v10, v0 + 64, 33LL);
  sub_10009D3A8(v11);
  uint64_t v16 = swift_endAccess(v0 + 64);
  swift_willThrow(v16, v17, v18, v19, v20, v21, v22, v23);
  _OSActivity.close()();
  sub_100021E70();
  swift_task_dealloc(v25);
  sub_10002FF04();
  sub_10002294C();
  swift_task_dealloc(v26);
  return sub_10002FF80(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000440E4(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010B408);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = sub_10002FDFC(v4);
  v2[15] = sub_10002287C();
  uint64_t v5 = sub_100003B20(&qword_10010CF90);
  v2[16] = sub_10002FDFC(*(void *)(v5 - 8));
  v2[17] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_100044158( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  uint64_t v25 = *(void *)(v22 + 136);
  uint64_t v26 = *(void *)(v22 + 80);
  uint64_t v27 = *(void *)(v22 + 88);
  sub_100049654();
  *(void *)(v22 + 144) = sub_10004965C((uint64_t)"Removing active InferenceProvider request", 41LL);
  int v28 = (uint64_t *)(v27 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  sub_10002FFE4(v27 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest, v22 + 16);
  uint64_t v29 = *v28;
  swift_bridgeObjectRetain(*v28);
  sub_10000FBCC(v26, v29);
  sub_100022B4C();
  uint64_t v30 = sub_100022694();
  LODWORD(v26) = sub_1000060B4(v25, 1LL, v30);
  sub_100048C90(v25);
  if ((_DWORD)v26 == 1)
  {
    if (qword_10010B0A8 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v32 = *(void *)(v22 + 104);
    uint64_t v31 = *(void *)(v22 + 112);
    uint64_t v33 = sub_10000BF6C();
    sub_100003BA0(v33, (uint64_t)qword_10010CA50);
    sub_1000496EC(v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16));
    uint64_t v34 = (os_log_s *)sub_10003CFB4();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    BOOL v36 = sub_10003CEBC(v34);
    uint64_t v37 = *(void *)(v22 + 96);
    if (v36)
    {
      uint64_t v38 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v39 = sub_10000BCF4(32LL);
      a11 = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      unint64_t v40 = sub_10000B4E4();
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v37, v40);
      sub_100015EF8(v41, v42, &a11);
      *(void *)(v22 + 64) = v43;
      sub_1000495FC(v22 + 64, v22 + 72, (uint64_t)(v38 + 4));
      sub_100022024();
      sub_1000499BC();
      sub_100022210( (void *)&_mh_execute_header,  v34,  v35,  "InferenceProviderExtensionConnection removeActiveRequest called for nonactive %s",  v38);
      sub_100021F38(v39);
      sub_10000BCC4(v39);
      sub_10000BCC4((uint64_t)v38);
    }

    else
    {
      sub_1000499BC();
    }

    sub_100049740();
    sub_100021E70();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    return sub_100021CD4(*(uint64_t (**)(void))(v22 + 8));
  }

  else
  {
    uint64_t v44 = *(void *)(v22 + 128);
    (*(void (**)(void, void, void))(*(void *)(v22 + 104) + 16LL))( *(void *)(v22 + 120),  *(void *)(v22 + 80),  *(void *)(v22 + 96));
    sub_100049974(v44);
    uint64_t v45 = sub_1000307DC();
    sub_10000BE64(v45, v46, 33LL);
    sub_10009D3A8(v44);
    swift_endAccess(v22 + 40);
    uint64_t v47 = (void *)swift_task_alloc(dword_10010CAD4);
    *(void *)(v22 + 15sub_10003318C(v0 + 2) = v47;
    *uint64_t v47 = v22;
    v47[1] = sub_1000443D8;
    sub_100030544();
    return sub_100042800();
  }

uint64_t sub_1000443D8()
{
  *(void *)(v0 + 16sub_100016BD0(0, v0, 0) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_100044428()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100044474()
{
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 160);
  uint64_t v2 = sub_10000BF6C();
  sub_100003BA0(v2, (uint64_t)qword_10010CA50);
  sub_10002293C();
  sub_10002293C();
  sub_10000C158();
  sub_10003F20C();
  if (sub_1000495A0(v1))
  {
    uint64_t v3 = (_DWORD *)sub_10000BCF4(12LL);
    uint64_t v4 = (void *)sub_10000BCF4(8LL);
    *uint64_t v3 = 138412290;
    sub_100030414();
    uint64_t v5 = sub_100049B9C();
    *(void *)(v0 + 7sub_10003318C(v0 + 2) = v5;
    sub_10003CE18(v0 + 72, v0 + 80);
    *uint64_t v4 = v5;
    sub_1000301C0();
    sub_1000301C0();
    sub_100049524( (void *)&_mh_execute_header,  v1,  v6,  "InferenceProviderExtensionConnection removeActiveRequest failed with %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v4);
    sub_10000BCC4((uint64_t)v4);
    sub_10000BCC4((uint64_t)v3);

    sub_1000301C0();
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
    sub_1000301C0();
  }

  sub_100049740();
  sub_100021E70();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  return sub_1000495D4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000445DC()
{
  *(void *)(v0 + 14sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = 0LL;
  *(_OWORD *)(v0 + 11sub_10003318C(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 12sub_100006F7C(v0 + 8) = 0u;
  uint64_t v1 = sub_100003B20(&qword_10010CF50);
  uint64_t v2 = sub_100007460(v1, 28LL);
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 15sub_10003318C(v0 + 2) = v2;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) = 0LL;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest) = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = sub_100022694();
  sub_10004980C(v3);
  uint64_t v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  uint64_t v5 = type metadata accessor for WorkQueueState();
  uint64_t v6 = sub_100007460(v5, 32LL);
  *(void *)(v6 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v0 + v4) = v6;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers) = _swiftEmptySetSingleton;
  uint64_t v7 = sub_1000306E4();
  sub_100049824(v7);
  uint64_t v8 = type metadata accessor for BuiltInInferenceProvider(0LL);
  sub_10004983C(v8);
  type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0LL);
  uint64_t v9 = sub_100049A88();
  swift_storeEnumTagMultiPayload(v9, v10, 0LL);
  sub_1000496F8();
}

void sub_1000446EC()
{
  *(void *)(v0 + 14sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = 0LL;
  *(_OWORD *)(v0 + 11sub_10003318C(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 12sub_100006F7C(v0 + 8) = 0u;
  uint64_t v1 = sub_100003B20(&qword_10010CF50);
  uint64_t v2 = sub_100007460(v1, 28LL);
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 15sub_10003318C(v0 + 2) = v2;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) = 0LL;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest) = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = sub_100022694();
  sub_10004980C(v3);
  uint64_t v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  uint64_t v5 = type metadata accessor for WorkQueueState();
  uint64_t v6 = sub_100007460(v5, 32LL);
  *(void *)(v6 + ++*(void *)(v0 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v0 + v4) = v6;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers) = _swiftEmptySetSingleton;
  uint64_t v7 = sub_1000306E4();
  sub_100049824(v7);
  uint64_t v8 = sub_100049A78();
  sub_10004983C(v8);
  type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0LL);
  uint64_t v9 = sub_100049A88();
  swift_storeEnumTagMultiPayload(v9, v10, 1LL);
  sub_1000496F8();
}

uint64_t sub_1000447F8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0LL);
  v2[4] = v3;
  v2[5] = sub_100021CC4(*(void *)(v3 - 8));
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10004483C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000307DC();
  if (swift_getEnumCaseMultiPayload(v3, v4) == 1)
  {
    uint64_t v5 = sub_100049A78();
    sub_100049B90(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL));
    swift_task_dealloc(v2[5]);
    uint64_t v6 = (uint64_t (*)(void))sub_1000227B8();
    return v6();
  }

  else
  {
    sub_100049BA4();
    uint64_t v8 = static InferenceProviderXPCSender.builtInInferenceProviderExtensionIdentityCache.getter();
    v2[6] = v8;
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v2[7] = v9;
    uint64_t v10 = sub_100049A78();
    uint64_t v11 = sub_100003B20(&qword_10010B468);
    void *v9 = v2;
    v9[1] = sub_10004493C;
    return Task.value.getter(v2[2], v8, v10, v11, &protocol self-conformance witness table for Error);
  }

uint64_t sub_10004493C()
{
  return sub_10000BCD0();
}

uint64_t sub_10004497C()
{
  uint64_t v2 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v2);
}

uint64_t sub_1000449B8()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000449F4()
{
  uint64_t v3 = *(void *)(v1 + 152);
  sub_100021D80();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  uint64_t v4 = *(void **)(v3 + 16);
  if (v4) {
    [v4 invalidate];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  sub_10000BF84();
  uint64_t v5 = *(void *)(v1 + 112);
  if (v5)
  {
    uint64_t v6 = sub_100021FC8();
    sub_10002FF3C(v0, v7, v8, v6);
    uint64_t v9 = (void *)sub_100007460((uint64_t)&unk_100103D20, 40LL);
    v9[2] = 0LL;
    v9[3] = 0LL;
    v9[4] = v5;
    sub_100021D80();
    uint64_t v10 = sub_100003854(v0, (uint64_t)&unk_10010D028, (uint64_t)v9);
    swift_release(v10);
    uint64_t v11 = *(void *)(v1 + 112);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  swift_release(v11);

  swift_release(*(void *)(v1 + 128));
  swift_release(*(void *)(v1 + 152));
  uint64_t v12 = sub_1000306E4();
  sub_1000220F4(v12);
  sub_10002F90C( v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification,  type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
  swift_bridgeObjectRelease(*(void *)(v1
                                      + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest));
  uint64_t v13 = sub_100022694();
  sub_1000220F4(v13);
  swift_release(*(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState));
  swift_bridgeObjectRelease(*(void *)(v1
                                      + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers));
  swift_defaultActor_destroy(v1);
  return v1;
}

uint64_t sub_100044B68()
{
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000494F0;
  return v3();
}

uint64_t sub_100044BC4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection(uint64_t a1)
{
  return sub_100047EF0( a1,  (uint64_t *)&unk_10010CA90,  (uint64_t)&nominal type descriptor for InferenceProviderExtensionConnection);
}

uint64_t sub_100044BF0(uint64_t a1)
{
  v6[1] = &unk_1000D96B0;
  uint64_t v6[2] = &unk_1000D96B0;
  uint64_t v6[3] = &unk_1000D96B0;
  v6[4] = &unk_1000D96B0;
  v6[5] = (char *)&value witness table for Builtin.Int32 + 64;
  v6[6] = &unk_1000D96C8;
  v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for InferenceProviderDescriptor(319LL);
  if (v3 <= 0x3F)
  {
    v6[8] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(319LL);
    if (v4 <= 0x3F)
    {
      v6[9] = *(void *)(result - 8) + 64LL;
      v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = type metadata accessor for RequestPriority(319LL);
      if (v5 <= 0x3F)
      {
        v6[12] = *(void *)(result - 8) + 64LL;
        v6[13] = (char *)&value witness table for Builtin.NativeObject + 64;
        v6[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
        return swift_updateClassMetadata2(a1, 256LL, 15LL, v6, a1 + 80);
      }
    }
  }

  return result;
}

uint64_t sub_100044CFC()
{
  *(void *)(v1 + 4sub_100016BD0(0, v0, 0) = v0;
  return sub_10000C088((uint64_t)sub_100044D10, v0);
}

#error "100044E00: call analysis failed (funcsize=105)"
uint64_t sub_100044ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sub_10000C130();
  sub_100022B10(v3);
  *(void *)(v0 + 7sub_10003318C(v0 + 2) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_10000BCD0();
  }
  else {
    return sub_100021E4C(*(uint64_t (**)(void))(v2 + 8));
  }
}

void sub_100044F24()
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v4 + v3);
  BOOL v6 = __OFSUB__(v5, 1LL);
  uint64_t v7 = v5 - 1;
  if (v6)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = *(os_log_s **)(v1 + 56);
    *(void *)(v4 + sub_1000223C4(*(void *)(v0 + 40), v3) = v7;
    sub_100030414();
    uint64_t v9 = sub_100030414();
    Logger.logObject.getter(v9);
    os_log_type_t v10 = sub_10003F20C();
    BOOL v11 = sub_1000228A4(v10);
    uint64_t v12 = *(void *)(v1 + 72);
    if (v11)
    {
      uint64_t v13 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v14 = (void *)sub_10000BCF4(8LL);
      *(_DWORD *)uint64_t v13 = 138412290;
      swift_errorRetain(v12);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v12);
      sub_1000496D0(v15);
      *uint64_t v14 = v2;
      sub_10003069C();
      sub_10003069C();
      sub_100022210( (void *)&_mh_execute_header,  v8,  v0,  "markUsingConnectionForLoading failed setCurrentState with %@",  v13);
      sub_100003B20(&qword_10010BA58);
      sub_100021F38((uint64_t)v14);
      sub_10000BCC4((uint64_t)v14);
      sub_10000BCC4((uint64_t)v13);
    }

    else
    {
      sub_10003069C();
      sub_10003069C();
    }

    swift_willThrow(v16, v17, v18, v19, v20, v21, v22, v23);
    sub_10002FDE0(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_10004503C()
{
  *(void *)(v1 + 4sub_100016BD0(0, v0, 0) = v0;
  return sub_10000C088((uint64_t)sub_100045050, v0);
}

#error "10004513C: call analysis failed (funcsize=104)"
uint64_t sub_10004520C()
{
  uint64_t v0;
  uint64_t v1;
  sub_1000496A4();
  if (v0) {
    return sub_10000BCD0();
  }
  else {
    return sub_100021E4C(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_100045250()
{
  uint64_t v1 = *(os_log_s **)(v0 + 48);
  sub_100030414();
  uint64_t v2 = sub_100030414();
  Logger.logObject.getter(v2);
  sub_10003F20C();
  if (sub_1000495A0(v1))
  {
    uint64_t v3 = (_DWORD *)sub_10000BCF4(12LL);
    uint64_t v4 = (void *)sub_10000BCF4(8LL);
    *uint64_t v3 = 138412290;
    sub_100030414();
    uint64_t v5 = sub_100049B9C();
    *(void *)(v0 + ++*(void *)(v0 + 16) = v5;
    sub_100049A48(v0 + 16);
    *uint64_t v4 = v5;
    sub_1000301C0();
    sub_1000301C0();
    sub_100049524( (void *)&_mh_execute_header,  v1,  v6,  "InferenceProviderExtensionConnection removeActiveRequest failed with %@");
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v4);
    sub_10000BCC4((uint64_t)v4);
    sub_10000BCC4((uint64_t)v3);

    sub_1000301C0();
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
    sub_1000301C0();
  }

  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004536C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for InferenceProviderPrewarmInformation(0LL);
  void v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_100021CC4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000453B4()
{
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v1 = (os_log_s *)v0[11];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = sub_10000BF6C();
  v0[12] = sub_100003BA0(v4, (uint64_t)qword_10010CA50);
  sub_100049864();
  sub_10000BD20(v3);
  sub_10003D390();
  os_log_type_t v5 = sub_10003CF80();
  BOOL v6 = sub_10000C0F8(v5);
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[8];
  if (v6)
  {
    uint64_t v29 = v0[8];
    uint64_t v9 = sub_10000BCF4(22LL);
    uint64_t v30 = sub_10000BCF4(64LL);
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = InferenceProviderPrewarmInformation.modelBundleIdentifier.getter();
    sub_100049630(v10, v11, v12, v13, v14, v15);
    v0[5] = v16;
    sub_100049954((uint64_t)(v0 + 5), (uint64_t)(v0 + 6));
    sub_1000303D0();
    sub_100049750(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    *(_WORD *)(v9 + 1sub_10003318C(v0 + 2) = 2080;
    sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v18 = sub_10000C29C(v17);
    sub_1000495A8(v18, v19, v20, v21, v22, v23);
    v0[6] = v24;
    uint64_t v25 = sub_10003D238();
    sub_100049954(v25, v26);
    sub_10000BCDC(v29);
    sub_10000BD28();
    sub_1000495E0( (void *)&_mh_execute_header,  v1,  (os_log_type_t)v2,  "InferenceProvider prewarmBundle %s executing on %s");
    sub_1000307B4(v30);
    sub_10000BCC4(v30);
    sub_10000BCC4(v9);
  }

  else
  {
    sub_100049750(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));

    sub_10000BCDC(v8);
  }

  uint64_t v27 = (void *)swift_task_alloc(dword_10010CAF4);
  v0[13] = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_1000455A8;
  sub_100022954();
  return sub_100044CFC();
}

uint64_t sub_1000455A8()
{
  uint64_t v3 = *v2;
  sub_10000BE20(*(void *)(v0 + 104), v4);
  if (!v1) {
    return sub_10000BCD0();
  }
  swift_task_dealloc(*(void *)(v0 + 88));
  return sub_100021E4C(*(uint64_t (**)(void))(v3 + 8));
}

#error "1000456EC: call analysis failed (funcsize=90)"
uint64_t sub_100045780()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  sub_10000C130();
  sub_100022B10(v2);
  *(void *)(v0 + 12sub_100006F7C(v0 + 8) = v1;
  swift_task_dealloc(v3);
  return sub_10000BCD0();
}

uint64_t sub_1000457D0()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100007418(v1);
}

uint64_t sub_100045820( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = sub_100049A68();
  *(void *)(v10 + 11sub_10003318C(v0 + 2) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v10 + 12sub_100016BD0(0, v0, 0) = sub_10004964C();
  sub_100049B3C();
  uint64_t v14 = sub_100003B20(&qword_10010B468);
  if (sub_1000497F4(v14))
  {
    uint64_t v15 = *(os_log_s **)(v9 + 96);
    swift_errorRelease(*(void *)(v9 + 128));
    uint64_t v16 = sub_10004964C();
    *(void *)(v9 + 15sub_10003318C(v0 + 2) = v16;
    sub_1000496EC(v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    uint64_t v17 = sub_10004964C();
    uint64_t v18 = sub_1000498D0(v17);
    Logger.logObject.getter(v18);
    os_log_type_t v19 = sub_10003F20C();
    if (sub_100022260(v19))
    {
      uint64_t v31 = v10 + 8;
      uint64_t v20 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v30 = (void *)sub_10000BCF4(8LL);
      unint64_t v21 = sub_100049878(5.7779e-34);
      uint64_t v22 = sub_1000302B0(v11, v21);
      sub_10004988C(v22, v23);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(12LL);
      *(void *)(v9 + 3sub_10003318C(v0 + 2) = v24;
      sub_1000495FC(v31, v9 + 40, a9);
      *uint64_t v30 = v24;
      sub_100049620();
      sub_10000C1B8();
      sub_100022210( (void *)&_mh_execute_header,  v15,  (os_log_type_t)v16,  "transitionAsset failed with XPC Error %@, checking exit status",  v20);
      sub_100003B20(&qword_10010BA58);
      sub_100021F38((uint64_t)v30);
      sub_10000BCC4((uint64_t)v30);
      sub_10000BCC4((uint64_t)v20);
    }

    else
    {
      sub_100049620();

      sub_10000C1B8();
    }

    *(void *)(v9 + 16sub_100016BD0(0, v0, 0) = v13;
    sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    *(void *)(v9 + 16sub_100006F7C(v0 + 8) = sub_1000494F4(v27);
    int v28 = (void *)swift_task_alloc(dword_10010CABC);
    *(void *)(v9 + 176) = v28;
    *int v28 = v9;
    v28[1] = sub_100045A30;
    uint64_t v29 = sub_10004977C();
    return sub_100049508(v29);
  }

  else
  {
    swift_release(*(void *)(v9 + 112));
    sub_10000C1B8();
    uint64_t v25 = sub_10004985C();
    sub_100049A40( v25,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  (uint64_t)&unk_100103C30,  (uint64_t)&unk_10010CF88);
    swift_task_dealloc(*(void *)(v9 + 88));
    return sub_100021CD4(*(uint64_t (**)(void))(v9 + 8));
  }

uint64_t sub_100045A30()
{
  return sub_10000BD98();
}

uint64_t sub_100045A68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 64);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000304F8();
  sub_1000498E4();
  sub_10000C140();
  sub_10000BFE4();
  sub_10004985C();
  sub_10004686C( v9,  (uint64_t (*)(void))&static os_log_type_t.info.getter,  (uint64_t)&unk_100103C30,  (uint64_t)&unk_10010CF88);
  swift_task_dealloc(*(void *)(v8 + 88));
  return sub_100049570(*(uint64_t (**)(void))(v8 + 8));
}

uint64_t sub_100045AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderAssetDescriptor(0LL);
  v5[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[15] = v7;
  v5[16] = sub_100021CC4(v7);
  uint64_t State = type metadata accessor for LoadState(0LL);
  v5[17] = State;
  uint64_t v9 = *(void *)(State - 8);
  v5[18] = v9;
  v5[19] = sub_10002FDFC(v9);
  v5[20] = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_100045B60()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  sub_100046740();
  *(void *)(v0 + 16sub_100006F7C(v0 + 8) = v4;
  *(_DWORD *)(v0 + 304) = enum case for LoadState.loaded(_:);
  os_log_type_t v5 = *(void (**)(uint64_t))(v3 + 104);
  *(void *)(v0 + 176) = v5;
  v5(v1);
  sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
  uint64_t v6 = sub_1000307DC();
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v7, v2, v8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 184) = v10;
  uint64_t v11 = sub_10003D238();
  ((void (*)(uint64_t))v10)(v11);
  uint64_t v119 = v0 + 64;
  if ((v9 & 1) == 0)
  {
    uint64_t v12 = *(void *)(v0 + 104);
    if (!*(void *)(v12 + 112))
    {
      if (qword_10010B0A8 != -1)
      {
        swift_once(&qword_10010B0A8, sub_10003F260);
        uint64_t v12 = *(void *)(v0 + 104);
      }

      uint64_t v83 = sub_10000BF6C();
      uint64_t v84 = (os_log_s *)sub_100003BA0(v83, (uint64_t)qword_10010CA50);
      sub_10000BD20(v12);
      sub_10000C158();
      os_log_type_t v85 = sub_10003CF80();
      BOOL v86 = sub_10000C0F8(v85);
      uint64_t v87 = *(void *)(v0 + 104);
      if (v86)
      {
        uint64_t v88 = (_DWORD *)sub_10000BCF4(12LL);
        uint64_t v89 = sub_10000BCF4(32LL);
        *uint64_t v88 = 136315138;
        uint64_t v125 = v89;
        sub_1000306E4();
        sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        uint64_t v91 = sub_100022BE0(v90);
        sub_1000496C4(v91, v92, v93, v94, v95, v96, v97, v98, v102, v107);
        *(void *)(v0 + 64) = v99;
        sub_10003CE18(v119, v0 + 72);
        sub_10000BCDC(v87);
        sub_10000BD28();
        sub_100049524( (void *)&_mh_execute_header,  v84,  v100,  "Implicitly succeeding a loadOut for an exited InferenceProvider %s");
        sub_100021F38(v89);
        sub_10000BCC4(v89);
        sub_10000BCC4((uint64_t)v88);
      }

      else
      {

        sub_10000BCDC(v87);
      }

      sub_100049714();
      sub_100021E70();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002294C();
      sub_1000227B8();
      sub_100049724();
      __asm { BR              X0 }
    }
  }

  os_log_type_t v124 = v10;
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 152);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v121 = *(void *)(v0 + 104);
  uint64_t v19 = *(void *)(v0 + 72);
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v20 = sub_10000BF6C();
  *(void *)(v0 + 19sub_10003318C(v0 + 2) = sub_100003BA0(v20, (uint64_t)qword_10010CA50);
  sub_1000228F0(v16, v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v18, v15);
  uint64_t v21 = sub_10000BD20(v121);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  int v23 = static os_log_type_t.default.getter();
  BOOL v24 = sub_10003CEBC(v22);
  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v27 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 104);
  if (v24)
  {
    uint64_t v112 = *(void *)(v0 + 104);
    uint64_t v103 = *(void *)(v0 + 152);
    uint64_t v29 = sub_10000BCF4(32LL);
    uint64_t v122 = sub_10000BCF4(96LL);
    uint64_t v125 = v122;
    *(_DWORD *)uint64_t v29 = 136315650;
    os_log_t loga = v22;
    sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v27, v30);
    HIDWORD(v1sub_100006F7C(v0 + 14) = v23;
    sub_100015EF8(v31, v32, &v125);
    *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v29 + 4);
    sub_100022B4C();
    sub_100049A04();
    *(_WORD *)(v29 + 1sub_10003318C(v0 + 2) = 2080;
    sub_100048A38( &qword_10010CF68,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v34 = v103;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v26, v35);
    sub_1000496C4(v36, v37, v38, v39, v40, v41, v42, v43, v103, v0 + 56);
    *(void *)(v0 + 4sub_100006F7C(v0 + 8) = v44;
    uint64_t v45 = (void *)v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v108, v29 + 14);
    sub_10000BD28();
    sub_100049B44(v34, v46, v47, v48, v49, v50, v51, v52, v104, v108, v112, v114, (uint64_t)loga, v119, v122, v124);
    *(_WORD *)(v29 + 2sub_10003318C(v0 + 2) = 2080;
    uint64_t v53 = v113 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_descriptor;
    sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v54 = sub_100049A88();
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v54, v55);
    sub_1000496C4(v56, v57, v58, v59, v60, v61, v62, v63, v105, v109);
    *uint64_t v45 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v120, v29 + 24);
    sub_10000BCDC(v113);
    sub_10000BD28();
    uint64_t v65 = logb;
    _os_log_impl( (void *)&_mh_execute_header,  logb,  BYTE4(_18a),  "InferenceProvider transition asset %s to %s executing on %s",  (uint8_t *)v29,  0x20u);
    sub_100049920(v66, v67, v68, v69, v70, v71, v72, v73, v106, v110, v113, _18a, (uint64_t)logb, v120, v123);
    sub_10000BCC4(v53);
    sub_10000BCC4(v29);
  }

  else
  {
    sub_100049A04();
    sub_100049B44(v25, v74, v75, v76, v77, v78, v79, v80, v102, v107, v111, v114, (uint64_t)log, v119, v121, v124);

    sub_10000BCDC(v28);
  }

  uint64_t v81 = (void *)swift_task_alloc(dword_10010CAF4);
  *(void *)(v0 + 20sub_100016BD0(0, v0, 0) = v81;
  void *v81 = v0;
  v81[1] = sub_100046040;
  sub_100049724();
  return sub_100044CFC();
}

uint64_t sub_100046040()
{
  return sub_10000BCD0();
}

#error "10004624C: call analysis failed (funcsize=145)"
uint64_t sub_1000462EC()
{
  sub_100049684();
  return sub_10000BCD0();
}

uint64_t sub_10004632C()
{
  uint64_t v0 = sub_100049AB8();
  sub_100049A40( v0,  (uint64_t (*)(void))&static os_log_type_t.default.getter,  (uint64_t)&unk_100103C08,  (uint64_t)&unk_10010CF78);
  sub_100049714();
  sub_100021E70();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v1);
}

uint64_t sub_10004638C()
{
  return sub_10000BD98();
}

uint64_t sub_1000463C4()
{
  uint64_t v8 = swift_willThrow(v0, v1, v2, v3, v4, v5, v6, v7);
  sub_100049A40( v8,  (uint64_t (*)(void))&static os_log_type_t.default.getter,  (uint64_t)&unk_100103C08,  (uint64_t)&unk_10010CF78);
  sub_1000495EC();
  sub_100021E70();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  char v9 = (uint64_t (*)(void))sub_1000497DC();
  return sub_1000221B0(v9);
}

uint64_t sub_100046428()
{
  uint64_t v0 = (uint64_t (*)(void))sub_1000497DC();
  return sub_1000221B0(v0);
}

uint64_t sub_100046464( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = sub_100049A68();
  *(void *)(v10 + 23sub_10003318C(v0 + 2) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v10 + 24sub_100016BD0(0, v0, 0) = sub_10004964C();
  sub_100049B3C();
  uint64_t v14 = sub_100003B20(&qword_10010B468);
  if (sub_1000497F4(v14))
  {
    uint64_t v15 = (os_log_s *)v9[24];
    swift_errorRelease(v9[29]);
    uint64_t v16 = sub_10004964C();
    v9[34] = v16;
    sub_1000496EC(v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    uint64_t v17 = sub_10004964C();
    uint64_t v18 = sub_1000498D0(v17);
    Logger.logObject.getter(v18);
    os_log_type_t v19 = sub_10003F20C();
    if (sub_100022260(v19))
    {
      uint64_t v32 = v10 + 8;
      uint64_t v20 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v31 = (void *)sub_10000BCF4(8LL);
      unint64_t v21 = sub_100049878(5.7779e-34);
      uint64_t v22 = sub_1000302B0(v11, v21);
      sub_10004988C(v22, v23);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(12LL);
      v9[4] = v24;
      sub_1000495FC(v32, (uint64_t)(v9 + 5), a9);
      void *v31 = v24;
      sub_100049620();
      sub_10000C1B8();
      sub_100022210( (void *)&_mh_execute_header,  v15,  (os_log_type_t)v16,  "transitionAsset failed with XPC Error %@, checking exit status",  v20);
      sub_100003B20(&qword_10010BA58);
      sub_100021F38((uint64_t)v31);
      sub_10000BCC4((uint64_t)v31);
      sub_10000BCC4((uint64_t)v20);
    }

    else
    {
      sub_100049620();

      sub_10000C1B8();
    }

    v9[35] = v13;
    sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    v9[36] = sub_1000494F4(v28);
    uint64_t v29 = (void *)swift_task_alloc(dword_10010CABC);
    v9[37] = v29;
    *uint64_t v29 = v9;
    v29[1] = sub_100046678;
    uint64_t v30 = sub_10004977C();
    return sub_100049508(v30);
  }

  else
  {
    sub_100049AB8();
    sub_10000C1B8();
    uint64_t v25 = sub_10004985C();
    sub_100049A40( v25,  (uint64_t (*)(void))&static os_log_type_t.default.getter,  (uint64_t)&unk_100103C08,  (uint64_t)&unk_10010CF78);
    sub_1000495EC();
    sub_100021E70();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    uint64_t v26 = (uint64_t (*)(void))sub_1000497DC();
    return sub_100021CD4(v26);
  }

uint64_t sub_100046678()
{
  return sub_10000BD98();
}

uint64_t sub_1000466B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 104);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000304F8();
  sub_1000498E4();
  sub_10000C140();
  sub_10000BFE4();
  sub_10004985C();
  sub_10004686C( v9,  (uint64_t (*)(void))&static os_log_type_t.default.getter,  (uint64_t)&unk_100103C08,  (uint64_t)&unk_10010CF78);
  sub_1000495EC();
  sub_100021E70();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  uint64_t v10 = (uint64_t (*)(void))sub_1000497DC();
  return sub_100049570(v10);
}

void sub_100046740()
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v2 = *(void *)(State - 8);
  __chkstk_darwin(State);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))( (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v0,  State);
  uint64_t v4 = sub_100049B78();
  int v6 = v5(v4);
  if (v6 == enum case for LoadState.unloaded(_:))
  {
    sub_100049654();
    uint64_t v7 = "Unloading InferenceProvider asset";
    uint64_t v8 = 33LL;
  }

  else
  {
    int v9 = v6;
    if (v6 == enum case for LoadState.dynamicMode(_:))
    {
      sub_100049654();
      uint64_t v7 = "Making InferenceProvider asset dynamic";
      uint64_t v8 = 38LL;
    }

    else
    {
      int v10 = enum case for LoadState.loaded(_:);
      sub_100049654();
      if (v9 != v10)
      {
        sub_10004965C((uint64_t)"Unknown InferenceProvider asset transition", 42LL);
        uint64_t v11 = sub_100049B78();
        v12(v11);
        goto LABEL_8;
      }

      uint64_t v7 = "Loading InferenceProvider asset";
      uint64_t v8 = 31LL;
    }
  }

  sub_10004965C((uint64_t)v7, v8);
LABEL_8:
  sub_1000496F8();
}

double sub_10004686C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  int v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v11 = sub_10000BF6C();
  uint64_t v12 = (os_log_s *)sub_10003CE68(v11, (uint64_t)qword_10010CA50);
  os_log_type_t v13 = a2();
  if (sub_100022260(v13))
  {
    uint64_t v14 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v14 = 0;
    sub_1000495CC( (void *)&_mh_execute_header,  v12,  (os_log_type_t)a2,  "InferenceProvider transition asset finished",  v14);
    sub_10000BCC4((uint64_t)v14);
  }

  uint64_t v15 = sub_100021FC8();
  sub_10002FF3C((uint64_t)v10, v16, v17, v15);
  sub_100048A38( &qword_10010B9E0,  type metadata accessor for InferenceProviderExtensionConnection,  (uint64_t)&unk_1000D97CC);
  uint64_t v19 = v18;
  uint64_t v20 = (void *)sub_100007460(a3, 40LL);
  v20[2] = a1;
  void v20[3] = v19;
  v20[4] = a1;
  sub_10000BD20(a1);
  uint64_t v21 = sub_100003854((uint64_t)v10, a4, (uint64_t)v20);
  *(void *)&double result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_1000469C8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 8sub_100016BD0(0, v0, 0) = a4;
  *(void *)(v5 + 8sub_100006F7C(v0 + 8) = v4;
  *(_BYTE *)(v5 + 28sub_100016BD0(0, v0, 0) = a2;
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 7sub_10003318C(v0 + 2) = a3;
  uint64_t v6 = sub_10000BE28();
  *(void *)(v5 + 96) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 104) = v7;
  *(void *)(v5 + 11sub_10003318C(v0 + 2) = sub_100021CC4(v7);
  uint64_t v8 = type metadata accessor for InferenceProviderRequestConfiguration(0LL);
  *(void *)(v5 + 12sub_100016BD0(0, v0, 0) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 12sub_100006F7C(v0 + 8) = v9;
  *(void *)(v5 + 136) = sub_10002FDFC(v9);
  *(void *)(v5 + 144) = sub_10002287C();
  *(void *)(v5 + 15sub_10003318C(v0 + 2) = sub_10002287C();
  sub_100021C90();
  return sub_10000BCD0();
}

uint64_t sub_100046A40()
{
  uint64_t v1 = v0[11];
  sub_100049654();
  v0[20] = sub_10004965C((uint64_t)"Inference request", 17LL);
  uint64_t v2 = *(void *)(v1 + 112);
  v0[21] = v2;
  if (v2)
  {
    uint64_t v3 = qword_10010B0A8;
    swift_retain();
    if (v3 != -1) {
      swift_once(&qword_10010B0A8, sub_10003F260);
    }
    uint64_t v4 = v0[19];
    uint64_t v5 = (os_log_s *)v0[15];
    uint64_t v6 = v0[16];
    uint64_t v8 = v0[10];
    uint64_t v7 = v0[11];
    uint64_t v9 = sub_10000BF6C();
    uint64_t v10 = sub_100003BA0(v9, (uint64_t)qword_10010CA50);
    v0[22] = v10;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, os_log_s *))(v6 + 16);
    v0[23] = v11;
    v11(v4, v8, v5);
    sub_10000BD20(v7);
    sub_10003D390();
    os_log_type_t v12 = sub_10000C160();
    if (sub_10004975C(v12))
    {
      uint64_t v53 = v0[13];
      uint64_t v10 = v0[12];
      uint64_t v55 = v0[11];
      uint64_t v13 = sub_10000BCF4(22LL);
      uint64_t v60 = sub_10000BCF4(64LL);
      uint64_t v62 = v60;
      sub_1000499A4(4.8151e-34);
      os_log_type_t v58 = v4;
      InferenceProviderRequestConfiguration.requestUUID.getter();
      sub_100048A38( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v15 = sub_10004995C(v14);
      uint64_t v57 = v5;
      uint64_t v17 = v16;
      sub_100049994(v53);
      sub_100015EF8(v15, v17, &v62);
      v0[6] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7);
      sub_100022B4C();
      sub_100049934();
      *(_WORD *)(v13 + 1sub_10003318C(v0 + 2) = 2080;
      uint64_t v19 = sub_1000306E4();
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
      sub_1000496C4(v21, v22, v23, v24, v25, v26, v27, v28, v52, v53);
      v0[7] = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8);
      sub_10000BD28();
      sub_10000BCDC(v55);
      uint64_t v5 = v57;
      sub_1000495E0((void *)&_mh_execute_header, v57, v58, "InferenceProvider requestInference (%s) executing on %s");
      sub_1000307B4(v60);
      sub_10000BCC4(v60);
      sub_10000BCC4(v13);
    }

    else
    {
      uint64_t v45 = v0[11];
      sub_100049934();
      sub_10000BCDC(v45);
    }

    v0[24] = v10;
    v0[25] = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_100046F1C;
    sub_100049724();
    __asm { BR              X4 }
  }

  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v30 = v0[18];
  uint64_t v31 = v0[16];
  uint64_t v32 = sub_10000BF6C();
  sub_100003BA0(v32, (uint64_t)qword_10010CA50);
  sub_1000496EC(v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
  uint64_t v33 = (os_log_s *)sub_10003CFB4();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  BOOL v35 = sub_10003CEBC(v33);
  uint64_t v36 = v0[18];
  if (v35)
  {
    uint64_t v59 = v0[15];
    uint64_t v37 = v0[14];
    uint64_t v54 = v0[13];
    uint64_t v56 = v0[16];
    uint64_t v38 = v0[12];
    uint64_t v39 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v61 = sub_10000BCF4(32LL);
    uint64_t v62 = v61;
    *(_DWORD *)uint64_t v39 = 136315138;
    InferenceProviderRequestConfiguration.requestUUID.getter();
    sub_100048A38( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v38, v40);
    uint64_t v43 = v42;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v37, v38);
    sub_100015EF8(v41, v43, &v62);
    v0[2] = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    sub_100022024();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v36, v59);
    sub_100022210((void *)&_mh_execute_header, v33, v34, "requestInference (%s) called for exited extension", v39);
    sub_100021F38(v61);
    sub_10000BCC4(v61);
    sub_10000BCC4((uint64_t)v39);
  }

  else
  {
    (*(void (**)(void, void))(v0[16] + 8LL))(v0[18], v0[15]);
  }

  sub_1000305BC();
  sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
  v0[27] = sub_1000494F4(v48);
  uint64_t v49 = (void *)swift_task_alloc(dword_10010CABC);
  v0[28] = v49;
  *uint64_t v49 = v0;
  v49[1] = sub_100046FC8;
  sub_10004977C();
  sub_100049724();
  return sub_100040244(v50);
}

uint64_t sub_100046F1C()
{
  return sub_10000BCD0();
}

uint64_t sub_100046F5C()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v1);
}

uint64_t sub_100046FC8()
{
  return sub_10000BD98();
}

uint64_t sub_100047000( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t (*)(void))sub_1000497DC();
  return v8();
}

uint64_t sub_100047064()
{
  uint64_t v1 = v0[26];
  v0[3] = v1;
  uint64_t v2 = type metadata accessor for XPCRichError(0LL);
  v0[29] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = sub_10004964C();
  v0[30] = v4;
  swift_errorRetain(v1);
  uint64_t v5 = sub_100003B20(&qword_10010B468);
  if (swift_dynamicCast(v4, v0 + 3, v5, v2, 0LL))
  {
    uint64_t v67 = v0[22];
    uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t))v0[23];
    uint64_t v6 = v0[17];
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[10];
    swift_errorRelease(v0[26]);
    v0[31] = sub_10004964C();
    sub_100049A34();
    v9();
    v70(v6, v8, v7);
    sub_10004964C();
    uint64_t v71 = v3;
    uint64_t v10 = *(uint64_t (**)(void))(v3 + 16);
    uint64_t v11 = v10();
    os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    uint64_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = sub_100049854(v12);
    uint64_t v15 = v0[17];
    uint64_t v16 = v0[15];
    if (v14)
    {
      uint64_t v56 = (void (*)(uint64_t, uint64_t))v0[24];
      uint64_t v53 = v0[13];
      uint64_t v66 = (uint64_t)v10;
      uint64_t v17 = sub_10000BCF4(22LL);
      uint64_t v64 = (void *)sub_10000BCF4(8LL);
      uint64_t v68 = sub_10000BCF4(32LL);
      uint64_t v72 = v68;
      *(_DWORD *)uint64_t v17 = 136315394;
      HIDWORD(v6sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v13;
      InferenceProviderRequestConfiguration.requestUUID.getter();
      sub_100048A38( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v19 = sub_10004995C(v18);
      uint64_t v59 = (uint64_t)v12;
      uint64_t v21 = v20;
      sub_100049994(v53);
      sub_100015EF8(v19, v21, &v72);
      v0[4] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v17 + 4);
      swift_bridgeObjectRelease(v21);
      v56(v15, v16);
      *(_WORD *)(v17 + 1sub_10003318C(v0 + 2) = 2112;
      uint64_t v13 = v17 + 14;
      sub_10003C6CC();
      uint64_t v23 = sub_100049A88();
      uint64_t v25 = sub_1000302B0(v23, v24);
      sub_100049A34();
      v10();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v25);
      v0[5] = v26;
      uint64_t v27 = sub_1000301B8((uint64_t)(v0 + 5), (uint64_t)(v0 + 6));
      uint64_t v28 = (uint64_t)v64;
      *uint64_t v64 = v26;
      sub_1000498BC( v27,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v50,  v17 + 4,  v53,  (uint64_t)(v0 + 5),  (uint64_t)v56,  (uint64_t)(v0 + 4),  v59,  v61,  (uint64_t)v64,  v66,  v68,  v71);
      os_log_type_t v12 = v60;
      sub_1000495E0( (void *)&_mh_execute_header,  v60,  v62,  "requestInference (%s) failed with XPC Error %@, checking exit status");
      sub_100003B20(&qword_10010BA58);
      sub_100021F38(v28);
      sub_10000BCC4(v28);
      sub_100021F38(v69);
      sub_10000BCC4(v69);
      sub_10000BCC4(v17);
    }

    else
    {
      uint64_t v39 = ((uint64_t (*)(void, void))v0[24])(v0[17], v0[15]);
      sub_1000498BC(v39, v40, v41, v42, v43, v44, v45, v46, v50, v51, v52, v54, v55, v57, v58, v61, v63, v65, v67, v71);
    }

    v0[32] = v13;
    sub_10000BFE4();
    sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    v0[33] = sub_1000494F4(v47);
    uint64_t v48 = (void *)swift_task_alloc(dword_10010CABC);
    v0[34] = v48;
    void *v48 = v0;
    v48[1] = sub_10004741C;
    uint64_t v49 = sub_10004977C();
    return sub_100040244(v49);
  }

  else
  {
    uint64_t v36 = v0[10];
    sub_10000BFE4();
    sub_10004985C();
    sub_1000474D0(v36);
    sub_100021E70();
    sub_10004976C();
    sub_100021E70();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    uint64_t v37 = (uint64_t (*)(void))sub_1000497DC();
    return v37();
  }

uint64_t sub_10004741C()
{
  return sub_10000BD98();
}

uint64_t sub_100047454( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 80);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000498E4();
  sub_10000C140();
  sub_10000BFE4();
  sub_10004985C();
  sub_1000474D0(v9);
  sub_1000304F8();
  sub_10004976C();
  sub_100021E70();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  uint64_t v10 = (uint64_t (*)(void))sub_1000497DC();
  return sub_100049570(v10);
}

void sub_1000474D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for InferenceProviderRequestConfiguration(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v10, (uint64_t)qword_10010CA50);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = v3;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v26;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v25 = v15 + 4;
    InferenceProviderRequestConfiguration.requestUUID.getter();
    sub_100048A38( &qword_10010B420,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v2, v16);
    uint64_t v18 = v2;
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v18);
    sub_100015EF8(v17, v20, &v28);
    uint64_t v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v25);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "InferenceProvider requestInference (%s) finished", v15, 0xCu);
    uint64_t v22 = v26;
    swift_arrayDestroy(v26, 1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_100047754(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_100021C90();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_100047774()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112LL);
  *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = v1;
  if (!v1) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_100049588();
  uint64_t v2 = (void *)sub_10002287C();
  *(void *)(v0 + 4sub_100006F7C(v0 + 8) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000477F0;
  uint64_t v3 = sub_1000306EC(*(void *)(v0 + 16));
  return v5(v3);
}

uint64_t sub_1000477F0()
{
  uint64_t v3 = *v2;
  sub_10000BE20(*(void *)(v0 + 48), v4);
  if (v1) {
    swift_errorRelease(v1);
  }
  swift_release(*(void *)(v0 + 40));
  return sub_100021E4C(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100047838(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010B408);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = sub_100021CC4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100047884()
{
  *(void *)(v0 + 7sub_10003318C(v0 + 2) = sub_10004965C((uint64_t)"Awaiting end of stream", 22LL);
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = sub_10000BF6C();
  sub_100003BA0(v2, (uint64_t)qword_10010CA50);
  sub_100049864();
  sub_10000BD20(v1);
  uint64_t v3 = (os_log_s *)sub_10003D390();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 40);
  if (v5)
  {
    uint64_t v29 = *(void *)(v0 + 40);
    os_log_type_t v30 = v4;
    uint64_t v8 = sub_10000BCF4(22LL);
    uint64_t v32 = sub_10000BCF4(64LL);
    *(_DWORD *)uint64_t v8 = 136315394;
    unint64_t v9 = sub_10000B4E4();
    uint64_t v10 = sub_100022BE0(v9);
    sub_100049630(v10, v11, v12, v13, v14, v15);
    *(void *)(v0 + ++*(void *)(v0 + 16) = v16;
    sub_100049954(v0 + 16, v0 + 24);
    sub_1000303D0();
    sub_100049750(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    *(_WORD *)(v8 + 1sub_10003318C(v0 + 2) = 2080;
    sub_1000306E4();
    sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    uint64_t v18 = sub_10000C29C(v17);
    sub_1000495A8(v18, v19, v20, v21, v22, v23);
    *(void *)(v0 + 24) = v24;
    sub_100049954(v0 + 24, v0 + 32);
    sub_10000BD28();
    sub_10000BCDC(v29);
    sub_1000495E0((void *)&_mh_execute_header, v3, v30, "InferenceProvider awaiting endOfStream (%s) on %s");
    sub_1000307B4(v32);
    sub_10000BCC4(v32);
    sub_10000BCC4(v8);
  }

  else
  {
    sub_100049750(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_10000BCDC(v7);
  }

  uint64_t v25 = *(void *)(*(void *)(v0 + 40) + 112LL);
  *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v25;
  if (v25)
  {
    sub_10000C030();
    uint64_t v26 = (void *)sub_10002287C();
    *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_100047AE4;
    uint64_t v27 = sub_1000306EC(*(void *)(v0 + 32));
    return sub_100049604(v27, v31);
  }

  else
  {
    sub_100049AD8();
    _OSActivity.close()();
    sub_100021E70();
    sub_10000BFE4();
    return sub_10002FF80(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_100047AE4()
{
  return sub_10000BCD0();
}

uint64_t sub_100047B20()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(uint64_t a1)
{
  return sub_100047EF0( a1,  qword_10010CED0,  (uint64_t)&nominal type descriptor for InferenceProviderExtensionConnection.ProviderIdentification);
}

uint64_t *sub_100047B68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  os_log_type_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *os_log_type_t v4 = *a2;
    os_log_type_t v4 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    swift_unknownObjectWeakCopyInit(a1, a2);
    v4[1] = a2[1];
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)v4 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  }

  return v4;
}

uint64_t sub_100047C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_100047C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakCopyInit(a1, a2);
  *(void *)(v6 + sub_100006F7C(v0 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100047CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakCopyAssign();
  *(void *)(v6 + sub_100006F7C(v0 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100047D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakTakeInit();
  *(void *)(v6 + sub_100006F7C(v0 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100047D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakTakeAssign();
  *(void *)(v6 + sub_100006F7C(v0 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_100047DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047DF4);
}

uint64_t sub_100047DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    if ((*(void *)(a1 + 8) & 0xF000000000000007LL) != 0) {
      return (*(_DWORD *)a1 & 0x7FFFFFFFu) + 1;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v7 = sub_10000BE28();
    return sub_1000060B4(a1 + *(int *)(a3 + 20), a2, v7);
  }

uint64_t sub_100047E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047E70);
}

void *sub_100047E70(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *double result = (a2 - 1);
    result[1] = 1LL;
  }

  else
  {
    uint64_t v7 = sub_10000BE28();
    return (void *)sub_100005FB0((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper( uint64_t a1)
{
  return sub_100047EF0( a1,  qword_10010CE28,  (uint64_t)&nominal type descriptor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
}

uint64_t sub_100047EF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_100047F20(uint64_t a1)
{
  v4[0] = &unk_1000D9700;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100047F94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = type metadata accessor for AppExtensionIdentity(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = type metadata accessor for BuiltInInferenceProvider(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_100048064(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v3 = type metadata accessor for BuiltInInferenceProvider(0LL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
}

uint64_t sub_1000480B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for AppExtensionIdentity(0LL);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for BuiltInInferenceProvider(0LL);
    uint64_t v7 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2);
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_10004813C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F90C(a1, type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for AppExtensionIdentity(0LL);
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v6 = type metadata accessor for BuiltInInferenceProvider(0LL);
      uint64_t v7 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }

  return a1;
}

uint64_t sub_1000481E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for AppExtensionIdentity(0LL);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for BuiltInInferenceProvider(0LL);
    uint64_t v7 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2);
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_10004826C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F90C(a1, type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for AppExtensionIdentity(0LL);
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v6 = type metadata accessor for BuiltInInferenceProvider(0LL);
      uint64_t v7 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }

  return a1;
}

uint64_t sub_10004831C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10004832C(uint64_t a1)
{
  uint64_t result = type metadata accessor for BuiltInInferenceProvider(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AppExtensionIdentity(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

void sub_1000483AC(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010B408);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10010B0A8 != -1) {
    swift_once(&qword_10010B0A8, sub_10003F260);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v6, (uint64_t)qword_10010CA50);
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    unint64_t v12 = sub_10000B4E4();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v2, v12);
    uint64_t v15 = v14;
    sub_100015EF8(v13, v14, &v18);
    uint64_t v17 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "InferenceProvider await endOfStream (%s) finished", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_1000485A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_descriptor;
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000485F0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10010CB04);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000BCBC;
  return sub_10004536C(a1);
}

uint64_t sub_100048640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v9 = (void *)swift_task_alloc(dword_10010CB0C);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000BCBC;
  return sub_100045AEC(a1, a2, a3, a4);
}

uint64_t sub_1000486B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v9 = (void *)swift_task_alloc(dword_10010CB14);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10000B5F8;
  return sub_1000469C8(a1, a2, a3, a4);
}

uint64_t sub_100048734(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)swift_task_alloc(dword_10010CADC);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *int v5 = v2;
  v5[1] = sub_10000BCBC;
  return sub_100043ADC(a1, a2);
}

uint64_t sub_100048794(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10010CAE4);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000494F0;
  return sub_1000440E4(a1);
}

uint64_t sub_1000487E4(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)swift_task_alloc(dword_10010CB1C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *int v5 = v2;
  v5[1] = sub_1000494F0;
  return sub_100047754(a1, a2);
}

uint64_t sub_100048844(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)swift_task_alloc(dword_10010CAA4);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *int v5 = v2;
  v5[1] = sub_1000494F0;
  return sub_10003F2F8(a1, a2);
}

uint64_t sub_1000488A4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10010CB24);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000494F0;
  return sub_100047838(a1);
}

uint64_t sub_1000488F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL) + 20);
  return static UUID.== infix(_:_:)(a1 + v4, a2 + v4);
}

uint64_t sub_100048928()
{
  return UUID.hash(into:)(v0);
}

void sub_100048954()
{
  uint64_t v0 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  sub_100049AAC(v0);
  Hasher._finalize()();
  sub_100049AA0();
}

void sub_100048998(uint64_t a1)
{
  uint64_t v1 = Hasher.init(_seed:)(v2, a1);
  sub_100049AAC((uint64_t)v1);
  Hasher._finalize()();
  sub_100049AA0();
}

void sub_1000489D0()
{
}

void sub_1000489FC(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

void sub_100048A38(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_1000075C0();
}

id sub_100048A74(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_100049164(0LL, &qword_10010CFC8, &OBJC_CLASS___RBSAttribute_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  id v10 = [v4 initWithExplanation:v8 target:a3 attributes:isa];

  return v10;
}

uint64_t sub_100048B18()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010CAFC);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000494F0;
  return sub_10004503C();
}

uint64_t sub_100048B60()
{
  uint64_t v1 = sub_10003D238();
  swift_arrayDestroy(v1, v2);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_100048BAC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RequestPriority(0LL) - 8) + 80LL);
  swift_arrayDestroy(v0 + ((v1 + 32) & ~v1), *(void *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_100048BF4()
{
  uint64_t v0 = swift_task_alloc(dword_10010CF74);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_1000074EC(v1);
  return sub_100048B18();
}

uint64_t sub_100048C44()
{
  uint64_t v0 = swift_task_alloc(dword_10010CF84);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_1000074EC(v1);
  return sub_100048B18();
}

uint64_t sub_100048C90(uint64_t a1)
{
  uint64_t v2 = sub_100003B20(&qword_10010CF90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100048CD0()
{
  uint64_t v2 = swift_task_alloc(dword_10010CF9C);
  uint64_t v3 = (void *)sub_100007524(v2);
  *uint64_t v3 = v1;
  v3[1] = sub_10000BCBC;
  uint64_t v4 = sub_10004977C();
  return sub_100042908(v4, v0);
}

uint64_t sub_100048D1C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  uint64_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    NSString v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100017524(0LL, v6, v8);
    sub_100048E84((uint64_t)v8, v6, v2);
    uint64_t v10 = v9;
    swift_release(v2);
    if (v1) {
      swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }

  else
  {
    uint64_t v19 = (void *)swift_slowAlloc(v7, -1LL);
    sub_100017524(0LL, v6, v19);
    sub_100048E84((uint64_t)v19, v6, v2);
    uint64_t v10 = v20;
    swift_release(v2);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  return v10;
}

void sub_100048E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[1] = a2;
  uint64_t v22 = a1;
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = 0LL;
  int64_t v8 = 0LL;
  uint64_t v9 = a3 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (v12)
  {
    unint64_t v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v15 = v14 | (v8 << 6);
LABEL_20:
    sub_100049330( *(void *)(a3 + 48) + *(void *)(v5 + 72) * v15,  (uint64_t)v7,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v7);
    if (Strong)
    {
      swift_unknownObjectRelease(Strong);
      sub_10002F90C( (uint64_t)v7,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
      *(void *)(v22 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      if (__OFADD__(v23++, 1LL))
      {
        __break(1u);
LABEL_25:
        swift_retain();
        sub_100020758();
        return;
      }
    }

    else
    {
      sub_10002F90C( (uint64_t)v7,  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    }
  }

  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v16 >= v13) {
    goto LABEL_25;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v16);
  ++v8;
  if (v17) {
    goto LABEL_19;
  }
  int64_t v8 = v16 + 1;
  if (v16 + 1 >= v13) {
    goto LABEL_25;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v8);
  if (v17) {
    goto LABEL_19;
  }
  int64_t v8 = v16 + 2;
  if (v16 + 2 >= v13) {
    goto LABEL_25;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v8);
  if (v17)
  {
LABEL_19:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_20;
  }

  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_25;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }

void *sub_100049090(void *a1)
{
  return a1;
}

uint64_t sub_1000490B8()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000490EC()
{
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v8 = swift_task_alloc(dword_10010CFD4);
  uint64_t v9 = (void *)sub_100007524(v8);
  void *v9 = v1;
  v9[1] = sub_1000494F0;
  return sub_100040B78(v3, v4, v5, v7, v6);
}

void sub_10004915C(uint64_t a1)
{
}

uint64_t sub_100049164(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10004919C()
{
  uint64_t v0 = sub_100003B20(&qword_10010CFE8);
  sub_100030234(*(void *)(v0 - 8));
  sub_100049A34();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000491F8()
{
  uint64_t v0 = sub_100049B78();
  return sub_100040F34(v0, v1);
}

uint64_t sub_100049244(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10003318C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100016BD0(0, v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100049254(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004925C()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_10010CFF4);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10000B5F8;
  return sub_1000409B4(v0);
}

uint64_t sub_1000492A8()
{
  uint64_t v0 = swift_task_alloc(dword_10010D004);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_1000074EC(v1);
  return sub_1000401FC();
}

uint64_t sub_1000492F4()
{
  return v0[1]();
}

void sub_100049330(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_100049B90(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1000075C0();
}

uint64_t sub_100049368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000493AC()
{
  uint64_t v1 = *(void *)(type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  __n128 v6 = swift_release(*(void *)(v0 + 16));
  swift_unknownObjectWeakDestroy(v0 + v3, v6);
  uint64_t v7 = sub_10000BE28();
  sub_1000220F4(v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10004942C()
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_100049AF8() - 8) + 80LL);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((v3 + 24) & ~v3);
  uint64_t v6 = swift_task_alloc(dword_10010D014);
  uint64_t v7 = (void *)sub_100007524(v6);
  *uint64_t v7 = v2;
  v7[1] = sub_1000494F0;
  return sub_10003F584(v0, v4, v5);
}

uint64_t sub_1000494A4()
{
  uint64_t v0 = swift_task_alloc(dword_10010D024);
  uint64_t v1 = (void *)sub_100007524(v0);
  sub_1000074EC(v1);
  return sub_100044B68();
}

uint64_t sub_1000494F4(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

uint64_t sub_100049508(uint64_t a1)
{
  return sub_100040244(a1);
}

void sub_100049524(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

void sub_100049534()
{
}

uint64_t sub_100049554()
{
  return sub_100042800();
}

uint64_t sub_100049570(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100049588()
{
  return swift_retain(v0);
}

BOOL sub_1000495A0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_1000495A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1000495B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + ++*(void *)(v0 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10 + 24, v11);
}

void sub_1000495CC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000495D4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000495E0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void sub_1000495EC()
{
}

uint64_t sub_1000495FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_100049604(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100049620()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_100049630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100049638(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_10004964C()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100049654()
{
  return type metadata accessor for _OSActivity(0LL);
}

uint64_t sub_10004965C(uint64_t a1, uint64_t a2)
{
  return _OSActivity.__allocating_init(_:)(a1, a2, 2LL);
}

uint64_t sub_100049664()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 200);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 20sub_100006F7C(v0 + 8) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100049684()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 224);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 23sub_10003318C(v0 + 2) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000496A4()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 56);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

void sub_1000496C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1000496D0(uint64_t a1)
{
  *(void *)(v1 + ++*(void *)(v0 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 24, v3);
}

uint64_t sub_1000496EC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

  ;
}

uint64_t sub_100049708@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_100049714()
{
}

  ;
}

void sub_100049740()
{
}

uint64_t sub_100049750@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

BOOL sub_10004975C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_10004976C()
{
}

uint64_t sub_10004977C()
{
  return v0;
}

uint64_t sub_100049788()
{
  *(_WORD *)(v0 + 1sub_10003318C(v0 + 2) = 2048;
  return swift_release(v1);
}

id sub_1000497A0(int a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void **)(v1 + 24);
  *(_DWORD *)(v2 + 144) = a1;
  *(void *)(v2 + 136) = v3;
  return v3;
}

uint64_t sub_1000497B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *uint64_t v10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, a10, a9);
}

uint64_t sub_1000497D0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000497DC()
{
  return *(void *)(v0 + 8);
}

_WORD *sub_1000497E8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1000497F4(uint64_t a1)
{
  return swift_dynamicCast(v2, v3, a1, v1, 0LL);
}

uint64_t sub_10004980C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 104LL))(v1, v2, a1);
}

uint64_t sub_100049824(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v2, v1, a1);
}

uint64_t sub_10004983C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v2, v1, a1);
}

BOOL sub_100049854(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10004985C()
{
  return swift_errorRelease(*(void *)(v0 + 24));
}

uint64_t sub_100049864()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v1, v2);
}

unint64_t sub_100049878(float a1)
{
  *uint64_t v1 = a1;
  return sub_10003C6CC();
}

uint64_t sub_10004988C(uint64_t a1, uint64_t a2)
{
  return v4(a2, v3, v2);
}

  ;
}

uint64_t sub_1000498BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a20 + 8))(v20, v21);
}

uint64_t sub_1000498D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v2, v1);
}

uint64_t sub_1000498E4()
{
  return v2(v0, v1);
}

uint64_t sub_1000498F0()
{
  return swift_retain_n(v0, 4LL);
}

uint64_t sub_1000498FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v4[17] = a2;
  v4[18] = v3;
  return *(void *)(a1 + 48) + *(void *)(v4[12] + 72LL) * v2;
}

void sub_100049918(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_100049920( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_arrayDestroy(a15, 3LL);
}

uint64_t sub_100049934()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100049944(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(a1, a2, v2);
}

uint64_t sub_100049954(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10004995C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10004996C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t sub_100049974(uint64_t a1)
{
  return sub_100005FB0(a1, 1LL, 1LL, v1);
}

uint64_t sub_100049984@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_100049994@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

void sub_1000499A4(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1000499B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

uint64_t sub_1000499BC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000499CC()
{
  return sub_1000060B4(v1, 1LL, v0);
}

  ;
}

uint64_t sub_1000499F4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  *(_BYTE *)(*(void *)(v0 + 88) + 148LL) = 0;
  return swift_task_dealloc(v1);
}

uint64_t sub_100049A04()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_100049A14()
{
  return v0;
}

uint64_t sub_100049A2C()
{
  return (*(uint64_t (**)(void))(v0 - 88))();
}

  ;
}

double sub_100049A40(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_10004686C(v4, a2, a3, a4);
}

uint64_t sub_100049A48(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 8, v1);
}

void sub_100049A58()
{
}

uint64_t sub_100049A68()
{
  *(void *)(v0 + 24) = v1;
  return type metadata accessor for XPCRichError(0LL);
}

uint64_t sub_100049A78()
{
  return type metadata accessor for AppExtensionIdentity(0LL);
}

uint64_t sub_100049A80(uint64_t a1, uint64_t a2)
{
  return sub_100003854(a1, a2, v2);
}

uint64_t sub_100049A88()
{
  return v0;
}

void sub_100049A94()
{
  uint64_t v1 = *(void **)(v0 + 120);
  *(void *)(v0 + 12sub_100016BD0(0, v0, 0) = 0LL;
}

  ;
}

uint64_t sub_100049AAC(uint64_t a1, ...)
{
  return UUID.hash(into:)(va);
}

uint64_t sub_100049AB8()
{
  return swift_release(*(void *)(v0 + 216));
}

uint64_t sub_100049AC4()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - sub_100006F7C(v0 + 8) = *v0;
  return *(void *)(v2 + 72);
}

void sub_100049AD8()
{
}

void *sub_100049AE4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_100049AF8()
{
  return type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0LL);
}

  ;
}

uint64_t sub_100049B18()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100049B24(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100049B30()
{
  return String.init<A>(describing:)(v0, v1);
}

uint64_t sub_100049B3C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100049B44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t))
{
  return a16(a1, v16);
}

uint64_t sub_100049B50()
{
  return sub_100049368(v1, v0);
}

void sub_100049B5C(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

uint64_t sub_100049B78()
{
  return v0;
}

id sub_100049B84()
{
  return [v0 *(SEL *)(v1 + 2744)];
}

uint64_t sub_100049B90@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100049B9C()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_100049BA4()
{
  return type metadata accessor for InferenceProviderXPCSender(0LL);
}

uint64_t sub_100049BAC(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_100049164(0LL, a2, a3);
}

void sub_100049BB4()
{
  uint64_t v0 = static BuiltInInferenceProvider.allCases.getter();
  uint64_t v1 = sub_10004A310(v0);
  type metadata accessor for OSEligibilityChecker(0LL);
  uint64_t v2 = static OSEligibilityChecker.shared.getter();
  uint64_t v3 = type metadata accessor for InferenceProviderManager();
  uint64_t v4 = swift_allocObject(v3, 184LL, 15LL);
  uint64_t v5 = sub_10004CBC8(v1, 1, v2, v4);
  swift_retain(v5);
  sub_10004B07C();
  swift_release(v5);
  sub_1000075C0();
}

uint64_t sub_100049C24()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010D038);
  uint64_t v1 = sub_100003BA0(v0, (uint64_t)qword_10010D038);
  return generalLogger.getter(v1);
}

void sub_100049C6C()
{
  uint64_t v2 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  sub_100030A28();
  __chkstk_darwin(v3);
  sub_1000499DC();
  sub_10002F8E0(v1, v0, v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0, v2);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*(void *)(v0 + 8));
      sub_100003B20(&qword_10010D190);
      uint64_t v6 = sub_100049A78();
      sub_1000220F4(v6);
    }
  }

  else
  {
    sub_10002F90C(v0, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
  }

  sub_10004E1F0();
}

double sub_100049D14@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v36 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AppExtensionIdentity(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = type metadata accessor for BuiltInInferenceProvider(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002F8E0(v3, (uint64_t)v19, v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v17);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*((void *)v19 + 1));
      uint64_t v22 = sub_100003B20(&qword_10010D190);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, &v19[*(int *)(v22 + 48)], v6);
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v37, v35);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
      uint64_t v23 = type metadata accessor for InferenceProviderExtensionConnection(0LL);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      sub_1000446EC();
      uint64_t v24 = v38;
      v38[3] = v23;
      void v24[4] = &off_100103B80;
      *uint64_t v24 = v25;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }

    else
    {
      if (qword_10010B0B0 != -1) {
        swift_once(&qword_10010B0B0, sub_100049C24);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      uint64_t v28 = sub_100003BA0(v27, (uint64_t)qword_10010D038);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Cannot make an instanceID connection from a direct connection",  v31,  2u);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      uint64_t v32 = v38;
      v38[4] = 0LL;
      double result = 0.0;
      *uint64_t v32 = 0u;
      v32[1] = 0u;
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    type metadata accessor for InferenceProviderManager();
    sub_10004A01C((uint64_t)v16, v37, v38);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

  return result;
}

void sub_10004A01C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10000C120();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for BuiltInInferenceProvider(0LL);
  __chkstk_darwin(v12);
  sub_1000229A8();
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v3, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  uint64_t v14 = type metadata accessor for InferenceProviderExtensionConnection(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  sub_1000445DC();
  a3[3] = v14;
  a3[4] = &off_100103B80;
  *a3 = v15;
  sub_100022108();
}

void sub_10004A100(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor.Instance(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000229A8();
  InferenceProviderDescriptor.instance.getter();
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v2, v4);
  if (v6 == enum case for InferenceProviderDescriptor.Instance.specificInstance(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v2, v4);
    uint64_t v8 = *v2;
    uint64_t v7 = v2[1];
    uint64_t v9 = *(void *)(v1 + *(int *)(sub_10004E0E4() + 24));
    sub_100022418();
    sub_10000FB78(v9, (uint64_t)v11);
    sub_10000C1E8();
    if (!v12)
    {
      sub_10002F99C((uint64_t)v11, &qword_10010C008);
      sub_10004E198(v11);
      if (!v12)
      {
        sub_10000C1E8();
        sub_10002F99C((uint64_t)v11, &qword_10010C008);
        *(void *)(a1 + 3sub_10003318C(v0 + 2) = 0LL;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = 0u;
        goto LABEL_12;
      }

      sub_10004E1A4();
      sub_100007104((uint64_t)v13, (uint64_t)v11);
      sub_10009D324((uint64_t)v11, v8, v7);
      goto LABEL_7;
    }

    sub_10000C1E8();
LABEL_6:
    sub_10004E1A4();
LABEL_7:
    sub_1000070EC(v13, a1);
LABEL_12:
    sub_100022108();
    return;
  }

  if (v6 == enum case for InferenceProviderDescriptor.Instance.defaultInstance(_:))
  {
    uint64_t v10 = v1 + *(int *)(sub_10004E0E4() + 20);
    sub_10004DE58(v10, (uint64_t)v11, &qword_10010C008);
    if (!v12)
    {
      sub_10002F99C((uint64_t)v11, &qword_10010C008);
      sub_10004E198(v13);
      sub_10004DDCC((uint64_t)v13, v10);
      sub_10004DFFC((uint64_t)v13, a1, &qword_10010C008);
      goto LABEL_12;
    }

    goto LABEL_6;
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "modelmanagerd/InferenceProviderManager.swift",  44LL,  2LL,  92LL,  0);
  __break(1u);
}

uint64_t sub_10004A310(uint64_t a1)
{
  uint64_t v2 = sub_10004E0E4();
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v55 - v6;
  sub_100022634();
  __chkstk_darwin(v7);
  uint64_t v64 = (uint64_t)&v55 - v8;
  uint64_t v9 = type metadata accessor for BuiltInInferenceProvider(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10004E158();
  uint64_t v63 = v11;
  sub_100022634();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v55 - v13;
  uint64_t v66 = v2;
  uint64_t v15 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v2,  &protocol witness table for String);
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v18 = *(void *)(v10 + 72);
    uint64_t v56 = a1;
    uint64_t v57 = v18;
    uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
    uint64_t v60 = v5;
    uint64_t v61 = v19;
    uint64_t v58 = v14;
    uint64_t v59 = v10;
    while (1)
    {
      uint64_t v67 = v16;
      uint64_t v20 = v61;
      uint64_t v21 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v14, v17, v9);
      uint64_t v22 = BuiltInInferenceProvider.rawValue.getter(v21);
      uint64_t v24 = v23;
      uint64_t v25 = v63;
      v20(v63, v14, v9);
      uint64_t v27 = (uint64_t)v65;
      uint64_t v26 = v66;
      uint64_t v28 = (uint64_t)&v65[*(int *)(v66 + 20)];
      *(void *)(v28 + 3sub_10003318C(v0 + 2) = 0LL;
      *(_OWORD *)uint64_t v28 = 0u;
      *(_OWORD *)(v28 + ++*(void *)(v0 + 16) = 0u;
      uint64_t v29 = *(int *)(v26 + 24);
      uint64_t v30 = sub_100003B20(&qword_10010BB28);
      *(void *)(v27 + v29) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v30,  &protocol witness table for String);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
      uint64_t v32 = v9;
      v31(v27, v25, v9);
      uint64_t v33 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
      swift_storeEnumTagMultiPayload(v27, v33, 0LL);
      sub_10002F99C(v28, &qword_10010C008);
      *(_OWORD *)uint64_t v28 = 0u;
      *(_OWORD *)(v28 + ++*(void *)(v0 + 16) = 0u;
      *(void *)(v28 + 3sub_10003318C(v0 + 2) = 0LL;
      uint64_t v34 = v64;
      sub_10004DE14(v27, v64);
      sub_10004DE14(v34, (uint64_t)v60);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      uint64_t v68 = v15;
      sub_10004E1D0();
      unint64_t v36 = sub_1000165C8();
      uint64_t v38 = *(void *)(v15 + 16);
      BOOL v39 = (v37 & 1) == 0;
      Swift::Int v40 = v38 + v39;
      if (__OFADD__(v38, v39)) {
        break;
      }
      unint64_t v41 = v36;
      char v42 = v37;
      sub_100003B20(&qword_10010D2E8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v40))
      {
        sub_10004E1D0();
        unint64_t v43 = sub_1000165C8();
        if ((v42 & 1) != (v44 & 1)) {
          goto LABEL_17;
        }
        unint64_t v41 = v43;
      }

      uint64_t v15 = v68;
      if ((v42 & 1) != 0)
      {
        uint64_t v45 = sub_10004E11C();
        sub_10004E030(v45, v46);
      }

      else
      {
        *(void *)(v68 + 8 * (v41 >> 6) + 64) |= 1LL << v41;
        uint64_t v47 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v41);
        *uint64_t v47 = v22;
        v47[1] = v24;
        uint64_t v48 = sub_10004E11C();
        sub_10004DE14(v48, v49);
        uint64_t v50 = *(void *)(v15 + 16);
        BOOL v51 = __OFADD__(v50, 1LL);
        uint64_t v52 = v50 + 1;
        if (v51) {
          goto LABEL_16;
        }
        *(void *)(v15 + ++*(void *)(v0 + 16) = v52;
        sub_1000225A4();
      }

      sub_100022B4C();
      swift_bridgeObjectRelease(0x8000000000000000LL);
      uint64_t v14 = v58;
      uint64_t v9 = v32;
      uint64_t v10 = v59;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v9);
      v17 += v57;
      uint64_t v16 = v67 - 1;
      if (v67 == 1)
      {
        uint64_t v53 = v56;
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
    uint64_t v53 = a1;
LABEL_14:
    swift_bridgeObjectRelease(v53);
    return v15;
  }

  return result;
}

void sub_10004A694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  sub_100003B20(&qword_10010D2E0);
  sub_100030A28();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v40 - v13;
  uint64_t v15 = sub_10004E0E4();
  sub_100030A28();
  __chkstk_darwin(v16);
  sub_100021FA4();
  uint64_t v17 = *v5;
  sub_1000225A4();
  sub_10004E1D0();
  sub_10000FC34(v17, v18);
  sub_100022B4C();
  if (sub_1000060B4((uint64_t)v14, 1LL, v15) == 1)
  {
    sub_10002F99C((uint64_t)v14, &qword_10010D2E0);
  }

  else
  {
    sub_10004DE14((uint64_t)v14, v4);
    sub_100049C6C();
    char v20 = v19;
    sub_10002F90C(v4, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    if ((v20 & 1) == 0) {
      goto LABEL_10;
    }
  }

  if (qword_10010B0B0 != -1) {
    swift_once(&qword_10010B0B0, sub_100049C24);
  }
  uint64_t v21 = sub_10000BF6C();
  uint64_t v22 = (os_log_s *)sub_100003BA0(v21, (uint64_t)qword_10010D038);
  uint64_t v23 = sub_10004E14C();
  Logger.logObject.getter(v23);
  os_log_type_t v24 = sub_100022604();
  if (os_log_type_enabled(v22, v24))
  {
    uint64_t v25 = sub_10000BCF4(12LL);
    v40[1] = v5;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = sub_10000BCF4(32LL);
    v40[0] = a3;
    uint64_t v28 = v27;
    uint64_t v42 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    sub_1000225A4();
    uint64_t v29 = sub_10004E1D0();
    sub_100015EF8(v29, v30, v31);
    uint64_t v41 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_bridgeObjectRelease_n(a2, 3LL);
    sub_100022210((void *)&_mh_execute_header, v22, v24, "Found inference provider extension: %s", v26);
    sub_100021F38(v28);
    uint64_t v33 = v28;
    a3 = v40[0];
    sub_10000BCC4(v33);
    sub_10000BCC4((uint64_t)v26);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v34 = (char *)v12 + *(int *)(sub_100003B20(&qword_10010D190) + 48);
  uint64_t v35 = sub_100049A78();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16LL))(v34, a3, v35);
  uint64_t v36 = (uint64_t)v12 + *(int *)(v15 + 20);
  *(void *)(v36 + 3sub_10003318C(v0 + 2) = 0LL;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)(v36 + ++*(void *)(v0 + 16) = 0u;
  uint64_t v37 = *(int *)(v15 + 24);
  sub_10004E14C();
  uint64_t v38 = sub_100003B20(&qword_10010BB28);
  *(uint64_t *)((char *)v12 + v37) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v38,  &protocol witness table for String);
  *uint64_t v12 = a1;
  v12[1] = a2;
  uint64_t v39 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  swift_storeEnumTagMultiPayload(v12, v39, 1LL);
  sub_10002F99C(v36, &qword_10010C008);
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)(v36 + ++*(void *)(v0 + 16) = 0u;
  *(void *)(v36 + 3sub_10003318C(v0 + 2) = 0LL;
  sub_10004E078((uint64_t)v12, 0LL);
  sub_10009D168((uint64_t)v12, a1, a2);
LABEL_10:
  sub_100007448();
}

uint64_t sub_10004A9B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = InferenceProviderDescriptor.id.getter();
  sub_10004AA5C(v24, v2, v3);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10004E0E4();
  uint64_t v7 = sub_1000060B4(v5, 1LL, v6);
  if ((_DWORD)v7)
  {
    sub_10004E178(v7, v8, v9, v10, v11, v12, v13, v14, v24[0]);
    uint64_t result = sub_10000C1E0();
    *(void *)(a1 + 3sub_10003318C(v0 + 2) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = 0u;
  }

  else
  {
    sub_10004A100(a1);
    sub_10004E178(v16, v17, v18, v19, v20, v21, v22, v23, v24[0]);
    return sub_10000C1E0();
  }

  return result;
}

void (*sub_10004AA5C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_10004C674(v6, a2, a3);
  return sub_10004AAC8;
}

void sub_10004AAC8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  sub_10000BD28();
  sub_10004E0C8(v1);
}

uint64_t sub_10004AAF8(uint64_t a1)
{
  uint64_t v50 = sub_100003B20(&qword_10010D328);
  uint64_t v2 = __chkstk_darwin(v50);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)&v45 - v5);
  sub_100020D00(v60, a1);
  uint64_t v51 = v60[0];
  uint64_t v46 = v60[1];
  uint64_t v61 = v60[3];
  unint64_t v7 = v60[4];
  uint64_t v49 = (unint64_t)(v60[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v8 = _swiftEmptyArrayStorage;
  __int128 v47 = xmmword_1000D8890;
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v61 << 6);
  while (1)
  {
    uint64_t v15 = *(void *)(v51 + 56);
    uint64_t v16 = (uint64_t *)(*(void *)(v51 + 48) + 16 * v10);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
    uint64_t v20 = v15 + *(void *)(*(void *)(v19 - 8) + 72LL) * v10;
    uint64_t v21 = v50;
    sub_10002F8E0( v20,  (uint64_t)v6 + *(int *)(v50 + 48),  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    *uint64_t v6 = v18;
    v6[1] = v17;
    sub_10004DFFC((uint64_t)v6, (uint64_t)v4, &qword_10010D328);
    uint64_t v22 = &v4[*(int *)(v21 + 48)];
    sub_10004DE58((uint64_t)&v22[*(int *)(v19 + 20)], (uint64_t)&v56, &qword_10010C008);
    if (v58)
    {
      sub_1000070EC(&v56, (uint64_t)&v52);
      uint64_t v23 = sub_100003B20(&qword_10010D330);
      os_log_type_t v24 = (void *)swift_allocObject(v23, 72LL, 7LL);
      *((_OWORD *)v24 + sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v47;
      sub_1000070EC(&v52, (uint64_t)(v24 + 4));
    }

    else
    {
      os_log_type_t v24 = _swiftEmptyArrayStorage;
    }

    uint64_t v25 = *(void *)&v22[*(int *)(v19 + 24)];
    swift_bridgeObjectRetain(v17);
    uint64_t v26 = swift_bridgeObjectRetain(v25);
    sub_1000CB2D8( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v45,  v46,  v47,  *((uint64_t *)&v47 + 1),  v48,  v49,  v50,  v51,  v52,  *((uint64_t *)&v52 + 1),  v53,  v54,  v55,  v56,  *((uint64_t *)&v56 + 1),  v57,  v58,  v59);
    swift_bridgeObjectRelease(v25);
    *(void *)&__int128 v56 = v24;
    sub_1000CADBC();
    uint64_t v34 = v56;
    sub_10002F99C((uint64_t)v4, &qword_10010D328);
    uint64_t v35 = *(void *)(v34 + 16);
    uint64_t v36 = v8[2];
    if (__OFADD__(v36, v35)) {
      break;
    }
    if (!swift_isUniquelyReferenced_nonNull_native(v8) || v36 + v35 > v8[3] >> 1)
    {
      sub_1000B2AF4();
      uint64_t v8 = v37;
    }

    if (*(void *)(v34 + 16))
    {
      uint64_t v38 = v8[2];
      if ((v8[3] >> 1) - v38 < v35) {
        goto LABEL_42;
      }
      unint64_t v39 = (unint64_t)&v8[5 * v38 + 4];
      if (v34 + 32 < v39 + 40 * v35 && v39 < v34 + 32 + 40 * v35) {
        goto LABEL_45;
      }
      sub_100003B20(&qword_10010BB28);
      swift_arrayInitWithCopy(v39);
      if (v35)
      {
        uint64_t v41 = v8[2];
        BOOL v42 = __OFADD__(v41, v35);
        uint64_t v43 = v41 + v35;
        if (v42) {
          goto LABEL_43;
        }
        v8[2] = v43;
      }
    }

    else if (v35)
    {
      goto LABEL_41;
    }

    swift_bridgeObjectRelease(v34);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v11 = v61 + 1;
    if (__OFADD__(v61, 1LL)) {
      goto LABEL_44;
    }
    if (v11 >= v49) {
      goto LABEL_39;
    }
    unint64_t v12 = *(void *)(v46 + 8 * v11);
    uint64_t v13 = v61 + 1;
    if (!v12)
    {
      uint64_t v13 = v61 + 2;
      if (v61 + 2 >= v49) {
        goto LABEL_39;
      }
      unint64_t v12 = *(void *)(v46 + 8 * v13);
      if (!v12)
      {
        uint64_t v13 = v61 + 3;
        if (v61 + 3 >= v49) {
          goto LABEL_39;
        }
        unint64_t v12 = *(void *)(v46 + 8 * v13);
        if (!v12)
        {
          uint64_t v13 = v61 + 4;
          if (v61 + 4 >= v49) {
            goto LABEL_39;
          }
          unint64_t v12 = *(void *)(v46 + 8 * v13);
          if (!v12)
          {
            uint64_t v13 = v61 + 5;
            if (v61 + 5 >= v49) {
              goto LABEL_39;
            }
            unint64_t v12 = *(void *)(v46 + 8 * v13);
            if (!v12)
            {
              uint64_t v14 = v61 + 6;
              while (v14 < v49)
              {
                unint64_t v12 = *(void *)(v46 + 8 * v14++);
                if (v12)
                {
                  uint64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }

uint64_t InferenceProviderManager.allConnections.getter()
{
  uint64_t v1 = swift_bridgeObjectRetain(*(void *)(v0 + 112));
  uint64_t v2 = sub_10004AAF8(v1);
  sub_10000C1E0();
  return v2;
}

uint64_t InferenceProviderManager.__allocating_init(connectionCollection:waitingForFirstUpdate:osEligibilityChecker:)( uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10004AFCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10004CAF8);
}

uint64_t InferenceProviderManager.init(connectionCollection:waitingForFirstUpdate:osEligibilityChecker:)( uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10004AFCC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10004CC7C);
}

uint64_t sub_10004AFCC( uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v12 = sub_100006F54((uint64_t)a3, v10);
  __chkstk_darwin(v12);
  sub_100021FA4();
  (*(void (**)(uint64_t))(v13 + 16))(v5);
  uint64_t v14 = a4(a1, a2, v5, v4, v10, v11);
  sub_100006F7C(a3);
  return v14;
}

void sub_10004B07C()
{
  uint64_t v2 = (void *)sub_100023C54((uint64_t)&unk_100103DD8);
  sub_10004E134(v2);
  uint64_t v3 = sub_100003854(v0, (uint64_t)&unk_10010D308, (uint64_t)v2);
  swift_release(v3);
  sub_10004E0D0();
  uint64_t v4 = (void *)sub_100023C54((uint64_t)&unk_100103E00);
  sub_10004E134(v4);
  uint64_t v5 = sub_100003854(v0, (uint64_t)&unk_10010D318, (uint64_t)v4);
  swift_release(v5);
  sub_10004E1F0();
}

uint64_t sub_10004B124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for _AppExtensionQuery.Results(0LL);
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  void v4[9] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for _AppExtensionQuery.Results.AsyncIterator(0LL);
  void v4[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for _AppExtensionQuery(0LL);
  void v4[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[14] = v10;
  v4[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004B1D4, 0LL, 0LL);
}

uint64_t sub_10004B1D4()
{
  if (qword_10010B0B0 != -1) {
    swift_once(&qword_10010B0B0, sub_100049C24);
  }
  uint64_t v1 = sub_10000BF6C();
  v0[16] = sub_100003BA0(v1, (uint64_t)qword_10010D038);
  uint64_t v2 = (os_log_s *)sub_10004E144();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000495A0(v2))
  {
    uint64_t v4 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v5 = sub_10000BCF4(32LL);
    uint64_t v19 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_100049BA4();
    uint64_t v6 = static InferenceProviderXPCSender.extensionPointIdentifier.getter();
    sub_100015EF8(v6, v7, &v19);
    v0[5] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6);
    sub_10000BD28();
    sub_100022210((void *)&_mh_execute_header, v2, v3, "Started query for extension point: %s", v4);
    sub_100021F38(v5);
    sub_10000BCC4(v5);
    sub_10000BCC4((uint64_t)v4);
  }

  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  sub_100049BA4();
  uint64_t v12 = static InferenceProviderXPCSender.extensionPointIdentifier.getter();
  uint64_t v13 = _AppExtensionQuery.init(extensionPointIdentifier:)(v12);
  uint64_t v14 = _AppExtensionQuery.results.getter(v13);
  _AppExtensionQuery.Results.makeAsyncIterator()(v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  sub_10004DF84( &qword_10010D320,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for _AppExtensionQuery.Results.AsyncIterator,  (uint64_t)&protocol conformance descriptor for _AppExtensionQuery.Results.AsyncIterator);
  v0[17] = v15;
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[18] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10004B3C8;
  uint64_t v17 = sub_10004E1DC();
  return dispatch thunk of AsyncIteratorProtocol.next()(v17);
}

uint64_t sub_10004B3C8()
{
  uint64_t v2 = *v1;
  uint64_t v7 = v2;
  sub_10000BE20(*(void *)(v2 + 144), &v7);
  if (v0) {
    *(void *)(v2 + 16sub_100006F7C(v0 + 8) = v0;
  }
  sub_10003CE0C();
  return sub_100021BCC(v3, v4, v5);
}

uint64_t sub_10004B420()
{
  *(void *)(v0 + 15sub_10003318C(v0 + 2) = *(void *)(v0 + 16);
  return sub_10000C088((uint64_t)sub_10004B438, 0LL);
}

uint64_t sub_10004B438()
{
  if (*(void *)(v2 + 152)) {
    return swift_task_switch(sub_10004B4A4, *(void *)(v2 + 48), 0LL);
  }
  sub_10004E0FC();
  sub_10004E09C();
  swift_task_dealloc(v0);
  sub_10000BFE4();
  swift_task_dealloc(v1);
  return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10004B4A4()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v0 + 16sub_100016BD0(0, v0, 0) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004B514;
  uint64_t v2 = sub_10004E1DC();
  return dispatch thunk of AsyncIteratorProtocol.next()(v2);
}

uint64_t sub_10004B514()
{
  uint64_t v2 = *v1;
  uint64_t v7 = v2;
  sub_10000BE20(*(void *)(v2 + 160), &v7);
  if (v0) {
    *(void *)(v2 + 16sub_100006F7C(v0 + 8) = v0;
  }
  sub_10003CE0C();
  return sub_100021BCC(v3, v4, v5);
}

uint64_t sub_10004B56C()
{
  return sub_10000BD98();
}

uint64_t sub_10004B5A4()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10004B5E8()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 168);
  uint64_t v1 = sub_100003B20(&qword_10010B468);
  swift_willThrowTypedImpl(v0 + 24, v1, &protocol self-conformance witness table for Error);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10004B63C()
{
  uint64_t v1 = v0[21];
  sub_10004E0FC();
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[21];
    uint64_t v6 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v7 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[4] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    sub_100022210((void *)&_mh_execute_header, v3, v4, "Error from _AppExtensionQuery: %@", v6);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v7);
    sub_10000BCC4((uint64_t)v7);
    sub_10000BCC4((uint64_t)v6);
  }

  else
  {
    uint64_t v9 = v0[21];
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  uint64_t v10 = v0[6];

  return sub_100021BCC((uint64_t)sub_10004B56C, v10, 0LL);
}

uint64_t sub_10004B79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock(0LL);
  v4[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[4] = v6;
  void v4[5] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004B7FC, 0LL, 0LL);
}

uint64_t sub_10004B7FC()
{
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10010FEA8 + dword_10010FEA8);
  uint64_t v1 = (void *)swift_task_alloc(unk_10010FEAC);
  *(void *)(v0 + 4sub_100006F7C(v0 + 8) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004B878;
  sub_10003CE0C();
  return v6(v2, v3, v4, 0LL, 1);
}

uint64_t sub_10004B878()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = v2;
  sub_10000BE20(v2[6], &v9);
  if (v0)
  {
    uint64_t v4 = v2[4];
    uint64_t v3 = v2[5];
    uint64_t v5 = v2[3];
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_10004B90C;
    uint64_t v7 = 0LL;
  }

  else
  {
    (*(void (**)(void, void))(v2[4] + 8LL))(v2[5], v2[3]);
    uint64_t v7 = v2[2];
    uint64_t v6 = sub_10004B91C;
  }

  return sub_100021BCC((uint64_t)v6, v7, 0LL);
}

uint64_t sub_10004B90C()
{
  return sub_10000C088((uint64_t)sub_10004B91C, *(void *)(v0 + 16));
}

uint64_t sub_10004B91C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004B954(uint64_t a1)
{
  uint64_t v89 = sub_100003B20(&qword_10010B9D0);
  unint64_t v3 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  sub_10000C120();
  uint64_t v6 = v5 - v4;
  uint64_t v76 = sub_100049A78();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  sub_10000C120();
  uint64_t v74 = v8 - v7;
  uint64_t v9 = type metadata accessor for _AppExtensionIdentity(0LL);
  uint64_t v90 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10004E158();
  uint64_t v83 = v10;
  sub_100022634();
  __chkstk_darwin(v11);
  uint64_t v73 = (uint64_t)&v70 - v12;
  sub_100022634();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v70 - v14;
  sub_100003B20(&qword_10010D2F0);
  sub_100030A28();
  __chkstk_darwin(v16);
  sub_10000C120();
  uint64_t v19 = v18 - v17;
  unint64_t v20 = *(void *)(a1 + 16);
  p_ivar_base_size = &MemoryPressureObserver.ivar_base_size;
  if (v20)
  {
    unint64_t v79 = v3;
    uint64_t v78 = v1;
    uint64_t v72 = (uint64_t)v1 + 112;
    uint64_t v88 = a1 + ((*(unsigned __int8 *)(v90 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
    uint64_t v77 = a1;
    sub_100022418();
    int v80 = 0;
    unint64_t v22 = 0LL;
    unint64_t v71 = v20 - 1;
    *(void *)&__int128 v23 = 136315138LL;
    __int128 v84 = v23;
    uint64_t v81 = (char *)&type metadata for Any + 8;
    uint64_t v85 = v19;
    BOOL v86 = v15;
    uint64_t v82 = v9;
    unint64_t v87 = v20;
LABEL_3:
    unint64_t v3 = v22;
    while (1)
    {
      if (v3 >= v20)
      {
        __break(1u);
        goto LABEL_40;
      }

      sub_10004E1C8(v19, v88 + *(void *)(v90 + 72) * v3);
      sub_10004E078(v19, 0LL);
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 32))(v15, v19, v9);
      uint64_t v25 = _AppExtensionIdentity.attributes.getter(v24);
      sub_100049BA4();
      static InferenceProviderXPCSender.inferenceProviderIdentifierKey.getter();
      if (*(void *)(v25 + 16) && (unint64_t v26 = sub_1000165C8(), (v27 & 1) != 0))
      {
        sub_100020E28(*(void *)(v25 + 56) + 32 * v26, (uint64_t)&v93);
      }

      else
      {
        __int128 v93 = 0u;
        __int128 v94 = 0u;
      }

      sub_10000C1E8();
      sub_100022D34();
      if (*((void *)&v94 + 1))
      {
        sub_10004DE78(&v93, &v95);
        sub_10004E1B0();
        if (swift_dynamicCast( v91,  &v93,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
        {
          uint64_t v52 = v91[0];
          uint64_t v53 = v91[1];
          uint64_t v54 = v73;
          sub_10004E1C8(v73, (uint64_t)v86);
          uint64_t v55 = v74;
          uint64_t v56 = v54;
          uint64_t v15 = v86;
          AppExtensionIdentity.init(_:)(v56);
          uint64_t v57 = v72;
          sub_10000BE64(v72, (uint64_t)&v93, 33LL);
          uint64_t v58 = v52;
          uint64_t v1 = (os_log_s *)v57;
          sub_10004A694(v58, v53, v55);
          (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v55, v76);
          swift_endAccess(&v93);
          sub_10000C1E8();
          sub_100006F7C(&v95);
          sub_10004E1BC(*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8));
          unint64_t v22 = v3 + 1;
          int v80 = 1;
          unint64_t v20 = v87;
          if (v71 != v3) {
            goto LABEL_3;
          }
          sub_10004E078(v19, 1LL);
          sub_10004E16C();
          sub_10004E184();
          goto LABEL_34;
        }

        if (*((void *)p_ivar_base_size + 22) != -1LL) {
          swift_once(&qword_10010B0B0, sub_100049C24);
        }
        uint64_t v28 = sub_10000BF6C();
        sub_100003BA0(v28, (uint64_t)qword_10010D038);
        uint64_t v29 = sub_10004E1B0();
        uint64_t v1 = (os_log_s *)Logger.logObject.getter(v29);
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (sub_1000495A0(v1))
        {
          uint64_t v31 = sub_10000BCF4(12LL);
          uint64_t v32 = sub_10000BCF4(32LL);
          uint64_t v92 = v32;
          *(_DWORD *)uint64_t v31 = v84;
          sub_100020E28((uint64_t)&v93, (uint64_t)v91);
          uint64_t v33 = String.init<A>(describing:)(v91, (char *)&type metadata for Any + 8);
          uint64_t v35 = v34;
          sub_100015EF8(v33, v34, &v92);
          *(void *)(v31 + 4) = v36;
          swift_bridgeObjectRelease(v35);
          sub_100006F7C(&v93);
          sub_100022210( (void *)&_mh_execute_header,  v1,  v30,  "Found inference provider extension, but with invalid InferenceProviderIdentifier value: %s",  (uint8_t *)v31);
          uint64_t v19 = v85;
          uint64_t v15 = v86;
          uint64_t v37 = v90;
          uint64_t v9 = v82;
          swift_arrayDestroy(v32, 1LL);
          uint64_t v38 = v32;
          p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
          sub_10000BCC4(v38);
          sub_10000BCC4(v31);

          sub_100006F7C(&v95);
          unint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8);
        }

        else
        {

          sub_100006F7C(&v93);
          sub_100006F7C(&v95);
          unint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v90 + 8);
        }

        sub_10004E1BC(v39);
      }

      else
      {
        sub_10002F99C((uint64_t)&v93, &qword_10010D2F8);
        uint64_t v40 = v83;
        if (*((void *)p_ivar_base_size + 22) != -1LL) {
          swift_once(&qword_10010B0B0, sub_100049C24);
        }
        uint64_t v41 = sub_10000BF6C();
        uint64_t v1 = (os_log_s *)sub_100003BA0(v41, (uint64_t)qword_10010D038);
        uint64_t v42 = (uint64_t)v86;
        uint64_t v43 = sub_10004E1C8(v40, (uint64_t)v86);
        char v44 = (os_log_s *)Logger.logObject.getter(v43);
        os_log_type_t v45 = static os_log_type_t.error.getter();
        if (sub_1000495A0(v44))
        {
          uint64_t v46 = sub_10000BCF4(12LL);
          uint64_t v47 = sub_10000BCF4(32LL);
          *(void *)&__int128 v95 = v47;
          *(_DWORD *)uint64_t v46 = v84;
          uint64_t v48 = _AppExtensionIdentity.bundleIdentifier.getter();
          uint64_t v1 = (os_log_s *)v49;
          sub_100015EF8(v48, v49, (uint64_t *)&v95);
          *(void *)(v46 + 4) = v50;
          sub_10000BD28();
          sub_10004E0B4();
          sub_100022210( (void *)&_mh_execute_header,  v44,  v45,  "Found inference provider extension %s, but it lacks an InferenceProviderIdentifier key",  (uint8_t *)v46);
          swift_arrayDestroy(v47, 1LL);
          uint64_t v51 = v47;
          p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
          sub_10000BCC4(v51);
          sub_10000BCC4(v46);
        }

        else
        {

          sub_10004E0B4();
        }

        ((void (*)(uint64_t, uint64_t))v1)(v42, v9);
        uint64_t v15 = (char *)v42;
        uint64_t v19 = v85;
      }

      ++v3;
      unint64_t v20 = v87;
      if (v87 == v3)
      {
        sub_10004E078(v19, 1LL);
        break;
      }
    }

    sub_10004E16C();
    sub_10004E184();
    if ((v80 & 1) != 0) {
      goto LABEL_34;
    }
  }

  else
  {
    sub_100022418();
    sub_10004E078(v19, 1LL);
    sub_10000C1E8();
    uint64_t v9 = (uint64_t)v1;
  }

  if (*((void *)p_ivar_base_size + 22) != -1LL) {
LABEL_40:
  }
    swift_once(&qword_10010B0B0, sub_100049C24);
  uint64_t v59 = sub_10000BF6C();
  sub_100003BA0(v59, (uint64_t)qword_10010D038);
  sub_10004E144();
  os_log_type_t v60 = sub_100022604();
  if (os_log_type_enabled(v1, v60))
  {
    uint64_t v61 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v61 = 0;
    sub_1000495CC((void *)&_mh_execute_header, v1, v60, "Query found no inference provider extensions", v61);
    sub_10000BCC4((uint64_t)v61);
  }

LABEL_34:
  *(_BYTE *)(v9 + 12sub_100016BD0(0, v0, 0) = 0;
  uint64_t v62 = (void *)(v9 + 128);
  sub_10000BE64(v9 + 128, (uint64_t)&v95, 1LL);
  uint64_t v63 = *(void *)(v9 + 128);
  uint64_t v64 = *(void *)(v63 + 16);
  if (v64)
  {
    uint64_t v65 = v63 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v66 = *(void *)(v3 + 72);
    uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain(v63);
    uint64_t v68 = v89;
    do
    {
      uint64_t v69 = v67(v6, v65, v68);
      CheckedContinuation.resume(returning:)(v69, v68);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v68);
      v65 += v66;
      --v64;
    }

    while (v64);
    sub_100022D34();
  }

  *uint64_t v62 = _swiftEmptyArrayStorage;
  sub_100022D34();
  sub_100007448();
}

void sub_10004C0F0()
{
  if (*(_BYTE *)(v0 + 120) == 1)
  {
    if (qword_10010B0B0 != -1) {
      swift_once(&qword_10010B0B0, sub_100049C24);
    }
    uint64_t v1 = sub_10000BF6C();
    sub_100003BA0(v1, (uint64_t)qword_10010D038);
    osos_log_t log = (os_log_s *)sub_10004E144();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      unint64_t v3 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)unint64_t v3 = 0;
      sub_1000495CC( (void *)&_mh_execute_header,  oslog,  v2,  "Inference provider extension query is stalling! Still waiting to discover XPC inference providers.",  v3);
      sub_10000BCC4((uint64_t)v3);
    }
  }

uint64_t sub_10004C1C0(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_10000C088((uint64_t)sub_10004C1D8, v2);
}

uint64_t sub_10004C1D8()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v3 = v1[20];
  uint64_t v2 = v1[21];
  sub_10000729C(v1 + 17, v3);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to OSEligibilityChecking.isGreymatterEligible.getter[1]);
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10004C24C;
  return OSEligibilityChecking.isGreymatterEligible.getter(v3, v2);
}

uint64_t sub_10004C24C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(_BYTE *)(*(void *)v1 + 8sub_10000BE64(v0 + 112, (uint64_t)v4, 0LL) = a1;
  swift_task_dealloc(v2);
  return sub_10000BD98();
}

uint64_t sub_10004C2A0()
{
  if ((*(_BYTE *)(v1 + 80) & 1) == 0)
  {
    uint64_t v2 = *(void **)(*(void *)(v1 + 56) + 176LL);
    uint64_t v3 = swift_bridgeObjectRetain(v2);
    uint64_t v4 = InferenceProviderDescriptor.id.getter(v3);
    uint64_t v0 = (os_log_s *)v5;
    char v6 = sub_10000E704(v4, v5, v2);
    sub_10000C1E0();
    sub_10000BD28();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = type metadata accessor for ModelManagerError(0LL);
      sub_10004DF84( (unint64_t *)&qword_10010B410,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v7, v8, 0LL, 0LL);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  enum case for ModelManagerError.deviceNotEligible(_:),  v7);
      swift_willThrow(v10, v11, v12, v13, v14, v15, v16, v17);
      uint64_t v18 = *(uint64_t (**)(void))(v1 + 8);
      return v18();
    }
  }

  uint64_t v19 = *(void *)(v1 + 56);
  if (*(_BYTE *)(v19 + 120) != 1)
  {
    sub_10004E084(v19);
    sub_10004E0EC();
    swift_endAccess(v1 + 16);
    uint64_t v18 = *(uint64_t (**)(void))(v1 + 8);
    return v18();
  }

  if (qword_10010B0B0 != -1) {
    swift_once(&qword_10010B0B0, sub_100049C24);
  }
  uint64_t v20 = sub_10000BF6C();
  sub_100003BA0(v20, (uint64_t)qword_10010D038);
  sub_10004E144();
  os_log_type_t v21 = sub_100022604();
  if (os_log_type_enabled(v0, v21))
  {
    unint64_t v22 = (uint8_t *)sub_10000BCF4(2LL);
    *(_WORD *)unint64_t v22 = 0;
    sub_1000495CC((void *)&_mh_execute_header, v0, v21, "Waiting for first extension query to finish", v22);
    sub_10000BCC4((uint64_t)v22);
  }

  sub_10004DF84( &qword_10010D2D8,  v23,  (uint64_t (*)(uint64_t))type metadata accessor for InferenceProviderManager,  (uint64_t)&protocol conformance descriptor for InferenceProviderManager);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v1 + 7sub_10003318C(v0 + 2) = v24;
  *uint64_t v24 = v1;
  v24[1] = sub_10004C4DC;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10004C4DC()
{
  uint64_t v2 = *v0;
  sub_10000BE20(*(void *)(v2 + 72), &v2);
  return sub_10000BD98();
}

uint64_t sub_10004C528()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 128) + 16LL);
  sub_1000B2750(v4);
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(v5 + swift_endAccess(v0 + 16) = v4 + 1;
  uint64_t v6 = sub_100003B20(&qword_10010B9D0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))( v5 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
  + *(void *)(*(void *)(v6 - 8) + 72LL) * v4,
    a1,
    v6);
  return swift_endAccess(v8);
}

void *InferenceProviderManager.deinit()
{
  return v0;
}

uint64_t InferenceProviderManager.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

void (*sub_10004C674(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10004C914(v7);
  v7[10] = sub_10004C750(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10004C704;
}

void sub_10004C704(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  sub_10000BD28();
  v2(v1, 0LL);
  free(v1);
}

void (*sub_10004C750(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[1] = a3;
  v10[2] = v4;
  *uint64_t v10 = a2;
  uint64_t v11 = sub_100003B20(&qword_10010D2E0);
  uint64_t v12 = malloc(*(void *)(*(void *)(v11 - 8) + 64LL));
  void v10[3] = v12;
  uint64_t v13 = *v4;
  unint64_t v14 = sub_1000165C8();
  *((_BYTE *)v10 + 4sub_100016BD0(0, v0, 0) = v15 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v19 = v14;
  char v20 = v15;
  sub_100003B20(&qword_10010D2E8);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18))
  {
    unint64_t v21 = sub_1000165C8();
    if ((v20 & 1) == (v22 & 1))
    {
      unint64_t v19 = v21;
      goto LABEL_5;
    }

LABEL_10:
    uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

    uint64_t v33 = (uint64_t)v80;
    int v80 = &v69;
    uint64_t v37 = __chkstk_darwin(v30);
    uint64_t v69 = sub_100095DE0(v37, v38, v39, v40, v41, v42, v43, v44, (uint64_t)v69);
    os_log_type_t v45 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v69, v33, v83);
    uint64_t v46 = sub_10000BCF4(62LL);
    unint64_t v79 = sub_10000BCF4(128LL);
    uint64_t v85 = v79;
    *(_DWORD *)uint64_t v46 = 136447490;
    uint64_t v47 = swift_bridgeObjectRetain(v13);
    Array.description.getter(v47);
    uint64_t v49 = v48;
    uint64_t v50 = swift_bridgeObjectRelease(v13);
    sub_1000960AC(v50, v51, &v85);
    __int128 v84 = v52;
    sub_10000C04C((uint64_t)&v84, (uint64_t)&v85);
    sub_10000C1B0(v13);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v46 + 1sub_10003318C(v0 + 2) = 2082;
    swift_bridgeObjectRetain(v31);
    sub_100015EF8(v75, v31, &v85);
    __int128 v84 = v53;
    sub_10000C04C((uint64_t)&v84, (uint64_t)&v85);
    uint64_t v54 = v31;
    uint64_t v34 = v45;
    sub_100095B00(v54);
    *(_WORD *)(v46 + 2sub_10003318C(v0 + 2) = 2050;
    sub_100095FE4(v46 + 24, v76);
    *(_WORD *)(v46 + 3sub_10003318C(v0 + 2) = 2050;
    sub_100095FE4(v46 + 34, v77);
    *(_WORD *)(v46 + 4sub_10003318C(v0 + 2) = 2082;
    if ((v78 & 1) != 0) {
      uint64_t v55 = 1702195828LL;
    }
    else {
      uint64_t v55 = 0x65736C6166LL;
    }
    if ((v78 & 1) != 0) {
      uint64_t v56 = 0xE400000000000000LL;
    }
    else {
      uint64_t v56 = 0xE500000000000000LL;
    }
    sub_100015EF8(v55, v56, &v85);
    __int128 v84 = v57;
    sub_1000301B8((uint64_t)&v84, (uint64_t)&v85);
    sub_10000C1E0();
    *(_WORD *)(v46 + 5sub_10003318C(v0 + 2) = 2082;
    uint64_t v58 = v72;
    uint64_t v59 = UUIDIdentifier.uuidString.getter(v74);
    sub_100092264(v59, v60);
    __int128 v84 = v61;
    sub_10000C04C((uint64_t)&v84, (uint64_t)&v85);
    sub_10000BD28();
    uint64_t v62 = sub_100022CF4(v58, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
    uint64_t v63 = v69;
    uint64_t v64 = OSSignpostID.rawValue.getter(v62);
    uint64_t v23 = v71;
    sub_10009607C( (void *)&_mh_execute_header,  v71,  (os_signpost_type_t)v70,  v64,  v82,  "bundeIdentifiers: %{public, signpost.description=attribute,public}s,\n useCaseIdentifier: %{public, signpost.description=attribute,public}s,\n onBehalfOfPID: %{public, signpost.description=attribute,public}ld,\n createdByPID: %{public, signpost.description=attribute,public}ld,\n containsSensitiveData: %{public, signpost.description=attribute,public}s,\n uuid: %{public, signpost.description=attribute,public}s",  (uint8_t *)v46);
    uint64_t v65 = v79;
    swift_arrayDestroy(v79, 4LL);
    sub_10000BCC4(v65);
    sub_10000BCC4(v46);

    uint64_t v32 = sub_1000304C4((uint64_t)v63, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    goto LABEL_17;
  }

  if ((unint64_t)v82 >> 32)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_100095C40();
  if (!v35)
  {
    sub_100095C34();
    if (!(!v35 & v36))
    {
      uint64_t v31 = v10;
      uint64_t v82 = (const char *)&v86;
      goto LABEL_10;
    }

    goto LABEL_19;
  }

    uint64_t v48 = &v45;
    char v22 = __chkstk_darwin(v17);
    os_log_type_t v30 = sub_100095DE0(v22, v23, v24, v25, v26, v27, v28, v29, v45);
    uint64_t v31 = *(void (**)(void, void, void))(v11 + 16);
    uint64_t v46 = v30;
    uint64_t v47 = v31;
    v31(v30, (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v10);
    uint64_t v0 = sub_10000BCF4(12LL);
    uint64_t v32 = sub_10000BCF4(32LL);
    uint64_t v55 = v32;
    uint64_t v52 = v10;
    *(_DWORD *)uint64_t v0 = 136446210;
    uint64_t v33 = UUIDIdentifier.uuidString.getter(v2);
    sub_100092264(v33, v34);
    uint64_t v54 = v35;
    uint64_t v10 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    sub_10000BD28();
    uint64_t v36 = sub_100022CF4(v8, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    uint64_t v37 = v46;
    OSSignpostID.rawValue.getter(v36);
    sub_100095F84();
    uint64_t v38 = v50;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v50,  v39,  v40,  v53,  "sessionIdentifier: %{public, signpost.description=attribute,public}s",  (uint8_t *)v0,  0xCu);
    swift_arrayDestroy(v32, 1LL);
    sub_10000BCC4(v32);
    sub_10000BCC4(v0);

    Swift::Int v18 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v37, v10);
    goto LABEL_11;
  }

  sub_100095FC8();
  if (v19)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  sub_100095C40();
  if (!v20)
  {
    sub_100095C34();
    if (!(!v20 & v21))
    {
      uint64_t v53 = (const char *)&v56;
      goto LABEL_10;
    }

    goto LABEL_13;
  }

  sub_100005FB0(v12, v29, 1LL, v13);
  sub_100007448();
}

LABEL_5:
  v10[4] = v19;
  if ((v20 & 1) != 0)
  {
    uint64_t v23 = *(void *)(*v5 + 56LL);
    uint64_t v24 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
    sub_10004DE14(v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v19, (uint64_t)v12);
    uint64_t v25 = 0LL;
  }

  else
  {
    uint64_t v24 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
    uint64_t v25 = 1LL;
  }

  sub_100005FB0((uint64_t)v12, v25, 1LL, v24);
  return sub_10004C8C8;
}

  uint64_t v13 = __clz(__rbit64(v8));
  unint64_t v14 = (uint64_t *)((v8 - 1) & v8);
  char v15 = v13 | (v12 << 6);
  uint64_t v16 = v0[17];
LABEL_20:
  uint64_t v106 = (uint64_t)v14;
  uint64_t v108 = v12;
  v0[30] = v12;
  v0[31] = (uint64_t)v14;
  sub_1000D0090(v16, v15);
  sub_1000D1128();
  uint64_t v23 = sub_1000D0C58();
  sub_1000D0FDC(v23);
  if (!v24)
  {
LABEL_128:
    sub_10000C0A0();
    sub_1000224B4();
    goto LABEL_126;
  }

  uint64_t v25 = v0[21];
  uint64_t v125 = v0[22];
  unint64_t v26 = sub_10000BE28();
  uint64_t v123 = *(void *)(v26 - 8);
  os_log_type_t v124 = v26;
  uint64_t v122 = v1 + ((*(unsigned __int8 *)(v123 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
  uint64_t v120 = *(int *)(v25 + 48);
  uint64_t v121 = 33LL;
  uint64_t v126 = *(void *)(v1 + 16);
  sub_10000BD20(v2);
  uint64_t v111 = v1;
  sub_10000BD20(v1);
  uint64_t v112 = 1LL;
  char v27 = sub_10000BD20(1LL);
  uint64_t v35 = 0LL;
  v128 = v0;
  uint64_t v119 = v2;
  while (1)
  {
    if (v35 == v126)
    {
      __break(1u);
      goto LABEL_131;
    }

    sub_1000D01B0( v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v105,  v106,  v108,  v110,  v111,  v112,  v113,  v114,  (uint64_t)v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124);
    sub_1000D0514();
    uint64_t v36 = sub_1000D0E40();
    *(void *)(v125 + v12sub_100016BD0(0, v0, 0) = v2;
    uint64_t v127 = v35;
    if (*(void *)(*(void *)(v2 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets) + 16LL)) {
      break;
    }
    sub_10000C20C();
LABEL_107:
    uint64_t v35 = v127 + 1;
    sub_1000CF88C(v0[22], &qword_10010F7F0);
    uint64_t v2 = v119;
    if (v127 + 1 == v118)
    {
      sub_10000BCDC(v119);
      sub_1000304F8();
      sub_10000BF84();
LABEL_126:
      __int128 v94 = v0[29];
      __int128 v95 = v0[18];
      sub_1000304F8();
      uint64_t v96 = sub_10000BF84();
      sub_100084970(v96, v97, v98, v99, v100, v101, v102, v103, v105, v106, v108, v110, v111, v112, v113);
      uint64_t v104 = sub_10000729C((void *)(v95 + v94), *(void *)(v95 + v94 + 24));
      v0[32] = (uint64_t)v104;
      sub_1000D0168((uint64_t)sub_1000C25EC, *v104, 0LL);
      return;
    }
  }

  sub_1000D0A54(v36, v37, v38, v39, v40, v41, v42, v43, v105, v106, v108, v110, v111, v112, v113, v114, v115);
  char v44 = *(uint64_t **)v5;
  os_log_type_t v45 = *(void *)(v5 + 8);
  uint64_t v114 = v2;
  sub_10000C20C();
  sub_1000225A4();
  sub_1000D0D20();
  sub_100022B4C();
  sub_1000D0A40();
  if (v45)
  {
    sub_100022C50();
    unint64_t v14 = v44;
    uint64_t v5 = v1 + 40;
    do
    {
      uint64_t v2 = *(void *)v5;
      sub_10002289C();
      sub_1000D0D30();
      sub_10000C000();
      v5 += 16LL;
      --v45;
    }

    while (v45);
    sub_1000228C4();
  }

  sub_1000D0A2C();
  if (v35)
  {
    sub_10002289C();
    unint64_t v14 = (uint64_t *)(v2 + 64);
    do
    {
      sub_1000D0A18();
      sub_100022C50();
      sub_1000D0E60();
      if (type metadata accessor for ModelCatalogAsset)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        sub_1000D0E50();
        sub_1000303D0();
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      Hasher._combine(_:)(v45);
      sub_1000228C4();
      sub_1000303D0();
      v14 += 5;
      --v35;
    }

    while (v35);
    sub_10000C000();
  }

  uint64_t v46 = sub_1000D04DC();
  sub_100021AD0(&qword_10010B7E8, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
  sub_1000D0A04(v47);
  sub_1000D09DC();
  sub_1000D0C10();
  sub_1000D09C8();
  Hasher._finalize()();
  sub_1000D0300();
  if ((v48 & 1) == 0) {
    goto LABEL_107;
  }
  while (1)
  {
    sub_1000D04C0();
    uint64_t v49 = v44[1];
    uint64_t v50 = *(void *)(v5 + 8);
    uint64_t v51 = *v44 == *(void *)v5 && v49 == v50;
    if (!v51 && (sub_100021EB8(*v44, v49, *(void *)v5, v50) & 1) == 0) {
      goto LABEL_104;
    }
    sub_1000D0708();
    if (!v51) {
      goto LABEL_104;
    }
    if (v44) {
      uint64_t v52 = v46 == (void)v14;
    }
    else {
      uint64_t v52 = 1;
    }
    if (!v52)
    {
      uint64_t v58 = *(void *)(v46 + 32);
      uint64_t v59 = *(void *)(v46 + 40);
      os_log_type_t v60 = v14[4];
      uint64_t v61 = v14[5];
      uint64_t v62 = v58 == v60 && v59 == v61;
      if (!v62 && (sub_100021EB8(v58, v59, v60, v61) & 1) == 0) {
        goto LABEL_104;
      }
      if (v44 != (uint64_t *)1)
      {
        uint64_t v63 = *(void *)(v46 + 48);
        uint64_t v64 = *(void *)(v46 + 56);
        uint64_t v65 = v14[6];
        uint64_t v66 = v14[7];
        uint64_t v67 = v63 == v65 && v64 == v66;
        if (!v67 && (sub_100021EB8(v63, v64, v65, v66) & 1) == 0) {
          goto LABEL_104;
        }
        if (v44 != (uint64_t *)2)
        {
          uint64_t v0 = v14 + 9;
          uint64_t v5 = v46 + 72;
          uint64_t v46 = 2LL;
          while ((unint64_t)v44 > 2)
          {
            uint64_t v68 = *(void *)(v5 - 8);
            uint64_t v69 = *(void *)v5;
            uint64_t v70 = v14[8];
            unint64_t v71 = *v0;
            uint64_t v72 = v68 == v70 && v69 == v71;
            if (!v72 && (sub_100021EB8(v68, v69, v70, v71) & 1) == 0) {
              goto LABEL_104;
            }
            sub_1000D0F1C();
            if (v51) {
              goto LABEL_48;
            }
          }

          __break(1u);
          goto LABEL_128;
        }
      }
    }

void sub_10004C8C8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[3];
  sub_10004C940((uint64_t)v2, *((_BYTE *)*a1 + 40), (void *)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_10002F99C((uint64_t)v2, &qword_10010D2E0);
  free(v2);
  sub_10004E0C8(v1);
}

uint64_t (*sub_10004C914(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_10004C934;
}

uint64_t sub_10004C934(uint64_t result)
{
  **(void **)(result + sub_100006F7C(v0 + 8) = *(void *)result;
  return result;
}

void sub_10004C940(uint64_t a1, char a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v10 = sub_100003B20(&qword_10010D2E0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  BOOL v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v23 - v18;
  sub_10004DE58(a1, (uint64_t)v12, &qword_10010D2E0);
  if (sub_1000060B4((uint64_t)v12, 1LL, v13) == 1)
  {
    sub_10002F99C((uint64_t)v12, &qword_10010D2E0);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(void *)(*a3 + 48LL) + 16 * a4, 1LL);
      _NativeDictionary._delete(at:)(a4, *a3, &type metadata for String, v13);
    }
  }

  else
  {
    sub_10004DE14((uint64_t)v12, (uint64_t)v19);
    char v20 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      sub_10004DE14((uint64_t)v19, v20[7] + *(void *)(v14 + 72) * a4);
    }

    else
    {
      sub_10004DE14((uint64_t)v19, (uint64_t)v17);
      unint64_t v21 = a4;
      uint64_t v22 = v24;
      sub_100097138(v21, v23, v24, (uint64_t)v17, v20);
      swift_bridgeObjectRetain(v22);
    }
  }

uint64_t sub_10004CAF8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for InferenceProviderManager();
  uint64_t v15 = swift_allocObject(v14, 184LL, 15LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  uint64_t v16 = sub_10004CC7C(a1, a2, (uint64_t)v13, v15, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, a5);
  return v16;
}

uint64_t sub_10004CBC8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  v9[3] = type metadata accessor for OSEligibilityChecker(0LL);
  v9[4] = &protocol witness table for OSEligibilityChecker;
  v9[0] = a3;
  swift_defaultActor_initialize(a4);
  *(void *)(a4 + 12sub_100006F7C(v0 + 8) = &_swiftEmptyArrayStorage;
  *(void *)(a4 + 176) = &off_100102708;
  *(void *)(a4 + 11sub_10003318C(v0 + 2) = a1;
  *(_BYTE *)(a4 + 12sub_100016BD0(0, v0, 0) = a2;
  sub_100007104((uint64_t)v9, a4 + 136);
  sub_10000729C((void *)(a4 + 136), *(void *)(a4 + 160));
  OSEligibilityChecking.prewarmGreymatter()();
  sub_100006F7C(v9);
  return a4;
}

uint64_t sub_10004CC7C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[3] = a5;
  v13[4] = a6;
  uint64_t v11 = sub_10004DFC0(v13);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(v11, a3, a5);
  swift_defaultActor_initialize(a4);
  *(void *)(a4 + 12sub_100006F7C(v0 + 8) = _swiftEmptyArrayStorage;
  *(void *)(a4 + 176) = &off_1001027E0;
  *(void *)(a4 + 11sub_10003318C(v0 + 2) = a1;
  *(_BYTE *)(a4 + 12sub_100016BD0(0, v0, 0) = a2;
  sub_100007104((uint64_t)v13, a4 + 136);
  sub_10000729C((void *)(a4 + 136), *(void *)(a4 + 160));
  OSEligibilityChecking.prewarmGreymatter()();
  sub_100006F7C(v13);
  return a4;
}

uint64_t type metadata accessor for InferenceProviderManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd24InferenceProviderManager);
}

ValueMetadata *type metadata accessor for InferenceProviderManager.ConnectionCollection()
{
  return &type metadata for InferenceProviderManager.ConnectionCollection;
}

uint64_t *sub_10004CD78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }

  uint64_t v7 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    swift_bridgeObjectRetain(v14);
    uint64_t v15 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
    uint64_t v16 = (char *)a1 + v15;
    BOOL v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for AppExtensionIdentity(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    uint64_t v10 = a1;
    uint64_t v11 = v7;
    uint64_t v12 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
      goto LABEL_9;
    }

    uint64_t v9 = type metadata accessor for BuiltInInferenceProvider(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
    uint64_t v10 = a1;
    uint64_t v11 = v7;
    uint64_t v12 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v10, v11, v12);
LABEL_9:
  uint64_t v19 = *(int *)(a3 + 20);
  char v20 = (char *)a1 + v19;
  unint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(uint64_t *)((char *)a2 + v19 + 24);
  if (v22)
  {
    uint64_t v23 = *((void *)v21 + 4);
    *((void *)v20 + 3) = v22;
    *((void *)v20 + 4) = v23;
    (**(void (***)(void))(v22 - 8))();
  }

  else
  {
    __int128 v24 = *((_OWORD *)v21 + 1);
    *(_OWORD *)char v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v24;
    *((void *)v20 + 4) = *((void *)v21 + 4);
  }

  uint64_t v25 = *(int *)(a3 + 24);
  uint64_t v26 = *(uint64_t *)((char *)a2 + v25);
  *(uint64_t *)((char *)a1 + vsub_100006F7C(v0 + 25) = v26;
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(uint64_t a1)
{
  return sub_100047EF0( a1,  qword_10010D2A0,  (uint64_t)&nominal type descriptor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
}

uint64_t sub_10004CEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    uint64_t v7 = a1 + *(int *)(sub_100003B20(&qword_10010D190) + 48);
    uint64_t v8 = type metadata accessor for AppExtensionIdentity(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  }

  else if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = type metadata accessor for BuiltInInferenceProvider(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  }

  uint64_t v9 = (void *)(a1 + *(int *)(a2 + 20));
  if (v9[3]) {
    sub_100006F7C(v9);
  }
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24)));
}

void *sub_10004CFB4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = a2[1];
    *a1 = *a2;
    a1[1] = v12;
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for AppExtensionIdentity(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
    uint64_t v9 = a1;
    uint64_t v10 = v6;
    uint64_t v11 = 1LL;
    goto LABEL_5;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v8 = type metadata accessor for BuiltInInferenceProvider(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    uint64_t v9 = a1;
    uint64_t v10 = v6;
    uint64_t v11 = 0LL;
LABEL_5:
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    goto LABEL_7;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)((char *)a2 + v17 + 24);
  if (v20)
  {
    uint64_t v21 = *((void *)v19 + 4);
    *((void *)v18 + 3) = v20;
    *((void *)v18 + 4) = v21;
    (**(void (***)(void))(v20 - 8))();
  }

  else
  {
    __int128 v22 = *((_OWORD *)v19 + 1);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v22;
    *((void *)v18 + 4) = *((void *)v19 + 4);
  }

  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = *(void *)((char *)a2 + v23);
  *(void *)((char *)a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  return a1;
}

void *sub_10004D0F8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F90C((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v12 = a2[1];
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      uint64_t v13 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for AppExtensionIdentity(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
      uint64_t v9 = a1;
      uint64_t v10 = v6;
      uint64_t v11 = 1LL;
      goto LABEL_6;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for BuiltInInferenceProvider(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      uint64_t v9 = a1;
      uint64_t v10 = v6;
      uint64_t v11 = 0LL;
LABEL_6:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      goto LABEL_8;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

void *sub_10004D298(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

_OWORD *sub_10004D400(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v12 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for AppExtensionIdentity(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
    uint64_t v9 = a1;
    uint64_t v10 = v6;
    uint64_t v11 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
      goto LABEL_7;
    }

    uint64_t v8 = type metadata accessor for BuiltInInferenceProvider(0LL);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    uint64_t v9 = a1;
    uint64_t v10 = v6;
    uint64_t v11 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v9, v10, v11);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  __int128 v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v20;
  *((void *)v18 + 4) = *((void *)v19 + 4);
  *(void *)((char *)a1 + vsub_100006F7C(v0 + 17) = *(void *)((char *)a2 + v17);
  return a1;
}

_OWORD *sub_10004D518(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F90C((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v12 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for AppExtensionIdentity(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
      uint64_t v9 = a1;
      uint64_t v10 = v6;
      uint64_t v11 = 1LL;
      goto LABEL_6;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for BuiltInInferenceProvider(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      uint64_t v9 = a1;
      uint64_t v10 = v6;
      uint64_t v11 = 0LL;
LABEL_6:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      goto LABEL_8;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

uint64_t sub_10004D664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004D670);
}

void sub_10004D670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_1000060B4(a1, a2, v4);
  }
  else {
    sub_10004E1F0();
  }
}

uint64_t sub_10004D6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004D6EC);
}

void sub_10004D6EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0LL);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    sub_100005FB0(a1, a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + sub_10000BCE4(*(void *)(v1 + 24)) = (a2 - 1);
    sub_10004E1F0();
  }

uint64_t type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(uint64_t a1)
{
  return sub_100047EF0( a1,  qword_10010D1F0,  (uint64_t)&nominal type descriptor for InferenceProviderManager.ConnectionCollection.Group);
}

uint64_t sub_10004D76C(uint64_t a1)
{
  uint64_t result = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10004D7EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      swift_bridgeObjectRetain(v14);
      uint64_t v15 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for AppExtensionIdentity(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = type metadata accessor for BuiltInInferenceProvider(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_10004D8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 8));
    v2 += *(int *)(sub_100003B20(&qword_10010D190) + 48);
    uint64_t v4 = type metadata accessor for AppExtensionIdentity(0LL);
  }

  else
  {
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v4 = type metadata accessor for BuiltInInferenceProvider(0LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
}

void *sub_10004D970(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    swift_bridgeObjectRetain(v11);
    uint64_t v12 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for AppExtensionIdentity(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for BuiltInInferenceProvider(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *sub_10004DA54(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F90C((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v11 = a2[1];
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
      uint64_t v12 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for AppExtensionIdentity(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      uint64_t v7 = type metadata accessor for BuiltInInferenceProvider(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

_OWORD *sub_10004DB58(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v11 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for AppExtensionIdentity(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for BuiltInInferenceProvider(0LL);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    uint64_t v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

_OWORD *sub_10004DC38(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F90C((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(sub_100003B20(&qword_10010D190) + 48);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for AppExtensionIdentity(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      uint64_t v7 = type metadata accessor for BuiltInInferenceProvider(0LL);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_10004DD30(uint64_t a1)
{
  uint64_t result = type metadata accessor for BuiltInInferenceProvider(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AppExtensionIdentity(319LL);
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v5, &unk_1000D9908, *(void *)(result - 8) + 64LL);
      v6[1] = v5;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v6);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10004DDC4(uint64_t a1)
{
  return sub_10004C578(a1, v1);
}

uint64_t sub_10004DDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003B20(&qword_10010C008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10004DE58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10004E10C(a1, a2, a3);
  sub_100030708(v3);
  sub_1000075C0();
}

_OWORD *sub_10004DE78(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10004DE8C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D304);
  *(void *)(v0 + swift_endAccess(v0 + 16) = v1;
  uint64_t v2 = sub_1000074EC(v1);
  return sub_10004B124(v2, v3, v4, v5);
}

uint64_t sub_10004DEE8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D314);
  *(void *)(v0 + swift_endAccess(v0 + 16) = v1;
  uint64_t v2 = sub_1000074EC(v1);
  return sub_10004B79C(v2, v3, v4, v5);
}

uint64_t sub_10004DF40()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_10000BE20(*(void *)(v3 + 16), &v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10004DF84(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_1000075C0();
}

void *sub_10004DFC0(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

void sub_10004DFFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10004E10C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  sub_1000075C0();
}

uint64_t sub_10004E030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E078(uint64_t a1, uint64_t a2)
{
  return sub_100005FB0(a1, a2, 1LL, v2);
}

uint64_t sub_10004E084@<X0>(uint64_t a1@<X8>)
{
  return swift_beginAccess(a1 + 112, v1, 33LL, 0LL);
}

uint64_t sub_10004E09C()
{
  return (*(uint64_t (**)(void, void))(v0[14] + 8LL))(v0[15], v0[13]);
}

uint64_t sub_10004E0B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 208) + 8LL))(v0, v1);
}

void sub_10004E0C8(void *a1)
{
}

uint64_t sub_10004E0D0()
{
  return sub_100005FB0(v0, 1LL, 1LL, v1);
}

uint64_t sub_10004E0E4()
{
  return type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0LL);
}

uint64_t sub_10004E0EC()
{
  return sub_10004A9B0(v0);
}

uint64_t sub_10004E0FC()
{
  return (*(uint64_t (**)(void, void))(v0[11] + 8LL))(v0[12], v0[10]);
}

uint64_t sub_10004E10C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100003B20(a3);
}

uint64_t sub_10004E11C()
{
  return v0;
}

uint64_t sub_10004E134(void *a1)
{
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = v1;
  return swift_retain(v1);
}

uint64_t sub_10004E144()
{
  return Logger.logObject.getter();
}

uint64_t sub_10004E14C()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

  ;
}

uint64_t sub_10004E16C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 328));
}

uint64_t sub_10004E178( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return v9(&a9, 0LL);
}

  ;
}

double sub_10004E198@<D0>(void *a1@<X8>)
{
  return sub_100049D14(v1, a1);
}

uint64_t sub_10004E1A4()
{
  return sub_1000070EC((__int128 *)(v0 - 144), v0 - 104);
}

uint64_t sub_10004E1B0()
{
  return sub_100020E28(v0 - 120, v0 - 160);
}

uint64_t sub_10004E1BC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10004E1C8(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_10004E1D0()
{
  return v0;
}

uint64_t sub_10004E1DC()
{
  return v0;
}

  ;
}

void sub_10004E1FC(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v83 = a2;
  __int128 v84 = a3;
  sub_100003B20(&qword_10010BFE8);
  sub_10000C240();
  __chkstk_darwin(v6);
  sub_100022518();
  uint64_t v77 = v7;
  uint64_t v78 = type metadata accessor for InferenceError.Context(0LL);
  uint64_t v76 = *(void *)(v78 - 8);
  sub_10000C240();
  __chkstk_darwin(v8);
  sub_100022518();
  uint64_t v74 = v9;
  uint64_t v10 = type metadata accessor for InferenceError(0LL);
  uint64_t v80 = *(void *)(v10 - 8);
  uint64_t v81 = v10;
  sub_10000C240();
  __chkstk_darwin(v11);
  sub_10000C110();
  uint64_t v75 = v12 - v13;
  __chkstk_darwin(v14);
  unint64_t v79 = (char *)&v73 - v15;
  sub_100003B20(&qword_10010BFF8);
  sub_10000C240();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(a1 - 8);
  __chkstk_darwin(v17);
  sub_10000C110();
  uint64_t v23 = (char *)(v21 - v22);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v73 - v25;
  uint64_t v27 = type metadata accessor for ModelManagerError(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_10000C110();
  uint64_t v31 = (char *)(v29 - v30);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v73 - v33;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v82 = v4;
  uint64_t v36 = v4;
  uint64_t v38 = v37;
  v35(v26, v36, a1);
  if ((swift_dynamicCast(v19, v26, a1, v38, 6LL) & 1) == 0)
  {
    sub_100030ADC((uint64_t)v19, 1LL);
    sub_10003EDB4((uint64_t)v19, &qword_10010BFF8);
LABEL_7:
    v35(v23, v82, a1);
    uint64_t v47 = (uint64_t)v83;
    uint64_t v48 = _getErrorEmbeddedNSError<A>(_:)(v23, a1, v83);
    uint64_t v49 = v84;
    if (v48)
    {
      uint64_t v50 = v48;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, a1);
    }

    else
    {
      uint64_t v50 = sub_1000302B0(a1, v47);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v51, v23, a1);
    }

    uint64_t v52 = (void *)_convertErrorToNSError(_:)(v50);
    swift_errorRelease(v50);
    sub_10004E7B8(v52, v49);

    return;
  }

  sub_100030ADC((uint64_t)v19, 0LL);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v34, v19, v38);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v31, v34, v38);
  if ((*(unsigned int (**)(char *, uint64_t))(v28 + 88))(v31, v38) != enum case for ModelManagerError.inferenceError(_:))
  {
    uint64_t v46 = *(void (**)(char *, uint64_t))(v28 + 8);
    v46(v34, v38);
    v46(v31, v38);
    goto LABEL_7;
  }

  uint64_t v83 = v34;
  (*(void (**)(char *, uint64_t))(v28 + 96))(v31, v38);
  uint64_t v40 = v79;
  uint64_t v39 = v80;
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 32);
  uint64_t v42 = v81;
  uint64_t v43 = v41(v79, (uint64_t)v31, v81);
  uint64_t v44 = v77;
  InferenceError.context.getter(v43);
  uint64_t v45 = v78;
  if (sub_1000060B4(v44, 1LL, v78) == 1)
  {
    sub_10003EDB4(v44, &qword_10010BFE8);
  }

  else
  {
    uint64_t v53 = v74;
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v74, v44, v45);
    uint64_t v55 = InferenceError.Context.domain.getter(v54);
    unint64_t v57 = v56;
    swift_bridgeObjectRelease(v56);
    uint64_t v58 = HIBYTE(v57) & 0xF;
    if ((v57 & 0x2000000000000000LL) == 0) {
      uint64_t v58 = v55 & 0xFFFFFFFFFFFFLL;
    }
    if (v58)
    {
      uint64_t v85 = 0LL;
      unint64_t v86 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      uint64_t v59 = swift_bridgeObjectRelease(v86);
      uint64_t v85 = 0x636E657265666E49LL;
      unint64_t v86 = 0xEF2E726F72724565LL;
      v87._countAndFlagsBits = InferenceError.caseName.getter(v59);
      sub_10004E90C(v87);
      swift_bridgeObjectRelease(v55);
      v60._countAndFlagsBits = 46LL;
      v60._object = (void *)0xE100000000000000LL;
      String.append(_:)(v60);
      v88._countAndFlagsBits = InferenceError.Context.domain.getter(v61);
      sub_10004E90C(v88);
      uint64_t v62 = swift_bridgeObjectRelease(v55);
      uint64_t v63 = v45;
      uint64_t v64 = v85;
      uint64_t v65 = v86;
      uint64_t v66 = InferenceError.Context.code.getter(v62);
      sub_10004E704(v64, v65, v66, v84);
      swift_bridgeObjectRelease(v65);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v53, v63);
      sub_10004E8FC();
      sub_10004E8EC();
      return;
    }

    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v53, v45);
  }

  uint64_t v67 = v84;
  uint64_t v68 = v75;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v75, v40, v42);
  unint64_t v69 = sub_10004E838();
  uint64_t v70 = sub_1000302B0(v42, v69);
  v41(v71, v68, v42);
  uint64_t v72 = (void *)_convertErrorToNSError(_:)(v70);
  sub_10004E7B8(v72, v67);

  sub_10004E8FC();
  sub_10004E8EC();
  swift_errorRelease(v70);
}

uint64_t sub_10004E704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError(0LL);
  uint64_t v9 = swift_allocBox();
  __int128 v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  static Buildable.with(_:)( sub_10004E8D0,  v13,  v8,  &protocol witness table for GenerativeFunctionsInstrumentationError.GenericError);
  *a4 = v9;
  uint64_t v10 = enum case for GenerativeFunctionsInstrumentationError.genericError(_:);
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationError(0LL);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(a4, v10, v11);
}

uint64_t sub_10004E7B8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 domain];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  sub_10004E704(v5, v7, (uint64_t)[a1 code], a2);
  return swift_bridgeObjectRelease(v7);
}

unint64_t sub_10004E838()
{
  unint64_t result = qword_10010C7B0;
  if (!qword_10010C7B0)
  {
    uint64_t v1 = type metadata accessor for InferenceError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InferenceError, v1);
    atomic_store(result, (unint64_t *)&qword_10010C7B0);
  }

  return result;
}

uint64_t sub_10004E878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GenerativeFunctionsInstrumentationError.GenericError.code.setter(a4, 0LL);
}

uint64_t sub_10004E8D0(uint64_t a1)
{
  return sub_10004E878(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10004E8EC()
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 8))(*(void *)(v2 - 112), v0);
}

uint64_t sub_10004E8FC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void sub_10004E90C(Swift::String a1)
{
}

uint64_t AssetInferenceProvider.id.getter()
{
  return sub_100030C8C();
}

uint64_t AssetInferenceProvider.instanceID.getter()
{
  return sub_100030C8C();
}

void AssetInferenceProvider.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v2;
  sub_100022418();
  sub_10004FB5C(a1, v4);
  sub_10000C1E8();
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v2 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v6, v5);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*(_BYTE *)(v2 + 32) & 1);
  sub_10004E1F0();
}

uint64_t static AssetInferenceProvider.__derived_struct_equals(_:_:)(uint64_t a1)
{
  uint64_t v3 = sub_10004FB2C(a1);
  BOOL v7 = v7 && v4 == v6;
  if (!v7)
  {
    char v8 = sub_100021EB8(v3, v4, v5, v6);
    char v9 = 0;
    if ((v8 & 1) == 0) {
      return v9 & 1;
    }
  }

  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v1 + 24);
  if (!v10)
  {
    if (!v11)
    {
LABEL_16:
      char v9 = ((*(_BYTE *)(v2 + 32) & 1) == 0) ^ *(_BYTE *)(v1 + 32);
      return v9 & 1;
    }

LABEL_15:
    char v9 = 0;
    return v9 & 1;
  }

  if (!v11) {
    goto LABEL_15;
  }
  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v13 = *(void *)(v1 + 16);
  if (v12 == v13 && v10 == v11) {
    goto LABEL_16;
  }
  char v15 = sub_100021EB8(v12, v10, v13, v11);
  char v9 = 0;
  if ((v15 & 1) != 0) {
    goto LABEL_16;
  }
  return v9 & 1;
}

  sub_10000C1B0(v41);
  sub_10000C1B0(v48);
  sub_1000304C4(v23, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

void AssetInferenceProvider.hashValue.getter(uint64_t a1)
{
}

void sub_10004EA94(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100022418();
  uint64_t v4 = sub_100030C8C();
  sub_10004FB5C(v4, v5);
  sub_10000C1E8();
  uint64_t v6 = *(void *)(v1 + 16);
  sub_100022944();
  uint64_t v7 = sub_100030C8C();
  sub_10004F6F8(v7, v8);
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = *(void *)(v2 + 24);
  sub_100022944();
  uint64_t v10 = sub_100030C8C();
  sub_10004F648(v10, v11);
  swift_bridgeObjectRelease(v9);
  uint64_t v12 = (int *)type metadata accessor for ModelCatalogAsset(0LL);
  uint64_t v13 = sub_10004FB90();
  uint64_t v14 = sub_10000BAC0( &qword_10010B7E8,  (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost,  (uint64_t)&protocol conformance descriptor for AssetCost);
  dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[8]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[9]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[10]));
  sub_1000496F8();
}

void sub_10004EB70(uint64_t a1)
{
  uint64_t v3 = sub_10004FB2C(a1);
  BOOL v7 = v7 && v4 == v6;
  if (v7 || (sub_100021EB8(v3, v4, v5, v6) & 1) != 0)
  {
    sub_10004F494(*(void **)(v2 + 16), *(void **)(v1 + 16));
    if ((v8 & 1) != 0 && (sub_10004F550(*(void *)(v2 + 24), *(void *)(v1 + 24)) & 1) != 0)
    {
      uint64_t v9 = type metadata accessor for ModelCatalogAsset(0LL);
      static AssetCost.== infix(_:_:)(v2 + *(int *)(v9 + 28), v1 + *(int *)(v9 + 28));
    }
  }

  sub_10004E1F0();
}

void sub_10004EC30(uint64_t a1)
{
}

void sub_10004EC60(uint64_t a1)
{
}

unint64_t sub_10004EC90()
{
  unint64_t result = qword_10010D338;
  if (!qword_10010D338)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AssetInferenceProvider,  &type metadata for AssetInferenceProvider);
    atomic_store(result, (unint64_t *)&qword_10010D338);
  }

  return result;
}

void *sub_10004ECCC()
{
  return &protocol witness table for String;
}

uint64_t sub_10004ECD8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t destroy for AssetInferenceProvider(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_endAccess(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 3sub_10003318C(v0 + 2) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_endAccess(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 3sub_10003318C(v0 + 2) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 3sub_10003318C(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_endAccess(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_endAccess(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 3sub_10003318C(v0 + 2) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetInferenceProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(sub_10000BE20(*(void *)(v0 + 40), v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10000BE20(*(void *)(v0 + 40), v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10000BE20(*(void *)(v0 + 40), v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetInferenceProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_endAccess(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 3sub_10003318C(v0 + 2) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + sub_100006F7C(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_100006F7C(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AssetInferenceProvider()
{
  return &type metadata for AssetInferenceProvider;
}

void *sub_10004EEBC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    a1[2] = v8;
    a1[3] = v9;
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for AssetCost(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }

  return v4;
}

uint64_t sub_10004EFA8(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for AssetCost(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_10004F000(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for AssetCost(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + vsub_100006F7C(v0 + 14) = *((_BYTE *)a2 + v14);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

void *sub_10004F0C0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for AssetCost(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *sub_10004F198(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AssetCost(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v1sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = *((_BYTE *)a2 + v11);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

void *sub_10004F224(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for AssetCost(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + vsub_100006F7C(v0 + 14) = *((_BYTE *)a2 + v14);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t sub_10004F2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004F2E4);
}

void sub_10004F2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10004FB64();
    sub_10004E1F0();
  }

  else
  {
    uint64_t v6 = sub_10004FB90();
    sub_10004FB20(a1 + *(int *)(a3 + 28), a2, v6);
  }

uint64_t sub_10004F334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004F340);
}

void sub_10004F340()
{
  if (v3)
  {
    *(void *)(v1 + sub_100006F7C(v0 + 8) = (v0 - 1);
    sub_10004E1F0();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_10004FB90();
    sub_100021FBC(v1 + *(int *)(v4 + 28), v0, v0, v5);
  }

uint64_t type metadata accessor for ModelCatalogAsset(uint64_t a1)
{
  return sub_100047EF0(a1, qword_10010D398, (uint64_t)&nominal type descriptor for ModelCatalogAsset);
}

uint64_t sub_10004F3A0(uint64_t a1)
{
  v4[0] = &unk_1000D9A48;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for AssetCost(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_1000D9A60;
    void v4[5] = &unk_1000D9A60;
    v4[6] = &unk_1000D9A60;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_10004F438(uint64_t a1)
{
}

uint64_t sub_10004F468()
{
  return sub_10000BAC0(&qword_10010D3E8, type metadata accessor for ModelCatalogAsset, (uint64_t)&unk_1000D9A78);
}

void sub_10004F494(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 == a2[2]
    && v2
    && a1 != a2
    && ((uint64_t v5 = a1[4], v6 = a1[5], v7 = a2[4], v8 = a2[5], v5 == v7) ? (v9 = v6 == v8) : (v9 = 0),
        (v9 || (sub_100021EB8(v5, v6, v7, v8) & 1) != 0) && v2 != 1))
  {
    uint64_t v10 = a1 + 7;
    uint64_t v11 = a2 + 7;
    unint64_t v12 = 1LL;
    while (v12 < v2)
    {
      uint64_t v13 = *(v10 - 1);
      uint64_t v14 = *v10;
      uint64_t v15 = *(v11 - 1);
      uint64_t v16 = *v11;
      BOOL v17 = v13 == v15 && v14 == v16;
      if (v17 || (sub_100021EB8(v13, v14, v15, v16) & 1) != 0)
      {
        ++v12;
        v10 += 2;
        v11 += 2;
        if (v2 != v12) {
          continue;
        }
      }

      goto LABEL_18;
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    sub_10004E1F0();
  }

uint64_t sub_10004F550(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    unint64_t v3 = (unsigned __int8 *)(a1 + 64);
    uint64_t v4 = (unsigned __int8 *)(a2 + 64);
    do
    {
      uint64_t v5 = *((void *)v3 - 4);
      uint64_t v6 = *((void *)v3 - 3);
      uint64_t v8 = *((void *)v3 - 2);
      uint64_t v7 = *((void *)v3 - 1);
      int v9 = *v3;
      uint64_t v10 = *((void *)v4 - 4);
      uint64_t v11 = *((void *)v4 - 3);
      uint64_t v13 = *((void *)v4 - 2);
      uint64_t v12 = *((void *)v4 - 1);
      int v14 = *v4;
      BOOL v15 = v5 == v10 && v6 == v11;
      if (!v15 && (sub_100021EB8(v5, v6, v10, v11) & 1) == 0) {
        return 0LL;
      }
      if (v7)
      {
        if (!v12) {
          return 0LL;
        }
        if (v8 == v13 && v7 == v12)
        {
          if (v9 != v14) {
            return 0LL;
          }
          goto LABEL_22;
        }

        char v17 = sub_100021EB8(v8, v7, v13, v12);
        uint64_t result = 0LL;
        if ((v17 & 1) == 0) {
          return result;
        }
      }

      else
      {
        uint64_t result = 0LL;
        if (v12) {
          return result;
        }
      }

      if (((v9 ^ v14) & 1) != 0) {
        return result;
      }
LABEL_22:
      v4 += 40;
      v3 += 40;
      --v2;
    }

    while (v2);
  }

  return 1LL;
}

void sub_10004F648(uint64_t a1, uint64_t a2)
{
  if (v2)
  {
    uint64_t v5 = (Swift::UInt8 *)(v4 + 64);
    do
    {
      uint64_t v7 = *((void *)v5 - 4);
      uint64_t v6 = *((void *)v5 - 3);
      uint64_t v9 = *((void *)v5 - 2);
      uint64_t v8 = *((void *)v5 - 1);
      Swift::UInt8 v10 = *v5;
      sub_100022418();
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(v3, v7, v6);
      if (v8)
      {
        Hasher._combine(_:)(1u);
        sub_100022418();
        sub_10004FB5C(v3, v9);
        sub_10000C1E8();
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      v5 += 40;
      Hasher._combine(_:)(v10);
      sub_10000C1E8();
      swift_bridgeObjectRelease(v6);
      --v2;
    }

    while (v2);
  }

void sub_10004F6F8(uint64_t a1, uint64_t a2)
{
  if (v2)
  {
    uint64_t v5 = v4 + 40;
    do
    {
      uint64_t v6 = *(void *)(v5 - 8);
      sub_100022418();
      sub_10004FB5C(v3, v6);
      sub_10000C1E8();
      v5 += 16LL;
      --v2;
    }

    while (v2);
  }

  sub_1000496F8();
}

uint64_t *sub_10004F744(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for FilePath(0LL);
    Swift::UInt8 v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t sub_10004F7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for FilePath(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_10004F828(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for FilePath(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *sub_10004F898(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  Swift::UInt8 v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for FilePath(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10004F914(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for FilePath(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_10004F970(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  Swift::UInt8 v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for FilePath(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_10004F9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004F9E8);
}

void sub_10004F9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10004FB64();
    sub_10004E1F0();
  }

  else
  {
    uint64_t v6 = type metadata accessor for FilePath(0LL);
    sub_10004FB20(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_10004FA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004FA48);
}

void sub_10004FA48()
{
  if (v3)
  {
    *(void *)(v1 + sub_100006F7C(v0 + 8) = (v0 - 1);
    sub_10004E1F0();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = type metadata accessor for FilePath(0LL);
    sub_100021FBC(v1 + *(int *)(v4 + 20), v0, v0, v5);
  }

uint64_t type metadata accessor for ModelCatalogAssetVersionedData(uint64_t a1)
{
  return sub_100047EF0(a1, qword_10010D448, (uint64_t)&nominal type descriptor for ModelCatalogAssetVersionedData);
}

uint64_t sub_10004FAAC(uint64_t a1)
{
  v4[0] = &unk_1000D9A48;
  uint64_t result = type metadata accessor for FilePath(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10004FB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000060B4(a1, a2, a3);
}

uint64_t sub_10004FB2C(uint64_t a1)
{
  return *(void *)a1;
}

void sub_10004FB48(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10004FB5C(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_10004FB64()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(vsub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = -1;
  }
  return (v1 + 1);
}

  ;
}

uint64_t sub_10004FB90()
{
  return type metadata accessor for AssetCost(0LL);
}

void *sub_10004FB98(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_10004FBA4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010D480);
  sub_100003BA0(v0, (uint64_t)qword_10010D480);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_10004FC14()
{
  *(void *)(v0 + 11sub_10003318C(v0 + 2) = [(id)objc_opt_self(TRIClient) clientWithIdentifier:328];
  return v0;
}

BOOL sub_10004FC58()
{
  uint64_t v2 = objc_autoreleasePoolPush();
  NSString v3 = sub_100050624();
  id v4 = [v1 experimentIdentifiersWithNamespaceName:v3];

  if (v4) {
  objc_autoreleasePoolPop(v0);
  }
  return v4 != 0LL;
}

id sub_10004FCCC()
{
  uint64_t v2 = objc_autoreleasePoolPush();
  NSString v3 = sub_100050624();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v1 levelForFactor:v3 withNamespaceName:v4];

  if (v5)
  {
    id v6 = [v5 longValue];
  }

  else
  {
    id v6 = 0LL;
  }

  objc_autoreleasePoolPop(v0);
  return v6;
}

void sub_10004FD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = objc_autoreleasePoolPush();
  sub_10004FF30(v4, a1, a2, v4, a3, a4);
  objc_autoreleasePoolPop(v9);
  if (qword_10010B0B8 != -1) {
    swift_once(&qword_10010B0B8, sub_10004FBA4);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v10, (uint64_t)qword_10010D480);
  uint64_t v11 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    sub_100050648();
    uint64_t v14 = sub_100050638();
    v17[0] = v14;
    MEMORY[0] = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_100015EF8(a1, a2, v17);
    uint64_t v16 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17);
    swift_bridgeObjectRelease_n(a2, 3LL);
    sub_10002FE40((void *)&_mh_execute_header, v12, v13, "Added update handler for namespace %s");
    swift_arrayDestroy(v14, 1LL);
    sub_10000BCC4(v14);
    sub_10000BCC4(0LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

void sub_10004FF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void **)(a1 + 112);
  NSString v12 = String._bridgeToObjectiveC()();
  os_log_type_t v13 = (void *)swift_allocObject(&unk_100103F40, 56LL, 7LL);
  __int128 v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  void v13[5] = a5;
  void v13[6] = a6;
  v17[4] = sub_10005052C;
  uint64_t v18 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  uint64_t v17[2] = sub_10005036C;
  void v17[3] = &unk_100103F58;
  uint64_t v14 = _Block_copy(v17);
  uint64_t v15 = v18;
  swift_bridgeObjectRetain(a3);
  swift_retain();
  swift_retain();
  id v16 = objc_msgSend(v11, "addUpdateHandlerForNamespaceName:usingBlock:", v12, v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  swift_unknownObjectRelease(v16);
}

double sub_100050058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100003B20(&qword_10010B208);
  __chkstk_darwin(v11);
  os_log_type_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  sub_100005FB0((uint64_t)v13, 1LL, 1LL, v14);
  uint64_t v15 = (void *)swift_allocObject(&unk_100103F90, 72LL, 7LL);
  void v15[2] = 0LL;
  void v15[3] = 0LL;
  v15[4] = a2;
  void v15[5] = a3;
  v15[6] = a4;
  v15[7] = a5;
  v15[8] = a6;
  swift_bridgeObjectRetain(a3);
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_100003854((uint64_t)v13, (uint64_t)&unk_10010D588, (uint64_t)v15);
  *(void *)&double result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_10005014C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  return swift_task_switch(sub_10005016C, 0LL, 0LL);
}

uint64_t sub_10005016C()
{
  if (qword_10010B0B8 != -1) {
    swift_once(&qword_10010B0B8, sub_10004FBA4);
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v3, (uint64_t)qword_10010D480);
  uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
  id v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v1[4];
  if (v7)
  {
    uint64_t v9 = v1[3];
    sub_100050648();
    uint64_t v10 = sub_100050638();
    uint64_t v13 = v10;
    _DWORD *v0 = 136315138;
    swift_bridgeObjectRetain(v8);
    sub_100015EF8(v9, v8, &v13);
    v1[2] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3);
    swift_bridgeObjectRelease_n(v8, 3LL);
    sub_10002FE40((void *)&_mh_execute_header, v5, v6, "Received update for namespace %s");
    swift_arrayDestroy(v10, 1LL);
    sub_10000BCC4(v10);
    sub_10000BCC4((uint64_t)v0);
  }

  else
  {
    swift_bridgeObjectRelease_n(v1[4], 2LL);
  }

  return swift_task_switch(sub_100050304, v1[5], 0LL);
}

uint64_t sub_100050304()
{
  uint64_t v1 = (int *)v0[6];
  [*(id *)(v0[5] + 112) refresh];
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000147D0;
  return v4();
}

uint64_t sub_10005036C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1000503B4()
{
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TrialFrameworkProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC13modelmanagerd22TrialFrameworkProvider);
}

uint64_t sub_1000503F8(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = *v2;
  v3[4] = *v2;
  return swift_task_switch(sub_100050414, v4, 0LL);
}

uint64_t sub_100050414()
{
  BOOL v1 = sub_10004FC58();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1);
}

uint64_t sub_10005044C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  v5[5] = a4;
  void v5[2] = a1;
  v5[3] = a2;
  uint64_t v6 = *v4;
  v5[6] = *v4;
  return swift_task_switch(sub_10005046C, v6, 0LL);
}

uint64_t sub_10005046C()
{
  id v1 = sub_10004FCCC();
  return (*(uint64_t (**)(id, void))(v0 + 8))(v1, v2 & 1);
}

uint64_t sub_1000504A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  v5[5] = a4;
  void v5[2] = a1;
  v5[3] = a2;
  uint64_t v6 = *v4;
  v5[6] = *v4;
  return swift_task_switch(sub_1000504C8, v6, 0LL);
}

uint64_t sub_1000504C8()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000504F8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

double sub_10005052C(uint64_t a1)
{
  return sub_100050058(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10005053C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10003318C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100016BD0(0, v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005054C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100050554()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100050590(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_10010D584);
  *(void *)(v2 + swift_endAccess(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000B5F8;
  return sub_10005014C(a1, v4, v5, v6, v7, v8, v9, v10);
}

NSString sub_100050624()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100050638()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_100050648()
{
  return swift_slowAlloc(12LL, -1LL);
}

#error "100050844: call analysis failed (funcsize=150)"
uint64_t sub_1000508B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  void v34[2];
  char *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void v40[6];
  uint64_t v41;
  uint64_t v6 = type metadata accessor for AssetCost(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a3, a1, v6);
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = __CocoaSet.makeIterator()(v10);
    uint64_t v12 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    double result = Set.Iterator.init(_cocoa:)(v11, v12, v13);
    a2 = v40[1];
    uint64_t v37 = v40[2];
    uint64_t v15 = v40[3];
    uint64_t v16 = v40[4];
    char v17 = v40[5];
  }

  else
  {
    uint64_t v18 = -1LL << *(_BYTE *)(a2 + 32);
    uint64_t v19 = *(void *)(a2 + 56);
    uint64_t v37 = a2 + 56;
    uint64_t v20 = ~v18;
    uint64_t v21 = -v18;
    if (v21 < 64) {
      uint64_t v22 = ~(-1LL << v21);
    }
    else {
      uint64_t v22 = -1LL;
    }
    char v17 = v22 & v19;
    double result = swift_bridgeObjectRetain(a2);
    uint64_t v15 = v20;
    uint64_t v16 = 0LL;
  }

  v34[1] = v15;
  uint64_t v36 = (unint64_t)(v15 + 64) >> 6;
  uint64_t v35 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v39 = a2;
  if (a2 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v17)
    {
      uint64_t v23 = (v17 - 1) & v17;
      uint64_t v24 = __clz(__rbit64(v17)) | (v16 << 6);
      uint64_t v25 = v16;
      goto LABEL_32;
    }

    uint64_t v30 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v30 >= v36) {
      return sub_1000212AC(v39);
    }
    uint64_t v31 = *(void *)(v37 + 8 * v30);
    uint64_t v25 = v16 + 1;
    if (!v31)
    {
      uint64_t v25 = v16 + 2;
      if (v16 + 2 >= v36) {
        return sub_1000212AC(v39);
      }
      uint64_t v31 = *(void *)(v37 + 8 * v25);
      if (!v31)
      {
        uint64_t v25 = v16 + 3;
        if (v16 + 3 >= v36) {
          return sub_1000212AC(v39);
        }
        uint64_t v31 = *(void *)(v37 + 8 * v25);
        if (!v31)
        {
          uint64_t v25 = v16 + 4;
          if (v16 + 4 >= v36) {
            return sub_1000212AC(v39);
          }
          uint64_t v31 = *(void *)(v37 + 8 * v25);
          if (!v31)
          {
            uint64_t v25 = v16 + 5;
            if (v16 + 5 >= v36) {
              return sub_1000212AC(v39);
            }
            uint64_t v31 = *(void *)(v37 + 8 * v25);
            if (!v31)
            {
              uint64_t v32 = v16 + 6;
              while (v32 < v36)
              {
                uint64_t v31 = *(void *)(v37 + 8 * v32++);
                if (v31)
                {
                  uint64_t v25 = v32 - 1;
                  a2 = v39;
                  goto LABEL_31;
                }
              }

              return sub_1000212AC(v39);
            }
          }
        }
      }
    }

uint64_t sub_100050C18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t result = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    uint64_t v3 = v34[1];
    uint64_t v31 = v34[2];
    uint64_t v9 = v34[3];
    int64_t v10 = v34[4];
    unint64_t v11 = v34[5];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v13 = ~v12;
    uint64_t v14 = -v12;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v11 = v15 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain(a1);
    uint64_t v9 = v13;
    int64_t v10 = 0LL;
  }

  int64_t v30 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v11)
  {
    uint64_t v16 = (v11 - 1) & v11;
    unint64_t v17 = __clz(__rbit64(v11)) | (v10 << 6);
    goto LABEL_27;
  }

  int64_t v22 = v10;
  if (!__OFADD__(v10++, 1LL))
  {
    if (v10 < v30)
    {
      unint64_t v24 = *(void *)(v31 + 8 * v10);
      if (v24)
      {
LABEL_26:
        uint64_t v16 = (v24 - 1) & v24;
        unint64_t v17 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_27:
        uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
        swift_retain(v21);
        for (; v21; uint64_t v16 = v11)
        {
          uint64_t v26 = *a2;
          swift_retain(v21);
          swift_retain(a3);
          uint64_t v27 = swift_bridgeObjectRetain(v26);
          char v28 = sub_100051E18(v27, v21, a3);
          swift_bridgeObjectRelease(v26);
          if ((v28 & 1) != 0) {
            break;
          }
          uint64_t result = swift_release(v21);
          unint64_t v11 = v16;
          if ((v3 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v18 = __CocoaSet.Iterator.next()(result);
          if (!v18) {
            goto LABEL_39;
          }
          uint64_t v19 = v18;
          v34[0] = v18;
          uint64_t v20 = type metadata accessor for InferenceProviderAsset(0LL);
          swift_unknownObjectRetain(v19);
          swift_dynamicCast(&v35, v34, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
          uint64_t v21 = v35;
          swift_unknownObjectRelease(v19);
        }

        goto LABEL_38;
      }

      int64_t v25 = v10 + 1;
      if (v10 + 1 < v30)
      {
        unint64_t v24 = *(void *)(v31 + 8 * v25);
        if (v24) {
          goto LABEL_25;
        }
        int64_t v25 = v10 + 2;
        if (v10 + 2 >= v30) {
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v31 + 8 * v25);
        if (v24)
        {
LABEL_25:
          int64_t v10 = v25;
          goto LABEL_26;
        }

        int64_t v25 = v10 + 3;
        if (v10 + 3 < v30)
        {
          unint64_t v24 = *(void *)(v31 + 8 * v25);
          if (v24) {
            goto LABEL_25;
          }
          v10 += 4LL;
          if (v10 < v30)
          {
            unint64_t v24 = *(void *)(v31 + 8 * v10);
            if (!v24)
            {
              int64_t v29 = v22 + 6;
              while (v29 < v30)
              {
                unint64_t v24 = *(void *)(v31 + 8 * v29++);
                if (v24)
                {
                  int64_t v10 = v29 - 1;
                  goto LABEL_26;
                }
              }

LABEL_37:
    uint64_t v21 = 0LL;
LABEL_38:
    sub_1000212AC(v3);
    swift_release(a3);
    return v21;
  }

  __break(1u);
  return result;
}

              sub_1000212AC(v2);
              uint64_t v55 = (char *)&dword_10010DA58 + dword_10010DA58;
              uint64_t v50 = (void *)swift_task_alloc(unk_10010DA5C);
              *(void *)(v0 + 176) = v50;
              *uint64_t v50 = v0;
              v50[1] = sub_1000525D0;
              ((void (*)(void, void))v55)(0LL, 0LL);
              return;
            }
          }
        }
      }
    }

    sub_10002F90C((uint64_t)v57, type metadata accessor for ModelCatalogAsset);
    if (v10) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v13 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_42;
    }
    if (v13 >= v51) {
      goto LABEL_39;
    }
    ++v12;
    if (!*(void *)(v50 + 8 * v13))
    {
      uint64_t v12 = v13 + 1;
      sub_100085740();
      if (v14 == v15) {
        goto LABEL_39;
      }
      sub_100085724();
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        sub_100085740();
        if (v14 == v15) {
          goto LABEL_39;
        }
        sub_100085724();
        if (!v19)
        {
          uint64_t v12 = v18 + 3;
          sub_100085740();
          if (v14 == v15) {
            goto LABEL_39;
          }
          sub_100085724();
          if (!v21)
          {
            uint64_t v12 = v20 + 4;
            sub_100085740();
            if (v14 == v15) {
              goto LABEL_39;
            }
            sub_100085724();
            if (!v23) {
              break;
            }
          }
        }
      }
    }

void sub_100050F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    uint64_t v8 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t v10 = Set.Iterator.init(_cocoa:)(v7, v8, v9);
    uint64_t v5 = v39[1];
    uint64_t v37 = v39[2];
    uint64_t v11 = v39[3];
    int64_t v12 = v39[4];
    unint64_t v13 = v39[5];
  }

  else
  {
    uint64_t v14 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v37 = a1 + 56;
    uint64_t v15 = ~v14;
    uint64_t v16 = -v14;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v13 = v17 & *(void *)(a1 + 56);
    uint64_t v10 = swift_bridgeObjectRetain(a1);
    uint64_t v11 = v15;
    int64_t v12 = 0LL;
  }

  int64_t v36 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    int64_t v38 = v12;
    if ((v5 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v20 = __CocoaSet.Iterator.next()(v10);
    if (!v20) {
      goto LABEL_43;
    }
    uint64_t v21 = v20;
    v39[0] = v20;
    uint64_t v22 = type metadata accessor for InferenceProviderAsset(0LL);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v40, v39, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
    uint64_t v23 = v40;
    uint64_t v24 = swift_unknownObjectRelease(v21);
    uint64_t v18 = v13;
    if (!v23) {
      goto LABEL_43;
    }
LABEL_34:
    uint64_t v28 = InferenceProviderAssetDescriptor.identifier.getter(v24);
    if (v28 == a2 && v29 == a3)
    {
      swift_bridgeObjectRelease(a3);
      goto LABEL_43;
    }

    uint64_t v31 = v29;
    uint64_t v32 = a2;
    uint64_t v33 = a2;
    uint64_t v34 = a3;
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v33, a3, 0LL);
    swift_bridgeObjectRelease(v31);
    if ((v35 & 1) != 0)
    {
      a3 = v34;
LABEL_43:
      sub_1000212AC(v5);
      swift_bridgeObjectRelease(a3);
      return;
    }

    swift_release(v23);
    unint64_t v13 = v18;
    a3 = v34;
    a2 = v32;
  }

  if (v13)
  {
    uint64_t v18 = (v13 - 1) & v13;
    unint64_t v19 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_33:
    uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
    uint64_t v24 = swift_retain();
    if (!v23) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }

  int64_t v25 = v12 + 1;
  if (!__OFADD__(v12, 1LL))
  {
    if (v25 >= v36) {
      goto LABEL_43;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v12;
    if (!v26)
    {
      int64_t v12 = v25 + 1;
      if (v25 + 1 >= v36) {
        goto LABEL_43;
      }
      unint64_t v26 = *(void *)(v37 + 8 * v12);
      if (!v26)
      {
        int64_t v12 = v25 + 2;
        if (v25 + 2 >= v36) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(v37 + 8 * v12);
        if (!v26)
        {
          int64_t v12 = v25 + 3;
          if (v25 + 3 >= v36) {
            goto LABEL_43;
          }
          unint64_t v26 = *(void *)(v37 + 8 * v12);
          if (!v26)
          {
            int64_t v12 = v25 + 4;
            if (v25 + 4 >= v36) {
              goto LABEL_43;
            }
            unint64_t v26 = *(void *)(v37 + 8 * v12);
            if (!v26)
            {
              int64_t v27 = v38 + 6;
              while (v27 < v36)
              {
                unint64_t v26 = *(void *)(v37 + 8 * v27++);
                if (v26)
                {
                  int64_t v12 = v27 - 1;
                  goto LABEL_32;
                }
              }

              goto LABEL_43;
            }
          }
        }
      }
    }

LABEL_32:
    uint64_t v18 = (v26 - 1) & v26;
    unint64_t v19 = __clz(__rbit64(v26)) + (v12 << 6);
    goto LABEL_33;
  }

  __break(1u);
}

            int64_t v25 = (v33 - 1) & v33;
            unint64_t v26 = __clz(__rbit64(v33)) + (v27 << 6);
          }

          uint64_t v31 = *(void *)(*(void *)(v55 + 48) + 8 * v26);
          swift_retain();
          if (!v31) {
            goto LABEL_50;
          }
        }

        else
        {
          uint64_t v28 = __CocoaSet.Iterator.next()(v24);
          if (!v28) {
            goto LABEL_50;
          }
          uint64_t v29 = v28;
          Swift::String v60 = v28;
          int64_t v30 = type metadata accessor for InferenceProviderAsset(0LL);
          swift_unknownObjectRetain(v29);
          swift_dynamicCast(&v68, &v60, v52, v30, 7LL);
          uint64_t v31 = v68;
          swift_unknownObjectRelease(v29);
          int64_t v27 = v22;
          int64_t v25 = v20;
          if (!v31) {
            goto LABEL_50;
          }
        }

        char v35 = v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess( v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v62,  0LL,  0LL);
        sub_10002F8E0(v35, (uint64_t)v11, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        int64_t v36 = v59;
        uint64_t v37 = v59 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess( v59 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v61,  0LL,  0LL);
        sub_10002F8E0(v37, (uint64_t)v9, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        LOBYTE(v37) = v56(v11, v9);
        sub_10002F90C((uint64_t)v9, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_10002F90C((uint64_t)v11, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        if ((v37 & 1) != 0)
        {
          swift_release(v36);
          uint64_t v59 = v31;
        }

        else
        {
          swift_release(v31);
        }

        uint64_t v22 = v27;
        uint64_t v20 = v25;
      }
    }
  }

  uint64_t v42 = v17 + 1;
  if (__OFADD__(v17, 1LL)) {
    goto LABEL_65;
  }
  uint64_t v43 = (unint64_t)(v18 + 64) >> 6;
  if (v42 < v43)
  {
    uint64_t v44 = *(void *)(v54 + 8 * v42);
    uint64_t v22 = v17 + 1;
    if (!v44)
    {
      uint64_t v22 = v17 + 2;
      if (v17 + 2 >= v43) {
        goto LABEL_63;
      }
      uint64_t v44 = *(void *)(v54 + 8 * v22);
      if (!v44)
      {
        uint64_t v22 = v17 + 3;
        if (v17 + 3 >= v43) {
          goto LABEL_63;
        }
        uint64_t v44 = *(void *)(v54 + 8 * v22);
        if (!v44)
        {
          uint64_t v22 = v17 + 4;
          if (v17 + 4 >= v43) {
            goto LABEL_63;
          }
          uint64_t v44 = *(void *)(v54 + 8 * v22);
          if (!v44)
          {
            uint64_t v22 = v17 + 5;
            if (v17 + 5 >= v43) {
              goto LABEL_63;
            }
            uint64_t v44 = *(void *)(v54 + 8 * v22);
            if (!v44)
            {
              uint64_t v48 = v17 + 6;
              do
              {
                if (v48 >= v43) {
                  goto LABEL_63;
                }
                uint64_t v44 = *(void *)(v54 + 8 * v48++);
              }

              while (!v44);
              uint64_t v22 = v48 - 1;
            }
          }
        }
      }
    }

    uint64_t v50 = v18;
    uint64_t v49 = v4;
    uint64_t v20 = (v44 - 1) & v44;
    uint64_t v21 = __clz(__rbit64(v44)) + (v22 << 6);
    goto LABEL_8;
  }

    uint64_t v15 = (v28 - 1) & v28;
    uint64_t v22 = __clz(__rbit64(v28)) + (v14 << 6);
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v12 << 6);
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

        uint64_t v14 = (v26 - 1) & v26;
        uint64_t v20 = __clz(__rbit64(v26)) + (v13 << 6);
      }

      uint64_t v4 = *(void *)(*(void *)(a4 + 48) + 8 * v20);
      swift_retain();
      if (!v4) {
        goto LABEL_59;
      }
    }

    a2 = a4;
    if (!v21) {
      break;
    }
    swift_retain();
    sub_1000CC9A0(v4, (uint64_t)v57, v59, v56, v55, v28, v29, v30);
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_release(v21);
    if ((v34 & 1) == 0 && (v32 & 0x8000000000000000LL) == 0) {
      goto LABEL_53;
    }
LABEL_54:
    swift_release(v4);
    a4 = a2;
  }

  if (!v59) {
    goto LABEL_54;
  }
  type metadata accessor for InferenceProviderAsset(0LL);
  char v35 = *v57;
  swift_retain();
  int64_t v36 = sub_100091114();
  swift_release(v35);
  uint64_t v32 = 0LL;
  if ((v36 & 1) != 0) {
    goto LABEL_53;
  }
  if (v59 == 1) {
    goto LABEL_54;
  }
  uint64_t v37 = a3[5];
  swift_retain();
  int64_t v38 = sub_100091114();
  swift_release(v37);
  if ((v38 & 1) != 0)
  {
    uint64_t v32 = 1LL;
    goto LABEL_53;
  }

  if (v59 == 2) {
    goto LABEL_54;
  }
  uint64_t v39 = a3[6];
  swift_retain();
  uint64_t v40 = sub_100091114();
  swift_release(v39);
  if ((v40 & 1) != 0)
  {
    uint64_t v32 = 2LL;
    goto LABEL_53;
  }

  if (v59 == 3) {
    goto LABEL_54;
  }
  uint64_t v41 = a3[7];
  swift_retain();
  uint64_t v42 = sub_100091114();
  swift_release(v41);
  if ((v42 & 1) == 0)
  {
    uint64_t v43 = 0LL;
    while (v59 - 4 != v43)
    {
      uint64_t v44 = a3[v43 + 8];
      swift_retain();
      uint64_t v49 = sub_100091114();
      swift_release(v44);
      ++v43;
      if ((v49 & 1) != 0)
      {
        uint64_t v32 = v43 + 3;
        if (v43 + 3 < 0) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
    }

    goto LABEL_54;
  }

  uint64_t v32 = 3LL;
LABEL_53:
  if (!_UnsafeBitSet.remove(_:)(v32)) {
    goto LABEL_54;
  }
  if (v50 != 1)
  {
    --v50;
    goto LABEL_54;
  }

  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) == 0)
  {
    swift_release(v4);
    sub_1000212AC(a2);
    return 0LL;
  }

    uint64_t v39 = sub_1000A85A4();
    sub_1000A8828(v39, enum case for DaemonSessionState.cancelled(_:));
    sub_1000A8754();
    sub_1000A8660();
    sub_1000A87B4();
    sub_10002257C(v2, v20);
    sub_1000A8804();
    swift_endAccess(v20);
    sub_1000A8834();
    sub_10002294C();
    swift_task_dealloc(v1);
    swift_task_dealloc(v12);
    return sub_10002FDE0(*(uint64_t (**)(void))(v0 + 8));
  }

  __break(1u);
  return result;
}

uint64_t sub_1000512A4(uint64_t a1, void *a2)
{
  uint64_t v26 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  while (1)
  {
LABEL_4:
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (i << 6);
    }

    else
    {
      int64_t v10 = i + 1;
      if (__OFADD__(i, 1LL)) {
        goto LABEL_41;
      }
      if (v10 >= v27)
      {
LABEL_39:
        swift_bridgeObjectRelease(a2);
        swift_release(a1);
        return 0LL;
      }

      unint64_t v11 = *(void *)(v26 + 8 * v10);
      ++i;
      if (!v11)
      {
        int64_t i = v10 + 1;
        if (v10 + 1 >= v27) {
          goto LABEL_39;
        }
        unint64_t v11 = *(void *)(v26 + 8 * i);
        if (!v11)
        {
          int64_t i = v10 + 2;
          if (v10 + 2 >= v27) {
            goto LABEL_39;
          }
          unint64_t v11 = *(void *)(v26 + 8 * i);
          if (!v11)
          {
            int64_t i = v10 + 3;
            if (v10 + 3 >= v27) {
              goto LABEL_39;
            }
            unint64_t v11 = *(void *)(v26 + 8 * i);
            if (!v11)
            {
              int64_t v12 = v10 + 4;
              if (v12 >= v27) {
                goto LABEL_39;
              }
              unint64_t v11 = *(void *)(v26 + 8 * v12);
              for (int64_t i = v12; !v11; ++v12)
              {
                int64_t i = v12 + 1;
                if (__OFADD__(v12, 1LL)) {
                  goto LABEL_42;
                }
                if (i >= v27) {
                  goto LABEL_39;
                }
                unint64_t v11 = *(void *)(v26 + 8 * i);
              }
            }
          }
        }
      }

      unint64_t v5 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (i << 6);
    }

    uint64_t v13 = a2[2];
    if (v13)
    {
      uint64_t v14 = (void *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      uint64_t v17 = a2[4];
      uint64_t v18 = a2[5];
      BOOL v19 = v17 == *v14 && v18 == v16;
      if (v19 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, *v14, v14[1], 0LL), (result & 1) != 0))
      {
LABEL_37:
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRelease(a2);
        swift_release(a1);
        return v15;
      }

      if (v13 != 1) {
        break;
      }
    }
  }

  uint64_t v20 = a2 + 7;
  uint64_t v21 = 1LL;
  while (1)
  {
    uint64_t v22 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    uint64_t v23 = *(v20 - 1);
    uint64_t v24 = *v20;
    if (v23 == v15 && v24 == v16) {
      goto LABEL_37;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v15, v16, 0LL);
    if ((result & 1) != 0) {
      goto LABEL_37;
    }
    v20 += 2;
    ++v21;
    if (v22 == v13) {
      goto LABEL_4;
    }
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1000514FC(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v49 - v10;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v13 = __CocoaSet.makeIterator()(v12);
    uint64_t v14 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t v16 = Set.Iterator.init(_cocoa:)(v13, v14, v15);
    a1 = v63;
    uint64_t v54 = v64;
    uint64_t v18 = v65;
    int64_t v17 = v66;
    unint64_t v19 = v67;
    if (v63 < 0)
    {
      int64_t v59 = v66;
      uint64_t v45 = __CocoaSet.Iterator.next()(v16);
      if (!v45) {
        goto LABEL_63;
      }
      uint64_t v46 = v45;
      uint64_t v50 = v18;
      uint64_t v49 = v4;
      v61[0] = v45;
      swift_unknownObjectRetain(v45);
      swift_dynamicCast(v62, v61, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
      uint64_t v23 = v62[0];
      uint64_t v24 = swift_unknownObjectRelease(v46);
      int v58 = 0;
      int64_t v22 = v59;
      unint64_t v20 = v19;
      goto LABEL_9;
    }

    if (v67) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v38 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = *(void *)(a1 + 56);
    uint64_t v54 = a1 + 56;
    uint64_t v18 = ~v38;
    uint64_t v40 = -v38;
    if (v40 < 64) {
      uint64_t v41 = ~(-1LL << v40);
    }
    else {
      uint64_t v41 = -1LL;
    }
    unint64_t v19 = v41 & v39;
    swift_bridgeObjectRetain(a1);
    int64_t v17 = 0LL;
    if (v19)
    {
LABEL_7:
      uint64_t v50 = v18;
      uint64_t v49 = v4;
      unint64_t v20 = (v19 - 1) & v19;
      unint64_t v21 = __clz(__rbit64(v19)) | (v17 << 6);
      int64_t v22 = v17;
LABEL_8:
      uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8 * v21);
      uint64_t v24 = swift_retain();
      int v58 = 1;
LABEL_9:
      int64_t v59 = v23;
      if (!v23) {
        goto LABEL_63;
      }
      uint64_t v55 = a1;
      uint64_t v53 = a1 & 0x7FFFFFFFFFFFFFFFLL;
      int64_t v51 = (unint64_t)(v50 + 64) >> 6;
      a1 = (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      uint64_t v52 = (char *)&type metadata for Swift.AnyObject + 8;
      while (1)
      {
        if (v58)
        {
          if (v20)
          {
            uint64_t v25 = (v20 - 1) & v20;
            unint64_t v26 = __clz(__rbit64(v20)) | (v22 << 6);
            int64_t v27 = v22;
          }

          else
          {
            int64_t v32 = v22 + 1;
            if (__OFADD__(v22, 1LL))
            {
              __break(1u);
LABEL_65:
              __break(1u);
              goto LABEL_63;
            }

            if (v32 >= v51) {
              goto LABEL_50;
            }
            unint64_t v33 = *(void *)(v54 + 8 * v32);
            int64_t v27 = v22 + 1;
            if (!v33)
            {
              int64_t v27 = v22 + 2;
              if (v22 + 2 >= v51) {
                goto LABEL_50;
              }
              unint64_t v33 = *(void *)(v54 + 8 * v27);
              if (!v33)
              {
                int64_t v27 = v22 + 3;
                if (v22 + 3 >= v51) {
                  goto LABEL_50;
                }
                unint64_t v33 = *(void *)(v54 + 8 * v27);
                if (!v33)
                {
                  int64_t v27 = v22 + 4;
                  if (v22 + 4 >= v51) {
                    goto LABEL_50;
                  }
                  unint64_t v33 = *(void *)(v54 + 8 * v27);
                  if (!v33)
                  {
                    int64_t v27 = v22 + 5;
                    if (v22 + 5 >= v51) {
                      goto LABEL_50;
                    }
                    unint64_t v33 = *(void *)(v54 + 8 * v27);
                    if (!v33)
                    {
                      int64_t v34 = v22 + 6;
                      while (v34 < v51)
                      {
                        unint64_t v33 = *(void *)(v54 + 8 * v34++);
                        if (v33)
                        {
                          int64_t v27 = v34 - 1;
                          goto LABEL_32;
                        }
                      }

LABEL_50:
                      sub_1000212AC(v55);
                      return v59;
                    }
                  }
                }
              }
            }

LABEL_63:
  sub_1000212AC(a1);
  return 0LL;
}

          uint64_t v192 = v4[54];
          uint64_t v191 = v4[55];
          uint64_t v193 = *(void *)(*(void *)(v191 + *(int *)(v493 + 48)) + 16LL);
          sub_100083B84(v191);
          sub_100083C6C(v162, v192);
          uint64_t v159 = (void *)v435;
          if (v193) {
            goto LABEL_64;
          }
          sub_100085548();
          sub_100083B84(v194);
          uint64_t v157 = v482;
          sub_100083734();
          if (v192) {
            goto LABEL_66;
          }
          uint64_t v196 = *(void *)v435;
          sub_100084A0C();
          if (!(!v167 & v207))
          {
            sub_100085D34( v198,  v199,  v200,  v201,  v202,  v203,  v204,  v205,  v345,  v357,  v369,  v381,  (uint64_t)v393,  (uint64_t)v405,  v421,  v435,  v448,  v460,  v468,  v475,  v482,  (uint64_t)v489,  v491,  v493,  (uint64_t)v494,  v495[0],  v495[1],  v495[2],  v495[3],  v495[4],  v495[5],  v495[6]);
            uint64_t v206 = (uint64_t)v494;
          }

          sub_100085C80( v197,  v198,  v199,  v200,  v201,  v202,  v203,  v204,  v345,  v357,  v369,  v381,  (uint64_t)v393,  v206,  v421,  v435,  v448,  v460,  v468,  v475,  v482,  (uint64_t)v489,  v491,  v493,  (uint64_t)v494,  v495[0]);
          sub_100091270((uint64_t)v495);
          Hasher._finalize()();
          sub_100082D00();
          if (!v167)
          {
            sub_100082E1C();
            goto LABEL_80;
          }

          sub_100082E08();
          while (1)
          {
            sub_100083820();
            if (v167 && (v209 & 1) != 0) {
              break;
            }
            sub_100083980();
            sub_10008310C();
            if (!v167)
            {
              sub_100082DF4();
LABEL_80:
              sub_100083B24(v208);
              *(void *)(v210 + 8 * v21sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v196;
              sub_100083B14();
LABEL_67:
              uint64_t v156 = __CocoaSet.Iterator.next()(v195);
              if (!v156)
              {
LABEL_82:
                uint64_t v212 = sub_10000BCDC(v4[38]);
                sub_100085558( v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v345,  v357,  v369,  v381,  (uint64_t)v393,  (uint64_t)v405,  v421,  v435,  v448,  v460,  v468,  v475,  v482,  (uint64_t)v489,  v491);
                uint64_t v2 = 0LL;
                v220 = v416;
                goto LABEL_84;
              }

              goto LABEL_50;
            }
          }

          __break(1u);
LABEL_115:
          __break(1u);
          goto LABEL_116;
        }

        sub_10000C1B0(v489[24]);
        v169 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      }
    }

    __int128 v189 = v4[55];
    uint64_t v188 = v4[56];
    uint64_t v190 = v4[45];
    sub_100083D8C(v4[44]);
    sub_100083B84(v188);
    sub_100083D8C(v190);
    sub_100083C6C(v162, v189);
    goto LABEL_63;
  }

  *((_DWORD *)v4 + 14sub_100006F7C(v0 + 8) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
  *((_DWORD *)v4 + 149) = enum case for LoadState.loaded(_:);
  uint64_t v134 = v133 - 1;
  v4[69] = v133 - 1;
  if (__OFSUB__(v133, 1LL))
  {
    __break(1u);
    goto LABEL_82;
  }

  uint64_t v135 = v4[68] & 0xC000000000000001LL;
  uint64_t v136 = sub_10008314C();
  uint64_t v137 = v4[68];
  if (v135)
  {
    uint64_t v138 = sub_1000837CC(v136, v137);
  }

  else
  {
    uint64_t v138 = *(void *)(v137 + 8 * v134 + 32);
    sub_1000224B4();
  }

  v4[70] = v138;
  uint64_t v139 = v4[48];
  sub_100030768(v4[50]);
  uint64_t v140 = sub_100030CC0();
  sub_10002FF3C(v139, v141, v142, v140);
  int64_t v143 = (void *)swift_task_alloc(dword_10010D694);
  v4[71] = v143;
  *int64_t v143 = v4;
  v143[1] = sub_1000772B0;
  unint64_t v144 = sub_1000226A4();
  sub_100083FAC(v144, v145, v146);
}

  sub_1000CB374();
  swift_release(v4);
  sub_1000212AC(a2);
  return 0LL;
}

uint64_t sub_100051ABC(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = v3;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = __CocoaSet.makeIterator()(v8);
    uint64_t v10 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t result = Set.Iterator.init(_cocoa:)(v9, v10, v11);
    a1 = v42;
    uint64_t v37 = v43;
    uint64_t v13 = v44;
    int64_t v14 = v45;
    unint64_t v15 = v46;
  }

  else
  {
    uint64_t v16 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v13 = ~v16;
    uint64_t v18 = -v16;
    if (v18 < 64) {
      uint64_t v19 = ~(-1LL << v18);
    }
    else {
      uint64_t v19 = -1LL;
    }
    unint64_t v15 = v19 & v17;
    uint64_t result = swift_bridgeObjectRetain(a1);
    int64_t v14 = 0LL;
  }

  v32[1] = v13;
  uint64_t v35 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v36 = (unint64_t)(v13 + 64) >> 6;
  int64_t v34 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    int64_t v20 = v14;
    if (a1 < 0)
    {
      uint64_t v23 = __CocoaSet.Iterator.next()(result);
      if (!v23) {
        goto LABEL_36;
      }
      uint64_t v24 = v23;
      uint64_t v40 = v23;
      uint64_t v25 = type metadata accessor for InferenceProviderAsset(0LL);
      swift_unknownObjectRetain(v24);
      swift_dynamicCast(&v47, &v40, v34, v25, 7LL);
      uint64_t v26 = v47;
      swift_unknownObjectRelease(v24);
      if (!v26) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }

    if (!v15) {
      break;
    }
    unint64_t v21 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v22 = v21 | (v14 << 6);
LABEL_33:
    uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8 * v22);
    swift_retain(v26);
    if (!v26) {
      goto LABEL_36;
    }
LABEL_34:
    uint64_t v30 = v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v41,  0LL,  0LL);
    sub_10002F8E0(v30, (uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    LOBYTE(v3sub_100016BD0(0, v0, 0) = v38(v7);
    sub_10002F90C((uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t result = swift_release(v26);
    if ((v30 & 1) == 0)
    {
      uint64_t v31 = 0LL;
      goto LABEL_37;
    }
  }

  int64_t v27 = v14 + 1;
  if (!__OFADD__(v14, 1LL))
  {
    if (v27 >= v36) {
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v27);
    ++v14;
    if (!v28)
    {
      int64_t v14 = v20 + 2;
      if (v20 + 2 >= v36) {
        goto LABEL_36;
      }
      unint64_t v28 = *(void *)(v37 + 8 * v14);
      if (!v28)
      {
        int64_t v14 = v20 + 3;
        if (v20 + 3 >= v36) {
          goto LABEL_36;
        }
        unint64_t v28 = *(void *)(v37 + 8 * v14);
        if (!v28)
        {
          int64_t v14 = v20 + 4;
          if (v20 + 4 >= v36) {
            goto LABEL_36;
          }
          unint64_t v28 = *(void *)(v37 + 8 * v14);
          if (!v28)
          {
            int64_t v14 = v20 + 5;
            if (v20 + 5 >= v36) {
              goto LABEL_36;
            }
            unint64_t v28 = *(void *)(v37 + 8 * v14);
            if (!v28)
            {
              int64_t v29 = v20 + 6;
              while (v29 < v36)
              {
                unint64_t v28 = *(void *)(v37 + 8 * v29++);
                if (v28)
                {
                  int64_t v14 = v29 - 1;
                  goto LABEL_32;
                }
              }

LABEL_36:
              uint64_t v31 = 1LL;
LABEL_37:
              sub_1000212AC(a1);
              return v31;
            }
          }
        }
      }
    }

              unint64_t v28 = 1LL;
LABEL_37:
              sub_1000212AC(v5);
              swift_release(a2);
              swift_release(a3);
              return v28;
            }
          }
        }
      }
    }

uint64_t sub_100051E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    uint64_t v8 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t result = Set.Iterator.init(_cocoa:)(v7, v8, v9);
    uint64_t v5 = v31[1];
    uint64_t v30 = v31[2];
    uint64_t v11 = v31[3];
    int64_t v12 = v31[4];
    unint64_t v13 = v31[5];
  }

  else
  {
    uint64_t v14 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v30 = a1 + 56;
    uint64_t v11 = ~v14;
    uint64_t v15 = -v14;
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v13 = v16 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain(a1);
    int64_t v12 = 0LL;
  }

  int64_t v29 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    int64_t v17 = v12;
    if (v5 < 0)
    {
      uint64_t v20 = __CocoaSet.Iterator.next()(result);
      if (!v20) {
        goto LABEL_36;
      }
      uint64_t v21 = v20;
      v31[0] = v20;
      uint64_t v22 = type metadata accessor for InferenceProviderAsset(0LL);
      swift_unknownObjectRetain(v21);
      swift_dynamicCast(&v32, v31, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
      uint64_t v23 = v32;
      swift_unknownObjectRelease(v21);
      if (!v23) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }

    if (!v13) {
      break;
    }
    unint64_t v18 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v19 = v18 | (v12 << 6);
LABEL_33:
    uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
    swift_retain(v23);
    if (!v23) {
      goto LABEL_36;
    }
LABEL_34:
    char v27 = sub_10008633C(v23);
    uint64_t result = swift_release(v23);
    if ((v27 & 1) != 0)
    {
      uint64_t v28 = 0LL;
      goto LABEL_37;
    }
  }

  int64_t v24 = v12 + 1;
  if (!__OFADD__(v12, 1LL))
  {
    if (v24 >= v29) {
      goto LABEL_36;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v24);
    ++v12;
    if (!v25)
    {
      int64_t v12 = v17 + 2;
      if (v17 + 2 >= v29) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v30 + 8 * v12);
      if (!v25)
      {
        int64_t v12 = v17 + 3;
        if (v17 + 3 >= v29) {
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v30 + 8 * v12);
        if (!v25)
        {
          int64_t v12 = v17 + 4;
          if (v17 + 4 >= v29) {
            goto LABEL_36;
          }
          unint64_t v25 = *(void *)(v30 + 8 * v12);
          if (!v25)
          {
            int64_t v12 = v17 + 5;
            if (v17 + 5 >= v29) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v30 + 8 * v12);
            if (!v25)
            {
              int64_t v26 = v17 + 6;
              while (v26 < v29)
              {
                unint64_t v25 = *(void *)(v30 + 8 * v26++);
                if (v25)
                {
                  int64_t v12 = v26 - 1;
                  goto LABEL_32;
                }
              }

uint64_t sub_10005210C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  unint64_t v6 = (*(void *)(*(void *)(sub_100003B20(&qword_10010B208) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[20] = swift_task_alloc(v6);
  v5[21] = swift_task_alloc(v6);
  return swift_task_switch(sub_10005217C, 0LL, 0LL);
}

void sub_10005217C()
{
  uint64_t v2 = *(void *)(v0 + 136);
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    sub_100021EB0();
    sub_100084F74();
    sub_100022DB0();
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t v3 = sub_1000858F8();
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v3, v4, v5);
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v52 = *(void *)(v0 + 24);
    uint64_t v7 = *(void *)(v0 + 32);
    int64_t v8 = *(void *)(v0 + 40);
    unint64_t v9 = *(void *)(v0 + 48);
  }

  else
  {
    uint64_t v52 = v2 + 56;
    uint64_t v10 = ~(-1LL << *(_BYTE *)(v2 + 32));
    sub_100022D3C();
    unint64_t v9 = v11 & v12;
    uint64_t v6 = sub_100021EB0();
    uint64_t v7 = v10;
    int64_t v8 = 0LL;
  }

  int64_t v51 = (unint64_t)(v7 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_7;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v1 = (v9 - 1) & v9;
      unint64_t v13 = __clz(__rbit64(v9)) | (v8 << 6);
      int64_t v14 = v8;
      goto LABEL_26;
    }

    int64_t v21 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v21 >= v51) {
      goto LABEL_37;
    }
    int64_t v14 = v8 + 1;
    if (!*(void *)(v52 + 8 * v21))
    {
      int64_t v14 = v8 + 2;
      if (v8 + 2 >= v51) {
        goto LABEL_37;
      }
      if (!*(void *)(v52 + 8 * v14))
      {
        int64_t v14 = v8 + 3;
        if (v8 + 3 >= v51) {
          goto LABEL_37;
        }
        if (!*(void *)(v52 + 8 * v14))
        {
          int64_t v14 = v8 + 4;
          if (v8 + 4 >= v51) {
            goto LABEL_37;
          }
          if (!*(void *)(v52 + 8 * v14))
          {
            int64_t v14 = v8 + 5;
            if (v8 + 5 >= v51) {
              goto LABEL_37;
            }
            if (!*(void *)(v52 + 8 * v14))
            {
              int64_t v22 = v8 + 6;
              while (v22 < v51)
              {
                if (*(void *)(v52 + 8 * v22++))
                {
                  int64_t v14 = v22 - 1;
                  goto LABEL_25;
                }
              }

uint64_t sub_1000525D0()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005260C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + swift_endAccess(v0 + 16) = a6;
  unint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v6 + 24) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100052670;
  return v9(v6 + 16);
}

uint64_t sub_100052670()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 32LL) = v0;
  swift_task_dealloc(v2);
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_1000526C8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000526D4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  if (a1)
  {
    uint64_t ObjectType = swift_getObjectType(a1);
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a2);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  v3[5] = v6;
  v3[6] = v8;
  return swift_task_switch(sub_100052748, v6, v8);
}

uint64_t sub_100052748()
{
  uint64_t v1 = **(void **)(v0 + 32);
  uint64_t v2 = sub_100003B20(&qword_10010B468);
  *(void *)(v0 + 56) = v2;
  if ((ThrowingTaskGroup.isEmpty.getter( v1,  (char *)&type metadata for () + 8,  v2,  &protocol self-conformance witness table for Error) & 1) != 0)
  {
    uint64_t v3 = (uint64_t (*)(void))sub_1000227B8();
    return sub_10000BD30(v3);
  }

  else
  {
    *(void *)(v0 + 64) = 0LL;
    *(void *)(v0 + 7sub_10003318C(v0 + 2) = swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
    sub_100003B20(&qword_10010DA78);
    sub_1000857A0((uint64_t)sub_1000527EC);
    return sub_100083C54();
  }

uint64_t sub_1000527EC()
{
  *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = sub_1000528E8;
  }

  else
  {
    *(_BYTE *)(v0 + 89) = *(_BYTE *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = sub_100052848;
  }

  return sub_100021BCC((uint64_t)v6, v4, v5);
}

uint64_t sub_100052848()
{
  if ((*(_BYTE *)(v0 + 89) & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v1 = *(void *)(v0 + 64);
  if ((ThrowingTaskGroup.isEmpty.getter( **(void **)(v0 + 32),  (char *)&type metadata for () + 8,  *(void *)(v0 + 56),  &protocol self-conformance witness table for Error) & 1) == 0)
  {
    *(void *)(v0 + 64) = v1;
LABEL_7:
    *(void *)(v0 + 7sub_10003318C(v0 + 2) = swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
    sub_100003B20(&qword_10010DA78);
    sub_1000857A0((uint64_t)sub_1000527EC);
    return sub_100083C54();
  }

  if (v1) {
    sub_100083B58();
  }
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000528E8()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (*(void *)(v0 + 64))
  {
    sub_100022D04();
    uint64_t v1 = *(void *)(v0 + 64);
  }

  if ((ThrowingTaskGroup.isEmpty.getter( **(void **)(v0 + 32),  (char *)&type metadata for () + 8,  *(void *)(v0 + 56),  &protocol self-conformance witness table for Error) & 1) != 0)
  {
    if (v1) {
      sub_100083B58();
    }
    return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    *(void *)(v0 + 64) = v1;
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
    *(void *)(v0 + 7sub_10003318C(v0 + 2) = v3;
    sub_100003B20(&qword_10010DA78);
    *uint64_t v3 = v0;
    v3[1] = sub_1000527EC;
    return sub_100083C54();
  }

uint64_t sub_1000529A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100003B60(v0, qword_10010D590);
  sub_100003BA0(v0, (uint64_t)qword_10010D590);
  uint64_t v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100052A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0LL;
  }
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
}

uint64_t sub_100052A48(uint64_t *a1, uint64_t *a2)
{
  return sub_100052A10(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_100052A5C()
{
  v2[3] = &type metadata for ModelManager;
  v2[4] = sub_10006D648();
  LOBYTE(v2[0]) = 1;
  char v0 = isFeatureEnabled(_:)(v2);
  uint64_t result = sub_100006F7C(v2);
  if ((v0 & 1) != 0) {
    return static Policy.defaultAssetTransitionDelay.getter(result, 0.0);
  }
  return result;
}

void sub_100052AD4(uint64_t a1, uint64_t a2)
{
  if ((sub_1000BC3FC() & 1) != 0)
  {
    uint64_t v4 = (int *)sub_100084F64();
    if (*(void *)(a1 + v4[5]) == *(void *)(a2 + v4[5])
      && *(double *)(a1 + v4[6]) == *(double *)(a2 + v4[6])
      && *(double *)(a1 + v4[7]) == *(double *)(a2 + v4[7]))
    {
      sub_100013980();
    }
  }

uint64_t sub_100052B5C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_10002FFE4(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)v11);
  uint64_t v2 = sub_100084F64();
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 20));
  if (v3 == static Policy.defaultMemoryBudgetMarker.getter(v2))
  {
    uint64_t v4 = (void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog + 24);
    return *(void *)(*sub_10000729C(v4, v5) + 112LL);
  }

  uint64_t v6 = *(void *)(v1 + *(int *)(v2 + 20));
  uint64_t v7 = (void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
  unint64_t v8 = *(void *)(*sub_10000729C(v7, v7[3]) + 112LL);
  if (v6 >= 1 && v8 < v6)
  {
LABEL_10:
    uint64_t v5 = v7[3];
    uint64_t v4 = v7;
    return *(void *)(*sub_10000729C(v4, v5) + 112LL);
  }

  if (v6 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    goto LABEL_10;
  }

  return v6;
}

#error "100052E00: call analysis failed (funcsize=144)"
void sub_100052EB0(uint64_t a1)
{
  sub_100062A50(a1, (unsigned int *)&enum case for LoadState.loaded(_:));
}

#error "100053058: call analysis failed (funcsize=144)"
void sub_100053108(uint64_t a1)
{
  sub_100062A50(a1, (unsigned int *)&enum case for LoadState.dynamicMode(_:));
}

void sub_100053114()
{
  uint64_t v2 = 0LL;
  uint64_t v54 = sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v3);
  sub_100022640();
  __chkstk_darwin(v4);
  sub_100085CE8();
  uint64_t v52 = v5;
  uint64_t v6 = sub_100083B94();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10004E158();
  uint64_t v51 = v8;
  sub_100022634();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v45 - v10;
  sub_10002FFE4(v0 + 120, (uint64_t)&v62);
  if ((*(void *)(v0 + 120) & 0xC000000000000001LL) != 0)
  {
    uint64_t v47 = 0LL;
    uint64_t v61 = &_swiftEmptySetSingleton;
    sub_100085AB4();
    uint64_t v46 = v0;
    sub_10000BD20(v12);
    sub_100022418();
    uint64_t v53 = sub_10008457C();
    if (sub_1000838E0())
    {
      uint64_t v50 = sub_100022DB0();
      HIDWORD(v49) = enum case for LoadState.loaded(_:);
      uint64_t v48 = (uint64_t)&type metadata for Swift.AnyObject + 8;
      unint64_t v13 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      while (1)
      {
        uint64_t v14 = sub_100085634();
        sub_100022CC0(v14, v15, v48, v50);
        uint64_t v16 = v60 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        sub_10000BE64( v60 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  (uint64_t)v55,  33LL);
        sub_1000225D4((uint64_t)v11, HIDWORD(v49), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 104));
        sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
        uint64_t v18 = v17;
        sub_100084BF0();
        sub_100084BF0();
        uint64_t v19 = v57;
        BOOL v20 = v58 == v56 && v59 == v57;
        if (v20) {
          break;
        }
        char v21 = sub_100021EB8(v58, v59, v56, v57);
        sub_10000BD28();
        sub_10000C1E8();
        sub_100084EEC();
        int64_t v22 = v13;
        sub_1000225D4(v51, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
        if ((v21 & 1) != 0) {
          goto LABEL_16;
        }
        sub_100084BF0();
        sub_100084BF0();
        uint64_t v18 = v59;
        if (v58 == v56 && v59 == v57)
        {
          sub_10000C1B0(v59);
          int64_t v22 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
          goto LABEL_16;
        }

        uint64_t v24 = v19;
        char v25 = sub_100021EB8(v58, v59, v56, v57);
        sub_10000C1E0();
        sub_10000BD28();
        sub_1000855B4();
        unint64_t v13 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
        sub_100084520(v24);
        sub_1000860C0();
        sub_10008521C(v16, v1);
        if ((v25 & 1) == 0)
        {
          sub_100084520(v1);
          sub_100084D40();
LABEL_18:
          uint64_t v30 = sub_100085C34();
          goto LABEL_30;
        }

BOOL sub_100053510(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  __chkstk_darwin(State);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for LoadState.loaded(_:), State);
  sub_100086130((uint64_t)v8);
  char v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, State);
  sub_10002F8E0(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  BOOL v11 = (v10 & 1) != 0 && *(void *)(*(void *)&v4[*(int *)(v2 + 48)] + 16LL) == 0LL;
  sub_10002F90C((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v11;
}

void sub_100053640()
{
  uint64_t v42 = sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v4);
  sub_100022640();
  __chkstk_darwin(v5);
  sub_100085644();
  uint64_t v6 = sub_100083B94();
  sub_100085588();
  __chkstk_darwin(v7);
  sub_10000C120();
  uint64_t v10 = v9 - v8;
  sub_10002FFE4(v0 + 120, (uint64_t)&v51);
  uint64_t v11 = *(void *)(v0 + 120);
  if ((v11 & 0xC000000000000001LL) != 0)
  {
    uint64_t v37 = 0LL;
    uint64_t v50 = &_swiftEmptySetSingleton;
    if (v11 < 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v36 = v0;
    sub_10000BD20(v0);
    sub_1000854A0();
    uint64_t v41 = __CocoaSet.makeIterator()(v12);
    if (sub_1000838E0())
    {
      uint64_t v40 = sub_100022DB0();
      HIDWORD(v39) = enum case for LoadState.loaded(_:);
      uint64_t v38 = (char *)&type metadata for Swift.AnyObject + 8;
      do
      {
        uint64_t v13 = sub_100085634();
        sub_100022CC0(v13, v14, (uint64_t)v38, v40);
        uint64_t v15 = v48 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        sub_10000BE64( v48 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  (uint64_t)v43,  33LL);
        sub_1000225D4(v10, HIDWORD(v39), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
        sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
        sub_100083D60(v6);
        sub_100083D60(v6);
        BOOL v16 = v46 == v44 && v47 == v45;
        if (v16)
        {
          sub_10000C1B0(v47);
          sub_100030650(v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
          sub_1000849DC(v15, v3);
        }

        else
        {
          char v17 = sub_100021EB8(v46, v47, v44, v45);
          sub_10000BD28();
          sub_1000303D0();
          sub_100030650(v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
          sub_1000849DC(v15, v3);
          if ((v17 & 1) == 0)
          {
            sub_100084D50(v3);
            sub_1000849DC(v15, v2);
LABEL_15:
            sub_100084D50(v2);
            sub_100084D40();
            uint64_t v19 = sub_100085C34();
            continue;
          }
        }

        uint64_t v18 = *(void *)(*(void *)(v3 + *(int *)(v42 + 44)) + 16LL);
        sub_100084D50(v3);
        sub_1000849DC(v15, v2);
        if (v18) {
          goto LABEL_15;
        }
        uint64_t v20 = sub_1000855CC();
        sub_100084D50(v20);
        sub_100084D40();
        char v21 = v50;
        sub_1000855A8();
        if (!(!v16 & v30))
        {
          sub_100083EE0( v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v35,  v36,  v37,  (char)v38,  v39,  v40,  v41,  v42,  v43[0],  v43[1],  v43[2],  v43[3],  v43[4],  v43[5],  v43[6],  v43[7],  v43[8],  v44,  v45,  v46,  v47,  v48,  v49,  (uint64_t)v50);
          char v21 = v50;
        }

        sub_100085C2C(v21[5]);
        sub_100085C48();
        sub_100085C24();
        sub_100082D00();
        if (v16)
        {
          sub_100082E08();
          while (1)
          {
            sub_100083820();
            if (v16 && (v32 & 1) != 0) {
              break;
            }
            sub_100083980();
            sub_10008310C();
            if (!v16)
            {
              sub_100082DF4();
              goto LABEL_28;
            }
          }

          __break(1u);
LABEL_34:
          sub_100085C04();
          __break(1u);
          return;
        }

        sub_100082E1C();
LABEL_28:
        sub_100083E78(v31);
      }

      while (__CocoaSet.Iterator.next()(v19));
    }

    sub_10000BCDC(v36);
    swift_release(v41);
    uint64_t v33 = v37;
  }

  else
  {
    sub_10000C030();
    uint64_t v34 = sub_1000854A0();
    uint64_t v33 = 0LL;
    sub_10007B478(v34, v0, (uint64_t)sub_1000539A8, 0LL);
  }

  v43[0] = (uint64_t)sub_100086014();
  sub_100083FA4(v43, (uint64_t (*)(uint64_t, uint64_t))sub_1000539CC);
  if (v33) {
    goto LABEL_34;
  }
  sub_100021DDC();
  sub_100007448();
}

uint64_t sub_1000539A8()
{
  return v0 & 1;
}

void sub_1000539D0()
{
  uint64_t v4 = 0LL;
  uint64_t v59 = sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v5);
  sub_100022640();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v47 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v47 - v10;
  uint64_t v12 = sub_100083B94();
  uint64_t v49 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1000841CC();
  __chkstk_darwin(v13);
  sub_100085CE8();
  uint64_t v58 = v14;
  sub_10002FFE4(v1 + 120, (uint64_t)&v67);
  if ((*(void *)(v1 + 120) & 0xC000000000000001LL) != 0)
  {
    uint64_t v56 = v0;
    uint64_t v48 = 0LL;
    uint64_t v66 = &_swiftEmptySetSingleton;
    sub_100085AB4();
    uint64_t v47 = v1;
    sub_10000BD20(v15);
    sub_100022418();
    uint64_t v57 = sub_10008457C();
    if (sub_1000838E0())
    {
      uint64_t v54 = sub_100022DB0();
      HIDWORD(v53) = enum case for LoadState.loaded(_:);
      uint64_t v52 = (uint64_t)&type metadata for Swift.AnyObject + 8;
      sub_10008553C();
      uint64_t v55 = v2;
      while (1)
      {
        uint64_t v16 = sub_100085634();
        sub_100022CC0(v16, v17, v52, v54);
        uint64_t v18 = v65 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        sub_10000BE64( v65 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  (uint64_t)v60,  33LL);
        uint64_t v19 = v58;
        (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v58, HIDWORD(v53), v12);
        sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
        sub_1000846C4(v12);
        sub_1000846C4(v12);
        BOOL v20 = v63 == v61 && v64 == v62;
        if (v20) {
          break;
        }
        int v51 = sub_100021EB8(v63, v64, v61, v62);
        sub_10000BD28();
        sub_10000C000();
        uint64_t v21 = (uint64_t)v11;
        sub_100083C6C(v18, (uint64_t)v11);
        uint64_t v22 = v56;
        sub_100085F7C(v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
        uint64_t v23 = v22;
        uint64_t v11 = (char *)v21;
        if ((v51 & 1) != 0) {
          goto LABEL_16;
        }
        sub_1000846C4(v12);
        sub_1000846C4(v12);
        if (v63 == v61 && v64 == v62)
        {
          sub_10000C1B0(v64);
          sub_10008553C();
          uint64_t v19 = v58;
          goto LABEL_16;
        }

        char v25 = sub_100021EB8(v63, v64, v61, v62);
        sub_10000BD28();
        sub_10000C1E8();
        sub_10008553C();
        sub_10008547C(v23);
        sub_100083B84(v21);
        sub_10008547C(v58);
        sub_100083C6C(v18, (uint64_t)v9);
        if ((v25 & 1) == 0)
        {
          sub_100083B84((uint64_t)v9);
          uint64_t v26 = v55;
          sub_100083C6C(v18, v55);
LABEL_18:
          sub_100083B84(v26);
          sub_100084D40();
LABEL_20:
          uint64_t v37 = sub_100085C34();
          goto LABEL_21;
        }

BOOL sub_100053ECC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v9 = *(void *)(State - 8);
  __chkstk_darwin(State);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for LoadState.loaded(_:), State);
  sub_100086130((uint64_t)v11);
  char v13 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, State);
  sub_10002F8E0(a1, (uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if ((v13 & 1) == 0)
  {
    sub_10002F90C((uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_10002F8E0(a1, (uint64_t)v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    goto LABEL_5;
  }

  uint64_t v14 = *(void *)(*(void *)&v7[*(int *)(v2 + 48)] + 16LL);
  sub_10002F90C((uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10002F8E0(a1, (uint64_t)v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v14)
  {
LABEL_5:
    BOOL v15 = 0LL;
    goto LABEL_6;
  }

  BOOL v15 = *(void *)(*(void *)&v5[*(int *)(v2 + 44)] + 16LL) == 0LL;
LABEL_6:
  sub_10002F90C((uint64_t)v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v15;
}

uint64_t sub_10005406C()
{
  uint64_t v34 = v1;
  uint64_t v35 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1000853A4();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000841CC();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = sub_1000837BC();
  uint64_t v13 = v6 + *(int *)(v12 + 36);
  uint64_t v14 = v6 + *(int *)(v12 + 32);
  sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v16 = v15;
  uint64_t v17 = sub_1000858EC();
  char v19 = dispatch thunk of static Comparable.>= infix(_:_:)(v17, v18, v7, v16);
  BOOL v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  if ((v19 & 1) != 0) {
    uint64_t v21 = v14;
  }
  else {
    uint64_t v21 = v13;
  }
  v20(v11, v21, v7);
  uint64_t v22 = v4 + *(int *)(v12 + 36);
  uint64_t v23 = v4 + *(int *)(v12 + 32);
  sub_1000858B0();
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v24, v25, v26, v16) & 1) != 0) {
    uint64_t v27 = v23;
  }
  else {
    uint64_t v27 = v22;
  }
  v20((char *)v0, v27, v7);
  uint64_t v28 = sub_100049B78();
  char v29 = ((uint64_t (*)(uint64_t))static Date.< infix(_:_:))(v28);
  uint64_t v30 = *(void (**)(uint64_t))(v8 + 8);
  sub_1000856D4(v0);
  uint64_t v31 = sub_100084F2C();
  v30(v31);
  return v29 & 1;
}

void sub_100054198()
{
  uint64_t v1 = v0;
  sub_10002FFE4(v0 + 120, (uint64_t)v36);
  sub_100085D84();
  if (v2)
  {
    sub_1000224B4();
    uint64_t v23 = sub_100022944();
    sub_100083D00(v23, v0, (uint64_t)sub_100054390);
    return;
  }

  uint64_t v35 = (unint64_t *)&_swiftEmptySetSingleton;
  sub_1000856EC();
  sub_10000BD20(v0);
  sub_100022944();
  sub_10008457C();
  uint64_t v3 = sub_1000838E0();
  if (!v3)
  {
LABEL_18:
    sub_10000BCDC(v1);
    sub_10000BF84();
    return;
  }

  uint64_t v4 = v3;
  uint64_t v5 = sub_100022DB0();
  while (1)
  {
    v25[0] = v4;
    sub_100022CC0((uint64_t)&v34, (uint64_t)v25, (uint64_t)&type metadata for Swift.AnyObject + 8, v5);
    uint64_t v6 = v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10000BE64( v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  (uint64_t)v33,  1LL);
    uint64_t v7 = sub_1000837BC();
    uint64_t v15 = v34;
    uint64_t v19 = sub_1000304F8();
LABEL_17:
    uint64_t v4 = __CocoaSet.Iterator.next()(v19);
    if (!v4) {
      goto LABEL_18;
    }
  }

  uint64_t v16 = v35;
  unint64_t v17 = v35[2];
  if (v35[3] <= v17)
  {
    sub_1000851E0( v8,  v9,  v10,  v11,  v12,  v13,  v14,  v17,  v24,  v25[0],  v25[1],  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33[0],  v33[1],  v33[2],  v34,  (uint64_t)v35,  v36[0],  v36[1],  v36[2],  v36[3],  v36[4],  v36[5],  v36[6],  v36[7],  v36[8]);
    uint64_t v16 = v35;
  }

  Hasher.init(_seed:)(v25, v16[5]);
  sub_100085B7C((uint64_t)v25);
  unint64_t v18 = Hasher._finalize()() & ~(-1LL << *((_BYTE *)v16 + 32));
  if (((-1LL << v18) & ~v16[(v18 >> 6) + 7]) != 0)
  {
    sub_100082E1C();
LABEL_16:
    *(void *)(v20 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    *(void *)(v16[6] + 8 * v2sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v15;
    ++v16[2];
    goto LABEL_17;
  }

  sub_100082E08();
  while (1)
  {
    sub_100083820();
    if (v2)
    {
      if ((v22 & 1) != 0) {
        break;
      }
    }

    sub_100083980();
    sub_10008310C();
    if (!v2)
    {
      sub_100082DF4();
      goto LABEL_16;
    }
  }

  __break(1u);
}

BOOL sub_100054390(uint64_t a1)
{
  return *(void *)(*(void *)(a1
}

uint64_t sub_1000543C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = sub_1000306E4();
  _BYTE v5[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[25] = v7;
  v5[26] = sub_100021CC4(v7);
  uint64_t v8 = sub_100003B20(&qword_10010B9A0);
  v5[27] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[28] = v9;
  v5[29] = sub_100021CC4(v9);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100054434()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D07C);
  *(void *)(v0 + 24sub_100016BD0(0, v0, 0) = v1;
  uint64_t v2 = sub_100084D04(v1);
  return sub_10008398C(v2, v3);
}

uint64_t sub_100054484()
{
  *(void *)(v0 + 24sub_100006F7C(v0 + 8) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_1000549E4;
  }
  else {
    uint64_t v4 = sub_1000544D8;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 184), 0LL);
}

uint64_t sub_1000544D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(v9 + 120))
  {
    uint64_t v12 = (__int128 *)sub_1000307DC();
    sub_1000070EC(v12, v13);
    uint64_t v14 = (void *)swift_task_alloc(dword_10010D654);
    *(void *)(v9 + 256) = v14;
    *uint64_t v14 = v9;
    v14[1] = sub_100054724;
    return sub_1000840B0(*(void *)(v9 + 152), v9 + 56);
  }

  else
  {
    sub_10003096C(v11, &qword_10010C008);
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v17 = *(void *)(v9 + 200);
    uint64_t v16 = *(void *)(v9 + 208);
    uint64_t v18 = *(void *)(v9 + 176);
    uint64_t v19 = sub_10000BF6C();
    uint64_t v20 = sub_100003BA0(v19, (uint64_t)qword_10010D590);
    sub_100022218(v16, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
    unint64_t v21 = (os_log_s *)sub_1000228BC();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (sub_1000495A0(v21))
    {
      uint64_t v20 = sub_10000BCF4(12LL);
      uint64_t v42 = sub_10000BCF4(32LL);
      sub_100085B1C(4.8149e-34);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v24 = sub_100084050(v23);
      sub_100085098(v24, v25, v26, v27, v28);
      *(void *)(v9 + 136) = v29;
      sub_100022C00(v9 + 136, v9 + 144, a9);
      sub_1000303D0();
      sub_100022970();
      sub_100022210( (void *)&_mh_execute_header,  v21,  v22,  "claimAssets attempted with unrecognized InferenceProvider %s",  (uint8_t *)v20);
      sub_100021F38(v42);
      sub_10000BCC4(v42);
      sub_10000BCC4(v20);
    }

    else
    {
      sub_100022970();
    }

    uint64_t v30 = sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    sub_1000302B0(v30, v31);
    *(void *)uint64_t v20 = sub_1000860F0();
    *(void *)(v20 + sub_100006F7C(v0 + 8) = v32;
    uint64_t v33 = sub_100022218( v20,  enum case for ModelManagerError.unrecognizedInferenceProvider(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104LL));
    uint64_t v41 = swift_willThrow(v33, v34, v35, v36, v37, v38, v39, v40);
    sub_100083DC8(v41, &qword_10010C008);
    sub_100086118();
    sub_10000C140();
    return sub_10002FF80(*(uint64_t (**)(void))(v9 + 8));
  }

uint64_t sub_100054724()
{
  v0[33] = v3;
  v0[34] = v1;
  sub_100030924(v4);
  if (v1) {
    return sub_100021BCC((uint64_t)sub_100054A14, v0[23], 0LL);
  }
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v0[35] = (uint64_t)v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000547B0;
  return sub_100083F98();
}

uint64_t sub_1000547B0()
{
  return sub_10000BD98();
}

uint64_t sub_1000547E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v29 = v26 + 16;
  if (*(_BYTE *)(v26 + 288))
  {
    swift_bridgeObjectRelease(*(void *)(v26 + 264));
    sub_100085F9C();
    sub_10002F99C(v26 + 16, &qword_10010C008);
  }

  else
  {
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v30 = *(void *)(v26 + 224);
    uint64_t v31 = *(void *)(v26 + 232);
    uint64_t v32 = *(os_log_s **)(v26 + 216);
    uint64_t v33 = *(void *)(v26 + 160);
    uint64_t v34 = sub_10000BF6C();
    sub_100003BA0(v34, (uint64_t)qword_10010D590);
    sub_100022218(v31, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
    sub_10003D390();
    os_log_type_t v35 = sub_10000C160();
    BOOL v36 = sub_100022444(v32);
    uint64_t v37 = *(void *)(v26 + 216);
    if (v36)
    {
      uint64_t v38 = (uint8_t *)sub_10000BCF4(12LL);
      sub_10000BCF4(32LL);
      sub_1000854C0();
      *(_DWORD *)uint64_t v38 = 136315138;
      sub_100082738(&qword_10010BFE0, &qword_10010B9A0);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
      uint64_t v42 = v41;
      sub_100015EF8(v40, v41, &a14);
      *(void *)(v26 + 144) = v43;
      sub_100083978(v26 + 144, v26 + 152, (uint64_t)(v38 + 4));
      uint64_t v44 = v42;
      uint64_t v29 = v26 + 16;
      swift_bridgeObjectRelease(v44);
      sub_100085678();
      sub_100022210( (void *)&_mh_execute_header,  v32,  v35,  "Session %s is foreground, marking assets as in use by the session",  v38);
      sub_100021F38(a12);
      sub_10000BCC4(a12);
      sub_10000BCC4((uint64_t)v38);
    }

    else
    {
      sub_100085678();
    }

    uint64_t v45 = *(void *)(v26 + 264);
    uint64_t v46 = *(void *)(v26 + 184);
    uint64_t v47 = *(void *)(v26 + 160);
    uint64_t v48 = sub_100083A64();
    *(void *)(v48 + swift_endAccess(v0 + 16) = v46;
    *(void *)(v48 + 24) = v47;
    sub_100054A54((void (*)(uint64_t *))sub_100082CC4, v48, v45);
    sub_10002FF04();
    sub_100085F9C();
    sub_10002F99C(v29, &qword_10010C008);
    sub_10000BD28();
  }

  sub_100086118();
  sub_10000C140();
  uint64_t v49 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100030350(v49);
}

uint64_t sub_1000549E4()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054A14()
{
  uint64_t v1 = sub_1000853E0();
  sub_10003096C(v1, &qword_10010C008);
  sub_100086124();
  sub_10000BFE4();
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054A54(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = type metadata accessor for InferenceProviderAsset(0LL);
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t result = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    uint64_t v5 = v32[1];
    uint64_t v31 = v32[2];
    uint64_t v12 = v32[3];
    int64_t v13 = v32[4];
    unint64_t v14 = v32[5];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v31 = a3 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a3 + 56);
    uint64_t result = swift_bridgeObjectRetain(a3);
    uint64_t v12 = v16;
    int64_t v13 = 0LL;
  }

  int64_t v30 = (unint64_t)(v12 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v14)
  {
    uint64_t v19 = (v14 - 1) & v14;
    unint64_t v20 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v21 = v13;
    goto LABEL_27;
  }

  int64_t v21 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v21 >= v30) {
      goto LABEL_38;
    }
    unint64_t v26 = *(void *)(v31 + 8 * v21);
    if (!v26)
    {
      int64_t v27 = v13 + 2;
      if (v13 + 2 >= v30) {
        goto LABEL_38;
      }
      unint64_t v26 = *(void *)(v31 + 8 * v27);
      if (v26) {
        goto LABEL_25;
      }
      int64_t v27 = v13 + 3;
      if (v13 + 3 >= v30) {
        goto LABEL_38;
      }
      unint64_t v26 = *(void *)(v31 + 8 * v27);
      if (v26) {
        goto LABEL_25;
      }
      int64_t v27 = v13 + 4;
      if (v13 + 4 >= v30) {
        goto LABEL_38;
      }
      unint64_t v26 = *(void *)(v31 + 8 * v27);
      if (v26)
      {
LABEL_25:
        int64_t v21 = v27;
      }

      else
      {
        int64_t v21 = v13 + 5;
        if (v13 + 5 >= v30) {
          goto LABEL_38;
        }
        unint64_t v26 = *(void *)(v31 + 8 * v21);
        if (!v26)
        {
          int64_t v28 = v13 + 6;
          while (v28 < v30)
          {
            unint64_t v26 = *(void *)(v31 + 8 * v28++);
            if (v26)
            {
              int64_t v21 = v28 - 1;
              goto LABEL_26;
            }
          }

          goto LABEL_38;
        }
      }
    }

uint64_t sub_100054D4C(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  if (!v7) {
    return swift_bridgeObjectRelease(a3);
  }
  while (1)
  {
    while (__OFSUB__(v7--, 1LL))
    {
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a3 < 0) {
        uint64_t v11 = a3;
      }
      else {
        uint64_t v11 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a3);
      unint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v7) {
        return swift_bridgeObjectRelease(a3);
      }
    }

    if ((a3 & 0xC000000000000001LL) != 0)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a3);
      goto LABEL_9;
    }

    if ((v7 & 0x8000000000000000LL) != 0) {
      goto LABEL_14;
    }
    if (v7 >= *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_15;
    }
    uint64_t v9 = *(void *)(a3 + 32 + 8 * v7);
    swift_retain(v9);
LABEL_9:
    uint64_t v12 = v9;
    a1(&v12);
    if (v4) {
      break;
    }
    swift_release(v9);
    if (!v7) {
      return swift_bridgeObjectRelease(a3);
    }
  }

  swift_bridgeObjectRelease(a3);
  return swift_release(v9);
}

void sub_100054E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v31 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v5 = __chkstk_darwin(v31);
  uint64_t v30 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v27 = a2;
  uint64_t v13 = a2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t v35 = a1;
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(v13, v34, 0LL, 0LL);
  int64_t v14 = 0LL;
  int64_t v29 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v15 = v32;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v16 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    int64_t v21 = (uint64_t *)(*(void *)(v35 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    sub_10002F8E0(v13, (uint64_t)v8, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    swift_bridgeObjectRetain_n(v22, 2LL);
    swift_retain();
    sub_100017AF4(v33, v23, v22);
    uint64_t v24 = v33[1];
    swift_release(v15);
    swift_bridgeObjectRelease(v24);
    uint64_t v25 = v30;
    sub_10002F8E0((uint64_t)v8, v30, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    swift_beginAccess(v13, v33, 33LL, 0LL);
    sub_100081BB0(v25, v13);
    swift_endAccess(v33);
    sub_10002F90C((uint64_t)v8, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    swift_bridgeObjectRelease(v22);
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v18 >= v29) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v29) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v28 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v29) {
          goto LABEL_23;
        }
        unint64_t v19 = *(void *)(v28 + 8 * v14);
        if (!v19)
        {
          int64_t v14 = v18 + 3;
          if (v18 + 3 >= v29) {
            goto LABEL_23;
          }
          unint64_t v19 = *(void *)(v28 + 8 * v14);
          if (!v19) {
            break;
          }
        }
      }
    }

uint64_t sub_100055164(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 176) = a3;
  *(void *)(v4 + 184) = v3;
  *(_BYTE *)(v4 + 41sub_10003318C(v0 + 2) = a2;
  *(void *)(v4 + 16sub_100006F7C(v0 + 8) = a1;
  uint64_t v5 = sub_1000306E4();
  *(void *)(v4 + 19sub_10003318C(v0 + 2) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 20sub_100016BD0(0, v0, 0) = v6;
  *(void *)(v4 + 20sub_100006F7C(v0 + 8) = sub_100021CC4(v6);
  uint64_t v7 = sub_100003B20(&qword_10010DA40);
  *(void *)(v4 + 2swift_endAccess(v0 + 16) = sub_10002FDFC(*(void *)(v7 - 8));
  *(void *)(v4 + 224) = sub_10002287C();
  uint64_t v8 = sub_100003B20(&qword_10010DA80);
  *(void *)(v4 + 23sub_10003318C(v0 + 2) = sub_100021CC4(*(void *)(v8 - 8));
  uint64_t v9 = sub_100003B20(&qword_10010BAA0);
  *(void *)(v4 + 24sub_100016BD0(0, v0, 0) = sub_100021CC4(*(void *)(v9 - 8));
  uint64_t v10 = sub_1000837B4();
  *(void *)(v4 + 24sub_100006F7C(v0 + 8) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v4 + 256) = v11;
  *(void *)(v4 + 264) = sub_10002FDFC(v11);
  *(void *)(v4 + 27sub_10003318C(v0 + 2) = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v12, v13, v14);
}

uint64_t sub_100055224()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D07C);
  *(void *)(v0 + 28sub_100016BD0(0, v0, 0) = v1;
  uint64_t v2 = sub_100084D04(v1);
  return sub_10008398C(v2, v3);
}

uint64_t sub_100055274()
{
  *(void *)(v0 + 28sub_100006F7C(v0 + 8) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_100055BEC;
  }
  else {
    uint64_t v4 = sub_1000552C8;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 184), 0LL);
}

uint64_t sub_1000552C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  sub_100085D68(v24 + 16, v27, &qword_10010C008);
  if (*(void *)(v24 + 120))
  {
    int64_t v29 = (__int128 *)sub_100085464();
    sub_1000070EC(v29, v30);
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v31 = *(os_log_s **)(v24 + 168);
    uint64_t v32 = sub_10000BF6C();
    *(void *)(v24 + 296) = sub_100003BA0(v32, (uint64_t)qword_10010D590);
    sub_10000C2A8((uint64_t)v31);
    sub_10003CFB4();
    os_log_type_t v33 = sub_100022604();
    BOOL v34 = sub_100022444(v31);
    uint64_t v35 = *(void *)(v24 + 168);
    if (v34)
    {
      uint64_t v36 = sub_10000BCF4(22LL);
      uint64_t v69 = sub_10000BCF4(32LL);
      a12 = v69;
      *(_DWORD *)uint64_t v36 = 134218242;
      *(void *)(v24 + 15sub_10003318C(v0 + 2) = *(void *)(v35 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 152, v24 + 160, v36 + 4);
      *(_WORD *)(v36 + 1sub_10003318C(v0 + 2) = 2080;
      if (*(void *)(v35 + 16) == 1LL) {
        uint64_t v38 = 0LL;
      }
      else {
        uint64_t v38 = 115LL;
      }
      sub_100083394(v38, v37, &a12);
      *(void *)(v24 + 16sub_100016BD0(0, v0, 0) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 160, v24 + 168, v36 + 14);
      sub_10000C1B0(v35);
      sub_100007570();
      sub_10000BFDC((void *)&_mh_execute_header, v31, v33, "Force loading in %ld asset%s", (uint8_t *)v36);
      sub_100021F38(v69);
      sub_10000BCC4(v69);
      sub_10000BCC4(v36);
    }

    else
    {

      sub_10000C1B0(v35);
    }

    uint64_t v54 = (void *)swift_task_alloc(dword_10010D654);
    *(void *)(v24 + 304) = v54;
    *uint64_t v54 = v24;
    v54[1] = sub_100055698;
    uint64_t v55 = sub_1000306EC(*(void *)(v24 + 168));
    return sub_1000840B0(v55, v24 + 56);
  }

  else
  {
    sub_10003096C(v28, &qword_10010C008);
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v41 = *(void *)(v24 + 200);
    uint64_t v40 = *(void *)(v24 + 208);
    uint64_t v42 = *(void *)(v24 + 176);
    uint64_t v43 = sub_10000BF6C();
    uint64_t v44 = sub_100003BA0(v43, (uint64_t)qword_10010D590);
    sub_100022218(v40, v42, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 16));
    uint64_t v45 = (os_log_s *)sub_1000228BC();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (sub_1000495A0(v45))
    {
      uint64_t v44 = sub_10000BCF4(12LL);
      uint64_t v70 = sub_10000BCF4(32LL);
      a12 = v70;
      sub_100085B1C(4.8149e-34);
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v48 = sub_100084050(v47);
      sub_100085098(v48, v49, v50, v51, v52);
      *(void *)(v24 + 136) = v53;
      sub_100022C00(v24 + 136, v24 + 144, a9);
      sub_1000303D0();
      sub_100022970();
      sub_100022210( (void *)&_mh_execute_header,  v45,  v46,  "forceLoadInModels attempted with unrecognized InferenceProvider %s",  (uint8_t *)v44);
      sub_100021F38(v70);
      sub_10000BCC4(v70);
      sub_10000BCC4(v44);
    }

    else
    {
      sub_100022970();
    }

    uint64_t v57 = sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    sub_1000302B0(v57, v58);
    *(void *)uint64_t v44 = sub_1000860F0();
    *(void *)(v44 + sub_100006F7C(v0 + 8) = v59;
    uint64_t v60 = sub_100022218( v44,  enum case for ModelManagerError.unrecognizedInferenceProvider(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 104LL));
    uint64_t v68 = swift_willThrow(v60, v61, v62, v63, v64, v65, v66, v67);
    sub_100083DC8(v68, &qword_10010C008);
    swift_task_dealloc(*(void *)(v24 + 272));
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    return sub_10002FF80(*(uint64_t (**)(void))(v24 + 8));
  }

uint64_t sub_100055698()
{
  *(void *)(v2 + 31sub_10003318C(v0 + 2) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 32sub_100016BD0(0, v0, 0) = v0;
  }
  return sub_10000BF5C();
}

#error "1000557E0: call analysis failed (funcsize=118)"
uint64_t sub_1000558E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  sub_100084774();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 256);
    uint64_t v3 = *(void *)(v0 + 184);
    sub_100030234(v2);
    sub_10000BD28();
    uint64_t v4 = sub_100055D64;
    uint64_t v5 = v3;
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 184);
    sub_100030234(*(void *)(v0 + 256));
    uint64_t v4 = (uint64_t (*)())sub_100055954;
    uint64_t v5 = v6;
  }

  return sub_100021BCC((uint64_t)v4, v5, 0LL);
}

#error "1000559FC: call analysis failed (funcsize=102)"
uint64_t sub_100055B08( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  void *a16,  uint64_t a17,  uint64_t a18)
{
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100021F74();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  a16 = (void *)*v19;
  uint64_t v22 = a16;
  sub_100022B10(&a16);
  v22[48] = v18;
  swift_task_dealloc(v23);
  uint64_t v24 = v22[32];
  if (v18)
  {
    uint64_t v25 = v22[28];
    uint64_t v26 = v22[23];
    sub_10002F99C(v25, &qword_10010DA40);
    sub_10008373C(v27, &qword_10010DA80);
    sub_100084C34(v28, &qword_10010BAA0);
    sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    sub_10000BD28();
    int64_t v29 = sub_100055E9C;
    uint64_t v30 = v26;
  }

  else
  {
    uint64_t v31 = v22[33];
    uint64_t v32 = v22[23];
    sub_10002F99C(v22[28], &qword_10010DA40);
    sub_100084C34(v33, &qword_10010DA80);
    sub_100084028(v34, &qword_10010BAA0);
    sub_100030250(v31, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    int64_t v29 = (uint64_t (*)())sub_100082CE0;
    uint64_t v30 = v32;
  }

  return sub_100083164((uint64_t)v29, v30, 0LL);
}

uint64_t sub_100055BEC()
{
  return sub_10003CF64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100055C3C()
{
  uint64_t v1 = sub_1000853E0();
  sub_10003096C(v1, &qword_10010C008);
  sub_10008453C();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  return sub_10003CF64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100055C9C()
{
  uint64_t v1 = sub_10000BD28();
  sub_100083DC8(v1, &qword_10010DA40);
  return sub_10000BF5C();
}

uint64_t sub_100055CF4()
{
  uint64_t v9 = sub_10003D244();
  sub_10003096C(v9, &qword_10010C008);
  sub_10008453C();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  return sub_10003CF64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100055D64()
{
  uint64_t v2 = sub_100030414();
  Logger.logObject.getter(v2);
  os_log_type_t v3 = sub_100022604();
  if (sub_1000495A0(v0))
  {
    uint64_t v4 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v5 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v4 = 138412290;
    sub_100030414();
    uint64_t v6 = sub_100049B9C();
    v1[18] = v6;
    sub_10002FE4C((uint64_t)(v1 + 18), (uint64_t)(v1 + 19));
    *uint64_t v5 = v6;
    sub_1000301C0();
    sub_1000301C0();
    sub_100022210( (void *)&_mh_execute_header,  v0,  v3,  "Failed acquiring assets: %@, releasing any assets that may have been acquired",  v4);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v5);
    sub_10000BCC4((uint64_t)v5);
    sub_10000BCC4((uint64_t)v4);
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
  }

  uint64_t v7 = v1[27];

  uint64_t v8 = sub_100030CC0();
  sub_10002FF3C(v7, v9, v10, v8);
  uint64_t v11 = (void *)swift_task_alloc(dword_10010D69C);
  v1[50] = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_100055C9C;
  uint64_t v12 = sub_1000306EC(v1[41]);
  return sub_100084550(v12, v13);
}

uint64_t sub_100055E9C()
{
  uint64_t v2 = sub_100030414();
  Logger.logObject.getter(v2);
  os_log_type_t v3 = sub_100022604();
  if (sub_1000495A0(v0))
  {
    uint64_t v4 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v5 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)uint64_t v4 = 138412290;
    sub_100030414();
    uint64_t v6 = sub_100049B9C();
    v1[18] = v6;
    sub_10002FE4C((uint64_t)(v1 + 18), (uint64_t)(v1 + 19));
    *uint64_t v5 = v6;
    sub_1000301C0();
    sub_1000301C0();
    sub_100022210( (void *)&_mh_execute_header,  v0,  v3,  "Failed acquiring assets: %@, releasing any assets that may have been acquired",  v4);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v5);
    sub_10000BCC4((uint64_t)v5);
    sub_10000BCC4((uint64_t)v4);
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
  }

  uint64_t v7 = v1[27];

  uint64_t v8 = sub_100030CC0();
  sub_10002FF3C(v7, v9, v10, v8);
  uint64_t v11 = (void *)swift_task_alloc(dword_10010D69C);
  v1[50] = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_100055C9C;
  uint64_t v12 = sub_1000306EC(v1[41]);
  return sub_100084550(v12, v13);
}

void sub_100055FD4()
{
  uint64_t v2 = v0;
  sub_100003B20(&qword_10010B208);
  sub_100030A28();
  __chkstk_darwin(v3);
  sub_10008570C();
  uint64_t v4 = sub_100084F6C();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000C120();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = v2 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_10002FFE4(v2 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)&v36);
  uint64_t v10 = sub_1000848B4();
  uint64_t v13 = sub_1000228F0(v10, v11, v12);
  char v14 = AssetPolicy.allowAssetTimerUse.getter(v13);
  sub_100022CF4(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
    if (*(double *)(v9 + *(int *)(v15 + 24)) > 0.0)
    {
      uint64_t v16 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
      if (!*(void *)(v2 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask))
      {
        uint64_t v17 = v15;
        sub_100085E84((uint64_t (*)(uint64_t))sub_100053114, sub_1000822E8);
        if ((v18 & 1) != 0)
        {
          if (qword_10010B0C0 != -1) {
            swift_once(&qword_10010B0C0, sub_1000529A4);
          }
          uint64_t v19 = sub_10000BF6C();
          int64_t v20 = (os_log_s *)sub_100003BA0(v19, (uint64_t)qword_10010D590);
          uint64_t v21 = sub_1000224B4();
          Logger.logObject.getter(v21);
          os_log_type_t v22 = sub_100022604();
          if (sub_100022444(v20))
          {
            uint64_t v23 = (uint8_t *)sub_10000BCF4(12LL);
            *(_DWORD *)uint64_t v23 = 134217984;
            uint64_t v24 = sub_100085E70(*(double *)(v9 + *(int *)(v17 + 24)));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v26);
            sub_100021DDC();
            sub_100022210( (void *)&_mh_execute_header,  v20,  v22,  "Starting task to purge inactive assets after %f seconds",  v23);
            sub_10000BCC4((uint64_t)v23);
          }

          else
          {
            sub_100021DDC();
          }

          uint64_t v27 = sub_100021FC8();
          sub_10002FF3C(v1, v28, v29, v27);
          uint64_t v30 = sub_100007460((uint64_t)&unk_100104100, 24LL);
          sub_100085990(v30);
          uint64_t v31 = (void *)sub_100007460((uint64_t)&unk_100104178, 40LL);
          uint64_t v32 = sub_1000858BC(v31);
          uint64_t v34 = sub_100085F20((uint64_t)v32, (uint64_t)&unk_10010DB40, v33);
          uint64_t v35 = *(void *)(v2 + v16);
          *(void *)(v2 + vswift_endAccess(v0 + 16) = v34;
          sub_100085B4C(v35);
        }
      }
    }
  }

  sub_100007448();
}

uint64_t sub_1000561DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  *(_BYTE *)(v8 + 4sub_100006F7C(v0 + 17) = a7;
  *(_BYTE *)(v8 + 4swift_endAccess(v0 + 16) = a6;
  *(void *)(v8 + 16sub_100006F7C(v0 + 8) = a5;
  *(void *)(v8 + 176) = v7;
  *(void *)(v8 + 15sub_10003318C(v0 + 2) = a3;
  *(void *)(v8 + 16sub_100016BD0(0, v0, 0) = a4;
  *(void *)(v8 + 136) = a1;
  *(void *)(v8 + 144) = a2;
  uint64_t v9 = *(void *)(sub_100003B20(&qword_10010DA40) - 8);
  *(void *)(v8 + 184) = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  *(void *)(v8 + 19sub_10003318C(v0 + 2) = v10;
  *(void *)(v8 + 20sub_100016BD0(0, v0, 0) = sub_100021CF0(v10);
  uint64_t v11 = *(void *)(sub_100003B20(&qword_10010DA80) - 8);
  *(void *)(v8 + 20sub_100006F7C(v0 + 8) = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  *(void *)(v8 + 2swift_endAccess(v0 + 16) = v12;
  *(void *)(v8 + 224) = sub_100021CF0(v12);
  uint64_t v13 = *(void *)(sub_100003B20(&qword_10010BAA0) - 8);
  *(void *)(v8 + 23sub_10003318C(v0 + 2) = v13;
  uint64_t v14 = *(void *)(v13 + 64);
  *(void *)(v8 + 24sub_100016BD0(0, v0, 0) = v14;
  *(void *)(v8 + 24sub_100006F7C(v0 + 8) = sub_100021CF0(v14);
  uint64_t v15 = sub_1000837B4();
  *(void *)(v8 + 256) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v8 + 264) = v16;
  uint64_t v17 = *(void *)(v16 + 64);
  *(void *)(v8 + 27sub_10003318C(v0 + 2) = v17;
  *(void *)(v8 + 28sub_100016BD0(0, v0, 0) = sub_100021CF0(v17);
  uint64_t v18 = sub_10004FB90();
  *(void *)(v8 + 28sub_100006F7C(v0 + 8) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v8 + 296) = v19;
  *(void *)(v8 + 304) = sub_100021CC4(v19);
  sub_100021C90();
  return sub_10000BD98();
}

#error "100056368: call analysis failed (funcsize=419)"
uint64_t sub_1000569C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_100084734();
  if (v0) {
    sub_100022D04();
  }
  sub_10000C0D4();
  return sub_100021BCC(v1, v2, v3);
}

#error "100056AD0: call analysis failed (funcsize=401)"
uint64_t sub_1000570C8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = (void *)sub_1000851EC();
  *(void *)(v0 + 36sub_100006F7C(v0 + 8) = v1;
  sub_10008566C(v1, (uint64_t)&unk_10010DC00);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 376) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100057140;
  sub_1000857B8((uint64_t)&type metadata for ());
  sub_1000836A0();
  return sub_10008343C();
}

uint64_t sub_100057140()
{
  *(void *)(v0 + 384) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 368));
  }
  sub_10003CE0C();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_100057198()
{
  return sub_100021BCC(v1, v2, v3);
}

#error "100057454: call analysis failed (funcsize=502)"
uint64_t sub_100057A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  swift_release(*(void *)(v0 + 360));
  sub_10000C140();
  sub_10000C0D4();
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_100057A60()
{
  return sub_1000221B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100057AA0()
{
  v0[51] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[22];
    swift_release(v0[49]);
    uint64_t v5 = sub_100058208;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = v0[22];
    uint64_t v5 = sub_100057B04;
  }

  return sub_100021BCC((uint64_t)v5, v6, 0LL);
}

uint64_t sub_100057B04()
{
  uint64_t v1 = (uint64_t (*)(void))sub_1000227B8();
  return sub_100021E4C(v1);
}

#error "100057C10: call analysis failed (funcsize=401)"
uint64_t sub_100058208()
{
  uint64_t v0;
  sub_1000220D4();
  swift_release(*(void *)(v0 + 392));
  sub_1000833A4();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  return sub_1000221B0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005824C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(_BYTE *)(v8 + 97) = v10;
  *(_BYTE *)(v8 + 96) = a8;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 7sub_10003318C(v0 + 2) = a7;
  *(void *)(v8 + 4sub_100006F7C(v0 + 8) = a4;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 3sub_10003318C(v0 + 2) = a2;
  *(void *)(v8 + 4sub_100016BD0(0, v0, 0) = a3;
  *(void *)(v8 + 8sub_100016BD0(0, v0, 0) = *a1;
  return swift_task_switch(sub_100058284, 0LL, 0LL);
}

#error "10005834C: call analysis failed (funcsize=104)"
uint64_t sub_10005843C()
{
  uint64_t (**v0)(void);
  sub_10000BCE4(*((void *)*v0 + 11));
  return sub_100007418(v0[1]);
}

uint64_t sub_100058470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[33] = a6;
  v7[34] = v6;
  v7[31] = a4;
  v7[32] = a5;
  v7[29] = a2;
  v7[30] = a3;
  v7[28] = a1;
  uint64_t v8 = sub_1000306E4();
  v7[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[36] = v9;
  v7[37] = sub_100021CC4(v9);
  uint64_t v10 = sub_100003B20(&qword_10010DA40);
  v7[38] = sub_10002FDFC(*(void *)(v10 - 8));
  v7[39] = sub_10002287C();
  uint64_t v11 = sub_100003B20(&qword_10010DA80);
  v7[40] = sub_100021CC4(*(void *)(v11 - 8));
  uint64_t v12 = sub_100003B20(&qword_10010BAA0);
  v7[41] = sub_100021CC4(*(void *)(v12 - 8));
  uint64_t v13 = sub_10004FB90();
  v7[42] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v7[43] = v14;
  v7[44] = sub_10002FDFC(v14);
  v7[45] = sub_10002287C();
  uint64_t v15 = sub_100084F6C();
  v7[46] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v7[47] = v16;
  v7[48] = sub_10002FDFC(v16);
  v7[49] = sub_10002287C();
  uint64_t v17 = *(void *)(sub_1000229CC() - 8);
  v7[50] = v17;
  v7[51] = sub_10002FDFC(v17);
  v7[52] = sub_10002287C();
  uint64_t v18 = sub_100003B20(&qword_10010B9A0);
  v7[53] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v7[54] = v19;
  v7[55] = sub_10002FDFC(v19);
  v7[56] = sub_10002287C();
  v7[57] = sub_10002287C();
  v7[58] = sub_10002287C();
  v7[59] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v20, v21, v22);
}

uint64_t sub_1000585B0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D07C);
  *(void *)(v0 + 48sub_100016BD0(0, v0, 0) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005860C;
  return sub_10008398C(v0 + 16, *(void *)(v0 + 248));
}

uint64_t sub_10005860C()
{
  *(void *)(v0 + 48sub_100006F7C(v0 + 8) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = (uint64_t (*)())sub_100059894;
  }
  else {
    uint64_t v4 = sub_100058660;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 272), 0LL);
}

uint64_t sub_100058660()
{
  uint64_t v262 = v1;
  uint64_t v263 = v2;
  uint64_t v261 = v0;
  uint64_t v3 = v0;
  uint64_t v228 = v0 + 16;
  sub_100085D68(v0 + 16, v4, &qword_10010C008);
  uint64_t v257 = v0;
  if (!*(void *)(v0 + 120))
  {
    sub_10003096C(v5, &qword_10010C008);
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v45 = *(void *)(v0 + 448);
    uint64_t v46 = *(void *)(v0 + 432);
    uint64_t v47 = *(void *)(v3 + 240);
    uint64_t v48 = sub_10000BF6C();
    sub_100003BA0(v48, (uint64_t)qword_10010D590);
    sub_1000222C4(v45, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
    uint64_t v49 = sub_100085860();
    uint64_t v52 = sub_1000228F0(v49, v50, v51);
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.error.getter();
    BOOL v55 = sub_100083DF0(v53);
    uint64_t v56 = *(void *)(v3 + 432);
    uint64_t v57 = *(void *)(v3 + 288);
    uint64_t v58 = *(void *)(v3 + 296);
    uint64_t v59 = *(void *)(v3 + 280);
    if (v55)
    {
      uint64_t v249 = v3 + 160;
      os_log_type_t v243 = v54;
      uint64_t v60 = v3 + 168;
      uint64_t v236 = *(void *)(v3 + 288);
      uint64_t v61 = sub_10000BCF4(22LL);
      uint64_t v254 = sub_10000BCF4(64LL);
      v260 = (void *)v254;
      *(_DWORD *)uint64_t v61 = 136315394;
      sub_100082738(&qword_10010BFE0, &qword_10010B9A0);
      uint64_t v63 = sub_100084C6C(v62);
      sub_100015EF8(v63, v64, (uint64_t *)&v260);
      *(void *)(v257 + 16sub_100006F7C(v0 + 8) = v65;
      uint64_t v66 = v3 + 168;
      uint64_t v3 = v257;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, v257 + 176, v61 + 4);
      sub_100022024();
      sub_100084C88(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
      *(_WORD *)(v61 + 1sub_10003318C(v0 + 2) = 2080;
      sub_100048A38( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v59, v67);
      sub_1000832F4(v68, v69);
      *(void *)(v257 + 16sub_100016BD0(0, v0, 0) = v70;
      sub_100083DF8(v249, v60);
      sub_10000BD28();
      sub_100030650(v58, *(uint64_t (**)(uint64_t, uint64_t))(v236 + 8));
      sub_10000BFDC( (void *)&_mh_execute_header,  v53,  v243,  "prewarmAssets for %s attempted with unrecognized InferenceProvider %s",  (uint8_t *)v61);
      sub_10000BD8C();
      sub_10000BCC4(v254);
      sub_10000BCC4(v61);
    }

    else
    {
      sub_100084C88(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
      sub_100030650(v58, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
    }

    uint64_t v73 = sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    uint64_t v75 = sub_1000302B0(v73, v74);
    uint64_t v77 = (uint64_t)v76;
    *uint64_t v76 = InferenceProviderDescriptor.description.getter(v75);
    *(void *)(v77 + sub_100006F7C(v0 + 8) = v78;
    uint64_t v79 = sub_100022218( v77,  enum case for ModelManagerError.unrecognizedInferenceProvider(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 104LL));
    sub_100085F0C(v79, v80, v81, v82, v83, v84, v85, v86, (uint64_t)v174, v181, v188, (uint64_t)v195, v202, (uint64_t)v209);
    sub_10002F99C(v228, &qword_10010C008);
    goto LABEL_28;
  }

  v216 = (void *)(v0 + 56);
  sub_1000070EC((__int128 *)(v0 + 96), v0 + 56);
  if (qword_10010B0C0 != -1) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v6 = *(void *)(v3 + 224);
    uint64_t v7 = *(void *)(v3 + 472);
    uint64_t v8 = *(void *)(v3 + 432);
    uint64_t v9 = *(void **)(v3 + 240);
    uint64_t v10 = sub_10000BF6C();
    uint64_t v11 = sub_100003BA0(v10, (uint64_t)qword_10010D590);
    *(void *)(v3 + 496) = v11;
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    *(void *)(v3 + 504) = v12;
    sub_100022218(v7, (uint64_t)v9, v12);
    sub_10000C2A8(v6);
    v222 = (os_log_s *)v11;
    sub_10003D390();
    int v13 = sub_100085AAC();
    BOOL v14 = sub_100085C0C((os_log_type_t)v13);
    v253 = (uint64_t *)(v3 + 224);
    uint64_t v15 = *(void *)(v3 + 224);
    if (!v14)
    {
      unint64_t v71 = *(void (**)(uint64_t))(*(void *)(v3 + 432) + 8LL);
      uint64_t v72 = sub_100085030();
      v71(v72);

      sub_10000C1B0(v15);
      goto LABEL_24;
    }

    HIDWORD(v20sub_10003318C(v0 + 2) = v13;
    uint64_t v209 = (os_log_s *)v9;
    uint64_t v16 = sub_10000BCF4(22LL);
    uint64_t v188 = sub_10000BCF4(64LL);
    uint64_t v259 = v188;
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_100082738(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v18 = sub_100083AB0(v17);
    sub_100015EF8(v18, v19, &v259);
    *(void *)(v3 + 20sub_100006F7C(v0 + 8) = v20;
    uint64_t v174 = (void *)(v3 + 216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 208, v3 + 216, v16 + 4);
    sub_100022024();
    uint64_t v21 = sub_100085030();
    uint64_t v181 = (uint64_t)v22;
    v22(v21);
    v195 = (uint8_t *)v16;
    *(_WORD *)(v16 + 1sub_10003318C(v0 + 2) = 2080;
    uint64_t v23 = *(void *)(v15 + 16);
    uint64_t v24 = _swiftEmptyArrayStorage;
    if (!v23) {
      break;
    }
    uint64_t v235 = *(void *)(v3 + 400);
    uint64_t v242 = *(void *)(v3 + 408);
    uint64_t v25 = *(void *)(v3 + 224);
    v260 = _swiftEmptyArrayStorage;
    sub_100016BD0(0, v23, 0);
    uint64_t v26 = sub_100020E24(v25);
    int v28 = v27;
    uint64_t v248 = v25 + 56;
    while ((v26 & 0x8000000000000000LL) == 0 && v26 < 1LL << *(_BYTE *)(v25 + 32))
    {
      if (*(_DWORD *)(v25 + 36) != v28) {
        goto LABEL_32;
      }
      uint64_t v29 = *(uint64_t **)(v3 + 408);
      uint64_t v30 = v25;
      sub_100083850(*(void *)(v25 + 48) + *(void *)(v235 + 72) * v26, *(void *)(v3 + 416));
      uint64_t v31 = sub_100085464();
      sub_10000B7B0(v31, v32);
      uint64_t v33 = *v29;
      uint64_t v34 = *(void *)(v242 + 8);
      sub_1000854A0();
      sub_10008424C((uint64_t)v29);
      uint64_t v24 = v260;
      if ((swift_isUniquelyReferenced_nonNull_native(v260) & 1) == 0)
      {
        sub_10000BDA4(0, v24[2] + 1LL);
        uint64_t v24 = v260;
      }

      unint64_t v36 = v24[2];
      unint64_t v35 = v24[3];
      if (v36 >= v35 >> 1)
      {
        sub_10000BDA4(v35 > 1, v36 + 1);
        uint64_t v24 = v260;
      }

      v24[2] = v36 + 1;
      uint64_t v37 = &v24[2 * v36];
      v37[4] = v33;
      v37[5] = v34;
      uint64_t v38 = sub_10003D238();
      uint64_t v26 = sub_100020D3C(v38, v39, v40, v41);
      int v28 = v42;
      char v44 = v43 & 1;
      --v23;
      uint64_t v3 = v257;
      uint64_t v25 = v30;
      if (!v23)
      {
        uint64_t v87 = sub_10003D238();
        sub_10000B830(v87, v88, v44);
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }

uint64_t sub_100058EF4()
{
  v0[66] = v2;
  v0[67] = v1;
  sub_100030924(v3);
  if (v1) {
    uint64_t v4 = sub_1000598FC;
  }
  else {
    uint64_t v4 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058F4C;
  }
  return sub_100021BCC((uint64_t)v4, v0[34], 0LL);
}

#error "100059098: call analysis failed (funcsize=178)"
uint64_t sub_100059234()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  sub_10000C130();
  sub_100022B10(v2);
  v0[69] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[34];
    swift_bridgeObjectRelease(v0[66]);
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100059980;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = v0[34];
    uint64_t v5 = sub_100059298;
  }

  return sub_100021BCC((uint64_t)v5, v6, 0LL);
}

uint64_t sub_100059298( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13 = (unint64_t)sub_10006325C(v9[66]);
  v9[70] = v13;
  if (v13 >> 62)
  {
    sub_1000225A4();
    uint64_t v14 = sub_100084C3C();
    unint64_t v13 = v9[70];
  }

  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1000225A4();
  }

  v9[71] = v14;
  if (v14)
  {
    if ((v13 & 0xC000000000000001LL) != 0)
    {
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
    }

    else
    {
      uint64_t v15 = *(void *)(v13 + 32);
      sub_100083778();
    }

    v9[72] = v15;
    v9[73] = 1LL;
    sub_10008507C();
    uint64_t v28 = sub_100003B20(&qword_10010B408);
    sub_100084AE8(v28);
    sub_100005FB0(v10, 0LL, 1LL, v14);
    uint64_t v29 = sub_100030CC0();
    sub_1000222C4(v11, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL));
    sub_100083478(v11);
    uint64_t v30 = (void *)swift_task_alloc(dword_10010D5F4);
    v9[74] = v30;
    uint64_t v31 = sub_1000847EC(v30, (uint64_t)sub_1000594B0);
    return sub_100082EF0(v31, v32, v33, v34, v35, v36, v37);
  }

  else
  {
    uint64_t v16 = (uint64_t (*)(uint64_t))v9[63];
    uint64_t v17 = (os_log_s *)v9[58];
    sub_100022B4C();
    uint64_t v18 = sub_100084F7C();
    uint64_t v19 = v16(v18);
    Logger.logObject.getter(v19);
    os_log_type_t v20 = sub_10000C108();
    if (sub_100030934(v20))
    {
      uint64_t v21 = (uint8_t *)sub_10000BCF4(12LL);
      sub_10000BCF4(32LL);
      sub_10008587C();
      sub_100084334(4.8149e-34);
      sub_100082738(&qword_10010BFE0, &qword_10010B9A0);
      uint64_t v23 = sub_100083100(v22);
      sub_100084640(v23, v24, v25, v26);
      v9[24] = v27;
      sub_1000495FC((uint64_t)(v9 + 24), (uint64_t)(v9 + 25), a9);
      sub_100022024();
      sub_100084070();
      sub_100022210( (void *)&_mh_execute_header,  v17,  (os_log_type_t)v13,  "Successfully prewarmed assets for session %s",  v21);
      sub_100021F38((uint64_t)v16);
      sub_10000BCC4((uint64_t)v16);
      sub_10000BCC4((uint64_t)v21);
    }

    else
    {
      sub_100084070();
    }

    uint64_t v39 = (void *)sub_1000845F0();
    v9[76] = v39;
    uint64_t v40 = sub_100084EA4(v39, (uint64_t)sub_100059758);
    return sub_1000842BC(v40, v41, v42, v43);
  }

uint64_t sub_1000594B0()
{
  v1[75] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v1[39];
    uint64_t v5 = v1[34];
    sub_10002F99C(v4, &qword_10010DA40);
    sub_100084028(v6, &qword_10010DA80);
    sub_100083DC8(v7, &qword_10010BAA0);
    sub_10000BD28();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100059B20;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v10 = v1[34];
    sub_10002F99C(v1[39], &qword_10010DA40);
    sub_100083DC8(v11, &qword_10010DA80);
    sub_10003096C(v12, &qword_10010BAA0);
    uint64_t v8 = sub_100059578;
    uint64_t v9 = v10;
  }

  return sub_100021BCC((uint64_t)v8, v9, 0LL);
}

uint64_t sub_100059578( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = v10[73];
  uint64_t v15 = v10[71];
  swift_release(v10[72]);
  if (v14 == v15)
  {
    uint64_t v17 = (os_log_s *)v10[58];
    sub_100085B68(v10[70]);
    uint64_t v18 = sub_100085904();
    Logger.logObject.getter(v18);
    os_log_type_t v19 = sub_10000C108();
    if (sub_100030934(v19))
    {
      os_log_type_t v20 = (uint8_t *)sub_10000BCF4(12LL);
      sub_10000BCF4(32LL);
      sub_10008587C();
      sub_100084334(4.8149e-34);
      sub_100082738(&qword_10010BFE0, &qword_10010B9A0);
      uint64_t v22 = sub_100083100(v21);
      sub_100084640(v22, v23, v24, v25);
      v10[24] = v26;
      sub_1000495FC((uint64_t)(v10 + 24), (uint64_t)(v10 + 25), a9);
      sub_100022024();
      sub_100084070();
      sub_100022210((void *)&_mh_execute_header, v17, v9, "Successfully prewarmed assets for session %s", v20);
      sub_100021F38(v13);
      sub_10000BCC4(v13);
      sub_10000BCC4((uint64_t)v20);
    }

    else
    {
      sub_100084070();
    }

    uint64_t v31 = (void *)sub_1000845F0();
    v10[76] = v31;
    uint64_t v32 = sub_100084EA4(v31, (uint64_t)sub_100059758);
    return sub_1000842BC(v32, v33, v34, v35);
  }

  else
  {
    uint64_t v27 = v10[73];
    uint64_t v28 = v10[70];
    if ((v28 & 0xC000000000000001LL) != 0)
    {
      uint64_t result = sub_100086004(v16, v28);
      uint64_t v30 = result;
    }

    else
    {
      uint64_t v30 = *(void *)(v28 + 8 * v27 + 32);
      uint64_t result = sub_100083778();
    }

    _BYTE v10[72] = v30;
    v10[73] = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
    }

    else
    {
      sub_10008507C();
      uint64_t v36 = sub_100003B20(&qword_10010B408);
      sub_100084AE8(v36);
      sub_100005FB0(v11, 0LL, 1LL, v27);
      uint64_t v37 = sub_100030CC0();
      sub_1000222C4(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16LL));
      sub_100083478(v12);
      uint64_t v38 = (void *)swift_task_alloc(dword_10010D5F4);
      v10[74] = v38;
      uint64_t v39 = sub_1000847EC(v38, (uint64_t)sub_1000594B0);
      return sub_100082EF0(v39, v40, v41, v42, v43, v44, v45);
    }
  }

  return result;
}

uint64_t sub_100059758()
{
  v0[77] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[34];
    uint64_t v5 = sub_100059D18;
  }

  else
  {
    uint64_t v6 = v0[66];
    uint64_t v7 = v0[34];
    swift_bridgeObjectRelease(v6);
    sub_10000BD28();
    uint64_t v5 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000597C4;
    uint64_t v4 = v7;
  }

  return sub_100021BCC((uint64_t)v5, v4, 0LL);
}

#error "100059854: call analysis failed (funcsize=51)"
#error "1000598D8: call analysis failed (funcsize=26)"
#error "10005995C: call analysis failed (funcsize=32)"
#error "1000599E0: call analysis failed (funcsize=32)"
uint64_t sub_100059A04()
{
  uint64_t v0;
  uint64_t v1;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 632));
  uint64_t v1 = sub_10000BD28();
  sub_100083DC8(v1, &qword_10010DA40);
  return sub_10000BF5C();
}

#error "100059AF8: call analysis failed (funcsize=48)"
#error "100059BD0: call analysis failed (funcsize=119)"
#error "100059DC0: call analysis failed (funcsize=117)"
void sub_100059F08()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_s *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  os_log_t v41;
  os_log_type_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  void v50[3];
  uint64_t v51;
  sub_100085964();
  uint64_t v3 = v2;
  char v45 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100003B20(&qword_10010B9A0);
  sub_10008593C();
  __chkstk_darwin(v8);
  sub_10004E158();
  uint64_t v49 = v9;
  sub_100022634();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v14);
  sub_1000841CC();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v47 = *v6;
  uint64_t v18 = v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002FFE4(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v51);
  sub_10002F8E0(v18, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  os_log_type_t v19 = *(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(v1 + 16);
  uint64_t v48 = v3;
  uint64_t v46 = v19;
  v19((uint64_t)v13, v3, v7);
  os_log_type_t v20 = v45;
  sub_100083778();
  sub_100019778();
  uint64_t v21 = *(void (**)(uint64_t))(v1 + 8);
  uint64_t v22 = v7;
  uint64_t v23 = sub_1000858EC();
  v21(v23);
  swift_release(v20);
  sub_10002F8E0((uint64_t)v17, v0, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10000BE64(v18, (uint64_t)v50, 33LL);
  sub_100081BB0(v0, v18);
  swift_endAccess(v50);
  sub_10002F90C((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v24 = sub_10000BF6C();
  sub_100003BA0(v24, (uint64_t)qword_10010D590);
  v46(v49, v48, v7);
  uint64_t v25 = v47;
  uint64_t v26 = sub_10000BD20(v47);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  uint64_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = sub_10000BCF4(22LL);
    uint64_t v30 = sub_10000BCF4(64LL);
    v50[0] = v30;
    sub_100085390(4.8151e-34);
    sub_10000C278();
    sub_100091424();
    uint64_t v48 = (void (*)(uint64_t, uint64_t))v21;
    uint64_t v32 = v31;
    swift_release(v25);
    uint64_t v33 = sub_1000848B4();
    sub_100015EF8(v33, v34, v35);
    sub_100085898();
    sub_10000BCDC(v25);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v29 + 1sub_10003318C(v0 + 2) = 2080;
    sub_100082738(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v36 = v49;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v22, v37);
    sub_100086078(v38, v39);
    sub_100085898();
    sub_10000BD28();
    v48(v36, v22);
    sub_100085CFC();
    _os_log_impl(v40, v41, v42, v43, (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2LL);
    sub_10000BCC4(v30);
    sub_10000BCC4(v29);
  }

  else
  {
    sub_10000BCDC(v25);
    char v44 = sub_100084F7C();
    v21(v44);
  }

  sub_100084DC8();
}

void sub_10005A258()
{
  uint64_t v2 = v0;
  uint64_t v43 = sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v3);
  sub_10000C120();
  uint64_t v47 = v5 - v4;
  uint64_t v6 = sub_100083B94();
  sub_100085588();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)&v41 - v11);
  sub_10002FFE4(v0 + 120, (uint64_t)&v53);
  sub_100085D84();
  if (v20)
  {
    sub_100083778();
    uint64_t v40 = sub_100022944();
    sub_100083D00(v40, v0, (uint64_t)sub_10005A614);
LABEL_37:
    sub_100007448();
    return;
  }

  uint64_t v13 = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v52 = &_swiftEmptySetSingleton;
  if (v0 < 0) {
    uint64_t v14 = v0;
  }
  else {
    uint64_t v14 = v0 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_10000BD20(v0);
  sub_100022944();
  uint64_t v48 = __CocoaSet.makeIterator()(v14);
  uint64_t v15 = sub_1000838E0();
  if (!v15)
  {
LABEL_36:
    sub_10000BCDC(v2);
    swift_release(v48);
    goto LABEL_37;
  }

  uint64_t v16 = v15;
  uint64_t v42 = v2;
  uint64_t v46 = sub_100022DB0();
  HIDWORD(v45) = enum case for LoadState.loaded(_:);
  uint64_t v44 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v50[0] = v16;
    sub_100022CC0((uint64_t)&v51, (uint64_t)v50, v44, v46);
    uint64_t v17 = v51 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10000BE64( v51 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  (uint64_t)v50,  33LL);
    sub_1000228F0((uint64_t)v12, HIDWORD(v45), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_100084244(v6);
    sub_100084244(v6);
    uint64_t v18 = sub_100084D6C();
    BOOL v20 = v20 && v12 == type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
    if (v20)
    {
      sub_10000C1B0((uint64_t)v12);
      sub_1000849DC(v17, v47);
      sub_1000228F0((uint64_t)v10, (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
LABEL_19:
      sub_100085840();
      uint64_t v27 = sub_1000854A8();
      goto LABEL_20;
    }

    uint64_t v13 = sub_100021EB8( v18,  (uint64_t)v12,  v19,  (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_10000BD28();
    sub_100022024();
    uint64_t v21 = v17;
    uint64_t v22 = v47;
    sub_1000849DC(v21, v47);
    sub_1000228F0((uint64_t)v10, (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
    if ((v13 & 1) != 0) {
      goto LABEL_19;
    }
    sub_100084244(v6);
    sub_100084244(v6);
    uint64_t v23 = sub_100084D6C();
    if (v20 && v10 == type metadata accessor for InferenceProviderAsset.ManagerOwnedState) {
      break;
    }
    uint64_t v13 = sub_100021EB8( v23,  (uint64_t)v10,  v24,  (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_10000BD28();
    sub_100022024();
    sub_100083670((uint64_t)v10);
    sub_100084D50(v22);
    sub_100083670((uint64_t)v12);
    sub_100084D64();
    if ((v13 & 1) != 0) {
      goto LABEL_21;
    }
    uint64_t v26 = sub_100085D40();
LABEL_32:
    uint64_t v16 = __CocoaSet.Iterator.next()(v26);
    if (!v16)
    {
      uint64_t v2 = v42;
      goto LABEL_36;
    }
  }

  sub_10000C1B0((uint64_t)v10);
  sub_100085840();
  uint64_t v27 = v22;
  uint64_t v28 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
LABEL_20:
  sub_10002F90C(v27, v28);
  ((void (*)(uint64_t (*)(uint64_t), uint64_t))v13)(v12, v6);
  sub_100084D64();
LABEL_21:
  uint64_t v13 = (uint64_t)v52;
  sub_1000855A8();
  if (!(!v20 & v37))
  {
    sub_100083EE0( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50[0],  v50[1],  v50[2],  v50[3],  v50[4],  v50[5],  v50[6],  v50[7],  v50[8],  v50[9],  v50[10],  v50[11],  v50[12],  v51,  (uint64_t)v52);
    uint64_t v13 = (uint64_t)v52;
  }

  sub_100085D2C(*(void *)(v13 + 40));
  sub_100085CA0((uint64_t)v50);
  sub_100085D24();
  sub_100082D00();
  if (!v20)
  {
    sub_100082E1C();
LABEL_31:
    sub_100083EAC(v38);
    goto LABEL_32;
  }

  sub_100082E08();
  while (1)
  {
    sub_100083820();
    if (v20 && (v39 & 1) != 0) {
      break;
    }
    sub_100083980();
    sub_10008310C();
    if (!v20)
    {
      sub_100082DF4();
      goto LABEL_31;
    }
  }

  __break(1u);
}

uint64_t sub_10005A614()
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v1 = *(void *)(State - 8);
  __chkstk_darwin(State);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LoadState.loaded(_:), State);
  sub_100086130((uint64_t)v3);
  char v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, State);
  return v5 & 1;
}

uint64_t sub_10005A6B0@<X0>(uint64_t a1@<X8>)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100003BB8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v2 = v4;
  }

  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }

  sub_10005A720(a1);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10005A720@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10004FB90();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10000C120();
  uint64_t v6 = v5 - v4;
  sub_100054198();
  uint64_t v8 = v7;
  sub_10005A258();
  sub_1000120B4(v9, v8);
  uint64_t v11 = v10;
  uint64_t v12 = sub_100021EB0();
  sub_1000120B4(v12, v11);
  uint64_t v14 = v13;
  AssetCost.init(onDeviceMemory:)(0LL);
  sub_1000508B4(v6, v14, a1);
  sub_100085C98(v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return sub_10000C1E0();
}

uint64_t sub_10005A7E4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (uint64_t *)(v1 + 120);
  sub_10002FFE4((uint64_t)v5, (uint64_t)v48);
  sub_100084314();
  uint64_t v6 = sub_1000225A4();
  sub_10007A1CC(v6, v3);
  sub_100050654();
  sub_100085A58();
  sub_100084314();
  sub_100021EB0();
  uint64_t v7 = sub_1000225A4();
  Swift::Int v8 = sub_10007A76C(v7, v3, a1);
  sub_100084314();
  Swift::Int v9 = sub_10007ADEC(v8, v3, v2);
  sub_1000514FC(v9, (uint64_t (*)(char *, char *))sub_10005363C, 0LL);
  sub_100085A58();
  if (v2 && (*(_BYTE *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) == 0)
  {
    sub_100084314();
    sub_10000C0A0();
    uint64_t v10 = sub_1000225A4();
    sub_10007B0C0(v10, v3);
    uint64_t v11 = (void *)sub_100050654();
    sub_10000C1F0();
    uint64_t v44 = v2;
    for (uint64_t i = v2; ; uint64_t i = v21)
    {
      uint64_t v13 = i + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      sub_10002FFE4(i + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v47);
      uint64_t v14 = *(void *)(v13 + *(int *)(sub_1000837BC() + 40));
      sub_1000225FC();
      uint64_t v15 = sub_1000854A0();
      uint64_t v2 = sub_1000512A4(v15, v11);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease(v14);
      if (!v17)
      {
        sub_100022024();
        swift_release(v44);
        return i;
      }

      uint64_t v18 = *v5;
      sub_100083500();
      uint64_t v19 = swift_bridgeObjectRetain(v18);
      sub_100050F50(v19, v2, v17);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease(v18);
      if (!v21) {
        break;
      }
      sub_100022D34();
      sub_10000C1F0();
    }

    sub_100022024();
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v22 = sub_10000BF6C();
    sub_100003BA0(v22, (uint64_t)qword_10010D590);
    uint64_t v23 = sub_100083500();
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)sub_10000BCF4(12LL);
      uint64_t v27 = sub_10000BCF4(32LL);
      uint64_t v46 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      sub_100083500();
      uint64_t v28 = sub_1000845E4();
      sub_100015EF8(v28, v29, v30);
      uint64_t v45 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v26 + 4);
      swift_bridgeObjectRelease_n(v17, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "nextAssetToUnloadToMakeRoom found dynamicBlocker but couldn't get asset for it %s",  v26,  0xCu);
      swift_arrayDestroy(v27, 1LL);
      sub_10000BCC4(v27);
      sub_10000BCC4((uint64_t)v26);
    }

    else
    {

      swift_bridgeObjectRelease_n(v17, 2LL);
    }

    uint64_t v32 = type metadata accessor for ModelManagerError(0LL);
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    swift_allocError(v32, v33, 0LL, 0LL);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104LL))( v34,  enum case for ModelManagerError.internalError(_:),  v32);
    swift_willThrow(v35, v36, v37, v38, v39, v40, v41, v42);
    swift_release(v44);
    sub_10000C1F0();
  }

  return v2;
}

uint64_t sub_10005AB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(sub_1000837BC() + 32);
  return static Date.< infix(_:_:)(a1 + v4, a2 + v4);
}

uint64_t sub_10005AB98(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010DA40);
  v2[19] = sub_100021CC4(*(void *)(v3 - 8));
  uint64_t v4 = sub_1000837B4();
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = sub_10002FDFC(v5);
  v2[23] = sub_10002287C();
  uint64_t v6 = sub_100083B94();
  v2[24] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[25] = v7;
  v2[26] = sub_10002FDFC(v7);
  v2[27] = sub_10002287C();
  uint64_t v8 = sub_10004FB90();
  v2[28] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[29] = v9;
  v2[30] = sub_100021CC4(v9);
  sub_100021C90();
  return sub_100021BCC(v10, v11, v12);
}

#error "10005ADCC: call analysis failed (funcsize=465)"
uint64_t sub_10005B3C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v8 = *v1;
  uint64_t v2 = v8;
  sub_100022B10(&v8);
  *(void *)(v2 + 28sub_100016BD0(0, v0, 0) = v0;
  swift_task_dealloc(v3);
  sub_100030234(*(void *)(v2 + 168));
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10005B428( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v28;
  a24 = v29;
  a22 = v25;
  swift_release(*(void *)(v25 + 264));
  uint64_t v30 = *(void *)(v25 + 280);
  uint64_t v31 = *(uint8_t **)(v25 + 256);
  uint64_t v32 = *(void *)(v25 + 240);
  uint64_t v33 = *(uint8_t **)(v25 + 224);
  sub_100084218();
  sub_1000852E8();
  sub_10008586C();
  if (sub_1000854FC() >= v26)
  {
    sub_100085454();
    os_log_type_t v35 = sub_100022604();
    if (!sub_1000830F4(v35))
    {
LABEL_7:
      sub_100083C1C();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      uint64_t v39 = (uint64_t (*)(void))sub_1000227B8();
      return sub_10002FF80(v39);
    }

    uint64_t v36 = "unloadIfNeededToMakeRoom finished making room";
LABEL_6:
    uint64_t v37 = (_WORD *)sub_10000BCF4(2LL);
    sub_10008431C(v37);
    sub_1000495CC((void *)&_mh_execute_header, (os_log_s *)v24, v38, v36, v33);
    sub_10000BCC4((uint64_t)v33);
    goto LABEL_7;
  }

  uint64_t v24 = *(void *)(v25 + 144);
  *(void *)(v25 + 264) = sub_10005A7E4(*(void *)(v25 + 136));
  if (v30)
  {
    sub_100084ADC(*(void *)(v25 + 240));
    sub_10000C140();
    sub_10000BFE4();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    return sub_10002FF80(*(uint64_t (**)(void))(v25 + 8));
  }

  sub_100085A0C();
  if (!v40)
  {
    Logger.logObject.getter(0LL);
    os_log_type_t v48 = sub_100022604();
    if (!sub_1000830F4(v48)) {
      goto LABEL_7;
    }
    uint64_t v36 = "unloadIfNeededToMakeRoom no more assets to unload";
    goto LABEL_6;
  }

  uint64_t v41 = sub_10000BD20(v32);
  Logger.logObject.getter(v41);
  os_log_type_t v42 = sub_10000C160();
  if (sub_100022444(0LL))
  {
    uint64_t v43 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v44 = sub_10000BCF4(32LL);
    a12 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v31 = v43 + 4;
    sub_1000224B4();
    uint64_t v24 = sub_1000852F0();
    uint64_t v27 = v45;
    sub_100021DDC();
    sub_1000834C0(v24, v46, &a12);
    *(void *)(v25 + 11sub_10003318C(v0 + 2) = v47;
    sub_100022C00(v25 + 112, v25 + 120, (uint64_t)(v43 + 4));
    sub_10000BCDC(v32);
    sub_1000303D0();
    sub_100022210((void *)&_mh_execute_header, 0LL, v42, "unloadIfNeededToMakeRoom unloading %s", v43);
    sub_100021F38(v44);
    sub_10000BCC4(v44);
    sub_10000BCC4((uint64_t)v43);
  }

  else
  {

    sub_10000BCDC(v32);
  }

  if ((*(_BYTE *)(v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10008447C();
    sub_10002FFE4(v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v49);
    sub_1000834E0(*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v31 + 2));
    sub_1000834F0(*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v31 + 13));
    sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_1000839A4(v50);
    sub_1000835CC();
    sub_100083680(0LL);
    uint64_t v51 = *(uint64_t (**)(void, void, void))(v27 + 104);
    if ((v24 & 1) == 0)
    {
      sub_100084208(v51);
      uint64_t v52 = (void *)swift_task_alloc(dword_10010D684);
      *(void *)(v25 + 27sub_10003318C(v0 + 2) = v52;
      *uint64_t v52 = v25;
      v52[1] = sub_10005B3C0;
      uint64_t v53 = sub_100083690();
      return sub_100082E9C(v53, v54, v55);
    }
  }

  else
  {
    sub_100086044();
  }

  sub_1000841F8(v51);
  uint64_t v56 = sub_100030CC0();
  sub_10002FF3C(v24, v57, v58, v56);
  uint64_t v59 = (void *)swift_task_alloc(dword_10010D694);
  *(void *)(v25 + 28sub_100006F7C(v0 + 8) = v59;
  *uint64_t v59 = v25;
  v59[1] = sub_10005B72C;
  uint64_t v60 = sub_1000226A4();
  return sub_100082D60(v60, v61, v62);
}

uint64_t sub_10005B72C()
{
  *(void *)(v0 + 296) = v1;
  swift_task_dealloc(v3);
  sub_10002F99C(*(void *)(v0 + 152), &qword_10010DA40);
  sub_10008344C();
  sub_10000C0D4();
  return sub_1000830E0(v4, v5, v6);
}

uint64_t sub_10005B798( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v28;
  a24 = v29;
  a22 = v25;
  swift_release(*(void *)(v25 + 264));
  uint64_t v30 = *(void *)(v25 + 296);
  uint64_t v31 = *(uint8_t **)(v25 + 256);
  uint64_t v32 = *(void *)(v25 + 240);
  uint64_t v33 = *(uint8_t **)(v25 + 224);
  sub_100084218();
  sub_1000852E8();
  sub_10008586C();
  if (sub_1000854FC() >= v26)
  {
    sub_100085454();
    os_log_type_t v35 = sub_100022604();
    if (!sub_1000830F4(v35))
    {
LABEL_7:
      sub_100083C1C();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      uint64_t v39 = (uint64_t (*)(void))sub_1000227B8();
      return sub_10002FF80(v39);
    }

    uint64_t v36 = "unloadIfNeededToMakeRoom finished making room";
LABEL_6:
    uint64_t v37 = (_WORD *)sub_10000BCF4(2LL);
    sub_10008431C(v37);
    sub_1000495CC((void *)&_mh_execute_header, (os_log_s *)v24, v38, v36, v33);
    sub_10000BCC4((uint64_t)v33);
    goto LABEL_7;
  }

  uint64_t v24 = *(void *)(v25 + 144);
  *(void *)(v25 + 264) = sub_10005A7E4(*(void *)(v25 + 136));
  if (v30)
  {
    sub_100084ADC(*(void *)(v25 + 240));
    sub_10000C140();
    sub_10000BFE4();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    return sub_10002FF80(*(uint64_t (**)(void))(v25 + 8));
  }

  sub_100085A0C();
  if (!v40)
  {
    Logger.logObject.getter(0LL);
    os_log_type_t v48 = sub_100022604();
    if (!sub_1000830F4(v48)) {
      goto LABEL_7;
    }
    uint64_t v36 = "unloadIfNeededToMakeRoom no more assets to unload";
    goto LABEL_6;
  }

  uint64_t v41 = sub_10000BD20(v32);
  Logger.logObject.getter(v41);
  os_log_type_t v42 = sub_10000C160();
  if (sub_100022444(0LL))
  {
    uint64_t v43 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v44 = sub_10000BCF4(32LL);
    a12 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v31 = v43 + 4;
    sub_1000224B4();
    uint64_t v24 = sub_1000852F0();
    uint64_t v27 = v45;
    sub_100021DDC();
    sub_1000834C0(v24, v46, &a12);
    *(void *)(v25 + 11sub_10003318C(v0 + 2) = v47;
    sub_100022C00(v25 + 112, v25 + 120, (uint64_t)(v43 + 4));
    sub_10000BCDC(v32);
    sub_1000303D0();
    sub_100022210((void *)&_mh_execute_header, 0LL, v42, "unloadIfNeededToMakeRoom unloading %s", v43);
    sub_100021F38(v44);
    sub_10000BCC4(v44);
    sub_10000BCC4((uint64_t)v43);
  }

  else
  {

    sub_10000BCDC(v32);
  }

  if ((*(_BYTE *)(v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10008447C();
    sub_10002FFE4(v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v49);
    sub_1000834E0(*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v31 + 2));
    sub_1000834F0(*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v31 + 13));
    sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_1000839A4(v50);
    sub_1000835CC();
    sub_100083680(0LL);
    uint64_t v51 = *(uint64_t (**)(void, void, void))(v27 + 104);
    if ((v24 & 1) == 0)
    {
      sub_100084208(v51);
      uint64_t v52 = (void *)swift_task_alloc(dword_10010D684);
      *(void *)(v25 + 27sub_10003318C(v0 + 2) = v52;
      *uint64_t v52 = v25;
      v52[1] = sub_10005B3C0;
      uint64_t v53 = sub_100083690();
      return sub_100082E9C(v53, v54, v55);
    }
  }

  else
  {
    sub_100086044();
  }

  sub_1000841F8(v51);
  uint64_t v56 = sub_100030CC0();
  sub_10002FF3C(v24, v57, v58, v56);
  uint64_t v59 = (void *)swift_task_alloc(dword_10010D694);
  *(void *)(v25 + 28sub_100006F7C(v0 + 8) = v59;
  *uint64_t v59 = v25;
  v59[1] = sub_10005B72C;
  uint64_t v60 = sub_1000226A4();
  return sub_100082D60(v60, v61, v62);
}

uint64_t sub_10005BA9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  a22 = v24;
  uint64_t v28 = *(void *)(v24 + 280);
  *(void *)(v24 + 12sub_100016BD0(0, v0, 0) = v28;
  sub_10002293C();
  uint64_t v29 = sub_100003B20(&qword_10010B468);
  uint64_t v30 = *(void *)(v24 + 104);
  if (v30)
  {
    swift_bridgeObjectRelease(v30);
LABEL_4:
    sub_10008574C();
    sub_100083B58();
    sub_100021DDC();
LABEL_5:
    sub_100084ADC(*(void *)(v24 + 240));
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    uint64_t v31 = *(uint64_t (**)(void))(v24 + 8);
    return sub_10002FF80(v31);
  }

  sub_100022D04();
  sub_100021DDC();
  sub_10008574C();
  uint64_t v33 = *(void *)(v24 + 256);
  uint64_t v34 = *(void *)(v24 + 240);
  uint64_t v35 = *(void *)(v24 + 224);
  sub_100084218();
  unint64_t v36 = sub_1000852E8();
  sub_100084B7C(v34);
  if (sub_1000854FC() >= v36)
  {
    sub_100085454();
    os_log_type_t v44 = sub_100022604();
    if (!sub_1000830F4(v44))
    {
LABEL_15:
      sub_100083C1C();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      uint64_t v31 = (uint64_t (*)(void))sub_1000227B8();
      return sub_10002FF80(v31);
    }

    uint64_t v45 = "unloadIfNeededToMakeRoom finished making room";
LABEL_14:
    uint64_t v46 = (_WORD *)sub_10000BCF4(2LL);
    sub_10008431C(v46);
    sub_1000495CC((void *)&_mh_execute_header, (os_log_s *)v28, v47, v45, (uint8_t *)(v24 + 120));
    sub_10000BCC4(v24 + 120);
    goto LABEL_15;
  }

  uint64_t v28 = v35;
  *(void *)(v24 + 264) = sub_100085274();
  if (v35) {
    goto LABEL_5;
  }
  sub_100085A0C();
  if (!v37)
  {
    Logger.logObject.getter(0LL);
    os_log_type_t v48 = sub_100022604();
    if (!sub_1000830F4(v48)) {
      goto LABEL_15;
    }
    uint64_t v45 = "unloadIfNeededToMakeRoom no more assets to unload";
    goto LABEL_14;
  }

  uint64_t v38 = sub_10000BD20(v34);
  Logger.logObject.getter(v38);
  os_log_type_t v39 = sub_10000C160();
  if (sub_10008342C(v39))
  {
    uint64_t v40 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v33 = sub_10000BCF4(32LL);
    a12 = v33;
    *(_DWORD *)uint64_t v40 = 136315138;
    sub_1000224B4();
    uint64_t v28 = sub_1000852F0();
    uint64_t v25 = v41;
    sub_100021DDC();
    sub_1000834C0(v28, v42, &a12);
    *(void *)(v24 + 11sub_10003318C(v0 + 2) = v43;
    sub_100022C00(v24 + 112, v24 + 120, (uint64_t)(v40 + 4));
    sub_10000BCDC(v34);
    sub_1000303D0();
    sub_100022210((void *)&_mh_execute_header, 0LL, (os_log_type_t)v36, "unloadIfNeededToMakeRoom unloading %s", v40);
    sub_100021F38(v33);
    sub_10000BCC4(v33);
    sub_10000BCC4((uint64_t)v40);
  }

  else
  {

    sub_10000BCDC(v34);
  }

  if ((*(_BYTE *)(v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10008447C();
    sub_10002FFE4(v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v49);
    sub_1000834E0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16));
    sub_1000834F0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 104));
    sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_1000839A4(v50);
    sub_1000835CC();
    sub_100083680(0LL);
    uint64_t v51 = *(uint64_t (**)(void, void, void))(v25 + 104);
    if ((v28 & 1) == 0)
    {
      sub_100084208(v51);
      uint64_t v52 = (void *)swift_task_alloc(dword_10010D684);
      *(void *)(v24 + 27sub_10003318C(v0 + 2) = v52;
      *uint64_t v52 = v24;
      v52[1] = sub_10005B3C0;
      uint64_t v53 = sub_100083690();
      return sub_100082E9C(v53, v54, v55);
    }
  }

  else
  {
    sub_100086044();
  }

  sub_1000841F8(v51);
  uint64_t v56 = sub_100030CC0();
  sub_10002FF3C(v28, v57, v58, v56);
  uint64_t v59 = (void *)swift_task_alloc(dword_10010D694);
  *(void *)(v24 + 28sub_100006F7C(v0 + 8) = v59;
  *uint64_t v59 = v24;
  v59[1] = sub_10005B72C;
  uint64_t v60 = sub_1000226A4();
  return sub_100082D60(v60, v61, v62);
}

uint64_t sub_10005BDFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  a22 = v24;
  uint64_t v28 = *(void *)(v24 + 296);
  *(void *)(v24 + 12sub_100016BD0(0, v0, 0) = v28;
  sub_10002293C();
  uint64_t v29 = sub_100003B20(&qword_10010B468);
  uint64_t v30 = *(void *)(v24 + 104);
  if (v30)
  {
    swift_bridgeObjectRelease(v30);
LABEL_4:
    sub_10008574C();
    sub_100083B58();
    sub_100021DDC();
LABEL_5:
    sub_100084ADC(*(void *)(v24 + 240));
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    uint64_t v31 = *(uint64_t (**)(void))(v24 + 8);
    return sub_10002FF80(v31);
  }

  sub_100022D04();
  sub_100021DDC();
  sub_10008574C();
  uint64_t v33 = *(void *)(v24 + 256);
  uint64_t v34 = *(void *)(v24 + 240);
  uint64_t v35 = *(void *)(v24 + 224);
  sub_100084218();
  unint64_t v36 = sub_1000852E8();
  sub_100084B7C(v34);
  if (sub_1000854FC() >= v36)
  {
    sub_100085454();
    os_log_type_t v44 = sub_100022604();
    if (!sub_1000830F4(v44))
    {
LABEL_15:
      sub_100083C1C();
      sub_10000BFE4();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      uint64_t v31 = (uint64_t (*)(void))sub_1000227B8();
      return sub_10002FF80(v31);
    }

    uint64_t v45 = "unloadIfNeededToMakeRoom finished making room";
LABEL_14:
    uint64_t v46 = (_WORD *)sub_10000BCF4(2LL);
    sub_10008431C(v46);
    sub_1000495CC((void *)&_mh_execute_header, (os_log_s *)v28, v47, v45, (uint8_t *)(v24 + 120));
    sub_10000BCC4(v24 + 120);
    goto LABEL_15;
  }

  uint64_t v28 = v35;
  *(void *)(v24 + 264) = sub_100085274();
  if (v35) {
    goto LABEL_5;
  }
  sub_100085A0C();
  if (!v37)
  {
    Logger.logObject.getter(0LL);
    os_log_type_t v48 = sub_100022604();
    if (!sub_1000830F4(v48)) {
      goto LABEL_15;
    }
    uint64_t v45 = "unloadIfNeededToMakeRoom no more assets to unload";
    goto LABEL_14;
  }

  uint64_t v38 = sub_10000BD20(v34);
  Logger.logObject.getter(v38);
  os_log_type_t v39 = sub_10000C160();
  if (sub_10008342C(v39))
  {
    uint64_t v40 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v33 = sub_10000BCF4(32LL);
    a12 = v33;
    *(_DWORD *)uint64_t v40 = 136315138;
    sub_1000224B4();
    uint64_t v28 = sub_1000852F0();
    uint64_t v25 = v41;
    sub_100021DDC();
    sub_1000834C0(v28, v42, &a12);
    *(void *)(v24 + 11sub_10003318C(v0 + 2) = v43;
    sub_100022C00(v24 + 112, v24 + 120, (uint64_t)(v40 + 4));
    sub_10000BCDC(v34);
    sub_1000303D0();
    sub_100022210((void *)&_mh_execute_header, 0LL, (os_log_type_t)v36, "unloadIfNeededToMakeRoom unloading %s", v40);
    sub_100021F38(v33);
    sub_10000BCC4(v33);
    sub_10000BCC4((uint64_t)v40);
  }

  else
  {

    sub_10000BCDC(v34);
  }

  if ((*(_BYTE *)(v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10008447C();
    sub_10002FFE4(v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v49);
    sub_1000834E0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16));
    sub_1000834F0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 104));
    sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_1000839A4(v50);
    sub_1000835CC();
    sub_100083680(0LL);
    uint64_t v51 = *(uint64_t (**)(void, void, void))(v25 + 104);
    if ((v28 & 1) == 0)
    {
      sub_100084208(v51);
      uint64_t v52 = (void *)swift_task_alloc(dword_10010D684);
      *(void *)(v24 + 27sub_10003318C(v0 + 2) = v52;
      *uint64_t v52 = v24;
      v52[1] = sub_10005B3C0;
      uint64_t v53 = sub_100083690();
      return sub_100082E9C(v53, v54, v55);
    }
  }

  else
  {
    sub_100086044();
  }

  sub_1000841F8(v51);
  uint64_t v56 = sub_100030CC0();
  sub_10002FF3C(v28, v57, v58, v56);
  uint64_t v59 = (void *)swift_task_alloc(dword_10010D694);
  *(void *)(v24 + 28sub_100006F7C(v0 + 8) = v59;
  *uint64_t v59 = v24;
  v59[1] = sub_10005B72C;
  uint64_t v60 = sub_1000226A4();
  return sub_100082D60(v60, v61, v62);
}

uint64_t sub_10005C15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[9] = a6;
  v7[10] = v6;
  v7[7] = a2;
  v7[8] = a4;
  uint64_t v9 = sub_100003B20(&qword_10010B408);
  v7[11] = v9;
  v7[12] = *(void *)(v9 - 8);
  v7[13] = sub_100085FDC();
  v7[14] = sub_100085FDC();
  v7[15] = sub_100085FDC();
  uint64_t v10 = sub_100003B20(&qword_10010DA80);
  v7[16] = sub_100021CC4(*(void *)(v10 - 8));
  uint64_t v11 = sub_100003B20(&qword_10010BAA0);
  v7[17] = sub_100021CC4(*(void *)(v11 - 8));
  uint64_t v12 = sub_1000837B4();
  v7[18] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[19] = v13;
  v7[20] = sub_100021CC4(v13);
  uint64_t v14 = (void *)swift_task_alloc(dword_10010D654);
  v7[21] = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_10005C240;
  uint64_t v15 = sub_100084094();
  return sub_100060828(v15, a5);
}

uint64_t sub_10005C240()
{
  uint64_t v2 = *(uint64_t **)v1;
  sub_100084E60();
  v2[22] = v3;
  v2[23] = v0;
  sub_100030924(v4);
  if (!v0) {
    return sub_100021BCC((uint64_t)sub_10005C2DC, v2[10], 0LL);
  }
  swift_task_dealloc(v2[20]);
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  return sub_100021E4C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10005C2DC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = sub_100083A64();
  *(void *)(v3 + swift_endAccess(v0 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  sub_100085340();
  sub_100054A54(v4, v5, v6);
  sub_10000BFE4();
  uint64_t v7 = (void *)swift_task_alloc(dword_10010D604);
  v0[24] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10005C360;
  uint64_t v8 = sub_1000306EC(v0[22]);
  return sub_10005AB98(v8);
}

uint64_t sub_10005C360()
{
  if (v1) {
    uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005C950;
  }
  else {
    uint64_t v2 = sub_10005C3A4;
  }
  return sub_100021BCC((uint64_t)v2, *(void *)(v0 + 80), 0LL);
}

uint64_t sub_10005C3A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v15 = (unint64_t)sub_100085DC8();
  *(void *)(v11 + 20sub_100006F7C(v0 + 8) = v15;
  if (v15 >> 62)
  {
    sub_10008450C(v15);
    uint64_t v16 = sub_100022D0C();
    uint64_t v9 = v16;
  }

  else
  {
    uint64_t v16 = sub_10008512C(v15);
  }

  *(void *)(v11 + 2swift_endAccess(v0 + 16) = v9;
  if (v9)
  {
    *(_DWORD *)(v11 + 27sub_10003318C(v0 + 2) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
    uint64_t v17 = *(void *)(v11 + 208);
    if ((v17 & 0xC000000000000001LL) != 0) {
      sub_10008539C(v16, v17);
    }
    else {
      sub_100083778();
    }
    sub_100084278();
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    *(void *)(v11 + 24sub_100016BD0(0, v0, 0) = v34;
    sub_100083B50(v10, v14, v34);
    sub_100085370();
    uint64_t v35 = sub_100003B20(&qword_10010B9A0);
    sub_1000222C4(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16LL));
    sub_100083478(v12);
    unint64_t v36 = (void *)swift_task_alloc(dword_10010D5F4);
    *(void *)(v11 + 24sub_100006F7C(v0 + 8) = v36;
    uint64_t v37 = sub_100084B58(v36, (uint64_t)sub_10005C5FC);
    return sub_100082EF0(v37, v38, v39, v40, v41, v42, v43);
  }

  else
  {
    sub_10000C1B0(*(void *)(v11 + 208));
    sub_10000BD28();
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v18 = *(void *)(v11 + 120);
    uint64_t v19 = *(os_log_s **)(v11 + 88);
    uint64_t v20 = *(void *)(v11 + 96);
    uint64_t v21 = *(void *)(v11 + 56);
    uint64_t v22 = sub_10000BF6C();
    sub_100003BA0(v22, (uint64_t)qword_10010D590);
    sub_1000222C4(v18, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16));
    sub_10003CFB4();
    os_log_type_t v23 = sub_10000C108();
    BOOL v24 = sub_100030934(v23);
    uint64_t v25 = *(void *)(v11 + 120);
    uint64_t v26 = *(void *)(v11 + 96);
    if (v24)
    {
      uint64_t v27 = (uint8_t *)sub_10000BCF4(12LL);
      sub_10000BCF4(32LL);
      sub_10008587C();
      sub_100084334(4.8149e-34);
      sub_100082738((unint64_t *)&qword_10010B418, &qword_10010B408);
      uint64_t v29 = sub_100083100(v28);
      sub_100084640(v29, v30, v31, v32);
      *(void *)(v11 + 3sub_10003318C(v0 + 2) = v33;
      sub_1000495FC(v11 + 32, v11 + 40, a9);
      sub_100022024();
      sub_1000304C4(v25, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
      sub_100022210( (void *)&_mh_execute_header,  v19,  (os_log_type_t)v21,  "Successfully acquired assets for request %s",  v27);
      sub_100021F38(v13);
      sub_10000BCC4(v13);
      sub_10000BCC4((uint64_t)v27);
    }

    else
    {
      sub_1000304C4(*(void *)(v11 + 120), *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    }

    sub_100084424();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    uint64_t v45 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021CD4(v45);
  }

uint64_t sub_10005C5FC()
{
  uint64_t v17 = v2;
  uint64_t v18 = v3;
  uint64_t v16 = v1;
  uint64_t v16 = (void *)*v1;
  uint64_t v4 = v16;
  sub_100022B10(&v16);
  v4[32] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    uint64_t v6 = v4[16];
    uint64_t v7 = v4[10];
    sub_10002F99C(v6, &qword_10010DA80);
    sub_100084C34(v8, &qword_10010BAA0);
    sub_100082D50();
    sub_10000BD28();
    uint64_t v9 = sub_10005CDE8;
    uint64_t v10 = v7;
  }

  else
  {
    uint64_t v12 = v4[19];
    uint64_t v11 = v4[20];
    uint64_t v13 = v4[10];
    sub_10002F99C(v4[16], &qword_10010DA80);
    sub_100084028(v14, &qword_10010BAA0);
    sub_100030250(v11, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    uint64_t v9 = sub_10005C6D0;
    uint64_t v10 = v13;
  }

  return sub_100021BCC((uint64_t)v9, v10, 0LL);
}

uint64_t sub_10005C6D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v9[29];
  uint64_t v12 = v9[27];
  swift_release();
  if (v11 == v12)
  {
    sub_10000C1B0(v9[26]);
    sub_10000BD28();
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v14 = v9[15];
    unint64_t v15 = (os_log_s *)v9[11];
    uint64_t v16 = v9[12];
    uint64_t v17 = v9[7];
    uint64_t v18 = sub_10000BF6C();
    sub_100003BA0(v18, (uint64_t)qword_10010D590);
    sub_1000222C4(v14, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16));
    sub_10003CFB4();
    os_log_type_t v19 = sub_10000C108();
    BOOL v20 = sub_100030934(v19);
    uint64_t v21 = v9[15];
    uint64_t v22 = v9[12];
    if (v20)
    {
      os_log_type_t v23 = (uint8_t *)sub_10000BCF4(12LL);
      sub_10000BCF4(32LL);
      sub_10008587C();
      sub_100084334(4.8149e-34);
      sub_100082738((unint64_t *)&qword_10010B418, &qword_10010B408);
      uint64_t v25 = sub_100083100(v24);
      sub_100084640(v25, v26, v27, v28);
      v9[4] = v29;
      sub_1000495FC((uint64_t)(v9 + 4), (uint64_t)(v9 + 5), a9);
      sub_100022024();
      sub_1000304C4(v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
      sub_100022210( (void *)&_mh_execute_header,  v15,  (os_log_type_t)v17,  "Successfully acquired assets for request %s",  v23);
      sub_100021F38(v10);
      sub_10000BCC4(v10);
      sub_10000BCC4((uint64_t)v23);
    }

    else
    {
      sub_1000304C4(v9[15], *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    }

    sub_100084424();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    uint64_t v34 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021CD4(v34);
  }

  else
  {
    uint64_t v30 = v9[29];
    uint64_t v31 = v9[26];
    if ((v31 & 0xC000000000000001LL) != 0)
    {
      uint64_t result = sub_100086004(v13, v31);
      uint64_t v33 = result;
    }

    else
    {
      uint64_t v33 = *(void *)(v31 + 8 * v30 + 32);
      uint64_t result = swift_retain();
    }

    v9[28] = v33;
    v9[29] = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v35 = v9[17];
      uint64_t v36 = v9[16];
      uint64_t v38 = v9[11];
      uint64_t v37 = v9[12];
      uint64_t v39 = v9[7];
      sub_100030768(v9[19]);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
      v9[30] = v40;
      sub_1000228F0(v35, v39, v40);
      sub_100005FB0(v35, 0LL, 1LL, v38);
      sub_100003B20(&qword_10010B9A0);
      uint64_t v41 = sub_100085860();
      sub_1000222C4(v41, v42, v43);
      sub_100083478(v36);
      os_log_type_t v44 = (void *)swift_task_alloc(dword_10010D5F4);
      v9[31] = v44;
      *os_log_type_t v44 = v9;
      v44[1] = sub_10005C5FC;
      return sub_100082EF0(v33, v9[20], v9[17], v9[16], v9[9], 1, 0);
    }
  }

  return result;
}

#error "10005CA48: call analysis failed (funcsize=276)"
uint64_t sub_10005CDE8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(os_log_s *, uint64_t, uint64_t);
  os_log_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  sub_100030A68();
  uint64_t v28 = v1;
  uint64_t v29 = v2;
  uint64_t v27 = v0;
  swift_release();
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v3 = (void (*)(os_log_s *, uint64_t, uint64_t))v0[30];
  uint64_t v4 = (os_log_s *)v0[13];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[7];
  uint64_t v7 = sub_10000BF6C();
  sub_100003BA0(v7, (uint64_t)qword_10010D590);
  v3(v4, v6, v5);
  sub_10002293C();
  sub_10002293C();
  sub_1000228BC();
  uint64_t v8 = sub_10000C108();
  uint64_t v9 = sub_10000C0F8(v8);
  uint64_t v10 = v0[32];
  if (v9)
  {
    uint64_t v11 = sub_10000BCF4(22LL);
    uint64_t v24 = (void *)sub_10000BCF4(8LL);
    uint64_t v25 = sub_10000BCF4(32LL);
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v11 = 136315394;
    sub_100082738((unint64_t *)&qword_10010B418, &qword_10010B408);
    uint64_t v13 = sub_100022BE0(v12);
    sub_100015EF8(v13, v14, &v26);
    v0[2] = v15;
    sub_100085D08((uint64_t)(v0 + 2), (uint64_t)(v0 + 3));
    sub_10000C000();
    sub_1000840A0();
    *(_WORD *)(v11 + 1sub_10003318C(v0 + 2) = 2112;
    swift_errorRetain(v10);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v10);
    v0[3] = v16;
    sub_1000301B8((uint64_t)(v0 + 3), (uint64_t)(v0 + 4));
    *uint64_t v24 = v16;
    sub_100085A04();
    sub_100085A04();
    sub_10000BFDC( (void *)&_mh_execute_header,  v4,  (os_log_type_t)v6,  "Failed to acquire assets for request %s: %@, releasing any assets that may have been acquired",  (uint8_t *)v11);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v24);
    sub_10000BCC4((uint64_t)v24);
    sub_100021F38(v25);
    sub_10000BCC4(v25);
    sub_10000BCC4(v11);
  }

  else
  {
    sub_1000840A0();
    sub_100085A04();
    sub_100085A04();
  }

  uint64_t v17 = v0[10];
  uint64_t v18 = v0[7];
  os_log_type_t v19 = sub_100083A64();
  *(void *)(v19 + swift_endAccess(v0 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  sub_1000851B4((void (*)(uint64_t *))sub_100082C9C, v19);
  sub_10000BD28();
  sub_10000BFE4();
  BOOL v20 = (void *)swift_task_alloc(dword_10010D69C);
  v0[33] = v20;
  *BOOL v20 = v0;
  v20[1] = sub_10005D04C;
  uint64_t v21 = sub_1000306EC(v0[26]);
  return sub_10006CF24(v21, v22);
}

uint64_t sub_10005D04C()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_10005D090( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10003CF64(*(uint64_t (**)(void))(v8 + 8));
}

void sub_10005D0FC(uint64_t *a1, uint64_t a2, void (*a3)(char *, uint64_t))
{
  uint64_t v41 = a2;
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v41 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v41 - v18;
  uint64_t v43 = *a1;
  uint64_t v20 = v43 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess( v43 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v47,  0LL,  0LL);
  sub_10002F8E0(v20, (uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v21 = *(void (**)(char *, void (*)(void, void), uint64_t))(v6 + 16);
  os_log_type_t v44 = a3;
  uint64_t v42 = v21;
  v21(v11, (void (*)(void, void))a3, v5);
  swift_retain();
  sub_100018F28();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v5;
  v22(v13, v5);
  swift_release();
  sub_10002F8E0((uint64_t)v19, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  swift_beginAccess(v20, v46, 33LL, 0LL);
  sub_100081BB0((uint64_t)v17, v20);
  swift_endAccess();
  sub_10002F90C((uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_100003BA0(v24, (uint64_t)qword_10010D590);
  uint64_t v25 = v45;
  v42(v45, (void (*)(void, void))v44, v5);
  uint64_t v26 = v43;
  uint64_t v27 = swift_retain_n(v43, 2LL);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    v46[0] = v31;
    *(_DWORD *)uint64_t v30 = 136315394;
    swift_retain();
    uint64_t v32 = sub_100091424();
    os_log_type_t v44 = v22;
    uint64_t v34 = v33;
    swift_release();
    sub_100015EF8(v32, v34, v46);
    uint64_t v48 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    swift_release_n(v26, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 1sub_10003318C(v0 + 2) = 2080;
    sub_100082738((unint64_t *)&qword_10010B418, &qword_10010B408);
    uint64_t v36 = v45;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v23, v37);
    sub_100015EF8(v38, v39, v46);
    uint64_t v48 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    swift_bridgeObjectRelease();
    v44(v36, v23);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Marked asset %s in use by request %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 2LL);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v26, 2LL);
    v22(v25, v5);
  }
}

uint64_t sub_10005D514(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = sub_1000833BC();
  v2[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_100021CC4(v4);
  uint64_t v5 = sub_100003B20(&qword_10010B9A0);
  v2[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[18] = v6;
  v2[19] = sub_10002FDFC(v6);
  v2[20] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v7, v8, v9);
}

uint64_t sub_10005D584()
{
  uint64_t v2 = (os_log_s *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 96);
  sub_10002FFE4(*(void *)(v0 + 104) + 120LL, v0 + 48);
  *(void *)(sub_100083A64() + swift_endAccess(v0 + 16) = v1;
  sub_10000C030();
  uint64_t v3 = sub_100021EB0();
  Swift::Int v5 = sub_1000856A8(v3, v4, (uint64_t (*)(uint64_t))sub_100082730);
  sub_10002FF04();
  if ((sub_1000BCA84(v5) & 1) != 0)
  {
    sub_100021E70();
    sub_100084A60();
    sub_10000C140();
    sub_10000BFE4();
    return sub_100084174(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v85 = v5;
  if (qword_10010B0C0 != -1) {
    goto LABEL_29;
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void **)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = sub_10000BF6C();
    *(void *)(v0 + 16sub_100006F7C(v0 + 8) = sub_100003BA0(v10, (uint64_t)qword_10010D590);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = sub_100021CF0(*(void *)(v11 + 64));
    sub_1000850C0(v12);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8[2];
    *(void *)(v0 + 176) = v13;
    sub_1000228F0(v7, v9, v13);
    uint64_t v14 = v85;
    sub_10000BD20(v85);
    sub_10003D390();
    BYTE4(v84) = sub_10000C108();
    BOOL v15 = sub_100085160(BYTE4(v84));
    uint64_t v16 = *(void *)(v0 + 160);
    if (!v15)
    {
      sub_1000855E4(*(void *)(v0 + 144));

      sub_10000BCDC(v85);
      sub_1000856DC();
LABEL_27:
      *(void *)(v0 + 184) = v2;
      uint64_t v69 = *(void *)(v0 + 96);
      uint64_t v68 = *(void *)(v0 + 104);
      sub_10002FF48();
      sub_10006325C(v14);
      sub_10000C280();
      uint64_t v70 = sub_100083A64();
      *(void *)(v70 + swift_endAccess(v0 + 16) = v68;
      *(void *)(v70 + 24) = v69;
      sub_100085F70((void (*)(uint64_t *))sub_100082CB0);
      sub_10000C1E0();
      sub_10002294C();
      unint64_t v71 = (void *)swift_task_alloc(dword_10010D66C);
      *(void *)(v0 + 19sub_10003318C(v0 + 2) = v71;
      char v72 = sub_100085E1C(v71, (uint64_t)sub_10005D93C);
      return sub_100084158(v72);
    }

    uint64_t v17 = (_DWORD *)sub_1000843E0();
    uint64_t v75 = sub_10000BCF4(64LL);
    uint64_t v90 = v75;
    *uint64_t v17 = 136315394;
    sub_100082738(&qword_10010BFE0, &qword_10010B9A0);
    uint64_t v19 = sub_100083100(v18);
    sub_100085CB4(v19, v20, v21, v22, v23, v24, v25, v26, v73, v74, v75, v77, v79, v80, v81, v82, v83);
    sub_100084A18(v27);
    sub_100022024();
    sub_100085624();
    uint64_t v28 = _swiftEmptyArrayStorage;
    uint64_t v77 = v1;
    uint64_t v79 = (uint64_t)v17;
    if (!sub_1000859B8())
    {
      uint64_t v2 = (os_log_s *)v88;
LABEL_26:
      uint64_t v57 = sub_100085178();
      sub_1000228C4();
      sub_100030304(v57, v58, &v90);
      *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v59;
      sub_1000301B8(v74, v83);
      sub_10000BCDC(v14);
      sub_10000C000();
      sub_10000BFDC((void *)&_mh_execute_header, v2, BYTE4(v84), "Session %s releasing assets %s", (uint8_t *)v10);
      sub_10000BD8C();
      sub_10000BCC4(v76);
      sub_10000BCC4(v10);

      sub_100085688(v60, v61, v62, v63, v64, v65, v66, v67, v73, v74, v76, v77, v79, v80, v81);
      uint64_t v2 = v78;
      goto LABEL_27;
    }

    sub_100084BB0();
    unint64_t v87 = v85 & 0xC000000000000001LL;
    if ((v85 & 0xC000000000000001LL) != 0)
    {
      uint64_t v29 = __CocoaSet.startIndex.getter(v85);
      char v31 = 1;
    }

    else
    {
      uint64_t v29 = sub_100020E24(v85);
      char v31 = v32 & 1;
    }

    uint64_t v92 = v29;
    uint64_t v93 = v30;
    LOBYTE(v94) = v31;
    if (v10 < 0) {
      break;
    }
    sub_100085C60();
    while (v10)
    {
      sub_1000847B4( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v73,  v74,  v76,  v77,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90,  (uint64_t)v91,  v92,  v93,  v94,  v95,  v96);
      sub_100083B50( v16,  v41 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      sub_1000228B4();
      if ((sub_100085C54() & 1) == 0)
      {
        sub_100084D18();
        uint64_t v28 = v91;
      }

      unint64_t v42 = v28[2];
      uint64_t v2 = (os_log_s *)(v42 + 1);
      if (v42 >= v28[3] >> 1)
      {
        sub_100084FD8();
        uint64_t v28 = v91;
      }

      sub_100083E18();
      uint64_t v91 = v28;
      uint64_t v16 = v94;
      if (v87)
      {
        if ((v94 & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v43 = sub_100085EA4();
        if (v43) {
          swift_isUniquelyReferenced_nonNull_native(v43);
        }
        uint64_t v2 = (os_log_s *)v88;
        uint64_t v47 = sub_100003B20(&qword_10010C6A0);
        uint64_t v55 = sub_100085420( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v73,  v74,  v76,  v77,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86);
        sub_100085400(v55, v56);
        uint64_t v33 = sub_10008597C(v11);
      }

      else
      {
        uint64_t v44 = sub_10008530C();
        uint64_t v33 = sub_100084438(v44, v45, v46);
      }

      if (!--v10)
      {
        sub_10008528C();
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_29:
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }

  __break(1u);
LABEL_31:
  uint64_t result = sub_10000C280();
  __break(1u);
  return result;
}

uint64_t sub_10005D93C()
{
  return sub_10000BD98();
}

#error "10005DA28: call analysis failed (funcsize=67)"
void sub_10005DA98()
{
  type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  sub_100031338();
}

uint64_t sub_10005DACC(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = sub_1000833BC();
  v2[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_100021CC4(v4);
  uint64_t v5 = sub_100003B20(&qword_10010B408);
  v2[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[18] = v6;
  v2[19] = sub_10002FDFC(v6);
  v2[20] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v7, v8, v9);
}

uint64_t sub_10005DB3C()
{
  uint64_t v2 = (os_log_s *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 96);
  sub_10002FFE4(*(void *)(v0 + 104) + 120LL, v0 + 48);
  *(void *)(sub_100083A64() + swift_endAccess(v0 + 16) = v1;
  sub_10000C030();
  uint64_t v3 = sub_100021EB0();
  Swift::Int v5 = sub_1000856A8(v3, v4, (uint64_t (*)(uint64_t))sub_1000826F0);
  sub_10002FF04();
  if ((sub_1000BCA84(v5) & 1) != 0)
  {
    sub_100021E70();
    sub_100084A60();
    sub_10000C140();
    sub_10000BFE4();
    return sub_100084174(*(uint64_t (**)(void))(v0 + 8));
  }

  uint64_t v85 = v5;
  if (qword_10010B0C0 != -1) {
    goto LABEL_29;
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void **)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = sub_10000BF6C();
    *(void *)(v0 + 16sub_100006F7C(v0 + 8) = sub_100003BA0(v10, (uint64_t)qword_10010D590);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = sub_100021CF0(*(void *)(v11 + 64));
    sub_1000850C0(v12);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8[2];
    *(void *)(v0 + 176) = v13;
    sub_1000228F0(v7, v9, v13);
    uint64_t v14 = v85;
    sub_10000BD20(v85);
    sub_10003D390();
    BYTE4(v84) = sub_10000C108();
    BOOL v15 = sub_100085160(BYTE4(v84));
    uint64_t v16 = *(void *)(v0 + 160);
    if (!v15)
    {
      sub_1000855E4(*(void *)(v0 + 144));

      sub_10000BCDC(v85);
      sub_1000856DC();
LABEL_27:
      *(void *)(v0 + 184) = v2;
      uint64_t v69 = *(void *)(v0 + 96);
      uint64_t v68 = *(void *)(v0 + 104);
      sub_10002FF48();
      sub_10006325C(v14);
      sub_10000C280();
      uint64_t v70 = sub_100083A64();
      *(void *)(v70 + swift_endAccess(v0 + 16) = v68;
      *(void *)(v70 + 24) = v69;
      sub_100085F70((void (*)(uint64_t *))sub_1000826F8);
      sub_10000C1E0();
      sub_10002294C();
      unint64_t v71 = (void *)swift_task_alloc(dword_10010D66C);
      *(void *)(v0 + 19sub_10003318C(v0 + 2) = v71;
      char v72 = sub_100085E1C(v71, (uint64_t)sub_10005DEF4);
      return sub_100084158(v72);
    }

    uint64_t v17 = (_DWORD *)sub_1000843E0();
    uint64_t v75 = sub_10000BCF4(64LL);
    uint64_t v90 = v75;
    *uint64_t v17 = 136315394;
    sub_100082738((unint64_t *)&qword_10010B418, &qword_10010B408);
    uint64_t v19 = sub_100083100(v18);
    sub_100085CB4(v19, v20, v21, v22, v23, v24, v25, v26, v73, v74, v75, v77, v79, v80, v81, v82, v83);
    sub_100084A18(v27);
    sub_100022024();
    sub_100085624();
    uint64_t v28 = _swiftEmptyArrayStorage;
    uint64_t v77 = v1;
    uint64_t v79 = (uint64_t)v17;
    if (!sub_1000859B8())
    {
      uint64_t v2 = (os_log_s *)v88;
LABEL_26:
      uint64_t v57 = sub_100085178();
      sub_1000228C4();
      sub_100030304(v57, v58, &v90);
      *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v59;
      sub_1000301B8(v74, v83);
      sub_10000BCDC(v14);
      sub_10000C000();
      sub_10000BFDC((void *)&_mh_execute_header, v2, BYTE4(v84), "Request %s releasing assets %s", (uint8_t *)v10);
      sub_10000BD8C();
      sub_10000BCC4(v76);
      sub_10000BCC4(v10);

      sub_100085688(v60, v61, v62, v63, v64, v65, v66, v67, v73, v74, v76, v77, v79, v80, v81);
      uint64_t v2 = v78;
      goto LABEL_27;
    }

    sub_100084BB0();
    unint64_t v87 = v85 & 0xC000000000000001LL;
    if ((v85 & 0xC000000000000001LL) != 0)
    {
      uint64_t v29 = __CocoaSet.startIndex.getter(v85);
      char v31 = 1;
    }

    else
    {
      uint64_t v29 = sub_100020E24(v85);
      char v31 = v32 & 1;
    }

    uint64_t v92 = v29;
    uint64_t v93 = v30;
    LOBYTE(v94) = v31;
    if (v10 < 0) {
      break;
    }
    sub_100085C60();
    while (v10)
    {
      sub_1000847B4( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v73,  v74,  v76,  v77,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90,  (uint64_t)v91,  v92,  v93,  v94,  v95,  v96);
      sub_100083B50( v16,  v41 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      sub_1000228B4();
      if ((sub_100085C54() & 1) == 0)
      {
        sub_100084D18();
        uint64_t v28 = v91;
      }

      unint64_t v42 = v28[2];
      uint64_t v2 = (os_log_s *)(v42 + 1);
      if (v42 >= v28[3] >> 1)
      {
        sub_100084FD8();
        uint64_t v28 = v91;
      }

      sub_100083E18();
      uint64_t v91 = v28;
      uint64_t v16 = v94;
      if (v87)
      {
        if ((v94 & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v43 = sub_100085EA4();
        if (v43) {
          swift_isUniquelyReferenced_nonNull_native(v43);
        }
        uint64_t v2 = (os_log_s *)v88;
        uint64_t v47 = sub_100003B20(&qword_10010C6A0);
        uint64_t v55 = sub_100085420( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v73,  v74,  v76,  v77,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86);
        sub_100085400(v55, v56);
        uint64_t v33 = sub_10008597C(v11);
      }

      else
      {
        uint64_t v44 = sub_10008530C();
        uint64_t v33 = sub_100084438(v44, v45, v46);
      }

      if (!--v10)
      {
        sub_10008528C();
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_29:
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }

  __break(1u);
LABEL_31:
  uint64_t result = sub_10000C280();
  __break(1u);
  return result;
}

uint64_t sub_10005DEF4()
{
  return sub_10000BD98();
}

#error "10005DFE0: call analysis failed (funcsize=67)"
void sub_10005E050()
{
  type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  sub_100031354();
}

void sub_10005E084( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v65 = v24;
  uint64_t v66 = v25;
  uint64_t v68 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v64 = v31;
  uint64_t v32 = sub_100003B20(v31);
  sub_10008593C();
  __chkstk_darwin(v33);
  sub_10000C120();
  uint64_t v36 = v35 - v34;
  sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v37);
  sub_100085224();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v62 - v39;
  uint64_t v41 = *v30;
  uint64_t v42 = v41 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002FFE4(v41 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v70);
  sub_1000849DC(v42, (uint64_t)v40);
  uint64_t v67 = v28;
  ((void (*)(uint64_t))v68)(v28);
  sub_1000849DC((uint64_t)v40, v21);
  sub_10000BE64(v42, (uint64_t)v69, 33LL);
  sub_100081BB0(v21, v42);
  swift_endAccess(v69);
  uint64_t v43 = sub_1000848B4();
  sub_10002F90C(v43, v44);
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v45 = sub_10000BF6C();
  sub_100003BA0(v45, (uint64_t)qword_10010D590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v36, v67, v32);
  uint64_t v46 = sub_10000BD20(v41);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.default.getter();
  int v49 = v48;
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v50 = sub_10000BCF4(22LL);
    uint64_t v63 = v32;
    uint64_t v68 = v20;
    uint64_t v51 = v50;
    uint64_t v52 = sub_10000BCF4(64LL);
    v69[0] = v52;
    *(_DWORD *)uint64_t v51 = 136315394;
    sub_100083778();
    LODWORD(v67) = v49;
    uint64_t v53 = sub_100091424();
    uint64_t v55 = v54;
    swift_release(v41);
    sub_100015EF8(v53, v55, v69);
    a10 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v51 + 4);
    sub_10000BCDC(v41);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v51 + 1sub_10003318C(v0 + 2) = 2080;
    sub_100082738(v65, v64);
    uint64_t v57 = v63;
    uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v63, v58);
    sub_100086078(v59, v60);
    a10 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v51 + 14);
    sub_10000BD28();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v36, v57);
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v67, v66, (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v52, 2LL);
    sub_10000BCC4(v52);
    sub_10000BCC4(v51);
  }

  else
  {
    sub_10000BCDC(v41);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v36, v32);
  }

  sub_100084DC8();
}

uint64_t sub_10005E364(uint64_t a1)
{
  void v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100084F64();
  v2[11] = v3;
  v2[12] = sub_10002FDFC(*(void *)(v3 - 8));
  v2[13] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10005E3B0()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v2 = (os_log_s *)v0[9];
  uint64_t v3 = v0[13];
  uint64_t v4 = sub_10000BF6C();
  v0[14] = sub_100003BA0(v4, (uint64_t)qword_10010D590);
  uint64_t v5 = sub_100085030();
  sub_10002F8E0(v5, v6, v7);
  sub_10003CFB4();
  os_log_type_t v8 = sub_100022604();
  BOOL v9 = sub_1000228A4(v8);
  uint64_t v10 = v0[13];
  if (v9)
  {
    uint64_t v11 = v0[12];
    uint64_t v24 = v0[11];
    uint64_t v12 = (uint8_t *)sub_10000BCF4(12LL);
    sub_10000BCF4(32LL);
    sub_10008587C();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_10002F8E0(v10, v11, type metadata accessor for InferenceProviderAssetManagerPolicy);
    uint64_t v13 = String.init<A>(describing:)(v11, v24);
    sub_100084640(v13, v14, v15, v16);
    v0[8] = v17;
    sub_1000841C4((uint64_t)(v0 + 8), (uint64_t)(v0 + 9), (uint64_t)(v12 + 4));
    sub_1000303D0();
    sub_10002F90C(v10, type metadata accessor for InferenceProviderAssetManagerPolicy);
    sub_100022210((void *)&_mh_execute_header, v2, (os_log_type_t)v3, "Processing policy change, new policy: %s", v12);
    sub_100021F38(v1);
    sub_10000BCC4(v1);
    sub_10000BCC4((uint64_t)v12);
  }

  else
  {
    sub_10002F90C(v0[13], type metadata accessor for InferenceProviderAssetManagerPolicy);
  }

  uint64_t v18 = sub_100084F2C();
  sub_10000BE64(v18, v19, 33LL);
  uint64_t v20 = sub_10003D238();
  sub_100082660(v20, v21);
  sub_10008545C();
  uint64_t v22 = (void *)swift_task_alloc(dword_10010DBD4);
  v0[15] = v22;
  void *v22 = v0;
  v22[1] = sub_10005E590;
  return sub_10005E7D0();
}

uint64_t sub_10005E590()
{
  uint64_t v1 = *v0;
  uint64_t v5 = v1;
  uint64_t v2 = *v0;
  sub_10000BE20(*(void *)(v1 + 120), &v5);
  uint64_t v3 = (void *)swift_task_alloc(dword_10010DBDC);
  *(void *)(v1 + 12sub_100006F7C(v0 + 8) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10005E5F0;
  return sub_10005E8EC();
}

uint64_t sub_10005E5F0()
{
  uint64_t v1 = *v0;
  uint64_t v5 = v1;
  uint64_t v2 = *v0;
  sub_10000BE20(*(void *)(v1 + 128), &v5);
  uint64_t v3 = (void *)swift_task_alloc(dword_10010D66C);
  *(void *)(v1 + 136) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10005E654;
  return sub_1000633EC(1);
}

uint64_t sub_10005E654()
{
  return sub_10000BD98();
}

uint64_t sub_10005E68C()
{
  uint64_t v1 = v0[10];
  sub_10002FFE4(v1 + 120, (uint64_t)(v0 + 5));
  v0[18] = *(void *)(v1 + 120);
  uint64_t v2 = unk_10010F974;
  os_log_type_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10010F970 + dword_10010F970);
  sub_100021EB0();
  sub_10000C030();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[19] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10005E71C;
  uint64_t v4 = sub_1000226A4();
  return v8(v4, v5, v6);
}

uint64_t sub_10005E71C()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_10005E760(uint64_t a1)
{
  uint64_t v3 = *(void **)(v2 + 112);
  Logger.logObject.getter(a1);
  os_log_type_t v4 = sub_100022604();
  if (sub_10002275C(v4))
  {
    uint64_t v5 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v5);
    sub_10003F1B4((void *)&_mh_execute_header, v6, v7, "Completed policy change");
    sub_10000BCC4(v1);
  }

  sub_10000BFE4();
  sub_10000C1B8();
  return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005E7D0()
{
  *(void *)(v1 + swift_endAccess(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_10005E7E4, v0);
}

uint64_t sub_10005E7E4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16)
                 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask);
  *(void *)(v0 + 24) = v1;
  if (v1)
  {
    sub_1000224B4();
    Task.cancel()();
    uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(void *)(v0 + 3sub_10003318C(v0 + 2) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10005E87C;
    sub_100085340();
    return sub_100083F98();
  }

  else
  {
    sub_100055FD4();
    return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10005E87C()
{
  return sub_10000BD98();
}

uint64_t sub_10005E8BC()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005E8EC()
{
  *(void *)(v1 + swift_endAccess(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_10005E900, v0);
}

uint64_t sub_10005E900()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16)
                 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask);
  *(void *)(v0 + 24) = v1;
  if (v1)
  {
    sub_1000224B4();
    Task.cancel()();
    uint64_t v2 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(void *)(v0 + 3sub_10003318C(v0 + 2) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10005E998;
    sub_100085340();
    return sub_100083F98();
  }

  else
  {
    sub_1000639C0();
    return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10005E998()
{
  return sub_10000BD98();
}

uint64_t sub_10005E9D8()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005EA08(uint64_t *a1, uint64_t a2)
{
  void v2[5] = a2;
  uint64_t v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  v2[6] = v5;
  uint64_t v6 = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  v2[7] = v6;
  v2[8] = v7;
  uint64_t v8 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  void v2[9] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v7 + v8, v2 + 2, 0LL, 0LL);
  return swift_task_switch(sub_10005EAA0, a2, 0LL);
}

uint64_t sub_10005EAA0()
{
  return sub_10000BD98();
}

uint64_t sub_10005EAE0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + *(int *)(*(void *)(v0 + 48) + 28LL));
  sub_10000C030();
  sub_10002F90C(v1, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v2)
  {
    *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v2;
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v3;
    sub_100003B20(&qword_10010B468);
    *uint64_t v3 = v0;
    v3[1] = sub_10005EB90;
    sub_100083998();
    return Task.value.getter(v4, v5, v6, v4, v7);
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 56));
    return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10005EB90()
{
  if (v0) {
    sub_100022D04();
  }
  sub_10003CE0C();
  return sub_10000BD98();
}

uint64_t sub_10005EBE0()
{
  return sub_10000BD98();
}

uint64_t sub_10005EC14()
{
  return sub_10000BD98();
}

uint64_t sub_10005EC54(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 120);
  v7[2] = a1;
  sub_100022944();
  sub_10000DFA4((uint64_t (*)(uint64_t *))sub_100082644, (uint64_t)v7, v3);
  uint64_t v5 = v4;
  uint64_t result = sub_10000BD28();
  if (v5)
  {
    sub_1000B966C();
    return sub_100021DDC();
  }

  return result;
}

uint64_t sub_10005ECE8(uint64_t a1, void *a2)
{
  uint64_t v3 = InferenceProviderAssetDescriptor.identifier.getter();
  uint64_t v5 = v4;
  uint64_t v6 = a2[1];
  if (v3 == *a2 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, *a2, v6, 0LL);
  }
  swift_bridgeObjectRelease(v5);
  return v8 & 1;
}

uint64_t sub_10005ED64(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  uint64_t v4 = sub_1000833BC();
  v3[24] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[25] = v5;
  v3[26] = sub_100021CC4(v5);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10005EDAC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D07C);
  *(void *)(v0 + 2swift_endAccess(v0 + 16) = v1;
  uint64_t v2 = sub_100084D04(v1);
  return sub_10008398C(v2, v3);
}

uint64_t sub_10005EDFC()
{
  *(void *)(v0 + 224) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_10005F27C;
  }
  else {
    uint64_t v4 = sub_10005EE50;
  }
  return sub_100021BCC((uint64_t)v4, *(void *)(v0 + 184), 0LL);
}

uint64_t sub_10005EE50(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(v2 + 120))
  {
    sub_100084590();
    uint64_t v9 = sub_1000305BC();
    sub_100048A38( (unint64_t *)&qword_10010B410,  (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError,  (uint64_t)&protocol conformance descriptor for ModelManagerError);
    uint64_t v11 = sub_1000302B0(v9, v10);
    uint64_t v13 = (uint64_t)v12;
    *uint64_t v12 = InferenceProviderDescriptor.description.getter(v11);
    *(void *)(v13 + sub_100006F7C(v0 + 8) = v14;
    uint64_t v15 = sub_100022218( v13,  enum case for ModelManagerError.unrecognizedInferenceProvider(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL));
    swift_willThrow(v15, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v23 = sub_1000858F8();
    sub_10002F99C(v23, v24);
    sub_100085D7C();
    sub_100085828();
    __asm { BR              X0 }
  }

  uint64_t v3 = (__int128 *)sub_100049B78();
  sub_1000070EC(v3, v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_10010D654);
  *(void *)(v2 + 23sub_10003318C(v0 + 2) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10005EF78;
  sub_100085828();
  return sub_100060828(v6, v7);
}

uint64_t sub_10005EF78()
{
  v0[30] = v2;
  v0[31] = v1;
  sub_100030924(v3);
  if (v1) {
    uint64_t v4 = sub_10005F2A4;
  }
  else {
    uint64_t v4 = (uint64_t (*)())sub_10005EFCC;
  }
  return sub_100021BCC((uint64_t)v4, v0[23], 0LL);
}

#error "10005F094: call analysis failed (funcsize=169)"
uint64_t sub_10005F27C()
{
  uint64_t v0;
  sub_100085D7C();
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005F2A4()
{
  uint64_t v1 = sub_1000853E0();
  sub_10003096C(v1, &qword_10010C008);
  sub_100085D7C();
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005F2DC()
{
  *(void *)(v1 + swift_endAccess(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_10005F2F0, v0);
}

uint64_t sub_10005F2F0()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v5 = sub_10000BF6C();
  sub_10003CE68(v5, (uint64_t)qword_10010D590);
  os_log_type_t v6 = sub_10000C108();
  if (sub_100030934(v6))
  {
    uint64_t v7 = (_WORD *)sub_10000BCF4(2LL);
    sub_100084CB8(v7);
    sub_1000495CC((void *)&_mh_execute_header, v0, v2, "Received asset update notification", v4);
    sub_10000BCC4((uint64_t)v4);
  }

  uint64_t v8 = *(void *)(v3 + 16);

  if ((*(_BYTE *)(v8 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) & 1) != 0)
  {
    Logger.logObject.getter(v9);
    os_log_type_t v10 = sub_100022604();
    if (sub_10002275C(v10))
    {
      uint64_t v11 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v11);
      sub_10003F1B4((void *)&_mh_execute_header, v12, v13, "asset updates already pending, ignoring asset updates");
      sub_10000BCC4(v8);
    }

    return sub_100083FB8(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    *(_BYTE *)(v8 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) = 1;
    uint64_t v16 = (uint64_t (*)(void))((char *)&dword_10010B8D8 + dword_10010B8D8);
    swift_retain();
    uint64_t v15 = (void *)sub_100022D14();
    *(void *)(v3 + 24) = v15;
    *uint64_t v15 = v3;
    v15[1] = sub_10005F454;
    return v16();
  }

uint64_t sub_10005F454()
{
  return sub_10000BD98();
}

uint64_t sub_10005F48C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DABC);
  *(void *)(v0 + 3sub_10003318C(v0 + 2) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005F4CC;
  return sub_100084E70();
}

uint64_t sub_10005F4CC()
{
  return sub_100007418(v0[1]);
}

uint64_t sub_10005F500()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D644);
  *(void *)(v0 + swift_endAccess(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BCBC;
  return sub_10005FEF4();
}

uint64_t sub_10005F548()
{
  *(void *)(v1 + swift_endAccess(v0 + 16) = v0;
  uint64_t v2 = sub_100003B20(&qword_10010B208);
  *(void *)(v1 + 24) = sub_100021CC4(*(void *)(v2 - 8));
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10005F58C()
{
  uint64_t v4 = *(void *)(v2 + 16);
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) == 1)
  {
    uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask;
    if (!*(void *)(v4 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask))
    {
      sub_100085E84((uint64_t (*)(uint64_t))sub_1000539D0, sub_100082208);
      if ((v6 & 1) != 0)
      {
        if (qword_10010B0C0 != -1) {
          swift_once(&qword_10010B0C0, sub_1000529A4);
        }
        uint64_t v7 = sub_10000BF6C();
        sub_10003CE68(v7, (uint64_t)qword_10010D590);
        os_log_type_t v8 = sub_100022604();
        if (sub_1000228A4(v8))
        {
          uint64_t v9 = (_WORD *)sub_10000BCF4(2LL);
          sub_100084CB8(v9);
          sub_1000495CC( (void *)&_mh_execute_header,  v0,  v1,  "Starting task to unload assets due to pending version change",  v3);
          sub_10000BCC4((uint64_t)v3);
        }

        uint64_t v11 = *(void *)(v2 + 16);
        uint64_t v10 = *(void *)(v2 + 24);

        uint64_t v12 = sub_100021FC8();
        sub_10002FF3C(v10, v13, v14, v12);
        uint64_t v15 = sub_100007460((uint64_t)&unk_100104100, 24LL);
        swift_weakInit(v15 + 16, v11);
        uint64_t v16 = (void *)sub_100007460((uint64_t)&unk_100104150, 40LL);
        uint64_t v17 = sub_1000858BC(v16);
        uint64_t v19 = sub_100085F20((uint64_t)v17, (uint64_t)&unk_10010DB08, v18);
        uint64_t v20 = *(void *)(v4 + v5);
        *(void *)(v4 + v5) = v19;
        sub_100085B4C(v20);
      }
    }
  }

  swift_task_dealloc(*(void *)(v2 + 24));
  return sub_100083FB8(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005F6DC()
{
  v1[2] = v0;
  uint64_t v2 = sub_100003B20(&qword_10010DA40);
  v1[3] = sub_100021CC4(*(void *)(v2 - 8));
  uint64_t v3 = sub_1000837B4();
  v1[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[5] = v4;
  v1[6] = sub_100021CC4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

void sub_10005F738()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v3 = sub_10000BF6C();
  *(void *)(v1 + 56) = sub_100003BA0(v3, (uint64_t)qword_10010D590);
  sub_10004E144();
  sub_100085AAC();
  if (sub_100030684(v2))
  {
    uint64_t v4 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v4);
    sub_100082CF0((void *)&_mh_execute_header, v2, v5, "Unloading assets for forced version change");
    sub_10000BCC4(v0);
  }

  sub_100053114();
  sub_100011714(v6);
  uint64_t v8 = v7;
  unint64_t v9 = (unint64_t)sub_10006325C(v7);
  *(void *)(v1 + 64) = v9;
  sub_10000C1E0();
  if (v9 >> 62)
  {
    sub_100022944();
    uint64_t v8 = sub_100084C3C();
    uint64_t v10 = sub_10000BD28();
    if (v8)
    {
LABEL_7:
      *(_DWORD *)(v1 + 104) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
      *(void *)(v1 + 7sub_10003318C(v0 + 2) = v8 - 1;
      if (__OFSUB__(v8, 1LL))
      {
        __break(1u);
      }

      else
      {
        uint64_t v12 = sub_100082F94(v10, v11, *(void *)(v1 + 64));
        *(void *)(v1 + 8sub_100016BD0(0, v0, 0) = sub_1000837CC(v12, *(void *)(v1 + 64));
        uint64_t v13 = *(void *)(v1 + 24);
        sub_100030768(*(void *)(v1 + 40));
        uint64_t v14 = sub_100030CC0();
        sub_10002FF3C(v13, v15, v16, v14);
        uint64_t v17 = (void *)swift_task_alloc(dword_10010D694);
        *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v17;
        *uint64_t v17 = v1;
        v17[1] = sub_10005F968;
        uint64_t v18 = sub_100084094();
        sub_100084E88(v18, v19, v20);
      }

      return;
    }
  }

  else
  {
    sub_10008602C();
    if (v8) {
      goto LABEL_7;
    }
  }

  uint64_t v21 = swift_bridgeObjectRelease(*(void *)(v1 + 64));
  Logger.logObject.getter(v21);
  os_log_type_t v22 = sub_100022604();
  if (sub_10002275C(v22))
  {
    uint64_t v23 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v23);
    sub_10003F1B4((void *)&_mh_execute_header, v24, v25, "Finished unloading assets for forced version change");
    sub_10000BCC4(v0);
  }

  sub_1000854E4();
  uint64_t v27 = (uint64_t (*)(void))((char *)&dword_10010B948 + dword_10010B948);
  sub_1000224B4();
  uint64_t v26 = (void *)sub_100022D14();
  *(void *)(v1 + 96) = v26;
  *uint64_t v26 = v1;
  v26[1] = sub_10005FB48;
  sub_100084E7C((uint64_t)&unk_10010DBB8, *(void *)(v1 + 16), v27);
}

uint64_t sub_10005F968()
{
  uint64_t v3 = sub_10000BE20(*(void *)(v1 + 88), v2);
  if (v0) {
    uint64_t v3 = sub_100022D04();
  }
  sub_10008373C(v3, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v4, v5, v6);
}

void sub_10005F9F0()
{
  uint64_t v3 = v2[9];
  swift_release(v2[10]);
  if (v3)
  {
    uint64_t v6 = v2[9];
    uint64_t v7 = v6 - 1;
    void v2[9] = v6 - 1;
    if (__OFSUB__(v6, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = sub_100082F94(v4, v5, v2[8]);
      uint64_t v9 = v2[8];
      if (v0)
      {
        uint64_t v10 = sub_1000837CC(v8, v9);
      }

      else
      {
        uint64_t v10 = *(void *)(v9 + 8 * v7 + 32);
        sub_100021D80();
      }

      v2[10] = v10;
      uint64_t v11 = v2[3];
      sub_100030768(v2[5]);
      uint64_t v12 = sub_100030CC0();
      sub_10002FF3C(v11, v13, v14, v12);
      uint64_t v15 = (void *)swift_task_alloc(dword_10010D694);
      v2[11] = v15;
      *uint64_t v15 = v2;
      v15[1] = sub_10005F968;
      uint64_t v16 = sub_100084094();
      sub_100084B24(v16, v17, v18);
    }
  }

  else
  {
    uint64_t v19 = swift_bridgeObjectRelease(v2[8]);
    Logger.logObject.getter(v19);
    os_log_type_t v20 = sub_100022604();
    if (sub_10002275C(v20))
    {
      uint64_t v21 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v21);
      sub_10003F1B4((void *)&_mh_execute_header, v22, v23, "Finished unloading assets for forced version change");
      sub_10000BCC4(v1);
    }

    sub_1000854E4();
    uint64_t v25 = (void (*)(uint64_t, uint64_t))((char *)&dword_10010B948 + dword_10010B948);
    sub_1000224B4();
    uint64_t v24 = (void *)sub_100022D14();
    v2[12] = v24;
    *uint64_t v24 = v2;
    v24[1] = sub_10005FB48;
    v25((uint64_t)&unk_10010DBB8, v2[2]);
  }

uint64_t sub_10005FB48(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_10005FBA0(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = (void *)swift_task_alloc(dword_10010D65C);
  void v2[5] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10005FBEC;
  return sub_10006140C();
}

uint64_t sub_10005FBEC(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(_BYTE *)(*(void *)v1 + 64LL) = a1;
  sub_100030924(v2);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10005FC38()
{
  if (*(_BYTE *)(v0 + 64) == 1)
  {
    sub_100085B10(*(void *)(v0 + 32));
    uint64_t v1 = (void *)swift_task_alloc(dword_10010E9FC);
    *(void *)(v0 + 4sub_100006F7C(v0 + 8) = v1;
    sub_100023C84(v1, (uint64_t)sub_10005FCAC);
    return sub_1000AB8C0();
  }

  else
  {
    **(_BYTE **)(v0 + 24) = 0;
    return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10005FCAC()
{
  if (v1) {
    uint64_t v2 = sub_10005FD90;
  }
  else {
    uint64_t v2 = sub_10005FCF0;
  }
  return sub_100021BCC((uint64_t)v2, *(void *)(v0 + 32), 0LL);
}

uint64_t sub_10005FCF0()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010D590);
  os_log_type_t v4 = sub_100022604();
  if (sub_10002275C(v4))
  {
    uint64_t v5 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v5);
    sub_10003F1B4((void *)&_mh_execute_header, v6, v7, "Force switched asset versions");
    sub_10000BCC4(v1);
  }

  **(_BYTE **)(v2 + 24) = 1;
  return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005FD90()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v1 = sub_10000BF6C();
  sub_100003BA0(v1, (uint64_t)qword_10010D590);
  sub_10002293C();
  sub_10002293C();
  uint64_t v2 = (os_log_s *)sub_10000C158();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (sub_1000495A0(v2))
  {
    os_log_type_t v4 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v5 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)os_log_type_t v4 = 138412290;
    sub_100030414();
    uint64_t v6 = sub_100049B9C();
    *(void *)(v0 + swift_endAccess(v0 + 16) = v6;
    sub_100030C00(v0 + 16, v0 + 24, (uint64_t)(v4 + 4));
    *uint64_t v5 = v6;
    sub_1000301C0();
    sub_1000301C0();
    sub_100022210( (void *)&_mh_execute_header,  v2,  v3,  "Failed to force switch asset versions, failed to cycle asset lock: %@",  v4);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v5);
    sub_10000BCC4((uint64_t)v5);
    sub_10000BCC4((uint64_t)v4);

    sub_1000301C0();
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
    sub_1000301C0();
  }

  **(_BYTE **)(v0 + 24) = 0;
  return sub_10002FDE0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005FEF4()
{
  *(void *)(v1 + 24) = v0;
  return sub_10000C088((uint64_t)sub_10005FF08, v0);
}

uint64_t sub_10005FF08()
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  *(void *)(v2 + 3sub_10003318C(v0 + 2) = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  if (*(_BYTE *)(v3 + v4) == 1)
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_10010D65C);
    *(void *)(v2 + 4sub_100016BD0(0, v0, 0) = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_10005FFF0;
    return sub_10006140C();
  }

  else
  {
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v7 = sub_10000BF6C();
    sub_10003CE68(v7, (uint64_t)qword_10010D590);
    os_log_type_t v8 = sub_100022604();
    if (sub_10002275C(v8))
    {
      uint64_t v9 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v9);
      sub_10003F1B4( (void *)&_mh_execute_header,  v10,  v11,  "switchAssetVersionsIfUpdateIsPending called without assets to be updated");
      sub_10000BCC4(v1);
    }

    return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_10005FFF0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(_BYTE *)(*(void *)v1 + 64LL) = a1;
  sub_100030924(v2);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100060040()
{
  if (*(_BYTE *)(v2 + 64) == 1)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    *(_BYTE *)(v3 + *(void *)(v2 + sub_1000483AC(*(void *)(v0 + 32)) = 0;
    sub_10000729C( (void *)(v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog),  *(void *)(v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog + 24));
    uint64_t v4 = (void *)swift_task_alloc(dword_10010E9FC);
    *(void *)(v2 + 4sub_100006F7C(v0 + 8) = v4;
    sub_100023C84(v4, (uint64_t)sub_100060130);
    return sub_1000AB8C0();
  }

  else
  {
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v6 = sub_10000BF6C();
    sub_10003CE68(v6, (uint64_t)qword_10010D590);
    os_log_type_t v7 = sub_100022604();
    if (sub_10002275C(v7))
    {
      os_log_type_t v8 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v8);
      sub_10003F1B4( (void *)&_mh_execute_header,  v9,  v10,  "switchAssetVersionsIfUpdateIsPending unable to prepare assets for change. Trying again later.");
      sub_10000BCC4(v1);
    }

    return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_100060130()
{
  if (v1) {
    uint64_t v2 = sub_100060208;
  }
  else {
    uint64_t v2 = sub_100060174;
  }
  return sub_100021BCC((uint64_t)v2, *(void *)(v0 + 24), 0LL);
}

uint64_t sub_100060174()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v3 = sub_10000BF6C();
  sub_10003CE68(v3, (uint64_t)qword_10010D590);
  os_log_type_t v4 = sub_100022604();
  if (sub_10002275C(v4))
  {
    uint64_t v5 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v5);
    sub_10003F1B4((void *)&_mh_execute_header, v6, v7, "Switched asset versions");
    sub_10000BCC4(v1);
  }

  return sub_10000BD30(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100060208()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v1 = sub_10000BF6C();
  sub_100003BA0(v1, (uint64_t)qword_10010D590);
  sub_10002293C();
  sub_10002293C();
  uint64_t v2 = (os_log_s *)sub_10000C158();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (sub_1000495A0(v2))
  {
    os_log_type_t v4 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v5 = (void *)sub_10000BCF4(8LL);
    *(_DWORD *)os_log_type_t v4 = 138412290;
    sub_100030414();
    uint64_t v6 = sub_100049B9C();
    *(void *)(v0 + swift_endAccess(v0 + 16) = v6;
    sub_100030C00(v0 + 16, v0 + 24, (uint64_t)(v4 + 4));
    *uint64_t v5 = v6;
    sub_1000301C0();
    sub_1000301C0();
    sub_100022210( (void *)&_mh_execute_header,  v2,  v3,  "Failed to switch asset versions, failed to cycle asset lock: %@",  v4);
    sub_100003B20(&qword_10010BA58);
    sub_100021F38((uint64_t)v5);
    sub_10000BCC4((uint64_t)v5);
    sub_10000BCC4((uint64_t)v4);

    sub_1000301C0();
  }

  else
  {
    sub_1000301C0();
    sub_1000301C0();
    sub_1000301C0();
  }

  return sub_10002FDE0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100060364(uint64_t a1, uint64_t a2)
{
  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  uint64_t v4 = sub_1000229CC();
  v3[21] = sub_100021CC4(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for ModelCatalogAssetVersionedData(0LL);
  v3[22] = v5;
  v3[23] = sub_100021CC4(*(void *)(v5 - 8));
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000603BC()
{
  uint64_t v1 = *(void *)(v0 + 160);
  __int128 v11 = *(_OWORD *)(v0 + 144);
  sub_10002FFE4(v1 + 120, v0 + 96);
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = sub_100083A64();
  *(_OWORD *)(v3 + swift_endAccess(v0 + 16) = v11;
  sub_100021EB0();
  sub_10000DFA4(sub_1000825A0, v3, v2);
  uint64_t v5 = v4;
  sub_10000C1E0();
  sub_10002294C();
  if (v5)
  {
    swift_task_dealloc(*(void *)(v0 + 184));
    sub_10000BFE4();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }

  else
  {
    uint64_t v7 = *(uint64_t **)(v0 + 144);
    sub_100085B10(*(void *)(v0 + 160));
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    uint64_t v10 = (void *)swift_task_alloc(dword_10010EA0C);
    *(void *)(v0 + 19sub_10003318C(v0 + 2) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1000604C8;
    return sub_1000ADCB4(*(void *)(v0 + 184), v9, v8);
  }

uint64_t sub_1000604C8()
{
  if (v1) {
    uint64_t v2 = sub_100060650;
  }
  else {
    uint64_t v2 = (uint64_t (*)())sub_10006050C;
  }
  return sub_100021BCC((uint64_t)v2, *(void *)(v0 + 160), 0LL);
}

#error "1000605E8: call analysis failed (funcsize=79)"
uint64_t sub_100060650()
{
  uint64_t v0;
  sub_100085DD4();
  sub_10000C140();
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006067C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InferenceProviderDescriptor(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v29[-1] - v12;
  uint64_t v14 = *a1;
  uint64_t v15 = InferenceProviderAssetDescriptor.identifier.getter(v11);
  uint64_t v17 = v16;
  uint64_t v18 = a2[1];
  if (v15 == *a2 && v16 == v18)
  {
    swift_bridgeObjectRelease(v16);
    sub_100007104(a3, (uint64_t)v29);
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *a2, v18, 0LL);
    swift_bridgeObjectRelease(v17);
    sub_100007104(a3, (uint64_t)v29);
    char v21 = 0;
    if ((v20 & 1) == 0) {
      goto LABEL_9;
    }
  }

  uint64_t v22 = *(void *)(v14 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  uint64_t v23 = *(void *)(v14 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10000729C( (void *)(v14 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection),  v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  uint64_t v24 = v30;
  uint64_t v25 = v31;
  sub_10000729C(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  char v21 = static InferenceProviderDescriptor.== infix(_:_:)(v13, v10);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v26(v13, v6);
LABEL_9:
  sub_100006F7C(v29);
  return v21 & 1;
}

uint64_t sub_100060828(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  sub_100021C90();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_100060848()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  sub_100062C0C();
  uint64_t v4 = v3;
  uint64_t v5 = sub_100084F2C();
  sub_100007104(v5, v6);
  uint64_t v7 = (void *)sub_100007460((uint64_t)&unk_1001041A0, 80LL);
  *(void *)(v0 + 8sub_100016BD0(0, v0, 0) = v7;
  v7[2] = v1;
  v7[3] = v2;
  sub_1000070EC((__int128 *)(v0 + 16), (uint64_t)(v7 + 4));
  v7[9] = v4;
  uint64_t v11 = (uint64_t (*)(void))((char *)&dword_10010B910 + dword_10010B910);
  sub_1000224B4();
  sub_100083500();
  uint64_t v8 = (void *)sub_100022D14();
  *(void *)(v0 + 8sub_100006F7C(v0 + 8) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100060908;
  uint64_t v9 = sub_1000306EC((uint64_t)&unk_10010DB80);
  return sub_100084E7C(v9, (uint64_t)v7, v11);
}

uint64_t sub_100060908()
{
  *(void *)(v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1) {
    return sub_10000BF5C();
  }
  swift_release(*(void *)(v2 + 80));
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v0);
}

uint64_t sub_100060974()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000609A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = (void *)swift_task_alloc(dword_10010D644);
  v5[8] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_1000609F4;
  return sub_10005FEF4();
}

uint64_t sub_1000609F4()
{
  return sub_10000BD98();
}

uint64_t sub_100060A2C()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100003BB8((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v1 = _swiftEmptySetSingleton;
  }

  uint64_t v3 = v0[3].i64[0];
  uint64_t v2 = v0[3].i64[1];
  v0[1].i64[0] = (uint64_t)v1;
  sub_100022DB0();
  sub_100048A38(&qword_10010B8E0, type metadata accessor for InferenceProviderAssetManager, (uint64_t)&unk_1000D9CE8);
  uint64_t v4 = (int8x16_t *)swift_task_alloc(64LL);
  v0[4].i64[1] = (uint64_t)v4;
  v4[1] = vextq_s8(v0[2], v0[2], 8uLL);
  v4[2].i64[0] = v3;
  v4[2].i64[1] = (uint64_t)v0[1].i64;
  v4[3].i64[0] = v2;
  uint64_t v5 = (int8x16_t **)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[5].i64[0] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = (int8x16_t *)sub_100060B48;
  sub_100085828();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100060B48()
{
  uint64_t v8 = (void *)*v1;
  uint64_t v2 = v8;
  sub_100022B10(&v8);
  v2[11] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[4];
    uint64_t v5 = sub_100060BC0;
  }

  else
  {
    uint64_t v6 = v2[4];
    swift_task_dealloc(v2[9]);
    uint64_t v5 = sub_100060BB4;
    uint64_t v4 = v6;
  }

  return sub_100021BCC((uint64_t)v5, v4, 0LL);
}

uint64_t sub_100060BB4()
{
  **(void **)(v0 + 24) = *(void *)(v0 + 16);
  return sub_1000497D0();
}

uint64_t sub_100060BC0()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100060BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  v7[16] = a2;
  v7[17] = a3;
  uint64_t v9 = sub_100003B20(&qword_10010DB98);
  v7[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[23] = v10;
  v7[24] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = (*(void *)(*(void *)(sub_100003B20(&qword_10010B208) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[25] = swift_task_alloc(v11);
  v7[26] = swift_task_alloc(v11);
  uint64_t v12 = *(void *)(type metadata accessor for ModelCatalogAsset(0LL) - 8);
  v7[27] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v7[28] = v13;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v7[29] = swift_task_alloc(v14);
  v7[30] = swift_task_alloc(v14);
  return swift_task_switch(sub_100060CCC, a4, 0LL);
}

void sub_100060CCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v81 = v22 + 88;
  uint64_t v82 = (__int128 *)(v22 + 16);
  uint64_t v80 = *(void *)(v22 + 216);
  uint64_t v23 = *(void *)(v22 + 136);
  uint64_t v75 = (void *)(v22 + 56);
  uint64_t v76 = v23 + 56;
  uint64_t v24 = -1LL;
  uint64_t v25 = -1LL << *(_BYTE *)(v23 + 32);
  if (-v25 < 64) {
    uint64_t v24 = ~(-1LL << -(char)v25);
  }
  unint64_t v26 = v24 & *(void *)(v23 + 56);
  int64_t v77 = (unint64_t)(63 - v25) >> 6;
  uint64_t v78 = *(void *)(v22 + 224) + 7LL;
  uint64_t v79 = *(void *)(v22 + 136);
  swift_bridgeObjectRetain(v23);
  int64_t v27 = 0LL;
  if (!v26) {
    goto LABEL_5;
  }
LABEL_4:
  a19 = (v26 - 1) & v26;
  a17 = v27;
  for (unint64_t i = __clz(__rbit64(v26)) | (v27 << 6); ; unint64_t i = __clz(__rbit64(v30)) + (v31 << 6))
  {
    uint64_t v33 = *(void *)(v22 + 232);
    uint64_t v34 = *(void *)(v22 + 240);
    uint64_t v35 = *(void *)(v22 + 208);
    a18 = *(void *)(v22 + 200);
    uint64_t v37 = *(void *)(v22 + 144);
    uint64_t v36 = *(void *)(v22 + 152);
    sub_10002F8E0(*(void *)(v79 + 48) + *(void *)(v80 + 72) * i, v34, type metadata accessor for ModelCatalogAsset);
    uint64_t v38 = sub_100021FC8();
    sub_100085ED4();
    sub_100005FB0(v39, v40, v41, v38);
    sub_10000B7B0(v34, v33);
    sub_100007104(v36, (uint64_t)v82);
    uint64_t v42 = *(unsigned __int8 *)(v80 + 80);
    uint64_t v43 = (v42 + 40) & ~v42;
    unint64_t v44 = (v78 + v43) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v45 = (void *)swift_allocObject(&unk_1001041C8, v44 + 40, v42 | 7);
    v45[2] = 0LL;
    uint64_t v46 = v45 + 2;
    void v45[3] = 0LL;
    v45[4] = v37;
    sub_10000B7B0(v33, (uint64_t)v45 + v43);
    sub_1000070EC(v82, (uint64_t)v45 + v44);
    sub_10004DE58(v35, a18, &qword_10010B208);
    LODWORD(v33) = sub_1000060B4(a18, 1LL, v38);
    uint64_t v47 = sub_10000C20C();
    uint64_t v48 = *(void *)(v22 + 200);
    if ((_DWORD)v33 == 1)
    {
      sub_100084088();
      uint64_t v49 = 0LL;
    }

    else
    {
      unsigned __int8 v50 = TaskPriority.rawValue.getter(v47);
      sub_1000304C4(v48, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8LL));
      uint64_t v49 = v50;
    }

    int64_t v27 = a17;
    uint64_t v51 = *v46;
    if (*v46)
    {
      swift_getObjectType(*v46);
      swift_unknownObjectRetain(v51);
      uint64_t v52 = sub_100085FB0();
      uint64_t v54 = dispatch thunk of Actor.unownedExecutor.getter(v52, v53);
      uint64_t v56 = v55;
      swift_unknownObjectRelease(v51);
    }

    else
    {
      uint64_t v54 = 0LL;
      uint64_t v56 = 0LL;
    }

    uint64_t v57 = **(void **)(v22 + 128);
    uint64_t v58 = sub_100022DB0();
    uint64_t v59 = v56 | v54;
    if (v56 | v54)
    {
      uint64_t v59 = v22 + 56;
      void *v75 = 0LL;
      *(void *)(v22 + 64) = 0LL;
      *(void *)(v22 + 7sub_10003318C(v0 + 2) = v54;
      *(void *)(v22 + 8sub_100016BD0(0, v0, 0) = v56;
    }

    *(void *)(v22 + 8sub_100006F7C(v0 + 8) = 1LL;
    *(void *)(v22 + 96) = v59;
    *(void *)(v22 + 104) = v57;
    uint64_t v60 = swift_task_create(v49 | 0x3100, v81, v58, &unk_10010DBA8, v45);
    swift_release(v60);
    sub_100084088();
    unint64_t v26 = a19;
    if (a19) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v29 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v29 >= v77) {
      goto LABEL_29;
    }
    unint64_t v30 = *(void *)(v76 + 8 * v29);
    int64_t v31 = v27 + 1;
    if (!v30)
    {
      int64_t v31 = v27 + 2;
      if (v27 + 2 >= v77) {
        goto LABEL_29;
      }
      unint64_t v30 = *(void *)(v76 + 8 * v31);
      if (!v30)
      {
        int64_t v31 = v27 + 3;
        if (v27 + 3 >= v77) {
          goto LABEL_29;
        }
        unint64_t v30 = *(void *)(v76 + 8 * v31);
        if (!v30) {
          break;
        }
      }
    }

uint64_t sub_1000610CC()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v6 = v2;
  sub_10000BE20(v2[32], &v6);
  if (v0)
  {
    uint64_t v3 = v2[18];
    uint64_t v4 = sub_1000612E8;
  }

  else
  {
    v2[33] = 0LL;
    uint64_t v3 = v2[18];
    uint64_t v4 = sub_10006112C;
  }

  return sub_100021BCC((uint64_t)v4, v3, 0LL);
}

uint64_t sub_10006112C()
{
  uint64_t v1 = v0[14];
  if (v1)
  {
    uint64_t v2 = v0[21];
    sub_10000C278();
    sub_100017AAC(&v11, v1);
    swift_release(v11);
    InferenceProviderAssetDescriptor.identifier.getter(v3);
    if (*(void *)(v2 + 16) && (sub_1000165C8(), (v4 & 1) != 0))
    {
      sub_10002289C();
      sub_1000228C4();
      sub_10000C030();
      sub_10000C278();
      sub_1000858B0();
      sub_100054E70(v5, v6, v7);
      sub_10000C280();
      sub_10000C000();
    }

    else
    {
      sub_1000228C4();
      sub_10000C280();
    }

    uint64_t v8 = (void *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    v0[34] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100061288;
    sub_100085828();
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
  }

  else
  {
    sub_1000307BC(v0[23]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    uint64_t v10 = (uint64_t (*)(void))sub_1000227B8();
    return sub_10003CF64(v10);
  }

uint64_t sub_100061288()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v6 = v2;
  sub_10000BE20(v2[34], &v6);
  if (v0)
  {
    uint64_t v3 = v2[18];
    char v4 = sub_1000612E8;
  }

  else
  {
    v2[33] = 0LL;
    uint64_t v3 = v2[18];
    char v4 = sub_10006112C;
  }

  return sub_100021BCC((uint64_t)v4, v3, 0LL);
}

uint64_t sub_1000612E8()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100061344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + swift_endAccess(v0 + 16) = a1;
  uint64_t v9 = (void *)swift_task_alloc(dword_10010D64C);
  *(void *)(v6 + 24) = v9;
  void *v9 = v6;
  v9[1] = sub_1000613AC;
  return sub_100060364(a5, a6);
}

uint64_t sub_1000613AC()
{
  uint64_t v4 = *v3;
  sub_10000BE20(*(void *)(v2 + 24), v5);
  if (v1) {
    return sub_10000BD30(*(uint64_t (**)(void))(v4 + 8));
  }
  *(void *)(v2 + 3sub_10003318C(v0 + 2) = v0;
  sub_10003CE0C();
  return sub_10000BF5C();
}

uint64_t sub_1000613FC()
{
  **(void **)(v0 + swift_endAccess(v0 + 16) = *(void *)(v0 + 32);
  return sub_1000497D0();
}

uint64_t sub_10006140C()
{
  v1[30] = v0;
  uint64_t v2 = sub_1000837BC();
  v1[31] = v2;
  v1[32] = sub_10002FDFC(*(void *)(v2 - 8));
  v1[33] = sub_10002287C();
  uint64_t v3 = sub_100003B20(&qword_10010DA40);
  v1[34] = sub_100021CC4(*(void *)(v3 - 8));
  uint64_t v4 = sub_1000837B4();
  v1[35] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[36] = v5;
  v1[37] = sub_100021CC4(v5);
  uint64_t v6 = sub_100083B94();
  v1[38] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[39] = v7;
  v1[40] = sub_100021CC4(v7);
  sub_100021C90();
  return sub_100021BCC(v8, v9, v10);
}

uint64_t sub_1000614A0()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 240) + 120LL);
  sub_10002FFE4((uint64_t)v1, v0 + 56);
  uint64_t v2 = (os_log_s *)*v1;
  uint64_t v3 = sub_100022944();
  uint64_t v4 = sub_1000BCA84(v3);
  sub_10000BD28();
  if ((v4 & 1) != 0)
  {
    if (qword_10010B0C0 != -1) {
      goto LABEL_45;
    }
    goto LABEL_3;
  }

  uint64_t v2 = (os_log_s *)*v1;
  uint64_t v9 = sub_100022944();
  uint64_t v10 = sub_100085280(v9, (uint64_t (*)(char *))sub_100062898);
  sub_10000BD28();
  if ((v10 & 1) == 0)
  {
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v37 = sub_10000BF6C();
    sub_10003CE68(v37, (uint64_t)qword_10010D590);
    os_log_type_t v6 = sub_100022604();
    uint64_t v7 = 0LL;
    if (sub_1000830F4(v6))
    {
      uint64_t v8 = "Not ready for asset version change: some assets are still loaded or transitioning";
      goto LABEL_37;
    }

    goto LABEL_38;
  }

  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v11 = sub_10000BF6C();
  *(void *)(v0 + 32sub_100006F7C(v0 + 8) = sub_100003BA0(v11, (uint64_t)qword_10010D590);
  sub_10004E144();
  os_log_type_t v12 = sub_100022604();
  if (sub_100022444(v2))
  {
    uint64_t v13 = (_WORD *)sub_10000BCF4(2LL);
    sub_100084CB8(v13);
    sub_1000495CC((void *)&_mh_execute_header, v2, v12, "prepareForAssetVersionChange unloading assets", (uint8_t *)v10);
    sub_10000BCC4(v10);
  }

  uint64_t v14 = *(void *)(v0 + 240);
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v102 = v4;
    uint64_t v15 = _swiftEmptySetSingleton;
    uint64_t v115 = _swiftEmptySetSingleton;
    sub_10000BD20(v14);
    sub_100022944();
    uint64_t v113 = sub_100084F74();
    uint64_t v16 = sub_1000838E0();
    if (!v16) {
      goto LABEL_32;
    }
    uint64_t v17 = v16;
    uint64_t v111 = v0 + 192;
    uint64_t v112 = v0 + 176;
    uint64_t v110 = v0 + 216;
    uint64_t v18 = *(void *)(v0 + 312);
    LODWORD(v10sub_100006F7C(v0 + 8) = enum case for LoadState.dynamicMode(_:);
    uint64_t v106 = sub_100022DB0();
    uint64_t v103 = (char *)&type metadata for Swift.AnyObject + 8;
    while (1)
    {
      uint64_t v19 = *(void *)(v0 + 320);
      uint64_t v20 = *(void *)(v0 + 304);
      *(void *)(v0 + 2swift_endAccess(v0 + 16) = v17;
      sub_100022CC0(v0 + 208, v110, (uint64_t)v103, v106);
      sub_10000BE64( *(void *)(v0 + 208) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v0 + 152,  33LL);
      sub_1000225D4(v19, v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 104));
      sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
      sub_100083D60(v20);
      sub_100083D60(v20);
      uint64_t v21 = *(void *)(v0 + 192);
      uint64_t v22 = *(void *)(v0 + 176);
      BOOL v23 = v21 == v22 && *(void *)(v0 + 200) == *(void *)(v0 + 184);
      if (v23)
      {
        sub_10000C1B0(*(void *)(v0 + 200));
        sub_100084C88(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
        sub_100083ADC();
      }

      else
      {
        char v24 = sub_100021EB8(v21, *(void *)(v0 + 200), v22, *(void *)(v0 + 184));
        sub_100022D34();
        sub_10000C000();
        sub_100084C88(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
        sub_100083ADC();
        if ((v24 & 1) == 0)
        {
          swift_release(*(void *)(v0 + 208));
          goto LABEL_31;
        }
      }

      sub_1000855A8();
      if (!(!v23 & v34))
      {
        sub_100019E08( v33 + 1,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v92,  v94,  v95,  v96,  v97,  v98,  v100,  v102,  (uint64_t)v103,  v104,  v105,  v106,  v108,  v110,  v111,  v112,  v113,  (uint64_t)v115,  v116[0],  v116[1],  v116[2],  v116[3],  v116[4],  v116[5]);
        uint64_t v15 = v115;
      }

      Hasher.init(_seed:)(v116, v15[5]);
      sub_100085CA0((uint64_t)v116);
      uint64_t v2 = (os_log_s *)v116;
      Hasher._finalize()();
      sub_100082D00();
      if (!v23)
      {
        sub_100082E1C();
        goto LABEL_30;
      }

      sub_100082E08();
      do
      {
        sub_100083820();
        if (v23 && (v36 & 1) != 0)
        {
          __break(1u);
LABEL_45:
          swift_once(&qword_10010B0C0, sub_1000529A4);
LABEL_3:
          uint64_t v5 = sub_10000BF6C();
          sub_10003CE68(v5, (uint64_t)qword_10010D590);
          os_log_type_t v6 = sub_100022604();
          uint64_t v7 = 1LL;
          if (sub_1000830F4(v6))
          {
            uint64_t v8 = "Ready for asset version change";
            goto LABEL_37;
          }

          goto LABEL_38;
        }

        sub_100083980();
        sub_10008310C();
      }

      while (v23);
      sub_100082DF4();
LABEL_30:
      sub_100083EAC(v35);
LABEL_31:
      uint64_t v17 = __CocoaSet.Iterator.next()(v25);
      if (!v17)
      {
LABEL_32:
        sub_10000BCDC(*(void *)(v0 + 240));
        swift_release(v113);
        goto LABEL_40;
      }
    }
  }

  sub_10000C0A0();
  uint64_t v40 = sub_100022944();
  uint64_t v15 = (void *)sub_100084624(v40, v14, (uint64_t)sub_100053108);
LABEL_40:
  unint64_t v41 = (unint64_t)sub_10008600C();
  *(void *)(v0 + 336) = v41;
  sub_100021DDC();
  if (v41 >> 62)
  {
    sub_100022944();
    uint64_t v15 = (void *)sub_100084C3C();
    uint64_t v42 = sub_10000BD28();
    if (v15) {
      goto LABEL_42;
    }
  }

  else
  {
    sub_10008602C();
    if (v15)
    {
LABEL_42:
      *(_DWORD *)(v0 + 376) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
      uint64_t v2 = (os_log_s *)((char *)v15 - 1);
      *(void *)(v0 + 344) = (char *)v15 - 1;
      if (!__OFSUB__(v15, 1LL))
      {
        uint64_t v44 = sub_100082F94(v42, v43, *(void *)(v0 + 336));
        *(void *)(v0 + 35sub_10003318C(v0 + 2) = sub_1000837CC(v44, *(void *)(v0 + 336));
        uint64_t v45 = *(void *)(v0 + 272);
        sub_100030768(*(void *)(v0 + 288));
        uint64_t v46 = sub_100030CC0();
        sub_10002FF3C(v45, v47, v48, v46);
        uint64_t v49 = (void *)swift_task_alloc(dword_10010D694);
        uint64_t v50 = sub_100083D94(v49, (uint64_t)sub_100061EAC);
        return sub_100083FAC(v50, v51, v52);
      }

      __break(1u);
LABEL_51:
      sub_100085E68();
      os_log_type_t v6 = sub_100022604();
      uint64_t v7 = 0LL;
      if (sub_1000830F4(v6))
      {
        uint64_t v8 = "Not ready for asset version change: not all assets are unloaded";
        goto LABEL_37;
      }

      goto LABEL_38;
    }
  }

  sub_1000852DC();
  uint64_t v2 = *(os_log_s **)(v41 + 120);
  uint64_t v53 = sub_100022944();
  char v54 = sub_100051ABC(v53, (uint64_t (*)(char *))sub_100062AC0, 0LL);
  sub_10000BD28();
  if ((v54 & 1) == 0) {
    goto LABEL_51;
  }
  uint64_t v107 = *(void *)(*(void *)(v0 + 240) + 120LL);
  if ((v107 & 0xC000000000000001LL) != 0)
  {
    swift_bridgeObjectRetain(v107);
    sub_10008457C();
    sub_100022DB0();
    sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
    uint64_t result = sub_1000845BC(v55);
    uint64_t v107 = *(void *)(v0 + 16);
    uint64_t v101 = *(void *)(v0 + 24);
    uint64_t v56 = *(os_log_s **)(v0 + 40);
    uint64_t v93 = *(void *)(v0 + 32);
    unint64_t v57 = *(void *)(v0 + 48);
  }

  else
  {
    uint64_t v101 = v107 + 56;
    uint64_t v93 = ~(-1LL << *(_BYTE *)(v107 + 32));
    sub_100022D3C();
    unint64_t v57 = v58 & v59;
    uint64_t result = swift_bridgeObjectRetain(v60);
    uint64_t v56 = 0LL;
  }

  uint64_t v109 = *(void *)(v0 + 248);
  uint64_t v61 = v107;
  int64_t v99 = (unint64_t)(v93 + 64) >> 6;
  while (1)
  {
    uint64_t v62 = v61;
    if ((v61 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v66 = __CocoaSet.Iterator.next()(result);
    if (!v66) {
      goto LABEL_82;
    }
    uint64_t v67 = v66;
    *(void *)(v0 + 23sub_10003318C(v0 + 2) = v66;
    uint64_t v68 = sub_100022DB0();
    swift_unknownObjectRetain(v67);
    uint64_t v69 = sub_10003D238();
    sub_100022CC0(v69, v70, (uint64_t)&type metadata for Swift.AnyObject + 8, v68);
    uint64_t v71 = *(void *)(v0 + 224);
    swift_unknownObjectRelease(v67);
    uint64_t v65 = v56;
    uint64_t v63 = v57;
LABEL_75:
    if (!v71) {
      goto LABEL_82;
    }
    unint64_t v114 = v63;
    uint64_t v75 = sub_10000BD20(v71);
    Logger.logObject.getter(v75);
    os_log_type_t v76 = sub_100085AAC();
    if (os_log_type_enabled(v56, v76))
    {
      uint64_t v77 = sub_10000BCF4(12LL);
      uint64_t v78 = sub_10000BCF4(32LL);
      v116[0] = v78;
      *(_DWORD *)uint64_t v77 = 136315138;
      uint64_t v79 = sub_1000833BC();
      sub_100048A38( &qword_10010CF60,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v79, v80);
      sub_100015EF8(v81, v82, v116);
      *(void *)(v77 + 4) = v83;
      sub_10000BCDC(v71);
      sub_10000BD28();
      sub_100022210( (void *)&_mh_execute_header,  v56,  v76,  "Invalidating and removing asset for version change: %s",  (uint8_t *)v77);
      swift_arrayDestroy(v78, 1LL);
      uint64_t v61 = v107;
      sub_10000BCC4(v78);
      sub_10000BCC4(v77);
    }

    else
    {
      uint64_t v61 = v62;

      sub_10000BCDC(v71);
    }

    uint64_t v84 = *(void *)(v0 + 264);
    uint64_t v85 = *(void *)(v0 + 240) + 120LL;
    uint64_t v86 = v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002FFE4(v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v0 + 80);
    sub_1000836CC(v86, v84);
    *(_BYTE *)(v84 + *(int *)(v109 + 5sub_10000BCE4(*((void *)*v0 + 2)) = 1;
    uint64_t v87 = sub_1000307DC();
    sub_1000836CC(v87, v88);
    sub_10000BE64(v86, v0 + 104, 33LL);
    uint64_t v89 = sub_100084F7C();
    sub_100081BB0(v89, v90);
    sub_10008503C();
    sub_100083A3C(v84);
    sub_10000BE64(v85, v0 + 128, 33LL);
    sub_1000CB504(v71);
    sub_100030A20();
    sub_100030B78();
    uint64_t result = sub_100021E70();
    uint64_t v56 = v65;
    unint64_t v57 = v114;
  }

  if (v57)
  {
    uint64_t v63 = (v57 - 1) & v57;
    unint64_t v64 = __clz(__rbit64(v57)) | ((void)v56 << 6);
    uint64_t v65 = v56;
LABEL_74:
    uint64_t v71 = *(void *)(*(void *)(v62 + 48) + 8 * v64);
    sub_10000C20C();
    goto LABEL_75;
  }

  int64_t v72 = (int64_t)v56 + 1;
  if (__OFADD__(v56, 1LL))
  {
    __break(1u);
    return result;
  }

  if (v72 >= v99) {
    goto LABEL_82;
  }
  unint64_t v73 = *(void *)(v101 + 8 * v72);
  uint64_t v65 = (os_log_s *)((char *)v56 + 1);
  if (v73) {
    goto LABEL_73;
  }
  uint64_t v65 = (os_log_s *)((char *)v56 + 2);
  unint64_t v73 = *(void *)(v101 + 8LL * (void)v65);
  if (v73) {
    goto LABEL_73;
  }
  uint64_t v65 = (os_log_s *)((char *)v56 + 3);
  unint64_t v73 = *(void *)(v101 + 8LL * (void)v65);
  uint64_t v62 = v107;
  if (v73) {
    goto LABEL_73;
  }
  uint64_t v65 = (os_log_s *)((char *)v56 + 4);
  unint64_t v73 = *(void *)(v101 + 8LL * (void)v65);
  uint64_t v62 = v107;
  if (v73)
  {
LABEL_73:
    uint64_t v63 = (v73 - 1) & v73;
    unint64_t v64 = __clz(__rbit64(v73)) + ((void)v65 << 6);
    goto LABEL_74;
  }

  int64_t v74 = (int64_t)v56 + 5;
  while (v74 < v99)
  {
    unint64_t v73 = *(void *)(v101 + 8 * v74++);
    if (v73)
    {
      uint64_t v65 = (os_log_s *)(v74 - 1);
      uint64_t v62 = v107;
      goto LABEL_73;
    }
  }

LABEL_81:
  uint64_t v62 = v107;
LABEL_82:
  uint64_t v2 = *(os_log_s **)(v0 + 328);
  uint64_t v91 = sub_1000212AC(v62);
  Logger.logObject.getter(v91);
  os_log_type_t v6 = sub_100022604();
  uint64_t v7 = 1LL;
  if (!sub_1000830F4(v6)) {
    goto LABEL_38;
  }
  uint64_t v8 = "Ready for asset version change, all assets have been unloaded, invalidated, and removed";
LABEL_37:
  uint64_t v38 = (uint8_t *)sub_10000BCF4(2LL);
  *(_WORD *)uint64_t v38 = 0;
  sub_1000495CC((void *)&_mh_execute_header, v2, v6, v8, v38);
  sub_10000BCC4((uint64_t)v38);
LABEL_38:

  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100061EAC()
{
  *(void *)(v1 + 36sub_100006F7C(v0 + 8) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100022D04();
  }
  sub_10008373C(v4, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v5, v6, v7);
}

#error "100062208: call analysis failed (funcsize=287)"
#error "1000626B4: call analysis failed (funcsize=285)"
uint64_t sub_100062898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v7 = __chkstk_darwin(State);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - v10, a1, State);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for LoadState.loaded(_:), State);
  sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
  uint64_t v13 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v9, State, v12);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, State);
  v14(v11, State);
  sub_10002F8E0(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if ((v13 & 1) != 0)
  {
    sub_10002F90C((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    return 0LL;
  }

  uint64_t v15 = *(void *)&v4[*(int *)(v2 + 28)];
  swift_retain();
  sub_10002F90C((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v15)
  {
    swift_release(v15);
    return 0LL;
  }

  return 1LL;
}

void sub_100062A50(uint64_t a1, unsigned int *a2)
{
}

uint64_t sub_100062AC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  __chkstk_darwin(State);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for LoadState.unloaded(_:), State);
  char v9 = sub_1000BC4C4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, State);
  sub_10002F8E0(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if ((v9 & 1) == 0)
  {
    sub_10002F90C((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    return 0LL;
  }

  uint64_t v10 = *(void *)&v4[*(int *)(v2 + 28)];
  swift_retain();
  sub_10002F90C((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v10)
  {
    swift_release(v10);
    return 0LL;
  }

  return 1LL;
}

void sub_100062C0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000229CC();
  __chkstk_darwin(v2);
  sub_10004E158();
  unint64_t v57 = v3;
  sub_100022634();
  __chkstk_darwin(v4);
  sub_100085CE8();
  uint64_t v52 = v5;
  uint64_t v6 = sub_100003B20(&qword_10010CA28);
  uint64_t v7 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v6,  &protocol witness table for String);
  uint64_t v50 = v1 + 56;
  sub_1000226C4();
  uint64_t v10 = v9 & v8;
  int64_t v51 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v53 = v1;
  sub_100021EB0();
  int64_t v12 = 0LL;
  if (!v10) {
    goto LABEL_3;
  }
LABEL_2:
  v10 &= v10 - 1;
  while (1)
  {
    sub_100085340();
    sub_10002F8E0(v27, v28, v29);
    sub_10000B7B0(v52, (uint64_t)v57);
    uint64_t v30 = v57[2];
    uint64_t v31 = *(void *)(v30 + 16);
    if (v31)
    {
      uint64_t v55 = v10;
      int64_t v56 = v12;
      sub_10000C2A8(v30);
      uint64_t v54 = v30;
      uint64_t v32 = (uint64_t *)(v30 + 40);
      while (1)
      {
        uint64_t v33 = *(v32 - 1);
        uint64_t v34 = *v32;
        uint64_t v35 = v57[1];
        uint64_t v58 = *v57;
        sub_10000C2A8(*v32);
        sub_100021EB0();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
        uint64_t v59 = v7;
        unint64_t v37 = sub_1000859D8();
        uint64_t v39 = v7[2];
        BOOL v40 = (v38 & 1) == 0;
        Swift::Int v41 = v39 + v40;
        if (__OFADD__(v39, v40)) {
          break;
        }
        unint64_t v42 = v37;
        char v43 = v38;
        sub_100003B20(&qword_10010DB70);
        Swift::Bool v44 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v41);
        uint64_t v7 = v59;
        if (v44)
        {
          unint64_t v45 = sub_1000859D8();
          if ((v43 & 1) != (v46 & 1)) {
            goto LABEL_44;
          }
          unint64_t v42 = v45;
        }

        swift_bridgeObjectRelease(0x8000000000000000LL);
        if ((v43 & 1) == 0)
        {
          v7[(v42 >> 6) + 8] |= 1LL << v42;
          uint64_t v47 = (void *)(v7[6] + 16 * v42);
          *uint64_t v47 = v33;
          v47[1] = v34;
          *(void *)(v7[7] + 8 * v4sub_10003318C(v0 + 2) = _swiftEmptySetSingleton;
          uint64_t v48 = v7[2];
          BOOL v15 = __OFADD__(v48, 1LL);
          uint64_t v49 = v48 + 1;
          if (v15) {
            goto LABEL_41;
          }
          v7[2] = v49;
          sub_1000854A0();
        }

        v32 += 2;
        sub_100017AF4((uint64_t *)&v59, v58, v35);
        sub_1000303D0();
        sub_1000303D0();
        sub_10000C1E0();
        if (!--v31)
        {
          sub_10000C1B0(v54);
          uint64_t v10 = v55;
          int64_t v12 = v56;
          goto LABEL_37;
        }
      }

      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  __break(1u);
LABEL_44:
  __break(1u);
}

  __break(1u);
}

        uint64_t v125 = sub_10000C038();
        sub_10000BD28();
        sub_1000845DC(v125, v126, &a10);
        uint64_t v128 = sub_1000A8764(v127);
        sub_10000C04C(v128, v134);
        sub_10000C1B0(v141);
        sub_1000228C4();
        sub_10000BFDC( (void *)&_mh_execute_header,  v101,  (os_log_type_t)v138,  "Session %s assets %s don't have any alternate inference providers",  (uint8_t *)v103);
        uint64_t v129 = v135;
        sub_1000A86D4();
        sub_10000BCC4(v129);
        sub_10000BCC4(v103);
      }

      else
      {

        sub_10000C1B0(v27);
        sub_10000BCDC(v46);
      }

      uint64_t v130 = sub_1000A83C8();
      uint64_t v89 = sub_1000302B0((uint64_t)&type metadata for DaemonSessionInternalError, v130);
      uint64_t v97 = 0;
LABEL_45:
      *uint64_t v90 = v97;
      swift_willThrow(v89, v90, v91, v92, v93, v94, v95, v96);
      sub_1000A8690();
      swift_release(v136);
      goto LABEL_46;
    }

    uint64_t v140 = v22;
    uint64_t v59 = (uint64_t (**)(uint64_t, uint64_t))v37;
    uint64_t v60 = *(void (**)(uint64_t (**)(uint64_t, uint64_t), unint64_t, uint64_t))(v37 + 16);
    uint64_t v61 = v138;
    v60( v138,  v137 + *(void *)(v37 + 72)
    + ((*(unsigned __int8 *)(v37 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)),
      v36);
    if (qword_10010B108 != -1) {
      swift_once(&qword_10010B108, sub_1000A4494);
    }
    uint64_t v62 = sub_10000BF6C();
    sub_1000A8874(v62, (uint64_t)qword_10010E710);
    uint64_t v63 = v40;
    v60((uint64_t (**)(uint64_t, uint64_t))v40, (unint64_t)v61, v36);
    sub_1000A8698();
    unint64_t v64 = sub_1000A86B0();
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    uint64_t v66 = static os_log_type_t.default.getter();
    if (sub_10008516C((os_log_type_t)v66))
    {
      LODWORD(v133) = v66;
      uint64_t v67 = sub_10000BCF4(32LL);
      uint64_t v132 = sub_10000BCF4(96LL);
      a10 = v132;
      *(_DWORD *)uint64_t v67 = 136315650;
      uint64_t v138 = v59;
      swift_retain();
      uint64_t v68 = sub_1000A75D8();
      uint64_t v134 = v63;
      uint64_t v70 = v69;
      sub_10000C1F0();
      sub_100015EF8(v68, v70, &a10);
      sub_1000A8794(v71);
      unint64_t v73 = v72 + 8;
      sub_1000A87F0((uint64_t)&v144);
      sub_10000BCDC(v46);
      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v67 + 1sub_10003318C(v0 + 2) = 2080;
      sub_100021AD0( &qword_10010C010,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      int64_t v74 = v134;
      os_log_type_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v36, v75);
      sub_10000C054(v76, v77);
      uint64_t v79 = sub_1000A8764(v78);
      uint64_t v131 = v73;
      sub_1000A87F0(v79);
      sub_10000BD28();
      sub_100030250(v74, v138[1]);
      *(_WORD *)(v67 + 2sub_10003318C(v0 + 2) = 2080;
      uint64_t v80 = *(void *)(v27 + 16);
      if (v80)
      {
        uint64_t v134 = v67;
        uint64_t v138 = (uint64_t (**)(uint64_t, uint64_t))v65;
        uint64_t v81 = sub_1000A873C();
        sub_1000A8724(v81, v80);
        char v46 = sub_100020E24(v27);
        sub_1000A86A4();
        uint64_t v139 = v27 + 56;
        while ((v46 & 0x8000000000000000LL) == 0)
        {
          sub_100022404();
          if (v46 >= v82) {
            break;
          }
          if (*(_DWORD *)(v27 + 36) != (_DWORD)v65) {
            goto LABEL_49;
          }
          uint64_t v83 = (uint64_t)v142;
          sub_10003C8BC( *(void *)(v27 + 48) + *(void *)(v140 + 72) * v46,  (uint64_t)v142,  type metadata accessor for ModelCatalogAsset);
          uint64_t v84 = v83;
          uint64_t v85 = v143;
          sub_10000B7B0(v84, v143);
          sub_1000225FC();
          sub_10002F90C(v85, type metadata accessor for ModelCatalogAsset);
          if ((sub_100030B08() & 1) == 0)
          {
            sub_100030638();
            uint64_t v85 = v144;
          }

          uint64_t v27 = *(void *)(v85 + 16);
          uint64_t v86 = *(void *)(v85 + 24);
          if (v27 >= v86 >> 1) {
            sub_10000BDA4(v86 > 1, v27 + 1);
          }
          sub_1000A88B4();
          char v46 = sub_1000A8888(v46, (uint64_t)v65, v87);
          sub_1000A86A4();
          if (!--v80)
          {
            sub_1000A86BC(v46);
            uint64_t v65 = (os_log_s *)v138;
            uint64_t v67 = v134;
            goto LABEL_41;
          }
        }

        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }

uint64_t sub_100062F70()
{
  uint64_t v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask))
  {
    sub_1000224B4();
    Task.cancel()();
    sub_100021DDC();
  }

  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask))
  {
    sub_1000224B4();
    Task.cancel()();
    sub_100021DDC();
  }

  swift_release(*(void *)(v0 + 112));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  sub_10002F90C( v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy,  type metadata accessor for InferenceProviderAssetManagerPolicy);
  swift_release(*(void *)(v0 + v1));
  swift_release(*(void *)(v0 + v2));
  sub_10003D220(OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask);
  sub_100006F7C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog));
  sub_10003D220(OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_providerManager);
  sub_100006F7C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_telemetryManager));
  sub_10003D220(OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_neuralEngine);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100063088()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for InferenceProviderAssetManager(uint64_t a1)
{
  return sub_100047EF0( a1,  (uint64_t *)&unk_10010D5D0,  (uint64_t)&nominal type descriptor for InferenceProviderAssetManager);
}

uint64_t sub_1000630B4(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for InferenceProviderAssetManagerPolicy(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_1000D9C28;
    void v4[5] = &unk_1000D9C28;
    v4[6] = &unk_1000D9C28;
    void v4[7] = &unk_1000D9C40;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[9] = &unk_1000D9C40;
    void v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = &unk_1000D9C58;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 12LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100063170()
{
  *(void *)(v1 + swift_endAccess(v0 + 16) = v0;
  return sub_10000C088((uint64_t)sub_100063184, v0);
}

uint64_t sub_100063184()
{
  *(void *)(v0 + 24) = sub_10000729C( (void *)(*(void *)(v0 + 16)
                                    + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog),
                           *(void *)(*(void *)(v0 + 16)
                                     + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog
                                     + 24));
  sub_10000C030();
  sub_10000C0D4();
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_1000631D4()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100063214()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010D634);
  *(void *)(v0 + swift_endAccess(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000BCBC;
  return sub_10005F2DC();
}

void *sub_10006325C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v4 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 16);
  }

  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  if ((sub_100085280(v3, (uint64_t (*)(char *))sub_1000633B4) & 1) != 0)
  {
    uint64_t v5 = sub_100022944();
    uint64_t v6 = sub_1000CAF08(v5);
    sub_10000BD28();
    return v6;
  }

  uint64_t v17 = v3;
  uint64_t v8 = sub_100022944();
  if ((sub_1000BCA84(v8) & 1) != 0)
  {
LABEL_14:
    sub_10000BD28();
    return _swiftEmptyArrayStorage;
  }

  while (1)
  {
    sub_1000224B4();
    uint64_t v9 = sub_100022944();
    uint64_t v10 = sub_100050C18(v9, &v17, v2);
    uint64_t result = (void *)sub_10000BD28();
    if (!v10) {
      break;
    }
    uint64_t v11 = sub_100084314();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
    unint64_t v13 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v12 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v13 >= v12 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
    }
    uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
    specialized Array._endMutation()(v14);
    sub_1000CB504(v10);
    sub_10000C1F0();
    sub_100021E70();
    uint64_t v15 = sub_100022944();
    char v16 = sub_1000BCA84(v15);
    sub_10000BD28();
    if ((v16 & 1) != 0) {
      goto LABEL_14;
    }
  }

  __break(1u);
  return result;
}

BOOL sub_1000633B4(uint64_t a1)
{
  return *(void *)(*(void *)(a1
}

uint64_t sub_1000633EC(char a1)
{
  *(void *)(v2 + 56) = v1;
  *(_BYTE *)(v2 + 16sub_100016BD0(0, v0, 0) = a1;
  uint64_t v3 = sub_10004FB90();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 7sub_10003318C(v0 + 2) = v4;
  *(void *)(v2 + 8sub_100016BD0(0, v0, 0) = sub_100021CC4(v4);
  uint64_t v5 = sub_100084F6C();
  *(void *)(v2 + 8sub_100006F7C(v0 + 8) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v2 + 96) = v6;
  *(void *)(v2 + 104) = sub_100021CC4(v6);
  sub_100021C90();
  return sub_10000BD98();
}

#error "1000635DC: call analysis failed (funcsize=207)"
uint64_t sub_1000637A4()
{
  uint64_t v0;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 112));
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_1000637DC()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100063804()
{
  uint64_t v2 = *v1;
  sub_10000BE20(v0[17], v3);
  sub_10000BD28();
  uint64_t v4 = (void *)swift_task_alloc(dword_10010D68C);
  v0[18] = (uint64_t)v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100063864;
  uint64_t v5 = sub_1000306EC(v0[15]);
  return sub_100069F1C(v5);
}

uint64_t sub_100063864()
{
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_1000638A8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10010DABC);
  *(void *)(v0 + 15sub_10003318C(v0 + 2) = v1;
  sub_100084E94(v1, (uint64_t)sub_1000638E8);
  return sub_100084E70();
}

uint64_t sub_1000638E8()
{
  return sub_10000BD98();
}

void sub_100063920()
{
  uint64_t v4 = sub_1000854B4();
  uint64_t v7 = sub_100022218(v4, v5, v6);
  char v8 = AssetPolicy.allowAssetTimerUse.getter(v7);
  sub_100022BF8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v8 & 1) != 0) {
    type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
  }
  sub_1000496F8();
}

void sub_1000639C0()
{
  uint64_t v3 = v0;
  sub_100003B20(&qword_10010B208);
  sub_100030A28();
  __chkstk_darwin(v4);
  sub_10008570C();
  sub_100063920();
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
    if (!*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask))
    {
      sub_100085E84((uint64_t (*)(uint64_t))sub_100072908, sub_100082158);
      if ((v7 & 1) != 0)
      {
        if (qword_10010B0C0 != -1) {
          swift_once(&qword_10010B0C0, sub_1000529A4);
        }
        uint64_t v8 = sub_10000BF6C();
        uint64_t v9 = (os_log_s *)sub_100003BA0(v8, (uint64_t)qword_10010D590);
        uint64_t v10 = sub_1000224B4();
        Logger.logObject.getter(v10);
        os_log_type_t v11 = sub_100022604();
        if (sub_1000836BC(v11))
        {
          unint64_t v12 = (uint8_t *)sub_10000BCF4(12LL);
          *(_DWORD *)unint64_t v12 = 134217984;
          uint64_t v13 = v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
          sub_10002FFE4(v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)&v26);
          uint64_t v14 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
          uint64_t v15 = sub_100085E70(*(double *)(v13 + *(int *)(v14 + 28)));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v16, v12 + 4);
          sub_100021DDC();
          sub_100022210((void *)&_mh_execute_header, v9, v2, "Starting task to transition assets after %f seconds", v12);
          sub_10000BCC4((uint64_t)v12);
        }

        else
        {
          sub_100021DDC();
        }

        uint64_t v17 = sub_100021FC8();
        sub_10002FF3C(v1, v18, v19, v17);
        uint64_t v20 = sub_100007460((uint64_t)&unk_100104100, 24LL);
        sub_100085990(v20);
        uint64_t v21 = (void *)sub_100007460((uint64_t)&unk_100104128, 40LL);
        uint64_t v22 = sub_1000858BC(v21);
        uint64_t v24 = sub_100085F20((uint64_t)v22, (uint64_t)&unk_10010DAC8, v23);
        uint64_t v25 = *(void *)(v3 + v6);
        *(void *)(v3 + sub_1000223C4(*(void *)(v6 + 40), v6) = v24;
        sub_100085B4C(v25);
      }
    }
  }

  sub_100007448();
}

uint64_t sub_100063B6C()
{
  v1[10] = v0;
  uint64_t v2 = sub_100003B20(&qword_10010DA40);
  v1[11] = sub_100021CC4(*(void *)(v2 - 8));
  uint64_t v3 = sub_1000837B4();
  v1[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[13] = v4;
  v1[14] = sub_100021CC4(v4);
  uint64_t v5 = sub_1000837BC();
  v1[15] = v5;
  v1[16] = sub_100021CC4(*(void *)(v5 - 8));
  uint64_t v6 = sub_100083B94();
  v1[17] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[18] = v7;
  v1[19] = sub_100021CC4(v7);
  sub_100021C90();
  return sub_10000BD98();
}

#error "100063E2C: call analysis failed (funcsize=262)"
uint64_t sub_10006403C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_1000838CC();
  sub_100022724();
  uint64_t v3 = sub_10000BE20(*(void *)(v1 + 192), v2);
  if (v0) {
    uint64_t v3 = sub_100022D04();
  }
  sub_10008373C(v3, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_1000640C4()
{
  uint64_t v3 = *(void *)(v2 + 176);
  uint64_t result = swift_release(*(void *)(v2 + 184));
  if (v3)
  {
    uint64_t v6 = *(void *)(v2 + 176);
    uint64_t v7 = v6 - 1;
    *(void *)(v2 + 176) = v6 - 1;
    if (__OFSUB__(v6, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = sub_100082F94(result, v5, *(void *)(v2 + 168));
      uint64_t v9 = *(void *)(v2 + 168);
      if (v0)
      {
        uint64_t v10 = sub_1000837CC(v8, v9);
      }

      else
      {
        uint64_t v10 = *(void *)(v9 + 8 * v7 + 32);
        sub_100021D80();
      }

      *(void *)(v2 + 184) = v10;
      uint64_t v11 = *(void *)(v2 + 88);
      sub_100030768(*(void *)(v2 + 104));
      uint64_t v12 = sub_100030CC0();
      sub_10002FF3C(v11, v13, v14, v12);
      uint64_t v15 = (void *)swift_task_alloc(dword_10010D694);
      *(void *)(v2 + 19sub_10003318C(v0 + 2) = v15;
      *uint64_t v15 = v2;
      v15[1] = sub_10006403C;
      uint64_t v16 = sub_100084094();
      return sub_100084E88(v16, v17, v18);
    }
  }

  else
  {
    uint64_t v19 = swift_bridgeObjectRelease(*(void *)(v2 + 168));
    Logger.logObject.getter(v19);
    os_log_type_t v20 = sub_100022604();
    if (sub_10002275C(v20))
    {
      uint64_t v21 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v21);
      sub_10003F1B4( (void *)&_mh_execute_header,  v22,  v23,  "Finished unloading assets not in use by requests due to unload cached asset policy");
      sub_10000BCC4(v1);
    }

    sub_10008518C();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    return sub_100083FB8(*(uint64_t (**)(void))(v2 + 8));
  }

  return result;
}

BOOL sub_1000641E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  __chkstk_darwin(State);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for LoadState.unloaded(_:), State);
  sub_100048A38( &qword_10010CF58,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)(a1, v8, State, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, State);
  sub_10002F8E0(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  BOOL v11 = (v10 & 1) == 0 && *(void *)(*(void *)&v4[*(int *)(v2 + 48)] + 16LL) == 0LL;
  sub_10002F90C((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v11;
}

uint64_t sub_100064340(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_1000837B4();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[5] = v4;
  v2[6] = sub_100021CC4(v4);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100064384()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v4 = sub_10000BF6C();
  *(void *)(v3 + 56) = sub_100003BA0(v4, (uint64_t)qword_10010D590);
  sub_10004E144();
  os_log_type_t v5 = sub_100022604();
  if (sub_10002275C(v5))
  {
    uint64_t v6 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v6);
    sub_10003F1B4((void *)&_mh_execute_header, v7, v8, "Moving assets to dynamic mode that can be");
    sub_10000BCC4(v2);
  }

  sub_1000854E4();
  uint64_t v9 = *(void *)(v3 + 16);
  if (v0 >> 62)
  {
    sub_10008450C(v9);
    uint64_t result = sub_100022D0C();
    uint64_t v1 = result;
  }

  else
  {
    uint64_t result = sub_10008512C(v9);
  }

  *(void *)(v3 + 64) = v1;
  if (v1)
  {
    if (v1 < 1)
    {
      __break(1u);
    }

    else
    {
      uint64_t v11 = *(void *)(v3 + 16);
      *(_DWORD *)(v3 + 96) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
      *(void *)(v3 + 7sub_10003318C(v0 + 2) = 0LL;
      if ((v11 & 0xC000000000000001LL) != 0)
      {
        uint64_t v12 = sub_10008539C(result, v11);
      }

      else
      {
        uint64_t v12 = *(void *)(v11 + 32);
        sub_100021D80();
      }

      *(void *)(v3 + 8sub_100016BD0(0, v0, 0) = v12;
      sub_100084900(*(void *)(v3 + 48), *(void *)(v3 + 40));
      uint64_t v18 = (void *)swift_task_alloc(dword_10010D684);
      *(void *)(v3 + 8sub_100006F7C(v0 + 8) = v18;
      *uint64_t v18 = v3;
      v18[1] = sub_100064524;
      return sub_100084B14(v12, *(void *)(v3 + 48), 0);
    }
  }

  else
  {
    uint64_t v13 = sub_10008490C();
    Logger.logObject.getter(v13);
    os_log_type_t v14 = sub_100022604();
    if (sub_10002275C(v14))
    {
      uint64_t v15 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v15);
      sub_10003F1B4((void *)&_mh_execute_header, v16, v17, "Finished moving assets to dynamic mode");
      sub_10000BCC4(v2);
    }

    sub_10000BFE4();
    return sub_10000BD30(*(uint64_t (**)(void))(v3 + 8));
  }

  return result;
}

uint64_t sub_100064524()
{
  if (v1) {
    sub_100022D04();
  }
  sub_10008344C();
  sub_10000C0D4();
  return sub_1000830E0(v3, v4, v5);
}

uint64_t sub_100064584()
{
  uint64_t v2 = *(char **)(v1 + 72);
  uint64_t v3 = *(char **)(v1 + 64);
  swift_release(*(void *)(v1 + 80));
  if (v2 + 1 == v3)
  {
    uint64_t v4 = sub_10008490C();
    Logger.logObject.getter(v4);
    os_log_type_t v5 = sub_100022604();
    if (sub_10002275C(v5))
    {
      uint64_t v6 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v6);
      sub_10003F1B4((void *)&_mh_execute_header, v7, v8, "Finished moving assets to dynamic mode");
      sub_10000BCC4(v0);
    }

    sub_10000BFE4();
    return sub_10000BD30(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    uint64_t v10 = *(void *)(v1 + 72) + 1LL;
    *(void *)(v1 + 7sub_10003318C(v0 + 2) = v10;
    uint64_t v11 = *(void *)(v1 + 16);
    if ((v11 & 0xC000000000000001LL) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
    }

    else
    {
      uint64_t v12 = *(void *)(v11 + 8 * v10 + 32);
      sub_1000224B4();
    }

    *(void *)(v1 + 8sub_100016BD0(0, v0, 0) = v12;
    sub_100030768(*(void *)(v1 + 40));
    uint64_t v13 = (void *)swift_task_alloc(dword_10010D684);
    *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v13;
    *uint64_t v13 = v1;
    v13[1] = sub_100064524;
    uint64_t v14 = sub_100083690();
    return sub_100084B14(v14, v15, v16);
  }

uint64_t sub_10006467C(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24sub_100006F7C(v0 + 8) = a2;
  *(void *)(v4 + 256) = v3;
  *(_BYTE *)(v4 + 576) = a3;
  *(void *)(v4 + 24sub_100016BD0(0, v0, 0) = a1;
  uint64_t v5 = sub_1000837BC();
  *(void *)(v4 + 264) = v5;
  *(void *)(v4 + 27sub_10003318C(v0 + 2) = sub_10002FDFC(*(void *)(v5 - 8));
  *(void *)(v4 + 28sub_100016BD0(0, v0, 0) = sub_10002287C();
  uint64_t v6 = sub_100003B20(&qword_10010DA40);
  *(void *)(v4 + 28sub_100006F7C(v0 + 8) = sub_100021CC4(*(void *)(v6 - 8));
  uint64_t v7 = sub_100003B20(&qword_10010DA80);
  *(void *)(v4 + 296) = sub_100021CC4(*(void *)(v7 - 8));
  uint64_t v8 = sub_100003B20(&qword_10010BAA0);
  *(void *)(v4 + 304) = sub_100021CC4(*(void *)(v8 - 8));
  uint64_t v9 = sub_100083B94();
  *(void *)(v4 + 31sub_10003318C(v0 + 2) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v4 + 32sub_100016BD0(0, v0, 0) = v10;
  *(void *)(v4 + 32sub_100006F7C(v0 + 8) = sub_10002FDFC(v10);
  *(void *)(v4 + 336) = sub_10002287C();
  *(void *)(v4 + 344) = sub_10002287C();
  *(void *)(v4 + 35sub_10003318C(v0 + 2) = sub_10002287C();
  uint64_t v11 = sub_1000837B4();
  *(void *)(v4 + 36sub_100016BD0(0, v0, 0) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v4 + 36sub_100006F7C(v0 + 8) = v12;
  *(void *)(v4 + 376) = *(void *)(v12 + 64);
  *(void *)(v4 + 384) = sub_10002287C();
  *(void *)(v4 + 39sub_10003318C(v0 + 2) = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v13, v14, v15);
}

#error "100065564: call analysis failed (funcsize=877)"
uint64_t sub_1000655D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_10000C130();
  sub_100022B10(v2);
  *(void *)(v0 + 44sub_100016BD0(0, v0, 0) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    sub_100022D04();
  }
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

#error "100065A6C: call analysis failed (funcsize=648)"
uint64_t sub_1000660D4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = (void *)sub_1000851EC();
  *(void *)(v0 + 464) = v1;
  sub_10008566C(v1, (uint64_t)&unk_10010DA90);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 47sub_10003318C(v0 + 2) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10006614C;
  sub_1000857B8((uint64_t)&type metadata for ());
  sub_1000836A0();
  return sub_10008343C();
}

uint64_t sub_10006614C()
{
  *(void *)(v0 + 48sub_100016BD0(0, v0, 0) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 464));
  }
  sub_10003CE0C();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_1000661A4()
{
  return sub_100021BCC(v1, v2, v3);
}

#error "100066480: call analysis failed (funcsize=641)"
uint64_t sub_100066C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000854DC(*(void *)(v0 + 456));
  sub_10000C140();
  sub_10000C0D4();
  return sub_100021BCC(v1, v2, v3);
}

#error "100066CF0: call analysis failed (funcsize=23)"
uint64_t sub_100066D00()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = (void *)sub_1000851EC();
  *(void *)(v0 + 504) = v1;
  sub_10008566C(v1, (uint64_t)&unk_10010DAA8);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 51sub_10003318C(v0 + 2) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100066D78;
  sub_1000857B8((uint64_t)&type metadata for ());
  sub_1000836A0();
  return sub_10008343C();
}

uint64_t sub_100066D78()
{
  *(void *)(v0 + 52sub_100016BD0(0, v0, 0) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 504));
  }
  sub_10003CE0C();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_100066DD0()
{
  return sub_100021BCC(v1, v2, v3);
}

#error "1000678B8: call analysis failed (funcsize=701)"
uint64_t sub_100067988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000854DC(*(void *)(v0 + 496));
  sub_10000C140();
  sub_10000C0D4();
  return sub_100021BCC(v1, v2, v3);
}

#error "100067A0C: call analysis failed (funcsize=23)"
uint64_t sub_100067A1C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t *a16,  uint64_t a17,  uint64_t a18)
{
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  sub_100021F74();
  a17 = v20;
  a18 = v21;
  a16 = (uint64_t *)v19;
  a16 = *v19;
  uint64_t v22 = a16;
  sub_100022B10(&a16);
  v22[67] = v18;
  swift_task_dealloc(v23);
  uint64_t v24 = v22[48];
  uint64_t v25 = v22[46];
  uint64_t v26 = v22[37];
  sub_10002F99C(v22[36], &qword_10010DA40);
  sub_10002F99C(v26, &qword_10010DA80);
  sub_10008373C(v27, &qword_10010BAA0);
  sub_100022CF4(v24, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  sub_10000C0D4();
  return sub_100083164(v28, v29, v30);
}

#error "100068534: call analysis failed (funcsize=687)"
uint64_t sub_100068604()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  sub_10000C130();
  sub_100022B10(v2);
  v0[70] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[32];
    swift_release(v0[68]);
    uint64_t v5 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006932C;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = v0[32];
    uint64_t v5 = sub_100068668;
  }

  return sub_100021BCC((uint64_t)v5, v6, 0LL);
}

#error "10006885C: call analysis failed (funcsize=124)"
#error "100068CDC: call analysis failed (funcsize=632)"
#error "10006931C: call analysis failed (funcsize=21)"
#error "1000695C4: call analysis failed (funcsize=176)"
uint64_t sub_100069610(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  *(_BYTE *)(v5 + 136) = a5;
  *(void *)(v5 + 4sub_100016BD0(0, v0, 0) = a3;
  *(void *)(v5 + 4sub_100006F7C(v0 + 8) = a4;
  *(void *)(v5 + 3sub_10003318C(v0 + 2) = a2;
  uint64_t v7 = sub_100003B20(&qword_10010DA40);
  *(void *)(v5 + 56) = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100003B20(&qword_10010DA80);
  *(void *)(v5 + 64) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003B20(&qword_10010BAA0);
  *(void *)(v5 + 7sub_10003318C(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  *(void *)(v5 + 8sub_100016BD0(0, v0, 0) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v5 + 8sub_100006F7C(v0 + 8) = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a1;
  *(void *)(v5 + 96) = v12;
  *(void *)(v5 + 104) = v13;
  return swift_task_switch(sub_1000696EC, 0LL, 0LL);
}

#error "1000697B4: call analysis failed (funcsize=147)"
uint64_t sub_100069960()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  sub_100022724();
  uint64_t v2 = *v0;
  sub_10000BE20(*(void *)(v1 + 112), v3);
  swift_task_dealloc(*(void *)(v1 + 96));
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  return sub_100021E4C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000699B8()
{
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v15 = v1;
  uint64_t v4 = (void *)*v1;
  uint64_t v15 = v4;
  uint64_t v5 = v4[11];
  uint64_t v6 = v4[7];
  sub_100022B10(&v15);
  v4[16] = v0;
  swift_task_dealloc(v7);
  sub_10002F99C(v6, &qword_10010DA40);
  sub_10008373C(v8, &qword_10010DA80);
  sub_100084C34(v9, &qword_10010BAA0);
  sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  if (v0)
  {
    sub_10003CE0C();
    return sub_100021BCC(v10, v11, v12);
  }

  else
  {
    swift_task_dealloc(v4[12]);
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    uint64_t v14 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021E4C(v14);
  }

uint64_t sub_100069A88()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100069AD4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  uint64_t v5 = sub_100003B20(&qword_10010DA40);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  v3[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[8] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v8);
  uint64_t v9 = swift_task_alloc(v8);
  uint64_t v10 = *a1;
  v3[10] = v9;
  v3[11] = v10;
  return swift_task_switch(sub_100069B70, 0LL, 0LL);
}

#error "100069C38: call analysis failed (funcsize=134)"
uint64_t sub_100069DA8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(void);
  sub_1000220D4();
  sub_100086104();
  uint64_t v2 = v1[8];
  sub_100022B10(v3);
  v1[13] = v0;
  swift_task_dealloc(v4);
  sub_100082DE8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (v0)
  {
    sub_10003CE0C();
    return sub_1000830E0(v5, v6, v7);
  }

  else
  {
    swift_task_dealloc(v1[10]);
    sub_10000C140();
    sub_10000BFE4();
    uint64_t v9 = (uint64_t (*)(void))sub_1000227B8();
    return sub_1000221B0(v9);
  }

uint64_t sub_100069E18()
{
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v12 = v1;
  uint64_t v12 = (void *)*v1;
  uint64_t v4 = v12;
  sub_100022B10(&v12);
  v4[15] = v0;
  uint64_t v6 = swift_task_dealloc(v5);
  sub_100084C34(v6, &qword_10010DA40);
  sub_100082D50();
  if (v0)
  {
    sub_10003CE0C();
    return sub_100021BCC(v7, v8, v9);
  }

  else
  {
    swift_task_dealloc(v4[10]);
    sub_10000C140();
    sub_10000BFE4();
    uint64_t v11 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021E4C(v11);
  }

uint64_t sub_100069EB4()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100069EE8()
{
  return sub_10000BD30(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100069F1C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010DA40);
  v2[4] = sub_100021CC4(*(void *)(v3 - 8));
  uint64_t v4 = sub_1000837B4();
  void v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  v2[7] = sub_100021CC4(v5);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_100069F78()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v4 = sub_10000BF6C();
  *(void *)(v3 + 64) = sub_100003BA0(v4, (uint64_t)qword_10010D590);
  sub_10004E144();
  os_log_type_t v5 = sub_100022604();
  if (sub_10002275C(v5))
  {
    uint64_t v6 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v6);
    sub_10003F1B4((void *)&_mh_execute_header, v7, v8, "Unloading unused non-cacheable assets");
    sub_10000BCC4(v2);
  }

  sub_1000854E4();
  uint64_t v9 = *(void *)(v3 + 16);
  if (v0 >> 62)
  {
    sub_10008450C(v9);
    uint64_t result = sub_100022D0C();
    uint64_t v1 = result;
  }

  else
  {
    uint64_t result = sub_10008512C(v9);
  }

  *(void *)(v3 + 7sub_10003318C(v0 + 2) = v1;
  if (v1)
  {
    if (v1 < 1)
    {
      __break(1u);
    }

    else
    {
      uint64_t v11 = *(void *)(v3 + 16);
      *(_DWORD *)(v3 + 104) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
      *(void *)(v3 + 8sub_100016BD0(0, v0, 0) = 0LL;
      if ((v11 & 0xC000000000000001LL) != 0)
      {
        uint64_t v12 = sub_10008539C(result, v11);
      }

      else
      {
        uint64_t v12 = *(void *)(v11 + 32);
        sub_10000C278();
      }

      *(void *)(v3 + 8sub_100006F7C(v0 + 8) = v12;
      uint64_t v18 = *(void *)(v3 + 32);
      sub_100084900(*(void *)(v3 + 56), *(void *)(v3 + 48));
      uint64_t v19 = sub_100030CC0();
      sub_10002FF3C(v18, v20, v21, v19);
      uint64_t v22 = (void *)swift_task_alloc(dword_10010D694);
      *(void *)(v3 + 96) = v22;
      void *v22 = v3;
      v22[1] = sub_10006A138;
      return sub_100084504(v12, *(void *)(v3 + 56), *(void *)(v3 + 32));
    }
  }

  else
  {
    uint64_t v13 = sub_100084920();
    Logger.logObject.getter(v13);
    os_log_type_t v14 = sub_100022604();
    if (sub_10002275C(v14))
    {
      uint64_t v15 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v15);
      sub_10003F1B4((void *)&_mh_execute_header, v16, v17, "Finished unloading unused non-cacheable assets");
      sub_10000BCC4(v2);
    }

    sub_100085AE4();
    sub_10000BFE4();
    sub_10000C1B8();
    return sub_100021E4C(*(uint64_t (**)(void))(v3 + 8));
  }

  return result;
}

uint64_t sub_10006A138()
{
  uint64_t v1 = sub_100086104();
  uint64_t v3 = sub_10000BE20(v1, v2);
  if (v0) {
    uint64_t v3 = sub_100022D04();
  }
  sub_10008373C(v3, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10006A1BC()
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  swift_release(*(void *)(v1 + 88));
  if (v2 + 1 == v3)
  {
    uint64_t v4 = sub_100084920();
    Logger.logObject.getter(v4);
    os_log_type_t v5 = sub_100022604();
    if (sub_10002275C(v5))
    {
      uint64_t v6 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v6);
      sub_10003F1B4((void *)&_mh_execute_header, v7, v8, "Finished unloading unused non-cacheable assets");
      sub_10000BCC4(v0);
    }

    sub_100085AE4();
    sub_10000BFE4();
    sub_10000C1B8();
    return sub_10000BD30(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    uint64_t v10 = *(void *)(v1 + 80) + 1LL;
    *(void *)(v1 + 8sub_100016BD0(0, v0, 0) = v10;
    uint64_t v11 = *(void *)(v1 + 16);
    if ((v11 & 0xC000000000000001LL) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
    }

    else
    {
      uint64_t v12 = *(void *)(v11 + 8 * v10 + 32);
      sub_100021D80();
    }

    *(void *)(v1 + 8sub_100006F7C(v0 + 8) = v12;
    uint64_t v13 = *(void *)(v1 + 32);
    sub_100030768(*(void *)(v1 + 48));
    uint64_t v14 = sub_100030CC0();
    sub_10002FF3C(v13, v15, v16, v14);
    uint64_t v17 = (void *)swift_task_alloc(dword_10010D694);
    *(void *)(v1 + 96) = v17;
    *uint64_t v17 = v1;
    v17[1] = sub_10006A138;
    uint64_t v18 = sub_100084094();
    return sub_100084B24(v18, v19, v20);
  }

uint64_t sub_10006A2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  uint64_t v5 = sub_1000837BC();
  v4[26] = v5;
  v4[27] = sub_10002FDFC(*(void *)(v5 - 8));
  v4[28] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v6, v7, v8);
}

#error "10006A928: call analysis failed (funcsize=375)"
uint64_t sub_10006A964()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v8 = *v1;
  uint64_t v2 = v8;
  sub_100022B10(&v8);
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    sub_100022D04();
  }
  sub_10000C0D4();
  return sub_100021BCC(v4, v5, v6);
}

#error "10006AFA4: call analysis failed (funcsize=364)"
uint64_t sub_10006AFE0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = (void *)sub_1000851EC();
  *(void *)(v0 + 28sub_100006F7C(v0 + 8) = v1;
  sub_10008566C(v1, (uint64_t)&unk_10010DA08);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 296) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10006B058;
  sub_1000857B8((uint64_t)&type metadata for ());
  sub_1000836A0();
  return sub_10008343C();
}

uint64_t sub_10006B058()
{
  *(void *)(v0 + 304) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 288));
  }
  sub_10003CE0C();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_10006B0B0()
{
  return sub_100021BCC(v1, v2, v3);
}

#error "10006B6FC: call analysis failed (funcsize=377)"
uint64_t sub_10006B738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000858A8(*(void *)(v0 + 280));
  sub_10000C140();
  sub_10000C0D4();
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_10006B770()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006B7A8()
{
  uint64_t v1 = (void *)sub_1000851EC();
  *(void *)(v0 + 32sub_100006F7C(v0 + 8) = v1;
  sub_10008566C(v1, (uint64_t)&unk_10010DA28);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 336) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10006B820;
  sub_1000857B8((uint64_t)&type metadata for ());
  sub_1000836A0();
  return sub_10008343C();
}

uint64_t sub_10006B820()
{
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 328));
  }
  sub_10003CE0C();
  return sub_100021BCC(v2, v3, v4);
}

uint64_t sub_10006B868()
{
  return sub_100021BCC(v1, v2, v3);
}

#error "10006BE98: call analysis failed (funcsize=370)"
uint64_t sub_10006BED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000858A8(*(void *)(v0 + 320));
  sub_10000C140();
  sub_10000C0D4();
  return sub_100021BCC(v1, v2, v3);
}

uint64_t sub_10006BF0C()
{
  return sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006BF44()
{
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 200);
    swift_release(*(void *)(v0 + 352));
    uint64_t v3 = (uint64_t (*)())sub_10006C660;
    uint64_t v4 = v2;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v3 = sub_10006BF98;
  }

  return sub_100021BCC((uint64_t)v3, v4, 0LL);
}

uint64_t sub_10006BF98()
{
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v4 = v0[22] + v0[29];
  uint64_t v5 = sub_1000859F8();
  sub_10002F8E0(v5, v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  *(_BYTE *)(v1 + *(int *)(v3 + sub_10000BCE4(*(void *)(v0 + 24)) = 0;
  sub_10002F8E0(v1, v2, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10000BE64(v4, (uint64_t)(v0 + 11), 33LL);
  uint64_t v7 = sub_1000307F0();
  sub_100081BB0(v7, v8);
  sub_10008545C();
  sub_10002F90C(v1, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100021DDC();
  sub_100084C08();
  sub_10000C140();
  uint64_t v9 = (uint64_t (*)(void))sub_1000227B8();
  return sub_10003CF64(v9);
}

#error "10006C624: call analysis failed (funcsize=364)"
#error "10006C91C: call analysis failed (funcsize=176)"
uint64_t sub_10006C950(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  v3[4] = a2;
  v3[5] = a3;
  uint64_t v5 = sub_100003B20(&qword_10010DA40);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  v3[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[8] = v7;
  uint64_t v8 = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  void v3[9] = v8;
  v3[10] = v9;
  return swift_task_switch(sub_10006C9DC, 0LL, 0LL);
}

#error "10006CAA4: call analysis failed (funcsize=111)"
uint64_t sub_10006CBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  sub_1000838CC();
  uint64_t v1 = sub_10008419C();
  sub_100084C34(v1, &qword_10010DA40);
  sub_100082D50();
  if (v0)
  {
    sub_10003CE0C();
    return sub_100021BCC(v2, v3, v4);
  }

  else
  {
    sub_100085EE0();
    sub_10000C140();
    uint64_t v6 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021E4C(v6);
  }

uint64_t sub_10006CC20()
{
  return sub_100007418(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006CC54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  uint64_t v5 = sub_100003B20(&qword_10010DA40);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0LL);
  v3[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[8] = v7;
  uint64_t v8 = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  void v3[9] = v8;
  v3[10] = v9;
  return swift_task_switch(sub_10006CCE0, 0LL, 0LL);
}

#error "10006CDA8: call analysis failed (funcsize=111)"
uint64_t sub_10006CEB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  sub_1000838CC();
  uint64_t v1 = sub_10008419C();
  sub_100084C34(v1, &qword_10010DA40);
  sub_100082D50();
  if (v0)
  {
    sub_10003CE0C();
    return sub_100021BCC(v2, v3, v4);
  }

  else
  {
    sub_100085EE0();
    sub_10000C140();
    uint64_t v6 = (uint64_t (*)(void))sub_1000227B8();
    return sub_100021E4C(v6);
  }

uint64_t sub_10006CF24(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_1000837B4();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_100021CC4(v5);
  sub_100021C90();
  return sub_10000BD98();
}

uint64_t sub_10006CF6C()
{
  unint64_t v2 = *(void *)(v1 + 16);
  if (!(v2 >> 62))
  {
    uint64_t result = sub_10008512C(v2);
    if (v0) {
      goto LABEL_3;
    }
LABEL_9:
    sub_10008490C();
    sub_10000C140();
    return sub_100021E4C(*(uint64_t (**)(void))(v1 + 8));
  }

  sub_10008450C(v2);
  uint64_t result = sub_100022D0C();
  uint64_t v0 = result;
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v1 + 16);
  *(_DWORD *)(v1 + 8sub_100006F7C(v0 + 8) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.acquisitionError(_:);
  BOOL v5 = __OFSUB__(v0, 1LL);
  uint64_t v6 = v0 - 1;
  *(void *)(v1 + 64) = v6;
  if (v5)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v4 & 0xC000000000000001LL;
    uint64_t v8 = sub_1000CAB3C(v6, (v4 & 0xC000000000000001LL) == 0);
    uint64_t v9 = *(void *)(v1 + 16);
    if (v7)
    {
      uint64_t v10 = sub_1000837CC(v8, v9);
    }

    else
    {
      uint64_t v10 = *(void *)(v9 + 8 * v6 + 32);
      sub_1000224B4();
    }

    *(void *)(v1 + 7sub_10003318C(v0 + 2) = v10;
    sub_100030768(*(void *)(v1 + 48));
    uint64_t v11 = (void *)swift_task_alloc(dword_10010D694);
    *(void *)(v1 + 8sub_100016BD0(0, v0, 0) = v11;
    *uint64_t v11 = v1;
    v11[1] = sub_10006D060;
    uint64_t v12 = sub_1000226A4();
    return sub_100084504(v12, v13, v14);
  }

  return result;
}

uint64_t sub_10006D060( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  sub_10000BE20(a14[10], &a14);
  if (v16) {
    sub_100022D04();
  }
  sub_10008344C();
  sub_10000C0D4();
  return sub_1000830E0(v20, v21, v22);
}

void sub_10006D0C8()
{
  uint64_t v2 = *(void *)(v1 + 64);
  swift_release(*(void *)(v1 + 72));
  if (v2)
  {
    uint64_t v5 = *(void *)(v1 + 64);
    uint64_t v6 = v5 - 1;
    *(void *)(v1 + 64) = v5 - 1;
    if (__OFSUB__(v5, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v7 = sub_100082F94(v3, v4, *(void *)(v1 + 16));
      uint64_t v8 = *(void *)(v1 + 16);
      if (v0)
      {
        uint64_t v9 = sub_1000837CC(v7, v8);
      }

      else
      {
        uint64_t v9 = *(void *)(v8 + 8 * v6 + 32);
        sub_1000224B4();
      }

      *(void *)(v1 + 7sub_10003318C(v0 + 2) = v9;
      sub_100030768(*(void *)(v1 + 48));
      uint64_t v10 = (void *)swift_task_alloc(dword_10010D694);
      *(void *)(v1 + 8sub_100016BD0(0, v0, 0) = v10;
      *uint64_t v10 = v1;
      v10[1] = sub_10006D060;
      uint64_t v11 = sub_1000226A4();
      sub_100084504(v11, v12, v13);
    }
  }

  else
  {
    sub_10008490C();
    sub_10000C140();
    sub_100021E4C(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t type metadata accessor for InferenceProviderAssetManagerPolicy(uint64_t a1)
{
  return sub_100047EF0(a1, qword_10010D9B0, (uint64_t)&nominal type descriptor for InferenceProviderAssetManagerPolicy);
}

uint64_t *sub_10006D198(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for AssetPolicy(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + vsub_100006F7C(v0 + 8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v10 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v10;
    swift_bridgeObjectRetain(v10);
  }

  return a1;
}

uint64_t sub_10006D240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 32)));
}

uint64_t sub_10006D284(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v9 = *(void *)(a2 + v8);
  *(void *)(a1 + vsub_100006F7C(v0 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10006D300(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v7 = a3[8];
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10006D390(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + vsub_100006F7C(v0 + 8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t sub_10006D408(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v9 = *(void *)(a1 + v8);
  *(void *)(a1 + vsub_100006F7C(v0 + 8) = *(void *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10006D488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006D494);
}

uint64_t sub_10006D494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100084F6C();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_1000060B4(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006F7C(v0 + 8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_10006D508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006D514);
}

uint64_t sub_10006D514(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100084F6C();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100005FB0(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + sub_1000483AC(*(void *)(v0 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_10006D584(uint64_t a1)
{
  uint64_t result = type metadata accessor for AssetPolicy(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_10006D60C(uint64_t a1)
{
  *(void *)(a1 + sub_100006F7C(v0 + 8) = v2;
}

unint64_t sub_10006D648()
{
  unint64_t result = qword_10010D9F8;
  if (!qword_10010D9F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA724, &type metadata for ModelManager);
    atomic_store(result, &qword_10010D9F8);
  }

  return result;
}

uint64_t sub_10006D684(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v21[-v11];
  uint64_t v13 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v13, v22, 0LL, 0LL);
  uint64_t v14 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, v13 + *(int *)(v14 + 32), v6);
  uint64_t v15 = a2 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  swift_beginAccess(v15, v21, 0LL, 0LL);
  uint64_t v16 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
  static Date.+ infix(_:_:)(v10, *(double *)(v15 + *(int *)(v16 + 24)));
  uint64_t v17 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v17(v10, v6);
  sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  LOBYTE(a3) = dispatch thunk of static Comparable.< infix(_:_:)(v12, a3, v6, v18);
  v17(v12, v6);
  if ((a3 & 1) != 0) {
    char v19 = *(_BYTE *)(v13 + *(int *)(v14 + 24)) ^ 1;
  }
  else {
    char v19 = 1;
  }
  return v19 & 1;
}

void *sub_10006D824(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v25 = &_swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0LL;
      uint64_t v22 = v4 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v23 = v4 & 0xC000000000000001LL;
      uint64_t v21 = v4;
      while (v23)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_7:
        unint64_t v10 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_17;
        }
        uint64_t v24 = v9;
        uint64_t v11 = a2;
        char v12 = a1(&v24);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);
          swift_release(v9);
          swift_release(v25);
          return v11;
        }

        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v13 = v7;
          uint64_t v14 = a1;
          uint64_t v15 = a2;
          uint64_t v16 = v25[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          uint64_t v17 = v16;
          a2 = v15;
          a1 = v14;
          uint64_t v7 = v13;
          uint64_t v4 = v21;
          uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v9);
          specialized ContiguousArray._endMutation()(v18);
        }

        else
        {
          swift_release(v9);
        }

        ++v8;
        if (v10 == v7)
        {
          uint64_t v11 = v25;
          goto LABEL_23;
        }
      }

      if (v8 < *(void *)(v22 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0) {
        uint64_t v19 = v4;
      }
      else {
        uint64_t v19 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v7) {
        goto LABEL_22;
      }
    }

    uint64_t v9 = *(void *)(v4 + 8 * v8 + 32);
    swift_retain(v9);
    goto LABEL_7;
  }

uint64_t sub_10006D9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock(0LL);
  void v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[13] = v6;
  v4[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[16] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  uint64_t v10 = sub_100003B20(&qword_10010DAD0);
  v4[19] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  v4[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[21] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v13);
  v4[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_10006DAC8, 0LL, 0LL);
}

uint64_t sub_10006DAC8()
{
  *(void *)(v2 + 19sub_10003318C(v0 + 2) = sub_10004965C((uint64_t)"Purge Inactive Assets", 21LL);
  sub_10002FFE4(v1, v0);
  uint64_t v3 = sub_1000838E8();
  *(void *)(v2 + 20sub_100016BD0(0, v0, 0) = v3;
  if (v3)
  {
    uint64_t v4 = swift_task_alloc(dword_10010DB4C);
    uint64_t v5 = (void *)sub_100084648(v4);
    uint64_t v6 = sub_100083918(v5);
    return sub_100083888(v6);
  }

  else
  {
    uint64_t v8 = sub_1000832A0();
    sub_10002F99C(v8, &qword_10010DAD0);
    sub_10002FFE4(*(void *)(v2 + 88) + 16LL, v2 + 40);
    uint64_t v9 = sub_10008601C();
    *(void *)(v2 + 24sub_100016BD0(0, v0, 0) = v9;
    if (v9)
    {
      return sub_100021BCC((uint64_t)sub_10006E000, v9, 0LL);
    }

    else
    {
      if (qword_10010B0C0 != -1) {
        swift_once(&qword_10010B0C0, sub_1000529A4);
      }
      uint64_t v10 = sub_10000BF6C();
      sub_10003CE68(v10, (uint64_t)qword_10010D590);
      os_log_type_t v11 = sub_100022604();
      if (sub_10002275C(v11))
      {
        uint64_t v12 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v12);
        sub_10003F1B4((void *)&_mh_execute_header, v13, v14, "Ending task to purge inactive assets");
        sub_10000BCC4(v1);
      }

      sub_100082D38();
      sub_100083A90();
      sub_100021DDC();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      return sub_100082D20(*(uint64_t (**)(void))(v2 + 8));
    }
  }

uint64_t sub_10006DC34()
{
  return sub_10000BD98();
}

uint64_t sub_10006DC74()
{
  uint64_t v2 = sub_10008483C();
  if (v3)
  {
    sub_10003096C(v2, &qword_10010DAD0);
    sub_10002FFE4(*(void *)(v1 + 88) + 16LL, v1 + 40);
    uint64_t v4 = sub_10008462C();
    *(void *)(v1 + 24sub_100016BD0(0, v0, 0) = v4;
    if (v4)
    {
      return sub_100084030((uint64_t)sub_10006E000, v4, 0LL);
    }

    else
    {
      if (qword_10010B0C0 != -1) {
        swift_once(&qword_10010B0C0, sub_1000529A4);
      }
      uint64_t v7 = sub_10000BF6C();
      sub_10003CE68(v7, (uint64_t)qword_10010D590);
      os_log_type_t v8 = sub_100022604();
      if (sub_10002275C(v8))
      {
        uint64_t v9 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v9);
        sub_10003F1B4((void *)&_mh_execute_header, v10, v11, "Ending task to purge inactive assets");
        sub_10000BCC4(v0);
      }

      sub_100082D38();
      sub_100083A90();
      sub_100021DDC();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      return sub_1000835E0(*(uint64_t (**)(void))(v1 + 8));
    }
  }

  else
  {
    sub_100083158( *(void *)(v1 + 184),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 168) + 32LL));
    sub_100085B74();
    sub_100085E08();
    sub_1000853B4();
    sub_100083F20();
    sub_100085E48();
    sub_1000852D0();
    sub_100084394();
    sub_100084410((__n128)xmmword_1000D9BB0);
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(void *)(v1 + 23sub_10003318C(v0 + 2) = v5;
    sub_100048A38( &qword_10010DAE0,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
    *uint64_t v5 = v1;
    v5[1] = sub_10006DE34;
    sub_100083998();
    return sub_100083604();
  }

uint64_t sub_10006DE34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = v19;
  uint64_t v22 = (void *)*v19;
  a16 = v22;
  sub_10000BE20(v22[29], &a16);
  if (v18)
  {
    uint64_t v23 = v22[18];
    sub_100022D04();
    sub_100083908();
    sub_100084518(v23);
  }

  else
  {
    sub_100083FC4();
    sub_100085470();
  }

  sub_10003CE0C();
  return sub_100083164(v24, v25, v26);
}

uint64_t sub_10006DEB0()
{
  uint64_t v1 = sub_1000839D4();
  sub_10008376C();
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = sub_1000838E8();
    *(void *)(v0 + 20sub_100016BD0(0, v0, 0) = v2;
    if (v2)
    {
      uint64_t v3 = swift_task_alloc(dword_10010DB4C);
      uint64_t v4 = (void *)sub_100084648(v3);
      uint64_t v5 = sub_100083918(v4);
      return sub_100083888(v5);
    }

    uint64_t v7 = sub_1000832A0();
    sub_10002F99C(v7, &qword_10010DAD0);
  }

  sub_10002FFE4(*(void *)(v0 + 88) + 16LL, v0 + 40);
  uint64_t v8 = sub_10008462C();
  *(void *)(v0 + 24sub_100016BD0(0, v0, 0) = v8;
  if (v8) {
    return sub_100021BCC((uint64_t)sub_10006E000, v8, 0LL);
  }
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v9 = sub_10000BF6C();
  sub_10003CE68(v9, (uint64_t)qword_10010D590);
  os_log_type_t v10 = sub_100022604();
  if (sub_10002275C(v10))
  {
    uint64_t v11 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v11);
    sub_10003F1B4((void *)&_mh_execute_header, v12, v13, "Ending task to purge inactive assets");
    sub_10000BCC4(v1);
  }

  sub_100082D38();
  sub_100083A90();
  sub_100021DDC();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  return sub_100082D20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006E000()
{
  return sub_10000BD98();
}

uint64_t sub_10006E034()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE68(v2, (uint64_t)qword_10010D590);
  os_log_type_t v3 = sub_100022604();
  if (sub_10002275C(v3))
  {
    uint64_t v4 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v4);
    sub_10003F1B4((void *)&_mh_execute_header, v5, v6, "Ending task to purge inactive assets");
    sub_10000BCC4(v0);
  }

  sub_100082D38();
  sub_100083A90();
  sub_100021DDC();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  return sub_100082D20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006E0E8(uint64_t a1)
{
  v2[44] = a1;
  v2[45] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010DAD0);
  v2[46] = sub_10002FDFC(*(void *)(v3 - 8));
  v2[47] = sub_10002287C();
  v2[48] = sub_10002287C();
  uint64_t v4 = sub_1000837BC();
  v2[49] = v4;
  v2[50] = sub_10002FDFC(*(void *)(v4 - 8));
  v2[51] = sub_10002287C();
  uint64_t v5 = sub_100083B94();
  v2[52] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[53] = v6;
  v2[54] = sub_10002FDFC(v6);
  v2[55] = sub_10002287C();
  v2[56] = sub_10002287C();
  v2[57] = sub_10002287C();
  uint64_t v7 = sub_100003B20(&qword_10010DA40);
  v2[58] = sub_100021CC4(*(void *)(v7 - 8));
  uint64_t v8 = sub_1000837B4();
  v2[59] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[60] = v9;
  v2[61] = sub_10002FDFC(v9);
  v2[62] = sub_10002287C();
  uint64_t v10 = sub_1000853A4();
  v2[63] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[64] = v11;
  v2[65] = sub_10002FDFC(v11);
  v2[66] = sub_10002287C();
  v2[67] = sub_10002287C();
  v2[68] = sub_10002287C();
  v2[69] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v12, v13, v14);
}

void sub_10006E1FC()
{
  uint64_t v1 = v0;
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v2 = (uint64_t)(v0 + 5);
  uint64_t v3 = (uint64_t)(v0 + 8);
  uint64_t v4 = (os_log_s *)v0[45];
  uint64_t v5 = sub_10000BF6C();
  v0[70] = v5;
  uint64_t v6 = (os_log_s *)sub_100003BA0(v5, (uint64_t)qword_10010D590);
  v0[71] = v6;
  uint64_t v7 = sub_1000224B4();
  Logger.logObject.getter(v7);
  os_log_type_t v8 = sub_10000C108();
  BOOL v9 = sub_100022444(v4);
  uint64_t v10 = (os_log_s *)v0[45];
  uint64_t v11 = &unk_10010F000;
  if (v9)
  {
    uint64_t v425 = (uint64_t)(v0 + 43);
    uint64_t v12 = (uint8_t *)sub_10000BCF4(12LL);
    *(_DWORD *)uint64_t v12 = 134217984;
    uint64_t v13 = (char *)v10 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
    sub_10002FFE4( (uint64_t)v10 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy,  (uint64_t)(v0 + 2));
    v0[43] = *(void *)&v13[*(int *)(type metadata accessor for InferenceProviderAssetManagerPolicy(0LL) + 24)];
    uint64_t v3 = (uint64_t)(v0 + 8);
    uint64_t v2 = (uint64_t)(v0 + 5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 43, v0 + 44);
    sub_100030B78();
    sub_100022210( (void *)&_mh_execute_header,  v4,  v8,  "Purging inactive assets that haven't been used for at least %f seconds",  v12);
    uint64_t v14 = (uint64_t)v12;
    uint64_t v11 = (void *)&unk_10010F000;
    sub_10000BCC4(v14);
  }

  else
  {
    sub_100030B78();
  }

  uint64_t v16 = v0[45];
  uint64_t v17 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  v0[72] = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  if (*(_BYTE *)(v16 + v17) == 1)
  {
    Logger.logObject.getter(v15);
    os_log_type_t v18 = sub_100022604();
    if (sub_10002275C(v18))
    {
      uint64_t v19 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)uint64_t v19 = 0;
      sub_1000495CC( (void *)&_mh_execute_header,  v6,  (os_log_type_t)v4,  "While purging inactive assets, unloading dynamic-capable assets due to pending asset update",  v19);
      sub_10000BCC4((uint64_t)v19);
    }

    uint64_t v16 = v1[45];
  }

  uint64_t v20 = v1[69];
  uint64_t v21 = v1[68];
  static Date.now.getter();
  uint64_t v22 = _swiftEmptySetSingleton;
  v1[42] = _swiftEmptySetSingleton;
  uint64_t v23 = v11[498];
  v1[73] = v23;
  uint64_t v24 = v16 + v23;
  sub_10002FFE4(v16 + v23, v2);
  uint64_t v25 = sub_100084F64();
  v1[74] = v25;
  static Date.- infix(_:_:)(v20, *(double *)(v24 + *(int *)(v25 + 24)));
  sub_10002FFE4(v16 + 120, v3);
  uint64_t v26 = sub_100083A64();
  *(void *)(v26 + swift_endAccess(v0 + 16) = v21;
  sub_10000C0A0();
  uint64_t v27 = sub_100022944();
  Swift::Int v28 = sub_100078EC8(v27, v16, sub_10008229C, v26);
  sub_10002294C();
  unint64_t v29 = (unint64_t)sub_10006325C(v28);
  v1[75] = v29;
  sub_10000C1F0();
  if (v29 >> 62)
  {
    sub_100022944();
    uint64_t v30 = sub_100085AA4();
    sub_10000BD28();
  }

  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v30)
  {
    v1[82] = 0LL;
    uint64_t v49 = (os_log_s *)v1[71];
    uint64_t v50 = swift_bridgeObjectRelease(v1[75]);
    Logger.logObject.getter(v50);
    os_log_type_t v51 = sub_100022604();
    if (sub_1000228A4(v51))
    {
      uint64_t v52 = (uint8_t *)sub_10000BCF4(2LL);
      *(_WORD *)uint64_t v52 = 0;
      sub_1000495CC((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Finished purging inactive assets", v52);
      sub_10000BCC4((uint64_t)v52);
    }

    uint64_t v53 = v1[72];
    uint64_t v54 = v1[45];

    uint64_t v31 = v1[45];
    if (*(_BYTE *)(v54 + v53) == 1)
    {
      uint64_t v55 = unk_10010B8DC;
      sub_10000C030();
      int64_t v56 = (void *)swift_task_alloc(v55);
      v1[83] = v56;
      *int64_t v56 = v1;
      v56[1] = sub_1000708A0;
      sub_100084DE0();
      __asm { BR              X0 }
    }

LABEL_67:
        v357 = (char *)(v422 + 40);
        sub_1000725D8(v81);
        int64_t v81 = v126;
        uint64_t v368 = (uint64_t)(v422 + 42);
        uint64_t v127 = sub_1000225A4();
        uint64_t v394 = sub_100085D70(v127);
        uint64_t v129 = v128;
        sub_100022B4C();
        uint64_t v380 = v129;
        uint64_t v431 = *(void *)(v129 + 16);
        if (v431)
        {
          uint64_t v324 = (uint64_t)(v422 + 23);
          v335 = v422 + 41;
          uint64_t v346 = (uint64_t)(v422 + 17);
          uint64_t v411 = v422[49];
          uint64_t v417 = v422[64];
          sub_10002FF3C(v422[48], v130, v131, v422[63]);
          swift_retain();
          uint64_t v132 = swift_retain();
          unint64_t v133 = 0LL;
          while (1)
          {
            if (v133 >= *(void *)(v132 + 16)) {
              goto LABEL_89;
            }
            uint64_t v437 = v422[69];
            uint64_t v134 = v422[67];
            uint64_t v135 = v422[66];
            uint64_t v10 = (os_log_s *)v422[63];
            uint64_t v136 = v132;
            uint64_t v137 = *(os_log_s **)(v132 + 8 * v133 + 32);
            uint64_t v138 = (char *)v137 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
            uint64_t v139 = sub_10002FFE4( (uint64_t)v137 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  (uint64_t)(v422 + 14));
            sub_1000843B0( v139,  v140,  v141,  v142,  v143,  v144,  v145,  v146,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  v380,  v394,  (uint64_t)v404,  v411,  v417);
            sub_1000837AC();
            sub_100086090();
            uint64_t v147 = (void (*)(uint64_t, os_log_s *))*((void *)v138 + 1);
            v147(v135, v10);
            int64_t v81 = static Date.> infix(_:_:)(v134, v437);
            sub_1000308D8();
            uint64_t v148 = v422[67];
            if ((v81 & 1) != 0) {
              break;
            }
            ++v133;
            v147(v422[67], (os_log_s *)v422[63]);
            uint64_t v132 = v136;
            if (v431 == v133)
            {
              swift_release(v136);
              sub_100083970( v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  v380,  v394);
              goto LABEL_77;
            }
          }

          uint64_t v197 = v422[63];
          uint64_t v196 = v422[64];
          uint64_t v198 = v422[48];
          uint64_t v199 = sub_100021E70();
          sub_100083970( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  v380,  v394);
          sub_10002F99C(v198, &qword_10010DAD0);
          sub_1000225D4(v198, v148, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v196 + 32));
          sub_100005FB0(v198, 0LL, 1LL, v197);
LABEL_77:
          uint64_t v207 = v422[63];
          uint64_t v208 = v422[47];
          sub_10004DE58(v422[48], v208, &qword_10010DAD0);
          int v209 = sub_1000060B4(v208, 1LL, v207);
          sub_100083C64(v208);
          uint64_t v210 = (os_log_s *)v422[71];
          if (v209 == 1)
          {
            sub_10000BD20(v395);
            uint64_t v211 = sub_10000BD20(v381);
            Logger.logObject.getter(v211);
            os_log_type_t v212 = sub_10003CEEC();
            BOOL v213 = sub_100084B90(v212);
            v433 = (os_log_s *)v422[63];
            uint64_t v439 = v422[69];
            if (v213)
            {
              uint64_t v214 = (uint8_t *)sub_10000BCF4(12LL);
              uint64_t v215 = sub_10000BCF4(32LL);
              v442[0] = v215;
              *(_DWORD *)uint64_t v214 = 136315138;
              uint64_t v216 = v395;
              sub_100083778();
              uint64_t v217 = v381;
              sub_100021D80();
              uint64_t v218 = sub_100081F28(v395, v381);
              sub_10000BF84();
              sub_100030B98();
              sub_1000845DC(v218, v219, v442);
              sub_100084D90( v220,  v335,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  v381,  v395,  (uint64_t)v404,  v411,  v417,  (uint64_t)v422,  (uint64_t)(v214 + 4));
              sub_10000BCDC(v217);
              sub_10000BCDC(v216);
              sub_1000228C4();
              sub_100022210( (void *)&_mh_execute_header,  v210,  (os_log_type_t)v133,  "Remaining purge candidates %s generated task wake times in the past.  Ending inactive asset purge task",  v214);
              sub_100021F38(v215);
              sub_10000BCC4(v215);
              sub_10000BCC4((uint64_t)v214);
              sub_10000BF84();
              sub_100030B98();
            }

            else
            {
              sub_10008332C(v381);
              sub_10008332C(v395);
            }

            v147(v439, v433);
            v147(v422[68], (os_log_s *)v422[63]);
          }

          else
          {
            uint64_t v221 = v422[69];
            uint64_t v222 = v422[65];
            uint64_t v223 = v422[63];
            uint64_t v224 = *(void *)(v422[70] - 8LL);
            uint64_t v225 = sub_100021CF0(*(void *)(v224 + 64));
            sub_100084404(v225, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v224 + 16));
            uint64_t v226 = v404(v222, v221, v223);
            Logger.logObject.getter(v226);
            os_log_type_t v227 = sub_100084F0C();
            if (sub_1000849F4(v227))
            {
              uint64_t v228 = v422[48];
              uint64_t v229 = v422[46];
              uint64_t v230 = (uint8_t *)sub_10000BCF4(12LL);
              *(_DWORD *)uint64_t v230 = 134217984;
              sub_10002FFE4(v228, v324);
              sub_10004DE58(v228, v229, &qword_10010DAD0);
              sub_100083334(v229);
              if (v73)
              {
                sub_10002F99C(v422[48], &qword_10010DAD0);
                __break(1u);
                return;
              }

              uint64_t v231 = v422[65];
              uint64_t v232 = v422[46];
              double v233 = Date.timeIntervalSince(_:)(v231);
              sub_100083D8C(v232);
              *((double *)v422 + 4sub_100016BD0(0, v0, 0) = v233;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v357, v335);
              sub_100083D8C(v231);
              sub_100022210( (void *)&_mh_execute_header,  v137,  v227,  "Additional inactive assets need purging, next task wake in %f seconds",  v230);
              sub_10000BCC4((uint64_t)v230);
            }

            else
            {

              uint64_t v242 = sub_1000848B4();
              uint64_t v234 = ((uint64_t (*)(uint64_t))v147)(v242);
            }

            uint64_t v243 = sub_100084CFC( v234,  v235,  v236,  v237,  v238,  v239,  v240,  v241,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  v381);
            sub_100083970(v243, v244, v245, v246, v247, v248, v249, v250, v327, v338, v349, v360, v371, v384, v395);
            (*(void (**)(uint64_t, void))(v224 + 8))(v225, v422[70]);
            sub_10008376C();
            uint64_t v251 = sub_1000854B4();
            ((void (*)(uint64_t))v147)(v251);
            sub_100030494();
          }

          uint64_t v191 = v422;
          uint64_t v252 = v422[48];
          sub_10002FFE4(v252, v346);
          sub_1000843D4(v252);
          sub_100084088();
          goto LABEL_95;
        }

        sub_1000851F4();
        sub_100084270();
        uint64_t v157 = sub_100084C10(v10);
        uint64_t v426 = v422[64];
        uint64_t v432 = v422[63];
        uint64_t v438 = v422[69];
        if ((_DWORD)v157)
        {
          uint64_t v165 = (uint8_t *)sub_10000BCF4(12LL);
          uint64_t v166 = sub_10000BCF4(32LL);
          v442[0] = v166;
          *(_DWORD *)uint64_t v165 = 136315138;
          uint64_t v417 = (uint64_t)(v165 + 4);
          sub_10002FFE4(v368, (uint64_t)(v422 + 26));
          sub_100022DB0();
          sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
          uint64_t v167 = sub_100022418();
          uint64_t v168 = sub_1000860A8(v167);
          sub_10000C1E8();
          sub_100083B9C(v168, v169, v442);
          v422[39] = v170;
          sub_100022C00((uint64_t)(v422 + 39), (uint64_t)v357, (uint64_t)(v165 + 4));
          sub_100022024();
          sub_100085CFC();
          sub_100022210(v171, v172, v173, v174, v165);
          sub_100021F38(v166);
          sub_10000BCC4(v166);
          uint64_t v157 = sub_10000BCC4((uint64_t)v165);
        }

        sub_100084CFC( v157,  v158,  v159,  v160,  v161,  v162,  v163,  v164,  v324,  (uint64_t)v335,  v346,  (uint64_t)v357,  v368,  v129);

        uint64_t v183 = sub_100083970(v175, v176, v177, v178, v179, v180, v181, v182, v325, v336, v347, v358, v369, v382, v394);
        sub_1000856FC( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v326,  v337,  v348,  v359,  v370,  v383,  v396,  (uint64_t)v404,  v411,  v417,  (uint64_t)v422,  v426,  v432,  v438);
        uint64_t v191 = v422;
        sub_100085D60(v422[68]);
        sub_1000839EC();
        goto LABEL_94;
      }

LABEL_90:
      uint64_t v253 = sub_100084314();
      uint64_t v125 = _CocoaArrayWrapper.endIndex.getter(v253);
      sub_10000C1F0();
      if (!v125) {
        goto LABEL_91;
      }
      goto LABEL_67;
    }

    v441 = _swiftEmptySetSingleton;
    sub_100085AB4();
    sub_10000BD20(v31);
    sub_100022418();
    uint64_t v430 = sub_10008457C();
    uint64_t v58 = sub_1000838E0();
    if (!v58) {
      goto LABEL_60;
    }
    uint64_t v59 = v58;
    uint64_t v411 = (uint64_t)(v1 + 33);
    uint64_t v417 = (uint64_t)(v1 + 31);
    uint64_t v60 = v1[53];
    uint64_t v436 = v1[49];
    uint64_t v324 = (uint64_t)(v1 + 35);
    v335 = v1 + 29;
    v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v1 + 37);
    LODWORD(v393) = enum case for LoadState.loaded(_:);
    uint64_t v10 = (os_log_s *)(v1 + 38);
    uint64_t v368 = sub_100022DB0();
    v357 = (char *)&type metadata for Swift.AnyObject + 8;
    v422 = v1;
    uint64_t v425 = (uint64_t)(v1 + 20);
    v379 = (os_log_s *)(v1 + 38);
LABEL_31:
    uint64_t v61 = v1[55];
    v1[37] = v59;
    sub_100022CC0((uint64_t)v10, (uint64_t)v404, (uint64_t)v357, v368);
    uint64_t v62 = v1[38] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    uint64_t v63 = sub_1000845E4();
    sub_10000BE64(v63, v64, 33LL);
    sub_100022218(v61, v393, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 104));
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_10008401C();
    sub_10008401C();
    uint64_t v65 = v60;
    uint64_t v66 = v1[33];
    uint64_t v67 = v1[34];
    uint64_t v68 = v1[31];
    uint64_t v69 = v1[32];
    int64_t v72 = v1 + 54;
    uint64_t v71 = v1[54];
    uint64_t v70 = v72[1];
    BOOL v73 = v66 == v68 && v67 == v69;
    if (v73)
    {
      sub_10000C1B0(v67);
      uint64_t v89 = sub_1000845E4();
      sub_100083850(v89, v90);
      sub_100022218(v71, v70, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16));
      uint64_t v1 = v422;
      uint64_t v60 = v65;
    }

    else
    {
      LODWORD(v346) = sub_100021EB8(v66, v67, v68, v69);
      sub_1000303D0();
      sub_100007570();
      uint64_t v74 = sub_1000845E4();
      sub_100083850(v74, v75);
      sub_100022218(v71, v70, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16));
      uint64_t v1 = v422;
      uint64_t v60 = v65;
      if ((v346 & 1) == 0)
      {
        uint64_t v346 = v62;
        sub_10008401C();
        sub_10008401C();
        uint64_t v76 = v422[29];
        uint64_t v77 = v422[30];
        uint64_t v78 = v422[35];
        uint64_t v79 = v422[36];
        if (v76 != v78 || v77 != v79)
        {
          uint64_t v82 = v422[54];
          int64_t v81 = v422[55];
          uint64_t v83 = v422[51];
          uint64_t v84 = v60;
          uint64_t v85 = v422[50];
          char v86 = sub_100021EB8(v76, v77, v78, v79);
          sub_10000BD28();
          sub_100022B4C();
          sub_1000846E4(v82);
          uint64_t v87 = v83;
          uint64_t v1 = v422;
          sub_100084520(v87);
          sub_1000846E4(v81);
          uint64_t v88 = v85;
          uint64_t v60 = v84;
          sub_10008521C(v346, v88);
          if ((v86 & 1) == 0)
          {
            sub_100084520(v422[50]);
            sub_1000853AC();
            uint64_t v10 = v379;
LABEL_45:
            swift_release(*(void *)v10);
            goto LABEL_57;
          }

uint64_t sub_10006F254()
{
  *(void *)(v0 + 63sub_10003318C(v0 + 2) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    sub_100022D04();
  }
  sub_10008344C();
  sub_10000C0D4();
  return sub_1000830E0(v4, v5, v6);
}

#error "10006F330: call analysis failed (funcsize=652)"
uint64_t sub_10006FD68()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sub_1000838CC();
  sub_100022724();
  sub_100022B10(v2);
  *(void *)(v1 + 64sub_100006F7C(v0 + 8) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100022D04();
  }
  sub_10008373C(v4, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v5, v6, v7);
}

#error "10006FE68: call analysis failed (funcsize=652)"
uint64_t sub_1000708A0()
{
  uint64_t v0;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 664));
  sub_100021E70();
  sub_100021C90();
  return sub_10000BD98();
}

void sub_1000708DC()
{
  uint64_t v2 = v0[45];
  if ((*(void *)(v2 + 120) & 0xC000000000000001LL) == 0)
  {
    uint64_t v69 = v0[82];
    sub_10000C278();
    uint64_t v70 = sub_100022944();
    uint64_t v71 = sub_100084624(v70, v2, (uint64_t)sub_100053510);
    goto LABEL_36;
  }

  uint64_t v423 = _swiftEmptySetSingleton;
  sub_1000856EC();
  sub_10000BD20(v2);
  sub_100022944();
  uint64_t v399 = sub_10008457C();
  uint64_t v3 = sub_1000838E0();
  if (!v3)
  {
    uint64_t v408 = _swiftEmptySetSingleton;
    goto LABEL_35;
  }

  uint64_t v11 = v3;
  uint64_t v12 = (uint64_t)(v0 + 20);
  uint64_t v373 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v0 + 33);
  uint64_t v382 = (uint64_t)(v0 + 31);
  uint64_t v292 = (uint64_t)(v0 + 35);
  uint64_t v303 = (uint64_t)(v0 + 29);
  uint64_t v358 = (uint64_t)(v0 + 37);
  uint64_t v13 = v0 + 38;
  uint64_t v1 = v0[53];
  uint64_t v416 = v0[49];
  LODWORD(v336) = enum case for LoadState.loaded(_:);
  uint64_t v325 = (void *)sub_100022DB0();
  uint64_t v408 = _swiftEmptySetSingleton;
  uint64_t v314 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v390 = (uint64_t)(v0 + 20);
  uint64_t v347 = v0 + 38;
  do
  {
    uint64_t v14 = v0[55];
    v0[37] = v11;
    sub_100022CC0((uint64_t)v13, v358, (uint64_t)v314, (uint64_t)v325);
    uint64_t v15 = v12;
    uint64_t v16 = v0[38] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10000BE64(v16, v15, 33LL);
    sub_1000228F0(v14, v336, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v17 = v1;
    sub_100085FA4();
    sub_100085FA4();
    uint64_t v18 = v0[33];
    uint64_t v19 = v0[31];
    uint64_t v20 = v0[54];
    uint64_t v21 = v0[55];
    uint64_t v22 = v0[51];
    BOOL v23 = v18 == v19 && v0[34] == v0[32];
    if (v23)
    {
      sub_10000C1B0(v0[34]);
      uint64_t v42 = sub_1000858F8();
      sub_100083850(v42, v43);
      uint64_t v44 = sub_100085464();
      sub_100022218(v44, v45, v46);
      uint64_t v0 = v420;
      uint64_t v26 = v16;
    }

    else
    {
      char v24 = sub_100021EB8(v18, v0[34], v19, v0[32]);
      uint64_t v25 = v21;
      uint64_t v26 = v16;
      char v27 = v24;
      sub_100007570();
      sub_1000228C4();
      sub_100083850(v26, v22);
      sub_100022218(v20, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      uint64_t v0 = v420;
      if ((v27 & 1) == 0)
      {
        uint64_t v28 = v420[54];
        uint64_t v29 = v420[52];
        sub_100085B98();
        sub_10008401C();
        sub_10008401C();
        uint64_t v30 = sub_100084D30();
        if (!v23 || v28 != v29)
        {
          uint64_t v33 = v420[51];
          uint64_t v34 = v420[50];
          char v35 = sub_100021EB8(v30, v28, v31, v29);
          sub_100022B4C();
          sub_10000BD28();
          char v36 = *(void (**)(uint64_t))(v17 + 8);
          uint64_t v37 = sub_1000307F0();
          v36(v37);
          uint64_t v38 = v33;
          uint64_t v1 = v17;
          uint64_t v39 = (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
          sub_100084520(v38);
          uint64_t v40 = sub_100084F7C();
          v36(v40);
          uint64_t v41 = v34;
          uint64_t v0 = v420;
          sub_10008521C(v26, v41);
          if ((v35 & 1) == 0)
          {
            sub_100084520(v420[50]);
            uint64_t v12 = v390;
            sub_100030A20();
            uint64_t v13 = v347;
LABEL_18:
            swift_release(*v13);
            goto LABEL_30;
          }

          goto LABEL_17;
        }

        sub_10000C1B0(v28);
      }
    }

    uint64_t v47 = v0[51];
    uint64_t v48 = v0[50];
    uint64_t v49 = *(void (**)(void))(v1 + 8);
    ((void (*)(void, void))v49)(v0[54], v0[52]);
    sub_10008424C(v47);
    uint64_t v50 = sub_1000307DC();
    v49(v50);
    sub_100083850(v26, v48);
    uint64_t v39 = (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
LABEL_17:
    uint64_t v51 = v0[50];
    uint64_t v52 = *(void *)(*(void *)(v51 + *(int *)(v416 + 48)) + 16LL);
    sub_100084520(v51);
    uint64_t v12 = v390;
    sub_100030A20();
    uint64_t v13 = v347;
    if (v52) {
      goto LABEL_18;
    }
    uint64_t v54 = *v347;
    sub_100084A0C();
    if (!(!v23 & v64))
    {
      sub_1000851E0( v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v292,  v303,  (uint64_t)v314,  (char)v325,  v336,  (uint64_t)v347,  v358,  (uint64_t)v373,  v382,  v390,  v399,  (uint64_t)v408,  v416,  (uint64_t)v420,  (uint64_t)v423,  v424[0],  v424[1],  v424[2],  v424[3],  v424[4],  v424[5],  v424[6],  v424[7],  v424[8]);
      uint64_t v63 = v423;
    }

    uint64_t v408 = v63;
    Hasher.init(_seed:)(v424, v63[5]);
    sub_100085CA0((uint64_t)v424);
    Hasher._finalize()();
    sub_100082D00();
    if (!v23)
    {
      sub_100082E1C();
      goto LABEL_29;
    }

    sub_100082E08();
    do
    {
      sub_100083820();
      if (v23 && (v66 & 1) != 0)
      {
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }

      sub_100083980();
      sub_10008310C();
    }

    while (v23);
    sub_100082DF4();
LABEL_29:
    sub_100083B24(v65);
    *(void *)(v67 + 8 * v6sub_100006F7C(v0 + 8) = v54;
    sub_100083B14();
LABEL_30:
    uint64_t v11 = __CocoaSet.Iterator.next()(v53);
  }

  while (v11);
LABEL_35:
  uint64_t v72 = v0[45];
  sub_100084ACC( 0LL,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v292,  v303,  (uint64_t)v314,  (uint64_t)v325,  v336,  (uint64_t)v347,  v358,  (uint64_t)v373,  v382,  v390,  v399);
  sub_10000BCDC(v72);
  uint64_t v69 = v0[82];
  uint64_t v71 = (uint64_t)v408;
LABEL_36:
  uint64_t v73 = swift_bridgeObjectRetain(v71);
  uint64_t v74 = sub_1000CAF08(v73);
  sub_100021DDC();
  v424[0] = (uint64_t)v74;
  sub_100083FA4(v424, (uint64_t (*)(uint64_t, uint64_t))sub_10005363C);
  if (v69)
  {
    sub_100083F38(v424[0]);
    return;
  }

  sub_100021DDC();
  uint64_t v39 = v424[0];
  if (v424[0] < 0 || (v424[0] & 0x4000000000000000LL) != 0)
  {
LABEL_65:
    uint64_t v222 = sub_100021D80();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter(v222);
    sub_10000BF84();
    if (!v75) {
      goto LABEL_66;
    }
LABEL_41:
    sub_100085F34();
    uint64_t v347 = v0 + 42;
    uint64_t v76 = sub_100083500();
    uint64_t v77 = sub_100085208(v76);
    uint64_t v79 = v78;
    sub_100022D34();
    uint64_t v409 = *(void *)(v79 + 16);
    if (!v409)
    {
      sub_1000851F4();
      sub_100084270();
      BOOL v114 = sub_100084C10((os_log_s *)v1);
      uint64_t v115 = v0[64];
      if (v114)
      {
        uint64_t v410 = v0[63];
        uint64_t v392 = (uint64_t)(v0 + 39);
        uint64_t v361 = v77;
        uint64_t v401 = v0[69];
        uint64_t v116 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v117 = sub_10000BCF4(32LL);
        v424[0] = v117;
        *(_DWORD *)uint64_t v116 = 136315138;
        sub_10002FFE4((uint64_t)v347, (uint64_t)(v0 + 26));
        sub_100022DB0();
        sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
        uint64_t v118 = v115;
        uint64_t v119 = sub_100083500();
        uint64_t v120 = sub_1000860A8(v119);
        uint64_t v122 = v121;
        sub_100022D34();
        sub_100083B9C(v120, v123, v424);
        uint64_t v125 = sub_100030AF0(v124, v0 + 39);
        sub_100022C00((uint64_t)v125, (uint64_t)(v0 + 40), v126);
        uint64_t v0 = v420;
        swift_bridgeObjectRelease(v122);
        sub_100085CFC();
        sub_100022210(v127, v128, v129, v130, v116);
        sub_100021F38(v117);
        sub_10000BCC4(v117);
        sub_10000BCC4((uint64_t)v116);

        uint64_t v139 = sub_1000850F0( v131,  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v292,  v303,  (uint64_t)v314,  (uint64_t)v325,  v336,  (uint64_t)v347,  v361,  (uint64_t)v373,  (uint64_t)(v116 + 4),  v392,  v401,  v410,  v79);
        sub_100083970(v139, v140, v141, v142, v143, v144, v145, v146, v293, v304, v315, v326, v337, v348, v362);
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v402, v411);
      }

      else
      {

        sub_1000308D8();
        sub_100021DDC();
        uint64_t v203 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
        uint64_t v204 = sub_100085A34();
        v203(v204, v205);
      }

      sub_100083D0C();
      sub_1000839EC();
      goto LABEL_69;
    }

    uint64_t v303 = (uint64_t)(v0 + 40);
    uint64_t v314 = (char *)(v0 + 23);
    uint64_t v325 = v0 + 41;
    uint64_t v336 = (uint64_t)(v0 + 17);
    uint64_t v391 = v0[64];
    uint64_t v400 = (uint64_t)(v0 + 14);
    uint64_t v383 = v0[49];
    sub_10002FF3C(v0[48], v80, v81, v0[63]);
    uint64_t v359 = v77;
    sub_1000224B4();
    sub_1000837AC();
    unint64_t v82 = 0LL;
    uint64_t v417 = v79;
    uint64_t v0 = v420;
    while (1)
    {
      if (v82 >= *(void *)(v79 + 16)) {
        goto LABEL_64;
      }
      uint64_t v83 = v420[74];
      uint64_t v84 = v420[66];
      uint64_t v1 = v420[63];
      uint64_t v85 = *(void *)(v79 + 8 * v82 + 32)
          + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      uint64_t v86 = sub_10002FFE4(v85, v400);
      sub_1000843B0( v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v292,  v303,  (uint64_t)v314,  (uint64_t)v325,  v336,  (uint64_t)v347,  v359,  (uint64_t)v373,  v383,  v391);
      sub_1000837AC();
      sub_100086090();
      uint64_t v94 = *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8);
      sub_100084A6C(v84);
      uint64_t v95 = sub_100085FB0();
      uint64_t v39 = static Date.> infix(_:_:)(v95, v96);
      uint64_t v97 = sub_1000308D8();
      uint64_t v105 = v420[67];
      if ((v39 & 1) != 0) {
        break;
      }
      ++v82;
      uint64_t v106 = v94(v420[67], v420[63]);
      uint64_t v79 = v417;
      if (v409 == v82)
      {
        sub_100083970( v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v292,  v303,  (uint64_t)v314,  (uint64_t)v325,  v336,  (uint64_t)v347,  v359);
        sub_1000308D8();
        uint64_t v0 = v420;
        goto LABEL_50;
      }
    }

    uint64_t v83 = v420[63];
    uint64_t v147 = v420[64];
    uint64_t v39 = v420[48];
    sub_100083970( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v292,  v303,  (uint64_t)v314,  (uint64_t)v325,  v336,  (uint64_t)v347,  v359);
    uint64_t v79 = v417;
    uint64_t v148 = sub_1000308D8();
    sub_100084028(v148, &qword_10010DAD0);
    sub_1000843A8(v39, v105, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 32));
    sub_100083A0C(v39);
LABEL_50:
    uint64_t v149 = sub_100085AF0();
    sub_100084B84(v149);
    int v150 = sub_1000060B4(v39, 1LL, v83);
    sub_100084590();
    uint64_t v151 = v0[71];
    if (v150 == 1)
    {
      sub_10000BD20(v360);
      uint64_t v152 = sub_10000BD20(v79);
      uint64_t v153 = (os_log_s *)Logger.logObject.getter(v152);
      os_log_type_t v154 = static os_log_type_t.fault.getter();
      BOOL v155 = sub_1000495A0(v153);
      uint64_t v156 = v0[69];
      uint64_t v157 = v0[63];
      if (v155)
      {
        uint64_t v403 = v156;
        uint64_t v412 = v157;
        uint64_t v158 = v79;
        uint64_t v159 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v160 = sub_10000BCF4(32LL);
        v424[0] = v160;
        sub_100085888(4.8149e-34);
        uint64_t v393 = v161;
        sub_100083778();
        sub_1000224B4();
        uint64_t v162 = sub_100085EC4(v360);
        uint64_t v164 = v163;
        sub_100030B98();
        sub_100021DDC();
        sub_100015EF8(v162, v164, v424);
        os_log_type_t v173 = sub_100085F88(v165, v166, v167, v168, v169, v170, v171, v172, v292, v303, (uint64_t)v314, v325);
        sub_100084490((uint64_t)v173, v174, v393);
        sub_10000BD28();
        sub_10000BCDC(v360);
        sub_10000BCDC(v158);
        sub_100022210( (void *)&_mh_execute_header,  v153,  v154,  "Remaining purge candidates %s generated task wake times in the past.  Ending inactive asset purge task",  v159);
        sub_100021F38(v160);
        sub_10000BCC4(v160);
        sub_10000BCC4((uint64_t)v159);

        sub_100030B98();
        sub_100021DDC();
        uint64_t v175 = v403;
        uint64_t v176 = v412;
      }

      else
      {

        sub_10008332C(v360);
        sub_10008332C(v79);
        uint64_t v175 = sub_1000848B4();
      }

      v94(v175, v176);
      uint64_t v0 = v420;
      v94(v420[68], v420[63]);
    }

    else
    {
      uint64_t v177 = *(void *)(v0[70] - 8LL);
      uint64_t v178 = sub_100021CF0(*(void *)(v177 + 64));
      uint64_t v421 = v177;
      sub_100022218(v178, v151, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v177 + 16));
      uint64_t v179 = sub_1000845E4();
      uint64_t v187 = sub_100085CA8( v179,  v180,  v181,  v182,  v183,  v184,  v185,  v186,  v292,  v303,  (uint64_t)v314,  (uint64_t)v325,  v336,  (uint64_t)v347,  v360,  v373);
      Logger.logObject.getter(v187);
      os_log_type_t v188 = sub_10000C108();
      if (sub_100085160(v188))
      {
        uint64_t v189 = v0[48];
        uint64_t v190 = v0[46];
        uint64_t v191 = (uint8_t *)sub_10000BCF4(12LL);
        *(_DWORD *)uint64_t v191 = 134217984;
        sub_10002FFE4(v189, v316);
        sub_10004DE58(v189, v190, &qword_10010DAD0);
        sub_100083334(v190);
        if (v23)
        {
          sub_10002F99C(v0[48], &qword_10010DAD0);
          __break(1u);
          return;
        }

        uint64_t v192 = v0[65];
        uint64_t v193 = v0[46];
        double v194 = Date.timeIntervalSince(_:)(v192);
        sub_100084A6C(v193);
        *((double *)v0 + 4sub_100016BD0(0, v0, 0) = v194;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v305, v327);
        sub_100084A6C(v192);
        sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v177,  v188,  "Additional inactive assets need purging, next task wake in %f seconds",  v191);
        sub_10000BCC4((uint64_t)v191);
      }

      else
      {
        uint64_t v210 = v0[65];

        uint64_t v195 = sub_100084B7C(v210);
      }

      uint64_t v211 = sub_100083970(v195, v196, v197, v198, v199, v200, v201, v202, v294, v305, v316, v327, v338, v349, v363);
      sub_1000850F0( v211,  v212,  v213,  v214,  v215,  v216,  v217,  v218,  v295,  v306,  v317,  v328,  v339,  v350,  v364,  v374,  v383,  v391,  v400,  v409,  v417);
      uint64_t v219 = v0[69];
      uint64_t v220 = v0[68];
      (*(void (**)(uint64_t, void))(v421 + 8))(v178, v0[70]);
      sub_100084B7C(v219);
      sub_100084B7C(v220);
      sub_100030760();
    }

    uint64_t v221 = v0[48];
    sub_10002FFE4(v221, v336);
    sub_1000834C8(v221);
    sub_100083AE4();
    goto LABEL_70;
  }

  uint64_t v75 = *(void *)(v424[0] + 16);
  if (v75) {
    goto LABEL_41;
  }
LABEL_66:
  uint64_t v223 = sub_10000BF84();
  Logger.logObject.getter(v223);
  os_log_type_t v224 = sub_100022604();
  if (sub_10002275C(v224))
  {
    uint64_t v225 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v225);
    sub_10003F1B4((void *)&_mh_execute_header, v226, v227, "No more inactive assets need purging");
    sub_10000BCC4(v39);
  }

  sub_100083C00();
  sub_100083670(v75);
  sub_1000834D4();
  uint64_t v206 = sub_100083AC8();
LABEL_69:
  sub_100005FB0(v206, v207, v208, v209);
LABEL_70:
  uint64_t v365 = v0[56];
  uint64_t v375 = v0[55];
  uint64_t v384 = v0[54];
  uint64_t v394 = v0[51];
  uint64_t v404 = v0[50];
  uint64_t v413 = v0[48];
  uint64_t v418 = v0[47];
  uint64_t v422 = v0[46];
  swift_bridgeObjectRelease(v0[42]);
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  sub_100030760();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  uint64_t v228 = sub_10002FF04();
  uint64_t v236 = sub_100084970( v228,  v229,  v230,  v231,  v232,  v233,  v234,  v235,  v292,  v303,  (uint64_t)v314,  (uint64_t)v325,  v336,  (uint64_t)v347,  v365);
  uint64_t v244 = sub_100084C94(v236, v237, v238, v239, v240, v241, v242, v243, v296, v307, v318, v329, v340, v351, v366, v375);
  uint64_t v252 = sub_100084474( v244,  v245,  v246,  v247,  v248,  v249,  v250,  v251,  v297,  v308,  v319,  v330,  v341,  v352,  v367,  v376,  v384);
  uint64_t v260 = sub_100083F18( v252,  v253,  v254,  v255,  v256,  v257,  v258,  v259,  v298,  v309,  v320,  v331,  v342,  v353,  v368,  v377,  v385,  v394);
  uint64_t v268 = sub_100083C14( v260,  v261,  v262,  v263,  v264,  v265,  v266,  v267,  v299,  v310,  v321,  v332,  v343,  v354,  v369,  v378,  v386,  v395,  v404);
  uint64_t v276 = sub_100083D58( v268,  v269,  v270,  v271,  v272,  v273,  v274,  v275,  v300,  v311,  v322,  v333,  v344,  v355,  v370,  v379,  v387,  v396,  v405,  v413);
  uint64_t v284 = sub_100083D50( v276,  v277,  v278,  v279,  v280,  v281,  v282,  v283,  v301,  v312,  v323,  v334,  v345,  v356,  v371,  v380,  v388,  v397,  v406,  v414,  v418);
  sub_100083DD0( v284,  v285,  v286,  v287,  v288,  v289,  v290,  v291,  v302,  v313,  v324,  v335,  v346,  v357,  v372,  v381,  v389,  v398,  v407,  v415,  v419,  v422);
  sub_100083F58((uint64_t (*)(void))v0[1]);
}

#error "1000714AC: call analysis failed (funcsize=651)"
void sub_100071EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isCancelled;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask);
  if (v2)
  {
    uint64_t v3 = swift_retain();
    isCancelled = swift_task_isCancelled(v3);
    swift_release(v2);
    uint64_t v5 = *(void *)(v0 + v1);
    *(void *)(v0 + vsub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = 0LL;
    swift_release(v5);
    if ((isCancelled & 1) == 0)
    {
      sub_100053114();
      uint64_t v7 = v6;
      if ((unint64_t)v6 >> 62)
      {
        if (v6 >= 0) {
          v6 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v6);
      }

      else
      {
        uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      swift_bridgeObjectRelease(v7);
      if (v8) {
        sub_100055FD4();
      }
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100071F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086C6C();
  char v12 = v11;
  sub_10002F8E0(a1, (uint64_t)v10, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = &v10[*(int *)(v8 + 32)];
    sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    char v15 = dispatch thunk of static Comparable.< infix(_:_:)(v7, v13, v4, v14) ^ 1;
  }

  else
  {
    char v15 = 0;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10002F90C((uint64_t)v10, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v15 & 1;
}

uint64_t sub_1000720E4()
{
  uint64_t v46 = v3;
  uint64_t v47 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1000306E4();
  sub_100085588();
  __chkstk_darwin(v8);
  sub_100022640();
  __chkstk_darwin(v9);
  sub_100085644();
  uint64_t v10 = sub_100080ADC();
  uint64_t result = sub_10007F55C(&v43, v6, 0LL, 1, v10);
  uint64_t v12 = result;
  unint64_t v13 = *(void *)(v6 + 16);
  uint64_t v14 = v43;
  if (v43 == v13) {
    return sub_1000854A8();
  }
  if ((v43 & 0x8000000000000000LL) != 0) {
    goto LABEL_19;
  }
  if (v13 >= v43)
  {
    unint64_t v42 = (*(unsigned __int8 *)(v0 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
    sub_1000225FC();
    sub_100021C90();
    uint64_t v19 = sub_10007FFB4(v15, v16, v17, (2 * v14) | 1, v18);
    uint64_t v44 = v12;
    uint64_t v45 = v19;
    sub_1000CC31C(v14, v6);
    uint64_t v41 = v23;
    uint64_t v24 = v12;
    if (v21 == v22 >> 1)
    {
      swift_unknownObjectRelease(v20);
      sub_100022024();
      return sub_1000854A8();
    }

    uint64_t v25 = v21;
    uint64_t v37 = v20;
    uint64_t v38 = v24;
    uint64_t v39 = v6;
    int64_t v26 = v22 >> 1;
    uint64_t result = sub_1000224B4();
    uint64_t v40 = v26;
    while (1)
    {
      if (v25 >= v26)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }

      uint64_t v27 = *(void *)(v0 + 72);
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16);
      v28(v2, v41 + v27 * v25, v7);
      uint64_t v29 = (char *)v45 + v42;
      uint64_t v30 = v45[2];
      if (v44)
      {
        sub_10000C030();
        sub_1000CC4EC();
        char v32 = v31;
        sub_100021E70();
        if ((v32 & 1) == 0) {
          goto LABEL_15;
        }
      }

      else if (v30)
      {
        do
        {
          v28(v1, (uint64_t)v29, v7);
          sub_100048A38( &qword_10010DC10,  (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor,  (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
          uint64_t v33 = sub_1000307F0();
          char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v34, v7, v35);
          sub_100085C98(v1, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
          if ((v36 & 1) != 0) {
            goto LABEL_15;
          }
          v29 += v27;
        }

        while (--v30);
      }

      sub_1000CCFE0();
LABEL_15:
      ++v25;
      uint64_t result = sub_100085C98(v2, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
      int64_t v26 = v40;
      if (v25 == v40)
      {
        swift_unknownObjectRelease(v37);
        swift_bridgeObjectRelease(v39);
        swift_release(v38);
        return sub_1000854A8();
      }
    }
  }

  __break(1u);
  return result;
}

void sub_10007233C(uint64_t a1)
{
  uint64_t v7 = v6;
  unint64_t v8 = *(void *)(a1 + 16);
  if (v52 != v8)
  {
    if ((v52 & 0x8000000000000000LL) != 0) {
      goto LABEL_39;
    }
    if (v8 < v52)
    {
LABEL_40:
      __break(1u);
      return;
    }

    sub_100083500();
    sub_100021C90();
    unint64_t v13 = sub_10007FFB4(v9, v10, v11, (2 * v52) | 1, v12);
    uint64_t v53 = v7;
    uint64_t v54 = v13;
    uint64_t v14 = sub_1000858F8();
    sub_1000CC380(v14, v15);
    uint64_t v49 = v18;
    if (v16 == v17 >> 1)
    {
      sub_100085E9C();
      sub_100022D34();
      return;
    }

    uint64_t v19 = v16;
    uint64_t v46 = a1;
    uint64_t v47 = v7;
    int64_t v20 = v17 >> 1;
    sub_100084314();
    uint64_t v21 = v49;
    uint64_t v50 = v20;
LABEL_7:
    if (v19 >= v20)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v22 = v21 + 40 * v19;
    __int128 v23 = *(_OWORD *)v22;
    __int128 v24 = *(_OWORD *)(v22 + 16);
    unsigned __int8 v57 = *(_BYTE *)(v22 + 32);
    __int128 v55 = v23;
    __int128 v56 = v24;
    __int128 v58 = *(_OWORD *)v22;
    uint64_t v25 = *((void *)&v24 + 1);
    uint64_t v26 = v13[2];
    if (v53)
    {
      sub_100082A94((uint64_t)&v58);
      sub_10002289C();
      sub_1000224B4();
      sub_1000CC6A4((uint64_t)&v55, (uint64_t)(v13 + 4), v26, (void *)(v53 + 16), v53 + 32, v27, v28, v29);
      char v31 = v30;
      uint64_t v33 = v32;
      sub_100021DDC();
      if ((v31 & 1) == 0)
      {
        sub_100082ABC((uint64_t)&v58);
        sub_10000C000();
        goto LABEL_34;
      }

      goto LABEL_32;
    }

    if (!v26)
    {
LABEL_31:
      sub_100082A94((uint64_t)&v58);
      sub_10002289C();
      uint64_t v33 = 0LL;
      uint64_t v21 = v49;
LABEL_32:
      int64_t v20 = v50;
      sub_1000CD004(&v55, v33);
      sub_100082ABC((uint64_t)&v58);
      sub_10000C000();
      unint64_t v13 = v54;
      goto LABEL_35;
    }

    uint64_t v34 = v56;
    __int128 v35 = v58;
    uint64_t v48 = v13;
    char v36 = (unsigned __int8 *)(v13 + 8);
    int v51 = v57;
    while (1)
    {
      uint64_t v37 = *((void *)v36 - 4);
      uint64_t v38 = *((void *)v36 - 3);
      uint64_t v40 = *((void *)v36 - 2);
      uint64_t v39 = *((void *)v36 - 1);
      int v41 = *v36;
      BOOL v42 = v37 == (void)v35 && v38 == *((void *)&v35 + 1);
      if (!v39) {
        break;
      }
      if (!v25) {
        goto LABEL_30;
      }
      if (v40 != v34 || v39 != v25)
      {
        uint64_t v44 = sub_100049B78();
        if ((sub_100021EB8(v44, v45, v34, v25) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_27:
        if (((v41 ^ v51) & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }

      if (v41 == (v51 & 1))
      {
LABEL_33:
        unint64_t v13 = v48;
        uint64_t v21 = v49;
LABEL_34:
        int64_t v20 = v50;
LABEL_35:
        if (++v19 == v20)
        {
          sub_100085E9C();
          swift_bridgeObjectRelease(v46);
          swift_release(v47);
          return;
        }

        goto LABEL_7;
      }

void sub_1000725D8(int64_t a1)
{
  uint64_t v2 = (unint64_t *)sub_100080ADC();
  sub_10007FBA4(v33, a1, 0LL, 1, v2);
  uint64_t v4 = v3;
  unint64_t v5 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v7 = v33[0];
    if (v33[0] == v6)
    {
      swift_bridgeObjectRetain(a1);
LABEL_4:
      swift_bridgeObjectRelease(a1);
      return;
    }

    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if ((v33[0] & 0x8000000000000000LL) == 0) {
      goto LABEL_6;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  if (a1 < 0) {
    uint64_t v31 = a1;
  }
  else {
    uint64_t v31 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(a1);
  uint64_t v7 = v33[0];
  if (v33[0] == v6)
  {
    swift_bridgeObjectRetain(a1);
    sub_1000CB374();
    swift_bridgeObjectRelease(a1);
    goto LABEL_4;
  }

  if ((v33[0] & 0x8000000000000000LL) != 0) {
    goto LABEL_44;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(a1);
  if (v32 < 0)
  {
LABEL_49:
    __break(1u);
    return;
  }

  swift_bridgeObjectRetain(a1);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(a1);
LABEL_6:
  if (v8 < v7)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  if ((a1 & 0xC000000000000001LL) != 0 && v7)
  {
    type metadata accessor for InferenceProviderAsset(0LL);
    Swift::Int v9 = 0LL;
    do
    {
      Swift::Int v10 = v9 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v9);
      Swift::Int v9 = v10;
    }

    while (v7 != v10);
  }

  if (v5)
  {
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = _CocoaArrayWrapper.subscript.getter(0LL, v7, v15);
    uint64_t v12 = v16;
    uint64_t v14 = v17;
    unint64_t v13 = v18;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v12 = (a1 & 0xFFFFFFFFFFFFFF8LL) + 32;
    unint64_t v13 = (2 * v7) | 1;
    swift_bridgeObjectRetain(a1);
    uint64_t v14 = 0LL;
  }

  uint64_t v19 = sub_10007FFB4(v11, v12, v14, v13, (uint64_t (*)(uint64_t))sub_1000CB470);
  v33[1] = v4;
  v33[2] = v19;
  if (v6 < v7) {
    goto LABEL_46;
  }
  if (v5)
  {
    if (a1 < 0) {
      uint64_t v21 = a1;
    }
    else {
      uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    swift_retain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_retain();
  }

  if (v20 < v6) {
    goto LABEL_47;
  }
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (v7 < v6)
    {
      type metadata accessor for InferenceProviderAsset(0LL);
      Swift::Int v22 = v7;
      do
      {
        Swift::Int v23 = v22 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v22);
        Swift::Int v22 = v23;
      }

      while (v6 != v23);
      goto LABEL_29;
    }

    goto LABEL_48;
  }

void sub_100072908()
{
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_15:
    sub_10000C1E0();
    return;
  }

  uint64_t v2 = sub_10008592C();
  if (!v2) {
    goto LABEL_15;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }

  else
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v4 = sub_1000854B4();
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v5);
      }

      else
      {
        uint64_t v6 = *(void *)(v1 + 8 * i + 32);
        sub_10000C278();
      }

      if ((*(_BYTE *)(v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0
        || (*(_BYTE *)(v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable) & 1) == 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(_swiftEmptyArrayStorage[2]);
        uint64_t v7 = sub_1000845E4();
        uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v8);
        specialized ContiguousArray._endMutation()(v9);
      }

      else
      {
        sub_10000C280();
      }
    }

    sub_10000C1E0();
  }

uint64_t sub_100072A34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v14, v32, 0LL, 0LL);
  sub_10002F8E0(v14, (uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v16 = *(int *)(v4 + 32);
  uint64_t v15 = *(int *)(v4 + 36);
  uint64_t v28 = v4;
  uint64_t v17 = &v6[v15];
  unint64_t v18 = &v6[v16];
  sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v20 = v19;
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v18, v17, v7, v19) & 1) != 0) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = v17;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v21, v7);
  sub_10002F90C((uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v22 = v29 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  swift_beginAccess(v29 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, v31, 0LL, 0LL);
  uint64_t v23 = type metadata accessor for InferenceProviderAssetManagerPolicy(0LL);
  static Date.+ infix(_:_:)(v11, *(double *)(v22 + *(int *)(v23 + 28)));
  uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v11, v7);
  LOBYTE(v2sub_10003318C(v0 + 2) = dispatch thunk of static Comparable.< infix(_:_:)(v13, v30, v7, v20);
  v24(v13, v7);
  if ((v22 & 1) != 0) {
    char v25 = *(_BYTE *)(v14 + *(int *)(v28 + 24)) ^ 1;
  }
  else {
    char v25 = 1;
  }
  return v25 & 1;
}

uint64_t sub_100072C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock(0LL);
  void v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[13] = v6;
  v4[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[16] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  uint64_t v10 = sub_100003B20(&qword_10010DAD0);
  v4[19] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  v4[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[21] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v13);
  v4[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_100072D48, 0LL, 0LL);
}

uint64_t sub_100072D48()
{
  *(void *)(v2 + 19sub_10003318C(v0 + 2) = sub_10004965C((uint64_t)"Transition Assets", 17LL);
  sub_10002FFE4(v1, v0);
  uint64_t v3 = sub_1000838E8();
  *(void *)(v2 + 20sub_100016BD0(0, v0, 0) = v3;
  if (v3)
  {
    uint64_t v4 = swift_task_alloc(dword_10010DADC);
    uint64_t v5 = (void *)sub_100084648(v4);
    uint64_t v6 = sub_100083918(v5);
    return sub_1000838A0(v6);
  }

  else
  {
    uint64_t v8 = sub_1000832A0();
    sub_10002F99C(v8, &qword_10010DAD0);
    sub_10002FFE4(*(void *)(v2 + 88) + 16LL, v2 + 40);
    uint64_t v9 = sub_10008601C();
    *(void *)(v2 + 24sub_100016BD0(0, v0, 0) = v9;
    if (v9)
    {
      return sub_100021BCC((uint64_t)sub_100073280, v9, 0LL);
    }

    else
    {
      if (qword_10010B0C0 != -1) {
        swift_once(&qword_10010B0C0, sub_1000529A4);
      }
      uint64_t v10 = sub_10000BF6C();
      sub_10003CE68(v10, (uint64_t)qword_10010D590);
      os_log_type_t v11 = sub_100022604();
      if (sub_10002275C(v11))
      {
        uint64_t v12 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v12);
        sub_10003F1B4((void *)&_mh_execute_header, v13, v14, "Ending task to transition assets");
        sub_10000BCC4(v1);
      }

      sub_100082D38();
      sub_100083A90();
      sub_100021DDC();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      return sub_100082D20(*(uint64_t (**)(void))(v2 + 8));
    }
  }

uint64_t sub_100072EB4()
{
  return sub_10000BD98();
}

uint64_t sub_100072EF4()
{
  uint64_t v2 = sub_10008483C();
  if (v3)
  {
    sub_10003096C(v2, &qword_10010DAD0);
    sub_10002FFE4(*(void *)(v1 + 88) + 16LL, v1 + 40);
    uint64_t v4 = sub_10008462C();
    *(void *)(v1 + 24sub_100016BD0(0, v0, 0) = v4;
    if (v4)
    {
      return sub_100084030((uint64_t)sub_100073280, v4, 0LL);
    }

    else
    {
      if (qword_10010B0C0 != -1) {
        swift_once(&qword_10010B0C0, sub_1000529A4);
      }
      uint64_t v7 = sub_10000BF6C();
      sub_10003CE68(v7, (uint64_t)qword_10010D590);
      os_log_type_t v8 = sub_100022604();
      if (sub_10002275C(v8))
      {
        uint64_t v9 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v9);
        sub_10003F1B4((void *)&_mh_execute_header, v10, v11, "Ending task to transition assets");
        sub_10000BCC4(v0);
      }

      sub_100082D38();
      sub_100083A90();
      sub_100021DDC();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      return sub_1000835E0(*(uint64_t (**)(void))(v1 + 8));
    }
  }

  else
  {
    sub_100083158( *(void *)(v1 + 184),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 168) + 32LL));
    sub_100085B74();
    sub_100085E08();
    sub_1000853B4();
    sub_100083F20();
    sub_100085E48();
    sub_1000852D0();
    sub_100084394();
    sub_100084410((__n128)xmmword_1000D9BB0);
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(void *)(v1 + 23sub_10003318C(v0 + 2) = v5;
    sub_100048A38( &qword_10010DAE0,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
    *uint64_t v5 = v1;
    v5[1] = sub_1000730B4;
    sub_100083998();
    return sub_100083604();
  }

uint64_t sub_1000730B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = v19;
  uint64_t v22 = (void *)*v19;
  a16 = v22;
  sub_10000BE20(v22[29], &a16);
  if (v18)
  {
    uint64_t v23 = v22[18];
    sub_100022D04();
    sub_100083908();
    sub_100084518(v23);
  }

  else
  {
    sub_100083FC4();
    sub_100085470();
  }

  sub_10003CE0C();
  return sub_100083164(v24, v25, v26);
}

uint64_t sub_100073130()
{
  uint64_t v1 = sub_1000839D4();
  sub_10008376C();
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = sub_1000838E8();
    *(void *)(v0 + 20sub_100016BD0(0, v0, 0) = v2;
    if (v2)
    {
      uint64_t v3 = swift_task_alloc(dword_10010DADC);
      uint64_t v4 = (void *)sub_100084648(v3);
      uint64_t v5 = sub_100083918(v4);
      return sub_1000838A0(v5);
    }

    uint64_t v7 = sub_1000832A0();
    sub_10002F99C(v7, &qword_10010DAD0);
  }

  sub_10002FFE4(*(void *)(v0 + 88) + 16LL, v0 + 40);
  uint64_t v8 = sub_10008462C();
  *(void *)(v0 + 24sub_100016BD0(0, v0, 0) = v8;
  if (v8) {
    return sub_100021BCC((uint64_t)sub_100073280, v8, 0LL);
  }
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v9 = sub_10000BF6C();
  sub_10003CE68(v9, (uint64_t)qword_10010D590);
  os_log_type_t v10 = sub_100022604();
  if (sub_10002275C(v10))
  {
    uint64_t v11 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v11);
    sub_10003F1B4((void *)&_mh_execute_header, v12, v13, "Ending task to transition assets");
    sub_10000BCC4(v1);
  }

  sub_100082D38();
  sub_100083A90();
  sub_100021DDC();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  return sub_100082D20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100073280()
{
  return sub_10000BD98();
}

uint64_t sub_1000732B4()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE68(v2, (uint64_t)qword_10010D590);
  os_log_type_t v3 = sub_100022604();
  if (sub_10002275C(v3))
  {
    uint64_t v4 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v4);
    sub_10003F1B4((void *)&_mh_execute_header, v5, v6, "Ending task to transition assets");
    sub_10000BCC4(v0);
  }

  sub_100082D38();
  sub_100083A90();
  sub_100021DDC();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  return sub_100082D20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100073368(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010DAD0);
  v2[33] = sub_10002FDFC(*(void *)(v3 - 8));
  v2[34] = sub_10002287C();
  v2[35] = sub_10002287C();
  uint64_t v4 = sub_100083B94();
  v2[36] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[37] = v5;
  v2[38] = sub_10002FDFC(v5);
  v2[39] = sub_10002287C();
  uint64_t v6 = sub_100003B20(&qword_10010DA40);
  v2[40] = sub_10002FDFC(*(void *)(v6 - 8));
  v2[41] = sub_10002287C();
  uint64_t v7 = sub_1000837B4();
  v2[42] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[43] = v8;
  v2[44] = sub_10002FDFC(v8);
  v2[45] = sub_10002287C();
  v2[46] = sub_10002287C();
  uint64_t v9 = sub_1000837BC();
  v2[47] = v9;
  v2[48] = sub_10002FDFC(*(void *)(v9 - 8));
  v2[49] = sub_10002287C();
  uint64_t v10 = sub_1000853A4();
  v2[50] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[51] = v11;
  v2[52] = sub_10002FDFC(v11);
  v2[53] = sub_10002287C();
  v2[54] = sub_10002287C();
  v2[55] = sub_10002287C();
  v2[56] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v12, v13, v14);
}

void sub_10007347C()
{
  uint64_t v3 = v2;
  if (qword_10010B0C0 != -1) {
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v4 = (unint64_t)(v3 + 5);
    uint64_t v5 = sub_10000BF6C();
    v3[57] = v5;
    uint64_t v6 = (os_log_s *)sub_100003BA0(v5, (uint64_t)qword_10010D590);
    v3[58] = v6;
    uint64_t v7 = sub_100084314();
    Logger.logObject.getter(v7);
    os_log_type_t v8 = sub_10000C160();
    BOOL v9 = sub_100083DF0(v1);
    uint64_t v10 = v3[32];
    uint64_t v11 = &unk_10010F000;
    uint64_t v389 = v3;
    if (v9)
    {
      uint64_t v12 = (uint8_t *)sub_10000BCF4(12LL);
      *(_DWORD *)uint64_t v12 = 134217984;
      unint64_t v0 = v10 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
      uint64_t v13 = sub_100084F7C();
      unint64_t v4 = (unint64_t)(v3 + 5);
      uint64_t v11 = (void *)&unk_10010F000;
      sub_10002FFE4(v13, v14);
      v3[30] = *(void *)(v0 + *(int *)(type metadata accessor for InferenceProviderAssetManagerPolicy(0LL) + 28));
      sub_1000495FC((uint64_t)(v3 + 30), (uint64_t)(v3 + 31), (uint64_t)(v12 + 4));
      sub_10000C280();
      sub_100022210( (void *)&_mh_execute_header,  v1,  v8,  "Transition assets that haven't been used for at least %f seconds",  v12);
      sub_10000BCC4((uint64_t)v12);
    }

    else
    {
      sub_10000C280();
    }

    uint64_t v16 = v3[32];
    uint64_t v17 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
    v3[59] = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
    if (*(_BYTE *)(v16 + v17) == 1)
    {
      Logger.logObject.getter(v15);
      os_log_type_t v18 = sub_100022604();
      if (sub_1000836BC(v18))
      {
        uint64_t v19 = (_WORD *)sub_10000BCF4(2LL);
        sub_100085448(v19);
        sub_1000495CC( (void *)&_mh_execute_header,  v6,  (os_log_type_t)v16,  "While transitioning assets, unloading dynamic-capable assets due to pending asset update",  (uint8_t *)v0);
        sub_10000BCC4(v0);
      }

      uint64_t v16 = v3[32];
    }

    uint64_t v1 = (os_log_s *)v3[55];
    uint64_t v20 = v3[56];
    static Date.now.getter();
    v3[29] = _swiftEmptySetSingleton;
    uint64_t v21 = v11[498];
    v3[60] = v21;
    uint64_t v22 = v16 + v21;
    sub_10002FFE4(v16 + v21, v4);
    uint64_t v23 = sub_100084F64();
    v3[61] = v23;
    static Date.- infix(_:_:)(v20, *(double *)(v22 + *(int *)(v23 + 28)));
    sub_100072908();
    unint64_t v0 = v24;
    uint64_t v25 = sub_100083A64();
    *(void *)(v25 + swift_endAccess(v0 + 16) = v1;
    uint64_t v390 = _swiftEmptyArrayStorage;
    if (v0 >> 62) {
      break;
    }
    uint64_t v26 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v26) {
      goto LABEL_27;
    }
LABEL_11:
    unint64_t v4 = 0LL;
    uint64_t v360 = v25;
    uint64_t v366 = v3[47];
    unint64_t v383 = v0 & 0xC000000000000001LL;
    uint64_t v371 = (uint64_t)(v3 + 8);
    uint64_t v377 = v0 & 0xFFFFFFFFFFFFFF8LL;
    while (1)
    {
      if (v383)
      {
        unint64_t v27 = v0;
        uint64_t v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0);
      }

      else
      {
        if (v4 >= *(void *)(v377 + 16)) {
          goto LABEL_24;
        }
        unint64_t v27 = v0;
        uint64_t v28 = *(void *)(v0 + 8 * v4 + 32);
        sub_100083778();
      }

      unint64_t v0 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        break;
      }
      uint64_t v29 = v3[55];
      uint64_t v32 = v3 + 49;
      uint64_t v31 = v3[49];
      uint64_t v30 = v32[1];
      uint64_t v33 = v28 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      sub_10002FFE4(v28 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v371);
      sub_1000836CC(v33, v31);
      uint64_t v1 = (os_log_s *)(v31 + *(int *)(v366 + 32));
      sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      LOBYTE(v3sub_100016BD0(0, v0, 0) = dispatch thunk of static Comparable.< infix(_:_:)(v29, v1, v30, v34);
      sub_100083A3C(v31);
      if ((v30 & 1) != 0)
      {
        sub_100030B98();
      }

      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        uint64_t v36 = v390[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
        uint64_t v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v28);
        specialized ContiguousArray._endMutation()(v37);
      }

      ++v4;
      BOOL v38 = v0 == v26;
      uint64_t v3 = v389;
      unint64_t v0 = v27;
      if (v38)
      {
        uint64_t v39 = v390;
        goto LABEL_28;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }

  uint64_t v26 = sub_10008592C();
  if (v26) {
    goto LABEL_11;
  }
LABEL_27:
  uint64_t v39 = _swiftEmptyArrayStorage;
LABEL_28:
  sub_10000C1E0();
  sub_10002294C();
  sub_100011714((unint64_t)v39);
  unint64_t v41 = (unint64_t)sub_10006325C(v40);
  v3[62] = v41;
  sub_10000C1E8();
  if (!(v41 >> 62))
  {
    uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v42) {
      goto LABEL_30;
    }
LABEL_41:
    uint64_t v68 = (os_log_s *)v3[58];
    uint64_t v69 = swift_bridgeObjectRelease(v3[62]);
    Logger.logObject.getter(v69);
    os_log_type_t v70 = sub_100022604();
    if (sub_1000836BC(v70))
    {
      uint64_t v71 = (_WORD *)sub_10000BCF4(2LL);
      sub_100085448(v71);
      sub_1000495CC( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v42,  "Finished transitioning assets",  (uint8_t *)v0);
      sub_10000BCC4(v0);
    }

    uint64_t v72 = v3[59];
    uint64_t v73 = v3[32];

    if (*(_BYTE *)(v73 + v72) == 1)
    {
      sub_1000850A0(v3[32], &dword_10010B8D8);
      uint64_t v74 = (void *)sub_100022D14();
      v3[68] = v74;
      *uint64_t v74 = v3;
      v74[1] = sub_1000743AC;
      sub_100084104();
      __asm { BR              X0 }
    }

LABEL_46:
    sub_100072908();
    uint64_t v77 = v76;
    uint64_t v78 = *(void *)(((unint64_t)v76 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v78)
    {
      while (1)
      {
        uint64_t v79 = (uint64_t)(v3 + 29);
        sub_1000725D8((int64_t)v77);
        uint64_t v77 = (uint8_t *)v3[29];
        uint64_t v80 = sub_100021EB0();
        uint64_t v81 = sub_100085D70(v80);
        uint64_t v83 = v82;
        uint64_t v84 = sub_10000C1E0();
        uint64_t v360 = *((void *)v83 + 2);
        uint64_t v366 = (uint64_t)v83;
        uint64_t v315 = v3 + 28;
        uint64_t v326 = v81;
        if (!v360) {
          break;
        }
        uint64_t v271 = (uint64_t)(v3 + 26);
        uint64_t v282 = (uint64_t)(v3 + 23);
        uint64_t v345 = v3[51];
        uint64_t v353 = (uint64_t)(v3 + 14);
        uint64_t v293 = v3 + 27;
        uint64_t v304 = (uint64_t)(v3 + 17);
        uint64_t v337 = v3[47];
        sub_100005FB0(v3[35], 1LL, 1LL, v3[50]);
        sub_10000C030();
        sub_10000C20C();
        unint64_t v85 = 0LL;
        unint64_t v4 = (unint64_t)v389;
        while (v85 < *((void *)v83 + 2))
        {
          uint64_t v378 = v389[61];
          uint64_t v384 = v389[56];
          uint64_t v86 = v389[53];
          uint64_t v87 = v389[54];
          uint64_t v88 = v389[48];
          uint64_t v372 = v389[32] + v389[60];
          uint64_t v77 = (uint8_t *)*((void *)v83 + v85 + 4);
          uint64_t v89 = (uint64_t)&v77[OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState];
          sub_10002FFE4( (uint64_t)&v77[OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState],  v353);
          sub_10002F8E0(v89, v88, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          uint64_t v90 = v88 + *(int *)(v337 + 36);
          uint64_t v91 = (void (*)(uint64_t, uint64_t, void *))(v88 + *(int *)(v337 + 32));
          sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          sub_1000224B4();
          uint64_t v92 = sub_100085A7C();
          uint64_t v3 = (void *)v345;
          if ((sub_1000851A0(v92, v93) & 1) != 0) {
            uint64_t v94 = (uint64_t)v91;
          }
          else {
            uint64_t v94 = v90;
          }
          sub_100085C3C(v86, v94, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v345 + 16));
          sub_10002F90C(v88, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_100085BEC(*(double *)(v372 + *(int *)(v378 + 28)));
          uint64_t v95 = *(void (**)(uint64_t))(v345 + 8);
          uint64_t v96 = sub_100084F2C();
          v95(v96);
          char v97 = static Date.> infix(_:_:)(v87, v384);
          uint64_t v98 = sub_100021DDC();
          if ((v97 & 1) != 0)
          {
            uint64_t v86 = v389[51];
            uint64_t v154 = v389[35];
            uint64_t v155 = sub_100084ACC( v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v271,  v282,  (uint64_t)v293,  v304,  (uint64_t)v315,  v81,  v337,  v345,  v353,  v360,  v366);
            uint64_t v163 = sub_100084CFC(v155, v156, v157, v158, v159, v160, v161, v162, v274, v285, v296, v307, v318, v329);
            sub_100083DC8(v163, &qword_10010DAD0);
            sub_100084404(v154, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 32));
            sub_1000853C0();
LABEL_61:
            sub_1000843D4(v389[35]);
            sub_100085044();
            uint64_t v164 = (os_log_s *)v389[58];
            if ((_DWORD)v86 == 1)
            {
              sub_10000BD20(v326);
              uint64_t v165 = sub_10000BD20(v366);
              Logger.logObject.getter(v165);
              os_log_type_t v166 = sub_10003CEEC();
              BOOL v167 = sub_100083B48(v164);
              uint64_t v380 = v389[50];
              uint64_t v386 = v389[56];
              if (v167)
              {
                uint64_t v168 = (uint8_t *)sub_10000BCF4(12LL);
                uint64_t v169 = sub_10000BCF4(32LL);
                sub_100084308(v169);
                *(_DWORD *)uint64_t v168 = 136315138;
                uint64_t v170 = v326;
                sub_100083778();
                uint64_t v171 = v366;
                sub_1000224B4();
                uint64_t v172 = sub_100085EC4(v326);
                sub_100021DDC();
                sub_100030B98();
                sub_100083394(v172, v173, (uint64_t *)&v390);
                sub_100084D90( v174,  v293,  v271,  v282,  (uint64_t)v293,  v304,  (uint64_t)v315,  v326,  v337,  v345,  v353,  v360,  v366,  (uint64_t)(v168 + 4));
                sub_10000BCDC(v171);
                sub_10000BCDC(v170);
                sub_100007570();
                sub_100022210( (void *)&_mh_execute_header,  v164,  v166,  "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task",  v168);
                sub_100021F38((uint64_t)v389);
                sub_10000BCC4((uint64_t)v389);
                sub_10000BCC4((uint64_t)v168);
                sub_100021DDC();
                sub_100030B98();
              }

              else
              {
                sub_10008332C(v366);
                sub_10008332C(v326);
              }

              ((void (*)(uint64_t, uint64_t))v95)(v386, v380);
              uint64_t v3 = v389;
              ((void (*)(void, void))v95)(v389[55], v389[50]);
LABEL_71:
              uint64_t v209 = v3[35];
              sub_10002FFE4(v209, v304);
              sub_1000843D4(v209);
              sub_100084088();
LABEL_78:
              sub_100085484();
              uint64_t v374 = v3[38];
              uint64_t v381 = v3[35];
              uint64_t v388 = v3[34];
              swift_bridgeObjectRelease(v3[29]);
              sub_10002FF04();
              sub_10002FF48();
              sub_100030494();
              sub_100030500();
              sub_100030760();
              sub_10000C140();
              sub_10002294C();
              sub_10000BFE4();
              uint64_t v214 = sub_10000C1B8();
              uint64_t v222 = sub_100084C94( v214,  v215,  v216,  v217,  v218,  v219,  v220,  v221,  v271,  v282,  (uint64_t)v293,  v304,  (uint64_t)v315,  v326,  v337,  v345);
              uint64_t v230 = sub_100084474( v222,  v223,  v224,  v225,  v226,  v227,  v228,  v229,  v276,  v287,  v298,  v309,  v320,  v331,  v339,  v347,  v353);
              uint64_t v238 = sub_100083F18( v230,  v231,  v232,  v233,  v234,  v235,  v236,  v237,  v277,  v288,  v299,  v310,  v321,  v332,  v340,  v348,  v355,  v360);
              uint64_t v246 = sub_100083C14( v238,  v239,  v240,  v241,  v242,  v243,  v244,  v245,  v278,  v289,  v300,  v311,  v322,  v333,  v341,  v349,  v356,  v362,  v366);
              uint64_t v254 = sub_100083D58( v246,  v247,  v248,  v249,  v250,  v251,  v252,  v253,  v279,  v290,  v301,  v312,  v323,  v334,  v342,  v350,  v357,  v363,  v368,  v374);
              uint64_t v262 = sub_100083D50( v254,  v255,  v256,  v257,  v258,  v259,  v260,  v261,  v280,  v291,  v302,  v313,  v324,  v335,  v343,  v351,  v358,  v364,  v369,  v375,  v381);
              sub_100083DD0( v262,  v263,  v264,  v265,  v266,  v267,  v268,  v269,  v281,  v292,  v303,  v314,  v325,  v336,  v344,  v352,  v359,  v365,  v370,  v376,  v382,  v388);
              sub_100083A80();
              sub_100084104();
              __asm { BR              X0 }
            }

            uint64_t v175 = v389[56];
            uint64_t v176 = v389[52];
            uint64_t v177 = (void *)v389[50];
            uint64_t v178 = *(void *)(v389[57] - 8LL);
            uint64_t v179 = sub_100021CF0(*(void *)(v178 + 64));
            uint64_t v387 = v178;
            sub_100084404(v179, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v178 + 16));
            v91(v176, v175, v177);
            sub_1000228BC();
            os_log_type_t v180 = sub_100085AAC();
            if (!sub_100085C0C(v180))
            {

              uint64_t v198 = sub_1000848B4();
              uint64_t v190 = ((uint64_t (*)(uint64_t))v95)(v198);
              goto LABEL_70;
            }

            uint64_t v181 = v389[35];
            uint64_t v182 = v389[33];
            uint64_t v183 = (uint8_t *)sub_10000BCF4(12LL);
            *(_DWORD *)uint64_t v183 = 134217984;
            uint64_t v184 = sub_10002FFE4(v181, v282);
            sub_1000845D0(v184, v185, &qword_10010DAD0);
            sub_100083334(v182);
            if (!v38)
            {
              uint64_t v186 = v389[52];
              uint64_t v187 = v389[33];
              sub_100085914();
              uint64_t v189 = v188;
              sub_100084B7C(v187);
              v389[26] = v189;
              sub_100085D08(v271, (uint64_t)v293);
              sub_100084B7C(v186);
              sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v177,  v180,  "Additional assets need transitioning, next task wake in %f seconds",  v183);
              sub_10000BCC4((uint64_t)v183);

LABEL_70:
              uint64_t v199 = sub_100084ACC( v190,  v191,  v192,  v193,  v194,  v195,  v196,  v197,  v271,  v282,  (uint64_t)v293,  v304,  (uint64_t)v315,  v326,  v337,  v345,  v353,  v360,  v366);
              sub_100084CFC(v199, v200, v201, v202, v203, v204, v205, v206, v275, v286, v297, v308, v319, v330);
              uint64_t v3 = v389;
              sub_1000307BC(v387);
              uint64_t v207 = sub_1000307DC();
              v95(v207);
              uint64_t v208 = sub_1000854B4();
              v95(v208);
              sub_10002FF04();
              goto LABEL_71;
            }

            sub_10002F99C(v389[35], &qword_10010DAD0);
            __break(1u);
            return;
          }

          ++v85;
          ((void (*)(void, void))v95)(v389[54], v389[50]);
          uint64_t v83 = (os_log_s *)v366;
          if (v360 == v85)
          {
            uint64_t v106 = sub_100030B78();
            sub_100084CFC( v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v271,  v282,  (uint64_t)v293,  v304,  (uint64_t)v315,  v81);
            goto LABEL_61;
          }
        }

        __break(1u);
LABEL_73:
        sub_100021EB0();
        uint64_t v78 = sub_100085AA4();
        sub_10000C1E0();
        if (!v78) {
          goto LABEL_74;
        }
      }

      Logger.logObject.getter(v84);
      sub_100084270();
      uint64_t v114 = sub_100084C10(v83);
      uint64_t v373 = v3[51];
      uint64_t v379 = v3[50];
      uint64_t v385 = v3[56];
      if ((_DWORD)v114)
      {
        uint64_t v122 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v123 = sub_10000BCF4(32LL);
        sub_100084308(v123);
        *(_DWORD *)uint64_t v122 = 136315138;
        sub_10002FFE4(v79, (uint64_t)(v389 + 20));
        uint64_t v124 = sub_100022DB0();
        sub_100048A38(&qword_10010B908, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000D9EEC);
        uint64_t v126 = v125;
        uint64_t v127 = sub_100022418();
        Set.description.getter(v127, v124, v126);
        sub_10000C1E8();
        sub_100085730();
        os_log_type_t v129 = sub_100030AF0(v128, v315);
        sub_1000851D8((uint64_t)v129, v79, (uint64_t)(v122 + 4));
        sub_100022D34();
        sub_100085CFC();
        sub_100022210(v130, v131, v132, v133, v122);
        sub_100021F38(v4);
        sub_10000BCC4(v4);
        uint64_t v114 = sub_10000BCC4((uint64_t)v122);
      }

      sub_100084ACC( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v271,  v282,  (uint64_t)v293,  v304,  (uint64_t)v315,  v326,  v337,  v345,  v353,  0LL,  (uint64_t)v83);

      uint64_t v142 = sub_100084CFC(v134, v135, v136, v137, v138, v139, v140, v141, v272, v283, v294, v305, v316, v327);
      sub_1000856FC( v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v273,  v284,  v295,  v306,  v317,  v328,  v338,  v346,  v354,  v361,  v367,  v373,  v379,  v385);
      uint64_t v3 = v389;
      sub_100085D60(v389[55]);
      sub_1000839EC();
    }

    else
    {
LABEL_74:
      uint64_t v210 = (os_log_s *)v3[58];
      uint64_t v211 = sub_10000C1E0();
      Logger.logObject.getter(v211);
      os_log_type_t v212 = sub_100022604();
      if (sub_1000836BC(v212))
      {
        uint64_t v213 = (_WORD *)sub_10000BCF4(2LL);
        sub_100085448(v213);
        sub_1000495CC( (void *)&_mh_execute_header,  v210,  (os_log_type_t)v78,  "No more assets need to be transitioned",  v77);
        sub_10000BCC4((uint64_t)v77);
      }

      sub_10008551C();
      sub_100085FEC();
      uint64_t v150 = sub_100085FBC();
    }

    sub_100005FB0(v150, v151, v152, v153);
    goto LABEL_78;
  }

  sub_100022944();
  uint64_t v42 = sub_100085AA4();
  sub_10000BD28();
  if (!v42) {
    goto LABEL_41;
  }
LABEL_30:
  *((_DWORD *)v3 + 13sub_100006F7C(v0 + 8) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.policyChangeBackgroundSession(_:);
  *((_DWORD *)v3 + 139) = enum case for LoadState.loaded(_:);
  uint64_t v43 = v42 - 1;
  v3[63] = v42 - 1;
  if (__OFSUB__(v42, 1LL))
  {
    __break(1u);
    goto LABEL_46;
  }

  unint64_t v44 = v3[62] & 0xC000000000000001LL;
  uint64_t v45 = sub_10008314C();
  uint64_t v46 = v3[62];
  if (v44)
  {
    uint64_t v47 = sub_1000837CC(v45, v46);
  }

  else
  {
    uint64_t v47 = *(void *)(v46 + 8 * v43 + 32);
    sub_1000224B4();
  }

  v3[64] = v47;
  if (*(_BYTE *)(v3[32] + v3[59]) == 1)
  {
    uint64_t v48 = v3[41];
    sub_100030768(v3[43]);
    uint64_t v49 = sub_100030CC0();
    sub_10002FF3C(v48, v50, v51, v49);
    unint64_t v52 = (void *)swift_task_alloc(dword_10010D694);
    v3[65] = v52;
    *unint64_t v52 = v3;
    v52[1] = sub_100074228;
  }

  else
  {
    uint64_t v53 = v3[42];
    uint64_t v54 = *(void (**)(void, uint64_t, uint64_t))(v3[43] + 104LL);
    uint64_t v55 = *((unsigned int *)v3 + 138);
    if (*(_BYTE *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
    {
      v54(v3[45], v55, v53);
      __int128 v56 = (void *)swift_task_alloc(dword_10010D684);
      v3[66] = v56;
      *__int128 v56 = v3;
      v56[1] = sub_1000742B4;
      sub_100083690();
      sub_100084104();
      sub_10006467C(v57, v58, v59);
      return;
    }

    uint64_t v60 = v3[40];
    v54(v3[44], v55, v53);
    uint64_t v61 = sub_100030CC0();
    sub_10002FF3C(v60, v62, v63, v61);
    char v64 = (void *)swift_task_alloc(dword_10010D694);
    v3[67] = v64;
    *char v64 = v3;
    v64[1] = sub_100074320;
  }

  sub_1000226A4();
  sub_100084104();
  sub_10006A2C8(v65, v66, v67);
}

      sub_10009D00C();

      uint64_t v2 = 1LL;
      return (id)sub_10009CF8C(v2, *(uint64_t (**)(void))(v0 + 8));
    }

    *(void *)(v0 + 4sub_100016BD0(0, v0, 0) = &type metadata for ModelManager;
    uint64_t v40 = sub_10006D648();
    sub_10009D128(v40);
    sub_10009D150();
    if ((v6 & 1) == 0)
    {
      if (qword_10010B0F0 != -1) {
        swift_once(&qword_10010B0F0, sub_10009BB48);
      }
      uint64_t v58 = sub_10000BF6C();
      char v59 = sub_10009CEE4(v58, (uint64_t)qword_10010E438);
      uint64_t v6 = Logger.logObject.getter(v59);
      uint64_t v60 = static os_log_type_t.fault.getter();
      if (!sub_100084B90(v60))
      {
        sub_10009D00C();
        goto LABEL_8;
      }

      uint64_t v61 = *(_DWORD *)(v0 + 336);
      uint64_t v62 = sub_10000BCF4(18LL);
      uint64_t v71 = sub_10000BCF4(32LL);
      *(_DWORD *)uint64_t v62 = 67109378;
      *(_DWORD *)(v0 + swift_endAccess(v0 + 16) = v61;
      sub_10009CEFC(v71, v63, v62 + 4);
      *(_WORD *)(v62 + sub_100006F7C(v0 + 8) = 2080;
      char v64 = sub_1000225A4();
      sub_10009CED4(v64, v65);
      sub_10009D018(v66);
      sub_10009CF80();
      sub_10009D0B0( (void *)&_mh_execute_header,  v67,  v68,  "disallowed pid %d with executable path to hold assertions %s");
      sub_10009D000();
      sub_10000BCC4(v71);
      uint64_t v12 = v62;
LABEL_7:
      sub_10000BCC4(v12);
LABEL_8:

      uint64_t v2 = 0LL;
      return (id)sub_10009CF8C(v2, *(uint64_t (**)(void))(v0 + 8));
    }

    if (qword_10010B0F0 == -1)
    {
LABEL_44:
      unint64_t v41 = sub_10000BF6C();
      uint64_t v42 = sub_10009CEE4(v41, (uint64_t)qword_10010E438);
      Logger.logObject.getter(v42);
      uint64_t v43 = sub_100022604();
      if (sub_100084B90(v43))
      {
        unint64_t v44 = (_DWORD *)sub_10000BCF4(12LL);
        uint64_t v45 = sub_10000BCF4(32LL);
        *unint64_t v44 = 136315138;
        uint64_t v46 = sub_1000225A4();
        sub_10009CED4(v46, v47);
        sub_10009D030(v48, v49, v50, v51, v52, v53, v54, v55, v69, (uint64_t)(v44 + 1));
        sub_10009CF80();
        sub_10009D0C4( (void *)&_mh_execute_header,  v56,  v57,  "Allowlist Blocked: Allowing typically blocked executablePath %s");
        uint64_t v2 = 1LL;
        sub_10009D000();
        sub_10000BCC4(v45);
        sub_10000BCC4((uint64_t)v44);

        return (id)sub_10009CF8C(v2, *(uint64_t (**)(void))(v0 + 8));
      }

      goto LABEL_46;
    }

  sub_100084DC8();
}

uint64_t sub_100074228()
{
  uint64_t v3 = sub_10000BE20(*(void *)(v1 + 520), v2);
  if (v0) {
    uint64_t v3 = sub_100022D04();
  }
  sub_10008373C(v3, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_1000742B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (void *)*v17;
  sub_10000BE20(a14[66], &a14);
  if (v16) {
    sub_100022D04();
  }
  sub_10008344C();
  sub_10000C0D4();
  return sub_1000830E0(v20, v21, v22);
}

uint64_t sub_100074320()
{
  uint64_t v3 = sub_10000BE20(*(void *)(v1 + 536), v2);
  if (v0) {
    uint64_t v3 = sub_100022D04();
  }
  sub_10008373C(v3, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v4, v5, v6);
}

uint64_t sub_1000743AC()
{
  return sub_10000BD98();
}

void sub_1000743E8()
{
  uint64_t v2 = v0;
  sub_100072908();
  uint64_t v4 = v3;
  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_30:
    os_log_type_t v129 = (void *)v2[58];
    uint64_t v130 = sub_100022B4C();
    Logger.logObject.getter(v130);
    os_log_type_t v131 = sub_100022604();
    if (sub_10002275C(v131))
    {
      os_log_type_t v132 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v132);
      sub_10003F1B4((void *)&_mh_execute_header, v133, v134, "No more assets need to be transitioned");
      sub_10000BCC4(v4);
    }

    uint64_t v135 = v2[56];

    sub_100083670(v135);
    sub_1000834D4();
    uint64_t v119 = sub_100083AC8();
LABEL_33:
    sub_100005FB0(v119, v120, v121, v122);
LABEL_34:
    sub_100083BA4();
    sub_10002FF48();
    sub_100030494();
    sub_10002FF04();
    sub_100030760();
    sub_10000C140();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    uint64_t v136 = sub_100030500();
    uint64_t v144 = sub_100083F18( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v184,  v192,  v200,  v208,  (uint64_t)v216,  v224,  v232,  (uint64_t)v241,  v247,  v253);
    uint64_t v152 = sub_100083C14( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v187,  v195,  v203,  v211,  v219,  v227,  v236,  v242,  v248,  v254,  v259);
    uint64_t v160 = sub_100083D58( v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v188,  v196,  v204,  v212,  v220,  v228,  v237,  v243,  v249,  v255,  v260,  v264);
    uint64_t v168 = sub_100083D50( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v189,  v197,  v205,  v213,  v221,  v229,  v238,  v244,  v250,  v256,  v261,  v266,  v269);
    uint64_t v176 = sub_100083DD0( v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v190,  v198,  v206,  v214,  v222,  v230,  v239,  v245,  v251,  v257,  v262,  v267,  v271,  (uint64_t)v273);
    sub_1000846A4( v176,  v177,  v178,  v179,  v180,  v181,  v182,  v183,  v191,  v199,  v207,  v215,  v223,  v231,  v240,  v246,  v252,  v258,  v263,  v268,  v272,  v274,  v275);
    swift_task_dealloc(v276);
    sub_100083A80();
    sub_100083F78((uint64_t (*)(void))v2[1]);
    return;
  }

void sub_100074BC8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v2 = *(unsigned int *)(v0 + 556);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 512) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002FFE4(v6, v0 + 88);
  sub_100083B50(v3, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_100083B50(v4, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 104));
  sub_10003D238();
  LOBYTE(sub_10000BE20(*(void *)(v0 + 88), v2) = sub_1000BC4C4();
  sub_100083680(v4);
  sub_100083680(v3);
  if ((v2 & 1) != 0)
  {
    sub_100017AAC(&v337, *(void *)(v0 + 512));
    uint64_t v7 = v337;
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 512);
  }

  swift_release(v7);
  uint64_t v10 = *(void *)(v0 + 504);
  if (!v10)
  {
    uint64_t v35 = *(void **)(v0 + 464);
    uint64_t v36 = swift_bridgeObjectRelease(*(void *)(v0 + 496));
    Logger.logObject.getter(v36);
    os_log_type_t v37 = sub_100022604();
    if (sub_10002275C(v37))
    {
      uint64_t v38 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v38);
      sub_10003F1B4((void *)&_mh_execute_header, v39, v40, "Finished transitioning assets");
      sub_10000BCC4(v4);
    }

    uint64_t v41 = *(void *)(v0 + 472);
    uint64_t v42 = *(void *)(v0 + 256);

    if (*(_BYTE *)(v42 + v41) == 1)
    {
      sub_1000850A0(*(void *)(v0 + 256), &dword_10010B8D8);
      uint64_t v43 = (void *)sub_100022D14();
      *(void *)(v0 + 544) = v43;
      void *v43 = v0;
      v43[1] = sub_1000743AC;
      sub_100084E20();
      __asm { BR              X0 }
    }

void sub_1000755E8()
{
  uint64_t v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask);
  if (v2)
  {
    uint64_t v3 = swift_retain();
    char isCancelled = swift_task_isCancelled(v3);
    swift_release(v2);
    uint64_t v5 = *(void *)(v0 + v1);
    *(void *)(v0 + vsub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = 0LL;
    swift_release(v5);
    if ((isCancelled & 1) == 0)
    {
      sub_10007566C((uint64_t (*)(uint64_t))sub_100072908, sub_100082158);
      if ((v6 & 1) != 0) {
        sub_1000639C0();
      }
    }
  }

  else
  {
    __break(1u);
  }

void sub_10007566C(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t *))
{
  uint64_t v8 = static Date.now.getter();
  unint64_t v9 = a1(v8);
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  uint64_t v10 = (uint64_t)sub_10006D824(a2, v11, v9);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 >= 0) {
      v10 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    _CocoaArrayWrapper.endIndex.getter(v10);
  }

  sub_10000BD28();
  sub_100030250(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1000496F8();
}

uint64_t sub_100075720(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  __chkstk_darwin(v4);
  char v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v14, v29, 0LL, 0LL);
  sub_10002F8E0(v14, (uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v16 = *(int *)(v4 + 32);
  uint64_t v15 = *(int *)(v4 + 36);
  uint64_t v27 = v4;
  uint64_t v17 = &v6[v15];
  uint64_t v18 = &v6[v16];
  sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v20 = v19;
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v18, v17, v7, v19) & 1) != 0) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = v17;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v21, v7);
  sub_10002F90C((uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  static Date.+ infix(_:_:)(v11, 30.0);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v11, v7);
  char v23 = dispatch thunk of static Comparable.< infix(_:_:)(v13, v28, v7, v20);
  v22(v13, v7);
  if ((v23 & 1) != 0) {
    char v24 = *(_BYTE *)(v14 + *(int *)(v27 + 24)) ^ 1;
  }
  else {
    char v24 = 1;
  }
  return v24 & 1;
}

uint64_t sub_100075910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock(0LL);
  void v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[13] = v6;
  v4[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[16] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  uint64_t v10 = sub_100003B20(&qword_10010DAD0);
  v4[19] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  v4[20] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[21] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v13);
  v4[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_100075A04, 0LL, 0LL);
}

uint64_t sub_100075A04()
{
  *(void *)(v2 + 19sub_10003318C(v0 + 2) = sub_10004965C((uint64_t)"Unload Assets For Version Change", 32LL);
  sub_10002FFE4(v1, v0);
  uint64_t v3 = sub_1000838E8();
  *(void *)(v2 + 20sub_100016BD0(0, v0, 0) = v3;
  if (v3)
  {
    uint64_t v4 = swift_task_alloc(dword_10010DB14);
    uint64_t v5 = (void *)sub_100084648(v4);
    uint64_t v6 = sub_100083918(v5);
    return sub_100083858(v6);
  }

  else
  {
    uint64_t v8 = sub_1000832A0();
    sub_10002F99C(v8, &qword_10010DAD0);
    sub_10002FFE4(*(void *)(v2 + 88) + 16LL, v2 + 40);
    uint64_t v9 = sub_10008601C();
    *(void *)(v2 + 24sub_100016BD0(0, v0, 0) = v9;
    if (v9)
    {
      uint64_t v10 = (void *)swift_task_alloc(dword_10010DB1C);
      *(void *)(v2 + 24sub_100006F7C(v0 + 8) = v10;
      sub_100023C84(v10, (uint64_t)sub_100075F68);
      return sub_100083870();
    }

    else
    {
      if (qword_10010B0C0 != -1) {
        swift_once(&qword_10010B0C0, sub_1000529A4);
      }
      uint64_t v11 = sub_10000BF6C();
      sub_10003CE68(v11, (uint64_t)qword_10010D590);
      os_log_type_t v12 = sub_100022604();
      if (sub_10002275C(v12))
      {
        unint64_t v13 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v13);
        sub_10003F1B4( (void *)&_mh_execute_header,  v14,  v15,  "Ending task to unload assets due to pending version change");
        sub_10000BCC4(v1);
      }

      sub_100082D38();
      sub_100083A90();
      sub_100021DDC();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      return sub_100082D20(*(uint64_t (**)(void))(v2 + 8));
    }
  }

uint64_t sub_100075B70()
{
  return sub_10000BD98();
}

uint64_t sub_100075BB0()
{
  uint64_t v2 = sub_10008483C();
  if (v3)
  {
    sub_10003096C(v2, &qword_10010DAD0);
    sub_10002FFE4(*(void *)(v1 + 88) + 16LL, v1 + 40);
    uint64_t v4 = sub_10008462C();
    *(void *)(v1 + 24sub_100016BD0(0, v0, 0) = v4;
    if (v4)
    {
      uint64_t v5 = (void *)swift_task_alloc(dword_10010DB1C);
      *(void *)(v1 + 24sub_100006F7C(v0 + 8) = v5;
      sub_100023C84(v5, (uint64_t)sub_100075F68);
      return sub_100078DC4();
    }

    else
    {
      if (qword_10010B0C0 != -1) {
        swift_once(&qword_10010B0C0, sub_1000529A4);
      }
      uint64_t v8 = sub_10000BF6C();
      sub_10003CE68(v8, (uint64_t)qword_10010D590);
      os_log_type_t v9 = sub_100022604();
      if (sub_10002275C(v9))
      {
        uint64_t v10 = (_WORD *)sub_10000BCF4(2LL);
        sub_1000497E8(v10);
        sub_10003F1B4( (void *)&_mh_execute_header,  v11,  v12,  "Ending task to unload assets due to pending version change");
        sub_10000BCC4(v0);
      }

      sub_100082D38();
      sub_100083A90();
      sub_100021DDC();
      sub_10000C1B8();
      sub_10002294C();
      sub_10002FF04();
      sub_10002FF48();
      sub_100030494();
      sub_100030500();
      return sub_1000835E0(*(uint64_t (**)(void))(v1 + 8));
    }
  }

  else
  {
    sub_100083158( *(void *)(v1 + 184),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 168) + 32LL));
    sub_100085B74();
    sub_100085E08();
    sub_1000853B4();
    sub_100083F20();
    sub_100085E48();
    sub_1000852D0();
    sub_100084394();
    sub_100084410((__n128)xmmword_1000D9BB0);
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(void *)(v1 + 23sub_10003318C(v0 + 2) = v6;
    sub_100048A38( &qword_10010DAE0,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
    *uint64_t v6 = v1;
    v6[1] = sub_100075D9C;
    sub_100083998();
    return sub_100083604();
  }

uint64_t sub_100075D9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = v19;
  uint64_t v22 = (void *)*v19;
  a16 = v22;
  sub_10000BE20(v22[29], &a16);
  if (v18)
  {
    uint64_t v23 = v22[18];
    sub_100022D04();
    sub_100083908();
    sub_100084518(v23);
  }

  else
  {
    sub_100083FC4();
    sub_100085470();
  }

  sub_10003CE0C();
  return sub_100083164(v24, v25, v26);
}

uint64_t sub_100075E18()
{
  uint64_t v1 = sub_1000839D4();
  sub_10008376C();
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = sub_1000838E8();
    *(void *)(v0 + 20sub_100016BD0(0, v0, 0) = v2;
    if (v2)
    {
      uint64_t v3 = swift_task_alloc(dword_10010DB14);
      uint64_t v4 = (void *)sub_100084648(v3);
      uint64_t v5 = sub_100083918(v4);
      return sub_100083858(v5);
    }

    uint64_t v7 = sub_1000832A0();
    sub_10002F99C(v7, &qword_10010DAD0);
  }

  sub_10002FFE4(*(void *)(v0 + 88) + 16LL, v0 + 40);
  uint64_t v8 = sub_10008462C();
  *(void *)(v0 + 24sub_100016BD0(0, v0, 0) = v8;
  if (v8)
  {
    os_log_type_t v9 = (void *)swift_task_alloc(dword_10010DB1C);
    *(void *)(v0 + 24sub_100006F7C(v0 + 8) = v9;
    sub_100023C84(v9, (uint64_t)sub_100075F68);
    return sub_100083870();
  }

  else
  {
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v10 = sub_10000BF6C();
    sub_10003CE68(v10, (uint64_t)qword_10010D590);
    os_log_type_t v11 = sub_100022604();
    if (sub_10002275C(v11))
    {
      uint64_t v12 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v12);
      sub_10003F1B4((void *)&_mh_execute_header, v13, v14, "Ending task to unload assets due to pending version change");
      sub_10000BCC4(v1);
    }

    sub_100082D38();
    sub_100083A90();
    sub_100021DDC();
    sub_10000C1B8();
    sub_10002294C();
    sub_10002FF04();
    sub_10002FF48();
    sub_100030494();
    sub_100030500();
    return sub_100082D20(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_100075F68()
{
  return sub_10000BD98();
}

uint64_t sub_100075FA0()
{
  if (qword_10010B0C0 != -1) {
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }
  uint64_t v2 = sub_10000BF6C();
  sub_10003CE68(v2, (uint64_t)qword_10010D590);
  os_log_type_t v3 = sub_100022604();
  if (sub_10002275C(v3))
  {
    uint64_t v4 = (_WORD *)sub_10000BCF4(2LL);
    sub_1000497E8(v4);
    sub_10003F1B4((void *)&_mh_execute_header, v5, v6, "Ending task to unload assets due to pending version change");
    sub_10000BCC4(v0);
  }

  sub_100082D38();
  sub_100083A90();
  sub_100021DDC();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  sub_100030494();
  sub_100030500();
  return sub_100082D20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100076054(uint64_t a1)
{
  v2[37] = a1;
  v2[38] = v1;
  uint64_t v3 = sub_100003B20(&qword_10010DAD0);
  v2[39] = sub_10002FDFC(*(void *)(v3 - 8));
  v2[40] = sub_10002287C();
  v2[41] = sub_10002287C();
  uint64_t v4 = sub_100083B94();
  v2[42] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[43] = v5;
  v2[44] = sub_10002FDFC(v5);
  v2[45] = sub_10002287C();
  v2[46] = sub_10002287C();
  v2[47] = sub_10002287C();
  uint64_t v6 = sub_100003B20(&qword_10010DA40);
  v2[48] = sub_100021CC4(*(void *)(v6 - 8));
  uint64_t v7 = sub_1000837B4();
  v2[49] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[50] = v8;
  v2[51] = sub_100021CC4(v8);
  uint64_t v9 = sub_1000837BC();
  v2[52] = v9;
  v2[53] = sub_10002FDFC(*(void *)(v9 - 8));
  v2[54] = sub_10002287C();
  v2[55] = sub_10002287C();
  v2[56] = sub_10002287C();
  v2[57] = sub_10002287C();
  uint64_t v10 = sub_1000853A4();
  v2[58] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[59] = v11;
  v2[60] = sub_10002FDFC(v11);
  v2[61] = sub_10002287C();
  v2[62] = sub_10002287C();
  v2[63] = sub_10002287C();
  v2[64] = sub_10002287C();
  v2[65] = sub_10002287C();
  sub_100021C90();
  return sub_100021BCC(v12, v13, v14);
}

void sub_100076180()
{
  uint64_t v4 = v3;
  if (*(_BYTE *)(v3[38] + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) != 1)
  {
    if (qword_10010B0C0 != -1) {
      swift_once(&qword_10010B0C0, sub_1000529A4);
    }
    uint64_t v34 = sub_10000BF6C();
    sub_10003CE68(v34, (uint64_t)qword_10010D590);
    os_log_type_t v35 = sub_100022604();
    if (sub_1000836BC(v35))
    {
      uint64_t v36 = (_WORD *)sub_10000BCF4(2LL);
      sub_100085448(v36);
      sub_1000495CC( (void *)&_mh_execute_header,  v1,  (os_log_type_t)v3,  "While unloading assets for pending version change: version change is no longer pending, not unloading",  v0);
      sub_10000BCC4((uint64_t)v0);
    }

    uint64_t v37 = v3[58];

    sub_100085ED4();
    uint64_t v41 = v37;
LABEL_26:
    sub_100005FB0(v38, v39, v40, v41);
LABEL_27:
    uint64_t v406 = v4[53];
    uint64_t v422 = v4[51];
    sub_100085A98();
    uint64_t v436 = v43;
    uint64_t v449 = v42;
    sub_100085D98();
    uint64_t v461 = v45;
    uint64_t v469 = v44;
    sub_1000860B4();
    uint64_t v476 = v47;
    uint64_t v483 = v46;
    sub_100085504(v48);
    sub_100030494();
    sub_100030500();
    sub_100030760();
    sub_10000C140();
    sub_10002FF48();
    sub_10000BFE4();
    sub_10000C1B8();
    sub_10002294C();
    uint64_t v49 = sub_10002FF04();
    uint64_t v57 = sub_10008432C(v49, v50, v51, v52, v53, v54, v55, v56, v345, v357, v369, v381, (uint64_t)v393, v406);
    uint64_t v65 = sub_100084970(v57, v58, v59, v60, v61, v62, v63, v64, v346, v358, v370, v382, v394, v407, v422);
    uint64_t v73 = sub_100084C94(v65, v66, v67, v68, v69, v70, v71, v72, v347, v359, v371, v383, v395, v408, v423, v436);
    uint64_t v81 = sub_100084474(v73, v74, v75, v76, v77, v78, v79, v80, v348, v360, v372, v384, v396, v409, v424, v437, v449);
    uint64_t v89 = sub_100083F18( v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v349,  v361,  v373,  v385,  v397,  v410,  v425,  v438,  v450,  v461);
    uint64_t v97 = sub_100083C14( v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v350,  v362,  v374,  v386,  v398,  v411,  v426,  v439,  v451,  v462,  v469);
    uint64_t v105 = sub_100083D58( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v351,  v363,  v375,  v387,  v399,  v412,  v427,  v440,  v452,  v463,  v470,  v476);
    uint64_t v113 = sub_100083D50( v105,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v352,  v364,  v376,  v388,  v400,  v413,  v428,  v441,  v453,  v464,  v471,  v477,  v483);
    uint64_t v121 = sub_1000846A4( v113,  v114,  v115,  v116,  v117,  v118,  v119,  v120,  v353,  v365,  v377,  v389,  v401,  v414,  v429,  v442,  v454,  v465,  v472,  v478,  v484,  (uint64_t)v489,  v491);
    sub_100084D88( v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128,  v354,  v366,  v378,  v390,  v402,  v415,  v430,  v443,  v455,  v466,  v473,  v479,  v485,  v490,  v492,  v493);
    sub_100083FFC((uint64_t (*)(void))v4[1]);
    return;
  }

  if (qword_10010B0C0 != -1) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v5 = sub_10000BF6C();
    v4[66] = v5;
    v4[67] = sub_100003BA0(v5, (uint64_t)qword_10010D590);
    sub_10004E144();
    os_log_type_t v6 = sub_10000C160();
    if (sub_100083DF0((os_log_s *)v2))
    {
      uint64_t v7 = (_WORD *)sub_10000BCF4(2LL);
      sub_100085448(v7);
      sub_1000495CC((void *)&_mh_execute_header, (os_log_s *)v2, v6, "Unloading assets for pending version change", v0);
      sub_10000BCC4((uint64_t)v0);
    }

    uint64_t v8 = v4[65];
    uint64_t v0 = (uint8_t *)v4[64];

    uint64_t v405 = _swiftEmptySetSingleton;
    v4[34] = _swiftEmptySetSingleton;
    static Date.now.getter();
    static Date.- infix(_:_:)(v8, 30.0);
    sub_1000539D0();
    uint64_t v2 = v9;
    uint64_t v10 = sub_100083A64();
    *(void *)(v10 + swift_endAccess(v0 + 16) = v0;
    v495[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v11 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v11) {
      goto LABEL_35;
    }
LABEL_7:
    unint64_t v12 = 0LL;
    uint64_t v448 = v4[59];
    uint64_t v460 = (uint64_t)(v4 + 5);
    uint64_t v421 = v10;
    uint64_t v435 = v4[52];
    v489 = v4;
    uint64_t v491 = v2 & 0xC000000000000001LL;
    uint64_t v475 = v2;
    uint64_t v482 = v2 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v468 = v11;
    while (1)
    {
      if (v491)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v2);
      }

      else
      {
        if (v12 >= *(void *)(v482 + 16)) {
          goto LABEL_29;
        }
        uint64_t v13 = *(void *)(v2 + 8 * v12 + 32);
        sub_1000837AC();
      }

      unint64_t v14 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        break;
      }
      uint64_t v0 = (uint8_t *)v4[63];
      uint64_t v493 = v4[64];
      uint64_t v16 = v4[57];
      uint64_t v15 = v4[58];
      uint64_t v17 = v13 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      sub_10002FFE4(v13 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v460);
      sub_10002F8E0(v17, v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v18 = v16 + *(int *)(v435 + 36);
      uint64_t v19 = v16 + *(int *)(v435 + 32);
      sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v21 = v20;
      uint64_t v22 = sub_1000859F8();
      if ((dispatch thunk of static Comparable.>= infix(_:_:)(v22, v23, v15, v21) & 1) != 0) {
        uint64_t v24 = v19;
      }
      else {
        uint64_t v24 = v18;
      }
      sub_1000843A8((uint64_t)v0, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v448 + 16));
      sub_100085340();
      char v28 = dispatch thunk of static Comparable.< infix(_:_:)(v25, v26, v27, v21);
      uint64_t v29 = sub_100030C8C();
      v30(v29);
      sub_10002F90C(v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      if ((v28 & 1) != 0)
      {
        sub_1000308D8();
      }

      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v31);
        uint64_t v32 = *(void *)(v495[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v32);
        uint64_t v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v13);
        specialized ContiguousArray._endMutation()(v33);
      }

      uint64_t v2 = v475;
      ++v12;
      uint64_t v4 = v489;
      if (v14 == v468)
      {
        BOOL v129 = (void *)v495[0];
        goto LABEL_36;
      }
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once(&qword_10010B0C0, sub_1000529A4);
  }

  if (v2 < 0) {
    uint64_t v130 = v2;
  }
  else {
    uint64_t v130 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v130);
  if (v11) {
    goto LABEL_7;
  }
LABEL_35:
  BOOL v129 = _swiftEmptyArrayStorage;
LABEL_36:
  sub_100022B4C();
  sub_10002294C();
  sub_100011714((unint64_t)v129);
  unint64_t v132 = (unint64_t)sub_10006325C(v131);
  v4[68] = v132;
  sub_10000C1E8();
  if (v132 >> 62)
  {
    sub_100022944();
    uint64_t v133 = sub_100085AA4();
    sub_10000BD28();
  }

  else
  {
    uint64_t v133 = *(void *)((v132 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v133)
  {
    uint64_t v147 = (void *)v4[67];
    uint64_t v148 = swift_bridgeObjectRelease(v4[68]);
    Logger.logObject.getter(v148);
    os_log_type_t v149 = sub_100022604();
    if (sub_10002275C(v149))
    {
      os_log_type_t v150 = (_WORD *)sub_10000BCF4(2LL);
      sub_1000497E8(v150);
      sub_10003F1B4((void *)&_mh_execute_header, v151, v152, "Finished unloading assets for version change");
      sub_10000BCC4(v2);
    }

    uint64_t v153 = v4[38];

    sub_10002FFE4(v153 + 120, (uint64_t)(v4 + 11));
    uint64_t v154 = v4[38];
    if ((*(void *)(v153 + 120) & 0xC000000000000001LL) == 0)
    {
      sub_100084314();
      uint64_t v221 = sub_100022944();
      uint64_t v220 = sub_100083D00(v221, v154, (uint64_t)sub_100053ECC);
LABEL_84:
      uint64_t v222 = swift_bridgeObjectRetain(v220);
      uint64_t v223 = sub_1000CAF08(v222);
      sub_10000C1F0();
      v495[0] = (uint64_t)v223;
      sub_100083FA4(v495, (uint64_t (*)(uint64_t, uint64_t))sub_1000539CC);
      if (v2)
      {
        sub_100083FDC(v495[0]);
        return;
      }

      v489 = v4;
      sub_10000C1F0();
      uint64_t v169 = (uint64_t (*)(uint64_t))v495[0];
      if ((v495[0] & 0x8000000000000000LL) == 0 && (v495[0] & 0x4000000000000000LL) == 0)
      {
        if (!*(void *)(v495[0] + 16))
        {
LABEL_117:
          uint64_t v339 = (os_log_s *)v489[67];
          uint64_t v340 = v489[34];
          sub_100021DDC();
          uint64_t v341 = sub_10000C1E8();
          Logger.logObject.getter(v341);
          os_log_type_t v342 = sub_100022604();
          if (sub_1000836BC(v342))
          {
            uint64_t v343 = (_WORD *)sub_10000BCF4(2LL);
            sub_100085448(v343);
            sub_1000495CC( (void *)&_mh_execute_header,  v339,  (os_log_type_t)v340,  "While unloading assets for pending version change: no more assets can be unloaded, attempting version switch",  (uint8_t *)v169);
            sub_10000BCC4((uint64_t)v169);
          }

          sub_100085B54(&dword_10010B8D8);
          sub_100084314();
          uint64_t v344 = (void *)sub_100022D14();
          v489[73] = v344;
          *uint64_t v344 = v489;
          v344[1] = sub_100078018;
          sub_100083FFC((uint64_t (*)(void))v493);
          return;
        }

        goto LABEL_89;
      }

LABEL_116:
      uint64_t v337 = sub_1000224B4();
      uint64_t v338 = _CocoaArrayWrapper.endIndex.getter(v337);
      sub_100021DDC();
      if (!v338) {
        goto LABEL_117;
      }
LABEL_89:
      sub_1000725D8((int64_t)v169);
      uint64_t v456 = sub_1000803C8(v489[34], v224, v225);
      uint64_t v227 = v226;
      sub_10000BD28();
      uint64_t v491 = v227;
      uint64_t v486 = *(void *)(v227 + 16);
      if (v486)
      {
        uint64_t v393 = (char *)(v489 + 20);
        uint64_t v431 = (uint64_t)(v489 + 36);
        uint64_t v444 = (uint64_t)(v489 + 2);
        uint64_t v474 = v489[59];
        uint64_t v480 = (uint64_t)(v489 + 14);
        uint64_t v417 = (uint64_t)(v489 + 35);
        uint64_t v467 = v489[52];
        sub_10002FF3C(v489[41], v228, v229, v489[58]);
        uint64_t v230 = v227;
        sub_10000C0A0();
        swift_retain();
        unint64_t v231 = 0LL;
        uint64_t v169 = (uint64_t (*)(uint64_t))v489;
        while (1)
        {
          if (v231 >= *(void *)(v230 + 16)) {
            goto LABEL_115;
          }
          uint64_t v493 = v489[65];
          uint64_t v232 = v489[61];
          uint64_t v233 = v489[62];
          uint64_t v234 = v489[58];
          uint64_t v235 = v489[53];
          sub_10002FFE4( *(void *)(v230 + 8 * v231 + 32)
          + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,
            v480);
          uint64_t v236 = sub_1000845E4();
          sub_10002F8E0(v236, v237, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          uint64_t v238 = v235 + *(int *)(v467 + 36);
          uint64_t v239 = v235 + *(int *)(v467 + 32);
          sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v241 = v240;
          sub_10000C20C();
          uint64_t v242 = (dispatch thunk of static Comparable.>= infix(_:_:)(v239, v238, v234, v241) & 1) != 0 ? v239 : v238;
          uint64_t v243 = *(os_log_s **)(v474 + 16);
          ((void (*)(uint64_t, uint64_t, uint64_t))v243)(v232, v242, v234);
          sub_10002F90C(v235, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_100085BEC(30.0);
          uint64_t v244 = *(void (**)(uint64_t))(v474 + 8);
          uint64_t v245 = sub_100084F2C();
          v244(v245);
          char v246 = static Date.> infix(_:_:)(v233, v493);
          uint64_t v247 = sub_100030B78();
          if ((v246 & 1) != 0) {
            break;
          }
          ++v231;
          ((void (*)(void, void))v244)(v489[62], v489[58]);
          uint64_t v230 = v491;
          if (v486 == v231)
          {
            uint64_t v255 = sub_1000304F8();
            sub_100084AD4( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v345,  v357,  v369,  v381,  (uint64_t)v393,  v417,  v431,  v444,  v456);
            goto LABEL_101;
          }
        }

        uint64_t v232 = v489[59];
        uint64_t v272 = v489[41];
        uint64_t v273 = sub_100085558( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v345,  v357,  v369,  v381,  (uint64_t)v393,  v417,  v431,  v444,  v456,  v467,  v474,  v480,  v486,  (uint64_t)v489,  v491);
        uint64_t v281 = sub_100084AD4( v273,  v274,  v275,  v276,  v277,  v278,  v279,  v280,  v355,  v367,  v379,  v391,  v403,  v419,  v433,  v446,  v458);
        sub_100083DC8(v281, &qword_10010DAD0);
        sub_100084404(v272, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v232 + 32));
        sub_1000853C0();
LABEL_101:
        sub_1000843D4(v489[41]);
        sub_100085044();
        uint64_t v282 = (os_log_s *)v489[67];
        if ((_DWORD)v232 == 1)
        {
          sub_10000BD20(v491);
          uint64_t v283 = sub_10000BD20(v457);
          Logger.logObject.getter(v283);
          os_log_type_t v284 = sub_10003CEEC();
          BOOL v285 = sub_1000495A0(v282);
          uint64_t v493 = v489[65];
          uint64_t v488 = v489[58];
          if (v285)
          {
            uint64_t v286 = (uint8_t *)sub_10000BCF4(12LL);
            uint64_t v287 = sub_10000BCF4(32LL);
            v495[0] = v287;
            *(_DWORD *)uint64_t v286 = 136315138;
            sub_100021D80();
            uint64_t v288 = swift_retain();
            uint64_t v289 = sub_100081F28(v288, v491);
            sub_10000BF84();
            sub_1000228B4();
            sub_100083394(v289, v290, v495);
            uint64_t v299 = sub_100085D10( v291,  v292,  v293,  v294,  v295,  v296,  v297,  v298,  v345,  v357,  v369,  v381,  (uint64_t)v393,  v418);
            sub_1000851D8((uint64_t)v299, v300, v301);
            sub_10000BCDC(v491);
            sub_10000BCDC(v457);
            sub_100007570();
            sub_100022210( (void *)&_mh_execute_header,  v282,  v284,  "While unloading assets for pending version change: remaining candidates %s generated task wake times in th e past.  Ending task",  v286);
            sub_100021F38(v287);
            sub_10000BCC4(v287);
            sub_10000BCC4((uint64_t)v286);
            sub_10000BF84();
            sub_1000228B4();
          }

          else
          {
            sub_10008332C(v491);
            sub_10008332C(v457);
          }

          ((void (*)(uint64_t, uint64_t))v244)(v493, v488);
          ((void (*)(void, void))v244)(v489[64], v489[58]);
        }

        else
        {
          uint64_t v302 = v489[65];
          uint64_t v303 = v489[60];
          uint64_t v304 = v489[58];
          uint64_t v305 = *(void *)(v489[66] - 8LL);
          uint64_t v306 = sub_100021CF0(*(void *)(v305 + 64));
          uint64_t v493 = v305;
          sub_100084404(v306, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v305 + 16));
          ((void (*)(uint64_t, uint64_t, uint64_t))v243)(v303, v302, v304);
          sub_10003D390();
          os_log_type_t v307 = sub_100085214();
          if (os_log_type_enabled(v243, v307))
          {
            uint64_t v308 = v489[41];
            uint64_t v309 = v489[39];
            uint64_t v310 = (uint8_t *)sub_10000BCF4(12LL);
            *(_DWORD *)uint64_t v310 = 134217984;
            uint64_t v311 = sub_10002FFE4(v308, (uint64_t)v393);
            sub_1000845D0(v311, v312, &qword_10010DAD0);
            sub_100083334(v309);
            if (v167)
            {
              sub_10002F99C(v489[41], &qword_10010DAD0);
              __break(1u);
              return;
            }

            sub_100085914();
            uint64_t v314 = v313;
            uint64_t v315 = sub_100085030();
            v244(v315);
            v489[36] = v314;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v432, v489 + 37);
            uint64_t v316 = sub_10003D238();
            v244(v316);
            sub_100022210( (void *)&_mh_execute_header,  v243,  v307,  "While unloading assets for pending version change: additional assets need unloading, next task wake in %f seconds",  v310);
            sub_10000BCC4((uint64_t)v310);
          }

          else
          {

            uint64_t v325 = sub_1000848B4();
            uint64_t v317 = ((uint64_t (*)(uint64_t))v244)(v325);
          }

          uint64_t v326 = sub_100085558( v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v345,  v357,  v369,  v381,  (uint64_t)v393,  (uint64_t)v418,  v432,  v445,  v457,  v467,  v474,  v480,  v486,  (uint64_t)v489,  v491);
          sub_100084AD4( v326,  v327,  v328,  v329,  v330,  v331,  v332,  v333,  v356,  v368,  v380,  v392,  v404,  v420,  v434,  v447,  v459);
          sub_10003D128(v305);
          uint64_t v334 = sub_1000307DC();
          v244(v334);
          uint64_t v335 = sub_1000854B4();
          v244(v335);
          sub_10002FF48();
        }

        uint64_t v4 = v489;
        uint64_t v336 = v489[41];
        sub_10002FFE4(v336, v445);
        sub_1000843D4(v336);
        sub_100084088();
        goto LABEL_27;
      }

      uint64_t v263 = (os_log_s *)v489[67];
      sub_10000BD20(v456);
      uint64_t v264 = sub_10000BD20(v227);
      Logger.logObject.getter(v264);
      os_log_type_t v265 = sub_100022604();
      BOOL v266 = sub_1000836BC(v265);
      uint64_t v493 = v489[65];
      uint64_t v481 = v489[59];
      uint64_t v487 = v489[58];
      if (v266)
      {
        uint64_t v267 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v268 = sub_10000BCF4(32LL);
        v495[0] = v268;
        *(_DWORD *)uint64_t v267 = 136315138;
        sub_1000837AC();
        sub_1000224B4();
        uint64_t v269 = sub_100085EC4(v456);
        sub_100021DDC();
        sub_1000308D8();
        sub_1000845DC(v269, v270, v495);
        v489[33] = v271;
        sub_100084490((uint64_t)(v489 + 33), (uint64_t)(v489 + 34), (uint64_t)(v267 + 4));
        sub_10000BCDC(v227);
        sub_10000BCDC(v456);
        sub_1000228C4();
        sub_100022210( (void *)&_mh_execute_header,  v263,  (os_log_type_t)v227,  "While unloading assets for pending version change: all remaining assets failed to unload, %s",  v267);
        sub_100021F38(v268);
        sub_10000BCC4(v268);
        sub_10000BCC4((uint64_t)v267);
        sub_100021DDC();
        sub_1000308D8();
      }

      else
      {
        sub_10008332C(v227);
        sub_10008332C(v456);
      }

      (*(void (**)(uint64_t, uint64_t))(v481 + 8))(v493, v487);
      uint64_t v4 = v489;
      sub_100085D60(v489[64]);
      sub_1000839EC();
      goto LABEL_26;
    }

    v494 = _swiftEmptySetSingleton;
    sub_10000BD20(v154);
    sub_100022944();
    uint64_t v491 = sub_100085FE4();
    uint64_t v155 = sub_1000838E0();
    if (!v155) {
      goto LABEL_82;
    }
    uint64_t v156 = v155;
    uint64_t v157 = (uint64_t)(v4 + 17);
    uint64_t v468 = (uint64_t)(v4 + 27);
    uint64_t v475 = (uint64_t)(v4 + 25);
    uint64_t v493 = v4[52];
    uint64_t v158 = v4[43];
    uint64_t v357 = (uint64_t)(v4 + 29);
    uint64_t v369 = (uint64_t)(v4 + 23);
    uint64_t v460 = (uint64_t)(v4 + 31);
    LODWORD(v44sub_100006F7C(v0 + 8) = enum case for LoadState.loaded(_:);
    uint64_t v159 = v4 + 32;
    uint64_t v421 = sub_100022DB0();
    uint64_t v405 = _swiftEmptySetSingleton;
    uint64_t v393 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v482 = (uint64_t)(v4 + 17);
    v489 = v4;
    uint64_t v435 = (uint64_t)(v4 + 32);
LABEL_50:
    uint64_t v160 = v4[45];
    uint64_t v161 = v4[42];
    v4[31] = v156;
    sub_100022CC0((uint64_t)v159, v460, (uint64_t)v393, v421);
    uint64_t v162 = v4[32] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10000BE64(v162, v157, 33LL);
    sub_100022218(v160, v448, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 104));
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_1000846C4(v161);
    sub_1000846C4(v161);
    uint64_t v163 = v4;
    uint64_t v164 = v4[27];
    uint64_t v165 = v4[28];
    uint64_t v166 = v163[25];
    BOOL v167 = v164 == v166 && v165 == v163[26];
    if (v167)
    {
      sub_10000C1B0(v165);
      uint64_t v186 = sub_1000859F8();
      uint64_t v169 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      sub_100083C6C(v186, v187);
      sub_1000850D4();
      uint64_t v4 = v489;
    }

    else
    {
      HIDWORD(v38sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = sub_100021EB8(v164, v165, v166, v163[26]);
      sub_100022024();
      sub_100022D34();
      uint64_t v168 = sub_1000859F8();
      uint64_t v169 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      sub_100083C6C(v168, v170);
      sub_1000850D4();
      uint64_t v4 = v489;
      if ((v381 & 0x100000000LL) == 0)
      {
        uint64_t v171 = v489[42];
        sub_1000846C4(v171);
        sub_1000846C4(v171);
        uint64_t v172 = v489[23];
        uint64_t v173 = v489[24];
        uint64_t v174 = v489[29];
        uint64_t v175 = v489[30];
        if (v172 != v174 || v173 != v175)
        {
          uint64_t v177 = v489[56];
          uint64_t v178 = v489[44];
          char v179 = sub_100021EB8(v172, v173, v174, v175);
          sub_10000BD28();
          sub_10000C1E8();
          uint64_t v180 = *(void (**)(uint64_t))(v158 + 8);
          sub_10008547C(v178);
          uint64_t v181 = v177;
          uint64_t v169 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
          sub_100083B84(v181);
          uint64_t v182 = sub_1000858EC();
          uint64_t v4 = v489;
          v180(v182);
          uint64_t v183 = sub_1000859F8();
          sub_100083C6C(v183, v184);
          if ((v179 & 1) == 0)
          {
            uint64_t v185 = v489[54];
            sub_100083B84(v489[55]);
            sub_100083C6C(v162, v185);
            uint64_t v159 = (void *)v435;
LABEL_64:
            sub_100083B84(v4[54]);
            uint64_t v157 = v482;
            sub_100083734();
LABEL_66:
            swift_release(*v159);
            goto LABEL_67;
          }

uint64_t sub_1000772B0()
{
  *(void *)(v1 + 576) = v0;
  uint64_t v4 = swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100022D04();
  }
  sub_10008373C(v4, &qword_10010DA40);
  sub_100082D50();
  sub_100084888();
  return sub_100021BCC(v5, v6, v7);
}

#error "1000773CC: call analysis failed (funcsize=793)"
uint64_t sub_100078018()
{
  uint64_t v0;
  sub_10000BDE4();
  sub_10000BCE4(*(void *)(v0 + 584));
  sub_100021E70();
  sub_100021C90();
  return sub_10000BD98();
}

#error "1000780E0: call analysis failed (funcsize=51)"
void sub_100078120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  os_log_s *v109;
  uint64_t v110;
  os_log_type_t v111;
  BOOL v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  os_log_s *v130;
  uint64_t v131;
  os_log_type_t v132;
  BOOL v133;
  uint8_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  os_log_type_t v267;
  _WORD *v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t (*v432)(void);
  uint64_t v433;
  void *v434;
  uint64_t v435[11];
  uint64_t v2 = v0 + 272;
  uint64_t v3 = (os_log_s *)*(unsigned int *)(v0 + 596);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 560) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002FFE4(v7, v0 + 64);
  sub_1000834E0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  sub_1000834F0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 104));
  sub_100084BCC();
  sub_1000835CC();
  sub_100083680(v4);
  if ((v3 & 1) != 0)
  {
    uint64_t v3 = (os_log_s *)(v0 + 272);
    sub_100017AAC(v435, *(void *)(v0 + 560));
    uint64_t v8 = v435[0];
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 560);
  }

  swift_release(v8);
  uint64_t v11 = *(void *)(v0 + 552);
  if (v11)
  {
    unint64_t v12 = v11 - 1;
    *(void *)(v0 + 55sub_10003318C(v0 + 2) = v11 - 1;
    if (__OFSUB__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_47;
    }

    uint64_t v13 = sub_100082F94(v9, v10, *(void *)(v0 + 544));
    unint64_t v14 = *(void *)(v0 + 544);
    if (v0 == -272)
    {
      uint64_t v15 = *(void *)(v14 + 8 * v12 + 32);
      sub_100021D80();
    }

    else
    {
      uint64_t v15 = sub_1000837CC(v13, v14);
    }

    *(void *)(v0 + 56sub_100016BD0(0, v0, 0) = v15;
    uint64_t v16 = *(void *)(v0 + 384);
    sub_100030768(*(void *)(v0 + 400));
    uint64_t v17 = sub_100030CC0();
    sub_10002FF3C(v16, v18, v19, v17);
    uint64_t v20 = (void *)swift_task_alloc(dword_10010D694);
    *(void *)(v0 + 56sub_100006F7C(v0 + 8) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_1000772B0;
    uint64_t v21 = sub_100084094();
    sub_100083FAC(v21, v22, v23);
    return;
  }

  uint64_t v24 = sub_1000860E4();
  Logger.logObject.getter(v24);
  uint64_t v25 = sub_100022604();
  if (sub_1000495A0(v3))
  {
    uint64_t v5 = sub_10000BCF4(2LL);
    *(_WORD *)uint64_t v5 = 0;
    sub_1000495CC((void *)&_mh_execute_header, v3, v25, "Finished unloading assets for version change", (uint8_t *)v5);
    sub_10000BCC4(v5);
  }

  uint64_t v26 = *(void *)(v0 + 304);

  sub_10002FFE4(v26 + 120, v0 + 88);
  uint64_t v27 = *(void *)(v26 + 120);
  char v28 = *(void *)(v0 + 304);
  if ((v27 & 0xC000000000000001LL) != 0)
  {
    uint64_t v296 = _swiftEmptySetSingleton;
    uint64_t v434 = _swiftEmptySetSingleton;
    sub_10000BD20(v28);
    sub_100022944();
    uint64_t v405 = sub_100084F74();
    if (!sub_1000838E0()) {
      goto LABEL_47;
    }
    sub_1000859A0();
    uint64_t v386 = v29;
    uint64_t v396 = v30;
    uint64_t v272 = v0 + 232;
    os_log_type_t v284 = v31;
    uint64_t v373 = v0 + 248;
    uint64_t v429 = (void *)(v0 + 256);
    uint64_t v414 = *(void *)(v0 + 416);
    uint64_t v6 = *(void *)(v0 + 344);
    LODWORD(v359) = enum case for LoadState.loaded(_:);
    uint64_t v344 = sub_100022DB0();
    uint64_t v296 = _swiftEmptySetSingleton;
    uint64_t v320 = v7;
    uint64_t v332 = (void *)((char *)&type metadata for Swift.AnyObject + 8);
LABEL_15:
    uint64_t v32 = *(void *)(v0 + 360);
    *(void *)(v0 + 24sub_100006F7C(v0 + 8) = v27;
    sub_100022CC0((uint64_t)v429, v373, (uint64_t)v332, v344);
    uint64_t v33 = *(void *)(v0 + 256) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10000BE64(v33, v7, 33LL);
    sub_100083B50(v32, v359, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 104));
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v432 = (uint64_t (*)(void))v33;
    sub_10008327C();
    sub_10008327C();
    uint64_t v34 = *(void *)(v0 + 216);
    os_log_type_t v35 = *(void *)(v0 + 224);
    uint64_t v36 = v6;
    uint64_t v37 = *(void *)(v0 + 200);
    uint64_t v38 = *(void *)(v0 + 208);
    uint64_t v39 = *(void *)(v0 + 448);
    uint64_t v40 = *(void *)(v0 + 352);
    uint64_t v423 = *(void *)(v0 + 360);
    uint64_t v41 = v34 == v37 && v35 == v38;
    if (v41)
    {
      sub_10000C1B0(v35);
      sub_100083850((uint64_t)v432, v39);
      sub_1000225D4(v40, v423, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16));
      uint64_t v6 = v36;
    }

    else
    {
      LODWORD(v30sub_100006F7C(v0 + 8) = sub_100021EB8(v34, v35, v37, v38);
      sub_100007570();
      sub_100022024();
      sub_100083850((uint64_t)v432, v39);
      sub_1000225D4(v40, v423, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16));
      uint64_t v6 = v36;
      if ((v308 & 1) == 0)
      {
        sub_100085B98();
        sub_10008327C();
        sub_10008327C();
        uint64_t v42 = *(void *)(v0 + 184);
        uint64_t v43 = *(void *)(v0 + 192);
        uint64_t v44 = *(void *)(v0 + 232);
        uint64_t v45 = *(void *)(v0 + 240);
        if (v42 != v44 || v43 != v45)
        {
          uint64_t v47 = *(void *)(v0 + 448);
          uint64_t v423 = *(void *)(v0 + 440);
          uint64_t v48 = *(void *)(v0 + 352);
          uint64_t v308 = *(void *)(v0 + 360);
          uint64_t v49 = *(void *)(v0 + 336);
          uint64_t v5 = sub_100021EB8(v42, v43, v44, v45);
          sub_10000BD28();
          sub_100022B4C();
          uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
          v50(v48, v49);
          sub_10002F90C(v47, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v50(v308, v49);
          uint64_t v51 = (uint64_t)v432;
          sub_100083850((uint64_t)v432, v423);
          if ((v5 & 1) == 0)
          {
            uint64_t v52 = *(void *)(v0 + 432);
            sub_10008424C(*(void *)(v0 + 440));
            sub_100083850((uint64_t)v432, v52);
            uint64_t v7 = v320;
LABEL_30:
            sub_10008424C(*(void *)(v0 + 432));
            sub_100083734();
LABEL_32:
            swift_release(*v429);
            goto LABEL_33;
          }

LABEL_54:
  sub_1000725D8(v51);
  uint64_t v90 = sub_100084C18(v88, v89);
  uint64_t v92 = v91;
  sub_10000BD28();
  uint64_t v415 = *(void *)(v92 + 16);
  uint64_t v424 = v92;
  if (v415)
  {
    sub_100086064();
    uint64_t v345 = v93;
    uint64_t v360 = v94;
    uint64_t v397 = *(void *)(v0 + 472);
    uint64_t v406 = v95;
    uint64_t v320 = v96;
    uint64_t v332 = (void *)(v0 + 280);
    uint64_t v387 = *(void *)(v0 + 416);
    sub_100005FB0(*(void *)(v0 + 328), 1LL, 1LL, *(void *)(v0 + 464));
    sub_10000C20C();
    uint64_t v374 = v90;
    sub_10000C278();
    uint64_t v51 = 0LL;
    while (1)
    {
      if (!*(void *)(v92 + 16)) {
        goto LABEL_76;
      }
      uint64_t v430 = *(void *)(v0 + 496);
      uint64_t v432 = *(uint64_t (**)(void))(v0 + 520);
      uint64_t v97 = sub_100084CC4();
      sub_10002FFE4(v97, v406);
      sub_10002F8E0(v6, v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v6 = v5 + *(int *)(v387 + 36);
      uint64_t v98 = v5 + *(int *)(v387 + 32);
      sub_100048A38( &qword_10010DAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      sub_100021D80();
      uint64_t v99 = sub_1000851A0(v98, v6);
      uint64_t v100 = (void (*)(uint64_t, uint64_t))v397;
      sub_100084938(v99);
      sub_10002F90C(v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v5 = v430;
      sub_100085E3C(30.0);
      sub_100085578();
      uint64_t v2 = static Date.> infix(_:_:)(v430, v432);
      uint64_t v101 = sub_10000BF84();
      if ((v2 & 1) != 0) {
        break;
      }
      sub_100085568();
      uint64_t v92 = v424;
    }

    uint64_t v117 = *(void *)(v0 + 472);
    uint64_t v118 = *(void *)(v0 + 328);
    uint64_t v119 = sub_1000850E8( v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v272,  v284,  (uint64_t)v296,  v308,  v320,  (uint64_t)v332,  v345,  v360,  v374,  v387,  v397,  v406,  v415,  v424);
    uint64_t v127 = sub_100084AD4( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v273,  v285,  v297,  v309,  v321,  v333,  v346,  v361,  v375);
    sub_100084028(v127, &qword_10010DAD0);
    sub_100083158(v118, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 32));
    sub_100083478(v118);
    uint64_t v128 = *(void *)(v0 + 464);
    BOOL v129 = *(void *)(v0 + 320);
    sub_1000834C8(*(void *)(v0 + 328));
    LODWORD(v1sub_100006F7C(v0 + 17) = sub_1000060B4(v129, 1LL, v128);
    sub_100083C64(v129);
    uint64_t v130 = *(os_log_s **)(v0 + 536);
    if ((_DWORD)v117 == 1)
    {
      sub_10000BD20(v425);
      uint64_t v131 = sub_10000BD20(v376);
      Logger.logObject.getter(v131);
      unint64_t v132 = sub_10003CEEC();
      uint64_t v133 = sub_100022444(v130);
      uint64_t v430 = *(void *)(v0 + 464);
      uint64_t v433 = *(void *)(v0 + 520);
      if (v133)
      {
        uint64_t v134 = (uint8_t *)sub_10000BCF4(12LL);
        uint64_t v418 = sub_10000BCF4(32LL);
        v435[0] = v418;
        *(_DWORD *)uint64_t v134 = 136315138;
        sub_100083778();
        unint64_t v135 = sub_10000C278();
        uint64_t v136 = sub_100081F28(v135, v425);
        sub_100030B98();
        sub_10000C280();
        sub_100083B9C(v136, v137, v435);
        uint64_t v146 = sub_100085D10( v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v272,  v284,  (uint64_t)v296,  v308,  v320,  v332);
        sub_100084490((uint64_t)v146, v147, v148);
        sub_10000BCDC(v425);
        sub_10000BCDC(v376);
        sub_100022024();
        sub_100022210( (void *)&_mh_execute_header,  v130,  v132,  "While unloading assets for pending version change: remaining candidates %s generated task wake times in the pa st.  Ending task",  v134);
        sub_100021F38(v418);
        sub_10000BCC4(v418);
        sub_10000BCC4((uint64_t)v134);
        sub_100030B98();
        sub_10000C280();
      }

      else
      {
        sub_10008332C(v425);
        sub_10008332C(v376);
      }

      v100(v433, v430);
      sub_100085BD4();
    }

    else
    {
      os_log_type_t v149 = *(void *)(*(void *)(v0 + 528) - 8LL);
      os_log_type_t v150 = sub_100021CF0(*(void *)(v149 + 64));
      uint64_t v433 = v149;
      sub_100083158(v150, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 16));
      sub_1000858DC();
      sub_10003D390();
      uint64_t v151 = sub_100085ECC();
      if (sub_10008516C((os_log_type_t)v151))
      {
        uint64_t v130 = *(os_log_s **)(v0 + 464);
        uint64_t v152 = *(void *)(v0 + 328);
        uint64_t v153 = *(void *)(v0 + 312);
        uint64_t v154 = (uint8_t *)sub_10000BCF4(12LL);
        *(_DWORD *)uint64_t v154 = 134217984;
        uint64_t v155 = sub_10002FFE4(v152, v320);
        sub_100084584(v155, v156, &qword_10010DAD0);
        sub_100083334(v153);
        if (v41)
        {
          sub_10002F99C(*(void *)(v0 + 328), &qword_10010DAD0);
          __break(1u);
          return;
        }

        sub_100084CE4();
        sub_100085764();
        *(void *)(v0 + 28sub_100006F7C(v0 + 8) = v1;
        sub_100083DF8(v347, v0 + 296);
        sub_100085F28();
        sub_100022210( (void *)&_mh_execute_header,  (os_log_s *)v149,  (os_log_type_t)v151,  "While unloading assets for pending version change: additional assets need unloading, next task wake in %f seconds",  v154);
        sub_10000BCC4((uint64_t)v154);
      }

      else
      {
        sub_100085BC8();
        uint64_t v157 = sub_10008609C();
      }

      uint64_t v166 = sub_1000850E8( v157,  v158,  v159,  v160,  v161,  v162,  v163,  v164,  v272,  v284,  (uint64_t)v296,  v308,  v320,  (uint64_t)v332,  v347,  v362,  v376,  v388,  v398,  v408,  v417,  v425);
      sub_100084AD4( v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  v274,  v286,  v298,  v310,  v322,  v334,  v348,  v363,  v377);
      sub_100085BB4();
      sub_10003D128(v149);
      sub_1000857E8((uint64_t)v130);
      sub_1000857E8(v151);
      sub_10002FF48();
    }

    uint64_t v174 = *(void *)(v0 + 328);
    sub_10002FFE4(v174, v362);
    sub_1000834C8(v174);
    sub_100083AE4();
    goto LABEL_74;
  }

  uint64_t v109 = *(os_log_s **)(v0 + 536);
  sub_10000BD20(v90);
  uint64_t v110 = sub_10000BD20(v92);
  Logger.logObject.getter(v110);
  uint64_t v111 = sub_100022604();
  uint64_t v112 = sub_100084B90(v111);
  uint64_t v416 = *(void *)(v0 + 472);
  uint64_t v430 = *(void *)(v0 + 464);
  uint64_t v433 = *(void *)(v0 + 520);
  if (v112)
  {
    uint64_t v113 = (uint8_t *)sub_10000BCF4(12LL);
    uint64_t v407 = sub_10000BCF4(32LL);
    v435[0] = v407;
    *(_DWORD *)uint64_t v113 = 136315138;
    sub_100021D80();
    sub_1000837AC();
    uint64_t v114 = sub_100085EBC(v90);
    sub_1000308D8();
    sub_10000BF84();
    sub_1000845DC(v114, v115, v435);
    *(void *)(v0 + 264) = v116;
    sub_1000841C4(v0 + 264, v2, (uint64_t)(v113 + 4));
    sub_10000BCDC(v424);
    sub_10000BCDC(v90);
    sub_1000228C4();
    sub_100022210( (void *)&_mh_execute_header,  v109,  (os_log_type_t)v6,  "While unloading assets for pending version change: all remaining assets failed to unload, %s",  v113);
    sub_100021F38(v407);
    sub_10000BCC4(v407);
    sub_10000BCC4((uint64_t)v113);
    sub_1000308D8();
    sub_10000BF84();
  }

  else
  {
    sub_10008332C(v92);
    sub_10008332C(v90);
  }

  (*(void (**)(uint64_t, uint64_t))(v416 + 8))(v433, v430);
  uint64_t v165 = *(void *)(v0 + 296);
  sub_1000846EC(*(void *)(v0 + 512));
  sub_100083ABC(v165, 1LL);
LABEL_74:
  sub_100083AF0();
  uint64_t v349 = v176;
  uint64_t v364 = v175;
  sub_100085A98();
  uint64_t v378 = v178;
  uint64_t v389 = v177;
  sub_100085D98();
  uint64_t v399 = v180;
  uint64_t v409 = v179;
  sub_1000860B4();
  uint64_t v419 = v182;
  uint64_t v426 = v181;
  sub_100085504(v183);
  sub_100030500();
  sub_100030760();
  sub_10000C140();
  sub_10000BFE4();
  sub_10000C1B8();
  sub_10002294C();
  sub_10002FF04();
  sub_10002FF48();
  uint64_t v184 = sub_100030494();
  uint64_t v192 = sub_100084970( v184,  v185,  v186,  v187,  v188,  v189,  v190,  v191,  v272,  v284,  (uint64_t)v296,  v308,  v320,  (uint64_t)v332,  v349);
  uint64_t v200 = sub_100084C94(v192, v193, v194, v195, v196, v197, v198, v199, v275, v287, v299, v311, v323, v335, v350, v364);
  uint64_t v208 = sub_100084474( v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v276,  v288,  v300,  v312,  v324,  v336,  v351,  v365,  v378);
  uint64_t v216 = sub_100083F18( v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v277,  v289,  v301,  v313,  v325,  v337,  v352,  v366,  v379,  v389);
  uint64_t v224 = sub_100083C14( v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v278,  v290,  v302,  v314,  v326,  v338,  v353,  v367,  v380,  v390,  v399);
  uint64_t v232 = sub_100083D58( v224,  v225,  v226,  v227,  v228,  v229,  v230,  v231,  v279,  v291,  v303,  v315,  v327,  v339,  v354,  v368,  v381,  v391,  v400,  v409);
  uint64_t v240 = sub_100083D50( v232,  v233,  v234,  v235,  v236,  v237,  v238,  v239,  v280,  v292,  v304,  v316,  v328,  v340,  v355,  v369,  v382,  v392,  v401,  v410,  v419);
  uint64_t v248 = sub_100083DD0( v240,  v241,  v242,  v243,  v244,  v245,  v246,  v247,  v281,  v293,  v305,  v317,  v329,  v341,  v356,  v370,  v383,  v393,  v402,  v411,  v420,  v426);
  uint64_t v256 = sub_1000846A4( v248,  v249,  v250,  v251,  v252,  v253,  v254,  v255,  v282,  v294,  v306,  v318,  v330,  v342,  v357,  v371,  v384,  v394,  v403,  v412,  v421,  v427,  v430);
  sub_100084D88( v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v283,  v295,  v307,  v319,  v331,  v343,  v358,  v372,  v385,  v395,  v404,  v413,  v422,  v428,  v431,  v433);
  sub_100083FFC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100078DC4()
{
  *(void *)(v1 + swift_endAccess(v0 + 16) = v0;
  return swift_task_switch(sub_100078DDC, v0, 0LL);
}

void sub_100078DDC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask))
  {
    uint64_t v3 = sub_10000C030();
    char isCancelled = swift_task_isCancelled(v3);
    sub_100021E70();
    uint64_t v5 = *(void *)(v1 + v2);
    *(void *)(v1 + sub_10000BE20(*(void *)(v0 + 88), v2) = 0LL;
    swift_release(v5);
    if ((isCancelled & 1) != 0
      || (sub_10007566C((uint64_t (*)(uint64_t))sub_1000539D0, sub_100082208), (v6 & 1) == 0))
    {
      sub_100021E4C(*(uint64_t (**)(void))(v0 + 8));
    }

    else
    {
      uint64_t v7 = (void *)swift_task_alloc(dword_10010DABC);
      *(void *)(v0 + 24) = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_100078E94;
      sub_10005F548();
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100078E94()
{
  return sub_100007418(v0[1]);
}

Swift::Int sub_100078EC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_retain(a2);
    uint64_t v36 = sub_10007B478(v9, v8, (uint64_t)a3, a4);
    swift_release(v8);
    return v36;
  }

  uint64_t v10 = _swiftEmptySetSingleton;
  uint64_t v49 = _swiftEmptySetSingleton;
  if (a1 >= 0) {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_retain(a2);
  uint64_t v11 = __CocoaSet.makeIterator()(v9);
  uint64_t v12 = __CocoaSet.Iterator.next()(v11);
  if (!v12)
  {
LABEL_22:
    swift_release_n(v8, 2LL);
    swift_release(v11);
    return (Swift::Int)v10;
  }

  uint64_t v13 = v12;
  uint64_t v37 = v8;
  uint64_t v38 = v5;
  uint64_t v14 = type metadata accessor for InferenceProviderAsset(0LL);
  while (1)
  {
    uint64_t v39 = v13;
    swift_dynamicCast(v48, &v39, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
    uint64_t v15 = v48[0] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v48[0] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  &v39,  33LL,  0LL);
    LOBYTE(v15) = a3(v15);
    swift_endAccess(&v39);
    uint64_t v23 = v48[0];
    if ((v15 & 1) != 0) {
      break;
    }
    Swift::Int result = swift_release(v48[0]);
LABEL_20:
    uint64_t v13 = __CocoaSet.Iterator.next()(result);
    if (!v13)
    {
      uint64_t v10 = v49;
      uint64_t v8 = v37;
      goto LABEL_22;
    }
  }

  uint64_t v24 = v49;
  unint64_t v25 = v49[2];
  if (v49[3] <= v25)
  {
    sub_100019E08( v25 + 1,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48[0],  v48[1],  (uint64_t)v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  vars0,  vars8);
    uint64_t v24 = v49;
  }

  Hasher.init(_seed:)(&v39, v24[5]);
  sub_100091270((uint64_t)&v39);
  Swift::Int result = Hasher._finalize()();
  uint64_t v27 = v24 + 7;
  uint64_t v28 = -1LL << *((_BYTE *)v24 + 32);
  unint64_t v29 = result & ~v28;
  unint64_t v30 = v29 >> 6;
  if (((-1LL << v29) & ~v24[(v29 >> 6) + 7]) != 0)
  {
    unint64_t v31 = __clz(__rbit64((-1LL << v29) & ~v24[(v29 >> 6) + 7])) | v29 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_19:
    *(void *)((char *)v27 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    *(void *)(v24[6] + 8 * v3sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = v23;
    ++v24[2];
    goto LABEL_20;
  }

  char v32 = 0;
  unint64_t v33 = (unint64_t)(63 - v28) >> 6;
  while (++v30 != v33 || (v32 & 1) == 0)
  {
    BOOL v34 = v30 == v33;
    if (v30 == v33) {
      unint64_t v30 = 0LL;
    }
    v32 |= v34;
    uint64_t v35 = v27[v30];
    if (v35 != -1)
    {
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
      goto LABEL_19;
    }
  }

  __break(1u);
  return result;
}

Swift::Int sub_100079158(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (void *)v3;
  uint64_t v5 = a3;
  uint64_t v71 = *a3;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v73 = *(void *)(State - 8);
  uint64_t v9 = __chkstk_darwin(State);
  uint64_t v70 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v61 - v11;
  uint64_t v65 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v13 = __chkstk_darwin(v65);
  uint64_t v69 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v61 - v15;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_retain(v5);
    swift_retain(a2);
    sub_10007B798();
    if (v3)
    {
      swift_release(v5);
      swift_release(a2);
      return (Swift::Int)v4;
    }

    uint64_t v4 = v60;
    swift_release(a2);
LABEL_37:
    swift_release(v5);
    return (Swift::Int)v4;
  }

  uint64_t v62 = v3;
  uint64_t v4 = _swiftEmptySetSingleton;
  uint64_t v88 = _swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v17 = a1;
  }
  else {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_retain(v5);
  swift_retain(a2);
  uint64_t v72 = __CocoaSet.makeIterator()(v17);
  uint64_t v18 = __CocoaSet.Iterator.next()(v72);
  if (!v18)
  {
LABEL_36:
    swift_release(v5);
    swift_release_n(a2, 2LL);
    swift_release(v72);
    goto LABEL_37;
  }

  uint64_t v63 = a2;
  uint64_t v64 = v5;
  HIDWORD(v6sub_100006F7C(v0 + 8) = enum case for LoadState.loaded(_:);
  uint64_t v67 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v19 = v73;
  uint64_t v66 = v16;
  while (1)
  {
    uint64_t v75 = v18;
    swift_dynamicCast(&v87, &v75, v67, v71, 7LL);
    uint64_t v20 = v87;
    uint64_t v21 = v87 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v87 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v86,  0LL,  0LL);
    sub_10002F8E0(v21, (uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v12, HIDWORD(v68), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v23 = v22;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v23);
    uint64_t v24 = v76;
    uint64_t v25 = v85;
    BOOL v26 = v75 == v84 && v76 == v85;
    uint64_t v74 = v20;
    if (!v26) {
      break;
    }
    swift_bridgeObjectRelease_n(v76, 2LL);
    uint64_t v32 = (uint64_t)v16;
    uint64_t v29 = v69;
    sub_10002F8E0(v32, v69, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v30 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v70, v12, State);
LABEL_14:
    dispatch thunk of RawRepresentable.rawValue.getter(State, v23);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v23);
    uint64_t v33 = v76;
    uint64_t v34 = v30;
    uint64_t v35 = v85;
    if (v75 == v84 && v76 == v85)
    {
      swift_bridgeObjectRelease_n(v76, 2LL);
      uint64_t v19 = v73;
      uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v55(v34, State);
      sub_10002F90C(v29, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v55((uint64_t)v12, State);
      uint64_t v16 = v66;
      sub_10002F90C((uint64_t)v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_25;
    }

    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v84, v85, 0LL);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v35);
    uint64_t v19 = v73;
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v38(v34, State);
    sub_10002F90C(v29, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v38((uint64_t)v12, State);
    uint64_t v16 = v66;
    sub_10002F90C((uint64_t)v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v37 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_25:
    Swift::Int result = swift_release(v87);
LABEL_34:
    uint64_t v18 = __CocoaSet.Iterator.next()(result);
    if (!v18)
    {
      uint64_t v4 = v88;
      uint64_t v5 = v64;
      a2 = v63;
      goto LABEL_36;
    }
  }

  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v84, v85, 0LL);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v28 = (uint64_t)v16;
  uint64_t v29 = v69;
  sub_10002F8E0(v28, v69, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v30 = v70;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v70, v12, State);
  if ((v27 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v19 = v73;
  unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
  v31(v30, State);
  sub_10002F90C(v29, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v31((uint64_t)v12, State);
  uint64_t v16 = v66;
  sub_10002F90C((uint64_t)v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_19:
  if ((sub_10008633C(v74) & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v46 = v87;
  uint64_t v47 = v88;
  unint64_t v48 = v88[2];
  if (v88[3] <= v48)
  {
    sub_100019E08( v48 + 1,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v61,  v62,  v63,  (char)v64,  v65,  (uint64_t)v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84);
    uint64_t v47 = v88;
  }

  Hasher.init(_seed:)(&v75, v47[5]);
  sub_100091270((uint64_t)&v75);
  Swift::Int result = Hasher._finalize()();
  uint64_t v50 = v47 + 7;
  uint64_t v51 = -1LL << *((_BYTE *)v47 + 32);
  unint64_t v52 = result & ~v51;
  unint64_t v53 = v52 >> 6;
  if (((-1LL << v52) & ~v47[(v52 >> 6) + 7]) != 0)
  {
    unint64_t v54 = __clz(__rbit64((-1LL << v52) & ~v47[(v52 >> 6) + 7])) | v52 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)((char *)v50 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v54;
    *(void *)(v47[6] + 8 * v54) = v46;
    ++v47[2];
    uint64_t v19 = v73;
    goto LABEL_34;
  }

  char v56 = 0;
  unint64_t v57 = (unint64_t)(63 - v51) >> 6;
  while (++v53 != v57 || (v56 & 1) == 0)
  {
    BOOL v58 = v53 == v57;
    if (v53 == v57) {
      unint64_t v53 = 0LL;
    }
    v56 |= v58;
    uint64_t v59 = v50[v53];
    if (v59 != -1)
    {
      unint64_t v54 = __clz(__rbit64(~v59)) + (v53 << 6);
      goto LABEL_33;
    }
  }

  __break(1u);
  return result;
}

Swift::Int sub_100079794(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t)a3;
  uint64_t v68 = a2;
  uint64_t v66 = *a3;
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v59 = *(void *)(State - 8);
  uint64_t v7 = __chkstk_darwin(State);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v58 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v12 = __chkstk_darwin(v58);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v57 - v15;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_retain(v5);
    swift_retain(v68);
    sub_10007B798();
    if (v3)
    {
      swift_release(v5);
      swift_release(v68);
      return (Swift::Int)v11;
    }

    uint64_t v11 = v55;
    uint64_t v56 = v68;
LABEL_40:
    swift_release(v56);
    swift_release(v5);
    return (Swift::Int)v11;
  }

  uint64_t v69 = v11;
  uint64_t v11 = (char *)_swiftEmptySetSingleton;
  uint64_t v84 = (char *)_swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v17 = a1;
  }
  else {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_retain(v5);
  swift_retain(v68);
  uint64_t v67 = __CocoaSet.makeIterator()(v17);
  uint64_t v18 = __CocoaSet.Iterator.next()(v67);
  if (!v18)
  {
LABEL_39:
    swift_release(v5);
    swift_release_n(v68, 2LL);
    uint64_t v56 = v67;
    goto LABEL_40;
  }

  uint64_t v62 = v5;
  uint64_t v57 = v4;
  HIDWORD(v65) = enum case for LoadState.unloaded(_:);
  uint64_t v64 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v19 = v59;
  uint64_t v20 = (uint64_t)v69;
  uint64_t v21 = State;
  uint64_t v63 = v9;
  while (1)
  {
    uint64_t v71 = v18;
    swift_dynamicCast(&v83, &v71, v64, v66, 7LL);
    uint64_t v70 = v83;
    uint64_t v22 = v83 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v83 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v82,  0LL,  0LL);
    sub_10002F8E0(v22, (uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v20, HIDWORD(v65), v21);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v24 = v23;
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v23);
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v24);
    uint64_t v25 = v72;
    uint64_t v26 = v81;
    if (v71 == v80 && v72 == v81)
    {
      swift_bridgeObjectRelease_n(v72, 2LL);
      sub_10002F8E0((uint64_t)v16, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v28 = (uint64_t)v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v63, v20, v21);
LABEL_19:
      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v34(v28, v21);
      sub_10002F90C((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v34(v20, v21);
      sub_10002F90C((uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_20;
    }

    HIDWORD(v6sub_100016BD0(0, *(void *)(v0 + 16) + 1LL, 1) = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v80, v81, 0LL);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v26);
    sub_10002F8E0((uint64_t)v16, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v28 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v63, v20, v21);
    if ((v61 & 0x100000000LL) != 0) {
      goto LABEL_19;
    }
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v24);
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v24);
    uint64_t v29 = v72;
    uint64_t v30 = v81;
    if (v71 == v80 && v72 == v81)
    {
      swift_bridgeObjectRelease_n(v72, 2LL);
      uint64_t v19 = v59;
      uint64_t v20 = (uint64_t)v69;
      goto LABEL_19;
    }

    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v80, v81, 0LL);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v30);
    uint64_t v19 = v59;
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v33(v28, v21);
    sub_10002F90C((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v33((uint64_t)v69, v21);
    sub_10002F90C((uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v32 & 1) == 0) {
      goto LABEL_25;
    }
LABEL_20:
    if ((sub_10008633C(v70) & 1) != 0) {
      break;
    }
LABEL_25:
    Swift::Int result = swift_release(v83);
LABEL_34:
    uint64_t v18 = __CocoaSet.Iterator.next()(result);
    uint64_t v20 = (uint64_t)v69;
    if (!v18)
    {
      uint64_t v11 = v84;
      uint64_t v5 = v62;
      goto LABEL_39;
    }
  }

  uint64_t v42 = v83;
  uint64_t v43 = v84;
  unint64_t v44 = *((void *)v84 + 2);
  if (*((void *)v84 + 3) <= v44)
  {
    sub_100019E08( v44 + 1,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v57,  v58,  v59,  State,  v61,  v62,  (uint64_t)v63,  v64,  v65,  v66,  v67,  v68,  (uint64_t)v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80);
    uint64_t v43 = v84;
  }

  Hasher.init(_seed:)(&v71, *((void *)v43 + 5));
  sub_100091270((uint64_t)&v71);
  Swift::Int result = Hasher._finalize()();
  uint64_t v46 = v43 + 56;
  uint64_t v47 = -1LL << v43[32];
  unint64_t v48 = result & ~v47;
  unint64_t v49 = v48 >> 6;
  if (((-1LL << v48) & ~*(void *)&v43[8 * (v48 >> 6) + 56]) != 0)
  {
    unint64_t v50 = __clz(__rbit64((-1LL << v48) & ~*(void *)&v43[8 * (v48 >> 6) + 56])) | v48 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)((char *)v46 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v50;
    *(void *)(*((void *)v43 + 6) + 8 * v5sub_100016BD0(0, v0, 0) = v42;
    ++*((void *)v43 + 2);
    uint64_t v21 = State;
    goto LABEL_34;
  }

  char v51 = 0;
  unint64_t v52 = (unint64_t)(63 - v47) >> 6;
  while (++v49 != v52 || (v51 & 1) == 0)
  {
    BOOL v53 = v49 == v52;
    if (v49 == v52) {
      unint64_t v49 = 0LL;
    }
    v51 |= v53;
    uint64_t v54 = v46[v49];
    if (v54 != -1)
    {
      unint64_t v50 = __clz(__rbit64(~v54)) + (v49 << 6);
      goto LABEL_33;
    }
  }

  __break(1u);
  return result;
}

void sub_100079D84()
{
  uint64_t v3 = v2;
  uint64_t v55 = v4;
  uint64_t v56 = v5;
  uint64_t v7 = v6;
  uint64_t v53 = *v5;
  uint64_t State = type metadata accessor for LoadState(0LL);
  sub_100085754();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  sub_100085CE8();
  uint64_t v57 = v13;
  uint64_t v46 = sub_1000837BC();
  sub_100030A28();
  __chkstk_darwin(v14);
  sub_10004E158();
  uint64_t v48 = v15;
  sub_100022634();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v45 - v17;
  if ((v7 & 0xC000000000000001LL) == 0)
  {
    sub_100021D80();
    sub_1000224B4();
    sub_10007B660();
    if (v0)
    {
      sub_100085B90();
      swift_release(v55);
LABEL_37:
      sub_100084DC8();
      return;
    }

    uint64_t v44 = v55;
LABEL_36:
    swift_release(v44);
    sub_100085B90();
    goto LABEL_37;
  }

  uint64_t v47 = v1;
  sub_1000856EC();
  swift_retain(v56);
  swift_retain(v55);
  uint64_t v54 = __CocoaSet.makeIterator()(v0);
  uint64_t v19 = __CocoaSet.Iterator.next()(v54);
  if (!v19)
  {
LABEL_35:
    sub_100085B90();
    sub_10000BCDC(v55);
    uint64_t v44 = v54;
    goto LABEL_36;
  }

  uint64_t v45 = v0;
  HIDWORD(v5sub_10003318C(v0 + 2) = *v3;
  uint64_t v51 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v20 = v47;
  uint64_t v21 = v57;
  uint64_t v22 = v48;
  unint64_t v50 = v12;
  while (1)
  {
    uint64_t v59 = v19;
    swift_dynamicCast(&v71, &v59, v51, v53, 7LL);
    uint64_t v58 = v71;
    sub_10002FFE4(v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v70);
    uint64_t v23 = sub_1000307DC();
    sub_10002F8E0(v23, v24, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v21, HIDWORD(v52), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    sub_100084BFC();
    sub_100084BFC();
    uint64_t v25 = v60;
    BOOL v26 = v59 == v68 && v60 == v69;
    if (v26)
    {
      sub_10008407C();
      sub_10008591C();
      sub_100084954();
LABEL_16:
      sub_100085598();
      sub_1000855F4(v22);
      v25(v21, State);
      sub_1000855F4((uint64_t)v18);
      goto LABEL_17;
    }

    HIDWORD(v49) = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v68, v69, 0LL);
    sub_10000BD28();
    sub_100022024();
    sub_10008591C();
    sub_100084954();
    if ((v49 & 0x100000000LL) != 0) {
      goto LABEL_16;
    }
    sub_100084BFC();
    sub_100084BFC();
    uint64_t v25 = v60;
    if (v59 == v68 && v60 == v69)
    {
      sub_10008407C();
      uint64_t v20 = v47;
      uint64_t v21 = v57;
      goto LABEL_16;
    }

    char v29 = sub_1000856C4(v59, v27, v68);
    sub_10000BD28();
    sub_100022D34();
    uint64_t v20 = v47;
    sub_100085598();
    sub_1000855F4(v22);
    v25(v57, State);
    sub_1000855F4((uint64_t)v18);
    if ((v29 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_17:
LABEL_22:
    uint64_t v40 = swift_release(v71);
LABEL_30:
    uint64_t v19 = __CocoaSet.Iterator.next()(v40);
    uint64_t v21 = v57;
    if (!v19)
    {
      sub_10008553C();
      goto LABEL_35;
    }
  }

  uint64_t v37 = v71;
  unint64_t v38 = _swiftEmptySetSingleton[2];
  if (_swiftEmptySetSingleton[3] <= v38) {
    sub_100019E08( v38 + 1,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v45,  v46,  v47,  v48,  v49,  (uint64_t)v50,  v51,  v52,  v53,  v54,  v55,  (uint64_t)v56,  v57,  v58,  v59,  (uint64_t)v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68);
  }
  Hasher.init(_seed:)(&v59, _swiftEmptySetSingleton[5]);
  sub_100091270((uint64_t)&v59);
  Hasher._finalize()();
  sub_100082D00();
  if (!v26)
  {
    sub_100082E1C();
LABEL_29:
    sub_100084A80(v39);
    *(void *)(v42 + 8 * v43) = v37;
    ++_swiftEmptySetSingleton[2];
    uint64_t v22 = v48;
    goto LABEL_30;
  }

  sub_100082E08();
  while (1)
  {
    sub_100083820();
    if (v26 && (v41 & 1) != 0) {
      break;
    }
    sub_10008310C();
    if (!v26)
    {
      sub_100082DF4();
      goto LABEL_29;
    }
  }

  __break(1u);
}

Swift::Int sub_10007A1CC(uint64_t a1, uint64_t a2)
{
  uint64_t State = type metadata accessor for LoadState(0LL);
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v7 = __chkstk_darwin(State);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t v63 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0LL);
  uint64_t v12 = __chkstk_darwin(v63);
  uint64_t v66 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v64 = (uint64_t)&v55 - v14;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_retain();
    uint64_t v15 = (void *)sub_10007BA04(a1, a2);
    swift_release(a2);
    return (Swift::Int)v15;
  }

  uint64_t v57 = v2;
  uint64_t v15 = _swiftEmptySetSingleton;
  uint64_t v80 = _swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v16 = a1;
  }
  else {
    uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v56 = a2;
  swift_retain();
  uint64_t v62 = __CocoaSet.makeIterator()(v16);
  uint64_t v17 = __CocoaSet.Iterator.next()(v62);
  if (!v17)
  {
LABEL_38:
    swift_release_n(v56, 2LL);
    swift_release(v62);
    return (Swift::Int)v15;
  }

  uint64_t v18 = v17;
  uint64_t v61 = type metadata accessor for InferenceProviderAsset(0LL);
  HIDWORD(v6sub_100016BD0(0, v0, 0) = enum case for LoadState.loaded(_:);
  uint64_t v59 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v19 = v64;
  uint64_t v58 = v9;
  while (1)
  {
    uint64_t v67 = v18;
    swift_dynamicCast(&v79, &v67, v59, v61, 7LL);
    uint64_t v20 = v79 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess( v79 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState,  v78,  0LL,  0LL);
    sub_10002F8E0(v20, v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v11, HIDWORD(v60), State);
    sub_100048A38( &qword_10010DA48,  (uint64_t (*)(uint64_t))&type metadata accessor for LoadState,  (uint64_t)&protocol conformance descriptor for LoadState);
    uint64_t v22 = v21;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v21);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    uint64_t v23 = v68;
    uint64_t v24 = v77;
    BOOL v25 = v67 == v76 && v68 == v77;
    uint64_t v65 = v20;
    if (v25)
    {
      swift_bridgeObjectRelease_n(v68, 2LL);
      sub_10002F8E0(v19, v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v27 = v58;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v58, v11, State);
LABEL_19:
      char v41 = *(void (**)(char *, uint64_t))(v6 + 8);
      v41(v27, State);
      sub_10002F90C(v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v41(v11, State);
      sub_10002F90C(v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_20;
    }

    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, v76, v77, 0LL);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v24);
    sub_10002F8E0(v19, v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v27 = v58;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v58, v11, State);
    if ((v26 & 1) != 0) {
      goto LABEL_19;
    }
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    uint64_t v28 = v68;
    char v29 = v27;
    uint64_t v30 = v77;
    if (v67 == v76 && v68 == v77)
    {
      swift_bridgeObjectRelease_n(v68, 2LL);
      uint64_t v27 = v29;
      uint64_t v19 = v64;
      goto LABEL_19;
    }

    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, v76, v77, 0LL);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v30);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
    v33(v29, State);
    sub_10002F90C(v66, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v33(v11, State);
    sub_10002F90C(v64, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v32 & 1) == 0) {
      goto LABEL_21;
    }
LABEL_20:
LABEL_21:
    swift_release(v79);
LABEL_34:
    uint64_t v18 = __CocoaSet.Iterator.next()(result);
    uint64_t v19 = v64;
    if (!v18)
    {
      uint64_t v15 = v80;
      goto LABEL_38;
    }
  }

  uint64_t v43 = v79;
  uint64_t v44 = v80;
  unint64_t v45 = v80[2];
  if (v80[3] <= v45)
  {
    sub_100019E08( v45 + 1,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v55,  v56,  v57,  (char)v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78[0]);
    uint64_t v44 = v80;
  }

  Hasher.init(_seed:)(&v67, v44[5]);
  sub_100091270((uint64_t)&v67);
  Swift::Int result = Hasher._finalize()();
  uint64_t v46 = v44 + 7;
  uint64_t v47 = -1LL << *((_BYTE *)v44 + 32);
  unint64_t v48 = result & ~v47;
  unint64_t v49 = v48 >> 6;
  if (((-1LL << v48) & ~v44[(v48 >> 6) + 7]) != 0)
  {
    unint64_t v50 = __clz(__rbit64((-1LL << v48) & ~v44[(v48 >> 6) + 7])) | v48 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)((char *)v46 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v50;
    *(void *)(v44[6] + 8 * v5sub_100016BD0(0, v0, 0) = v43;
    ++v44[2];
    goto LABEL_34;
  }

  char v51 = 0;
  unint64_t v52 = (unint64_t)(63 - v47) >> 6;
  while (++v49 != v52 || (v51 & 1) == 0)
  {
    BOOL v53 = v49 == v52;
    if (v49 == v52) {
      unint64_t v49 = 0LL;
    }
    v51 |= v53;
    uint64_t v54 = v46[v49];
    if (v54 != -1)
    {
      unint64_t v50 = __clz(__rbit64(~v54)) + (v49 << 6);
      goto LABEL_33;
    }
  }

  __break(1u);
  return result;
}