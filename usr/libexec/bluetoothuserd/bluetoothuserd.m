uint64_t SystemVersionNumber.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void __swiftcall SystemVersionNumber.init(rawValue:)( bluetoothuserd::SystemVersionNumber_optional *__return_ptr retstr, Swift::String rawValue)
{
}

void __swiftcall SystemVersionNumber.init(stringLiteral:)( bluetoothuserd::SystemVersionNumber *__return_ptr retstr, Swift::String stringLiteral)
{
  v3 = v12;
  if (v12)
  {
    v4 = v14;
    Swift::Int v5 = v15;
    Swift::Bool v6 = v16;
    v7 = v18;
    __int128 v8 = v13;
    __int128 v9 = v17;
    retstr->rawValue._countAndFlagsBits = v11;
    retstr->rawValue._object = v3;
    *(_OWORD *)&retstr->baseNumber = v8;
    retstr->baseLetter._object = v4;
    retstr->childType.value = v5;
    retstr->childType.is_nil = v6;
    *(_OWORD *)&retstr->buildNumber = v9;
    retstr->suffix.value._object = v7;
  }

  else
  {
    __break(1u);
  }
}

uint64_t sub_1000026A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100003420((uint64_t)v4, a2, &qword_10007A660);
}

uint64_t sub_1000026F0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000026FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10000383C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100002758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10000383C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000027A8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_100003420((uint64_t)v6, (uint64_t)v7, &qword_10007A660);
  if (*((void *)&v7[0] + 1))
  {
    __int128 v4 = v7[3];
    a2[2] = v7[2];
    a2[3] = v4;
    a2[4] = v7[4];
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100002818(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s14bluetoothuserd19SystemVersionNumberV1loiySbAC_ACtFZ_0(v8, v9) & 1;
}

BOOL sub_100002870(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000028C8(v8, v9);
}

BOOL sub_1000028C8(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  char v4 = 1;
  if (v2 >= v3)
  {
    if (v3 >= v2)
    {
      uint64_t v7 = a2[3];
      uint64_t v8 = a2[4];
      uint64_t v9 = a1[3];
      uint64_t v10 = a1[4];
      BOOL v11 = v7 == v9 && v8 == v10;
      if ((v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL) & 1) == 0) && a2[7] >= a1[7])
      {
        sub_100003420((uint64_t)(a2 + 8), (uint64_t)v18, &qword_10007A670);
        sub_100003420((uint64_t)v18, (uint64_t)&v19, &qword_10007A670);
        if (v20) {
          uint64_t v12 = v19;
        }
        else {
          uint64_t v12 = 0LL;
        }
        if (v20) {
          unint64_t v13 = v20;
        }
        else {
          unint64_t v13 = 0xE000000000000000LL;
        }
        sub_100003420((uint64_t)(a1 + 8), (uint64_t)v17, &qword_10007A670);
        sub_100003420((uint64_t)v17, (uint64_t)&v21, &qword_10007A670);
        if (v22) {
          uint64_t v14 = v21;
        }
        else {
          uint64_t v14 = 0LL;
        }
        if (v22) {
          unint64_t v15 = v22;
        }
        else {
          unint64_t v15 = 0xE000000000000000LL;
        }
        if (v12 == v14 && v13 == v15) {
          char v4 = 0;
        }
        else {
          char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1LL);
        }
        sub_100003814((uint64_t)v18);
        sub_100003814((uint64_t)v17);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v15);
      }
    }

    else
    {
      char v4 = 0;
    }
  }

  return (v4 & 1) == 0;
}

BOOL sub_100002A18(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_100002A70(v8, v9);
}

BOOL sub_100002A70(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  char v4 = 1;
  if (v2 >= v3)
  {
    if (v3 >= v2)
    {
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4];
      uint64_t v9 = a2[3];
      uint64_t v10 = a2[4];
      BOOL v11 = v7 == v9 && v8 == v10;
      if ((v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL) & 1) == 0) && a1[7] >= a2[7])
      {
        sub_100003420((uint64_t)(a1 + 8), (uint64_t)v18, &qword_10007A670);
        sub_100003420((uint64_t)v18, (uint64_t)&v19, &qword_10007A670);
        if (v20) {
          uint64_t v12 = v19;
        }
        else {
          uint64_t v12 = 0LL;
        }
        if (v20) {
          unint64_t v13 = v20;
        }
        else {
          unint64_t v13 = 0xE000000000000000LL;
        }
        sub_100003420((uint64_t)(a2 + 8), (uint64_t)v17, &qword_10007A670);
        sub_100003420((uint64_t)v17, (uint64_t)&v21, &qword_10007A670);
        if (v22) {
          uint64_t v14 = v21;
        }
        else {
          uint64_t v14 = 0LL;
        }
        if (v22) {
          unint64_t v15 = v22;
        }
        else {
          unint64_t v15 = 0xE000000000000000LL;
        }
        if (v12 == v14 && v13 == v15) {
          char v4 = 0;
        }
        else {
          char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1LL);
        }
        sub_100003814((uint64_t)v18);
        sub_100003814((uint64_t)v17);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v15);
      }
    }

    else
    {
      char v4 = 0;
    }
  }

  return (v4 & 1) == 0;
}

uint64_t sub_100002BC4(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_100002C1C(v8, v9) & 1;
}

uint64_t sub_100002C1C(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  if (v2 < v3) {
    goto LABEL_2;
  }
  if (v3 < v2)
  {
    char v4 = 0;
    return v4 & 1;
  }

  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  BOOL v11 = v7 == v9 && v8 == v10;
  if (v11 || (char v4 = 1, (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL) & 1) == 0))
  {
    if (a2[7] < a1[7])
    {
LABEL_2:
      char v4 = 1;
      return v4 & 1;
    }

    sub_100003420((uint64_t)(a2 + 8), (uint64_t)v18, &qword_10007A670);
    sub_100003420((uint64_t)v18, (uint64_t)&v19, &qword_10007A670);
    if (v20) {
      uint64_t v12 = v19;
    }
    else {
      uint64_t v12 = 0LL;
    }
    if (v20) {
      unint64_t v13 = v20;
    }
    else {
      unint64_t v13 = 0xE000000000000000LL;
    }
    sub_100003420((uint64_t)(a1 + 8), (uint64_t)v17, &qword_10007A670);
    sub_100003420((uint64_t)v17, (uint64_t)&v21, &qword_10007A670);
    if (v22) {
      uint64_t v14 = v21;
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v22) {
      unint64_t v15 = v22;
    }
    else {
      unint64_t v15 = 0xE000000000000000LL;
    }
    if (v12 == v14 && v13 == v15) {
      char v4 = 0;
    }
    else {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1LL);
    }
    sub_100003814((uint64_t)v18);
    sub_100003814((uint64_t)v17);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
  }

  return v4 & 1;
}

uint64_t sub_100002D70(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t SystemVersionNumber.description.getter()
{
  uint64_t v1 = v0;
  sub_100003420(v0 + 40, (uint64_t)v19, &qword_10007A668);
  sub_100003420((uint64_t)v19, (uint64_t)&v20, &qword_10007A668);
  if ((v21 & 1) != 0)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = (void *)0xE000000000000000LL;
  }

  else
  {
    uint64_t v22 = v20;
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v3 = v4;
  }

  sub_100003420(v0 + 64, (uint64_t)v18, &qword_10007A670);
  sub_100003420((uint64_t)v18, (uint64_t)&v22, &qword_10007A670);
  if (v23)
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
    Character.write<A>(to:)( &v16,  v22,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v6 = v16;
    __int128 v5 = (void *)v17;
  }

  else
  {
    uint64_t v6 = 0LL;
    __int128 v5 = (void *)0xE000000000000000LL;
  }

  uint64_t v16 = 0LL;
  unint64_t v17 = 0xE000000000000000LL;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v10 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain(v10);
  Character.write<A>(to:)( &v16,  v9,  v10,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = v2;
  v11._object = v3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v3);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  unint64_t v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = v6;
  v14._object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v5);
  return v16;
}

uint64_t sub_100002F80()
{
  return SystemVersionNumber.description.getter();
}

uint64_t sub_100002FC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NSScanner.NumberRepresentation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = objc_allocWithZone(&OBJC_CLASS___NSScanner);
  swift_bridgeObjectRetain(a2);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = [v10 initWithString:v11];

  uint64_t v13 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  Swift::String v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v14(v9, enum case for NSScanner.NumberRepresentation.decimal(_:), v6);
  uint64_t v39 = NSScanner.scanInt(representation:)(v9);
  char v16 = v15;
  unint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  if ((v16 & 1) != 0)
  {

    goto LABEL_19;
  }

  Swift::String_optional v18 = NSScanner.scanCharacter()();
  object = v18.value._object;
  if (v18.value._object)
  {
    uint64_t countAndFlagsBits = v18.value._countAndFlagsBits;
    v14(v9, v13, v6);
    uint64_t v20 = NSScanner.scanInt(representation:)(v9);
    char v22 = v21;
    v17(v9, v6);
    if ((v22 & 1) == 0)
    {
      if (v20 >= 1000) {
        unint64_t v23 = v20 % 0x3E8uLL;
      }
      else {
        unint64_t v23 = v20;
      }
      if (v20 >= 1000) {
        unint64_t v24 = v20 / 0x3E8uLL;
      }
      else {
        unint64_t v24 = 0LL;
      }
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v18.value._object);
      Swift::String_optional v25 = NSScanner.scanCharacter()();
      uint64_t v26 = v25.value._countAndFlagsBits;
      v27 = v25.value._object;
      uint64_t v28 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000LL) == 0) {
        uint64_t v28 = a1;
      }
      uint64_t v29 = 7LL;
      if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
        uint64_t v29 = 11LL;
      }
      uint64_t v37 = v29 | (v28 << 16);
      uint64_t v30 = swift_bridgeObjectRetain(v25.value._object);
      uint64_t v31 = NSScanner.currentIndex.getter(v30);
      uint64_t v37 = String.distance(from:to:)(v37, v31, a1, a2);

      if (!v37)
      {
        BOOL v35 = v20 < 1000;
        swift_bridgeObjectRelease(v25.value._object);
        swift_bridgeObjectRelease(v18.value._object);
        uint64_t result = swift_bridgeObjectRelease(a2);
        uint64_t v34 = countAndFlagsBits;
        uint64_t v33 = v39;
        goto LABEL_22;
      }

      swift_bridgeObjectRelease_n(v18.value._object, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
      uint64_t result = swift_bridgeObjectRelease_n(v25.value._object, 2LL);
      goto LABEL_20;
    }

    swift_bridgeObjectRelease(v18.value._object);
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a2);
LABEL_20:
    a1 = 0LL;
    a2 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    object = 0LL;
    goto LABEL_21;
  }

  uint64_t result = swift_bridgeObjectRelease(a2);
  a1 = 0LL;
  a2 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
LABEL_21:
  unint64_t v24 = 0LL;
  BOOL v35 = 0LL;
  unint64_t v23 = 0LL;
  uint64_t v26 = 0LL;
  v27 = 0LL;
LABEL_22:
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v33;
  a3[3] = v34;
  a3[4] = (uint64_t)object;
  a3[5] = v24;
  a3[6] = v35;
  a3[7] = v23;
  a3[8] = v26;
  a3[9] = (uint64_t)v27;
  return result;
}

uint64_t sub_100003288(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t _s14bluetoothuserd19SystemVersionNumberV1loiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (v2 < v3) {
    goto LABEL_2;
  }
  if (v3 < v2)
  {
    char v4 = 0;
    return v4 & 1;
  }

  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  BOOL v11 = v7 == v9 && v8 == v10;
  if (v11 || (char v4 = 1, (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1LL) & 1) == 0))
  {
    if (a1[7] < a2[7])
    {
LABEL_2:
      char v4 = 1;
      return v4 & 1;
    }

    sub_100003420((uint64_t)(a1 + 8), (uint64_t)v18, &qword_10007A670);
    sub_100003420((uint64_t)v18, (uint64_t)&v19, &qword_10007A670);
    if (v20) {
      uint64_t v12 = v19;
    }
    else {
      uint64_t v12 = 0LL;
    }
    if (v20) {
      unint64_t v13 = v20;
    }
    else {
      unint64_t v13 = 0xE000000000000000LL;
    }
    sub_100003420((uint64_t)(a2 + 8), (uint64_t)v17, &qword_10007A670);
    sub_100003420((uint64_t)v17, (uint64_t)&v21, &qword_10007A670);
    if (v22) {
      uint64_t v14 = v21;
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v22) {
      unint64_t v15 = v22;
    }
    else {
      unint64_t v15 = 0xE000000000000000LL;
    }
    if (v12 == v14 && v13 == v15) {
      char v4 = 0;
    }
    else {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1LL);
    }
    sub_100003814((uint64_t)v18);
    sub_100003814((uint64_t)v17);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
  }

  return v4 & 1;
}

uint64_t sub_100003420(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003288(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_100003468()
{
  unint64_t result = qword_10007A678;
  if (!qword_10007A678)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SystemVersionNumber,  &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A678);
  }

  return result;
}

void *sub_1000034AC()
{
  return &protocol witness table for String;
}

unint64_t sub_1000034BC()
{
  unint64_t result = qword_10007A680;
  if (!qword_10007A680)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SystemVersionNumber,  &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A680);
  }

  return result;
}

void *sub_100003500()
{
  return &protocol witness table for String;
}

void *sub_10000350C()
{
  return &protocol witness table for String;
}

unint64_t sub_10000351C()
{
  unint64_t result = qword_10007A688;
  if (!qword_10007A688)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SystemVersionNumber,  &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A688);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemVersionNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for SystemVersionNumber(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemVersionNumber(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemVersionNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SystemVersionNumber()
{
  return &type metadata for SystemVersionNumber;
}

uint64_t sub_100003814(uint64_t a1)
{
  return a1;
}

unint64_t sub_10000383C()
{
  unint64_t result = qword_10007A690;
  if (!qword_10007A690)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SystemVersionNumber,  &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A690);
  }

  return result;
}

uint64_t sub_100003880()
{
  uint64_t v0 = type metadata accessor for DarwinNotificationManager();
  uint64_t result = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  static DarwinNotificationManager.shared = result;
  return result;
}

uint64_t *DarwinNotificationManager.shared.unsafeMutableAddressor()
{
  if (qword_10007CD90 != -1) {
    swift_once(&qword_10007CD90, sub_100003880);
  }
  return &static DarwinNotificationManager.shared;
}

uint64_t static DarwinNotificationManager.shared.getter()
{
  if (qword_10007CD90 != -1) {
    swift_once(&qword_10007CD90, sub_100003880);
  }
  return swift_retain(static DarwinNotificationManager.shared);
}

void *variable initialization expression of DarwinNotificationManager.helpers()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t DarwinNotificationManager.registerHelper(helper:)(uint64_t a1)
{
  uint64_t v3 = swift_retain(a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  unint64_t v5 = *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v4 = *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v5 >= v4 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1LL);
  }
  uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, a1);
  specialized Array._endMutation()(v6);
  return swift_endAccess(v8);
}

uint64_t DarwinNotificationManager.unregisterHelper(helper:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain(a1);
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_1000044A8(v4, a1);
  swift_bridgeObjectRelease(v3);
  swift_release(a1);
  uint64_t v6 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = v5;
  return swift_bridgeObjectRelease(v6);
}

Swift::Void __swiftcall DarwinNotificationManager.setUp()()
{
  uint64_t v1 = v0;
  sub_100004600();
  unint64_t v2 = (dispatch_queue_s *)static OS_dispatch_queue.main.getter();
  v5[4] = sub_10000463C;
  uint64_t v6 = v1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256LL;
  v5[2] = sub_100003DE0;
  v5[3] = &unk_1000715D8;
  uint64_t v3 = _Block_copy(v5);
  uint64_t v4 = v6;
  swift_retain(v1);
  swift_release(v4);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v2, v3);
  _Block_release(v3);
}

const char *sub_100003B10(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v9 = String.init(cString:)();
    unint64_t v11 = v10;
    uint64_t v12 = sub_10002FF10();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
    uint64_t v13 = swift_bridgeObjectRetain_n(v11, 2LL);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = a2;
      unint64_t v17 = (uint8_t *)v16;
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v29[0] = v18;
      *(_DWORD *)unint64_t v17 = 136315138;
      uint64_t v26 = v17 + 4;
      swift_bridgeObjectRetain(v11);
      uint64_t v28 = sub_100003E68(v9, v11, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v26, v17 + 12);
      swift_bridgeObjectRelease_n(v11, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "On xpc event stream, com.apple.notifyd.matching, notification %s",  v17,  0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      uint64_t v19 = v17;
      a2 = v27;
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess(a2 + 16, v29, 0LL, 0LL);
    uint64_t v20 = *(void *)(a2 + 16);
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0) {
        uint64_t v25 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v25 = v20 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*(void *)(a2 + 16));
      uint64_t result = (const char *)_CocoaArrayWrapper.endIndex.getter(v25);
      uint64_t v21 = (uint64_t)result;
      if (result) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = (const char *)swift_bridgeObjectRetain(*(void *)(a2 + 16));
      if (v21)
      {
LABEL_7:
        if (v21 < 1)
        {
          __break(1u);
          return result;
        }

        uint64_t v22 = 0LL;
        do
        {
          if ((v20 & 0xC000000000000001LL) != 0)
          {
            uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
          }

          else
          {
            uint64_t v23 = *(void *)(v20 + 8 * v22 + 32);
            swift_retain(v23);
          }

          ++v22;
          NSString v24 = String._bridgeToObjectiveC()();
          (*(void (**)(void))(*(void *)v23 + 120LL))();
          swift_release(v23);
        }

        while (v21 != v22);
      }
    }

    swift_bridgeObjectRelease(v11);
    return (const char *)swift_bridgeObjectRelease(v20);
  }

  return result;
}

uint64_t sub_100003DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t DarwinNotificationManager.deinit()
{
  return v0;
}

uint64_t DarwinNotificationManager.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_100003E68(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100003F38(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000469C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000469C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10000467C(v12);
  return v7;
}

uint64_t sub_100003F38(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_1000040F0(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    NSString v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    NSString v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_1000040F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100004184(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10000435C(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10000435C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100004184(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_1000042F8(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(sub_100002FC0(stringLiteral._countAndFlagsBits, (unint64_t)stringLiteral._object, v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(sub_100002FC0(stringLiteral._countAndFlagsBits, (unint64_t)stringLiteral._object, v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(sub_100002FC0(stringLiteral._countAndFlagsBits, (unint64_t)stringLiteral._object, v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_1000042F8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100003288(&qword_10007B2C0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10000435C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003288(&qword_10007B2C0);
    unint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

    __break(1u);
    goto LABEL_31;
  }

  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v19 = a1;
  uint64_t v20 = a2;
  while (1)
  {
    uint64_t v23 = static String._fromUTF8Repairing(_:)(v19, v20);
    uint64_t v25 = v24;
    *(void *)description = v23;
    v69 = v24;
    swift_bridgeObjectRetain(v24);
    v26._uint64_t countAndFlagsBits = 46LL;
    v26._object = (void *)0xE100000000000000LL;
    String.append(_:)(v26);
    uint64_t v27 = swift_bridgeObjectRelease(v25);
    unint64_t v11 = *(char **)description;
    uint64_t v28 = v69;
    uint64_t v29 = UUID.init()(v27);
    uint64_t v30 = UUID.uuidString.getter(v29);
    int64_t v9 = v31;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v62);
    *(void *)description = v11;
    v69 = v28;
    swift_bridgeObjectRetain(v28);
    v32._uint64_t countAndFlagsBits = v30;
    v32._object = (void *)v9;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v28);
    uint64_t v33 = v69;
    v4[1].opaque[0] = *(void *)description;
    v4[1].opaque[1] = v33;
    uint64_t v34 = String.utf8CString.getter();
    BOOL v35 = os_transaction_create(v34 + 32);
    swift_release(v34);
    uint64_t v36 = v4[2].opaque[0];
    v4[2].opaque[0] = v35;
    swift_unknownObjectRelease(v36);
    LODWORD(v17) = v63;
    if ((v63 & 1) != 0) {
      break;
    }
    unint64_t v11 = v65;
    int64_t v9 = v66;
    if (a1)
    {
      if (qword_1000805D0 != -1) {
        swift_once(&qword_1000805D0, sub_100055E94);
      }
      uint64_t v37 = (os_activity_s *)qword_1000805D8;
      v38 = a1;
      goto LABEL_25;
    }

void *sub_1000044A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        unint64_t v9 = v5 + 1;
        if (__OFADD__(v5, 1LL))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }

LABEL_9:
        if (v8 == a2)
        {
          swift_release(a2);
        }

        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
          specialized ContiguousArray._endMutation()(v7);
        }

        ++v5;
        if (v9 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_16:
      if (a1 < 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    uint64_t v8 = *(void *)(a1 + 8 * v5 + 32);
    swift_retain(v8);
    unint64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

    *(_WORD *)(a2 + 2 * v13++) = v18;
    if (a3 == v13) {
      goto LABEL_29;
    }
  }

  os_log_type_t v15 = 1;
  a3 = v13;
LABEL_29:
  a1 = v30;
LABEL_30:
  swift_bridgeObjectRelease(a5);
LABEL_31:
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 34) = v15;
  return a3;
}

      v7 += 2;
      if (!--v4)
      {
        swift_bridgeObjectRelease(*(void *)(v32 + 32));
        unint64_t v3 = v35;
        goto LABEL_26;
      }
    }

    *(void *)unint64_t v5 = *(void *)v5;
    uint64_t v11 = sub_100050B8C(&qword_10007C040, &qword_10007BFF0, (uint64_t)&protocol conformance descriptor for <A> [A]);
LABEL_7:
    size_t v12 = (void *)v11;
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = v32 + 16;
    int v14 = (void *)v10;
    os_log_type_t v15 = v12;
LABEL_8:
    AnyHashable.init<A>(_:)(v13, v14, v15);
    sub_10004BA08((uint64_t)v34, v8, v9);
    goto LABEL_9;
  }

unint64_t sub_100004600()
{
  unint64_t result = qword_10007A800;
  if (!qword_10007A800)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10007A800);
  }

  return result;
}

const char *sub_10000463C(void *a1)
{
  return sub_100003B10(a1, v1);
}

uint64_t sub_100004644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100004654(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for DarwinNotificationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd25DarwinNotificationManager);
}

uint64_t sub_10000467C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000469C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_1000046DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  id v10 = sub_1000061C0(a1, a2, a3, a4);

  swift_release(a4);
  return v10;
}

id sub_100004748()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KeyValueStoreCustomObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10000486C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10002FF10();
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Start KeyValueStoreCustomObserver", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v12 = *(void *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    int v14 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults);
    os_log_type_t v15 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults);
    swift_bridgeObjectRetain(*(void *)((char *)v1
                                       + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys));
    uint64_t v16 = (void *)(v12 + 40);
    do
    {
      uint64_t v17 = *v16;
      swift_bridgeObjectRetain(*v16);
      NSString v18 = String._bridgeToObjectiveC()();
      [v14 addObserver:v1 forKeyPath:v18 options:0 context:0];

      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v17);
      [v15 addObserver:v1 forKeyPath:v19 options:0 context:0];

      v16 += 2;
      --v13;
    }

    while (v13);
    uint64_t v11 = swift_bridgeObjectRelease(v12);
  }

  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x110LL))(v11);
}

uint64_t sub_100004A5C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults);
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults);
    swift_bridgeObjectRetain(*(void *)(v0
                                       + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys));
    unint64_t v5 = (void *)(v1 + 40);
    do
    {
      uint64_t v6 = *v5;
      swift_bridgeObjectRetain(*v5);
      NSString v7 = String._bridgeToObjectiveC()();
      [v3 removeObserver:v0 forKeyPath:v7 context:0];

      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      [v4 removeObserver:v0 forKeyPath:v8 context:0];

      v5 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v1);
  }

  id v9 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v9 removeObserver:v0];

  id v10 = (int *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken);
  swift_beginAccess( v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken,  v12,  0LL,  0LL);
  return notify_cancel(*v10);
}

void sub_100004D34()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  NSString v8 = (char *)&v40 - v7;
  id v45 = *(id *)&v1[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults];
  unsigned int v9 = [v45 synchronize];
  uint64_t v10 = sub_100030144();
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v12 = v11(v8, v10, v2);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    v44 = (uint64_t (*)(char *, uint64_t))v2;
    uint64_t v16 = v6;
    uint64_t v17 = v15;
    *(_DWORD *)os_log_type_t v15 = 67109120;
    LODWORD(v47) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4, v15 + 4, v15 + 8);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cloud KVS synchronized: %{BOOL}d", v17, 8u);
    NSString v18 = v17;
    uint64_t v6 = v16;
    uint64_t v2 = (uint64_t)v44;
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  NSString v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v8, v2);
  v11(v6, v10, v2);
  uint64_t v20 = v1;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v44 = (uint64_t (*)(char *, uint64_t))v19;
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v42;
    v43 = v6;
    *(_DWORD *)uint64_t v23 = 136315138;
    NSString v24 = v23 + 12;
    v40 = v23 + 4;
    v41 = v23;
    id v25 = [v45 dictionaryRepresentation];
    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v25,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    uint64_t v27 = Dictionary.description.getter( v26,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v29 = v28;
    swift_bridgeObjectRelease(v26);
    uint64_t v46 = sub_100003E68(v27, v29, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v40, v24);

    unint64_t v30 = v29;
    id v31 = v45;
    swift_bridgeObjectRelease(v30);
    v32 = v41;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cloud KVS snapshot: %s", v41, 0xCu);
    uint64_t v33 = v42;
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);

    uint64_t v34 = v44(v43, v2);
  }

  else
  {

    uint64_t v34 = ((uint64_t (*)(char *, uint64_t))v19)(v6, v2);
    id v31 = v45;
  }

  (*(void (**)(uint64_t))((swift_isaMask & *(void *)v20) + 0xF0LL))(v34);
  BOOL v35 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v36 = [v35 defaultCenter];
  [v36 addObserver:v20 selector:"handleUbiquitousKeyValueStoreChangeWithNotification:" name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:v31];

  id v37 = [v35 defaultCenter];
  uint64_t v38 = *((void *)sub_10000BB00() + 1);
  swift_bridgeObjectRetain(v38);
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  [v37 addObserver:v20 selector:"handleUbiquitousKeyValueStoreChangeLocallyWithNotification:" name:v39 object:0];
}

void sub_100005164()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v2 = [v1 defaultCenter];
  [v2 removeObserver:v0 name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:*(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults)];

  id v3 = [v1 defaultCenter];
  uint64_t v4 = *((void *)sub_10000BB00() + 1);
  swift_bridgeObjectRetain(v4);
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  [v3 removeObserver:v0 name:v5 object:0];
}

unint64_t sub_100005248()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t result = Notification.userInfo.getter(v4);
  if (!result) {
    return result;
  }
  unint64_t v8 = result;
  uint64_t v9 = sub_100030144();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
  uint64_t v10 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = v1;
    os_log_type_t v14 = (uint8_t *)v13;
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    v37[0] = v33;
    *(_DWORD *)os_log_type_t v14 = 136315138;
    id v31 = v14 + 4;
    uint64_t v15 = swift_bridgeObjectRetain(v8);
    v32 = (char *)&type metadata for Any + 8;
    uint64_t v16 = Dictionary.description.getter( v15,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease(v8);
    *(void *)&__int128 v38 = sub_100003E68(v16, v18, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 8, v31, v14 + 12);
    swift_bridgeObjectRelease_n(v8, 2LL);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cloud KVS Notification: %s", v14, 0xCu);
    uint64_t v19 = v33;
    swift_arrayDestroy(v33, 1LL, v32);
    swift_slowDealloc(v19, -1LL, -1LL);
    uint64_t v20 = v14;
    uint64_t v1 = v34;
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangeReasonKey);
  uint64_t v23 = v22;
  *(void *)&__int128 v38 = v21;
  *((void *)&v38 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  unint64_t result = AnyHashable.init<A>(_:)(&v38, &type metadata for String, &protocol witness table for String);
  if (!*(void *)(v8 + 16))
  {
    __break(1u);
    goto LABEL_21;
  }

  unint64_t result = sub_1000060CC((uint64_t)v37);
  if ((v24 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }

  sub_10000469C(*(void *)(v8 + 56) + 32 * result, (uint64_t)v36);
  sub_1000062FC((uint64_t)v37);
  swift_bridgeObjectRelease(v23);
  sub_100006330(v36, &v38);
  swift_dynamicCast(&v35, &v38, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
  if (v35 > 3 || v35 == 2)
  {
    unint64_t v30 = v8;
    return swift_bridgeObjectRelease(v30);
  }

  *(void *)&v36[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
  *((void *)&v36[0] + 1) = v25;
  AnyHashable.init<A>(_:)(v36, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v8 + 16) && (unint64_t v26 = sub_1000060CC((uint64_t)v37), (v27 & 1) != 0))
  {
    sub_10000469C(*(void *)(v8 + 56) + 32 * v26, (uint64_t)&v38);
  }

  else
  {
    __int128 v38 = 0u;
    __int128 v39 = 0u;
  }

  swift_bridgeObjectRelease(v8);
  sub_1000062FC((uint64_t)v37);
  if (!*((void *)&v39 + 1)) {
    return sub_100006340((uint64_t)&v38);
  }
  uint64_t v28 = sub_100003288(&qword_10007BFF0);
  unint64_t result = swift_dynamicCast(v36, &v38, (char *)&type metadata for Any + 8, v28, 6LL);
  if ((result & 1) != 0)
  {
    unint64_t v29 = *(void *)&v36[0];
    (*(void (**)(void, void))((swift_isaMask & *v1) + 0x108LL))(0LL, *(void *)&v36[0]);
    unint64_t v30 = v29;
    return swift_bridgeObjectRelease(v30);
  }

  return result;
}

uint64_t sub_100005614(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = Notification.userInfo.getter(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    v11[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
    v11[1] = v5;
    AnyHashable.init<A>(_:)(v11, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_1000060CC((uint64_t)v12), (v7 & 1) != 0))
    {
      sub_10000469C(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v13);
    }

    else
    {
      __int128 v13 = 0u;
      __int128 v14 = 0u;
    }

    swift_bridgeObjectRelease(v4);
    sub_1000062FC((uint64_t)v12);
    if (*((void *)&v14 + 1))
    {
      uint64_t v8 = sub_100003288(&qword_10007BFF0);
      if ((swift_dynamicCast(v11, &v13, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
      {
        uint64_t v9 = v11[0];
        (*(void (**)(void, void))((swift_isaMask & *v2) + 0x108LL))(0LL, v11[0]);
        return swift_bridgeObjectRelease(v9);
      }
    }

    else
    {
      sub_100006340((uint64_t)&v13);
    }
  }

  return (*(uint64_t (**)(void, void *))((swift_isaMask & *v2) + 0x108LL))(0LL, _swiftEmptyArrayStorage);
}

uint64_t sub_100005770(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7 = type metadata accessor for Notification(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v11 = a1;
  a4(v10);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100005810(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = *(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue);
  uint64_t v12 = swift_allocObject(&unk_100071610, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  uint64_t v13 = swift_allocObject(&unk_100071638, 40LL, 7LL);
  *(void *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = a2;
  aBlock[4] = sub_1000063D0;
  uint64_t v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  aBlock[3] = &unk_100071650;
  __int128 v14 = _Block_copy(aBlock);
  swift_retain(v12);
  uint64_t v15 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100003288((uint64_t *)&unk_10007A860);
  unint64_t v18 = sub_100006480();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_100005A3C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100005A68()
{
  uint64_t v1 = *(dispatch_queue_s **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue);
  uint64_t v2 = swift_allocObject(&unk_100071610, 24LL, 7LL);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  v5[4] = sub_100006510;
  uint64_t v6 = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256LL;
  v5[2] = sub_100005CB8;
  v5[3] = &unk_100071678;
  uint64_t v3 = _Block_copy(v5);
  swift_release(v6);
  uint64_t v4 = (int *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken);
  swift_beginAccess(v4, v5, 33LL, 0LL);
  notify_register_dispatch("com.apple.bluetooth.prefsChanged", v4, v1, v3);
  swift_endAccess(v5);
  _Block_release(v3);
}

uint64_t sub_100005B54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = a1 + 16;
  uint64_t v7 = sub_100030144();
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Root KVS Notification", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess(v6, v17, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v6);
  if (result)
  {
    uint64_t v13 = (void *)result;
    uint64_t v15 = *(void (**)(uint64_t, void *))(result
                                                   + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify);
    uint64_t v14 = *(void *)(result + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify + 8);
    swift_retain(v14);

    v15(1LL, _swiftEmptyArrayStorage);
    return swift_release(v14);
  }

  return result;
}

uint64_t sub_100005CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100005D20(uint64_t a1, uint64_t a2)
{
  return sub_100005DE8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100005D2C(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100005D6C(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100005DDC(uint64_t a1, uint64_t a2)
{
  return sub_100005DE8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100005DE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100005E24(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100005E98(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100005F14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_100005F54(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100005FDC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100006020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100006048(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( &qword_10007A7D0,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_1000609F8);
  uint64_t v3 = sub_10000662C( &qword_10007A7F8,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_10006094C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

unint64_t sub_1000060CC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000060FC(a1, v4);
}

unint64_t sub_1000060FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10000656C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000062FC((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

id sub_1000061C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults;
  char v10 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v11 = v4;
  *(void *)&v4[v9] = [v10 standardUserDefaults];
  uint64_t v12 = OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults;
  uint64_t v13 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
  swift_beginAccess(v13, v20, 0LL, 0LL);
  uint64_t v14 = (void *)*v13;
  *(void *)&v11[v12] = *v13;
  *(_DWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken] = -1;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudKVSChangedNotification] = 0LL;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue] = a1;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys] = a2;
  uint64_t v15 = &v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify];
  *(void *)uint64_t v15 = a3;
  *((void *)v15 + 1) = a4;
  id v16 = v14;
  id v17 = a1;
  swift_retain(a4);

  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for KeyValueStoreCustomObserver();
  return objc_msgSendSuper2(&v19, "init");
}

uint64_t type metadata accessor for KeyValueStoreCustomObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd27KeyValueStoreCustomObserver);
}

uint64_t sub_1000062FC(uint64_t a1)
{
  return a1;
}

_OWORD *sub_100006330(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100006340(uint64_t a1)
{
  uint64_t v2 = sub_100003288(&qword_10007A7A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100006380()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000063A4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000063D0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v1 + 16;
  swift_beginAccess(v1 + 16, v9, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = (void *)result;
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(result
                                                 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify);
    uint64_t v7 = *(void *)(result + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify + 8);
    swift_retain(v7);

    v8(v2, v3);
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_100006468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100006478(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100006480()
{
  unint64_t result = qword_10007AD30;
  if (!qword_10007AD30)
  {
    uint64_t v1 = sub_1000064CC((uint64_t *)&unk_10007A860);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007AD30);
  }

  return result;
}

uint64_t sub_1000064CC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100006510()
{
  return sub_100005B54(v0);
}

void type metadata accessor for NSKeyValueChangeKey()
{
  if (!qword_10007A7D8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1000716B0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007A7D8);
    }
  }

uint64_t sub_10000656C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000065A8()
{
  return sub_10000662C( &qword_10007A7E0,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_100060910);
}

uint64_t sub_1000065D4()
{
  return sub_10000662C( &qword_10007A7E8,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_1000608E4);
}

uint64_t sub_100006600()
{
  return sub_10000662C( &qword_10007A7F0,  (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey,  (uint64_t)&unk_100060980);
}

uint64_t sub_10000662C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

id sub_100006674()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ApplePushServiceManager()) init];
  qword_100080728 = (uint64_t)result;
  return result;
}

uint64_t *sub_1000066A0()
{
  if (qword_10007D0A0 != -1) {
    swift_once(&qword_10007D0A0, sub_100006674);
  }
  return &qword_100080728;
}

uint64_t sub_100006720()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_100006768(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000067B8(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100006800()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100006854(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

id sub_1000068B0()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  char v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushServiceQueue;
  v21[0] = sub_100004600();
  uint64_t v23 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v23(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  id v11 = v0;
  static DispatchQoS.unspecified.getter(v11);
  unint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100003288((uint64_t *)&unk_10007A810);
  uint64_t v14 = sub_100008C48( (unint64_t *)&qword_10007ACF0,  (uint64_t *)&unk_10007A810,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v13, v14, v1, v12);
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100066760LL,  v6,  v3,  v10,  0LL);
  *(void *)(v21[1] + v22) = v15;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions] = _swiftEmptyArrayStorage;
  uint64_t v16 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptionQueue;
  static DispatchQoS.unspecified.getter(v15);
  unint64_t v26 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v13, v14, v1, v12);
  v23(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  *(void *)&v11[v16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003CLL,  0x8000000100066780LL,  v6,  v3,  v10,  0LL);
  id v17 = &v11[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment];
  *(void *)id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  *((void *)v17 + 1) = v18;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection] = 0LL;

  objc_super v19 = (objc_class *)type metadata accessor for ApplePushServiceManager();
  v25.receiver = v11;
  v25.super_class = v19;
  return objc_msgSendSuper2(&v25, "init");
}

uint64_t type metadata accessor for ApplePushServiceManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd23ApplePushServiceManager);
}

id sub_100006BC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = (id)__chkstk_darwin(v4);
  uint64_t v9 = (char *)&v47 - v8;
  uint64_t v10 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection;
  if (!*(void *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection))
  {
    id v11 = [(id)objc_opt_self(NSBundle) mainBundle];
    id v12 = [v11 bundleIdentifier];

    if (v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      uint64_t v16 = sub_10002FF44();
      uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v16, v2);
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Set up APS connection", v20, 2u);
        swift_slowDealloc(v20, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      unint64_t v47 = 0xD00000000000001BLL;
      unint64_t v48 = 0x80000001000667C0LL;
      v21._uint64_t countAndFlagsBits = v13;
      v21._object = v15;
      String.append(_:)(v21);
      uint64_t v22 = swift_bridgeObjectRelease(v15);
      unint64_t v24 = v47;
      unint64_t v23 = v48;
      (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xA8LL))(v22);
      uint64_t v26 = v25;
      char v27 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushServiceQueue);
      id v28 = objc_allocWithZone(&OBJC_CLASS___APSConnection);
      id v29 = v27;
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v26);
      NSString v31 = String._bridgeToObjectiveC()();
      id v32 = [v28 initWithEnvironmentName:v30 namedDelegatePort:v31 queue:v29];

      uint64_t v33 = *(void **)((char *)v1 + v10);
      *(void *)((char *)v1 + sub_100002FC0(stringLiteral._countAndFlagsBits, (unint64_t)stringLiteral._object, v10) = v32;

      uint64_t v34 = *(void **)((char *)v1 + v10);
      if (!v34) {
        goto LABEL_10;
      }
      uint64_t v35 = sub_100003288((uint64_t *)&unk_10007B530);
      uint64_t v36 = swift_allocObject(v35, 48LL, 7LL);
      *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060880;
      *(void *)(v36 + 32) = v24;
      *(void *)(v36 + 40) = v23;
      id v37 = v34;
      swift_bridgeObjectRetain(v23);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v36);
      [v37 _setEnabledTopics:isa];

      __int128 v39 = *(void **)((char *)v1 + v10);
      if (v39)
      {
        id v40 = v39;
        NSString v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v23);
        [v40 requestTokenForTopic:v41 identifier:0];

        id result = *(id *)((char *)v1 + v10);
        if (!result) {
          return result;
        }
      }

      else
      {
LABEL_10:
        swift_bridgeObjectRelease(v23);
        id result = *(id *)((char *)v1 + v10);
        if (!result) {
          return result;
        }
      }

      return [result setDelegate:v1];
    }

    uint64_t v42 = sub_10002FF44();
    uint64_t v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v42, v2);
    v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to setup APS cannot get bundleIdentifier!", v46, 2u);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  return result;
}

uint64_t sub_100006FD4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100007E88(a2, a3);
}

uint64_t sub_100007074( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  return sub_100008194(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1000071B4(uint64_t a1, void *a2)
{
  return sub_10000859C(a2);
}

id sub_100007220()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplePushServiceManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000072BC(uint64_t a1)
{
  v3[2] = a1;
  uint64_t v1 = sub_100003288((uint64_t *)&unk_10007A850);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100008918, v3, v1);
}

uint64_t sub_100007324@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100008C88(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject(&unk_1000717D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v10 + 16, a2);
  uint64_t v11 = sub_100003288(&qword_10007A938);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_100008CF0, v10, v11, a3);
  sub_100008940(a3, (uint64_t)v9);
  id v12 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))((swift_isaMask & *a2) + 0xA0LL))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_100007A74(0, *(void *)(v15 + 16) + 1LL, 1, v15);
    unint64_t *v14 = v15;
  }

  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_100007A74(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }

  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v18 + 1;
  sub_100008A30( (uint64_t)v9,  v15 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v18);
  return v12(v21, 0LL);
}

uint64_t sub_1000074C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v21[1] = *(void *)&v1[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptionQueue];
  sub_100008940(a1, (uint64_t)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_100071788, v14 + v12, v13 | 7);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  sub_100008A30((uint64_t)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v15 + v14);
  aBlock[4] = sub_100008A78;
  uint64_t v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  aBlock[3] = &unk_1000717A0;
  uint64_t v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  unint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v19 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v25);
}

uint64_t sub_10000771C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0LL;
    uint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_100008940(a3 + v16 + (void)v13 * v14, (uint64_t)v12);
      char v17 = a1(v12);
      if (v3)
      {
        sub_100008C08((uint64_t)v12);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }

      if ((v17 & 1) != 0)
      {
        sub_100008A30((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          sub_100007C84(0, v15[2] + 1LL, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100007C84(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }

        v15[2] = v19 + 1;
        uint64_t result = sub_100008A30(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }

      else
      {
        uint64_t result = sub_100008C08((uint64_t)v12);
      }

      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }

  return result;
}

uint64_t sub_100007910()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x90LL))();
}

uint64_t sub_100007948()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x98LL))();
}

void (*sub_100007980(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((swift_isaMask & **v1) + 0xA0LL))();
  return sub_1000079E0;
}

void sub_1000079E0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t sub_100007A0C(uint64_t a1)
{
  uint64_t v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  uint64_t v3 = sub_100003288((uint64_t *)&unk_10007A850);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100008EF4, v5, v3);
}

uint64_t sub_100007A74(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007A928);
  uint64_t v11 = *(void *)(sub_100003288((uint64_t *)&unk_10007A850) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100008D5C(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_100007C84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100007CA0(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100007CA0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007A928);
  uint64_t v11 = *(void *)(sub_100003288((uint64_t *)&unk_10007A850) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100007E88(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  if (a2 >> 60 == 15)
  {
    uint64_t v11 = sub_10002FF44();
    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalid Public Token", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  else
  {
    uint64_t v17 = sub_100008EB0(a1, a2);
    if (IsAppleInternalBuild(v17))
    {
      uint64_t v18 = sub_10002FF44();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v18, v4);
      sub_100008EB0(a1, a2);
      uint64_t v19 = sub_100008EB0(a1, a2);
      unint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        unint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v26 = swift_slowAlloc(32LL, -1LL);
        uint64_t v28 = v26;
        *(_DWORD *)unint64_t v22 = 136315138;
        unint64_t v25 = v22 + 4;
        Swift::String v23 = Data.base64EncodedString(options:)(0LL);
        uint64_t v27 = sub_100003E68(v23._countAndFlagsBits, (unint64_t)v23._object, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v25, v22 + 12);
        swift_bridgeObjectRelease(v23._object);
        sub_100008B2C(a1, a2);
        sub_100008B2C(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "didReceivePublicToken: %s", v22, 0xCu);
        uint64_t v24 = v26;
        swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);

        sub_100008B2C(a1, a2);
      }

      else
      {
        sub_100008B2C(a1, a2);
        sub_100008B2C(a1, a2);
        sub_100008B40(a1, a2);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }

    else
    {
      return sub_100008B2C(a1, a2);
    }
  }

uint64_t sub_100008194( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  size_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - v17;
  if (a2 >> 60 != 15 && a4 && a6)
  {
    sub_100008E9C(a1, a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v19 = swift_bridgeObjectRetain(a6);
    if (IsAppleInternalBuild(v19))
    {
      uint64_t v20 = sub_10002FF44();
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v20, v12);
      sub_100008E9C(a1, a2);
      sub_100008E9C(a1, a2);
      swift_bridgeObjectRetain(a4);
      uint64_t v21 = swift_bridgeObjectRetain(a6);
      unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.default.getter();
      int v41 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc(32LL, -1LL);
        uint64_t v39 = a5;
        uint64_t v25 = v24;
        uint64_t v40 = swift_slowAlloc(96LL, -1LL);
        uint64_t v43 = v40;
        *(_DWORD *)uint64_t v25 = 136315650;
        uint64_t v36 = v25 + 4;
        Swift::String v26 = Data.base64EncodedString(options:)(0LL);
        os_log_t v38 = v22;
        uint64_t v42 = sub_100003E68(v26._countAndFlagsBits, (unint64_t)v26._object, &v43);
        id v37 = &v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v36, v25 + 12);
        swift_bridgeObjectRelease(v26._object);
        sub_100008B2C(a1, a2);
        sub_100008B2C(a1, a2);
        *(_WORD *)(v25 + 12) = 2080;
        swift_bridgeObjectRetain(a4);
        uint64_t v42 = sub_100003E68(a3, a4, &v43);
        uint64_t v27 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v37, v25 + 14, v25 + 22);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v25 + 22) = 2080;
        swift_bridgeObjectRetain(a6);
        uint64_t v42 = sub_100003E68(v39, a6, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v27, v25 + 24, v25 + 32);
        swift_bridgeObjectRelease_n(a6, 3LL);
        os_log_t v28 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  (os_log_type_t)v41,  "didReceiveToken: %s, for topic: %s, identifier: %s",  (uint8_t *)v25,  0x20u);
        uint64_t v29 = v40;
        swift_arrayDestroy(v40, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1LL, -1LL);
        swift_slowDealloc(v25, -1LL, -1LL);

        sub_100008B2C(a1, a2);
      }

      else
      {
        sub_100008B2C(a1, a2);
        sub_100008B2C(a1, a2);
        sub_100008B40(a1, a2);

        swift_bridgeObjectRelease_n(a6, 2LL);
        swift_bridgeObjectRelease_n(a4, 2LL);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }

    else
    {
      sub_100008B2C(a1, a2);
      swift_bridgeObjectRelease(a6);
      return swift_bridgeObjectRelease(a4);
    }
  }

  else
  {
    uint64_t v30 = sub_10002FF44();
    uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v30, v12);
    id v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Invalid APS data arguments", v34, 2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }

uint64_t sub_10000859C(void *a1)
{
  uint64_t v2 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - v11;
  if (a1)
  {
    id v13 = a1;
    uint64_t v14 = sub_10002FF44();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v14, v6);
    id v15 = v13;
    size_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int v41 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v42 = v18;
      uint64_t v43 = v7;
      *(_DWORD *)uint64_t v18 = 138412290;
      uint64_t v40 = v18 + 4;
      id v46 = v15;
      id v19 = v15;
      uint64_t v44 = v6;
      id v20 = v19;
      uint64_t v7 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v40, v18 + 12);
      uint64_t v21 = v41;
      void *v41 = a1;

      uint64_t v6 = v44;
      os_log_type_t v22 = v17;
      os_log_type_t v23 = v42;
      _os_log_impl((void *)&_mh_execute_header, v16, v22, "didReceive: message: %@", v42, 0xCu);
      uint64_t v24 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v21, 1LL, v24);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      size_t v16 = (os_log_s *)v15;
    }

    uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v32 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v45) + 0x90LL))(v31);
    uint64_t v33 = v32;
    uint64_t v34 = *(void *)(v32 + 16);
    if (v34)
    {
      uint64_t v35 = v32 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      uint64_t v36 = *(void *)(v3 + 72);
      do
      {
        sub_100008940(v35, (uint64_t)v5);
        sub_100008C88((uint64_t)v5, (uint64_t)&v46);
        sub_100008C08((uint64_t)v5);
        uint64_t v37 = v48;
        uint64_t v38 = v49;
        sub_100008E78(&v46, v48);
        (*(void (**)(id, uint64_t, uint64_t))(v38 + 8))(v15, v37, v38);
        sub_10000467C(&v46);
        v35 += v36;
        --v34;
      }

      while (v34);
    }

    return swift_bridgeObjectRelease(v33);
  }

  else
  {
    uint64_t v25 = sub_10002FF44();
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v25, v6);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalid message Token", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

uint64_t sub_100008918@<X0>(uint64_t a1@<X8>)
{
  return sub_100007324(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100008940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288((uint64_t *)&unk_10007A850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008988()
{
  uint64_t v1 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  uint64_t v7 = (void *)(v0 + v4);
  sub_10000467C(v7);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 28);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_release(*(void *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100008A30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288((uint64_t *)&unk_10007A850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008A78()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100003288((uint64_t *)&unk_10007A850) - 8) + 80LL);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v0 + ((v1 + 24) & ~v1);
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90LL))();
  v7[2] = v3;
  uint64_t v5 = sub_10000771C((uint64_t (*)(char *))sub_100008B84, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x98LL))(v5);
}

uint64_t sub_100008B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B24(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100008B2C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100008B40(result, a2);
  }
  return result;
}

uint64_t sub_100008B40(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

BOOL sub_100008B84(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v5 = sub_100008C48( &qword_10007A930,  (uint64_t *)&unk_10007A850,  (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_100008C08(uint64_t a1)
{
  uint64_t v2 = sub_100003288((uint64_t *)&unk_10007A850);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100008C48(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000064CC(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100008C88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100008CCC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100008CF0(uint64_t a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_1000074C8(a1);
  }

uint64_t sub_100008D5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_100003288((uint64_t *)&unk_10007A850) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100008E78(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100008E9C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100008EB0(result, a2);
  }
  return result;
}

uint64_t sub_100008EB0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100008EF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008918(a1);
}

uint64_t sub_100008F08()
{
  uint64_t v9 = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  return sub_100008FD8((uint64_t)&v9, (uint64_t)&v18);
}

uint64_t sub_100008FD8(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  char v2 = sub_100008E78(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  char v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_100009090(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1000091D0((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_100009150((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_10000467C(v8);
  return v6;
}

uint64_t sub_100009090(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100009150(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000091D0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

unint64_t sub_100009248()
{
  uint64_t v1 = swift_bridgeObjectRelease(0xE000000000000000LL);
  char v2 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 112LL))(v1);
  BOOL v3 = (v2 & 1) == 0;
  if ((v2 & 1) != 0) {
    uint64_t v4 = 1702195828LL;
  }
  else {
    uint64_t v4 = 0x65736C6166LL;
  }
  if (v3) {
    unint64_t v5 = 0xE500000000000000LL;
  }
  else {
    unint64_t v5 = 0xE400000000000000LL;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  v7._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v7._object = (void *)0x80000001000669D0LL;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(0x80000001000669D0LL);
  v8._uint64_t countAndFlagsBits = 10LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0xD00000000000001DLL;
}

uint64_t sub_10000933C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  OS_dispatch_queue.sync<A>(execute:)(sub_100009530, v0, &type metadata for Bool);
  uint64_t v10 = v21[15];
  sub_10000E488(0, 1);
  if ((_DWORD)v10 == 1)
  {
    double v12 = v11;
    if (v11 > 0.0)
    {
      uint64_t v13 = static Date.now.getter();
      double v14 = Date.timeIntervalSince1970.getter(v13);
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
      if (v12 >= v14)
      {
        return 1LL;
      }

      else
      {
        uint64_t v15 = sub_10002FFC8();
        uint64_t v16 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
        char v17 = (os_log_s *)Logger.logObject.getter(v16);
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          id v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Audio accessory limited logging expired", v19, 2u);
          swift_slowDealloc(v19, -1LL, -1LL);
        }

        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
        (*(void (**)(void))(*(void *)v1 + 120LL))(0LL);
        return 0LL;
      }
    }
  }

  return v10;
}

void sub_100009530(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled);
}

uint64_t sub_100009544(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue);
  uint64_t v11 = swift_allocObject(&unk_100071858, 32LL, 7LL);
  *(_BYTE *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v11 + 24) = v1;
  aBlock[4] = sub_10000AE98;
  uint64_t v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  aBlock[3] = &unk_100071870;
  double v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v13);
  id v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v16 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v21);
}

uint64_t sub_100009738(char a1, uint64_t a2)
{
  int v4 = a1 & 1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(unsigned __int8 *)(a2 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled) != v4)
  {
    uint64_t v41 = OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled;
    sub_10000E488(0, 1);
    if ((a1 & 1) != 0
      && ((double v19 = v18, v18 <= 0.0)
       || (uint64_t v20 = static Date.now.getter(v17),
           double v21 = Date.timeIntervalSince1970.getter(v20),
           (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12),
           v19 >= v21)))
    {
      uint64_t v32 = sub_10002FFC8();
      uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v32, v5);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Start audio accessory limited logging", v36, 2u);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      *((void *)&v43 + 1) = &type metadata for Bool;
      LOBYTE(v42) = 1;
      sub_10000ECA4((uint64_t)&off_1000717F8, (uint64_t)&v42, 0);
      sub_10000B4A8((uint64_t)&v42, &qword_10007A7A0);
      if (v19 <= 0.0)
      {
        uint64_t v37 = sub_100009B1C((uint64_t)v16);
        double v19 = Date.timeIntervalSince1970.getter(v37);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      }

      *((void *)&v43 + 1) = &type metadata for Double;
      *(double *)&__int128 v42 = v19;
      char v31 = 1;
      sub_10000EDB8(0LL, (uint64_t)&v42, 1);
      sub_10000B4A8((uint64_t)&v42, &qword_10007A7A0);
      uint64_t v27 = *sub_10005263C();
      swift_retain(v27);
      uint64_t v38 = sub_10000BEB0(0);
      uint64_t v30 = v39;
      (*(void (**)(uint64_t, double))(*(void *)v27 + 168LL))(v38, v19);
    }

    else
    {
      uint64_t v22 = sub_10002FFC8();
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v22, v5);
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Stop Audio Accessory Limited Logging", v26, 2u);
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      *((void *)&v43 + 1) = &type metadata for Bool;
      LOBYTE(v42) = 0;
      sub_10000ECA4((uint64_t)&off_100071820, (uint64_t)&v42, 0);
      sub_10000B4A8((uint64_t)&v42, &qword_10007A7A0);
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      sub_10000EDB8(0LL, (uint64_t)&v42, 1);
      sub_10000B4A8((uint64_t)&v42, &qword_10007A7A0);
      uint64_t v27 = *sub_10005263C();
      swift_retain(v27);
      uint64_t v28 = sub_10000BEB0(0);
      uint64_t v30 = v29;
      (*(void (**)(uint64_t))(*(void *)v27 + 176LL))(v28);
      char v31 = 0;
    }

    swift_release(v27);
    swift_bridgeObjectRelease(v30);
    *(_BYTE *)(a2 + v41) = v31;
    return notify_post("com.apple.bluetoothuser.settingsChanged");
  }

  return result;
}

uint64_t sub_100009B1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000E488(2, 2);
  double v11 = v10;
  uint64_t v12 = sub_10002FFC8();
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v27 = a1;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v16 = 136315138;
    if (v11 <= 0.0)
    {
      unint64_t v19 = 0xE700000000000000LL;
      uint64_t v18 = 0x746C7561666564LL;
    }

    else
    {
      uint64_t v28 = 0LL;
      unint64_t v29 = 0xE000000000000000LL;
      v17._uint64_t countAndFlagsBits = 0x656469727265766FLL;
      v17._object = (void *)0xE900000000000020LL;
      String.append(_:)(v17);
      Double.write<A>(to:)( &v28,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v11);
      uint64_t v18 = v28;
      unint64_t v19 = v29;
    }

    uint64_t v25 = v6;
    uint64_t v28 = sub_100003E68(v18, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Requesting %s expiration interval", v16, 0xCu);
    uint64_t v21 = v26;
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  }

  else
  {

    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t v22 = static Date.now.getter(v20);
  v23.n128_u64[0] = 0x4115180000000000LL;
  if (v11 > 0.0) {
    v23.n128_f64[0] = v11;
  }
  Date.advanced(by:)(v22, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t (*sub_100009DD0(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10000933C() & 1;
  return sub_100009E08;
}

uint64_t sub_100009E08(uint64_t a1)
{
  return sub_100009544(*(_BYTE *)(a1 + 8));
}

uint64_t sub_100009E2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003288(&qword_10007A9B8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v36 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  os_log_type_t v35 = (char *)&v32 - v5;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  __chkstk_darwin(v9);
  double v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10002FFC8();
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Activate Debug Manager", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v40 = sub_10000AEFC;
  uint64_t v41 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  uint64_t v39 = &unk_100071898;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v25 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v24, v25, v6, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
  swift_release(v41);
  uint64_t v26 = *sub_10005263C();
  uint64_t v39 = (void *)type metadata accessor for DebugManager(0LL);
  uint64_t v40 = (uint64_t (*)())&off_1000718F8;
  aBlock[0] = v1;
  swift_retain(v1);
  swift_retain(v26);
  uint64_t v27 = (uint64_t)v35;
  sub_100054024((uint64_t)aBlock);
  swift_release(v26);
  sub_10000467C(aBlock);
  uint64_t v28 = sub_100003288(&qword_10007A9B0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v27, 0LL, 1LL, v28);
  uint64_t v29 = v36;
  sub_100003420(v27, v36, &qword_10007A9B8);
  uint64_t v30 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  swift_beginAccess(v30, aBlock, 33LL, 0LL);
  sub_10000AF3C(v29, v30);
  return swift_endAccess(aBlock);
}

uint64_t sub_10000A1EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003288(&qword_10007A9B8);
  __chkstk_darwin(v2);
  uint64_t v4 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = sub_100003288(&qword_10007A9B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = sub_10002FFC8();
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  os_log_type_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v27 = v8;
    uint64_t v18 = v6;
    uint64_t v19 = v5;
    uint64_t v20 = v1;
    uint64_t v21 = v17;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalidate Debug Manager", v17, 2u);
    uint64_t v22 = v21;
    uint64_t v1 = v20;
    uint64_t v5 = v19;
    uint64_t v6 = v18;
    uint64_t v8 = v27;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v23 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription, v28, 0LL, 0LL);
  sub_10000AF84(v23, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    uint64_t v24 = &qword_10007A9B8;
    uint64_t v25 = (uint64_t)v4;
  }

  else
  {
    sub_100003420((uint64_t)v4, (uint64_t)v8, &qword_10007A9B0);
    Subscription.unsubscribe(completion:)((uint64_t)Transaction.capture(), 0LL, v5);
    uint64_t v25 = (uint64_t)v8;
    uint64_t v24 = &qword_10007A9B0;
  }

  return sub_10000B4A8(v25, v24);
}

uint64_t sub_10000A428()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue);
  aBlock[4] = sub_10000AEFC;
  uint64_t v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_1000718C0;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  os_log_type_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v13 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_10000A5FC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10000A644()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_10000A678();
  return v1;
}

uint64_t sub_10000A678()
{
  uint64_t v1 = v0;
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v2 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  uint64_t v12 = sub_100003288(&qword_10007A9B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v20 = OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue;
  unint64_t v13 = sub_100004600();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v15 = sub_100003288((uint64_t *)&unk_10007A810);
  uint64_t v16 = sub_10000AEBC((unint64_t *)&qword_10007ACF0, (uint64_t *)&unk_10007A810);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v15, v16, v5, v14);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v21);
  uint64_t v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000027LL,  0x8000000100066A00LL,  v10,  v7,  v4,  0LL);
  *(void *)(v1 + v20) = v17;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled) = 0;
  return v1;
}

uint64_t sub_10000A888()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))();
}

uint64_t sub_10000A8B4(int a1)
{
  return sub_10000AFCC(a1);
}

uint64_t sub_10000A8D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v66 = a3;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v67 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v60 - v16;
  uint64_t v18 = type metadata accessor for SystemNotificationSource(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000B31C(a1, (uint64_t)v20);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 2LL, v11))
  {
    v67 = v15;
    uint64_t v64 = v5;
    uint64_t v30 = v17;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v20, v11);
    uint64_t v32 = sub_10000BEB0(0);
    uint64_t v33 = v31;
    uint64_t v34 = v11;
    unint64_t v35 = v66;
    uint64_t v36 = a2;
    if (v32 == a2 && v31 == v66)
    {
      uint64_t v37 = v12;
      swift_bridgeObjectRelease(v66);
    }

    else
    {
      uint64_t v37 = v12;
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v66, v32, v31, 0LL);
      swift_bridgeObjectRelease(v33);
      if ((v39 & 1) == 0)
      {
        v58 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
        return v58(v30, v34);
      }
    }

    uint64_t v40 = sub_10002FFC8();
    uint64_t v41 = v6;
    __int128 v42 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    __int128 v43 = v10;
    uint64_t v44 = v64;
    v42(v10, v40, v64);
    uint64_t v45 = v37;
    id v46 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    uint64_t v47 = v67;
    v46(v67, v30, v34);
    uint64_t v48 = swift_bridgeObjectRetain_n(v35, 2LL);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.default.getter();
    int v63 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc(22LL, -1LL);
      uint64_t v61 = v45;
      uint64_t v52 = v51;
      uint64_t v53 = swift_slowAlloc(64LL, -1LL);
      uint64_t v69 = v53;
      *(_DWORD *)uint64_t v52 = 136315394;
      os_log_t v60 = v49;
      swift_bridgeObjectRetain(v35);
      uint64_t v68 = sub_100003E68(v36, v35, &v69);
      uint64_t v62 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease_n(v35, 3LL);
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v54 = sub_10000662C( &qword_10007A9C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v34, v54);
      unint64_t v57 = v56;
      uint64_t v68 = sub_100003E68(v55, v56, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease(v57);
      v58 = *(uint64_t (**)(char *, uint64_t))(v61 + 8);
      v58(v47, v34);
      os_log_t v59 = v60;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  (os_log_type_t)v63,  "Received alarm from name: %s at %s",  (uint8_t *)v52,  0x16u);
      swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v64);
    }

    else
    {
      swift_bridgeObjectRelease_n(v35, 2LL);
      v58 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
      v58(v47, v34);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
    }

    (*(void (**)(void))(*(void *)v65 + 120LL))(0LL);
    return v58(v30, v34);
  }

  uint64_t v65 = a2;
  uint64_t v21 = sub_10002FFC8();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v67, v21, v5);
  unint64_t v22 = v66;
  uint64_t v23 = swift_bridgeObjectRetain_n(v66, 2LL);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = v5;
    uint64_t v27 = v6;
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v69 = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    swift_bridgeObjectRetain(v22);
    uint64_t v68 = sub_100003E68(v65, v22, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(v22, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received notification from name: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v67, v26);
  }

  else
  {

    swift_bridgeObjectRelease_n(v22, 2LL);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v67, v5);
  }

  return sub_10000B360((uint64_t)v20);
}

uint64_t sub_10000AE54(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10000A8D4(a1, a2, a3);
}

uint64_t sub_10000AE74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000AE98()
{
  return sub_100009738(*(_BYTE *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000AEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000AEB4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000AEBC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000064CC(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for DebugManager(uint64_t a1)
{
  uint64_t result = qword_10007D150;
  if (!qword_10007D150) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugManager);
  }
  return result;
}

uint64_t sub_10000AF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007A9B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000AF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007A9B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000AFCC(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  __chkstk_darwin(v8);
  char v39 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10002FFC8();
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    LODWORD(v35) = a1;
    uint64_t v18 = swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = v4;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = v5;
    uint64_t v21 = v20;
    aBlock[0] = v20;
    uint64_t v36 = v7;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v22 = sub_10000B4FC(v35);
    uint64_t v35 = v2;
    unint64_t v24 = v23;
    __int128 v42 = (void *)sub_100003E68(v22, v23, aBlock);
    uint64_t v7 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, aBlock, v19 + 4, v19 + 12);
    unint64_t v25 = v24;
    uint64_t v2 = v35;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "keyValueChanged source: %s", v19, 0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v21;
    uint64_t v5 = v37;
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v19;
    uint64_t v4 = v38;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  aBlock[4] = (uint64_t)sub_10000AEFC;
  uint64_t v44 = v2;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100005A3C;
  void aBlock[3] = (uint64_t)&unk_100071908;
  uint64_t v28 = _Block_copy(aBlock);
  uint64_t v29 = swift_retain(v2);
  uint64_t v30 = v39;
  static DispatchQoS.unspecified.getter(v29);
  __int128 v42 = _swiftEmptyArrayStorage;
  uint64_t v31 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v32 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v33 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v32, v33, v4, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v30, v7, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v41);
  return swift_release(v44);
}

uint64_t sub_10000B31C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemNotificationSource(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B360(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SystemNotificationSource(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000B39C()
{
  return type metadata accessor for DebugManager(0LL);
}

void sub_10000B3A4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_100060B10;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_10000B428(uint64_t a1)
{
  if (!qword_10007ADC0)
  {
    uint64_t v2 = sub_1000064CC(&qword_10007A9B0);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10007ADC0);
    }
  }

uint64_t sub_10000B480()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))(v1 & 1);
}

uint64_t sub_10000B4A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003288(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10000B4FC(char a1)
{
  return *(void *)&aCloud_1[8 * a1];
}

uint64_t sub_10000B51C(char *a1, char *a2)
{
  return sub_10000B6A8(*a1, *a2);
}

void sub_10000B528(char a1)
{
  __asm { BR              X11 }

uint64_t sub_10000B574(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10000B5F4 + 4 * byte_100060B37[a2]))(a3 + 10);
}

uint64_t sub_10000B5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 10;
  unint64_t v5 = 0x8000000100066B50LL;
  if (a1 == v4 && v3 == 0x8000000100066B50LL)
  {
    char v6 = 1;
    unint64_t v5 = v3;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v4, 0x8000000100066B50LL, 0LL);
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

uint64_t sub_10000B6A8(char a1, char a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)&aCloud_1[v2 * 8];
  uint64_t v4 = qword_100060E58[v2];
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)&aCloud_1[v5 * 8];
  uint64_t v7 = qword_100060E58[v5];
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_100060E58[a2], 0LL);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

unint64_t sub_10000B72C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10000F6E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000B758@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10000B4FC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_10000B780()
{
  return sub_10000B788(*v0);
}

Swift::Int sub_10000B788(char a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = qword_100060E58[v2];
  String.hash(into:)(v5, *(void *)&aCloud_1[v2 * 8], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10000B7F0(uint64_t a1)
{
  return sub_10000B8B4(a1, *v1);
}

void sub_10000B7F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10000B83C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(0x8000000100066B50LL);
}

uint64_t sub_10000B8B4(uint64_t a1, char a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = qword_100060E58[v2];
  String.hash(into:)(a1, *(void *)&aCloud_1[v2 * 8], v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10000B8F4(uint64_t a1)
{
  return sub_10000B8FC(a1, *v1);
}

Swift::Int sub_10000B8FC(uint64_t a1, char a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = qword_100060E58[v3];
  String.hash(into:)(v6, *(void *)&aCloud_1[v3 * 8], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10000B960(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10000B9B4()
{
  return Hasher._finalize()();
}

uint64_t sub_10000BA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100010A14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10000BAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100010A14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10000BAF0(void *a1@<X8>)
{
  *a1 = &off_1000719C8;
}

void *sub_10000BB00()
{
  return &unk_100071950;
}

id sub_10000BB0C()
{
  return *(id *)(v0 + 16);
}

void sub_10000BB3C(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
}

uint64_t (*sub_10000BB80(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10000BBBC()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t sub_10000BBF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_10000BC34(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10000BC70()
{
  uint64_t v1 = (void *)v0[6];
  if (!v1)
  {
    (*(void (**)(void))(*v0 + 120LL))();
    sub_10000F35C(0, 7LL, 0);
    __asm { BR              X9 }
  }

  uint64_t v2 = v0[6];
  id v3 = v1;
  return v2;
}

uint64_t sub_10000BEB0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10000BEE8 + 4 * byte_100060B53[a1]))( 0xD00000000000001BLL,  0x8000000100066B30LL);
}

uint64_t sub_10000BEE8(uint64_t a1)
{
  return a1 + 10;
}

uint64_t sub_10000BF4C(int a1, uint64_t a2, uint64_t a3)
{
  int v40 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  uint64_t v37 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  uint64_t v34 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a3 + 16;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain(a2);
    swift_beginAccess(v9, v46, 0LL, 0LL);
    uint64_t v32 = a2;
    uint64_t v11 = (uint64_t *)(a2 + 40);
    uint64_t v33 = v9;
    uint64_t v12 = v34;
    uint64_t v13 = v39;
    do
    {
      uint64_t v14 = *(v11 - 1);
      uint64_t v15 = *v11;
      uint64_t Strong = swift_weakLoadStrong(v9);
      if (Strong)
      {
        uint64_t v17 = Strong;
        uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)Strong + 120LL);
        uint64_t v19 = swift_bridgeObjectRetain(v15);
        uint64_t v42 = v18(v19);
        uint64_t v20 = swift_allocObject(&unk_100071CD8, 24LL, 7LL);
        swift_weakInit(v20 + 16, v17);
        uint64_t v21 = swift_allocObject(&unk_100071D50, 48LL, 7LL);
        *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
        *(_BYTE *)(v21 + 24) = v40;
        *(void *)(v21 + 32) = v14;
        *(void *)(v21 + 4sub_10000DC70(0, 0) = v15;
        uint64_t v41 = v15;
        aBlock[4] = sub_100010C04;
        uint64_t v45 = v21;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_100005A3C;
        void aBlock[3] = &unk_100071D68;
        uint64_t v22 = _Block_copy(aBlock);
        swift_bridgeObjectRetain(v15);
        uint64_t v23 = swift_retain(v20);
        static DispatchQoS.unspecified.getter(v23);
        __int128 v43 = _swiftEmptyArrayStorage;
        uint64_t v24 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v25 = sub_100003288((uint64_t *)&unk_10007A860);
        uint64_t v26 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v27 = v37;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v25, v26, v13, v24);
        uint64_t v28 = (void *)v42;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v27, v22);
        _Block_release(v22);

        (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v13);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v36);
        swift_release(v45);
        uint64_t v29 = v20;
        uint64_t v9 = v33;
        swift_release(v29);
        swift_bridgeObjectRelease(v41);
        swift_release(v17);
      }

      v11 += 2;
      --v10;
    }

    while (v10);
    swift_bridgeObjectRelease(v32);
    return notify_post("com.apple.bluetoothuser.prefsChanged");
  }

  else
  {
    swift_beginAccess(v9, aBlock, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v9);
    if (result)
    {
      uint64_t v31 = result;
      sub_10000C50C(v40, 0LL, 0LL);
      return swift_release(v31);
    }
  }

  return result;
}

void sub_10000C28C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = a1;
}

void (*sub_10000C298(uint64_t *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10000BC70();
  return sub_10000C2CC;
}

void sub_10000C2CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = v2;
}

void sub_10000C2DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10002FF10();
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Activate KeyValueStoreManager", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 192LL))(v11);
  (*(void (**)(void))((swift_isaMask & *v12) + 0xD8LL))();
}

void sub_10000C414(char a1)
{
  uint64_t v2 = v1;
  if ((a1 & 1) != 0)
  {
    if ((v1[40] & 1) != 0) {
      return;
    }
    char v3 = 1;
    uint64_t v4 = 29LL;
  }

  else
  {
    if (!v1[40]) {
      return;
    }
    char v3 = 0;
    uint64_t v4 = 30LL;
  }

  uint64_t v5 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 192LL))();
  (*(void (**)(void))((swift_isaMask & *v5) + 8 * v4))();

  v2[40] = v3;
}

uint64_t sub_10000C494()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
  (*(void (**)(void))((swift_isaMask & *v2) + 0xE0LL))();

  swift_bridgeObjectRelease(*(void *)(v1 + 32));
  return swift_deallocClassInstance(v1, 56LL, 7LL);
}

uint64_t sub_10000C50C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v24 - 8);
  uint64_t v11 = __chkstk_darwin(v24);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v11);
  uint64_t v15 = swift_allocObject(&unk_100071CD8, 24LL, 7LL);
  swift_weakInit(v15 + 16, v3);
  uint64_t v16 = swift_allocObject(&unk_100071D00, 48LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(_BYTE *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(void *)(v16 + 4sub_10000DC70(0, 0) = a3;
  aBlock[4] = sub_100010A04;
  uint64_t v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100071D18;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v21 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v24);
  swift_release(v28);
  return swift_release(v15);
}

uint64_t sub_10000C74C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = result;
    sub_10000C7C4(a2, a3, a4);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_10000C7C4(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unsigned int v29 = a1;
  uint64_t v7 = sub_100003288(&qword_10007AAE0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = 0LL;
  uint64_t v11 = *(dispatch_queue_s **)(v4 + 24);
  unint64_t v12 = swift_allocObject(&unk_100071C60, 32LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = &v36;
  *(void *)(v12 + 24) = v4;
  uint64_t v13 = swift_allocObject(&unk_100071C88, 32LL, 7LL);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100010978;
  *(void *)(v13 + 24) = v12;
  uint64_t v34 = sub_1000109BC;
  uint64_t v35 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CA9C;
  uint64_t v33 = &unk_100071CA0;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v35;
  swift_retain(v4);
  swift_retain(v13);
  swift_release(v15);
  dispatch_sync(v11, v14);
  _Block_release(v14);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 122LL, 83LL, 32LL, 1LL);
  swift_release(v13);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    goto LABEL_12;
  }
  unint64_t v30 = v12;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)sub_10000F040(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v12 = *(void *)(isEscapingClosureAtFileLocation + 16);
    unint64_t v17 = *(void *)(isEscapingClosureAtFileLocation + 24);
    uint64_t v11 = (dispatch_queue_s *)(v12 + 1);
    if (v12 >= v17 >> 1) {
      goto LABEL_13;
    }
    while (1)
    {
      *(void *)(isEscapingClosureAtFileLocation + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
      unint64_t v17 = isEscapingClosureAtFileLocation + 16 * v12;
      *(void *)(v17 + 32) = a2;
      *(void *)(v17 + 4sub_10000DC70(0, 0) = a3;
      uint64_t v18 = v36;
      if (v36) {
        break;
      }
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      uint64_t isEscapingClosureAtFileLocation = (uint64_t)sub_10000F040( (void *)(v17 > 1),  (int64_t)v11,  1,  (void *)isEscapingClosureAtFileLocation);
    }
  }

  else
  {
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v18 = v36;
    if (!v36) {
      goto LABEL_11;
    }
  }

  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v31 = *(void *)(v8 + 72);
    uint64_t v28 = v18;
    swift_bridgeObjectRetain(v18);
    uint64_t v21 = v29;
    do
    {
      sub_100010A90(v20, (uint64_t)v10, &qword_10007AAE0);
      sub_100008C88((uint64_t)v10, (uint64_t)aBlock);
      sub_10000B4A8((uint64_t)v10, &qword_10007AAE0);
      uint64_t v22 = v33;
      uint64_t v23 = v34;
      sub_100008E78(aBlock, (uint64_t)v33);
      uint64_t v24 = (void (*)(uint64_t, uint64_t, void *, uint64_t (*)()))*((void *)v23 + 1);
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      v24(v21, isEscapingClosureAtFileLocation, v22, v23);
      swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
      sub_10000467C(aBlock);
      v20 += v31;
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease(v28);
  }

  swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
  uint64_t v25 = v36;
  swift_release(v30);
  return swift_bridgeObjectRelease(v25);
}

uint64_t sub_10000CA9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10000CABC()
{
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  sub_10000CAF0();
  return v1;
}

uint64_t sub_10000CAF0()
{
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v0 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100010A58(0LL, (unint64_t *)&qword_10007A800, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v9 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = v9;
  uint64_t v10 = sub_100003288((uint64_t *)&unk_10007A810);
  uint64_t v21 = v10;
  uint64_t v11 = sub_100008C48( (unint64_t *)&qword_10007ACF0,  (uint64_t *)&unk_10007A810,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v10, v11, v3, v9);
  uint64_t v12 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 104);
  uint64_t v14 = v2;
  uint64_t v15 = v2;
  uint64_t v16 = v23;
  v13(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v23);
  uint64_t v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000022LL,  0x8000000100066C50LL,  v8,  v5,  v14,  0LL);
  uint64_t v18 = v24;
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v25 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v11, v3, v22);
  v13(v14, v12, v16);
  *(void *)(v18 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000028LL,  0x8000000100066C80LL,  v8,  v5,  v14,  0LL);
  *(void *)(v18 + 32) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v18 + 4sub_10000DC70(0, 0) = 0;
  *(void *)(v18 + 48) = 0LL;
  return v18;
}

uint64_t sub_10000CD7C(uint64_t a1)
{
  v3[2] = a1;
  uint64_t v1 = sub_100003288(&qword_10007AAE0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10000F72C, v3, v1);
}

uint64_t sub_10000CDDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100003288(&qword_10007AAE0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100008C88(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject(&unk_100071CD8, 24LL, 7LL);
  swift_weakInit(v10 + 16, a2);
  uint64_t v11 = sub_100003288(&qword_10007ACB8);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_100010B58, v10, v11, a3);
  sub_100010A90(a3, (uint64_t)v9, &qword_10007AAE0);
  uint64_t v12 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)a2 + 160LL))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_10000F14C(0, *(void *)(v15 + 16) + 1LL, 1, v15);
    unint64_t *v14 = v15;
  }

  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_10000F14C(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }

  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v18 + 1;
  sub_10000F7FC( (uint64_t)v9,  v15 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v18);
  return v12(v21, 0LL);
}

uint64_t sub_10000CF78(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003288(&qword_10007AAE0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v21 = *(void *)(v1 + 24);
  sub_100010A90(a1, (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), &qword_10007AAE0);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_100071AF0, v13 + v11, v12 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  sub_10000F7FC((uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v14 + v13);
  aBlock[4] = sub_10000F844;
  uint64_t v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100071B08;
  unint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v19 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
  return swift_release(v26);
}

uint64_t sub_10000D1D4(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100003288(&qword_10007AAE0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0LL;
    unint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_100010A90(a3 + v16 + (void)v13 * v14, (uint64_t)v12, &qword_10007AAE0);
      char v17 = a1(v12);
      if (v3)
      {
        sub_10000B4A8((uint64_t)v12, &qword_10007AAE0);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }

      if ((v17 & 1) != 0)
      {
        sub_10000F7FC((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          sub_10000F378(0, v15[2] + 1LL, 1);
        }
        unint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_10000F378(v18 > 1, v19 + 1, 1);
          unint64_t v15 = v25;
        }

        v15[2] = v19 + 1;
        uint64_t result = sub_10000F7FC(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }

      else
      {
        uint64_t result = sub_10000B4A8((uint64_t)v12, &qword_10007AAE0);
      }

      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }

  return result;
}

uint64_t sub_10000D3E0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))();
}

uint64_t sub_10000D408()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

void (*sub_10000D430(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 160LL))();
  return sub_1000079E0;
}

uint64_t sub_10000D480(uint64_t a1)
{
  uint64_t v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  uint64_t v3 = sub_100003288(&qword_10007AAE0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100010C20, v5, v3);
}

void sub_10000D4E0(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_10000D528@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return swift_bridgeObjectRelease(0x8000000100066B50LL);
}

uint64_t sub_10000D5A0@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v70 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v69 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional(0LL, a4);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v64 - v15;
  uint64_t v71 = *(void *)(a4 - 8);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v66 = v10;
      uint64_t v68 = a5;
      uint64_t v67 = a4;
      unint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
      uint64_t v20 = sub_100003288((uint64_t *)&unk_10007B530);
      uint64_t v21 = swift_allocObject(v20, 48LL, 7LL);
      *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060880;
      *(void *)(v21 + 32) = a1;
      *(void *)(v21 + 4sub_10000DC70(0, 0) = a2;
      swift_bridgeObjectRetain(a2);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v21);
      *(void *)&v75[0] = 0LL;
      id v23 = [v19 readPrefKeys:isa error:v75];

      uint64_t v24 = *(void **)&v75[0];
      if (v23)
      {
        uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v23,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
        id v26 = v24;

        *(void *)&__int128 v76 = a1;
        *((void *)&v76 + 1) = a2;
        swift_bridgeObjectRetain(a2);
        AnyHashable.init<A>(_:)(&v76, &type metadata for String, &protocol witness table for String);
        uint64_t v27 = v68;
        if (*(void *)(v25 + 16))
        {
          unint64_t v28 = sub_1000060CC((uint64_t)v75);
          uint64_t v29 = v67;
          uint64_t v30 = v71;
          if ((v31 & 1) != 0)
          {
            sub_10000469C(*(void *)(v25 + 56) + 32 * v28, (uint64_t)&v76);
          }

          else
          {
            __int128 v76 = 0u;
            __int128 v77 = 0u;
          }
        }

        else
        {
          __int128 v76 = 0u;
          __int128 v77 = 0u;
          uint64_t v29 = v67;
          uint64_t v30 = v71;
        }

        swift_bridgeObjectRelease(v25);
        sub_1000062FC((uint64_t)v75);
        uint64_t v58 = sub_100003288(&qword_10007A7A0);
        char v59 = swift_dynamicCast(v16, &v76, v58, v29, 6LL);
        os_log_t v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
        if ((v59 & 1) != 0)
        {
          v60(v16, 0LL, 1LL, v29);
          uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
          v61(v18, v16, v29);
          v61(v27, v18, v29);
          uint64_t v62 = v27;
          uint64_t v63 = 0LL;
        }

        else
        {
          v60(v16, 1LL, 1LL, v29);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
          uint64_t v62 = v27;
          uint64_t v63 = 1LL;
        }

        return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v60)(v62, v63, 1LL, v29);
      }

      else
      {
        id v41 = *(id *)&v75[0];
        uint64_t v42 = _convertNSErrorToError(_:)(v24);

        swift_willThrow();
        uint64_t v43 = sub_100030144();
        uint64_t v44 = v70;
        uint64_t v45 = v69;
        uint64_t v46 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v43, v66);
        swift_bridgeObjectRetain(a2);
        swift_errorRetain(v42);
        swift_bridgeObjectRetain(a2);
        uint64_t v47 = swift_errorRetain(v42);
        uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
        os_log_type_t v49 = static os_log_type_t.error.getter();
        BOOL v50 = os_log_type_enabled(v48, v49);
        uint64_t v51 = v68;
        if (v50)
        {
          uint64_t v52 = swift_slowAlloc(22LL, -1LL);
          uint64_t v65 = swift_slowAlloc(64LL, -1LL);
          *(void *)&v75[0] = v65;
          *(_DWORD *)uint64_t v52 = 136315394;
          swift_bridgeObjectRetain(a2);
          *(void *)&__int128 v76 = sub_100003E68(a1, a2, (uint64_t *)v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, (char *)&v76 + 8, v52 + 4, v52 + 12);
          swift_bridgeObjectRelease_n(a2, 3LL);
          *(_WORD *)(v52 + 12) = 2080;
          swift_getErrorValue(v42, v73, v72);
          uint64_t v53 = Error.localizedDescription.getter(v72[1], v72[2]);
          unint64_t v55 = v54;
          *(void *)&__int128 v76 = sub_100003E68(v53, v54, (uint64_t *)v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, (char *)&v76 + 8, v52 + 14, v52 + 22);
          unint64_t v56 = v55;
          uint64_t v51 = v68;
          swift_bridgeObjectRelease(v56);
          swift_errorRelease(v42);
          swift_errorRelease(v42);
          _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Unable to get value for key: %s due to: %s",  (uint8_t *)v52,  0x16u);
          uint64_t v57 = v65;
          swift_arrayDestroy(v65, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1LL, -1LL);
          swift_slowDealloc(v52, -1LL, -1LL);

          swift_errorRelease(v42);
        }

        else
        {
          swift_errorRelease(v42);
          swift_bridgeObjectRelease_n(a2, 2LL);
          swift_errorRelease(v42);
          swift_errorRelease(v42);
        }

        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56))(v51, 1LL, 1LL, v67);
      }
    }

    id v33 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v34 = String._bridgeToObjectiveC()();
    id v35 = [v33 valueForKey:v34];
  }

  else
  {
    uint64_t v32 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess(v32, v74, 0LL, 0LL);
    id v33 = (id)*v32;
    NSString v34 = String._bridgeToObjectiveC()();
    id v35 = [v33 objectForKey:v34];
  }

  id v36 = v35;

  if (v36)
  {
    _bridgeAnyObjectToAny(_:)(&v76, v36);
    swift_unknownObjectRelease(v36);
    sub_100006330(&v76, v75);
  }

  else
  {
    memset(v75, 0, 32);
  }

  uint64_t v37 = v71;
  uint64_t v38 = sub_100003288(&qword_10007A7A0);
  int v39 = swift_dynamicCast(a5, v75, v38, a4, 6LL);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(a5, v39 ^ 1u, 1LL, a4);
}

void sub_10000DC70(char a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v4);
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v5 = sub_100003288((uint64_t *)&unk_10007B530);
      *(_OWORD *)(swift_allocObject(v5, 48LL, 7LL) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060880;
      __asm { BR              X10 }
    }

    id v7 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    __asm { BR              X10 }
  }

  uint64_t v6 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
  swift_beginAccess(v6, v8, 0LL, 0LL);
  __asm { BR              X11 }

void sub_10000DE20()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066B50LL);
  [v0 BOOLForKey:v1];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000DE30()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v1 + 19;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066B80LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 168) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 168];

  id v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000DF44LL);
}

void sub_10000DE40()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v1 + 7;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066BB0LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 168) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 168];

  id v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000DF44LL);
}

void sub_10000DE50()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066BE0LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 168) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 168];

  id v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000DF44LL);
}

void sub_10000DE5C()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v1 + 7;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066C00LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 168) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 168];

  id v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000DF44LL);
}

void sub_10000DE6C()
{
}

void sub_10000DF34()
{
  *(void *)(v3 - 224) = v2 + 10;
  *(void *)(v3 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100066B50LL;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (unint64_t v4 = sub_1000060CC(v3 - 168), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 128);
  }

  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 168);
  if (*(void *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6LL) & 1) != 0) {
      JUMPOUT(0x10000E3BCLL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 128, &qword_10007A7A0);
  }

  JUMPOUT(0x10000E3B8LL);
}

void sub_10000E004()
{
  *(void *)(v4 - 128) = sub_100003E68(v1 + 10, 0x8000000100066B50LL, (uint64_t *)(v4 - 168));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066B50LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 200), *(void *)(v4 - 192));
  unint64_t v7 = v6;
  *(void *)(v4 - 128) = sub_100003E68(v5, v6, (uint64_t *)(v4 - 168));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 228),  "Unable to get BOOL for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 240);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000E3A8LL);
}

void sub_10000E034(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066B80LL);
  [v1 BOOLForKey:v2];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E044(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BB0LL);
  [v1 BOOLForKey:v2];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E054(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BE0LL);
  [v1 BOOLForKey:v2];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E060(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066C00LL);
  [v1 BOOLForKey:v2];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E070()
{
}

void sub_10000E0C8()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066B80LL);
  [v0 BOOLForKey:v1];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E0D8()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BB0LL);
  [v0 BOOLForKey:v1];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E0E8()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BE0LL);
  [v0 BOOLForKey:v1];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E0F4()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066C00LL);
  [v0 BOOLForKey:v1];

  JUMPOUT(0x10000E3BCLL);
}

void sub_10000E104()
{
}

void sub_10000E154()
{
  *(void *)(v3 - 224) = v2 + 19;
  *(void *)(v3 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100066B80LL;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 168), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 128);
  }

  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 168);
  if (*(void *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6LL) & 1) != 0) {
      JUMPOUT(0x10000E3BCLL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 128, &unk_10007A7A0);
  }

  JUMPOUT(0x10000E3B8LL);
}

void sub_10000E164()
{
  *(void *)(v3 - 224) = v2 + 7;
  *(void *)(v3 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100066BB0LL;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 168), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 128);
  }

  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 168);
  if (*(void *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6LL) & 1) != 0) {
      JUMPOUT(0x10000E3BCLL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 128, &unk_10007A7A0);
  }

  JUMPOUT(0x10000E3B8LL);
}

void sub_10000E174()
{
  *(void *)(v3 - 224) = v2;
  *(void *)(v3 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100066BE0LL;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 168), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 128);
  }

  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 168);
  if (*(void *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6LL) & 1) != 0) {
      JUMPOUT(0x10000E3BCLL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 128, &unk_10007A7A0);
  }

  JUMPOUT(0x10000E3B8LL);
}

void sub_10000E180()
{
  *(void *)(v3 - 224) = v2 + 7;
  *(void *)(v3 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100066C00LL;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 168), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 128);
  }

  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 168);
  if (*(void *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6LL) & 1) != 0) {
      JUMPOUT(0x10000E3BCLL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 128, &unk_10007A7A0);
  }

  JUMPOUT(0x10000E3B8LL);
}

void sub_10000E190()
{
}

void sub_10000E248()
{
  *(void *)(v4 - 128) = sub_100003E68(v1 + 19, 0x8000000100066B80LL, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066B80LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 200), *(void *)(v4 - 192));
  uint64_t v7 = v6;
  *(void *)(v4 - 128) = sub_100003E68(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 228),  "Unable to get BOOL for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 240);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000E3A8LL);
}

void sub_10000E258()
{
  *(void *)(v4 - 128) = sub_100003E68(v1 + 7, 0x8000000100066BB0LL, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066BB0LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 200), *(void *)(v4 - 192));
  uint64_t v7 = v6;
  *(void *)(v4 - 128) = sub_100003E68(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 228),  "Unable to get BOOL for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 240);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000E3A8LL);
}

void sub_10000E268()
{
  *(void *)(v4 - 128) = sub_100003E68(v1, 0x8000000100066BE0LL, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066BE0LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 200), *(void *)(v4 - 192));
  uint64_t v7 = v6;
  *(void *)(v4 - 128) = sub_100003E68(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 228),  "Unable to get BOOL for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 240);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000E3A8LL);
}

void sub_10000E274()
{
  *(void *)(v4 - 128) = sub_100003E68(v1 + 7, 0x8000000100066C00LL, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066C00LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 200), *(void *)(v4 - 192));
  uint64_t v7 = v6;
  *(void *)(v4 - 128) = sub_100003E68(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 228),  "Unable to get BOOL for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 240);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000E3A8LL);
}

void sub_10000E284()
{
}

void sub_10000E488(char a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v4);
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v5 = sub_100003288((uint64_t *)&unk_10007B530);
      *(_OWORD *)(swift_allocObject(v5, 48LL, 7LL) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060880;
      __asm { BR              X10 }
    }

    id v7 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    __asm { BR              X10 }
  }

  uint64_t v6 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
  swift_beginAccess(v6, v8, 0LL, 0LL);
  __asm { BR              X11 }

void sub_10000E63C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066B50LL);
  [v0 doubleForKey:v1];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E64C()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v1 + 19;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066B80LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 184) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 184];

  id v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000E760LL);
}

void sub_10000E65C()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v1 + 7;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066BB0LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 184) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 184];

  id v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000E760LL);
}

void sub_10000E66C()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066BE0LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 184) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 184];

  id v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000E760LL);
}

void sub_10000E678()
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
  *(void *)(v0 + 32) = v1 + 7;
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0x8000000100066C00LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(void *)(v3 - 184) = 0LL;
  id v6 = [v4 readPrefKeys:isa error:v3 - 184];

  id v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    id v8 = v7;

    __asm { BR              X11 }
  }

  JUMPOUT(0x10000E760LL);
}

void sub_10000E688()
{
}

void sub_10000E750()
{
  *(void *)(v3 - 24sub_10000DC70(0, 0) = v2 + 10;
  *(void *)(v3 - 232) = 0x8000000100066B50LL;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (unint64_t v4 = sub_1000060CC(v3 - 184), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 144);
  }

  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 184);
  if (*(void *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6LL) & 1) != 0) {
      JUMPOUT(0x10000EBD4LL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 144, &qword_10007A7A0);
  }

  JUMPOUT(0x10000EBD0LL);
}

void sub_10000E820()
{
  *(void *)(v4 - 144) = sub_100003E68(v1 + 10, 0x8000000100066B50LL, (uint64_t *)(v4 - 184));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066B50LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 216), *(void *)(v4 - 208));
  unint64_t v7 = v6;
  *(void *)(v4 - 144) = sub_100003E68(v5, v6, (uint64_t *)(v4 - 184));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 244),  "Unable to get double for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 256);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBC0LL);
}

void sub_10000E850(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066B80LL);
  [v1 doubleForKey:v2];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E860(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BB0LL);
  [v1 doubleForKey:v2];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E870(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BE0LL);
  [v1 doubleForKey:v2];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E87C(void *a1@<X8>)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066C00LL);
  [v1 doubleForKey:v2];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E88C()
{
}

void sub_10000E8E0()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066B80LL);
  [v0 doubleForKey:v1];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E8F0()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BB0LL);
  [v0 doubleForKey:v1];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E900()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066BE0LL);
  [v0 doubleForKey:v1];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E90C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066C00LL);
  [v0 doubleForKey:v1];

  JUMPOUT(0x10000E964LL);
}

void sub_10000E91C()
{
}

void sub_10000E96C()
{
  *(void *)(v3 - 24sub_10000DC70(0, 0) = v2 + 19;
  *(void *)(v3 - 232) = 0x8000000100066B80LL;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 184), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 144);
  }

  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 184);
  if (*(void *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6LL) & 1) != 0) {
      JUMPOUT(0x10000EBD4LL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 144, &unk_10007A7A0);
  }

  JUMPOUT(0x10000EBD0LL);
}

void sub_10000E97C()
{
  *(void *)(v3 - 24sub_10000DC70(0, 0) = v2 + 7;
  *(void *)(v3 - 232) = 0x8000000100066BB0LL;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 184), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 144);
  }

  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 184);
  if (*(void *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6LL) & 1) != 0) {
      JUMPOUT(0x10000EBD4LL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 144, &unk_10007A7A0);
  }

  JUMPOUT(0x10000EBD0LL);
}

void sub_10000E98C()
{
  *(void *)(v3 - 24sub_10000DC70(0, 0) = v2;
  *(void *)(v3 - 232) = 0x8000000100066BE0LL;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 184), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 144);
  }

  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 184);
  if (*(void *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6LL) & 1) != 0) {
      JUMPOUT(0x10000EBD4LL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 144, &unk_10007A7A0);
  }

  JUMPOUT(0x10000EBD0LL);
}

void sub_10000E998()
{
  *(void *)(v3 - 24sub_10000DC70(0, 0) = v2 + 7;
  *(void *)(v3 - 232) = 0x8000000100066C00LL;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1000060CC(v3 - 184), (v5 & 1) != 0))
  {
    sub_10000469C(*(void *)(v1 + 56) + 32 * v4, v3 - 144);
  }

  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000062FC(v3 - 184);
  if (*(void *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6LL) & 1) != 0) {
      JUMPOUT(0x10000EBD4LL);
    }
  }

  else
  {
    sub_10000B4A8(v3 - 144, &unk_10007A7A0);
  }

  JUMPOUT(0x10000EBD0LL);
}

void sub_10000E9A8()
{
}

void sub_10000EA60()
{
  *(void *)(v4 - 144) = sub_100003E68(v1 + 19, 0x8000000100066B80LL, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066B80LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 216), *(void *)(v4 - 208));
  uint64_t v7 = v6;
  *(void *)(v4 - 144) = sub_100003E68(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 244),  "Unable to get double for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 256);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBC0LL);
}

void sub_10000EA70()
{
  *(void *)(v4 - 144) = sub_100003E68(v1 + 7, 0x8000000100066BB0LL, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066BB0LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 216), *(void *)(v4 - 208));
  uint64_t v7 = v6;
  *(void *)(v4 - 144) = sub_100003E68(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 244),  "Unable to get double for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 256);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBC0LL);
}

void sub_10000EA80()
{
  *(void *)(v4 - 144) = sub_100003E68(v1, 0x8000000100066BE0LL, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066BE0LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 216), *(void *)(v4 - 208));
  uint64_t v7 = v6;
  *(void *)(v4 - 144) = sub_100003E68(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 244),  "Unable to get double for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 256);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBC0LL);
}

void sub_10000EA8C()
{
  *(void *)(v4 - 144) = sub_100003E68(v1 + 7, 0x8000000100066C00LL, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066C00LL);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  uint64_t v5 = Error.localizedDescription.getter(*(void *)(v4 - 216), *(void *)(v4 - 208));
  uint64_t v7 = v6;
  *(void *)(v4 - 144) = sub_100003E68(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl( (void *)&_mh_execute_header,  v0,  (os_log_type_t)*(_DWORD *)(v4 - 244),  "Unable to get double for key: %s due to: %s",  (uint8_t *)v3,  0x16u);
  uint64_t v8 = *(void *)(v4 - 256);
  swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v3, -1LL, -1LL);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBC0LL);
}

void sub_10000EA9C()
{
}

void sub_10000ECA4(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_10000ECF4()
{
  uint64_t v3 = v2 + 10;
  uint64_t v4 = *(void *)(v0 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v0);
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      uint64_t v6 = v0 + i;
      sub_10000FAEC(*(_BYTE *)(v6 + 32), v3, 0x8000000100066B50LL, v1);
    }

    swift_bridgeObjectRelease(0x8000000100066B50LL);
    unint64_t v7 = v0;
  }

  else
  {
    unint64_t v7 = 0x8000000100066B50LL;
  }

  return swift_bridgeObjectRelease(v7);
}

void sub_10000EDB8(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_10000EDFC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRelease(0x8000000100066B50LL);
}

unint64_t sub_10000EE74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100003288(&qword_10007ACA0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100010A90(v7, (uint64_t)v16, &qword_10007C060);
    unint64_t result = sub_1000060CC((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_100006330(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10000EFB4(char *a1)
{
}

void sub_10000EFC0()
{
}

void sub_10000EFCC(uint64_t a1)
{
}

void sub_10000EFD4(uint64_t a1)
{
}

unint64_t sub_10000EFDC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001052C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000F008@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10000BEB0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10000F030(void *a1@<X8>)
{
  *a1 = &off_1000719F0;
}

void *sub_10000F040(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100003288((uint64_t *)&unk_10007B530);
      __int128 v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      BOOL v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __int128 v11 = _swiftEmptyArrayStorage;
      BOOL v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10000F8E0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10000F14C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007ACA8);
  uint64_t v11 = *(void *)(sub_100003288(&qword_10007AAE0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288(&qword_10007AAE0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_10000F9D0(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_10000F35C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000F394(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_10000F378(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000F4FC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10000F394(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003288((uint64_t *)&unk_10007B530);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*v83 + 256LL))(&v225, v95);
    v96 = v227;
    v230[0] = v227;
    v229 = *(_OWORD *)v87;
    swift_bridgeObjectRetain(v227);
    sub_1000295D0((uint64_t)&v229);
    v228 = *((_OWORD *)v87 + 1);
    sub_1000295D0((uint64_t)&v228);
    sub_1000295F8(v230);
    v104 = v204;
    v202 = *(void *)(v96 + 16);
    v203 = (uint64_t *)v96;
    if (!v202) {
      break;
    }
    v201 = v203 + 4;
    v105 = swift_beginAccess(v204, &v215, 0LL, 0LL);
    v106 = 0LL;
    v195 = CKCurrentUserDefaultName;
    v185 = &v214;
    v105.n128_u64[0] = 136315138LL;
    v184 = v105;
    v183 = (char *)&type metadata for Any + 8;
    while (v106 < v203[2])
    {
      v207 = v106;
      v116 = &v201[2 * v106];
      v117 = v116[1];
      v208 = (void *)*v116;
      v209 = (uint8_t *)v117;
      v96 = *v104;
      if ((unint64_t)*v104 >> 62)
      {
        if (v96 < 0) {
          v142 = *v104;
        }
        else {
          v142 = v96 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain_n(*v104, 2LL);
        swift_bridgeObjectRetain(v117);
        v118 = _CocoaArrayWrapper.endIndex.getter(v142);
        if (v118)
        {
LABEL_41:
          v119 = 4LL;
          while (1)
          {
            uint64_t v67 = v119 - 4;
            v120 = (v96 & 0xC000000000000001LL) != 0
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v119 - 4, v96)
                 : *(id *)(v96 + 8 * v119);
            v121 = v120;
            v122 = v119 - 3;
            if (__OFADD__(v67, 1LL)) {
              break;
            }
            v123 = [v120 zoneName];
            v83 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
            v125 = v124;

            if (v83 == v208 && v125 == v209)
            {
              v137 = (uint64_t)v209;
              swift_bridgeObjectRelease_n(v96, 2LL);

              v96 = v137;
LABEL_57:
              swift_bridgeObjectRelease(v96);
              swift_bridgeObjectRelease(v137);
              v83 = v206;
              goto LABEL_36;
            }

            v127 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v125, v208, v209, 0LL);

            swift_bridgeObjectRelease(v125);
            if ((v127 & 1) != 0)
            {
              swift_bridgeObjectRelease(v96);
              v137 = (uint64_t)v209;
              goto LABEL_57;
            }

            ++v119;
            if (v122 == v118) {
              goto LABEL_34;
            }
          }

          __break(1u);
          break;
        }
      }

      else
      {
        v118 = *(void *)((v96 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain_n(*v104, 2LL);
        swift_bridgeObjectRetain(v117);
        if (v118) {
          goto LABEL_41;
        }
      }

    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    unint64_t v55 = (a1 & 0x3F) << 8;
    unint64_t v56 = (v55 | (a1 >> 6)) + 33217;
    uint64_t v57 = (v55 | (a1 >> 6) & 0x3F) << 8;
    uint64_t v58 = (((v57 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    char v59 = (v57 | (a1 >> 12)) + 8487393;
    if ((_DWORD)v17) {
      unint64_t v21 = v58;
    }
    else {
      unint64_t v21 = v59;
    }
LABEL_10:
    unint64_t v22 = __clz(v21);
    unint64_t v20 = 4LL - (v22 >> 3);
    *(void *)description = (v21 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (v22 >> 3)) & 7)));
    uint64_t v19 = description;
  }

  uint64_t v17 = (unint64_t)a1 >> 32;
  LODWORD(v17) = a1 >> 11;
  LODWORD(v17) = a1 >> 16;
  if (a1 >> 16 <= 0x10)
  {
    uint64_t v11 = v65;
    uint64_t v9 = v66;
    if (a1 <= 0xFF)
    {
      int v39 = ((_BYTE)a1 + 1);
      goto LABEL_22;
    }

    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    os_log_t v60 = (v15 | (a1 >> 6) & 0x3F) << 8;
    if ((_DWORD)v17) {
      int v39 = (((v60 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    }
    else {
      int v39 = (v60 | (a1 >> 12)) + 8487393;
    }
    goto LABEL_22;
  }

uint64_t sub_10000F4FC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007ACA8);
  uint64_t v11 = *(void *)(sub_100003288(&qword_10007AAE0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288(&qword_10007AAE0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

unint64_t sub_10000F6E4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100071960, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10000F72C@<X0>(uint64_t a1@<X8>)
{
  return sub_10000CDDC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10000F754()
{
  uint64_t v1 = sub_100003288(&qword_10007AAE0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  int64_t v7 = (void *)(v0 + v4);
  sub_10000467C(v7);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 28);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_release(*(void *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000F7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007AAE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000F844()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100003288(&qword_10007AAE0) - 8) + 80LL);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((v1 + 24) & ~v1);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 144LL))();
  v7[2] = v3;
  uint64_t v5 = sub_10000D1D4((uint64_t (*)(char *))sub_100010AD4, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 152LL))(v5);
}

uint64_t sub_10000F8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000F8D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000F8E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10000F9D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_100003288(&qword_10007AAE0) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10000FAEC(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v83[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  unint64_t v14 = &v83[-v13];
  if (a1)
  {
    if (a1 == 1)
    {
      NSString v15 = String._bridgeToObjectiveC()();
      sub_100010A90(a4, (uint64_t)&v97, &qword_10007A7A0);
      if (v98)
      {
        sub_100006330(&v97, &v99);
      }

      else
      {
        id v35 = [objc_allocWithZone(NSNull) init];
        uint64_t v100 = sub_100010A58(0LL, &qword_10007AC90, &OBJC_CLASS___NSNull_ptr);
        *(void *)&__int128 v99 = v35;
        sub_10000B4A8((uint64_t)&v97, &qword_10007A7A0);
      }

      id v36 = (void *)objc_opt_self(&OBJC_CLASS___CBController);
      uint64_t v37 = v100;
      uint64_t v38 = sub_100008E78(&v99, v100);
      uint64_t v39 = _bridgeAnythingToObjectiveC<A>(_:)(v38, v37);
      sub_10000467C(&v99);
      *(void *)&__int128 v99 = 0LL;
      LODWORD(v36) = [v36 writePrefKey:v15 value:v39 error:&v99];

      swift_unknownObjectRelease(v39);
      id v40 = (id)v99;
      if ((_DWORD)v36)
      {
        notify_post("com.apple.bluetooth.prefsChanged");
      }

      else
      {
        id v41 = v40;
        uint64_t v42 = _convertNSErrorToError(_:)(v40);

        swift_willThrow();
        uint64_t v43 = sub_100030144();
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, v43, v8);
        swift_bridgeObjectRetain(a3);
        swift_errorRetain(v42);
        swift_bridgeObjectRetain(a3);
        uint64_t v44 = swift_errorRetain(v42);
        uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
        uint64_t v46 = v9;
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v47))
        {
          uint64_t v48 = swift_slowAlloc(22LL, -1LL);
          *(void *)&__int128 v88 = v8;
          uint64_t v49 = v48;
          uint64_t v50 = a2;
          uint64_t v51 = swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 v99 = v51;
          *(_DWORD *)uint64_t v49 = 136315394;
          uint64_t v87 = v46;
          swift_bridgeObjectRetain(a3);
          *(void *)&__int128 v97 = sub_100003E68(v50, a3, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v49 + 4, v49 + 12);
          swift_bridgeObjectRelease_n(a3, 3LL);
          *(_WORD *)(v49 + 12) = 2080;
          swift_getErrorValue(v42, v93, v90);
          uint64_t v52 = Error.localizedDescription.getter(v91, v92);
          unint64_t v54 = v53;
          *(void *)&__int128 v97 = sub_100003E68(v52, v53, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v49 + 14, v49 + 22);
          swift_bridgeObjectRelease(v54);
          swift_errorRelease(v42);
          swift_errorRelease(v42);
          _os_log_impl( (void *)&_mh_execute_header,  v45,  v47,  "Unable to get value for key: %s due to: %s",  (uint8_t *)v49,  0x16u);
          swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1LL, -1LL);
          swift_slowDealloc(v49, -1LL, -1LL);

          swift_errorRelease(v42);
          (*(void (**)(_BYTE *, void))(v87 + 8))(v12, v88);
        }

        else
        {
          swift_errorRelease(v42);
          swift_bridgeObjectRelease_n(a3, 2LL);
          swift_errorRelease(v42);
          swift_errorRelease(v42);

          (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v12, v8);
        }
      }
    }

    else
    {
      uint64_t v27 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
      id v28 = [v27 standardUserDefaults];
      sub_100010A90(a4, (uint64_t)&v99, &qword_10007A7A0);
      uint64_t v29 = v100;
      if (v100)
      {
        uint64_t v30 = sub_100008E78(&v99, v100);
        uint64_t v31 = *(void *)(v29 - 8);
        __chkstk_darwin(v30);
        id v33 = &v83[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        (*(void (**)(_BYTE *))(v31 + 16))(v33);
        uint64_t v34 = _bridgeAnythingToObjectiveC<A>(_:)(v33, v29);
        (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v33, v29);
        sub_10000467C(&v99);
      }

      else
      {
        uint64_t v34 = 0LL;
      }

      NSString v81 = String._bridgeToObjectiveC()();
      [v28 setValue:v34 forKey:v81];

      swift_unknownObjectRelease(v34);
      id v82 = [v27 standardUserDefaults];
      [v82 synchronize];
    }
  }

  else
  {
    uint64_t v87 = v9;
    *(void *)&__int128 v88 = v8;
    size_t v16 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess(v16, v96, 0LL, 0LL);
    v86 = v16;
    uint64_t v17 = (void *)*v16;
    sub_100010A90(a4, (uint64_t)&v99, &qword_10007A7A0);
    uint64_t v18 = v100;
    if (v100)
    {
      uint64_t v19 = sub_100008E78(&v99, v100);
      uint64_t v20 = *(void *)(v18 - 8);
      __chkstk_darwin(v19);
      uint64_t v22 = a2;
      uint64_t v23 = &v83[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      (*(void (**)(_BYTE *))(v20 + 16))(v23);
      id v24 = v17;
      uint64_t v25 = _bridgeAnythingToObjectiveC<A>(_:)(v23, v18);
      id v26 = v23;
      a2 = v22;
      (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v26, v18);
      sub_10000467C(&v99);
    }

    else
    {
      id v55 = v17;
      uint64_t v25 = 0LL;
    }

    NSString v56 = String._bridgeToObjectiveC()();
    [v17 setObject:v25 forKey:v56];

    swift_unknownObjectRelease(v25);
    uint64_t v57 = sub_100030144();
    uint64_t v58 = v87;
    uint64_t v59 = v88;
    (*(void (**)(_BYTE *, uint64_t, void))(v87 + 16))(v14, v57, v88);
    sub_100010A90(a4, (uint64_t)&v99, &qword_10007A7A0);
    uint64_t v60 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.default.getter();
    int v63 = v62;
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v64 = swift_slowAlloc(28LL, -1LL);
      int v84 = v63;
      uint64_t v65 = v64;
      uint64_t v85 = swift_slowAlloc(64LL, -1LL);
      uint64_t v94 = v85;
      *(_DWORD *)uint64_t v65 = 136315650;
      swift_bridgeObjectRetain(a3);
      *(void *)&__int128 v97 = sub_100003E68(a2, a3, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v65 + 4, v65 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v65 + 12) = 2080;
      sub_100010A90((uint64_t)&v99, (uint64_t)&v97, &qword_10007A7A0);
      uint64_t v66 = sub_100003288(&qword_10007A7A0);
      uint64_t v67 = String.init<A>(describing:)(&v97, v66);
      unint64_t v69 = v68;
      *(void *)&__int128 v97 = sub_100003E68(v67, v68, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease(v69);
      sub_10000B4A8((uint64_t)&v99, &qword_10007A7A0);
      *(_WORD *)(v65 + 22) = 1024;
      uint64_t v70 = (id *)v86;
      swift_beginAccess(v86, &v97, 0LL, 0LL);
      unsigned int v89 = [*v70 synchronize];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v65 + 24, v65 + 28);
      _os_log_impl( (void *)&_mh_execute_header,  v61,  (os_log_type_t)v84,  "Cloud defaults update %s: %s, synchronized: %{BOOL}d",  (uint8_t *)v65,  0x1Cu);
      uint64_t v71 = v85;
      swift_arrayDestroy(v85, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);

      (*(void (**)(_BYTE *, void))(v87 + 8))(v14, v88);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
      sub_10000B4A8((uint64_t)&v99, &qword_10007A7A0);

      (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v14, v59);
    }

    id v72 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    NSString v73 = String._bridgeToObjectiveC()();
    uint64_t v74 = sub_100003288(&qword_10007AC98);
    uint64_t inited = swift_initStackObject(v74, v95);
    __int128 v88 = xmmword_100060880;
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060880;
    *(void *)&__int128 v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
    *((void *)&v99 + 1) = v76;
    AnyHashable.init<A>(_:)(&v99, &type metadata for String, &protocol witness table for String);
    uint64_t v77 = sub_100003288((uint64_t *)&unk_10007B530);
    uint64_t v78 = swift_allocObject(v77, 48LL, 7LL);
    *(_OWORD *)(v78 + swift_unknownObjectWeakDestroy(v0 + 16) = v88;
    *(void *)(v78 + 32) = a2;
    *(void *)(v78 + 4sub_10000DC70(0, 0) = a3;
    *(void *)(inited + 96) = sub_100003288(&qword_10007BFF0);
    *(void *)(inited + 72) = v78;
    swift_bridgeObjectRetain(a3);
    unint64_t v79 = sub_10000EE74(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v79);
    [v72 postNotificationName:v73 object:0 userInfo:isa];
  }

unint64_t sub_10001052C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100071A18, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100010578()
{
  unint64_t result = qword_10007AAE8;
  if (!qword_10007AAE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060B84, &type metadata for KeyValueSource);
    atomic_store(result, (unint64_t *)&qword_10007AAE8);
  }

  return result;
}

uint64_t sub_1000105BC()
{
  return sub_100008C48(&qword_10007AAF0, &qword_10007AAF8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1000105EC()
{
  unint64_t result = qword_10007AB30;
  if (!qword_10007AB30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060CBC, &type metadata for KeyValueStoreManager.Defaults);
    atomic_store(result, (unint64_t *)&qword_10007AB30);
  }

  return result;
}

uint64_t sub_100010630()
{
  return sub_100008C48(&qword_10007AB38, &qword_10007AB40, (uint64_t)&protocol conformance descriptor for [A]);
}

_BYTE *initializeBufferWithCopyOfBuffer for KeyValueSource(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyValueSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  swift_release(v2);
  uint64_t v20 = ((uint64_t (*)(char *, void))String.init(utf16CodeUnits:count:))(v7 + 32, *((void *)v7 + 2));
  swift_bridgeObjectRelease(v7);
  return v20;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyValueSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100010748 + 4 * byte_100060B74[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001077C + 4 * byte_100060B6F[v4]))();
}

uint64_t sub_10001077C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010784(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001078CLL);
  }
  return result;
}

uint64_t sub_100010798(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000107A0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000107A4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000107AC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000107B8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000107C0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KeyValueSource()
{
  return &type metadata for KeyValueSource;
}

uint64_t type metadata accessor for KeyValueStoreManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd20KeyValueStoreManager);
}

uint64_t getEnumTagSinglePayload for KeyValueStoreManager.Defaults(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for KeyValueStoreManager.Defaults( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000108D4 + 4 * byte_100060B7E[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100010908 + 4 * byte_100060B79[v4]))();
}

uint64_t sub_100010908(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100010918LL);
  }
  return result;
}

uint64_t sub_100010924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001092CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100010930(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010938(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyValueStoreManager.Defaults()
{
  return &type metadata for KeyValueStoreManager.Defaults;
}

uint64_t sub_100010954()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100010978()
{
  __int16 v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 144LL))();
  uint64_t v3 = *v1;
  uint64_t *v1 = v2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000109AC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000109BC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000109DC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100010A04()
{
  return sub_10000C74C(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_100010A14()
{
  unint64_t result = qword_10007AC88;
  if (!qword_10007AC88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060BAC, &type metadata for KeyValueSource);
    atomic_store(result, (unint64_t *)&qword_10007AC88);
  }

  return result;
}

uint64_t sub_100010A58(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100010A90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003288(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

BOOL sub_100010AD4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_100003288(&qword_10007AAE0);
  uint64_t v5 = sub_100008C48(&qword_10007ACB0, &qword_10007AAE0, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_100010B58(uint64_t a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_10000CF78(a1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100010BC8(int a1, uint64_t a2)
{
  return sub_10000BF4C(a1, a2, v2);
}

uint64_t sub_100010BD4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100010C20@<X0>(uint64_t a1@<X8>)
{
  return sub_10000F72C(a1);
}

void *sub_100010C3C()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  sub_10002F098(v0, qword_100080730);
  uint64_t v1 = sub_100010C94(v0, (uint64_t)qword_100080730);
  type metadata accessor for UserFileManager();
  return sub_1000362CC(v1);
}

uint64_t sub_100010C94(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100010CAC()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v1._object = (void *)0x8000000100066D60LL;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._object = (void *)0x8000000100066D90LL;
  v5._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  BOOL v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._uint64_t countAndFlagsBits = 0x4449656E6F7A202CLL;
  v9._object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v9);
  uint64_t v10 = v0[4];
  uint64_t v11 = swift_bridgeObjectRetain(v10);
  v12._uint64_t countAndFlagsBits = Array.description.getter(v11, &type metadata for String);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(object);
  return 0LL;
}

uint64_t sub_100010DDC(char a1)
{
  if (!a1) {
    return 0x696669746E656469LL;
  }
  if (a1 == 1) {
    return 0xD000000000000013LL;
  }
  return 0x734449656E6F7ALL;
}

uint64_t sub_100010E44()
{
  return sub_100010DDC(*v0);
}

uint64_t sub_100010E4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000291E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100010E70()
{
  return 0LL;
}

void sub_100010E7C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100010E88(uint64_t a1)
{
  unint64_t v2 = sub_100011050();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010EB0(uint64_t a1)
{
  unint64_t v2 = sub_100011050();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010ED8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003288((uint64_t *)&unk_10007ACC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100008E78(a1, v9);
  unint64_t v11 = sub_100011050();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys,  &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v5);
    uint64_t v21 = v3[4];
    char v20 = 2;
    uint64_t v16 = sub_100003288(&qword_10007BFF0);
    uint64_t v17 = sub_10002F038( (unint64_t *)&unk_10007ACD0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100011050()
{
  unint64_t result = qword_10007D668;
  if (!qword_10007D668)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061320, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10007D668);
  }

  return result;
}

uint64_t sub_100011094@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_1000110A4@<X0>(uint64_t a1@<X8>)
{
  if (qword_10007D660 != -1) {
    swift_once(&qword_10007D660, sub_100010C3C);
  }
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = sub_100010C94(v2, (uint64_t)qword_100080730);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

double sub_100011140@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_100011184(void *a1)
{
  return sub_100010ED8(a1);
}

BOOL sub_1000111A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000111BC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100011200()
{
}

Swift::Int sub_100011228(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100011268@<X0>(void *a1@<X8>)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v7);
}

void *sub_1000112D4(__int128 *a1)
{
  __int128 v3 = *a1;
  __int128 v11 = a1[1];
  __int128 v12 = v3;
  uint64_t v10 = *((void *)a1 + 4);
  swift_beginAccess(v1 + 16, &v9, 1LL, 0LL);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  __int128 v7 = a1[1];
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v7;
  *(void *)(v1 + 48) = *((void *)a1 + 4);
  sub_100003814((uint64_t)&v12);
  sub_100003814((uint64_t)&v11);
  sub_1000295A8(&v10);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_1000295D0((uint64_t)&v12);
  sub_1000295D0((uint64_t)&v11);
  return sub_1000295F8(&v10);
}

uint64_t sub_10001138C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 80));
}

uint64_t sub_1000113C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  *(void *)(v1 + 8sub_10000DC70(0, 0) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_100011404(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_100011440()
{
  uint64_t v1 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container;
  Swift::UInt v2 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container);
  }

  else
  {
    (*(void (**)(__int128 *__return_ptr))(*(void *)v0 + 256LL))(&v10);
    uint64_t v4 = v11;
    __int128 v14 = v10;
    sub_1000295D0((uint64_t)&v14);
    uint64_t v13 = v12;
    sub_1000295F8(&v13);
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    id v6 = [(id)objc_opt_self(CKContainer) containerWithIdentifier:v5];

    __int128 v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    Swift::UInt v2 = 0LL;
  }

  id v8 = v2;
  return v3;
}

id sub_100011520()
{
  return sub_1000115D4(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup);
}

id sub_100011544()
{
  return sub_1000115D4(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup);
}

id sub_100011568()
{
  return sub_1000115D4(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup);
}

id sub_10001158C()
{
  return sub_1000115D4(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup);
}

id sub_1000115B0()
{
  return sub_1000115D4(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup);
}

id sub_1000115D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  id v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }

  else
  {
    id v5 = [objc_allocWithZone(CKOperationGroup) init];
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setName:v6];

    __int128 v7 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    id v4 = v5;

    id v3 = 0LL;
  }

  id v8 = v3;
  return v4;
}

uint64_t sub_10001167C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v5 = *(void **)(v0 + 56);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.notOnQueue(_:), v1);
  v5;
  char v6 = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v6 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)( sub_100029620,  v0,  &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorState);
    return v8[15];
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10001175C(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (void *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __int128 v7 = *(void **)(v1 + 56);
  *char v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  char v9 = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v11 = swift_allocObject(&unk_100071E40, 25LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  *(_BYTE *)(v11 + 24) = a1;
  uint64_t v12 = swift_allocObject(&unk_100071E68, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_100029678;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_1000109BC;
  uint64_t v17 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CA9C;
  void aBlock[3] = &unk_100071E80;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v17;
  swift_retain(v1);
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v8, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v12, "", 119LL, 106LL, 30LL, 1LL);
  swift_release(v11);
  uint64_t result = swift_release(v12);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_100011914(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_100011950(a1);
  return v3;
}

uint64_t sub_100011950(__int128 *a1)
{
  id v55 = a1;
  uint64_t v61 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v58 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for URL(0LL);
  uint64_t v60 = *(void *)(v62 - 8);
  uint64_t v2 = __chkstk_darwin(v62);
  uint64_t v56 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v57 = (char *)&v51 - v4;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  __chkstk_darwin(v5);
  uint64_t v65 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  char v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v64 = v13;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100010A58(0LL, (unint64_t *)&qword_10007A800, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v53 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  int v63 = *(uint64_t (**)(char *))(v14 + 104);
  uint64_t v17 = v63(v16);
  static DispatchQoS.unspecified.getter(v17);
  *(void *)&v72[0] = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v19 = sub_100003288((uint64_t *)&unk_10007A810);
  uint64_t v20 = sub_100008C48( (unint64_t *)&qword_10007ACF0,  (uint64_t *)&unk_10007A810,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v52 = v18;
  dispatch thunk of SetAlgebra.init<A>(_:)(v72, v19, v20, v7, v18);
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000036LL,  0x8000000100066DB0LL,  v12,  v9,  v16,  0LL);
  uint64_t v22 = v54;
  *(void *)(v54 + 56) = v21;
  uint64_t v23 = ((uint64_t (*)(char *, void, uint64_t))v63)(v16, v53, v64);
  static DispatchQoS.unspecified.getter(v23);
  *(void *)&v72[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v72, v19, v20, v7, v18);
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000038LL,  0x8000000100066DF0LL,  v12,  v9,  v16,  0LL);
  *(void *)(v22 + 64) = v24;
  static DispatchQoS.unspecified.getter(v24);
  *(void *)&v72[0] = _swiftEmptyArrayStorage;
  uint64_t v25 = v22;
  id v26 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)(v72, v19, v20, v7, v52);
  ((void (*)(char *, void, uint64_t))v63)( v16,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v64);
  *(void *)(v25 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003CLL,  0x8000000100066E30LL,  v12,  v9,  v16,  0LL);
  *(void *)(v25 + 8sub_10000DC70(0, 0) = _swiftEmptyArrayStorage;
  uint64_t v27 = v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  uint64_t v28 = sub_100003288(&qword_10007A9B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v27, 1LL, 1LL, v28);
  uint64_t v29 = v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
  uint64_t v30 = sub_100003288((uint64_t *)&unk_10007A850);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v29, 1LL, 1LL, v30);
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container) = 0LL;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup) = 0LL;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup) = 0LL;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup) = 0LL;
  *(void *)(v25
            + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup) = 0LL;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup) = 0LL;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) = 0;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus) = 0LL;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone) = 0;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords) = &_swiftEmptyDictionarySingleton;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords) = &_swiftEmptyDictionarySingleton;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity) = 0LL;
  *(void *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer) = 0LL;
  uint64_t v31 = sub_100030088();
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v31, v67);
  __int128 v32 = *v26;
  __int128 v71 = v26[1];
  v72[0] = v32;
  uint64_t v70 = *((void *)v26 + 4);
  sub_100003814((uint64_t)v72);
  sub_100003814((uint64_t)&v71);
  sub_1000295A8(&v70);
  sub_100003814((uint64_t)v72);
  sub_100003814((uint64_t)&v71);
  id v33 = sub_1000295A8(&v70);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v69 = v37;
    *(_DWORD *)id v36 = 136315138;
    sub_100003814((uint64_t)v72);
    sub_100003814((uint64_t)&v71);
    sub_1000295A8(&v70);
    uint64_t v38 = sub_100010CAC();
    unint64_t v40 = v39;
    sub_1000295D0((uint64_t)v72);
    sub_1000295D0((uint64_t)&v71);
    sub_1000295F8(&v70);
    uint64_t v68 = sub_100003E68(v38, v40, (uint64_t *)&v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v40);
    sub_1000295D0((uint64_t)v72);
    sub_1000295D0((uint64_t)&v71);
    sub_1000295F8(&v70);
    sub_1000295D0((uint64_t)v72);
    sub_1000295D0((uint64_t)&v71);
    sub_1000295F8(&v70);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Initializing CloudStorageCoordinator with %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    sub_1000295D0((uint64_t)v72);
    sub_1000295D0((uint64_t)&v71);
    sub_1000295F8(&v70);
    sub_1000295D0((uint64_t)v72);
    sub_1000295D0((uint64_t)&v71);
    sub_1000295F8(&v70);
  }

  (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
  __int128 v41 = v26[1];
  *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = *v26;
  *(_OWORD *)(v25 + 32) = v41;
  *(void *)(v25 + 48) = *((void *)v26 + 4);
  type metadata accessor for UserFileManager();
  sub_100003814((uint64_t)v72);
  sub_100003814((uint64_t)&v71);
  sub_1000295A8(&v70);
  uint64_t v42 = v56;
  sub_1000362CC(v56);
  __int128 v69 = v72[0];
  uint64_t v44 = v58;
  uint64_t v43 = v59;
  uint64_t v45 = v61;
  (*(void (**)(char *, void, uint64_t))(v59 + 104))( v58,  enum case for URL.DirectoryHint.isDirectory(_:),  v61);
  unint64_t v46 = sub_1000296C8();
  os_log_type_t v47 = v57;
  URL.appending<A>(path:directoryHint:)(&v69, v44, &type metadata for String, v46);
  sub_1000295D0((uint64_t)&v71);
  sub_1000295F8(&v70);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  swift_bridgeObjectRelease(*((void *)&v69 + 1));
  uint64_t v48 = v60;
  uint64_t v49 = v62;
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v42, v62);
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))( v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_tokenDirectory,  v47,  v49);
  return v25;
}

uint64_t sub_100012170()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003288((uint64_t *)&unk_10007AD00);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)(sub_10002970C, v0, &type metadata for Bool);
  if ((v35[0] & 1) == 0)
  {
    uint64_t v13 = sub_100030088();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    uint64_t v14 = swift_retain_n(v0, 2LL);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      v34[0] = v31;
      uint64_t v30 = v17;
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v29 = v17 + 4;
      (*(void (**)(_OWORD *__return_ptr))(*(void *)v0 + 256LL))(v35);
      __int128 v38 = v35[1];
      __int128 v39 = v35[0];
      uint64_t v37 = v36;
      uint64_t v18 = sub_100010CAC();
      __int128 v32 = v5;
      unint64_t v20 = v19;
      sub_1000295D0((uint64_t)&v39);
      sub_1000295D0((uint64_t)&v38);
      sub_1000295F8(&v37);
      uint64_t v33 = sub_100003E68(v18, v20, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v29, v17 + 12);
      swift_release_n(v1, 2LL);
      unint64_t v21 = v20;
      uint64_t v5 = v32;
      swift_bridgeObjectRelease(v21);
      uint64_t v22 = v30;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Activating CloudStorageCoordinator with %s", v30, 0xCu);
      uint64_t v23 = v31;
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v0, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100012790();
    uint64_t v24 = (void *)*sub_1000066A0();
    v34[3] = type metadata accessor for CloudStorageCoordinator(0LL);
    v34[4] = (uint64_t)&off_100072098;
    v34[0] = v1;
    swift_retain(v1);
    id v25 = v24;
    sub_1000072BC((uint64_t)v34);

    sub_10000467C(v34);
    uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A850);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v7, 0LL, 1LL, v26);
    sub_100003420((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_10007AD00);
    uint64_t v27 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
    swift_beginAccess(v27, v34, 33LL, 0LL);
    sub_10002EFF4((uint64_t)v5, v27, (uint64_t *)&unk_10007AD00);
    return swift_endAccess(v34);
  }

  return result;
}

uint64_t sub_1000124E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003288((uint64_t *)&unk_10007AD00);
  __chkstk_darwin(v2);
  uint64_t v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_100003288((uint64_t *)&unk_10007A850);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100003288(&qword_10007A9B8);
  __chkstk_darwin(v9);
  uint64_t v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = sub_100003288(&qword_10007A9B0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v16 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v16 removeObserver:v1];

  uint64_t v17 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  swift_beginAccess( v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription,  v27,  0LL,  0LL);
  sub_100010A90(v17, (uint64_t)v11, &qword_10007A9B8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    uint64_t v18 = &qword_10007A9B8;
    uint64_t v19 = (uint64_t)v11;
  }

  else
  {
    sub_100003420((uint64_t)v11, (uint64_t)v15, &qword_10007A9B0);
    uint64_t v20 = *sub_10005263C();
    swift_retain(v20);
    sub_100054218((uint64_t)v15);
    swift_release(v20);
    uint64_t v19 = (uint64_t)v15;
    uint64_t v18 = &qword_10007A9B0;
  }

  sub_10000B4A8(v19, v18);
  uint64_t v21 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
  swift_beginAccess( v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription,  v26,  0LL,  0LL);
  sub_100010A90(v21, (uint64_t)v4, (uint64_t *)&unk_10007AD00);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    uint64_t v22 = (uint64_t *)&unk_10007AD00;
    uint64_t v23 = (uint64_t)v4;
  }

  else
  {
    sub_100003420((uint64_t)v4, (uint64_t)v8, (uint64_t *)&unk_10007A850);
    id v24 = (id)*sub_1000066A0();
    sub_1000074C8((uint64_t)v8);

    uint64_t v23 = (uint64_t)v8;
    uint64_t v22 = (uint64_t *)&unk_10007A850;
  }

  return sub_10000B4A8(v23, v22);
}

uint64_t sub_100012790()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003288(&qword_10007A9B8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v34 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v33 = (char *)&v32 - v5;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  id v35 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v13 = sub_100030000();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v15 = v14(v12, v13, v6);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Add listener for account change", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v12, v6);
  [v35 addObserver:v1 selector:"accountDidChange:" name:CKAccountChangedNotification object:0];
  uint64_t v20 = v14(v10, v13, v6);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Add listener for CKIdentityUpdate", v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  v19(v10, v6);
  id v24 = v35;
  [v35 addObserver:v1 selector:"accountDidChange:" name:CKIdentityUpdateNotification object:0];
  uint64_t v25 = *sub_10005263C();
  v36[3] = type metadata accessor for CloudStorageCoordinator(0LL);
  v36[4] = &off_100072088;
  v36[0] = v1;
  swift_retain(v25);
  swift_retain(v1);
  uint64_t v26 = (uint64_t)v33;
  sub_100054024((uint64_t)v36);
  swift_release(v25);
  sub_10000467C(v36);
  uint64_t v27 = sub_100003288(&qword_10007A9B0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 0LL, 1LL, v27);
  uint64_t v28 = v34;
  sub_100003420(v26, v34, &qword_10007A9B8);
  uint64_t v29 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  swift_beginAccess( v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription,  v36,  33LL,  0LL);
  sub_10002EFF4(v28, v29, &qword_10007A9B8);
  swift_endAccess(v36);
  uint64_t v30 = type metadata accessor for Transaction();
  __chkstk_darwin(v30);
  *(&v32 - 4) = v1;
  *(&v32 - 3) = (uint64_t)sub_10002DF60;
  *(&v32 - 2) = v1;
  swift_retain(v1);
  static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountStatus", 37LL, 2, sub_10002F424);

  return swift_release(v1);
}

void sub_100012B74(uint64_t a1, uint64_t a2)
{
  void (*v11)(_OWORD *__return_ptr);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Class isa;
  objc_class *v29;
  Swift::String v30;
  Class v31;
  objc_class *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  Class v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  os_log_s *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  NSString *v70;
  Swift::String v71;
  char v72;
  char v73[40];
  _OWORD v74[2];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  void v78[2];
  Swift::OpaquePointer_optional v79;
  Swift::OpaquePointer_optional v80;
  uint64_t v64 = type metadata accessor for Logger(0LL);
  int v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003288(&qword_10007B1F0);
  uint64_t inited = swift_initStackObject(v6, v73);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100060EB0;
  id v8 = sub_100011440();
  id v9 = [v8 privateCloudDatabase];

  *(void *)(inited + 32) = v9;
  *(void *)&v74[0] = inited;
  specialized Array._endMutation()(v10);
  uint64_t v11 = *(void (**)(_OWORD *__return_ptr))(*(void *)a2 + 256LL);
  uint64_t v62 = a1;
  uint64_t v67 = *(void *)&v74[0];
  uint64_t v60 = v5;
  if ((*(void *)&v74[0] & 0xC000000000000001LL) != 0)
  {
    uint64_t v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)&v74[0]);
  }

  else
  {
    if (!*(void *)((*(void *)&v74[0] & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      return;
    }

    uint64_t v12 = *(id *)(*(void *)&v74[0] + 32LL);
  }

  uint64_t v66 = v12;
  uint64_t v13 = swift_allocObject(&unk_100072600, 24LL, 7LL);
  uint64_t v65 = v13;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v14 = (uint64_t *)(v13 + 16);
  uint64_t v61 = a2;
  v11(v74);
  uint64_t v15 = v75;
  v78[0] = v75;
  uint64_t v77 = v74[0];
  swift_bridgeObjectRetain(v75);
  sub_1000295D0((uint64_t)&v77);
  uint64_t v76 = v74[1];
  sub_1000295D0((uint64_t)&v76);
  sub_1000295F8(v78);
  id v16 = *(void *)(v15 + 16);
  if (v16)
  {
    os_log_type_t v17 = (void **)(v15 + 40);
    __int128 v69 = (unint64_t)"rageCoordinator.subscription";
    uint64_t v70 = CKCurrentUserDefaultName;
    uint64_t v18 = (void *)0x8000000100066E70LL;
    uint64_t v68 = 0x8000000100066E70LL;
    do
    {
      uint64_t v20 = (uint64_t)*(v17 - 1);
      uint64_t v19 = *v17;
      v71._uint64_t countAndFlagsBits = 0LL;
      v71._object = (void *)0xE000000000000000LL;
      swift_bridgeObjectRetain(v19);
      _StringGuts.grow(_:)(38LL);
      swift_bridgeObjectRelease(v71._object);
      v71._uint64_t countAndFlagsBits = 0xD000000000000024LL;
      v71._object = v18;
      v21._uint64_t countAndFlagsBits = v20;
      v21._object = v19;
      String.append(_:)(v21);
      object = v71._object;
      sub_10000D5A0(v71._countAndFlagsBits, (unint64_t)v71._object, 2, (uint64_t)&type metadata for Bool, &v72);
      swift_bridgeObjectRelease(object);
      if (v72 == 2 || (v72 & 1) != 0)
      {
        swift_bridgeObjectRelease(v19);
      }

      else
      {
        sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
        uint64_t v25 = v24;
        swift_bridgeObjectRetain(v19);
        v26._uint64_t countAndFlagsBits = v20;
        v26._object = v19;
        v27._uint64_t countAndFlagsBits = v23;
        v27._object = v25;
        Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v26, v27).super.isa;
        sub_100010A58(0LL, &qword_10007B240, &OBJC_CLASS___CKRecordZoneSubscription_ptr);
        v71._uint64_t countAndFlagsBits = 0LL;
        v71._object = (void *)0xE000000000000000LL;
        uint64_t v29 = isa;
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease(v71._object);
        v71._uint64_t countAndFlagsBits = 0xD000000000000024LL;
        v71._object = (void *)(v69 | 0x8000000000000000LL);
        v30._uint64_t countAndFlagsBits = v20;
        v30._object = v19;
        String.append(_:)(v30);
        swift_bridgeObjectRelease(v19);
        uint64_t v31 = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v29, v71).super.super.isa;
        swift_beginAccess(v14, &v71, 33LL, 0LL);
        uint64_t v32 = v31;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
        uint64_t v34 = *(void *)((*v14 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t v33 = *(void *)((*v14 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v34 >= v33 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1LL);
        }
        id v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
        specialized Array._endMutation()(v35);
        swift_endAccess(&v71);

        uint64_t v18 = (void *)v68;
      }

      v17 += 2;
      --v16;
    }

    while (v16);
  }

  sub_1000295F8(v78);
  swift_beginAccess(v14, &v71, 0LL, 0LL);
  uint64_t v36 = *v14;
  if ((unint64_t)*v14 >> 62)
  {
    if (v36 < 0) {
      uint64_t v58 = *v14;
    }
    else {
      uint64_t v58 = v36 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v14);
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease(v36);
  }

  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  __int128 v38 = v66;
  __int128 v39 = v65;
  unint64_t v40 = v67;
  if (v37 <= 0)
  {
    swift_bridgeObjectRelease(v67);
    uint64_t v52 = sub_100030000();
    unsigned int v53 = v60;
    uint64_t v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 16))(v60, v52, v64);
    id v55 = (os_log_s *)Logger.logObject.getter(v54);
    uint64_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Already subscribed cloud notifications", v57, 2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v63 + 8))(v53, v64);
    swift_release(v39);
  }

  else
  {
    sub_100010A58(0LL, (unint64_t *)&unk_10007B230, &OBJC_CLASS___CKModifySubscriptionsOperation_ptr);
    __int128 v41 = *(void **)(v39 + 16);
    uint64_t v42 = sub_100003288((uint64_t *)&unk_10007B530);
    uint64_t v43 = swift_allocObject(v42, 48LL, 7LL);
    *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_100060880;
    swift_bridgeObjectRetain(v41);
    uint64_t v44 = sub_1000131C0();
    uint64_t v45 = CKSubscription.subscriptionID.getter();
    os_log_type_t v47 = v46;

    *(void *)(v43 + 32) = v45;
    *(void *)(v43 + 4sub_10000DC70(0, 0) = v47;
    v79.value._rawValue = v41;
    v79.is_nil = v43;
    uint64_t v48 = (id)CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v79, v80);
    uint64_t v49 = sub_100011544();
    [v48 setGroup:v49];

    uint64_t v50 = swift_allocObject(&unk_100072628, 32LL, 7LL);
    uint64_t v51 = v62;
    *(void *)(v50 + swift_weakDestroy(v0 + 16) = v62;
    *(void *)(v50 + 24) = v39;
    swift_retain(v51);
    swift_retain(v39);
    CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_10002DF54, v50);
    [v38 addOperation:v48];
    swift_bridgeObjectRelease(v40);

    swift_release(v39);
  }

Class sub_1000131C0()
{
  HIBYTE(v9._object) = -18;
  id v1 = (id)CKDatabaseScopeString([v0 scope]);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  Class isa = CKDatabaseSubscription.init(subscriptionID:)(v9).super.super.isa;
  id v7 = [objc_allocWithZone(CKNotificationInfo) init];
  [v7 setShouldSendContentAvailable:1];
  -[objc_class setNotificationInfo:](isa, "setNotificationInfo:", v7);

  return isa;
}

uint64_t sub_1000132F0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v47 - v12;
  Transaction.capture()();
  if ((a2 & 1) == 0)
  {
    uint64_t v14 = (uint64_t *)(a4 + 16);
    uint64_t v15 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v15, v7);
    uint64_t v16 = swift_retain_n(a4, 2LL);
    os_log_type_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v50;
      *(_DWORD *)uint64_t v19 = 136315138;
      os_log_type_t v47 = v19 + 4;
      uint64_t v48 = v19;
      swift_beginAccess(a4 + 16, v51, 0LL, 0LL);
      uint64_t v20 = *(void *)(a4 + 16);
      uint64_t v21 = sub_100010A58(0LL, &qword_10007B248, &OBJC_CLASS___CKSubscription_ptr);
      uint64_t v22 = swift_bridgeObjectRetain(v20);
      uint64_t v23 = Array.description.getter(v22, v21);
      uint64_t v49 = v7;
      unint64_t v25 = v24;
      uint64_t v26 = v20;
      uint64_t v14 = (uint64_t *)(a4 + 16);
      swift_bridgeObjectRelease(v26);
      uint64_t v54 = sub_100003E68(v23, v25, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v47, v19 + 12);
      swift_release_n(a4, 2LL);
      swift_bridgeObjectRelease(v25);
      uint64_t v27 = v48;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully subscribed to %s", v48, 0xCu);
      uint64_t v28 = v50;
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v49);
    }

    else
    {

      swift_release_n(a4, 2LL);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }

    swift_beginAccess(v14, &v54, 0LL, 0LL);
    uint64_t v37 = *v14;
    if ((unint64_t)*v14 >> 62)
    {
      if (v37 < 0) {
        uint64_t v46 = *v14;
      }
      else {
        uint64_t v46 = v37 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v14);
      uint64_t result = _CocoaArrayWrapper.endIndex.getter(v46);
      uint64_t v38 = result;
      if (result) {
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = swift_bridgeObjectRetain(*v14);
      if (v38)
      {
LABEL_9:
        if (v38 < 1)
        {
          __break(1u);
          return result;
        }

        uint64_t v40 = 0LL;
        do
        {
          if ((v37 & 0xC000000000000001LL) != 0) {
            id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v37);
          }
          else {
            id v41 = *(id *)(v37 + 8 * v40 + 32);
          }
          uint64_t v42 = v41;
          ++v40;
          uint64_t v43 = CKSubscription.subscriptionID.getter();
          unint64_t v45 = v44;
          v53[2] = &type metadata for Bool;
          LOBYTE(v52) = 1;
          sub_10000EDB4(2, v43, v44, (uint64_t)&v52);

          swift_bridgeObjectRelease(v45);
          sub_10000B4A8((uint64_t)&v52, &qword_10007A7A0);
        }

        while (v38 != v40);
      }
    }

    return swift_bridgeObjectRelease(v37);
  }

  swift_errorRetain(a1);
  uint64_t v29 = sub_100030000();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v29, v7);
  swift_errorRetain(a1);
  uint64_t v30 = swift_errorRetain(a1);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v50 = v8;
    *(_DWORD *)uint64_t v33 = 138412290;
    swift_errorRetain(a1);
    uint64_t v35 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v52 = v35;
    uint64_t v8 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v33 + 4, v33 + 12);
    *uint64_t v34 = v35;
    sub_10002DA48(a1, 1);
    sub_10002DA48(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Subscription error: %@", v33, 0xCu);
    uint64_t v36 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v34, 1LL, v36);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    sub_10002DA48(a1, 1);
  }

  else
  {
    sub_10002DA48(a1, 1);
    sub_10002DA48(a1, 1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1000137F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100030000();
  uint64_t v7 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "CKAccountChanged notification received", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = type metadata accessor for Transaction();
  __chkstk_darwin(v11);
  *(void *)&v13[-32] = v1;
  *(void *)&v13[-24] = sub_10002DF60;
  *(void *)&v13[-16] = v1;
  swift_retain(v1);
  static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountStatus", 37LL, 2, sub_10002DF68);
  return swift_release(v1);
}

uint64_t sub_100013A14(uint64_t a1, uint64_t a2)
{
  void (*v90)(_OWORD *__return_ptr, uint64_t);
  uint64_t v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;
  void *v95;
  Swift::String v96;
  __int128 v97;
  uint64_t v98;
  id v99;
  id v100;
  Class v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  dispatch_queue_s *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  void (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;
  __int128 aBlock;
  __int128 v129;
  uint64_t (*v130)();
  uint64_t v131;
  char v132[24];
  char v133[24];
  _OWORD v134[2];
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  v127 = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  v124 = (char *)&v113 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v123 = (char *)&v113 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v113 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  v125 = (char *)&v113 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v121 = (char *)&v113 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v113 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  v122 = (char *)&v113 - v23;
  __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v113 - v24;
  uint64_t v26 = sub_100030000();
  v126 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v126(v25, v26, v3);
  uint64_t v27 = swift_retain_n(a2, 2LL);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter();
  int v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    v120 = v3;
    uint64_t v32 = v31;
    v116 = swift_slowAlloc(64LL, -1LL);
    *(void *)&aBlock = v116;
    *(_DWORD *)uint64_t v32 = 136315394;
    v115 = v30;
    id v33 = objc_retainAutoreleasedReturnValue((id)CKStringFromAccountStatus(*(void *)(a2
                                                                                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus)));
    v117 = v4;
    id v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v119 = v14;
    uint64_t v36 = a2;
    uint64_t v37 = v35;
    v118 = v21;
    unint64_t v39 = v38;

    *(void *)&v134[0] = sub_100003E68(v37, v39, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v32 + 4, v32 + 12);
    swift_release_n(v36, 2LL);
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v32 + 12) = 2080;
    v114 = v32 + 14;
    id v40 = (id)CKStringFromAccountStatus(v127);
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    uint64_t v42 = v7;
    uint64_t v43 = v26;
    unint64_t v45 = v44;

    uint64_t v46 = v41;
    a2 = v36;
    uint64_t v14 = v119;
    *(void *)&v134[0] = sub_100003E68(v46, v45, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v114, v32 + 22);
    unint64_t v47 = v45;
    uint64_t v26 = v43;
    uint64_t v7 = v42;
    uint64_t v21 = v118;
    swift_bridgeObjectRelease(v47);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v115,  "iCloud Account Changed from %s -> %s",  (uint8_t *)v32,  0x16u);
    uint64_t v48 = v116;
    swift_arrayDestroy(v116, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    uint64_t v49 = v32;
    uint64_t v3 = v120;
    swift_slowDealloc(v49, -1LL, -1LL);

    uint64_t v50 = *(void (**)(char *, uint64_t))(v117 + 8);
  }

  else
  {

    swift_release_n(a2, 2LL);
    uint64_t v50 = *(void (**)(char *, uint64_t))(v4 + 8);
  }

  v50(v25, v3);
  uint64_t v51 = *(void *)(a2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus);
  uint64_t v52 = v127;
  *(void *)(a2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus) = v127;
  *(_BYTE *)(a2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) = v52 == 1;
  switch(v52)
  {
    case 0LL:
      unsigned int v53 = v123;
      uint64_t v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v123, v26, v3);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v55, v56)) {
        goto LABEL_28;
      }
      uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v57 = 0;
      uint64_t v58 = "iCloud Account state cannot be determined!";
      goto LABEL_27;
    case 1LL:
      uint64_t v64 = v122;
      uint64_t v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v122, v26, v3);
      uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "iCloud Account Available", v68, 2u);
        swift_slowDealloc(v68, -1LL, -1LL);
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v64, v3);
      if (v51 != 1)
      {
        sub_100014DE4((BOOL)_swiftEmptyArrayStorage);
        uint64_t v70 = type metadata accessor for Transaction();
        __chkstk_darwin(v70);
        *(&v113 - 4) = a2;
        *(&v113 - 3) = (uint64_t)sub_10002E0D8;
        *(&v113 - 2) = a2;
        swift_retain(a2);
        static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountInfo", 35LL, 2, sub_10002E0E4);
        return swift_release(a2);
      }

      return result;
    case 2LL:
      uint64_t v71 = v26;
      uint64_t v72 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v21, v26, v3);
      NSString v73 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = v21;
        uint64_t v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v76 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "iCloud Account not available due to restrictions!",  v76,  2u);
        uint64_t v77 = v76;
        uint64_t v21 = v75;
        swift_slowDealloc(v77, -1LL, -1LL);
      }

      v50(v21, v3);
      uint64_t v26 = v71;
      if (v51 != 2) {
        goto LABEL_19;
      }
      unsigned int v53 = v121;
      uint64_t v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v121, v71, v3);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v55, v56)) {
        goto LABEL_28;
      }
      uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v57 = 0;
      uint64_t v58 = "Account was already in .restricted state";
      goto LABEL_27;
    case 3LL:
LABEL_19:
      uint64_t v79 = v26;
      uint64_t v80 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v125, v26, v3);
      NSString v81 = (os_log_s *)Logger.logObject.getter(v80);
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "iCloud Account not available!", v83, 2u);
        swift_slowDealloc(v83, -1LL, -1LL);
      }

      uint64_t v84 = ((uint64_t (*)(char *, uint64_t))v50)(v125, v3);
      if (v51 == 3)
      {
        uint64_t v85 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v14, v79, v3);
        v86 = (os_log_s *)Logger.logObject.getter(v85);
        os_log_type_t v87 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v86, v87))
        {
          __int128 v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)__int128 v88 = 0;
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Account was already in .noAccount state", v88, 2u);
          swift_slowDealloc(v88, -1LL, -1LL);
        }

        int v63 = v14;
        return ((uint64_t (*)(char *, uint64_t))v50)(v63, v3);
      }

      else
      {
        v90 = *(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)a2 + 256LL);
        v127 = a2;
        v90(v134, v84);
        uint64_t v91 = v135;
        v138 = v135;
        v137 = v134[0];
        swift_bridgeObjectRetain(v135);
        sub_1000295D0((uint64_t)&v137);
        v136 = v134[1];
        sub_1000295D0((uint64_t)&v136);
        sub_1000295F8(&v138);
        uint64_t v92 = *(void *)(v91 + 16);
        if (v92)
        {
          v93 = (void **)(v91 + 40);
          do
          {
            uint64_t v94 = (uint64_t)*(v93 - 1);
            v95 = *v93;
            *(void *)&aBlock = 0LL;
            *((void *)&aBlock + 1) = 0xE000000000000000LL;
            swift_bridgeObjectRetain(v95);
            _StringGuts.grow(_:)(38LL);
            swift_bridgeObjectRelease(*((void *)&aBlock + 1));
            *(void *)&aBlock = 0xD000000000000024LL;
            *((void *)&aBlock + 1) = 0x8000000100066E70LL;
            v96._uint64_t countAndFlagsBits = v94;
            v96._object = v95;
            String.append(_:)(v96);
            swift_bridgeObjectRelease(v95);
            __int128 v97 = aBlock;
            *((void *)&v129 + 1) = &type metadata for Bool;
            LOBYTE(aBlock) = 1;
            sub_10000EDB4(2, v97, *((unint64_t *)&aBlock + 1), (uint64_t)&aBlock);
            swift_bridgeObjectRelease(*((void *)&v97 + 1));
            sub_10000B4A8((uint64_t)&aBlock, &qword_10007A7A0);
            v93 += 2;
            --v92;
          }

          while (v92);
        }

        sub_1000295F8(&v138);
        uint64_t v98 = v127;
        __int128 v99 = sub_100011440();
        uint64_t v100 = [v99 privateCloudDatabase];

        v101 = sub_1000131C0();
        v102 = CKSubscription.subscriptionID.getter();
        v104 = v103;

        v129 = 0u;
        aBlock = 0u;
        sub_10000EDB4(2, v102, v104, (uint64_t)&aBlock);
        swift_bridgeObjectRelease(v104);
        sub_10000B4A8((uint64_t)&aBlock, &qword_10007A7A0);
        *(_BYTE *)(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
        v105 = (uint64_t *)(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
        swift_beginAccess( v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  v133,  1LL,  0LL);
        v106 = *v105;
        *v105 = (uint64_t)&_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease(v106);
        v107 = (uint64_t *)(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
        swift_beginAccess( v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  v132,  1LL,  0LL);
        v108 = *v107;
        *v107 = (uint64_t)&_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease(v108);
        v109 = *(dispatch_queue_s **)(v98 + 72);
        v110 = swift_allocObject(&unk_1000726F0, 32LL, 7LL);
        *(void *)(v110 + swift_weakDestroy(v0 + 16) = sub_10002E020;
        *(void *)(v110 + 24) = v98;
        v130 = sub_10002F31C;
        v131 = v110;
        *(void *)&aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&v129 = sub_10000CA9C;
        *((void *)&v129 + 1) = &unk_100072708;
        v111 = _Block_copy(&aBlock);
        v112 = v131;
        swift_retain(v98);
        swift_retain(v110);
        swift_release(v112);
        dispatch_sync(v109, v111);
        _Block_release(v111);
        LOBYTE(v109) = swift_isEscapingClosureAtFileLocation(v110, "", 119LL, 254LL, 45LL, 1LL);
        swift_release(v98);
        uint64_t result = swift_release(v110);
        if ((v109 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x100014698LL);
        }
      }

      return result;
    case 4LL:
      unsigned int v53 = v124;
      uint64_t v89 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v124, v26, v3);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v55, v56)) {
        goto LABEL_28;
      }
      uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v57 = 0;
      uint64_t v58 = "iCloud Account temporarily unavailable!";
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v55, v56, v58, v57, 2u);
      swift_slowDealloc(v57, -1LL, -1LL);
LABEL_28:

      int v63 = v53;
      return ((uint64_t (*)(char *, uint64_t))v50)(v63, v3);
    default:
      uint64_t v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v7, v26, v3);
      uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unknown CKAccountStatus!", v62, 2u);
        swift_slowDealloc(v62, -1LL, -1LL);
      }

      int v63 = v7;
      return ((uint64_t (*)(void, void))v50)(v63, v3);
  }

void sub_1000146AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_100014720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = sub_100011440();
  uint64_t v9 = (void *)swift_allocObject(&unk_100072650, 48LL, 7LL);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  _OWORD v9[5] = a4;
  v12[4] = sub_10002DFC8;
  uint64_t v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_100014D84;
  uint64_t v12[3] = &unk_100072668;
  uint64_t v10 = _Block_copy(v12);
  uint64_t v11 = v13;
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a4);
  swift_release(v11);
  [v8 accountStatusWithCompletionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_10001480C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v66 = a1;
  uint64_t v59 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v65 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v58 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v62 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v53 - v17;
  Transaction.capture()();
  uint64_t v63 = v10;
  uint64_t v64 = v9;
  if (a2)
  {
    os_log_type_t v56 = a6;
    swift_errorRetain(a2);
    uint64_t v19 = sub_100030000();
    uint64_t v57 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    swift_errorRetain(a2);
    uint64_t v20 = swift_errorRetain(a2);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = (void ***)swift_slowAlloc(8LL, -1LL);
      uint64_t v55 = v12;
      *(_DWORD *)uint64_t v23 = 138412290;
      swift_errorRetain(a2);
      unint64_t v25 = (void **)_swift_stdlib_bridgeErrorToNSError(a2);
      aBlock = v25;
      uint64_t v12 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v69, v23 + 4, v23 + 12);
      *uint64_t v24 = v25;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "error fetching account status: %@", v23, 0xCu);
      uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v24, 1LL, v26);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      swift_errorRelease(a2);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v12);
    a6 = v56;
  }

  else
  {
    uint64_t v27 = sub_100030000();
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v27, v12);
    os_log_type_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc(12LL, -1LL);
      LODWORD(v55) = v31;
      id v33 = (uint8_t *)v32;
      os_log_type_t v56 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v56;
      uint64_t v57 = v13;
      id v34 = v29;
      *(_DWORD *)id v33 = 136315138;
      uint64_t v35 = v33 + 12;
      uint64_t v54 = v33 + 4;
      uint64_t v36 = v33;
      id v37 = (id)CKStringFromAccountStatus(v66);
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      unint64_t v40 = v39;

      os_log_type_t v67 = (void *)sub_100003E68(v38, v40, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &aBlock, v54, v35);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v55, "Fetched CK account status: %s", v36, 0xCu);
      uint64_t v41 = v56;
      swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v57 + 8))(v18, v12);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }
  }

  uint64_t v42 = (void *)swift_allocObject(&unk_1000726A0, 40LL, 7LL);
  v42[2] = v61;
  v42[3] = a6;
  v42[4] = v66;
  v69[3] = sub_10002DFF8;
  uint64_t v70 = v42;
  aBlock = _NSConcreteStackBlock;
  v69[0] = 1107296256LL;
  v69[1] = sub_100005A3C;
  v69[2] = &unk_1000726B8;
  uint64_t v43 = _Block_copy(&aBlock);
  uint64_t v44 = swift_retain(a6);
  unint64_t v45 = v62;
  static DispatchQoS.unspecified.getter(v44);
  os_log_type_t v67 = _swiftEmptyArrayStorage;
  uint64_t v46 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v47 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v48 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v49 = v58;
  uint64_t v50 = v47;
  uint64_t v51 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v50, v48, v59, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v45, v49, v43);
  _Block_release(v43);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v51);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v64);
  return swift_release(v70);
}

void sub_100014D84(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_100014DE4(BOOL a1)
{
  uint64_t v2 = v1;
  BOOL v68 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint8_t **)((char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void **)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v71 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v13 = sub_100030000();
  uint64_t v14 = (uint64_t (*)(char *, uint64_t, uint64_t))v8[2];
  uint64_t v69 = v13;
  uint64_t v70 = v14;
  ((void (*)(char *))v14)(v12);
  uint64_t v15 = swift_retain_n(v1, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v72 = v7;
  if (v18)
  {
    uint64_t v66 = v8;
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    os_log_type_t v67 = (void (*)(char *, uint64_t))v3;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v65 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v76[0] = v65;
    uint64_t v21 = v2;
    uint64_t v64 = v20;
    *(_DWORD *)uint64_t v20 = 136315138;
    os_log_type_t v22 = v20 + 12;
    uint64_t v63 = v20 + 4;
    (*(void (**)(_OWORD *__return_ptr))(*v21 + 256LL))(v74);
    uint64_t v23 = v75;
    __int128 v82 = v74[0];
    swift_bridgeObjectRetain(v75);
    sub_1000295D0((uint64_t)&v82);
    __int128 v81 = v74[1];
    sub_1000295D0((uint64_t)&v81);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = v4;
    uint64_t v25 = Array.description.getter(v23, &type metadata for String);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease(v23);
    uint64_t v28 = v25;
    uint64_t v4 = v24;
    *(void *)&__int128 v79 = sub_100003E68(v28, v27, (uint64_t *)v76);
    os_log_type_t v29 = v22;
    uint64_t v2 = v21;
    uint64_t v7 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v63, v29);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease(v27);
    os_log_type_t v30 = v64;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "setupZones: %s", v64, 0xCu);
    uint64_t v31 = v65;
    swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v3 = (uint64_t)v67;
    swift_slowDealloc(v30, -1LL, -1LL);

    uint64_t v32 = (void (*)(char *, uint64_t))v66[1];
  }

  else
  {

    swift_release_n(v1, 2LL);
    uint64_t v32 = (void (*)(char *, uint64_t))v8[1];
  }

  v32(v12, v7);
  id v33 = (void *)v2[8];
  *uint64_t v6 = v33;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v3);
  id v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v33 & 1) != 0)
  {
    uint64_t v35 = dispatch_group_create();
    (*(void (**)(_OWORD *__return_ptr))(*v2 + 256LL))(v76);
    uint64_t v36 = v77;
    uint64_t v80 = v77;
    __int128 v79 = v76[0];
    swift_bridgeObjectRetain(v77);
    sub_1000295D0((uint64_t)&v79);
    __int128 v78 = v76[1];
    sub_1000295D0((uint64_t)&v78);
    sub_1000295F8(&v80);
    id v37 = _swiftEmptyArrayStorage;
    unint64_t v73 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v38 = *(void *)(v36 + 16);
    if (v38)
    {
      uint64_t v66 = v34;
      os_log_type_t v67 = v32;
      swift_bridgeObjectRetain(v36);
      unint64_t v39 = (uint64_t *)(v36 + 40);
      do
      {
        uint64_t v41 = *v39;
        id v42 = objc_allocWithZone(&OBJC_CLASS___CKRecordZone);
        swift_bridgeObjectRetain(v41);
        NSString v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v41);
        id v44 = [v42 initWithZoneName:v43];

        if (v44)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
          unint64_t v47 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v46 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v47 >= v46 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1LL);
          }
          uint64_t v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v44);
          specialized Array._endMutation()(v40);
        }

        v39 += 2;
        --v38;
      }

      while (v38);
      sub_1000295F8(&v80);
      id v37 = (void *)v73;
      uint64_t v32 = v67;
      id v34 = v66;
    }

    sub_1000295F8(&v80);
    sub_100010A58(0LL, &qword_10007B228, &OBJC_CLASS___CKModifyRecordZonesOperation_ptr);
    swift_bridgeObjectRetain(v37);
    Swift::Bool v48 = v68;
    swift_bridgeObjectRetain(v68);
    v83.value._rawValue = v37;
    v83.is_nil = v48;
    uint64_t v49 = (void *)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v83, v84);
    [v49 setCallbackQueue:v34];
    id v50 = v49;
    id v51 = sub_100011520();
    [v50 setGroup:v51];

    dispatch_group_enter(v35);
    uint64_t v52 = swift_allocObject(&unk_1000725D8, 32LL, 7LL);
    *(void *)(v52 + swift_weakDestroy(v0 + 16) = v37;
    *(void *)(v52 + 24) = v35;
    uint64_t v53 = v35;
    CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_10002DF10, v52);
    qos_class_t v54 = qos_class_self();
    uint64_t v55 = v71;
    if (v54 >= QOS_CLASS_USER_INITIATED) {
      [v50 setQualityOfService:25];
    }
    id v56 = sub_100011440();
    id v57 = [v56 privateCloudDatabase];

    [v57 addOperation:v50];
    uint64_t v58 = v72;
    uint64_t v59 = v70(v55, v69, v72);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Waiting for all zone create tasks to complete.", v62, 2u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    v32(v55, v58);
    OS_dispatch_group.wait()();
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.setupCloudNotifications", 47LL, 2, sub_10002DF1C);
  }

  else
  {
    __break(1u);
  }

void sub_1000154BC(uint64_t a1)
{
  uint64_t v30 = a1 + 64;
  uint64_t v1 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v2 = -1LL;
  if (v1 < 64) {
    uint64_t v2 = ~(-1LL << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v4 = 0LL;
  os_log_type_t v29 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v3)
    {
      unint64_t v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v6 = v5 | (v4 << 6);
      goto LABEL_17;
    }

    if (__OFADD__(v4++, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v4 >= v31) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v30 + 8 * v4);
    if (!v8) {
      break;
    }
LABEL_16:
    unint64_t v3 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v4 << 6);
LABEL_17:
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 16 * v6 + 8);
    id v11 = *(id *)(*(void *)(a1 + 48) + 8 * v6);
    swift_retain(v10);
    id v12 = v11;
    swift_retain(v10);
    id v13 = [v12 recordID];
    id v14 = [v13 recordName];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    swift_bridgeObjectRetain(v17);
    v18._uint64_t countAndFlagsBits = 58LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v17);
    uint64_t v19 = swift_release(v10);
    uint64_t v20 = v17;
    uint64_t v21 = CKRecord.recordType.getter(v19);
    uint64_t v23 = v22;

    swift_bridgeObjectRetain(v20);
    v24._uint64_t countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v20);
    if (v33)
    {
      swift_bridgeObjectRelease(v29);
      swift_release(a1);
      swift_release(v10);

      return;
    }

    swift_release(v10);

    if (v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0) {
        os_log_type_t v29 = sub_10000F040(0LL, v29[2] + 1LL, 1, v29);
      }
      unint64_t v26 = v29[2];
      unint64_t v25 = v29[3];
      if (v26 >= v25 >> 1) {
        os_log_type_t v29 = sub_10000F040((void *)(v25 > 1), v26 + 1, 1, v29);
      }
      v29[2] = v26 + 1;
      unint64_t v27 = &v29[2 * v26];
      v27[4] = v15;
      v27[5] = v20;
    }
  }

  int64_t v9 = v4 + 1;
  if (v4 + 1 >= v31) {
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(v30 + 8 * v9);
  if (v8) {
    goto LABEL_15;
  }
  int64_t v9 = v4 + 2;
  if (v4 + 2 >= v31) {
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(v30 + 8 * v9);
  if (v8) {
    goto LABEL_15;
  }
  int64_t v9 = v4 + 3;
  if (v4 + 3 >= v31) {
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(v30 + 8 * v9);
  if (v8)
  {
LABEL_15:
    int64_t v4 = v9;
    goto LABEL_16;
  }

  int64_t v28 = v4 + 4;
  if (v4 + 4 >= v31)
  {
LABEL_31:
    swift_release(a1);
    return;
  }

  unint64_t v8 = *(void *)(v30 + 8 * v28);
  v4 += 4LL;
  if (v8) {
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v4 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v4 >= v31) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v30 + 8 * v4);
    ++v28;
    if (v8) {
      goto LABEL_16;
    }
  }

LABEL_33:
  __break(1u);
}

    id v11 = (v25 - 1) & v25;
    os_log_type_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    int64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      uint64_t v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    Swift::String v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      int64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        os_log_type_t v29 = v18 == v28;
        if (v18 == v28) {
          Swift::String v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v2sub_10000DC70(0, 0) = v32;
    *(void *)(*(void *)(v8 + 56) + v2sub_10000DC70(0, 0) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v3 = v37;
  Swift::String v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *Swift::String v24 = -1LL << v36;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

        id v13 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v16 << 6);
      }

      int64_t v31 = *(void **)(*(void *)(v6 + 48) + 8 * v23);
      uint64_t v35 = *(_OWORD *)(*(void *)(v6 + 56) + 16 * v23);
      if ((a2 & 1) == 0)
      {
        uint64_t v32 = v31;
        swift_retain(*((void *)&v35 + 1));
      }

      uint64_t v17 = NSObject._rawHashValue(seed:)(*(void *)(v9 + 40));
      Swift::String v18 = -1LL << *(_BYTE *)(v9 + 32);
      uint64_t v19 = v17 & ~v18;
      uint64_t v20 = v19 >> 6;
      if (((-1LL << v19) & ~*(void *)(v15 + 8 * (v19 >> 6))) != 0)
      {
        uint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v27 = 0;
        int64_t v28 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          os_log_type_t v29 = v20 == v28;
          if (v20 == v28) {
            uint64_t v20 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v15 + 8 * v20);
        }

        while (v30 == -1);
        uint64_t v21 = __clz(__rbit64(~v30)) + (v20 << 6);
      }

      *(void *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
      *(void *)(*(void *)(v9 + 48) + 8 * v21) = v31;
      *(_OWORD *)(*(void *)(v9 + 56) + 16 * v21) = v35;
      ++*(void *)(v9 + 16);
    }
  }

  swift_release(v6);
LABEL_43:
  void *v4 = v9;
}

    id v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    int64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    id v14 = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = v14 & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      Swift::String v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        os_log_type_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      Swift::String v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  swift_release(v5);
  void *v3 = v8;
}

    id v11 = (v27 - 1) & v27;
    Swift::String v24 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_34:
    uint64_t v33 = *(void **)(*(void *)(v5 + 48) + 8 * v24);
    id v37 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v24);
    if ((a2 & 1) == 0)
    {
      id v34 = v33;
      swift_retain(*((void *)&v37 + 1));
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    type metadata accessor for CFString();
    uint64_t v16 = v15;
    uint64_t v17 = sub_100046500(&qword_10007BBF8, (uint64_t)&unk_1000624CC);
    _CFObject.hash(into:)(v38, v16, v17);
    Swift::String v18 = Hasher._finalize()();
    uint64_t v19 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v20 = v18 & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v13 + 8 * (v20 >> 6))) != 0)
    {
      os_log_type_t v22 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v13 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      os_log_type_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v31 = v21 == v30;
        if (v21 == v30) {
          uint64_t v21 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v21);
      }

      while (v32 == -1);
      os_log_type_t v22 = __clz(__rbit64(~v32)) + (v21 << 6);
    }

    *(void *)(v13 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    *(void *)(*(void *)(v8 + 48) + 8 * v22) = v33;
    *(_OWORD *)(*(void *)(v8 + 56) + 16 * v22) = v37;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v26 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v26, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v26 = -1LL << v35;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  swift_release(v5);
  void *v3 = v8;
}

    id v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    int64_t v31 = v30[1];
    uint64_t v33 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    id v14 = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = v14 & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      Swift::String v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        os_log_type_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      Swift::String v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(void *)(v8 + 56) + 4 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  swift_release(v5);
  void *v3 = v8;
}

void sub_1000157F8(uint64_t a1)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  unint64_t v6 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v7 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v5 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    id v14 = objc_msgSend(v13, "recordName", swift_retain(v12).n128_f64[0]);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;
    swift_release(v12);

    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
      unint64_t v6 = sub_10000F040(0LL, v6[2] + 1LL, 1, v6);
    }
    unint64_t v19 = v6[2];
    unint64_t v18 = v6[3];
    if (v19 >= v18 >> 1) {
      unint64_t v6 = sub_10000F040((void *)(v18 > 1), v19 + 1, 1, v6);
    }
    _OWORD v6[2] = v19 + 1;
    uint64_t v20 = &v6[2 * v19];
    v20[4] = v15;
    v20[5] = v17;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v9 >= v22) {
      goto LABEL_27;
    }
    unint64_t v10 = *(void *)(v21 + 8 * v9);
    ++v5;
    if (!v10)
    {
      int64_t v5 = v9 + 1;
      if (v9 + 1 >= v22) {
        goto LABEL_27;
      }
      unint64_t v10 = *(void *)(v21 + 8 * v5);
      if (!v10)
      {
        int64_t v5 = v9 + 2;
        if (v9 + 2 >= v22) {
          goto LABEL_27;
        }
        unint64_t v10 = *(void *)(v21 + 8 * v5);
        if (!v10)
        {
          int64_t v5 = v9 + 3;
          if (v9 + 3 >= v22) {
            goto LABEL_27;
          }
          unint64_t v10 = *(void *)(v21 + 8 * v5);
          if (!v10) {
            break;
          }
        }
      }
    }

LABEL_20:
    unint64_t v4 = (v10 - 1) & v10;
  }

  int64_t v11 = v9 + 4;
  if (v11 >= v22)
  {
LABEL_27:
    swift_release(a1);
    return;
  }

  unint64_t v10 = *(void *)(v21 + 8 * v11);
  if (v10)
  {
    int64_t v5 = v11;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v5 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v5 >= v22) {
      goto LABEL_27;
    }
    unint64_t v10 = *(void *)(v21 + 8 * v5);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }

LABEL_29:
  __break(1u);
}

    __break(1u);
LABEL_30:
    if (v2 < 0) {
      unint64_t v25 = v2;
    }
    else {
      unint64_t v25 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  return _swiftEmptyArrayStorage;
}

  __break(1u);
LABEL_30:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ALL,  0x8000000100067AE0LL,  "bluetoothuserd/DarwinNotificationHelper.swift",  45LL,  2LL,  16LL,  0);
  __break(1u);
  return result;
}

void sub_100015A54(uint64_t a1, char a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  id v14 = (char *)&v38 - v13;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    uint64_t v28 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v28, v8);
    swift_errorRetain(a1);
    uint64_t v29 = swift_errorRetain(a1);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(8LL, -1LL);
      uint64_t v41 = v9;
      id v34 = (void *)v33;
      uint64_t v40 = (dispatch_group_s *)v8;
      *(_DWORD *)uint64_t v32 = 138412290;
      swift_errorRetain(a1);
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v43 = v35;
      uint64_t v8 = (uint64_t)v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v32 + 4, v32 + 12);
      *id v34 = v35;
      sub_10002DA48(a1, 1);
      sub_10002DA48(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Error creating zone: %@", v32, 0xCu);
      uint64_t v36 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v34, 1LL, v36);
      id v37 = v34;
      uint64_t v9 = v41;
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);

      sub_10002DA48(a1, 1);
    }

    else
    {
      sub_10002DA48(a1, 1);
      sub_10002DA48(a1, 1);
      swift_errorRelease(a1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }

  else
  {
    uint64_t v15 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v15, v8);
    uint64_t v16 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v40 = a4;
      unint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v9;
      uint64_t v21 = v20;
      uint64_t v43 = v20;
      *(_DWORD *)unint64_t v19 = 136315138;
      unint64_t v39 = v19 + 4;
      uint64_t v22 = sub_100010A58(0LL, &qword_10007B250, &OBJC_CLASS___CKRecordZone_ptr);
      uint64_t v23 = swift_bridgeObjectRetain(a3);
      uint64_t v24 = Array.description.getter(v23, v22);
      unint64_t v26 = v25;
      swift_bridgeObjectRelease(a3);
      uint64_t v27 = v24;
      a4 = v40;
      uint64_t v42 = sub_100003E68(v27, v26, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v39, v19 + 12);
      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Created Zone: %s", v19, 0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v8);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }

  dispatch_group_leave(a4);
}

void sub_100015E34(void *a1, char a2, char *a3)
{
  v136 = a3;
  uint64_t v135 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v135 - 8);
  uint64_t v6 = __chkstk_darwin(v135);
  v134 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v120 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v120 - v11;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  v131 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v120 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v120 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  v132 = (char *)&v120 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v120 - v26;
  __chkstk_darwin(v25);
  if ((a2 & 1) != 0)
  {
    uint64_t v41 = (char *)&v120 - v28;
    swift_errorRetain(a1);
    uint64_t v42 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v41, v42, v13);
    swift_errorRetain(a1);
    uint64_t v43 = swift_errorRetain(a1);
    v136 = v41;
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc(12LL, -1LL);
      unint64_t v47 = a1;
      uint64_t v133 = v13;
      Swift::Bool v48 = (uint8_t *)v46;
      uint64_t v49 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)Swift::Bool v48 = 138412290;
      swift_errorRetain(v47);
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError(v47);
      *(void *)&__int128 aBlock = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v48 + 4, v48 + 12);
      *uint64_t v49 = v50;
      sub_10002E2E8(v47, 1);
      sub_10002E2E8(v47, 1);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "accountInfo error: %@", v48, 0xCu);
      uint64_t v51 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v49, 1LL, v51);
      swift_slowDealloc(v49, -1LL, -1LL);
      uint64_t v13 = v133;
      swift_slowDealloc(v48, -1LL, -1LL);

      sub_10002E2E8(v47, 1);
    }

    else
    {
      sub_10002E2E8(a1, 1);
      sub_10002E2E8(a1, 1);
      swift_errorRelease(a1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v136, v13);
  }

  else
  {
    uint64_t v126 = v5;
    id v29 = a1;
    uint64_t v30 = sub_100030000();
    uint64_t v128 = v14;
    os_log_type_t v31 = *(void (**)(char *))(v14 + 16);
    uint64_t v129 = v30;
    v31(v27);
    id v130 = v29;
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v130);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v133 = v13;
    v123 = v19;
    v127 = v22;
    v125 = v12;
    v124 = v10;
    if (v34)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v35 = 138412290;
      *(void *)&__int128 aBlock = v130;
      id v37 = v130;
      uint64_t v38 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v35 + 4, v35 + 12);
      *uint64_t v36 = a1;
      sub_10002E2E8(a1, 0);
      sub_10002E2E8(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "accountInfo: %@", v35, 0xCu);
      uint64_t v39 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v36, 1LL, v39);
      swift_slowDealloc(v36, -1LL, -1LL);
      uint64_t v40 = v35;
      uint64_t v13 = v133;
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      sub_10002E2E8(a1, 0);
      sub_10002E2E8(a1, 0);
      uint64_t v38 = a1;
    }

    uint64_t v52 = *(void (**)(char *, uint64_t))(v128 + 8);
    v52(v27, v13);
    id v53 = v130;
    if ([v130 accountStatus] == (id)1)
    {
      uint64_t v54 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
      char v55 = v136[OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable];
      ((void (*)(char *, uint64_t, uint64_t))v31)(v132, v129, v13);
      id v56 = v53;
      id v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.default.getter();
      BOOL v59 = os_log_type_enabled(v57, v58);
      v122 = v38;
      v121 = v31;
      if (v59)
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v60 = 67109120;
        LODWORD(aBlock) = [v56 supportsDeviceToDeviceEncryption];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v60 + 4, v60 + 8);
        sub_10002E2E8(v38, 0);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Setting manateeAvailable to %{BOOL}d", v60, 8u);
        os_log_type_t v61 = v60;
        uint64_t v13 = v133;
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      else
      {
        sub_10002E2E8(v38, 0);
      }

      v52(v132, v13);
      unsigned __int8 v69 = [v56 supportsDeviceToDeviceEncryption];
      uint64_t v70 = v136;
      v136[v54] = v69;
      uint64_t v71 = (dispatch_queue_s *)*((void *)v70 + 9);
      uint64_t v72 = swift_allocObject(&unk_100072790, 32LL, 7LL);
      *(void *)(v72 + swift_weakDestroy(v0 + 16) = sub_10002E2F4;
      *(void *)(v72 + 24) = v70;
      v140 = sub_10002F31C;
      uint64_t v141 = v72;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      *(void *)&__int128 v139 = sub_10000CA9C;
      *((void *)&v139 + 1) = &unk_1000727A8;
      unint64_t v73 = _Block_copy(&aBlock);
      uint64_t v74 = v141;
      swift_retain(v70);
      swift_retain(v72);
      swift_release(v74);
      dispatch_sync(v71, v73);
      _Block_release(v73);
      LOBYTE(v71) = swift_isEscapingClosureAtFileLocation(v72, "", 119LL, 359LL, 45LL, 1LL);
      swift_release(v72);
      if ((v71 & 1) != 0)
      {
        __break(1u);
      }

      else if ((v55 & 1) != 0 || ![v56 supportsDeviceToDeviceEncryption])
      {
        notify_post("com.apple.bluetoothuser.cloudChanged");
        sub_10002E2E8(v122, 0);
        swift_release(v136);
      }

      else
      {
        uint64_t v75 = v52;
        uint64_t v76 = v136;
        uint64_t v77 = v124;
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x8000000100066EA0LL, 1LL);
        uint64_t v78 = (uint64_t)v125;
        URL.appendingPathComponent(_:)(0x2E65746176697250LL, 0xED00006E656B6F74LL);
        __int128 v79 = *(void (**)(char *, uint64_t))(v126 + 8);
        uint64_t v80 = v135;
        v79(v77, v135);
        v132 = (char *)sub_100029B00(v78);
        uint64_t v81 = ((uint64_t (*)(uint64_t, uint64_t))v79)(v78, v80);
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v76 + 256LL))(&aBlock, v81);
        __int128 v82 = v140;
        v144[0] = v140;
        __int128 v143 = aBlock;
        swift_bridgeObjectRetain(v140);
        sub_1000295D0((uint64_t)&v143);
        __int128 v142 = v139;
        sub_1000295D0((uint64_t)&v142);
        sub_1000295F8(v144);
        uint64_t v83 = *((void *)v82 + 2);
        if (v83)
        {
          sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
          uint64_t v84 = v83 - 1;
          uint64_t v85 = (void **)((char *)v82 + 40);
          do
          {
            uint64_t v86 = v84;
            uint64_t v88 = (uint64_t)*(v85 - 1);
            os_log_type_t v87 = *v85;
            uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
            uint64_t v91 = v90;
            swift_bridgeObjectRetain(v87);
            v92._uint64_t countAndFlagsBits = v88;
            v92._object = v87;
            v93._uint64_t countAndFlagsBits = v89;
            v93._object = v91;
            Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v92, v93).super.isa;
            uint64_t v95 = (uint64_t)v134;
            sub_100016C0C(2LL, isa);

            v96 = (void *)sub_100029B00(v95);
            v79((char *)v95, v135);

            BOOL v97 = v96 == 0LL;
            if (!v96) {
              break;
            }
            uint64_t v84 = v86 - 1;
            v85 += 2;
          }

          while (v86);
        }

        else
        {
          BOOL v97 = 0;
        }

        sub_1000295F8(v144);
        uint64_t v98 = v127;
        uint64_t v99 = v133;
        uint64_t v100 = (uint64_t (*)(char *, uint64_t, uint64_t))v121;
        uint64_t v101 = ((uint64_t (*)(char *, uint64_t, uint64_t))v121)(v127, v129, v133);
        v102 = (os_log_s *)Logger.logObject.getter(v101);
        os_log_type_t v103 = static os_log_type_t.default.getter();
        BOOL v104 = os_log_type_enabled(v102, v103);
        v105 = v122;
        if (v104)
        {
          v106 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v106 = 0;
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Manatee PCS keys are now available", v106, 2u);
          v107 = v106;
          uint64_t v99 = v133;
          swift_slowDealloc(v107, -1LL, -1LL);
        }

        v75(v98, v99);
        v108 = v132;
        if (v132) {
          char v109 = v97;
        }
        else {
          char v109 = 1;
        }
        if ((v109 & 1) != 0
          || (v110 = sub_100058E28(),
              swift_beginAccess(v110, v137, 0LL, 0LL),
              int v111 = *v110,
              uint64_t v99 = v133,
              v111 == 1))
        {
          v112 = v123;
          uint64_t v113 = v100(v123, v129, v99);
          v114 = (os_log_s *)Logger.logObject.getter(v113);
          os_log_type_t v115 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v114, v115))
          {
            v116 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)v116 = 0;
            _os_log_impl((void *)&_mh_execute_header, v114, v115, "Fetching from cloud container", v116, 2u);
            v117 = v116;
            uint64_t v99 = v133;
            swift_slowDealloc(v117, -1LL, -1LL);
          }

          v75(v112, v99);
          v118 = v136;
          v119 = *(void (**)(uint64_t, void, uint64_t (*)(uint64_t, char), char *))(*(void *)v136 + 816LL);
          swift_retain(v136);
          v119(2LL, 0LL, sub_10002E3C0, v118);
          sub_10002E2E8(v105, 0);
          swift_release_n(v118, 2LL);
        }

        else
        {
          notify_post("com.apple.bluetoothuser.cloudChanged");
          sub_10002E2E8(v105, 0);
          swift_release(v136);
        }
      }
    }

    else
    {
      uint64_t v62 = v131;
      uint64_t v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v131, v129, v13);
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v65 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = v13;
        os_log_type_t v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Account not available", v67, 2u);
        BOOL v68 = v67;
        uint64_t v13 = v66;
        swift_slowDealloc(v68, -1LL, -1LL);

        sub_10002E2E8(v38, 0);
      }

      else
      {
        sub_10002E2E8(v38, 0);
      }

      v52(v62, v13);
    }
  }

uint64_t sub_1000169EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x8000000100066EA0LL, 1LL);
  if (a1 == 3)
  {
    uint64_t v10 = 0x646572616853LL;
    goto LABEL_6;
  }

  if (a1 == 2)
  {
    uint64_t v11 = 0x2E65746176697250LL;
LABEL_11:
    unint64_t v12 = 0xED00006E656B6F74LL;
    goto LABEL_12;
  }

  if (a1 != 1)
  {
    uint64_t v13 = sub_100030000();
    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unknown CKDatabase.Scope!", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v11 = 0x2E6E776F6E6B6E55LL;
    goto LABEL_11;
  }

  uint64_t v10 = 0x63696C627550LL;
LABEL_6:
  uint64_t v11 = v10 & 0xFFFFFFFFFFFFLL | 0x742E000000000000LL;
  unint64_t v12 = 0xEC0000006E656B6FLL;
LABEL_12:
  URL.appendingPathComponent(_:)(v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100016C0C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
  if (a1 == 3)
  {
    uint64_t v8 = 0x646572616853LL;
    unint64_t v9 = 0xE600000000000000LL;
    goto LABEL_11;
  }

  if (a1 == 2)
  {
    uint64_t v8 = 0x65746176697250LL;
LABEL_10:
    unint64_t v9 = 0xE700000000000000LL;
    goto LABEL_11;
  }

  if (a1 != 1)
  {
    uint64_t v10 = sub_100030000();
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
    unint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unknown CKDatabase.Scope!", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v8 = 0x6E776F6E6B6E55LL;
    goto LABEL_10;
  }

  uint64_t v8 = 0x63696C627550LL;
  unint64_t v9 = 0xE600000000000000LL;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v8);
  id v15 = [a2 ownerName];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  URL.appendPathComponent(_:)(v19);
  swift_bridgeObjectRelease(v18);
  id v20 = [a2 zoneName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  v27._uint64_t countAndFlagsBits = v21;
  v27._object = v23;
  v24._uint64_t countAndFlagsBits = 0x6E656B6F742ELL;
  v24._object = (void *)0xE600000000000000LL;
  String.append(_:)(v24);
  object = v27._object;
  URL.appendPathComponent(_:)(v27);
  return swift_bridgeObjectRelease(object);
}

uint64_t sub_100016E6C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v27 - v11;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    uint64_t v19 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v19, v6);
    swift_errorRetain(a1);
    uint64_t v20 = swift_errorRetain(a1);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v29 = a3;
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v23 = 138412290;
      swift_errorRetain(a1);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v23 + 4, v23 + 12);
      uint64_t v25 = v28;
      *uint64_t v28 = v24;
      sub_10002DA48(a1, 1);
      sub_10002DA48(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error from fetchChanges: %@", v23, 0xCu);
      uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v25, 1LL, v26);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      sub_10002DA48(a1, 1);
      sub_10002DA48(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    sub_10001D7A0(a1, 1);
    return sub_10002DA48(a1, 1);
  }

  else
  {
    uint64_t v13 = sub_100030000();
    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v13, v6);
    id v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "fetchChanges succeeded", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

void sub_100017138(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  os_log_type_t v16 = (char *)&v36 - v15;
  switch(a1)
  {
    case 1LL:
      uint64_t v18 = sub_100030000();
      uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, v18, v7);
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        os_log_type_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "NOT USING PUBLIC DB", v22, 2u);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
      break;
    case 3LL:
      uint64_t v23 = sub_100030000();
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, v23, v7);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "NOT USING SHARED DB", v27, 2u);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      break;
    case 2LL:
      id v17 = sub_100011440();
      id v37 = [v17 privateCloudDatabase];

      sub_100029E98(v37, (uint64_t)a3, a4);
      return;
    default:
      uint64_t v28 = sub_100030000();
      uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v28, v7);
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unknown CKDatabase.Scope!", v32, 2u);
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      break;
  }

  unint64_t v33 = sub_100029E54();
  uint64_t v34 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v33, 0LL, 0LL);
  *uint64_t v35 = 1LL;
  a3(v34, 1LL);
  swift_errorRelease(v34);
}

void sub_100017460(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v79 = a4;
  uint64_t v77 = a3;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void **)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v84 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v70 - v10;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = swift_allocObject(&unk_100072A60, 24LL, 7LL);
  *(void *)(v83 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v82 = swift_allocObject(&unk_100072A60, 24LL, 7LL);
  *(void *)(v82 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v16 = v6;
  sub_1000169EC((uint64_t)[a2 scope]);
  uint64_t v17 = sub_100029B00((uint64_t)v15);
  uint64_t v18 = v15;
  uint64_t v19 = (void *)v17;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  id v20 =  [objc_allocWithZone(CKFetchDatabaseChangesOperation) initWithPreviousServerChangeToken:v19];
  uint64_t v78 = a1;
  id v21 = sub_100011568();
  [v20 setGroup:v21];

  [v20 setFetchAllChanges:1];
  uint64_t v22 = sub_100030000();
  uint64_t v75 = (void (*)(char *))v7[2];
  uint64_t v76 = v22;
  v75(v11);
  id v23 = a2;
  id v24 = v19;
  id v25 = v23;
  id v26 = v24;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v80 = v6;
  id v81 = v26;
  if (v29)
  {
    unint64_t v73 = v11;
    uint64_t v74 = v7;
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v71 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v72 = (void **)swift_slowAlloc(32LL, -1LL);
    __int128 aBlock = v72;
    *(_DWORD *)uint64_t v30 = 136315394;
    id v31 = (id)CKDatabaseScopeString([v25 scope]);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v33 = v19;
    unint64_t v35 = v34;

    uint64_t v85 = sub_100003E68(v32, v35, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &aBlock, v30 + 4, v30 + 12);

    unint64_t v36 = v35;
    uint64_t v19 = v33;
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v30 + 12) = 2112;
    if (v33)
    {
      id v37 = v81;
      uint64_t v85 = (uint64_t)v81;
      id v38 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &aBlock, v30 + 14, v30 + 22);
      uint64_t v39 = v74;
    }

    else
    {
      uint64_t v85 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &aBlock, v30 + 14, v30 + 22);
      uint64_t v39 = v74;
      id v37 = v81;
    }

    uint64_t v42 = v71;
    *uint64_t v71 = v19;

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Old %s database change token: %@", (uint8_t *)v30, 0x16u);
    uint64_t v43 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v42, 1LL, v43);
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v44 = v72;
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    uint64_t v40 = (void *)v39[1];
    uint64_t v41 = v73;
    uint64_t v16 = v80;
  }

  else
  {

    uint64_t v40 = (void *)v7[1];
    uint64_t v41 = v11;
  }

  uint64_t v74 = v40;
  ((void (*)(char *, uint64_t))v40)(v41, v16);
  os_log_type_t v45 = v19;
  uint64_t v46 = v83;
  v90 = sub_10002EB64;
  uint64_t v91 = v83;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v87 = 1107296256LL;
  uint64_t v88 = sub_100017E34;
  uint64_t v89 = &unk_100072A78;
  unint64_t v47 = _Block_copy(&aBlock);
  uint64_t v48 = v91;
  swift_retain(v46);
  swift_release(v48);
  [v20 setRecordZoneWithIDChangedBlock:v47];
  _Block_release(v47);
  uint64_t v49 = v82;
  v90 = sub_10002EB6C;
  uint64_t v91 = v82;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v87 = 1107296256LL;
  uint64_t v88 = sub_100017E34;
  uint64_t v89 = &unk_100072AA0;
  uint64_t v50 = _Block_copy(&aBlock);
  uint64_t v51 = v91;
  swift_retain(v49);
  swift_release(v51);
  [v20 setRecordZoneWithIDWasDeletedBlock:v50];
  _Block_release(v50);
  uint64_t v52 = swift_allocObject(&unk_100072AD8, 24LL, 7LL);
  *(void *)(v52 + swift_weakDestroy(v0 + 16) = v25;
  v90 = sub_10002EC28;
  uint64_t v91 = v52;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v87 = 1107296256LL;
  uint64_t v88 = sub_100017E34;
  uint64_t v89 = &unk_100072AF0;
  id v53 = _Block_copy(&aBlock);
  uint64_t v54 = v91;
  id v55 = v25;
  swift_release(v54);
  [v20 setChangeTokenUpdatedBlock:v53];
  _Block_release(v53);
  id v56 = (void *)swift_allocObject(&unk_100072B28, 72LL, 7LL);
  uint64_t v57 = v77;
  uint64_t v58 = v78;
  v56[2] = v78;
  v56[3] = v57;
  uint64_t v59 = v79;
  v56[4] = v79;
  v56[5] = v55;
  v56[6] = v49;
  v56[7] = v46;
  v56[8] = v45;
  id v60 = v55;
  id v61 = v81;
  swift_retain(v46);
  swift_retain(v49);
  swift_retain(v58);
  swift_retain(v59);
  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter(sub_10002EC7C, v56);
  ((void (*)(char *, uint64_t, uint64_t))v75)(v84, v76, v16);
  uint64_t v62 = (void **)v20;
  uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    id v81 = v61;
    os_log_type_t v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v66 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v65 = 138412290;
    __int128 aBlock = v62;
    os_log_type_t v67 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v87, v65 + 4, v65 + 12);
    *uint64_t v66 = v62;

    id v61 = v81;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Adding Cloud operation %@", v65, 0xCu);
    uint64_t v68 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v66, 1LL, v68);
    unsigned __int8 v69 = v66;
    uint64_t v16 = v80;
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {

    uint64_t v63 = (os_log_s *)v62;
  }

  ((void (*)(char *, uint64_t))v74)(v84, v16);
  [v60 addOperation:v62];
  swift_release(v83);
  swift_release(v82);
}

uint64_t sub_100017C00(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a2 + 16, &v27, 33LL, 0LL);
  id v8 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  uint64_t v9 = *(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v11 = *(void *)(v9 + 0x10);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v11 >= v10 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
  }
  uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
  specialized Array._endMutation()(v12);
  swift_endAccess(&v27);
  uint64_t v13 = sub_100030000();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
  id v14 = v8;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = v4;
    id v27 = v14;
    uint64_t v19 = (void *)v18;
    id v25 = v7;
    *(_DWORD *)uint64_t v17 = 138412290;
    id v20 = v14;
    uint64_t v7 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v17 + 4, v17 + 12);
    *uint64_t v19 = v14;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Record Zone ID Changed: %@", v17, 0xCu);
    uint64_t v21 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v19, 1LL, v21);
    uint64_t v22 = v19;
    uint64_t v4 = v26;
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    uint64_t v15 = (os_log_s *)v14;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100017E38(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100030000();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  id v9 = a2;
  id v10 = a1;
  id v11 = v9;
  id v12 = v10;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v29;
    *(_DWORD *)uint64_t v15 = 136315394;
    id v16 = (id)CKDatabaseScopeString([v11 scope]);
    uint64_t v28 = v5;
    id v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v27 = v4;
    unint64_t v20 = v19;

    uint64_t v30 = sub_100003E68(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v15 + 12) = 2112;
    uint64_t v30 = (uint64_t)v12;
    id v21 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 14, v15 + 22);
    uint64_t v22 = v26;
    *uint64_t v26 = v12;

    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Change token updated, database, %s, token, %@",  (uint8_t *)v15,  0x16u);
    uint64_t v23 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v22, 1LL, v23);
    swift_slowDealloc(v22, -1LL, -1LL);
    uint64_t v24 = v29;
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v7, v27);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

void sub_1000180D0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_100018120( void *a1, uint64_t a2, void *a3, void (*a4)(void *, uint64_t), uint64_t a5, void *a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  v206 = a3;
  unint64_t v207 = a8;
  v187 = a4;
  v188 = a5;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v198 = *(void *)(v13 - 8);
  uint64_t v199 = v13;
  uint64_t v14 = *(void *)(v198 + 64);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v16 = __chkstk_darwin(v15);
  v189 = (char *)&v178 - v17;
  __chkstk_darwin(v16);
  v200 = (char *)&v178 - v18;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  v209 = *(uint8_t **)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  v204 = (uint64_t *)((char *)&v178 - v23);
  uint64_t v24 = __chkstk_darwin(v22);
  v208 = (uint64_t *)((char *)&v178 - v25);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v178 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  unint64_t v33 = (char *)&v178 - v32;
  unsigned int v191 = a2;
  uint64_t v196 = v29;
  if ((a2 & 0x100) != 0)
  {
    swift_errorRetain(a1);
    uint64_t v52 = sub_100030000();
    id v53 = v209;
    (*((void (**)(char *, uint64_t, uint64_t))v209 + 2))(v33, v52, v19);
    swift_errorRetain(a1);
    uint64_t v54 = swift_errorRetain(a1);
    id v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v57 = 138412290;
      swift_errorRetain(a1);
      uint64_t v59 = (void **)_swift_stdlib_bridgeErrorToNSError(a1);
      __int128 aBlock = v59;
      id v53 = v209;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v219, v57 + 4, v57 + 12);
      *uint64_t v58 = v59;
      sub_10002ECBC(a1, v191, 1);
      sub_10002ECBC(a1, v191, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Error during fetch database changes operation: %@",  v57,  0xCu);
      uint64_t v60 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v58, 1LL, v60);
      swift_slowDealloc(v58, -1LL, -1LL);
      id v61 = v57;
      a2 = v191;
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    else
    {
      sub_10002ECBC(a1, a2, 1);
      sub_10002ECBC(a1, a2, 1);
    }

    (*((void (**)(char *, uint64_t))v53 + 1))(v33, v196);
    sub_10001D7A0((uint64_t)a1, 0);
    swift_errorRetain(a1);
    v187(a1, 1LL);
    sub_10002ECBC(a1, a2, 1);
    sub_10002ECBC(a1, a2, 1);
    return;
  }

  v201 = v31;
  uint64_t v202 = a7;
  uint64_t v190 = v30;
  v203 = (uint64_t *)(a7 + 16);
  id v205 = a1;
  uint64_t v34 = sub_100030000();
  v193 = (void (*)(char *))*((void *)v209 + 2);
  uint64_t v194 = v34;
  v193(v28);
  sub_10002ECB0(a1, a2, 0);
  id v35 = a6;
  sub_10002ECB0(a1, a2, 0);
  id v36 = v35;
  id v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter();
  LODWORD(v195) = v38;
  BOOL v39 = os_log_type_enabled(v37, v38);
  v182 = a1;
  uint64_t v178 = v14;
  v179 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v197 = v36;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc(28LL, -1LL);
    os_log_t v186 = v37;
    uint64_t v41 = v40;
    v185 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    v192 = (void **)swift_slowAlloc(32LL, -1LL);
    __int128 aBlock = v192;
    *(_DWORD *)uint64_t v41 = 67109634;
    LODWORD(v225) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, (char *)&v225 + 4, v41 + 4, v41 + 8);
    *(_WORD *)(v41 + 8) = 2080;
    id v42 = (id)CKDatabaseScopeString([v36 scope]);
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    unint64_t v45 = v44;

    uint64_t v225 = sub_100003E68(v43, v45, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226, v41 + 10, v41 + 18);

    swift_bridgeObjectRelease(v45);
    *(_WORD *)(v41 + 18) = 2112;
    uint64_t v225 = (uint64_t)v205;
    id v46 = v205;
    uint64_t v47 = v191;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226, v41 + 20, v41 + 28);
    uint64_t v48 = v185;
    uint64_t *v185 = (uint64_t)a1;
    sub_10002ECBC(a1, v47, 0);
    sub_10002ECBC(a1, v47, 0);
    os_log_t v49 = v186;
    _os_log_impl( (void *)&_mh_execute_header,  v186,  (os_log_type_t)v195,  "Fetch database changes complete, moreComing %{BOOL}d, database, %s, token, %@",  (uint8_t *)v41,  0x1Cu);
    uint64_t v50 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v48, 1LL, v50);
    swift_slowDealloc(v48, -1LL, -1LL);
    uint64_t v51 = v192;
    swift_arrayDestroy(v192, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    sub_10002ECBC(a1, a2, 0);
    sub_10002ECBC(a1, a2, 0);
  }

  v192 = (void **)*((void *)v209 + 1);
  ((void (*)(char *, uint64_t))v192)(v28, v19);
  uint64_t v62 = v203;
  swift_beginAccess(v203, v224, 0LL, 0LL);
  uint64_t v63 = *v62;
  uint64_t v64 = v202;
  uint64_t v65 = (uint64_t)v208;
  if ((unint64_t)*v62 >> 62)
  {
    if (v63 < 0) {
      uint64_t v94 = *v62;
    }
    else {
      uint64_t v94 = v63 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v62);
    uint64_t v66 = (uint64_t (*)())_CocoaArrayWrapper.endIndex.getter(v94);
    swift_bridgeObjectRelease(v63);
    uint64_t v67 = (uint64_t)v205;
    if (v66) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v66 = *(uint64_t (**)())((v63 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v67 = (uint64_t)v205;
    if (v66)
    {
LABEL_9:
      uint64_t v68 = v196;
      ((void (*)(uint64_t, uint64_t, uint64_t))v193)(v65, v194, v196);
      uint64_t v69 = swift_retain_n(v64, 2LL);
      uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v73 = (void **)swift_slowAlloc(32LL, -1LL);
        __int128 aBlock = v73;
        *(_DWORD *)uint64_t v72 = 136315138;
        v209 = v72 + 4;
        swift_beginAccess(v62, &v210, 0LL, 0LL);
        uint64_t v74 = *(void *)(v64 + 16);
        uint64_t v75 = sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
        uint64_t v76 = swift_bridgeObjectRetain(v74);
        uint64_t v77 = Array.description.getter(v76, v75);
        uint64_t v78 = v64;
        unint64_t v80 = v79;
        uint64_t v81 = v74;
        uint64_t v67 = (uint64_t)v205;
        swift_bridgeObjectRelease(v81);
        uint64_t v82 = v77;
        uint64_t v62 = v203;
        uint64_t v225 = sub_100003E68(v82, v80, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226, v209, v72 + 12);
        swift_release_n(v78, 2LL);
        swift_bridgeObjectRelease(v80);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Cloud zone deleted: %s", v72, 0xCu);
        swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v83 = v206;
        swift_slowDealloc(v73, -1LL, -1LL);
        swift_slowDealloc(v72, -1LL, -1LL);

        ((void (*)(void *, uint64_t))v192)(v208, v196);
      }

      else
      {

        swift_release_n(v64, 2LL);
        ((void (*)(uint64_t, uint64_t))v192)(v65, v68);
        uint64_t v83 = v206;
      }

      uint64_t v84 = (dispatch_queue_s *)v83[9];
      uint64_t v85 = swift_allocObject(&unk_100072B50, 32LL, 7LL);
      *(void *)(v85 + swift_weakDestroy(v0 + 16) = v83;
      *(void *)(v85 + 24) = v62;
      uint64_t v86 = swift_allocObject(&unk_100072B78, 32LL, 7LL);
      *(void *)(v86 + swift_weakDestroy(v0 + 16) = sub_10002ECEC;
      *(void *)(v86 + 24) = v85;
      uint64_t v181 = v85;
      v222 = sub_10002F31C;
      uint64_t v223 = v86;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v219 = 1107296256LL;
      v220 = sub_10000CA9C;
      v221 = &unk_100072B90;
      uint64_t v87 = (id *)_Block_copy(&aBlock);
      uint64_t v88 = v223;
      swift_retain(v83);
      swift_retain(v86);
      swift_release(v88);
      dispatch_sync(v84, v87);
      _Block_release(v87);
      LOBYTE(v84) = swift_isEscapingClosureAtFileLocation(v86, "", 119LL, 459LL, 53LL, 1LL);
      swift_release(v86);
      if ((v84 & 1) != 0)
      {
        __break(1u);
        goto LABEL_83;
      }

      uint64_t v89 = (char *)v204;
      uint64_t v90 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v193)(v204, v194, v196);
      uint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
      os_log_type_t v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        Swift::String v93 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)Swift::String v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Re-Setup Zones", v93, 2u);
        swift_slowDealloc(v93, -1LL, -1LL);
      }

      ((void (*)(char *, uint64_t))v192)(v89, v196);
      sub_100014DE4((BOOL)_swiftEmptyArrayStorage);
      uint64_t v66 = sub_10002ECEC;
      goto LABEL_23;
    }
  }

  uint64_t v181 = 0LL;
  uint64_t v83 = v206;
LABEL_23:
  uint64_t v95 = ((uint64_t (*)(uint64_t *, uint64_t *, void, void))swift_beginAccess)(v62, &v217, 0LL, 0LL);
  uint64_t v96 = *v62;
  unint64_t v97 = (unint64_t)*v62 >> 62;
  v180 = v66;
  if (v97) {
    goto LABEL_72;
  }
  uint64_t v98 = *(void *)((v96 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v87 = (id *)&v225;
    v204 = (uint64_t *)(v207 + 16);
    if (!v98) {
      goto LABEL_32;
    }
    uint64_t v99 = v204;
    uint64_t v95 = ((uint64_t (*)(uint64_t *, uint64_t *, void, void))swift_beginAccess)(v204, &v216, 0LL, 0LL);
    uint64_t v86 = *v99;
    if ((unint64_t)v86 >> 62)
    {
LABEL_83:
      if (v86 < 0) {
        uint64_t v176 = v86;
      }
      else {
        uint64_t v176 = v86 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v86);
      uint64_t v177 = _CocoaArrayWrapper.endIndex.getter(v176);
      uint64_t v95 = swift_bridgeObjectRelease(v86);
      if (!v177) {
        goto LABEL_32;
      }
    }

    else if (!*(void *)((v86 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_32;
    }

    if (!a9)
    {
      uint64_t v100 = ((uint64_t (*)(void *, uint64_t, uint64_t))v193)(v201, v194, v196);
      uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
      os_log_type_t v102 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v101, v102))
      {
        os_log_type_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "New Account Setup Zones", v103, 2u);
        swift_slowDealloc(v103, -1LL, -1LL);
      }

      ((void (*)(void *, uint64_t))v192)(v201, v196);
      sub_100014DE4((BOOL)_swiftEmptyArrayStorage);
    }

LABEL_34:
      swift_bridgeObjectRelease_n(v96, 2LL);
      sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
      char v109 = v108;
      v110 = v209;
      swift_bridgeObjectRetain(v209);
      v111._uint64_t countAndFlagsBits = (uint64_t)v208;
      v111._object = v110;
      v112._uint64_t countAndFlagsBits = v107;
      v112._object = v109;
      v113.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v111, v112).super.isa;
      id v114 = [v197 scope];
      uint64_t v115 = (uint64_t)v200;
      uint64_t v83 = v206;
      sub_100016C0C((uint64_t)v114, v113.super.isa);
      uint64_t v96 = sub_100029B00(v115);

      if (v96)
      {
        (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v115, v199);
        swift_bridgeObjectRelease(v110);

LABEL_36:
        BOOL v104 = v204;
        uint64_t v67 = (uint64_t)v205;
      }

      else
      {
        uint64_t v128 = v190;
        uint64_t v129 = v196;
        ((void (*)(uint64_t, uint64_t, uint64_t))v193)(v190, v194, v196);
        uint64_t v130 = swift_bridgeObjectRetain(v110);
        v131 = (os_log_s *)Logger.logObject.getter(v130);
        os_log_type_t v132 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v131, v132))
        {
          uint64_t v133 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v134 = (void **)swift_slowAlloc(32LL, -1LL);
          __int128 aBlock = v134;
          *(_DWORD *)uint64_t v133 = v184.n128_u32[0];
          os_log_t v186 = (os_log_t)(v133 + 4);
          swift_bridgeObjectRetain(v110);
          uint64_t v213 = sub_100003E68((uint64_t)v208, (unint64_t)v110, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v185, v186, v133 + 12);
          swift_bridgeObjectRelease_n(v110, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v131, v132, "Adding fetch operation for new zone: %s", v133, 0xCu);
          swift_arrayDestroy(v134, 1LL, v183);
          swift_slowDealloc(v134, -1LL, -1LL);
          swift_slowDealloc(v133, -1LL, -1LL);

          uint64_t v135 = v128;
          uint64_t v136 = v196;
        }

        else
        {

          swift_bridgeObjectRelease_n(v110, 2LL);
          uint64_t v135 = v128;
          uint64_t v136 = v129;
        }

        ((void (*)(uint64_t, uint64_t))v192)(v135, v136);
        BOOL v104 = v204;
        swift_beginAccess(v204, &aBlock, 33LL, 0LL);
        v138 = v113.super.isa;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v138);
        unint64_t v140 = *(void *)((*v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v139 = *(void *)((*v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        uint64_t v67 = (uint64_t)v205;
        if (v140 >= v139 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v139 > 1, v140 + 1, 1LL);
        }
        uint64_t v96 = (uint64_t)v104;
        uint64_t v141 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v140, v138);
        specialized Array._endMutation()(v141);
        swift_endAccess(&aBlock);

        (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
      }

      unint64_t v106 = v207 + 1;
      if (v207 + 1 == v202) {
        goto LABEL_67;
      }
    }

    __break(1u);
LABEL_72:
    if (v96 < 0) {
      uint64_t v166 = v96;
    }
    else {
      uint64_t v166 = v96 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v96);
    uint64_t v98 = _CocoaArrayWrapper.endIndex.getter(v166);
    uint64_t v95 = swift_bridgeObjectRelease(v96);
  }

LABEL_67:
  sub_1000295F8(v230);
  swift_beginAccess(v104, &v213, 0LL, 0LL);
  uint64_t v143 = *v104;
  swift_retain(v83);
  unint64_t v144 = swift_bridgeObjectRetain(v143);
  v145 = sub_10002AB94(v144, (uint64_t)v83);
  swift_bridgeObjectRelease(v143);
  swift_release(v83);
  swift_beginAccess(v104, &v212, 1LL, 0LL);
  uint64_t v146 = *v104;
  *BOOL v104 = (uint64_t)v145;
  swift_bridgeObjectRelease(v146);
  sub_1000169EC((uint64_t)[v197 scope]);
  swift_beginAccess(v104, &v211, 0LL, 0LL);
  uint64_t v147 = *v104;
  if ((unint64_t)*v104 >> 62)
  {
    if (v147 < 0) {
      uint64_t v167 = *v104;
    }
    else {
      uint64_t v167 = v147 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v104);
    uint64_t v168 = _CocoaArrayWrapper.endIndex.getter(v167);
    swift_bridgeObjectRelease(v147);
    uint64_t v149 = (uint64_t)v189;
    if (!v168) {
      goto LABEL_80;
    }
LABEL_69:
    __n128 v150 = swift_beginAccess(v104, &aBlock, 0LL, 0LL);
    uint64_t v151 = *v104;
    v152 = v83;
    uint64_t v154 = v198;
    uint64_t v153 = v199;
    v155 = v179;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v198 + 16))(v179, v149, v199, v150);
    uint64_t v156 = *(unsigned __int8 *)(v154 + 80);
    uint64_t v157 = (v156 + 32) & ~v156;
    unint64_t v158 = (v178 + v157 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v159 = swift_allocObject(&unk_100072BC8, v158 + 16, v156 | 7);
    *(void *)(v159 + swift_weakDestroy(v0 + 16) = v152;
    *(void *)(v159 + 24) = v67;
    (*(void (**)(uint64_t, char *, uint64_t))(v154 + 32))(v159 + v157, v155, v153);
    v160 = (void (**)(void *, uint64_t))(v159 + v158);
    v161 = v188;
    *v160 = v187;
    v160[1] = (void (*)(void *, uint64_t))v161;
    v162 = *(void (**)(id, uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(*v152 + 832LL);
    v163 = v152;
    v164 = v182;
    uint64_t v165 = v191;
    sub_10002ECB0(v182, v191, 0);
    swift_retain(v163);
    swift_bridgeObjectRetain(v151);
    swift_retain((void (*)(void *, uint64_t))v161);
    v162(v197, v151, sub_10002EEAC, v159);
    swift_bridgeObjectRelease(v151);
    swift_release(v159);
    sub_10002ECBC(v164, v165, 0);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v189, v153);
    sub_10002EF14((uint64_t)v180, v181);
  }

  else
  {
    uint64_t v148 = *(void *)((v147 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v149 = (uint64_t)v189;
    if (v148) {
      goto LABEL_69;
    }
LABEL_80:
    v169 = v182;
    uint64_t v170 = v191;
    sub_10002ECB0(v182, v191, 0);
    sub_10002A18C(v169, v149);
    sub_10002ECBC(v169, v170, 0);
    v171 = (dispatch_queue_s *)v83[9];
    uint64_t v172 = v149;
    uint64_t v173 = swift_allocObject(&unk_100072BF0, 32LL, 7LL);
    *(void *)(v173 + swift_weakDestroy(v0 + 16) = sub_10002EF24;
    *(void *)(v173 + 24) = v83;
    v222 = sub_10002F31C;
    uint64_t v223 = v173;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v219 = 1107296256LL;
    v220 = sub_10000CA9C;
    v221 = &unk_100072C08;
    v174 = _Block_copy(&aBlock);
    uint64_t v175 = v223;
    swift_retain(v83);
    swift_retain(v173);
    swift_release(v175);
    dispatch_sync(v171, v174);
    _Block_release(v174);
    LOBYTE(v171) = swift_isEscapingClosureAtFileLocation(v173, "", 119LL, 503LL, 53LL, 1LL);
    swift_release(v173);
    if ((v171 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      v187(0LL, 0LL);
      sub_10002ECBC(v169, v170, 0);
      (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v172, v199);
      sub_10002EF14((uint64_t)v180, v181);
      swift_release(v83);
    }
  }

uint64_t sub_1000194BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  id v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100019580(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100003288(&qword_10007AD48);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  id v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0LL;
    uint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_100010A90(a3 + v16 + (void)v13 * v14, (uint64_t)v12, &qword_10007AD48);
      char v17 = a1(v12);
      if (v3)
      {
        sub_10000B4A8((uint64_t)v12, &qword_10007AD48);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }

      if ((v17 & 1) != 0)
      {
        sub_100003420((uint64_t)v12, v23, &qword_10007AD48);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          sub_100027904(0, v15[2] + 1LL, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100027904(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }

        v15[2] = v19 + 1;
        uint64_t result = sub_100003420(v23, (uint64_t)v15 + v16 + v19 * (void)v13, &qword_10007AD48);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }

      else
      {
        uint64_t result = sub_10000B4A8((uint64_t)v12, &qword_10007AD48);
      }

      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }

  return result;
}

uint64_t sub_10001979C( uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), void *a6)
{
  uint64_t v41 = a5;
  uint64_t v11 = a2 & 1;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v37 - v17;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    uint64_t v25 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v25, v12);
    swift_errorRetain(a1);
    uint64_t v26 = swift_errorRetain(a1);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_t v39 = v27;
      uint64_t v29 = swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = a6;
      uint64_t v30 = (uint8_t *)v29;
      os_log_type_t v38 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v30 = 138412290;
      swift_errorRetain(a1);
      uint64_t v31 = v11;
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v42 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v30 + 4, v30 + 12);
      unint64_t v33 = v38;
      *os_log_type_t v38 = v32;
      uint64_t v11 = v31;
      sub_10002DA48(a1, 1);
      sub_10002DA48(a1, 1);
      os_log_t v34 = v39;
      _os_log_impl((void *)&_mh_execute_header, v39, v28, "Database Error from fetchZoneChanges: %@", v30, 0xCu);
      uint64_t v35 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v33, 1LL, v35);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      sub_10002DA48(a1, 1);
    }

    else
    {
      sub_10002DA48(a1, 1);
      sub_10002DA48(a1, 1);
      swift_errorRelease(a1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }

  else
  {
    uint64_t v19 = sub_100030000();
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      uint64_t v40 = a3;
      uint64_t v24 = v23;
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Database fetchZoneChanges succeeded", v23, 2u);
      a3 = v40;
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_10002A18C(a3, a4);
  }

  return v41(a1, v11);
}

uint64_t sub_100019AC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100010A58(0LL, (unint64_t *)&qword_10007A800, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
  uint64_t v17 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  unint64_t v18 = (void *)swift_allocObject(&unk_100071EB8, 56LL, 7LL);
  v18[2] = a2;
  v18[3] = v4;
  uint64_t v20 = v30;
  uint64_t v19 = v31;
  v18[4] = v30;
  v18[5] = v19;
  uint64_t v21 = v32;
  v18[6] = v32;
  aBlock[4] = sub_10002AB54;
  os_log_type_t v38 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100071ED0;
  os_log_type_t v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain(v5);
  id v23 = v20;
  uint64_t v24 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v24);
  id v36 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v27 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  return swift_release(v38);
}

uint64_t sub_100019D6C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v117 = a5;
  id v137 = a3;
  uint64_t v138 = a2;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v134 = *(void *)(v7 - 8);
  uint64_t v135 = v7;
  __chkstk_darwin(v7);
  v125 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v10 = *(v9 - 1);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  v124 = (char *)&v116 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v120 = (char *)&v116 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v116 - v18;
  uint64_t v20 = sub_100030000();
  uint64_t v21 = *(void (**)(char *))(v10 + 16);
  uint64_t v139 = v20;
  v21(v19);
  uint64_t v22 = swift_bridgeObjectRetain_n(a1, 2LL);
  id v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v126 = v9;
  uint64_t v127 = a1;
  unint64_t v140 = v21;
  uint64_t v119 = v13;
  uint64_t v118 = a4;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v147 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v28 = sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v127);
    uint64_t v29 = Array.description.getter(v127, v28);
    unint64_t v31 = v30;
    swift_bridgeObjectRelease(v127);
    uint64_t v32 = v29;
    uint64_t v33 = v126;
    uint64_t v145 = sub_100003E68(v32, v31, &v147);
    uint64_t v9 = v33;
    a1 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "zoneIDs changed: %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v34 = *(uint64_t (**)(char *, void *))(v10 + 8);
  uint64_t result = v34(v19, v9);
  id v36 = (char *)&type metadata for Any;
  uint64_t v37 = (uint64_t)v125;
  os_log_type_t v38 = v124;
  if ((unint64_t)a1 >> 62)
  {
LABEL_33:
    if (a1 < 0) {
      uint64_t v115 = a1;
    }
    else {
      uint64_t v115 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v115);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v39) {
      return result;
    }
  }

  else
  {
    uint64_t v39 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v39) {
      return result;
    }
  }

  uint64_t v144 = (uint64_t)&_swiftEmptyDictionarySingleton;
  if (v39 < 1) {
    __break(1u);
  }
  unint64_t v133 = a1 & 0xC000000000000001LL;
  id v123 = v146;
  __n128 v40 = swift_bridgeObjectRetain(a1);
  uint64_t v41 = 0LL;
  v40.n128_u64[0] = 136315394LL;
  __n128 v122 = v40;
  v121 = v36 + 8;
  uint64_t v132 = v39;
  do
  {
    uint64_t v42 = v9;
    uint64_t v43 = a1;
    if (v133) {
      id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, a1);
    }
    else {
      id v44 = *(id *)(a1 + 8 * v41 + 32);
    }
    unint64_t v45 = v44;
    uint64_t v9 = [objc_allocWithZone(CKFetchRecordZoneChangesConfiguration) init];
    sub_100016C0C((uint64_t)[v137 scope], v45);
    a1 = sub_100029B00(v37);
    id v46 = (void *)sub_100029B00(v37);
    [v9 setPreviousServerChangeToken:v46];

    id v36 = (char *)v144;
    uint64_t v142 = v41;
    if ((v144 & 0xC000000000000001LL) != 0)
    {
      if (v144 >= 0) {
        id v36 = (char *)(v144 & 0xFFFFFFFFFFFFFF8LL);
      }
      id v47 = v45;
      uint64_t v48 = v9;
      uint64_t v49 = __CocoaDictionary.count.getter(v36);
      if (__OFADD__(v49, 1LL))
      {
        __break(1u);
        goto LABEL_33;
      }

      id v36 = (char *)sub_100027BE8((uint64_t)v36, v49 + 1);
    }

    else
    {
      id v50 = v45;
      uint64_t v51 = v9;
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
    uint64_t v147 = (uint64_t)v36;
    sub_1000286CC((uint64_t)v9, v45, isUniquelyReferenced_nonNull_native);
    uint64_t v144 = v147;

    swift_bridgeObjectRelease(0x8000000000000000LL);
    ((void (*)(char *, uint64_t, void *))v140)(v38, v139, v42);
    uint64_t v141 = (uint8_t *)a1;
    id v53 = (id)a1;
    id v54 = v45;
    id v55 = v53;
    id v56 = v54;
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      os_log_t v130 = v57;
      id v131 = v9;
      uint64_t v136 = v34;
      uint64_t v59 = swift_slowAlloc(22LL, -1LL);
      uint64_t v128 = (uint8_t **)swift_slowAlloc(8LL, -1LL);
      uint64_t v129 = swift_slowAlloc(32LL, -1LL);
      uint64_t v147 = v129;
      *(_DWORD *)uint64_t v59 = v122.n128_u32[0];
      id v60 = [v56 zoneName];
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      unint64_t v63 = v62;

      uint64_t v145 = sub_100003E68(v61, v63, &v147);
      uint64_t v64 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v123, v59 + 4, v59 + 12);

      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v59 + 12) = 2112;
      uint64_t v65 = v141;
      if (v141)
      {
        uint64_t v145 = (uint64_t)v55;
        id v66 = v55;
      }

      else
      {
        uint64_t v145 = 0LL;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v64, v59 + 14, v59 + 22);
      uint64_t v37 = (uint64_t)v125;
      uint64_t v67 = v128;
      *uint64_t v128 = v65;

      os_log_type_t v68 = v58;
      os_log_t v69 = v130;
      _os_log_impl((void *)&_mh_execute_header, v130, v68, "Old change token for %s : %@", (uint8_t *)v59, 0x16u);
      uint64_t v70 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v67, 1LL, v70);
      swift_slowDealloc(v67, -1LL, -1LL);
      uint64_t v71 = v129;
      swift_arrayDestroy(v129, 1LL, v121);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);

      os_log_type_t v38 = v124;
      uint64_t v9 = v126;
      uint64_t v34 = v136;
      v136(v124, v126);
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v37, v135);
      a1 = v127;
    }

    else
    {

      v34(v38, v42);
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v37, v135);
      a1 = v43;
      uint64_t v9 = v42;
    }

    uint64_t v41 = v142 + 1;
  }

  while (v132 != v142 + 1);
  swift_bridgeObjectRelease(a1);
  uint64_t v72 = v120;
  uint64_t v73 = ((uint64_t (*)(char *, uint64_t, void *))v140)(v120, v139, v9);
  uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v142 = swift_slowAlloc(32LL, -1LL);
    uint64_t v147 = v142;
    *(_DWORD *)uint64_t v76 = 136315138;
    uint64_t v141 = v76 + 4;
    swift_beginAccess(&v144, &v145, 0LL, 0LL);
    uint64_t v77 = v34;
    uint64_t v78 = v144;
    uint64_t v79 = sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
    uint64_t v80 = sub_100010A58(0LL, &qword_10007B278, &OBJC_CLASS___CKFetchRecordZoneChangesConfiguration_ptr);
    uint64_t v81 = sub_10002DA78(&qword_10007B280, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v78);
    uint64_t v83 = Dictionary.description.getter(v82, v79, v80, v81);
    unint64_t v85 = v84;
    swift_bridgeObjectRelease(v78);
    uint64_t v86 = v83;
    a1 = v127;
    uint64_t v143 = sub_100003E68(v86, v85, &v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v141, v76 + 12);
    unint64_t v87 = v85;
    uint64_t v88 = v126;
    swift_bridgeObjectRelease(v87);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "optionsByRecordZoneID: %s", v76, 0xCu);
    uint64_t v89 = v142;
    swift_arrayDestroy(v142, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1LL, -1LL);
    swift_slowDealloc(v76, -1LL, -1LL);

    uint64_t v136 = v77;
    v77(v120, v88);
    uint64_t v90 = v119;
    uint64_t v91 = v117;
  }

  else
  {

    uint64_t v136 = v34;
    v34(v72, v9);
    uint64_t v90 = v119;
    uint64_t v91 = v117;
    uint64_t v88 = v9;
  }

  uint64_t v92 = swift_allocObject(&unk_1000728F8, 24LL, 7LL);
  *(void *)(v92 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v93 = swift_allocObject(&unk_100072920, 24LL, 7LL);
  *(void *)(v93 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  sub_100010A58(0LL, &qword_10007B270, &OBJC_CLASS___CKFetchRecordZoneChangesOperation_ptr);
  swift_beginAccess(&v144, &v147, 0LL, 0LL);
  BOOL v94 = v144;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v94);
  v148.value._rawValue = (void *)a1;
  v148.is_nil = v94;
  uint64_t v95 = (void *)CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v148, v149);
  [v95 setFetchAllChanges:1];
  swift_retain(v93);
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(sub_10002E828, v93);
  swift_retain(v92);
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_10002E834, v92);
  uint64_t v96 = (void *)swift_allocObject(&unk_100072948, 48LL, 7LL);
  id v98 = v137;
  uint64_t v97 = v138;
  v96[2] = v137;
  v96[3] = v97;
  v96[4] = v93;
  v96[5] = v92;
  uint64_t v141 = (uint8_t *)v93;
  swift_retain(v93);
  uint64_t v142 = v92;
  swift_retain(v92);
  id v99 = v98;
  swift_retain(v97);
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(sub_10002E8A0, v96);
  uint64_t v100 = (void *)swift_allocObject(&unk_100072970, 56LL, 7LL);
  uint64_t v101 = a1;
  os_log_type_t v102 = v100;
  v100[2] = v99;
  v100[3] = v101;
  uint64_t v103 = v118;
  v100[4] = v97;
  v100[5] = v103;
  v100[6] = v91;
  swift_bridgeObjectRetain(v101);
  BOOL v104 = (void (*)(char *))v99;
  swift_retain(v97);
  swift_retain(v91);
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(sub_10002E908, v102);
  __n128 v105 = v88;
  ((void (*)(char *, uint64_t, void *))v140)(v90, v139, v88);
  id v106 = v95;
  uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
  os_log_type_t v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    char v109 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v110 = (void *)swift_slowAlloc(8LL, -1LL);
    unint64_t v140 = v104;
    *(_DWORD *)char v109 = 138412290;
    uint64_t v143 = (uint64_t)v106;
    id v111 = v106;
    Swift::String v112 = (void (*)(char *, void *))v136;
    BOOL v104 = v140;
    CKRecordZoneID v113 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v109 + 4, v109 + 12);
    void *v110 = v106;

    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Adding Cloud operation %@", v109, 0xCu);
    uint64_t v114 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v110, 1LL, v114);
    __n128 v105 = v126;
    swift_slowDealloc(v110, -1LL, -1LL);
    swift_slowDealloc(v109, -1LL, -1LL);
  }

  else
  {
    CKRecordZoneID v113 = v90;

    uint64_t v107 = (os_log_s *)v106;
    Swift::String v112 = (void (*)(char *, void *))v136;
  }

  v112(v113, v105);
  [v104 addOperation:v106];
  swift_release(v142);
  swift_release(v141);

  return swift_bridgeObjectRelease(v144);
}

uint64_t sub_10001AA70(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v92 = a4;
  LODWORD(v96) = a3;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(uint64_t **)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v88 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v88 - v14;
  uint64_t v16 = sub_100030000();
  uint64_t v17 = (void (*)(char *))v7[2];
  uint64_t v97 = (void (*)(char *, uint64_t))v16;
  v17(v15);
  id v18 = a1;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v95 = v6;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    BOOL v94 = a2;
    id v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(8LL, -1LL);
    uint64_t v93 = v13;
    uint64_t v89 = (void *)v24;
    uint64_t v90 = v7;
    *(_DWORD *)id v23 = 138412290;
    uint64_t v99 = (uint64_t)v18;
    id v25 = v18;
    uint64_t v91 = (uint64_t)v17;
    uint64_t v26 = v10;
    id v27 = v25;
    uint64_t v6 = v95;
    uint64_t v7 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v23 + 4, v23 + 12);
    uint64_t v28 = v89;
    *uint64_t v89 = v18;

    uint64_t v10 = v26;
    uint64_t v17 = (void (*)(char *))v91;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "RecordID changed: %@", v23, 0xCu);
    uint64_t v29 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v28, 1LL, v29);
    unint64_t v30 = v28;
    uint64_t v13 = v93;
    swift_slowDealloc(v30, -1LL, -1LL);
    unint64_t v31 = v23;
    a2 = v94;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    uint64_t v19 = (os_log_s *)v18;
  }

  uint64_t v32 = (void (*)(char *, uint64_t))v7[1];
  v32(v15, v6);
  if ((v96 & 1) != 0)
  {
    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v17)(v13, v97, v6);
    sub_10002DAB8(a2, 1);
    id v40 = v18;
    sub_10002DAB8(a2, 1);
    id v41 = v40;
    id v42 = sub_10002DAB8(a2, 1);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v97 = v32;
      uint64_t v46 = v45;
      uint64_t v47 = swift_slowAlloc(16LL, -1LL);
      uint64_t v93 = v13;
      uint64_t v48 = (void *)v47;
      *(_DWORD *)uint64_t v46 = 138412546;
      uint64_t v49 = a2;
      uint64_t v99 = (uint64_t)v41;
      id v50 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v46 + 4, v46 + 12);
      *uint64_t v48 = v41;

      *(_WORD *)(v46 + 12) = 2112;
      swift_errorRetain(a2);
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v99 = v51;
      uint64_t v6 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v46 + 14, v46 + 22);
      v48[1] = v51;
      sub_10002E2E8(v49, 1);
      sub_10002E2E8(v49, 1);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%@ failed to be fetched: %@", (uint8_t *)v46, 0x16u);
      uint64_t v52 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v48, 2LL, v52);
      id v53 = v48;
      uint64_t v13 = v93;
      swift_slowDealloc(v53, -1LL, -1LL);
      uint64_t v54 = v46;
      uint64_t v32 = v97;
      swift_slowDealloc(v54, -1LL, -1LL);

      sub_10002E2E8(v49, 1);
    }

    else
    {
      sub_10002E2E8(a2, 1);

      sub_10002E2E8(a2, 1);
      sub_10002E2E8(a2, 1);
    }

    id v55 = v13;
    return ((uint64_t (*)(char *, uint64_t))v32)(v55, v6);
  }

  uint64_t v33 = (void *)(v92 + 16);
  swift_beginAccess(v92 + 16, &v99, 33LL, 0LL);
  id v34 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
  unint64_t v36 = *(void *)((*v33 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v35 = *(void *)((*v33 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v36 >= v35 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1LL);
  }
  uint64_t v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
  specialized Array._endMutation()(v37);
  swift_endAccess(&v99);
  uint64_t v38 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v17)(v10, v97, v6);
  else {
    int v39 = static os_log_type_t.debug.getter();
  }
  int v56 = v39;
  id v57 = v18;
  sub_10002DAB8(a2, 0);
  id v58 = v57;
  id v59 = sub_10002DAB8(a2, 0);
  id v60 = (void *)Logger.logObject.getter(v59);
  if (!os_log_type_enabled((os_log_t)v60, (os_log_type_t)v56))
  {
    sub_10002E2E8(a2, 0);

    sub_10002E2E8(a2, 0);
    sub_10002E2E8(a2, 0);

    id v55 = v10;
    return ((uint64_t (*)(char *, uint64_t))v32)(v55, v6);
  }

  LODWORD(v93) = v56;
  uint64_t v96 = v10;
  uint64_t v97 = v32;
  BOOL v94 = a2;
  uint64_t v61 = swift_slowAlloc(22LL, -1LL);
  uint64_t v91 = swift_slowAlloc(64LL, -1LL);
  uint64_t v99 = v91;
  *(_DWORD *)uint64_t v61 = 136315394;
  id v62 = [v58 recordName];
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  unint64_t v65 = v64;

  uint64_t v98 = sub_100003E68(v63, v65, &v99);
  uint64_t v90 = &v99;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v61 + 4, v61 + 12);

  swift_bridgeObjectRelease(v65);
  uint64_t v92 = v61;
  *(_WORD *)(v61 + 12) = 2080;
  id v66 = [v34 encryptedValues];
  id v67 = [v66 allKeys];
  swift_unknownObjectRelease(v66);
  uint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for String);

  os_log_t v69 = _swiftEmptyArrayStorage;
  uint64_t v98 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v70 = *(void *)(v68 + 16);
  if (v70)
  {
    uint64_t v89 = v60;
    swift_bridgeObjectRetain(v68);
    uint64_t v71 = (void *)(v68 + 40);
    do
    {
      uint64_t v73 = *v71;
      swift_bridgeObjectRetain(*v71);
      id v74 = [v34 encryptedValues];
      NSString v75 = String._bridgeToObjectiveC()();
      id v76 = [v74 objectForKeyedSubscript:v75];
      swift_bridgeObjectRelease(v73);

      uint64_t v77 = swift_unknownObjectRelease(v74);
      if (v76)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v77);
        unint64_t v79 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v78 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v79 >= v78 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1LL);
        }
        uint64_t v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v76);
        specialized Array._endMutation()(v72);
      }

      v71 += 2;
      --v70;
    }

    while (v70);
    swift_bridgeObjectRelease(v68);
    os_log_t v69 = (void *)v98;
    uint64_t v6 = v95;
    id v60 = v89;
  }

  swift_bridgeObjectRelease(v68);
  uint64_t v81 = (uint8_t *)v92;
  uint64_t v82 = sub_100003288(&qword_10007B410);
  uint64_t v83 = Array.description.getter(v69, v82);
  unint64_t v85 = v84;
  swift_bridgeObjectRelease(v69);
  uint64_t v98 = sub_100003E68(v83, v85, &v99);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v90, v81 + 14, v81 + 22);
  swift_bridgeObjectRelease(v85);
  uint64_t v86 = v94;
  sub_10002E2E8(v94, 0);
  sub_10002E2E8(v86, 0);
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v60, (os_log_type_t)v93, "CKRecord fetched: %s - %s", v81, 0x16u);
  uint64_t v87 = v91;
  swift_arrayDestroy(v91, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v87, -1LL, -1LL);
  swift_slowDealloc(v81, -1LL, -1LL);

  sub_10002E2E8(v86, 0);
  return ((uint64_t (*)(char *, uint64_t))v97)(v96, v6);
}

uint64_t sub_10001B2B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void **)(a4 + 16);
  uint64_t v13 = sub_100030000();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  id v14 = a1;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v33 = v8;
    uint64_t v17 = swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = a3;
    id v18 = (uint8_t *)v17;
    unint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v34 = a2;
    *(_DWORD *)id v18 = 138412290;
    id v36 = v14;
    id v19 = v14;
    uint64_t v32 = v9;
    id v20 = v19;
    uint64_t v8 = v33;
    a2 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v18 + 4, v18 + 12);
    BOOL v21 = v31;
    *unint64_t v31 = v14;

    uint64_t v9 = v32;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Record deleted: %@", v18, 0xCu);
    uint64_t v22 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v21, 1LL, v22);
    swift_slowDealloc(v21, -1LL, -1LL);
    id v23 = v18;
    a3 = v35;
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    uint64_t v15 = (os_log_s *)v14;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_beginAccess(v12, &v36, 33LL, 0LL);
  uint64_t v24 = *v12;
  id v25 = v14;
  swift_bridgeObjectRetain(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  char *v12 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = sub_1000273DC(0LL, v24[2] + 1LL, 1, v24);
    char *v12 = v24;
  }

  unint64_t v28 = v24[2];
  unint64_t v27 = v24[3];
  if (v28 >= v27 >> 1)
  {
    uint64_t v24 = sub_1000273DC((void *)(v27 > 1), v28 + 1, 1, v24);
    char *v12 = v24;
  }

  v24[2] = v28 + 1;
  uint64_t v29 = &v24[3 * v28];
  v29[4] = v25;
  v29[5] = a2;
  v29[6] = a3;
  return swift_endAccess(&v36);
}

void sub_10001B544( void *a1, void *a2, uint64_t *a3, unint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v143 = a8;
  unint64_t v140 = a7;
  uint64_t v142 = a3;
  uint64_t v144 = a2;
  uint64_t v133 = type metadata accessor for URL(0LL);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  id v131 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v135 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v141 = (uint64_t *)((char *)&v127 - v19);
  __chkstk_darwin(v18);
  BOOL v21 = (char *)&v127 - v20;
  uint64_t v22 = (uint64_t *)sub_100030000();
  uint64_t v136 = v15;
  id v23 = (void (*)(void))v15[2];
  id v137 = v22;
  uint64_t v138 = (void (*)(uint64_t *, uint64_t *, uint64_t))v23;
  v23(v21);
  id v24 = a6;
  id v25 = a1;
  id v26 = v24;
  id v27 = v25;
  unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter();
  int v30 = v29;
  BOOL v31 = os_log_type_enabled(v28, v29);
  uint64_t v139 = v14;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc(22LL, -1LL);
    LODWORD(v128) = v30;
    uint64_t v33 = v32;
    id v129 = (id)swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 aBlock = v129;
    *(_DWORD *)uint64_t v33 = 136315394;
    id v34 = (id)CKDatabaseScopeString([v26 scope]);
    LODWORD(v134) = a5;
    id v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    unint64_t v130 = a4;
    unint64_t v38 = v37;

    uint64_t v153 = sub_100003E68(v36, v38, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v33 + 4, v33 + 12);

    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v33 + 12) = 2080;
    id v39 = [v27 zoneName];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    unint64_t v42 = v41;

    a4 = v130;
    uint64_t v153 = sub_100003E68(v40, v42, (uint64_t *)&aBlock);
    a5 = v134;
    uint64_t v14 = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v33 + 14, v33 + 22);

    uint64_t v43 = v27;
    swift_bridgeObjectRelease(v42);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v128,  "record zone fetch complete, database, %s, zone, %s",  (uint8_t *)v33,  0x16u);
    id v44 = v129;
    swift_arrayDestroy(v129, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {

    uint64_t v43 = v27;
  }

  uint64_t v45 = (void (*)(char *, uint64_t))v136[1];
  v45(v21, v14);
  uint64_t v46 = v143;
  uint64_t v47 = (uint64_t)v142;
  uint64_t v48 = (char *)v141;
  if ((a5 & 0x100) != 0)
  {
    v138(v141, v137, v14);
    unint64_t v85 = v144;
    sub_10002EAA8(v144, v47, a4, a5, 1);
    id v86 = v26;
    sub_10002EAA8(v85, v47, a4, a5, 1);
    id v87 = v86;
    uint64_t v88 = sub_10002EAA8(v85, v47, a4, a5, 1);
    uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = swift_slowAlloc(22LL, -1LL);
      uint64_t v92 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v138 = (void (*)(uint64_t *, uint64_t *, uint64_t))v45;
      id v137 = v92;
      uint64_t v143 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 aBlock = v143;
      *(_DWORD *)uint64_t v91 = 136315394;
      LODWORD(v134) = a5;
      id v93 = (id)CKDatabaseScopeString([v87 scope]);
      unint64_t v94 = a4;
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      uint64_t v96 = v89;
      unint64_t v98 = v97;

      uint64_t v99 = v95;
      a4 = v94;
      uint64_t v153 = sub_100003E68(v99, v98, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v91 + 4, v91 + 12);

      uint64_t v100 = v144;
      uint64_t v47 = (uint64_t)v142;
      swift_bridgeObjectRelease(v98);
      *(_WORD *)(v91 + 12) = 2112;
      swift_errorRetain(v100);
      uint64_t v101 = _swift_stdlib_bridgeErrorToNSError(v100);
      uint64_t v153 = v101;
      a5 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v91 + 14, v91 + 22);
      os_log_type_t v102 = v137;
      *id v137 = v101;
      sub_10002EADC(v100, v47, a4, a5, 1);
      sub_10002EADC(v100, v47, a4, a5, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v96,  v90,  "Error fetching zone changes for %s database: %@",  (uint8_t *)v91,  0x16u);
      uint64_t v103 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v102, 1LL, v103);
      swift_slowDealloc(v102, -1LL, -1LL);
      uint64_t v104 = v143;
      swift_arrayDestroy(v143, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1LL, -1LL);
      swift_slowDealloc(v91, -1LL, -1LL);

      ((void (*)(uint64_t *, uint64_t))v138)(v141, v139);
    }

    else
    {

      v124 = v144;
      sub_10002EADC(v144, v47, a4, a5, 1);
      sub_10002EADC(v124, v47, a4, a5, 1);

      v45(v48, v14);
    }

    v125 = v144;
    sub_10001D7A0((uint64_t)v144, 0);
    sub_10002EADC(v125, v47, a4, a5, 1);
  }

  else
  {
    uint64_t v49 = a9;
    uint64_t v141 = (uint64_t *)(v143 + 16);
    uint64_t v142 = (uint64_t *)(a9 + 16);
    id v50 = v135;
    v138((uint64_t *)v135, v137, v14);
    uint64_t v51 = v144;
    id v52 = v26;
    id v53 = v43;
    id v54 = v51;
    swift_retain_n(v46, 2LL);
    swift_retain_n(a9, 2LL);
    id v55 = v52;
    int v56 = v53;
    id v57 = (uint64_t *)v54;
    id v58 = (os_log_s *)Logger.logObject.getter(v57);
    LODWORD(v13sub_10000DC70(0, 0) = static os_log_type_t.default.getter();
    BOOL v59 = os_log_type_enabled(v58, (os_log_type_t)v130);
    id v137 = v57;
    uint64_t v136 = v56;
    id v129 = v55;
    if (!v59)
    {

      swift_release_n(v46, 2LL);
      swift_release_n(a9, 2LL);
      v45(v50, v14);
      unint64_t v84 = v140;
      unint64_t v78 = v142;
      uint64_t v73 = v141;
      goto LABEL_12;
    }

    os_log_t v128 = v58;
    uint64_t v138 = (void (*)(uint64_t *, uint64_t *, uint64_t))v45;
    id v60 = v55;
    uint64_t isEscapingClosureAtFileLocation = swift_slowAlloc(52LL, -1LL);
    uint64_t v134 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v127 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 aBlock = v127;
    *(_DWORD *)uint64_t isEscapingClosureAtFileLocation = 136316162;
    id v62 = v57;
    id v63 = (id)CKDatabaseScopeString([v60 scope]);
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    unint64_t v66 = v65;

    uint64_t v153 = sub_100003E68(v64, v66, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)( &v153,  v154,  isEscapingClosureAtFileLocation + 4,  isEscapingClosureAtFileLocation + 12);

    swift_bridgeObjectRelease(v66);
    *(_WORD *)(isEscapingClosureAtFileLocation + 12) = 2080;
    id v67 = [v56 zoneName];
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    unint64_t v70 = v69;

    uint64_t v153 = sub_100003E68(v68, v70, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)( &v153,  v154,  isEscapingClosureAtFileLocation + 14,  isEscapingClosureAtFileLocation + 22);

    uint64_t v71 = v144;
    swift_bridgeObjectRelease(v70);
    *(_WORD *)(isEscapingClosureAtFileLocation + 22) = 2112;
    uint64_t v153 = (uint64_t)v62;
    uint64_t v72 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)( &v153,  v154,  isEscapingClosureAtFileLocation + 24,  isEscapingClosureAtFileLocation + 32);
    void *v134 = v71;

    *(_WORD *)(isEscapingClosureAtFileLocation + 32) = 2048;
    uint64_t v73 = v141;
    swift_beginAccess(v141, v146, 0LL, 0LL);
    uint64_t v74 = *v73;
    uint64_t v75 = *(void *)((v74 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v76 = v143;
    swift_release(v143);
    while (1)
    {
      uint64_t v77 = v139;
      unint64_t v78 = v142;
      uint64_t v153 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)( &v153,  v154,  isEscapingClosureAtFileLocation + 34,  isEscapingClosureAtFileLocation + 42);
      swift_release(v76);
      *(_WORD *)(isEscapingClosureAtFileLocation + 42) = 2048;
      swift_beginAccess(v78, v145, 0LL, 0LL);
      uint64_t v79 = *(void *)(*(void *)(v49 + 16) + 16LL);
      swift_release(v49);
      uint64_t v153 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)( &v153,  v154,  isEscapingClosureAtFileLocation + 44,  isEscapingClosureAtFileLocation + 52);
      swift_release(v49);
      os_log_t v80 = v128;
      _os_log_impl( (void *)&_mh_execute_header,  v128,  (os_log_type_t)v130,  "record zone fetch database, %s, zone, %s, token: %@, records changed: %ld, deleted: %ld",  (uint8_t *)isEscapingClosureAtFileLocation,  0x34u);
      uint64_t v81 = sub_100003288((uint64_t *)&unk_10007A940);
      uint64_t v82 = v134;
      swift_arrayDestroy(v134, 1LL, v81);
      swift_slowDealloc(v82, -1LL, -1LL);
      uint64_t v83 = v127;
      swift_arrayDestroy(v127, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1LL, -1LL);
      swift_slowDealloc(isEscapingClosureAtFileLocation, -1LL, -1LL);

      ((void (*)(char *, uint64_t))v138)(v135, v77);
      unint64_t v84 = v140;
LABEL_12:
      __n128 v105 = (void *)((char *)v84
                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
      swift_beginAccess( (char *)v84 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  &v153,  0LL,  0LL);
      uint64_t v106 = *v105;
      __chkstk_darwin(v107);
      *(&v127 - 2) = (uint64_t)v73;
      uint64_t v108 = swift_bridgeObjectRetain(v106);
      sub_1000298F8(v108, (void (*)(id, uint64_t (*)(), _OWORD *))sub_10002E91C);
      swift_bridgeObjectRelease(v106);
      char v109 = (dispatch_queue_s *)v84[9];
      uint64_t v74 = swift_allocObject(&unk_100072998, 40LL, 7LL);
      *(void *)(v74 + swift_weakDestroy(v0 + 16) = v84;
      *(void *)(v74 + 24) = v78;
      *(void *)(v74 + 32) = v73;
      uint64_t v110 = swift_allocObject(&unk_1000729C0, 32LL, 7LL);
      *(void *)(v110 + swift_weakDestroy(v0 + 16) = sub_10002E948;
      *(void *)(v110 + 24) = v74;
      uint64_t v151 = sub_10002F31C;
      uint64_t v152 = v110;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      *(void *)&__int128 v150 = sub_10000CA9C;
      *((void *)&v150 + 1) = &unk_1000729D8;
      id v111 = _Block_copy(&aBlock);
      uint64_t v49 = v152;
      swift_retain(v84);
      swift_retain(v110);
      swift_release(v49);
      dispatch_sync(v109, v111);
      _Block_release(v111);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v110, "", 119LL, 583LL, 49LL, 1LL);
      swift_release(v110);
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        break;
      }
      __break(1u);
LABEL_20:
      if (v74 < 0) {
        uint64_t v126 = v74;
      }
      else {
        uint64_t v126 = v74 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v74);
      uint64_t v75 = _CocoaArrayWrapper.endIndex.getter(v126);
      uint64_t v76 = v143;
      swift_release(v143);
      swift_bridgeObjectRelease(v74);
    }

    swift_beginAccess(v73, v148, 1LL, 0LL);
    uint64_t v112 = *v73;
    *uint64_t v73 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v112);
    swift_beginAccess(v78, v147, 1LL, 0LL);
    uint64_t v113 = *v78;
    *unint64_t v78 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v114 = swift_bridgeObjectRelease(v113);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*v84 + 256LL))(&aBlock, v114);
    uint64_t v115 = v151;
    __int128 v156 = aBlock;
    swift_bridgeObjectRetain(v151);
    sub_1000295D0((uint64_t)&v156);
    __int128 v155 = v150;
    sub_1000295D0((uint64_t)&v155);
    swift_bridgeObjectRelease(v115);
    id v116 = v136;
    id v117 = [v136 zoneName];
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    uint64_t v120 = v119;

    LOBYTE(v117) = sub_1000194BC(v118, v120, v115);
    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(v120);
    if ((v117 & 1) != 0)
    {
      id v121 = [v129 scope];
      uint64_t v122 = (uint64_t)v131;
      sub_100016C0C((uint64_t)v121, v116);
      id v123 = v137;
      sub_10002A18C(v144, v122);

      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v122, v133);
      swift_release(v74);
    }

    else
    {
      swift_release(v74);
    }
  }

void sub_10001C3AC(void *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a2, v35, 0LL, 0LL);
  uint64_t v8 = *a2;
  id v9 = a1;
  uint64_t v10 = swift_bridgeObjectRetain(v8);
  uint64_t v11 = (void *)sub_10002AF10(v10, v9);
  swift_bridgeObjectRelease(v8);

  if (v11)
  {
    swift_beginAccess(a2, v34, 33LL, 0LL);
    id v12 = v9;
    uint64_t v13 = sub_10002B2B0(a2, v12);

    uint64_t v14 = *a2;
    if ((unint64_t)*a2 >> 62)
    {
      if (v14 < 0) {
        uint64_t v28 = *a2;
      }
      else {
        uint64_t v28 = v14 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*a2);
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v28);
      swift_bridgeObjectRelease(v14);
      if (v15 >= v13) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v15 >= v13)
      {
LABEL_4:
        sub_10002B6A0(v13, v15);
        swift_endAccess(v34);
        uint64_t v16 = sub_100030000();
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
        id v17 = v11;
        uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc(22LL, -1LL);
          os_log_type_t v29 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v30 = swift_slowAlloc(32LL, -1LL);
          v34[0] = v30;
          *(_DWORD *)uint64_t v20 = 136315394;
          uint64_t v32 = v4;
          uint64_t v21 = CKRecord.recordType.getter();
          unint64_t v23 = v22;
          uint64_t v33 = sub_100003E68(v21, v22, v34);
          uint64_t v31 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v20 + 4, v20 + 12);

          swift_bridgeObjectRelease(v23);
          *(_WORD *)(v20 + 12) = 2112;
          uint64_t v33 = (uint64_t)v17;
          id v24 = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v20 + 14, v20 + 22);
          id v25 = v29;
          *os_log_type_t v29 = v11;

          _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Don't send this record as part of update list as it is in queue for deletion: %s, %@",  (uint8_t *)v20,  0x16u);
          uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A940);
          swift_arrayDestroy(v25, 1LL, v26);
          swift_slowDealloc(v25, -1LL, -1LL);
          uint64_t v27 = v30;
          swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v27, -1LL, -1LL);
          swift_slowDealloc(v20, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
        }

        else
        {

          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        }

        return;
      }
    }

    __break(1u);
  }

uint64_t sub_10001C6F4( uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v83 = a7;
  unint64_t v84 = a6;
  uint64_t v78 = a5;
  LODWORD(v9) = a2;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v73 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v73 - v19;
  uint64_t v21 = sub_100030000();
  uint64_t v79 = v12;
  uint64_t v80 = v21;
  uint64_t v81 = *(void (**)(char *))(v12 + 16);
  v81(v20);
  id v22 = a3;
  swift_bridgeObjectRetain_n(a4, 2LL);
  id v23 = v22;
  id v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v82 = v11;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v75 = a1;
    uint64_t v28 = v27;
    uint64_t v73 = swift_slowAlloc(64LL, -1LL);
    uint64_t v86 = v73;
    *(_DWORD *)uint64_t v28 = 136315394;
    id v29 = (id)CKDatabaseScopeString([v23 scope]);
    int v74 = v9;
    id v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v76 = v15;
    uint64_t v77 = v18;
    uint64_t v32 = v31;
    unint64_t v34 = v33;

    uint64_t v85 = sub_100003E68(v32, v34, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v28 + 4, v28 + 12);

    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v35 = sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
    uint64_t v36 = swift_bridgeObjectRetain(a4);
    uint64_t v37 = Array.description.getter(v36, v35);
    unint64_t v9 = v38;
    swift_bridgeObjectRelease(a4);
    uint64_t v39 = v37;
    uint64_t v15 = v76;
    uint64_t v85 = sub_100003E68(v39, v9, &v86);
    uint64_t v18 = v77;
    uint64_t v11 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease_n(a4, 2LL);
    unint64_t v40 = v9;
    LOBYTE(v9) = v74;
    swift_bridgeObjectRelease(v40);
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Fetch record zone changes complete, database, %s, zoneIds, %s",  (uint8_t *)v28,  0x16u);
    uint64_t v41 = v73;
    swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    uint64_t v42 = v28;
    a1 = v75;
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  uint64_t v43 = *(void (**)(char *, uint64_t))(v79 + 8);
  v43(v20, v11);
  if ((v9 & 1) != 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v81)(v18, v80, v11);
    sub_10002DA6C(a1, 1);
    id v54 = v23;
    sub_10002DA6C(a1, 1);
    id v55 = v54;
    uint64_t v56 = sub_10002DA6C(a1, 1);
    id v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc(22LL, -1LL);
      uint64_t v60 = swift_slowAlloc(8LL, -1LL);
      uint64_t v81 = (void (*)(char *))v43;
      uint64_t v61 = (void *)v60;
      uint64_t v80 = swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = v80;
      *(_DWORD *)uint64_t v59 = 136315394;
      id v62 = (id)CKDatabaseScopeString([v55 scope]);
      uint64_t v77 = v18;
      id v63 = v62;
      uint64_t v64 = a1;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      unint64_t v67 = v66;

      uint64_t v68 = v65;
      a1 = v64;
      uint64_t v85 = sub_100003E68(v68, v67, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v59 + 4, v59 + 12);

      swift_bridgeObjectRelease(v67);
      *(_WORD *)(v59 + 12) = 2112;
      swift_errorRetain(v64);
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError(v64);
      uint64_t v85 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v59 + 14, v59 + 22);
      *uint64_t v61 = v69;
      sub_10002DA48(v64, 1);
      sub_10002DA48(v64, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Error fetching zone changes for %s database: %@",  (uint8_t *)v59,  0x16u);
      uint64_t v70 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v61, 1LL, v70);
      swift_slowDealloc(v61, -1LL, -1LL);
      uint64_t v71 = v80;
      swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);

      ((void (*)(char *, uint64_t))v81)(v77, v82);
    }

    else
    {

      sub_10002DA48(a1, 1);
      sub_10002DA48(a1, 1);

      v43(v18, v11);
    }

    sub_10001D7A0(a1, 0);
    swift_errorRetain(a1);
    v84(a1, 1LL);
    sub_10002DA48(a1, 1);
    return sub_10002DA48(a1, 1);
  }

  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v81)(v15, v80, v11);
    id v44 = v23;
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v81 = (void (*)(char *))v43;
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      uint64_t v86 = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      id v49 = (id)CKDatabaseScopeString([v44 scope]);
      uint64_t v76 = v15;
      id v50 = v49;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      unint64_t v53 = v52;

      uint64_t v85 = sub_100003E68(v51, v53, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v47 + 4, v47 + 12);

      swift_bridgeObjectRelease(v53);
      _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Successfully fetched zone changes for database: %s",  v47,  0xCu);
      swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      ((void (*)(char *, uint64_t))v81)(v76, v82);
    }

    else
    {

      v43(v15, v11);
    }

    return ((uint64_t (*)(void, void))v84)(0LL, 0LL);
  }

void sub_10001CE18(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    __break(1u);
    goto LABEL_12;
  }

  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_12:
    __break(1u);
    return;
  }

  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
  sub_100028D74(v9, 0.0, 120.0);
  double v11 = v10;
  uint64_t v12 = sub_100030000();
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v16 = 134218240;
    double aBlock = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2048;
    double aBlock = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v16 + 14, v16 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "checkinRetryFetch %f with random delay: %f",  (uint8_t *)v16,  0x16u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v17 = objc_allocWithZone(&OBJC_CLASS___NSBackgroundActivityScheduler);
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 initWithIdentifier:v18];

  uint64_t v20 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity;
  uint64_t v21 = *(void **)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity);
  *(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity) = v19;

  id v22 = *(void **)(v2 + v20);
  if (v22
    && ([v22 setQualityOfService:25], (id v23 = *(void **)(v2 + v20)) != 0)
    && ([v23 setInterval:v11 + a1], (id v24 = *(void **)(v2 + v20)) != 0)
    && ([v24 _setAdditionalXPCActivityProperties:v8], (os_log_type_t v25 = *(void **)(v2 + v20)) != 0))
  {
    v30[3] = sub_10002DE24;
    uint64_t v31 = v2;
    double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
    v30[0] = 1107296256LL;
    v30[1] = sub_10001D378;
    v30[2] = &unk_100072550;
    BOOL v26 = _Block_copy(&aBlock);
    uint64_t v27 = v31;
    id v28 = v25;
    swift_retain(v2);
    swift_release(v27);
    [v28 scheduleWithBlock:v26];
    swift_unknownObjectRelease(v8);
    _Block_release(v26);
  }

  else
  {
    swift_unknownObjectRelease(v8);
  }

uint64_t sub_10001D13C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) == 0) {
    return a3(1LL);
  }
  swift_errorRetain(a1);
  uint64_t v11 = sub_100030000();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  swift_errorRetain(a1);
  uint64_t v12 = swift_errorRetain(a1);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v22 = a3;
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v21 = v15;
    *(_DWORD *)os_log_type_t v15 = 138412290;
    swift_errorRetain(a1);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v23 = v16;
    a3 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v15 + 4, v15 + 12);
    id v17 = v20;
    *uint64_t v20 = v16;
    sub_10002DA48(a1, 1);
    sub_10002DA48(a1, 1);
    NSString v18 = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "checkinRetryFetch failed with %@", v21, 0xCu);
    uint64_t v19 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v17, 1LL, v19);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    sub_10002DA48(a1, 1);
    sub_10002DA48(a1, 1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  a3(2LL);
  return sub_10002DA48(a1, 1);
}

uint64_t sub_10001D378(uint64_t a1, void *aBlock)
{
  uint64_t v3 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = swift_allocObject(&unk_100072588, 24LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  swift_retain(v2);
  v3(sub_10002DEB8, v5);
  swift_release(v2);
  return swift_release(v5);
}

uint64_t sub_10001D3E8(double a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = *(void *)(v1 + 56);
  uint64_t v10 = swift_allocObject(&unk_100072330, 24LL, 7LL);
  swift_weakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_100072510, 32LL, 7LL);
  *(double *)(v11 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_10002DE18;
  uint64_t v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100072528;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v16 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_10001D61C(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1 + 16;
  uint64_t v9 = sub_100030000();
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v13 = 134217984;
    double v17 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "scheduleRetryFetch for %f", v13, 0xCu);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess(v8, &v17, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v8);
  if (result)
  {
    uint64_t v15 = result;
    if (!*(void *)(result + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity)) {
      sub_10001CE18(a2);
    }
    return swift_release(v15);
  }

  return result;
}

void sub_10001D7A0(uint64_t a1, int a2)
{
  LODWORD(v227) = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v206 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v206 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v233 = (uint8_t *)type metadata accessor for URL(0LL);
  uint64_t v216 = *((void *)v233 - 1);
  uint64_t v11 = __chkstk_darwin(v233);
  uint64_t v217 = (char *)&v206 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v215 = (char *)&v206 - v14;
  __chkstk_darwin(v13);
  v224 = (char *)&v206 - v15;
  uint64_t v234 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v234 - 8);
  uint64_t v17 = __chkstk_darwin(v234);
  uint64_t v225 = (char *)&v206 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  v220 = (char *)&v206 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v214 = (uint8_t *)&v206 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v219 = (char *)&v206 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v232 = (uint8_t *)&v206 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v223 = (char *)&v206 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v218 = (char *)&v206 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v222 = (char *)&v206 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v221 = (char *)&v206 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v226 = (char *)&v206 - v36;
  __chkstk_darwin(v35);
  unint64_t v38 = (char *)&v206 - v37;
  *(void *)&__int128 aBlock = a1;
  swift_errorRetain(a1);
  uint64_t v39 = sub_100003288(&qword_10007B1F8);
  type metadata accessor for CKError(0LL);
  uint64_t v41 = v40;
  if (swift_dynamicCast(v241, &aBlock, v39, v40, 6LL))
  {
    uint64_t v228 = v41;
    v209 = v6;
    uint64_t v210 = v4;
    uint64_t v42 = *(void **)&v241[0];
    uint64_t v43 = sub_100030000();
    uint64_t v212 = v16;
    id v44 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v229 = v43;
    v230 = v44;
    ((void (*)(char *))v44)(v38);
    id v45 = v42;
    os_log_type_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    id v213 = v45;
    uint64_t v211 = v3;
    uint64_t v208 = v7;
    uint64_t v207 = v8;
    v206 = v10;
    if (v48)
    {
      id v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v50 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v49 = 138412290;
      id v51 = v45;
      uint64_t v52 = _swift_stdlib_bridgeErrorToNSError(v51);
      *(void *)&__int128 aBlock = v52;
      unint64_t v53 = v231;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v49 + 4, v49 + 12);
      *id v50 = v52;

      id v45 = v213;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Error with cloud operation %@", v49, 0xCu);
      uint64_t v54 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v50, 1LL, v54);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {

      os_log_type_t v46 = (os_log_s *)v45;
      unint64_t v53 = v231;
    }

    id v55 = *(void (**)(char *, uint64_t))(v212 + 8);
    v55(v38, v234);
    *(void *)&v241[0] = v45;
    uint64_t v56 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
    uint64_t v57 = v228;
    uint64_t v58 = _BridgedStoredNSError.userInfo.getter(v228, v56);
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
    uint64_t v61 = v60;
    id v62 = v232;
    if (*(void *)(v58 + 16) && (unint64_t v63 = sub_100027E38(v59, v60), (v64 & 1) != 0))
    {
      sub_10000469C(*(void *)(v58 + 56) + 32 * v63, (uint64_t)&aBlock);
    }

    else
    {
      __int128 aBlock = 0u;
      __int128 v238 = 0u;
    }

    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(v58);
    if (*((void *)&v238 + 1))
    {
      uint64_t v65 = sub_100003288(&qword_10007B218);
      if ((swift_dynamicCast(v241, &aBlock, (char *)&type metadata for Any + 8, v65, 6LL) & 1) != 0)
      {
        uint64_t v66 = *(void *)&v241[0];
        unint64_t v67 = v226;
        v230(v226, v229, v234);
        uint64_t v68 = swift_bridgeObjectRetain_n(v66, 2LL);
        uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = swift_slowAlloc(12LL, -1LL);
          uint64_t v212 = v56;
          uint64_t v72 = (uint8_t *)v71;
          uint64_t v73 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 aBlock = v73;
          *(_DWORD *)uint64_t v72 = 136315138;
          v231 = v72 + 4;
          uint64_t v74 = swift_bridgeObjectRetain(v66);
          uint64_t v75 = v53;
          uint64_t v76 = Dictionary.description.getter( v74,  &type metadata for AnyHashable,  v228,  &protocol witness table for AnyHashable);
          uint64_t v77 = v55;
          unint64_t v79 = v78;
          swift_bridgeObjectRelease(v66);
          uint64_t v80 = v76;
          unint64_t v53 = v75;
          id v62 = v232;
          *(void *)&v241[0] = sub_100003E68(v80, v79, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v241, (char *)v241 + 8, v231, v72 + 12);
          swift_bridgeObjectRelease_n(v66, 2LL);
          unint64_t v81 = v79;
          id v55 = v77;
          id v45 = v213;
          uint64_t v82 = v234;
          swift_bridgeObjectRelease(v81);
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Handling partial internal errors - %s", v72, 0xCu);
          swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1LL, -1LL);
          uint64_t v83 = v72;
          uint64_t v56 = v212;
          swift_slowDealloc(v83, -1LL, -1LL);

          unint64_t v84 = v226;
          uint64_t v85 = v82;
        }

        else
        {

          swift_bridgeObjectRelease_n(v66, 2LL);
          unint64_t v84 = v67;
          uint64_t v85 = v234;
        }

        uint64_t v86 = ((uint64_t (*)(char *, uint64_t))v55)(v84, v85);
        __chkstk_darwin(v86);
        *(&v206 - 2) = (char *)v53;
        *((_BYTE *)&v206 - 8) = v227 & 1;
        sub_10002975C(v66, (void (*)(_BYTE *, id))sub_10002DDEC);
        swift_bridgeObjectRelease(v66);
        uint64_t v57 = v228;
      }
    }

    else
    {
      sub_10000B4A8((uint64_t)&aBlock, &qword_10007A7A0);
    }

    *(void *)&__int128 aBlock = v45;
    _BridgedStoredNSError.code.getter(&v244, v57, v56);
    switch((uint64_t)v244)
    {
      case 3LL:
      case 4LL:
        double v87 = 150.0;
        goto LABEL_21;
      case 6LL:
      case 7LL:
        double v87 = COERCE_DOUBLE(related decl 'e' for CKErrorCode.retryAfterSeconds.getter(v45));
        if ((v88 & 1) != 0) {
          double v87 = 600.0;
        }
LABEL_21:
        sub_10001D3E8(v87);
        goto LABEL_41;
      case 14LL:
        v230(v222, v229, v234);
        uint64_t v104 = (uint8_t *)v45;
        __n128 v105 = (os_log_s *)Logger.logObject.getter(v104);
        os_log_type_t v106 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v105, v106))
        {
          uint64_t v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v108 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v107 = 138412290;
          char v109 = v104;
          v233 = v104;
          uint64_t v110 = v109;
          id v111 = v53;
          uint64_t v112 = _swift_stdlib_bridgeErrorToNSError(v109);
          *(void *)&__int128 aBlock = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v107 + 4, v107 + 12);
          uint64_t *v108 = v112;
          unint64_t v53 = v111;

          uint64_t v104 = v233;
          _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Server Record Changed, We need to Fetch the data again: %@",  v107,  0xCu);
          uint64_t v113 = sub_100003288((uint64_t *)&unk_10007A940);
          swift_arrayDestroy(v108, 1LL, v113);
          swift_slowDealloc(v108, -1LL, -1LL);
          swift_slowDealloc(v107, -1LL, -1LL);
        }

        else
        {

          __n128 v105 = (os_log_s *)v104;
        }

        v55(v222, v234);
        uint64_t v149 = related decl 'e' for CKErrorCode.serverRecord.getter(v104);
        if (v149)
        {
          __int128 v150 = (void *)v149;
          v230(v218, v229, v234);
          id v151 = v150;
          uint64_t v152 = (os_log_s *)Logger.logObject.getter(v151);
          os_log_type_t v153 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v152, v153))
          {
            uint64_t v154 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            v231 = (void *)swift_slowAlloc(8LL, -1LL);
            v233 = v104;
            v232 = v154;
            *(_DWORD *)uint64_t v154 = 138412290;
            *(void *)&__int128 aBlock = v151;
            id v155 = v151;
            uint64_t v104 = v233;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v154 + 4, v154 + 12);
            __int128 v156 = v231;
            void *v231 = v150;

            uint64_t v157 = v232;
            _os_log_impl((void *)&_mh_execute_header, v152, v153, "Resolving with server record - %@", v232, 0xCu);
            uint64_t v158 = sub_100003288((uint64_t *)&unk_10007A940);
            swift_arrayDestroy(v156, 1LL, v158);
            swift_slowDealloc(v156, -1LL, -1LL);
            swift_slowDealloc(v157, -1LL, -1LL);
          }

          else
          {

            uint64_t v152 = (os_log_s *)v151;
          }

          v55(v218, v234);
          v200 = (dispatch_queue_s *)v53[9];
          uint64_t v201 = swift_allocObject(&unk_100072498, 32LL, 7LL);
          *(void *)(v201 + swift_weakDestroy(v0 + 16) = v53;
          *(void *)(v201 + 24) = v151;
          uint64_t v202 = swift_allocObject(&unk_1000724C0, 32LL, 7LL);
          *(void *)(v202 + swift_weakDestroy(v0 + 16) = sub_10002DC80;
          *(void *)(v202 + 24) = v201;
          v239 = sub_10002F31C;
          v240 = (void *)v202;
          *(void *)&__int128 aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256LL;
          *(void *)&__int128 v238 = sub_10000CA9C;
          *((void *)&v238 + 1) = &unk_1000724D8;
          v203 = _Block_copy(&aBlock);
          v204 = v240;
          id v205 = v151;
          swift_retain(v53);
          swift_retain(v202);
          swift_release(v204);
          dispatch_sync(v200, v203);

          _Block_release(v203);
          LOBYTE(v203) = swift_isEscapingClosureAtFileLocation(v202, "", 119LL, 688LL, 40LL, 1LL);
          swift_release(v201);
          swift_release(v202);
          if ((v203 & 1) != 0)
          {
            __break(1u);
            JUMPOUT(0x10001EFF8LL);
          }
        }

        else
        {
          sub_10001D3E8(30.0);
        }

        return;
      case 21LL:
        uint64_t v212 = v56;
        uint64_t v227 = v55;
        uint64_t v114 = v215;
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x8000000100066EA0LL, 1LL);
        uint64_t v115 = (uint64_t)v224;
        URL.appendingPathComponent(_:)(0x2E65746176697250LL, 0xED00006E656B6F74LL);
        id v116 = *(void (**)(char *, uint8_t *))(v216 + 8);
        id v117 = v114;
        uint64_t v118 = v233;
        v116(v117, v233);
        uint64_t v119 = sub_10002A18C(0LL, v115);
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*v53 + 256LL))(v241, v119);
        uint64_t v120 = v242;
        uint64_t v247 = v242;
        __int128 v246 = v241[0];
        swift_bridgeObjectRetain(v242);
        sub_1000295D0((uint64_t)&v246);
        __int128 v245 = v241[1];
        sub_1000295D0((uint64_t)&v245);
        sub_1000295F8(&v247);
        uint64_t v121 = *(void *)(v120 + 16);
        uint64_t v122 = v53;
        uint64_t v123 = (uint64_t)v217;
        if (v121)
        {
          v231 = (void *)sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
          v124 = (void **)(v120 + 40);
          do
          {
            uint64_t v125 = (uint64_t)*(v124 - 1);
            uint64_t v126 = *v124;
            uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
            id v129 = v128;
            swift_bridgeObjectRetain(v126);
            v130._uint64_t countAndFlagsBits = v125;
            v130._object = v126;
            v131._uint64_t countAndFlagsBits = v127;
            v131._object = v129;
            Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v130, v131).super.isa;
            sub_100016C0C(2LL, isa);

            uint64_t v118 = v233;
            sub_10002A18C(0LL, v123);
            v116((char *)v123, v118);
            v124 += 2;
            --v121;
          }

          while (v121);
        }

        sub_1000295F8(&v247);
        sub_10001D3E8(30.0);
        v116(v224, v118);
        unint64_t v53 = v122;
        id v55 = v227;
        id v45 = v213;
        id v62 = v232;
        uint64_t v57 = v228;
        uint64_t v56 = v212;
        goto LABEL_41;
      case 26LL:
        v230(v221, v229, v234);
        id v133 = v45;
        uint64_t v134 = (os_log_s *)Logger.logObject.getter(v133);
        os_log_type_t v135 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v134, v135))
        {
          uint64_t v136 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v137 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          v233 = v136;
          *(_DWORD *)uint64_t v136 = 138412290;
          uint64_t v138 = v136 + 12;
          uint64_t v139 = v136 + 4;
          id v140 = v133;
          uint64_t v141 = v55;
          uint64_t v142 = v56;
          uint64_t v143 = _swift_stdlib_bridgeErrorToNSError(v140);
          *(void *)&__int128 aBlock = v143;
          uint64_t v144 = v139;
          id v62 = v232;
          uint64_t v145 = v138;
          id v45 = v213;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v144, v145);
          *id v137 = v143;
          uint64_t v56 = v142;
          id v55 = v141;

          uint64_t v146 = v233;
          _os_log_impl((void *)&_mh_execute_header, v134, v135, "Zone not found: %@", v233, 0xCu);
          uint64_t v147 = sub_100003288((uint64_t *)&unk_10007A940);
          swift_arrayDestroy(v137, 1LL, v147);
          uint64_t v57 = v228;
          swift_slowDealloc(v137, -1LL, -1LL);
          swift_slowDealloc(v146, -1LL, -1LL);
        }

        else
        {

          uint64_t v134 = (os_log_s *)v133;
        }

        Swift::OpaquePointer_optional v148 = (char **)&v245 + 1;
        goto LABEL_40;
      default:
        v230(v223, v229, v234);
        id v89 = v45;
        os_log_type_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v93 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          v233 = v92;
          *(_DWORD *)uint64_t v92 = 138412290;
          unint64_t v94 = v92 + 12;
          uint64_t v95 = v92 + 4;
          id v96 = v89;
          unint64_t v97 = v55;
          uint64_t v98 = v56;
          uint64_t v99 = _swift_stdlib_bridgeErrorToNSError(v96);
          *(void *)&__int128 aBlock = v99;
          uint64_t v100 = v95;
          id v62 = v232;
          uint64_t v101 = v94;
          id v45 = v213;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v100, v101);
          *id v93 = v99;
          uint64_t v56 = v98;
          id v55 = v97;

          os_log_type_t v102 = v233;
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Uncaught error: %@", v233, 0xCu);
          uint64_t v103 = sub_100003288((uint64_t *)&unk_10007A940);
          swift_arrayDestroy(v93, 1LL, v103);
          uint64_t v57 = v228;
          swift_slowDealloc(v93, -1LL, -1LL);
          swift_slowDealloc(v102, -1LL, -1LL);
        }

        else
        {

          os_log_type_t v90 = (os_log_s *)v89;
        }

        Swift::OpaquePointer_optional v148 = (char **)&v246 + 1;
LABEL_40:
        v55(*(v148 - 32), v234);
LABEL_41:
        *(void *)&__int128 v244 = v45;
        _BridgedStoredNSError.code.getter(&aBlock, v57, v56);
        if ((void)aBlock == 110LL)
        {
          uint64_t v166 = v219;
          uint64_t v167 = ((uint64_t (*)(char *, uint64_t, uint64_t))v230)(v219, v229, v234);
          uint64_t v168 = (os_log_s *)Logger.logObject.getter(v167);
          os_log_type_t v169 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v168, v169))
          {
            uint64_t v170 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v170 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v168,  v169,  "Attempting to use Manatee from a non-HSA2 account!",  v170,  2u);
            swift_slowDealloc(v170, -1LL, -1LL);
          }

          v55(v166, v234);
          if (*((_BYTE *)v53 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) != 1)
          {

            return;
          }

          *((_BYTE *)v53 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
          v171 = v214;
          uint64_t v172 = ((uint64_t (*)(uint8_t *, uint64_t, uint64_t))v230)(v214, v229, v234);
          uint64_t v173 = (os_log_s *)Logger.logObject.getter(v172);
          os_log_type_t v174 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v173, v174))
          {
            uint64_t v175 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v175 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v173,  v174,  "Manatee was available, but is not available now.",  v175,  2u);
            swift_slowDealloc(v175, -1LL, -1LL);
            uint64_t v176 = (os_log_s *)v45;
          }

          else
          {
            uint64_t v176 = v173;
            uint64_t v173 = (os_log_s *)v45;
          }

          uint64_t v199 = v171;
          goto LABEL_63;
        }

        if ((void)aBlock != 112LL)
        {
          if ((void)aBlock == 111LL)
          {
            v230((char *)v62, v229, v234);
            uint64_t v159 = swift_retain_n(v53, 2LL);
            v160 = (void *)Logger.logObject.getter(v159);
            os_log_type_t v161 = static os_log_type_t.default.getter();
            if (!os_log_type_enabled((os_log_t)v160, v161))
            {

              swift_release_n(v53, 2LL);
              uint64_t v199 = v62;
LABEL_63:
              v55((char *)v199, v234);
              return;
            }

            v162 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v163 = swift_slowAlloc(32LL, -1LL);
            uint64_t v236 = v163;
            *(_DWORD *)v162 = 136315138;
            (*(void (**)(__int128 *__return_ptr))(*v53 + 256LL))(&aBlock);
            __int128 v164 = v238;
            __int128 v244 = aBlock;
            sub_1000295D0((uint64_t)&v244);
            v243 = v239;
            sub_1000295F8(&v243);
            uint64_t v235 = sub_100003E68(v164, *((unint64_t *)&v164 + 1), &v236);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v162 + 4, v162 + 12);
            swift_release_n(v53, 2LL);
            swift_bridgeObjectRelease(*((void *)&v164 + 1));
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v160,  v161,  "PCS Keys for %s are not yet synced.",  v162,  0xCu);
            swift_arrayDestroy(v163, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v163, -1LL, -1LL);
            swift_slowDealloc(v162, -1LL, -1LL);

            uint64_t v165 = &v248;
          }

          else
          {
            v230(v225, v229, v234);
            id v191 = v45;
            v192 = (os_log_s *)Logger.logObject.getter(v191);
            os_log_type_t v193 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v192, v193))
            {
              uint64_t v194 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              v195 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
              *(_DWORD *)uint64_t v194 = 138412290;
              id v196 = v191;
              uint64_t v197 = _swift_stdlib_bridgeErrorToNSError(v196);
              *(void *)&__int128 aBlock = v197;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v194 + 4, v194 + 12);
              uint64_t *v195 = v197;

              _os_log_impl((void *)&_mh_execute_header, v192, v193, "Uncaught private error: %@", v194, 0xCu);
              uint64_t v198 = sub_100003288((uint64_t *)&unk_10007A940);
              swift_arrayDestroy(v195, 1LL, v198);
              swift_slowDealloc(v195, -1LL, -1LL);
              swift_slowDealloc(v194, -1LL, -1LL);
            }

            else
            {

              v192 = (os_log_s *)v191;
            }

            uint64_t v165 = &v247;
          }

          uint64_t v199 = (uint8_t *)*(v165 - 32);
          goto LABEL_63;
        }

        uint64_t v177 = v220;
        uint64_t v178 = ((uint64_t (*)(char *, uint64_t, uint64_t))v230)(v220, v229, v234);
        v179 = (os_log_s *)Logger.logObject.getter(v178);
        os_log_type_t v180 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v179, v180))
        {
          uint64_t v181 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v181 = 0;
          _os_log_impl((void *)&_mh_execute_header, v179, v180, "Private Missing Manatee Identity, Reset...", v181, 2u);
          swift_slowDealloc(v181, -1LL, -1LL);
        }

        v55(v177, v234);
        v239 = sub_10002DAE0;
        v240 = v53;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&__int128 v238 = sub_100005A3C;
        *((void *)&v238 + 1) = &unk_100072460;
        v182 = _Block_copy(&aBlock);
        uint64_t v183 = swift_retain(v53);
        __n128 v184 = v206;
        static DispatchQoS.unspecified.getter(v183);
        *(void *)&__int128 v244 = _swiftEmptyArrayStorage;
        uint64_t v185 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v186 = sub_100003288((uint64_t *)&unk_10007A860);
        uint64_t v187 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
        v188 = v209;
        uint64_t v189 = v186;
        uint64_t v190 = v211;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v244, v189, v187, v211, v185);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v184, v188, v182);
        _Block_release(v182);

        (*(void (**)(char *, uint64_t))(v210 + 8))(v188, v190);
        (*(void (**)(char *, uint64_t))(v207 + 8))(v184, v208);
        swift_release(v240);
        break;
    }
  }

uint64_t sub_10001F058()
{
  return static Transaction.named<A>(_:with:)( "com.apple.bluetoothuser.storeCKRecord",  37LL,  2,  (void (*)(uint64_t))sub_10002AB64);
}

uint64_t sub_10001F0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(a2 + 56);
  uint64_t v18 = swift_allocObject(&unk_1000728A8, 57LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  *(void *)(v18 + 32) = a3;
  *(void *)(v18 + 4sub_10000DC70(0, 0) = a4;
  *(void *)(v18 + 48) = a5;
  *(_BYTE *)(v18 + 56) = a6;
  aBlock[4] = sub_10002E748;
  uint64_t v29 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_1000728C0;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a4);
  static DispatchQoS.unspecified.getter(a5);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v22 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v12, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v25);
  return swift_release(v29);
}

uint64_t sub_10001F308(void *a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v214 = a4;
  uint64_t v215 = a3;
  int v216 = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v217 = (char *)&v207 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  v218 = (char *)&v207 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v207 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  id v213 = (uint8_t *)&v207 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v207 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v207 - v21;
  uint64_t v23 = sub_100030000();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v222 = v23;
  uint64_t v223 = v24;
  ((void (*)(char *))v24)(v22);
  id v25 = a1;
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v219 = v5;
  uint64_t v220 = v7;
  uint64_t v212 = v15;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(8LL, -1LL);
    v224 = v20;
    v221 = (void *)v30;
    *(_DWORD *)uint64_t v29 = 138412290;
    id v230 = v25;
    id v31 = v25;
    uint64_t v5 = v219;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231, v29 + 4, v29 + 12);
    uint64_t v32 = v221;
    void *v221 = v25;

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Attempting to store the record: %@", v29, 0xCu);
    uint64_t v33 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v32, 1LL, v33);
    uint64_t v34 = v32;
    uint64_t v20 = v224;
    swift_slowDealloc(v34, -1LL, -1LL);
    uint64_t v35 = v29;
    uint64_t v7 = v220;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {

    uint64_t v26 = (os_log_s *)v25;
  }

  v221 = *(void **)(v8 + 8);
  ((void (*)(char *, uint64_t))v221)(v22, v7);
  uint64_t v36 = (uint64_t *)(v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  swift_beginAccess( v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  &v230,  0LL,  0LL);
  uint64_t v37 = *v36;
  id v38 = v25;
  swift_bridgeObjectRetain(v37);
  uint64_t v39 = 0LL;
  sub_10002B97C(v40, v38);
  uint64_t v42 = v41;
  id v44 = v43;
  os_log_type_t v46 = v45;
  swift_bridgeObjectRelease(v37);

  if (v42)
  {
    unint64_t v47 = sub_100029E54();
    uint64_t v48 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v47, 0LL, 0LL);
    *id v49 = 1LL;
    uint64_t v228 = v48;
    __n128 v50 = swift_retain(v46);
    v224 = v46;
    v44(&v228, v50);
    swift_errorRelease(v48);
    swift_beginAccess(v36, &v228, 33LL, 0LL);
    uint64_t v51 = sub_100027B08((uint64_t)v42, (uint64_t (*)(uint64_t, __n128))sub_100027F34, (uint64_t *)&unk_10007B1E0);
    uint64_t v53 = v52;
    swift_endAccess(&v228);
    if (v51) {
      sub_10002EF14(v51, v53);
    }
    v223(v20, v222, v7);
    id v54 = v42;
    id v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v211 = v38;
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v210 = 0LL;
      *(_DWORD *)uint64_t v57 = 138412290;
      uint64_t v228 = (uint64_t)v54;
      id v54 = v54;
      id v38 = v211;
      uint64_t v5 = v219;
      uint64_t v39 = v210;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229, v57 + 4, v57 + 12);
      *uint64_t v58 = v42;

      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Updating cancelled pending record deletion for: %@",  v57,  0xCu);
      uint64_t v59 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v58, 1LL, v59);
      swift_slowDealloc(v58, -1LL, -1LL);
      uint64_t v60 = v57;
      uint64_t v7 = v220;
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_release_n(v224, 2LL);
    }

    else
    {

      swift_release_n(v224, 2LL);
      id v55 = (os_log_s *)v54;
    }

    ((void (*)(char *, uint64_t))v221)(v20, v7);
  }

  uint64_t v61 = (void *)(v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
  swift_beginAccess( v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  &v228,  0LL,  0LL);
  uint64_t v62 = *v61;
  id v63 = v38;
  swift_bridgeObjectRetain(v62);
  sub_10002C0C8(v64, v63);
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  swift_bridgeObjectRelease(v62);

  v224 = v66;
  uint64_t v209 = v39;
  if (v66)
  {
    uint64_t v211 = v61;
    uint64_t v71 = swift_allocObject(&unk_100071F30, 32LL, 7LL);
    *(void *)(v71 + swift_weakDestroy(v0 + 16) = v68;
    *(void *)(v71 + 24) = v70;
    v218 = (char *)v71;
    p_type = &stru_100078FF0.type;
    id v73 = [v224 encryptedValues];
    id v74 = [v73 allKeys];
    swift_unknownObjectRelease(v73);
    uint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, &type metadata for String);

    uint64_t v210 = v75;
    uint64_t v76 = *(void *)(v75 + 16);
    if (v76)
    {
      uint64_t v77 = (void *)(v210 + 40);
      do
      {
        uint64_t v78 = *v77;
        id v79 = objc_msgSend(v63, p_type[403], swift_bridgeObjectRetain(*v77).n128_f64[0]);
        NSString v80 = String._bridgeToObjectiveC()();
        id v81 = [v79 objectForKeyedSubscript:v80];
        swift_unknownObjectRelease(v81);
        swift_unknownObjectRelease(v79);

        if (v81)
        {
          id v82 = objc_msgSend(v224, p_type[403]);
          id v83 = objc_msgSend(v63, p_type[403]);
          NSString v84 = String._bridgeToObjectiveC()();
          id v85 = [v83 objectForKeyedSubscript:v84];

          swift_unknownObjectRelease(v83);
          NSString v86 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v78);
          [v82 setObject:v85 forKeyedSubscript:v86];
          id v87 = v85;
          p_type = (char **)(&stru_100078FF0 + 16);
          swift_unknownObjectRelease(v87);
          swift_unknownObjectRelease(v82);
        }

        else
        {
          swift_bridgeObjectRelease(v78);
        }

        v77 += 2;
        --v76;
      }

      while (v76);
    }

    swift_bridgeObjectRelease(v210);
    char v88 = (void *)swift_allocObject(&unk_100071F58, 56LL, 7LL);
    id v89 = v224;
    v88[2] = v224;
    v88[3] = sub_10002C3C8;
    os_log_type_t v90 = v218;
    os_log_type_t v91 = v215;
    v88[4] = v218;
    v88[5] = v91;
    uint64_t v92 = v214;
    uint64_t v215 = v88;
    v88[6] = v214;
    id v93 = v213;
    uint64_t v94 = v220;
    v223((char *)v213, v222, v220);
    id v95 = v89;
    swift_retain_n(v90, 3LL);
    id v96 = (char *)v95;
    swift_retain(v92);
    uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
    os_log_type_t v99 = static os_log_type_t.default.getter();
    BOOL v100 = os_log_type_enabled(v98, v99);
    v224 = v96;
    if (v100)
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v102 = swift_slowAlloc(32LL, -1LL);
      uint64_t v225 = v102;
      *(_DWORD *)uint64_t v101 = 136315138;
      uint64_t v103 = swift_allocObject(&unk_100071FA8, 32LL, 7LL);
      uint64_t v104 = v218;
      *(void *)(v103 + swift_weakDestroy(v0 + 16) = sub_10002C3C8;
      *(void *)(v103 + 24) = v104;
      v226 = (uint8_t *)v96;
      v227[0] = sub_10002C3C4;
      v227[1] = v103;
      __n128 v105 = v96;
      swift_retain(v218);
      uint64_t v106 = sub_100003288(&qword_10007AD38);
      uint64_t v107 = String.init<A>(describing:)(&v226, v106);
      unint64_t v109 = v108;
      v226 = (uint8_t *)sub_100003E68(v107, v108, &v225);
      os_log_type_t v90 = v218;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v226, v227, v101 + 4, v101 + 12);
      swift_release_n(v90, 2LL);

      swift_bridgeObjectRelease(v109);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Updating existing pending record: %s", v101, 0xCu);
      swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v101, -1LL, -1LL);

      uint64_t v110 = v213;
    }

    else
    {

      swift_release_n(v90, 2LL);
      uint64_t v110 = v93;
    }

    ((void (*)(uint8_t *, uint64_t))v221)(v110, v94);
    uint64_t v7 = v94;
    uint64_t v114 = v212;
    uint64_t v115 = ((uint64_t (*)(char *, uint64_t, uint64_t))v223)(v212, v222, v94);
    else {
      int v116 = static os_log_type_t.debug.getter();
    }
    int v117 = v116;
    uint64_t v5 = v219;
    uint64_t v61 = v211;
    id v118 = v63;
    uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
    if (os_log_type_enabled(v119, (os_log_type_t)v117))
    {
      LODWORD(v214) = v117;
      uint64_t v120 = swift_slowAlloc(22LL, -1LL);
      uint64_t v121 = (void *)swift_slowAlloc(8LL, -1LL);
      id v213 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
      v226 = v213;
      *(_DWORD *)uint64_t v120 = 138412546;
      id v122 = [v118 recordID];
      uint64_t v225 = (uint64_t)v122;
      uint64_t v208 = (uint64_t *)&v226;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v120 + 4, v120 + 12);
      uint64_t v210 = (uint64_t)v121;
      void *v121 = v122;
      *(_WORD *)(v120 + 12) = 2080;
      id v123 = [v118 encryptedValues];
      id v124 = [v123 allKeys];
      swift_unknownObjectRelease(v123);
      uint64_t v125 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v124, &type metadata for String);

      uint64_t v126 = _swiftEmptyArrayStorage;
      uint64_t v225 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v127 = *(void *)(v125 + 16);
      if (v127)
      {
        uint64_t v207 = (uint64_t *)v119;
        swift_bridgeObjectRetain(v125);
        os_log_t v128 = (void *)(v125 + 40);
        do
        {
          uint64_t v130 = *v128;
          id v131 = objc_msgSend(v118, "encryptedValues", swift_bridgeObjectRetain(*v128).n128_f64[0]);
          NSString v132 = String._bridgeToObjectiveC()();
          id v133 = [v131 objectForKeyedSubscript:v132];
          swift_bridgeObjectRelease(v130);

          uint64_t v134 = swift_unknownObjectRelease(v131);
          if (v133)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v134);
            unint64_t v136 = *(void *)((v225 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v135 = *(void *)((v225 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v136 >= v135 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1LL);
            }
            uint64_t v129 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v136, v133);
            specialized Array._endMutation()(v129);
          }

          v128 += 2;
          --v127;
        }

        while (v127);
        swift_bridgeObjectRelease(v125);
        uint64_t v126 = (void *)v225;
        uint64_t v61 = v211;
        uint64_t v114 = v212;
        uint64_t v119 = (os_log_s *)v207;
      }

      swift_bridgeObjectRelease(v125);
      uint64_t v137 = sub_100003288(&qword_10007B410);
      uint64_t v138 = Array.description.getter(v126, v137);
      unint64_t v140 = v139;
      swift_bridgeObjectRelease(v126);
      uint64_t v225 = sub_100003E68(v138, v140, (uint64_t *)&v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v208, v120 + 14, v120 + 22);

      swift_bridgeObjectRelease(v140);
      _os_log_impl( (void *)&_mh_execute_header,  v119,  (os_log_type_t)v214,  "Updating existing pending CKRecord %@ - %s",  (uint8_t *)v120,  0x16u);
      uint64_t v141 = sub_100003288((uint64_t *)&unk_10007A940);
      uint64_t v142 = v210;
      swift_arrayDestroy(v210, 1LL, v141);
      swift_slowDealloc(v142, -1LL, -1LL);
      uint64_t v143 = v213;
      swift_arrayDestroy(v213, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1LL, -1LL);
      swift_slowDealloc(v120, -1LL, -1LL);

      uint64_t v7 = v220;
      ((void (*)(char *, uint64_t))v221)(v114, v220);
      os_log_type_t v90 = v218;
      uint64_t v5 = v219;
    }

    else
    {

      ((void (*)(char *, uint64_t))v221)(v114, v7);
    }

    uint64_t v144 = swift_allocObject(&unk_100071F80, 32LL, 7LL);
    uint64_t v145 = v215;
    *(void *)(v144 + swift_weakDestroy(v0 + 16) = sub_10002C404;
    *(void *)(v144 + 24) = v145;
    swift_beginAccess(v61, &v226, 33LL, 0LL);
    swift_retain(v145);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v61);
    uint64_t v225 = *v61;
    *uint64_t v61 = 0x8000000000000000LL;
    uint64_t v147 = v224;
    uint64_t v148 = sub_100028E1C( (uint64_t)sub_10002C3C4,  v144,  v224,  isUniquelyReferenced_nonNull_native,  (uint64_t (*)(void *))sub_100027EE8,  &qword_10007B1D8,  &qword_10007B1B0,  &OBJC_CLASS___CKRecord_ptr);
    uint64_t v150 = v149;
    uint64_t v151 = *v61;
    *uint64_t v61 = v225;
    swift_bridgeObjectRelease(v151);
    swift_endAccess(&v226);
    swift_release(v90);

    swift_release(v145);
    uint64_t v152 = v217;
    if (v148) {
LABEL_38:
    }
      sub_10002EF14(v148, v150);
  }

  else
  {
    id v111 = v218;
    uint64_t v112 = ((uint64_t (*)(char *, uint64_t, uint64_t))v223)(v218, v222, v7);
    else {
      int v113 = static os_log_type_t.debug.getter();
    }
    int v173 = v113;
    uint64_t v152 = v217;
    id v174 = v63;
    uint64_t v175 = (char *)Logger.logObject.getter(v174);
    if (os_log_type_enabled((os_log_t)v175, (os_log_type_t)v173))
    {
      LODWORD(v212) = v173;
      v224 = v175;
      uint64_t v211 = v61;
      uint64_t v176 = swift_slowAlloc(22LL, -1LL);
      uint64_t v177 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v210 = swift_slowAlloc(32LL, -1LL);
      v226 = (uint8_t *)v210;
      *(_DWORD *)uint64_t v176 = 138412546;
      id v178 = [v174 recordID];
      uint64_t v225 = (uint64_t)v178;
      uint64_t v207 = (uint64_t *)&v226;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v176 + 4, v176 + 12);
      uint64_t v208 = v177;
      *uint64_t v177 = (uint64_t)v178;
      id v213 = (uint8_t *)v176;
      *(_WORD *)(v176 + 12) = 2080;
      id v179 = [v174 encryptedValues];
      id v180 = [v179 allKeys];
      swift_unknownObjectRelease(v179);
      uint64_t v181 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v180, &type metadata for String);

      v182 = _swiftEmptyArrayStorage;
      uint64_t v225 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v183 = *(void *)(v181 + 16);
      if (v183)
      {
        swift_bridgeObjectRetain(v181);
        __n128 v184 = (void *)(v181 + 40);
        do
        {
          uint64_t v186 = *v184;
          id v187 = objc_msgSend(v174, "encryptedValues", swift_bridgeObjectRetain(*v184).n128_f64[0]);
          NSString v188 = String._bridgeToObjectiveC()();
          id v189 = [v187 objectForKeyedSubscript:v188];
          swift_bridgeObjectRelease(v186);

          uint64_t v190 = swift_unknownObjectRelease(v187);
          if (v189)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v190);
            unint64_t v192 = *(void *)((v225 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v191 = *(void *)((v225 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v192 >= v191 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v191 > 1, v192 + 1, 1LL);
            }
            uint64_t v185 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v192, v189);
            specialized Array._endMutation()(v185);
          }

          v184 += 2;
          --v183;
        }

        while (v183);
        swift_bridgeObjectRelease(v181);
        v182 = (void *)v225;
        id v111 = v218;
        uint64_t v5 = v219;
        uint64_t v152 = v217;
      }

      swift_bridgeObjectRelease(v181);
      os_log_type_t v193 = v213;
      uint64_t v194 = sub_100003288(&qword_10007B410);
      uint64_t v195 = Array.description.getter(v182, v194);
      unint64_t v197 = v196;
      swift_bridgeObjectRelease(v182);
      uint64_t v225 = sub_100003E68(v195, v197, (uint64_t *)&v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v207, v193 + 14, v193 + 22);

      swift_bridgeObjectRelease(v197);
      uint64_t v198 = v224;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v224,  (os_log_type_t)v212,  "Staging pending CKRecord %@ - %s",  v193,  0x16u);
      uint64_t v199 = sub_100003288((uint64_t *)&unk_10007A940);
      v200 = v208;
      swift_arrayDestroy(v208, 1LL, v199);
      swift_slowDealloc(v200, -1LL, -1LL);
      uint64_t v201 = v210;
      swift_arrayDestroy(v210, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v201, -1LL, -1LL);
      swift_slowDealloc(v193, -1LL, -1LL);

      uint64_t v7 = v220;
      ((void (*)(char *, uint64_t))v221)(v111, v220);
      uint64_t v61 = v211;
    }

    else
    {

      ((void (*)(char *, uint64_t))v221)(v111, v7);
    }

    uint64_t v202 = v214;
    uint64_t v203 = swift_allocObject(&unk_100071F08, 32LL, 7LL);
    *(void *)(v203 + swift_weakDestroy(v0 + 16) = v215;
    *(void *)(v203 + 24) = v202;
    swift_beginAccess(v61, &v226, 33LL, 0LL);
    swift_retain(v202);
    char v204 = swift_isUniquelyReferenced_nonNull_native(*v61);
    uint64_t v225 = *v61;
    *uint64_t v61 = 0x8000000000000000LL;
    uint64_t v148 = sub_100028E1C( (uint64_t)sub_10002C3C4,  v203,  v174,  v204,  (uint64_t (*)(void *))sub_100027EE8,  &qword_10007B1D8,  &qword_10007B1B0,  &OBJC_CLASS___CKRecord_ptr);
    uint64_t v150 = v205;
    uint64_t v206 = *v61;
    *uint64_t v61 = v225;
    swift_bridgeObjectRelease(v206);
    swift_endAccess(&v226);
    if (v148) {
      goto LABEL_38;
    }
  }

  uint64_t v153 = ((uint64_t (*)(char *, uint64_t, uint64_t))v223)(v152, v222, v7);
  else {
    os_log_type_t v154 = static os_log_type_t.debug.getter();
  }
  os_log_type_t v155 = v154;
  uint64_t v156 = swift_retain_n(v5, 2LL);
  uint64_t v157 = (os_log_s *)Logger.logObject.getter(v156);
  os_log_type_t v158 = v155;
  if (os_log_type_enabled(v157, v155))
  {
    uint64_t v159 = swift_slowAlloc(22LL, -1LL);
    uint64_t v160 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v159 = 134218242;
    uint64_t v225 = *(void *)(*v61 + 16LL);
    v226 = (uint8_t *)v160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v159 + 4, v159 + 12);
    *(_WORD *)(v159 + 12) = 2080;
    uint64_t v161 = *v61;
    swift_bridgeObjectRetain(*v61);
    sub_1000154BC(v162);
    uint64_t v164 = v163;
    swift_bridgeObjectRelease(v161);
    uint64_t v165 = Array.description.getter(v164, &type metadata for String);
    unint64_t v167 = v166;
    swift_bridgeObjectRelease(v164);
    uint64_t v168 = v165;
    uint64_t v169 = v219;
    uint64_t v225 = sub_100003E68(v168, v167, (uint64_t *)&v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v159 + 14, v159 + 22);
    swift_release_n(v169, 2LL);
    swift_bridgeObjectRelease(v167);
    _os_log_impl((void *)&_mh_execute_header, v157, v158, "Pending records[%ld]: %s", (uint8_t *)v159, 0x16u);
    swift_arrayDestroy(v160, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v160, -1LL, -1LL);
    swift_slowDealloc(v159, -1LL, -1LL);

    uint64_t v170 = v152;
    uint64_t v171 = v220;
  }

  else
  {

    swift_release_n(v5, 2LL);
    uint64_t v170 = v152;
    uint64_t v171 = v7;
  }

  ((void (*)(char *, uint64_t))v221)(v170, v171);
  return sub_100021418(v216 & 1);
}

uint64_t sub_100020730(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[1] = *(void *)(v5 + 56);
  uint64_t v17 = swift_allocObject(&unk_100071FD0, 49LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a3;
  *(void *)(v17 + 4sub_10000DC70(0, 0) = a4;
  *(_BYTE *)(v17 + 48) = a2;
  aBlock[4] = sub_10002C48C;
  uint64_t v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100071FE8;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain(v5);
  id v19 = a1;
  swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  os_log_type_t v27 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v23 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release(v29);
}

uint64_t sub_100020944( uint64_t a1, void *a2, uint8_t *a3, void (*a4)(char *, uint64_t, uint64_t), int a5)
{
  int v131 = a5;
  uint64_t v129 = a3;
  uint64_t v130 = a4;
  uint64_t v138 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v138 - 8);
  uint64_t v8 = __chkstk_darwin(v138);
  unint64_t v136 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v123 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  os_log_t v128 = (char *)&v123 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v123 - v15;
  uint64_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
  swift_beginAccess( a1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  v144,  0LL,  0LL);
  uint64_t v18 = *v17;
  id v19 = a2;
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = 0LL;
  sub_10002D3F0(v21, v19);
  uint64_t v23 = v22;
  NSString v132 = v24;
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(v18);
  id v135 = v19;

  uint64_t v137 = a1;
  id v133 = v12;
  uint64_t v134 = v7;
  if (v23)
  {
    swift_retain(v26);
    uint64_t v27 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v27, v138);
    id v28 = v23;
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v26;
    uint64_t v127 = 0LL;
    if (v31)
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v126 = v32;
      id v124 = v33;
      *(_DWORD *)uint64_t v33 = 138412290;
      uint64_t v142 = (uint64_t)v28;
      id v35 = v28;
      id v125 = v28;
      id v36 = v35;
      uint64_t v32 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v33 + 4, v33 + 12);
      *uint64_t v34 = v23;

      id v28 = v125;
      uint64_t v37 = v124;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Removing pending update for record: %@", v124, 0xCu);
      uint64_t v38 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v34, 1LL, v38);
      swift_slowDealloc(v34, -1LL, -1LL);
      uint64_t v12 = v133;
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {

      uint64_t v29 = (os_log_s *)v28;
    }

    uint64_t v39 = v132;

    uint64_t v7 = v134;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v16, v138);
    unint64_t v40 = sub_100029E54();
    uint64_t v41 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v40, 0LL, 0LL);
    *uint64_t v42 = 1LL;
    uint64_t v142 = v41;
    v143[0] = 1;
    ((void (*)(uint64_t *))v39)(&v142);
    swift_errorRelease(v41);
    swift_beginAccess(v17, &v142, 33LL, 0LL);
    uint64_t v43 = sub_100027B08((uint64_t)v28, (uint64_t (*)(uint64_t, __n128))sub_100027EE8, &qword_10007B1D8);
    uint64_t v45 = v44;
    swift_endAccess(&v142);
    swift_release_n(v32, 2LL);

    uint64_t v20 = v127;
    if (v43) {
      sub_10002EF14(v43, v45);
    }
  }

  os_log_type_t v46 = (uint64_t *)(v137 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  swift_beginAccess( v137 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  &v142,  0LL,  0LL);
  uint64_t v47 = *v46;
  id v48 = v135;
  swift_bridgeObjectRetain(v47);
  sub_10002BC30(v49, v48);
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  swift_bridgeObjectRelease(v47);

  NSString v132 = v46;
  id v135 = v20;
  if (v51)
  {
    uint64_t v56 = swift_allocObject(&unk_100072830, 32LL, 7LL);
    *(void *)(v56 + swift_weakDestroy(v0 + 16) = v53;
    *(void *)(v56 + 24) = v55;
    uint64_t v57 = (void *)swift_allocObject(&unk_100072858, 56LL, 7LL);
    v57[2] = v51;
    v57[3] = sub_10002E664;
    uint64_t v58 = v129;
    v57[4] = v56;
    v57[5] = v58;
    uint64_t v59 = v130;
    v57[6] = v130;
    swift_retain(v59);
    id v60 = v51;
    swift_retain(v56);
    uint64_t v61 = sub_100030000();
    uint64_t v62 = v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v128, v61, v138);
    id v63 = (void (*)(char *, uint64_t, uint64_t))v60;
    swift_retain(v56);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v68 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v129 = v67;
      *(_DWORD *)uint64_t v67 = 138412290;
      uint64_t v140 = (uint64_t)v63;
      uint64_t v69 = v63;
      uint64_t v130 = v63;
      id v70 = v69;
      uint64_t v71 = v67 + 4;
      uint64_t v72 = v67 + 12;
      uint64_t v62 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v71, v72);
      *uint64_t v68 = v51;
      swift_release(v56);

      id v73 = v129;
      id v63 = v130;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Updating existing pending record: %@", v129, 0xCu);
      uint64_t v74 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v68, 1LL, v74);
      swift_slowDealloc(v68, -1LL, -1LL);
      uint64_t v7 = v134;
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {

      swift_release(v56);
      uint64_t v65 = (os_log_s *)v63;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v62, v138);
    uint64_t v83 = swift_allocObject(&unk_100072880, 32LL, 7LL);
    *(void *)(v83 + swift_weakDestroy(v0 + 16) = sub_10002E6CC;
    *(void *)(v83 + 24) = v57;
    NSString v84 = v132;
    swift_beginAccess(v132, &v140, 33LL, 0LL);
    swift_retain(v57);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v84);
    uint64_t v139 = *v84;
    *NSString v84 = 0x8000000000000000LL;
    uint64_t v86 = v83;
    id v82 = v84;
    uint64_t v78 = sub_100028E1C( (uint64_t)sub_10002F320,  v86,  v63,  isUniquelyReferenced_nonNull_native,  (uint64_t (*)(void *))sub_100027F34,  (uint64_t *)&unk_10007B1E0,  &qword_10007B198,  &OBJC_CLASS___CKRecordID_ptr);
    uint64_t v80 = v87;
    uint64_t v88 = *v82;
    *id v82 = v139;
    swift_bridgeObjectRelease(v88);
    swift_endAccess(&v140);
    swift_release(v56);

    swift_release(v57);
    uint64_t v12 = v133;
    if (v78) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v75 = swift_allocObject(&unk_100072808, 32LL, 7LL);
    uint64_t v76 = v130;
    *(void *)(v75 + swift_weakDestroy(v0 + 16) = v129;
    *(void *)(v75 + 24) = v76;
    swift_beginAccess(v46, &v140, 33LL, 0LL);
    swift_retain(v76);
    char v77 = swift_isUniquelyReferenced_nonNull_native(*v46);
    uint64_t v139 = *v46;
    *os_log_type_t v46 = 0x8000000000000000LL;
    uint64_t v78 = sub_100028E1C( (uint64_t)sub_10002E640,  v75,  v48,  v77,  (uint64_t (*)(void *))sub_100027F34,  (uint64_t *)&unk_10007B1E0,  &qword_10007B198,  &OBJC_CLASS___CKRecordID_ptr);
    uint64_t v80 = v79;
    uint64_t v81 = *v46;
    *os_log_type_t v46 = v139;
    swift_bridgeObjectRelease(v81);
    swift_endAccess(&v140);
    id v82 = v46;
    if (v78) {
LABEL_14:
    }
      sub_10002EF14(v78, v80);
  }

  uint64_t v89 = sub_100030000();
  os_log_type_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v90(v12, v89, v138);
  uint64_t v91 = swift_retain_n(v137, 2LL);
  uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = swift_slowAlloc(22LL, -1LL);
    uint64_t v95 = swift_slowAlloc(32LL, -1LL);
    uint64_t v130 = v90;
    uint64_t v96 = v95;
    *(_DWORD *)uint64_t v94 = 134218242;
    uint64_t v139 = *(void *)(*v82 + 16);
    uint64_t v140 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v94 + 4, v94 + 12);
    *(_WORD *)(v94 + 12) = 2080;
    uint64_t v97 = *v82;
    swift_bridgeObjectRetain(*v82);
    id v98 = v135;
    sub_1000157F8(v99);
    uint64_t v101 = v100;
    id v135 = v98;
    swift_bridgeObjectRelease(v97);
    uint64_t v102 = Array.description.getter(v101, &type metadata for String);
    unint64_t v104 = v103;
    swift_bridgeObjectRelease(v101);
    uint64_t v139 = sub_100003E68(v102, v104, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v94 + 14, v94 + 22);
    swift_release_n(v137, 2LL);
    swift_bridgeObjectRelease(v104);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Pending deletion for records[%ld] : %s", (uint8_t *)v94, 0x16u);
    swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v105 = v96;
    os_log_type_t v90 = v130;
    swift_slowDealloc(v105, -1LL, -1LL);
    swift_slowDealloc(v94, -1LL, -1LL);

    uint64_t v106 = *(void (**)(char *, uint64_t))(v134 + 8);
    v106(v133, v138);
  }

  else
  {

    swift_release_n(v137, 2LL);
    uint64_t v106 = *(void (**)(char *, uint64_t))(v7 + 8);
    v106(v12, v138);
  }

  uint64_t v107 = v136;
  v90(v136, v89, v138);
  uint64_t v108 = swift_retain_n(v137, 2LL);
  unint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
  os_log_type_t v110 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v109, v110))
  {
    uint64_t v111 = swift_slowAlloc(22LL, -1LL);
    uint64_t v112 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v111 = 134218242;
    int v113 = v132;
    uint64_t v139 = *(void *)(*v132 + 16);
    uint64_t v140 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v111 + 4, v111 + 12);
    *(_WORD *)(v111 + 12) = 2080;
    uint64_t v114 = *v113;
    swift_bridgeObjectRetain(v114);
    sub_1000157F8(v115);
    uint64_t v117 = v116;
    swift_bridgeObjectRelease(v114);
    uint64_t v118 = Array.description.getter(v117, &type metadata for String);
    unint64_t v120 = v119;
    swift_bridgeObjectRelease(v117);
    uint64_t v139 = sub_100003E68(v118, v120, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v111 + 14, v111 + 22);
    swift_release_n(v137, 2LL);
    swift_bridgeObjectRelease(v120);
    _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Pending deletion for records[%ld] : %s",  (uint8_t *)v111,  0x16u);
    swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1LL, -1LL);
    swift_slowDealloc(v111, -1LL, -1LL);

    uint64_t v121 = v136;
  }

  else
  {

    swift_release_n(v137, 2LL);
    uint64_t v121 = v107;
  }

  v106(v121, v138);
  return sub_100021418(v131 & 1);
}

uint64_t sub_100021418(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v76) = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  char v77 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v70 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v70 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint8_t **)((char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = *(void **)(v2 + 56);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)(v15);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    uint64_t v20 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
    uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
    if (v21)
    {
      uint64_t v22 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity;
      uint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity);
      swift_retain(*(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer));
      if (v23)
      {
        uint64_t v24 = sub_100030000();
        uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v11, v24, v3);
        uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          id v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          id v73 = v9;
          uint64_t v29 = v4;
          os_log_type_t v30 = v28;
          *(_WORD *)id v28 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Defer fetch until scheduled changes are pushed to cloud",  v28,  2u);
          BOOL v31 = v30;
          uint64_t v4 = v29;
          uint64_t v9 = v73;
          swift_slowDealloc(v31, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
        [*(id *)(v2 + v22) invalidate];
        uint64_t v32 = *(void **)(v2 + v22);
        *(void *)(v2 + v22) = 0LL;

        (*(void (**)(void))(*(void *)v21 + 160LL))();
        uint64_t v33 = *(void *)(v2 + v20);
        *(void *)(v2 + v2sub_10000DC70(0, 0) = 0LL;
        swift_release(v33);
        sub_100021A9C(v76 & 1, 1);
      }

      uint64_t v34 = sub_100030000();
      id v35 = *(void (**)(void))(v4 + 16);
      uint64_t v76 = (uint64_t (*)(char *, void (*)(char *, uint64_t (*)(void, void), uint64_t)))v34;
      uint64_t v74 = (void (*)(char *, uint64_t (*)(void, void), uint64_t))v35;
      v35(v9);
      uint64_t v36 = swift_retain_n(v2, 2LL);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      uint64_t v38 = v4;
      os_log_type_t v39 = static os_log_type_t.default.getter();
      BOOL v40 = os_log_type_enabled(v37, v39);
      uint64_t v75 = v21;
      if (v40)
      {
        uint64_t v72 = (uint8_t *)v38;
        uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v42 = swift_slowAlloc(32LL, -1LL);
        uint64_t v71 = v42;
        *(_DWORD *)uint64_t v41 = 136315138;
        v80[0] = v42;
        id v70 = v41 + 4;
        uint64_t v43 = (uint64_t *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
        swift_beginAccess( v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  v78,  0LL,  0LL);
        uint64_t v44 = *v43;
        id v73 = v9;
        uint64_t v45 = v3;
        uint64_t v46 = sub_100010A58(0LL, &qword_10007B1B0, &OBJC_CLASS___CKRecord_ptr);
        swift_bridgeObjectRetain(v44);
        uint64_t v47 = sub_100003288(&qword_10007B1B8);
        uint64_t v48 = sub_10002DA78(&qword_10007B1C0, &qword_10007B1B0, &OBJC_CLASS___CKRecord_ptr);
        uint64_t v49 = v46;
        uint64_t v3 = v45;
        uint64_t v50 = Dictionary.Keys.description.getter(v44, v49, v47, v48);
        unint64_t v52 = v51;
        swift_bridgeObjectRelease(v44);
        uint64_t v81 = sub_100003E68(v50, v52, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v70, v41 + 12);
        swift_release_n(v2, 2LL);
        swift_bridgeObjectRelease(v52);
        _os_log_impl((void *)&_mh_execute_header, v37, v39, "Already Scheduled changes: %s", v41, 0xCu);
        uint64_t v53 = v71;
        swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);

        uint64_t v54 = (void (*)(char *, uint64_t))*((void *)v72 + 1);
        v54(v73, v3);
      }

      else
      {

        swift_release_n(v2, 2LL);
        uint64_t v54 = *(void (**)(char *, uint64_t))(v38 + 8);
        v54(v9, v3);
      }

      uint64_t v55 = v77;
      v74(v77, (uint64_t (*)(void, void))v76, v3);
      uint64_t v56 = swift_retain_n(v2, 2LL);
      uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v60 = swift_slowAlloc(32LL, -1LL);
        id v73 = (char *)v60;
        uint64_t v76 = (uint64_t (*)(char *, void (*)(char *, uint64_t (*)(void, void), uint64_t)))v54;
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v81 = v60;
        uint64_t v72 = v59 + 4;
        uint64_t v61 = (uint64_t *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
        swift_beginAccess( v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  v80,  0LL,  0LL);
        uint64_t v62 = *v61;
        uint64_t v74 = (void (*)(char *, uint64_t (*)(void, void), uint64_t))v3;
        uint64_t v63 = sub_100010A58(0LL, &qword_10007B198, &OBJC_CLASS___CKRecordID_ptr);
        swift_bridgeObjectRetain(v62);
        uint64_t v64 = sub_100003288(&qword_10007B1A0);
        uint64_t v65 = sub_10002DA78(&qword_10007B1A8, &qword_10007B198, &OBJC_CLASS___CKRecordID_ptr);
        uint64_t v66 = Dictionary.Keys.description.getter(v62, v63, v64, v65);
        unint64_t v68 = v67;
        swift_bridgeObjectRelease(v62);
        uint64_t v79 = sub_100003E68(v66, v68, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v72, v59 + 12);
        swift_release_n(v2, 2LL);
        swift_bridgeObjectRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Already Scheduled deletion: %s", v59, 0xCu);
        uint64_t v69 = v73;
        swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1LL, -1LL);
        swift_slowDealloc(v59, -1LL, -1LL);

        swift_release(v75);
        return v76(v77, v74);
      }

      else
      {

        swift_release(v75);
        swift_release_n(v2, 2LL);
        return ((uint64_t (*)(char *, uint64_t))v54)(v55, v3);
      }
    }

    else
    {
      return sub_100021A9C(v76 & 1, 0);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100021A9C(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = *(void **)(v3 + 56);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    sub_100028D74(result, 0.0, 10.0);
    double v35 = v17;
    uint64_t v18 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone;
    if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone) & 1) == 0)
    {
      double v19 = v17;
      uint64_t v20 = sub_100058E28();
      swift_beginAccess(v20, v34, 0LL, 0LL);
      double v22 = 3.0;
      if (*v20 == 1 && (a1 & 1) == 0)
      {
        sub_100028D74(v21, 0.0, 120.0);
        double v22 = v19 + v23;
      }

      double v35 = v22;
      *(_BYTE *)(v3 + v18) = 1;
    }

    uint64_t v24 = sub_100030000();
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v24, v6);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc(18LL, -1LL);
      *(_DWORD *)uint64_t v28 = 67109376;
      int v32 = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v28 + 4, v28 + 8);
      *(_WORD *)(v28 + 8) = 2048;
      swift_beginAccess(&v35, &v32, 0LL, 0LL);
      double v31 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28 + 10, v28 + 18);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "checkInPendingCloudUpdates, userInitiated: %{BOOL}d with delay: %f",  (uint8_t *)v28,  0x12u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v29 = type metadata accessor for Transaction();
    __chkstk_darwin(v29);
    *(&v30 - 4) = v3;
    *(&v30 - 3) = (uint64_t)&v35;
    *((_BYTE *)&v30 - swift_weakDestroy(v0 + 16) = a1 & 1;
    *((_BYTE *)&v30 - 15) = a2 & 1;
    return static Transaction.named<A>(_:with:)( "com.apple.bluetoothuser.checkInPendingCloudUpdates",  50LL,  2,  (void (*)(uint64_t))sub_10002D15C);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100021D8C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v108 = a4;
  int v107 = a3;
  uint64_t v5 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v6 = *(v5 - 1);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v114 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v112 = (char *)&v100 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v100 - v11;
  uint64_t v106 = a2;
  uint64_t v13 = a2 + 16;
  Transaction.capture()();
  uint64_t v14 = sub_100030000();
  id v15 = *(uint64_t (**)(void))(v6 + 16);
  uint64_t v115 = v14;
  uint64_t v111 = (void (*)(char *, uint64_t, void *))v15;
  uint64_t v16 = v15(v12);
  double v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    double v19 = v5;
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "checkInPendingCloudUpdates timer fired", v20, 2u);
    uint64_t v21 = v20;
    uint64_t v5 = v19;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  int v113 = *(void (**)(char *, void *))(v6 + 8);
  v113(v12, v5);
  swift_beginAccess(v13, v129, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v13);
  if (Strong)
  {
    uint64_t v23 = Strong;
    uint64_t v24 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
    uint64_t v25 = *(void *)(Strong + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
    uint64_t v109 = Strong;
    if (v25)
    {
      uint64_t v26 = *(void (**)(uint64_t))(*(void *)v25 + 160LL);
      uint64_t v27 = swift_retain(v25);
      v26(v27);
      uint64_t v23 = v109;
      swift_release(v25);
      uint64_t v28 = *(void *)(v23 + v24);
    }

    else
    {
      uint64_t v28 = 0LL;
    }

    *(void *)(v23 + v24) = 0LL;
    swift_release(v28);
    uint64_t v29 = *(void **)(v23 + 56);
    uint64_t v30 = (uint64_t *)(v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
    swift_beginAccess( v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  v128,  0LL,  0LL);
    uint64_t v31 = *v30;
    swift_bridgeObjectRetain_n(v31, 2LL);
    id v32 = v29;
    os_log_type_t v110 = sub_10002781C(v31);
    uint64_t v104 = v31;
    swift_bridgeObjectRelease(v31);
    int v33 = (uint64_t *)(v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
    swift_beginAccess( v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  v127,  0LL,  0LL);
    uint64_t v34 = *v33;
    swift_bridgeObjectRetain_n(v34, 2LL);
    unint64_t v35 = (unint64_t)sub_10002781C(v34);
    uint64_t v103 = v34;
    swift_bridgeObjectRelease(v34);
    uint64_t v36 = v112;
    uint64_t v37 = v111;
    uint64_t v38 = ((uint64_t (*)(char *, uint64_t, void *))v111)(v112, v115, v5);
    int v39 = IsAppleInternalBuild(v38);
    id v105 = v32;
    if (v39) {
      int v40 = static os_log_type_t.default.getter();
    }
    else {
      int v40 = static os_log_type_t.debug.getter();
    }
    int v41 = v40;
    uint64_t v42 = swift_retain_n(v35, 2LL);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    if (os_log_type_enabled(v43, (os_log_type_t)v41))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v100 = swift_slowAlloc(32LL, -1LL);
      uint64_t v125 = v100;
      uint64_t v101 = v44;
      *(_DWORD *)uint64_t v44 = 136315138;
      if ((v35 & 0x8000000000000000LL) != 0 || (v35 & 0x4000000000000000LL) != 0) {
        goto LABEL_52;
      }
      uint64_t v45 = *(void *)(v35 + 16);
      swift_retain(v35);
      while (1)
      {
        uint64_t v102 = v5;
        uint64_t v46 = _swiftEmptyArrayStorage;
        if (!v45) {
          break;
        }
        uint64_t v47 = 0LL;
        uint64_t v120 = v45;
        unint64_t v121 = v35 & 0xC000000000000001LL;
        uint64_t v116 = (void *)(v35 + 32);
        uint64_t v48 = _swiftEmptyArrayStorage;
        uint64_t v118 = v43;
        unint64_t v119 = (void *)v35;
        int v117 = v41;
        while (1)
        {
          uint64_t v49 = v121 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v35) : (id)v116[v47];
          uint64_t v5 = v49;
          BOOL v50 = __OFADD__(v47, 1LL);
          uint64_t v51 = v47 + 1;
          if (v50) {
            break;
          }
          uint64_t v122 = v51;
          uint64_t v123 = v48;
          id v52 = [v49 encryptedValues];
          id v53 = [v52 allKeys];
          swift_unknownObjectRelease(v52);
          uint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, &type metadata for String);

          uint64_t v124 = (uint64_t)v46;
          uint64_t v55 = v46;
          uint64_t v56 = *(void *)(v54 + 16);
          if (v56)
          {
            swift_bridgeObjectRetain(v54);
            uint64_t v57 = (void *)(v54 + 40);
            do
            {
              uint64_t v59 = *v57;
              id v60 = objc_msgSend(v5, "encryptedValues", swift_bridgeObjectRetain(*v57).n128_f64[0]);
              NSString v61 = String._bridgeToObjectiveC()();
              id v62 = [v60 objectForKeyedSubscript:v61];
              swift_bridgeObjectRelease(v59);

              uint64_t v63 = swift_unknownObjectRelease(v60);
              if (v62)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v63);
                unint64_t v65 = *(void *)((v124 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                unint64_t v64 = *(void *)((v124 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                if (v65 >= v64 >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v64 > 1,  v65 + 1,  1LL);
                }
                uint64_t v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v62);
                specialized Array._endMutation()(v58);
              }

              v57 += 2;
              --v56;
            }

            while (v56);
            swift_bridgeObjectRelease(v54);
            uint64_t v66 = v124;
            uint64_t v43 = v118;
            unint64_t v35 = (unint64_t)v119;
            int v41 = v117;
            uint64_t v46 = _swiftEmptyArrayStorage;
          }

          else
          {
            uint64_t v66 = (uint64_t)v55;
            uint64_t v46 = v55;
          }

          swift_bridgeObjectRelease(v54);
          uint64_t v48 = v123;
          if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0) {
            uint64_t v48 = sub_100027500(0LL, v48[2] + 1LL, 1, v48);
          }
          unint64_t v68 = v48[2];
          unint64_t v67 = v48[3];
          if (v68 >= v67 >> 1) {
            uint64_t v48 = sub_100027500((void *)(v67 > 1), v68 + 1, 1, v48);
          }
          v48[2] = v68 + 1;
          v48[v68 + 4] = v66;
          uint64_t v47 = v122;
          if (v122 == v120) {
            goto LABEL_37;
          }
        }

        __break(1u);
LABEL_52:
        uint64_t v98 = swift_retain(v35);
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter(v98);
      }

      uint64_t v48 = _swiftEmptyArrayStorage;
LABEL_37:
      swift_release(v35);
      uint64_t v69 = v101;
      uint64_t v70 = sub_100003288(&qword_10007B188);
      uint64_t v71 = Array.description.getter(v48, v70);
      unint64_t v73 = v72;
      swift_bridgeObjectRelease(v48);
      uint64_t v124 = sub_100003E68(v71, v73, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v69 + 4, v69 + 12);
      swift_release_n(v35, 2LL);
      swift_bridgeObjectRelease(v73);
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v41, "Staged CKRecords - %s", v69, 0xCu);
      uint64_t v74 = v100;
      swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);

      uint64_t v5 = v102;
      v113(v112, v102);
      uint64_t v37 = v111;
    }

    else
    {

      swift_release_n(v35, 2LL);
      v113(v36, v5);
    }

    v37(v114, v115, v5);
    uint64_t v75 = swift_retain_n(v35, 2LL);
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = v5;
      uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v79 = 134217984;
      if ((v35 & 0x8000000000000000LL) != 0 || (v35 & 0x4000000000000000LL) != 0)
      {
        swift_bridgeObjectRetain(v35);
        uint64_t v80 = _CocoaArrayWrapper.endIndex.getter(v99);
        swift_release(v35);
      }

      else
      {
        uint64_t v80 = *(void *)(v35 + 16);
      }

      swift_release(v35);
      uint64_t v125 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v79 + 4, v79 + 12);
      swift_release(v35);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "checkInPendingCloudUpdates count: %ld", v79, 0xCu);
      swift_slowDealloc(v79, -1LL, -1LL);

      uint64_t v5 = v78;
    }

    else
    {

      swift_release_n(v35, 2LL);
    }

    v113(v114, v5);
    sub_100010A58(0LL, &qword_10007B180, &OBJC_CLASS___CKModifyRecordsOperation_ptr);
    swift_retain(v35);
    Swift::Bool v81 = (char)v110;
    swift_retain(v110);
    v130.value._rawValue = (void *)v35;
    v130.is_nil = v81;
    id v82 = (id)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v130, v131);
    char v83 = v107;
    uint64_t v84 = v109;
    if ((v107 & 1) != 0) {
      id v85 = sub_10001158C();
    }
    else {
      id v85 = sub_1000115B0();
    }
    uint64_t v86 = v85;
    objc_msgSend(v82, "setGroup:", v85, v100);

    [v82 setCallbackQueue:*(void *)(v84 + 64)];
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
      [v82 setQualityOfService:25];
    }
    uint64_t v87 = swift_allocObject(&unk_100072380, 32LL, 7LL);
    *(void *)(v87 + swift_weakDestroy(v0 + 16) = v103;
    uint64_t v88 = v106;
    *(void *)(v87 + 24) = v106;
    swift_retain(v88);
    CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_10002D2E8, v87);
    uint64_t v89 = swift_allocObject(&unk_1000723A8, 24LL, 7LL);
    *(void *)(v89 + swift_weakDestroy(v0 + 16) = v104;
    CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_10002D2F4, v89);
    uint64_t v90 = swift_allocObject(&unk_1000723D0, 50LL, 7LL);
    uint64_t v91 = v105;
    *(void *)(v90 + swift_weakDestroy(v0 + 16) = v105;
    *(void *)(v90 + 24) = v84;
    uint64_t v92 = v110;
    *(void *)(v90 + 32) = v35;
    *(void *)(v90 + 4sub_10000DC70(0, 0) = v92;
    *(_BYTE *)(v90 + 48) = v83 & 1;
    *(_BYTE *)(v90 + 49) = v108 & 1;
    id v93 = v91;
    swift_retain(v84);
    CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_10002D310, v90);
    uint64_t v94 = type metadata accessor for Transaction();
    __chkstk_darwin(v94);
    *(&v100 - 2) = (uint64_t)v82;
    uint64_t v95 = v84;
    static Transaction.named<A>(_:with:)( "com.apple.bluetoothuser.checkInPendingCloudUpdates.completionBlock",  66LL,  2,  (void (*)(uint64_t))sub_10002D328);
    id v96 = sub_100011440();
    id v97 = [v96 privateCloudDatabase];

    [v97 addOperation:v82];
    swift_release(v95);
  }

void sub_10002280C(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(os_log_s **)(v10 - 8);
  uint64_t v100 = v10;
  uint64_t v101 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v99 = (char *)&v91 - v16;
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v91 - v17;
  id v19 = a1;
  sub_10002D3F0(a4, v19);
  id v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;

  if (v21)
  {
    uint64_t v97 = v25;
    id v98 = v21;
    id v96 = v23;
    if ((a3 & 1) != 0)
    {
      uint64_t v38 = a5 + 16;
      swift_errorRetain(a2);
      uint64_t v39 = sub_100030000();
      uint64_t v40 = v100;
      (*((void (**)(char *, uint64_t, uint64_t))v101 + 2))(v14, v39, v100);
      id v41 = v19;
      sub_10002DAB8(a2, 1);
      id v42 = v41;
      id v43 = sub_10002DAB8(a2, 1);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.default.getter();
      int v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v47 = swift_slowAlloc(22LL, -1LL);
        uint64_t v48 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v47 = 138412546;
        LODWORD(v99) = v46;
        uint64_t v103 = (uint64_t)v42;
        id v93 = v104;
        id v49 = v42;
        uint64_t v95 = v44;
        uint64_t v50 = v38;
        id v51 = v49;
        uint64_t v52 = v97;
        uint64_t v40 = v100;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v47 + 4, v47 + 12);
        *uint64_t v48 = v42;

        uint64_t v38 = v50;
        uint64_t v44 = v95;
        *(_WORD *)(v47 + 12) = 2112;
        swift_errorRetain(a2);
        uint64_t v53 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v103 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v93, v47 + 14, v47 + 22);
        v48[1] = v53;
        sub_10002E2E8(a2, 1);
        sub_10002E2E8(a2, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v99,  "CheckInPendingCloudUpdates CKRecord save failed %@ with error: %@",  (uint8_t *)v47,  0x16u);
        uint64_t v54 = sub_100003288((uint64_t *)&unk_10007A940);
        swift_arrayDestroy(v48, 2LL, v54);
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
        uint64_t v55 = v96;
      }

      else
      {

        sub_10002E2E8(a2, 1);
        sub_10002E2E8(a2, 1);
        uint64_t v55 = v96;
        uint64_t v52 = v97;
      }

      (*((void (**)(char *, uint64_t))v101 + 1))(v14, v40);
      uint64_t v103 = (uint64_t)a2;
      v104[0] = 1;
      swift_errorRetain(a2);
      v55(&v103);
      sub_10002E2E8(a2, 1);
      swift_beginAccess(v38, &v103, 0LL, 0LL);
      uint64_t Strong = swift_weakLoadStrong(v38);
      if (Strong)
      {
        uint64_t v61 = Strong;
        sub_10001D7A0((uint64_t)a2, 0);
        swift_release(v52);

        sub_10002E2E8(a2, 1);
        swift_release(v61);
        return;
      }

      swift_release(v52);

      id v82 = a2;
      char v83 = 1;
    }

    else
    {
      id v93 = a2;
      uint64_t v26 = sub_100030000();
      uint64_t v27 = v100;
      uint64_t v95 = (os_log_s *)*((void *)v101 + 2);
      ((void (*)(char *, uint64_t, uint64_t))v95)(v18, v26, v100);
      id v28 = v19;
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.default.getter();
      BOOL v31 = os_log_type_enabled(v29, v30);
      uint64_t v94 = a2;
      if (v31)
      {
        id v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        int v33 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v92 = v26;
        *(_DWORD *)id v32 = 138412290;
        uint64_t v103 = (uint64_t)v28;
        id v34 = v28;
        uint64_t v23 = v96;
        uint64_t v26 = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v32 + 4, v32 + 12);
        *int v33 = v28;

        a2 = v94;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "CheckInPendingCloudUpdates CKRecord successfully saved (%@.",  v32,  0xCu);
        uint64_t v35 = sub_100003288((uint64_t *)&unk_10007A940);
        uint64_t v36 = v33;
        uint64_t v27 = v100;
        swift_arrayDestroy(v36, 1LL, v35);
        swift_slowDealloc(v36, -1LL, -1LL);
        uint64_t v37 = v32;
        id v21 = v98;
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {

        uint64_t v29 = (os_log_s *)v28;
      }

      uint64_t v56 = v99;

      uint64_t v57 = (void (*)(char *, uint64_t))*((void *)v101 + 1);
      v57(v18, v27);
      uint64_t v58 = ((uint64_t (*)(char *, uint64_t, uint64_t))v95)(v56, v26, v27);
      else {
        int v59 = static os_log_type_t.debug.getter();
      }
      int v62 = v59;
      uint64_t v63 = v93;
      sub_10002DAB8(a2, 0);
      id v64 = v63;
      unint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
      if (os_log_type_enabled(v65, (os_log_type_t)v62))
      {
        LODWORD(v95) = v62;
        uint64_t v101 = v65;
        uint64_t v66 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
        uint64_t v92 = swift_slowAlloc(32LL, -1LL);
        uint64_t v103 = v92;
        id v93 = v66;
        *uint64_t v66 = 136315138;
        id v67 = [v64 encryptedValues];
        id v68 = [v67 allKeys];
        swift_unknownObjectRelease(v67);
        uint64_t v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, &type metadata for String);

        uint64_t v70 = _swiftEmptyArrayStorage;
        uint64_t v102 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v71 = *(void *)(v69 + 16);
        if (v71)
        {
          uint64_t v91 = v57;
          swift_bridgeObjectRetain(v69);
          unint64_t v72 = (void *)(v69 + 40);
          do
          {
            uint64_t v74 = *v72;
            id v75 = objc_msgSend(v64, "encryptedValues", swift_bridgeObjectRetain(*v72).n128_f64[0]);
            NSString v76 = String._bridgeToObjectiveC()();
            id v77 = [v75 objectForKeyedSubscript:v76];
            swift_bridgeObjectRelease(v74);

            uint64_t v78 = swift_unknownObjectRelease(v75);
            if (v77)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              unint64_t v80 = *(void *)((v102 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v79 = *(void *)((v102 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v80 >= v79 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1LL);
              }
              uint64_t v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v73);
            }

            v72 += 2;
            --v71;
          }

          while (v71);
          swift_bridgeObjectRelease(v69);
          uint64_t v70 = (void *)v102;
          uint64_t v56 = v99;
          uint64_t v57 = v91;
        }

        swift_bridgeObjectRelease(v69);
        uint64_t v84 = v93;
        uint64_t v85 = sub_100003288(&qword_10007B410);
        uint64_t v86 = Array.description.getter(v70, v85);
        unint64_t v88 = v87;
        swift_bridgeObjectRelease(v70);
        uint64_t v102 = sub_100003E68(v86, v88, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease(v88);
        a2 = v94;
        sub_10002E2E8(v94, 0);
        sub_10002E2E8(a2, 0);
        os_log_t v89 = v101;
        _os_log_impl( (void *)&_mh_execute_header,  v101,  (os_log_type_t)v95,  "CheckInPendingCloudUpdates saved CKRecords values - %s",  v84,  0xCu);
        uint64_t v90 = v92;
        swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1LL, -1LL);
        swift_slowDealloc(v84, -1LL, -1LL);

        v57(v56, v100);
        uint64_t v81 = v97;
        id v21 = v98;
        uint64_t v23 = v96;
      }

      else
      {
        sub_10002E2E8(a2, 0);
        sub_10002E2E8(a2, 0);

        v57(v56, v27);
        uint64_t v81 = v97;
      }

      uint64_t v103 = (uint64_t)a2;
      v104[0] = 0;
      sub_10002DAB8(a2, 0);
      v23(&v103);

      sub_10002E2E8(a2, 0);
      swift_release(v81);
      id v82 = a2;
      char v83 = 0;
    }

    sub_10002E2E8(v82, v83);
  }

void sub_100023074(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v51 - v13;
  id v15 = a1;
  sub_10002BEC4(a4);
  uint64_t v17 = v16;
  id v19 = v18;
  uint64_t v21 = v20;

  if (v17)
  {
    if ((a3 & 1) != 0)
    {
      swift_errorRetain(a2);
      uint64_t v32 = sub_100030000();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v32, v8);
      swift_errorRetain(a2);
      uint64_t v33 = swift_errorRetain(a2);
      id v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.error.getter();
      int v36 = v35;
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v55 = v17;
        uint64_t v37 = swift_slowAlloc(12LL, -1LL);
        LODWORD(v54) = v36;
        uint64_t v38 = (uint8_t *)v37;
        uint64_t v39 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v52 = (uint8_t *)v39;
        uint64_t v56 = v21;
        uint64_t v53 = v38;
        *(_DWORD *)uint64_t v38 = 138412290;
        uint64_t v40 = v38 + 12;
        id v41 = v38 + 4;
        swift_errorRetain(a2);
        id v42 = v34;
        id v43 = v19;
        uint64_t v44 = v8;
        uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v57 = v45;
        int v46 = v41;
        uint64_t v47 = v40;
        uint64_t v17 = v55;
        uint64_t v21 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v46, v47);
        *uint64_t v39 = v45;
        uint64_t v8 = v44;
        id v19 = v43;
        id v34 = v42;
        sub_10002DA48(a2, 1);
        sub_10002DA48(a2, 1);
        uint64_t v48 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  (os_log_type_t)v54,  "CheckInPendingCloudUpdates CKRecord deletion failed with error: %@",  v53,  0xCu);
        uint64_t v49 = sub_100003288((uint64_t *)&unk_10007A940);
        uint64_t v50 = v52;
        swift_arrayDestroy(v52, 1LL, v49);
        swift_slowDealloc(v50, -1LL, -1LL);
        swift_slowDealloc(v48, -1LL, -1LL);
      }

      else
      {
        sub_10002DA48(a2, 1);
        sub_10002DA48(a2, 1);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      uint64_t v57 = a2;
      swift_errorRetain(a2);
      v19(&v57);

      sub_10002DA48(a2, 1);
      swift_release(v21);
      sub_10002DA48(a2, 1);
    }

    else
    {
      uint64_t v22 = sub_100030000();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v22, v8);
      id v23 = v15;
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v56 = v21;
        uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v53 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v54 = v26;
        *(_DWORD *)uint64_t v26 = 138412290;
        uint64_t v52 = v26 + 4;
        uint64_t v57 = (uint64_t)v23;
        id v27 = v23;
        uint64_t v55 = v19;
        id v28 = v27;
        uint64_t v21 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v52, v26 + 12);
        uint64_t v29 = v53;
        *(void *)uint64_t v53 = v23;

        os_log_type_t v30 = v54;
        id v19 = v55;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "CheckInPendingCloudUpdates CKRecord deleted: %@",  v54,  0xCu);
        uint64_t v31 = sub_100003288((uint64_t *)&unk_10007A940);
        swift_arrayDestroy(v29, 1LL, v31);
        swift_slowDealloc(v29, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {

        uint64_t v24 = (os_log_s *)v23;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      uint64_t v57 = 0LL;
      v19(&v57);
      swift_release(v21);
    }
  }

uint64_t sub_1000234A4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  int v30 = a8;
  uint64_t v34 = a3;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  id v19 = &v29[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = swift_allocObject(&unk_100072330, 24LL, 7LL);
  swift_weakInit(v20 + 16, a4);
  uint64_t v21 = swift_allocObject(&unk_100072420, 58LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v20;
  *(void *)(v21 + 24) = a1;
  *(_BYTE *)(v21 + 32) = a2 & 1;
  *(void *)(v21 + 4sub_10000DC70(0, 0) = a5;
  *(void *)(v21 + 48) = a6;
  *(_BYTE *)(v21 + 56) = a7;
  *(_BYTE *)(v21 + 57) = v30;
  aBlock[4] = sub_10002DA54;
  uint64_t v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100072438;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain(v20);
  sub_10002DA6C(a1, a2 & 1);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  static DispatchQoS.unspecified.getter(v23);
  os_log_type_t v35 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v26 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v14, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v16, v22);
  _Block_release(v22);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v16, v14);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v19, v32);
  uint64_t v27 = v37;
  swift_release(v20);
  return swift_release(v27);
}

void sub_10002370C( uint64_t a1, void (*a2)(void, void), char a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v220 = a6;
  uint64_t v228 = a4;
  v226 = a2;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v221 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v219 = (char *)&v214 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v225 = (char *)&v214 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v214 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v214 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v214 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v214 - v25;
  uint64_t v224 = a1;
  swift_beginAccess(a1 + 16, v240, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1 + 16);
  if (!Strong) {
    return;
  }
  uint64_t v223 = v11;
  uint64_t v218 = a1 + 16;
  uint64_t v227 = a5;
  uint64_t v222 = Strong;
  if ((a3 & 1) != 0)
  {
    uint64_t v51 = v228;
    if ((unint64_t)v228 >> 62)
    {
      if (v228 < 0) {
        uint64_t v158 = v228;
      }
      else {
        uint64_t v158 = v228 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v228);
      sub_10002DA6C((uint64_t)v226, 1);
      uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v158);
    }

    else
    {
      uint64_t v52 = *(void *)((v228 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v228);
      sub_10002DA6C((uint64_t)v226, 1);
    }

    uint64_t v53 = v225;
    if (v52)
    {
      if (v52 < 1)
      {
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }

      uint64_t v54 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
      unint64_t v55 = v51 & 0xC000000000000001LL;
      swift_beginAccess( v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  &v239,  0LL,  0LL);
      uint64_t v56 = 0LL;
      do
      {
        if (v55) {
          id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56, v51);
        }
        else {
          id v57 = *(id *)(v51 + 8 * v56 + 32);
        }
        uint64_t v58 = *v54;
        id v59 = v57;
        swift_bridgeObjectRetain(v58);
        sub_10002D6A4(v60, v59);
        int v62 = v61;
        id v64 = v63;
        uint64_t v66 = v65;
        swift_bridgeObjectRelease(v58);

        if (v62)
        {

          id v67 = v226;
          v237 = v226;
          v238[0] = 1;
          sub_10002DA6C((uint64_t)v226, 1);
          v64(&v237);
          swift_release(v66);
          sub_10002DA48((uint64_t)v67, 1);
        }

        swift_beginAccess(v54, &v237, 33LL, 0LL);
        uint64_t v68 = *v54;
        swift_bridgeObjectRetain(*v54);
        unint64_t v69 = sub_100027EE8((uint64_t)v59);
        char v71 = v70;
        swift_bridgeObjectRelease(v68);
        if ((v71 & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
          uint64_t v73 = *v54;
          uint64_t v235 = (void (*)(void, void))*v54;
          *uint64_t v54 = 0x8000000000000000LL;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100028BC0(&qword_10007B1D8);
            uint64_t v73 = (uint64_t)v235;
          }

          uint64_t v74 = *(void *)(*(void *)(v73 + 56) + 16 * v69 + 8);
          sub_10002851C(v69, v73);
          uint64_t v75 = *v54;
          *uint64_t v54 = v73;
          swift_bridgeObjectRelease(v75);
          swift_endAccess(&v237);
          swift_release(v74);
        }

        else
        {
          swift_endAccess(&v237);
        }

        ++v56;

        uint64_t v51 = v228;
        uint64_t v53 = v225;
      }

      while (v52 != v56);
    }

    swift_bridgeObjectRelease(v51);
    uint64_t v76 = sub_100030000();
    uint64_t v77 = v221;
    uint64_t v78 = *(void (**)(char *))(v221 + 16);
    uint64_t v217 = (char *)v76;
    uint64_t v79 = v223;
    uint64_t v228 = (uint64_t)v78;
    v78(v53);
    uint64_t v80 = v224;
    uint64_t v81 = swift_retain_n(v224, 2LL);
    id v82 = (os_log_s *)Logger.logObject.getter(v81);
    os_log_type_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int v216 = (void (*)(void, void))swift_slowAlloc(32LL, -1LL);
      v237 = v216;
      *(_DWORD *)uint64_t v84 = 136315138;
      uint64_t v85 = v218;
      swift_beginAccess(v218, v230, 0LL, 0LL);
      uint64_t v86 = swift_weakLoadStrong(v85);
      if (v86)
      {
        uint64_t v87 = v86;
        unint64_t v88 = (unint64_t *)(v86
                                 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
        swift_beginAccess( v86 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  v229,  0LL,  0LL);
        unint64_t v89 = *v88;
        swift_bridgeObjectRetain(*v88);
        swift_release(v87);
      }

      else
      {
        unint64_t v89 = sub_100024B60( (uint64_t)_swiftEmptyArrayStorage,  &qword_10007B1D8,  (uint64_t (*)(id))sub_100027EE8);
      }

      uint64_t v93 = sub_100010A58(0LL, &qword_10007B1B0, &OBJC_CLASS___CKRecord_ptr);
      uint64_t v94 = sub_100003288(&qword_10007B1B8);
      uint64_t v95 = sub_10002DA78(&qword_10007B1C0, &qword_10007B1B0, &OBJC_CLASS___CKRecord_ptr);
      uint64_t v96 = Dictionary.description.getter(v89, v93, v94, v95);
      unint64_t v98 = v97;
      swift_bridgeObjectRelease(v89);
      uint64_t v235 = (void (*)(void, void))sub_100003E68(v96, v98, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v84 + 4, v84 + 12);
      swift_release_n(v224, 2LL);
      swift_bridgeObjectRelease(v98);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Pending changes in queue: %s", v84, 0xCu);
      uint64_t v99 = v216;
      swift_arrayDestroy(v216, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1LL, -1LL);
      swift_slowDealloc(v84, -1LL, -1LL);

      uint64_t v90 = *(char **)(v221 + 8);
      uint64_t v91 = v225;
      uint64_t v92 = v223;
    }

    else
    {

      swift_release_n(v80, 2LL);
      uint64_t v90 = *(char **)(v77 + 8);
      uint64_t v91 = v53;
      uint64_t v92 = v79;
    }

    uint64_t v225 = v90;
    ((void (*)(char *, uint64_t))v90)(v91, v92);
    uint64_t v100 = v227;
    if ((unint64_t)v227 >> 62)
    {
      if (v227 < 0) {
        uint64_t v159 = v227;
      }
      else {
        uint64_t v159 = v227 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v227);
      uint64_t v101 = _CocoaArrayWrapper.endIndex.getter(v159);
      if (!v101) {
        goto LABEL_86;
      }
    }

    else
    {
      uint64_t v101 = *(void *)((v227 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v227);
      if (!v101) {
        goto LABEL_86;
      }
    }

    if (v101 < 1)
    {
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }

    uint64_t v102 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
    unint64_t v103 = v100 & 0xC000000000000001LL;
    swift_beginAccess( v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  &v237,  0LL,  0LL);
    for (uint64_t i = 0LL; i != v101; ++i)
    {
      if (v103) {
        id v105 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v100);
      }
      else {
        id v105 = *(id *)(v100 + 8 * i + 32);
      }
      uint64_t v106 = *v102;
      id v107 = v105;
      swift_bridgeObjectRetain(v106);
      sub_10002BEC4(v108);
      os_log_type_t v110 = v109;
      uint64_t v112 = v111;
      uint64_t v114 = v113;
      swift_bridgeObjectRelease(v106);

      if (v110)
      {

        uint64_t v115 = v226;
        uint64_t v235 = v226;
        sub_10002DA6C((uint64_t)v226, 1);
        v112(&v235);
        swift_release(v114);
        sub_10002DA48((uint64_t)v115, 1);
      }

      swift_beginAccess(v102, &v235, 33LL, 0LL);
      uint64_t v116 = *v102;
      swift_bridgeObjectRetain(*v102);
      unint64_t v117 = sub_100027F34((uint64_t)v107);
      char v119 = v118;
      swift_bridgeObjectRelease(v116);
      if ((v119 & 1) != 0)
      {
        char v120 = swift_isUniquelyReferenced_nonNull_native(*v102);
        uint64_t v121 = *v102;
        uint64_t v233 = *v102;
        uint64_t *v102 = 0x8000000000000000LL;
        if ((v120 & 1) == 0)
        {
          sub_100028BC0((uint64_t *)&unk_10007B1E0);
          uint64_t v121 = v233;
        }

        uint64_t v122 = *(void *)(*(void *)(v121 + 56) + 16 * v117 + 8);
        sub_10002851C(v117, v121);
        uint64_t v123 = *v102;
        uint64_t *v102 = v121;
        swift_bridgeObjectRelease(v123);
        swift_endAccess(&v235);
        swift_release(v122);
      }

      else
      {
        swift_endAccess(&v235);
      }

      uint64_t v100 = v227;
    }

LABEL_86:
    swift_bridgeObjectRelease(v100);
    uint64_t v160 = v219;
    uint64_t v161 = v223;
    ((void (*)(char *, char *, uint64_t))v228)(v219, v217, v223);
    uint64_t v162 = v224;
    uint64_t v163 = swift_retain_n(v224, 2LL);
    uint64_t v164 = (os_log_s *)Logger.logObject.getter(v163);
    os_log_type_t v165 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v164, v165))
    {
      unint64_t v166 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v167 = (void (*)(void, void))swift_slowAlloc(32LL, -1LL);
      uint64_t v235 = v167;
      *(_DWORD *)unint64_t v166 = 136315138;
      uint64_t v168 = v218;
      swift_beginAccess(v218, v232, 0LL, 0LL);
      uint64_t v169 = swift_weakLoadStrong(v168);
      if (v169)
      {
        uint64_t v170 = v169;
        uint64_t v171 = (unint64_t *)(v169
                                  + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
        swift_beginAccess( v169 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  v231,  0LL,  0LL);
        unint64_t v172 = *v171;
        swift_bridgeObjectRetain(v172);
        swift_release(v170);
      }

      else
      {
        unint64_t v172 = sub_100024B60( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t *)&unk_10007B1E0,  (uint64_t (*)(id))sub_100027F34);
      }

      uint64_t v175 = sub_100010A58(0LL, &qword_10007B198, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v176 = sub_100003288(&qword_10007B1A0);
      uint64_t v177 = sub_10002DA78(&qword_10007B1A8, &qword_10007B198, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v178 = Dictionary.description.getter(v172, v175, v176, v177);
      unint64_t v180 = v179;
      swift_bridgeObjectRelease(v172);
      uint64_t v233 = sub_100003E68(v178, v180, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, &v234, v166 + 4, v166 + 12);
      swift_release_n(v224, 2LL);
      swift_bridgeObjectRelease(v180);
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "Pending deletion in queue: %s", v166, 0xCu);
      swift_arrayDestroy(v167, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v167, -1LL, -1LL);
      swift_slowDealloc(v166, -1LL, -1LL);

      int v173 = v219;
      uint64_t v174 = v223;
    }

    else
    {

      swift_release_n(v162, 2LL);
      int v173 = v160;
      uint64_t v174 = v161;
    }

    ((void (*)(char *, uint64_t))v225)(v173, v174);
    uint64_t v181 = v222;
    uint64_t v182 = v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords;
    __n128 v183 = swift_beginAccess( v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  &v235,  0LL,  0LL);
    if (*(void *)(*(void *)v182 + 16LL)
      || (uint64_t v184 = v181 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,
          __n128 v183 = swift_beginAccess( v181 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  &v233,  0LL,  0LL),  *(void *)(*(void *)v184 + 16LL)))
    {
      sub_100021418(v220 & 1, v183);
    }

    sub_10002DA48((uint64_t)v226, 1);
    uint64_t v185 = v181;
    goto LABEL_113;
  }

  uint64_t v28 = sub_100030000();
  uint64_t v29 = v221;
  int v30 = *(char **)(v221 + 16);
  uint64_t v219 = (char *)v28;
  uint64_t v225 = v30;
  uint64_t v31 = ((uint64_t (*)(char *))v30)(v26);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "CKRecords modify operation finished successfully", v34, 2u);
    os_log_type_t v35 = v34;
    uint64_t v29 = v221;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  v226 = *(void (**)(void, void))(v29 + 8);
  v226(v26, v11);
  uint64_t v36 = v228;
  uint64_t v217 = v18;
  LODWORD(v2swift_weakDestroy(v0 + 16) = a7;
  uint64_t v215 = v21;
  if ((unint64_t)v228 >> 62)
  {
    if (v228 < 0) {
      uint64_t v124 = v228;
    }
    else {
      uint64_t v124 = v228 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v228);
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v124);
    if (!v37) {
      goto LABEL_59;
    }
  }

  else
  {
    uint64_t v37 = *(void *)((v228 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v228);
    if (!v37) {
      goto LABEL_59;
    }
  }

  if (v37 < 1)
  {
    __break(1u);
    goto LABEL_118;
  }

  uint64_t v38 = 0LL;
  uint64_t v39 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
  unint64_t v40 = v36 & 0xC000000000000001LL;
  do
  {
    if (v40) {
      id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
    }
    else {
      id v41 = *(id *)(v36 + 8 * v38 + 32);
    }
    id v42 = v41;
    swift_beginAccess(v39, &v239, 33LL, 0LL);
    uint64_t v43 = *v39;
    swift_bridgeObjectRetain(*v39);
    unint64_t v44 = sub_100027EE8((uint64_t)v42);
    char v46 = v45;
    swift_bridgeObjectRelease(v43);
    if ((v46 & 1) != 0)
    {
      int v47 = swift_isUniquelyReferenced_nonNull_native(*v39);
      uint64_t v48 = *v39;
      v237 = (void (*)(void, void))*v39;
      *uint64_t v39 = 0x8000000000000000LL;
      if (!v47)
      {
        sub_100028BC0(&qword_10007B1D8);
        uint64_t v48 = (uint64_t)v237;
      }

      uint64_t v49 = *(void *)(*(void *)(v48 + 56) + 16 * v44 + 8);
      sub_10002851C(v44, v48);
      uint64_t v50 = *v39;
      *uint64_t v39 = v48;
      swift_bridgeObjectRelease(v50);
      swift_endAccess(&v239);
      swift_release(v49);
    }

    else
    {
      swift_endAccess(&v239);
    }

    ++v38;

    uint64_t v36 = v228;
  }

  while (v37 != v38);
LABEL_59:
  swift_bridgeObjectRelease(v36);
  uint64_t v125 = v223;
  ((void (*)(char *, char *, uint64_t))v225)(v24, v219, v223);
  uint64_t v126 = v224;
  uint64_t v127 = swift_retain_n(v224, 2LL);
  os_log_t v128 = (os_log_s *)Logger.logObject.getter(v127);
  os_log_type_t v129 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v128, v129))
  {
    Swift::OpaquePointer_optional v130 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v131 = swift_slowAlloc(32LL, -1LL);
    uint64_t v239 = v131;
    *(_DWORD *)Swift::OpaquePointer_optional v130 = 136315138;
    uint64_t v132 = v218;
    swift_beginAccess(v218, v232, 0LL, 0LL);
    uint64_t v133 = swift_weakLoadStrong(v132);
    if (v133)
    {
      uint64_t v134 = v133;
      id v135 = (void *)(v133 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
      swift_beginAccess( v133 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  v231,  0LL,  0LL);
      unint64_t v136 = (void (*)(void, void))*v135;
      swift_bridgeObjectRetain(v136);
      swift_release(v134);
    }

    else
    {
      unint64_t v136 = 0LL;
    }

    v237 = v136;
    uint64_t v139 = sub_100003288(&qword_10007B1D0);
    uint64_t v140 = String.init<A>(describing:)(&v237, v139);
    unint64_t v142 = v141;
    v237 = (void (*)(void, void))sub_100003E68(v140, v141, &v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v130 + 4, v130 + 12);
    swift_release_n(v224, 2LL);
    swift_bridgeObjectRelease(v142);
    _os_log_impl((void *)&_mh_execute_header, v128, v129, "Pending changes in queue: %s", v130, 0xCu);
    swift_arrayDestroy(v131, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v131, -1LL, -1LL);
    swift_slowDealloc(v130, -1LL, -1LL);

    uint64_t v137 = v24;
    uint64_t v138 = v223;
  }

  else
  {

    swift_release_n(v126, 2LL);
    uint64_t v137 = v24;
    uint64_t v138 = v125;
  }

  v226(v137, v138);
  uint64_t v143 = v227;
  if ((unint64_t)v227 >> 62)
  {
    if (v227 < 0) {
      uint64_t v186 = v227;
    }
    else {
      uint64_t v186 = v227 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v227);
    uint64_t v144 = _CocoaArrayWrapper.endIndex.getter(v186);
    if (!v144) {
      goto LABEL_100;
    }
  }

  else
  {
    uint64_t v144 = *(void *)((v227 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v227);
    if (!v144) {
      goto LABEL_100;
    }
  }

  if (v144 < 1)
  {
LABEL_120:
    __break(1u);
    return;
  }

  uint64_t v145 = 0LL;
  uint64_t v146 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  unint64_t v147 = v143 & 0xC000000000000001LL;
  do
  {
    if (v147) {
      id v148 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v145, v143);
    }
    else {
      id v148 = *(id *)(v143 + 8 * v145 + 32);
    }
    uint64_t v149 = v148;
    swift_beginAccess(v146, &v239, 33LL, 0LL);
    uint64_t v150 = *v146;
    swift_bridgeObjectRetain(*v146);
    unint64_t v151 = sub_100027F34((uint64_t)v149);
    char v153 = v152;
    swift_bridgeObjectRelease(v150);
    if ((v153 & 1) != 0)
    {
      int v154 = swift_isUniquelyReferenced_nonNull_native(*v146);
      uint64_t v155 = *v146;
      v237 = (void (*)(void, void))*v146;
      *uint64_t v146 = 0x8000000000000000LL;
      if (!v154)
      {
        sub_100028BC0((uint64_t *)&unk_10007B1E0);
        uint64_t v155 = (uint64_t)v237;
      }

      uint64_t v156 = *(void *)(*(void *)(v155 + 56) + 16 * v151 + 8);
      sub_10002851C(v151, v155);
      uint64_t v157 = *v146;
      *uint64_t v146 = v155;
      swift_bridgeObjectRelease(v157);
      swift_endAccess(&v239);
      swift_release(v156);
    }

    else
    {
      swift_endAccess(&v239);
    }

    ++v145;

    uint64_t v143 = v227;
  }

  while (v144 != v145);
LABEL_100:
  swift_bridgeObjectRelease(v143);
  id v187 = v215;
  uint64_t v188 = v223;
  ((void (*)(char *, char *, uint64_t))v225)(v215, v219, v223);
  uint64_t v189 = v224;
  uint64_t v190 = swift_retain_n(v224, 2LL);
  unint64_t v191 = (os_log_s *)Logger.logObject.getter(v190);
  os_log_type_t v192 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v191, v192))
  {
    os_log_type_t v193 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v194 = swift_slowAlloc(32LL, -1LL);
    uint64_t v239 = v194;
    *(_DWORD *)os_log_type_t v193 = 136315138;
    uint64_t v195 = v218;
    swift_beginAccess(v218, &v235, 0LL, 0LL);
    uint64_t v196 = swift_weakLoadStrong(v195);
    unint64_t v197 = v217;
    char v198 = (char)v216;
    if (v196)
    {
      uint64_t v199 = v196;
      v200 = (void *)(v196 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
      swift_beginAccess( v196 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  &v233,  0LL,  0LL);
      uint64_t v201 = (void (*)(void, void))*v200;
      swift_bridgeObjectRetain(v201);
      swift_release(v199);
    }

    else
    {
      uint64_t v201 = 0LL;
    }

    v237 = v201;
    uint64_t v203 = sub_100003288(&qword_10007B1C8);
    uint64_t v204 = String.init<A>(describing:)(&v237, v203);
    unint64_t v206 = v205;
    v237 = (void (*)(void, void))sub_100003E68(v204, v205, &v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v193 + 4, v193 + 12);
    swift_release_n(v224, 2LL);
    swift_bridgeObjectRelease(v206);
    _os_log_impl((void *)&_mh_execute_header, v191, v192, "Pending deletion in queue: %s", v193, 0xCu);
    swift_arrayDestroy(v194, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v194, -1LL, -1LL);
    swift_slowDealloc(v193, -1LL, -1LL);

    uint64_t v188 = v223;
    v226(v187, v223);
    uint64_t v202 = v222;
  }

  else
  {

    swift_release_n(v189, 2LL);
    v226(v187, v188);
    uint64_t v202 = v222;
    unint64_t v197 = v217;
    char v198 = (char)v216;
  }

  uint64_t v207 = v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords;
  __n128 v208 = swift_beginAccess( v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords,  &v239,  0LL,  0LL);
  if (*(void *)(*(void *)v207 + 16LL)
    || (uint64_t v209 = v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,
        __n128 v208 = swift_beginAccess( v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,  &v237,  0LL,  0LL),  *(void *)(*(void *)v209 + 16LL)))
  {
    sub_100021418(v220 & 1, v208);
  }

  if ((v198 & 1) == 0)
  {
    uint64_t v185 = v202;
LABEL_113:
    swift_release(v185);
    return;
  }

  sub_10001D3E8(45.0);
  uint64_t v210 = ((uint64_t (*)(char *, char *, uint64_t))v225)(v197, v219, v188);
  uint64_t v211 = (os_log_s *)Logger.logObject.getter(v210);
  os_log_type_t v212 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v211, v212))
  {
    id v213 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v213 = 0;
    _os_log_impl((void *)&_mh_execute_header, v211, v212, "Cloud update done, continue the fetch...", v213, 2u);
    swift_slowDealloc(v213, -1LL, -1LL);
    swift_release(v202);
  }

  else
  {

    swift_release(v202);
  }

  v226(v197, v188);
}

unint64_t sub_100024B60(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_13;
  }

  sub_100003288(a2);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(v3 + 16);
  if (!v8)
  {
LABEL_13:
    swift_bridgeObjectRelease(v3);
    return (unint64_t)v7;
  }

  unint64_t result = swift_retain(v6);
  uint64_t v10 = 0LL;
  uint64_t v20 = v3;
  uint64_t v11 = (__int128 *)(v3 + 40);
  while (1)
  {
    uint64_t v12 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    uint64_t v13 = (void *)*((void *)v11 - 1);
    uint64_t v14 = *((void *)v11 + 1);
    if (!v13)
    {
      swift_retain(*((void *)v11 + 1));
LABEL_12:
      swift_release(v7);
      uint64_t v3 = v20;
      goto LABEL_13;
    }

    __int128 v21 = *v11;
    id v15 = v13;
    swift_retain(v14);
    unint64_t result = a3(v15);
    if ((v16 & 1) != 0) {
      goto LABEL_15;
    }
    *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v7[6] + 8 * result) = v15;
    *(_OWORD *)(v7[7] + 16 * result) = v21;
    uint64_t v17 = v7[2];
    BOOL v18 = __OFADD__(v17, 1LL);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_16;
    }
    v7[2] = v19;
    uint64_t v11 = (__int128 *)((char *)v11 + 24);
    ++v10;
    if (v12 == v8) {
      goto LABEL_12;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100024CB0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);

  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  sub_10000B4A8( v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription,  &qword_10007A9B8);
  sub_10000B4A8( v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription,  (uint64_t *)&unk_10007AD00);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords));

  swift_release(*(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer));
  uint64_t v3 = v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_tokenDirectory;
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return v0;
}

uint64_t sub_100024E08()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void sub_100024E2C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void (***)(char *, void))(v2 - 8);
  uint64_t v90 = v2;
  uint64_t v91 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v89 = (char *)&v88 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v88 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v88 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v88 - v18;
  id v20 = [a1 userInfo];
  if (!v20) {
    __break(1u);
  }
  __int128 v21 = v20;
  uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v20,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  id v24 =  [(id)objc_opt_self(CKNotification) notificationFromRemoteNotificationDictionary:isa];

  if (v24)
  {
    id v25 = [v24 notificationType];
    switch((unint64_t)v25)
    {
      case 1uLL:
        uint64_t v26 = sub_100030000();
        uint64_t v27 = v90;
        uint64_t v28 = v91;
        uint64_t v29 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2])(v19, v26, v90);
        int v30 = (os_log_s *)Logger.logObject.getter(v29);
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Query notifications are not handled", v32, 2u);
          swift_slowDealloc(v32, -1LL, -1LL);
          os_log_type_t v33 = (os_log_s *)v24;
        }

        else
        {
          os_log_type_t v33 = v30;
          int v30 = (os_log_s *)v24;
        }

        v28[1](v19, v27);
        break;
      case 2uLL:
        uint64_t v60 = objc_opt_self(&OBJC_CLASS___CKRecordZoneNotification);
        uint64_t v61 = swift_dynamicCastObjCClass(v24, v60);
        if (v61)
        {
          int v62 = (void *)v61;
          uint64_t v91 = (void (**)(char *, void))v24;
          sub_100025614(v62);
          goto LABEL_18;
        }

        uint64_t v73 = sub_100030000();
        uint64_t v74 = v91;
        uint64_t v75 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2])(v17, v73, v90);
        uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v78 = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unable to cast to CKRecordZoneNotification", v78, 2u);
          swift_slowDealloc(v78, -1LL, -1LL);
          uint64_t v79 = (os_log_s *)v24;
        }

        else
        {
          uint64_t v79 = v76;
          uint64_t v76 = (os_log_s *)v24;
        }

        v74[1](v17, v90);
        break;
      case 3uLL:
        uint64_t v63 = sub_100030000();
        uint64_t v64 = v90;
        uint64_t v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2])(v14, v63, v90);
        uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v68 = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Read notifications are not handled", v68, 2u);
          swift_slowDealloc(v68, -1LL, -1LL);
          unint64_t v69 = (os_log_s *)v24;
        }

        else
        {
          unint64_t v69 = v66;
          uint64_t v66 = (os_log_s *)v24;
        }

        v91[1](v14, v64);
        break;
      case 4uLL:
        uint64_t v70 = objc_opt_self(&OBJC_CLASS___CKDatabaseNotification);
        uint64_t v71 = swift_dynamicCastObjCClass(v24, v70);
        if (!v71)
        {
          uint64_t v80 = sub_100030000();
          uint64_t v81 = v90;
          id v82 = v91;
          uint64_t v83 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2])(v11, v80, v90);
          uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
          os_log_type_t v85 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v84, v85))
          {
            uint64_t v86 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v86 = 0;
            _os_log_impl((void *)&_mh_execute_header, v84, v85, "Unable to cast to CKRecordZoneNotification", v86, 2u);
            swift_slowDealloc(v86, -1LL, -1LL);
            uint64_t v87 = (os_log_s *)v24;
          }

          else
          {
            uint64_t v87 = v84;
            uint64_t v84 = (os_log_s *)v24;
          }

          uint64_t v43 = (void (*)(char *, uint64_t))v82[1];
          unint64_t v44 = v11;
          uint64_t v45 = v81;
          goto LABEL_32;
        }

        unint64_t v72 = (void *)v71;
        uint64_t v91 = (void (**)(char *, void))v24;
        sub_100025CFC(v72);
LABEL_18:

        break;
      default:
        uint64_t v46 = (uint64_t)v25;
        uint64_t v47 = sub_100030000();
        uint64_t v35 = v90;
        uint64_t v48 = v91;
        uint64_t v49 = v89;
        uint64_t v50 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2])(v89, v47, v90);
        uint64_t v51 = (void *)Logger.logObject.getter(v50);
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled((os_log_t)v51, v52))
        {

          uint64_t v43 = (void (*)(char *, uint64_t))v48[1];
          unint64_t v44 = v49;
          goto LABEL_9;
        }

        uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v54 = swift_slowAlloc(32LL, -1LL);
        uint64_t v92 = v46;
        uint64_t v93 = v54;
        *(_DWORD *)uint64_t v53 = 136315138;
        type metadata accessor for NotificationType(0LL);
        uint64_t v56 = String.init<A>(describing:)(&v92, v55);
        id v57 = v48;
        unint64_t v59 = v58;
        uint64_t v92 = sub_100003E68(v56, v58, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease(v59);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v51, v52, "Unknown notificationType: %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_slowDealloc(v53, -1LL, -1LL);

        ((void (*)(char *, uint64_t))v57[1])(v89, v90);
        break;
    }
  }

  else
  {
    uint64_t v34 = sub_100030000();
    uint64_t v35 = v90;
    uint64_t v36 = v91;
    uint64_t v37 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2])(v6, v34, v90);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v41 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v40 = 138412290;
      uint64_t v93 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v40 + 4, v40 + 12);
      void *v41 = 0LL;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown notification: %@", v40, 0xCu);
      uint64_t v42 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v41, 1LL, v42);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    uint64_t v43 = (void (*)(char *, uint64_t))v36[1];
    unint64_t v44 = v6;
LABEL_9:
    uint64_t v45 = v35;
LABEL_32:
    v43(v44, v45);
  }

void sub_100025614(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v65 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v65 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v74 = (char *)&v65 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v65 - v15;
  id v17 = [a1 recordZoneID];
  if (v17)
  {
    id v18 = v17;
    id v75 = [a1 databaseScope];
    uint64_t v19 = sub_100030000();
    id v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v71 = v19;
    unint64_t v72 = v20;
    ((void (*)(char *))v20)(v16);
    id v21 = a1;
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v68 = v12;
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      id v70 = v18;
      id v25 = (uint8_t *)v24;
      uint64_t v66 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_type_t v67 = v25;
      *(_DWORD *)id v25 = 138412290;
      uint64_t v77 = (uint64_t)v21;
      id v26 = v21;
      uint64_t v69 = v3;
      id v27 = v26;
      uint64_t v12 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v25 + 4, v25 + 12);
      uint64_t v28 = v66;
      *uint64_t v66 = v21;

      uint64_t v3 = v69;
      uint64_t v29 = v67;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "RecordZoneNotification: %@", v67, 0xCu);
      uint64_t v30 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v28, 1LL, v30);
      swift_slowDealloc(v28, -1LL, -1LL);
      id v18 = v70;
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      uint64_t v22 = (os_log_s *)v21;
    }

    unint64_t v40 = *(void (**)(char *, uint64_t))(v3 + 8);
    v40(v16, v2);
    id v41 = v75;
    if (v75 == (id)1)
    {
      uint64_t v43 = v72(v12, v71, v2);
      unint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Nothing public", v46, 2u);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      uint64_t v47 = v12;
    }

    else if (v75 == (id)3)
    {
      uint64_t v48 = v74;
      uint64_t v49 = v72(v74, v71, v2);
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, v51))
      {
        os_log_type_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Nothing shared", v52, 2u);
        swift_slowDealloc(v52, -1LL, -1LL);
      }

      uint64_t v47 = v48;
    }

    else
    {
      if (v75 == (id)2)
      {
        uint64_t v42 = type metadata accessor for Transaction();
        __chkstk_darwin(v42);
        *(&v65 - 2) = v73;
        *(&v65 - 1) = (uint64_t)v18;
        static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.recordZoneNotification", 46LL, 2, sub_10002C4B0);

        return;
      }

      uint64_t v53 = v72(v9, v71, v2);
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc(12LL, -1LL);
        id v70 = v18;
        id v57 = (uint8_t *)v56;
        uint64_t v58 = swift_slowAlloc(32LL, -1LL);
        uint64_t v77 = v58;
        uint64_t v74 = v9;
        *(_DWORD *)id v57 = 136315138;
        id v59 = (id)CKDatabaseScopeString(v41);
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        id v75 = (id)v2;
        uint64_t v61 = v60;
        unint64_t v63 = v62;

        uint64_t v76 = sub_100003E68(v61, v63, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v57 + 4, v57 + 12);
        swift_bridgeObjectRelease(v63);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unknown databaseScope: %s", v57, 0xCu);
        swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);

        uint64_t v47 = v74;
        uint64_t v64 = (uint64_t)v75;
LABEL_23:
        v40(v47, v64);
        return;
      }

      uint64_t v47 = v9;
    }

    uint64_t v64 = v2;
    goto LABEL_23;
  }

  uint64_t v31 = sub_100030000();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v31, v2);
  id v32 = a1;
  os_log_type_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    id v75 = (id)v2;
    uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v74 = (char *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v35 = 138412290;
    uint64_t v77 = (uint64_t)v32;
    uint64_t v36 = v3;
    id v37 = v32;
    uint64_t v2 = (uint64_t)v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v35 + 4, v35 + 12);
    uint64_t v38 = v74;
    *(void *)uint64_t v74 = v32;

    uint64_t v3 = v36;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "No recordZoneID in %@", v35, 0xCu);
    uint64_t v39 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v38, 1LL, v39);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {

    os_log_type_t v33 = (os_log_s *)v32;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_100025CFC(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [a1 databaseScope];
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v1 + 256LL))(v41);
  uint64_t v8 = v42;
  v45[0] = v42;
  __int128 v44 = v41[0];
  swift_bridgeObjectRetain(v42);
  sub_1000295D0((uint64_t)&v44);
  __int128 v43 = v41[1];
  sub_1000295D0((uint64_t)&v43);
  sub_1000295F8(v45);
  uint64_t v9 = *(void *)(v8 + 16);
  id v37 = v6;
  uint64_t v38 = v4;
  if (v9)
  {
    id v35 = v7;
    uint64_t v36 = v1;
    os_log_type_t v33 = a1;
    uint64_t v34 = v3;
    uint64_t v10 = (void **)(v8 + 40);
    swift_bridgeObjectRetain(v8);
    BOOL v11 = 0;
    uint64_t v12 = 1LL;
    do
    {
      if (v11)
      {
        if (v9 == v12)
        {
          sub_1000295F8(v45);
          sub_1000295F8(v45);
LABEL_13:
          uint64_t v31 = type metadata accessor for Transaction();
          __chkstk_darwin(v31);
          id v32 = v35;
          *(&v33 - 2) = v36;
          *(&v33 - 1) = v32;
          static Transaction.named<A>(_:with:)( "com.apple.bluetoothuser.databaseNotification",  44LL,  2,  (void (*)(uint64_t))sub_10002C5C0);
          return;
        }

        BOOL v11 = 1;
      }

      else
      {
        uint64_t v13 = (uint64_t)*(v10 - 1);
        uint64_t v14 = *v10;
        unint64_t v39 = 0LL;
        unint64_t v40 = 0xE000000000000000LL;
        swift_bridgeObjectRetain(v14);
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease(v40);
        unint64_t v39 = 0xD000000000000024LL;
        unint64_t v40 = 0x8000000100066E70LL;
        v15._uint64_t countAndFlagsBits = v13;
        v15._object = v14;
        String.append(_:)(v15);
        uint64_t v16 = v39;
        unint64_t v17 = v40;
        uint64_t v18 = sub_100003288(&qword_10007AD40);
        sub_10000D5A0(v16, v17, 2, v18, (char *)&v39);
        swift_bridgeObjectRelease(v17);
        unint64_t v19 = v39;
        swift_bridgeObjectRelease(v14);
        BOOL v11 = v19 == 0;
        if (v9 == v12)
        {
          sub_1000295F8(v45);
          sub_1000295F8(v45);
          a1 = v33;
          uint64_t v3 = v34;
          uint64_t v6 = v37;
          uint64_t v4 = v38;
          if (v19) {
            goto LABEL_10;
          }
          goto LABEL_13;
        }
      }

      v10 += 2;
    }

    while (!__OFADD__(v12++, 1LL));
    __break(1u);
  }

  else
  {
    sub_1000295F8(v45);
LABEL_10:
    uint64_t v21 = sub_100030000();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v21, v3);
    id v22 = a1;
    os_log_type_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v26 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v25 = 138412290;
      unint64_t v39 = (unint64_t)v22;
      id v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 4, v25 + 12);
      *id v26 = v22;

      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Only handle cloud pairing recordZoneNotification, Dropping DatabaseNotification: %@",  v25,  0xCu);
      uint64_t v28 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v26, 1LL, v28);
      uint64_t v29 = v26;
      uint64_t v6 = v37;
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v30 = v25;
      uint64_t v4 = v38;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {

      os_log_type_t v23 = (os_log_s *)v22;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

void sub_1000260AC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v58 = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v52 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v52 - v13;
  uint64_t v15 = sub_100030000();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v59 = v15;
  uint64_t v60 = v16;
  ((void (*)(char *))v16)(v14);
  uint64_t v17 = swift_retain_n(a3, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(12LL, -1LL);
    id v57 = v12;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc(8LL, -1LL);
    uint64_t v56 = v9;
    uint64_t v54 = (void *)v22;
    int v55 = a2;
    *(_DWORD *)uint64_t v21 = 138412290;
    uint64_t v53 = v21 + 4;
    id v23 = sub_100011440();
    uint64_t v24 = v6;
    uint64_t v25 = v5;
    uint64_t v26 = a3;
    id v27 = [v23 privateCloudDatabase];

    id v62 = v27;
    LOBYTE(a2) = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v53, v21 + 12);
    uint64_t v28 = v54;
    *uint64_t v54 = v27;
    a3 = v26;
    uint64_t v5 = v25;
    uint64_t v6 = v24;
    swift_release_n(a3, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "database: %@ updateCache completed.", v21, 0xCu);
    uint64_t v29 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v28, 1LL, v29);
    uint64_t v9 = v56;
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v30 = v21;
    uint64_t v12 = v57;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a3, 2LL);
  }

  uint64_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31(v14, v5);
  if ((a2 & 1) != 0)
  {
    v60(v12, v59, v5);
    uint64_t v36 = v58;
    sub_10002DA6C(v58, 1);
    swift_errorRetain(v36);
    uint64_t v37 = swift_errorRetain(v36);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    v52[1] = a3;
    if (v40)
    {
      id v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = swift_slowAlloc(8LL, -1LL);
      uint64_t v60 = (void (*)(char *, uint64_t, uint64_t))v5;
      __int128 v43 = (void *)v42;
      *(_DWORD *)id v41 = 138412290;
      swift_errorRetain(v36);
      uint64_t v44 = _swift_stdlib_bridgeErrorToNSError(v36);
      id v62 = (id)v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v41 + 4, v41 + 12);
      void *v43 = v44;
      sub_10002DA48(v36, 1);
      sub_10002DA48(v36, 1);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "APS fetchDatabaseChanges error: %@", v41, 0xCu);
      uint64_t v45 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v43, 1LL, v45);
      uint64_t v46 = v43;
      uint64_t v5 = (uint64_t)v60;
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      sub_10002DA48(v36, 1);
      sub_10002DA48(v36, 1);
    }

    v31(v12, v5);
    id v62 = (id)v36;
    swift_errorRetain(v36);
    uint64_t v47 = sub_100003288(&qword_10007B1F8);
    type metadata accessor for CKError(0LL);
    uint64_t v49 = v48;
    if ((swift_dynamicCast(&v61, &v62, v47, v48, 6LL) & 1) != 0)
    {
      uint64_t v50 = v61;
      uint64_t v51 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
      _BridgedStoredNSError.code.getter(&v62, v49, v51);
      if (v62 == (id)4 || (uint64_t v61 = v50, _BridgedStoredNSError.code.getter(&v62, v49, v51), v62 == (id)3)) {
        sub_10001D3E8(150.0);
      }
      sub_10002DA48(v36, 1);
    }

    else
    {
      sub_10002DA48(v36, 1);
    }
  }

  else
  {
    uint64_t v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v60)(v9, v59, v5);
    os_log_type_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "APS fetchDatabaseChanges completed.", v35, 2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    v31(v9, v5);
  }

void sub_1000265E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v53 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v53 - v14;
  Transaction.capture()();
  uint64_t v16 = sub_100030000();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v60 = v16;
  uint64_t v61 = v17;
  ((void (*)(char *))v17)(v15);
  uint64_t v18 = swift_retain_n(a4, 2LL);
  os_log_type_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = v13;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc(8LL, -1LL);
    id v57 = v10;
    int v55 = (void *)v23;
    int v56 = a2;
    *(_DWORD *)uint64_t v22 = 138412290;
    uint64_t v54 = v22 + 4;
    id v24 = sub_100011440();
    uint64_t v25 = v7;
    uint64_t v26 = v6;
    uint64_t v27 = a4;
    id v28 = [v24 privateCloudDatabase];

    id v63 = v28;
    LOBYTE(a2) = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v54, v22 + 12);
    uint64_t v29 = v55;
    *int v55 = v28;
    a4 = v27;
    uint64_t v6 = v26;
    uint64_t v7 = v25;
    swift_release_n(a4, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "database: %@ zone updateCache completed.", v22, 0xCu);
    uint64_t v30 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v29, 1LL, v30);
    uint64_t v10 = v57;
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v31 = v22;
    uint64_t v13 = v58;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a4, 2LL);
  }

  uint64_t v32 = *(void (**)(char *, uint64_t))(v7 + 8);
  v32(v15, v6);
  if ((a2 & 1) != 0)
  {
    v61(v13, v60, v6);
    uint64_t v37 = v59;
    sub_10002DA6C(v59, 1);
    swift_errorRetain(v37);
    uint64_t v38 = swift_errorRetain(v37);
    os_log_type_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    v53[1] = a4;
    if (v41)
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(8LL, -1LL);
      uint64_t v61 = (void (*)(char *, uint64_t, uint64_t))v6;
      uint64_t v44 = (void *)v43;
      *(_DWORD *)uint64_t v42 = 138412290;
      swift_errorRetain(v37);
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(v37);
      id v63 = (id)v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v42 + 4, v42 + 12);
      void *v44 = v45;
      sub_10002DA48(v37, 1);
      sub_10002DA48(v37, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "APS fetchZoneChanges error: %@", v42, 0xCu);
      uint64_t v46 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v44, 1LL, v46);
      uint64_t v47 = v44;
      uint64_t v6 = (uint64_t)v61;
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      sub_10002DA48(v37, 1);
      sub_10002DA48(v37, 1);
    }

    v32(v13, v6);
    id v63 = (id)v37;
    swift_errorRetain(v37);
    uint64_t v48 = sub_100003288(&qword_10007B1F8);
    type metadata accessor for CKError(0LL);
    uint64_t v50 = v49;
    if ((swift_dynamicCast(&v62, &v63, v48, v49, 6LL) & 1) != 0)
    {
      uint64_t v51 = v62;
      uint64_t v52 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
      _BridgedStoredNSError.code.getter(&v63, v50, v52);
      if (v63 == (id)4 || (id v62 = v51, _BridgedStoredNSError.code.getter(&v63, v50, v52), v63 == (id)3)) {
        sub_10001D3E8(150.0);
      }
      sub_10002DA48(v37, 1);
    }

    else
    {
      sub_10002DA48(v37, 1);
    }
  }

  else
  {
    uint64_t v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v10, v60, v6);
    os_log_type_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "APS fetchZoneChanges completed.", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    v32(v10, v6);
  }

void sub_100026B2C(void *a1)
{
}

uint64_t sub_100026B4C(uint64_t a1)
{
  v3[2] = a1;
  uint64_t v1 = sub_100003288(&qword_10007AD48);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10002C628, v3, v1);
}

uint64_t sub_100026BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100003288(&qword_10007AD48);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100008C88(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject(&unk_100072330, 24LL, 7LL);
  swift_weakInit(v10 + 16, a2);
  uint64_t v11 = sub_100003288(&qword_10007B268);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_10002E450, v10, v11, a3);
  sub_100010A90(a3, (uint64_t)v9, &qword_10007AD48);
  uint64_t v12 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)a2 + 296LL))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_10002760C(0, *(void *)(v15 + 16) + 1LL, 1, v15);
    unint64_t *v14 = v15;
  }

  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_10002760C(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }

  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v18 + 1;
  sub_100003420( (uint64_t)v9,  v15 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v18,
    &qword_10007AD48);
  return v12(v21, 0LL);
}

uint64_t sub_100026D50(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003288(&qword_10007AD48);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v21 = *(void *)(v1 + 72);
  sub_100010A90(a1, (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), &qword_10007AD48);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_100072020, v13 + v11, v12 | 7);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v1;
  sub_100003420((uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v14 + v13, &qword_10007AD48);
  aBlock[4] = sub_10002C6F8;
  uint64_t v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100072038;
  unint64_t v15 = _Block_copy(aBlock);
  swift_retain(v1);
  static DispatchQoS.unspecified.getter(v16);
  id v24 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v19 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
  return swift_release(v26);
}

uint64_t sub_100026FB0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280LL))();
}

uint64_t sub_100026FD8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288LL))();
}

void (*sub_100027000(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 296LL))();
  return sub_1000079E0;
}

uint64_t sub_100027050(uint64_t a1)
{
  uint64_t v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  uint64_t v3 = sub_100003288(&qword_10007AD48);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10002F410, v5, v3);
}

uint64_t sub_1000270B0(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( &qword_10007B2F8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614B4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000270F0(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( &qword_10007B2F8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614B4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100027130(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100027170()
{
  return *v0;
}

uint64_t sub_100027178@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_100027180@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100027190(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10002719C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_1000271AC(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000271EC(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002722C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100027290()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000272C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100027314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100027370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_1000273C8(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_1000273DC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100003288(&qword_10007B288);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_10002AE04(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100027500(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100003288(&qword_10007B190);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10002D8EC(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10002760C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007B258);
  uint64_t v11 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288(&qword_10007AD48);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_10002E4C0(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

void *sub_10002781C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100003288(&qword_10007B1F0);
  uint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v1;
  void v4[3] = (2 * (v6 >> 3)) | 1;
  uint64_t v7 = sub_100028F88(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10002DAC4(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_100027904(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100027920(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100027920(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007B258);
  uint64_t v11 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288(&qword_10007AD48);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  id v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

uint64_t sub_100027B08(uint64_t a1, uint64_t (*a2)(uint64_t, __n128), uint64_t *a3)
{
  unint64_t v6 = v3;
  uint64_t v8 = *v6;
  __n128 v9 = swift_bridgeObjectRetain(*v6);
  unint64_t v10 = a2(a1, v9);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  uint64_t v13 = *v6;
  uint64_t v17 = *v6;
  *unint64_t v6 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100028BC0(a3);
    uint64_t v13 = v17;
  }

  uint64_t v14 = *(void *)(*(void *)(v13 + 56) + 16 * v10);
  sub_10002851C(v10, v13);
  uint64_t v15 = *v6;
  *unint64_t v6 = v13;
  swift_bridgeObjectRelease(v15);
  return v14;
}

Swift::Int sub_100027BE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100003288(&qword_10007B298);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
      do
      {
        uint64_t v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v27 = v9;
        uint64_t v21 = sub_100010A58(0LL, &qword_10007B278, &OBJC_CLASS___CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v4 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_100027F80(v22 + 1, 1LL);
          uint64_t v4 = v30;
        }

        uint64_t v12 = v28;
        uint64_t v11 = v29;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v17 == v24;
            if (v17 == v24) {
              unint64_t v17 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v14 + 8 * v17);
          }

          while (v26 == -1);
          unint64_t v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  return v4;
}

unint64_t sub_100027E38(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10002882C(a1, a2, v5);
}

unint64_t sub_100027E9C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10002890C(a1, v4, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
}

unint64_t sub_100027EE8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10002890C(a1, v4, &qword_10007B1B0, &OBJC_CLASS___CKRecord_ptr);
}

unint64_t sub_100027F34(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10002890C(a1, v4, &qword_10007B198, &OBJC_CLASS___CKRecordID_ptr);
}

Swift::Int sub_100027F80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100003288(&qword_10007B298);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

void sub_100028250(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  Swift::Int v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100003288(a3);
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    id v34 = v4;
    uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
    unint64_t v11 = (void *)(v6 + 64);
    if (v10 < 64) {
      uint64_t v12 = ~(-1LL << v10);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v14 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v15 = v8 + 64;
    swift_retain(v6);
    int64_t v16 = 0LL;
    while (1)
    {
      if (v13)
      {
        unint64_t v22 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v23 = v22 | (v16 << 6);
      }

      else
      {
        int64_t v24 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }

        if (v24 >= v14) {
          goto LABEL_36;
        }
        unint64_t v25 = v11[v24];
        ++v16;
        if (!v25)
        {
          int64_t v16 = v24 + 1;
          if (v24 + 1 >= v14) {
            goto LABEL_36;
          }
          unint64_t v25 = v11[v16];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v14)
            {
LABEL_36:
              swift_release(v6);
              if ((a2 & 1) == 0)
              {
                swift_release(v6);
                Swift::Int v4 = v34;
                goto LABEL_43;
              }

              uint64_t v33 = 1LL << *(_BYTE *)(v6 + 32);
              if (v33 >= 64) {
                bzero((void *)(v6 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v11 = -1LL << v33;
              }
              Swift::Int v4 = v34;
              *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v16 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_45;
                }
                if (v16 >= v14) {
                  goto LABEL_36;
                }
                unint64_t v25 = v11[v16];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v16 = v26;
          }
        }

void sub_10002851C(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            Swift::Int v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *Swift::Int v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

void sub_1000286CC(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100027E9C((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100028A1C();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }

LABEL_11:
    v15[(v9 >> 6) + 8] |= 1LL << v9;
    uint64_t v19 = 8 * v9;
    *(void *)(v15[6] + v19) = a2;
    *(void *)(v15[7] + v19) = a1;
    uint64_t v20 = v15[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      id v23 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_100027F80(v12, a3 & 1);
  unint64_t v17 = sub_100027E9C((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    unint64_t v9 = v17;
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v24[(v18 >> 6) + 8] |= 1LL << v18;
    *(void *)(v24[6] + 8 * v18) = a3;
    BOOL v29 = (uint64_t *)(v24[7] + 16 * v18);
    *BOOL v29 = a1;
    v29[1] = a2;
    uint64_t v30 = v24[2];
    uint64_t v31 = __OFADD__(v30, 1LL);
    id v32 = v30 + 1;
    if (!v31)
    {
      v24[2] = v32;
      uint64_t v33 = a3;
      return 0LL;
    }

    goto LABEL_14;
  }

  sub_100028250(v21, a4 & 1, a6);
  uint64_t v27 = a5(a3);
  if ((v22 & 1) == (v28 & 1))
  {
    char v18 = v27;
    uint64_t v24 = (void *)*v11;
    if ((v22 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10003C5B4(v15, a4 & 1);
  uint64_t v20 = sub_100027E38(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    uint64_t v12 = v20;
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    BOOL v21 = (uint64_t *)(v18[6] + 16 * v12);
    *BOOL v21 = a2;
    v21[1] = a3;
    uint64_t v22 = v18[7] + 40 * v12;
    id v23 = *(_OWORD *)a1;
    uint64_t v24 = *(_OWORD *)(a1 + 16);
    *(void *)(v22 + 32) = *(void *)(a1 + 32);
    *(_OWORD *)uint64_t v22 = v23;
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = v24;
    uint64_t v25 = v18[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (!v26)
    {
      v18[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10004E888(v15, a4 & 1);
  uint64_t v19 = sub_100027E38(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    uint64_t v12 = v19;
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    BOOL v21 = (uint64_t *)(v18[6] + 16 * v12);
    *BOOL v21 = a2;
    v21[1] = a3;
    *(_DWORD *)(v18[7] + 4 * v12) = a1;
    uint64_t v22 = v18[2];
    id v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_100054948(v15, a4 & 1);
  uint64_t v19 = sub_100027E38(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    uint64_t v12 = v19;
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

LABEL_15:
  uint64_t v24 = sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

  id v34 = sub_100010A58(0LL, a7, a8);
  Swift::Int result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v34);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

unint64_t sub_10002882C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10002890C(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t i = a2 & ~v6;
  if (((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100010A58(0LL, a3, a4);
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * i);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = ~v6;
      for (unint64_t i = (i + 1) & v10; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v10)
      {
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * i);
        char v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

id sub_100028A1C()
{
  uint64_t v1 = v0;
  sub_100003288(&qword_10007B298);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    char v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    *(void *)(*(void *)(v4 + 56) + vswift_weakDestroy(v0 + 16) = v18;
    id v19 = v17;
    id result = v18;
  }

  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    int64_t v13 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 8 * v16;
    char v18 = *(void **)(*(void *)(v3 + 48) + 8 * v16);
    id v19 = 16 * v16;
    uint64_t v24 = *(_OWORD *)(*(void *)(v3 + 56) + v19);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(void *)(v5 + 56) + v19) = v24;
    int64_t v20 = v18;
    id result = (void *)swift_retain(*((void *)&v24 + 1));
  }

  id v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  int64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    uint64_t v10 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    char v18 = v17[1];
    id v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_retain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

      if (v100 == ++v102) {
        goto LABEL_48;
      }
    }
  }

  __break(1u);
}

    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    char v18 = 16 * v15;
    id v23 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + vswift_weakDestroy(v0 + 16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v23;
    id v19 = v17;
    swift_retain(*((void *)&v23 + 1));
  }

  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  id v63 = (uint64_t)v94;
  (*(void (**)(id))(*(void *)v93 + 168LL))(v41);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v23 - 1) + 48LL))(v63, 1LL, v23) == 1)
  {
    sub_10000B4A8(v63, &qword_10007B950);
    uint64_t v64 = v96;
  }

  else
  {
    uint64_t v65 = sub_1000338D8();
    os_log_type_t v67 = v66;
    sub_100034370(v63);
    if (v67 >> 60 == 15)
    {
      uint64_t v64 = v96;
    }

    else
    {
      uint64_t v68 = *(void *)(v36 + v23[9]);
      uint64_t v69 = *(void *)(v68 + 16);
      if (v69)
      {
        swift_bridgeObjectRetain(v68);
        id v70 = v69 - 1;
        uint64_t v99 = v71;
        unint64_t v72 = (unint64_t *)(v71 + 40);
        do
        {
          uint64_t v73 = v70;
          id v75 = *(v72 - 1);
          uint64_t v74 = *v72;
          sub_100008EB0(v75, *v72);
          sub_10004E1D8(v75, v74);
          uint64_t v77 = v76;
          sub_100008B40(v75, v74);
          if ((v77 & 1) != 0) {
            break;
          }
          id v70 = v73 - 1;
          v72 += 2;
        }

        while (v73);
        swift_bridgeObjectRelease(v99);
        id v34 = v97;
        uint64_t v36 = v98;
      }

      else
      {
        uint64_t v77 = 0;
      }

      uint64_t v64 = v96;
      [v96 setFastLEConnectionAllowed:v77 & 1];
      sub_100008B2C(v65, v67);
    }
  }

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v64 setFastLEConnectionInfoData:isa];

  uint64_t v83 = *(void *)(v36 + v23[7]);
  if ((v83 & 0x8000000000000000LL) != 0) {
    goto LABEL_43;
  }
  if (v83 >= 0x100) {
    goto LABEL_44;
  }
  [v64 setFastLEConnectionInfoVersion:*(void *)(v36 + v23[7])];
  uint64_t v84 = *(void *)(v36 + v23[12]);
  if ((v84 & 0x8000000000000000LL) == 0)
  {
    if (!HIDWORD(v84))
    {
      objc_msgSend(v64, "setSupportedServices:");
      os_log_type_t v85 = v64;
      [v34 setControllerInfo:v85];

      *uint64_t v95 = v34;
      return;
    }

    goto LABEL_44;
  }

    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    char v18 = v17[1];
    int64_t v20 = 40 * v15;
    sub_10000656C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    int64_t v22 = *(void *)(v4 + 56) + v20;
    id v23 = v30;
    uint64_t v24 = v29[1];
    *(_OWORD *)int64_t v22 = v29[0];
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = v24;
    *(void *)(v22 + 32) = v23;
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    swift_release(v2);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  BOOL v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    char v18 = v17[1];
    int64_t v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(void *)(v2 + 56) + v20);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v2sub_10000DC70(0, 0) = (_DWORD)v17;
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

void *sub_100028BC0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100003288(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }

uint64_t sub_100028D74(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }

  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000LL) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  id result = swift_stdlib_random(&v7, 8LL);
  return result;
}

uint64_t sub_100028E1C( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t (*a5)(void *), uint64_t *a6, unint64_t *a7, void *a8)
{
  uint64_t v11 = v8;
  uint64_t v16 = *v8;
  unint64_t v18 = a5(a3);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    sub_100028BC0(a6);
LABEL_7:
    __int128 v24 = (void *)*v11;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      uint64_t v25 = (uint64_t *)(v24[7] + 16 * v18);
      uint64_t result = *v25;
      *uint64_t v25 = a1;
      v25[1] = a2;
      return result;
    }

void *sub_100028F88(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  double v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *double v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    BOOL v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_42:
  LODWORD(v15) = (a1 & 0x3F) << 8;
  uint64_t v11 = v65;
  unint64_t v9 = v66;
  os_log_type_t v39 = (v15 | (a1 >> 6)) + 33217;
LABEL_22:
  *(void *)description = (v39 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << ((32 - (__clz(v39) & 0x38)) & 0x38));
  if (qword_1000805D0 != -1) {
    swift_once(&qword_1000805D0, sub_100055E94);
  }
  uint64_t v37 = (os_activity_s *)qword_1000805D8;
  uint64_t v38 = description;
LABEL_25:
  os_log_type_t v40 = _os_activity_create((void *)&_mh_execute_header, v38, v37, OS_ACTIVITY_FLAG_DEFAULT);
  v4[2].opaque[1] = (uint64_t)v40;
  swift_beginAccess(&v4[3], description, 33LL, 0LL);
  BOOL v41 = (os_activity_s *)swift_unknownObjectRetain(v40);
  os_activity_scope_enter(v41, v4 + 3);
  swift_endAccess(description);
  swift_unknownObjectRelease(v40);
  uint64_t v42 = sub_1000301CC();
  uint64_t v43 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v42, v64);
  uint64_t v44 = swift_retain_n(v4, 2LL);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  uint64_t v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v47 = 136315138;
    os_log_type_t v67 = v48;
    *(void *)description = 0x3A4E58545BLL;
    uint64_t v69 = 0xE500000000000000LL;
    uint64_t v49 = v4[1].opaque[0];
    uint64_t v50 = (void *)v4[1].opaque[1];
    swift_retain(v4);
    v51._uint64_t countAndFlagsBits = v49;
    v51._object = v50;
    String.append(_:)(v51);
    v52._uint64_t countAndFlagsBits = 93LL;
    v52._object = (void *)0xE100000000000000LL;
    String.append(_:)(v52);
    swift_release(v4);
    uint64_t v53 = v69;
    *(void *)description = sub_100003E68(*(uint64_t *)description, v69, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(description, &v69, v47 + 4, v47 + 12);
    swift_release_n(v4, 2LL);
    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Opened %s", v47, 0xCu);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v64);
  }

  else
  {

    swift_release_n(v4, 2LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v43);
  }

  return v4;
}

uint64_t sub_100029180(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

uint64_t sub_1000291E8(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v6 = 0x80000001000671E0LL;
    if (a2 == 0x80000001000671E0LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001000671E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0x734449656E6F7ALL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x734449656E6F7ALL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100029334@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100003288(&qword_10007B2C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100008E78(a1, v9);
  unint64_t v11 = sub_100011050();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys,  &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000467C(a1);
  }
  char v28 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  uint64_t v14 = v13;
  uint64_t v24 = v12;
  char v27 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  uint64_t v16 = v15;
  uint64_t v17 = sub_100003288(&qword_10007BFF0);
  char v26 = 2;
  uint64_t v18 = sub_10002F038( &qword_10007B2D0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v23 = v16;
  swift_bridgeObjectRetain(v16);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, v17, &v26, v5, v17, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v19 = v25;
  swift_bridgeObjectRetain(v25);
  sub_10000467C(a1);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = v23;
  swift_bridgeObjectRelease(v23);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v24;
  a2[1] = v14;
  a2[2] = v22;
  a2[3] = v20;
  a2[4] = v19;
  return result;
}

void *sub_1000295A8(void *a1)
{
  return a1;
}

uint64_t sub_1000295D0(uint64_t a1)
{
  return a1;
}

void *sub_1000295F8(void *a1)
{
  return a1;
}

uint64_t sub_100029620@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 512LL))();
  *a1 = result;
  return result;
}

uint64_t sub_100029654()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_100029678()
{
  return sub_10001175C(*(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1000296A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000296B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000296C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1000296C8()
{
  unint64_t result = qword_10007ACF8;
  if (!qword_10007ACF8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10007ACF8);
  }

  return result;
}

void sub_10002970C(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable);
}

uint64_t type metadata accessor for CloudStorageCoordinator(uint64_t a1)
{
  uint64_t result = qword_10007DB00;
  if (!qword_10007DB00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudStorageCoordinator);
  }
  return result;
}

uint64_t sub_10002975C(uint64_t a1, void (*a2)(_BYTE *, id))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v10 = 0LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v8) {
      return swift_release(a1);
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release(a1);
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release(a1);
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release(a1);
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }

LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_10000656C(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    id v17 = *(id *)(*(void *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    uint64_t result = sub_10000B4A8((uint64_t)v16, &qword_10007B220);
  }

  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release(a1);
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release(a1);
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    uint64_t v6 = (v14 - 1) & v14;
    uint64_t v9 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_5:
    uint64_t v18 = *(_OWORD *)(*(void *)(a1 + 56) + 16 * v9);
    __chkstk_darwin();
    v16[1] = v18;
    unint64_t v11 = v10;
    unint64_t v12 = *((void *)&v18 + 1);
    swift_retain(*((void *)&v18 + 1));
    a2(v11, sub_10002F358, v16);
    swift_release(v12);
  }

  int64_t v15 = v13 + 4;
  if (v15 >= v19)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  unint64_t v14 = *(void *)(v17 + 8 * v15);
  if (v14)
  {
    unint64_t v7 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v7 >= v19) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    uint64_t v51 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_23:
    uint64_t v24 = *(void *)(*(void *)(v12 + 56) + 16 * v20 + 8);
    uint64_t v25 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
    uint64_t v50 = v24;
    swift_retain(v24);
    char v26 = sub_10002FF10();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v26, v2);
    char v27 = (__CFString *)v25;
    char v28 = (os_log_s *)Logger.logObject.getter(v27);
    BOOL v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(12LL, -1LL);
      BOOL v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v31;
      *(_DWORD *)uint64_t v30 = v44.n128_u32[0];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v49 = v18;
      id v33 = v5;
      uint64_t v34 = v3;
      __int128 v35 = v2;
      uint64_t v36 = v1;
      uint64_t v38 = v37;
      *(void *)(v30 + 4) = sub_100003E68(v32, v37, &v52);

      os_log_type_t v39 = v38;
      uint64_t v1 = v36;
      uint64_t v2 = v35;
      BOOL v3 = v34;
      uint64_t v5 = v33;
      uint64_t v18 = v49;
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Remove darwin callback handler for %s", (uint8_t *)v30, 0xCu);
      swift_arrayDestroy(v31, 1LL, v43);
      os_log_type_t v40 = v31;
      unint64_t v11 = v46;
      swift_slowDealloc(v40, -1LL, -1LL);
      BOOL v41 = v30;
      unint64_t v12 = v45;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v19 = v50;
    uint64_t v16 = v51;
    CFNotificationCenterRemoveObserver(v11, v1, v27, 0LL);
    swift_release(v19);
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v48)
  {
LABEL_25:
    swift_release(v12);

    goto LABEL_26;
  }

  uint64_t v22 = *(void *)(v47 + 8 * v23);
  if (v22)
  {
    uint64_t v18 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v18 >= v48) {
      goto LABEL_25;
    }
    uint64_t v22 = *(void *)(v47 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

void sub_1000298F8(uint64_t a1, void (*a2)(id, uint64_t (*)(), _OWORD *))
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v19) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    ++v7;
    if (!v14)
    {
      int64_t v7 = v13 + 1;
      if (v13 + 1 >= v19) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v7);
      if (!v14)
      {
        int64_t v7 = v13 + 2;
        if (v13 + 2 >= v19) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v7);
        if (!v14)
        {
          int64_t v7 = v13 + 3;
          if (v13 + 3 >= v19) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v17 + 8 * v7);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t sub_100029B00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v2);
  id v3 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.path.getter();
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  LODWORD(v5) = [v3 fileExistsAtPath:v6];

  uint64_t result = 0LL;
  if ((_DWORD)v5)
  {
    uint64_t v8 = Data.init(contentsOf:options:)(a1, 0LL);
    unint64_t v10 = v9;
    sub_100010A58(0LL, &qword_10007B2A8, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v11 = sub_100003288(&qword_10007B2B0);
    uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
    *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_100060880;
    uint64_t v13 = sub_100010A58(0LL, &qword_10007B2B8, &OBJC_CLASS___CKServerChangeToken_ptr);
    *(void *)(v12 + 32) = v13;
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v15, v12, v8, v10);
    sub_100008B40(v8, v10);
    swift_bridgeObjectRelease(v12);
    if (v15[3])
    {
      else {
        return 0LL;
      }
    }

    else
    {
      sub_10000B4A8((uint64_t)v15, &qword_10007A7A0);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100029E54()
{
  unint64_t result = qword_10007AD18;
  if (!qword_10007AD18)
  {
    unint64_t result = swift_getWitnessTable( &unk_100060F9C,  &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_10007AD18);
  }

  return result;
}

uint64_t sub_100029E98(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v22[1] = *(void *)(v3 + 56);
  uint64_t v14 = (void *)swift_allocObject(&unk_100072A10, 48LL, 7LL);
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_10002EB58;
  char v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100072A28;
  int64_t v15 = _Block_copy(aBlock);
  swift_retain(v3);
  id v16 = a1;
  uint64_t v17 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v20 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v26);
}

id sub_10002A0A8()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v8 = 0LL;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v8];

  id v5 = v8;
  if (v4) {
    return v8;
  }
  id v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow();
}

uint64_t sub_10002A18C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v100 = *(void *)(v4 - 8);
  uint64_t v101 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v99 = (unint64_t)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v94 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v94 - v10;
  uint64_t v12 = type metadata accessor for URL(0LL);
  unint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v98 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v94 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)&v94 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v94 - v22;
  unint64_t v97 = a1;
  if (!a1)
  {
    sub_10002A0A8();
    uint64_t v42 = sub_100030000();
    uint64_t v43 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v9, v42, v101);
    uint64_t v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, a2, v12);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    uint64_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, (os_log_type_t)v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v48 = (void *)swift_slowAlloc(32LL, -1LL);
      unint64_t v99 = v13;
      uint64_t v49 = v48;
      uint64_t v104 = (uint64_t *)v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v50 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v12, v50);
      unint64_t v53 = v52;
      uint64_t v102 = sub_100003E68(v51, v52, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v53);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v18, v12);
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v46, "Deleted change token, URL, %s", v47, 0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      uint64_t v54 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);

      uint64_t v54 = *(uint64_t (**)(char *, uint64_t))(v43 + 8);
    }

    uint64_t v93 = v9;
    return v54(v93, v101);
  }

  uint64_t v96 = v11;
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v25 = a1;
  id v26 = [v24 defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v27);
  BOOL v29 = v28;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30(v23, v12);
  uint64_t v104 = 0LL;
  unsigned int v31 = [v26 createDirectoryAtURL:v29 withIntermediateDirectories:1 attributes:0 error:&v104];

  uint64_t v32 = v104;
  if (v31)
  {
    unint64_t v33 = v13;
    uint64_t v34 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
    uint64_t v104 = 0LL;
    id v35 = [v34 archivedDataWithRootObject:v25 requiringSecureCoding:1 error:&v104];
    uint64_t v36 = v104;
    if (v35)
    {
      uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v39 = v38;

      Data.write(to:excludeFromBackup:options:)(a2, 1, 0LL, 1, v37, v39);
      uint64_t v98 = v37;
      unint64_t v99 = v39;
      uint64_t v77 = sub_100030000();
      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v96, v77, v101);
      uint64_t v78 = a2;
      uint64_t v79 = v12;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v21, v78, v12);
      id v80 = v25;
      uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
      os_log_type_t v82 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v84 = swift_slowAlloc(22LL, -1LL);
        uint64_t v94 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v95 = (uint64_t *)swift_slowAlloc(32LL, -1LL);
        uint64_t v104 = v95;
        *(_DWORD *)uint64_t v84 = 136315394;
        uint64_t v85 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter(v79, v85);
        unint64_t v88 = v87;
        uint64_t v102 = sub_100003E68(v86, v87, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease(v88);
        v30(v21, v79);
        *(_WORD *)(v84 + 12) = 2112;
        uint64_t v102 = (uint64_t)v80;
        id v89 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v84 + 14, v84 + 22);
        uint64_t v90 = v94;
        *uint64_t v94 = v97;

        _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Updated change token, URL, %s, token, %@",  (uint8_t *)v84,  0x16u);
        uint64_t v91 = sub_100003288((uint64_t *)&unk_10007A940);
        swift_arrayDestroy(v90, 1LL, v91);
        swift_slowDealloc(v90, -1LL, -1LL);
        uint64_t v92 = v95;
        swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1LL, -1LL);
        swift_slowDealloc(v84, -1LL, -1LL);
        sub_100008B40(v98, v99);
      }

      else
      {

        v30(v21, v79);
        sub_100008B40(v98, v99);
      }

      uint64_t v54 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
      uint64_t v93 = v96;
      return v54(v93, v101);
    }

    int v55 = v36;
    uint64_t v41 = _convertNSErrorToError(_:)(v36);
  }

  else
  {
    os_log_type_t v40 = v32;
    unint64_t v33 = v13;
    uint64_t v41 = _convertNSErrorToError(_:)(v32);
  }

  swift_willThrow();

  uint64_t v56 = v100;
  uint64_t v57 = sub_100030000();
  unint64_t v58 = v99;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 16))(v99, v57, v101);
  unint64_t v59 = v33;
  uint64_t v60 = v98;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v98, a2, v12);
  id v61 = v25;
  swift_errorRetain(v41);
  id v62 = v61;
  uint64_t v63 = swift_errorRetain(v41);
  uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
  os_log_type_t v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = swift_slowAlloc(32LL, -1LL);
    uint64_t v95 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v96 = (char *)swift_slowAlloc(64LL, -1LL);
    uint64_t v104 = (uint64_t *)v96;
    *(_DWORD *)uint64_t v66 = 136315650;
    if (v97) {
      uint64_t v67 = 0x657461647075LL;
    }
    else {
      uint64_t v67 = 0x6574656C6564LL;
    }
    uint64_t v102 = sub_100003E68(v67, 0xE600000000000000LL, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v66 + 4, v66 + 12);

    swift_bridgeObjectRelease(0xE600000000000000LL);
    *(_WORD *)(v66 + 12) = 2080;
    uint64_t v68 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v12, v68);
    unint64_t v71 = v70;
    uint64_t v102 = sub_100003E68(v69, v70, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v66 + 14, v66 + 22);
    swift_bridgeObjectRelease(v71);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v12);
    *(_WORD *)(v66 + 22) = 2112;
    swift_errorRetain(v41);
    uint64_t v72 = _swift_stdlib_bridgeErrorToNSError(v41);
    uint64_t v102 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v66 + 24, v66 + 32);
    uint64_t v73 = v95;
    *uint64_t v95 = v72;
    swift_errorRelease(v41);
    swift_errorRelease(v41);
    _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "Unable to %s change token, URL, %s, error, %@ ",  (uint8_t *)v66,  0x20u);
    uint64_t v74 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v73, 1LL, v74);
    swift_slowDealloc(v73, -1LL, -1LL);
    id v75 = v96;
    swift_arrayDestroy(v96, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);

    swift_errorRelease(v41);
    return (*(uint64_t (**)(unint64_t, uint64_t))(v100 + 8))(v99, v101);
  }

  else
  {
    swift_errorRelease(v41);

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v12);
    swift_errorRelease(v41);
    swift_errorRelease(v41);

    return (*(uint64_t (**)(unint64_t, uint64_t))(v56 + 8))(v58, v101);
  }

uint64_t sub_10002AB18()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10002AB54()
{
  return sub_100019D6C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void **)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_10002AB64(uint64_t a1)
{
  return sub_10001F0E4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(_BYTE *)(v1 + 48));
}

void *sub_10002AB94(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  unsigned int v31 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_30;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    uint64_t v26 = v2;
    unint64_t v4 = 0LL;
    uint64_t v28 = v2 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v29 = v2 & 0xC000000000000001LL;
    uint64_t v27 = v2 + 32;
    while (1)
    {
      if (v29)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v26);
      }

      else
      {
        if (v4 >= *(void *)(v28 + 16))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }

        id v5 = *(id *)(v27 + 8 * v4);
      }

      uint64_t v6 = v5;
      if (__OFADD__(v4++, 1LL)) {
        goto LABEL_28;
      }
      (*(void (**)(_OWORD *__return_ptr))(*(void *)a2 + 256LL))(v32);
      uint64_t v8 = v33;
      uint64_t v36 = v33;
      __int128 v35 = v32[0];
      swift_bridgeObjectRetain(v33);
      sub_1000295D0((uint64_t)&v35);
      __int128 v34 = v32[1];
      sub_1000295D0((uint64_t)&v34);
      sub_1000295F8(&v36);
      id v9 = [v6 zoneName];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v2 = v11;

      uint64_t v12 = v8[2];
      if (v12)
      {
        uint64_t v13 = v8[4];
        uint64_t v14 = v8[5];
        if (v13 == v10 && v14 == v2 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v10, v2, 0LL) & 1) != 0)
        {
LABEL_14:
          swift_bridgeObjectRelease(v2);
          uint64_t v15 = sub_1000295F8(&v36);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          uint64_t v16 = v31[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v6);
          uint64_t v2 = (uint64_t)&v31;
          specialized ContiguousArray._endMutation()(v17);
          goto LABEL_5;
        }

        if (v12 != 1) {
          break;
        }
      }

LABEL_4:
      swift_bridgeObjectRelease(v2);
      sub_1000295F8(&v36);

LABEL_5:
      if (v4 == i) {
        return v31;
      }
    }

    uint64_t v18 = v8 + 7;
    uint64_t v19 = 1LL;
    while (1)
    {
      uint64_t v20 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        break;
      }
      uint64_t v21 = *(v18 - 1);
      uint64_t v22 = *v18;
      BOOL v23 = v21 == v10 && v22 == v2;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v10, v2, 0LL) & 1) != 0) {
        goto LABEL_14;
      }
      v18 += 2;
      ++v19;
      if (v20 == v12) {
        goto LABEL_4;
      }
    }

uint64_t sub_10002AE04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100003288(&qword_10007B290);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002AF10(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      uint64_t v5 = i - 4;
      if ((a1 & 0xC000000000000001LL) == 0) {
        break;
      }
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      uint64_t v7 = i - 3;
      if (__OFADD__(v5, 1LL)) {
        goto LABEL_19;
      }
LABEL_9:
      uint64_t v22 = v6;
      id v8 = [v6 recordID];
      id v9 = [v8 recordName];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      id v13 = [a2 recordName];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;

      if (v10 == v14 && v12 == v16)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v12);
LABEL_18:
        uint64_t v3 = (uint64_t)v22;
        swift_bridgeObjectRelease(v12);
        return v3;
      }

      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v16, 0LL);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        uint64_t v12 = a1;
        goto LABEL_18;
      }

      if (v7 == v3)
      {
        swift_bridgeObjectRelease(a1);
        return 0LL;
      }
    }

    id v6 = *(id *)(a1 + 8 * i);
    uint64_t v7 = i - 3;
    if (!__OFADD__(v5, 1LL)) {
      goto LABEL_9;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v19);
  }

  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_10002B0F0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v5)
  {
    uint64_t v6 = 0LL;
    uint64_t v22 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      id v8 = v7;
      id v9 = objc_msgSend(v7, "recordID", v22);
      id v10 = [v9 recordName];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      id v14 = [a2 recordName];
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v16 = v15;

      if (v11 == v3 && v13 == v16)
      {

        swift_bridgeObjectRelease_n(v13, 2LL);
        return v6;
      }

      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v3, v16, 0LL);

      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0) {
        return v6;
      }
      uint64_t v19 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        break;
      }
      ++v6;
      if (v19 == v5) {
        return 0LL;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }

  return 0LL;
}

uint64_t sub_10002B2B0(uint64_t *a1, void *a2)
{
  unint64_t v5 = *a1;
  uint64_t v6 = swift_bridgeObjectRetain(*a1);
  id v45 = a2;
  unint64_t v46 = sub_10002B0F0(v6, a2);
  char v8 = v7;
  swift_bridgeObjectRelease(v5);
  uint64_t v44 = v2;
  if (v2) {
    return v46;
  }
  if ((v8 & 1) == 0)
  {
    id v9 = (id)(v46 + 1);
    if (__OFADD__(v46, 1LL)) {
      goto LABEL_63;
    }
    unint64_t v5 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_64:
      if ((v5 & 0x8000000000000000LL) != 0LL) {
        uint64_t v40 = v5;
      }
      else {
        uint64_t v40 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v5);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v5);
      if (v9 != (id)v41) {
        goto LABEL_6;
      }
    }

    else if (v9 != *(id *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v46 + 5; ; ++i)
      {
        unint64_t v5 = i - 4;
        unint64_t v11 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0)
        {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v11);
        }

        else
        {
          if ((v5 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }

          if (v5 >= *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_54;
          }
          id v12 = *(id *)(v11 + 8 * i);
        }

        uint64_t v13 = v12;
        id v14 = objc_msgSend(v12, "recordID", v44);
        id v15 = [v14 recordName];

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        uint64_t v18 = v17;

        id v9 = [v45 recordName];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        uint64_t v21 = v20;

        if (v16 == v19 && v18 == v21)
        {

          swift_bridgeObjectRelease_n(v18, 2LL);
          goto LABEL_38;
        }

        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v21, 0LL);

        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v21);
        if ((v23 & 1) != 0) {
          goto LABEL_38;
        }
        if (v5 != v46) {
          break;
        }
LABEL_35:
        if (__OFADD__(v46, 1LL)) {
          goto LABEL_56;
        }
        ++v46;
LABEL_38:
        id v9 = (id)(i - 3);
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_55;
        }
        uint64_t v35 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v35 < 0) {
            uint64_t v37 = *a1;
          }
          else {
            uint64_t v37 = v35 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*a1);
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease(v35);
        }

        else
        {
          uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v9 == (id)v36) {
          return v46;
        }
      }

      uint64_t v24 = *a1;
      if ((*a1 & 0xC000000000000001LL) != 0)
      {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, *a1);
        uint64_t v24 = *a1;
        if ((*a1 & 0xC000000000000001LL) == 0)
        {
LABEL_21:
          if ((v5 & 0x8000000000000000LL) != 0) {
            goto LABEL_59;
          }
          if (v5 >= *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_60;
          }
          id v26 = *(id *)(v24 + 8 * i);
          goto LABEL_24;
        }
      }

      else
      {
        if ((v46 & 0x8000000000000000LL) != 0) {
          goto LABEL_57;
        }
        if (v46 >= *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_58;
        }
        id v25 = *(id *)(v24 + 8 * v46 + 32);
        if ((v24 & 0xC000000000000001LL) == 0) {
          goto LABEL_21;
        }
      }

      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v24);
      uint64_t v24 = *a1;
LABEL_24:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v24);
      *a1 = v24;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v24 < 0 || (v24 & 0x4000000000000000LL) != 0)
      {
        uint64_t v24 = sub_100029180(v24);
        *a1 = v24;
      }

      uint64_t v28 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8LL) + 8 * v46 + 0x20);
      *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 8 * v46 + 0x2sub_10000DC70(0, 0) = v26;

      specialized Array._endMutation()(v29);
      uint64_t v30 = *a1;
      int v31 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v30;
      if (!v31 || v30 < 0 || (v30 & 0x4000000000000000LL) != 0)
      {
        uint64_t v30 = sub_100029180(v30);
        *a1 = v30;
      }

      if ((v5 & 0x8000000000000000LL) != 0) {
        goto LABEL_61;
      }
      uint64_t v32 = v30 & 0xFFFFFFFFFFFFFF8LL;
      if (v5 >= *(void *)((v30 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_62;
      }
      unint64_t v33 = *(void **)(v32 + 8 * i);
      *(void *)(v32 + 8 * i) = v25;

      specialized Array._endMutation()(v34);
      goto LABEL_35;
    }

    return v46;
  }

  uint64_t v38 = *a1;
  if (v38 < 0) {
    uint64_t v42 = v38;
  }
  else {
    uint64_t v42 = v38 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v38);
  uint64_t v43 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease(v38);
  return v43;
}

uint64_t sub_10002B6A0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v21 = v5;
  }
  else {
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v7;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }

LABEL_37:
  if (v5 < 0) {
    uint64_t v22 = v5;
  }
  else {
    uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v5 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  uint64_t *v3 = v5;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v5);
  swift_bridgeObjectRelease(*v3);
  uint64_t *v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  uint64_t v13 = sub_100010A58(0LL, &qword_10007B1B0, &OBJC_CLASS___CKRecord_ptr);
  id v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6) {
    return specialized Array._endMutation()(v14);
  }
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v15 = *(void *)(v11 + 16);
    uint64_t v16 = v15 - v2;
    if (!__OFSUB__(v15, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v11;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  id v14 = (void *)swift_bridgeObjectRelease(v5);
  uint64_t v16 = v25 - v2;
  if (__OFSUB__(v25, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = (const void *)(v11 + 32 + 8 * v2);
    if (!((unint64_t)v5 >> 62))
    {
      uint64_t v18 = *(void *)(v11 + 16);
      uint64_t v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(void *)(v11 + swift_weakDestroy(v0 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }

      goto LABEL_58;
    }

LABEL_53:
    if (v5 < 0) {
      uint64_t v26 = v5;
    }
    else {
      uint64_t v26 = v11;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    id v14 = (void *)swift_bridgeObjectRelease(v5);
    uint64_t v19 = v27 + v6;
    if (!__OFADD__(v27, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

void sub_10002B97C(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v29 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    id v18 = [a2 recordID];
    id v19 = [v18 recordName];

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    if (v15 == v20 && v17 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2LL);
      return;
    }

    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v20, v22, 0LL);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v29;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v25 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v26) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v25 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v26) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v25 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v26) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v25 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

LABEL_19:
    unint64_t v4 = (v9 - 1) & v9;
    int64_t v29 = v10;
  }

  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

    unint64_t v4 = (v9 - 1) & v9;
    uint64_t v28 = v10;
  }

  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

    int64_t v5 = (v10 - 1) & v10;
  }

  while (1)
  {
    unint64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v6 >= v17) {
      goto LABEL_23;
    }
    int64_t v10 = *(void *)(v2 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }

    unint64_t v4 = (v9 - 1) & v9;
    uint64_t v30 = v10;
  }

  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v26 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

    unint64_t v4 = (v9 - 1) & v9;
    int64_t v29 = v10;
  }

  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }

    int64_t v5 = (v10 - 1) & v10;
  }

  while (1)
  {
    unint64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v6 >= v19) {
      goto LABEL_23;
    }
    int64_t v10 = *(void *)(v18 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }

  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      os_log_type_t v165 = a2;
    }
    else {
      os_log_type_t v165 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v100 = _CocoaArrayWrapper.endIndex.getter(v165);
    if (v100) {
      goto LABEL_21;
    }
LABEL_48:
    swift_bridgeObjectRelease(a2);
    notify_post("com.apple.bluetoothuser.cloudChanged");
    return;
  }

  uint64_t v100 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v101 = swift_bridgeObjectRetain(a2);
  if (!v100) {
    goto LABEL_48;
  }
LABEL_21:
  if (v100 >= 1)
  {
    uint64_t v102 = 0LL;
    uint64_t v188 = 0LL;
    id v187 = a2 & 0xC000000000000001LL;
    v101.n128_u64[0] = 136315394LL;
    unint64_t v180 = v101;
    unint64_t v179 = (char *)&type metadata for Any + 8;
    v101.n128_u64[0] = 138412546LL;
    uint64_t v185 = v101;
    uint64_t v186 = (id)v100;
    while (1)
    {
      if (v187) {
        uint64_t v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v102, a2);
      }
      else {
        uint64_t v104 = *(id *)(a2 + 8 * v102 + 32);
      }
      id v105 = v104;
      uint64_t v106 = objc_msgSend(v104, "recordID", v166.n128_u64[0], v166.n128_u64[1]);
      id v107 = [v106 zoneID];

      uint64_t v108 = [v107 zoneName];
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      uint64_t v111 = v110;

      uint64_t v112 = sub_1000303E0();
      swift_beginAccess(v112, &v207, 0LL, 0LL);
      uint64_t v113 = v112[1];
      uint64_t v114 = v5;
      if (*v112 == v109 && v113 == v111)
      {
        swift_bridgeObjectRelease(v111);
      }

      else
      {
        uint64_t v116 = _stringCompareWithSmolCheck(_:_:expecting:)(*v112, v113, v109, v111, 0LL);
        swift_bridgeObjectRelease(v111);
        if ((v116 & 1) == 0)
        {
          unint64_t v117 = sub_1000300CC();
          char v118 = v197;
          char v119 = v172;
          (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v172, v117, v14);
          char v120 = v105;
          uint64_t v121 = (os_log_s *)Logger.logObject.getter(v120);
          uint64_t v122 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v121, v122))
          {
            uint64_t v123 = swift_slowAlloc(22LL, -1LL);
            uint64_t v124 = (void *)swift_slowAlloc(8LL, -1LL);
            uint64_t v125 = (void **)swift_slowAlloc(32LL, -1LL);
            __int128 aBlock = v125;
            *(_DWORD *)uint64_t v123 = v180.n128_u32[0];
            uint64_t v126 = [v120 recordID];
            uint64_t v127 = [v126 zoneID];

            os_log_t v128 = [v127 zoneName];
            os_log_type_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
            uint64_t v131 = v130;

            *(void *)(v123 + 4) = sub_100003E68(v129, v131, (uint64_t *)&aBlock);
            uint64_t v132 = v131;
            uint64_t v133 = v196;
            swift_bridgeObjectRelease(v132);
            *(_WORD *)(v123 + 12) = 2112;
            *(void *)(v123 + 14) = v120;
            uint8_t *v124 = v120;

            _os_log_impl( (void *)&_mh_execute_header,  v121,  v122,  "Ignoring updated record from %s zone: %@",  (uint8_t *)v123,  0x16u);
            uint64_t v134 = sub_100003288((uint64_t *)&unk_10007A940);
            swift_arrayDestroy(v124, 1LL, v134);
            id v135 = v124;
            int64_t v5 = v181;
            swift_slowDealloc(v135, -1LL, -1LL);
            swift_arrayDestroy(v125, 1LL, v179);
            swift_slowDealloc(v125, -1LL, -1LL);
            unint64_t v136 = v123;
            id v14 = v133;
            uint64_t v100 = (uint64_t)v186;
            swift_slowDealloc(v136, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v197 + 8))(v172, v14);
          }

          else
          {

            (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v14);
          }

          a2 = v182;
          goto LABEL_25;
        }
      }

      uint64_t v137 = v198;
      unint64_t v205 = sub_100043DC4;
      unint64_t v206 = v198;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v202 = 1107296256LL;
      uint64_t v203 = sub_100005A3C;
      uint64_t v204 = &unk_100073828;
      uint64_t v138 = _Block_copy(&aBlock);
      swift_retain(v137);
      uint64_t v139 = v189;
      static DispatchQoS.unspecified.getter(v140);
      v200 = _swiftEmptyArrayStorage;
      unint64_t v141 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      unint64_t v142 = sub_100003288((uint64_t *)&unk_10007A860);
      uint64_t v143 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
      uint64_t v144 = v192;
      uint64_t v145 = v194;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v200, v142, v143, v194, v141);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v139, v144, v138);
      _Block_release(v138);
      (*(void (**)(char *, uint64_t))(v193 + 8))(v144, v145);
      (*(void (**)(char *, uint64_t))(v190 + 8))(v139, v191);
      swift_release(v206);
      uint64_t v146 = v105;
      int64_t v5 = v114;
      unint64_t v147 = v188;
      sub_100031BBC(v146, v114);
      id v148 = v147;
      if (v147)
      {
        id v14 = v196;
        a2 = v182;
        uint64_t v188 = 0LL;
        uint64_t v156 = sub_1000300CC();
        (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v184, v156, v14);
        uint64_t v157 = v146;
        swift_errorRetain(v147);
        uint64_t v103 = (os_log_s *)v157;
        uint64_t v158 = swift_errorRetain(v147);
        uint64_t v159 = (os_log_s *)Logger.logObject.getter(v158);
        uint64_t v160 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v159, v160))
        {
          uint64_t v161 = swift_slowAlloc(22LL, -1LL);
          uint64_t v162 = (os_log_s **)swift_slowAlloc(16LL, -1LL);
          *(_DWORD *)uint64_t v161 = v185.n128_u32[0];
          *(void *)(v161 + 4) = v103;
          uint8_t *v162 = v103;

          *(_WORD *)(v161 + 12) = 2112;
          swift_errorRetain(v148);
          uint64_t v163 = _swift_stdlib_bridgeErrorToNSError(v148);
          *(void *)(v161 + 14) = v163;
          v162[1] = (os_log_s *)v163;
          swift_errorRelease(v148);
          swift_errorRelease(v148);
          _os_log_impl( (void *)&_mh_execute_header,  v159,  v160,  "Error saving cloud record to disk: %@ due to %@",  (uint8_t *)v161,  0x16u);
          uint64_t v164 = sub_100003288((uint64_t *)&unk_10007A940);
          swift_arrayDestroy(v162, 2LL, v164);
          id v14 = v196;
          swift_slowDealloc(v162, -1LL, -1LL);
          swift_slowDealloc(v161, -1LL, -1LL);
        }

        else
        {

          swift_errorRelease(v147);
          swift_errorRelease(v147);
          uint64_t v103 = v159;
        }

        uint64_t v100 = (uint64_t)v186;
        swift_errorRelease(v148);

        (*(void (**)(char *, uint64_t))(v197 + 8))(v184, v14);
      }

      else
      {
        uint64_t v149 = *sub_100035DE4();
        uint64_t v150 = *(void (**)(__n128))(*(void *)v198 + 232LL);
        unint64_t v151 = swift_retain(v149);
        char v152 = v167;
        v150(v151);
        char v153 = *(void *)sub_100035AE4();
        int v154 = *(void (**)(uint64_t *, char *, uint64_t, uint64_t, uint64_t))(*(void *)v149 + 208LL);
        uint64_t v155 = sub_10000662C( &qword_10007B460,  type metadata accessor for CloudPairedDeviceRecord,  (uint64_t)&unk_100061944);
        v154(v5, v152, v153, v168, v155);
        uint64_t v188 = 0LL;

        swift_release(v149);
        (*(void (**)(char *, uint64_t))(v183 + 8))(v152, v195);
        sub_100034370((uint64_t)v5);
        a2 = v182;
        id v14 = v196;
        uint64_t v100 = (uint64_t)v186;
      }

        uint64_t v30 = *(void *)(v0 + 40);
        int v31 = *(void *)(v0 + 48);
        uint64_t v32 = *(void *)(v0 + 32);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v32, v21, 1LL, v30);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v7);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1LL, v30) != 1)
        {
          uint64_t v41 = *(void *)(v0 + 56);
          uint64_t v40 = *(void *)(v0 + 64);
          uint64_t v42 = *(void *)(v0 + 32);
          sub_10003FDF4(v42, v40);
          (*(void (**)(uint64_t))(*(void *)v9 + 344LL))(v40);
          swift_release(v9);
          swift_release(v2);
          sub_100034370(v40);
          swift_task_dealloc(v40);
          swift_task_dealloc(v41);
          swift_task_dealloc(v42);
          uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
          return v38();
        }

        sub_10000B4A8(*(void *)(v0 + 32), &qword_10007B950);
        unint64_t v33 = sub_10004F288();
        uint64_t v34 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v33, 0LL, 0LL);
        *uint64_t v35 = 2;
        swift_willThrow(v34);
        swift_release(v9);
        goto LABEL_21;
      }

      swift_bridgeObjectRelease(v7);
      int64_t v29 = sub_10004F288();
      int64_t v26 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v29, 0LL, 0LL);
      uint64_t v28 = 1;
    }

    else
    {
      uint64_t v25 = sub_10004F288();
      int64_t v26 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v25, 0LL, 0LL);
      uint64_t v28 = 3;
    }

    NSURL *v27 = v28;
    swift_willThrow(v26);
LABEL_21:
    swift_release(v2);
    goto LABEL_22;
  }

  uint64_t v22 = sub_10004F288();
  uint64_t v23 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v22, 0LL, 0LL);
  *char v24 = 1;
  swift_willThrow(v23);
LABEL_22:
  uint64_t v36 = *(void *)(v0 + 56);
  uint64_t v37 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

LABEL_31:
  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    swift_release(v22);
    uint64_t v21 = sub_10003EC5C((uint64_t)v8);
    swift_bridgeObjectRelease(v8);
    return v21;
  }

      __break(1u);
      goto LABEL_32;
    }

void sub_10002BC30(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v28 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    id v18 = [a2 recordName];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    if (v15 == v19 && v17 == v21)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2LL);
      return;
    }

    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v21, 0LL);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v28;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v25) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v25) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v24 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v25) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v24 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v25) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v24 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v25) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v24 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

void sub_10002BEC4(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v17 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    sub_100010A58(0LL, (unint64_t *)&unk_10007BD10, &OBJC_CLASS___NSObject_ptr);
    id v14 = v12;
    swift_retain_n(v13, 2LL);
    id v15 = v14;
    char v16 = static NSObject.== infix(_:_:)();
    swift_release(v13);

    if ((v16 & 1) != 0)
    {
LABEL_23:
      swift_release(a1);
      return;
    }

    swift_release(v13);

    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v9 >= v17) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v10 = *(void *)(v2 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v17) {
          goto LABEL_23;
        }
        unint64_t v10 = *(void *)(v2 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v17) {
            goto LABEL_23;
          }
          unint64_t v10 = *(void *)(v2 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v17) {
              goto LABEL_23;
            }
            unint64_t v10 = *(void *)(v2 + 8 * v11);
            int64_t v6 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }

LABEL_26:
  __break(1u);
}

  __break(1u);
}

  swift_bridgeObjectRetain(v3);
  sub_10004BAE4(v28);
  uint64_t v30 = v29;
  swift_bridgeObjectRelease_n(v3, 2LL);
  return (*(uint64_t (**)(uint64_t))(v32 + 8))(v30);
}

void sub_10002C0C8(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v30 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordID];
    id v15 = [v14 recordName];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    id v19 = [a2 recordID];
    id v20 = [v19 recordName];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    if (v16 == v21 && v18 == v23)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2LL);
      return;
    }

    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v21, v23, 0LL);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v23);
    if ((v25 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v30;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v27) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v26 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v27) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v26 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v27) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v26 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v27) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v26 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v27) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v26 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_10002C3A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002C3C8(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10002C404(uint64_t a1, char a2)
{
  uint64_t v4 = a2 & 1;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(a1, v4);
  return v5(a1, v4);
}

uint64_t sub_10002C458(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10002C484()
{
  return sub_10002EB18(49LL);
}

uint64_t sub_10002C48C()
{
  return sub_100020944( *(void *)(v0 + 16),  *(void **)(v0 + 24),  *(uint8_t **)(v0 + 32),  *(void (**)(char *, uint64_t, uint64_t))(v0 + 40),  *(unsigned __int8 *)(v0 + 48));
}

void type metadata accessor for NotificationType(uint64_t a1)
{
}

void sub_10002C4B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  id v5 = sub_100011440();
  id v6 = [v5 privateCloudDatabase];

  uint64_t v7 = sub_100003288(&qword_10007B1F0);
  uint64_t v8 = swift_allocObject(v7, 40LL, 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_100060EB0;
  *(void *)(v8 + 32) = v4;
  uint64_t v13 = v8;
  specialized Array._endMutation()(v8);
  uint64_t v9 = swift_allocObject(&unk_1000727E0, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v9 + 24) = v3;
  int64_t v10 = *(void (**)(id, uint64_t, void (*)(uint64_t, char), uint64_t, __n128))(*(void *)v3 + 832LL);
  id v11 = v4;
  swift_retain(a1);
  __n128 v12 = swift_retain(v3);
  v10(v6, v13, sub_10002E634, v9, v12);
  swift_release(v9);
  swift_bridgeObjectRelease(v13);
}

uint64_t sub_10002C5C0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  Transaction.capture()();
  uint64_t v3 = *(void (**)(uint64_t, void, void (*)(uint64_t, char), uint64_t, __n128))(*(void *)v1 + 816LL);
  __n128 v4 = swift_retain(v1);
  v3(v2, 0LL, sub_10002E5DC, v1, v4);
  return swift_release(v1);
}

uint64_t sub_10002C628@<X0>(uint64_t a1@<X8>)
{
  return sub_100026BAC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10002C650()
{
  uint64_t v1 = sub_100003288(&qword_10007AD48);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  uint64_t v7 = (void *)(v0 + v4);
  sub_10000467C(v7);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 28);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_release(*(void *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002C6F8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100003288(&qword_10007AD48) - 8) + 80LL);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((v1 + 24) & ~v1);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 280LL))();
  v7[2] = v3;
  uint64_t v5 = sub_100019580((uint64_t (*)(char *))sub_10002E3CC, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 288LL))(v5);
}

unint64_t sub_10002C77C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10002C7A8();
  unint64_t result = sub_10002C7EC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10002C7A8()
{
  unint64_t result = qword_10007AD50;
  if (!qword_10007AD50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060F4C, &type metadata for CloudStorageCoordinatorConfiguration);
    atomic_store(result, (unint64_t *)&qword_10007AD50);
  }

  return result;
}

unint64_t sub_10002C7EC()
{
  unint64_t result = qword_10007AD58;
  if (!qword_10007AD58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060F74, &type metadata for CloudStorageCoordinatorConfiguration);
    atomic_store(result, (unint64_t *)&qword_10007AD58);
  }

  return result;
}

unint64_t sub_10002C834()
{
  unint64_t result = qword_10007AD60;
  if (!qword_10007AD60)
  {
    unint64_t result = swift_getWitnessTable( &unk_100060FDC,  &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorState);
    atomic_store(result, (unint64_t *)&qword_10007AD60);
  }

  return result;
}

uint64_t destroy for CloudStorageCoordinatorConfiguration(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

void *initializeWithCopy for CloudStorageCoordinatorConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for CloudStorageCoordinatorConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for CloudStorageCoordinatorConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

void *assignWithTake for CloudStorageCoordinatorConfiguration(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinatorConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinatorConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4sub_10000DC70(0, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4sub_10000DC70(0, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinatorConfiguration()
{
  return &type metadata for CloudStorageCoordinatorConfiguration;
}

uint64_t sub_10002CA88()
{
  return type metadata accessor for CloudStorageCoordinator(0LL);
}

void sub_10002CA90(uint64_t a1)
{
  v8[0] = "(";
  v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10002CBB8(319LL, (unint64_t *)&qword_10007ADC0, &qword_10007A9B0);
  if (v3 <= 0x3F)
  {
    void v8[5] = *(void *)(v2 - 8) + 64LL;
    sub_10002CBB8(319LL, (unint64_t *)&unk_10007ADC8, (uint64_t *)&unk_10007A850);
    if (v5 <= 0x3F)
    {
      v8[6] = *(void *)(v4 - 8) + 64LL;
      v8[7] = &unk_100061130;
      v8[8] = &unk_100061130;
      void v8[9] = &unk_100061130;
      v8[10] = &unk_100061130;
      v8[11] = &unk_100061130;
      v8[12] = &unk_100061130;
      v8[13] = &unk_100061148;
      v8[14] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[15] = &unk_100061148;
      _BYTE v8[16] = &unk_100061148;
      v8[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[19] = &unk_100061130;
      v8[20] = &unk_100061130;
      uint64_t v6 = type metadata accessor for URL(319LL);
      if (v7 <= 0x3F)
      {
        v8[21] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 22LL, v8, a1 + 80);
      }
    }
  }

void sub_10002CBB8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = sub_1000064CC(a3);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

void *initializeBufferWithCopyOfBuffer for CloudStorageCoordinator.CloudStorageCoordinatorError( void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL) {
    swift_errorRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for CloudStorageCoordinator.CloudStorageCoordinatorError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for CloudStorageCoordinator.CloudStorageCoordinatorError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF) {
      swift_errorRetain(*a2);
    }
    *a1 = v4;
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }

  else
  {
    swift_errorRetain(*a2);
    unint64_t v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }

  return a1;
}

void *initializeWithTake for CloudStorageCoordinator.CloudStorageCoordinatorError( void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for CloudStorageCoordinator.CloudStorageCoordinatorError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorError( uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_10002CE00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_10002CE18(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinator.CloudStorageCoordinatorError()
{
  return &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorState( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10002CF24 + 4 * byte_100060EC5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002CF58 + 4 * byte_100060EC0[v4]))();
}

uint64_t sub_10002CF58(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002CF60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002CF68LL);
  }
  return result;
}

uint64_t sub_10002CF74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002CF7CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10002CF80(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002CF88(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinator.CloudStorageCoordinatorState()
{
  return &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorState;
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinatorConfiguration.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10002D004 + 4 * byte_100060ECF[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002D038 + 4 * byte_100060ECA[v4]))();
}

uint64_t sub_10002D038(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002D048LL);
  }
  return result;
}

uint64_t sub_10002D054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002D05CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10002D060(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D068(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinatorConfiguration.CodingKeys()
{
  return &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys;
}

unint64_t sub_10002D088()
{
  unint64_t result = qword_10007DC10[0];
  if (!qword_10007DC10[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100061284, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, qword_10007DC10);
  }

  return result;
}

unint64_t sub_10002D0D0()
{
  unint64_t result = qword_10007DE20;
  if (!qword_10007DE20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000611F4, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10007DE20);
  }

  return result;
}

unint64_t sub_10002D118()
{
  unint64_t result = qword_10007DE28[0];
  if (!qword_10007DE28[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10006121C, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, qword_10007DE28);
  }

  return result;
}

uint64_t sub_10002D15C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(double **)(v1 + 24);
  char v5 = *(_BYTE *)(v1 + 32);
  char v6 = *(_BYTE *)(v1 + 33);
  type metadata accessor for LocalDispatchTimer();
  swift_beginAccess(v4, v19, 0LL, 0LL);
  double v7 = *v4;
  int v8 = *(void **)(v3 + 56);
  uint64_t v9 = swift_allocObject(&unk_100072330, 24LL, 7LL);
  swift_weakInit(v9 + 16, v3);
  uint64_t v10 = swift_allocObject(&unk_100072358, 34LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v10 + 24) = v9;
  *(_BYTE *)(v10 + 32) = v5;
  *(_BYTE *)(v10 + 33) = v6;
  id v11 = v8;
  swift_retain(a1);
  uint64_t v12 = LocalDispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)( v8,  (uint64_t)sub_10002D2C8,  v10,  v7,  0.0,  1.0);
  uint64_t v13 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
  *(void *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer) = v12;
  uint64_t result = swift_release(v14);
  uint64_t v16 = *(void *)(v3 + v13);
  if (v16)
  {
    uint64_t v17 = *(void (**)(__n128))(*(void *)v16 + 152LL);
    __n128 v18 = swift_retain(v16);
    v17(v18);
    return swift_release(v16);
  }

  return result;
}

uint64_t sub_10002D294()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002D2B8()
{
  return sub_10002E5F8((void (*)(void))&_swift_release, 34LL);
}

void sub_10002D2C8()
{
}

uint64_t sub_10002D2D8()
{
  return sub_10002E5F8((void (*)(void))&_swift_bridgeObjectRelease, 32LL);
}

void sub_10002D2E8(void *a1, void *a2, char a3)
{
}

void sub_10002D2F4(void *a1, uint64_t a2, char a3)
{
}

uint64_t sub_10002D300()
{
  return sub_10002E84C((void (*)(void))&_swift_bridgeObjectRelease, 50LL);
}

uint64_t sub_10002D310(uint64_t a1, char a2)
{
  return sub_1000234A4( a1,  a2 & 1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(_BYTE *)(v2 + 48),  *(unsigned __int8 *)(v2 + 49));
}

uint64_t sub_10002D328(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  void v7[4] = j___s14bluetoothuserd11TransactionC7captureyyF;
  uint64_t v8 = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_100005A3C;
  v7[3] = &unk_1000723E8;
  uint64_t v4 = _Block_copy(v7);
  uint64_t v5 = v8;
  swift_retain(a1);
  sub_10002D9F8((uint64_t)j___s14bluetoothuserd11TransactionC7captureyyF, a1);
  swift_release(v5);
  [v3 setCompletionBlock:v4];
  _Block_release(v4);
  return swift_release(a1);
}

void sub_10002D3F0(uint64_t a1, void *a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v29 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    id v14 = [v13 recordID];
    id v15 = [v14 recordName];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    id v19 = [a2 recordName];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    if (v16 == v20 && v18 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2LL);
      return;
    }

    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0LL);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }

    swift_release(v12);

    int64_t v5 = v29;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v8 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v25 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v26) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v25 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v26) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v25 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v26) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v25 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }

void sub_10002D6A4(uint64_t a1, void *a2)
{
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 16 * i + 8);
    sub_100010A58(0LL, (unint64_t *)&unk_10007BD10, &OBJC_CLASS___NSObject_ptr);
    id v14 = v12;
    swift_retain(v13);
    id v15 = [v14 recordID];
    id v16 = [a2 recordID];
    char v17 = static NSObject.== infix(_:_:)(v15, v16);

    if ((v17 & 1) != 0)
    {
LABEL_23:
      swift_release(a1);
      return;
    }

    swift_release(v13);

    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v9 >= v19) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v18 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v19) {
        goto LABEL_23;
      }
      unint64_t v10 = *(void *)(v18 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v19) {
          goto LABEL_23;
        }
        unint64_t v10 = *(void *)(v18 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v19) {
            goto LABEL_23;
          }
          unint64_t v10 = *(void *)(v18 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v19) {
              goto LABEL_23;
            }
            unint64_t v10 = *(void *)(v18 + 8 * v11);
            int64_t v6 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_10002D8EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100003288(&qword_10007B188);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10002D9F8(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10002DA08()
{
  return swift_deallocObject(v0, 58LL, 7LL);
}

uint64_t sub_10002DA48(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

void sub_10002DA54()
{
}

uint64_t sub_10002DA6C(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_10002DA78(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100010A58(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

id sub_10002DAB8(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

uint64_t sub_10002DAC4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_10002DAE0()
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v0 + 256LL))(v16);
  uint64_t v1 = v17;
  uint64_t v20 = v17;
  __int128 v19 = v16[0];
  swift_bridgeObjectRetain(v17);
  sub_1000295D0((uint64_t)&v19);
  __int128 v18 = v16[1];
  sub_1000295D0((uint64_t)&v18);
  sub_1000295F8(&v20);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = (void **)(v1 + 40);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
      int64_t v8 = v7;
      swift_bridgeObjectRetain(v5);
      v9._uint64_t countAndFlagsBits = v4;
      v9._object = v5;
      v10._uint64_t countAndFlagsBits = v6;
      v10._object = v8;
      v11.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v9, v10).super.isa;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11.super.isa);
      unint64_t v13 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v12 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v13 >= v12 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
      }
      uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11.super.isa);
      specialized Array._endMutation()(v14);
      v3 += 2;
      --v2;
    }

    while (v2);
    sub_1000295F8(&v20);
  }

  sub_1000295F8(&v20);
  sub_100014DE4((BOOL)_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
}

uint64_t sub_10002DC74()
{
  return sub_10002DEE0((void (*)(void))&_swift_release);
}

uint64_t sub_10002DC80()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v1 + 280LL))();
  uint64_t v3 = *(void *)(v15 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
    uint64_t v5 = (void *)(v15 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v17 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
    do
    {
      uint64_t v6 = v5[3];
      uint64_t v7 = v5[4];
      sub_100008E78(v5, v6);
      uint64_t v8 = sub_100003288(&qword_10007B1F0);
      uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
      *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_100060EB0;
      *(void *)(v9 + 32) = v2;
      uint64_t v18 = v9;
      specialized Array._endMutation()(v9);
      Swift::String v10 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(v7 + 8);
      id v11 = v2;
      v10(v1, _swiftEmptyArrayStorage, v18, v6, v7);
      swift_bridgeObjectRelease(v18);
      uint64_t v12 = v5[3];
      uint64_t v13 = v5[4];
      sub_100008E78(v5, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 24))( v1,  *(unsigned __int8 *)(v1 + v17),  v12,  v13);
      uint64_t v5 = (void *)((char *)v5 + v16);
      --v3;
    }

    while (v3);
  }

  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_10002DDDC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002DDEC(uint64_t a1, uint64_t a2)
{
  return sub_10001D7A0(a2, *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_10002DE18()
{
  return sub_10001D61C(*(void *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_10002DE24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(&unk_1000725B0, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t (*)(uint64_t, char), uint64_t))(*(void *)v2 + 816LL);
  swift_retain(a2);
  v6(2LL, 0LL, sub_10002DEC8, v5);
  return swift_release(v5);
}

uint64_t sub_10002DE94()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002DEB8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10002DEC8(uint64_t a1, char a2)
{
  return sub_10001D13C(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10002DED4()
{
  return sub_10002DEE0((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10002DEE0(void (*a1)(void))
{
  return swift_deallocObject(v1, 32LL, 7LL);
}

void sub_10002DF10(uint64_t a1, char a2)
{
}

void sub_10002DF1C(uint64_t a1)
{
}

uint64_t sub_10002DF44()
{
  return sub_10002E5F8((void (*)(void))&_swift_release, 32LL);
}

uint64_t sub_10002DF54(uint64_t a1, char a2)
{
  return sub_1000132F0(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10002DF60(uint64_t a1)
{
  return sub_100013A14(a1, v1);
}

void sub_10002DF68(uint64_t a1)
{
}

uint64_t sub_10002DF94()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10002DFC8(uint64_t a1, uint64_t a2)
{
  return sub_10001480C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void ***)(v2 + 40));
}

uint64_t sub_10002DFD4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10002DFF8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_10002E020()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
    uint64_t v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_100008E78(v4, v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v0, v6, v7);
      uint64_t v4 = (void *)((char *)v4 + v5);
      --v2;
    }

    while (v2);
  }

  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10002E0C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10002E0D8(void *a1, char a2)
{
}

void sub_10002E0E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  id v5 = sub_100011440();
  uint64_t v6 = (void *)swift_allocObject(&unk_100072740, 40LL, 7LL);
  _OWORD v6[2] = a1;
  v6[3] = v3;
  v6[4] = v4;
  v9[4] = sub_10002E1FC;
  Swift::String v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  v9[2] = sub_1000146AC;
  v9[3] = &unk_100072758;
  uint64_t v7 = _Block_copy(v9);
  uint64_t v8 = v10;
  swift_retain(a1);
  swift_retain(v4);
  swift_release(v8);
  [v5 accountInfoWithCompletionHandler:v7];
  _Block_release(v7);
}

uint64_t sub_10002E1D0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10002E1FC(void *a1, void *a2)
{
  id v5 = *(void (**)(void *, uint64_t))(v2 + 24);
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain(a2);
    v5(a2, 1LL);
    swift_errorRelease(a2);
  }

  else if (a1)
  {
    id v6 = a1;
    v5(a1, 0LL);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000002DLL,  0x80000001000673E0LL,  "bluetoothuserd/CloudStorageCoordinator.swift",  44LL,  2LL,  280LL,  0);
    __break(1u);
  }

void sub_10002E2E8(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

uint64_t sub_10002E2F4()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
    uint64_t v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v5 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
    uint64_t v6 = *(void *)(v3 + 72);
    do
    {
      uint64_t v7 = v4[3];
      uint64_t v8 = v4[4];
      sub_100008E78(v4, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 24))(v0, *(unsigned __int8 *)(v0 + v5), v7, v8);
      uint64_t v4 = (void *)((char *)v4 + v6);
      --v2;
    }

    while (v2);
  }

  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10002E3B0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002E3C0(uint64_t a1, char a2)
{
  return sub_100016E6C(a1, a2 & 1, v2);
}

BOOL sub_10002E3CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_100003288(&qword_10007AD48);
  uint64_t v5 = sub_100008C48(&qword_10007B260, &qword_10007AD48, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_10002E450(uint64_t a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_100026D50(a1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10002E4C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10002E5DC(uint64_t a1, char a2)
{
}

uint64_t sub_10002E5E8()
{
  return sub_10002E5F8((void (*)(void))&_swift_release, 32LL);
}

uint64_t sub_10002E5F8(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

void sub_10002E634(uint64_t a1, char a2)
{
}

uint64_t sub_10002E640(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10002E664(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_10002E698()
{
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10002E6CC(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  (*(void (**)(void))(v1 + 24))();
  return v3(a1);
}

uint64_t sub_10002E70C()
{
  return swift_deallocObject(v0, 57LL, 7LL);
}

uint64_t sub_10002E748()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 56);
  Transaction.capture()();
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v1 + 872LL))( v4,  v5,  v2,  v3);
  }
  unint64_t v7 = sub_100029E54();
  uint64_t v8 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v7, 0LL, 0LL);
  *uint64_t v9 = 0LL;
  v2(v8, 1LL);
  return swift_errorRelease(v8);
}

uint64_t sub_10002E804()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002E828(void *a1, void *a2, char a3)
{
  return sub_10001AA70(a1, a2, a3 & 1, v3);
}

uint64_t sub_10002E834(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10001B2B0(a1, a2, a3, v3);
}

uint64_t sub_10002E83C()
{
  return sub_10002E84C((void (*)(void))&_swift_release, 48LL);
}

uint64_t sub_10002E84C(void (*a1)(void), uint64_t a2)
{
  swift_release(*(void *)(v2 + 24));
  a1(*(void *)(v2 + 32));
  a1(*(void *)(v2 + 40));
  return swift_deallocObject(v2, a2, 7LL);
}

void sub_10002E8A0(void *a1, void *a2, uint64_t *a3, unint64_t a4, __int16 a5)
{
}

uint64_t sub_10002E8CC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10002E908(uint64_t a1, char a2)
{
  return sub_10001C6F4( a1,  a2 & 1,  *(void **)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void (**)(uint64_t, uint64_t))(v2 + 40),  *(void *)(v2 + 48));
}

void sub_10002E91C(void *a1)
{
}

uint64_t sub_10002E924()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10002E948()
{
  uint64_t v1 = v0[2];
  uint64_t v15 = (uint64_t *)v0[4];
  uint64_t v16 = (void *)v0[3];
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 280LL))();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease(v2);
  }
  uint64_t v5 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
  uint64_t v14 = v3;
  uint64_t v6 = (void *)(v3 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  swift_beginAccess(v16, v18, 0LL, 0LL);
  swift_beginAccess(v15, v17, 0LL, 0LL);
  uint64_t v7 = *(void *)(v5 + 72);
  do
  {
    uint64_t v8 = v6[3];
    uint64_t v9 = v6[4];
    sub_100008E78(v6, v8);
    uint64_t v10 = *v16;
    uint64_t v11 = *v15;
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain(*v16);
    swift_bridgeObjectRetain(v11);
    v12(v1, v10, v11, v8, v9);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    uint64_t v6 = (void *)((char *)v6 + v7);
    --v4;
  }

  while (v4);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_10002EA98()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002EAA8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  id v8 = a1;
  return sub_100008E9C(a2, a3);
}

uint64_t sub_10002EADC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRelease(a1);
  }

  return sub_100008B2C(a2, a3);
}

uint64_t sub_10002EB10()
{
  return sub_10002EB18(48LL);
}

uint64_t sub_10002EB18(uint64_t a1)
{
  swift_release(*(void *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7LL);
}

void sub_10002EB58()
{
}

uint64_t sub_10002EB64(void *a1)
{
  return sub_100017C00(a1, v1);
}

uint64_t sub_10002EB6C(void *a1)
{
  id v3 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  unint64_t v5 = *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v4 = *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v5 >= v4 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1LL);
  }
  uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v3);
  specialized Array._endMutation()(v6);
  return swift_endAccess(v8);
}

uint64_t sub_10002EC04()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002EC28(void *a1)
{
  return sub_100017E38(a1, *(void **)(v1 + 16));
}

uint64_t sub_10002EC30()
{
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));

  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10002EC7C(void *a1, __int16 a2)
{
}

id sub_10002ECB0(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

void sub_10002ECBC(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

uint64_t sub_10002ECC8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002ECEC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 280LL))();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease(v3);
  }
  uint64_t v6 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
  uint64_t v14 = v4;
  uint64_t v7 = (void *)(v4 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
  swift_beginAccess(v2, v15, 0LL, 0LL);
  uint64_t v8 = *(void *)(v6 + 72);
  do
  {
    uint64_t v9 = v7[3];
    uint64_t v10 = v7[4];
    sub_100008E78(v7, v9);
    uint64_t v11 = *v2;
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain(*v2);
    v12(v1, v11, v9, v10);
    swift_bridgeObjectRelease(v11);
    uint64_t v7 = (void *)((char *)v7 + v8);
    --v5;
  }

  while (v5);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_10002EE00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002EE10()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10002EEAC(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_10001979C( a1,  v4,  *(void **)(v2 + 24),  v2 + v6,  *(uint64_t (**)(uint64_t, uint64_t))v7,  *(void **)(v7 + 8));
}

uint64_t sub_10002EF14(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10002EF24()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(sub_100003288(&qword_10007AD48) - 8);
    char v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_100008E78(v4, v6);
      (*(void (**)(uint64_t, void *, void *, uint64_t, uint64_t))(v7 + 8))( v0,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  v6,  v7);
      char v4 = (void *)((char *)v4 + v5);
      --v2;
    }

    while (v2);
  }

  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10002EFE4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002EFF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003288(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002F038(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000064CC(&qword_10007BFF0);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t *sub_10002F098(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void type metadata accessor for Result(uint64_t a1)
{
}

uint64_t sub_10002F0EC()
{
  return sub_10000662C( &qword_10007B2E8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000613CC);
}

uint64_t sub_10002F118()
{
  return sub_10000662C( &qword_10007B2F0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000613F8);
}

uint64_t sub_10002F144()
{
  return sub_10000662C( &qword_10007B2F8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614B4);
}

uint64_t sub_10002F170()
{
  return sub_10000662C( &qword_10007B300,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100061480);
}

uint64_t sub_10002F19C()
{
  return sub_10000662C( &qword_10007B308,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_10006143C);
}

uint64_t sub_10002F1C8()
{
  return sub_10000662C( &qword_10007B310,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000615A0);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_10002F208(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_10002F24C()
{
  return sub_10000662C( &qword_10007B318,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100061564);
}

unint64_t sub_10002F27C()
{
  unint64_t result = qword_10007B320;
  if (!qword_10007B320)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10007B320);
  }

  return result;
}

uint64_t sub_10002F2C0()
{
  return sub_10000662C( &qword_10007B328,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000615DC);
}

uint64_t sub_10002F2EC()
{
  return sub_10000662C( (unint64_t *)&unk_10007B200,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000614F8);
}

uint64_t sub_10002F410@<X0>(uint64_t a1@<X8>)
{
  return sub_10002C628(a1);
}

void sub_10002F424(uint64_t a1)
{
}

uint64_t sub_10002F444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = objc_autoreleasePoolPush();
  uint64_t v9 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = PropertyListEncoder.init()();
  uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, a3, *(void *)(*(void *)(a5 + 8) + 16LL));
  swift_release(v10);
  objc_autoreleasePoolPop(v8);
  return v11;
}

uint64_t sub_10002F4F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v11 = objc_autoreleasePoolPush();
  uint64_t v12 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a3, a1, a2, a3, *(void *)(*(void *)(a4 + 8) + 8LL));
  swift_release(v13);
  objc_autoreleasePoolPop(v11);
  if (v5)
  {
    swift_errorRelease(v5);
    uint64_t v14 = 1LL;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))(a5, v14, 1LL, a3);
}

Class sub_10002F5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = objc_autoreleasePoolPush();
  sub_10002F638(v2, a1, a2, &v7);
  objc_autoreleasePoolPop(v5);
  return v7;
}

uint64_t sub_10002F638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Class *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
  unint64_t v15 = v14;
  sub_10002FB70(v13, v14);
  Class isa = v16;
  sub_100008B40(v13, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  if (!isa) {
    Class isa = sub_10002F73C((uint64_t)v10, a2, a3).super.isa;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
  Class v20 = isa;
  uint64_t result = (*(uint64_t (**)(Class *, uint64_t, uint64_t))(a3 + 64))(&v20, a2, a3);
  *a4 = v20;
  return result;
}

CKRecord sub_10002F73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100010A58(0LL, &qword_10007B198, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 32LL))(a2);
  uint64_t v11 = v10;
  sub_100010A58(0LL, &qword_10007B210, &OBJC_CLASS___CKRecordZoneID_ptr);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  uint64_t v38 = a3;
  uint64_t v13 = v12(a2, a3);
  unint64_t v15 = v14;
  v16._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v16._object = v17;
  v18._uint64_t countAndFlagsBits = v13;
  v18._object = v15;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
  v20._uint64_t countAndFlagsBits = v9;
  v20._object = v11;
  v21.super.Class isa = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
  uint64_t v22 = sub_100030000();
  uint64_t v39 = v6;
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v22, v5);
  char v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = v21.super.isa;
    int64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = v28;
    *(_DWORD *)int64_t v27 = 136315138;
    uint64_t v36 = v5;
    uint64_t v29 = v38;
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(a2, v38);
    unint64_t v32 = v31;
    uint64_t v40 = sub_100003E68(v30, v31, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v32);
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Failed to unarchive record -- creating new %s record",  v27,  0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    unint64_t v33 = v27;
    v21.super.Class isa = v37;
    swift_slowDealloc(v33, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v36);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v5);
    uint64_t v29 = v38;
  }

  sub_100010A58(0LL, &qword_10007B1B0, &OBJC_CLASS___CKRecord_ptr);
  v34._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(a2, v29);
  return CKRecord.init(recordType:recordID:)(v34, v21);
}

uint64_t sub_10002FA18()
{
  id v1 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [v0 encodeSystemFieldsWithCoder:v1];
  [v1 finishEncoding];
  id v2 = [v1 encodedData];
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id sub_10002FAB4()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = 0LL;
  id v2 = [v0 initForReadingFromData:isa error:&v7];

  id v3 = v7;
  if (v2)
  {
    id v4 = v7;
  }

  else
  {
    id v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }

  return v2;
}

void sub_10002FB70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }

id sub_10002FC0C()
{
  if ((v4 & 0xFF000000000000LL) == 0) {
    return 0LL;
  }
  id v8 = objc_allocWithZone(&OBJC_CLASS___NSKeyedUnarchiver);
  sub_100008EB0(v5, v4);
  uint64_t v9 = (os_log_s *)sub_10002FAB4();
  if (v1)
  {
    sub_100008B40(v5, v4);
    uint64_t v10 = sub_100030000();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v10, v0);
    swift_errorRetain(v1);
    uint64_t v11 = swift_errorRetain(v1);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(void *)(v7 - 104) = swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v14 = 138412290;
      swift_errorRetain(v1);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(void *)(v7 - 96) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 - 96, v7 - 88, v14 + 4, v14 + 12);
      Swift::String v16 = *(uint64_t **)(v7 - 104);
      *Swift::String v16 = v15;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to create unarchiver: %@", v14, 0xCu);
      uint64_t v17 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v16, 1LL, v17);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      swift_errorRelease(v1);
    }

    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v0);
    return 0LL;
  }

  Swift::String v18 = v9;
  sub_100008B40(v5, v4);
  id v19 = [objc_allocWithZone(CKRecord) initWithCoder:v18];
  if (!v19)
  {
    uint64_t v22 = sub_100030000();
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v22, v0);
    char v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to extract CKRecord from cloudKitMetadata", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
      int64_t v27 = v18;
    }

    else
    {
      int64_t v27 = v24;
      char v24 = v18;
    }

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v0);
    return 0LL;
  }

  id v20 = v19;

  return v20;
}

void *sub_10002FEE8()
{
  return &unk_100072E68;
}

uint64_t sub_10002FEF4(uint64_t a1)
{
  return sub_100030200(a1, qword_100080748, 0x6E6F6D656164LL, 0xE600000000000000LL);
}

uint64_t sub_10002FF10()
{
  return sub_10002FF60(&qword_10007E330, (uint64_t)qword_100080748, (uint64_t)sub_10002FEF4);
}

uint64_t sub_10002FF2C(uint64_t a1)
{
  return sub_100030200(a1, qword_100080760, 7565409LL, 0xE300000000000000LL);
}

uint64_t sub_10002FF44()
{
  return sub_10002FF60(&qword_10007E338, (uint64_t)qword_100080760, (uint64_t)sub_10002FF2C);
}

uint64_t sub_10002FF60(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return sub_100010C94(v4, a2);
}

uint64_t sub_10002FFA0(uint64_t a1)
{
  return sub_100030200(a1, qword_100080778, 0x6E614D6775626564LL, 0xEC00000072656761LL);
}

uint64_t sub_10002FFC8()
{
  return sub_10002FF60(&qword_10007E340, (uint64_t)qword_100080778, (uint64_t)sub_10002FFA0);
}

uint64_t sub_10002FFE4(uint64_t a1)
{
  return sub_100030200(a1, qword_100080790, 0x64756F6C63LL, 0xE500000000000000LL);
}

uint64_t sub_100030000()
{
  return sub_10002FF60(&qword_10007E348, (uint64_t)qword_100080790, (uint64_t)sub_10002FFE4);
}

uint64_t sub_10003001C(uint64_t a1)
{
  return sub_100030200(a1, qword_1000807A8, 0x69617064756F6C63LL, 0xEC000000676E6972LL);
}

uint64_t sub_100030044()
{
  return sub_10002FF60(&qword_10007E350, (uint64_t)qword_1000807A8, (uint64_t)sub_10003001C);
}

uint64_t sub_100030060(uint64_t a1)
{
  return sub_100030200(a1, qword_1000807C0, 0x6F745364756F6C63LL, 0xEC00000065676172LL);
}

uint64_t sub_100030088()
{
  return sub_10002FF60(&qword_10007E358, (uint64_t)qword_1000807C0, (uint64_t)sub_100030060);
}

uint64_t sub_1000300A4(uint64_t a1)
{
  return sub_100030200(a1, qword_1000807D8, 0x616E614D656C6966LL, 0xEB00000000726567LL);
}

uint64_t sub_1000300CC()
{
  return sub_10002FF60(&qword_10007E360, (uint64_t)qword_1000807D8, (uint64_t)sub_1000300A4);
}

uint64_t sub_1000300E8(uint64_t a1)
{
  return sub_100030200(a1, qword_1000807F0, 0x67696C6C65746E69LL, 0xEC00000065636E65LL);
}

uint64_t sub_100030110()
{
  return sub_10002FF60(&qword_10007E368, (uint64_t)qword_1000807F0, (uint64_t)sub_1000300E8);
}

uint64_t sub_10003012C(uint64_t a1)
{
  return sub_100030200(a1, qword_100080808, 7566955LL, 0xE300000000000000LL);
}

uint64_t sub_100030144()
{
  return sub_10002FF60(&qword_10007E370, (uint64_t)qword_100080808, (uint64_t)sub_10003012C);
}

uint64_t sub_100030160(uint64_t a1)
{
  return sub_100030200(a1, qword_100080820, 0x6163696669746F6ELL, 0xEC0000006E6F6974LL);
}

uint64_t sub_100030188()
{
  return sub_10002FF60(&qword_10007E378, (uint64_t)qword_100080820, (uint64_t)sub_100030160);
}

uint64_t sub_1000301A4(uint64_t a1)
{
  return sub_100030200(a1, qword_100080838, 0x746361736E617274LL, 0xEB000000006E6F69LL);
}

uint64_t sub_1000301CC()
{
  return sub_10002FF60(&qword_10007E380, (uint64_t)qword_100080838, (uint64_t)sub_1000301A4);
}

uint64_t sub_1000301E8(uint64_t a1)
{
  return sub_100030200(a1, qword_100080850, 6516856LL, 0xE300000000000000LL);
}

uint64_t sub_100030200(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10002F098(v7, a2);
  sub_100010C94(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000017LL, 0x8000000100067540LL, a3, a4);
}

uint64_t sub_100030274()
{
  return sub_10002FF60(&qword_10007E388, (uint64_t)qword_100080850, (uint64_t)sub_1000301E8);
}

ValueMetadata *type metadata accessor for LogConstants()
{
  return &type metadata for LogConstants;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

BOOL sub_1000302B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void *sub_1000302C8@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1000302E8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000302F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100035A1C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100030350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100035A1C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10003039C()
{
  if (*v0) {
    return 0x6F636341656D6153LL;
  }
  else {
    return 0x6E776F6E6B6E55LL;
  }
}

void *sub_1000303E0()
{
  return &unk_10007B350;
}

uint64_t type metadata accessor for CloudPairedDeviceRecord(uint64_t a1)
{
  uint64_t result = qword_10007EC20;
  if (!qword_10007EC20) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudPairedDeviceRecord);
  }
  return result;
}

uint64_t sub_100030428()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  sub_10002F098(v0, qword_100080868);
  sub_100010C94(v0, (uint64_t)qword_100080868);
  return URL.init(fileURLWithPath:isDirectory:)(0xD000000000000018LL, 0x8000000100067640LL, 1LL);
}

uint64_t sub_10003048C()
{
  if (qword_10007E390 != -1) {
    swift_once(&qword_10007E390, sub_100030428);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  return sub_100010C94(v0, (uint64_t)qword_100080868);
}

unint64_t sub_1000304D4(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v172 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v167 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003288((uint64_t *)&unk_10007B360);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v170 = (char *)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v163 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v168 = (char *)&v163 - v13;
  __chkstk_darwin(v12);
  uint64_t v169 = (uint64_t)&v163 - v14;
  uint64_t v15 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v16 = sub_10000662C(&qword_10007BC90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061870);
  Class v17 = sub_10002F5E0((uint64_t)v15, v16);
  unint64_t v184 = 0xD000000000000019LL;
  unint64_t v185 = 0x8000000100067600LL;
  Swift::String v18 = (uint64_t *)(v1 + v15[6]);
  id v19 = (void *)v18[1];
  v178._uint64_t countAndFlagsBits = *v18;
  v178._object = v19;
  swift_bridgeObjectRetain(v19);
  v20._uint64_t countAndFlagsBits = 8236LL;
  v20._object = (void *)0xE200000000000000LL;
  String.append(_:)(v20);
  object = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(object);
  v183._uint64_t countAndFlagsBits = *(void *)(v1 + v15[10]);
  v178._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v178._object = v22;
  v23._uint64_t countAndFlagsBits = 8236LL;
  v23._object = (void *)0xE200000000000000LL;
  String.append(_:)(v23);
  char v24 = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(v24);
  int v173 = v15;
  if (*(_BYTE *)(v1 + v15[11]) == 1)
  {
    v178._uint64_t countAndFlagsBits = 0LL;
    v178._object = (void *)0xE000000000000000LL;
    v25._uint64_t countAndFlagsBits = 0x6F636341656D6153LL;
    v25._object = (void *)0xEB00000000746E75LL;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(0xEB00000000746E75LL);
    v26._uint64_t countAndFlagsBits = 8236LL;
    v26._object = (void *)0xE200000000000000LL;
    String.append(_:)(v26);
    int64_t v27 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v27);
  }

  if (*(void *)(v1 + v173[12]))
  {
    v183._uint64_t countAndFlagsBits = *(void *)(v1 + v173[12]);
    v178._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    v178._object = v28;
    v29._uint64_t countAndFlagsBits = 8236LL;
    v29._object = (void *)0xE200000000000000LL;
    String.append(_:)(v29);
    uint64_t v30 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v30);
  }

  v31._uint64_t countAndFlagsBits = 0x203A454C66LL;
  v31._object = (void *)0xE500000000000000LL;
  String.append(_:)(v31);
  unint64_t v32 = v173;
  v183._uint64_t countAndFlagsBits = *(void *)(v1 + v173[7]);
  v178._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v178._object = v33;
  v34._uint64_t countAndFlagsBits = 8236LL;
  v34._object = (void *)0xE200000000000000LL;
  String.append(_:)(v34);
  uint64_t v35 = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(v35);
  uint64_t v171 = v11;
  if (a1 >= 20)
  {
    Data.hexString.getter(*(void *)(v1 + v32[8]), *(void *)(v1 + v32[8] + 8));
    v178._uint64_t countAndFlagsBits = v93;
    v178._object = v94;
    v95._uint64_t countAndFlagsBits = 8236LL;
    v95._object = (void *)0xE200000000000000LL;
    String.append(_:)(v95);
    uint64_t v96 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v96);
    v178._uint64_t countAndFlagsBits = 0LL;
    v178._object = (void *)0xE000000000000000LL;
    uint64_t v97 = *(void *)(v1 + v32[9]);
    uint64_t v98 = *(void *)(v97 + 16);
    if (v98)
    {
      uint64_t v166 = v2;
      swift_bridgeObjectRetain(v97);
      unint64_t v99 = (unint64_t *)(v97 + 40);
      uint64_t v100 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v101 = *(v99 - 1);
        unint64_t v102 = *v99;
        sub_100008EB0(v101, *v99);
        Data.hexString.getter(v101, v102);
        uint64_t v104 = v103;
        uint64_t v106 = v105;
        sub_100008B40(v101, v102);
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0) {
          uint64_t v100 = sub_10000F040(0LL, v100[2] + 1LL, 1, v100);
        }
        unint64_t v108 = v100[2];
        unint64_t v107 = v100[3];
        if (v108 >= v107 >> 1) {
          uint64_t v100 = sub_10000F040((void *)(v107 > 1), v108 + 1, 1, v100);
        }
        v99 += 2;
        v100[2] = v108 + 1;
        uint64_t v109 = &v100[2 * v108];
        v109[4] = v104;
        v109[5] = v106;
        --v98;
      }

      while (v98);
      swift_bridgeObjectRelease(v97);
    }

    else
    {
      uint64_t v100 = _swiftEmptyArrayStorage;
    }

    v114._uint64_t countAndFlagsBits = Array.description.getter(v100, &type metadata for String);
    uint64_t v115 = v114._object;
    String.append(_:)(v114);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v115);
    v116._uint64_t countAndFlagsBits = 8236LL;
    v116._object = (void *)0xE200000000000000LL;
    String.append(_:)(v116);
    uint64_t v113 = v178._object;
    String.append(_:)(v178);
  }

  else
  {
    uint64_t v36 = (uint64_t *)(v1 + v32[8]);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    sub_100008EB0(*v36, v38);
    uint64_t v39 = Data.description.getter(v37, v38);
    uint64_t v41 = v40;
    sub_100008B40(v37, v38);
    v178._uint64_t countAndFlagsBits = v39;
    v178._object = v41;
    v42._uint64_t countAndFlagsBits = 8236LL;
    v42._object = (void *)0xE200000000000000LL;
    String.append(_:)(v42);
    uint64_t v43 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v43);
    v183._uint64_t countAndFlagsBits = 0LL;
    v183._object = (void *)0xE000000000000000LL;
    uint64_t v44 = *(void *)(v2 + v32[9]);
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
      uint64_t v166 = v2;
      uint64_t v164 = v4;
      os_log_type_t v165 = v17;
      swift_bridgeObjectRetain_n(v44, 2LL);
      uint64_t v163 = v44;
      unint64_t v46 = (unint64_t *)(v44 + 40);
      uint64_t v47 = (char *)_swiftEmptyArrayStorage;
      do
      {
        uint64_t v176 = v46;
        uint64_t v177 = v45;
        uint64_t v48 = *(v46 - 1);
        uint64_t v49 = *v46;
        sub_100008EB0(v48, *v46);
        unint64_t v174 = v49;
        uint64_t v175 = v48;
        Data.hexString.getter(v48, v49);
        unint64_t v51 = v50;
        uint64_t v53 = sub_1000340EC(8LL, v52, v50);
        uint64_t v55 = v54;
        uint64_t v57 = v56;
        uint64_t v59 = v58;
        swift_bridgeObjectRelease(v51);
        v178._uint64_t countAndFlagsBits = 3026478LL;
        v178._object = (void *)0xE300000000000000LL;
        uint64_t v181 = static String._fromSubstring(_:)(v53, v55, v57, v59);
        uint64_t v182 = v60;
        String.append<A>(contentsOf:)(&v178, &type metadata for String, &protocol witness table for String);
        uint64_t v61 = Substring.init(_:)(v181, v182);
        uint64_t v63 = v62;
        uint64_t v65 = v64;
        uint64_t v67 = v66;
        swift_bridgeObjectRelease(v59);
        Data.hexString.getter(v48, v49);
        unint64_t v69 = v68;
        unint64_t v71 = sub_100034174(5uLL, v70, v68);
        uint64_t v73 = v72;
        uint64_t v75 = v74;
        uint64_t v77 = v76;
        swift_bridgeObjectRelease(v69);
        v178._uint64_t countAndFlagsBits = v71;
        v178._object = v73;
        uint64_t v179 = v75;
        uint64_t v180 = v77;
        swift_bridgeObjectRetain(v67);
        uint64_t v78 = static String._fromSubstring(_:)(v61, v63, v65, v67);
        uint64_t v80 = v79;
        swift_bridgeObjectRelease(v67);
        uint64_t v181 = v78;
        uint64_t v182 = v80;
        unint64_t v81 = sub_10003421C();
        String.append<A>(contentsOf:)(&v178, &type metadata for Substring, v81);
        uint64_t v82 = Substring.init(_:)(v181, v182);
        uint64_t v84 = v83;
        uint64_t v86 = v85;
        uint64_t v88 = v87;
        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v77);
        sub_100008B40(v175, v174);
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0) {
          uint64_t v47 = sub_100033F30(0LL, *((void *)v47 + 2) + 1LL, 1, v47);
        }
        unint64_t v90 = *((void *)v47 + 2);
        unint64_t v89 = *((void *)v47 + 3);
        uint64_t v91 = v176;
        if (v90 >= v89 >> 1) {
          uint64_t v47 = sub_100033F30((char *)(v89 > 1), v90 + 1, 1, v47);
        }
        unint64_t v46 = v91 + 2;
        *((void *)v47 + 2) = v90 + 1;
        uint64_t v92 = &v47[32 * v90];
        *((void *)v92 + 4) = v82;
        *((void *)v92 + 5) = v84;
        *((void *)v92 + 6) = v86;
        *((void *)v92 + 7) = v88;
        uint64_t v45 = v177 - 1;
      }

      while (v177 != 1);
      swift_bridgeObjectRelease_n(v163, 2LL);
      Class v17 = v165;
      uint64_t v4 = v164;
    }

    else
    {
      uint64_t v47 = (char *)_swiftEmptyArrayStorage;
    }

    v110._uint64_t countAndFlagsBits = Array.description.getter(v47, &type metadata for Substring);
    uint64_t v111 = v110._object;
    String.append(_:)(v110);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v111);
    v112._uint64_t countAndFlagsBits = 8236LL;
    v112._object = (void *)0xE200000000000000LL;
    String.append(_:)(v112);
    uint64_t v113 = v183._object;
    String.append(_:)(v183);
  }

  swift_bridgeObjectRelease(v113);
  id v117 = -[objc_class recordChangeTag](v17, "recordChangeTag");
  if (v117)
  {
    char v118 = v117;
    uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    uint64_t v121 = v120;

    v122._uint64_t countAndFlagsBits = 540691267LL;
    v122._object = (void *)0xE400000000000000LL;
    String.append(_:)(v122);
    v178._uint64_t countAndFlagsBits = v119;
    v178._object = v121;
    v123._uint64_t countAndFlagsBits = 8236LL;
    v123._object = (void *)0xE200000000000000LL;
    String.append(_:)(v123);
    uint64_t v124 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v124);
    v178._uint64_t countAndFlagsBits = 0LL;
    v178._object = (void *)0xE000000000000000LL;
    id v125 = -[objc_class modifiedByDevice](v17, "modifiedByDevice");
    if (v125)
    {
      uint64_t v126 = v125;
      uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
      os_log_type_t v129 = v128;
    }

    else
    {
      os_log_type_t v129 = (void *)0xE100000000000000LL;
      uint64_t v127 = 45LL;
    }

    v133._uint64_t countAndFlagsBits = v127;
    v133._object = v129;
    String.append(_:)(v133);
    swift_bridgeObjectRelease(v129);
    v134._uint64_t countAndFlagsBits = 8236LL;
    v134._object = (void *)0xE200000000000000LL;
    String.append(_:)(v134);
    id v135 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v135);
    v178._uint64_t countAndFlagsBits = 544490595LL;
    v178._object = (void *)0xE400000000000000LL;
    id v136 = -[objc_class creationDate](v17, "creationDate");
    if (v136)
    {
      uint64_t v137 = v136;
      uint64_t v138 = (uint64_t)v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v139 = v172;
      uint64_t v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
      v140(v138, 0LL, 1LL, v4);
    }

    else
    {
      uint64_t v139 = v172;
      uint64_t v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
      uint64_t v138 = (uint64_t)v168;
      v140((uint64_t)v168, 1LL, 1LL, v4);
    }

    uint64_t v141 = v169;
    sub_100034030(v138, v169);
    unint64_t v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48);
    if (v142(v141, 1LL, v4))
    {
      sub_10000B4A8(v141, (uint64_t *)&unk_10007B360);
      uint64_t v143 = (void *)0xE100000000000000LL;
      uint64_t v144 = 45LL;
    }

    else
    {
      uint64_t v145 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v167, v141, v4);
      sub_10000B4A8(v141, (uint64_t *)&unk_10007B360);
      uint64_t v144 = sub_100035A64();
      uint64_t v146 = v139;
      uint64_t v143 = v147;
      (*(void (**)(char *, uint64_t))(v146 + 8))(v145, v4);
    }

    v148._uint64_t countAndFlagsBits = v144;
    v148._object = v143;
    String.append(_:)(v148);
    swift_bridgeObjectRelease(v143);
    v149._uint64_t countAndFlagsBits = 8236LL;
    v149._object = (void *)0xE200000000000000LL;
    String.append(_:)(v149);
    uint64_t v150 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v150);
    v178._uint64_t countAndFlagsBits = 544490605LL;
    v178._object = (void *)0xE400000000000000LL;
    id v151 = -[objc_class modificationDate](v17, "modificationDate");
    if (v151)
    {
      char v152 = v151;
      uint64_t v153 = (uint64_t)v170;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v154 = 0LL;
      uint64_t v156 = (uint64_t)v171;
      uint64_t v155 = v172;
    }

    else
    {
      uint64_t v154 = 1LL;
      uint64_t v156 = (uint64_t)v171;
      uint64_t v155 = v172;
      uint64_t v153 = (uint64_t)v170;
    }

    v140(v153, v154, 1LL, v4);
    sub_100034030(v153, v156);
    if (v142(v156, 1LL, v4))
    {
      sub_10000B4A8(v156, (uint64_t *)&unk_10007B360);
      unint64_t v132 = 0xE100000000000000LL;
      uint64_t v157 = 45LL;
    }

    else
    {
      uint64_t v158 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v167, v156, v4);
      sub_10000B4A8(v156, (uint64_t *)&unk_10007B360);
      uint64_t v157 = sub_100035A64();
      uint64_t v159 = v155;
      unint64_t v132 = v160;
      (*(void (**)(char *, uint64_t))(v159 + 8))(v158, v4);
    }

    uint64_t v130 = v157;
    unint64_t v131 = v132;
  }

  else
  {
    v178._uint64_t countAndFlagsBits = 544490605LL;
    v178._object = (void *)0xE400000000000000LL;
    uint64_t v130 = sub_100035A64();
    unint64_t v132 = v131;
  }

  String.append(_:)(*(Swift::String *)&v130);
  swift_bridgeObjectRelease(v132);
  uint64_t v161 = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(v161);

  return v184;
}

void sub_100031040(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  *(void *)((char *)a5 + v9[10]) = 0LL;
  uint64_t v10 = (void *)((char *)a5 + v9[6]);
  *uint64_t v10 = a1;
  v10[1] = a2;
  *(void *)((char *)a5 + v9[7]) = [a3 fastLEConnectionInfoVersion];
  id v11 = [a3 fastLEConnectionInfoData];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v15 = v14;
  }

  else
  {
    uint64_t v13 = 0LL;
    unint64_t v15 = 0xC000000000000000LL;
  }

  uint64_t v16 = (uint64_t *)((char *)a5 + v9[8]);
  *uint64_t v16 = v13;
  v16[1] = v15;
  *(void *)((char *)a5 + v9[9]) = a4;
  *((_BYTE *)a5 + v9[11]) = 1;
  id v17 = [a3 supportedServices];
  *(void *)((char *)a5 + v9[12]) = v17;
  *a5 = xmmword_100061650;
  static Date.now.getter(v17);
}

uint64_t sub_100031154@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v3 = sub_100003288((uint64_t *)&unk_10007B360);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v75 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v76 = (char *)&v69 - v7;
  __chkstk_darwin(v6);
  uint64_t v78 = (uint64_t *)((char *)&v69 - v8);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v79 = *(void *)(v9 - 8);
  uint64_t v80 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v69 - v13;
  uint64_t v15 = sub_100003288(&qword_10007B378);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  CKRecordID v21 = (char *)&v69 - v20;
  unint64_t v81 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  __chkstk_darwin(v81);
  uint64_t v82 = (uint64_t *)((char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v84 = a1;
  sub_100008E78(a1, v23);
  unint64_t v25 = sub_100034260();
  uint64_t v26 = v83;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CloudPairedDeviceRecord.CodingKeys,  &type metadata for CloudPairedDeviceRecord.CodingKeys,  v25,  v23,  v24);
  if (v26) {
    return sub_10000467C(v84);
  }
  uint64_t v73 = v14;
  uint64_t v74 = v19;
  uint64_t v83 = v16;
  uint64_t v72 = v12;
  char v86 = 0;
  unint64_t v28 = sub_1000342A4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v85, &type metadata for Data, &v86, v15, &type metadata for Data, v28);
  Swift::String v29 = v82;
  uint64_t v30 = *((void *)&v85 + 1);
  *uint64_t v82 = v85;
  v29[1] = v30;
  LOBYTE(v85) = 2;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)(&v85, v15);
  unint64_t v32 = v81;
  unint64_t v33 = (void *)((char *)v29 + v81[6]);
  *unint64_t v33 = v31;
  v33[1] = v34;
  LOBYTE(v85) = 3;
  uint64_t v35 = (uint64_t)v29;
  *(void *)((char *)v29 + v32[7]) = KeyedDecodingContainer.decode(_:forKey:)(&v85, v15);
  char v86 = 4;
  uint64_t v71 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v85, &type metadata for Data, &v86, v15, &type metadata for Data, v28);
  *(_OWORD *)((char *)v29 + v32[8]) = v85;
  uint64_t v36 = v74;
  uint64_t v37 = v71;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v74, v21, v71);
  uint64_t v38 = sub_100003288(&qword_10007B388);
  char v86 = 5;
  uint64_t v39 = sub_1000349A8( &qword_10007B390,  (void (*)(void))sub_1000342A4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v85, v38, &v86, v37, v38, v39);
  uint64_t v40 = (void *)v85;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v42 = v71;
  v41(v36, v71);
  uint64_t v43 = _swiftEmptyArrayStorage;
  if (v40) {
    uint64_t v43 = v40;
  }
  *(void *)(v35 + v32[9]) = v43;
  LOBYTE(v85) = 6;
  *(void *)(v35 + v32[10]) = KeyedDecodingContainer.decode(_:forKey:)(&v85, v42);
  char v86 = 7;
  unint64_t v44 = sub_1000342E8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v85,  &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType,  &v86,  v71,  &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType,  v44);
  *(_BYTE *)(v35 + v32[11]) = v85;
  LOBYTE(v85) = 8;
  uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)(&v85, v71);
  *(void *)(v35 + v32[12]) = v45;
  uint64_t v83 = v35 + v32[5];
  static Date.now.getter(v45);
  LOBYTE(v85) = 1;
  uint64_t v46 = sub_10000662C( &qword_10007B3A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v47 = v78;
  uint64_t v48 = v80;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v78, v80, &v85, v71, v80, v46);
  uint64_t v70 = v21;
  uint64_t v74 = 0LL;
  uint64_t v49 = v35;
  unint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  if (v50((uint64_t)v47, 1LL, v48) == 1)
  {
    uint64_t v51 = sub_10000662C(&qword_10007BC90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061870);
    Class v52 = sub_10002F5E0((uint64_t)v81, v51);
    id v53 = -[objc_class modificationDate](v52, "modificationDate");

    if (v53)
    {
      uint64_t v54 = v72;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

      uint64_t v55 = v79;
      uint64_t v56 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
      uint64_t v57 = (uint64_t)v76;
      uint64_t v58 = v54;
      uint64_t v59 = v80;
      v56((uint64_t)v76, v58, v80);
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
      v60(v57, 0LL, 1LL, v59);
      if (v50(v57, 1LL, v59) != 1)
      {
        v41(v70, v71);
        v56((uint64_t)v73, v76, v80);
LABEL_17:
        sub_10000B4A8((uint64_t)v78, (uint64_t *)&unk_10007B360);
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
      v60((uint64_t)v76, 1LL, 1LL, v80);
    }

    Class v61 = sub_10002F5E0((uint64_t)v81, v51);
    id v62 = -[objc_class creationDate](v61, "creationDate");

    if (v62)
    {
      uint64_t v63 = v72;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

      uint64_t v64 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
      uint64_t v65 = (uint64_t)v75;
      uint64_t v66 = v63;
      uint64_t v67 = v80;
      v64((uint64_t)v75, v66, v80);
      v60(v65, 0LL, 1LL, v67);
      uint64_t v68 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v50)(v65, 1LL, v67);
      if ((_DWORD)v68 != 1)
      {
        v41(v70, v71);
        v64((uint64_t)v73, v75, v80);
LABEL_16:
        sub_10000B4A8((uint64_t)v76, (uint64_t *)&unk_10007B360);
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v68 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v60)(v75, 1LL, 1LL, v80);
    }

    static Date.now.getter(v68);
    v41(v70, v71);
    sub_10000B4A8((uint64_t)v75, (uint64_t *)&unk_10007B360);
    goto LABEL_16;
  }

  v41(v70, v71);
  (*(void (**)(char *, void *, uint64_t))(v79 + 32))(v73, v78, v80);
LABEL_18:
  (*(void (**)(uint64_t, char *, uint64_t))(v79 + 40))(v83, v73, v80);
  sub_10003432C(v49, v77);
  sub_10000467C(v84);
  return sub_100034370(v49);
}

void sub_100031A1C(uint64_t a1)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v6);
  uint64_t v3 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v4 = *(int *)(v3 + 28);
  uint64_t v5 = *(void *)(a1 + v4);
  if (!v5) {
    uint64_t v5 = *(void *)(v1 + v4);
  }
  *(void *)(v1 + v4) = v5;
  __asm { BR              X11 }

uint64_t sub_100031AC0@<X0>(uint64_t a1@<X8>)
{
  if ((v6 & 0xFF000000000000LL) == 0)
  {
    uint64_t v5 = *(void *)(v1 + a1);
    unint64_t v6 = *(void *)(v1 + a1 + 8);
  }

  uint64_t v9 = (uint64_t *)(v1 + a1);
  uint64_t v10 = *(void *)(v1 + a1);
  unint64_t v11 = *(void *)(v1 + a1 + 8);
  sub_100008EB0(v5, v6);
  sub_100008B40(v10, v11);
  *uint64_t v9 = v5;
  v9[1] = v6;
  uint64_t v12 = v4[9];
  uint64_t v13 = *(void *)(v3 + v12);
  uint64_t v14 = *(void *)(v1 + v12);
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = swift_bridgeObjectRelease(v14);
  *(void *)(v1 + v12) = v13;
  uint64_t v16 = v4[10];
  uint64_t v17 = *(void *)(v3 + v16);
  if (!v17) {
    uint64_t v17 = *(void *)(v1 + v16);
  }
  *(void *)(v1 + vswift_weakDestroy(v0 + 16) = v17;
  uint64_t v18 = v4[11];
  if ((*(_BYTE *)(v3 + v18) & 1) != 0) {
    char v19 = 1;
  }
  else {
    char v19 = *(_BYTE *)(v1 + v18);
  }
  *(_BYTE *)(v1 + v18) = v19;
  uint64_t v20 = v4[12];
  uint64_t v21 = *(void *)(v3 + v20);
  if (!v21) {
    uint64_t v21 = *(void *)(v1 + v20);
  }
  *(void *)(v1 + v2sub_10000DC70(0, 0) = v21;
  static Date.now.getter(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v7 + 40))(v1 + v4[5], v2, *(void *)(v8 - 88));
}

void sub_100031BBC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100003288((uint64_t *)&unk_10007B360);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v71 - v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v78 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v77 = (char *)&v71 - v15;
  id v80 = a1;
  uint64_t v16 = CKRecord.recordType.getter(v14);
  uint64_t v18 = v17;
  swift_beginAccess(&qword_10007B340, v82, 0LL, 0LL);
  if (v16 == qword_10007B340 && v18 == off_10007B348)
  {
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, qword_10007B340, off_10007B348, 0LL);
    swift_bridgeObjectRelease(v18);
    if ((v20 & 1) == 0)
    {
      unint64_t v21 = sub_1000343AC();
      swift_allocError(&type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError, v21, 0LL, 0LL);
      *uint64_t v22 = 0;
      swift_willThrow();

      return;
    }
  }

  uint64_t v72 = v8;
  uint64_t v73 = v10;
  uint64_t v74 = v11;
  uint64_t v75 = v2;
  id v23 = v80;
  id v24 = [v80 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v24);
  *a2 = sub_10002FA18();
  a2[1] = v26;
  CKRecordKeyValueSetting.subscript.getter( &v81,  0x7954656369766564LL,  0xEA00000000006570LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  if (BYTE8(v81)) {
    uint64_t v27 = 0LL;
  }
  else {
    uint64_t v27 = v81;
  }
  unint64_t v28 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  *(uint64_t *)((char *)a2 + v28[10]) = v27;
  id v29 = [v23 recordID];
  id v30 = [v29 recordName];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  uint64_t v34 = (uint64_t *)((char *)a2 + v28[6]);
  *uint64_t v34 = v31;
  v34[1] = v33;
  id v76 = (id)ObjectType;
  CKRecordKeyValueSetting.subscript.getter( &v81,  0xD00000000000001BLL,  0x8000000100067580LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  uint64_t v35 = v81;
  if (BYTE8(v81)) {
    uint64_t v35 = 0LL;
  }
  *(uint64_t *)((char *)a2 + v28[7]) = v35;
  NSString v36 = String._bridgeToObjectiveC()();
  id v37 = [v24 objectForKeyedSubscript:v36];

  __int128 v38 = xmmword_100061650;
  if (v37)
  {
    __int128 v71 = xmmword_100061650;
    unint64_t v83 = (unint64_t)v37;
    uint64_t v39 = sub_100003288(&qword_10007B410);
    if (!swift_dynamicCast(&v81, &v83, v39, &type metadata for Data, 6LL))
    {
      uint64_t v41 = (uint64_t)v73;
      uint64_t v40 = v74;
      __int128 v38 = v71;
      goto LABEL_18;
    }

    __int128 v38 = v81;
  }

  uint64_t v41 = (uint64_t)v73;
  uint64_t v40 = v74;
LABEL_18:
  *(_OWORD *)((char *)a2 + v28[8]) = v38;
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v24 objectForKeyedSubscript:v42];

  if (v43
    && (*(void *)&__int128 v81 = v43,
        uint64_t v44 = sub_100003288(&qword_10007B410),
        uint64_t v45 = sub_100003288(&qword_10007B388),
        swift_dynamicCast(&v83, &v81, v44, v45, 6LL)))
  {
    uint64_t v46 = (void *)v83;
  }

  else
  {
    uint64_t v46 = _swiftEmptyArrayStorage;
  }

  *(uint64_t *)((char *)a2 + v28[9]) = (uint64_t)v46;
  NSString v47 = String._bridgeToObjectiveC()();
  id v48 = [v24 objectForKeyedSubscript:v47];

  uint64_t v49 = v77;
  if (v48
    && (*(void *)&__int128 v81 = v48,
        uint64_t v50 = sub_100003288(&qword_10007B410),
        (swift_dynamicCast(&v83, &v81, v50, &type metadata for Int, 6LL) & 1) != 0)
    && v83 <= 1)
  {
    *((_BYTE *)a2 + v28[11]) = v83;
  }

  else
  {
    *((_BYTE *)a2 + v28[11]) = 0;
  }

  CKRecordKeyValueSetting.subscript.getter( &v81,  0xD000000000000011LL,  0x80000001000675E0LL,  v76,  &type metadata for Int,  &protocol witness table for Int);
  id v51 = v80;
  uint64_t v52 = v81;
  if (BYTE8(v81)) {
    uint64_t v52 = 0LL;
  }
  *(uint64_t *)((char *)a2 + v28[12]) = v52;
  id v53 = [v51 modificationDate];
  if (!v53)
  {
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
    v58(v41, 1LL, 1LL, v40);
LABEL_33:
    id v59 = [v80 creationDate];
    if (v59)
    {
      uint64_t v60 = v59;
      id v76 = v24;
      Class v61 = v28;
      id v62 = a2;
      uint64_t v63 = v49;
      uint64_t v64 = v78;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v65 = v41;
      uint64_t v66 = v79;
      uint64_t v67 = (uint64_t)v72;
      uint64_t v68 = v64;
      uint64_t v49 = v63;
      a2 = v62;
      unint64_t v28 = v61;
      id v24 = v76;
      uint64_t v78 = *(char **)(v79 + 32);
      ((void (*)(char *, char *, uint64_t))v78)(v72, v68, v40);
      v58(v67, 0LL, 1LL, v40);
      uint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
      uint64_t v41 = v65;
      uint64_t v70 = v69(v67, 1LL, v40);
      if ((_DWORD)v70 != 1)
      {
        swift_unknownObjectRelease(v24);

        ((void (*)(char *, uint64_t, uint64_t))v78)(v49, v67, v40);
LABEL_38:
        sub_10000B4A8(v41, (uint64_t *)&unk_10007B360);
        uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
        goto LABEL_39;
      }
    }

    else
    {
      uint64_t v67 = (uint64_t)v72;
      uint64_t v70 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58)(v72, 1LL, 1LL, v40);
    }

    static Date.now.getter(v70);
    swift_unknownObjectRelease(v24);

    sub_10000B4A8(v67, (uint64_t *)&unk_10007B360);
    goto LABEL_38;
  }

  uint64_t v54 = v53;
  uint64_t v55 = v78;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v56 = v79;
  uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
  v57(v41, v55, v40);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56);
  v58(v41, 0LL, 1LL, v40);
  swift_unknownObjectRelease(v24);

  v57((uint64_t)v49, (char *)v41, v40);
LABEL_39:
  v57((uint64_t)a2 + v28[5], v49, v40);
}

uint64_t sub_1000322D4(id *a1)
{
  uint64_t v2 = v1;
  id v3 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter( &v26,  0xD00000000000001BLL,  0x8000000100067580LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  char v5 = v27;
  uint64_t v6 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v7 = *(void *)(v2 + v6[7]);
  if ((v5 & 1) != 0 || v26 != v7)
  {
    unint64_t v28 = &type metadata for Int;
    id v29 = &protocol witness table for Int;
    uint64_t v26 = v7;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD00000000000001BLL, 0x8000000100067580LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v26,  0xD000000000000018LL,  0x80000001000675A0LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v8 = v26;
  unint64_t v9 = v27;
  uint64_t v10 = (uint64_t *)(v2 + v6[8]);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_100008EB0(*v10, v12);
  if (v9 >> 60 == 15)
  {
    sub_100008B2C(v8, v9);
    sub_100008B2C(v11, v12);
LABEL_7:
    unint64_t v28 = &type metadata for Data;
    id v29 = &protocol witness table for Data;
    uint64_t v26 = v11;
    unint64_t v27 = v12;
    sub_100008EB0(v11, v12);
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD000000000000018LL, 0x80000001000675A0LL, ObjectType);
    goto LABEL_8;
  }

  sub_100008E9C(v8, v9);
  sub_1000345D4(v8, v9);
  char v14 = v13;
  sub_100008B40(v11, v12);
  sub_100008B2C(v8, v9);
  sub_100008B2C(v8, v9);
  if ((v14 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v15 = sub_100003288(&qword_10007B388);
  unint64_t v16 = sub_1000343F0();
  CKRecordKeyValueSetting.subscript.getter(&v26, 0xD00000000000001ALL, 0x80000001000675C0LL, ObjectType, v15, v16);
  uint64_t v17 = v26;
  uint64_t v18 = v6[9];
  uint64_t v19 = *(void *)(v2 + v18);
  if (!v26
    || (swift_bridgeObjectRetain(*(void *)(v2 + v18)),
        swift_bridgeObjectRetain(v17),
        char v21 = sub_100032824(v20, v19),
        swift_bridgeObjectRelease_n(v17, 2LL),
        swift_bridgeObjectRelease(v19),
        (v21 & 1) == 0))
  {
    unint64_t v28 = (void *)v15;
    id v29 = (void *)v16;
    uint64_t v26 = v19;
    swift_bridgeObjectRetain(v19);
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD00000000000001ALL, 0x80000001000675C0LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v26,  0x7954656369766564LL,  0xEA00000000006570LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  uint64_t v22 = *(void *)(v2 + v6[10]);
  if ((v27 & 1) != 0 || v26 != v22)
  {
    unint64_t v28 = &type metadata for Int;
    id v29 = &protocol witness table for Int;
    uint64_t v26 = v22;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0x7954656369766564LL, 0xEA00000000006570LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v26,  0x69687372656E776FLL,  0xED00006570795470LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  uint64_t v23 = *(unsigned __int8 *)(v2 + v6[11]);
  if ((v27 & 1) != 0 || v26 != v23)
  {
    unint64_t v28 = &type metadata for Int;
    id v29 = &protocol witness table for Int;
    uint64_t v26 = v23;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0x69687372656E776FLL, 0xED00006570795470LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v26,  0xD000000000000011LL,  0x80000001000675E0LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  uint64_t v24 = *(void *)(v2 + v6[12]);
  if ((v27 & 1) != 0 || v26 != v24)
  {
    unint64_t v28 = &type metadata for Int;
    id v29 = &protocol witness table for Int;
    uint64_t v26 = v24;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD000000000000011LL, 0x80000001000675E0LL, ObjectType);
  }

  return swift_unknownObjectRelease(v3);
}

void sub_1000326F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  char v5 = (uint64_t *)(v2 + v4[6]);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(*(void *)(v2 + v4[7]));
  uint64_t v8 = (uint64_t *)(v2 + v4[8]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_100008EB0(*v8, v10);
  Data.hash(into:)(a1, v9, v10);
  sub_100008B40(v9, v10);
  uint64_t v11 = *(void *)(v2 + v4[9]);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain(v11);
    char v13 = (unint64_t *)(v11 + 40);
    do
    {
      uint64_t v14 = *(v13 - 1);
      unint64_t v15 = *v13;
      sub_100008EB0(v14, *v13);
      Data.hash(into:)(a1, v14, v15);
      sub_100008B40(v14, v15);
      v13 += 2;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(v11);
  }

  Hasher._combine(_:)(*(void *)(v2 + v4[10]));
  Hasher._combine(_:)(*(void *)(v2 + v4[12]));
}

uint64_t sub_100032824(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2)
  {
    if (a1 != a2) {
      __asm { BR              X8 }
    }
  }

  return 1LL;
}

uint64_t sub_100033138(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100033178 + 4 * byte_100061664[a1]))( 0x74654D64756F6C63LL,  0xED00006174616461LL);
}

unint64_t sub_100033178()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100033194()
{
  return 0x696669746E656469LL;
}

unint64_t sub_1000331B4()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100033264()
{
  return sub_100033138(*v0);
}

uint64_t sub_10003326C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100035650(a1, a2);
  *a3 = result;
  return result;
}

void sub_100033290(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10003329C(uint64_t a1)
{
  unint64_t v2 = sub_100034260();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000332C4(uint64_t a1)
{
  unint64_t v2 = sub_100034260();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000332EC(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_100003288(&qword_10007B420);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100008E78(a1, v9);
  unint64_t v11 = sub_100034260();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CloudPairedDeviceRecord.CodingKeys,  &type metadata for CloudPairedDeviceRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v27 = *v3;
  char v28 = 0;
  unint64_t v12 = sub_100034964();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v5, &type metadata for Data, v12);
  if (!v2)
  {
    char v13 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v27) = 1;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = sub_10000662C( &qword_10007B430,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v27, v5, v15, v16);
    uint64_t v17 = (uint64_t *)((char *)v3 + v13[6]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v27, v5);
    uint64_t v20 = *(void *)((char *)v3 + v13[7]);
    LOBYTE(v27) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v27, v5);
    __int128 v27 = *(_OWORD *)((char *)v3 + v13[8]);
    char v28 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v5, &type metadata for Data, v12);
    *(void *)&__int128 v27 = *(void *)((char *)v3 + v13[9]);
    char v28 = 5;
    uint64_t v21 = sub_100003288(&qword_10007B388);
    uint64_t v22 = sub_1000349A8( &qword_10007B438,  (void (*)(void))sub_100034964,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v5, v21, v22);
    uint64_t v23 = *(void *)((char *)v3 + v13[10]);
    LOBYTE(v27) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v27, v5);
    LOBYTE(v27) = *((_BYTE *)v3 + v13[11]);
    char v28 = 7;
    unint64_t v24 = sub_100034A10();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v27,  &v28,  v5,  &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType,  v24);
    uint64_t v25 = *(void *)((char *)v3 + v13[12]);
    LOBYTE(v27) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v27, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100033608()
{
  return Hasher._finalize()();
}

uint64_t sub_100033644(uint64_t a1, uint64_t a2)
{
  return sub_100033664(a1, a2, &qword_10007B340, &off_10007B348);
}

uint64_t sub_100033654(uint64_t a1, uint64_t a2)
{
  return sub_100033664(a1, a2, &qword_10007B350, &off_10007B358);
}

uint64_t sub_100033664(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = *a3;
  swift_bridgeObjectRetain(*a4);
  return v6;
}

uint64_t sub_1000336B8()
{
  uint64_t v1 = *(void *)v0;
  sub_100008EB0(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_1000336E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

void sub_100033728(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_100033744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10002F444(a1, a4, a2, a5, a3);
}

uint64_t sub_10003376C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_10002F4F0(a1, a2, a3, a4, a5);
}

Swift::Int sub_100033798(uint64_t a1)
{
  return Hasher._finalize()();
}

unint64_t sub_1000337D4()
{
  return sub_1000304D4(50);
}

unint64_t sub_1000337DC()
{
  return sub_1000304D4(20);
}

uint64_t sub_1000337E4@<X0>(uint64_t a1@<X8>)
{
  if (qword_10007E390 != -1) {
    swift_once(&qword_10007E390, sub_100030428);
  }
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = sub_100010C94(v2, (uint64_t)qword_100080868);
  __n128 v4 = swift_beginAccess(v3, v6, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2, v4);
}

uint64_t sub_10003387C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1000338B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100031154(a1, a2);
}

uint64_t sub_1000338C4(void *a1)
{
  return sub_1000332EC(a1);
}

uint64_t sub_1000338D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003288(&qword_10007B448);
  __chkstk_darwin(v2);
  __n128 v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  UUID.init(uuidString:)(*(void *)(v1 + *(int *)(v9 + 24)), *(void *)(v1 + *(int *)(v9 + 24) + 8));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_10000B4A8((uint64_t)v4, &qword_10007B448);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v11 = sub_100008F08();
    sub_100033A20(v11, v12);
    v15[0] = v13;
    v15[1] = v14;
    Data.append(_:)(*(void *)(v1 + *(int *)(v9 + 32)), *(void *)(v1 + *(int *)(v9 + 32) + 8));
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v15[0];
  }

void sub_100033A20(uint64_t a1, uint64_t a2)
{
  void v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_100033A84
     + *((int *)qword_100033CB8 + (sub_100008E78(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_100033A94()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_100008EB0(v1, v0);
  sub_100034078(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_100008B40(v1, v0);
  uint64_t v4 = v12;
  sub_10000467C(&v13);
  return v4;
}

void sub_100033CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100033D28( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100033F0CLL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *id v37 = (_DWORD)result == 0;
  return result;
}

char *sub_100033F30(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003288(&qword_10007B528);
    char v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    char v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100034030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288((uint64_t *)&unk_10007B360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

_BYTE *sub_100034078@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_100009090(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_1000091D0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_100009150((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_1000340EC(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = a2;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    uint64_t v7 = v6 | (v5 << 16);
    uint64_t v8 = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v9 & 1) != 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v8;
    }
    return String.subscript.getter(15LL, v10, a2, a3);
  }

  return result;
}

unint64_t sub_100034174(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v5 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    uint64_t v7 = v6 | (v5 << 16);
    uint64_t result = String.index(_:offsetBy:limitedBy:)(v7, -(uint64_t)result, 15LL, a2, a3);
    if ((v8 & 1) != 0) {
      uint64_t result = 15LL;
    }
    if (4 * v5 >= result >> 14) {
      return String.subscript.getter(result, v7, a2, a3);
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_10003421C()
{
  unint64_t result = qword_10007B370;
  if (!qword_10007B370)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_10007B370);
  }

  return result;
}

unint64_t sub_100034260()
{
  unint64_t result = qword_10007E398[0];
  if (!qword_10007E398[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100061AF8, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, qword_10007E398);
  }

  return result;
}

unint64_t sub_1000342A4()
{
  unint64_t result = qword_10007B380;
  if (!qword_10007B380)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10007B380);
  }

  return result;
}

unint64_t sub_1000342E8()
{
  unint64_t result = qword_10007B398;
  if (!qword_10007B398)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000617F8, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B398);
  }

  return result;
}

uint64_t sub_10003432C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034370(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000343AC()
{
  unint64_t result = qword_10007B3A8;
  if (!qword_10007B3A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100061718,  &type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_10007B3A8);
  }

  return result;
}

unint64_t sub_1000343F0()
{
  unint64_t result = qword_10007B418;
  if (!qword_10007B418)
  {
    uint64_t v1 = sub_1000064CC(&qword_10007B388);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007B418);
  }

  return result;
}

uint64_t sub_10003444C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_100033CC8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100034520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_100033CC8(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_1000345D4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100034620()
{
  return ((uint64_t (*)(void))((char *)&loc_100034654 + dword_10003482C[v0 >> 62]))();
}

uint64_t sub_100034664@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

BOOL sub_10003484C(uint64_t *a1, uint64_t a2)
{
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v6 = v5[6];
  uint64_t v7 = *(uint64_t *)((char *)a1 + v6);
  uint64_t v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  __int16 v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  BOOL v11 = v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0LL), BOOL result = 0LL, (v12 & 1) != 0))
  {
    if (*(uint64_t *)((char *)a1 + v5[7]) == *(void *)(a2 + v5[7]))
    {
      sub_1000345D4(*(uint64_t *)((char *)a1 + v5[8]), *(uint64_t *)((char *)a1 + v5[8] + 8));
      if ((v14 & 1) != 0
        && (sub_100032824(*(uint64_t *)((char *)a1 + v5[9]), *(void *)(a2 + v5[9])) & 1) != 0
        && *(uint64_t *)((char *)a1 + v5[10]) == *(void *)(a2 + v5[10])
        && *((unsigned __int8 *)a1 + v5[11]) == *(unsigned __int8 *)(a2 + v5[11]))
      {
        return *(uint64_t *)((char *)a1 + v5[12]) == *(void *)(a2 + v5[12]);
      }
    }

    return 0LL;
  }

  return result;
}

unint64_t sub_100034964()
{
  unint64_t result = qword_10007B428;
  if (!qword_10007B428)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10007B428);
  }

  return result;
}

uint64_t sub_1000349A8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000064CC(&qword_10007B388);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100034A10()
{
  unint64_t result = qword_10007B440;
  if (!qword_10007B440)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061820, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B440);
  }

  return result;
}

unint64_t sub_100034A58()
{
  unint64_t result = qword_10007B450;
  if (!qword_10007B450)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000616B0,  &type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_10007B450);
  }

  return result;
}

unint64_t sub_100034AA0()
{
  unint64_t result = qword_10007B458;
  if (!qword_10007B458)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061758, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B458);
  }

  return result;
}

uint64_t sub_100034AE4(uint64_t a1)
{
  uint64_t result = sub_10000662C(&qword_10007B460, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061944);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100034B20()
{
  return sub_10000662C(&qword_10007B468, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000618CC);
}

uint64_t sub_100034B4C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000662C( &qword_10007B470,  type metadata accessor for CloudPairedDeviceRecord,  (uint64_t)&unk_100061960);
  uint64_t result = sub_10000662C(&qword_10007B478, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061988);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t *sub_100034BA8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v27);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100008EB0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    BOOL v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v18 = a3[8];
    char v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    swift_bridgeObjectRetain(v17);
    sub_100008EB0(v21, v22);
    *char v19 = v21;
    v19[1] = v22;
    uint64_t v23 = a3[9];
    uint64_t v24 = a3[10];
    uint64_t v25 = *(uint64_t *)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = v25;
    *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
    uint64_t v26 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(uint64_t *)((char *)a1 + v26) = *(uint64_t *)((char *)a2 + v26);
    swift_bridgeObjectRetain(v25);
  }

  return a1;
}

uint64_t sub_100034CB8(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  sub_100008B40(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[9]));
}

uint64_t *sub_100034D38(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100008EB0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v12);
  uint64_t v15 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  char v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  swift_bridgeObjectRetain(v16);
  sub_100008EB0(v20, v21);
  uint64_t *v18 = v20;
  v18[1] = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = a3[10];
  uint64_t v24 = *(uint64_t *)((char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22) = v24;
  *(uint64_t *)((char *)a1 + v23) = *(uint64_t *)((char *)a2 + v23);
  uint64_t v25 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + v25) = *(uint64_t *)((char *)a2 + v25);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *sub_100034E1C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100008EB0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100008B40(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  unint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  sub_100008EB0(*v21, v23);
  uint64_t v24 = *v20;
  unint64_t v25 = v20[1];
  *uint64_t v20 = v22;
  v20[1] = v23;
  sub_100008B40(v24, v25);
  uint64_t v26 = a3[9];
  uint64_t v27 = *(uint64_t *)((char *)a2 + v26);
  uint64_t v28 = *(uint64_t *)((char *)a1 + v26);
  *(uint64_t *)((char *)a1 + v26) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_100034F3C(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + sub_100002FC0(stringLiteral._countAndFlagsBits, (unint64_t)stringLiteral._object, v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t *sub_100034FF0(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100008B40(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v19 = *(uint64_t *)((char *)a1 + v18);
  unint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  sub_100008B40(v19, v20);
  uint64_t v21 = a3[9];
  uint64_t v22 = *(uint64_t *)((char *)a1 + v21);
  *(uint64_t *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  *(uint64_t *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_1000350D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000350E4);
}

uint64_t sub_1000350E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100035168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035174);
}

uint64_t sub_100035174(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000351F4(uint64_t a1)
{
  v4[0] = &unk_1000619B0;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_1000619C8;
    void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_1000619B0;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_1000619E0;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.CloudPairedDeviceRecordError()
{
  return &type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError;
}

uint64_t _s14bluetoothuserd23CloudPairedDeviceRecordV19DeviceOwnershipTypeOwet_0( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t _s14bluetoothuserd23CloudPairedDeviceRecordV19DeviceOwnershipTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100035390 + 4 * byte_100061672[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000353C4 + 4 * byte_10006166D[v4]))();
}

uint64_t sub_1000353C4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000353CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000353D4LL);
  }
  return result;
}

uint64_t sub_1000353E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000353E8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000353EC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000353F4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100035400(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.DeviceOwnershipType()
{
  return &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType;
}

uint64_t getEnumTagSinglePayload for CloudPairedDeviceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for CloudPairedDeviceRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1000354F8 + 4 * byte_10006167C[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10003552C + 4 * byte_100061677[v4]))();
}

uint64_t sub_10003552C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003553CLL);
  }
  return result;
}

uint64_t sub_100035548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100035550LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_100035554(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003555C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.CodingKeys()
{
  return &type metadata for CloudPairedDeviceRecord.CodingKeys;
}

unint64_t sub_10003557C()
{
  unint64_t result = qword_10007ED30[0];
  if (!qword_10007ED30[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100061AD0, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, qword_10007ED30);
  }

  return result;
}

unint64_t sub_1000355C4()
{
  unint64_t result = qword_10007EE40;
  if (!qword_10007EE40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061A40, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10007EE40);
  }

  return result;
}

unint64_t sub_10003560C()
{
  unint64_t result = qword_10007EE48[0];
  if (!qword_10007EE48[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100061A68, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, qword_10007EE48);
  }

  return result;
}

uint64_t sub_100035650(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x74654D64756F6C63LL && a2 == 0xED00006174616461LL)
  {
    unint64_t v5 = 0xED00006174616461LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63LL, 0xED00006174616461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x8000000100067620LL;
    if (a2 == 0x8000000100067620LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100067620LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v8 = 0xEA00000000007265LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100067580LL)
  {
    unint64_t v9 = 0x8000000100067580LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100067580LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x80000001000675A0LL)
  {
    unint64_t v10 = 0x80000001000675A0LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001000675A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001000675C0LL)
  {
    unint64_t v11 = 0x80000001000675C0LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001000675C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x7954656369766564LL && a2 == 0xEA00000000006570LL)
  {
    unint64_t v12 = 0xEA00000000006570LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954656369766564LL, 0xEA00000000006570LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0x69687372656E776FLL && a2 == 0xED00006570795470LL)
  {
    unint64_t v13 = 0xED00006570795470LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69687372656E776FLL, 0xED00006570795470LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x80000001000675E0LL)
  {
    swift_bridgeObjectRelease(0x80000001000675E0LL);
    return 8LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001000675E0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

unint64_t sub_100035A1C()
{
  unint64_t result = qword_10007B520;
  if (!qword_10007B520)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000617C0, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B520);
  }

  return result;
}

uint64_t sub_100035A64()
{
  unint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___NSDateFormatter);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

void *sub_100035AE4()
{
  return &unk_100061B70;
}

void *sub_100035AF0()
{
  return &unk_100061B80;
}

void *sub_100035AFC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100035B08(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_100035B10@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100035B24@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100035B38@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100035B4C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100035B7C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100035BA8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100035BCC(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100035BE0(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100035BF4(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100035C08@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100035C1C(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_100035C30(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_100035C44(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_100035C58()
{
  return *v0 == 0LL;
}

uint64_t sub_100035C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100035C80(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100035C94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10003CE58(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t SystemInfo.deviceFirstUnlocked.getter()
{
  return 1LL;
}

Swift::Int sub_100035CD8()
{
  return Hasher._finalize()();
}

void sub_100035D18()
{
}

Swift::Int sub_100035D3C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100035D78()
{
  uint64_t v0 = type metadata accessor for UserFileManager();
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  uint64_t result = sub_10003BD60();
  qword_100080880 = v1;
  return result;
}

uint64_t sub_100035DB0()
{
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  sub_10003BD60();
  return v1;
}

uint64_t *sub_100035DE4()
{
  if (qword_10007EED0 != -1) {
    swift_once(&qword_10007EED0, sub_100035D78);
  }
  return &qword_100080880;
}

void *sub_100035E24()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    id v2 = *(void **)(v0 + 16);
  }

  else
  {
    id v2 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_100035E68(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*sub_100035E78(void **a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100035E24();
  return sub_100035EAC;
}

uint64_t sub_100035EAC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100035EBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100003288(&qword_10007B540);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  char v14 = (char *)&v35 - v13;
  id v15 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v16 = [v15 environment];

  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v16,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (*(void *)(v17 + 16))
  {
    sub_100027E38(0xD00000000000001BLL, 0x80000001000676B0LL);
    char v19 = v18;
    swift_bridgeObjectRelease(v17);
    if ((v19 & 1) != 0)
    {
      uint64_t v20 = sub_10002FF10();
      uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v20, v1);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Under test appContainerURL to tmp", v24, 2u);
        swift_slowDealloc(v24, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      unint64_t v25 = NSTemporaryDirectory();
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v28 = v27;

      URL.init(fileURLWithPath:isDirectory:)(v26, v28, 1LL);
      return swift_bridgeObjectRelease(v28);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v17);
  }

  id v30 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v31 = 1LL;
  id v32 = [v30 URLsForDirectory:5 inDomains:1];

  uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v8);
  if (*(void *)(v33 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))( v7,  v33 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  v8);
    uint64_t v31 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v31, 1LL, v8);
  swift_bridgeObjectRelease(v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    sub_10000B4A8((uint64_t)v7, &qword_10007B540);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000031LL,  0x8000000100067700LL,  "bluetoothuserd/UserFileManager.swift",  36LL,  2LL,  48LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v34(v14, v7, v8);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017LL, 0x8000000100067540LL, 1LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v36, v12, v8);
  }

  return result;
}

void *sub_1000362CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100035EBC(a1);
  uint64_t result = (void *)xpc_copy_entitlement_for_self("com.apple.developer.icloud-container-environment");
  if (result)
  {
    unint64_t v7 = result;
    if (xpc_string_get_string_ptr(result))
    {
      uint64_t v8 = String.init(cString:)();
      uint64_t v10 = v9;
      v12[0] = v8;
      v12[1] = v9;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for URL.DirectoryHint.inferFromPath(_:),  v2);
      unint64_t v11 = sub_1000296C8();
      URL.append<A>(path:directoryHint:)(v12, v5, &type metadata for String, v11);
      swift_unknownObjectRelease(v7);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return (void *)swift_bridgeObjectRelease(v10);
    }

    else
    {
      return (void *)swift_unknownObjectRelease(v7);
    }
  }

  return result;
}

void sub_1000363DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = objc_autoreleasePoolPush();
  sub_100036458(a1, a2, a3, a4);
  objc_autoreleasePoolPop(v8);
}

uint64_t sub_100036458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a3, a1, a2, a3, a4);
  if (!v4) {
    return swift_release(v13);
  }
  swift_release(v13);
  uint64_t v14 = sub_1000300CC();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v30);
  swift_errorRetain(v4);
  uint64_t v15 = swift_errorRetain(v4);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v28 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = v29;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)(a3, 0LL);
    unint64_t v21 = v20;
    uint64_t v31 = sub_100003E68(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v18 + 12) = 2112;
    swift_errorRetain(v4);
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v4);
    uint64_t v31 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v18 + 14, v18 + 22);
    os_log_type_t v23 = v28;
    *uint64_t v28 = v22;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error decoding %s: %@", (uint8_t *)v18, 0x16u);
    uint64_t v24 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v23, 1LL, v24);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v25 = v29;
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v30);
  return swift_willThrow(v27);
}

uint64_t sub_100036724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = objc_autoreleasePoolPush();
  uint64_t v8 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = PropertyListEncoder.init()();
  uint64_t v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, a2, a4);
  swift_release(v9);
  objc_autoreleasePoolPop(v7);
  return v10;
}

uint64_t sub_1000367CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  OS_dispatch_queue.sync<A>(execute:)(sub_10003C098, v4, &type metadata for Bool);
  return v5;
}

uint64_t sub_100036828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v95 = *(void *)(v7 - 8);
  uint64_t v96 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v94 = &v89[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8);
  uint64_t v93 = &v89[-v10];
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_t v91 = (os_log_t)&v89[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v92 = (uint64_t *)&v89[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)&v89[-v18];
  __chkstk_darwin(v17);
  unint64_t v21 = (uint64_t *)&v89[-v20];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 224LL))(a1, a2, a3);
  uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v23 = [v22 defaultManager];
  URL.path.getter();
  uint64_t v25 = v24;
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  LODWORD(v25) = [v23 fileExistsAtPath:v26];

  if (!(_DWORD)v25)
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v21, v11);
    return 1LL;
  }

  id v27 = [v22 defaultManager];
  URL._bridgeToObjectiveC()(v28);
  uint64_t v30 = v29;
  id v99 = 0LL;
  unsigned int v31 = [v27 removeItemAtURL:v29 error:&v99];

  id v32 = v99;
  if (v31)
  {
    id v33 = v99;
    uint64_t v34 = sub_1000300CC();
    uint64_t v35 = v96;
    uint64_t v36 = v93;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v95 + 16))(v93, v34, v96);
    uint64_t v37 = v12;
    __int128 v38 = v36;
    uint64_t v39 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16);
    uint64_t v40 = v11;
    v39(v19, v21, v11);
    uint64_t v41 = v92;
    uint64_t v42 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v39)(v92, a3, v40);
    __int16 v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v94 = (_BYTE *)swift_slowAlloc(64LL, -1LL);
      id v99 = v94;
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v46 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      os_log_t v91 = v43;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v40, v46);
      unint64_t v49 = v48;
      uint64_t v97 = sub_100003E68(v47, v48, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v49);
      os_log_type_t v50 = v44;
      id v51 = *(uint64_t (**)(uint64_t *, uint64_t))(v37 + 8);
      uint64_t v52 = v40;
      uint64_t v53 = v51(v19, v40);
      *(_WORD *)(v45 + 12) = 2080;
      uint64_t v54 = v92;
      uint64_t v55 = URL.lastPathComponent.getter(v53);
      unint64_t v57 = v56;
      uint64_t v97 = sub_100003E68(v55, v56, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease(v57);
      v51(v54, v52);
      os_log_t v58 = v91;
      _os_log_impl((void *)&_mh_execute_header, v91, v50, "Deleted record %s from %s", (uint8_t *)v45, 0x16u);
      id v59 = v94;
      swift_arrayDestroy(v94, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v93, v96);
      v51(v21, v52);
    }

    else
    {

      uint64_t v87 = *(void (**)(uint64_t *, uint64_t))(v37 + 8);
      v87(v41, v40);
      v87(v19, v40);
      (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v38, v35);
      v87(v21, v40);
    }

    return 1LL;
  }

  id v60 = v99;
  uint64_t v61 = _convertNSErrorToError(_:)(v32);

  swift_willThrow(v62);
  uint64_t v63 = sub_1000300CC();
  uint64_t v64 = v94;
  uint64_t v65 = v95;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v95 + 16))(v94, v63, v96);
  uint64_t v66 = v12;
  uint64_t v67 = *(void (**)(os_log_t, uint64_t *, uint64_t))(v12 + 16);
  os_log_t v68 = v91;
  uint64_t v69 = v11;
  v67(v91, v21, v11);
  swift_errorRetain(v61);
  uint64_t v70 = swift_errorRetain(v61);
  __int128 v71 = (os_log_s *)Logger.logObject.getter(v70);
  os_log_type_t v72 = static os_log_type_t.error.getter();
  int v73 = v72;
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v74 = swift_slowAlloc(22LL, -1LL);
    uint64_t v92 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v93 = (_BYTE *)swift_slowAlloc(32LL, -1LL);
    id v99 = v93;
    *(_DWORD *)uint64_t v74 = 136315394;
    int v90 = v73;
    uint64_t v75 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v69, v75);
    unint64_t v78 = v77;
    uint64_t v97 = sub_100003E68(v76, v77, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease(v78);
    uint64_t v79 = *(void (**)(os_log_t, uint64_t))(v66 + 8);
    uint64_t v80 = v69;
    v79(v68, v69);
    *(_WORD *)(v74 + 12) = 2112;
    swift_errorRetain(v61);
    uint64_t v81 = _swift_stdlib_bridgeErrorToNSError(v61);
    uint64_t v97 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v74 + 14, v74 + 22);
    uint64_t v82 = v92;
    *uint64_t v92 = v81;
    swift_errorRelease(v61);
    swift_errorRelease(v61);
    _os_log_impl( (void *)&_mh_execute_header,  v71,  (os_log_type_t)v90,  "Could not delete record %s due to %@",  (uint8_t *)v74,  0x16u);
    uint64_t v83 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v82, 1LL, v83);
    swift_slowDealloc(v82, -1LL, -1LL);
    uint64_t v84 = v93;
    swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v74, -1LL, -1LL);

    swift_errorRelease(v61);
    (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v94, v96);
    __int128 v85 = (os_log_s *)v21;
    uint64_t v86 = v80;
  }

  else
  {

    swift_errorRelease(v61);
    swift_errorRelease(v61);
    uint64_t v79 = *(void (**)(os_log_t, uint64_t))(v66 + 8);
    v79(v68, v69);
    swift_errorRelease(v61);
    (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v64, v96);
    __int128 v85 = (os_log_s *)v21;
    uint64_t v86 = v69;
  }

  v79(v85, v86);
  return 0LL;
}

uint64_t sub_100036F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a2;
  uint64_t v29 = a4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_queue_t v30 = *(dispatch_queue_t *)(v4 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  uint64_t v15 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v28, v7);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = (v16 + 40) & ~v16;
  uint64_t v18 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = (v13 + v18 + v17) & ~v18;
  uint64_t v20 = (char *)swift_allocObject(&unk_100073240, v19 + v9, v16 | v18 | 7);
  uint64_t v21 = v29;
  *((void *)v20 + 2) = a3;
  *((void *)v20 + 3) = v21;
  uint64_t v22 = v27;
  *((void *)v20 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v17], v14, a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v15);
  uint64_t v23 = swift_allocObject(&unk_100073268, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10003C1B0;
  *(void *)(v23 + 24) = v20;
  aBlock[4] = sub_1000109BC;
  uint64_t v32 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CA9C;
  void aBlock[3] = &unk_100073280;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v32;
  swift_retain(v22);
  swift_retain(v23);
  swift_release(v25);
  dispatch_sync(v30, v24);
  _Block_release(v24);
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 111LL, 114LL, 33LL, 1LL);
  swift_release(v20);
  uint64_t result = swift_release(v23);
  return result;
}

uint64_t sub_100037188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v71 = a5;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v64 = a1;
  uint64_t v7 = *(void *)(*(void *)(a4 - 8) + 64LL);
  uint64_t v68 = *(void *)(a4 - 8);
  uint64_t v69 = v7;
  __chkstk_darwin(a1);
  uint64_t v67 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v60 = (void *)type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v9 = *(v60 - 1);
  __chkstk_darwin(v60);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = type metadata accessor for URL(0LL);
  uint64_t v63 = *(void *)(v58 - 8);
  uint64_t v12 = v63;
  uint64_t v13 = __chkstk_darwin(v58);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  uint64_t v70 = (uint64_t)&v56 - v19;
  uint64_t v20 = *(void *)(a5 + 8);
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(a4, v20);
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(a4, v20);
  Swift::String v23 = URL.path(percentEncoded:)(1);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v25 = v58;
  v24(v15, v58);
  uint64_t v65 = (void (*)(uint64_t, uint64_t))v24;
  Swift::String v72 = v23;
  NSString v26 = v60;
  (*(void (**)(char *, void, void *))(v9 + 104))( v11,  enum case for URL.DirectoryHint.isDirectory(_:),  v60);
  unint64_t v27 = sub_1000296C8();
  URL.appending<A>(path:directoryHint:)(&v72, v11, &type metadata for String, v27);
  (*(void (**)(char *, void *))(v9 + 8))(v11, v26);
  swift_bridgeObjectRelease(v72._object);
  uint64_t v28 = v70;
  sub_100037B20(v59, v22, v70);
  swift_bridgeObjectRelease(v22);
  uint64_t v29 = v18;
  unint64_t v57 = v18;
  uint64_t v30 = ((uint64_t (*)(char *, uint64_t))v24)(v18, v25);
  uint64_t v31 = URL.lastPathComponent.getter(v30);
  uint64_t v33 = v32;
  uint64_t v34 = v64;
  uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 240LL))(v31);
  swift_bridgeObjectRelease(v33);
  uint64_t v35 = v61;
  uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t))(v71 + 56))(a4);
  id v60 = [v36 recordID];

  uint64_t v37 = swift_allocObject(&unk_100073430, 24LL, 7LL);
  swift_weakInit(v37 + 16, v34);
  uint64_t v39 = v67;
  uint64_t v38 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v35, a4);
  uint64_t v40 = v63;
  uint64_t v41 = v29;
  uint64_t v42 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v41, v28, v25);
  uint64_t v43 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v44 = v38;
  uint64_t v45 = (v43 + 32) & ~v43;
  unint64_t v46 = (v69 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v47 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v48 = (v47 + v46 + 8) & ~v47;
  uint64_t v49 = swift_allocObject(&unk_100073458, v48 + v66, v43 | v47 | 7);
  uint64_t v50 = v71;
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v49 + 24) = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v49 + v45, v39, a4);
  *(void *)(v49 + v46) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v49 + v48, v57, v42);
  uint64_t v51 = v62;
  uint64_t v52 = *(void (**)(void *, uint64_t, uint64_t (*)(uint64_t), uint64_t, __n128))(*(void *)v62 + 880LL);
  __n128 v53 = swift_retain(v37);
  uint64_t v54 = v60;
  v52(v60, 1LL, sub_10003D18C, v49, v53);
  swift_release(v51);

  swift_release(v49);
  v65(v70, v42);
  return swift_release(v37);
}

uint64_t sub_10003755C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v61 = a6;
  uint64_t v62 = v11;
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  if (a1)
  {
    swift_errorRetain(a1);
    uint64_t v23 = sub_1000300CC();
    uint64_t v60 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v23, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v14, a2, a5);
    swift_errorRetain(a1);
    uint64_t v24 = swift_errorRetain(a1);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      unint64_t v57 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      v64[0] = v58;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v59 = v17;
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)(v61 + 8) + 32LL))(a5);
      unint64_t v30 = v29;
      uint64_t v63 = sub_100003E68(v28, v29, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v30);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v14, a5);
      *(_WORD *)(v27 + 12) = 2112;
      swift_errorRetain(a1);
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v63 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v27 + 14, v27 + 22);
      uint64_t v32 = v57;
      *unint64_t v57 = v31;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Error removing record %s from cloud %@",  (uint8_t *)v27,  0x16u);
      uint64_t v33 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v32, 1LL, v33);
      swift_slowDealloc(v32, -1LL, -1LL);
      uint64_t v34 = v58;
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      swift_errorRelease(a1);
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v21, v59);
    }

    else
    {
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v14, a5);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v21, v17);
    }
  }

  else
  {
    uint64_t v58 = a4;
    uint64_t v36 = a3 + 16;
    uint64_t v37 = (char *)&v55 - v22;
    uint64_t v38 = sub_1000300CC();
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v37, v38, v17);
    uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 16))(v16, a2, a5);
    unint64_t v57 = (uint64_t *)v37;
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc(12LL, -1LL);
      uint64_t v60 = v18;
      uint64_t v43 = (uint8_t *)v42;
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      v64[0] = v44;
      uint64_t v59 = v17;
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v56 = v43 + 4;
      uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)(v61 + 8) + 32LL))(a5);
      unint64_t v47 = v46;
      uint64_t v63 = sub_100003E68(v45, v46, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v56, v43 + 12);
      swift_bridgeObjectRelease(v47);
      uint64_t v48 = v16;
      uint64_t v49 = a5;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v48, a5);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Removed record %s from cloud", v43, 0xCu);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

      (*(void (**)(uint64_t *, uint64_t))(v60 + 8))(v57, v59);
    }

    else
    {
      uint64_t v50 = v16;
      uint64_t v49 = a5;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v50, a5);

      (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v57, v17);
    }

    swift_beginAccess(v36, v64, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v36);
    if (result)
    {
      uint64_t v51 = result;
      uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)(v61 + 8) + 32LL))(v49);
      uint64_t v54 = v53;
      (*(void (**)(uint64_t))(*(void *)v51 + 144LL))(v52);
      swift_release(v51);
      return swift_bridgeObjectRelease(v54);
    }
  }

  return result;
}

uint64_t sub_100037AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[3] = a1;
  v5[4] = a2;
  void v5[5] = a3;
  uint64_t v3 = type metadata accessor for URL(0LL);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10003C248, v5, v3);
}

uint64_t sub_100037B20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v96 = *(void *)(v6 - 8);
  uint64_t v97 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v94 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v93 = (char *)&v90 - v9;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v92 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_t v91 = (char *)&v90 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v90 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v90 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v90 - v22;
  URL.appendingPathComponent(_:)(a1, a2);
  URL.appendingPathComponent(_:)(0x646574656C6544LL, 0xE700000000000000LL);
  URL.appendingPathComponent(_:)(a1, a2);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v18, v10);
  URL.appendingPathExtension(_:)(0x646574656C6564LL, 0xE700000000000000LL);
  uint64_t v95 = v24;
  v24(v21, v10);
  sub_100010A58(0LL, &qword_10007B6B0, &OBJC_CLASS___NSFileManager_ptr);
  sub_100047264();
  uint64_t v26 = v25;
  sub_1000472D0(a3);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v28 = [v27 defaultManager];
  object = URL.path(percentEncoded:)(1)._object;
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = [v28 fileExistsAtPath:v30];

  id v32 = [v27 defaultManager];
  if ((_DWORD)object)
  {
    URL._bridgeToObjectiveC()(v31);
    uint64_t v34 = v33;
    URL._bridgeToObjectiveC()(v35);
    uint64_t v37 = v36;
    uint64_t v100 = 0LL;
    unsigned __int8 v38 = [v32 replaceItemAtURL:v34 withItemAtURL:v36 backupItemName:0 options:0 resultingItemURL:0 error:&v100];

    uint64_t v39 = v100;
    uint64_t v40 = v23;
    if ((v38 & 1) == 0)
    {
LABEL_3:
      id v41 = v39;
      uint64_t v42 = _convertNSErrorToError(_:)(v39);

      swift_willThrow(v43);
      uint64_t v44 = sub_1000300CC();
      uint64_t v45 = v96;
      uint64_t v46 = v97;
      unint64_t v47 = v94;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v94, v44, v97);
      uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      uint64_t v49 = v92;
      v48(v92, a3, v10);
      swift_errorRetain(v42);
      uint64_t v50 = swift_errorRetain(v42);
      uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc(22LL, -1LL);
        uint64_t v54 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v93 = (char *)swift_slowAlloc(32LL, -1LL);
        uint64_t v100 = v93;
        *(_DWORD *)uint64_t v53 = 136315394;
        uint64_t v55 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v10, v55);
        unint64_t v58 = v57;
        uint64_t v98 = sub_100003E68(v56, v57, (uint64_t *)&v100);
        int v90 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease(v58);
        uint64_t v59 = v49;
        uint64_t v60 = (uint64_t (*)(char *, uint64_t))v95;
        v95(v59, v10);
        *(_WORD *)(v53 + 12) = 2112;
        swift_errorRetain(v42);
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError(v42);
        uint64_t v98 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v53 + 14, v53 + 22);
        *uint64_t v54 = v61;
        swift_errorRelease(v42);
        swift_errorRelease(v42);
        _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Unable to tombstone record to %s due to %@",  (uint8_t *)v53,  0x16u);
        uint64_t v62 = sub_100003288((uint64_t *)&unk_10007A940);
        swift_arrayDestroy(v54, 1LL, v62);
        swift_slowDealloc(v54, -1LL, -1LL);
        uint64_t v63 = v93;
        swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1LL, -1LL);
        swift_slowDealloc(v53, -1LL, -1LL);

        swift_errorRelease(v42);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v97);
        return v60(v90, v10);
      }

      swift_errorRelease(v42);
      swift_errorRelease(v42);
      uint64_t v88 = (uint64_t (*)(char *, uint64_t))v95;
      v95(v49, v10);
      swift_errorRelease(v42);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
      return v88(v40, v10);
    }
  }

  else
  {
    URL._bridgeToObjectiveC()(v31);
    uint64_t v66 = v65;
    URL._bridgeToObjectiveC()(v67);
    uint64_t v69 = v68;
    uint64_t v100 = 0LL;
    unsigned int v70 = [v32 moveItemAtURL:v66 toURL:v68 error:&v100];

    uint64_t v39 = v100;
    uint64_t v40 = v23;
    if (!v70) {
      goto LABEL_3;
    }
  }

  id v71 = v39;
  uint64_t v72 = sub_1000300CC();
  uint64_t v74 = v96;
  uint64_t v73 = v97;
  uint64_t v75 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v93, v72, v97);
  uint64_t v76 = v91;
  uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v91, a3, v10);
  unint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
  os_log_type_t v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = v76;
    uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v82 = swift_slowAlloc(32LL, -1LL);
    uint64_t v100 = (char *)v82;
    *(_DWORD *)uint64_t v81 = 136315138;
    int v90 = v40;
    uint64_t v83 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter(v10, v83);
    unint64_t v86 = v85;
    uint64_t v98 = sub_100003E68(v84, v85, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v81 + 4, v81 + 12);
    swift_bridgeObjectRelease(v86);
    uint64_t v87 = (uint64_t (*)(char *, uint64_t))v95;
    v95(v80, v10);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Tombstoned record to %s", v81, 0xCu);
    swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1LL, -1LL);
    swift_slowDealloc(v81, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v96 + 8))(v75, v97);
    return v87(v90, v10);
  }

  unint64_t v89 = v76;
  uint64_t v88 = (uint64_t (*)(char *, uint64_t))v95;
  v95(v89, v10);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v73);
  return v88(v40, v10);
}

uint64_t sub_1000382DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v142 = a3;
  uint64_t v3 = a2;
  uint64_t v5 = type metadata accessor for Optional(0LL, a2);
  uint64_t v135 = *(void *)(v5 - 8);
  uint64_t v136 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v141 = (char *)&v118 - v7;
  uint64_t v140 = *(void *)(v3 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::String v134 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  Swift::String v133 = (char *)&v118 - v10;
  uint64_t v11 = sub_100003288(&qword_10007B540);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v143 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v118 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v126 = (char *)&v118 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v118 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v131 = (char *)&v118 - v27;
  __chkstk_darwin(v26);
  uint64_t v127 = (char *)&v118 - v28;
  uint64_t v137 = type metadata accessor for Logger(0LL);
  uint64_t v146 = *(void (**)(char *, uint64_t))(v137 - 8);
  uint64_t v29 = __chkstk_darwin(v137);
  uint64_t v130 = (char *)&v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v118 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  id v125 = (char *)&v118 - v35;
  __chkstk_darwin(v34);
  uint64_t v139 = (char *)&v118 - v36;
  uint64_t v149 = Array.init()(v3);
  id v37 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v38 = a1;
  uint64_t v39 = (void *)sub_100047818(a1, 0LL);

  id v144 = v39;
  if (v39)
  {
    uint64_t v40 = sub_1000300CC();
    id v41 = (void (*)(char *, uint64_t, uint64_t))*((void *)v146 + 2);
    uint64_t v128 = v40;
    os_log_type_t v129 = v41;
    ((void (*)(char *))v41)(v139);
    uint64_t v42 = v143;
    uint64_t v43 = v38;
    uint64_t v130 = *(char **)(v143 + 16);
    uint64_t v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v130)(v127, v38, v14);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.default.getter();
    v122.n128_u64[0] = (unint64_t)v45;
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v121 = v33;
    char v120 = v20;
    uint64_t v123 = v3;
    uint64_t v145 = v43;
    if (v47)
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      v148[0] = v49;
      *(_DWORD *)uint64_t v48 = 136315138;
      uint64_t v119 = v48 + 4;
      uint64_t v50 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v51 = v127;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v14, v50);
      unint64_t v54 = v53;
      *(void *)&v147[0] = sub_100003E68(v52, v53, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v119, v48 + 12);
      swift_bridgeObjectRelease(v54);
      uint64_t v55 = *(void (**)(char *, uint64_t))(v42 + 8);
      v55(v51, v14);
      uint64_t v56 = (void *)v122.n128_u64[0];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v122.n128_u64[0], v46, "Enumerate: %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v57 = v49;
      uint64_t v3 = v123;
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      uint64_t v55 = *(void (**)(char *, uint64_t))(v42 + 8);
      v55(v127, v14);
    }

    uint64_t v127 = (char *)*((void *)v146 + 1);
    __n128 v69 = ((__n128 (*)(char *, uint64_t))v127)(v139, v137);
    uint64_t v70 = v132;
    id v71 = v131;
    uint64_t v146 = v55;
    uint64_t v139 = (char *)&type metadata for Any + 8;
    v69.n128_u64[0] = 136315394LL;
    __n128 v122 = v69;
    uint64_t v124 = v25;
    uint64_t v138 = v13;
    while (1)
    {
      id v75 = [v144 nextObject];
      if (v75)
      {
        id v76 = v75;
        _bridgeAnyObjectToAny(_:)(v147, v75);
        swift_unknownObjectRelease(v76);
      }

      else
      {
        memset(v147, 0, sizeof(v147));
      }

      sub_10003C274((uint64_t)v147, (uint64_t)v148);
      if (!v148[3]) {
        break;
      }
      int v77 = swift_dynamicCast(v13, v148, v139, v14, 6LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v13, v77 ^ 1u, 1LL, v14);
      uint64_t v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v42 + 32))(v71, v13, v14);
      uint64_t v79 = URL.deletingPathExtension()(v78);
      uint64_t v80 = URL.lastPathComponent.getter(v79);
      unint64_t v82 = v81;
      uint64_t v83 = v146;
      v146(v25, v14);
      uint64_t v84 = v71;
      unint64_t v85 = v141;
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v70 + 192LL))( v80,  v82,  v145,  v3,  v142);
      unint64_t v86 = v85;
      uint64_t v87 = v140;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v86, 1LL, v3) == 1)
      {
        uint64_t v88 = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v86, v136);
        if ((URL.hasDirectoryPath.getter(v88) & 1) != 0)
        {
          id v71 = v84;
          v146(v84, v14);
          swift_bridgeObjectRelease(v82);
          uint64_t v42 = v143;
          uint64_t v13 = v138;
        }

        else
        {
          unint64_t v89 = v125;
          v129(v125, v128, v137);
          int v90 = v126;
          ((void (*)(char *, uint64_t, uint64_t))v130)(v126, v145, v14);
          swift_bridgeObjectRetain(v82);
          uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
          os_log_type_t v93 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v92, v93))
          {
            uint64_t v94 = swift_slowAlloc(22LL, -1LL);
            uint64_t v95 = swift_slowAlloc(64LL, -1LL);
            v148[0] = v95;
            *(_DWORD *)uint64_t v94 = v122.n128_u32[0];
            swift_bridgeObjectRetain(v82);
            *(void *)(v94 + 4) = sub_100003E68(v80, v82, v148);
            swift_bridgeObjectRelease_n(v82, 3LL);
            *(_WORD *)(v94 + 12) = 2080;
            uint64_t v96 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
            uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter(v14, v96);
            unint64_t v99 = v98;
            *(void *)(v94 + 14) = sub_100003E68(v97, v98, v148);
            swift_bridgeObjectRelease(v99);
            uint64_t v100 = v89;
            uint64_t v101 = v146;
            v146(v90, v14);
            _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "Could not read item %s for records at %s",  (uint8_t *)v94,  0x16u);
            swift_arrayDestroy(v95, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v95, -1LL, -1LL);
            uint64_t v102 = v94;
            uint64_t v3 = v123;
            swift_slowDealloc(v102, -1LL, -1LL);
          }

          else
          {

            uint64_t v100 = v89;
            uint64_t v101 = v146;
            v146(v90, v14);
            swift_bridgeObjectRelease_n(v82, 2LL);
          }

          ((void (*)(char *, uint64_t))v127)(v100, v137);
          id v71 = v131;
          v101(v131, v14);
          uint64_t v42 = v143;
          uint64_t v70 = v132;
          uint64_t v25 = v124;
          uint64_t v13 = v138;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v82);
        uint64_t v72 = v133;
        (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v133, v86, v3);
        uint64_t v73 = v134;
        (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v134, v72, v3);
        uint64_t v74 = type metadata accessor for Array(0LL, v3);
        Array.append(_:)(v73, v74);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v72, v3);
        v83(v84, v14);
        uint64_t v42 = v143;
        id v71 = v84;
        uint64_t v13 = v138;
      }
    }

    sub_10000B4A8((uint64_t)v148, &qword_10007A7A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v13, 1LL, 1LL, v14);
LABEL_22:
    sub_10000B4A8((uint64_t)v13, &qword_10007B540);
    uint64_t v103 = v121;
    v129(v121, v128, v137);
    uint64_t v104 = v149;
    uint64_t v105 = v120;
    ((void (*)(char *, uint64_t, uint64_t))v130)(v120, v145, v14);
    swift_bridgeObjectRetain(v104);
    unint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    os_log_type_t v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = v3;
      uint64_t v110 = swift_slowAlloc(22LL, -1LL);
      uint64_t v111 = swift_slowAlloc(32LL, -1LL);
      v148[0] = v111;
      *(_DWORD *)uint64_t v110 = 134218242;
      *(void *)&v147[0] = Array.count.getter(v104, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v110 + 4, v110 + 12);
      swift_bridgeObjectRelease(v104);
      *(_WORD *)(v110 + 12) = 2080;
      uint64_t v112 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v14, v112);
      unint64_t v115 = v114;
      *(void *)&v147[0] = sub_100003E68(v113, v114, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v110 + 14, v110 + 22);
      swift_bridgeObjectRelease(v115);
      v146(v105, v14);
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Found %ld records at %s", (uint8_t *)v110, 0x16u);
      swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1LL, -1LL);
      swift_slowDealloc(v110, -1LL, -1LL);

      Swift::String v116 = v121;
    }

    else
    {
      swift_bridgeObjectRelease(v104);
      v146(v105, v14);

      Swift::String v116 = v103;
    }

    ((void (*)(char *, uint64_t))v127)(v116, v137);
    swift_beginAccess(&v149, v148, 0LL, 0LL);
  }

  else
  {
    uint64_t v58 = sub_1000300CC();
    (*((void (**)(char *, uint64_t, uint64_t))v146 + 2))(v130, v58, v137);
    uint64_t v59 = v143;
    uint64_t v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 16))(v17, v38, v14);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      v148[0] = v64;
      *(_DWORD *)uint64_t v63 = 136315138;
      uint64_t v65 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v14, v65);
      unint64_t v68 = v67;
      *(void *)&v147[0] = sub_100003E68(v66, v67, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease(v68);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v14);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Could not enumerate %s", v63, 0xCu);
      swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v14);
    }

    (*((void (**)(char *, uint64_t))v146 + 1))(v130, v137);
  }

  return v149;
}

uint64_t sub_100038FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 224LL))(a1, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 200LL))(v14, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_1000390C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = objc_autoreleasePoolPush();
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = v4;
  uint64_t v14 = a1;
  uint64_t v9 = type metadata accessor for Optional(0LL, a3);
  OS_dispatch_queue.sync<A>(execute:)(sub_10003D08C, v10, v9);
  objc_autoreleasePoolPop(v8);
}

uint64_t sub_100039158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v30 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v29 - v14;
  if ((SystemInfo.deviceFirstUnlocked.getter() & 1) != 0)
  {
    uint64_t v16 = Data.init(contentsOf:options:)(a2, 0LL);
    if (v4)
    {
      swift_errorRelease(v4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, 1LL, 1LL, v32);
    }

    else
    {
      _BYTE v29[4] = v13;
      uint64_t v24 = v16;
      unint64_t v25 = v17;
      uint64_t v26 = v32;
      (*(void (**)(void))(*(void *)a1 + 128LL))();
      sub_100008B40(v24, v25);
      uint64_t v28 = v30;
      uint64_t v27 = v31;
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v31, v8, v26);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v27, 0LL, 1LL, v26);
    }
  }

  else
  {
    uint64_t v19 = sub_1000300CC();
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v19, v9);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "record call failed because in device is in beforeFirstUnlock state",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, 1LL, 1LL, v32);
  }

uint64_t sub_100039544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a3;
  _OWORD v6[2] = a4;
  v6[3] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return OS_dispatch_queue.sync<A>(execute:)(sub_10003C2BC, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100039594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v193 = a6;
  uint64_t v181 = a4;
  uint64_t v186 = a3;
  uint64_t v194 = a1;
  uint64_t v195 = a2;
  uint64_t v180 = *(void *)(a5 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v179 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v176 = v8;
  __chkstk_darwin(v7);
  Swift::String v178 = (char *)&v165 - v9;
  uint64_t v10 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v182 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v188 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v177 = (char *)&v165 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  id v187 = (char *)&v165 - v20;
  __chkstk_darwin(v19);
  uint64_t v189 = (char *)&v165 - v21;
  uint64_t v22 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = type metadata accessor for URL(0LL);
  uint64_t v184 = *(void *)(v191 - 8);
  uint64_t v26 = __chkstk_darwin(v191);
  unint64_t v185 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  Swift::String v183 = (char *)&v165 - v29;
  uint64_t v175 = v30;
  __chkstk_darwin(v28);
  uint64_t v190 = (char *)&v165 - v31;
  if ((SystemInfo.deviceFirstUnlocked.getter() & 1) != 0)
  {
    uint64_t v173 = v12;
    unint64_t v174 = (uint8_t *)v13;
    uint64_t v172 = v10;
    uint64_t v32 = v193;
    Class v33 = isa;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v194 + 136LL))( v195,  a5,  *(void *)(v193 + 8),  *(void *)(v193 + 16));
    if (!v33)
    {
      uint64_t v36 = result;
      unint64_t v37 = v35;
      uint64_t v170 = 0LL;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100008B40(v36, v37);
      uint64_t v38 = v183;
      (*(void (**)(uint64_t, uint64_t))(v32 + 24))(a5, v32);
      Swift::String v39 = URL.path(percentEncoded:)(1);
      uint64_t v171 = *(void (**)(char *, uint64_t))(v184 + 8);
      v171(v38, v191);
      Swift::String v207 = v39;
      (*(void (**)(char *, void, uint64_t))(v23 + 104))( v25,  enum case for URL.DirectoryHint.isDirectory(_:),  v22);
      unint64_t v40 = sub_1000296C8();
      uint64_t v41 = (uint64_t)v190;
      URL.appending<A>(path:directoryHint:)(&v207, v25, &type metadata for String, v40);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      swift_bridgeObjectRelease(v207._object);
      sub_100010A58(0LL, &qword_10007B6B0, &OBJC_CLASS___NSFileManager_ptr);
      sub_100047264();
      uint64_t v43 = v42;
      sub_1000472D0(v41);
      swift_bridgeObjectRelease(v43);
      uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 32);
      uint64_t v167 = a5;
      uint64_t v45 = v44(a5, v32);
      uint64_t v47 = v46;
      uint64_t v48 = v185;
      (*(void (**)(uint64_t))(*(void *)v194 + 224LL))(v45);
      swift_bridgeObjectRelease(v47);
      uint64_t v49 = sub_1000300CC();
      uint64_t v51 = v173;
      uint64_t v50 = v174;
      uint64_t v52 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v174 + 2);
      unint64_t v53 = v189;
      uint64_t v168 = v49;
      uint64_t v169 = v52;
      uint64_t v54 = ((uint64_t (*)(char *))v52)(v189);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v58 = swift_slowAlloc(32LL, -1LL);
        v207._uint64_t countAndFlagsBits = v58;
        *(_DWORD *)uint64_t v57 = 136315138;
        uint64_t v166 = v57 + 4;
        swift_beginAccess(v48, &v202, 0LL, 0LL);
        uint64_t v59 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v191, v59);
        unint64_t v62 = v61;
        *(void *)&__int128 v204 = sub_100003E68(v60, v61, &v207._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v166, v57 + 12);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Writing record to file: %s", v57, 0xCu);
        swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);

        uint64_t v63 = v189;
        uint64_t v189 = (char *)*((void *)v174 + 1);
        uint64_t v64 = ((uint64_t (*)(char *, uint64_t))v189)(v63, v51);
      }

      else
      {

        uint64_t v189 = (char *)*((void *)v50 + 1);
        uint64_t v64 = ((uint64_t (*)(char *, uint64_t))v189)(v53, v51);
      }

      uint64_t v65 = v188;
      uint64_t v66 = v51;
      uint64_t v74 = v187;
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      swift_beginAccess(v48, v211, 0LL, 0LL);
      URL._bridgeToObjectiveC()(v75);
      int v77 = v76;
      unsigned int v78 = -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v76, 1LL);

      uint64_t v79 = v191;
      if (v78)
      {
        uint64_t v80 = v169(v74, v168, v66);
        unint64_t v81 = v74;
        unint64_t v82 = (os_log_s *)Logger.logObject.getter(v80);
        os_log_type_t v83 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v84 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v85 = swift_slowAlloc(32LL, -1LL);
          v207._uint64_t countAndFlagsBits = v85;
          *(_DWORD *)uint64_t v84 = 136315138;
          unint64_t v174 = v84 + 4;
          uint64_t v86 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter(v79, v86);
          unint64_t v89 = v88;
          *(void *)&__int128 v204 = sub_100003E68(v87, v88, &v207._countAndFlagsBits);
          uint64_t v66 = v173;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v174, v84 + 12);
          swift_bridgeObjectRelease(v89);
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "Wrote record to file: %s", v84, 0xCu);
          swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v90 = v85;
          uint64_t v65 = v188;
          swift_slowDealloc(v90, -1LL, -1LL);
          swift_slowDealloc(v84, -1LL, -1LL);

          uint64_t v91 = v187;
        }

        else
        {

          uint64_t v91 = v81;
        }

        ((void (*)(char *, uint64_t))v189)(v91, v66);
      }

      uint64_t v92 = sub_100003288(&qword_10007B6C8);
      uint64_t inited = swift_initStackObject(v92, v210);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100060880;
      uint64_t v94 = v48;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 4sub_10000DC70(0, 0) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v95 = NSFileProtectionKey;
      uint64_t v96 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v97 = sub_10003A3E4(inited);
      id v98 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10003A4EC(v97);
      uint64_t v100 = v99;
      swift_bridgeObjectRelease(v97);
      type metadata accessor for FileAttributeKey(0LL);
      sub_10000662C( &qword_10007B6D0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100062130);
      Class v101 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v102 = swift_bridgeObjectRelease(v100);
      URL.path.getter(v102);
      uint64_t v104 = v103;
      NSString v105 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v104);
      v207._uint64_t countAndFlagsBits = 0LL;
      LODWORD(v104) = [v98 setAttributes:v101 ofItemAtPath:v105 error:&v207];

      id v106 = (id)v207._countAndFlagsBits;
      if (!(_DWORD)v104)
      {
        uint64_t v110 = v106;
        _convertNSErrorToError(_:)(v106);

        swift_willThrow(v111);
        (*(void (**)(char *, uint64_t))(v182 + 8))(v65, v172);
        uint64_t v112 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v79);
        return v112(v94, v79);
      }

      swift_beginAccess(v94, &v207, 33LL, 0LL);
      uint64_t v107 = v170;
      URL.setResourceValues(_:)(v65);
      uint64_t v108 = v172;
      uint64_t v109 = v94;
      if (v107)
      {
        swift_endAccess(&v207);
LABEL_20:

        (*(void (**)(char *, uint64_t))(v182 + 8))(v65, v108);
        uint64_t v113 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v79);
        return v113(v109, v79);
      }

      swift_endAccess(&v207);
      if ((v181 & 2) == 0) {
        goto LABEL_20;
      }
      uint64_t v170 = 0LL;
      unint64_t v114 = *(void (**)(char *, uint64_t, uint64_t))(v180 + 16);
      unint64_t v115 = v178;
      uint64_t v116 = v167;
      v114(v178, v195, v167);
      uint64_t v117 = sub_100003288(&qword_10007B6D8);
      if ((swift_dynamicCast(&v204, v115, v116, v117, 6LL) & 1) != 0)
      {
        uint64_t v118 = sub_10003CEE8(&v204, (uint64_t)&v207);
        uint64_t v119 = URL.lastPathComponent.getter(v118);
        uint64_t v121 = v120;
        uint64_t v122 = (*(uint64_t (**)(uint64_t))(*(void *)v194 + 240LL))(v119);
        swift_bridgeObjectRelease(v121);
        uint64_t v123 = v177;
        v169(v177, v168, v66);
        id v187 = (char *)v122;
        uint64_t v124 = swift_retain_n(v122, 2LL);
        uint64_t v125 = v66;
        uint64_t v126 = (os_log_s *)Logger.logObject.getter(v124);
        os_log_type_t v127 = static os_log_type_t.default.getter();
        int v128 = v127;
        if (os_log_type_enabled(v126, v127))
        {
          uint64_t v129 = swift_slowAlloc(22LL, -1LL);
          uint64_t v130 = swift_slowAlloc(64LL, -1LL);
          LODWORD(v181) = v128;
          uint64_t v131 = v130;
          uint64_t v203 = v130;
          *(_DWORD *)uint64_t v129 = 136315394;
          uint64_t v132 = URL.lastPathComponent.getter(v130);
          unint64_t v134 = v133;
          *(void *)&__int128 v204 = sub_100003E68(v132, v133, &v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v129 + 4, v129 + 12);
          uint64_t v135 = swift_bridgeObjectRelease(v134);
          *(_WORD *)(v129 + 12) = 2080;
          uint64_t v136 = v187;
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v187 + 256LL))(&v196, v135);
          uint64_t v201 = v198;
          __int128 v199 = v196;
          __int128 v200 = v197;
          __int128 v204 = v196;
          __int128 v205 = v197;
          uint64_t v206 = v198;
          unint64_t v137 = sub_10003D034();
          uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for CloudStorageCoordinatorConfiguration,  v137);
          unint64_t v140 = v139;
          sub_1000295D0((uint64_t)&v199);
          sub_1000295D0((uint64_t)&v200);
          sub_1000295F8(&v201);
          *(void *)&__int128 v204 = sub_100003E68(v138, v140, &v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v129 + 14, v129 + 22);
          swift_release_n(v136, 2LL);
          swift_bridgeObjectRelease(v140);
          _os_log_impl( (void *)&_mh_execute_header,  v126,  (os_log_type_t)v181,  "Uploading record to cloud: %s for %s",  (uint8_t *)v129,  0x16u);
          swift_arrayDestroy(v131, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1LL, -1LL);
          swift_slowDealloc(v129, -1LL, -1LL);

          uint64_t v141 = v177;
          uint64_t v142 = v173;
        }

        else
        {

          swift_release_n(v187, 2LL);
          uint64_t v141 = v123;
          uint64_t v142 = v125;
        }

        ((void (*)(char *, uint64_t))v189)(v141, v142);
        uint64_t v145 = v208;
        uint64_t v146 = v209;
        sub_100008E78(&v207, v208);
        uint64_t v189 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v146 + 56))(v145, v146);
        unint64_t v147 = v183;
        uint64_t v148 = v184;
        (*(void (**)(char *, uint64_t, uint64_t))(v184 + 16))(v183, v186, v191);
        uint64_t v149 = v167;
        v114(v179, v195, v167);
        uint64_t v150 = *(unsigned __int8 *)(v148 + 80);
        uint64_t v151 = (v150 + 40) & ~v150;
        uint64_t v152 = v180;
        uint64_t v153 = *(unsigned __int8 *)(v180 + 80);
        uint64_t v154 = (v175 + v153 + v151) & ~v153;
        uint64_t v155 = (char *)swift_allocObject(&unk_100073408, v154 + v176, v150 | v153 | 7);
        uint64_t v156 = v193;
        uint64_t v157 = v194;
        *((void *)v155 + 2) = v149;
        *((void *)v155 + 3) = v156;
        *((void *)v155 + 4) = v157;
        uint64_t v158 = v147;
        uint64_t v159 = v191;
        (*(void (**)(char *, char *, uint64_t))(v148 + 32))(&v155[v151], v158, v191);
        (*(void (**)(char *, char *, uint64_t))(v152 + 32))(&v155[v154], v179, v149);
        unint64_t v160 = v187;
        uint64_t v161 = *(void (**)(char *, void, void (*)(void *, char), char *, __n128))(*(void *)v187 + 864LL);
        __n128 v162 = swift_retain(v157);
        uint64_t v163 = v189;
        v161(v189, 0LL, sub_10003CFB4, v155, v162);
        swift_release(v160);

        swift_release(v155);
        (*(void (**)(char *, uint64_t))(v182 + 8))(v188, v172);
        uint64_t v164 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v159);
        sub_10000467C(&v207);
        return v164(v185, v159);
      }

      else
      {
        uint64_t v206 = 0LL;
        __int128 v205 = 0u;
        __int128 v204 = 0u;

        (*(void (**)(char *, uint64_t))(v182 + 8))(v65, v108);
        uint64_t v143 = v191;
        id v144 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v191);
        sub_10000B4A8((uint64_t)&v204, &qword_10007B6E0);
        return v144(v109, v143);
      }
    }
  }

  else
  {
    uint64_t v67 = sub_1000300CC();
    uint64_t v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v67, v12);
    __n128 v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      id v71 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v71 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "store call failed because in device is in beforeFirstUnlock state",  v71,  2u);
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    unint64_t v72 = sub_10003CE90();
    uint64_t v73 = swift_allocError(&type metadata for UserFileManager.UserFileManagerError, v72, 0LL, 0LL);
    return swift_willThrow(v73);
  }

  return result;
}

unint64_t sub_10003A3E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100003288(&qword_10007B6F8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = *(v6 - 1);
    id v9 = v7;
    unint64_t result = sub_10003C3C0((uint64_t)v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = 8 * result;
    *(void *)(v4[6] + v12) = v8;
    *(void *)(v4[7] + v12) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10003A4EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100003288(&qword_10007B6F0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v35 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v34 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  int64_t v36 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v36 << 6);
      goto LABEL_28;
    }

    int64_t v11 = v36 + 1;
    if (__OFADD__(v36, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v11 >= v34) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v35 + 8 * v11);
    int64_t v13 = v36 + 1;
    if (!v12)
    {
      int64_t v13 = v36 + 2;
      if (v36 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v35 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v36 + 3;
        if (v36 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v35 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v36 + 4;
          if (v36 + 4 >= v34) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v35 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }

LABEL_27:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v36 = v13;
LABEL_28:
    uint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v40[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v15 = *(void **)&v40[0];
    *(void *)&v39[0] = v16;
    type metadata accessor for FileProtectionType(0LL);
    uint64_t v18 = v17;
    id v19 = v15;
    id v20 = v16;
    swift_dynamicCast((char *)v40 + 8, v39, v18, (char *)&type metadata for Any + 8, 7LL);
    uint64_t v21 = *(void *)&v40[0];
    sub_100006330((_OWORD *)((char *)v40 + 8), v38);
    sub_100006330(v38, v40);
    sub_100006330(v40, v39);
    uint64_t v22 = v3[5];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v25 = v24;
    Hasher.init(_seed:)(&v37, v22);
    String.hash(into:)(&v37, v23, v25);
    Swift::Int v26 = Hasher._finalize()();
    swift_bridgeObjectRelease(v25);
    uint64_t v27 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v28 = v26 & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)&v7[8 * (v28 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1LL << v28) & ~*(void *)&v7[8 * (v28 >> 6)])) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)&v7[8 * v29];
      }

      while (v33 == -1);
      unint64_t v8 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)&v7[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v8;
    *(void *)(v3[6] + 8 * v8) = v21;
    sub_100006330(v39, (_OWORD *)(v3[7] + 32 * v8));
    ++v3[2];
  }

  int64_t v14 = v36 + 5;
  if (v36 + 5 >= v34)
  {
LABEL_37:
    swift_release(v3);
    sub_10002DAC4(a1);
    return;
  }

  unint64_t v12 = *(void *)(v35 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v36 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v13 >= v34) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v35 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      int64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    unint64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10000656C(*(void *)(a1 + 56) + 40 * v12, (uint64_t)v46);
    uint64_t v44 = v19;
    uint64_t v45 = v18;
    uint64_t v41 = v46[0];
    uint64_t v42 = v46[1];
    uint64_t v43 = v47;
    v32[0] = v19;
    v32[1] = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v33, v32, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v30[0] = v41;
    v30[1] = v42;
    unint64_t v31 = v43;
    swift_dynamicCast(v36, v30, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7LL);
    uint64_t v37 = v33;
    uint64_t v38 = v34;
    Swift::String v39 = v35;
    sub_100006330(v36, v40);
    uint64_t v33 = v37;
    int64_t v34 = v38;
    uint64_t v35 = v39;
    sub_100006330(v40, v30);
    sub_100006330(v30, &v37);
    id v20 = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    uint64_t v22 = v20 & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~v7[v22 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1LL << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        Swift::Int v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = v7[v23];
      }

      while (v27 == -1);
      unint64_t v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)((char *)v7 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v9;
    unint64_t v10 = v3[6] + 40 * v9;
    *(_OWORD *)unint64_t v10 = v33;
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = v34;
    *(void *)(v10 + 32) = v35;
    sub_100006330(&v37, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }

  uint64_t v16 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10002DAC4(a1);
    return;
  }

  int64_t v14 = *(void *)(v29 + 8 * v16);
  if (v14)
  {
    uint64_t v15 = v8 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_37;
    }
    int64_t v14 = *(void *)(v29 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }

LABEL_39:
  __break(1u);
}

  __break(1u);
}

void sub_10003A88C(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  os_log_type_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v74 = a1;
  uint64_t v72 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  unint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v73 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  id v20 = (char *)&v62 - v19;
  __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v62 - v22;
  if ((a2 & 1) != 0)
  {
    Swift::String v39 = v74;
    swift_errorRetain(v74);
    uint64_t v40 = sub_1000300CC();
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v20, v40, v16);
    uint64_t v41 = v71;
    (*(void (**)(char *, uint64_t *, uint64_t))(v72 + 16))(v12, v70, v71);
    swift_errorRetain(v39);
    uint64_t v42 = swift_errorRetain(v39);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v68 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      os_log_type_t v70 = (uint64_t *)swift_slowAlloc(32LL, -1LL);
      id v76 = v70;
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v69 = v16;
      uint64_t v46 = v74;
      uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 32))(v41, a7);
      unint64_t v49 = v48;
      uint64_t v75 = sub_100003E68(v47, v48, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v49);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v12, v41);
      *(_WORD *)(v45 + 12) = 2112;
      swift_errorRetain(v46);
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError(v46);
      uint64_t v75 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v45 + 14, v45 + 22);
      uint64_t v51 = v68;
      *uint64_t v68 = v50;
      sub_10002E2E8(v46, 1);
      sub_10002E2E8(v46, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Error updating cloud with record %s: %@",  (uint8_t *)v45,  0x16u);
      uint64_t v52 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v51, 1LL, v52);
      swift_slowDealloc(v51, -1LL, -1LL);
      unint64_t v53 = v70;
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      sub_10002E2E8(v46, 1);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v20, v69);
    }

    else
    {
      unint64_t v61 = v74;
      sub_10002E2E8(v74, 1);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v12, v41);
      sub_10002E2E8(v61, 1);
      sub_10002E2E8(v61, 1);

      (*(void (**)(char *, uint64_t))(v73 + 8))(v20, v16);
    }
  }

  else
  {
    uint64_t v67 = v13;
    uint64_t v68 = v21;
    os_log_type_t v70 = v15;
    uint64_t v71 = a3;
    uint64_t v72 = a4;
    uint64_t v24 = v74;
    uint64_t v25 = sub_1000300CC();
    Swift::Int v26 = *(void (**)(void))(v73 + 16);
    uint64_t v65 = v25;
    uint64_t v66 = v26;
    v26(v23);
    id v27 = v24;
    unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v69 = v16;
    if (v30)
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      id v76 = (uint64_t *)v64;
      *(_DWORD *)unint64_t v31 = 136315138;
      uint64_t v63 = v31 + 4;
      id v32 = [v27 recordID];
      id v33 = [v32 recordName];

      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      unint64_t v36 = v35;

      uint64_t v37 = v74;
      uint64_t v75 = sub_100003E68(v34, v36, (uint64_t *)&v76);
      uint64_t v16 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v63, v31 + 12);
      swift_bridgeObjectRelease(v36);
      sub_10002E2E8(v37, 0);
      sub_10002E2E8(v37, 0);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Updating cloud record file: %s", v31, 0xCu);
      uint64_t v38 = v64;
      swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      uint64_t v54 = v74;
      sub_10002E2E8(v74, 0);
      sub_10002E2E8(v54, 0);
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v23, v16);
    uint64_t v55 = v67;
    id v56 = v27;
    uint64_t v57 = v70;
    sub_100031BBC(v56, v70);
    uint64_t v58 = v72;
    uint64_t v59 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v71 + 208LL);
    uint64_t v60 = sub_10000662C(&qword_10007B460, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061944);
    v59(v57, v58, 1LL, v55, v60);
    sub_100034370((uint64_t)v57);
    notify_post("com.apple.bluetoothuser.cloudChanged");
    sub_10002E2E8(v74, 0);
  }

uint64_t sub_10003B148(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  unint64_t v6 = *(dispatch_queue_s **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1000732B8, v8 + v5, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v9 + v8,  (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  uint64_t v10 = swift_allocObject(&unk_1000732E0, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10003C33C;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_10002F31C;
  uint64_t v15 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CA9C;
  void aBlock[3] = &unk_1000732F8;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v15;
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v6, v11);
  _Block_release(v11);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v10, "", 111LL, 251LL, 26LL, 1LL);
  swift_release(v9);
  uint64_t result = swift_release(v10);
  return result;
}

void sub_10003B2D8(void *a1)
{
  uint64_t v2 = sub_100003288(&qword_10007B540);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v76 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v76 - v12;
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v88 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v82 = (char *)&v76 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v76 - v20;
  uint64_t v22 = sub_1000300CC();
  unint64_t v89 = v15;
  uint64_t v86 = (void (*)(char *))v15[2];
  uint64_t v87 = v22;
  v86(v21);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  id v90 = a1;
  uint64_t v80 = v23;
  uint64_t v24 = ((uint64_t (*)(char *, void *, uint64_t))v23)(v13, a1, v5);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter();
  uint64_t v84 = v25;
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v83 = (char *)swift_slowAlloc(32LL, -1LL);
    v92[0] = v83;
    uint64_t v79 = v27;
    *(_DWORD *)id v27 = 136315138;
    uint64_t v85 = (void (*)(char *, uint64_t))(v27 + 4);
    uint64_t v28 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v5, v28);
    unint64_t v31 = v30;
    *(void *)&v91[0] = sub_100003E68(v29, v30, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, (char *)v91 + 8, v85, v27 + 12);
    swift_bridgeObjectRelease(v31);
    uint64_t v85 = *(void (**)(char *, uint64_t))(v6 + 8);
    v85(v13, v5);
    id v32 = v84;
    os_log_type_t v33 = v26;
    uint64_t v34 = v79;
    _os_log_impl((void *)&_mh_execute_header, v84, v33, "Obliterating all user's local storage from %s", v79, 0xCu);
    unint64_t v35 = v83;
    swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    uint64_t v85 = *(void (**)(char *, uint64_t))(v6 + 8);
    v85(v13, v5);
  }

  uint64_t v84 = (os_log_s *)v89[1];
  ((void (*)(char *, uint64_t))v84)(v21, v14);
  unint64_t v89 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v36 = [v89 defaultManager];
  uint64_t v37 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v90, 0LL, 0LL, 0LL, 0LL);

  Swift::String v39 = v82;
  id v90 = v37;
  if (v37)
  {
    uint64_t v79 = 0LL;
    os_log_type_t v83 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v38 = 136315138LL;
    __int128 v77 = v38;
    *(void *)&__int128 v38 = 138412290LL;
    __int128 v76 = v38;
    unsigned int v78 = v4;
    while (1)
    {
      id v40 = objc_msgSend(v90, "nextObject", (void)v76, *((void *)&v76 + 1));
      if (v40)
      {
        id v41 = v40;
        _bridgeAnyObjectToAny(_:)(v91, v40);
        swift_unknownObjectRelease(v41);
      }

      else
      {
        memset(v91, 0, sizeof(v91));
      }

      sub_10003C274((uint64_t)v91, (uint64_t)v92);
      if (!v92[3]) {
        break;
      }
      int v42 = swift_dynamicCast(v4, v92, v83, v5, 6LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, v42 ^ 1u, 1LL, v5);
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
      id v43 = [v89 defaultManager];
      URL._bridgeToObjectiveC()(v44);
      uint64_t v46 = v45;
      v92[0] = 0LL;
      unsigned int v47 = [v43 removeItemAtURL:v45 error:v92];

      id v48 = v92[0];
      if (v47)
      {
        ((void (*)(char *, uint64_t, uint64_t))v86)(v39, v87, v14);
        unint64_t v49 = v81;
        v80(v81, v11, v5);
        uint64_t v50 = (os_log_s *)Logger.logObject.getter(v48);
        os_log_type_t v51 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v52 = v11;
          uint64_t v53 = v6;
          uint64_t v54 = v14;
          uint64_t v55 = v49;
          uint64_t v56 = swift_slowAlloc(12LL, -1LL);
          uint64_t v57 = (void *)swift_slowAlloc(32LL, -1LL);
          v92[0] = v57;
          *(_DWORD *)uint64_t v56 = v77;
          uint64_t v58 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v5, v58);
          unint64_t v61 = v60;
          *(void *)(v56 + 4) = sub_100003E68(v59, v60, (uint64_t *)v92);
          swift_bridgeObjectRelease(v61);
          uint64_t v62 = v55;
          uint64_t v14 = v54;
          uint64_t v6 = v53;
          uint64_t v11 = v52;
          uint64_t v4 = v78;
          uint64_t v63 = v85;
          v85(v62, v5);
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Deleted iCloud user file: %s", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v64 = v57;
          Swift::String v39 = v82;
          swift_slowDealloc(v64, -1LL, -1LL);
          swift_slowDealloc(v56, -1LL, -1LL);
        }

        else
        {

          uint64_t v63 = v85;
          v85(v49, v5);
        }

        ((void (*)(char *, uint64_t))v84)(v39, v14);
        v63(v11, v5);
      }

      else
      {
        id v65 = v92[0];
        uint64_t v66 = _convertNSErrorToError(_:)(v48);

        swift_willThrow(v67);
        ((void (*)(char *, uint64_t, uint64_t))v86)(v88, v87, v14);
        swift_errorRetain(v66);
        uint64_t v68 = swift_errorRetain(v66);
        uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = swift_slowAlloc(12LL, -1LL);
          uint64_t v72 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v71 = v76;
          swift_errorRetain(v66);
          uint64_t v73 = _swift_stdlib_bridgeErrorToNSError(v66);
          *(void *)(v71 + 4) = v73;
          *uint64_t v72 = v73;
          swift_errorRelease(v66);
          swift_errorRelease(v66);
          _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "Could not delete iCloud user file: %@",  (uint8_t *)v71,  0xCu);
          uint64_t v74 = sub_100003288((uint64_t *)&unk_10007A940);
          swift_arrayDestroy(v72, 1LL, v74);
          uint64_t v75 = v72;
          Swift::String v39 = v82;
          swift_slowDealloc(v75, -1LL, -1LL);
          swift_slowDealloc(v71, -1LL, -1LL);
        }

        else
        {

          swift_errorRelease(v66);
          swift_errorRelease(v66);
        }

        swift_errorRelease(v66);
        ((void (*)(char *, uint64_t))v84)(v88, v14);
        v85(v11, v5);
        uint64_t v79 = 0LL;
      }
    }

    sub_10000B4A8((uint64_t)v92, &qword_10007A7A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
LABEL_21:

    sub_10000B4A8((uint64_t)v4, &qword_10007B540);
  }

void sub_10003BB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  URL.appendingPathComponent(_:)(a1, a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t sub_10003BB5C(uint64_t a1, uint64_t a2)
{
  void v4[3] = a1;
  v4[4] = a2;
  uint64_t v2 = type metadata accessor for CloudStorageCoordinator(0LL);
  OS_dispatch_queue.sync<A>(execute:)(sub_10003C378, v4, v2);
  return v4[7];
}

uint64_t sub_10003BBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(uint64_t (**)(__n128))(*(void *)v2 + 104LL);
  __n128 v7 = swift_bridgeObjectRetain(a2);
  uint64_t v8 = v6(v7);
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_100027E38(a1, a2), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain(v11);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRetain(a2);
    sub_100011094(a1, a2, 0xD00000000000001CLL, 0x8000000100067660LL, (uint64_t)&off_100073200, v22);
    type metadata accessor for CloudStorageCoordinator(0LL);
    uint64_t v11 = sub_100011914(v22);
    uint64_t v12 = *(uint64_t (**)(_BYTE *, __n128))(*(void *)v3 + 120LL);
    swift_bridgeObjectRetain(a2);
    __n128 v13 = swift_retain(v11);
    uint64_t v14 = (void (*)(_BYTE *, void))v12(v21, v13);
    uint64_t v16 = v15;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    uint64_t v20 = *v16;
    *uint64_t v16 = 0x8000000000000000LL;
    sub_10003C8C8(v11, a1, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v18 = *v16;
    *uint64_t v16 = v20;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v18);
    v14(v21, 0LL);
  }

  return v11;
}

uint64_t sub_10003BD34()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10003BD60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  __n128 v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  Transaction.capture()();
  sub_100010A58(0LL, (unint64_t *)&qword_10007A800, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100003288((uint64_t *)&unk_10007A810);
  unint64_t v15 = sub_10003BF28();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  *(void *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000023LL,  0x8000000100067680LL,  v7,  v4,  v11,  0LL);
  return v1;
}

unint64_t sub_10003BF28()
{
  unint64_t result = qword_10007ACF0;
  if (!qword_10007ACF0)
  {
    uint64_t v1 = sub_1000064CC((uint64_t *)&unk_10007A810);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007ACF0);
  }

  return result;
}

uint64_t sub_10003BF90(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( &qword_10007B6D0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100062130);
  uint64_t v3 = sub_10000662C( &qword_10007B750,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100061F2C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10003C014(uint64_t a1)
{
  uint64_t v2 = sub_10000662C( &qword_10007B740,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1000620A0);
  uint64_t v3 = sub_10000662C( &qword_10007B748,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_100062040);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10003C098@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100036828(v1[3], v1[4], v1[5]);
  *a1 = result & 1;
  return result;
}

uint64_t type metadata accessor for UserFileManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd15UserFileManager);
}

uint64_t sub_10003C0FC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10003C1B0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void *)(v1 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for URL(0LL) - 8) + 80LL);
  return sub_100037188(v0[4], (uint64_t)v0 + v4, (uint64_t)v0 + ((v4 + v5 + v6) & ~v6), v1, v2);
}

uint64_t sub_10003C220()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003C230(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003C240(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003C248@<X0>(uint64_t a1@<X8>)
{
  return sub_100037B20(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10003C274(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007A7A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C2BC()
{
  return sub_100039594(v0[4], v0[5], v0[6], v0[7], v0[2], v0[3]);
}

uint64_t sub_10003C2DC()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10003C33C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for URL(0LL) - 8) + 80LL);
  sub_10003B2D8((void *)(v0 + ((v1 + 16) & ~v1)));
}

uint64_t sub_10003C368()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003C378@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v1 + 16) + 240LL))( *(void *)(v1 + 24),  *(void *)(v1 + 32));
  *a1 = result;
  return result;
}

unint64_t sub_10003C3C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10003C440(a1, v7);
}

unint64_t sub_10003C440(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

void sub_10003C5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100003288(&qword_10007B6B8);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  swift_retain(v5);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v13 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v13 = v25;
      }
    }

void sub_10003C8C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100027E38(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10003CCA4();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      swift_release(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

unint64_t sub_10003CA28()
{
  unint64_t result = qword_10007B548;
  if (!qword_10007B548)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061C88, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B548);
  }

  return result;
}

unint64_t sub_10003CA70()
{
  unint64_t result = qword_10007B550;
  if (!qword_10007B550)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061BC0, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B550);
  }

  return result;
}

unint64_t sub_10003CAB8()
{
  unint64_t result = qword_10007B558;
  if (!qword_10007B558)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061CC0, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B558);
  }

  return result;
}

unint64_t sub_10003CB00()
{
  unint64_t result = qword_10007B560;
  if (!qword_10007B560)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061CE8, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B560);
  }

  return result;
}

unint64_t sub_10003CB48()
{
  unint64_t result = qword_10007B568;
  if (!qword_10007B568)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061D18, &type metadata for UserFileManager.UserFileManagerError);
    atomic_store(result, (unint64_t *)&qword_10007B568);
  }

  return result;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerFileType()
{
  return &type metadata for UserFileManager.UserFileManagerFileType;
}

uint64_t getEnumTagSinglePayload for UserFileManager.UserFileManagerError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for UserFileManager.UserFileManagerError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003CC30 + 4 * asc_100061B60[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003CC50 + 4 * byte_100061B65[v4]))();
  }
}

_BYTE *sub_10003CC30(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10003CC50(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003CC58(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003CC60(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003CC68(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003CC70(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t SystemInfo.lockState.getter()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerError()
{
  return &type metadata for UserFileManager.UserFileManagerError;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerCloudConstants()
{
  return &type metadata for UserFileManager.UserFileManagerCloudConstants;
}

void sub_10003CCA4()
{
  uint64_t v1 = v0;
  sub_100003288(&qword_10007B6B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_10003CE58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

unint64_t sub_10003CE90()
{
  unint64_t result = qword_10007B6C0;
  if (!qword_10007B6C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061D80, &type metadata for UserFileManager.UserFileManagerError);
    atomic_store(result, (unint64_t *)&qword_10007B6C0);
  }

  return result;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t sub_10003CEE8(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_10003CF00()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v4 | v7 | 7;
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v1);
  return swift_deallocObject(v0, v9, v10);
}

void sub_10003CFB4(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL);
  sub_10003A88C( a1,  v4,  v2[4],  (uint64_t)v2 + v8,  (void *)((char *)v2 + ((v8 + *(void *)(v7 + 64) + v9) & ~v9)),  v5,  v6);
}

unint64_t sub_10003D034()
{
  unint64_t result = qword_10007B6E8;
  if (!qword_10007B6E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060EFC, &type metadata for CloudStorageCoordinatorConfiguration);
    atomic_store(result, (unint64_t *)&qword_10007B6E8);
  }

  return result;
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

uint64_t sub_10003D08C@<X0>(uint64_t a1@<X8>)
{
  return sub_100039158(v1[4], v1[5], v1[2], a1);
}

uint64_t sub_10003D0A8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10003D0CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10003D18C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v3 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for URL(0LL) - 8) + 80LL);
  return sub_10003755C(a1, v1 + v6, *(void *)(v1 + v7), v1 + ((v7 + v8 + 8) & ~v8), v3, v4);
}

uint64_t sub_10003D210()
{
  return sub_10000662C( &qword_10007B710,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100061EF0);
}

uint64_t sub_10003D23C()
{
  return sub_10000662C( &qword_10007B718,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100061EC4);
}

uint64_t sub_10003D268()
{
  return sub_10000662C( &qword_10007B720,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_100062004);
}

uint64_t sub_10003D294()
{
  return sub_10000662C( &qword_10007B728,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_100061FD8);
}

uint64_t sub_10003D2C0()
{
  return sub_10000662C( &qword_10007B730,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_100062074);
}

uint64_t sub_10003D2EC()
{
  return sub_10000662C( &qword_10007B738,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100061F60);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  sub_10003D390();
  objc_autoreleasePoolPop(v3);
  id v4 = [(id)objc_opt_self(NSRunLoop) currentRunLoop];
  [v4 run];

  return 0;
}

uint64_t sub_10003D390()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for BluetoothUserDaemon(0LL);
  sub_100058C0C();
  sub_100004600();
  uint64_t v10 = (*(uint64_t (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v6);
  static DispatchQoS.unspecified.getter(v10);
  int64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v11 = sub_10003D5AC();
  uint64_t v12 = sub_100003288((uint64_t *)&unk_10007A810);
  unint64_t v13 = sub_10003BF28();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v12, v13, v0, v11);
  id v14 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000013LL,  0x8000000100067800LL,  v5,  v2,  v9,  0LL);
  uint64_t v15 = sub_100059440((uint64_t)v14);
  (*(void (**)(void))(*(void *)v15 + 400LL))();
  uint64_t v16 = DarwinNotificationManager.shared.unsafeMutableAddressor();
  uint64_t v17 = *v16;
  uint64_t v18 = *(void (**)(__n128))(*(void *)*v16 + 136LL);
  __n128 v19 = swift_retain(*v16);
  v18(v19);

  swift_release(v15);
  return swift_release(v17);
}

unint64_t sub_10003D5AC()
{
  unint64_t result = qword_10007ACE0;
  if (!qword_10007ACE0)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10007ACE0);
  }

  return result;
}

uint64_t Data.init(hexString:)(uint64_t a1, uint64_t a2)
{
  if ((((uint64_t (*)(void))String.count.getter)() & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  Swift::String v4 = String.uppercased()();
  int64_t v22 = sub_100004184(v4._countAndFlagsBits, (unint64_t)v4._object);
  swift_bridgeObjectRelease(v4._object);
  uint64_t result = String.count.getter(a1, a2);
  if (result >= 0) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = result + 1;
  }
  if (result >= -1)
  {
    if (result <= 1)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
    }

    else
    {
      size_t v7 = v6 >> 1;
      uint64_t v8 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v6 >> 1, &type metadata for UInt8);
      v8[2] = v7;
      bzero(v8 + 4, v7);
    }

    uint64_t v9 = String.count.getter(a1, a2);
    uint64_t result = swift_bridgeObjectRelease(a2);
    if (v9 >= 1)
    {
      unint64_t v10 = 0LL;
      unint64_t v11 = v22 + 4;
      unint64_t v12 = v22[2];
      while (1)
      {
        uint64_t v13 = __OFADD__(v10, 2LL) ? 0x7FFFFFFFFFFFFFFFLL : v10 + 2;
        if (v10 >= v12) {
          break;
        }
        if (v10 + 1 >= v12) {
          goto LABEL_36;
        }
        unsigned int v14 = *((unsigned __int8 *)v11 + v10);
        unsigned int v15 = *((unsigned __int8 *)v11 + v10 + 1);
        if (!isxdigit(v14) || (uint64_t result = isxdigit(v15), !(_DWORD)result))
        {
          swift_bridgeObjectRelease(v8);
          swift_release(v22);
          return 0LL;
        }

        if (v14 >= 0x41) {
          int v16 = 55;
        }
        else {
          int v16 = 48;
        }
        unsigned int v17 = v14 - v16;
        if ((v17 & 0xFFFFFF00) != 0) {
          goto LABEL_37;
        }
        if (v15 >= 0x41) {
          int v18 = 55;
        }
        else {
          int v18 = 48;
        }
        unsigned int v19 = v15 - v18;
        if ((v19 & 0xFFFFFF00) != 0) {
          goto LABEL_38;
        }
        __int16 v20 = 16 * (v17 & 0xF) + v19;
        if ((v20 & 0x100) != 0) {
          goto LABEL_40;
        }
        if (v10 >> 1 >= v8[2]) {
          goto LABEL_41;
        }
        *((_BYTE *)v8 + (v10 >> 1) + 32) = v20;
        unint64_t v10 = v13;
        if (v13 >= v9) {
          goto LABEL_31;
        }
      }

      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }

LABEL_42:
  __break(1u);
  return result;
}

void Data.hexString.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v3);
  sub_10003E7DC(0xD000000000000010LL, 0x8000000100067820LL);
  __asm { BR              X9 }

uint64_t sub_10003D8A8()
{
  if (BYTE6(v3) + 0x4000000000000000LL < 0) {
    goto LABEL_20;
  }
  size_t v7 = sub_10003DE54(0LL, (2LL * BYTE6(v3)) & ~((2LL * BYTE6(v3)) >> 63), 0, (char *)_swiftEmptyArrayStorage);
  if (v5)
  {
    if (v5 == 1) {
      uint64_t v8 = (int)v4;
    }
    else {
      uint64_t v8 = *(void *)(v4 + 16);
    }
    sub_100008EB0(v4, v3);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v4, v3, v8);
  Swift::UInt8_optional v9 = Data.Iterator.next()();
  if ((*(_WORD *)&v9 & 0x100) == 0)
  {
    Swift::UInt8 value = v9.value;
    uint64_t v11 = v2 + 32;
    while (1)
    {
      unint64_t v12 = value >> 4;
      if (v12 >= *(void *)(v2 + 16)) {
        break;
      }
      __int16 v13 = *(_WORD *)(v11 + 2 * v12);
      unint64_t v15 = *((void *)v7 + 2);
      unint64_t v14 = *((void *)v7 + 3);
      unint64_t v16 = v15 + 1;
      if (v15 >= v14 >> 1) {
        size_t v7 = sub_10003DE54((char *)(v14 > 1), v15 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v16;
      *(_WORD *)&v7[2 * v15 + 32] = v13;
      __int16 v17 = *(_WORD *)(v11 + 2LL * (value & 0xF));
      unint64_t v18 = *((void *)v7 + 3);
      *((void *)v7 + 2) = v15 + 2;
      *(_WORD *)&v7[2 * v16 + 32] = v17;
      Swift::UInt8_optional v19 = Data.Iterator.next()();
      Swift::UInt8 value = v19.value;
      if ((*(_WORD *)&v19 & 0x100) != 0) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    JUMPOUT(0x10003DA88LL);
  }

void Data.intValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  uint64_t v6 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    if ((v4 & 0x1000000000000000LL) != 0)
    {
      sub_10003DF48(v2, v4, 16LL);
LABEL_46:
      swift_bridgeObjectRelease(v4);
      return;
    }

    if ((v4 & 0x2000000000000000LL) == 0)
    {
      if ((v2 & 0x1000000000000000LL) != 0) {
        uint64_t v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2, v4);
      }
      sub_10003E02C(v8, v6, 16LL);
      goto LABEL_46;
    }

    v24[0] = v2;
    v24[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    if (v2 == 43)
    {
      if (v5)
      {
        uint64_t v15 = v5 - 1;
        if (v15)
        {
          uint64_t v16 = 0LL;
          __int16 v17 = (unsigned __int8 *)v24 + 1;
          do
          {
            int v18 = *v17;
            unsigned __int8 v19 = v18 - 48;
            if ((v18 - 48) >= 0xA)
            {
              if ((v18 - 65) < 6)
              {
                unsigned __int8 v19 = v18 - 55;
              }

              else
              {
                unsigned __int8 v19 = v18 - 87;
              }
            }

            BOOL v14 = __OFADD__(16 * v16, v19);
            uint64_t v16 = 16 * v16 + v19;
            if (v14) {
              break;
            }
            ++v17;
            --v15;
          }

          while (v15);
        }

        goto LABEL_46;
      }
    }

    else
    {
      if (v2 != 45)
      {
        if (v5)
        {
          uint64_t v20 = 0LL;
          uint64_t v21 = (unsigned __int8 *)v24;
          do
          {
            int v22 = *v21;
            unsigned __int8 v23 = v22 - 48;
            if ((v22 - 48) >= 0xA)
            {
              if ((v22 - 65) < 6)
              {
                unsigned __int8 v23 = v22 - 55;
              }

              else
              {
                unsigned __int8 v23 = v22 - 87;
              }
            }

            BOOL v14 = __OFADD__(16 * v20, v23);
            uint64_t v20 = 16 * v20 + v23;
            if (v14) {
              break;
            }
            ++v21;
            --v5;
          }

          while (v5);
        }

        goto LABEL_46;
      }

      if (v5)
      {
        uint64_t v9 = v5 - 1;
        if (v9)
        {
          uint64_t v10 = 0LL;
          uint64_t v11 = (unsigned __int8 *)v24 + 1;
          do
          {
            int v12 = *v11;
            unsigned __int8 v13 = v12 - 48;
            if ((v12 - 48) >= 0xA)
            {
              if ((v12 - 65) < 6)
              {
                unsigned __int8 v13 = v12 - 55;
              }

              else
              {
                unsigned __int8 v13 = v12 - 87;
              }
            }

            BOOL v14 = __OFSUB__(16 * v10, v13);
            uint64_t v10 = 16 * v10 - v13;
            if (v14) {
              break;
            }
            ++v11;
            --v9;
          }

          while (v9);
        }

        goto LABEL_46;
      }

      __break(1u);
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease(v4);
  }

uint64_t Data.write(to:excludeFromBackup:options:)( uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int v25 = a2;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v26 = *(void *)(v11 - 8);
  uint64_t v27 = v11;
  __chkstk_darwin();
  unsigned __int8 v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  __int16 v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if ((a4 & 1) != 0) {
    uint64_t v18 = 1073741825LL;
  }
  else {
    uint64_t v18 = a3 | 1;
  }
  uint64_t v19 = v28;
  uint64_t result = Data.write(to:options:)(a1, v18, a5, a6);
  if (!v19)
  {
    URLResourceValues.init()(result);
    URLResourceValues.isExcludedFromBackup.setter(v25 & 1);
    uint64_t v21 = v26;
    uint64_t v22 = a1;
    uint64_t v23 = v27;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16))(v13, v22, v27);
    URL.setResourceValues(_:)(v17);
    (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v13, v23);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  }

  return result;
}

char *sub_10003DE54(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100003288(&qword_10007B758);
    uint64_t v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    int64_t v13 = v12 - 32;
    if (v12 < 32) {
      int64_t v13 = v12 - 31;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8]) {
      memmove(v14, v15, 2 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 2 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

unsigned __int8 *sub_10003DF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  __n128 v4 = swift_bridgeObjectRetain(a2);
  uint64_t v5 = String.init<A>(_:)( &v15,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v4);
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_10003E2A8(v5, v6);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v8);
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }

LABEL_7:
  int64_t v13 = sub_10003E02C(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

    return v17 ^ 1;
  }

  URL._bridgeToObjectiveC()(v18);
  uint64_t v33 = v32;
  type metadata accessor for FileAttributeKey(0LL);
  sub_10000662C( &qword_10007B6D0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100062130);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  unint64_t v61 = 0LL;
  int64_t v35 = [v13 createDirectoryAtURL:v33 withIntermediateDirectories:1 attributes:isa error:&v61];

  uint64_t v36 = v61;
  if (v35)
  {
    char v37 = v61;
    goto LABEL_7;
  }

  __int128 v38 = v61;
  Swift::String v39 = _convertNSErrorToError(_:)(v36);

  swift_willThrow(v40);
  id v41 = sub_1000300CC();
  int v42 = v56;
  id v43 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v10, v41, v56);
  swift_errorRetain(v39);
  os_log_type_t v44 = swift_errorRetain(v39);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  uint64_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    unsigned int v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v55 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unsigned int v47 = 138412290;
    swift_errorRetain(v39);
    id v48 = (void *)_swift_stdlib_bridgeErrorToNSError(v39);
    unint64_t v61 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v47 + 4, v47 + 12);
    unint64_t v49 = v55;
    int v42 = v56;
    *uint64_t v55 = v48;
    swift_errorRelease(v39);
    swift_errorRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "createDirectory error: %@", v47, 0xCu);
    uint64_t v50 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v49, 1LL, v50);
    swift_slowDealloc(v49, -1LL, -1LL);
    os_log_type_t v51 = v47;
    id v43 = v57;
    swift_slowDealloc(v51, -1LL, -1LL);

    swift_errorRelease(v39);
  }

  else
  {

    swift_errorRelease(v39);
    swift_errorRelease(v39);
    swift_errorRelease(v39);
  }

  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v42);
  return v17 ^ 1;
}

unsigned __int8 *sub_10003E02C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v14 = v9 * a3;
              uint64_t v9 = v14 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }

      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }

      if (result)
      {
        uint64_t v26 = 0LL;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0LL;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          uint64_t v29 = v26 * a3;
          uint64_t v26 = v29 + (v27 + v28);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }

  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0LL;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }

      else
      {
        char v21 = -55;
      }
    }

    else
    {
      char v21 = -48;
    }

    uint64_t v22 = v9 * a3;
    uint64_t v9 = v22 + (v20 + v21);
    ++v19;
    --v15;
  }

  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10003E2A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_10003E324(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10003E324(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_10003E468(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_1000042F8(v12, 0LL);
      unint64_t v5 = sub_10003E554((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_10003E468( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_10003E764(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_10003E764(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_10003E554( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_10003E764(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_10003E764(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t sub_10003E764(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

void *sub_10003E7DC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_7;
  }
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1;
  }
  Swift::Int v5 = String.UTF16View._nativeGetOffset(for:)((v4 << 16) | 7, a1, a2);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    unint64_t v6 = sub_10003EBEC(v5, 0LL);
    swift_bridgeObjectRetain(v2);
    unint64_t v2 = sub_10003E8AC((uint64_t)v8, (uint64_t)(v6 + 4), v5, a1, v2);
    swift_bridgeObjectRelease(v9);
    if (v2 == v5) {
      break;
    }
    __break(1u);
LABEL_7:
    Swift::Int v5 = String.UTF16View._foreignCount()();
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v6;
}

uint64_t sub_10003E8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (!a2)
  {
    uint64_t v11 = 0LL;
    __int16 v12 = 0;
    a3 = 0LL;
    char v15 = 1;
    goto LABEL_31;
  }

  swift_bridgeObjectRetain(a5);
  if (!a3)
  {
    uint64_t v11 = 0LL;
    __int16 v12 = 0;
    char v15 = 1;
    goto LABEL_30;
  }

  if (a3 < 0)
  {
    __break(1u);
    JUMPOUT(0x10003EBCCLL);
  }

  uint64_t v11 = 0LL;
  __int16 v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = a5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v30 = a1;
  char v15 = 1;
  unint64_t v16 = &dword_10003EBDC;
  unint64_t v17 = &dword_10003EBCC;
  while (1)
  {
    if ((v15 & 1) == 0)
    {
      char v15 = 1;
      LOWORD(v18) = v12;
      __int16 v12 = 0;
      goto LABEL_9;
    }

    if (v11 >= v8) {
      break;
    }
    if ((a5 & 0x1000000000000000LL) != 0)
    {
      uint64_t v21 = v14;
      uint64_t v22 = v16;
      uint64_t v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v11 << 16, a4, a5);
      unint64_t v17 = &dword_10003EBCC;
      unint64_t v16 = v22;
      uint64_t v14 = v21;
      uint64_t v18 = v23;
    }

    else
    {
      if ((a5 & 0x2000000000000000LL) == 0)
      {
        uint64_t v19 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000LL) == 0)
        {
          uint64_t v26 = v14;
          unint64_t v27 = v16;
          uint64_t v19 = _StringObject.sharedUTF8.getter(a4, a5);
          unint64_t v17 = &dword_10003EBCC;
          unint64_t v16 = v27;
          uint64_t v14 = v26;
        }

        LODWORD(v18) = *(unsigned __int8 *)(v19 + v11);
        if (*(char *)(v19 + v11) < 0) {
          __asm { BR              X9 }
        }

        ++v11;
        char v15 = 1;
        goto LABEL_9;
      }

      v31[0] = a4;
      v31[1] = v14;
      uint64_t v18 = *((unsigned __int8 *)v31 + v11);
      if (*((char *)v31 + v11) < 0) {
        __asm { BR              X9 }
      }

      uint64_t v20 = 1LL;
    }

    v11 += v20;
    if (WORD1(v18))
    {
      uint64_t v29 = v14;
      unsigned __int8 v24 = v17;
      __int16 v12 = Unicode.Scalar.UTF16View.subscript.getter(1LL, v18);
      __int16 v25 = Unicode.Scalar.UTF16View.subscript.getter(0LL, v18);
      unint64_t v17 = v24;
      unint64_t v16 = &dword_10003EBDC;
      uint64_t v14 = v29;
      LOWORD(v18) = v25;
      char v15 = 0;
    }

    else
    {
      char v15 = 1;
    }

void *sub_10003EBEC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100003288(&qword_10007B758);
  Swift::Int v5 = (void *)swift_allocObject(v4, 2 * v2 + 32, 7LL);
  int64_t v6 = j__malloc_size(v5);
  int64_t v7 = v6 - 32;
  if (v6 < 32) {
    int64_t v7 = v6 - 31;
  }
  v5[2] = a1;
  v5[3] = v7 & 0xFFFFFFFFFFFFFFFELL;
  return v5;
}

uint64_t sub_10003EC5C(uint64_t a1)
{
  uint64_t v9 = sub_100003288(&qword_10007B760);
  unint64_t v10 = sub_10003ECF4();
  v8[0] = a1;
  uint64_t v2 = sub_100008E78(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  sub_100034078(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_10000467C(v8);
  return v5;
}

unint64_t sub_10003ECF4()
{
  unint64_t result = qword_10007B768;
  if (!qword_10007B768)
  {
    uint64_t v1 = sub_1000064CC(&qword_10007B760);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007B768);
  }

  return result;
}

uint64_t sub_10003ED40()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10002F098(v0, qword_100080888);
  sub_100010C94(v0, (uint64_t)qword_100080888);
  uint64_t v1 = (uint64_t *)sub_10002FEE8();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  return Logger.init(subsystem:category:)(v2, v3, 0xD000000000000012LL, 0x80000001000678F0LL);
}

double variable initialization expression of LocalDispatchTimer.millisecondsPerSecond()
{
  return 1000.0;
}

uint64_t LocalDispatchTimer.isCancelled.getter()
{
  uint64_t ObjectType = swift_getObjectType(*(void *)(v0 + 40));
  return OS_dispatch_source.isCancelled.getter(ObjectType) & 1;
}

uint64_t LocalDispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)( void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v13 = swift_allocObject(v6, 72LL, 7LL);
  LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)( void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v95 = *(void *)(v14 - 8);
  uint64_t v96 = v14;
  __chkstk_darwin(v14);
  uint64_t v94 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v91 = *(void *)(v99 - 8);
  uint64_t v16 = __chkstk_darwin(v99);
  id v90 = (uint64_t *)((char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v81 - v18);
  uint64_t v100 = type metadata accessor for DispatchTime(0LL);
  uint64_t v93 = *(void *)(v100 - 8);
  uint64_t v20 = __chkstk_darwin(v100);
  uint64_t v92 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  Class v101 = (char *)&v81 - v22;
  uint64_t v23 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = (void *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v85 = *(v86 - 1);
  __chkstk_darwin(v86);
  uint64_t v87 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v83);
  uint64_t v84 = (char *)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = __chkstk_darwin(v29);
  id v98 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x408F400000000000LL;
  double v33 = a4 * 1000.0;
  double v34 = fmin(v33, 2147483650.0);
  if ((~*(void *)&v34 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  if (v34 <= -2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (v34 >= 2147483650.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  a5 = a5 * 1000.0;
  *(_DWORD *)(v6 + 24) = (int)v34;
  double v35 = fmin(a5, 2147483650.0);
  if ((~*(void *)&v35 & 0x7FF0000000000000LL) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (v35 <= -2147483650.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v35 >= 2147483650.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  a6 = a6 * 1000.0;
  *(_DWORD *)(v6 + 28) = (int)v35;
  double v36 = fmin(a6, 2147483650.0);
  if ((~*(void *)&v36 & 0x7FF0000000000000LL) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (v36 <= -2147483650.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if (v36 >= 2147483650.0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once(&qword_10007F8E0, sub_10003ED40);
    goto LABEL_14;
  }

  uint64_t v88 = v31;
  uint64_t v89 = v30;
  *(_DWORD *)(v6 + 32) = (int)v36;
  uint64_t v97 = a3;
  if (v33 <= 2147483650.0 && a5 <= 2147483650.0 && a6 <= 2147483650.0) {
    goto LABEL_17;
  }
  if (qword_10007F8E0 != -1) {
    goto LABEL_33;
  }
LABEL_14:
  uint64_t v37 = type metadata accessor for Logger(0LL);
  uint64_t v38 = sub_100010C94(v37, (uint64_t)qword_100080888);
  Swift::String v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    id v41 = (_DWORD *)swift_slowAlloc(42LL, -1LL);
    uint64_t v81 = a2;
    int v42 = v41;
    _DWORD *v41 = 134218752;
    double aBlock = 2147483650.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, v41 + 1, v41 + 3);
    unint64_t v82 = (void *)v23;
    *((_WORD *)v42 + 6) = 2048;
    double aBlock = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, (char *)v42 + 14, (char *)v42 + 22);
    *((_WORD *)v42 + 11) = 2048;
    double aBlock = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, v42 + 6, v42 + 8);
    *((_WORD *)v42 + swift_weakDestroy(v0 + 16) = 2048;
    uint64_t v23 = (uint64_t)v82;
    double aBlock = a6;
    a3 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, (char *)v42 + 34, (char *)v42 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "LocalDispatchTimer: Exceeded maximum value of %f: deadline: %f, repeating: %f, leeway: %f",  (uint8_t *)v42,  0x2Au);
    id v43 = v42;
    a2 = v81;
    swift_slowDealloc(v43, -1LL, -1LL);
  }

LABEL_17:
  *(void *)(v7 + 48) = a2;
  *(void *)(v7 + 56) = a3;
  if (a1)
  {
    swift_retain(a3);
    os_log_type_t v44 = a1;
  }

  else
  {
    uint64_t v81 = sub_100010A58(0LL, (unint64_t *)&qword_10007A800, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v45 = swift_retain(a3);
    unint64_t v82 = 0LL;
    uint64_t v46 = v24;
    unsigned int v47 = v19;
    uint64_t v48 = v7;
    unint64_t v49 = v98;
    static DispatchQoS.unspecified.getter(v45);
    double aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    uint64_t v50 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v51 = sub_100003288((uint64_t *)&unk_10007A810);
    uint64_t v52 = sub_10000AEBC((unint64_t *)&qword_10007ACF0, (uint64_t *)&unk_10007A810);
    uint64_t v53 = v84;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v51, v52, v83, v50);
    uint64_t v54 = v87;
    (*(void (**)(char *, void, void *))(v85 + 104))( v87,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v86);
    uint64_t v55 = v49;
    uint64_t v7 = v48;
    uint64_t v19 = v47;
    uint64_t v24 = v46;
    a1 = v82;
    os_log_type_t v44 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000037LL,  0x8000000100067840LL,  v55,  v53,  v54,  0LL);
  }

  *(void *)(v7 + 64) = v44;
  sub_100010A58(0LL, &qword_10007B770, &OBJC_CLASS___OS_dispatch_source_ptr);
  double aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  uint64_t v56 = sub_10000662C( &qword_10007B778,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v87 = a1;
  uint64_t v86 = v44;
  uint64_t v57 = sub_100003288(&qword_10007B780);
  uint64_t v58 = sub_10000AEBC(&qword_10007B788, &qword_10007B780);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v57, v58, v23, v56);
  uint64_t v59 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v26, v44);
  uint64_t v60 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  *(void *)(v7 + 4sub_10000DC70(0, 0) = v59;
  unint64_t v61 = v92;
  static DispatchTime.now()(v60);
  *uint64_t v19 = *(int *)(v7 + 24);
  uint64_t v62 = enum case for DispatchTimeInterval.milliseconds(_:);
  uint64_t v63 = v91;
  uint64_t v64 = *(void (**)(void *, uint64_t, uint64_t))(v91 + 104);
  uint64_t v65 = v99;
  v64(v19, enum case for DispatchTimeInterval.milliseconds(_:), v99);
  + infix(_:_:)(v61, v19);
  uint64_t v66 = *(void (**)(void *, uint64_t))(v63 + 8);
  v66(v19, v65);
  uint64_t v93 = *(void *)(v93 + 8);
  ((void (*)(char *, uint64_t))v93)(v61, v100);
  uint64_t v67 = v7;
  uint64_t v68 = *(unsigned int *)(v7 + 28);
  if ((int)v68 < 1)
  {
    uint64_t v70 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v69 = v90;
  }

  else
  {
    uint64_t v69 = v90;
    void *v90 = v68;
    uint64_t v70 = v62;
  }

  uint64_t v71 = v99;
  v64(v69, v70, v99);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v67 + 40));
  *uint64_t v19 = *(int *)(v67 + 32);
  v64(v19, v62, v71);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v101, v69, v19, ObjectType);
  v66(v19, v71);
  uint64_t v73 = swift_getObjectType(*(void *)(v67 + 40));
  uint64_t v74 = swift_allocObject(&unk_100073690, 24LL, 7LL);
  swift_weakInit(v74 + 16, v67);
  v103[3] = sub_10003F830;
  uint64_t v104 = v74;
  double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v103[0] = 1107296256LL;
  v103[1] = sub_100005A3C;
  v103[2] = &unk_1000736A8;
  uint64_t v75 = _Block_copy(&aBlock);
  uint64_t v76 = swift_retain(v74);
  __int128 v77 = v98;
  static DispatchQoS.unspecified.getter(v76);
  unsigned int v78 = v94;
  sub_10003F8B8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v77, v78, v75, v73);
  _Block_release(v75);

  swift_release(v97);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v78, v96);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v77, v89);
  v66(v69, v71);
  ((void (*)(char *, uint64_t))v93)(v101, v100);
  uint64_t v79 = v104;
  swift_release(v74);
  swift_release(v79);
  return v67;
}

uint64_t sub_10003F80C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10003F830()
{
  uint64_t result = swift_weakLoadStrong(v0 + 16);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v4 = *(void (**)(uint64_t))(result + 48);
    uint64_t v3 = *(void *)(result + 56);
    swift_retain(v3);
    uint64_t v5 = swift_release(v2);
    v4(v5);
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_10003F8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003F8B0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003F8B8()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v3 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

Swift::Void __swiftcall LocalDispatchTimer.resume()()
{
}

Swift::Void __swiftcall LocalDispatchTimer.cancel()()
{
}

uint64_t LocalDispatchTimer.deinit()
{
  return v0;
}

uint64_t LocalDispatchTimer.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for LocalDispatchTimer()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd18LocalDispatchTimer);
}

uint64_t sub_10003FA34()
{
  unint64_t v1 = 0xE100000000000000LL;
  v2._object = (void *)0x8000000100067910LL;
  v2._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v2);
  v3._object = (void *)0x8000000100067930LL;
  v3._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v3);
  _StringGuts.grow(_:)(18LL);
  uint64_t v4 = swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 144LL))(v4);
  if (v6) {
    unint64_t v1 = v6;
  }
  else {
    uint64_t v5 = 45LL;
  }
  unint64_t v7 = v1;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v1);
  v8._uint64_t countAndFlagsBits = 10LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x71696E5520534449LL;
  v9._object = (void *)0xEF203A4449206575LL;
  String.append(_:)(v9);
  uint64_t v10 = swift_bridgeObjectRelease(0xEF203A4449206575LL);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 200LL))(v10);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for CloudPairedDeviceRecord(0LL) - 8);
    unint64_t v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    do
    {
      v19._uint64_t countAndFlagsBits = sub_1000304D4(20);
      v19._object = v16;
      v17._uint64_t countAndFlagsBits = 10LL;
      v17._object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      String.append(_:)(v19);
      swift_bridgeObjectRelease(v19._object);
      v14 += v15;
      --v12;
    }

    while (v12);
  }

  swift_bridgeObjectRelease(v11);
  return 10LL;
}

uint64_t sub_10003FBDC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t sub_10003FC24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_10003FC74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 144LL))(v5);
  if (!v9) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1LL, 1LL, v3);
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v1 + 200LL))();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14)
  {
    uint64_t v15 = v12 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v16 = *(void *)(v4 + 72);
    while (1)
    {
      sub_10003432C(v15, (uint64_t)v7);
      Swift::String v17 = &v7[*(int *)(v3 + 24)];
      uint64_t v18 = *((void *)v17 + 1);
      BOOL v19 = *(void *)v17 == v10 && v11 == v18;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v17, v18, v10, v11, 0LL) & 1) != 0) {
        break;
      }
      sub_100034370((uint64_t)v7);
      v15 += v16;
      if (!--v14) {
        goto LABEL_10;
      }
    }

    sub_10003FDF4((uint64_t)v7, a1);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(a1, 0LL, 1LL, v3);
  }

  else
  {
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1LL, 1LL, v3);
  }

  swift_bridgeObjectRelease(v11);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_10003FDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

char *sub_10003FE38()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v47 - 8);
  uint64_t v7 = __chkstk_darwin(v47);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v44 - v11;
  __chkstk_darwin(v10);
  uint64_t v46 = (char *)&v44 - v13;
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t countAndFlagsBits = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if ((SystemInfo.deviceFirstUnlocked.getter() & 1) != 0)
  {
    uint64_t v18 = (dispatch_queue_s *)v1[4];
    uint64_t v19 = sub_100003288(&qword_10007B940);
    dispatch_queue_t v45 = v18;
    uint64_t v20 = OS_dispatch_queue.sync<A>(execute:)(sub_100042364, v1, v19);
    uint64_t countAndFlagsBits = (char *)aBlock._countAndFlagsBits;
    if (aBlock._countAndFlagsBits) {
      return countAndFlagsBits;
    }
    (*(void (**)(uint64_t))(*v1 + 232LL))(v20);
    uint64_t v21 = sub_10003048C();
    __n128 v22 = swift_beginAccess(v21, v53, 0LL, 0LL);
    uint64_t v23 = v47;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, v21, v47, v22);
    Swift::String v24 = URL.path(percentEncoded:)(1);
    os_log_type_t v44 = v1;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25(v9, v23);
    Swift::String aBlock = v24;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for URL.DirectoryHint.isDirectory(_:),  v2);
    unint64_t v26 = sub_1000296C8();
    uint64_t v27 = v46;
    URL.appending<A>(path:directoryHint:)(&aBlock, v5, &type metadata for String, v26);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease(aBlock._object);
    uint64_t v28 = v23;
    v25(v12, v23);
    uint64_t v29 = sub_100035DE4();
    uint64_t v30 = *v29;
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(*(void *)*v29 + 184LL);
    uint64_t v32 = type metadata accessor for CloudPairedDeviceRecord(0LL);
    uint64_t v33 = sub_10000662C(&qword_10007B460, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061944);
    __n128 v34 = swift_retain(v30);
    uint64_t countAndFlagsBits = (char *)v31(v27, v32, v33, v34);
    swift_release(v30);
    uint64_t v14 = swift_allocObject(&unk_1000736E0, 32LL, 7LL);
    double v35 = v44;
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v44;
    *(void *)(v14 + 24) = countAndFlagsBits;
    uint64_t v15 = swift_allocObject(&unk_100073708, 32LL, 7LL);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = sub_1000423AC;
    *(void *)(v15 + 24) = v14;
    uint64_t v51 = sub_1000109BC;
    uint64_t v52 = v15;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    unint64_t v49 = sub_10000CA9C;
    uint64_t v50 = &unk_100073720;
    double v36 = _Block_copy(&aBlock);
    uint64_t v37 = v52;
    swift_retain(v35);
    swift_bridgeObjectRetain(countAndFlagsBits);
    swift_retain(v15);
    swift_release(v37);
    dispatch_sync(v45, v36);
    _Block_release(v36);
    v25(v27, v28);
    LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v15, "", 115LL, 57LL, 49LL, 1LL);
    swift_release(v14);
    swift_release(v15);
    __break(1u);
  }

  uint64_t v38 = sub_100030044();
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(countAndFlagsBits, v38, v14);
  os_log_type_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    int v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v42 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Cloud Paired Devices read failed because device is in before first unlock state",  v42,  2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(countAndFlagsBits, v14);
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_10004028C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t sub_1000402D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 56);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100040324@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100040388(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL;
  swift_beginAccess(v3, v6, 33LL, 0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t sub_1000403F4()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_10004043C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_release(v4);
}

uint64_t sub_10004048C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  sub_1000404D8(a1, a2);
  return v5;
}

void *sub_1000404D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v96 = a2;
  uint64_t v97 = a1;
  uint64_t v4 = sub_100003288(&qword_10007B948);
  __chkstk_darwin(v4);
  uint64_t v84 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v95 = v6;
  __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v89 = v8;
  __chkstk_darwin(v8);
  uint64_t v86 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v90 = *(void *)(v10 - 8);
  uint64_t v91 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v80 - v14;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v15);
  Swift::String v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  Swift::String v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004600();
  v3[2] = 0LL;
  uint64_t v87 = v3 + 2;
  void v3[3] = 0LL;
  uint64_t v25 = (*(uint64_t (**)(char *, void, uint64_t))(v22 + 104))( v24,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v21);
  static DispatchQoS.unspecified.getter(v25);
  v98[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v26 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v27 = sub_100003288((uint64_t *)&unk_10007A810);
  uint64_t v28 = sub_10000AEBC((unint64_t *)&qword_10007ACF0, (uint64_t *)&unk_10007A810);
  dispatch thunk of SetAlgebra.init<A>(_:)(v98, v27, v28, v15, v26);
  uint64_t v29 = v96;
  v3[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ALL,  0x8000000100067950LL,  v20,  v17,  v24,  0LL);
  void v3[5] = 0LL;
  uint64_t v92 = (void *)((char *)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  *(void *)((char *)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator) = 0LL;
  uint64_t v30 = (char *)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription;
  uint64_t v31 = sub_100003288(&qword_10007AD48);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL);
  uint64_t v83 = (uint64_t)v30;
  uint64_t v82 = v31;
  v32(v30, 1LL, 1LL);
  uint64_t v33 = v97;
  v3[6] = v97;
  v3[7] = v29;
  type metadata accessor for UserFileManager();
  swift_bridgeObjectRetain(v29);
  sub_1000362CC((uint64_t)v13);
  v98[0] = v33;
  v98[1] = v29;
  uint64_t v35 = v88;
  uint64_t v34 = v89;
  double v36 = v86;
  (*(void (**)(char *, void, uint64_t))(v88 + 104))( v86,  enum case for URL.DirectoryHint.isDirectory(_:),  v89);
  unint64_t v37 = sub_1000296C8();
  uint64_t v38 = v85;
  URL.appending<A>(path:directoryHint:)(v98, v36, &type metadata for String, v37);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
  uint64_t v40 = v90;
  uint64_t v39 = v91;
  (*(void (**)(char *, uint64_t))(v90 + 8))(v13, v91);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))( (uint64_t)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL,  v38,  v39);
  uint64_t v42 = IDSCopyLocalDeviceUniqueID(v41);
  uint64_t v81 = v32;
  if (v42)
  {
    id v43 = (void *)v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    unint64_t v46 = v45;
  }

  else
  {
    uint64_t v44 = 0LL;
    unint64_t v46 = 0LL;
  }

  swift_beginAccess(v87, v101, 1LL, 0LL);
  uint64_t v47 = v3[3];
  v3[2] = v44;
  void v3[3] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = sub_100030044();
  uint64_t v50 = v93;
  uint64_t v49 = v94;
  uint64_t v51 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v93, v48, v95);
  swift_retain_n(v3, 2LL);
  swift_bridgeObjectRetain(v46);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = swift_slowAlloc(22LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    v98[0] = v56;
    *(_DWORD *)uint64_t v55 = 136315394;
    if (v46) {
      uint64_t v57 = v44;
    }
    else {
      uint64_t v57 = 45LL;
    }
    if (v46) {
      unint64_t v58 = v46;
    }
    else {
      unint64_t v58 = 0xE100000000000000LL;
    }
    swift_bridgeObjectRetain(v46);
    uint64_t v99 = sub_100003E68(v57, v58, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease_n(v46, 2LL);
    uint64_t v59 = swift_bridgeObjectRelease(v58);
    *(_WORD *)(v55 + 12) = 2048;
    uint64_t v60 = (*(uint64_t (**)(uint64_t))(*v3 + 200LL))(v59);
    uint64_t v61 = *(void *)(v60 + 16);
    swift_release(v3);
    swift_bridgeObjectRelease(v60);
    uint64_t v99 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v55 + 14, v55 + 22);
    swift_release(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "Start Cloud Pairing Manager (IDS ID: %s) with cached records count: %ld",  (uint8_t *)v55,  0x16u);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    uint64_t v62 = v55;
    uint64_t v29 = v96;
    swift_slowDealloc(v62, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
  }

  else
  {

    swift_bridgeObjectRelease_n(v46, 2LL);
    swift_release_n(v3, 2LL);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  }

  uint64_t v63 = (uint64_t)v84;
  uint64_t v64 = v97;
  uint64_t v65 = v83;
  uint64_t v66 = v82;
  uint64_t v67 = v81;
  uint64_t v68 = sub_100035DE4();
  uint64_t v69 = *v68;
  uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)*v68 + 232LL);
  __n128 v71 = swift_retain(*v68);
  uint64_t v72 = v70(v64, v29, v71);
  swift_release(v69);
  uint64_t v73 = v92;
  swift_beginAccess(v92, &v99, 1LL, 0LL);
  uint64_t v74 = *v73;
  *uint64_t v73 = v72;
  swift_release(v74);
  uint64_t v75 = *v68;
  uint64_t v76 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)*v68 + 232LL);
  __n128 v77 = swift_retain(v75);
  uint64_t v78 = v76(v64, v29, v77);
  swift_release(v75);
  swift_bridgeObjectRelease(v29);
  v98[3] = type metadata accessor for CloudPairingManager(0LL);
  v98[4] = (uint64_t)&off_100073748;
  v98[0] = (uint64_t)v3;
  swift_retain(v3);
  sub_100026B4C((uint64_t)v98);
  swift_release(v78);
  sub_10000467C(v98);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v67)(v63, 0LL, 1LL, v66);
  swift_beginAccess(v65, v98, 33LL, 0LL);
  sub_10004243C(v63, v65);
  swift_endAccess(v98);
  return v3;
}

uint64_t sub_100040C4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v33[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100003288(&qword_10007B948);
  __chkstk_darwin(v6);
  uint64_t v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100003288(&qword_10007AD48);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription;
  swift_beginAccess( v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription,  v36,  0LL,  0LL);
  sub_100042484(v13, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    uint64_t v14 = &qword_10007B948;
    uint64_t v15 = (uint64_t)v8;
  }

  else
  {
    sub_1000424CC((uint64_t)v8, (uint64_t)v12);
    uint64_t v16 = *sub_100035DE4();
    swift_beginAccess(v1 + 48, v33, 0LL, 0LL);
    uint64_t v17 = *(void *)(v1 + 48);
    uint64_t v18 = *(void *)(v1 + 56);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v16 + 232LL);
    swift_retain(v16);
    __n128 v20 = swift_bridgeObjectRetain(v18);
    uint64_t v21 = v19(v17, v18, v20);
    swift_release(v16);
    swift_bridgeObjectRelease(v18);
    sub_100026D50((uint64_t)v12);
    swift_release(v21);
    uint64_t v14 = &qword_10007AD48;
    uint64_t v15 = (uint64_t)v12;
  }

  sub_10000B4A8(v15, v14);
  uint64_t v22 = *sub_100035DE4();
  uint64_t v23 = (_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL);
  __n128 v24 = swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL, v35, 0LL, 0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v3 + 16))(v5, v23, v2, v24);
  uint64_t v25 = *(void (**)(_BYTE *, __n128))(*(void *)v22 + 216LL);
  __n128 v26 = swift_retain(v22);
  v25(v5, v26);
  swift_release(v22);
  uint64_t v27 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v27(v5, v2);
  uint64_t v28 = (void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator, v34, 0LL, 0LL);
  uint64_t v29 = *v28;
  if (*v28)
  {
    uint64_t v30 = *(void (**)(__n128))(*(void *)v29 + 744LL);
    __n128 v31 = swift_retain(*v28);
    v30(v31);
    swift_release(v29);
  }

  swift_bridgeObjectRelease(*(void *)(v1 + 24));

  swift_bridgeObjectRelease(*(void *)(v1 + 40));
  swift_bridgeObjectRelease(*(void *)(v1 + 56));
  v27(v23, v2);
  swift_release(*v28);
  sub_10000B4A8(v13, &qword_10007B948);
  return v1;
}

uint64_t sub_100040F14()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100040F38()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
  if (result)
  {
    uint64_t v2 = result;
    (*(void (**)(uint64_t))(*(void *)result + 736LL))(result);
    return swift_release(v2);
  }

  return result;
}

uint64_t sub_100040F80()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
  if (result)
  {
    uint64_t v2 = result;
    (*(void (**)(uint64_t))(*(void *)result + 744LL))(result);
    return swift_release(v2);
  }

  return result;
}

uint64_t sub_100040FC8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v0 + 32);
  aBlock[4] = sub_100043DC4;
  uint64_t v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100073878;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v13 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_100041194(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v94 = *(void *)(v4 - 8);
  uint64_t v95 = v4;
  __chkstk_darwin(v4);
  uint64_t v93 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v98 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v91 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v84 - v9;
  uint64_t v10 = sub_100003288(&qword_10007B950);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v87 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v85 = (uint64_t)&v84 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v84 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v90 = (uint64_t)&v84 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v96 = (uint64_t)&v84 - v25;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 200LL))(v24);
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 + 16);
  if (v28)
  {
    uint64_t v92 = v2;
    uint64_t v89 = v6;
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v30 = *(int *)(v13 + 24);
    uint64_t v86 = a1;
    __n128 v31 = (void *)(a1 + v30);
    uint64_t v32 = *(void *)(v14 + 72);
    while (1)
    {
      sub_10003432C(v29, (uint64_t)v21);
      uint64_t v33 = &v21[*(int *)(v13 + 24)];
      uint64_t v34 = *((void *)v33 + 1);
      uint64_t v35 = v31[1];
      BOOL v36 = *(void *)v33 == *v31 && v34 == v35;
      if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v33, v34, *v31, v35, 0LL) & 1) != 0) {
        break;
      }
      sub_100034370((uint64_t)v21);
      v29 += v32;
      if (!--v28)
      {
        uint64_t v37 = 1LL;
        goto LABEL_11;
      }
    }

    sub_10003FDF4((uint64_t)v21, (uint64_t)v12);
    uint64_t v37 = 0LL;
LABEL_11:
    uint64_t v6 = v89;
    uint64_t v2 = v92;
    a1 = v86;
  }

  else
  {
    uint64_t v37 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v37, 1LL, v13);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    sub_10000B4A8((uint64_t)v12, &qword_10007B950);
    uint64_t v38 = v96;
    sub_10003432C(a1, v96);
  }

  else
  {
    uint64_t v39 = v90;
    sub_10003FDF4((uint64_t)v12, v90);
    Swift::Int v40 = sub_100033608();
    if (v40 == sub_100033608())
    {
      uint64_t v92 = v2;
      uint64_t v41 = sub_1000300CC();
      uint64_t v42 = v98;
      id v43 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v88, v41, v6);
      uint64_t v44 = v85;
      sub_10003432C(v39, v85);
      uint64_t v45 = v87;
      uint64_t v46 = sub_10003432C(a1, v87);
      uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
      os_log_type_t v48 = static os_log_type_t.default.getter();
      LODWORD(v96) = v48;
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = v44;
        uint64_t v50 = swift_slowAlloc(22LL, -1LL);
        uint64_t v95 = swift_slowAlloc(64LL, -1LL);
        uint64_t v101 = v95;
        *(_DWORD *)uint64_t v50 = 136315394;
        uint64_t v51 = sub_10000662C( &qword_10007B958,  type metadata accessor for CloudPairedDeviceRecord,  (uint64_t)&unk_1000618F4);
        uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v13, v51);
        unint64_t v54 = v53;
        uint64_t v99 = sub_100003E68(v52, v53, &v101);
        uint64_t v89 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v50 + 4, v50 + 12);
        swift_bridgeObjectRelease(v54);
        sub_100034370(v49);
        *(_WORD *)(v50 + 12) = 2080;
        uint64_t v55 = v87;
        uint64_t v56 = v51;
        uint64_t v39 = v90;
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v13, v56);
        unint64_t v59 = v58;
        uint64_t v99 = sub_100003E68(v57, v58, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v50 + 14, v50 + 22);
        swift_bridgeObjectRelease(v59);
        sub_100034370(v55);
        _os_log_impl( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v96,  "Dropping same record update: %s for %s",  (uint8_t *)v50,  0x16u);
        uint64_t v60 = v95;
        swift_arrayDestroy(v95, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v50, -1LL, -1LL);

        uint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v88, v89);
      }

      else
      {
        sub_100034370(v44);
        sub_100034370(v45);

        uint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v43, v6);
      }

      (*(void (**)(uint64_t))(*(void *)v92 + 352LL))(v61);
      return sub_100034370(v39);
    }

    uint64_t v38 = v96;
    sub_10003432C(v39, v96);
    sub_100031A1C(a1);
    sub_100034370(v39);
  }

  uint64_t v62 = v93;
  uint64_t v63 = v6;
  uint64_t v64 = v97;
  sub_100040FC8();
  uint64_t v65 = *sub_100035DE4();
  uint64_t v66 = *(void (**)(__n128))(*(void *)v2 + 232LL);
  __n128 v67 = swift_retain(v65);
  v66(v67);
  uint64_t v68 = *(void *)sub_100035AF0();
  uint64_t v69 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v65 + 208LL);
  uint64_t v70 = sub_10000662C(&qword_10007B460, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061944);
  v69(v38, v62, v68, v13, v70);
  uint64_t v71 = v64;
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v62, v95);
    swift_release(v65);
    uint64_t v72 = sub_1000300CC();
    uint64_t v73 = v98;
    uint64_t v74 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v91, v72, v63);
    swift_errorRetain(v64);
    uint64_t v75 = swift_errorRetain(v64);
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v79 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v78 = 138412290;
      swift_errorRetain(v64);
      uint64_t v80 = _swift_stdlib_bridgeErrorToNSError(v64);
      uint64_t v101 = v80;
      uint64_t v74 = v91;
      uint64_t v38 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v78 + 4, v78 + 12);
      *uint64_t v79 = v80;
      uint64_t v71 = v64;
      swift_errorRelease(v64);
      swift_errorRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unable to store device record with error: %@", v78, 0xCu);
      uint64_t v81 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v79, 1LL, v81);
      swift_slowDealloc(v79, -1LL, -1LL);
      uint64_t v82 = v78;
      uint64_t v73 = v98;
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(v64);
      swift_errorRelease(v64);
    }

    swift_errorRelease(v71);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v63);
  }

  else
  {
    swift_release(v65);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v62, v95);
  }

  uint64_t v39 = v38;
  return sub_100034370(v39);
}

uint64_t sub_100041934(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100040FC8();
  uint64_t v7 = *sub_100035DE4();
  uint64_t v8 = *(void (**)(__n128))(*(void *)v1 + 232LL);
  __n128 v9 = swift_retain(v7);
  v8(v9);
  uint64_t v10 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v7 + 160LL);
  uint64_t v11 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v12 = sub_10000662C(&qword_10007BC90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061870);
  v10(a1, v6, v11, v12);
  swift_release(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return notify_post("com.apple.bluetoothuser.cloudChanged");
}

uint64_t sub_100041A34()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for CloudPairedDeviceRecord(0LL) - 8);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      sub_100041ABC(v4, v0);
      v4 += v5;
      --v2;
    }

    while (v2);
  }

  return swift_bridgeObjectRelease(v1);
}

void sub_100041ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v84 = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  __chkstk_darwin(v5);
  uint64_t v78 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  __chkstk_darwin(v7);
  uint64_t v85 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003288((uint64_t *)&unk_10007B360);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v75 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v74 - v12;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v76 = (char *)&v74 - v20;
  __chkstk_darwin(v19);
  uint64_t v81 = (char *)&v74 - v21;
  uint64_t v22 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v74 - v26;
  uint64_t v29 = sub_10000662C(&qword_10007BC90, v28, (uint64_t)&unk_100061870);
  uint64_t v87 = v22;
  Class v88 = sub_10002F5E0(v22, v29);
  id v30 = -[objc_class recordChangeTag](v88, "recordChangeTag");
  os_log_type_t v77 = v25;
  uint64_t v86 = a1;
  if (!v30)
  {
    sub_10003432C(a1, (uint64_t)v27);
    goto LABEL_7;
  }

  __n128 v31 = v30;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  swift_bridgeObjectRelease(v33);
  sub_10003432C(a1, (uint64_t)v27);
  if (!v33)
  {
LABEL_7:
    sub_100034370((uint64_t)v27);
    goto LABEL_16;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v81, &v27[*(int *)(v87 + 20)], v14);
  id v34 = -[objc_class modificationDate](v88, "modificationDate");
  if (v34)
  {
    uint64_t v35 = v34;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

    BOOL v36 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v36(v13, v18, v14);
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v37(v13, 0LL, 1LL, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) != 1)
    {
      uint64_t v38 = v76;
      v36(v76, v13, v14);
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v37(v13, 1LL, 1LL, v14);
  }

  id v39 = -[objc_class creationDate](v88, "creationDate");
  if (!v39)
  {
    uint64_t v42 = (uint64_t)v75;
    uint64_t v43 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v37)(v75, 1LL, 1LL, v14);
    uint64_t v38 = v76;
    goto LABEL_13;
  }

  Swift::Int v40 = v39;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

  uint64_t v41 = *(void (**)(void))(v15 + 32);
  uint64_t v42 = (uint64_t)v75;
  v41();
  v37((char *)v42, 0LL, 1LL, v14);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v42, 1LL, v14);
  uint64_t v38 = v76;
  if ((_DWORD)v43 == 1)
  {
LABEL_13:
    static Date.now.getter(v43);
    sub_10000B4A8(v42, (uint64_t *)&unk_10007B360);
    goto LABEL_14;
  }

  ((void (*)(char *, uint64_t, uint64_t))v41)(v76, v42, v14);
LABEL_14:
  sub_10000B4A8((uint64_t)v13, (uint64_t *)&unk_10007B360);
LABEL_15:
  uint64_t v44 = v81;
  char v45 = static Date.> infix(_:_:)(v81, v38);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v15 + 8);
  v46(v38, v14);
  v46(v44, v14);
  sub_100034370((uint64_t)v27);
  if ((v45 & 1) == 0)
  {
LABEL_20:

    return;
  }

LABEL_16:
  uint64_t v47 = v84;
  sub_100040FC8();
  uint64_t v48 = *sub_100035DE4();
  uint64_t v49 = *(void (**)(__n128))(*(void *)v47 + 232LL);
  __n128 v50 = swift_retain(v48);
  uint64_t v51 = v85;
  v49(v50);
  uint64_t v52 = *(void *)sub_100035AF0();
  unint64_t v53 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v48 + 208LL);
  uint64_t v54 = sub_10000662C(&qword_10007B460, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061944);
  uint64_t v55 = v86;
  v53(v86, v51, v52, v87, v54);
  if (!v3)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
    swift_release(v48);
    goto LABEL_20;
  }

  (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
  swift_release(v48);
  uint64_t v56 = sub_1000300CC();
  unint64_t v58 = v78;
  uint64_t v57 = v79;
  uint64_t v59 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v78, v56, v80);
  uint64_t v60 = v55;
  uint64_t v61 = (uint64_t)v77;
  sub_10003432C(v60, (uint64_t)v77);
  swift_errorRetain(v3);
  uint64_t v62 = swift_errorRetain(v3);
  uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = swift_slowAlloc(22LL, -1LL);
    uint64_t v66 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v86 = swift_slowAlloc(32LL, -1LL);
    uint64_t v91 = v86;
    *(_DWORD *)uint64_t v65 = 136315394;
    uint64_t v67 = sub_10000662C(&qword_10007B958, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000618F4);
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v87, v67);
    unint64_t v70 = v69;
    uint64_t v89 = sub_100003E68(v68, v69, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease(v70);
    sub_100034370(v61);
    *(_WORD *)(v65 + 12) = 2112;
    swift_errorRetain(v3);
    uint64_t v71 = _swift_stdlib_bridgeErrorToNSError(v3);
    uint64_t v89 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v65 + 14, v65 + 22);
    *uint64_t v66 = v71;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Error saving cloud record to cloud: %s due to %@",  (uint8_t *)v65,  0x16u);
    uint64_t v72 = sub_100003288((uint64_t *)&unk_10007A940);
    swift_arrayDestroy(v66, 1LL, v72);
    swift_slowDealloc(v66, -1LL, -1LL);
    uint64_t v73 = v86;
    swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);

    swift_errorRelease(v3);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v80);
  }

  else
  {

    swift_errorRelease(v3);
    sub_100034370(v61);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
  }

  uint64_t v26 = sub_100058DA0(0, a1);
  if ((v27 & 1) == 0)
  {
    uint64_t v28 = [objc_allocWithZone(NSString) initWithBytes:a1 + 32 length:v26 encoding:String.Encoding.rawValue.getter()];
    swift_bridgeObjectRelease(a1);
    if (v28)
    {
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    goto LABEL_20;
  }

uint64_t sub_100042210()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136LL))();
}

void sub_100042238(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100042260(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100042284()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352LL))();
}

uint64_t sub_1000422AC()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *v0;
  sub_100040FC8();
  uint64_t v6 = *sub_100035DE4();
  uint64_t v7 = *(void (**)(__n128))(*(void *)v5 + 232LL);
  __n128 v8 = swift_retain(v6);
  v7(v8);
  (*(void (**)(char *))(*(void *)v6 + 216LL))(v4);
  swift_release(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100042364@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100042380()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000423AC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + 40);
  *(void *)(v2 + 4sub_10000DC70(0, 0) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000423D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000423E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000423F8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for CloudPairingManager(uint64_t a1)
{
  uint64_t result = qword_10007FB00;
  if (!qword_10007FB00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudPairingManager);
  }
  return result;
}

uint64_t sub_10004243C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007B948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007B948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000424CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007AD48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_100042514(uint64_t a1, uint64_t a2)
{
  uint64_t v168 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  __chkstk_darwin(v168);
  uint64_t v5 = (uint64_t *)((char *)&v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v183 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v167 = (char *)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  v180.n128_u64[0] = (unint64_t)v166.n128_u64 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v179 = (char *)&v166 - v12;
  __chkstk_darwin(v11);
  Swift::String v178 = (char *)&v166 - v13;
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v197 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v172 = (char *)&v166 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v173 = (char *)&v166 - v21;
  __chkstk_darwin(v20);
  uint64_t v177 = (char *)&v166 - v22;
  uint64_t v194 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v193 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  os_log_type_t v192 = (char *)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v190 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  uint64_t v189 = (char *)&v166 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v182 = a2;
  uint64_t v181 = v5;
  uint64_t v195 = v6;
  uint64_t v196 = v14;
  uint64_t v184 = v17;
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v171 = &v208;
    __n128 v27 = swift_bridgeObjectRetain(a1);
    uint64_t v28 = 32LL;
    v27.n128_u64[0] = 138412290LL;
    __n128 v166 = v27;
    v27.n128_u64[0] = 138412546LL;
    __n128 v170 = v27;
    uint64_t v169 = (char *)&type metadata for Any + 8;
    uint64_t v29 = v26;
    uint64_t v176 = a1;
    while (1)
    {
      id v48 = *(id *)(a1 + v28);
      id v49 = [v48 zoneID];
      id v50 = [v49 zoneName];

      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      uint64_t v53 = v52;

      uint64_t v54 = sub_1000303E0();
      swift_beginAccess(v54, v209, 0LL, 0LL);
      uint64_t v55 = v54[1];
      if (*v54 == v51 && v55 == v53) {
        break;
      }
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(*v54, v55, v51, v53, 0LL);
      swift_bridgeObjectRelease(v53);
      if ((v57 & 1) != 0) {
        goto LABEL_14;
      }
      uint64_t v58 = sub_1000300CC();
      (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v173, v58, v14);
      uint64_t v59 = (os_log_s *)v48;
      uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t v61 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = swift_slowAlloc(12LL, -1LL);
        uint64_t v63 = v28;
        os_log_type_t v64 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v62 = v166.n128_u32[0];
        *(void *)(v62 + 4) = v59;
        *os_log_type_t v64 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Ignoring deleted record from unknown zone: %@",  (uint8_t *)v62,  0xCu);
        uint64_t v65 = sub_100003288((uint64_t *)&unk_10007A940);
        swift_arrayDestroy(v64, 1LL, v65);
        uint64_t v66 = v64;
        uint64_t v28 = v63;
        swift_slowDealloc(v66, -1LL, -1LL);
        uint64_t v14 = v196;
        swift_slowDealloc(v62, -1LL, -1LL);
      }

      else
      {

        uint64_t v60 = v59;
      }

      (*(void (**)(char *, uint64_t))(v197 + 8))(v173, v14);
LABEL_5:
      v28 += 24LL;
      if (!--v29)
      {
        swift_bridgeObjectRelease(a1);
        a2 = v182;
        goto LABEL_19;
      }
    }

    swift_bridgeObjectRelease(v53);
LABEL_14:
    unint64_t v187 = v28;
    uint64_t v188 = v29;
    uint64_t v67 = v198;
    __int128 v205 = sub_100043DC4;
    uint64_t v206 = v198;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v202 = 1107296256LL;
    uint64_t v203 = sub_100005A3C;
    __int128 v204 = &unk_100073850;
    uint64_t v68 = _Block_copy(&aBlock);
    swift_retain(v67);
    uint64_t v69 = v14;
    unint64_t v70 = v189;
    static DispatchQoS.unspecified.getter(v71);
    Swift::String v207 = _swiftEmptyArrayStorage;
    uint64_t v72 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v73 = sub_100003288((uint64_t *)&unk_10007A860);
    uint64_t v74 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
    uint64_t v75 = v192;
    uint64_t v76 = v194;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v207, v73, v74, v194, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v70, v75, v68);
    _Block_release(v68);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v75, v76);
    os_log_type_t v77 = v70;
    uint64_t v78 = v69;
    (*(void (**)(char *, uint64_t))(v190 + 8))(v77, v191);
    swift_release(v206);
    uint64_t v79 = sub_1000300CC();
    uint64_t v80 = v197;
    uint64_t v81 = v177;
    (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v177, v79, v78);
    id v82 = v48;
    swift_retain_n(v67, 2LL);
    id v83 = v82;
    uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
    os_log_type_t v85 = static os_log_type_t.info.getter();
    int v86 = v85;
    BOOL v87 = os_log_type_enabled(v84, v85);
    id v186 = v83;
    if (v87)
    {
      uint64_t v88 = swift_slowAlloc(22LL, -1LL);
      uint64_t v89 = (void *)swift_slowAlloc(8LL, -1LL);
      unint64_t v174 = v89;
      v185.n128_u64[0] = swift_slowAlloc(32LL, -1LL);
      Swift::String aBlock = (void **)v185.n128_u64[0];
      *(_DWORD *)uint64_t v88 = v170.n128_u32[0];
      int v175 = v86;
      Swift::String v207 = v83;
      id v90 = v83;
      uint64_t v91 = v171;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v171, v88 + 4, v88 + 12);
      *uint64_t v89 = v83;

      *(_WORD *)(v88 + 12) = 2080;
      __n128 v31 = v178;
      (*(void (**)(void))(*(void *)v198 + 232LL))();
      uint64_t v92 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter(v195, v92);
      unint64_t v95 = v94;
      uint64_t v96 = v81;
      uint64_t v30 = v183;
      (*(void (**)(char *, uint64_t))(v183 + 8))(v31, v195);
      Swift::String v207 = (void *)sub_100003E68(v93, v95, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v91, v88 + 14, v88 + 22);
      swift_release_n(v198, 2LL);
      swift_bridgeObjectRelease(v95);
      _os_log_impl( (void *)&_mh_execute_header,  v84,  (os_log_type_t)v175,  "Deleting record: %@ from %s",  (uint8_t *)v88,  0x16u);
      uint64_t v97 = sub_100003288((uint64_t *)&unk_10007A940);
      uint64_t v98 = v174;
      swift_arrayDestroy(v174, 1LL, v97);
      swift_slowDealloc(v98, -1LL, -1LL);
      unint64_t v99 = v185.n128_u64[0];
      swift_arrayDestroy(v185.n128_u64[0], 1LL, v169);
      uint64_t v32 = v195;
      swift_slowDealloc(v99, -1LL, -1LL);
      swift_slowDealloc(v88, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v197 + 8))(v96, v196);
    }

    else
    {

      swift_release_n(v198, 2LL);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v78);
      uint64_t v30 = v183;
      __n128 v31 = v178;
      uint64_t v32 = v195;
    }

    uint64_t v33 = *sub_100035DE4();
    *(void *)&double v34 = swift_retain(v33).n128_u64[0];
    id v35 = v186;
    id v36 = objc_msgSend(v186, "recordName", v34);
    v185.n128_u64[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v38 = v37;

    id v39 = v179;
    (*(void (**)(void))(*(void *)v198 + 232LL))();
    uint64_t v40 = sub_10003048C();
    __n128 v41 = swift_beginAccess(v40, v199, 0LL, 0LL);
    unint64_t v42 = v180.n128_u64[0];
    uint64_t v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v30 + 16))( v180.n128_u64[0],  v40,  v32,  v41);
    uint64_t v44 = URL.path.getter(v43);
    uint64_t v46 = v45;
    uint64_t v47 = *(void (**)(unint64_t, uint64_t))(v30 + 8);
    v47(v42, v32);
    URL.appendingPathComponent(_:)(v44, v46);
    swift_bridgeObjectRelease(v46);
    v47((unint64_t)v39, v32);
    (*(void (**)(unint64_t, uint64_t, char *))(*(void *)v33 + 144LL))(v185.n128_u64[0], v38, v31);

    swift_release(v33);
    swift_bridgeObjectRelease(v38);
    v47((unint64_t)v31, v32);
    uint64_t v5 = v181;
    uint64_t v14 = v196;
    a1 = v176;
    uint64_t v29 = v188;
    uint64_t v28 = v187;
    goto LABEL_5;
  }

void sub_10004377C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  __chkstk_darwin(v2);
  unint64_t v42 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  id v39 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v37 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  id v36 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v34 = a1;
    }
    else {
      uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (v7) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease(a1);
    return;
  }

  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_23;
  }
LABEL_3:
  if (v7 >= 1)
  {
    uint64_t v8 = 0LL;
    unint64_t v45 = a1 & 0xC000000000000001LL;
    v35[0] = a1;
    uint64_t v9 = v35[1];
    uint64_t v10 = v39;
    while (1)
    {
      id v11 = v45 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1) : *(id *)(a1 + 8 * v8 + 32);
      uint64_t v12 = v11;
      id v13 = objc_msgSend(v11, "zoneName", v35[0]);
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;

      uint64_t v17 = sub_1000303E0();
      swift_beginAccess(v17, v50, 0LL, 0LL);
      uint64_t v18 = v17[1];
      if (v14 == *v17 && v16 == v18) {
        break;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, *v17, v18, 0LL);
      swift_bridgeObjectRelease(v16);
      if ((v20 & 1) != 0) {
        goto LABEL_17;
      }

LABEL_6:
      if (v7 == ++v8) {
        goto LABEL_23;
      }
    }

    swift_bridgeObjectRelease(v16);
LABEL_17:
    aBlock[4] = sub_100043DA8;
    uint64_t v49 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100005A3C;
    void aBlock[3] = &unk_100073800;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain(v9);
    id v46 = v12;
    uint64_t v22 = v7;
    uint64_t v23 = v36;
    static DispatchQoS.unspecified.getter(v24);
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A860);
    uint64_t v27 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
    uint64_t v28 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v26, v27, v41, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v23, v10, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v28);
    uint64_t v29 = v23;
    uint64_t v7 = v22;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v38);
    swift_release(v49);
    uint64_t v30 = *sub_100035DE4();
    __n128 v31 = *(void (**)(__n128))(*(void *)v9 + 232LL);
    __n128 v32 = swift_retain(v30);
    uint64_t v33 = v42;
    v31(v32);
    a1 = v35[0];
    (*(void (**)(char *))(*(void *)v30 + 216LL))(v33);
    swift_release(v30);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v44);
    goto LABEL_6;
  }

  __break(1u);
}

unint64_t sub_100043B84()
{
  unint64_t result = qword_10007B960;
  if (!qword_10007B960)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000621FC, &type metadata for CloudPairingManager.CloudPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_10007B960);
  }

  return result;
}

uint64_t sub_100043BC8()
{
  return type metadata accessor for CloudPairingManager(0LL);
}

void sub_100043BD0(uint64_t a1)
{
  v6[0] = &unk_100062318;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  _OWORD v6[2] = &unk_100062330;
  v6[3] = &unk_100062348;
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v6[4] = *(void *)(v2 - 8) + 64LL;
    v6[5] = &unk_100062330;
    sub_100043C84(319LL);
    if (v5 <= 0x3F)
    {
      v6[6] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 7LL, v6, a1 + 80);
    }
  }

void sub_100043C84(uint64_t a1)
{
  if (!qword_10007B990)
  {
    uint64_t v2 = sub_1000064CC(&qword_10007AD48);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10007B990);
    }
  }

uint64_t storeEnumTagSinglePayload for CloudPairingManager.CloudPairingManagerError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100043D28 + 4 * byte_1000621F5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100043D5C + 4 * byte_1000621F0[v4]))();
}

uint64_t sub_100043D5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043D64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100043D6CLL);
  }
  return result;
}

uint64_t sub_100043D78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100043D80LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100043D84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043D8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudPairingManager.CloudPairingManagerError()
{
  return &type metadata for CloudPairingManager.CloudPairingManagerError;
}

uint64_t sub_100043DA8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 4sub_10000DC70(0, 0) = 0LL;
  return swift_bridgeObjectRelease(v1);
}

void sub_100043DD8()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUbiquitousKeyValueStore);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithStoreIdentifier:v1 type:2];

  static NSUbiquitousKeyValueStore.bluetoothCloudDefaults = (uint64_t)v2;
}

uint64_t *NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor()
{
  if (qword_10007FB10 != -1) {
    swift_once(&qword_10007FB10, sub_100043DD8);
  }
  return &static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
}

id static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.getter()
{
  if (qword_10007FB10 != -1) {
    swift_once(&qword_10007FB10, sub_100043DD8);
  }
  swift_beginAccess(&static NSUbiquitousKeyValueStore.bluetoothCloudDefaults, v1, 0LL, 0LL);
  return (id)static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
}

void static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.setter(uint64_t a1)
{
  if (qword_10007FB10 != -1) {
    swift_once(&qword_10007FB10, sub_100043DD8);
  }
  swift_beginAccess(&static NSUbiquitousKeyValueStore.bluetoothCloudDefaults, v3, 1LL, 0LL);
  id v2 = (void *)static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
  static NSUbiquitousKeyValueStore.bluetoothCloudDefaults = a1;
}

uint64_t (*static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.modify(uint64_t a1))(void)
{
  if (qword_10007FB10 != -1) {
    swift_once(&qword_10007FB10, sub_100043DD8);
  }
  swift_beginAccess(&static NSUbiquitousKeyValueStore.bluetoothCloudDefaults, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

uint64_t Subscription.subscriber.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Subscription.init(subscriber:unsubscribeBlock:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Subscription(0LL, a4, a3, a4);
  UUID.init()();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(a5, a1, a4);
  uint64_t v12 = (void *)(a5 + *(int *)(v10 + 32));
  void *v12 = a2;
  v12[1] = a3;
  return result;
}

uint64_t type metadata accessor for Subscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100044D88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscription);
}

uint64_t Subscription.unsubscribe(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  unint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004600();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
  uint64_t v32 = static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, void, uint64_t))(v10 + 16))(v12, v31[1], a3);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_100073928, v19 + 16, v17 | 7);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = *(void *)(a3 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v20 + v18, v12, a3);
  uint64_t v21 = (void *)(v20 + v19);
  uint64_t v22 = v34;
  *uint64_t v21 = v33;
  v21[1] = v22;
  aBlock[4] = sub_100044408;
  uint64_t v41 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100073940;
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = swift_retain(v22);
  static DispatchQoS.unspecified.getter(v24);
  id v39 = _swiftEmptyArrayStorage;
  unint64_t v25 = sub_1000444DC();
  uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A860);
  unint64_t v27 = sub_100006480();
  uint64_t v28 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v26, v27, v35, v25);
  uint64_t v29 = (void *)v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v28);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  return swift_release(v41);
}

uint64_t sub_100044338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = type metadata accessor for Subscription(0LL, v5, a3, a4);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4 + v9, v5);
  uint64_t v13 = v12 + *(int *)(v6 + 28);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_release(*(void *)(v12 + *(int *)(v6 + 32) + 8));
  swift_release(*(void *)(v4 + v11 + 8));
  return swift_deallocObject(v4, v11 + 16, v10);
}

uint64_t sub_100044408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Subscription(0LL, *(void *)(v4 + 16), a3, a4);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(uint64_t (**)(void))(v4 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  (*(void (**)(unint64_t))(v4 + v7 + *(int *)(v5 + 32)))(v4 + v7);
  return v8(0LL);
}

uint64_t sub_1000444C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000444D4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1000444DC()
{
  unint64_t result = qword_10007AD20;
  if (!qword_10007AD20)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10007AD20);
  }

  return result;
}

uint64_t static Subscription.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(int *)(type metadata accessor for Subscription(0LL, a3, a3, a4) + 28);
  return static UUID.== infix(_:_:)(a1 + v6, a2 + v6);
}

uint64_t sub_10004455C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Subscription.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), a4);
}

uint64_t sub_100044564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_10004456C(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for UUID(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      v5[2] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 0LL, 3LL, v5, a1 + 24);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100044600(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v7 + v10) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64) + 7LL;
  unint64_t v14 = ((v13 + v12) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  unsigned int v15 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + (((v15 | 7) + 16LL) & ~(unint64_t)(v15 | 7)));
  }

  else
  {
    uint64_t v18 = v8;
    uint64_t v19 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v20 = ((unint64_t)a2 + v11) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( ((unint64_t)a1 + v11) & v19,  v20,  v18);
    uint64_t v21 = (void *)((v13 + v20) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v22 = v21[1];
    uint64_t v23 = (void *)((v13 + (((unint64_t)a1 + v11) & v19)) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v23 = *v21;
    v23[1] = v22;
  }

  swift_retain(v22);
  return a1;
}

uint64_t sub_10004471C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  return swift_release(*(void *)(((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100044794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  uint64_t v13 = *(void *)(v8 + 64) + 7LL;
  unint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_retain(v16);
  return a1;
}

uint64_t sub_100044830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v7);
  uint64_t v13 = *(void *)(v8 + 64) + 7LL;
  unint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = v15[1];
  uint64_t v17 = v14[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

uint64_t sub_1000448D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
  *(_OWORD *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_100044970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v7);
  uint64_t v13 = *(void *)(v8 + 64) + 7LL;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = *(void *)(v14 + 8);
  *(_OWORD *)unint64_t v14 = *(_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8LL);
  swift_release(v15);
  return a1;
}

uint64_t sub_100044A10(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = v8;
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v6 + 64) + v13;
  uint64_t v15 = *(void *)(v9 + 64) + 7LL;
  if (v11 < a2)
  {
    if (((((v15 + (v14 & ~v13)) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v11 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0LL;
    }
    __asm { BR              X17 }
  }

  if ((_DWORD)v7 == v11)
  {
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v21 = a1;
    uint64_t v10 = v7;
    uint64_t v12 = v5;
    return v20(v21, v10, v12);
  }

  uint64_t v21 = (v14 + a1) & ~v13;
  if ((_DWORD)v10 == v11)
  {
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v20(v21, v10, v12);
  }

  unint64_t v22 = *(void *)((v15 + v21) & 0xFFFFFFFFFFFFF8LL);
  if (v22 >= 0xFFFFFFFF) {
    LODWORD(v22) = -1;
  }
  return (v22 + 1);
}

void sub_100044BA0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  if (v10 >= a3)
  {
    int v13 = 0;
    if (a2 <= v10) {
      goto LABEL_19;
    }
  }

  else
  {
    if (((*(_DWORD *)(v9 + 64) {
         + 7
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    if (a2 <= v10) {
LABEL_19:
    }
      __asm { BR              X15 }
  }

  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v14 = ~v10 + a2;
    bzero( a1,  ((*(void *)(v9 + 64)
      + 7LL
    *a1 = v14;
  }

  __asm { BR              X10 }

void sub_100044CD0()
{
  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x100044D6CLL);
}

void sub_100044CD8()
{
  *(_DWORD *)(v0 + v2) = 0;
  if (v1) {
    JUMPOUT(0x100044CE0LL);
  }
  JUMPOUT(0x100044D6CLL);
}

void sub_100044D30()
{
  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x100044D6CLL);
}

void sub_100044D38()
{
  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x100044D6CLL);
}

uint64_t sub_100044D40@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(_WORD *)(v10 + v14) = 0;
  if (!(_DWORD)v11) {
    JUMPOUT(0x100044D6CLL);
  }
  if ((_DWORD)v13 == v7)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v4 = v10;
    uint64_t v5 = v11;
    a1 = v13;
    a2 = v12;
  }

  else
  {
    uint64_t v4 = (v8 + v10) & v9;
    if ((_DWORD)a1 != v7) {
      JUMPOUT(0x100044D4CLL);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    uint64_t v5 = v11;
  }

  return v3(v4, v5, a1, a2);
}

uint64_t sub_100044D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t DarwinNotificationHelper.__allocating_init(notificationHandlers:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 24LL, 7LL);
  DarwinNotificationHelper.init(notificationHandlers:)(a1);
  return v3;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t (**v5)();
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t (**v27)();
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  id v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v38;
  __int128 v39;
  uint64_t v1 = 0LL;
  uint64_t v35 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 64);
  uint64_t v36 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      uint64_t v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      uint64_t v38 = v1;
      int v7 = v6 | (v1 << 6);
    }

    else
    {
      uint64_t v8 = v1 + 1;
      if (__OFADD__(v1, 1LL)) {
        goto LABEL_36;
      }
      if (v8 >= v36)
      {
LABEL_33:
        swift_release(a1);
        return (*(uint64_t (**)(void *))(v34 + 112))(&_swiftEmptyDictionarySingleton);
      }

      uint64_t v9 = *(void *)(v35 + 8 * v8);
      uint64_t v10 = v1 + 1;
      if (!v9)
      {
        uint64_t v10 = v1 + 2;
        if (v1 + 2 >= v36) {
          goto LABEL_33;
        }
        uint64_t v9 = *(void *)(v35 + 8 * v10);
        if (!v9)
        {
          uint64_t v10 = v1 + 3;
          if (v1 + 3 >= v36) {
            goto LABEL_33;
          }
          uint64_t v9 = *(void *)(v35 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v1 + 4;
            if (v1 + 4 >= v36) {
              goto LABEL_33;
            }
            uint64_t v9 = *(void *)(v35 + 8 * v11);
            if (!v9)
            {
              while (1)
              {
                uint64_t v10 = v11 + 1;
                if (__OFADD__(v11, 1LL)) {
                  goto LABEL_37;
                }
                if (v10 >= v36) {
                  goto LABEL_33;
                }
                uint64_t v9 = *(void *)(v35 + 8 * v10);
                ++v11;
                if (v9) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v10 = v1 + 4;
          }
        }
      }

uint64_t DarwinNotificationHelper.init(notificationHandlers:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - v8;
  CFNotificationCenterRef v58 = CFNotificationCenterGetDarwinNotifyCenter();
  if (!v58) {
    goto LABEL_30;
  }
  v1[2] = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v10 = DarwinNotificationManager.shared.unsafeMutableAddressor();
  uint64_t v11 = *v10;
  uint64_t v12 = *(void (**)(const void *, __n128))(*(void *)*v10 + 120LL);
  __n128 v13 = swift_retain(*v10);
  v12(v2, v13);
  swift_release(v11);
  uint64_t v14 = sub_10002FF10();
  uint64_t v56 = *(uint64_t (**)(char *))(v5 + 16);
  uint64_t v57 = v14;
  uint64_t v15 = v56(v9);
  unsigned int v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Setup darwin callback handlers", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v55 = *(void (**)(char *, uint64_t))(v5 + 8);
  v55(v9, v4);
  int64_t v20 = 0LL;
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v53 = a1 + 64;
  uint64_t v22 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v54 = (unint64_t)(v22 + 63) >> 6;
  *(void *)&__int128 v19 = 136315138LL;
  __int128 v50 = v19;
  uint64_t v49 = (char *)&type metadata for Any + 8;
  unint64_t v25 = v52;
  uint64_t v51 = a1;
  while (1)
  {
    if (v24)
    {
      unint64_t v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      int64_t v59 = v20;
      unint64_t v27 = v26 | (v20 << 6);
      goto LABEL_25;
    }

    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v28 >= v54) {
      goto LABEL_27;
    }
    unint64_t v29 = *(void *)(v53 + 8 * v28);
    int64_t v30 = v20 + 1;
    if (!v29)
    {
      int64_t v30 = v20 + 2;
      if (v20 + 2 >= v54) {
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v53 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = v20 + 3;
        if (v20 + 3 >= v54) {
          goto LABEL_27;
        }
        unint64_t v29 = *(void *)(v53 + 8 * v30);
        if (!v29) {
          break;
        }
      }
    }

LABEL_24:
    unint64_t v24 = (v29 - 1) & v29;
    int64_t v59 = v30;
    unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_25:
    uint64_t v32 = *(void **)(*(void *)(a1 + 48) + 8 * v27);
    uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 16 * v27 + 8);
    ((void (*)(char *, uint64_t, uint64_t))v56)(v25, v57, v4);
    uint64_t v34 = v32;
    swift_retain(v33);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc(12LL, -1LL);
      id v39 = v2;
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v60 = v40;
      *(_DWORD *)uint64_t v38 = v50;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v42 = v4;
      unint64_t v44 = v43;
      *(void *)(v38 + 4) = sub_100003E68(v41, v43, &v60);

      unint64_t v45 = v44;
      uint64_t v4 = v42;
      unint64_t v25 = v52;
      swift_bridgeObjectRelease(v45);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Setting up darwin callback handler for %s",  (uint8_t *)v38,  0xCu);
      swift_arrayDestroy(v40, 1LL, v49);
      uint64_t v46 = v40;
      uint64_t v2 = v39;
      a1 = v51;
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {
    }

    v55(v25, v4);
    CFNotificationCenterAddObserver( v58,  v2,  (CFNotificationCallback)sub_100045298,  v34,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    swift_release(v33);

    int64_t v20 = v59;
  }

  uint64_t v31 = v20 + 4;
  if (v20 + 4 >= v54)
  {
LABEL_27:
    swift_release(a1);

    return (uint64_t)v2;
  }

  unint64_t v29 = *(void *)(v53 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v20 + 4;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v30 >= v54) {
      goto LABEL_27;
    }
    unint64_t v29 = *(void *)(v53 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_24;
    }
  }

    uint64_t v11 = (v23 - 1) & v23;
    int64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_25:
    unint64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    unint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    int64_t v28 = *(void *)(v5 + 56) + 40 * v20;
    if ((v43 & 1) != 0)
    {
      unint64_t v29 = *(_OWORD *)v28;
      int64_t v30 = *(_OWORD *)(v28 + 16);
      uint64_t v47 = *(void *)(v28 + 32);
      unint64_t v45 = v29;
      uint64_t v46 = v30;
    }

    else
    {
      sub_10000656C(v28, (uint64_t)&v45);
      swift_bridgeObjectRetain(v26);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v27, v26);
    uint64_t v31 = Hasher._finalize()();
    uint64_t v32 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v33 = v31 & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        os_log_type_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v12 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v14 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v8 + 48) + 16 * v14);
    *uint64_t v15 = v27;
    v15[1] = v26;
    unsigned int v16 = *(void *)(v8 + 56) + 40 * v14;
    os_log_type_t v17 = v45;
    uint64_t v18 = v46;
    *(void *)(v16 + 32) = v47;
    *(_OWORD *)unsigned int v16 = v17;
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = v18;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  id v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v22, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v22 = -1LL << v39;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_44:
  swift_release(v5);
  void *v3 = v8;
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

void sub_100045298(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a1;
  id v9 = a3;
  id v10 = a5;
  sub_100046540(a2, a3);
}

LABEL_21:
      uint64_t v4 = (v9 - 1) & v9;
      uint64_t v38 = v10;
      uint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    }

    uint64_t v12 = 16 * v7;
    __n128 v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 16 * v7 + 8);
    uint64_t v15 = swift_allocObject(&unk_1000739E0, 32LL, 7LL);
    id v39 = *(_OWORD *)(v13 + v12);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = v39;
    swift_bridgeObjectRetain(v14);
    swift_retain(*((void *)&v39 + 1));
    unsigned int v16 = String._bridgeToObjectiveC()();
    os_log_type_t v17 = swift_allocObject(&unk_100073A08, 32LL, 7LL);
    *(void *)(v17 + swift_weakDestroy(v0 + 16) = sub_1000109BC;
    *(void *)(v17 + 24) = v15;
    swift_retain(v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    int64_t v20 = sub_100045DB8((uint64_t)v16);
    uint64_t v21 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    uint64_t v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    unint64_t v24 = v19;
    if (*((void *)&_swiftEmptyDictionarySingleton + 3) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_100046288();
        if ((v24 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_100045E38(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_100045DB8((uint64_t)v16);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_38;
      }
      int64_t v20 = v25;
      if ((v24 & 1) != 0)
      {
LABEL_4:
        uint64_t v5 = (uint64_t (**)())(*((void *)&_swiftEmptyDictionarySingleton + 7) + 16 * v20);
        swift_release(v5[1]);
        *uint64_t v5 = sub_1000109BC;
        v5[1] = (uint64_t (*)())v17;
        goto LABEL_5;
      }
    }

    *((void *)&_swiftEmptyDictionarySingleton + (v20 >> 6) + 8) |= 1LL << v20;
    *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + 8 * v2sub_10000DC70(0, 0) = v16;
    unint64_t v27 = (uint64_t (**)())(*((void *)&_swiftEmptyDictionarySingleton + 7) + 16 * v20);
    char *v27 = sub_1000109BC;
    v27[1] = (uint64_t (*)())v17;
    int64_t v28 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    unint64_t v29 = __OFADD__(v28, 1LL);
    int64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_35;
    }
    *((void *)&_swiftEmptyDictionarySingleton + 2) = v30;
    uint64_t v31 = v16;
LABEL_5:
    swift_release(v15);
    swift_bridgeObjectRelease(v14);

    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v1 = v38;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  type metadata accessor for CFString();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
  __break(1u);
  return result;
}

void DarwinNotificationHelper.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = DarwinNotificationManager.shared.unsafeMutableAddressor();
  uint64_t v7 = *v6;
  id v8 = *(void (**)(void *, __n128))(*(void *)*v6 + 128LL);
  __n128 v9 = swift_retain(*v6);
  v8(v1, v9);
  swift_release(v7);
  id v10 = CFNotificationCenterGetDarwinNotifyCenter();
  if (!v10)
  {
LABEL_26:
    swift_bridgeObjectRelease(v1[2]);
    return;
  }

  uint64_t v11 = v10;
  uint64_t v12 = v1[2];
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v47 = v12 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v48 = (unint64_t)(v14 + 63) >> 6;
  __n128 v17 = swift_bridgeObjectRetain(v12);
  int64_t v18 = 0LL;
  v17.n128_u64[0] = 136315138LL;
  __n128 v44 = v17;
  unint64_t v43 = (char *)&type metadata for Any + 8;
  uint64_t v45 = v12;
  uint64_t v46 = v11;
  while (1)
  {
    if (v16)
    {
      uint64_t v51 = (v16 - 1) & v16;
      unint64_t v20 = __clz(__rbit64(v16)) | (v18 << 6);
      goto LABEL_23;
    }

    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v48) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v47 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v48) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v47 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v48) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v47 + 8 * v18);
        if (!v22) {
          break;
        }
      }
    }

uint64_t DarwinNotificationHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

Swift::Void __swiftcall DarwinNotificationHelper.onNotification(notificationName:)(CFStringRef notificationName)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v1 + 16);
  if (*(void *)(v7 + 16))
  {
    id v8 = (id)notificationName;
    swift_bridgeObjectRetain(v7);
    unint64_t v9 = sub_100045DB8((uint64_t)v8);
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(v7 + 56) + 16 * v9;
      uint64_t v13 = *(void (**)(void))v11;
      uint64_t v12 = *(void *)(v11 + 8);
      swift_retain(v12);

      swift_bridgeObjectRelease(v7);
      uint64_t v14 = sub_10002FF10();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
      uint64_t v15 = v8;
      unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v30 = v12;
        uint64_t v18 = swift_slowAlloc(12LL, -1LL);
        os_log_type_t v29 = v13;
        uint64_t v19 = (uint8_t *)v18;
        uint64_t v20 = swift_slowAlloc(32LL, -1LL);
        uint64_t v32 = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        int64_t v28 = v19 + 4;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        unint64_t v23 = v22;
        uint64_t v31 = sub_100003E68(v21, v22, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28, v19 + 12);

        unint64_t v24 = v23;
        uint64_t v12 = v30;
        swift_bridgeObjectRelease(v24);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invoking callback, notification, %s", v19, 0xCu);
        swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1LL, -1LL);
        id v25 = v19;
        uint64_t v13 = v29;
        swift_slowDealloc(v25, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v13(v26);
      swift_release(v12);
    }

    else
    {

      swift_bridgeObjectRelease(v7);
    }
  }

uint64_t sub_100045C6C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000624CC, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100045CA8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000624CC, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100045CF0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000624CC, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100045D48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000624CC, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100045D94()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_100045DB8(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_100046500(&qword_10007BBF8, (uint64_t)&unk_1000624CC);
  _CFObject.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  return sub_100046150(a1, v6);
}

void sub_100045E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100003288(&qword_10007BBF0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v23 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v24 = v23 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v25 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v25 >= v12) {
      break;
    }
    uint64_t v26 = (void *)(v5 + 64);
    unint64_t v27 = *(void *)(v36 + 8 * v25);
    ++v14;
    if (!v27)
    {
      int64_t v14 = v25 + 1;
      if (v25 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v27 = *(void *)(v36 + 8 * v14);
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v12)
        {
LABEL_36:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = *(void *)(v36 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            int64_t v14 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v12) {
              goto LABEL_36;
            }
            unint64_t v27 = *(void *)(v36 + 8 * v14);
            ++v28;
            if (v27) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v28;
      }
    }

unint64_t sub_100046150(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString();
    uint64_t v9 = v8;
    uint64_t v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_100046500(&qword_10007BBF8, (uint64_t)&unk_1000624CC);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

void sub_100046288()
{
  uint64_t v1 = v0;
  sub_100003288(&qword_10007BBF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void type metadata accessor for CFString()
{
  if (!qword_10007BBD8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_100073A30);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007BBD8);
    }
  }

uint64_t type metadata accessor for DarwinNotificationHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd24DarwinNotificationHelper);
}

uint64_t sub_1000464B8()
{
  return sub_100046500(&qword_10007BBE0, (uint64_t)&unk_10006245C);
}

uint64_t sub_1000464DC()
{
  return sub_100046500(&qword_10007BBE8, (uint64_t)&unk_100062488);
}

uint64_t sub_100046500(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_100046540(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  int64_t v13 = (char *)&v37 - v12;
  if (a1)
  {
    if (a2)
    {
      id v14 = a2;
      uint64_t v15 = sub_10002FF10();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v15, v4);
      id v16 = v14;
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        id v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        uint64_t v40 = v38;
        *(_DWORD *)id v19 = 136315138;
        __int128 v37 = v19 + 4;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        unint64_t v22 = v21;
        uint64_t v39 = sub_100003E68(v20, v21, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v37, v19 + 12);

        swift_bridgeObjectRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Got darwin notification, %s", v19, 0xCu);
        uint64_t v23 = v38;
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      id v34 = *(void (**)(id, __n128))(*(void *)a1 + 120LL);
      id v35 = v16;
      __n128 v36 = swift_retain(a1);
      v34(v35, v36);
      swift_release(a1);
    }

    else
    {
      uint64_t v29 = sub_10002FF10();
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v29, v4);
      BOOL v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "cfNotificationName for darwin callback handler not found",  v33,  2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }

  else
  {
    uint64_t v24 = sub_10002FF10();
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v24, v4);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    uint64_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, (os_log_type_t)v27))
    {
      int64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)int64_t v28 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  (os_log_type_t)v27,  "Observer for darwin callback handler not found",  v28,  2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }

BOOL static DeviceLockState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DeviceLockState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int DeviceLockState.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void sub_100046930(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  HIDWORD(v26) = 0;
  NSString v10 = String._bridgeToObjectiveC()();
  uint64_t v11 = MGCopyAnswerWithError(v10, 0LL, (char *)&v26 + 4);

  if (v11)
  {
    if (HIDWORD(v26))
    {
      uint64_t v12 = sub_10002FF10();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
      uint64_t v13 = swift_bridgeObjectRetain_n(a2, 2LL);
      id v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.error.getter();
      int v16 = v15;
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v17 = swift_slowAlloc(22LL, -1LL);
        uint64_t v24 = swift_slowAlloc(64LL, -1LL);
        uint64_t v29 = v24;
        *(_DWORD *)uint64_t v17 = 136315394;
        int v23 = v16;
        swift_bridgeObjectRetain(a2);
        uint64_t v27 = sub_100003E68(a1, a2, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v17 + 4, v17 + 12);
        swift_bridgeObjectRelease_n(a2, 3LL);
        *(_WORD *)(v17 + 12) = 2080;
        swift_beginAccess((char *)&v26 + 4, &v27, 0LL, 0LL);
        LODWORD(v25) = HIDWORD(v26);
        uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        unint64_t v20 = v19;
        uint64_t v25 = sub_100003E68(v18, v19, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v17 + 14, v17 + 22);
        swift_bridgeObjectRelease(v20);
        _os_log_impl( (void *)&_mh_execute_header,  v14,  (os_log_type_t)v23,  "MGCopyAnswerWithError error for key: %s -> %s",  (uint8_t *)v17,  0x16u);
        uint64_t v21 = v24;
        swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    *(void *)(a3 + 24) = swift_getObjectType(v11);
    *(void *)a3 = v11;
  }

  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
  }

uint64_t SystemInfo.deviceName.getter()
{
  return sub_100046EB0(0xD000000000000016LL, 0x8000000100067B50LL);
}

uint64_t SystemInfo.productType.getter()
{
  return sub_100046EB0(0x54746375646F7250LL, 0xEB00000000657079LL);
}

uint64_t SystemInfo.buildVersion.getter()
{
  return sub_100046EB0(0x726556646C697542LL, 0xEC0000006E6F6973LL);
}

uint64_t SystemInfo.osVersion.getter()
{
  return sub_100046EB0(0x56746375646F7250LL, 0xEE006E6F69737265LL);
}

uint64_t SystemInfo.uniqueDeviceID.getter()
{
  return sub_100046EB0(0x6544657571696E55LL, 0xEE00444965636976LL);
}

uint64_t SystemInfo.ecid.getter()
{
  return sub_100046CD0(0x6843657571696E55LL, 0xEC00000044497069LL, (uint64_t)&type metadata for Int64);
}

uint64_t SystemInfo.chipID.getter()
{
  return sub_100046CD0(0x444970696843LL, 0xE600000000000000LL, (uint64_t)&type metadata for Int);
}

uint64_t sub_100046CD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (v7)
  {
    else {
      return 0LL;
    }
  }

  else
  {
    sub_100006340((uint64_t)v6);
    return 0LL;
  }

BOOL SystemInfo.internalBuild.getter()
{
  return IsAppleInternalBuild() != 0;
}

uint64_t SystemInfo.underTest.getter(uint64_t a1)
{
  id v1 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v2 = [v1 environment];

  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (*(void *)(v3 + 16) && (unint64_t v4 = sub_100027E38(0xD00000000000001BLL, 0x80000001000676B0LL), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 16 * v4 + 8);
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t SystemInfo.regionCode.getter()
{
  return sub_100046EB0(0xD000000000000016LL, 0x8000000100067B70LL);
}

uint64_t SystemInfo.hardwareModel.getter()
{
  return sub_100046EB0(0xD000000000000016LL, 0x8000000100067B90LL);
}

uint64_t SystemInfo.architecture.getter()
{
  return sub_100046EB0(0xD000000000000016LL, 0x8000000100067BB0LL);
}

uint64_t sub_100046EB0(uint64_t a1, unint64_t a2)
{
  if (v5)
  {
  }

  else
  {
    sub_100006340((uint64_t)v4);
  }

  return 0LL;
}

unint64_t sub_100046F24()
{
  unint64_t result = qword_10007BC00;
  if (!qword_10007BC00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DeviceLockState,  &type metadata for DeviceLockState);
    atomic_store(result, (unint64_t *)&qword_10007BC00);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for DeviceLockState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for DeviceLockState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100047044 + 4 * byte_100062505[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100047078 + 4 * byte_100062500[v4]))();
}

uint64_t sub_100047078(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100047088LL);
  }
  return result;
}

uint64_t sub_100047094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004709CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000470A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000470A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceLockState()
{
  return &type metadata for DeviceLockState;
}

ValueMetadata *type metadata accessor for SystemInfo()
{
  return &type metadata for SystemInfo;
}

unint64_t sub_1000470D4()
{
  uint64_t v0 = sub_100003288(&qword_10007BC08);
  uint64_t inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100060880;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 4sub_10000DC70(0, 0) = 492LL;
  int v2 = NSFilePosixPermissions;
  unint64_t result = sub_10004714C(inited);
  qword_1000808B8 = result;
  return result;
}

unint64_t sub_10004714C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100003288(&qword_10007B6F0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10004788C(v7, (uint64_t)&v14);
    uint64_t v8 = v14;
    unint64_t result = sub_10003C3C0(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_100006330(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

double sub_100047264()
{
  if (qword_10007FEA0 != -1) {
    swift_once(&qword_10007FEA0, sub_1000470D4);
  }
  swift_beginAccess(&qword_1000808B8, v1, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(qword_1000808B8).n128_u64[0];
  return result;
}

uint64_t sub_1000472D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  uint64_t v57 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  BOOL v12 = (char *)&v53 - v11;
  id v13 = [(id)objc_opt_self(NSFileManager) defaultManager];
  char v60 = 0;
  URL.path.getter();
  uint64_t v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  unsigned int v17 = [v13 fileExistsAtPath:v16 isDirectory:&v60];

  if (v17)
  {
    if ((v60 & 1) == 0)
    {
      uint64_t v19 = sub_1000300CC();
      uint64_t v20 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v12, v19, v56);
      uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v55 = (void *)swift_slowAlloc(32LL, -1LL);
        id v61 = v55;
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v25 = v24 + 12;
        uint64_t v53 = v24 + 4;
        int64_t v54 = v24;
        uint64_t v26 = sub_10000662C( &qword_10007B2A0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v2, v26);
        unint64_t v29 = v28;
        uint64_t v58 = sub_100003E68(v27, v28, (uint64_t *)&v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v53, v25);
        swift_bridgeObjectRelease(v29);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        uint64_t v30 = v54;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Expected a directory, but is a file: %s", v54, 0xCu);
        BOOL v31 = v55;
        swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v56);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v20);
      }

      return v17 ^ 1;
    }

uint64_t sub_100047818(uint64_t a1, uint64_t a2)
{
  id v4 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v5 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, 1LL, 0LL, 0LL);

  return v5;
}

uint64_t sub_10004788C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288((uint64_t *)&unk_10007BC10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id sub_1000478D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener] = a1;
  *(void *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_dispatchQueue] = a2;
  *(void *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd13XPCConnection);
}

id sub_100047968()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection) invalidate];
}

id sub_1000479AC()
{
  return sub_10004CE8C(type metadata accessor for XPCConnection);
}

uint64_t sub_100047B30(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  void v3[3] = _Block_copy(aBlock);
  if (a1) {
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v6 = 0LL;
  }
  v3[4] = v6;
  uint64_t v7 = unk_10007BC44;
  char v10 = (uint64_t (*)(void))((char *)&dword_10007BC40 + dword_10007BC40);
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v7);
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100050C60;
  return v10();
}

uint64_t sub_100047BE4()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100047C70, 0LL, 0LL);
}

uint64_t sub_100047C70()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 32)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (!v1)
  {
    unint64_t v12 = sub_10004F288();
    uint64_t v13 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v12, 0LL, 0LL);
    _BYTE *v14 = 1;
    swift_willThrow(v13);
LABEL_7:
    swift_task_dealloc(*(void *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 440LL))();
  if (!v3)
  {
    unint64_t v15 = sub_10004F288();
    uint64_t v16 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v15, 0LL, 0LL);
    *unsigned int v17 = 1;
    swift_willThrow(v16);
    swift_release(v2);
    goto LABEL_7;
  }

  uint64_t v4 = v3;
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___CBDiscovery);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  id v6 = [v5 devicesWithDiscoveryFlags:0x800000 error:v0 + 16];
  uint64_t v7 = *(void **)(v0 + 16);
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = sub_100010A58(0LL, &qword_10007BC58, &OBJC_CLASS___CBDevice_ptr);
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
    id v11 = v7;
  }

  else
  {
    id v19 = v7;
    uint64_t v20 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v21);
    swift_errorRelease(v20);
    uint64_t v10 = 0LL;
  }

  uint64_t v23 = *(void *)(v0 + 48);
  uint64_t v22 = *(void *)(v0 + 56);
  uint64_t v24 = *(void *)(v0 + 40);
  uint64_t v25 = (*(uint64_t (**)(void))(*(void *)v4 + 200LL))();
  swift_bridgeObjectRetain(v10);
  swift_retain(v4);
  uint64_t v26 = sub_10004F45C(v25, v10, v4);
  swift_release(v4);
  swift_bridgeObjectRelease_n(v10, 2LL);
  swift_bridgeObjectRelease(v25);
  uint64_t v27 = sub_100030274();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v27, v24);
  uint64_t v28 = swift_bridgeObjectRetain_n(v26, 2LL);
  unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v33 = *(void *)(v0 + 48);
  uint64_t v32 = *(void *)(v0 + 56);
  uint64_t v34 = *(void *)(v0 + 40);
  if (v31)
  {
    log = v29;
    uint64_t v44 = *(void *)(v0 + 40);
    unsigned int v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v41;
    *(_DWORD *)unsigned int v35 = 136315138;
    uint64_t v43 = v32;
    uint64_t v36 = sub_100010A58(0LL, &qword_10007BC58, &OBJC_CLASS___CBDevice_ptr);
    swift_bridgeObjectRetain(v26);
    uint64_t v38 = Array.description.getter(v37, v36);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease(v26);
    *(void *)(v0 + 24) = sub_100003E68(v38, v40, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease_n(v26, 2LL);
    _os_log_impl((void *)&_mh_execute_header, log, v30, "Cloud Paired Devices Metadata: %s", v35, 0xCu);
    swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_release(v4);
    swift_release(v2);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v43, v44);
  }

  else
  {
    swift_bridgeObjectRelease_n(v26, 2LL);
    swift_release(v4);
    swift_release(v2);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  }

  swift_task_dealloc(*(void *)(v0 + 56));
  return (*(uint64_t (**)(void *))(v0 + 8))(v26);
}

void sub_1000480C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v93 = a3;
  unint64_t v95 = a4;
  uint64_t v6 = sub_100003288(&qword_10007B950);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = sub_100003288((uint64_t *)&unk_10007BC80);
  __chkstk_darwin(v89);
  uint64_t v90 = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v92 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  BOOL v87 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100003288((uint64_t *)&unk_10007B360);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v86 = (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v86 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v86 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v91 = (char *)&v86 - v21;
  __chkstk_darwin(v20);
  uint64_t v99 = (uint64_t)&v86 - v22;
  uint64_t v23 = (int *)type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v24 = v23[6];
  uint64_t v98 = a1;
  uint64_t v25 = (uint64_t *)(a1 + v24);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  id v97 = [objc_allocWithZone(CBDevice) init];
  unint64_t v94 = v8;
  if (a2
    && (swift_bridgeObjectRetain(v26),
        swift_bridgeObjectRetain(a2),
        unint64_t v29 = sub_10004F2CC(v28, v27, v26),
        swift_bridgeObjectRelease(a2),
        swift_bridgeObjectRelease(v26),
        v29)
    && (id v30 = [v29 identifier], v29, v30))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v32 = v31;
  }

  else
  {
    swift_bridgeObjectRetain(v26);
    uint64_t v32 = v26;
  }

  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  id v34 = v97;
  [v97 setIdentifier:v33];

  NSString v35 = String._bridgeToObjectiveC()();
  [v34 setIdsDeviceID:v35];

  uint64_t v36 = v98;
  unint64_t v37 = *(void *)(v98 + v23[10]);
  if ((v37 & 0x8000000000000000LL) != 0) {
    goto LABEL_43;
  }
  uint64_t v38 = v99;
  if (v37 >= 0x100)
  {
LABEL_44:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_45;
  }

  [v34 setDeviceType:*(void *)(v98 + v23[10])];
  uint64_t v39 = sub_10000662C(&qword_10007BC90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061870);
  Class v40 = sub_10002F5E0((uint64_t)v23, v39);
  id v96 = [objc_allocWithZone(CBControllerInfo) init];
  [v96 setCloudSyncStatus:1];
  Class v100 = v40;
  id v41 = -[objc_class recordChangeTag](v40, "recordChangeTag");
  if (v41)
  {

    uint64_t v42 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v38, v36 + v23[5], v10);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
    v43(v38, 0LL, 1LL, v10);
    id v44 = -[objc_class modificationDate](v100, "modificationDate");
    if (v44)
    {
      uint64_t v45 = v44;
      os_log_type_t v46 = v87;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v47(v19, v46, v10);
      v43((uint64_t)v19, 0LL, 1LL, v10);
      int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v19, 1LL, v10);
      int64_t v49 = v88;
      if (v48 != 1)
      {
        uint64_t v50 = (uint64_t)v91;
        v47(v91, v19, v10);
        v43(v50, 0LL, 1LL, v10);
        goto LABEL_17;
      }
    }

    else
    {
      v43((uint64_t)v19, 1LL, 1LL, v10);
      int64_t v49 = v88;
    }

    id v51 = -[objc_class creationDate](v100, "creationDate");
    if (v51)
    {
      uint64_t v52 = v51;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

      uint64_t v53 = 0LL;
    }

    else
    {
      uint64_t v53 = 1LL;
    }

    v43((uint64_t)v49, v53, 1LL, v10);
    uint64_t v54 = (uint64_t)v49;
    uint64_t v50 = (uint64_t)v91;
    sub_100003420(v54, (uint64_t)v91, (uint64_t *)&unk_10007B360);
    sub_10000B4A8((uint64_t)v19, (uint64_t *)&unk_10007B360);
LABEL_17:
    uint64_t v55 = v90;
    uint64_t v56 = v90 + *(int *)(v89 + 48);
    uint64_t v57 = v99;
    sub_100010A90(v99, v90, (uint64_t *)&unk_10007B360);
    sub_100010A90(v50, v56, (uint64_t *)&unk_10007B360);
    uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    if (v58(v55, 1LL, v10) == 1)
    {
      sub_10000B4A8(v50, (uint64_t *)&unk_10007B360);
      sub_10000B4A8(v57, (uint64_t *)&unk_10007B360);
      int v59 = v58(v56, 1LL, v10);
      id v34 = v97;
      uint64_t v36 = v98;
      if (v59 == 1)
      {
        sub_10000B4A8(v55, (uint64_t *)&unk_10007B360);
        uint64_t v60 = 3LL;
        p_type = (char **)(&stru_100078FF0 + 16);
LABEL_24:
        id v41 = objc_msgSend(v96, p_type[474], v60);
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v62 = v86;
      sub_100010A90(v55, v86, (uint64_t *)&unk_10007B360);
      if (v58(v56, 1LL, v10) != 1)
      {
        uint64_t v78 = v92;
        uint64_t v79 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v87, v56, v10);
        uint64_t v80 = sub_10000662C( &qword_10007BC98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        LODWORD(v89) = dispatch thunk of static Equatable.== infix(_:_:)(v62, v79, v10, v80);
        uint64_t v81 = *(void (**)(char *, uint64_t))(v78 + 8);
        v81(v79, v10);
        sub_10000B4A8((uint64_t)v91, (uint64_t *)&unk_10007B360);
        sub_10000B4A8(v99, (uint64_t *)&unk_10007B360);
        v81((char *)v62, v10);
        sub_10000B4A8(v55, (uint64_t *)&unk_10007B360);
        id v34 = v97;
        uint64_t v36 = v98;
        p_type = (char **)(&stru_100078FF0 + 16);
        if ((v89 & 1) != 0)
        {
          uint64_t v60 = 3LL;
          goto LABEL_24;
        }

        goto LABEL_23;
      }

      sub_10000B4A8((uint64_t)v91, (uint64_t *)&unk_10007B360);
      sub_10000B4A8(v99, (uint64_t *)&unk_10007B360);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v62, v10);
      id v34 = v97;
      uint64_t v36 = v98;
    }

    sub_10000B4A8(v55, (uint64_t *)&unk_10007BC80);
    p_type = &stru_100078FF0.type;
LABEL_23:
    uint64_t v60 = 2LL;
    goto LABEL_24;
  }

LABEL_43:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_45:
  __break(1u);
}

uint64_t sub_100048B24(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10007BC4C;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100048B84;
  return sub_100047BE4();
}

uint64_t sub_100048B84(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 32);
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    uint64_t v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v11 = (void *)v9;
  }

  else
  {
    sub_100010A58(0LL, &qword_10007BC58, &OBJC_CLASS___CBDevice_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v9 = 0LL;
    uint64_t v11 = isa;
  }

  uint64_t v12 = *(void (***)(void, void, void))(v5 + 24);
  ((void (**)(void, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_100048C60(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_100003288(&qword_10007B950);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[7] = swift_task_alloc(v6);
  v2[8] = swift_task_alloc(v6);
  return swift_task_switch(sub_100048CF4, 0LL, 0LL);
}

uint64_t sub_100048CF4()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [*(id *)(v0 + 16) idsDeviceID];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      uint64_t v7 = v6;

      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v2 + 440LL))();
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v8 + 200LL))();
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v10 + 16);
        if (v12)
        {
          uint64_t v14 = *(void *)(v0 + 40);
          uint64_t v13 = *(void *)(v0 + 48);
          uint64_t v43 = v10;
          uint64_t v15 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
          uint64_t v16 = *(void *)(v13 + 72);
          while (1)
          {
            uint64_t v17 = *(void *)(v0 + 56);
            sub_10003432C(v15, v17);
            uint64_t v18 = (void *)(v17 + *(int *)(v14 + 24));
            uint64_t v19 = v18[1];
            BOOL v20 = *v18 == v5 && v19 == v7;
            if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, v5, v7, 0LL) & 1) != 0) {
              break;
            }
            sub_100034370(*(void *)(v0 + 56));
            v15 += v16;
            if (!--v12)
            {
              uint64_t v21 = 1LL;
              uint64_t v11 = v43;
              goto LABEL_19;
            }
          }

          sub_10003FDF4(*(void *)(v0 + 56), *(void *)(v0 + 32));
          uint64_t v21 = 0LL;
          uint64_t v11 = v43;
        }

        else
        {
          uint64_t v21 = 1LL;
        }

uint64_t sub_100049148(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10007BC64;
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000491C4;
  return sub_100048C60((uint64_t)v7);
}

uint64_t sub_1000491C4()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void **)(*v1 + 16);
  id v3 = *(void **)(*v1 + 24);
  uint64_t v5 = *v1;
  swift_task_dealloc(v2);

  uint64_t v6 = *(void *)(v5 + 32);
  if (v0)
  {
    id v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }

  else
  {
    (*(void (**)(void, void))(v6 + 16))(*(void *)(v5 + 32), 0LL);
  }

  _Block_release(*(const void **)(v5 + 32));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100049268(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000492C0, 0LL, 0LL);
}

uint64_t sub_1000492C0()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 440LL))();
    if (v3)
    {
      uint64_t v4 = v3;
      (*(void (**)(uint64_t))(*(void *)v3 + 144LL))(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if ([*(id *)(v0 + 16) fastLEConnectionInfoVersion])
        {
          id v7 = [*(id *)(v0 + 16) fastLEConnectionInfoData];
          if (v7)
          {
            uint64_t v8 = v7;
            static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
            uint64_t v10 = v9;

            __asm { BR              X10 }
          }
        }

        swift_bridgeObjectRelease(v6);
        unint64_t v17 = sub_10004F288();
        uint64_t v18 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v17, 0LL, 0LL);
        *uint64_t v19 = 0;
        swift_willThrow(v18);
        swift_release(v4);
        goto LABEL_11;
      }

      swift_release(v4);
    }

    unint64_t v14 = sub_10004F288();
    uint64_t v15 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v14, 0LL, 0LL);
    *uint64_t v16 = 1;
    swift_willThrow(v15);
LABEL_11:
    swift_release(v2);
    goto LABEL_12;
  }

  unint64_t v11 = sub_10004F288();
  uint64_t v12 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v11, 0LL, 0LL);
  *uint64_t v13 = 1;
  swift_willThrow(v12);
LABEL_12:
  swift_task_dealloc(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000496BC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10007BC74;
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100050C34;
  return sub_100049268((uint64_t)v7);
}

uint64_t sub_100049738(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_100003288((uint64_t *)&unk_10007BC80);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = (*(void *)(*(void *)(sub_100003288((uint64_t *)&unk_10007B360) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v6);
  v2[10] = swift_task_alloc(v6);
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  v2[13] = swift_task_alloc(v6);
  unint64_t v7 = (*(void *)(*(void *)(sub_100003288(&qword_10007B950) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v7);
  v2[15] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  v2[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[17] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  v2[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_100049890, 0LL, 0LL);
}

uint64_t sub_100049890()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (!v1)
  {
    unint64_t v38 = sub_10004F288();
    uint64_t v39 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v38, 0LL, 0LL);
    _BYTE *v40 = 1;
    swift_willThrow(v39);
    goto LABEL_34;
  }

  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 440LL))(v1);
  if (!v3)
  {
    unint64_t v41 = sub_10004F288();
    uint64_t v42 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v41, 0LL, 0LL);
    _BYTE *v43 = 1;
    swift_willThrow(v42);
    uint64_t v44 = v2;
    goto LABEL_33;
  }

  uint64_t v4 = v3;
  uint64_t v158 = v2;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v3 + 200LL))();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v161 = v4;
  if (!v7)
  {
    uint64_t v45 = 1LL;
    goto LABEL_31;
  }

  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  id v163 = *(id *)(v8 + 72);
  id v159 = (id)v5;
  swift_bridgeObjectRetain(v5);
  while (1)
  {
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = *(void **)(v0 + 16);
    sub_10003432C(v10, v11);
    uint64_t v13 = (uint64_t *)(v11 + *(int *)(v9 + 24));
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    id v16 = objc_msgSend(v12, "idsDeviceID", swift_bridgeObjectRetain(v14).n128_f64[0]);
    if (v16)
    {
      unint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v20 = v19;

      uint64_t v22 = *(void *)(v0 + 144);
      uint64_t v21 = *(void *)(v0 + 152);
      if (v15 == v18 && v14 == v20)
      {
        swift_bridgeObjectRelease_n(v14, 2LL);
        sub_10003432C(v21, v22);
LABEL_27:
        sub_100034370(*(void *)(v0 + 144));
        goto LABEL_29;
      }

      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v18, v20, 0LL);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v14);
      sub_10003432C(v21, v22);
      if ((v24 & 1) != 0) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v26 = *(void *)(v0 + 144);
      uint64_t v25 = *(void *)(v0 + 152);
      swift_bridgeObjectRelease(v14);
      sub_10003432C(v25, v26);
    }

    uint64_t v27 = (uint64_t *)(*(void *)(v0 + 144) + *(int *)(v9 + 24));
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    id v30 = objc_msgSend(*(id *)(v0 + 16), "identifier", swift_bridgeObjectRetain(v28).n128_f64[0]);
    if (!v30)
    {
      sub_100034370(*(void *)(v0 + 144));
      swift_bridgeObjectRelease(v28);
      goto LABEL_6;
    }

    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v34 = v33;

    uint64_t v35 = *(void *)(v0 + 144);
    if (v29 == v32 && v28 == v34) {
      break;
    }
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, v32, v34, 0LL);
    swift_bridgeObjectRelease(v34);
    sub_100034370(v35);
    swift_bridgeObjectRelease(v28);
    if ((v37 & 1) != 0) {
      goto LABEL_29;
    }
LABEL_6:
    sub_100034370(*(void *)(v0 + 152));
    v10 += (uint64_t)v163;
    if (!--v7)
    {
      uint64_t v6 = (uint64_t)v159;
      swift_bridgeObjectRelease(v159);
      uint64_t v45 = 1LL;
      goto LABEL_30;
    }
  }

  swift_bridgeObjectRelease(v28);
  sub_100034370(v35);
  swift_bridgeObjectRelease(v28);
LABEL_29:
  uint64_t v46 = *(void *)(v0 + 152);
  uint64_t v47 = *(void *)(v0 + 120);
  uint64_t v6 = (uint64_t)v159;
  swift_bridgeObjectRelease(v159);
  sub_10003FDF4(v46, v47);
  uint64_t v45 = 0LL;
LABEL_30:
  uint64_t v4 = v161;
LABEL_31:
  uint64_t v49 = *(void *)(v0 + 128);
  uint64_t v48 = *(void *)(v0 + 136);
  uint64_t v50 = *(void *)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v50, v45, 1LL, v49);
  swift_bridgeObjectRelease(v6);
  id v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v51(v50, 1LL, v49) != 1)
  {
    uint64_t v65 = *(void *)(v0 + 128);
    sub_10003FDF4(*(void *)(v0 + 120), *(void *)(v0 + 160));
    uint64_t v66 = sub_10000662C(&qword_10007BC90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061870);
    Class v67 = sub_10002F5E0(v65, v66);
    id v68 = [objc_allocWithZone(CBControllerInfo) init];
    [v68 setCloudSyncStatus:1];
    Class v165 = v67;
    id v69 = -[objc_class recordChangeTag](v67, "recordChangeTag");
    id v160 = v68;
    if (!v69) {
      goto LABEL_52;
    }
    uint64_t v70 = v4;
    uint64_t v71 = *(void *)(v0 + 160);
    uint64_t v72 = *(void *)(v0 + 128);
    uint64_t v73 = *(void *)(v0 + 104);
    uint64_t v74 = *(void *)(v0 + 48);
    uint64_t v75 = *(void *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v73, v71 + *(int *)(v72 + 20), v74);
    char v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56);
    v76(v73, 0LL, 1LL, v74);
    id v77 = -[objc_class modificationDate](v165, "modificationDate");
    uint64_t v78 = *(void *)(v0 + 88);
    if (v77)
    {
      uint64_t v79 = v77;
      uint64_t v81 = *(void *)(v0 + 56);
      uint64_t v80 = *(void *)(v0 + 64);
      uint64_t v82 = *(void *)(v0 + 48);
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

      unint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
      v83(v78, v80, v82);
      v76(v78, 0LL, 1LL, v82);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v78, 1LL, v82) != 1)
      {
        uint64_t v84 = *(void *)(v0 + 96);
        uint64_t v85 = *(void *)(v0 + 48);
        v83(v84, *(void *)(v0 + 88), v85);
        v76(v84, 0LL, 1LL, v85);
        goto LABEL_44;
      }
    }

    else
    {
      v76(*(void *)(v0 + 88), 1LL, 1LL, *(void *)(v0 + 48));
    }

    id v86 = -[objc_class creationDate](v165, "creationDate");
    if (v86)
    {
      BOOL v87 = v86;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v86);

      uint64_t v88 = 0LL;
    }

    else
    {
      uint64_t v88 = 1LL;
    }

    uint64_t v90 = *(void *)(v0 + 88);
    uint64_t v89 = *(void *)(v0 + 96);
    uint64_t v91 = *(void *)(v0 + 80);
    v76(v91, v88, 1LL, *(void *)(v0 + 48));
    sub_100003420(v91, v89, (uint64_t *)&unk_10007B360);
    sub_10000B4A8(v90, (uint64_t *)&unk_10007B360);
LABEL_44:
    uint64_t v92 = *(void *)(v0 + 96);
    uint64_t v93 = *(void *)(v0 + 48);
    uint64_t v94 = *(void *)(v0 + 56);
    uint64_t v95 = *(void *)(v0 + 40);
    uint64_t v96 = v95 + *(int *)(*(void *)(v0 + 32) + 48LL);
    sub_100010A90(*(void *)(v0 + 104), v95, (uint64_t *)&unk_10007B360);
    sub_100010A90(v92, v96, (uint64_t *)&unk_10007B360);
    id v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
    int v98 = v97(v95, 1LL, v93);
    uint64_t v99 = *(void *)(v0 + 48);
    if (v98 == 1)
    {
      uint64_t v100 = *(void *)(v0 + 104);
      sub_10000B4A8(*(void *)(v0 + 96), (uint64_t *)&unk_10007B360);
      sub_10000B4A8(v100, (uint64_t *)&unk_10007B360);
      if (v97(v96, 1LL, v99) == 1)
      {
        sub_10000B4A8(*(void *)(v0 + 40), (uint64_t *)&unk_10007B360);
        uint64_t v101 = 3LL;
        uint64_t v4 = v70;
        id v68 = v160;
LABEL_51:
        id v69 = [v68 setCloudSyncStatus:v101];
LABEL_52:
        uint64_t v108 = *(void *)(v0 + 128);
        uint64_t v109 = *(void *)(v0 + 112);
        (*(void (**)(id))(*(void *)v4 + 168LL))(v69);
        int v110 = v51(v109, 1LL, v108);
        uint64_t v111 = *(void *)(v0 + 112);
        if (v110 == 1)
        {
          sub_10000B4A8(*(void *)(v0 + 112), &qword_10007B950);
        }

        else
        {
          uint64_t v112 = sub_1000338D8();
          unint64_t v114 = v113;
          sub_100034370(v111);
          if (v114 >> 60 != 15)
          {
            uint64_t v115 = *(void *)(v0 + 160);
            uint64_t v116 = *(int *)(*(void *)(v0 + 128) + 36LL);
            uint64_t v117 = *(void *)(v115 + v116);
            uint64_t v118 = *(void *)(v117 + 16);
            if (v118)
            {
              swift_bridgeObjectRetain(*(void *)(v115 + v116));
              uint64_t v119 = v118 - 1;
              id v120 = (unint64_t *)(v117 + 40);
              do
              {
                uint64_t v121 = v119;
                uint64_t v123 = *(v120 - 1);
                unint64_t v122 = *v120;
                sub_100008EB0(v123, *v120);
                sub_10004E1D8(v123, v122);
                char v125 = v124;
                sub_100008B40(v123, v122);
                if ((v125 & 1) != 0) {
                  break;
                }
                uint64_t v119 = v121 - 1;
                v120 += 2;
              }

              while (v121);
              swift_bridgeObjectRelease(v117);
            }

            else
            {
              char v125 = 0;
            }

            id v68 = v160;
            [v160 setFastLEConnectionAllowed:v125 & 1];
            sub_100008B2C(v112, v114);
          }
        }

        uint64_t v132 = *(void *)(v0 + 160);
        uint64_t v133 = *(void *)(v0 + 128);
        uint64_t v134 = (uint64_t *)(v132 + *(int *)(v133 + 32));
        uint64_t v135 = *v134;
        unint64_t v136 = v134[1];
        sub_100008EB0(*v134, v136);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100008B40(v135, v136);
        [v68 setFastLEConnectionInfoData:isa];

        unint64_t v138 = *(void *)(v132 + *(int *)(v133 + 28));
        if ((v138 & 0x8000000000000000LL) == 0)
        {
          if (v138 > 0xFF)
          {
LABEL_70:
            uint64_t v150 = "Not enough bits to represent the passed value";
            uint64_t v151 = 45LL;
            uint64_t v152 = 3455LL;
            return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v150,  v151,  2LL,  "Swift/Integers.swift",  20LL,  2,  v152,  0);
          }

          uint64_t v139 = *(void *)(v0 + 160);
          uint64_t v140 = *(void *)(v0 + 128);
          [v68 setFastLEConnectionInfoVersion:v138];
          unint64_t v141 = *(void *)(v139 + *(int *)(v140 + 48));
          if ((v141 & 0x8000000000000000LL) == 0)
          {
            if (!HIDWORD(v141))
            {
              uint64_t v143 = *(void *)(v0 + 152);
              uint64_t v142 = *(void *)(v0 + 160);
              uint64_t v144 = *(void *)(v0 + 144);
              uint64_t v146 = *(void *)(v0 + 112);
              uint64_t v145 = *(void *)(v0 + 120);
              uint64_t v148 = *(void *)(v0 + 96);
              uint64_t v147 = *(void *)(v0 + 104);
              uint64_t v149 = *(void *)(v0 + 88);
              uint64_t v153 = *(void *)(v0 + 80);
              uint64_t v154 = *(void *)(v0 + 72);
              uint64_t v155 = *(void *)(v0 + 64);
              uint64_t v157 = *(void *)(v0 + 40);
              objc_msgSend(v160, "setSupportedServices:");

              swift_release(v161);
              swift_release(v158);
              sub_100034370(v142);
              swift_task_dealloc(v142);
              swift_task_dealloc(v143);
              swift_task_dealloc(v144);
              swift_task_dealloc(v145);
              swift_task_dealloc(v146);
              swift_task_dealloc(v147);
              swift_task_dealloc(v148);
              swift_task_dealloc(v149);
              swift_task_dealloc(v153);
              swift_task_dealloc(v154);
              swift_task_dealloc(v155);
              swift_task_dealloc(v157);
              return (*(uint64_t (**)(id))(v0 + 8))(v160);
            }

            goto LABEL_70;
          }
        }

        uint64_t v150 = "Negative value is not representable";
        uint64_t v151 = 35LL;
        uint64_t v152 = 3451LL;
        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v150,  v151,  2LL,  "Swift/Integers.swift",  20LL,  2,  v152,  0);
      }
    }

    else
    {
      sub_100010A90(*(void *)(v0 + 40), *(void *)(v0 + 72), (uint64_t *)&unk_10007B360);
      int v102 = v97(v96, 1LL, v99);
      uint64_t v104 = *(void *)(v0 + 96);
      uint64_t v103 = *(void *)(v0 + 104);
      uint64_t v105 = *(void *)(v0 + 72);
      if (v102 != 1)
      {
        uint64_t v127 = *(void *)(v0 + 56);
        uint64_t v126 = *(void *)(v0 + 64);
        uint64_t v128 = *(void *)(v0 + 48);
        uint64_t v156 = *(void *)(v0 + 40);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32))(v126, v96, v128);
        uint64_t v129 = sub_10000662C( &qword_10007BC98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        char v130 = dispatch thunk of static Equatable.== infix(_:_:)(v105, v126, v128, v129);
        unint64_t v131 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
        v131(v126, v128);
        sub_10000B4A8(v104, (uint64_t *)&unk_10007B360);
        sub_10000B4A8(v103, (uint64_t *)&unk_10007B360);
        v131(v105, v128);
        sub_10000B4A8(v156, (uint64_t *)&unk_10007B360);
        uint64_t v4 = v70;
        id v68 = v160;
        if ((v130 & 1) != 0)
        {
          uint64_t v101 = 3LL;
          goto LABEL_51;
        }

        goto LABEL_50;
      }

      uint64_t v106 = *(void *)(v0 + 48);
      uint64_t v107 = *(void *)(v0 + 56);
      sub_10000B4A8(*(void *)(v0 + 96), (uint64_t *)&unk_10007B360);
      sub_10000B4A8(v103, (uint64_t *)&unk_10007B360);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v105, v106);
    }

    sub_10000B4A8(*(void *)(v0 + 40), (uint64_t *)&unk_10007BC80);
    uint64_t v4 = v70;
    id v68 = v160;
LABEL_50:
    uint64_t v101 = 2LL;
    goto LABEL_51;
  }

  sub_10000B4A8(*(void *)(v0 + 120), &qword_10007B950);
  unint64_t v52 = sub_10004F288();
  uint64_t v53 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v52, 0LL, 0LL);
  *uint64_t v54 = 2;
  swift_willThrow(v53);
  swift_release(v4);
  uint64_t v44 = v158;
LABEL_33:
  swift_release(v44);
LABEL_34:
  uint64_t v55 = *(void *)(v0 + 152);
  uint64_t v56 = *(void *)(v0 + 144);
  uint64_t v58 = *(void *)(v0 + 112);
  uint64_t v57 = *(void *)(v0 + 120);
  uint64_t v60 = *(void *)(v0 + 96);
  uint64_t v59 = *(void *)(v0 + 104);
  uint64_t v62 = *(void *)(v0 + 80);
  uint64_t v61 = *(void *)(v0 + 88);
  uint64_t v63 = *(void *)(v0 + 72);
  uint64_t v162 = *(void *)(v0 + 64);
  id v164 = *(id *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v162);
  swift_task_dealloc(v164);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A528(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10007BC7C;
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10004A5A4;
  return sub_100049738((uint64_t)v7);
}

uint64_t sub_10004A5A4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 40);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v6 = *(void **)(*v2 + 24);
  uint64_t v8 = *v2;
  swift_task_dealloc(v5);

  uint64_t v9 = *(void (***)(void, void, void))(v8 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v9)[2](v9, 0LL, v10);

    _Block_release(v9);
  }

  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0LL);
    _Block_release(v9);
  }

  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_10004A66C()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004A6CC, 0LL, 0LL);
}

uint64_t sub_10004A6CC()
{
  *(_DWORD *)(v0 + 72) = 0;
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 40)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 480LL))();
    if (v3)
    {
      uint64_t v4 = v3;
      if (((*(uint64_t (**)(void))(*(void *)v3 + 112LL))() & 1) != 0)
      {
        int v5 = 1;
        *(_DWORD *)(v0 + 72) = 1;
      }

      else
      {
        int v5 = 0;
      }

      uint64_t v8 = *(void *)(v0 + 56);
      uint64_t v7 = *(void *)(v0 + 64);
      uint64_t v9 = *(void *)(v0 + 48);
      uint64_t v10 = sub_100030274();
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v14 = 67109120;
        *(_DWORD *)(v0 + 76) = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 76, v0 + 80, v14 + 4, v14 + 8);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Distributed logging status: %u", v14, 8u);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      swift_release(v2);
      swift_release(v4);

      (*(void (**)(void, void))(*(void *)(v0 + 56) + 8LL))(*(void *)(v0 + 64), *(void *)(v0 + 48));
      swift_beginAccess(v0 + 72, v0 + 16, 0LL, 0LL);
      uint64_t v6 = *(unsigned int *)(v0 + 72);
    }

    else
    {
      swift_release(v2);
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_10004A9C0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10007BCA4;
  a2;
  int v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *int v5 = v2;
  v5[1] = sub_10004AA20;
  return sub_10004A66C();
}

uint64_t sub_10004AA20(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 32);
  int v5 = *(void **)(*v2 + 16);
  uint64_t v6 = *v2;
  swift_task_dealloc(v4);

  uint64_t v7 = *(void *)(v6 + 24);
  if (v1)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v7 + 16))(v7);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v7 + 16))(*(void *)(v6 + 24), a1, 0LL);
  }

  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10004AAC8(int a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  *(_DWORD *)(v2 + 52) = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  *(void *)(v2 + 24) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 4sub_10000DC70(0, 0) = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004AB2C, 0LL, 0LL);
}

uint64_t sub_10004AB2C()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 480LL))();
  if (!v3)
  {
    swift_release(v2);
LABEL_7:
    uint64_t v16 = *(void *)(v0 + 40);
    unint64_t v17 = sub_10004F858();
    uint64_t v18 = swift_allocError(&type metadata for XPCConnection.XPCConnectionError, v17, 0LL, 0LL);
    swift_willThrow(v18);
    swift_task_dealloc(v16);
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }

  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 24);
  (*(void (**)(void))(*(void *)v3 + 120LL))(*(_DWORD *)(v0 + 52) & 1);
  uint64_t v8 = sub_100030274();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    int v12 = *(_DWORD *)(v0 + 52);
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v13 = 67109120;
    *(_DWORD *)(v0 + 48) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 52, v13 + 4, v13 + 8);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Distributed logging status changed: %u", v13, 8u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  swift_release(v2);
  swift_release(v4);

  uint64_t v14 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 32) + 8LL))(v14, *(void *)(v0 + 24));
  swift_task_dealloc(v14);
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_10004AE40(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  void v3[3] = _Block_copy(aBlock);
  uint64_t v6 = dword_10007BCAC;
  a3;
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v3[4] = v7;
  void *v7 = v3;
  v7[1] = sub_10004AEB4;
  return sub_10004AAC8(a1);
}

uint64_t sub_10004AEB4()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v4 = *v1;
  swift_task_dealloc(v2);

  uint64_t v5 = *(void *)(v4 + 24);
  if (v0)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    (*(void (**)(void, void))(v5 + 16))(*(void *)(v4 + 24), 0LL);
  }

  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10004AF54()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004AFB4, 0LL, 0LL);
}

uint64_t sub_10004AFB4()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 480LL))();
  if (!v3)
  {
    swift_release(v2);
LABEL_7:
    char v8 = 0;
    goto LABEL_8;
  }

  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 24);
  char v8 = (*(uint64_t (**)(void))(*(void *)v3 + 112LL))();
  uint64_t v9 = sub_100030274();
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v13 = 67109120;
    *(_DWORD *)(v0 + 48) = v8 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 52, v13 + 4, v13 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Apple audio accessory limited logging enabled: %{BOOL}d",  v13,  8u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  swift_release(v2);
  swift_release(v4);

  (*(void (**)(void, void))(*(void *)(v0 + 32) + 8LL))(*(void *)(v0 + 40), *(void *)(v0 + 24));
LABEL_8:
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))(v8 & 1);
}

uint64_t sub_10004B26C(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_10007BCBC;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004B2CC;
  return sub_10004AF54();
}

uint64_t sub_10004B2CC(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 32);
  uint64_t v5 = *(void **)(*v2 + 16);
  uint64_t v6 = *v2;
  swift_task_dealloc(v4);

  uint64_t v7 = *(void *)(v6 + 24);
  if (v1)
  {
    char v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

  else
  {
    (*(void (**)(void, void, void))(v7 + 16))(*(void *)(v6 + 24), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10004B378(char a1)
{
  *(void *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 56) = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  *(void *)(v2 + 32) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 4sub_10000DC70(0, 0) = v4;
  *(void *)(v2 + 48) = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004B3DC, 0LL, 0LL);
}

uint64_t sub_10004B3DC()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 480LL))();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v6 = *(void *)(v0 + 40);
      uint64_t v5 = *(void *)(v0 + 48);
      uint64_t v7 = *(void *)(v0 + 32);
      uint64_t v8 = sub_100030274();
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v14 = *(void *)(v0 + 40);
      uint64_t v13 = *(void *)(v0 + 48);
      uint64_t v15 = *(void *)(v0 + 32);
      if (v12)
      {
        uint64_t v23 = *(void *)(v0 + 32);
        int v16 = *(unsigned __int8 *)(v0 + 56);
        uint64_t v22 = *(void *)(v0 + 48);
        unint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v21 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)unint64_t v17 = 136315138;
        uint64_t v24 = v21;
        if (v16) {
          uint64_t v18 = 7562585LL;
        }
        else {
          uint64_t v18 = 28494LL;
        }
        if (v16) {
          unint64_t v19 = 0xE300000000000000LL;
        }
        else {
          unint64_t v19 = 0xE200000000000000LL;
        }
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_100003E68(v18, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
        swift_bridgeObjectRelease(v19);
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Enable Apple audio accessory limited logging: %s",  v17,  0xCu);
        swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);

        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v22, v23);
      }

      else
      {

        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      }

      (*(void (**)(void))(*(void *)v4 + 120LL))(*(unsigned __int8 *)(v0 + 56));
      swift_release(v4);
    }

    swift_release(v2);
  }

  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B740(char a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  void v3[3] = _Block_copy(aBlock);
  uint64_t v6 = dword_10007BCC4;
  a3;
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v3[4] = v7;
  void *v7 = v3;
  v7[1] = sub_100050C50;
  return sub_10004B378(a1);
}

uint64_t sub_10004BA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    __int128 v7 = *(_OWORD *)(a1 + 16);
    v12[0] = *(_OWORD *)a1;
    v12[1] = v7;
    uint64_t v13 = *(void *)(a1 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v11 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_10004EDA4((uint64_t)v12, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v9 = *v3;
    void *v4 = v11;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    sub_10000B4A8(a1, &qword_10007C048);
    sub_10004E788(a2, a3, (uint64_t)v12);
    swift_bridgeObjectRelease(a3);
    return sub_10000B4A8((uint64_t)v12, &qword_10007C048);
  }

void sub_10004BAE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100003288(&qword_10007ACA0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  __int128 v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }

    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v29 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t sub_10004C000(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v4[4] = v8;
  uint64_t v9 = unk_10007BCD4;
  int64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007BCD0 + dword_10007BCD0);
  id v10 = a4;
  unint64_t v11 = (void *)swift_task_alloc(v9);
  v4[5] = v11;
  *unint64_t v11 = v4;
  v11[1] = sub_10004C0A8;
  return v13(v8, a2);
}

uint64_t sub_10004C0A8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    uint64_t v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    unint64_t v12 = (void *)v10;
  }

  else
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v10 = 0LL;
    unint64_t v12 = isa;
  }

  int64_t v13 = *(void (***)(void, void, void))(v5 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_10004C2E0(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  void v5[6] = a5;
  v5[7] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = v11;
  void v5[8] = v11;
  swift_unknownObjectRetain(a2);
  id v13 = a5;
  _bridgeAnyObjectToAny(_:)(v5 + 2, a2);
  swift_unknownObjectRelease(a2);
  int64_t v16 = (char *)&dword_10007BCE0 + dword_10007BCE0;
  unint64_t v14 = (void *)swift_task_alloc(unk_10007BCE4);
  void v5[9] = v14;
  void *v14 = v5;
  v14[1] = sub_10004C3B4;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))v16)(v10, v12, v5 + 2, a3);
}

uint64_t sub_10004C3B4()
{
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v4 = *(void **)(*v1 + 48);
  uint64_t v5 = *v1;
  swift_task_dealloc(v2);
  sub_10000467C((void *)(v5 + 16));

  swift_bridgeObjectRelease(v3);
  uint64_t v6 = *(void *)(v5 + 56);
  if (v0)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }

  else
  {
    (*(void (**)(void, void))(v6 + 16))(*(void *)(v5 + 56), 0LL);
  }

  _Block_release(*(const void **)(v5 + 56));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10004C470()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_10004C4B8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_10004C508(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_10004C54C()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue, v3, 0LL, 0LL);
  return *v1;
}

void sub_10004C590(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
}

void *sub_10004C5E0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  }

  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    *(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10004C62C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = a1;
  return swift_bridgeObjectRelease(v2);
}

id sub_10004C644()
{
  uint64_t v1 = OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  }

  else
  {
    id v4 = objc_allocWithZone(&OBJC_CLASS___NSXPCListener);
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 initWithMachServiceName:v5];

    id v7 = [v6 setDelegate:v0];
    uint64_t v8 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x88LL))(v7);
    [v6 _setQueue:v8];

    uint64_t v9 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0LL;
  }

  id v10 = v2;
  return v3;
}

void sub_10004C734(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener) = a1;
}

void (*sub_10004C748(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10004C644();
  return sub_10004C77C;
}

void sub_10004C77C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener) = v2;
}

id sub_10004C794(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t sub_10004C804()
{
  return sub_10004C9A8((uint64_t)&unk_100073BB0, (uint64_t)sub_10004FE90, (uint64_t)&unk_100073BC8);
}

uint64_t sub_10004C820(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  objc_super v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100030274();
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Activate Bluetooth User Controller XPC Service", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xE0LL))(v11);
}

void sub_10004C944()
{
  id v1 = (id)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8LL))();
  [v1 resume];
}

uint64_t sub_10004C98C()
{
  return sub_10004C9A8((uint64_t)&unk_100073C00, (uint64_t)sub_10004FEB0, (uint64_t)&unk_100073C18);
}

uint64_t sub_10004C9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v22 - 8);
  uint64_t v11 = __chkstk_darwin(v22);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x88LL))(v11);
  uint64_t v15 = swift_allocObject(a1, 24LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v3;
  aBlock[4] = a2;
  uint64_t v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = a3;
  int64_t v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  char v24 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100003288((uint64_t *)&unk_10007A860);
  unint64_t v19 = sub_100006480();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v22);
  return swift_release(v26);
}

uint64_t sub_10004CB90(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  objc_super v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100030274();
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalidate Bluetooth User Controller XPC Service", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xF0LL))(v11);
}

void sub_10004CCB4()
{
  id v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0LL))();
  uint64_t v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0) {
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v2);
    if (!v4) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v4)
    {
LABEL_12:
      uint64_t v8 = swift_bridgeObjectRelease(v3);
      id v9 = (id)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xB8LL))(v8);
      [v9 invalidate];

      return;
    }
  }

  if (v4 >= 1)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }
      else {
        uint64_t v6 = *(id *)(v3 + 8 * i + 32);
      }
      uint64_t v7 = v6;
      (*(void (**)(void))((swift_isaMask & *v6) + 0x70LL))();
    }

    goto LABEL_12;
  }

  __break(1u);
}

uint64_t sub_10004CDD0(void *a1)
{
  unint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0LL))();
  id v4 = a1;
  objc_super v5 = sub_10004FEB8(v3, (uint64_t)v4);
  swift_bridgeObjectRelease(v3);

  uint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  *(void *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = v5;
  return swift_bridgeObjectRelease(v6);
}

id sub_10004CE80()
{
  return sub_10004CE8C(type metadata accessor for BluetoothUserXPCServer);
}

id sub_10004CE8C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_10004CF14(uint64_t a1, void *a2)
{
  objc_super v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v86 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  int64_t v16 = (char *)&v86 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v86 - v18;
  __chkstk_darwin(v17);
  uint64_t v91 = (char *)&v86 - v20;
  uint64_t v21 = sub_10004D96C();
  if ((v21 & 1) == 0)
  {
    int v61 = IsAppleInternalBuild(v21);
    uint64_t v62 = sub_100030274();
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    if (v61)
    {
      v63(v13, v62, v6);
      id v64 = a2;
      uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc(18LL, -1LL);
        uint64_t v68 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v68;
        *(_DWORD *)uint64_t v67 = 67109378;
        LODWORD(v97) = [v64 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 4, v67 + 4, v67 + 8);

        *(_WORD *)(v67 + 8) = 2080;
        uint64_t v97 = sub_100003E68(0xD00000000000001ALL, 0x8000000100067CC0LL, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v67 + 10, v67 + 18);
        _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "XPC connection denied, %d, add %s entitlement",  (uint8_t *)v67,  0x12u);
        swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1LL, -1LL);
        swift_slowDealloc(v67, -1LL, -1LL);
      }

      else
      {
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    }

    else
    {
      v63(v10, v62, v6);
      id v76 = a2;
      id v77 = (os_log_s *)Logger.logObject.getter(v76);
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v79 = 67109120;
        LODWORD(aBlock[0]) = [v76 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v79 + 4, v79 + 8);

        _os_log_impl((void *)&_mh_execute_header, v77, v78, "XPC connection denied, %d", v79, 8u);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      else
      {

        id v77 = (os_log_s *)v76;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }

    return 0LL;
  }

  uint64_t v90 = v7;
  uint64_t v92 = v6;
  sub_100010A58(0LL, (unint64_t *)&unk_10007BD10, &OBJC_CLASS___NSObject_ptr);
  uint64_t v22 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8LL))();
  char v23 = static NSObject.== infix(_:_:)(a1, v22);

  if ((v23 & 1) == 0)
  {
    uint64_t v69 = sub_100030274();
    uint64_t v70 = v90;
    uint64_t v71 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v16, v69, v92);
    id v72 = a2;
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v75 = 67109120;
      uint64_t v71 = v92;
      LODWORD(aBlock[0]) = [v72 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v75 + 4, v75 + 8);

      _os_log_impl((void *)&_mh_execute_header, v73, v74, "XPC connection denied bad listener, %d", v75, 8u);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {

      uint64_t v73 = (os_log_s *)v72;
    }

    (*(void (**)(char *, uint64_t))(v70 + 8))(v16, v71);
    return 0LL;
  }

  char v24 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0x88LL);
  unint64_t v25 = v3;
  uint64_t v26 = v24();
  uint64_t v27 = (objc_class *)type metadata accessor for XPCConnection();
  int64_t v28 = (char *)objc_allocWithZone(v27);
  *(void *)&v28[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener] = v25;
  *(void *)&v28[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_dispatchQueue] = v26;
  *(void *)&v28[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection] = a2;
  v94.receiver = v28;
  v94.super_class = v27;
  id v29 = a2;
  id v30 = objc_msgSendSuper2(&v94, "init");
  aBlock[0] = (uint64_t)sub_10004C5E0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(aBlock[0]);
  unint64_t v32 = *(void *)((aBlock[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v31 = *(void *)((aBlock[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v32 >= v31 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
  }
  uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
  specialized Array._endMutation()(v33);
  uint64_t v34 = *(void *)((char *)v25 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  *(void *)((char *)v25 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = aBlock[0];
  uint64_t v35 = swift_bridgeObjectRelease(v34);
  id v36 = (id)CBUserControllerXPCInterface(v35);
  [v29 setExportedInterface:v36];

  __int128 v37 = (void *)v24();
  [v29 _setQueue:v37];

  [v29 setExportedObject:v30];
  uint64_t v38 = swift_allocObject(&unk_100073C50, 24LL, 7LL);
  swift_unknownObjectWeakInit(v38 + 16, v25);
  uint64_t v39 = swift_allocObject(&unk_100073C78, 32LL, 7LL);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = v38;
  *(void *)(v39 + 24) = v30;
  aBlock[4] = (uint64_t)sub_100050060;
  uint64_t v96 = v39;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100005A3C;
  void aBlock[3] = (uint64_t)&unk_100073C90;
  uint64_t v40 = _Block_copy(aBlock);
  uint64_t v41 = v96;
  id v42 = v30;
  swift_release(v41);
  [v29 setInvalidationHandler:v40];
  _Block_release(v40);
  id v44 = (id)CBUserControllerXPCInterface(v43);
  [v29 setRemoteObjectInterface:v44];

  [v29 resume];
  [v29 auditToken];
  uint64_t v45 = xpc_copy_code_signing_identity_for_token(aBlock);
  uint64_t v47 = v91;
  uint64_t v46 = v92;
  if (v45)
  {
    uint64_t v48 = v45;
    uint64_t v89 = String.init(cString:)();
    unint64_t v50 = v49;
    uint64_t v51 = sub_100030274();
    uint64_t v52 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v47, v51, v46);
    id v53 = v29;
    swift_bridgeObjectRetain(v50);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc(18LL, -1LL);
      uint64_t v87 = swift_slowAlloc(32LL, -1LL);
      uint64_t v97 = v87;
      *(_DWORD *)uint64_t v57 = 67109378;
      id v88 = v42;
      unsigned int v58 = [v53 processIdentifier];

      LODWORD(v93) = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 4, v57 + 4, v57 + 8);

      *(_WORD *)(v57 + 8) = 2080;
      swift_bridgeObjectRetain(v50);
      uint64_t v93 = sub_100003E68(v89, v50, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v57 + 10, v57 + 18);
      swift_bridgeObjectRelease_n(v50, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "XPC connection started: %d, %s", (uint8_t *)v57, 0x12u);
      uint64_t v59 = v87;
      swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v90 + 8))(v47, v92);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v50, 2LL);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v47, v46);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    return 1LL;
  }

  else
  {
    uint64_t v80 = sub_100030274();
    uint64_t v81 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v19, v80, v46);
    id v82 = v29;
    unint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v85 = 67109120;
      uint64_t v46 = v92;
      LODWORD(v97) = [v82 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 4, v85 + 4, v85 + 8);

      _os_log_impl((void *)&_mh_execute_header, v83, v84, "XPC connection started: %d", v85, 8u);
      swift_slowDealloc(v85, -1LL, -1LL);
      id v82 = v42;
    }

    else
    {

      unint64_t v83 = (os_log_s *)v42;
    }

    (*(void (**)(char *, uint64_t))(v81 + 8))(v19, v46);
    return 1LL;
  }

uint64_t sub_10004D96C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(&v7, v2);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  sub_100003420((uint64_t)&v7, (uint64_t)v9, &qword_10007A7A0);
  if (v10)
  {
    if ((swift_dynamicCast(&v6, v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0
      && (v6 & 1) != 0)
    {
      return 1LL;
    }
  }

  else
  {
    sub_10000B4A8((uint64_t)v9, &qword_10007A7A0);
  }

  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v0 valueForEntitlement:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(&v7, v5);
    swift_unknownObjectRelease(v5);
  }

  else
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
  }

  sub_100003420((uint64_t)&v7, (uint64_t)v9, &qword_10007A7A0);
  if (v10)
  {
  }

  else
  {
    sub_10000B4A8((uint64_t)v9, &qword_10007A7A0);
  }

  return 0LL;
}

uint64_t CBDistributedDebugLogging.description.getter(char a1)
{
  if ((a1 & 1) != 0)
  {
    v2._object = (void *)0x8000000100067D00LL;
    v2._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    String.append(contentsOf:)(v2);
  }

  return 0LL;
}

uint64_t sub_10004DBE0()
{
  if ((*v0 & 1) != 0)
  {
    v2._object = (void *)0x8000000100067D00LL;
    v2._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    String.append(contentsOf:)(v2);
  }

  return 0LL;
}

void sub_10004DC3C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_10004DC44@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_10004DC58@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_10004DC6C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10004DC80(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10004DCB0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_10004DCDC@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10004DD00(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_10004DD14(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_10004DD28(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_10004DD3C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10004DD50(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10004DD64(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10004DD78(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10004DD8C()
{
  return *v0 == 0;
}

_DWORD *sub_10004DD9C(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_10004DDB0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_10004DDBC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10004DDCC(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10004DDD8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10004DDEC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4 = sub_10004F89C(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10004DE28(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned __int8 v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  int v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_100050C40;
  return v6();
}

uint64_t sub_10004DE7C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  __int128 v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  int v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v5;
  *int v5 = v4;
  v5[1] = sub_100050C40;
  return v7();
}

uint64_t sub_10004DED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10000B4A8(a1, &qword_10007BE60);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_100073DF8, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10007BEA0, v16);
}

uint64_t sub_10004E01C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10004E080;
  return v6(a1);
}

uint64_t sub_10004E080()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void *sub_10004E0CC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100003288(&qword_10007C058);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10004F598(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void sub_10004E1D8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_10004E238()
{
  return ((uint64_t (*)(void))((char *)&loc_10004E26C + *((int *)qword_10004E768 + (v0 >> 62))))();
}

double sub_10004E788@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100027E38(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v17 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10004EF10();
      uint64_t v12 = v17;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    uint64_t v13 = *(void *)(v12 + 56) + 40 * v9;
    __int128 v14 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = v14;
    *(void *)(a3 + 32) = *(void *)(v13 + 32);
    sub_10004EBBC(v9, v12);
    uint64_t v15 = *v4;
    uint64_t *v4 = v12;
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
  }

  return result;
}

void sub_10004E888(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100003288(&qword_10007C050);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  swift_retain(v5);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_25;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }

    if (v21 >= v41) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v42 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v41) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v42 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v41)
        {
LABEL_37:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v23 = *(void *)(v42 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_46;
            }
            if (v13 >= v41) {
              goto LABEL_37;
            }
            unint64_t v23 = *(void *)(v42 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_24;
            }
          }
        }

        int64_t v13 = v24;
      }
    }

unint64_t sub_10004EBBC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        Hasher.init(_seed:)(v28, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        Swift::Int v14 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v13);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }

        else if (v15 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(a2 + 48);
          __int128 v17 = (_OWORD *)(v16 + 16 * v3);
          __int128 v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1) {
            *__int128 v17 = *v18;
          }
          uint64_t v19 = *(void *)(a2 + 56);
          unint64_t v20 = v19 + 40 * v3;
          int64_t v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            __int128 v9 = *v21;
            __int128 v10 = v21[1];
            *(void *)(v20 + 32) = *((void *)v21 + 4);
            *(_OWORD *)unint64_t v20 = v9;
            *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = v10;
            int64_t v3 = v6;
          }
        }

void sub_10004EDA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100027E38(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10004EF10();
LABEL_7:
    __int128 v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      sub_100050BE4(a1, v18[7] + 40 * v12);
      return;
    }

void sub_10004EF10()
{
  NSString v1 = v0;
  sub_100003288(&qword_10007C050);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v28 = v1;
  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

uint64_t sub_10004F104()
{
  *(void *)(v1 + 136) = v0;
  return swift_task_switch(sub_10004F11C, 0LL, 0LL);
}

uint64_t sub_10004F11C()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 136)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    v3._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v1 + 392LL))();
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    uint64_t v5 = sub_100003288(&qword_10007AC98);
    uint64_t inited = swift_initStackObject(v5, v0 + 16);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100060880;
    *(void *)(v0 + 12sub_10000DC70(0, 0) = 1920226159LL;
    *(void *)(v0 + 128) = 0xE400000000000000LL;
    AnyHashable.init<A>(_:)(v0 + 120, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = 10LL;
    *(void *)(inited + 8sub_10000DC70(0, 0) = 0xE100000000000000LL;
    unint64_t v7 = sub_10000EE74(inited);
    swift_release(v2);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v7);
  }

  else
  {
    unint64_t v9 = sub_10004F288();
    uint64_t v10 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v9, 0LL, 0LL);
    *uint64_t v11 = 1;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

unint64_t sub_10004F288()
{
  unint64_t result = qword_10007BC50;
  if (!qword_10007BC50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100062264, &type metadata for CloudPairingManager.CloudPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_10007BC50);
  }

  return result;
}

void *sub_10004F2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      uint64_t v6 = 4LL;
      while (1)
      {
        id v7 = (a1 & 0xC000000000000001LL) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        unint64_t v8 = v7;
        uint64_t v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1LL)) {
          break;
        }
        id v10 = [v7 idsDeviceID];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          uint64_t v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            uint64_t v17 = a3;
            goto LABEL_18;
          }

          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0LL);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            uint64_t v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5) {
          goto LABEL_24;
        }
      }

      __break(1u);
LABEL_20:
      uint64_t v18 = a3;
      if (a1 < 0) {
        uint64_t v19 = a1;
      }
      else {
        uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      uint64_t v5 = v20;
    }

    while (v20);
  }

void *sub_10004F45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v9 = *(void *)(type metadata accessor for CloudPairedDeviceRecord(0LL) - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_1000480C8(v10, a2, a3, &v17);
      if (v3)
      {
        swift_bridgeObjectRelease(a1);
        return (void *)swift_bridgeObjectRelease(v18);
      }

      uint64_t v14 = v17;
      if (v17)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        unint64_t v16 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v15 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v16 >= v15 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1LL);
        }
        uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v12);
      }

      v10 += v11;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(a1);
    return (void *)v18;
  }

  return result;
}

uint64_t sub_10004F598(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_10004F688(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v28 = type metadata accessor for CloudPairedDeviceRecord(0LL);
  uint64_t v5 = *(void *)(v28 - 8);
  uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  id v7 = *(uint64_t (**)(__n128))(*(void *)a2 + 144LL);
  uint64_t v8 = *(void *)(v5 + 72);
  uint64_t v27 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v9 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v10 = (uint64_t *)(v6 + *(int *)(v28 + 24));
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    __n128 v13 = swift_bridgeObjectRetain(v11);
    uint64_t v14 = v7(v13);
    if (!v15)
    {
      swift_bridgeObjectRelease(v11);
LABEL_13:
      uint64_t v19 = sub_1000338D8();
      if (v20 >> 60 != 15)
      {
        uint64_t v21 = v19;
        unint64_t v22 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
          uint64_t v9 = sub_10004E0CC(0LL, v9[2] + 1LL, 1, v9);
        }
        unint64_t v24 = v9[2];
        unint64_t v23 = v9[3];
        if (v24 >= v23 >> 1) {
          uint64_t v9 = sub_10004E0CC((void *)(v23 > 1), v24 + 1, 1, v9);
        }
        v9[2] = v24 + 1;
        int64_t v25 = &v9[2 * v24];
        v25[4] = v21;
        v25[5] = v22;
      }

      goto LABEL_4;
    }

    uint64_t v16 = v15;
    if (v12 == v14 && v15 == v11)
    {
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v16);
      goto LABEL_4;
    }

    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v14, v15, 0LL);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v16);
    if ((v18 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_4:
    v6 += v8;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(v27);
  return v9;
}

unint64_t sub_10004F858()
{
  unint64_t result = qword_10007BCB0;
  if (!qword_10007BCB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100062644, &type metadata for XPCConnection.XPCConnectionError);
    atomic_store(result, &qword_10007BCB0);
  }

  return result;
}

uint64_t sub_10004F89C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_10004F8D4(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 4sub_10000DC70(0, 0) = a2;
  *(void *)(v2 + 32) = a1;
  return swift_task_switch(sub_10004F8F0, 0LL, 0LL);
}

uint64_t sub_10004F8F0()
{
  BOOL v1 = *(_DWORD *)(v0 + 40) != 8;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = _swiftEmptyDictionarySingleton;
  char v35 = _swiftEmptyDictionarySingleton;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    int v5 = (char *)(v32 + 16);
    char v33 = 2 * v1;
    swift_bridgeObjectRetain(v2);
    id v7 = (unint64_t *)(v6 + 40);
    while (1)
    {
      uint64_t v8 = *(v7 - 1);
      unint64_t v9 = *v7;
      uint64_t v10 = sub_100003288(&qword_10007BFF0);
      sub_10000D5A0(v8, v9, v33, v10, v5);
      if (*(void *)v5) {
        break;
      }
      uint64_t v10 = sub_100003288(&qword_10007BFF8);
      sub_10000D5A0(v8, v9, v33, v10, v5);
      if (*(void *)v5)
      {
        *(void *)int v5 = *(void *)v5;
        uint64_t v11 = sub_100050B2C(&qword_10007C038, &qword_10007BFF8, (uint64_t)&protocol conformance descriptor for <A> [A]);
        goto LABEL_7;
      }

      sub_10000D5A0(v8, v9, v33, (uint64_t)&type metadata for Bool, v5);
      int v16 = *v5;
      if (v16 != 2)
      {
        *int v5 = v16 & 1;
        swift_bridgeObjectRetain(v9);
        uint64_t v13 = v32 + 16;
        uint64_t v14 = &type metadata for Bool;
        uint64_t v15 = &protocol witness table for Bool;
        goto LABEL_8;
      }

      sub_10000D5A0(v8, v9, v33, (uint64_t)&type metadata for Data, v5);
      unint64_t v17 = *(void *)(v32 + 24);
      if (v17 >> 60 == 15)
      {
        uint64_t v18 = sub_100003288(&qword_10007C000);
        sub_10000D5A0(v8, v9, v33, v18, v5);
        if (*(void *)v5)
        {
          *(void *)int v5 = *(void *)v5;
          uint64_t v19 = sub_100050B8C( &qword_10007C028,  &qword_10007C000,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
        }

        else
        {
          uint64_t v18 = sub_100003288(&qword_10007C008);
          sub_10000D5A0(v8, v9, v33, v18, v5);
          if (!*(void *)v5)
          {
            uint64_t v23 = sub_100010A58(0LL, &qword_10007C010, &OBJC_CLASS___NSNumber_ptr);
            sub_10000D5A0(v8, v9, v33, v23, v5);
            unint64_t v24 = *(void **)v5;
            if (*(void *)v5)
            {
              *(void *)int v5 = v24;
              unint64_t v25 = sub_100050A90();
              swift_bridgeObjectRetain(v9);
              id v26 = v24;
              AnyHashable.init<A>(_:)(v5, v23, v25);
              sub_10004BA08((uint64_t)v34, v8, v9);
            }

            else
            {
              sub_10000D5A0(v8, v9, v33, (uint64_t)&type metadata for String, v5);
              uint64_t v27 = *(void *)(v32 + 24);
              if (v27)
              {
                *(void *)(v32 + swift_weakDestroy(v0 + 16) = *(void *)(v32 + 16);
                *(void *)(v32 + 24) = v27;
                swift_bridgeObjectRetain(v9);
                AnyHashable.init<A>(_:)(v5, &type metadata for String, &protocol witness table for String);
                sub_10004BA08((uint64_t)v34, v8, v9);
              }
            }

            goto LABEL_9;
          }

          *(void *)int v5 = *(void *)v5;
          uint64_t v19 = sub_100050B2C( &qword_10007C020,  &qword_10007C008,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
        }

        uint64_t v22 = v19;
        swift_bridgeObjectRetain(v9);
        AnyHashable.init<A>(_:)(v5, v18, v22);
        sub_10004BA08((uint64_t)v34, v8, v9);
      }

      else
      {
        uint64_t v20 = *(void *)(v32 + 16);
        *(void *)(v32 + swift_weakDestroy(v0 + 16) = v20;
        *(void *)(v32 + 24) = v17;
        swift_bridgeObjectRetain(v9);
        sub_100008E9C(v20, v17);
        unint64_t v21 = sub_100050AE8();
        AnyHashable.init<A>(_:)(v5, &type metadata for Data, v21);
        sub_10004BA08((uint64_t)v34, v8, v9);
        sub_100008B2C(v20, v17);
      }

uint64_t sub_10004FD7C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(v4 + 72) = a4;
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 48) = a1;
  return swift_task_switch(sub_10004FD9C, 0LL, 0LL);
}

uint64_t sub_10004FD9C()
{
  int v1 = *(_DWORD *)(v0 + 72);
  BOOL v2 = v1 != 8;
  BOOL v3 = v1 == 8;
  unint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 48);
  sub_10000469C(*(void *)(v0 + 64), v0 + 16);
  sub_10000EDB4(2 * v2, v5, v4, v0 + 16);
  sub_10000B4A8(v0 + 16, &qword_10007A7A0);
  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  sub_10000EDB4(2 * v3, v5, v4, v0 + 16);
  sub_10000B4A8(v0 + 16, &qword_10007A7A0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for BluetoothUserXPCServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd22BluetoothUserXPCServer);
}

uint64_t sub_10004FE6C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004FE90()
{
  return sub_10004C820(*(void **)(v0 + 16));
}

uint64_t sub_10004FE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004FEA8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004FEB0()
{
  return sub_10004CB90(*(void **)(v0 + 16));
}

void *sub_10004FEB8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      unint64_t v6 = v3 & 0xC000000000000001LL;
      uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v21 = v3 & 0xFFFFFFFFFFFFFF8LL;
      while (v6)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
LABEL_9:
        int v16 = v15;
        unint64_t v17 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_15;
        }
        type metadata accessor for XPCConnection();
        uint64_t v18 = static NSObject.== infix(_:_:)(v16, a2);
        if ((v18 & 1) != 0)
        {
        }

        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
          unint64_t v8 = v6;
          uint64_t v9 = v4;
          uint64_t v10 = v3;
          uint64_t v11 = a2;
          uint64_t v12 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
          uint64_t v13 = v12;
          a2 = v11;
          uint64_t v3 = v10;
          uint64_t v4 = v9;
          unint64_t v6 = v8;
          uint64_t v7 = v21;
          uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v16);
          specialized ContiguousArray._endMutation()(v14);
        }

        ++v5;
        if (v17 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v5 < *(void *)(v7 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (v3 < 0) {
        uint64_t v20 = v3;
      }
      else {
        uint64_t v20 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    id v15 = *(id *)(v3 + 8 * v5 + 32);
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100050030()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100050054()
{
  return sub_10002DEE0((void (*)(void))&_swift_release);
}

void sub_100050060()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16) + 16LL;
  swift_beginAccess(v2, v5, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    (*(void (**)(uint64_t))((swift_isaMask & *Strong) + 0xF8LL))(v1);
  }

unint64_t sub_1000500D4()
{
  unint64_t result = qword_10007BD20;
  if (!qword_10007BD20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000625DC, &type metadata for XPCConnection.XPCConnectionError);
    atomic_store(result, (unint64_t *)&qword_10007BD20);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for XPCConnection.XPCConnectionError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100050158 + 4 * byte_1000625D0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100050178 + 4 * byte_1000625D5[v4]))();
  }
}

_BYTE *sub_100050158(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100050178(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100050180(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100050188(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100050190(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100050198(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for XPCConnection.XPCConnectionError()
{
  return &type metadata for XPCConnection.XPCConnectionError;
}

void type metadata accessor for CBDistributedDebugLogging(uint64_t a1)
{
}

uint64_t sub_1000501C8()
{
  return sub_10000662C( &qword_10007BE40,  (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging,  (uint64_t)&unk_10006276C);
}

uint64_t sub_1000501F4()
{
  return sub_10000662C( &qword_10007BE48,  (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging,  (uint64_t)&unk_10006273C);
}

uint64_t sub_100050220()
{
  return sub_10000662C( &qword_10007BE50,  (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging,  (uint64_t)&unk_100062794);
}

uint64_t sub_10005024C()
{
  return sub_10000662C( &qword_10007BE58,  (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging,  (uint64_t)&unk_1000627CC);
}

uint64_t sub_100050278()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  _Block_release(*(const void **)(v0 + 40));

  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000502B4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(unsigned int *)(v0 + 32);
  unint64_t v6 = *(void **)(v0 + 40);
  unint64_t v5 = *(void **)(v0 + 48);
  uint64_t v7 = (void *)swift_task_alloc(dword_10007BE6C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_100050C40;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *))((char *)&dword_10007BE68 + dword_10007BE68))( v2,  v3,  v4,  v6,  v5);
}

uint64_t sub_100050338()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc(dword_10007BE7C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10007BE78 + dword_10007BE78))(v2, v3, v4);
}

uint64_t sub_1000503B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10007BE8C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100050C40;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10007BE88 + dword_10007BE88))( a1,  v4,  v5,  v6);
}

uint64_t sub_100050438()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10005045C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10007BE9C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000504CC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10007BE98 + dword_10007BE98))(a1, v4);
}

uint64_t sub_1000504CC()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100050514()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100050548()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(unsigned int *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  unint64_t v6 = (void *)swift_task_alloc(dword_10007BEAC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_1000504CC;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_10007BEA8 + dword_10007BEA8))( v2,  v3,  v5,  v4);
}

uint64_t sub_1000505D0()
{
  char v2 = *(_BYTE *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_10007BECC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(char, void *, void *))((char *)&dword_10007BEC8 + dword_10007BEC8))(v2, v4, v3);
}

uint64_t sub_100050644()
{
  return sub_10002DEE0((void (*)(void))&__Block_release);
}

uint64_t sub_100050650()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10007BEEC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100050C40;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10007BEE8 + dword_10007BEE8))(v2, v3);
}

uint64_t sub_1000506C0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000506EC()
{
  int v2 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_10007BF0C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_10007BF08 + dword_10007BF08))(v2, v4, v3);
}

uint64_t sub_100050760()
{
  return sub_10002DEE0((void (*)(void))&__Block_release);
}

uint64_t sub_10005076C()
{
  int v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10007BF2C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100050C40;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10007BF28 + dword_10007BF28))(v2, v3);
}

uint64_t sub_1000507DC()
{
  int v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10007BF4C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10007BF48 + dword_10007BF48))(v2, v3, v4);
}

uint64_t sub_100050854()
{
  int v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10007BF6C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10007BF68 + dword_10007BF68))(v2, v3, v4);
}

uint64_t sub_1000508CC()
{
  int v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10007BF8C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10007BF88 + dword_10007BF88))(v2, v3, v4);
}

uint64_t sub_100050940()
{
  return sub_10002DEE0((void (*)(void))&__Block_release);
}

uint64_t sub_10005094C()
{
  int v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_10007BFAC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100050C40;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10007BFA8 + dword_10007BFA8))(v2, v3);
}

uint64_t sub_1000509BC()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000509F0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10007BFCC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10007BFC8 + dword_10007BFC8))(v2, v3, v4);
}

uint64_t sub_100050A64()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_100050A90()
{
  unint64_t result = qword_10007C018;
  if (!qword_10007C018)
  {
    uint64_t v1 = sub_100010A58(255LL, &qword_10007C010, &OBJC_CLASS___NSNumber_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10007C018);
  }

  return result;
}

unint64_t sub_100050AE8()
{
  unint64_t result = qword_10007C030;
  if (!qword_10007C030)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10007C030);
  }

  return result;
}

uint64_t sub_100050B2C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000064CC(a2);
    sub_100050A90();
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100050B8C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000064CC(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100050BE4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for CBKeyValueSource(uint64_t a1)
{
}

id sub_100050C64()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }

  else
  {
    id v3 = (id)BiomeLibrary();
    id v4 = [v3 Device];
    swift_unknownObjectRelease(v3);
    id v5 = [v4 Wireless];
    swift_unknownObjectRelease(v4);
    id v6 = [v5 BluetoothNearbyDevice];
    swift_unknownObjectRelease(v5);
    uint64_t v7 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v6;
    id v2 = v6;

    uint64_t v1 = 0LL;
  }

  id v8 = v1;
  return v2;
}

void sub_100050D2C(uint64_t a1)
{
  id v2 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;
}

void (*sub_100050D38(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100050C64();
  return sub_100050D6C;
}

void sub_100050D6C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v2;
}

id sub_100050D7C()
{
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    id v2 = (id)v0[4];
  }

  else
  {
    id v3 = (void *)(*(uint64_t (**)(void))(*v0 + 120LL))();
    id v4 = [v3 source];

    id v5 = (void *)v0[4];
    v0[4] = v4;
    id v2 = v4;

    uint64_t v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

void sub_100050DF8(uint64_t a1)
{
  id v2 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;
}

void (*sub_100050E04(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100050D7C();
  return sub_100050E38;
}

void sub_100050E38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v2;
}

id sub_100050E48()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }

  else
  {
    id v3 = (id)BiomeLibrary();
    id v4 = [v3 Device];
    swift_unknownObjectRelease(v3);
    id v5 = [v4 Wireless];
    swift_unknownObjectRelease(v4);
    id v6 = [v5 BluetoothUseCase];
    swift_unknownObjectRelease(v5);
    uint64_t v7 = *(void **)(v0 + 40);
    *(void *)(v0 + 4sub_10000DC70(0, 0) = v6;
    id v2 = v6;

    uint64_t v1 = 0LL;
  }

  id v8 = v1;
  return v2;
}

void sub_100050F10(uint64_t a1)
{
  id v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 4sub_10000DC70(0, 0) = a1;
}

void (*sub_100050F1C(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100050E48();
  return sub_100050F50;
}

void sub_100050F50(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 4sub_10000DC70(0, 0) = v2;
}

id sub_100050F60()
{
  uint64_t v1 = (void *)v0[6];
  if (v1)
  {
    id v2 = (id)v0[6];
  }

  else
  {
    id v3 = (void *)(*(uint64_t (**)(void))(*v0 + 168LL))();
    id v4 = [v3 source];

    id v5 = (void *)v0[6];
    v0[6] = v4;
    id v2 = v4;

    uint64_t v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

void (*sub_100050FDC(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100050F60();
  return sub_10000C2CC;
}

uint64_t sub_100051010(uint64_t a1, uint64_t a2, char a3, char a4, int a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  __chkstk_darwin(v14);
  int v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v26[1] = *(void *)(v5 + 16);
  uint64_t v17 = swift_allocObject(&unk_100074468, 24LL, 7LL);
  swift_weakInit(v17 + 16, v5);
  uint64_t v18 = swift_allocObject(&unk_100074490, 56LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
  *(_BYTE *)(v18 + 24) = a3;
  *(void *)(v18 + 32) = a1;
  *(void *)(v18 + 4sub_10000DC70(0, 0) = a2;
  *(_BYTE *)(v18 + 48) = a4;
  *(_DWORD *)(v18 + 52) = a5;
  aBlock[4] = sub_1000515F4;
  uint64_t v32 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_1000744A8;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain(v17);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v23 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  uint64_t v24 = v32;
  swift_release(v17);
  return swift_release(v24);
}

uint64_t sub_100051250()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100051274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v42, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v14 = result;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    Class v16 = Bool._bridgeToObjectiveC()().super.super.isa;
    LODWORD(v39) = a6;
    Class v17 = UInt32._bridgeToObjectiveC()().super.super.isa;
    id v18 = objc_allocWithZone(&OBJC_CLASS___BMDeviceBluetoothNearbyDevice);
    swift_bridgeObjectRetain(a4);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    id v20 = [v18 initWithInitiator:isa localIdentifier:v19 starting:v16 useCase:v17];

    uint64_t v21 = (void *)(*(uint64_t (**)(void))(*(void *)v14 + 144LL))();
    [v21 sendEvent:v20];

    uint64_t v22 = sub_100030110();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v22, v9);
    id v23 = v20;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      unint64_t v36 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v37;
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v38 = v10;
      uint64_t v27 = sub_100051E3C(v39);
      uint64_t v28 = String.init(cString:)(v27);
      uint64_t v39 = v9;
      unint64_t v30 = v29;
      uint64_t v40 = sub_100003E68(v28, v29, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + 12) = 2112;
      uint64_t v40 = (uint64_t)v23;
      id v31 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 14, v26 + 22);
      uint64_t v32 = v36;
      *unint64_t v36 = v23;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Send nearby device event %s for %@", (uint8_t *)v26, 0x16u);
      uint64_t v33 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v32, 1LL, v33);
      swift_slowDealloc(v32, -1LL, -1LL);
      uint64_t v34 = v37;
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

      swift_release(v14);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v12, v39);
    }

    else
    {

      swift_release(v14);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }

  return result;
}

uint64_t sub_1000515C8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000515F4()
{
  return sub_100051274( *(void *)(v0 + 16),  *(unsigned __int8 *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(unsigned __int8 *)(v0 + 48),  *(_DWORD *)(v0 + 52));
}

uint64_t sub_10005160C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005161C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100051624(char a1, int a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = *(void *)(v2 + 16);
  uint64_t v12 = swift_allocObject(&unk_100074468, 24LL, 7LL);
  swift_weakInit(v12 + 16, v2);
  uint64_t v13 = swift_allocObject(&unk_1000744E0, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  *(_DWORD *)(v13 + 28) = a2;
  aBlock[4] = sub_100051B74;
  uint64_t v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_1000744F8;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  id v23 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v18 = sub_10000AEBC((unint64_t *)&qword_10007AD30, (uint64_t *)&unk_10007A860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_100051850(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v35, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v10 = result;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    Class v12 = UInt32._bridgeToObjectiveC()().super.super.isa;
    id v13 = [objc_allocWithZone(BMDeviceBluetoothUseCase) initWithStarting:isa useCase:v12];

    uint64_t v14 = (void *)(*(uint64_t (**)(void))(*(void *)v10 + 192LL))();
    [v14 sendEvent:v13];

    uint64_t v15 = sub_100030110();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, v5);
    id v16 = v13;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      unint64_t v29 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = v30;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v32 = v6;
      id v20 = sub_100051E3C(a3);
      uint64_t v21 = String.init(cString:)(v20);
      unint64_t v23 = v22;
      uint64_t v33 = sub_100003E68(v21, v22, &v34);
      uint64_t v31 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v33 = (uint64_t)v16;
      id v24 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 14, v19 + 22);
      uint64_t v25 = v29;
      *unint64_t v29 = v16;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Send usecase event %s for %@", (uint8_t *)v19, 0x16u);
      uint64_t v26 = sub_100003288((uint64_t *)&unk_10007A940);
      swift_arrayDestroy(v25, 1LL, v26);
      swift_slowDealloc(v25, -1LL, -1LL);
      uint64_t v27 = v30;
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      swift_release(v10);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v8, v31);
    }

    else
    {

      swift_release(v10);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }

  return result;
}

uint64_t sub_100051B50()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100051B74()
{
  return sub_100051850(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_DWORD *)(v0 + 28));
}

uint64_t sub_100051B84()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_100051BC8()
{
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  sub_100051BFC();
  return v1;
}

uint64_t sub_100051BFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004600();
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  os_log_type_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100003288((uint64_t *)&unk_10007A810);
  uint64_t v15 = sub_10000AEBC((unint64_t *)&qword_10007ACF0, (uint64_t *)&unk_10007A810);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  0x8000000100068040LL,  v7,  v4,  v11,  0LL);
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 4sub_10000DC70(0, 0) = 0u;
  return v1;
}

uint64_t type metadata accessor for IntelligenceManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd19IntelligenceManager);
}

void type metadata accessor for CBUseCase()
{
  if (!qword_10007C1A0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_100074530);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007C1A0);
    }
  }

const char *sub_100051E3C(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

uint64_t sub_100052580@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  id v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100074540, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1000525D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100055150();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1000525F4(void *a1@<X8>)
{
  *a1 = &off_100074578;
}

void *sub_100052604()
{
  uint64_t v0 = type metadata accessor for SystemNotificationManager();
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  uint64_t result = sub_100052730();
  qword_1000808C0 = v1;
  return result;
}

uint64_t *sub_10005263C()
{
  if (qword_1000803B0 != -1) {
    swift_once(&qword_1000803B0, sub_100052604);
  }
  return &qword_1000808C0;
}

uint64_t sub_10005267C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t sub_1000526B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000526F4(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

void *sub_100052730()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v23 = sub_100004600();
  static DispatchQoS.unspecified.getter(v23);
  Swift::String aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v12 = sub_10000662C( (unint64_t *)&qword_10007ACE0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100003288((uint64_t *)&unk_10007A810);
  uint64_t v14 = sub_100008C48( (unint64_t *)&qword_10007ACF0,  (uint64_t *)&unk_10007A810,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v13, v14, v6, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  uint64_t v15 = (dispatch_queue_s *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000037LL,  0x8000000100068AA0LL,  v11,  v8,  v5,  0LL);
  v1[2] = v15;
  v1[3] = _swiftEmptyArrayStorage;
  v1[4] = &_swiftEmptyDictionarySingleton;
  uint64_t v28 = sub_100055E50;
  unint64_t v29 = v1;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v25 = 1107296256LL;
  uint64_t v26 = sub_100003DE0;
  uint64_t v27 = &unk_100074768;
  id v16 = _Block_copy(&aBlock);
  uint64_t v17 = v29;
  swift_retain(v1);
  swift_release(v17);
  xpc_set_event_stream_handler("com.apple.alarm", v15, v16);
  _Block_release(v16);
  os_log_type_t v18 = (dispatch_queue_s *)v1[2];
  uint64_t v28 = sub_100055E58;
  unint64_t v29 = v1;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v25 = 1107296256LL;
  uint64_t v26 = sub_100003DE0;
  uint64_t v27 = &unk_100074790;
  uint64_t v19 = _Block_copy(&aBlock);
  id v20 = v29;
  swift_retain(v1);
  swift_release(v20);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v18, v19);
  _Block_release(v19);
  return v1;
}

uint64_t sub_1000529EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 168LL))(a1, a2);
}

xpc_object_t sub_100052A30(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100030188();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v16 = sub_100003E68(a1, a2, &v24);
    uint64_t v22 = v6;
    double v23 = *(double *)&v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v14 + 12) = 2048;
    double v23 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 14, v14 + 22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Scheduling alarm: %s for %f", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  xpc_object_t result = xpc_dictionary_create(0LL, 0LL, 0LL);
  if ((~*(void *)&a3 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (a3 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a3 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  int64_t v18 = 1000000000 * (uint64_t)a3;
  if ((unsigned __int128)((uint64_t)a3 * (__int128)1000000000LL) >> 64 == v18 >> 63)
  {
    xpc_object_t v19 = result;
    xpc_dictionary_set_date(result, "Date", v18);
    uint64_t v20 = String.utf8CString.getter(a1, a2);
    swift_unknownObjectRetain(v19);
    xpc_set_event("com.apple.alarm", v20 + 32, v19);
    swift_unknownObjectRelease_n(v19, 2LL);
    return (xpc_object_t)swift_release(v20);
  }

LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100052CF4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100030188();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = a1;
    os_log_type_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v14;
    *(_DWORD *)os_log_type_t v13 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = sub_100003E68(v19, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Canceling alarm: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    uint64_t v15 = v13;
    a1 = v19;
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = String.utf8CString.getter(a1, a2);
  xpc_set_event("com.apple.alarm", v16 + 32, 0LL);
  return swift_release(v16);
}

void sub_100052EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SystemNotificationSource(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000B31C(a3, (uint64_t)v14);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 2LL, v8);
  if (v15)
  {
    if (v15 == 1)
    {
      int out_token = -1;
      uint64_t v16 = (dispatch_queue_s *)v4[2];
      uint64_t v17 = (void *)swift_allocObject(&unk_100074600, 40LL, 7LL);
      v17[2] = v4;
      v17[3] = a1;
      v17[4] = a2;
      unint64_t v36 = sub_100055208;
      uint64_t v37 = v17;
      Swift::String aBlock = _NSConcreteStackBlock;
      uint64_t v33 = 1107296256LL;
      uint64_t v34 = sub_100005CB8;
      uint64_t v35 = &unk_100074618;
      uint64_t v18 = _Block_copy(&aBlock);
      uint64_t v19 = v37;
      swift_retain(v4);
      swift_bridgeObjectRetain(a2);
      swift_release(v19);
      uint64_t v20 = String.utf8CString.getter(a1, a2);
      notify_register_dispatch((const char *)(v20 + 32), &out_token, v16, v18);
      swift_release(v20);
      _Block_release(v18);
      if (!out_token)
      {
        swift_beginAccess(v4 + 4, &aBlock, 33LL, 0LL);
        swift_bridgeObjectRetain(a2);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4[4]);
        uint64_t v30 = v4[4];
        v4[4] = 0x8000000000000000LL;
        sub_100054C50(0, a1, a2, isUniquelyReferenced_nonNull_native);
        uint64_t v22 = v4[4];
        v4[4] = v30;
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v22);
        swift_endAccess(&aBlock);
      }
    }

    else
    {
      id v23 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
      NSString v24 = String._bridgeToObjectiveC()();
      uint64_t v25 = (void *)swift_allocObject(&unk_1000745B0, 40LL, 7LL);
      void v25[2] = v4;
      v25[3] = a1;
      v25[4] = a2;
      unint64_t v36 = sub_1000551B4;
      uint64_t v37 = v25;
      Swift::String aBlock = _NSConcreteStackBlock;
      uint64_t v33 = 1107296256LL;
      uint64_t v34 = sub_1000537B8;
      uint64_t v35 = &unk_1000745C8;
      uint64_t v26 = _Block_copy(&aBlock);
      uint64_t v27 = v37;
      swift_retain(v4);
      swift_bridgeObjectRetain(a2);
      swift_release(v27);
      id v28 = [v23 addObserverForName:v24 object:v4 queue:0 usingBlock:v26];
      _Block_release(v26);
      swift_unknownObjectRelease(v28);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    (*(void (**)(uint64_t, uint64_t, char *))(*v4 + 160LL))(a1, a2, v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

uint64_t sub_100053268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SystemNotificationSource(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003288(&qword_10007A9B0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(v11);
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v23 = v14;
  uint64_t v17 = v14 + ((v16 + 32) & ~v16);
  uint64_t v18 = *(void *)(v10 + 72);
  do
  {
    sub_10005523C(v17, (uint64_t)v13);
    sub_100008C88((uint64_t)v13, (uint64_t)v24);
    sub_100055C60((uint64_t)v13);
    uint64_t v19 = v25;
    uint64_t v20 = v26;
    sub_100008E78(v24, v25);
    uint64_t v21 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v8, 1LL, 2LL, v21);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8))(v8, a2, a3, v19, v20);
    sub_10000B360((uint64_t)v8);
    sub_10000467C(v24);
    v17 += v18;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_100053404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v6 = type metadata accessor for SystemNotificationSource(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100003288(&qword_10007A9B0);
  uint64_t v54 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Notification(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100030188();
  uint64_t v56 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v20, v16);
  uint64_t v55 = v13;
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v22 = v57;
  uint64_t v57 = v12;
  uint64_t v23 = v21(v15, v22, v12);
  NSString v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  int v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    os_log_t v52 = v24;
    uint64_t v27 = swift_slowAlloc(12LL, -1LL);
    int v50 = v26;
    id v28 = (uint8_t *)v27;
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    v60[0] = v51;
    unint64_t v49 = v28;
    *(_DWORD *)id v28 = 136315138;
    uint64_t v48 = v28 + 4;
    uint64_t v29 = (void *)Notification.name.getter();
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v53 = v16;
    uint64_t v31 = v30;
    unint64_t v33 = v32;

    uint64_t v59 = sub_100003E68(v31, v33, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v48, v28 + 12);
    swift_bridgeObjectRelease(v33);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v57);
    os_log_t v34 = v52;
    uint64_t v35 = v49;
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v50, "Local notification received: %s", v49, 0xCu);
    uint64_t v36 = v51;
    swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);

    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v19, v53);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v57);

    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v19, v16);
  }

  uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 104LL))(v37);
  uint64_t v39 = *(void *)(v38 + 16);
  if (v39)
  {
    uint64_t v40 = *(unsigned __int8 *)(v54 + 80);
    uint64_t v58 = v38;
    uint64_t v41 = v38 + ((v40 + 32) & ~v40);
    uint64_t v42 = *(void *)(v54 + 72);
    do
    {
      sub_10005523C(v41, (uint64_t)v11);
      sub_100008C88((uint64_t)v11, (uint64_t)v60);
      sub_100055C60((uint64_t)v11);
      uint64_t v43 = v61;
      uint64_t v44 = v62;
      sub_100008E78(v60, v61);
      uint64_t v45 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v8, 2LL, 2LL, v45);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8))(v8, a3, a4, v43, v44);
      sub_10000B360((uint64_t)v8);
      sub_10000467C(v60);
      v41 += v42;
      --v39;
    }

    while (v39);
    uint64_t v38 = v58;
  }

  return swift_bridgeObjectRelease(v38);
}

uint64_t sub_1000537B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10005385C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  (*(void (**)(void))(*v2 + 176LL))();
  swift_beginAccess(v2 + 4, v11, 0LL, 0LL);
  uint64_t v6 = v2[4];
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v6);
    unint64_t v7 = sub_100027E38(a1, a2);
    if ((v8 & 1) != 0)
    {
      int v9 = *(_DWORD *)(*(void *)(v6 + 56) + 4 * v7);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v6);
      notify_cancel(v9);
    }

    else
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v6);
    }
  }

  id v10 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v10 removeObserver:v3];
}

const char *sub_100053948(void *a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v3 = type metadata accessor for SystemNotificationSource(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003288(&qword_10007A9B0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_object_t result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v40 = v7;
    uint64_t v15 = String.init(cString:)();
    unint64_t v17 = v16;
    uint64_t v18 = sub_100030188();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
    uint64_t v19 = swift_bridgeObjectRetain_n(v17, 2LL);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      v43[0] = v39;
      uint64_t v38 = v22;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v37 = v22 + 4;
      swift_bridgeObjectRetain(v17);
      uint64_t v42 = sub_100003E68(v15, v17, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v37, v22 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      uint64_t v23 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "On xpc event stream, com.apple.notifyd.matching, notification %s",  v38,  0xCu);
      uint64_t v24 = v39;
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v17, 2LL);
    }

    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 104LL))(v25);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v26 + 16);
    if (v28)
    {
      uint64_t v29 = *(unsigned __int8 *)(v40 + 80);
      uint64_t v41 = v26;
      uint64_t v30 = v26 + ((v29 + 32) & ~v29);
      uint64_t v31 = *(void *)(v40 + 72);
      do
      {
        sub_10005523C(v30, (uint64_t)v9);
        sub_100008C88((uint64_t)v9, (uint64_t)v43);
        sub_100055C60((uint64_t)v9);
        uint64_t v32 = v44;
        uint64_t v33 = v45;
        sub_100008E78(v43, v44);
        uint64_t v34 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v5, 1LL, 2LL, v34);
        (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v33 + 8))(v5, v15, v17, v32, v33);
        sub_10000B360((uint64_t)v5);
        sub_10000467C(v43);
        v30 += v31;
        --v28;
      }

      while (v28);
      swift_bridgeObjectRelease(v17);
      uint64_t v35 = v41;
    }

    else
    {
      swift_bridgeObjectRelease(v17);
      uint64_t v35 = v27;
    }

    return (const char *)swift_bridgeObjectRelease(v35);
  }

  return result;
}

const char *sub_100053C98(void *a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v3 = type metadata accessor for SystemNotificationSource(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003288(&qword_10007A9B0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_object_t result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v41 = v7;
    uint64_t v15 = String.init(cString:)();
    unint64_t v17 = v16;
    uint64_t v18 = sub_100030188();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
    uint64_t v19 = swift_bridgeObjectRetain_n(v17, 2LL);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      v44[0] = v40;
      uint64_t v39 = v22;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v38 = v22 + 4;
      swift_bridgeObjectRetain(v17);
      uint64_t v43 = sub_100003E68(v15, v17, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v38, v22 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      uint64_t v23 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "On xpc event stream, com.apple.alarm, notification %s",  v39,  0xCu);
      uint64_t v24 = v40;
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v17, 2LL);
    }

    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 104LL))(v25);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v26 + 16);
    if (v28)
    {
      uint64_t v29 = *(unsigned __int8 *)(v41 + 80);
      uint64_t v42 = v26;
      uint64_t v30 = v26 + ((v29 + 32) & ~v29);
      uint64_t v31 = *(void *)(v41 + 72);
      do
      {
        sub_10005523C(v30, (uint64_t)v9);
        sub_100008C88((uint64_t)v9, (uint64_t)v44);
        sub_100055C60((uint64_t)v9);
        uint64_t v32 = v45;
        uint64_t v33 = v46;
        uint64_t v34 = sub_100008E78(v44, v45);
        static Date.now.getter(v34);
        uint64_t v35 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v5, 0LL, 2LL, v35);
        (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v33 + 8))(v5, v15, v17, v32, v33);
        sub_10000B360((uint64_t)v5);
        sub_10000467C(v44);
        v30 += v31;
        --v28;
      }

      while (v28);
      swift_bridgeObjectRelease(v17);
      uint64_t v36 = v42;
    }

    else
    {
      swift_bridgeObjectRelease(v17);
      uint64_t v36 = v27;
    }

    return (const char *)swift_bridgeObjectRelease(v36);
  }

  return result;
}

uint64_t sub_100053FF0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_100054024(uint64_t a1)
{
  v3[2] = a1;
  uint64_t v1 = sub_100003288(&qword_10007A9B0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100055214, v3, v1);
}

uint64_t sub_100054084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100003288(&qword_10007A9B0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100008C88(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject(&unk_100074750, 24LL, 7LL);
  swift_weakInit(v10 + 16, a2);
  uint64_t v11 = sub_100003288(&qword_10007C388);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_100055CC4, v10, v11, a3);
  sub_10005523C(a3, (uint64_t)v9);
  uint64_t v12 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)a2 + 120LL))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_100054738(0, *(void *)(v15 + 16) + 1LL, 1, v15);
    unint64_t *v14 = v15;
  }

  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_100054738(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }

  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v18 + 1;
  sub_10005532C( (uint64_t)v9,  v15 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v18);
  return v12(v21, 0LL);
}

uint64_t sub_100054218(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100003288(&qword_10007A9B0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  v23[1] = *(void *)(v2 + 16);
  sub_10005523C(a1, (uint64_t)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 24) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_100074650, v15 + v13, v14 | 7);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v2;
  sub_10005532C((uint64_t)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v16 + v15);
  aBlock[4] = sub_100055374;
  uint64_t v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100074668;
  unint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_10000662C( (unint64_t *)&qword_10007AD20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100003288((uint64_t *)&unk_10007A860);
  uint64_t v21 = sub_100008C48( (unint64_t *)&qword_10007AD30,  (uint64_t *)&unk_10007A860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v27);
}

uint64_t sub_10005446C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100003288(&qword_10007A9B0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0LL;
    uint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_10005523C(a3 + v16 + (void)v13 * v14, (uint64_t)v12);
      char v17 = a1(v12);
      if (v3)
      {
        sub_100055C60((uint64_t)v12);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }

      if ((v17 & 1) != 0)
      {
        sub_10005532C((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
          sub_100054F4C(0, v15[2] + 1LL, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100054F4C(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }

        void v15[2] = v19 + 1;
        uint64_t result = sub_10005532C(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }

      else
      {
        uint64_t result = sub_100055C60((uint64_t)v12);
      }

      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }

  return result;
}

uint64_t sub_100054660()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

void (*sub_100054688(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 120LL))();
  return sub_1000079E0;
}

uint64_t sub_1000546D8(uint64_t a1)
{
  uint64_t v2 = *v1;
  v5[2] = a1;
  void v5[3] = v2;
  uint64_t v3 = sub_100003288(&qword_10007A9B0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100055E80, v5, v3);
}

uint64_t sub_100054738(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007C378);
  uint64_t v11 = *(void *)(sub_100003288(&qword_10007A9B0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288(&qword_10007A9B0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100055D34(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

void sub_100054948(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100003288(&qword_10007C390);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  swift_retain(v5);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v22 >= v36) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v13 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v13 = v25;
      }
    }

void sub_100054C50(int a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100027E38(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100054DA0();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_DWORD *)(v18[7] + 4 * v12) = a1;
      return;
    }

void sub_100054DA0()
{
  uint64_t v1 = v0;
  sub_100003288(&qword_10007C390);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_100054F4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100054F68(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100054F68(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100003288(&qword_10007C378);
  uint64_t v11 = *(void *)(sub_100003288(&qword_10007A9B0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100003288(&qword_10007A9B0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  int64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  int64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

uint64_t sub_100055150()
{
  return 0x6C7070612E6D6F63LL;
}

uint64_t type metadata accessor for SystemNotificationSource(uint64_t a1)
{
  uint64_t result = qword_1000805C0;
  if (!qword_1000805C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SystemNotificationSource);
  }
  return result;
}

uint64_t sub_1000551B4(uint64_t a1)
{
  return sub_100053404(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000551C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000551D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000551DC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100055208()
{
  return sub_100053268(v0[2], v0[3], v0[4]);
}

uint64_t sub_100055214@<X0>(uint64_t a1@<X8>)
{
  return sub_100054084(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10005523C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007A9B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055284()
{
  uint64_t v1 = sub_100003288(&qword_10007A9B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  int64_t v7 = (void *)(v0 + v4);
  sub_10000467C(v7);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 28);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_release(*(void *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005532C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007A9B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055374()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100003288(&qword_10007A9B0) - 8) + 80LL);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((v1 + 24) & ~v1);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 104LL))();
  v7[2] = v3;
  uint64_t v5 = sub_10005446C((uint64_t (*)(char *))sub_100055BDC, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112LL))(v5);
}

unint64_t sub_1000553FC()
{
  unint64_t result = qword_10007C1A8;
  if (!qword_10007C1A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100062A4C, &type metadata for SystemNotificationManager.Constants);
    atomic_store(result, (unint64_t *)&qword_10007C1A8);
  }

  return result;
}

uint64_t sub_100055440()
{
  return sub_100008C48(&qword_10007C1B0, &qword_10007C1B8, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t *sub_10005546C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 2LL, v7);
    }
  }

  return a1;
}

uint64_t sub_100055534(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return result;
}

void *sub_10005559C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_100055640(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2LL, v6);
  int v10 = v8(a2, 2LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  return a1;
}

void *sub_100055730(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_1000557D4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2LL, v6);
  int v10 = v8(a2, 2LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t sub_1000558C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000558D0);
}

uint64_t sub_1000558D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10005591C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055928);
}

uint64_t sub_100055928(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_10005597C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 2LL, v2);
}

uint64_t sub_1000559B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 2LL, v4);
}

uint64_t sub_1000559F4(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 2LL);
    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for SystemNotificationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd25SystemNotificationManager);
}

uint64_t storeEnumTagSinglePayload for SystemNotificationManager.Constants(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100055AA8 + 4 * asc_100062A40[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100055AC8 + 4 * byte_100062A45[v4]))();
  }
}

_BYTE *sub_100055AA8(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_100055AC8(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100055AD0(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100055AD8(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100055AE0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100055AE8(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SystemNotificationManager.Constants()
{
  return &type metadata for SystemNotificationManager.Constants;
}

Swift::Int sub_100055B04()
{
  return Hasher._finalize()();
}

uint64_t sub_100055B60(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6C7070612E6D6F63LL, 0xEF6D72616C612E65LL);
}

Swift::Int sub_100055B84(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_100055BDC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_100003288(&qword_10007A9B0);
  uint64_t v5 = sub_100008C48(&qword_10007C380, &qword_10007A9B0, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_100055C60(uint64_t a1)
{
  uint64_t v2 = sub_100003288(&qword_10007A9B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100055CA0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100055CC4(uint64_t a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_100054218(a1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100055D34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_100003288(&qword_10007A9B0) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

const char *sub_100055E50(void *a1)
{
  return sub_100053C98(a1, v1);
}

const char *sub_100055E58(void *a1)
{
  return sub_100053948(a1, v1);
}

uint64_t sub_100055E80@<X0>(uint64_t a1@<X8>)
{
  return sub_100055214(a1);
}

uint64_t sub_100055E94()
{
  qword_1000805D8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain(qword_1000805D8);
}

uint64_t sub_100055EBC(uint64_t a1)
{
  return sub_100055F5C(a1, &qword_10007C588, &static Transaction.$current);
}

uint64_t *Transaction.$current.unsafeMutableAddressor()
{
  if (qword_1000805E0 != -1) {
    swift_once(&qword_1000805E0, sub_100055EBC);
  }
  return &static Transaction.$current;
}

uint64_t static Transaction.$current.getter()
{
  return sub_100056004(&qword_1000805E0, &static Transaction.$current);
}

uint64_t static Transaction.current.getter()
{
  return sub_100056058(&qword_1000805E0);
}

uint64_t sub_100055F48(uint64_t a1)
{
  return sub_100055F5C(a1, &qword_10007C580, &static Transaction.$currentNSXPCConnection);
}

uint64_t sub_100055F5C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = 0LL;
  uint64_t v4 = sub_100003288(a2);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = TaskLocal.init(wrappedValue:)(&v6);
  *a3 = result;
  return result;
}

uint64_t *Transaction.$currentNSXPCConnection.unsafeMutableAddressor()
{
  if (qword_1000805E8 != -1) {
    swift_once(&qword_1000805E8, sub_100055F48);
  }
  return &static Transaction.$currentNSXPCConnection;
}

uint64_t static Transaction.$currentNSXPCConnection.getter()
{
  return sub_100056004(qword_1000805E8, &static Transaction.$currentNSXPCConnection);
}

uint64_t sub_100056004(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_retain(*a2);
}

uint64_t static Transaction.currentNSXPCConnection.getter()
{
  return sub_100056058(qword_1000805E8);
}

uint64_t sub_100056058(void *a1)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  TaskLocal.get()(&v2);
  return v2;
}

uint64_t variable initialization expression of Transaction.underlyingTransaction()
{
  return 0LL;
}

uint64_t variable initialization expression of Transaction.activityState()
{
  return 0LL;
}

uint64_t static Transaction.asyncTask(name:block:)(char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100003288(&qword_10007BE60);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(v5, 64LL, 7LL);
  sub_100056714(a1, a2, a3);
  id v15 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = (void *)swift_allocObject(&unk_100074848, 64LL, 7LL);
  v17[2] = 0LL;
  v17[3] = 0LL;
  v17[4] = v14;
  v17[5] = v15;
  v17[6] = a4;
  v17[7] = a5;
  swift_retain(v14);
  swift_retain(a5);
  uint64_t v18 = sub_100056530((uint64_t)v13, (uint64_t)&unk_10007C3A0, (uint64_t)v17);
  swift_release(v14);
  return swift_release(v18);
}

uint64_t sub_100056200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  void v7[4] = a4;
  void v7[5] = a5;
  v7[3] = a1;
  return swift_task_switch(sub_100056220, 0LL, 0LL);
}

uint64_t sub_100056220()
{
  if (qword_1000805E0 != -1) {
    swift_once(&qword_1000805E0, sub_100055EBC);
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = swift_task_alloc(48LL);
  *(void *)(v0 + 64) = v3;
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  uint64_t v5 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
  swift_retain(v1);
  uint64_t v6 = (void *)swift_task_alloc(v5);
  *(void *)(v0 + 72) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100056328;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)( *(void *)(v0 + 24),  v0 + 16,  &unk_10007C568,  v3,  0LL,  0LL,  0xD000000000000020LL,  0x8000000100068BD0LL);
}

uint64_t sub_100056328()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 72));
  swift_task_dealloc(v2);
  swift_release(*(void *)(v1 + 16));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10005637C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  void v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_100056398, 0LL, 0LL);
}

uint64_t sub_100056398()
{
  if (qword_1000805E8[0] != -1) {
    swift_once(qword_1000805E8, sub_100055F48);
  }
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 32);
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1]);
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100056488;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)( *(void *)(v0 + 24),  v0 + 16,  &unk_10007C578,  v1,  0LL,  0LL,  0xD000000000000020LL,  0x8000000100068BD0LL);
}

uint64_t sub_100056488()
{
  uint64_t v1 = *(void *)(*v0 + 56);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000564DC(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  void *v3 = v2;
  v3[1] = sub_10004E080;
  return v5();
}

uint64_t sub_100056530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1000576BC(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_1000748F0, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10007C558, v16);
}

uint64_t static Transaction.named<A>(_:with:)(char *a1, uint64_t a2, int a3, void (*a4)(uint64_t))
{
  uint64_t v9 = swift_allocObject(v4, 64LL, 7LL);
  sub_100056714(a1, a2, a3);
  a4(v9);
  return swift_release(v9);
}

os_activity_scope_state_s *sub_100056714(char *a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unsigned __int8 v15 = &v61;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v18 = (char *)&v61 - v17;
  v4[3].opaque[0] = 0LL;
  v4[2].opaque[0] = 0LL;
  v4[3].opaque[1] = 0LL;
  uint64_t v64 = v8;
  uint64_t v65 = v11;
  uint64_t v66 = v9;
  int v63 = a3;
  uint64_t v62 = v14;
  if ((a3 & 1) != 0)
  {
    unint64_t v17 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v17) = a1 >> 11;
      LODWORD(v17) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if (a1 <= 0xFF)
        {
          unsigned int v21 = ((_BYTE)a1 + 1);
          goto LABEL_10;
        }

        __break(1u);
        goto LABEL_41;
      }

uint64_t sub_100056D04()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100056D40(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc(dword_10007C39C);
  __int128 v7 = *(_OWORD *)(v1 + 48);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_1000504CC;
  *(_OWORD *)(v6 + 48) = v7;
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + 4sub_10000DC70(0, 0) = v5;
  *(void *)(v6 + 24) = a1;
  return swift_task_switch(sub_100056220, 0LL, 0LL);
}

void *Transaction.deinit()
{
  return v0;
}

uint64_t sub_100056DE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v0[2].opaque[0])
  {
    uint64_t v7 = sub_1000301CC();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    uint64_t v8 = swift_retain_n(v0, 2LL);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.info.getter();
    int v11 = v10;
    if (os_log_type_enabled(v9, v10))
    {
      HIDWORD(v2sub_10000DC70(0, 0) = v11;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v21;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v23 = 0x3A4E58545BLL;
      unint64_t v24 = 0xE500000000000000LL;
      uint64_t v14 = v1[1].opaque[0];
      uint64_t v13 = (void *)v1[1].opaque[1];
      swift_retain(v1);
      v15._uint64_t countAndFlagsBits = v14;
      v15._object = v13;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = 93LL;
      v16._object = (void *)0xE100000000000000LL;
      String.append(_:)(v16);
      swift_release(v1);
      unint64_t v17 = v24;
      uint64_t v23 = sub_100003E68(v23, v24, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4, v12 + 12);
      swift_release_n(v1, 2LL);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v9, BYTE4(v20), "Closed %s", v12, 0xCu);
      uint64_t v18 = v21;
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v1, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_beginAccess(&v1[3], &v23, 33LL, 0LL);
    os_activity_scope_leave(v1 + 3);
    swift_endAccess(&v23);
    uint64_t v19 = v1[2].opaque[0];
    v1[2].opaque[0] = 0LL;
    return swift_unknownObjectRelease(v19);
  }

  return result;
}

uint64_t Transaction.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t static Transaction.named<A>(_:with:)( char *a1, uint64_t a2, int a3, void (*a4)(os_activity_scope_state_s *))
{
  uint64_t v9 = swift_allocObject(v4, 64LL, 7LL);
  os_log_type_t v10 = sub_100056714(a1, a2, a3);
  a4(v10);
  return swift_release(v9);
}

uint64_t static Transaction.named<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(_BYTE *)(v7 + 88) = a4;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 4sub_10000DC70(0, 0) = a5;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return swift_task_switch(sub_100057128, 0LL, 0LL);
}

uint64_t sub_100057128()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v3 = *(char **)(v0 + 24);
  int v4 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v5 = swift_allocObject(*(void *)(v0 + 56), 64LL, 7LL);
  *(void *)(v0 + 64) = v5;
  sub_100056714(v3, v1, v4);
  uint64_t v8 = (int *)((char *)v2 + *v2);
  uint64_t v6 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v0 + 72) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000571D0;
  return ((uint64_t (*)(void, uint64_t))v8)(*(void *)(v0 + 16), v5);
}

uint64_t sub_1000571D0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100057268;
  }
  else {
    uint64_t v3 = sub_100057234;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100057234()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057268()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Transaction.named<A>(_:with:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 4sub_10000DC70(0, 0) = a5;
  *(void *)(v8 + 48) = a6;
  *(_BYTE *)(v8 + 96) = a4;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_1000572C4, 0LL, 0LL);
}

uint64_t sub_1000572C4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 72) = v2;
  __int128 v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = swift_task_alloc(dword_10007C3AC);
  *(void *)(v0 + 8sub_10000DC70(0, 0) = v4;
  *(void *)uint64_t v4 = v0;
  *(void *)(v4 + 8) = sub_100057368;
  uint64_t v5 = *(void *)(v0 + 64);
  char v6 = *(_BYTE *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 16);
  __int128 v8 = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 4sub_10000DC70(0, 0) = &unk_10007C3C0;
  *(_BYTE *)(v4 + 88) = v6;
  *(_OWORD *)(v4 + 24) = v8;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v7;
  return swift_task_switch(sub_100057128, 0LL, 0LL);
}

uint64_t sub_100057368()
{
  uint64_t v2 = *(void *)(*v1 + 80);
  uint64_t v3 = *v1;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000573DC, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000573DC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057410(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000504CC;
  return v7(a1);
}

uint64_t sub_100057474(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc(dword_10007C3BC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000504CC;
  __int128 v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  char v6 = (void *)swift_task_alloc(v4[1]);
  v5[2] = v6;
  *char v6 = v5;
  v6[1] = sub_1000504CC;
  return v8(a1);
}

uint64_t Transaction.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v2);
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._uint64_t countAndFlagsBits = 93LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0x3A4E58545BLL;
}

uint64_t sub_100057570()
{
  return Transaction.description.getter();
}

uint64_t type metadata accessor for Transaction()
{
  return objc_opt_self(&OBJC_CLASS____TtC14bluetoothuserd11Transaction);
}

__n128 sub_1000575B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000575BC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000575DC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s()
{
  if (!qword_10007C540)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1000748C8);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007C540);
    }
  }

uint64_t sub_100057658(uint64_t a1, int *a2)
{
  char v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  Swift::String v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100057880;
  return v6(a1);
}

uint64_t sub_1000576BC(uint64_t a1)
{
  uint64_t v2 = sub_100003288(&qword_10007BE60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000576FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100057720(uint64_t a1)
{
  Swift::String v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10007C554);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100050C40;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10007C550 + dword_10007C550))(a1, v4);
}

uint64_t sub_100057790(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = swift_task_alloc(dword_10007C564);
  __int128 v6 = *(_OWORD *)(v1 + 24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100050C40;
  *(_OWORD *)(v5 + 4sub_10000DC70(0, 0) = v6;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = v4;
  return swift_task_switch(sub_100056398, 0LL, 0LL);
}

uint64_t sub_100057804()
{
  uint64_t v2 = *(int **)(v0 + 16);
  char v3 = (void *)swift_task_alloc(dword_10007C574);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100050C40;
  __int128 v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc(v2[1]);
  v3[2] = v4;
  void *v4 = v3;
  v4[1] = sub_10004E080;
  return v6();
}

void sub_100057884(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v123 = a4;
  sub_1000582F8((uint64_t)a1, (uint64_t)v148);
  unint64_t v114 = (void *)v148[1];
  uint64_t v115 = v148[0];
  uint64_t v112 = v148[3];
  Swift::Int v113 = v148[2];
  Swift::Int v110 = v148[5];
  uint64_t v111 = (void *)v148[4];
  Swift::Int v134 = v148[7];
  uint64_t v135 = v148[6];
  uint64_t v108 = (void *)v148[9];
  uint64_t v109 = v148[8];
  sub_1000582F8(a2, (uint64_t)v143);
  uint64_t v7 = (void *)v143[1];
  uint64_t v137 = v143[2];
  uint64_t v138 = v143[0];
  uint64_t v136 = v143[3];
  uint64_t v139 = v143[4];
  uint64_t v8 = v143[5];
  char v9 = v144;
  Swift::Int v10 = v145;
  uint64_t v11 = v146;
  uint64_t v12 = v147;
  uint64_t v106 = type metadata accessor for Logger(0LL);
  uint64_t v120 = *(void *)(v106 - 8);
  uint64_t v13 = __chkstk_darwin(v106);
  uint64_t v119 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v104 = (char *)&v102 - v16;
  uint64_t v126 = a3;
  uint64_t v124 = *(void *)(a3 - 8);
  __chkstk_darwin(v15);
  uint64_t v131 = (uint64_t)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v128 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v105 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v130 = (uint64_t)&v102 - v22;
  __chkstk_darwin(v21);
  uint64_t v122 = (uint64_t)&v102 - v23;
  uint64_t v24 = sub_100003288(&qword_10007B448);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v117 = (uint64_t)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v121 = (char *)&v102 - v27;
  id v118 = (id)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v129 = [v118 standardUserDefaults];
  sub_1000582F8((uint64_t)a1, (uint64_t)v170);
  uint64_t v116 = v18;
  if (v170[1])
  {
    sub_1000582F8(a2, (uint64_t)&v160);
    unint64_t v28 = v161;
    if (!v161)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000016LL,  0x8000000100068C80LL,  "bluetoothuserd/Daemon.swift",  27LL,  2LL,  36LL,  0);
      __break(1u);
      return;
    }

    uint64_t v29 = (uint64_t *)a2;
    uint64_t v137 = v162;
    uint64_t v138 = v160;
    uint64_t v136 = v163;
    uint64_t v139 = v164;
    Swift::Int v30 = v167;
    uint64_t v11 = v168;
    uint64_t v132 = v165;
    uint64_t v133 = v169;
    int v127 = v166 & 1;
    goto LABEL_6;
  }

  uint64_t v132 = v8;
  uint64_t v133 = v12;
  uint64_t v103 = (uint64_t *)a2;
  sub_1000582F8(a2, (uint64_t)&v160);
  if (v161)
  {
    int v127 = v9 & 1;
    Swift::Int v30 = v10;
    unint64_t v28 = v7;
    uint64_t v29 = v103;
LABEL_6:
    sub_100058CE0(a1);
    int v107 = 1;
    object = v114;
    uint64_t countAndFlagsBits = v115;
    uint64_t v34 = v112;
    Swift::Int baseNumber = v113;
    Swift::Int value = v110;
    uint64_t v35 = v111;
    Swift::Int buildNumber = v134;
    uint64_t v38 = v135;
    os_activity_t v40 = v108;
    uint64_t v39 = v109;
    goto LABEL_7;
  }

  Transaction.capture()();
  v94._uint64_t countAndFlagsBits = SystemInfo.buildVersion.getter();
  SystemVersionNumber.init(rawValue:)(&v141, v94);
  sub_1000582F8((uint64_t)&v141, (uint64_t)&v149);
  unint64_t v28 = v150;
  if (!v150)
  {

    return;
  }

  uint64_t v137 = v151;
  uint64_t v138 = v149;
  uint64_t v136 = v152;
  uint64_t v139 = v153;
  unsigned __int8 v95 = v155;
  unsigned __int8 v159 = v155;
  Swift::Int v30 = v156;
  uint64_t v11 = v157;
  uint64_t v132 = v154;
  uint64_t v133 = v158;
  NSString v96 = String._bridgeToObjectiveC()();
  id v97 = [v129 stringForKey:v96];

  if (!v97)
  {
    uint64_t v115 = v11;
    int v127 = v95 & 1;
    uint64_t v49 = v137;
    uint64_t v48 = v138;
    uint64_t v50 = v136;
    uint64_t v51 = v139;
    uint64_t v52 = v132;
    uint64_t v53 = v133;
    goto LABEL_15;
  }

  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
  uint64_t v100 = v99;

  v101._uint64_t countAndFlagsBits = v98;
  v101._object = v100;
  SystemVersionNumber.init(rawValue:)(&v142, v101);
  int v107 = 0;
  uint64_t countAndFlagsBits = v142.value.rawValue._countAndFlagsBits;
  object = v142.value.rawValue._object;
  Swift::Int baseNumber = v142.value.baseNumber;
  uint64_t v34 = v142.value.baseLetter._countAndFlagsBits;
  uint64_t v35 = v142.value.baseLetter._object;
  Swift::Int value = v142.value.childType.value;
  uint64_t v38 = *(void *)&v142.value.childType.is_nil;
  Swift::Int buildNumber = v142.value.buildNumber;
  uint64_t v39 = v142.value.suffix.value._countAndFlagsBits;
  os_activity_t v40 = v142.value.suffix.value._object;
  int v127 = v159;
  uint64_t v29 = v103;
LABEL_7:
  *(void *)&__int128 v181 = v138;
  *((void *)&v181 + 1) = v28;
  *(void *)&__int128 v182 = v137;
  *((void *)&v182 + 1) = v136;
  *(void *)&__int128 v183 = v139;
  *((void *)&v183 + 1) = v132;
  LOBYTE(v184) = v127;
  *((void *)&v184 + 1) = v30;
  *(void *)&__int128 v185 = v11;
  *((void *)&v185 + 1) = v133;
  uint64_t v115 = v11;
  if (object)
  {
    Swift::Int v113 = v30;
    unint64_t v114 = v28;
    *(void *)&__int128 v176 = countAndFlagsBits;
    *((void *)&v176 + 1) = object;
    *(void *)&__int128 v177 = baseNumber;
    *((void *)&v177 + 1) = v34;
    *(void *)&__int128 v178 = v35;
    *((void *)&v178 + 1) = value;
    LOBYTE(v179) = v38 & 1;
    *((void *)&v179 + 1) = buildNumber;
    *(void *)&__int128 v180 = v39;
    *((void *)&v180 + 1) = v40;
    __int128 v173 = v178;
    __int128 v174 = v179;
    __int128 v175 = v180;
    __int128 v171 = v176;
    __int128 v172 = v177;
    v140[2] = v183;
    v140[3] = v184;
    v140[4] = v185;
    v140[0] = v181;
    v140[1] = v182;
    uint64_t v41 = v29;
    uint64_t v42 = (uint64_t)object;
    uint64_t v43 = (uint64_t)v35;
    uint64_t v44 = value;
    Swift::Int v134 = buildNumber;
    uint64_t v135 = v38;
    uint64_t v45 = v39;
    uint64_t v46 = (uint64_t)v40;
    sub_100058CE0(v41);
    unint64_t v47 = sub_10000351C();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v171, v140, &type metadata for SystemVersionNumber, v47) & 1) == 0) {
      (*(void (**)(__int128 *, __int128 *, uint64_t))(v123 + 16))(&v176, &v181, v126);
    }
    sub_100058D64(countAndFlagsBits, v42, baseNumber, v34, v43, v44, v135, v134, v45, v46);
    uint64_t v49 = v137;
    uint64_t v48 = v138;
    uint64_t v50 = v136;
    Swift::Int v30 = v113;
    unint64_t v28 = v114;
  }

  else
  {
    sub_100058CE0(v29);
    uint64_t v49 = v137;
    uint64_t v48 = v138;
    uint64_t v50 = v136;
  }

  uint64_t v51 = v139;
  uint64_t v52 = v132;
  uint64_t v18 = v116;
  if ((v107 & 1) != 0)
  {
    swift_bridgeObjectRelease(v139);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v133);
    goto LABEL_16;
  }

  uint64_t v53 = v133;
LABEL_15:
  *(void *)&__int128 v171 = v48;
  *((void *)&v171 + 1) = v28;
  *(void *)&__int128 v172 = v49;
  *((void *)&v172 + 1) = v50;
  *(void *)&__int128 v173 = v51;
  *((void *)&v173 + 1) = v52;
  LOBYTE(v174) = v127;
  *((void *)&v174 + 1) = v30;
  *(void *)&__int128 v175 = v115;
  *((void *)&v175 + 1) = v53;
  SystemVersionNumber.description.getter();
  uint64_t v55 = v54;
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v53);
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v55);
  NSString v57 = String._bridgeToObjectiveC()();
  [v129 setValue:v56 forKey:v57];

LABEL_16:
  uint64_t v59 = (uint64_t)v121;
  uint64_t v58 = v122;
  uint64_t v60 = v126;
  sub_100058340(v122);
  id v61 = [v118 standardUserDefaults];
  NSString v62 = String._bridgeToObjectiveC()();
  id v63 = [v61 stringForKey:v62];

  if (v63)
  {
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    uint64_t v66 = v65;

    UUID.init(uuidString:)(v64, v66);
    swift_bridgeObjectRelease(v66);
    uint64_t v67 = v128;
  }

  else
  {
    uint64_t v67 = v128;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v59, 1LL, 1LL, v18);
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v130, v58, v18);
  uint64_t v68 = v124;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v131, v125, v60);
  uint64_t v69 = v117;
  sub_1000588EC(v59, v117);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v69, 1LL, v18) == 1)
  {
    sub_100058934(v69);
    uint64_t v70 = sub_10002FF10();
    uint64_t v71 = v120;
    uint64_t v72 = v106;
    uint64_t v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v70, v106);
    os_log_type_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      id v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "No lastLaunchBootSessionUUID on record", v76, 2u);
      id v77 = v76;
      uint64_t v68 = v124;
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v119, v72);
    uint64_t v79 = v130;
    uint64_t v78 = v131;
    sub_10005873C(v130, v131, v60, v123);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v78, v60);
    uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
    v80(v79, v18);
  }

  else
  {
    uint64_t v81 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v105, v69, v18);
    unint64_t v82 = sub_100058C98();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v81, v58, v18, v82) & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v131, v60);
      unint64_t v83 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v83(v130, v18);
      uint64_t v84 = sub_10002FF10();
      uint64_t v85 = v104;
      uint64_t v86 = v106;
      uint64_t v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 16))(v104, v84, v106);
      id v88 = (os_log_s *)Logger.logObject.getter(v87);
      os_log_type_t v89 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "This is *NOT* the first run since reboot", v90, 2u);
        swift_slowDealloc(v90, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v120 + 8))(v85, v86);
      v83((uint64_t)v105, v18);
      v83(v58, v18);
      goto LABEL_29;
    }

    uint64_t v91 = v67;
    uint64_t v93 = v130;
    uint64_t v92 = v131;
    sub_10005873C(v130, v131, v60, v123);

    uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v80((uint64_t)v81, v18);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v92, v60);
    v80(v93, v18);
  }

  v80(v58, v18);
LABEL_29:
  sub_100058934(v59);
}

uint64_t sub_1000582F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007A660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100003288(&qword_10007B448);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  size_t v32 = 37LL;
  uint64_t v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(37LL, &type metadata for Int8);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = 37LL;
  *(_OWORD *)(v12 + 48) = 0u;
  *(void *)(v12 + 61) = 0LL;
  *(_OWORD *)(v12 + 32) = 0u;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v12 + 32), &v32, 0LL, 0LL))
  {
    int v18 = ((uint64_t (*)(void))errno.getter)();
    if (!strerror(v18)) {
      __break(1u);
    }
    goto LABEL_10;
  }

  swift_bridgeObjectRetain(v12);
  static String.Encoding.ascii.getter(v13);
  uint64_t v14 = sub_100058974(v12, v11);
  if (!v15)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x8000000100068CC0LL,  "bluetoothuserd/Daemon.swift",  27LL,  2LL,  110LL,  0);
    goto LABEL_9;
  }

  uint64_t v16 = v15;
  UUID.init(uuidString:)(v14, v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(char **)(v2 - 8);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v5 + 6))(v8, 1LL, v2) == 1)
  {
    sub_100058934((uint64_t)v8);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x8000000100068CC0LL,  "bluetoothuserd/Daemon.swift",  27LL,  2LL,  114LL,  0);
    while (1)
    {
LABEL_9:
      __break(1u);
LABEL_10:
      uint64_t v20 = String.init(utf8String:)();
      unint64_t v21 = v19;
      if (v19) {
        unint64_t v22 = v19;
      }
      else {
        unint64_t v22 = 0xE700000000000000LL;
      }
      uint64_t v23 = sub_10002FF10();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v23, v2);
      swift_bridgeObjectRetain(v22);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        if (v21) {
          uint64_t v27 = v20;
        }
        else {
          uint64_t v27 = 0x6E776F6E6B6E55LL;
        }
        uint64_t v28 = swift_slowAlloc(18LL, -1LL);
        uint64_t v29 = swift_slowAlloc(32LL, -1LL);
        uint64_t v33 = v29;
        *(_DWORD *)uint64_t v28 = 136315394;
        swift_bridgeObjectRetain(v22);
        uint64_t v31 = sub_100003E68(v27, v22, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28 + 4, v28 + 12);
        uint64_t v30 = swift_bridgeObjectRelease_n(v22, 3LL);
        *(_WORD *)(v28 + 12) = 1024;
        LODWORD(v31) = errno.getter(v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4, v28 + 14, v28 + 18);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error from sysctlbyname: %s(%d", (uint8_t *)v28, 0x12u);
        swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1LL, -1LL);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v22, 2LL);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x8000000100068CC0LL,  "bluetoothuserd/Daemon.swift",  27LL,  2LL,  106LL,  0);
    }
  }

  swift_bridgeObjectRelease(v12);
  return (*((uint64_t (**)(uint64_t, char *, uint64_t))v5 + 4))(a1, v8, v2);
}

uint64_t sub_10005873C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10002FF10();
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "This is the first run since reboot", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v15 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  UUID.uuidString.getter(v15);
  uint64_t v17 = v16;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  NSString v19 = String._bridgeToObjectiveC()();
  [v15 setObject:v18 forKey:v19];

  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
}

uint64_t sub_1000588EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007B448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058934(uint64_t a1)
{
  uint64_t v2 = sub_100003288(&qword_10007B448);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100058974(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v30 - v10;
  static String.Encoding.utf8.getter(v9);
  char v12 = static String.Encoding.== infix(_:_:)(a2, v11);
  os_log_type_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, v4);
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v8, a2, v4);
  if ((v12 & 1) != 0)
  {
    v13(v8, v4);
    goto LABEL_4;
  }

  static String.Encoding.ascii.getter(v14);
  char v15 = static String.Encoding.== infix(_:_:)(v8, v11);
  v13(v11, v4);
  v13(v8, v4);
  if ((v15 & 1) != 0)
  {
LABEL_4:
    uint64_t v16 = sub_100058DA0(0, a1);
    if ((v17 & 1) == 0)
    {
      if ((v16 & 0x8000000000000000LL) == 0)
      {
        uint64_t v18 = *(void *)(a1 + 16);
        if (v18 >= v16) {
          uint64_t v18 = v16;
        }
        if (v16) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0LL;
        }
        __n128 v20 = swift_bridgeObjectRetain(a1);
        uint64_t v21 = static String._tryFromUTF8(_:)(a1 + 32, v19, v20);
        uint64_t v23 = v22;
        uint64_t v24 = swift_unknownObjectRelease(a1);
        if (v23)
        {
          static String.Encoding.utf8.getter(v24);
          char v25 = static String.Encoding.== infix(_:_:)(a2, v11);
          v13(v11, v4);
          if ((v25 & 1) != 0 || (_StringGuts._isContiguousASCII.getter(v21, v23) & 1) != 0)
          {
            swift_bridgeObjectRelease(a1);
LABEL_20:
            v13(a2, v4);
            return v21;
          }

          swift_bridgeObjectRelease(v23);
        }

        goto LABEL_16;
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_23;
  }

LABEL_23:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003FLL,  0x8000000100068D50LL,  "Foundation/arm64-apple-tvos.private.swiftinterface",  50LL,  2LL,  11704LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100058C0C()
{
  uint64_t v0 = String.utf8CString.getter();
  int v1 = _set_user_dir_suffix(v0 + 32);
  uint64_t result = swift_release(v0);
  if (!v1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ELL,  0x8000000100068CF0LL,  "bluetoothuserd/Daemon.swift",  27LL,  2LL,  161LL,  0);
    __break(1u);
  }

  return result;
}

unint64_t sub_100058C98()
{
  unint64_t result = qword_10007C590;
  if (!qword_10007C590)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10007C590);
  }

  return result;
}

uint64_t *sub_100058CE0(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100058D28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a5);
  }

  return result;
}

uint64_t sub_100058D64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a10);
  }

  return result;
}

uint64_t sub_100058DA0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = v2 - 2;
  while (v5 != v4)
  {
    int v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1) {
      return v4 + 1;
    }
  }

  return 0LL;
}

char *sub_100058E28()
{
  return &byte_1000808D8;
}

id sub_100058E34()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }

  else
  {
    id v3 = [objc_allocWithZone(ACAccountStore) init];
    uint64_t v4 = *(void **)(v0 + 48);
    *(void *)(v0 + 48) = v3;
    id v2 = v3;

    uint64_t v1 = 0LL;
  }

  id v5 = v1;
  return v2;
}

void (*sub_100058E9C(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100058E34();
  return sub_10000C2CC;
}

uint64_t sub_100058ED0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 56);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for KeyValueStoreManager();
    uint64_t v2 = sub_10000CABC();
    (*(void (**)(id))(*(void *)v2 + 128LL))(*(id *)(v3 + 16));
    uint64_t v4 = *(void *)(v3 + 56);
    *(void *)(v3 + 56) = v2;
    swift_retain(v2);
    swift_release(v4);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

uint64_t sub_100058F4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = a1;
  return swift_release(v2);
}

uint64_t (*sub_100058F5C(uint64_t *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100058ED0();
  return sub_100058F90;
}

uint64_t sub_100058F90(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = v2;
  return swift_release(v3);
}

void sub_100058FA0()
{
  if (*(_BYTE *)(v0 + 64) == 1)
  {
    Transaction.capture()();
    *(_BYTE *)(v0 + 64) = 0;
  }

void sub_100058FC4()
{
  *(_BYTE *)(v0 + 64) = 0;
}

uint64_t (*sub_100058FCC(void *a1))(uint64_t result)
{
  *a1 = v1;
  sub_100058FA0();
  return sub_100058FEC;
}

uint64_t sub_100058FEC(uint64_t result)
{
  *(_BYTE *)(*(void *)result + 64LL) = 0;
  return result;
}

id sub_100058FF8()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    id v2 = *(id *)(v0 + 72);
  }

  else
  {
    id v3 = [objc_allocWithZone(CUSystemMonitor) init];
    [v3 setDispatchQueue:*(void *)(v0 + 16)];
    char v15 = sub_10005C890;
    uint64_t v16 = v0;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256LL;
    os_log_type_t v13 = sub_100005A3C;
    uint64_t v14 = &unk_100074A38;
    uint64_t v4 = _Block_copy(&v11);
    uint64_t v5 = v16;
    swift_retain(v0);
    swift_release(v5);
    [v3 setFirstUnlockHandler:v4];
    _Block_release(v4);
    char v15 = sub_10005C890;
    uint64_t v16 = v0;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256LL;
    os_log_type_t v13 = sub_100005A3C;
    uint64_t v14 = &unk_100074A60;
    int v6 = _Block_copy(&v11);
    uint64_t v7 = v16;
    swift_retain(v0);
    swift_release(v7);
    [v3 activateWithCompletion:v6];
    _Block_release(v6);
    uint64_t v8 = *(void **)(v0 + 72);
    *(void *)(v0 + 72) = v3;
    id v2 = v3;

    uint64_t v1 = 0LL;
  }

  id v9 = v1;
  return v2;
}

void sub_10005915C(uint64_t a1)
{
  id v2 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = a1;
}

void (*sub_100059168(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100058FF8();
  return sub_10005919C;
}

void sub_10005919C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = v2;
}

id sub_1000591AC()
{
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
    id v2 = *(id *)(v0 + 80);
  }

  else
  {
    id v3 = [objc_allocWithZone(CUSystemMonitor) init];
    [v3 setDispatchQueue:*(void *)(v0 + 16)];
    char v15 = sub_10005C928;
    uint64_t v16 = v0;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256LL;
    os_log_type_t v13 = sub_100005A3C;
    uint64_t v14 = &unk_1000749E8;
    uint64_t v4 = _Block_copy(&v11);
    uint64_t v5 = v16;
    swift_retain(v0);
    swift_release(v5);
    [v3 setPrimaryAppleIDChangedHandler:v4];
    _Block_release(v4);
    char v15 = sub_10005C88C;
    uint64_t v16 = v0;
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 1107296256LL;
    os_log_type_t v13 = sub_100005A3C;
    uint64_t v14 = &unk_100074A10;
    int v6 = _Block_copy(&v11);
    uint64_t v7 = v16;
    swift_retain(v0);
    swift_release(v7);
    [v3 activateWithCompletion:v6];
    _Block_release(v6);
    uint64_t v8 = *(void **)(v0 + 80);
    *(void *)(v0 + 8sub_10000DC70(0, 0) = v3;
    id v2 = v3;

    uint64_t v1 = 0LL;
  }

  id v9 = v1;
  return v2;
}

void sub_100059310(uint64_t a1)
{
  id v2 = *(void **)(v1 + 80);
  *(void *)(v1 + 8sub_10000DC70(0, 0) = a1;
}

void (*sub_10005931C(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_1000591AC();
  return sub_100059350;
}

void sub_100059350(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 80);
  *(void *)(v1 + 8sub_10000DC70(0, 0) = v2;
}

uint64_t sub_100059360()
{
  id v0 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v1 = [v0 environment];

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_100027E38(0xD000000000000010LL, 0x8000000100069120LL), (v4 & 1) != 0))
  {
    uint64_t v5 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v3);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    swift_bridgeObjectRetain(v6);
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease(v2);
  qword_1000808E0 = v7;
  qword_1000808E8 = v6;
  return result;
}

uint64_t sub_100059440(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_10005947C(a1);
  return v3;
}

uint64_t sub_10005947C(uint64_t a1)
{
  *(void *)(v1 + 56) = 0LL;
  *(_OWORD *)(v1 + 4sub_10000DC70(0, 0) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_BYTE *)(v1 + 64) = 1;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 99) = 0u;
  uint64_t v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  uint64_t v4 = sub_100003288(&qword_10007AAE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler) = 0LL;
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer) = 0LL;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return v1;
}

Swift::UInt64 sub_100059518()
{
  uint64_t v1 = (_OWORD *)v0;
  uint64_t v2 = type metadata accessor for DefaultStringInterpolation.PrintUtilsTimeDuration(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = 0LL;
  unint64_t v36 = 0xE000000000000000LL;
  Swift::UInt64 v6 = UpTicks()();
  Swift::UInt64 v7 = *(void *)(v0 + 24);
  BOOL v8 = v6 >= v7;
  Swift::UInt64 result = v6 - v7;
  if (v8)
  {
    Swift::UInt64 v10 = UpTicksToSeconds(_:)(result);
    v34._uint64_t countAndFlagsBits = 0LL;
    v34._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    v11._object = (void *)0x8000000100068D90LL;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v11);
    *(void *)&__int128 v33 = v10;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for DefaultStringInterpolation.PrintUtilsTimeDuration.duration(_:),  v2);
    unint64_t v12 = sub_1000597E4();
    DefaultStringInterpolation.appendInterpolation<A>(_:_:)(&v33, v5, &type metadata for UInt64, v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t countAndFlagsBits = v34._countAndFlagsBits;
    object = v34._object;
    uint64_t v15 = swift_bridgeObjectRelease(v36);
    uint64_t v35 = countAndFlagsBits;
    unint64_t v36 = (unint64_t)object;
    if (IsAppleInternalBuild(v15))
    {
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      v16._uint64_t countAndFlagsBits = 0x20656C707041202CLL;
      v16._object = (void *)0xEC000000203A4449LL;
      String.append(_:)(v16);
      __int128 v33 = v1[2];
      DefaultStringInterpolation.appendInterpolation<A>(_:)( &v33,  &type metadata for String,  &protocol witness table for String);
      char v17 = v34._object;
      String.append(_:)(v34);
      swift_bridgeObjectRelease(v17);
    }

    v18._uint64_t countAndFlagsBits = 10LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    v34._uint64_t countAndFlagsBits = 0LL;
    v34._object = (void *)0xE000000000000000LL;
    uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v1 + 440LL))();
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v19 + 136LL))();
      uint64_t v23 = v22;
      swift_release(v20);
    }

    else
    {
      uint64_t v21 = 0LL;
      uint64_t v23 = 0LL;
    }

    *(void *)&__int128 v33 = v21;
    *((void *)&v33 + 1) = v23;
    DefaultStringInterpolation.appendInterpolation<A>(_:)( &v33,  &type metadata for String,  &protocol witness table for String);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v24);
    v25._uint64_t countAndFlagsBits = 10LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    v34._uint64_t countAndFlagsBits = 0LL;
    v34._object = (void *)0xE000000000000000LL;
    uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v1 + 480LL))();
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v26 + 104LL))();
      uint64_t v30 = v29;
      swift_release(v27);
    }

    else
    {
      uint64_t v28 = 0LL;
      uint64_t v30 = 0LL;
    }

    *(void *)&__int128 v33 = v28;
    *((void *)&v33 + 1) = v30;
    DefaultStringInterpolation.appendInterpolation<A>(_:)( &v33,  &type metadata for String,  &protocol witness table for String);
    swift_bridgeObjectRelease(v30);
    uint64_t v31 = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v31);
    v32._uint64_t countAndFlagsBits = 10LL;
    v32._object = (void *)0xE100000000000000LL;
    String.append(_:)(v32);
    return v35;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_1000597E4()
{
  unint64_t result = qword_10007C598;
  if (!qword_10007C598)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_10007C598);
  }

  return result;
}

uint64_t sub_100059828()
{
  return static Transaction.named<A>(_:with:)( "com.apple.bluetoothuser.activate",  32LL,  2,  (void (*)(uint64_t))sub_100059A50);
}

uint64_t sub_100059890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::UInt64 v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_allocObject(&unk_1000749A8, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  aBlock[4] = sub_10005C884;
  uint64_t v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_1000749C0;
  os_log_type_t v13 = _Block_copy(aBlock);
  swift_retain(a1);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v20 = _swiftEmptyArrayStorage;
  unint64_t v15 = sub_1000444DC();
  uint64_t v16 = sub_100003288((uint64_t *)&unk_10007A860);
  unint64_t v17 = sub_100006480();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v22);
}

uint64_t sub_100059A50(uint64_t a1)
{
  return sub_100059890(a1, v1);
}

uint64_t sub_100059A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  uint64_t v7 = sub_10002FF10();
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    Swift::String v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)Swift::String v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Activate", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 408LL))(v12);
}

uint64_t sub_100059B98()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  if (!*(void *)(v1 + 24)) {
    *(void *)(v1 + 24) = UpTicks()();
  }
  if (qword_100080670 != -1) {
    swift_once(&qword_100080670, sub_100059360);
  }
  __n128 v9 = swift_beginAccess(&qword_1000808E0, v35, 0LL, 0LL);
  unint64_t v10 = qword_1000808E8;
  if (qword_1000808E8)
  {
    uint64_t v11 = qword_1000808E0;
    swift_bridgeObjectRetain(qword_1000808E8);
    uint64_t v12 = sub_10002FF10();
    Swift::String v32 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32(v8, v12, v2);
    swift_bridgeObjectRetain(v10);
    uint64_t v14 = Logger.logObject.getter(v13);
    uint64_t v31 = v2;
    unint64_t v15 = (os_log_s *)v14;
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v29 = v12;
      uint64_t v17 = swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = v1;
      Swift::String v18 = (uint8_t *)v17;
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v3;
      uint64_t v20 = v19;
      uint64_t v34 = v19;
      *(_DWORD *)Swift::String v18 = 136315138;
      swift_bridgeObjectRetain(v10);
      uint64_t v33 = sub_100003E68(v11, v10, &v34);
      uint64_t v12 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(v10, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Launching bluetoothuserd (%s)", v18, 0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      uint64_t v21 = *(void (**)(char *, uint64_t))(v28 + 8);
    }

    else
    {

      swift_bridgeObjectRelease_n(v10, 2LL);
      uint64_t v21 = *(void (**)(char *, uint64_t))(v3 + 8);
    }

    uint64_t v22 = v31;
    v21(v8, v31);
    uint64_t v23 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v6, v12, v22);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Activate bluetoothuserd services", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    v21(v6, v22);
    sub_10005B390();
    return notify_post("com.apple.bluetoothuser.daemonStarted");
  }

  else
  {
    uint64_t result = fatalError(_:file:line:)( sub_100059ED8,  0LL,  "bluetoothuserd/BluetoothUserDaemon.swift",  40LL,  2LL,  104LL,  v9);
    __break(1u);
  }

  return result;
}

unint64_t sub_100059ED8()
{
  return 0xD000000000000027LL;
}

uint64_t sub_100059EF4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  aBlock[4] = sub_10005C2CC;
  uint64_t v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005A3C;
  void aBlock[3] = &unk_100074918;
  __n128 v9 = _Block_copy(aBlock);
  swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  os_log_type_t v16 = _swiftEmptyArrayStorage;
  unint64_t v11 = sub_1000444DC();
  uint64_t v12 = sub_100003288((uint64_t *)&unk_10007A860);
  unint64_t v13 = sub_100006480();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_10005A08C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10002FF10();
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Invalidate", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_10005A198();
}

uint64_t sub_10005A198()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100003288(&qword_10007C5A0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_100003288(&qword_10007AAE0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = sub_10005ACF0();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 440LL))(v13);
  if (v14)
  {
    uint64_t v15 = v14;
    (*(void (**)(uint64_t))(*(void *)v14 + 320LL))(v14);
    swift_release(v15);
  }

  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v1 + 448LL))(0LL);
  (*(void (**)(uint64_t))(*(void *)v1 + 552LL))(v16);
  if (*(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler)) {
    os_state_remove_handler();
  }
  uint64_t v17 = v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  swift_beginAccess( v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription,  v32,  0LL,  0LL);
  sub_10005C7C8(v17, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    uint64_t v18 = &qword_10007C5A0;
    uint64_t v19 = (uint64_t)v8;
  }

  else
  {
    uint64_t v20 = sub_100003420((uint64_t)v8, (uint64_t)v12, &qword_10007AAE0);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 288LL))(v20);
    sub_10000CF78((uint64_t)v12);
    swift_release(v21);
    uint64_t v19 = (uint64_t)v12;
    uint64_t v18 = &qword_10007AAE0;
  }

  sub_10000B4A8(v19, v18);
  uint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer);
  if (v22)
  {
    uint64_t v23 = *(void (**)(void))((swift_isaMask & *v22) + 0xE8LL);
    uint64_t v24 = v22;
    v23();
  }

  uint64_t v25 = sub_10002FF10();
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v25, v2);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalidated", v29, 2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10005A458()
{
  return swift_retain(*(void *)(v0 + 88));
}

uint64_t sub_10005A48C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10005A4D0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

void sub_10005A50C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v60[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v60[-v8];
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*v0 + 360LL))(v7);
  id v11 = [v10 primaryAppleID];

  if (!v11)
  {
    uint64_t v19 = v1 + 5;
    uint64_t v18 = v1[5];
    uint64_t v17 = v1 + 4;
LABEL_11:
    if (!v18) {
      return;
    }
    goto LABEL_14;
  }

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v15 = v14;

  uint64_t v17 = v1 + 4;
  uint64_t v16 = v1[4];
  uint64_t v19 = v1 + 5;
  uint64_t v18 = v1[5];
  if (!v15) {
    goto LABEL_11;
  }
  if (!v18)
  {
    uint64_t v12 = swift_bridgeObjectRelease(v15);
LABEL_14:
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t))(*v1 + 264LL))(v12);
    id v66 = objc_msgSend(v22, "aa_primaryAppleAccount");

    if (!v66) {
      return;
    }
    id v23 = objc_msgSend(v66, "aa_altDSID");
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      unint64_t v27 = v26;

      id v28 = [v66 username];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        unint64_t v65 = v30;

        uint64_t v31 = (*(uint64_t (**)(void))(*v1 + 440LL))();
        if (!v31) {
          goto LABEL_26;
        }
        uint64_t v32 = v31;
        uint64_t v62 = v3;
        uint64_t v63 = v2;
        uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 208LL))(v31);
        unint64_t v34 = v27;
        uint64_t v36 = v35;
        swift_release(v32);
        if (v33 == v25 && v36 == v34)
        {

          swift_bridgeObjectRelease(v65);
          swift_bridgeObjectRelease_n(v34, 2LL);
          return;
        }

        int v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v36, v25, v34, 0LL);
        swift_bridgeObjectRelease(v36);
        unint64_t v27 = v34;
        uint64_t v3 = v62;
        uint64_t v2 = v63;
        if ((v61 & 1) != 0)
        {

          swift_bridgeObjectRelease(v27);
          swift_bridgeObjectRelease(v65);
        }

        else
        {
LABEL_26:
          unint64_t v37 = *v19;
          *uint64_t v17 = v64;
          unint64_t v38 = v65;
          *uint64_t v19 = v65;
          unint64_t v39 = v38;
          swift_bridgeObjectRetain(v38);
          uint64_t v40 = swift_bridgeObjectRelease(v37);
          if (IsAppleInternalBuild(v40))
          {
            uint64_t v41 = sub_10002FF10();
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v9, v41, v2);
            swift_bridgeObjectRetain_n(v27, 2LL);
            swift_bridgeObjectRetain(v39);
            uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
            os_log_type_t v44 = static os_log_type_t.default.getter();
            int v45 = v44;
            if (os_log_type_enabled(v43, v44))
            {
              uint64_t v46 = swift_slowAlloc(22LL, -1LL);
              int v61 = v45;
              uint64_t v47 = v46;
              uint64_t v62 = swift_slowAlloc(64LL, -1LL);
              uint64_t v68 = v62;
              *(_DWORD *)uint64_t v47 = 136315394;
              swift_bridgeObjectRetain(v39);
              uint64_t v67 = sub_100003E68(v64, v39, &v68);
              uint64_t v63 = v2;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 4, v47 + 12);
              swift_bridgeObjectRelease_n(v39, 3LL);
              *(_WORD *)(v47 + 12) = 2080;
              swift_bridgeObjectRetain(v27);
              uint64_t v67 = sub_100003E68(v25, v27, &v68);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 14, v47 + 22);
              swift_bridgeObjectRelease_n(v27, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v61,  "Apple Account %s) updated for %s",  (uint8_t *)v47,  0x16u);
              uint64_t v48 = v62;
              swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v48, -1LL, -1LL);
              swift_slowDealloc(v47, -1LL, -1LL);

              (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v63);
            }

            else
            {

              swift_bridgeObjectRelease_n(v27, 2LL);
              swift_bridgeObjectRelease_n(v39, 2LL);
              (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
            }
          }

          else
          {
            swift_bridgeObjectRelease(v39);
            uint64_t v49 = sub_10002FF10();
            uint64_t v50 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v6, v49, v2);
            uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
            os_log_type_t v52 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v51, v52))
            {
              unint64_t v53 = v27;
              uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v54 = 0;
              _os_log_impl((void *)&_mh_execute_header, v51, v52, "Apple Account found", v54, 2u);
              uint64_t v55 = v54;
              unint64_t v27 = v53;
              swift_slowDealloc(v55, -1LL, -1LL);
            }

            (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
          }

          type metadata accessor for CloudPairingManager(0LL);
          uint64_t v56 = sub_10004048C(v25, v27);
          NSString v57 = *(uint64_t (**)(__n128))(*v1 + 448LL);
          __n128 v58 = swift_retain(v56);
          uint64_t v59 = v57(v58);
          (*(void (**)(uint64_t))(*(void *)v56 + 312LL))(v59);

          swift_release(v56);
        }
      }

      else
      {

        swift_bridgeObjectRelease(v27);
      }
    }

    else
    {
    }

    return;
  }

  if (v13 == v16 && v18 == v15)
  {
    swift_bridgeObjectRelease(v15);
    return;
  }

  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v18, 0LL);
  uint64_t v12 = swift_bridgeObjectRelease(v15);
  if ((v21 & 1) == 0) {
    goto LABEL_14;
  }
}

uint64_t sub_10005AAD8()
{
  return swift_retain(*(void *)(v0 + 96));
}

uint64_t sub_10005AB0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10005AB50(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10005AB8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 480LL))(v4);
  uint64_t result = swift_release(v7);
  if (!v7)
  {
    uint64_t v9 = sub_10002FF10();
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    id v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Debug manager started", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    type metadata accessor for DebugManager(0LL);
    uint64_t v14 = sub_10000A644();
    (*(void (**)(void))(*(void *)v14 + 184LL))();
    uint64_t v15 = *(void (**)(__n128))(*(void *)v1 + 488LL);
    __n128 v16 = swift_retain(v14);
    v15(v16);
    return swift_release(v14);
  }

  return result;
}

uint64_t sub_10005ACF0()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 480LL))(v3);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = sub_10002FF10();
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v8, v1);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Debug manager stopped", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    (*(void (**)(uint64_t))(*(void *)v7 + 192LL))(v13);
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_10005AE20()
{
  return swift_retain(*(void *)(v0 + 104));
}

uint64_t sub_10005AE54(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 104);
  *(void *)(v1 + 104) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10005AE98(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10005AED4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 520LL))(v4);
  uint64_t result = swift_release(v7);
  if (!v7)
  {
    uint64_t v9 = sub_10002FF10();
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Intelligence manager started", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    type metadata accessor for IntelligenceManager();
    uint64_t v14 = sub_100051BC8();
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 528LL))(v14);
  }

  return result;
}

uint64_t sub_10005B014()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 520LL))(v4);
  swift_release(v7);
  if (v7)
  {
    uint64_t v8 = sub_10002FF10();
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Intelligence manager stopped", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  return (*(uint64_t (**)(void))(*(void *)v1 + 528LL))(0LL);
}

uint64_t sub_10005B148()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003288(&qword_10007C5A0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v24 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  swift_beginAccess( v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription,  v25,  0LL,  0LL);
  sub_10005C7C8(v11, (uint64_t)v10);
  uint64_t v12 = sub_100003288(&qword_10007AAE0);
  uint64_t v13 = *(void *)(v12 - 8);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1LL, v12);
  uint64_t v15 = sub_10000B4A8((uint64_t)v10, &qword_10007C5A0);
  __n128 v16 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 288LL);
  uint64_t v17 = v16(v15);
  uint64_t v18 = v17;
  if (v14 == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 216LL))(v17);
    uint64_t v19 = swift_release(v18);
    uint64_t v20 = v16(v19);
    void v24[3] = type metadata accessor for BluetoothUserDaemon(0LL);
    v24[4] = &off_100074960;
    v24[0] = v1;
    swift_retain(v1);
    sub_10000CD7C((uint64_t)v24);
    swift_release(v20);
    sub_10000467C(v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0LL, 1LL, v12);
    sub_100003420((uint64_t)v8, (uint64_t)v5, &qword_10007C5A0);
    swift_beginAccess(v11, v24, 33LL, 0LL);
    sub_10005C810((uint64_t)v5, v11);
    return swift_endAccess(v24);
  }

  else
  {
    uint64_t v22 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
    id v23 = [v22 primaryAppleID];

    if (v23) {
    (*(void (**)(BOOL))(*(void *)v18 + 224LL))(v23 != 0LL);
    }
    return swift_release(v18);
  }

void sub_10005B390()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v37[-v8 - 8];
  __chkstk_darwin(v7);
  uint64_t v11 = &v37[-v10 - 8];
  int v12 = v0[112];
  unsigned __int8 v45 = v0[112];
  sub_10000D4E0(2LL, 3);
  if (v42 == 2)
  {
    uint64_t v13 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 336LL))();
    int v14 = [v13 firstUnlocked];
  }

  else
  {
    int v14 = v42 & 1;
  }

  unsigned __int8 v44 = v14;
  if (v12 != v14)
  {
    uint64_t v15 = sub_10002FF10();
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, v15, v2);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v19 = 67109376;
      swift_beginAccess(&v45, v38, 0LL, 0LL);
      int v42 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v19 + 4, v19 + 8);
      *(_WORD *)(v19 + 8) = 1024;
      swift_beginAccess(&v44, v37, 0LL, 0LL);
      int v42 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v19 + 10, v19 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Cloud Pairing Manager Enabled: %{BOOL}d -> %{BOOL}d",  (uint8_t *)v19,  0xEu);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    swift_beginAccess(&v44, &v42, 0LL, 0LL);
    v1[112] = v44;
  }

  int v20 = v1[113];
  swift_beginAccess(&v45, v41, 1LL, 0LL);
  unsigned __int8 v45 = v20;
  sub_10000D4E0(2LL, 4);
  if (v40[0] == 2)
  {
    char v21 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 336LL))();
    int v22 = [v21 firstUnlocked];
  }

  else
  {
    int v22 = v40[0] & 1;
  }

  swift_beginAccess(&v44, v40, 1LL, 0LL);
  unsigned __int8 v44 = v22;
  if (v20 != v22)
  {
    uint64_t v23 = sub_10002FF10();
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v23, v2);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v27 = 67109376;
      int v39 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v27 + 4, v27 + 8);
      *(_WORD *)(v27 + 8) = 1024;
      int v39 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v27 + 10, v27 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Debug Manager Enabled: %{BOOL}d -> %{BOOL}d",  (uint8_t *)v27,  0xEu);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v1[113] = v44;
  }

  int v28 = v1[114];
  unsigned __int8 v45 = v1[114];
  sub_10000D4E0(2LL, 5);
  if (v39 == 2)
  {
    uint64_t v29 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 336LL))();
    int v30 = [v29 firstUnlocked];
  }

  else
  {
    int v30 = v39 & 1;
  }

  unsigned __int8 v44 = v30;
  if (v28 != v30)
  {
    uint64_t v31 = sub_10002FF10();
    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v31, v2);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v35 = 67109376;
      int v39 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v35 + 4, v35 + 8);
      *(_WORD *)(v35 + 8) = 1024;
      int v39 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v35 + 10, v35 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Intelligence Manager Enabled: %{BOOL}d -> %{BOOL}d",  (uint8_t *)v35,  0xEu);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v1[114] = v44;
  }

  sub_10005B8B0();
}

void sub_10005B8B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 336LL))(v4);
  unsigned int v8 = [v7 firstUnlocked];

  if (v8)
  {
    uint64_t v9 = (id *)sub_1000066A0();
    uint64_t v10 = *(void (**)(void))((swift_isaMask & *(void *)*v9) + 0xD8LL);
    id v11 = *v9;
    v10();

    if (*(_BYTE *)(v1 + 112) == 1)
    {
      sub_10005A50C();
    }

    else
    {
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v1 + 440LL))();
      if (v17)
      {
        uint64_t v18 = v17;
        (*(void (**)(uint64_t))(*(void *)v17 + 320LL))(v17);
        swift_release(v18);
      }

      (*(void (**)(void))(*(void *)v1 + 448LL))(0LL);
    }

    if (*(_BYTE *)(v1 + 113) == 1) {
      uint64_t v19 = sub_10005AB8C();
    }
    else {
      uint64_t v19 = sub_10005ACF0();
    }
    uint64_t v20 = 552LL;
    if (*(_BYTE *)(v1 + 114)) {
      uint64_t v20 = 544LL;
    }
    (*(void (**)(uint64_t))(*(void *)v1 + v20))(v19);
    uint64_t v21 = OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler;
    if (!*(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler))
    {
      uint64_t v22 = *(void *)(v1 + 16);
      aBlock[4] = sub_10005C4E4;
      uint64_t v33 = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10005BBAC;
      void aBlock[3] = &unk_100074970;
      uint64_t v23 = _Block_copy(aBlock);
      uint64_t v24 = v33;
      swift_retain(v1);
      swift_release(v24);
      uint64_t v25 = os_state_add_handler(v22, v23);
      _Block_release(v23);
      *(void *)(v1 + v21) = v25;
    }

    sub_10005B148();
    uint64_t v26 = OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer;
    if (!*(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer))
    {
      type metadata accessor for BluetoothUserXPCServer();
      uint64_t v27 = sub_10004C794((uint64_t)*(id *)(v1 + 16));
      int v28 = *(void (**)(__n128))((swift_isaMask & *v27) + 0x78LL);
      __n128 v29 = swift_retain(v1);
      v28(v29);
      int v30 = *(void **)(v1 + v26);
      *(void *)(v1 + v26) = v27;
      uint64_t v31 = v27;

      (*(void (**)(void))((swift_isaMask & *v31) + 0xD8LL))();
    }
  }

  else
  {
    uint64_t v12 = sub_10002FF10();
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v12, v2);
    int v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Bluetooth User Daemon waiting for first unlock...", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

uint64_t sub_10005BBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_10005BBF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unsigned int v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v35 - v9;
  char v11 = static SystemVersionNumber.< infix(_:_:)(a1, a2);
  uint64_t v12 = sub_10002FF10();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  if ((v11 & 1) != 0)
  {
    v13(v10, v12, v4);
    sub_10005C2EC(a1);
    int v14 = sub_10005C2EC(a2);
    os_log_type_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v38 = v35;
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v36 = v4;
      uint64_t v19 = *a1;
      unint64_t v18 = a1[1];
      swift_bridgeObjectRetain(v18);
      uint64_t v37 = sub_100003E68(v19, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v18);
      sub_10005C334(a1);
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v20 = *a2;
      unint64_t v21 = a2[1];
      swift_bridgeObjectRetain(v21);
      uint64_t v37 = sub_100003E68(v20, v21, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v21);
      sub_10005C334(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Migrating from %s to %s", (uint8_t *)v17, 0x16u);
      uint64_t v22 = v35;
      swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v36);
    }

    sub_10005C334(a1);
    sub_10005C334(a2);

    uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    os_log_type_t v34 = v10;
  }

  else
  {
    v13(v8, v12, v4);
    sub_10005C2EC(a1);
    uint64_t v24 = sub_10005C2EC(a2);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v38 = v35;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v36 = v4;
      uint64_t v29 = *a1;
      unint64_t v28 = a1[1];
      swift_bridgeObjectRetain(v28);
      uint64_t v37 = sub_100003E68(v29, v28, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v28);
      sub_10005C334(a1);
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v30 = *a2;
      unint64_t v31 = a2[1];
      swift_bridgeObjectRetain(v31);
      uint64_t v37 = sub_100003E68(v30, v31, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v31);
      sub_10005C334(a2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Back-migrating from %s to %s", (uint8_t *)v27, 0x16u);
      uint64_t v32 = v35;
      swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v36);
    }

    sub_10005C334(a1);
    sub_10005C334(a2);

    uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    os_log_type_t v34 = v8;
  }

  return v33(v34, v4);
}

void sub_10005C000()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = sub_10002FF10();
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unsigned int v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unsigned int v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "First launch since boot...", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess(&byte_1000808D8, v10, 1LL, 0LL);
  byte_1000808D8 = 1;
}

uint64_t sub_10005C120()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));

  swift_release(*(void *)(v0 + 88));
  swift_release(*(void *)(v0 + 96));
  swift_release(*(void *)(v0 + 104));
  sub_10000B4A8( v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription,  &qword_10007C5A0);

  return v0;
}

uint64_t sub_10005C1A4()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10005C1C8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400LL))();
}

uint64_t sub_10005C1F0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 736LL))();
}

uint64_t sub_10005C218()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 744LL))();
}

uint64_t sub_10005C240()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 392LL))();
}

uint64_t sub_10005C268(int a1)
{
  uint64_t v3 = *v1;
  sub_10005B390();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 480LL))();
  if (result)
  {
    uint64_t v5 = result;
    sub_10000A8B0(a1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10005C2CC()
{
  return sub_10005A08C();
}

uint64_t sub_10005C2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10000DC70(0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005C2E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_10005C2EC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[4];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *sub_10005C334(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[9];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_10005C37C()
{
  return type metadata accessor for BluetoothUserDaemon(0LL);
}

uint64_t type metadata accessor for BluetoothUserDaemon(uint64_t a1)
{
  uint64_t result = qword_100080710;
  if (!qword_100080710) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BluetoothUserDaemon);
  }
  return result;
}

void sub_10005C3C0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_100062D58;
  void v4[3] = &unk_100062D70;
  v4[4] = &unk_100062D70;
  v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[6] = &unk_100062D70;
  void v4[7] = &unk_100062D70;
  void v4[8] = &unk_100062D70;
  void v4[9] = &unk_100062D70;
  uint64_t v4[10] = &unk_100062D70;
  v4[11] = &unk_100062D88;
  v4[12] = &unk_100062D88;
  v4[13] = &unk_100062D88;
  sub_10005C48C(319LL);
  if (v3 <= 0x3F)
  {
    v4[14] = *(void *)(v2 - 8) + 64LL;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[16] = &unk_100062D70;
    swift_updateClassMetadata2(a1, 256LL, 17LL, v4, a1 + 80);
  }

void sub_10005C48C(uint64_t a1)
{
  if (!qword_10007C5D0)
  {
    uint64_t v2 = sub_1000064CC(&qword_10007AAE0);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10007C5D0);
    }
  }

uint64_t sub_10005C4E4()
{
  uint64_t v2 = v1;
  unint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  id v13 = 0LL;
  id v5 = [v3 dataWithPropertyList:v4 format:200 options:0 error:&v13];

  id v6 = v13;
  if (v5)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    __asm { BR              X10 }
  }

  uint64_t v9 = v6;
  uint64_t v10 = _convertNSErrorToError(_:)(v6);

  swift_willThrow(v11);
  swift_errorRelease(v10);
  return 0LL;
}

uint64_t sub_10005C7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007C5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003288(&qword_10007C5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C858()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10005C884()
{
  return sub_100059A78(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10005C894()
{
  uint64_t v0 = type metadata accessor for BluetoothUserDaemon(0LL);
  memset(v1, 0, sizeof(v1));
  sub_100057884((uint64_t *)v1, (uint64_t)v1, v0, (uint64_t)&off_100074940);
  sub_10005B390();
}