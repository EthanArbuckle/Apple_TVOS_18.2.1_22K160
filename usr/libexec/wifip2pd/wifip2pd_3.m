uint64_t assignWithTake for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void *)(a2 + 24);
  v4 = *(void *)(a1 + 8);
  v6 = *(void *)(a1 + 16);
  v5 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  sub_100057AA0(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFE && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 32766);
  }
  HIDWORD(v3) = (*(_DWORD *)(a1 + 8) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 8) >> 9);
  LODWORD(v3) = *(_DWORD *)(a1 + 8);
  unsigned int v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)result = a2 - 32766;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFE) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFE) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)(result + 16) = 0LL;
      *(void *)(result + 24) = 0LL;
      *(void *)(result + 8) = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Category( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1001690C8 + 4 * byte_10034AD44[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001690FC + 4 * byte_10034AD3F[v4]))();
}

uint64_t sub_1001690FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100169104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016910CLL);
  }
  return result;
}

uint64_t sub_100169118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100169120LL);
  }
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100169124(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016912C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.Category()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.Category;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO17FiniteCyclicGroupOwst_0( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100169188 + 4 * byte_10034AD49[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001691A8 + 4 * byte_10034AD4E[v4]))();
  }
}

_BYTE *sub_100169188(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001691A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001691B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001691B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001691C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001691C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.PublicActionField()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField;
}

uint64_t destroy for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1)
{
  return sub_100057AA0(*a1, a1[1], a1[2]);
}

uint64_t *_s7CoreP2P14IEEE80211FrameV10ManagementO11ActionFrameV8ContentsOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_10005852C(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_10005852C(*a2, v4, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_100057AA0(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_100057AA0(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Contents( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFE && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 32766);
  }
  HIDWORD(v3) = (*(_DWORD *)a1 >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)a1 >> 9);
  LODWORD(v3) = *(_DWORD *)a1;
  unsigned int v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Contents( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)result = a2 - 32766;
    if (a3 >= 0x7FFE) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFE) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      *(void *)result = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }

  return result;
}

uint64_t sub_1001693AC(void *a1)
{
  else {
    return (*a1 & 0x1FF | (BYTE2(*a1) << 9) | (*a1 >> 15) & 0xFFFE0000) + 2;
  }
}

void *sub_1001693DC(void *result)
{
  *result &= 0xFFFFFFFF3FFFFFFFLL;
  return result;
}

unint64_t *sub_1001693EC(unint64_t *result, unsigned int a2)
{
  if (a2 < 2)
  {
    *result = *result & 0xFFFFFFFF00FF01FFLL | (a2 << 30);
  }

  else
  {
    result[1] = 0LL;
    result[2] = 0LL;
    *result = ((a2 - 2) << 7) & 0xFF0000LL | (a2 - 2) & 0x1FFLL | ((unint64_t)((a2 - 2) >> 17) << 32) | 0x80000000;
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.Contents()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.Contents;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1001694BC + 4 * byte_10034AD58[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001694F0 + 4 * byte_10034AD53[v4]))();
}

uint64_t sub_1001694F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001694F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100169500LL);
  }
  return result;
}

uint64_t sub_10016950C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100169514LL);
  }
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100169518(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100169520(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO34SimulatenousAuthenticationOfEqualsO11MessageTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100169588 + 4 * byte_10034AD62[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001695BC + 4 * byte_10034AD5D[v4]))();
}

uint64_t sub_1001695BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001695C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001695CCLL);
  }
  return result;
}

uint64_t sub_1001695D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001695E0LL);
  }
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001695E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001695EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100169654 + 4 * byte_10034AD6C[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100169688 + 4 * byte_10034AD67[v4]))();
}

uint64_t sub_100169688(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100169690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100169698LL);
  }
  return result;
}

uint64_t sub_1001696A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001696ACLL);
  }
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001696B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001696B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys;
}

uint64_t _s7CoreP2P14IEEE80211FrameV9FrameTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100169720 + 4 * byte_10034AD76[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100169754 + 4 * byte_10034AD71[v4]))();
}

uint64_t sub_100169754(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016975C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100169764LL);
  }
  return result;
}

uint64_t sub_100169770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100169778LL);
  }
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10016977C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100169784(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Beacon.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Header.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1001697EC + 4 * byte_10034AD80[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100169820 + 4 * byte_10034AD7B[v4]))();
}

uint64_t sub_100169820(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100169828(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100169830LL);
  }
  return result;
}

uint64_t sub_10016983C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100169844LL);
  }
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100169848(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100169850(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Header.CodingKeys;
}

unint64_t sub_100169870()
{
  unint64_t result = qword_100409818;
  if (!qword_100409818)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C060, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409818);
  }

  return result;
}

unint64_t sub_1001698B8()
{
  unint64_t result = qword_100409820;
  if (!qword_100409820)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C118, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409820);
  }

  return result;
}

unint64_t sub_100169900()
{
  unint64_t result = qword_100409828;
  if (!qword_100409828)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C1D0,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409828);
  }

  return result;
}

unint64_t sub_100169948()
{
  unint64_t result = qword_100409830;
  if (!qword_100409830)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C288,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409830);
  }

  return result;
}

unint64_t sub_100169990()
{
  unint64_t result = qword_100409838;
  if (!qword_100409838)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C340,  &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409838);
  }

  return result;
}

unint64_t sub_1001699D8()
{
  unint64_t result = qword_100409840;
  if (!qword_100409840)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C3F8,  &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409840);
  }

  return result;
}

unint64_t sub_100169A20()
{
  unint64_t result = qword_100409848;
  if (!qword_100409848)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C4B0,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409848);
  }

  return result;
}

unint64_t sub_100169A68()
{
  unint64_t result = qword_100409850;
  if (!qword_100409850)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C420,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409850);
  }

  return result;
}

unint64_t sub_100169AB0()
{
  unint64_t result = qword_100409858;
  if (!qword_100409858)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C448,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409858);
  }

  return result;
}

unint64_t sub_100169AF8()
{
  unint64_t result = qword_100409860;
  if (!qword_100409860)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C368,  &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409860);
  }

  return result;
}

unint64_t sub_100169B40()
{
  unint64_t result = qword_100409868;
  if (!qword_100409868)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C390,  &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409868);
  }

  return result;
}

unint64_t sub_100169B88()
{
  unint64_t result = qword_100409870;
  if (!qword_100409870)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C2B0,  &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409870);
  }

  return result;
}

unint64_t sub_100169BD0()
{
  unint64_t result = qword_100409878;
  if (!qword_100409878)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C2D8,  &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409878);
  }

  return result;
}

unint64_t sub_100169C18()
{
  unint64_t result = qword_100409880;
  if (!qword_100409880)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C1F8,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409880);
  }

  return result;
}

unint64_t sub_100169C60()
{
  unint64_t result = qword_100409888;
  if (!qword_100409888)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C220,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409888);
  }

  return result;
}

unint64_t sub_100169CA8()
{
  unint64_t result = qword_100409890;
  if (!qword_100409890)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C140,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409890);
  }

  return result;
}

unint64_t sub_100169CF0()
{
  unint64_t result = qword_100409898;
  if (!qword_100409898)
  {
    unint64_t result = swift_getWitnessTable( &unk_10034C168,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409898);
  }

  return result;
}

unint64_t sub_100169D38()
{
  unint64_t result = qword_1004098A0;
  if (!qword_1004098A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C088, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004098A0);
  }

  return result;
}

unint64_t sub_100169D80()
{
  unint64_t result = qword_1004098A8;
  if (!qword_1004098A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C0B0, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004098A8);
  }

  return result;
}

unint64_t sub_100169DC8()
{
  unint64_t result = qword_1004098B0;
  if (!qword_1004098B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034BFD0, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004098B0);
  }

  return result;
}

unint64_t sub_100169E10()
{
  unint64_t result = qword_1004098B8;
  if (!qword_1004098B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034BFF8, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004098B8);
  }

  return result;
}

uint64_t sub_100169E54(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F43656D617266LL && a2 == 0xEC0000006C6F7274LL)
  {
    unint64_t v5 = 0xEC0000006C6F7274LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F43656D617266LL, 0xEC0000006C6F7274LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F697461727564LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7265766965636572LL && a2 == 0xEF73736572646441LL)
  {
    unint64_t v8 = 0xEF73736572646441LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265766965636572LL, 0xEF73736572646441LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v9 = 0x8000000100366DC0LL;
    if (a2 == 0x8000000100366DC0LL) {
      goto LABEL_25;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100366DC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v10 = 0x8000000100366DE0LL;
    if (a2 == 0x8000000100366DE0LL) {
      goto LABEL_30;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100366DE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0x65636E6575716573LL && a2 == 0xEF6C6F72746E6F43LL)
  {
    swift_bridgeObjectRelease(0xEF6C6F72746E6F43LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573LL, 0xEF6C6F72746E6F43LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_10016A124(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v5 = 0xE900000000000070LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E496E6F63616562LL && a2 == 0xEE006C6176726574LL)
  {
    unint64_t v7 = 0xEE006C6176726574LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E496E6F63616562LL, 0xEE006C6176726574LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x696C696261706163LL && a2 == 0xEC00000073656974LL)
  {
    unint64_t v8 = 0xEC00000073656974LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163LL, 0xEC00000073656974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x73746E656D656C65LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E656D656C65LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10016A324(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v4 = 0x8000000100366E00LL;
    if (a2 == 0x8000000100366E00LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100366E00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x72616C616373LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v6 = 0xE600000000000000LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72616C616373LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000100366E20LL)
  {
    swift_bridgeObjectRelease(0x8000000100366E20LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100366E20LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10016A468(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x666E6F43646E6573LL && a2 == 0xEB000000006D7269LL)
  {
    unint64_t v5 = 0xEB000000006D7269LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666E6F43646E6573LL, 0xEB000000006D7269LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6D7269666E6F63LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D7269666E6F63LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10016A570(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F43737574617473LL && a2 == 0xEA00000000006564LL)
  {
    unint64_t v5 = 0xEA00000000006564LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473LL, 0xEA00000000006564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x62617061436E7372LL && a2 == 0xED00007974696C69LL)
  {
    unint64_t v7 = 0xED00007974696C69LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x62617061436E7372LL, 0xED00007974696C69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v8 = 0x8000000100366E40LL;
    if (a2 == 0x8000000100366E40LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100366E40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD00000000000002BLL && a2 == 0x8000000100366E60LL)
  {
    unint64_t v9 = 0x8000000100366E60LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100366E60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x7053726F646E6576LL && a2 == 0xEE00636966696365LL)
  {
    swift_bridgeObjectRelease(0xEE00636966696365LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7053726F646E6576LL, 0xEE00636966696365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10016A7D4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F43737574617473LL && a2 == 0xEA00000000006564LL)
  {
    unint64_t v5 = 0xEA00000000006564LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473LL, 0xEA00000000006564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD00000000000002BLL && a2 == 0x8000000100366E60LL)
  {
    swift_bridgeObjectRelease(0x8000000100366E60LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100366E60LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_10016A8CC()
{
  unint64_t result = qword_1004098C0;
  if (!qword_1004098C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.PublicActionField,  &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField);
    atomic_store(result, (unint64_t *)&qword_1004098C0);
  }

  return result;
}

unint64_t sub_10016A910()
{
  unint64_t result = qword_1004098C8;
  if (!qword_1004098C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category,  &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_1004098C8);
  }

  return result;
}

unint64_t sub_10016A954()
{
  unint64_t result = qword_1004098D0;
  if (!qword_1004098D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType,  &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType);
    atomic_store(result, (unint64_t *)&qword_1004098D0);
  }

  return result;
}

unint64_t sub_10016A998()
{
  unint64_t result = qword_1004098D8;
  if (!qword_1004098D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm,  &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm);
    atomic_store(result, (unint64_t *)&qword_1004098D8);
  }

  return result;
}

unint64_t sub_10016A9DC()
{
  unint64_t result = qword_1004098E0;
  if (!qword_1004098E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_1004098E0);
  }

  return result;
}

unint64_t sub_10016AA20()
{
  unint64_t result = qword_1004098E8;
  if (!qword_1004098E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header,  &type metadata for IEEE80211Frame.Header);
    atomic_store(result, (unint64_t *)&qword_1004098E8);
  }

  return result;
}

double sub_10016AA64(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xFFFFFFFD0000LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

double sub_10016AA9C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xFFFFFFFE0000LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

double sub_10016AAD0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xFFFFFFFF0000LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

uint64_t sub_10016AB04(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001LL | 0x3000000000000000LL;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_10016AB20()
{
  unint64_t result = qword_1004098F0;
  if (!qword_1004098F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame,  &type metadata for IEEE80211Frame.Management.ActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004098F0);
  }

  return result;
}

uint64_t sub_10016AB64(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001LL | 0x2000000000000000LL;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_10016AB80()
{
  unint64_t result = qword_1004098F8;
  if (!qword_1004098F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication,  &type metadata for IEEE80211Frame.Management.Authentication);
    atomic_store(result, (unint64_t *)&qword_1004098F8);
  }

  return result;
}

uint64_t sub_10016ABC4(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001LL | 0x1000000000000000LL;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_10016ABE0()
{
  unint64_t result = qword_100409900;
  if (!qword_100409900)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Beacon,  &type metadata for IEEE80211Frame.Management.Beacon);
    atomic_store(result, (unint64_t *)&qword_100409900);
  }

  return result;
}

uint64_t sub_10016AC24(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001LL;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_10016AC3C()
{
  unint64_t result = qword_100409908;
  if (!qword_100409908)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm,  &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm);
    atomic_store(result, (unint64_t *)&qword_100409908);
  }

  return result;
}

unint64_t sub_10016AC80()
{
  unint64_t result = qword_100409910;
  if (!qword_100409910)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Status,  &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_100409910);
  }

  return result;
}

uint64_t sub_10016ACC4(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  unint64_t v2 = *(void *)(result + 88) & 1LL | 0xC000000000000000LL;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_10016ACF0()
{
  unint64_t result = qword_100409918;
  if (!qword_100409918)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNConfirm,  &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm);
    atomic_store(result, (unint64_t *)&qword_100409918);
  }

  return result;
}

uint64_t sub_10016AD34(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  unint64_t v2 = *(void *)(result + 88) & 1LL | 0x8000000000000000LL;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_10016AD60()
{
  unint64_t result = qword_100409920;
  if (!qword_100409920)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNResponse,  &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse);
    atomic_store(result, (unint64_t *)&qword_100409920);
  }

  return result;
}

uint64_t sub_10016ADA4(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  uint64_t v2 = *(void *)(result + 88) & 1LL | 0x4000000000000000LL;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_10016ADD0()
{
  unint64_t result = qword_100409928;
  if (!qword_100409928)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNRequest,  &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest);
    atomic_store(result, (unint64_t *)&qword_100409928);
  }

  return result;
}

uint64_t sub_10016AE14(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  uint64_t v2 = *(void *)(result + 88) & 1LL;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_10016AE3C()
{
  unint64_t result = qword_100409938;
  if (!qword_100409938)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters);
    atomic_store(result, (unint64_t *)&qword_100409938);
  }

  return result;
}

unint64_t sub_10016AE80()
{
  unint64_t result = qword_100409948;
  if (!qword_100409948)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability,  &type metadata for IEEE80211InformationElement.RSNCapability);
    atomic_store(result, (unint64_t *)&qword_100409948);
  }

  return result;
}

unint64_t sub_10016AEC4()
{
  unint64_t result = qword_100409950;
  if (!qword_100409950)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_100409950);
  }

  return result;
}

unint64_t sub_10016AF08()
{
  unint64_t result = qword_100409958;
  if (!qword_100409958)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement,  &type metadata for IEEE80211InformationElement);
    atomic_store(result, (unint64_t *)&qword_100409958);
  }

  return result;
}

uint64_t sub_10016AF4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 96);
  unint64_t v9 = *(void *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 112);
  unint64_t v16 = *(void *)(a1 + 128);
  unint64_t v17 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v15 = *(void *)(a1 + 136);
  unint64_t v13 = *(void *)(a1 + 152);
  char v12 = *(_BYTE *)(a1 + 160);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  sub_100057CA0(v5, v6, v7);
  sub_100020B40(v8, v9);
  sub_100057CBC(v10, v17, v16, v15, v14, v13, v12);
  return a1;
}

unint64_t sub_10016B024()
{
  unint64_t result = qword_100409978;
  if (!qword_100409978)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_100409978);
  }

  return result;
}

uint64_t sub_10016B068(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000022F8(&qword_100409668);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10016B0D0()
{
  unint64_t result = qword_100409998;
  if (!qword_100409998)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Header.FrameControl,  &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409998);
  }

  return result;
}

unint64_t sub_10016B114()
{
  unint64_t result = qword_1004099A0;
  if (!qword_1004099A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category,  &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_1004099A0);
  }

  return result;
}

unint64_t sub_10016B158()
{
  unint64_t result = qword_1004099A8;
  if (!qword_1004099A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AWDLActionFrame,  &type metadata for AWDLActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004099A8);
  }

  return result;
}

unint64_t sub_10016B19C()
{
  unint64_t result = qword_1004099B0;
  if (!qword_1004099B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANActionFrame,  &type metadata for NANActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004099B0);
  }

  return result;
}

uint64_t sub_10016B208@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(a6, sub_10016D174, v11);
    return swift_bridgeObjectRelease(a5);
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v8 = _StringObject.sharedUTF8.getter(a1, a2);
    }

    sub_1001FF200(v8, v9, (uint64_t (*)(void))sub_10016D174);
    return swift_bridgeObjectRelease(a5);
  }

  v12[0] = a1;
  v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  sub_10016B860(v12, a3, a4, a5);
  return swift_bridgeObjectRelease(a5);
}

uint64_t NANServiceName.hash.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SHA256(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = swift_bridgeObjectRetain(a2);
  SHA256.init()(v11);
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(v12._object);
  sub_10016B208( v12._countAndFlagsBits,  (uint64_t)v12._object,  (uint64_t)v10,  v12._countAndFlagsBits,  (uint64_t)v12._object,  v13);
  swift_bridgeObjectRelease(v12._object);
  SHA256.finalize()(v14);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v18, sub_10016BB10, 0LL, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = v18;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v15;
}

void *NANServiceName.Hash.size.unsafeMutableAddressor()
{
  return &static NANServiceName.Hash.size;
}

uint64_t static NANServiceName.== infix(_:_:)()
{
  Swift::String v0 = String.lowercased()();
  Swift::String v1 = String.lowercased()();
  object = v1._object;
  if (v0._countAndFlagsBits == v1._countAndFlagsBits && v0._object == v1._object)
  {
    char v3 = 1;
    object = v0._object;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)( v0._countAndFlagsBits,  v0._object,  v1._countAndFlagsBits,  v1._object,  0LL);
  }

  swift_bridgeObjectRelease(v0._object);
  swift_bridgeObjectRelease(object);
  return v3 & 1;
}

uint64_t sub_10016B528(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v19 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v20 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(a4);
    uint64_t v10 = 0LL;
    while (1)
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v13 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v10 << 16, a3, a4);
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v21[0] = a3;
          v21[1] = v20;
          uint64_t v11 = v21;
          uint64_t v12 = v22;
        }

        else
        {
          uint64_t v11 = (void *)v19;
          uint64_t v12 = v5;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v11 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
          }
        }

        int v13 = _decodeScalar(_:startingAt:)(v11, v12, v10);
      }

      uint64_t v15 = v14;
      LODWORD(v21[0]) = v13;
      char v16 = a1(v21);
      if (v4)
      {
        swift_bridgeObjectRelease(a4);
        return v17 & 1;
      }

      if ((v16 & 1) == 0) {
        break;
      }
      v10 += v15;
      if (v10 >= v6)
      {
        swift_bridgeObjectRelease(a4);
        char v17 = 1;
        return v17 & 1;
      }
    }

    swift_bridgeObjectRelease(a4);
    char v17 = 0;
  }

  else
  {
    char v17 = 1;
  }

  return v17 & 1;
}

Swift::Bool __swiftcall NANServiceName.contains(_:)(CoreP2P::NANServiceName a1)
{
  uint64_t v6 = v1;
  uint64_t v7 = v2;
  CoreP2P::NANServiceName v5 = a1;
  unint64_t v3 = sub_10000B08C();
  return StringProtocol.localizedCaseInsensitiveContains<A>(_:)( &v5,  &type metadata for String,  &type metadata for String,  v3,  v3) & 1;
}

uint64_t NANServiceName.hash(into:)(uint64_t a1)
{
  Swift::String v2 = String.lowercased()();
  String.hash(into:)(a1, v2._countAndFlagsBits, v2._object);
  return swift_bridgeObjectRelease(v2._object);
}

uint64_t static NANServiceName.Hash.size.getter()
{
  return 6LL;
}

uint64_t NANServiceName.Hash.init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SHA256(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  SHA256.init()(v9);
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(v12._object);
  sub_10016B208( v12._countAndFlagsBits,  (uint64_t)v12._object,  (uint64_t)v11,  v12._countAndFlagsBits,  (uint64_t)v12._object,  v13);
  uint64_t v14 = swift_bridgeObjectRelease(v12._object);
  SHA256.finalize()(v14);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v18, sub_10016BB10, 0LL, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = v18;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v15;
}

void sub_10016B860(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = String.count.getter(a3, a4);
  sub_100211E68(a1, v5);
  __asm { BR              X10 }

uint64_t sub_10016B8D4()
{
  uint64_t v5 = v0;
  __int16 v6 = v1;
  char v7 = BYTE2(v1);
  char v8 = BYTE3(v1);
  char v9 = BYTE4(v1);
  char v10 = BYTE5(v1);
  uint64_t v2 = type metadata accessor for SHA256(0LL);
  uint64_t v3 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.update(bufferPointer:)(&v5, (char *)&v5 + BYTE6(v1), v2, v3);
  sub_1000208D8(v0, v1);
  return sub_1000208D8(v0, v1);
}

uint64_t sub_10016BB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_100002274(&qword_100405E28);
  v12[3] = v6;
  v12[4] = sub_100057F44();
  uint64_t v7 = swift_allocObject(&unk_1003E90C0, 48LL, 7LL);
  v12[0] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_10034C7B0;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  sub_100021104(v12, v6);
  Slice<>.withUnsafeBytes<A>(_:)( v11,  sub_1000FA8EC,  0LL,  v6,  &type metadata for Data._Representation,  &protocol witness table for UnsafeRawBufferPointer);
  uint64_t v8 = v11[0];
  uint64_t v9 = v11[1];
  uint64_t result = sub_100002AC4(v12);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t NANServiceName.Hash.init(_:_:_:_:_:_:)(char a1, char a2, char a3, char a4, char a5, char a6)
{
  uint64_t v12 = sub_100002274(&qword_1004040A8);
  uint64_t v13 = swift_allocObject(v12, 38LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_10033A980;
  *(_BYTE *)(v13 + 32) = a1;
  *(_BYTE *)(v13 + 33) = a2;
  *(_BYTE *)(v13 + 34) = a3;
  *(_BYTE *)(v13 + 35) = a4;
  *(_BYTE *)(v13 + 36) = a5;
  *(_BYTE *)(v13 + 37) = a6;
  uint64_t v14 = sub_1000FB08C(v13);
  swift_bridgeObjectRelease(v13);
  return v14;
}

void NANServiceName.Hash.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_10016BD18()
{
  uint64_t v5 = sub_10000AF70( (unint64_t *)&qword_100405138,  (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator,  (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 81) & 1) != 0)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
    *(_OWORD *)(v4 - 128) = xmmword_100339900;
    do
    {
      char v8 = *(_BYTE *)(v4 - 82);
      uint64_t v9 = sub_100002274((uint64_t *)&unk_100405140);
      uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 128);
      *(void *)(v10 + 56) = &type metadata for UInt8;
      *(void *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      uint64_t v11 = String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v10);
      uint64_t v13 = v12;
      *(void *)(v4 - 104) = v6;
      *(void *)(v4 - 96) = v7;
      swift_bridgeObjectRetain(v7);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v13);
      uint64_t v6 = *(void *)(v4 - 104);
      unint64_t v7 = *(void *)(v4 - 96);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
    }

    while (*(_BYTE *)(v4 - 81) != 1);
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 136) + 8LL))(v2, v0);
  return v6;
}

uint64_t NANServiceName.Hash.init(from:)(void *a1)
{
  return sub_10016CC50(a1);
}

uint64_t sub_10016BEB0(uint64_t a1)
{
  unint64_t v2 = sub_10016CD9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016BED8(uint64_t a1)
{
  unint64_t v2 = sub_10016CD9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANServiceName.Hash.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100002274(&qword_1004099B8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  unint64_t v12 = sub_10016CD9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANServiceName.Hash.CodingKeys,  &type metadata for NANServiceName.Hash.CodingKeys,  v12,  v10,  v11);
  v16[0] = a2;
  v16[1] = a3;
  unint64_t v13 = sub_10005CD78();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10016C004@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10016CC50(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_10016C02C(void *a1)
{
  return NANServiceName.Hash.encode(to:)(a1, *v1, v1[1]);
}

void sub_10016C044()
{
}

uint64_t sub_10016C04C()
{
  return 0x676E69727473LL;
}

uint64_t sub_10016C060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x676E69727473LL && a2 == 0xE600000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE600000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E69727473LL, 0xE600000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10016C0EC(uint64_t a1)
{
  unint64_t v2 = sub_10016CDE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016C114(uint64_t a1)
{
  unint64_t v2 = sub_10016CDE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANServiceName.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100002274(&qword_1004099C8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  unint64_t v12 = sub_10016CDE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANServiceName.CodingKeys,  &type metadata for NANServiceName.CodingKeys,  v12,  v10,  v11);
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int NANServiceName.hashValue.getter()
{
  Swift::String v0 = String.lowercased()();
  String.hash(into:)(v2, v0._countAndFlagsBits, v0._object);
  swift_bridgeObjectRelease(v0._object);
  return Hasher._finalize()();
}

void *NANServiceName.init(from:)(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_1004099D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_10016CDE0();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANServiceName.CodingKeys,  &type metadata for NANServiceName.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    uint64_t v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002AC4(a1);
  return v9;
}

Swift::Int sub_10016C3A0()
{
  Swift::String v0 = String.lowercased()();
  String.hash(into:)(v2, v0._countAndFlagsBits, v0._object);
  swift_bridgeObjectRelease(v0._object);
  return Hasher._finalize()();
}

uint64_t sub_10016C404(uint64_t a1)
{
  Swift::String v2 = String.lowercased()();
  String.hash(into:)(a1, v2._countAndFlagsBits, v2._object);
  return swift_bridgeObjectRelease(v2._object);
}

Swift::Int sub_10016C444(uint64_t a1)
{
  Swift::String v1 = String.lowercased()();
  String.hash(into:)(v3, v1._countAndFlagsBits, v1._object);
  swift_bridgeObjectRelease(v1._object);
  return Hasher._finalize()();
}

uint64_t sub_10016C4A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100002274(&qword_1004099D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_10016CDE0();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANServiceName.CodingKeys,  &type metadata for NANServiceName.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100002AC4(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_10016C5C8(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_1004099C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_10016CDE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANServiceName.CodingKeys,  &type metadata for NANServiceName.CodingKeys,  v11,  v9,  v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10016C6B4()
{
  Swift::String v0 = String.lowercased()();
  Swift::String v1 = String.lowercased()();
  if (v0._countAndFlagsBits == v1._countAndFlagsBits && v0._object == v1._object)
  {
    char v4 = 1;
    object = v0._object;
  }

  else
  {
    object = v1._object;
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)( v0._countAndFlagsBits,  v0._object,  v1._countAndFlagsBits,  v1._object,  0LL);
  }

  swift_bridgeObjectRelease(v0._object);
  swift_bridgeObjectRelease(object);
  return v4 & 1;
}

uint64_t NANServiceName.description.getter(uint64_t a1, void *a2)
{
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(a2);
  v5._countAndFlagsBits = 39LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 39LL;
}

uint64_t NANServiceName.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[0] = a1;
  v17[1] = a2;
  char v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for Mirror.AncestorRepresentation.generated(_:),  v4);
  swift_bridgeObjectRetain(a2);
  uint64_t v12 = sub_100002274(&qword_100405DC0);
  unint64_t v13 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( v17,  &v16,  v10,  v7,  &type metadata for NANServiceName,  v12,  v13);
}

uint64_t sub_10016C900()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 39LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 39LL;
}

uint64_t sub_10016C96C(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  uint64_t v13 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t _s7CoreP2P14NANServiceNameVyACSgSScfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = &v23[-v10];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = &v23[-v13];
  __chkstk_darwin(v12);
  char v16 = &v23[-v15];
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v17 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17) {
    goto LABEL_9;
  }
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    if (String.UTF8View._foreignCount()() > 254) {
      goto LABEL_9;
    }
    if (String.UTF8View._foreignCount()() != 1) {
      return a1;
    }
LABEL_8:
    uint64_t v18 = static CharacterSet.letters.getter();
    static CharacterSet.decimalDigits.getter(v18);
    CharacterSet.union(_:)(v8);
    uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v11, v4);
    CharacterSet.init(charactersIn:)(3039021LL, 0xE300000000000000LL);
    CharacterSet.union(_:)(v11);
    v19(v11, v4);
    uint64_t v20 = ((uint64_t (*)(_BYTE *, uint64_t))v19)(v14, v4);
    __chkstk_darwin(v20);
    *(void *)&v23[-16] = v16;
    swift_bridgeObjectRetain(a2);
    char v21 = sub_10016B528((uint64_t (*)(void *))sub_10016D134, (uint64_t)&v23[-32], a1, a2);
    swift_bridgeObjectRelease(a2);
    v19(v16, v4);
    if ((v21 & 1) == 0) {
      goto LABEL_9;
    }
    return a1;
  }

  if (v17 >= 0xFF)
  {
LABEL_9:
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (v17 == 1) {
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_10016CC50(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v3, v4);
  if (!v1)
  {
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    sub_1000237C8((uint64_t)v9, v10);
    UnkeyedDecodingContainer.decodeData(with:)(6LL, v5, v6);
    __asm { BR              X10 }
  }

  sub_100002AC4(a1);
  return v4;
}

void sub_10016CD30(uint64_t a1, ...)
{
}

unint64_t sub_10016CD9C()
{
  unint64_t result = qword_1004099C0;
  if (!qword_1004099C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CBA4, &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004099C0);
  }

  return result;
}

unint64_t sub_10016CDE0()
{
  unint64_t result = qword_1004099D0;
  if (!qword_1004099D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CB54, &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004099D0);
  }

  return result;
}

unint64_t sub_10016CE28()
{
  unint64_t result = qword_1004099E0;
  if (!qword_1004099E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANServiceName.Hash,  &type metadata for NANServiceName.Hash);
    atomic_store(result, (unint64_t *)&qword_1004099E0);
  }

  return result;
}

unint64_t sub_10016CE70()
{
  unint64_t result = qword_1004099E8;
  if (!qword_1004099E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANServiceName,  &type metadata for NANServiceName);
    atomic_store(result, (unint64_t *)&qword_1004099E8);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANServiceName()
{
  return &type metadata for NANServiceName;
}

ValueMetadata *type metadata accessor for NANServiceName.Hash()
{
  return &type metadata for NANServiceName.Hash;
}

ValueMetadata *type metadata accessor for NANServiceName.CodingKeys()
{
  return &type metadata for NANServiceName.CodingKeys;
}

uint64_t _s7CoreP2P14NANServiceNameV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10016CF28 + 4 * byte_10034C7C4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10016CF48 + 4 * byte_10034C7C9[v4]))();
  }
}

_BYTE *sub_10016CF28(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10016CF48(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10016CF50(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10016CF58(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10016CF60(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10016CF68(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANServiceName.Hash.CodingKeys()
{
  return &type metadata for NANServiceName.Hash.CodingKeys;
}

unint64_t sub_10016CF88()
{
  unint64_t result = qword_1004099F0;
  if (!qword_1004099F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CA74, &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004099F0);
  }

  return result;
}

unint64_t sub_10016CFD0()
{
  unint64_t result = qword_1004099F8;
  if (!qword_1004099F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CB2C, &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004099F8);
  }

  return result;
}

unint64_t sub_10016D018()
{
  unint64_t result = qword_100409A00;
  if (!qword_100409A00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CA9C, &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409A00);
  }

  return result;
}

unint64_t sub_10016D060()
{
  unint64_t result = qword_100409A08;
  if (!qword_100409A08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CAC4, &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409A08);
  }

  return result;
}

unint64_t sub_10016D0A8()
{
  unint64_t result = qword_100409A10;
  if (!qword_100409A10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034C9E4, &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409A10);
  }

  return result;
}

unint64_t sub_10016D0F0()
{
  unint64_t result = qword_100409A18;
  if (!qword_100409A18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CA0C, &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409A18);
  }

  return result;
}

uint64_t sub_10016D134(unsigned int *a1)
{
  return CharacterSet.contains(_:)(*a1) & 1;
}

uint64_t sub_10016D164()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10016D174(_BYTE *a1)
{
}

uint64_t sub_10016D190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64LL), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

double BinaryEncoder.__allocating_init(userInfo:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 40LL, 7LL);
  double result = 0.0;
  *(_OWORD *)(v3 + 16) = xmmword_1003398F0;
  *(void *)(v3 + 32) = a1;
  return result;
}

uint64_t static BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = type metadata accessor for BinaryEncoder();
  uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1003398F0;
  uint64_t v10 = v9 + 16;
  *(void *)(v9 + 32) = v7;
  BinaryEncoder.encode<A>(_:)(a1, a2, a3);
  if (v3)
  {
    swift_release(v9);
  }

  else
  {
    swift_beginAccess(v10, v12, 0LL, 0LL);
    uint64_t v10 = *(void *)(v9 + 16);
    sub_100020AFC(v10, *(void *)(v9 + 24));
    swift_release(v9);
  }

  return v10;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];
  unint64_t v7 = type metadata accessor for Optional(0LL, a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v21[-v9 - 8];
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a2);
    uint64_t v15 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
    char v16 = type metadata accessor for BinaryEncoder();
    unint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_1003398F0;
    *(void *)(v17 + 32) = v15;
    uint64_t v18 = a3;
    uint64_t v14 = v17;
    BinaryEncoder.encode<A>(_:)((uint64_t)v13, a2, v18);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
    if (!v3)
    {
      swift_beginAccess(v17 + 16, v21, 0LL, 0LL);
      uint64_t v14 = *(void *)(v17 + 16);
      sub_100020AFC(v14, *(void *)(v17 + 24));
    }

    swift_release(v17);
  }

  return v14;
}

uint64_t sub_10016D500(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess(*a2 + 16, v8, 1LL, 0LL);
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  sub_100020AFC(v2, v3);
  return sub_1000208D8(v5, v6);
}

uint64_t BinaryEncoder.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100020AFC(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t BinaryEncoder.userInfo.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t BinaryEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *BinaryEncoder.userInfo.modify(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t BinaryEncoder.init(userInfo:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 16) = xmmword_1003398F0;
  *(void *)(v1 + 32) = a1;
  return v1;
}

Swift::Void __swiftcall BinaryEncoder.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t sub_10016D6D0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for BinaryEncoder();
  a2[4] = sub_10016F360();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_10016D708@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for BinaryEncoder();
  a2[4] = sub_10016F360();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_10016D740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return BinaryEncoder.container<A>(keyedBy:)(a1, a5, a7, a4);
}

uint64_t sub_10016D768@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = sub_10006E360();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_10016D7A4(char a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  return sub_10016F428( (uint64_t)&v5,  *v3,  *(void *)(a3 + 16),  (uint64_t)&type metadata for Bool,  *(void *)(a3 + 24),  (uint64_t)&protocol witness table for Bool);
}

uint64_t sub_10016D7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a2;
  return sub_10016F428( (uint64_t)v6,  *v4,  *(void *)(a4 + 16),  (uint64_t)&type metadata for String,  *(void *)(a4 + 24),  (uint64_t)&protocol witness table for String);
}

uint64_t sub_10016D820(double a1, uint64_t a2, uint64_t a3)
{
  double v5 = a1;
  return sub_10016F428( (uint64_t)&v5,  *v3,  *(void *)(a3 + 16),  (uint64_t)&type metadata for Double,  *(void *)(a3 + 24),  (uint64_t)&protocol witness table for Double);
}

uint64_t sub_10016D860(float a1, uint64_t a2, uint64_t a3)
{
  float v5 = a1;
  return sub_10016F428( (uint64_t)&v5,  *v3,  *(void *)(a3 + 16),  (uint64_t)&type metadata for Float,  *(void *)(a3 + 24),  (uint64_t)&protocol witness table for Float);
}

uint64_t sub_10016D8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DBBC(a1, a2, a3, a4, (void (*)(void))sub_1000C0114, (uint64_t)&type metadata for Int);
}

uint64_t sub_10016D8CC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016D9E8(a1, a2, a3, a4, (void (*)(void))sub_1000C00D0, (uint64_t)&type metadata for Int8);
}

uint64_t sub_10016D8F8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DA84(a1, a2, a3, a4, (void (*)(void))sub_1000C008C, (uint64_t)&type metadata for Int16);
}

uint64_t sub_10016D924(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DB20(a1, a2, a3, a4, (void (*)(void))sub_1000C0048, (uint64_t)&type metadata for Int32);
}

uint64_t sub_10016D950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DBBC(a1, a2, a3, a4, (void (*)(void))sub_1000C0004, (uint64_t)&type metadata for Int64);
}

uint64_t sub_10016D97C()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_10016D990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DBBC(a1, a2, a3, a4, (void (*)(void))sub_1000BFFC0, (uint64_t)&type metadata for UInt);
}

uint64_t sub_10016D9BC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016D9E8(a1, a2, a3, a4, (void (*)(void))sub_1000BFF7C, (uint64_t)&type metadata for UInt8);
}

uint64_t sub_10016D9E8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  char v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_10016F400((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_10016DA58(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DA84(a1, a2, a3, a4, (void (*)(void))sub_1000BFF38, (uint64_t)&type metadata for UInt16);
}

uint64_t sub_10016DA84(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  __int16 v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_10016F400((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_10016DAF4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DB20(a1, a2, a3, a4, (void (*)(void))sub_1000BFEF4, (uint64_t)&type metadata for UInt32);
}

uint64_t sub_10016DB20(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  int v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_10016F400((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_10016DB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DBBC(a1, a2, a3, a4, (void (*)(void))sub_1000BFEB0, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_10016DBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_10016F400((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_10016DC2C()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_10016DC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10016F428(a1, *v5, *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_10016DC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_10016DC8C()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_10016DCA0()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_10016DCB4(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_10016DCCC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DE30( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10016DCE8(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_10016DD00(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DDB8( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10016DD1C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DDF4( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10016DD38(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DE30( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10016DD54(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_10016DD6C(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_10016DD84(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_10016DD9C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DDB8( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10016DDB8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_10016DDD8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DDF4( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10016DDF4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_10016DE14(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016DE30( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10016DE30( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_10016DE58(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_10016DE70(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_10016DE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_10016DEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10016D740(a1, a2, *v5, *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_10016DEC8@<X0>(void *a1@<X8>)
{
  return sub_10016D768(*v1, a1);
}

uint64_t sub_10016DED8@<X0>(void *a1@<X8>)
{
  return sub_10016D708(*v1, a1);
}

uint64_t sub_10016DEE8@<X0>(void *a1@<X8>)
{
  return sub_10016D6D0(*v1, a1);
}

uint64_t sub_10016DEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.encode<A>(_:)(a1, a3, a4);
}

uint64_t sub_10016DF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.container<A>(keyedBy:)(a1, a3, a4, a4);
}

void sub_10016DF48()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v2, 0LL, 0LL);
  __asm { BR              X12 }

uint64_t sub_10016DF94()
{
  return BYTE6(v0);
}

uint64_t sub_10016DFE4(uint64_t a1)
{
  return sub_10016E574(a1);
}

uint64_t sub_10016DFF8(uint64_t a1, uint64_t a2)
{
  return sub_10016E5E4(a1, a2);
}

uint64_t sub_10016E00C(double a1)
{
  return sub_10016E66C(a1);
}

uint64_t sub_10016E054(float a1)
{
  return sub_10016E720(a1);
}

uint64_t sub_10016E068(uint64_t a1)
{
  return sub_10016EA08(a1);
}

uint64_t sub_10016E0B0(char a1)
{
  return sub_10016E7EC(a1);
}

uint64_t sub_10016E0F8(__int16 a1)
{
  return sub_10016E8A0(a1);
}

uint64_t sub_10016E140(int a1)
{
  return sub_10016E954(a1);
}

uint64_t sub_10016E188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_10016F300();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, v8, a4);
}

uint64_t sub_10016E1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_10016F300();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, v8, a4);
}

uint64_t sub_10016E240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10016E4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a5, a2, a6, a3, a4);
}

uint64_t sub_10016E518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10016DF20(a1, *v3, a2, a3);
}

uint64_t sub_10016E528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  return swift_retain(v4);
}

uint64_t sub_10016E53C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for BinaryEncoder();
  a1[4] = sub_10016F360();
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_10016E574(uint64_t a1)
{
  uint64_t v3 = *v1;
  v5[3] = type metadata accessor for BinaryEncoder();
  v5[4] = sub_10016F360();
  v5[0] = v3;
  swift_retain();
  Bool.encode(to:)(v5, a1);
  return sub_100002AC4(v5);
}

uint64_t sub_10016E5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  v7[3] = type metadata accessor for BinaryEncoder();
  v7[4] = sub_10016F360();
  v7[0] = v5;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  String.encode(to:)(v7, a1, a2);
  sub_100002AC4(v7);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10016E66C(double a1)
{
  uint64_t v2 = *v1;
  double v7 = a1;
  uint64_t v3 = sub_1000EF854((uint64_t)&v7, (uint64_t)v8);
  unint64_t v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33LL, 0LL);
  sub_1000FA9C4(v3, v5);
  swift_endAccess(v8);
  return sub_1000208D8(v3, v5);
}

uint64_t sub_10016E720(float a1)
{
  uint64_t v3 = *v1;
  v5[3] = type metadata accessor for BinaryEncoder();
  v5[4] = sub_10016F360();
  v5[0] = v3;
  swift_retain();
  Float.encode(to:)(v5, a1);
  return sub_100002AC4(v5);
}

uint64_t sub_10016E790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_10006E360();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_10016E7EC(char a1)
{
  uint64_t v2 = *v1;
  char v7 = a1;
  uint64_t v3 = sub_1000EF854((uint64_t)&v7, (uint64_t)v8);
  unint64_t v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33LL, 0LL);
  sub_1000FA9C4(v3, v5);
  swift_endAccess(v8);
  return sub_1000208D8(v3, v5);
}

uint64_t sub_10016E8A0(__int16 a1)
{
  uint64_t v2 = *v1;
  __int16 v7 = a1;
  uint64_t v3 = sub_1000EF854((uint64_t)&v7, (uint64_t)v8);
  unint64_t v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33LL, 0LL);
  sub_1000FA9C4(v3, v5);
  swift_endAccess(v8);
  return sub_1000208D8(v3, v5);
}

uint64_t sub_10016E954(int a1)
{
  uint64_t v2 = *v1;
  int v7 = a1;
  uint64_t v3 = sub_1000EF854((uint64_t)&v7, (uint64_t)v8);
  unint64_t v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33LL, 0LL);
  sub_1000FA9C4(v3, v5);
  swift_endAccess(v8);
  return sub_1000208D8(v3, v5);
}

uint64_t sub_10016EA08(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v7 = a1;
  uint64_t v3 = sub_1000EF854((uint64_t)&v7, (uint64_t)v8);
  unint64_t v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33LL, 0LL);
  sub_1000FA9C4(v3, v5);
  swift_endAccess(v8);
  return sub_1000208D8(v3, v5);
}

uint64_t sub_10016EABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_10006E360();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_10016EB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10016DEF8(a1, *v3, a2, a3);
}

uint64_t BinaryEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for BinaryEncoder.KeyedContainer(0LL, a2, a3, a4);
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10034CD7C, v5);
  return KeyedEncodingContainer.init<A>(_:)(&v8, a2, v5, WitnessTable);
}

uint64_t BinaryEncoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  return sub_10016EBC0((uint64_t (*)(void))sub_10006E360, a1);
}

uint64_t BinaryEncoder.singleValueContainer()@<X0>(void *a1@<X8>)
{
  return sub_10016EBC0((uint64_t (*)(void))sub_10016F300, a1);
}

uint64_t sub_10016EBC0@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = a1();
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t BinaryEncoder.encode(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1000208D8(a1, a2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BinaryEncoder.encode(_:)( Swift::Double a1)
{
  Swift::Double v5 = a1;
  uint64_t v2 = sub_1000EF854((uint64_t)&v5, (uint64_t)v6);
  unint64_t v4 = v3;
  swift_beginAccess(v1 + 16, v6, 33LL, 0LL);
  sub_1000FA9C4(v2, v4);
  swift_endAccess(v6);
  sub_1000208D8(v2, v4);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of FixedWidthInteger.littleEndian.getter(v7, v8);
  sub_10016D190( (uint64_t)v6,  (uint64_t)sub_10016F344,  v2,  a2,  (uint64_t)&type metadata for Never,  (uint64_t)(&type metadata for () + 1),  (uint64_t)&protocol witness table for Never,  v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t sub_10016EE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1000EF854(a1, a2);
  unint64_t v6 = v5;
  swift_beginAccess(a3 + 16, v8, 33LL, 0LL);
  sub_1000FA9C4(v4, v6);
  swift_endAccess(v8);
  return sub_1000208D8(v4, v6);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  v40 = (char *)&v38 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v38 - v14;
  uint64_t v16 = *(void *)(a2 - 8);
  __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a2);
  if (swift_dynamicCast(v51, v18, a2, &type metadata for Data, 0LL))
  {
    uint64_t v19 = v51[0];
    unint64_t v20 = v51[1];
    swift_beginAccess(v3 + 16, &v41, 33LL, 0LL);
    sub_100020AFC(v19, v20);
    sub_1000FA9C4(v19, v20);
    swift_endAccess(&v41);
    sub_1000208D8(v19, v20);
    uint64_t v21 = v19;
    unint64_t v22 = v20;
  }

  else
  {
    uint64_t v38 = v3;
    if (!swift_dynamicCast(v15, v18, a2, v6, 0LL))
    {
      v50[1] = type metadata accessor for BinaryEncoder();
      v50[2] = sub_10016F360();
      uint64_t v41 = v38;
      swift_retain();
      dispatch thunk of Encodable.encode(to:)(&v41, a2, v39);
      sub_100002AC4(&v41);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, a2);
    }

    v23 = v40;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v40, v15, v6);
    uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v10, v23, v6);
    uint64_t v41 = UUID.uuid.getter(v24);
    char v42 = v25;
    char v43 = v26;
    char v44 = v27;
    char v45 = v28;
    char v46 = v29;
    char v47 = v30;
    char v48 = v31;
    char v49 = v32;
    uint64_t v33 = sub_1000EF854((uint64_t)&v41, (uint64_t)v50);
    uint64_t v35 = v34;
    v36 = *(void (**)(char *, uint64_t))(v7 + 8);
    v36(v10, v6);
    swift_beginAccess(v38 + 16, &v41, 33LL, 0LL);
    sub_1000FA9C4(v33, v35);
    swift_endAccess(&v41);
    v36(v40, v6);
    uint64_t v21 = v33;
    unint64_t v22 = v35;
  }

  sub_1000208D8(v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, a2);
}

void *BinaryEncoder.deinit()
{
  return v0;
}

uint64_t BinaryEncoder.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_10016F220()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 32, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*(void *)(v1 + 32));
}

uint64_t sub_10016F260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.container<A>(keyedBy:)(a1, a2, a3, a4);
}

uint64_t sub_10016F280@<X0>(void *a1@<X8>)
{
  return sub_10016F298((uint64_t (*)(void))sub_10006E360, a1);
}

uint64_t sub_10016F28C@<X0>(void *a1@<X8>)
{
  return sub_10016F298((uint64_t (*)(void))sub_10016F300, a1);
}

uint64_t sub_10016F298@<X0>(uint64_t (*a1)(void)@<X2>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = a1();
  *a2 = v4;
  return swift_retain(v4);
}

uint64_t type metadata accessor for BinaryEncoder()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreP2P13BinaryEncoder);
}

uint64_t type metadata accessor for BinaryEncoder.KeyedContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BinaryEncoder.KeyedContainer);
}

unint64_t sub_10016F300()
{
  unint64_t result = qword_100409A20;
  if (!qword_100409A20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034CCC4, &type metadata for BinaryEncoder.UnkeyedContainer);
    atomic_store(result, (unint64_t *)&qword_100409A20);
  }

  return result;
}

uint64_t sub_10016F344(uint64_t a1, uint64_t a2)
{
  return sub_10016EE1C(a1, a2, v2);
}

unint64_t sub_10016F360()
{
  unint64_t result = qword_1004064B0;
  if (!qword_1004064B0)
  {
    uint64_t v1 = type metadata accessor for BinaryEncoder();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for BinaryEncoder, v1);
    atomic_store(result, (unint64_t *)&qword_1004064B0);
  }

  return result;
}

uint64_t sub_10016F3A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 16, v7, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  *a2 = v4;
  a2[1] = v5;
  return sub_100020AFC(v4, v5);
}

ValueMetadata *type metadata accessor for BinaryEncoder.UnkeyedContainer()
{
  return &type metadata for BinaryEncoder.UnkeyedContainer;
}

uint64_t sub_10016F400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.encode<A>(_:)(a1, a4);
}

uint64_t sub_10016F428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BinaryEncoder.encode<A>(_:)(a1, a4, a6);
}

uint64_t sub_10016F450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10016EB18(a1, a2, a3);
}

char *Socket.__allocating_init(domain:type:proto:)(int a1, int a2, int a3)
{
  return Socket.init(domain:type:proto:)(a1, a2, a3);
}

uint64_t RoutingSocket.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RoutingSocket(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 0x676E6974756F72LL, 0xE700000000000000LL);
  *(_DWORD *)&v5[*(int *)(v2 + 20)] = 0;
  uint64_t v6 = type metadata accessor for Socket();
  swift_allocObject(v6, 20LL, 7LL);
  uint64_t v7 = Socket.init(domain:type:proto:)(17, 3, 0);
  if (!v7) {
    goto LABEL_4;
  }
  uint64_t v8 = v7;
  Swift::Int32 v9 = *((_DWORD *)v7 + 4);
  Swift::Int32 v10 = fcntl(_:_:)(v9, 3);
  if (fcntl(_:_:_:)(v9, 4, v10 | 4))
  {
    swift_release(v8);
LABEL_4:
    uint64_t v11 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v5, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1LL, 1LL, v2);
  }

  *(void *)&v5[*(int *)(v2 + 24)] = v8;
  sub_100170DC4((uint64_t)v5, a1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a1, 0LL, 1LL, v2);
  return sub_100170E08((uint64_t)v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RoutingSocket.clearNeighborDiscoveryTable(for:with:interfaceIndex:)( Swift::String a1, CoreP2P::WiFiAddress_optional *with, Swift::UInt32 interfaceIndex)
{
}

void RoutingSocket.updateNeighborDiscoveryTable(macAddress:ipv6Address:for:interfaceIndex:command:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
}

uint64_t RoutingSocket.macAddress(for:)(uint64_t a1)
{
  __int128 v20 = xmmword_1003398F0;
  int v11 = 0;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  int v17 = 0;
  int v9 = 1029;
  uint64_t v10 = 0x1100000807LL;
  uint64_t v4 = *(int *)(type metadata accessor for RoutingSocket(0LL) + 20);
  int v12 = *(_DWORD *)(v1 + v4) + 1;
  *(_DWORD *)(v1 + v4) = v12;
  sub_1000586C0(a1, (uint64_t)v23, &qword_100405D50);
  if (v23[32]) {
    __int16 v5 = 140;
  }
  else {
    __int16 v5 = 128;
  }
  __int16 v8 = v5;
  Data._Representation.append(contentsOf:)(&v8, v18);
  sub_1000586C0(a1, (uint64_t)&v21, &qword_100405D50);
  if ((v22 & 1) != 0)
  {
    int v19 = 0;
    *(void *)uint64_t v18 = 7708LL;
    *(_OWORD *)&v18[8] = v21;
    uint64_t v6 = &v20;
  }

  else
  {
    *(void *)&v18[8] = 0LL;
    *(_DWORD *)uint64_t v18 = 528;
    *(_DWORD *)&v18[4] = v21;
    uint64_t v6 = (__int128 *)&v18[16];
  }

  Data._Representation.append(contentsOf:)(v18, v6);
  *(void *)&v18[7] = 0LL;
  *(void *)&v18[12] = 0LL;
  *(_DWORD *)uint64_t v18 = 4628;
  *(_WORD *)&v18[4] = 6;
  v18[6] = 6;
  Data._Representation.append(contentsOf:)(v18, &v18[20]);
  sub_100170E44((uint64_t)&v20);
  if (!v2) {
    __asm { BR              X10 }
  }

  return sub_1000208D8(v20, *((unint64_t *)&v20 + 1));
}

void RoutingSocket.ipAddress(for:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100002274(&qword_100406B70);
  inited = (void *)swift_initStackObject(v4, v55);
  *((_OWORD *)inited + 1) = xmmword_10033A980;
  *((_OWORD *)inited + 2) = xmmword_10034D060;
  inited[6] = 0x40000000002LL;
  size_t v54 = 0LL;
  int v6 = sysctl((int *)inited + 8, 6u, 0LL, &v54, 0LL, 0LL);
  if (v6 < 0)
  {
    unsigned int v34 = v6;
    uint64_t v35 = swift_bridgeObjectRelease(inited);
    if (v34 == -1) {
      unsigned int v34 = errno.getter(v35, v36);
    }
    unint64_t v37 = sub_1000033FC();
    uint64_t v38 = swift_allocError(&type metadata for WiFiError, v37, 0LL, 0LL);
    *(void *)uint64_t v39 = v34;
    *(void *)(v39 + 8) = 0LL;
    goto LABEL_38;
  }

  uint64_t v7 = (unsigned __int16 *)malloc(v54);
  if (!v7)
  {
    swift_bridgeObjectRelease(inited);
    unint64_t v40 = sub_1000033FC();
    uint64_t v38 = swift_allocError(&type metadata for WiFiError, v40, 0LL, 0LL);
    *(_OWORD *)uint64_t v39 = xmmword_10033A9A0;
LABEL_38:
    *(_BYTE *)(v39 + 16) = 0;
    swift_willThrow(v38);
    return;
  }

  __int16 v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native(inited) & 1) == 0) {
    inited = sub_1000A6928(0LL, 6LL, 0, inited);
  }
  unsigned int v9 = sysctl((int *)inited + 8, 6u, v8, &v54, 0LL, 0LL);
  uint64_t v10 = swift_bridgeObjectRelease(inited);
  if ((v9 & 0x80000000) != 0)
  {
    if (v9 == -1) {
      unsigned int v9 = errno.getter(v10, v11);
    }
    unint64_t v41 = sub_1000033FC();
    uint64_t v32 = swift_allocError(&type metadata for WiFiError, v41, 0LL, 0LL);
    *(void *)uint64_t v42 = v9;
    *(void *)(v42 + 8) = 0LL;
    *(_BYTE *)(v42 + 16) = 0;
    goto LABEL_42;
  }

  int64_t v12 = v54;
  if (v54 < 0x5C || (size_t v13 = *v8, v54 < v13))
  {
LABEL_33:
    unint64_t v31 = sub_1000033FC();
    uint64_t v32 = swift_allocError(&type metadata for WiFiError, v31, 0LL, 0LL);
    *(void *)uint64_t v33 = 0LL;
    *(void *)(v33 + 8) = 0LL;
    *(_BYTE *)(v33 + 16) = 2;
LABEL_42:
    swift_willThrow(v32);
    free(v8);
    return;
  }

  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  int v48 = 1;
  uint64_t v14 = 92LL;
  int64_t v15 = v13;
  do
  {
    if (v13 >= 0x6C)
    {
      unint64_t v16 = v13 - 92;
      int v17 = (char *)v8 + v14;
      uint64_t v18 = *((unsigned __int8 *)v8 + v14);
      if (v16 >= v18 + 20)
      {
        BOOL v19 = __OFADD__(v14, v18);
        uint64_t v20 = v14 + v18;
        if (v19) {
          goto LABEL_47;
        }
        int v21 = v17[1];
        char v22 = (char *)v8 + v20;
        uint64_t v23 = *((unsigned __int8 *)v8 + v20 + 5);
        size_t v24 = v22[6];
        uint64_t v52 = *((void *)v22 + 1);
        int v53 = *((_DWORD *)v22 + 4);
        int v49 = v21;
        if ((_DWORD)v24)
        {
          char v25 = (char *)&v52 + v23;
          if (v24 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v51 = v24;
            memcpy(__dst, (char *)&v52 + v23, v24);
            uint64_t v28 = sub_100212134( *(uint64_t *)__dst,  *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v51 << 48));
            if ((v28 & 0x1000000000000LL) != 0) {
              goto LABEL_28;
            }
          }

          else
          {
            uint64_t v26 = type metadata accessor for __DataStorage(0LL);
            swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
            uint64_t v27 = __DataStorage.init(bytes:length:)(v25, v24);
            uint64_t v28 = sub_100212134(v24 << 32, v27 | 0x4000000000000000LL);
            if ((v28 & 0x1000000000000LL) != 0) {
              goto LABEL_28;
            }
          }
        }

        else
        {
          uint64_t v28 = sub_100212134(0LL, 0xC000000000000000LL);
          if ((v28 & 0x1000000000000LL) != 0) {
            goto LABEL_28;
          }
        }

        *(_DWORD *)__dst = v28;
        __dst[4] = BYTE4(v28);
        __dst[5] = BYTE5(v28);
        LOWORD(v52) = a1;
        BYTE2(v52) = BYTE2(a1);
        BYTE3(v52) = BYTE3(a1);
        BYTE4(v52) = BYTE4(a1);
        BYTE5(v52) = BYTE5(a1);
        if ((_DWORD)v28 == (_DWORD)v52 && *(unsigned __int16 *)&__dst[4] == WORD2(v52))
        {
          if (v49 == 30)
          {
            __chkstk_darwin(&v46);
            *(_OWORD *)((char *)&v46 - 20) = *(_OWORD *)(v17 + 12);
            *((_OWORD *)&v46 - 2) = *(_OWORD *)v17;
            uint64_t v30 = *(&v46 - 2);
            uint64_t v46 = *(&v46 - 3);
            uint64_t v47 = v30;
            int v48 = 0;
          }

          else if (v49 == 2)
          {
            uint64_t v43 = 0LL;
            char v44 = 0;
            uint64_t v45 = *((unsigned int *)v17 + 1);
            goto LABEL_44;
          }
        }
      }
    }

Swift::Bool __swiftcall NSXPCConnection.has(entitlement:)(Swift::String entitlement)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v6, v3);
    swift_unknownObjectRelease(v3);
  }

  else
  {
    memset(v6, 0, sizeof(v6));
  }

  sub_1000586C0((uint64_t)v6, (uint64_t)v7, &qword_100405280);
  if (v8)
  {
    if ((swift_dynamicCast(&v5, v7, &type metadata for Any[8], &type metadata for Bool, 6LL) & 1) != 0) {
      return v5;
    }
  }

  else
  {
    sub_1000225EC((uint64_t)v7, &qword_100405280);
  }

  return 0;
}

void NWConnection.send<A>(_:errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for NWConnection.SendCompletion(0LL);
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = JSONEncoder.init()();
  dispatch thunk of JSONEncoder.encode<A>(_:)(a1, a4, a5);
  uint64_t v12 = v11;
  swift_release(v10);
  __asm { BR              X11 }

uint64_t NWConnection.send(_:errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for NWConnection.SendCompletion(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t (**)(uint64_t))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = swift_allocObject(&unk_1003E9598, 32LL, 7LL);
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  *uint64_t v11 = sub_100171FCC;
  v11[1] = (uint64_t (*)(uint64_t))v12;
  (*(void (**)(uint64_t (**)(uint64_t), void, uint64_t))(v9 + 104))( v11,  enum case for NWConnection.SendCompletion.contentProcessed(_:),  v8);
  type metadata accessor for NWConnection.ContentContext(0LL);
  uint64_t v13 = swift_retain();
  uint64_t v14 = static NWConnection.ContentContext.defaultMessage.getter(v13);
  NWConnection.send(content:contentContext:isComplete:completion:)(a1, a2, v14, 1LL, v11);
  swift_release(v14);
  return (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10017070C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100002274(&qword_100409D08);
  __chkstk_darwin(v4);
  int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NWError(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001723F8(a1, (uint64_t)v6);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  unint64_t v12 = sub_100172440();
  uint64_t v13 = Error.localizedDescription.getter(v7, v12);
  uint64_t v15 = v14;
  a2(v13);
  swift_bridgeObjectRelease(v15);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

char *Socket.init(domain:type:proto:)(int a1, int a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v12 = socket(a1, a2, a3);
  *(_DWORD *)(v4 + 16) = v12;
  if ((v12 & 0x80000000) == 0) {
    return (char *)v4;
  }
  swift_release(v4);
  uint64_t v13 = Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x676E6974756F72LL,  0xE700000000000000LL);
  uint64_t v14 = (void *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v14, v15))
  {
LABEL_5:

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0LL;
  }

  uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v17 = swift_slowAlloc(32LL, -1LL);
  uint64_t v25 = v17;
  *(_DWORD *)uint64_t v16 = 136315138;
  int v19 = errno.getter(v17, v18);
  unint64_t result = strerror(v19);
  if (result)
  {
    uint64_t v21 = String.init(cString:)(result);
    unint64_t v23 = v22;
    uint64_t v24 = sub_10000235C(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v15, "Failed to create socket: %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for RoutingSocket(uint64_t a1)
{
  uint64_t result = qword_100409CC8;
  if (!qword_100409CC8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RoutingSocket);
  }
  return result;
}

uint64_t Socket.__allocating_init(rawValue:)(int a1)
{
  uint64_t result = swift_allocObject(v1, 20LL, 7LL);
  if (a1 < 0) {
    __break(1u);
  }
  else {
    *(_DWORD *)(result + 16) = a1;
  }
  return result;
}

uint64_t Socket.init(rawValue:)(uint64_t result)
{
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v1 + 16) = result;
    return v1;
  }

  return result;
}

uint64_t Socket.deinit()
{
  return v0;
}

uint64_t Socket.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 20LL, 7LL);
}

uint64_t sub_100170AF8(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = type metadata accessor for RoutingSocket(0LL);
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(int *)(result + 24);
  size_t v9 = a2 - (void)a1;
  uint64_t result = write(*(_DWORD *)(*(void *)(a3 + v8) + 16LL), a1, v9);
  if (result < 0)
  {
LABEL_10:
    if ((unint64_t)result >= 0xFFFFFFFF80000000LL)
    {
LABEL_11:
      uint64_t v12 = result;
      unint64_t v13 = sub_1000033FC();
      uint64_t v14 = swift_allocError(&type metadata for WiFiError, v13, 0LL, 0LL);
      *(void *)uint64_t v15 = v12;
      *(void *)(v15 + 8) = 0LL;
      *(_BYTE *)(v15 + 16) = 0;
      return swift_willThrow(v14);
    }

    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }

  uint64_t result = read(*(_DWORD *)(*(void *)(a3 + v8) + 16LL), a1, v9);
  if (result < 1)
  {
LABEL_7:
    if ((result & 0x8000000000000000LL) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v11 = *(int *)(v7 + 20);
  while (a1[5] != *(_DWORD *)(a3 + v11))
  {
    uint64_t result = read(*(_DWORD *)(*(void *)(a3 + v8) + 16LL), a1, v9);
    if (result < 1) {
      goto LABEL_7;
    }
  }

  return result;
}

uint64_t sub_100170C20(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = type metadata accessor for RoutingSocket(0LL);
  if (!a1) {
    goto LABEL_24;
  }
  uint64_t v9 = result;
  uint64_t v10 = *(int *)(result + 24);
  size_t v11 = a2 - (void)a1;
  ssize_t v12 = write(*(_DWORD *)(*(void *)(a3 + v10) + 16LL), a1, v11);
  if (v12 < 0)
  {
    unint64_t v14 = v12;
    uint64_t v15 = errno.getter(v12, v13);
    if ((_DWORD)v15 != 3 || a4 != 2)
    {
      uint64_t result = errno.getter(v15, v16);
      if ((_DWORD)result != 17 || a4 != 1)
      {
        if (v14 >= 0xFFFFFFFF80000000LL)
        {
          uint64_t v22 = v14;
          goto LABEL_18;
        }

        __break(1u);
        goto LABEL_23;
      }
    }
  }

  uint64_t result = read(*(_DWORD *)(*(void *)(a3 + v10) + 16LL), a1, v11);
  if (result < 1)
  {
LABEL_11:
    unint64_t v20 = result;
    if ((result & 0x8000000000000000LL) == 0) {
      return result;
    }
    uint64_t result = errno.getter(result, v18);
    if ((_DWORD)result == 35) {
      return result;
    }
    uint64_t result = errno.getter(result, v21);
    if ((_DWORD)result == 35) {
      return result;
    }
    if (v20 >= 0xFFFFFFFF80000000LL)
    {
      uint64_t v22 = v20;
LABEL_18:
      if (v22 == 0xFFFFFFFFLL) {
        uint64_t v22 = errno.getter(result, v17);
      }
      unint64_t v23 = sub_1000033FC();
      uint64_t v24 = swift_allocError(&type metadata for WiFiError, v23, 0LL, 0LL);
      *(void *)uint64_t v25 = v22;
      *(void *)(v25 + 8) = 0LL;
      *(_BYTE *)(v25 + 16) = 0;
      return swift_willThrow(v24);
    }

uint64_t type metadata accessor for Socket()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreP2P6Socket);
}

uint64_t sub_100170DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingSocket(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100170E08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingSocket(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_100170E44(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_100170EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  uint64_t result = sub_100170AF8(&v6, (uint64_t)&v6 + BYTE6(a1), v3);
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *uint64_t v2 = v6;
  v2[1] = v5;
  return result;
}

void sub_100171070(int *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v9 = v8;
  uint64_t v10 = __DataStorage._offset.getter();
  uint64_t v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v12 = v7 - v6;
  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_100170C20((_DWORD *)(v9 + v11), v9 + v11 + v14, a2, a3);
}

void sub_100171120(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_100170AF8((_DWORD *)(v7 + v9), v7 + v9 + v12, a2);
}

void sub_1001711C0(uint64_t a1, unsigned int a2)
{
  unsigned int v112 = a2;
  uint64_t v110 = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274(&qword_100406B70);
  inited = (void *)swift_initStackObject(v7, v117);
  *((_OWORD *)inited + 1) = xmmword_10033A980;
  *((_OWORD *)inited + 2) = xmmword_10034D060;
  inited[6] = 1LL;
  size_t v113 = 0LL;
  int v9 = sysctl((int *)inited + 8, 6u, 0LL, &v113, 0LL, 0LL);
  if (v9 < 0)
  {
    unsigned int v16 = v9;
    swift_bridgeObjectRelease(inited);
    unint64_t v17 = sub_1000033FC();
    uint64_t v18 = swift_allocError(&type metadata for WiFiError, v17, 0LL, 0LL);
    *(void *)uint64_t v19 = v16;
    *(void *)(v19 + 8) = 0LL;
LABEL_10:
    *(_BYTE *)(v19 + 16) = 0;
    swift_willThrow(v18);
    return;
  }

  uint64_t v10 = (char *)malloc(v113);
  if (!v10)
  {
    swift_bridgeObjectRelease(inited);
    unint64_t v20 = sub_1000033FC();
    uint64_t v18 = swift_allocError(&type metadata for WiFiError, v20, 0LL, 0LL);
    *(_OWORD *)uint64_t v19 = xmmword_10033A9A0;
    goto LABEL_10;
  }

  uint64_t v11 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native(inited) & 1) == 0) {
    inited = sub_1000A6928(0LL, 6LL, 0, inited);
  }
  int v12 = sysctl((int *)inited + 8, 6u, v11, &v113, 0LL, 0LL);
  if (v12 < 0)
  {
    unsigned int v21 = v12;
    swift_bridgeObjectRelease(inited);
    unint64_t v22 = sub_1000033FC();
    uint64_t v23 = swift_allocError(&type metadata for WiFiError, v22, 0LL, 0LL);
    *(void *)uint64_t v24 = v21;
    *(void *)(v24 + 8) = 0LL;
    *(_BYTE *)(v24 + 16) = 0;
    swift_willThrow(v23);
    free(v11);
    return;
  }

  v111 = v11;
  v98 = inited;
  int64_t v14 = v113;
  if (v113 >= 0x5C)
  {
    v95 = v6;
    uint64_t v96 = v4;
    uint64_t v97 = v3;
    uint64_t v100 = v2;
    int64_t v25 = 0LL;
    unsigned int v99 = bswap32(v112) >> 16;
    *(void *)&__int128 v13 = 136315394LL;
    __int128 v94 = v13;
    v93 = (char *)&type metadata for Any + 8;
    uint64_t v15 = v111;
    size_t v102 = v113;
    while (1)
    {
      uint64_t v26 = &v15[v25];
      size_t v27 = *(unsigned __int16 *)&v15[v25];
      BOOL v28 = __OFADD__(v25, v27);
      v25 += v27;
      if (v28)
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
      }

      if (v14 < v25) {
        goto LABEL_61;
      }
      char v29 = v26[2];
      __int16 v30 = *((_WORD *)v26 + 2);
      uint64_t v31 = *((void *)v26 + 1);
      int v32 = *((_DWORD *)v26 + 4);
      int v33 = *((_DWORD *)v26 + 22);
      __chkstk_darwin(&v92);
      *(_OWORD *)((char *)&v90 - 4) = *(_OWORD *)&v15[v38 + 12];
      __int128 v89 = *(_OWORD *)&v15[v38];
      BOOL v28 = __OFADD__(v38, 28LL);
      uint64_t v39 = v38 + 28;
      if (v28) {
        goto LABEL_64;
      }
      uint64_t v101 = v90;
      uint64_t v109 = *((void *)&v89 + 1);
      unint64_t v40 = &v15[v39];
      uint64_t v41 = v15[v39 + 5];
      size_t v42 = v40[6];
      uint64_t v115 = *((void *)v40 + 1);
      int v116 = *((_DWORD *)v40 + 4);
      __int128 v108 = v34;
      __int128 v107 = v35;
      __int128 v106 = v36;
      __int128 v105 = v37;
      if ((_DWORD)v42)
      {
        int v103 = v33;
        uint64_t v43 = (char *)&v115 + v41;
        if (v42 <= 0xE)
        {
          *(void *)((char *)&__dst + 6) = 0LL;
          *(void *)&__int128 __dst = 0LL;
          BYTE14(__dst) = v42;
          memcpy(&__dst, (char *)&v115 + v41, v42);
          uint64_t v46 = __dst;
          unint64_t v47 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
        }

        else
        {
          uint64_t v44 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
          uint64_t v45 = __DataStorage.init(bytes:length:)(v43, v42);
          uint64_t v46 = v42 << 32;
          unint64_t v47 = v45 | 0x4000000000000000LL;
        }

        int v33 = v103;
      }

      else
      {
        uint64_t v46 = 0LL;
        unint64_t v47 = 0xC000000000000000LL;
      }

      uint64_t v48 = sub_100212134(v46, v47);
      if (v91 != v112)
      {
        if (v112 >= 0x10000)
        {
          LOBYTE(v89) = 2;
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v89,  3455LL,  0);
          __break(1u);
          return;
        }

        if (v99 != WORD1(v109)) {
          goto LABEL_58;
        }
      }

      if ((v110 & 0x1000000000000LL) != 0)
      {
        if ((v48 & 0x1000000000000LL) != 0) {
          goto LABEL_58;
        }
      }

      else if ((v48 & 0x1000000000000LL) == 0)
      {
        LODWORD(__dst) = v110;
        WORD2(__dst) = WORD2(v110);
        LODWORD(v115) = v48;
        BYTE4(v115) = BYTE4(v48);
        BYTE5(v115) = BYTE5(v48);
        if ((_DWORD)v110 == (_DWORD)v48 && WORD2(v110) == WORD2(v115)) {
          goto LABEL_58;
        }
      }

      uint64_t v50 = type metadata accessor for RoutingSocket(0LL);
      uint64_t v51 = *(int *)(v50 + 20);
      uint64_t v52 = v100;
      int v53 = *(_DWORD *)(v100 + v51) + 1;
      *(_DWORD *)(v100 + v51) = v53;
      *(_WORD *)uint64_t v26 = v27;
      v26[2] = v29;
      v26[3] = 2;
      *((_WORD *)v26 + 2) = v30;
      *((void *)v26 + 1) = v31;
      *((_DWORD *)v26 + 4) = v32;
      *((_DWORD *)v26 + 5) = v53;
      *(_OWORD *)(v26 + 24) = v108;
      *(_OWORD *)(v26 + 40) = v107;
      *(_OWORD *)(v26 + 56) = v106;
      *(_OWORD *)(v26 + 72) = v105;
      *((_DWORD *)v26 + 22) = v33;
      int v54 = *(_DWORD *)(*(void *)(v52 + *(int *)(v50 + 24)) + 16LL);
      ssize_t v55 = write(v54, v26, v27);
      if (v55 < 0)
      {
        unint64_t v57 = v55;
        uint64_t v58 = errno.getter(v55, v56);
        if ((_DWORD)v58 != 3) {
          break;
        }
      }

      ssize_t v60 = read(v54, v26, v27);
      if (v60 >= 1)
      {
        int64_t v14 = v102;
        if (*((_DWORD *)v26 + 5) == v53) {
          goto LABEL_59;
        }
        while (1)
        {
          ssize_t v60 = read(v54, v26, v27);
          if (v60 < 1) {
            break;
          }
          if (*((_DWORD *)v26 + 5) == v53) {
            goto LABEL_59;
          }
        }

        unint64_t v62 = v60;
        if ((v60 & 0x8000000000000000LL) == 0) {
          goto LABEL_59;
        }
LABEL_51:
        uint64_t v84 = errno.getter(v60, v61);
        if ((_DWORD)v84 == 35) {
          goto LABEL_59;
        }
        uint64_t v86 = errno.getter(v84, v85);
        if ((_DWORD)v86 == 35) {
          goto LABEL_59;
        }
        if (v62 < 0xFFFFFFFF80000000LL) {
          goto LABEL_66;
        }
        unint64_t v62 = v62;
        unint64_t v88 = sub_1000033FC();
        uint64_t v67 = swift_allocError(&type metadata for WiFiError, v88, 0LL, 0LL);
        uint64_t v69 = v67;
        *(void *)uint64_t v68 = v62;
        uint64_t v63 = v97;
        uint64_t v64 = v96;
        v65 = v95;
        goto LABEL_48;
      }

      unint64_t v62 = v60;
      int64_t v14 = v102;
      if (v60 < 0) {
        goto LABEL_51;
      }
LABEL_59:
      if (__OFADD__(v25, 92LL)) {
        goto LABEL_63;
      }
      uint64_t v15 = v111;
      if (v14 < v25 + 92) {
        goto LABEL_61;
      }
    }

    if (v57 < 0xFFFFFFFF80000000LL) {
      goto LABEL_65;
    }
    unint64_t v57 = v57;
    uint64_t v63 = v97;
    uint64_t v64 = v96;
    v65 = v95;
    unint64_t v66 = sub_1000033FC();
    uint64_t v67 = swift_allocError(&type metadata for WiFiError, v66, 0LL, 0LL);
    uint64_t v69 = v67;
    *(void *)uint64_t v68 = v57;
LABEL_48:
    *(void *)(v68 + 8) = 0LL;
    *(_BYTE *)(v68 + 16) = 0;
    swift_willThrow(v67);
    uint64_t v104 = 0LL;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v65, v100, v63);
    swift_errorRetain(v69);
    uint64_t v70 = swift_errorRetain(v69);
    v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.error.getter();
    v73 = v71;
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v74 = swift_slowAlloc(22LL, -1LL);
      *(void *)&__int128 v107 = swift_slowAlloc(8LL, -1LL);
      *(void *)&__int128 v108 = swift_slowAlloc(32LL, -1LL);
      uint64_t v115 = v108;
      *(_DWORD *)uint64_t v74 = v94;
      v75 = (char *)swift_slowAlloc(46LL, -1LL);
      *(void *)&__int128 __dst = v109;
      *((void *)&__dst + 1) = v101;
      inet_ntop(30, &__dst, v75, 0x2Eu);
      uint64_t v76 = String.init(cString:)(v75);
      unint64_t v78 = v77;
      swift_slowDealloc(v75, -1LL, -1LL);
      *(void *)(v74 + 4) = sub_10000235C(v76, v78, &v115);
      swift_bridgeObjectRelease(v78);
      *(_WORD *)(v74 + 12) = 2112;
      swift_errorRetain(v69);
      uint64_t v79 = _swift_stdlib_bridgeErrorToNSError(v69);
      *(void *)(v74 + 14) = v79;
      uint64_t v80 = v107;
      *(void *)__int128 v107 = v79;
      swift_errorRelease(v69);
      swift_errorRelease(v69);
      v81 = v73;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  v72,  "Failed to remove from NDP entry for %s because %@",  (uint8_t *)v74,  0x16u);
      uint64_t v82 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v80, 1LL, v82);
      swift_slowDealloc(v80, -1LL, -1LL);
      uint64_t v83 = v108;
      swift_arrayDestroy(v108, 1LL, v93);
      swift_slowDealloc(v83, -1LL, -1LL);
      swift_slowDealloc(v74, -1LL, -1LL);

      swift_errorRelease(v69);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v65, v97);
    }

    else
    {
      swift_errorRelease(v69);
      swift_errorRelease(v69);
      swift_errorRelease(v69);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v63);
    }

LABEL_58:
    int64_t v14 = v102;
    goto LABEL_59;
  }

  uint64_t v15 = v111;
LABEL_61:
  swift_bridgeObjectRelease(v98);
  free(v15);
}

    swift_bridgeObjectRelease_n(v46, 2LL);
    uint64_t v51 = *(void *)&v25[v37];
    *(void *)&v25[v37] = 0LL;
    swift_unknownObjectRelease(v51);
    uint64_t v52 = *v39;
    *uint64_t v39 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v52);
    goto LABEL_59;
  }

  sub_1000225EC((uint64_t)&v58, (uint64_t *)&unk_10040DCB0);
LABEL_60:
  sub_1002730CC();
}

  v128 = (v122 & 0xFE00000000LL) == 0 || v120 == 0x300000000LL;
LABEL_64:
  v130 = v314 & 0xFFFFFFFFFFFFLL;
  if (Optional<A>.isDFS.getter(v314 & 0xFFFFFFFFFFFFLL) || Optional<A>.isDFS.getter(v122 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_66;
  }
  if (v106 == 0x300000000LL || (_DWORD)v107 != 1 || v120 == 0x300000000LL)
  {
    if (v128 || v121) {
      goto LABEL_66;
    }
LABEL_111:
    v235 = (uint64_t)v33;
LABEL_112:
    sub_10005802C(v235, type metadata accessor for AWDLPeer);
    return;
  }

  v147 = (const mach_header_64 *)(v122 & 0xFF00000000LL) == &_mh_execute_header || v128;
  if (((v147 | v121) & 1) == 0) {
    goto LABEL_111;
  }
LABEL_66:
  v131 = Optional<A>.isDFS.getter(v130);
  v297 = v33;
  if (!v131 && !Optional<A>.isDFS.getter(v122 & 0xFFFFFFFFFFFFLL))
  {
    v148 = (uint64_t)v33;
    v144 = v286;
    sub_100057FE8(v148, v286, type metadata accessor for AWDLPeer);
    goto LABEL_81;
  }

  v314 = v120;
  v308 = v107;
  v133 = v304;
  v132 = v305;
  v134 = swift_getAssociatedTypeWitness(255LL, v304, v305, &protocol requirements base descriptor for P2PControls);
  v135 = swift_getAssociatedConformanceWitness( v133,  v132,  v134,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  v136 = *(uint64_t (**)(void, void))(v135 + 8);
  v137 = swift_checkMetadataState(0LL, v134);
  v307 = v136;
  v138 = v136(v137, v135);
  v139 = *WiFiDriverCapabilities.supportsDFSProxy.unsafeMutableAddressor();
  v323 = v138;
  v315[0] = v139;
  v140 = sub_100270384();
  swift_bridgeObjectRetain_n(v139, 2LL);
  ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v323,  &type metadata for WiFiDriverCapabilities.Kind,  v140);
  v141 = v315[0];
  v142 = sub_10007990C(v315[0], v139);
  swift_bridgeObjectRelease(v138);
  swift_bridgeObjectRelease(v139);
  swift_bridgeObjectRelease(v141);
  v143 = (uint64_t)v33;
  v144 = v286;
  sub_100057FE8(v143, v286, type metadata accessor for AWDLPeer);
  if ((v142 & 1) == 0) {
    goto LABEL_81;
  }
  v145 = v310;
  v146 = v273;
  sub_1000226B0(v144 + v310[14], v273, (uint64_t *)&unk_1004104A0);
  if (v279(v146, 1LL, v280) == 1)
  {
    sub_1000225EC(v146, (uint64_t *)&unk_1004104A0);
    goto LABEL_81;
  }

  v233 = *(_BYTE *)(v146 + 85);
  sub_10005802C(v146, type metadata accessor for AWDLActionFrame.DataPathState);
  v149 = sub_10005802C(v144, type metadata accessor for AWDLPeer);
  if ((v233 & 1) == 0) {
    goto LABEL_82;
  }
  if (v106 == 0x300000000LL || !(_DWORD)v308)
  {
    v253 = swift_checkMetadataState(0LL, v134);
    v254 = v307(v253, v135);
    v255 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    v323 = v254;
    v315[0] = v255;
    swift_bridgeObjectRetain_n(v255, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v323,  &type metadata for WiFiDriverCapabilities.Kind,  v140);
    v256 = v315[0];
    v257 = sub_10007990C(v315[0], v255);
    swift_bridgeObjectRelease(v254);
    swift_bridgeObjectRelease(v255);
    swift_bridgeObjectRelease(v256);
    v144 = v265;
    sub_100057FE8((uint64_t)v297, v265, type metadata accessor for AWDLPeer);
    v234 = v314;
    if ((v257 & 1) != 0)
    {
      sub_10005802C(v144, type metadata accessor for AWDLPeer);
LABEL_129:
      v235 = (uint64_t)v297;
      goto LABEL_112;
    }
  }

  else
  {
    v144 = v265;
    sub_100057FE8((uint64_t)v297, v265, type metadata accessor for AWDLPeer);
    v234 = v314;
  }

  if (v234 == 0x300000000LL)
  {
    v258 = v264;
    sub_100057FE8(v144, v264, type metadata accessor for AWDLPeer);
    goto LABEL_128;
  }

  v259 = v292 & 0xFF00000000LL;
  v258 = v264;
  sub_100057FE8(v144, v264, type metadata accessor for AWDLPeer);
  if (!v259)
  {
    v260 = v263;
    sub_1000226B0(v258 + v145[14], v263, (uint64_t *)&unk_1004104A0);
    if (v279(v260, 1LL, v280) != 1)
    {
      v261 = *(_BYTE *)(v260 + 84);
      sub_10005802C(v260, type metadata accessor for AWDLActionFrame.DataPathState);
      sub_10005802C(v258, type metadata accessor for AWDLPeer);
      v149 = sub_10005802C(v144, type metadata accessor for AWDLPeer);
      if ((v261 & 1) != 0) {
        goto LABEL_129;
      }
      goto LABEL_82;
    }

    sub_1000225EC(v260, (uint64_t *)&unk_1004104A0);
    sub_10005802C(v258, type metadata accessor for AWDLPeer);
LABEL_81:
    v149 = sub_10005802C(v144, type metadata accessor for AWDLPeer);
    goto LABEL_82;
  }

void sub_100171B58(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  int v24 = 327680;
  __int16 v25 = 0;
  uint64_t v28 = 0LL;
  uint64_t v27 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v33 = 0LL;
  int v29 = 4;
  uint64_t v26 = 0x300000804LL;
  uint64_t v35 = 7708LL;
  unsigned int v41 = a4;
  if (a4 < 0x10000)
  {
    uint64_t v6 = v5;
    char v7 = a1;
    __int16 v36 = a2;
    __int16 v37 = bswap32(a4) >> 16;
    __int16 v38 = WORD2(a2);
    __int16 v39 = HIWORD(a2);
    unint64_t v8 = a1 >> 40;
    uint64_t v40 = a3;
    unint64_t v9 = HIDWORD(a1);
    memset(v23, 0, sizeof(v23));
    unint64_t v10 = a1 >> 24;
    unint64_t v11 = a1 >> 16;
    v21[0] = 4628;
    unint64_t v12 = a1 >> 8;
    void v21[2] = 6;
    char v22 = 6;
    v21[1] = a4;
    uint64_t v13 = sub_100002274(&qword_1004040A8);
    uint64_t v14 = swift_allocObject(v13, 38LL, 7LL);
    *(_OWORD *)(v14 + 16) = xmmword_10033A980;
    *(_BYTE *)(v14 + 32) = v7;
    *(_BYTE *)(v14 + 33) = v12;
    *(_BYTE *)(v14 + 34) = v11;
    *(_BYTE *)(v14 + 35) = v10;
    *(_BYTE *)(v14 + 36) = v9;
    *(_BYTE *)(v14 + 37) = v8;
    uint64_t v15 = sub_1000FB08C(v14);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease(v14);
    *(void *)&__int128 v34 = v15;
    *((void *)&v34 + 1) = v17;
    unint64_t v18 = sub_10005D508();
    DataProtocol.copyBytes(to:)(&v23[1], &v24, &type metadata for Data, v18);
    sub_1000208D8(v15, v17);
    LOWORD(v24) = 140;
    uint64_t v19 = *(int *)(type metadata accessor for RoutingSocket(0LL) + 20);
    HIDWORD(v27) = *(_DWORD *)(v6 + v19) + 1;
    *(_DWORD *)(v6 + v19) = HIDWORD(v27);
    if ((a5 & 0x80000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      goto LABEL_7;
    }

    if (a5 < 0x100)
    {
      HIBYTE(v24) = a5;
      __int128 v34 = xmmword_1003398F0;
      Data._Representation.append(contentsOf:)(&v24, &v34);
      Data._Representation.append(contentsOf:)(&v35, &v42);
      Data._Representation.append(contentsOf:)(v21, &v24);
      __asm { BR              X12 }
    }
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_7:
  __break(1u);
  JUMPOUT(0x100171F98LL);
}

uint64_t sub_100171FA8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100171FCC(uint64_t a1)
{
  return sub_10017070C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t *initializeBufferWithCopyOfBuffer for RoutingSocket(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Logger(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }

  swift_retain(v9);
  return a1;
}

uint64_t destroy for RoutingSocket(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 24)));
}

uint64_t initializeWithCopy for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t initializeWithTake for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100172274);
}

uint64_t sub_100172274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001722FC);
}

uint64_t sub_1001722FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + swift_release(*(void *)(v0 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_100172374(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001723F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100409D08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100172440()
{
  unint64_t result = qword_100409D10;
  if (!qword_100409D10)
  {
    uint64_t v1 = type metadata accessor for NWError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NWError, v1);
    atomic_store(result, (unint64_t *)&qword_100409D10);
  }

  return result;
}

uint64_t *OS_dispatch_queue.p2p.unsafeMutableAddressor()
{
  if (qword_100404328 != -1) {
    swift_once(&qword_100404328, sub_10017437C);
  }
  return &static OS_dispatch_queue.p2p;
}

uint64_t *OS_dispatch_queue.nan.unsafeMutableAddressor()
{
  if (qword_100404318 != -1) {
    swift_once(&qword_100404318, sub_1001740DC);
  }
  return &static OS_dispatch_queue.nan;
}

uint64_t static DispatchTime.- infix(_:_:)()
{
  return DispatchTime.distance(to:)();
}

BOOL sub_100172530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchTimeInterval.never(_:), v4);
  char v10 = static DispatchTimeInterval.== infix(_:_:)(a2, v7);
  unint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) != 0) {
    return 1LL;
  }
  v9(v7, v8, v4);
  char v13 = static DispatchTimeInterval.== infix(_:_:)(a1, v7);
  v11(v7, v4);
  if ((v13 & 1) != 0) {
    return 0LL;
  }
  uint64_t v14 = sub_100172848();
  return v14 >= sub_100172848();
}

uint64_t sub_100172640(unsigned __int8 a1, char a2)
{
  int v4 = a1;
  uint64_t v5 = sub_100002274(&qword_100407088);
  if (v4 == 2) {
    return 1LL;
  }
  if (a2 == 2) {
    return 0LL;
  }
  if (a1 == 3) {
    return 1LL;
  }
  if (a2 == 3) {
    return 0LL;
  }
  if (a1 == 4) {
    return 1LL;
  }
  if (a2 == 4) {
    return 0LL;
  }
  if (a1 == 5) {
    return 1LL;
  }
  if (a2 == 5) {
    return 0LL;
  }
  if (a1 == 6) {
    return 1LL;
  }
  if (a2 == 6) {
    return 0LL;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
  __break(1u);
  return result;
}

BOOL sub_10017274C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000LL) != 0) {
    LODWORD(a2) = dword_10034D260[(int)a2];
  }
  if ((a1 & 0x100000000LL) != 0) {
    LODWORD(a1) = dword_10034D260[(int)a1];
  }
  return a2 >= a1;
}

uint64_t DispatchTimeInterval.nanDiscoveryWindowCount.getter()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = sub_100172848();
  *unint64_t v3 = 0x80000LL;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))( v3,  enum case for DispatchTimeInterval.microseconds(_:),  v0);
  uint64_t v5 = sub_100172848();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v1 + 8))(v3, v0);
  if (v5)
  {
    if (v4 != 0x8000000000000000LL || v5 != -1) {
      return v4 / v5;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100172848()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = 1000000000LL;
LABEL_7:
    uint64_t v9 = v7 * v8;
    uint64_t v10 = (unsigned __int128)(v7 * (__int128)v8) >> 64;
    BOOL v11 = v7 <= 0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11) {
      unint64_t v12 = 0x8000000000000000LL;
    }
    if (v10 == v9 >> 63) {
      return v9;
    }
    else {
      return v12;
    }
  }

  if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = 1000000LL;
    goto LABEL_7;
  }

  if (v6 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = 1000LL;
    goto LABEL_7;
  }

  if (v6 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(void *)v5;
  }

  else
  {
    if (v6 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }

uint64_t DispatchTimeInterval.rawSeconds.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000000LL;
  }

  else if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000LL;
  }

  else
  {
    if (v6 != enum case for DispatchTimeInterval.microseconds(_:))
    {
      if (v6 != enum case for DispatchTimeInterval.nanoseconds(_:))
      {
        if (v6 != enum case for DispatchTimeInterval.never(_:)) {
          (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
        }
        return 0x7FFFFFFFFFFFFFFFLL;
      }

      (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
      uint64_t v9 = *v5;
      goto LABEL_12;
    }

    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000LL;
  }

  uint64_t v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
    if (v7 <= 0) {
      return 0x8000000000000000LL;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }

void DispatchTime.hash(into:)()
{
  Swift::UInt64 v0 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v0);
}

uint64_t static DispatchTime.+= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  + infix(_:_:)(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
}

Swift::Int DispatchTime.hashValue.getter()
{
  Swift::UInt64 v0 = Hasher.init(_seed:)(v3, 0LL);
  Swift::UInt64 v1 = DispatchTime.rawValue.getter(v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100172CB4(uint64_t a1)
{
  Swift::UInt64 v1 = Hasher.init(_seed:)(v4, a1);
  Swift::UInt64 v2 = DispatchTime.rawValue.getter(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t DispatchTime.description.getter()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1004041A0 != -1) {
    swift_once(&qword_1004041A0, sub_1001207BC);
  }
  (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
  uint64_t v9 = sub_10000AF70( &qword_100409D18,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime,  (uint64_t)&protocol conformance descriptor for DispatchTime);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v0, v8, v5, v9) & 1) != 0)
  {
    DispatchTime.distance(to:)(v8);
    uint64_t v16 = DispatchTimeInterval.description.getter();
    uint64_t v17 = v10;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v11 = 1869046048LL;
    unint64_t v12 = 0xE400000000000000LL;
  }

  else
  {
    if ((static DispatchTime.< infix(_:_:)(v8, v0) & 1) == 0)
    {
      uint64_t v14 = 7827310LL;
      goto LABEL_9;
    }

    DispatchTime.distance(to:)(v0);
    uint64_t v16 = DispatchTimeInterval.description.getter();
    uint64_t v17 = v13;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v11 = 0x726574616C20LL;
    unint64_t v12 = 0xE600000000000000LL;
  }

  String.append(_:)(*(Swift::String *)&v11);
  uint64_t v14 = v16;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v14;
}

uint64_t DispatchTime.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v1, v9);
  unint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v8, 1LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v14 = sub_100002274(&qword_100405DC0);
  uint64_t v15 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v11, &v18, v8, v5, v9, v14, v15);
}

uint64_t sub_100173070(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v1, a1);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v10, 1LL, 1LL, v14);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v15 = sub_100002274(&qword_100405DC0);
  uint64_t v16 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v12, &v19, v10, v6, a1, v15, v16);
}

uint64_t static DispatchTimeInterval.hours(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if ((unsigned __int128)(result * (__int128)3600LL) >> 64 == (3600 * result) >> 63)
  {
    *a2 = 3600 * result;
    uint64_t v3 = enum case for DispatchTimeInterval.seconds(_:);
    uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(a2, v3, v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t static DispatchTimeInterval.zero.getter@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t DispatchTimeInterval.description.getter()
{
  uint64_t v0 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v40 = *(void *)(v0 - 8);
  uint64_t v41 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0LL);
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v39 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v37 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100172848();
  uint64_t v33 = ((v12 >> 63) & 0xFFFFFFFFC4653600LL) + (((unint64_t)v12 * (unsigned __int128)0x3B9ACA00uLL) >> 64);
  uint64_t v34 = 1000000000 * v12;
  uint64_t v13 = sub_100002274(&qword_100408B00);
  uint64_t v14 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = swift_allocObject(v13, v18 - v16 + 8 * v16, v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_100349740;
  uint64_t v20 = static Duration.UnitsFormatStyle.Unit.days.getter();
  uint64_t v21 = static Duration.UnitsFormatStyle.Unit.hours.getter(v20);
  uint64_t v22 = static Duration.UnitsFormatStyle.Unit.minutes.getter(v21);
  uint64_t v23 = static Duration.UnitsFormatStyle.Unit.seconds.getter(v22);
  uint64_t v24 = static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v23);
  uint64_t v25 = static Duration.UnitsFormatStyle.Unit.microseconds.getter(v24);
  static Duration.UnitsFormatStyle.Unit.nanoseconds.getter(v25);
  uint64_t v26 = sub_100005098(v19);
  swift_setDeallocating(v19);
  swift_arrayDestroy(v19 + v18, 7LL, v14);
  uint64_t v27 = swift_deallocClassInstance(v19, 32LL, 7LL);
  uint64_t v28 = static Duration.UnitsFormatStyle.UnitWidth.wide.getter(v27);
  uint64_t v29 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v28);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v29);
  static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)( v26,  v8,  1LL,  0LL,  v5,  0LL,  1LL,  v2);
  swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v2, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v39);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  uint64_t v30 = sub_10000AF70( &qword_100408B08,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  Duration.formatted<A>(_:)(&v42, v11, v34, v33, v9, v30);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v9);
  return v42;
}

void DispatchTimeInterval.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (Swift::UInt64 *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000000LL;
LABEL_7:
    Swift::UInt64 v8 = v6 * v7;
    BOOL v9 = (unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63;
    BOOL v10 = v6 <= 0;
    unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (v10) {
      unint64_t v11 = 0x8000000000000000LL;
    }
    if (v9) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = v8;
    }
    goto LABEL_12;
  }

  if (v5 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000LL;
    goto LABEL_7;
  }

  if (v5 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000LL;
    goto LABEL_7;
  }

  if (v5 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    Swift::UInt64 v12 = *v4;
  }

  else
  {
    if (v5 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 8))(v4, v1);
    }
    Swift::UInt64 v12 = 0x7FFFFFFFFFFFFFFFLL;
  }

BOOL static DispatchTimeInterval.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = enum case for DispatchTimeInterval.never(_:);
  BOOL v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchTimeInterval.never(_:), v4);
  char v10 = static DispatchTimeInterval.== infix(_:_:)(a1, v7);
  unint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) != 0) {
    return 0LL;
  }
  v9(v7, v8, v4);
  char v13 = static DispatchTimeInterval.== infix(_:_:)(a2, v7);
  v11(v7, v4);
  if ((v13 & 1) != 0) {
    return 1LL;
  }
  uint64_t v14 = sub_100172848();
  return v14 < sub_100172848();
}

uint64_t static DispatchTimeInterval.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  BOOL v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
  char v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v13((uint64_t *)((char *)&v24 - v10), enum case for DispatchTimeInterval.never(_:), v5);
  uint64_t v14 = sub_10000AF70( (unint64_t *)&unk_10040E400,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval,  (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
  uint64_t v24 = a1;
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)(a1, v11, v5, v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v15 & 1) != 0)
  {
    v16(v9, v5);
LABEL_6:
    uint64_t v22 = v25;
    uint64_t v23 = v12;
    return v13(v22, v23, v5);
  }

  v13((uint64_t *)v11, v12, v5);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v11, v5, v14);
  v16(v11, v5);
  v16(v9, v5);
  if ((v17 & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v18 = sub_100172848();
  uint64_t v19 = sub_100172848();
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19)) {
    goto LABEL_6;
  }
  uint64_t v22 = v25;
  *uint64_t v25 = v20;
  uint64_t v23 = enum case for DispatchTimeInterval.nanoseconds(_:);
  return v13(v22, v23, v5);
}

uint64_t static DispatchTimeInterval.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  BOOL v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
  char v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v13((uint64_t *)((char *)&v24 - v10), enum case for DispatchTimeInterval.never(_:), v5);
  uint64_t v14 = sub_10000AF70( (unint64_t *)&unk_10040E400,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval,  (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
  uint64_t v24 = a1;
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)(a1, v11, v5, v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v15 & 1) != 0)
  {
    v16(v9, v5);
LABEL_6:
    uint64_t v22 = v25;
    uint64_t v23 = v12;
    return v13(v22, v23, v5);
  }

  v13((uint64_t *)v11, v12, v5);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v11, v5, v14);
  v16(v11, v5);
  v16(v9, v5);
  if ((v17 & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v18 = sub_100172848();
  uint64_t v19 = sub_100172848();
  uint64_t v20 = v18 - v19;
  if (__OFSUB__(v18, v19)) {
    goto LABEL_6;
  }
  uint64_t v22 = v25;
  *uint64_t v25 = v20;
  uint64_t v23 = enum case for DispatchTimeInterval.nanoseconds(_:);
  return v13(v22, v23, v5);
}

double DispatchTimeInterval.timeInterval.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000000LL;
LABEL_7:
    uint64_t v9 = v7 * v8;
    BOOL v10 = (unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63;
    BOOL v11 = v7 <= 0;
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11) {
      uint64_t v12 = 0x8000000000000000LL;
    }
    if (!v10) {
      uint64_t v12 = v9;
    }
    return (double)v12 / 1000000000.0;
  }

  if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000LL;
    goto LABEL_7;
  }

  if (v6 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000LL;
    goto LABEL_7;
  }

  if (v6 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v12 = *v5;
  }

  else
  {
    if (v6 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
    }
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return (double)v12 / 1000000000.0;
}

Swift::Int DispatchTimeInterval.hashValue.getter()
{
  return Hasher._finalize()();
}

BOOL sub_100173DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = enum case for DispatchTimeInterval.never(_:);
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(char *, void))v10)(v8, enum case for DispatchTimeInterval.never(_:));
  char v11 = static DispatchTimeInterval.== infix(_:_:)(a1, v8);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, a3);
  if ((v11 & 1) != 0) {
    return 0LL;
  }
  v10(v8, v9, a3);
  char v14 = static DispatchTimeInterval.== infix(_:_:)(a2, v8);
  v12(v8, a3);
  if ((v14 & 1) != 0) {
    return 1LL;
  }
  uint64_t v15 = sub_100172848();
  return v15 < sub_100172848();
}

BOOL sub_100173ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = enum case for DispatchTimeInterval.never(_:);
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(char *, void))v10)(v8, enum case for DispatchTimeInterval.never(_:));
  char v11 = static DispatchTimeInterval.== infix(_:_:)(a2, v8);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, a3);
  if ((v11 & 1) != 0) {
    return 0LL;
  }
  v10(v8, v9, a3);
  char v14 = static DispatchTimeInterval.== infix(_:_:)(a1, v8);
  v12(v8, a3);
  if ((v14 & 1) != 0) {
    return 1LL;
  }
  uint64_t v15 = sub_100172848();
  return v15 < sub_100172848();
}

uint64_t sub_100173FD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  return (*(uint64_t (**)(void *, void))(*(void *)(a1 - 8) + 104LL))( a2,  enum case for DispatchTimeInterval.nanoseconds(_:));
}

uint64_t sub_100173FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100174018(a1, a2, a3);
}

uint64_t sub_10017400C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100174018(a1, a2, a3);
}

uint64_t sub_100174018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v9(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

Swift::Int sub_1001740A4(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001740DC(uint64_t a1)
{
  return sub_100174150(a1, "wifip2pd.nan", 0xD000000000000011LL, 0x8000000100366F80LL, &static OS_dispatch_queue.nan);
}

id static OS_dispatch_queue.nan.getter()
{
  return sub_1001743C4(&qword_100404318, (id *)&static OS_dispatch_queue.nan);
}

uint64_t sub_100174124(uint64_t a1)
{
  return sub_100174150(a1, "wifip2pd.awdl", 0xD000000000000012LL, 0x8000000100366F50LL, &static OS_dispatch_queue.awdl);
}

uint64_t sub_100174150(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v22 = a3;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = sub_100004E74();
  static DispatchQoS.userInteractive.getter();
  uint64_t v16 = sub_100333A64(a2);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000AF70( (unint64_t *)&unk_100410200,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = sub_100002274((uint64_t *)&unk_1004044E0);
  uint64_t v19 = sub_1000572E4(qword_100410210, (uint64_t *)&unk_1004044E0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v10, v17);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v6);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v22, v23, v15, v12, v9, v16);
  *uint64_t v24 = result;
  return result;
}

uint64_t *OS_dispatch_queue.awdl.unsafeMutableAddressor()
{
  if (qword_100404320 != -1) {
    swift_once(&qword_100404320, sub_100174124);
  }
  return &static OS_dispatch_queue.awdl;
}

id static OS_dispatch_queue.awdl.getter()
{
  return sub_1001743C4(&qword_100404320, (id *)&static OS_dispatch_queue.awdl);
}

uint64_t sub_10017437C(uint64_t a1)
{
  return sub_100174150(a1, "wifip2pd.p2p", 0xD000000000000011LL, 0x8000000100366FA0LL, &static OS_dispatch_queue.p2p);
}

id static OS_dispatch_queue.p2p.getter()
{
  return sub_1001743C4(&qword_100404328, (id *)&static OS_dispatch_queue.p2p);
}

id sub_1001743C4(void *a1, id *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return *a2;
}

uint64_t sub_1001743FC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v23 = a6;
  uint64_t v8 = sub_1000022F8((uint64_t *)&unk_10040C5B0);
  uint64_t v9 = type metadata accessor for Result(255LL, a5, v8, &protocol self-conformance witness table for Error);
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = swift_allocBox(v12);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1LL, 1LL, v9);
  uint64_t v19 = (void *)swift_allocObject(&unk_1003E95C0, 40LL, 7LL);
  v19[2] = a5;
  v19[3] = a3;
  uint64_t v20 = v25;
  v19[4] = v24;
  sub_1001745B0((uint64_t)sub_100174B80, (uint64_t)v19, v20, v26, v15, v27, a5);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation(v19, "", 89LL, 279LL, 3LL, 0LL);
  uint64_t result = swift_release(v19);
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    __n128 v22 = swift_beginAccess(v17, v28, 0LL, 0LL);
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v17, v10, v22);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1LL, v9);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v23, v14, v9);
      return swift_release(v15);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1001745B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v26[1] = a6;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v20 + 16))(v19, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  uint64_t v21 = (void *)swift_allocObject(&unk_1003E95E8, 48LL, 7LL);
  void v21[2] = a7;
  _WORD v21[3] = a5;
  v21[4] = a1;
  v21[5] = a2;
  aBlock[4] = sub_100174BCC;
  uint64_t v28 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000021F0;
  aBlock[3] = &unk_1003E9600;
  __n128 v22 = _Block_copy(aBlock);
  uint64_t v23 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  swift_retain();
  swift_retain();
  uint64_t v24 = DispatchWorkItem.init(qos:flags:block:)(v19, v16, v22);
  swift_release(v28);
  OS_dispatch_queue.asyncAndWait(execute:)(v24);
  return swift_release(v24);
}

uint64_t sub_10017475C(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000022F8((uint64_t *)&unk_10040C5B0);
  uint64_t v8 = type metadata accessor for Result(255LL, a4, v7, &protocol self-conformance witness table for Error);
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  __chkstk_darwin(v11);
  uint64_t v13 = &v17[-v12];
  uint64_t v14 = swift_projectBox(a1);
  a2();
  swift_storeEnumTagMultiPayload(v13, v8, 0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v13, 0LL, 1LL, v8);
  __n128 v15 = swift_beginAccess(v14, v17, 1LL, 0LL);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, __n128))(v10 + 40))(v14, v13, v9, v15);
}

uint64_t OS_dispatch_queue.asyncAndWait<A>(qos:flags:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_1000022F8((uint64_t *)&unk_10040C5B0);
  uint64_t v13 = type metadata accessor for Result(0LL, a5, v12, &protocol self-conformance witness table for Error);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v18 - v15;
  sub_1001743FC(a1, a2, a3, a4, a5, (uint64_t)&v18 - v15);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "CoreP2P/DispatchExtensions.swift",  32LL,  2LL,  301LL,  0);
  __break(1u);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v18 = a6;
  uint64_t v11 = sub_1000022F8((uint64_t *)&unk_10040C5B0);
  uint64_t v12 = type metadata accessor for Result(0LL, a5, v11, &protocol self-conformance witness table for Error);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v17 - v13;
  sub_1001743FC(a1, a2, a3, a4, a5, (uint64_t)&v17 - v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v12);
  if ((_DWORD)EnumCaseMultiPayload == 1) {
    return swift_willThrow(EnumCaseMultiPayload);
  }
  else {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a5 - 8) + 32LL))(v18, v14, a5);
  }
}

uint64_t sub_100174B18()
{
  return sub_10000AF70( (unint64_t *)&unk_10040E560,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime,  (uint64_t)&protocol conformance descriptor for DispatchTime);
}

uint64_t sub_100174B44()
{
  return sub_10000AF70( (unint64_t *)&unk_10040E400,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval,  (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
}

uint64_t sub_100174B70()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100174B80()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_100174BA0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100174BCC()
{
  return sub_10017475C(*(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16));
}

uint64_t sub_100174BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100174BE8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t static OWEKeys.== infix(_:_:)()
{
  uint64_t v0 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  uint64_t v3 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v5 = v4;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v0, v2);
  char v7 = v6;
  sub_1000208D8(v3, v5);
  sub_1000208D8(v0, v2);
  return v7 & 1;
}

uint64_t OWEKeys.init(privateKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
}

uint64_t sub_100174CB0()
{
  uint64_t result = sub_1000EF90C(0xD000000000000012LL, 0x8000000100366FC0LL);
  *(void *)&xmmword_100410850 = result;
  *((void *)&xmmword_100410850 + 1) = v1;
  return result;
}

uint64_t sub_100174CE8()
{
  uint64_t result = sub_1000FB08C((uint64_t)&off_1003D7260);
  qword_100409D20 = result;
  *(void *)algn_100409D28 = v1;
  return result;
}

uint64_t OWEKeys.generatePMK(for:asClient:)(uint64_t a1, int a2)
{
  int v47 = a2;
  uint64_t v4 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  __chkstk_darwin();
  uint64_t v44 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100408AA0);
  __chkstk_darwin();
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SharedSecret(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(a1);
  v39[3] = 0LL;
  uint64_t v40 = v7;
  char v16 = v47;
  uint64_t v41 = v6;
  uint64_t v42 = v2;
  uint64_t v43 = v15;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) != 1)
  {
    v39[1] = v13;
    v39[2] = v12;
    uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v43, v11, v12);
    if ((v16 & 1) != 0)
    {
      uint64_t v19 = P256.KeyAgreement.PrivateKey.publicKey.getter(v18);
      uint64_t v20 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v19);
      unint64_t v22 = v21;
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v9, v41);
      uint64_t v24 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v23);
      unint64_t v26 = v25;
      uint64_t v50 = v20;
      unint64_t v51 = v22;
      sub_100020AFC(v20, v22);
      sub_1000FA9C4(v24, v26);
    }

    else
    {
      uint64_t v20 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v18);
      unint64_t v22 = v27;
      uint64_t v28 = P256.KeyAgreement.PrivateKey.publicKey.getter(v20);
      uint64_t v24 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v28);
      unint64_t v26 = v29;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
      uint64_t v50 = v20;
      unint64_t v51 = v22;
      sub_100020AFC(v20, v22);
      sub_100020AFC(v24, v26);
      sub_1000FA9C4(v24, v26);
      sub_1000208D8(v24, v26);
    }

    sub_1000208D8(v24, v26);
    sub_1000208D8(v20, v22);
    uint64_t v30 = v50;
    unint64_t v31 = v51;
    uint64_t v32 = type metadata accessor for SHA256(0LL);
    if (qword_100404338 != -1) {
      swift_once(&qword_100404338, sub_100174CE8);
    }
    uint64_t v33 = qword_100409D20;
    unint64_t v34 = *(void *)algn_100409D28;
    uint64_t v50 = v30;
    unint64_t v51 = v31;
    sub_100020AFC(qword_100409D20, *(unint64_t *)algn_100409D28);
    sub_100020AFC(v30, v31);
    sub_1000FA9C4(v33, v34);
    sub_1000208D8(v33, v34);
    uint64_t v35 = v50;
    unint64_t v36 = v51;
    v49[0] = v50;
    v49[1] = v51;
    if (qword_100404330 != -1) {
      swift_once(&qword_100404330, sub_100174CB0);
    }
    __int128 v48 = xmmword_100410850;
    uint64_t v37 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    unint64_t v38 = sub_10005D508();
    SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)( v32,  v49,  &v48,  32LL,  v32,  &type metadata for Data,  &type metadata for Data,  v37,  v38,  v38);
    sub_1000208D8(v35, v36);
    SymmetricKey.withUnsafeBytes<A>(_:)(&v50, sub_100061064, 0LL, &type metadata for Data);
    __asm { BR              X10 }
  }

  sub_1001755C0((uint64_t)v11);
  return 0LL;
}

uint64_t OWEKeys.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10011F048(v1, (uint64_t)v11);
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 1LL, 1LL, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v13 = sub_100002274(&qword_100405DC0);
  unint64_t v14 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v11, &v17, v8, v5, v9, v13, v14);
}

uint64_t OWEKeys.hash(into:)(uint64_t a1)
{
  uint64_t v2 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v4 = v3;
  Data.hash(into:)(a1, v2, v3);
  return sub_1000208D8(v2, v4);
}

Swift::Int OWEKeys.hashValue.getter()
{
  uint64_t v0 = Hasher.init(_seed:)(v5, 0LL);
  uint64_t v1 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v0);
  unint64_t v3 = v2;
  Data.hash(into:)(v5, v1, v2);
  sub_1000208D8(v1, v3);
  return Hasher._finalize()();
}

Swift::Int sub_1001753F8(uint64_t a1)
{
  uint64_t v1 = Hasher.init(_seed:)(v6, a1);
  uint64_t v2 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v1);
  unint64_t v4 = v3;
  Data.hash(into:)(v6, v2, v3);
  sub_1000208D8(v2, v4);
  return Hasher._finalize()();
}

uint64_t sub_100175450(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10011F048(v1, (uint64_t)v12);
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v10, 1LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v14 = sub_100002274(&qword_100405DC0);
  unint64_t v15 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v12, &v18, v10, v6, a1, v14, v15);
}

uint64_t sub_1001755C0(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_100408AA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for OWEKeys(uint64_t a1)
{
  uint64_t result = qword_100409D90;
  if (!qword_100409D90) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OWEKeys);
  }
  return result;
}

uint64_t sub_10017563C()
{
  return sub_10000AF70( &qword_100409D30,  type metadata accessor for OWEKeys,  (uint64_t)&protocol conformance descriptor for OWEKeys);
}

uint64_t initializeBufferWithCopyOfBuffer for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for OWEKeys(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t initializeWithCopy for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for OWEKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001757F4);
}

uint64_t sub_1001757F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OWEKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017583C);
}

uint64_t sub_10017583C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_10017587C(uint64_t a1)
{
  uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void NANServiceInfo.genericServiceProtocol.getter(char a1, uint64_t a2, unint64_t a3)
{
  if (a1 == 2)
  {
    sub_100020AFC(a2, a3);
    _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(a2, a3);
  }

uint64_t NANServiceInfo.init(csaMatterPayload:)()
{
  return 3LL;
}

uint64_t NANServiceInfo.init(information:filter:)(uint64_t a1, uint64_t a2)
{
  return 2LL;
}

uint64_t sub_100175994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001769F8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001759F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001769F8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100175A3C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100175A6C + 4 * byte_10034D320[*v0]))( 0x6465767265736552LL,  0xE800000000000000LL);
}

uint64_t sub_100175A6C()
{
  return 0x72756F6A6E6F42LL;
}

uint64_t sub_100175A84()
{
  return 0x20636972656E6547LL;
}

uint64_t sub_100175AA8()
{
  return 0x7474614D20415343LL;
}

uint64_t NANServiceInfo.csaMatterPayload.getter(char a1, uint64_t a2, unint64_t a3)
{
  if (a1 != 3) {
    return 0LL;
  }
  uint64_t v3 = a2;
  sub_100020AFC(a2, a3);
  return v3;
}

uint64_t NANServiceInfo.hash(into:)(uint64_t a1, Swift::UInt8 a2, uint64_t a3, unint64_t a4)
{
  return sub_1000208D8(a3, a4);
}

void static NANServiceInfo.__derived_struct_equals(_:_:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a1 == a4) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
  }
}

Swift::Int NANServiceInfo.hashValue.getter(Swift::UInt8 a1, uint64_t a2, unint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_100175C0C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v3);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v5, v1, v2);
  sub_1000208D8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100175C84(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  Hasher._combine(_:)(*(_BYTE *)v1);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_1000208D8(v3, v4);
}

Swift::Int sub_100175CDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v4);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v6, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

void sub_100175D50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2));
  }
}

uint64_t NANServiceInfo.init(from:)(void *a1)
{
  return sub_100176384(a1);
}

void NANServiceInfo.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_100175DDC(void *result)
{
  if ((v2 & 0xFF000000000000LL) != 0)
  {
    uint64_t v5 = result[3];
    uint64_t v6 = result[4];
    sub_100021104(result, v5);
    dispatch thunk of Encoder.unkeyedContainer()(v17, v5, v6);
    LOWORD(v16[0]) = 28496;
    BYTE2(v16[0]) = -102;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    sub_1000237C8((uint64_t)v17, v18);
    unint64_t v9 = sub_100165A78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v16, &type metadata for OUI, v9, v7, v8);
    if (!v1)
    {
      LOBYTE(v16[0]) = v4;
      uint64_t v10 = v18;
      uint64_t v11 = v19;
      sub_1000237C8((uint64_t)v17, v18);
      unint64_t v12 = sub_100176774();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v16,  &type metadata for NANServiceInfo.ServiceProtocolType,  v12,  v10,  v11);
      v16[0] = v3;
      v16[1] = v2;
      uint64_t v13 = v18;
      uint64_t v14 = v19;
      sub_1000237C8((uint64_t)v17, v18);
      unint64_t v15 = sub_10005CD78();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v16, &type metadata for Data, v15, v13, v14);
    }

    return (void *)sub_100002AC4(v17);
  }

  return result;
}

uint64_t sub_100175F24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = NANServiceInfo.init(from:)(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }

  return result;
}

void sub_100175F50(uint64_t a1)
{
}

uint64_t NANServiceInfo.customMirror.getter(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  int v6 = a1;
  uint64_t v7 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v11);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (v6 == 2
    && (sub_100020AFC(a2, a3), _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(a2, a3), v14))
  {
    uint64_t v15 = v14;
    v25[0] = 2;
    uint64_t v26 = a2;
    unint64_t v27 = a3;
    uint64_t v16 = sub_100002274(qword_100405EA0);
    uint64_t v17 = swift_allocObject(v16, 80LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_100339900;
    *(void *)(v17 + 32) = 0x636972656E6567LL;
    *(void *)(v17 + 40) = 0xE700000000000000LL;
    *(void *)(v17 + 72) = &type metadata for NANGenericServiceProtocol;
    *(void *)(v17 + 48) = v15;
    uint64_t v18 = type metadata accessor for Mirror.DisplayStyle(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v13, 1LL, 1LL, v18);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for Mirror.AncestorRepresentation.generated(_:),  v7);
    sub_100020AFC(a2, a3);
  }

  else
  {
    v25[0] = a1;
    uint64_t v26 = a2;
    unint64_t v27 = a3;
    uint64_t v19 = sub_100002274(qword_100405EA0);
    uint64_t v17 = swift_allocObject(v19, 80LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_100339900;
    *(void *)(v17 + 32) = 1635017060LL;
    *(void *)(v17 + 40) = 0xE400000000000000LL;
    sub_100020AFC(a2, a3);
    sub_100020B54(0LL, 0xE000000000000000LL, a2, a3);
    *(void *)(v17 + 72) = &type metadata for String;
    *(void *)(v17 + 48) = v20;
    *(void *)(v17 + 56) = v21;
    uint64_t v22 = type metadata accessor for Mirror.DisplayStyle(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v13, 1LL, 1LL, v22);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for Mirror.AncestorRepresentation.generated(_:),  v7);
  }

  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)( v25,  v17,  v13,  v10,  &type metadata for NANServiceInfo);
}

void NANServiceInfo.description.getter(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100176230()
{
  v1._countAndFlagsBits = 0x72756F6A6E6F42LL;
  v1._object = (void *)0xE700000000000000LL;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  v2._countAndFlagsBits = 32LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return ((uint64_t (*)(void))((char *)&loc_1001762B8 + *((int *)qword_100176368 + (v0 >> 62))))();
}

uint64_t sub_1001762C8()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x736574796220LL;
  v2._object = (void *)0xE600000000000000LL;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_100176378()
{
  return NANServiceInfo.customMirror.getter(*(_BYTE *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_100176384(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v10, v3, v4);
  if (!v1)
  {
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    sub_1000237C8((uint64_t)v10, v11);
    unint64_t v7 = sub_1000702C8();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for Data,  &type metadata for Data,  v7,  v5,  v6);
    __asm { BR              X9 }
  }

  sub_100002AC4(a1);
  return v4;
}

uint64_t sub_100176484()
{
  uint64_t v4 = Data._Representation.subscript.getter(0LL, BYTE6(v0), v2, v0);
  unint64_t v6 = v5;
  sub_100209498(v4, v5);
  if (v1)
  {
    sub_1000208D8(v4, v6);
    return ((uint64_t (*)(void, void))((char *)&loc_10017665C + dword_100176764[v3]))(0LL, 0LL);
  }

  else
  {
    uint64_t v7 = sub_1000208D8(v4, v6);
    return ((uint64_t (*)(uint64_t))((char *)&loc_10017650C + dword_100176734[v3]))(v7);
  }

unint64_t sub_100176774()
{
  unint64_t result = qword_100409DC8;
  if (!qword_100409DC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D534, &type metadata for NANServiceInfo.ServiceProtocolType);
    atomic_store(result, (unint64_t *)&qword_100409DC8);
  }

  return result;
}

unint64_t sub_1001767BC()
{
  unint64_t result = qword_100409DD0;
  if (!qword_100409DD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANServiceInfo,  &type metadata for NANServiceInfo);
    atomic_store(result, (unint64_t *)&qword_100409DD0);
  }

  return result;
}

uint64_t sub_100176804(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NANServiceInfo(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANServiceInfo(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1000208D8(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANServiceInfo()
{
  return &type metadata for NANServiceInfo;
}

uint64_t storeEnumTagSinglePayload for NANServiceInfo.ServiceProtocolType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100176930 + 4 * byte_10034D32D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100176964 + 4 * byte_10034D328[v4]))();
}

uint64_t sub_100176964(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017696C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100176974LL);
  }
  return result;
}

uint64_t sub_100176980(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100176988LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10017698C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100176994(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANServiceInfo.ServiceProtocolType()
{
  return &type metadata for NANServiceInfo.ServiceProtocolType;
}

unint64_t sub_1001769B4()
{
  unint64_t result = qword_100409DD8;
  if (!qword_100409DD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D50C, &type metadata for NANServiceInfo.ServiceProtocolType);
    atomic_store(result, (unint64_t *)&qword_100409DD8);
  }

  return result;
}

unint64_t sub_1001769F8()
{
  unint64_t result = qword_100409DE0;
  if (!qword_100409DE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034D4D4, &type metadata for NANServiceInfo.ServiceProtocolType);
    atomic_store(result, (unint64_t *)&qword_100409DE0);
  }

  return result;
}

uint64_t sub_100176A3C(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t v5 = 0LL;
    a3 = 0LL;
    goto LABEL_30;
  }

  if (!a3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_30;
  }

  if (a3 < 0) {
    goto LABEL_33;
  }
  if (!a4)
  {
    a3 = 0LL;
    uint64_t v5 = 0LL;
    goto LABEL_30;
  }

  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      uint64_t v5 = 1LL;
LABEL_30:
      *(void *)unint64_t result = a4;
      *(_BYTE *)(result + 8) = a5;
      *(void *)(result + 16) = v5;
      return a3;
    }

    unint64_t v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1LL;
      uint64_t v5 = 1LL;
      goto LABEL_30;
    }

    unint64_t v7 = a4 - 2;
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 >= 0x11)
    {
      uint64_t v12 = v8 & 0xF;
      if ((v8 & 0xF) == 0) {
        uint64_t v12 = 16LL;
      }
      unint64_t v13 = v8 - v12;
      uint64_t v10 = v8 - v12 + 1;
      uint64_t v11 = &a2[v13];
      uint64_t v9 = v13 + 2;
      int8x16_t v14 = vdupq_n_s8(a5);
      uint64_t v15 = (int8x16_t *)(a2 + 1);
      do
      {
        *v15++ = v14;
        v13 -= 16LL;
      }

      while (v13);
    }

    else
    {
      uint64_t v9 = 2LL;
      uint64_t v10 = 1LL;
      uint64_t v11 = a2;
    }

    uint64_t v16 = 0LL;
    uint64_t v17 = v10 - a4;
    uint64_t v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        uint64_t v5 = v10 + v16 + 1;
        goto LABEL_30;
      }

      if (v10 - a3 + v16 == -1) {
        goto LABEL_32;
      }
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        uint64_t v5 = a4;
        goto LABEL_30;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100176B7C(uint64_t result, _BYTE *a2, uint64_t a3, unsigned __int8 a4)
{
  int v4 = a4;
  if (!a2)
  {
LABEL_26:
    uint64_t v5 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_29;
  }

  if (!a3)
  {
    uint64_t v5 = 0LL;
LABEL_28:
    uint64_t v12 = a3;
    goto LABEL_29;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 1LL;
LABEL_5:
    if (v5 < -8)
    {
LABEL_17:
      int v11 = 1 << v5;
      BOOL v7 = __OFADD__(v5++, 1LL);
      if (!v7) {
        goto LABEL_20;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    while (1)
    {
      if (v5 < 0)
      {
        int v8 = 0;
        BOOL v10 = __OFADD__(v5, 8LL);
        if ((unint64_t)v5 <= 0xFFFFFFFFFFFFFFF8LL)
        {
          LOBYTE(v11) = 0;
          uint64_t v5 = -7LL;
          if (v10) {
            goto LABEL_25;
          }
          goto LABEL_20;
        }
      }

      else
      {
        BOOL v7 = __OFSUB__(v5, 8LL);
        if ((unint64_t)v5 >= 8)
        {
          LOBYTE(v11) = 0;
          uint64_t v5 = 9LL;
          if (v7) {
            goto LABEL_25;
          }
LABEL_20:
          *a2 = v11;
          if (v6 == a3) {
            goto LABEL_28;
          }
          ++a2;
          uint64_t v12 = v6++;
          if (v5 > 7)
          {
LABEL_29:
            *(_BYTE *)unint64_t result = v4;
            *(void *)(result + 8) = v5;
            return v12;
          }

          goto LABEL_5;
        }

        int v8 = 1 << v5;
      }

      if ((v8 & ~v4) == 0) {
        goto LABEL_17;
      }
      uint64_t v9 = v5 + 1;
      if (__OFADD__(v5, 1LL))
      {
        __break(1u);
        break;
      }

      ++v5;
      if ((unint64_t)(v9 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        uint64_t v5 = v9;
        goto LABEL_17;
      }
    }
  }

  __break(1u);
  return result;
}

void *sub_100176C70(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v4 = 0LL;
    a3 = 0LL;
LABEL_17:
    *unint64_t result = a4;
    result[1] = v4;
    return (void *)a3;
  }

  if (!a3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_17;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = *(void *)(a4 + 16);
    if (v4)
    {
      int v5 = *(_DWORD *)(a4 + 32);
      *(_WORD *)(a2 + 4) = *(_WORD *)(a4 + 36);
      *(_DWORD *)a2 = v5;
      if (a3 == 1)
      {
        uint64_t v4 = 1LL;
      }

      else if (v4 == 1)
      {
        a3 = 1LL;
      }

      else
      {
        uint64_t v6 = 0LL;
        BOOL v7 = (int *)(a4 + 40);
        uint64_t v8 = a2 + 8;
        while (1)
        {
          int v9 = *v7;
          *(_WORD *)(v8 + 4) = *((_WORD *)v7 + 2);
          *(_DWORD *)uint64_t v8 = v9;
          if (a3 - 2 == v6) {
            break;
          }
          ++v6;
          v7 += 2;
          v8 += 8LL;
          if (v4 - 1 == v6)
          {
            a3 = v6 + 1;
            goto LABEL_17;
          }
        }

        uint64_t v4 = v6 + 2;
      }
    }

    else
    {
      a3 = 0LL;
    }

    goto LABEL_17;
  }

  __break(1u);
  return result;
}

uint64_t *ChannelSequence.empty.unsafeMutableAddressor()
{
  if (qword_100404340 != -1) {
    swift_once(&qword_100404340, sub_100176D74);
  }
  return &static ChannelSequence.empty;
}

void sub_100176D74()
{
  static ChannelSequence.empty = (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t static ChannelSequence.empty.getter()
{
  return sub_10005E194(&qword_100404340, &static ChannelSequence.empty);
}

void *ChannelSequence.slotDuration.unsafeMutableAddressor()
{
  return &static ChannelSequence.slotDuration;
}

uint64_t ChannelSequence.endIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

Swift::Int __swiftcall ChannelSequence.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall ChannelSequence.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1LL);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t ChannelSequence.subscript.getter(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(a2 + 16) > result)
  {
    return *(unsigned int *)(a2 + 8 * result + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 8 * result + 36) << 32);
  }

  __break(1u);
  return result;
}

void ChannelSequence.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned int *)(a2 + 32);
    do
    {
      unint64_t v6 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
      if ((v6 & 0xFF00000000LL) == 0x300000000LL)
      {
        Swift::UInt8 v5 = 0;
LABEL_4:
        Hasher._combine(_:)(v5);
      }

      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
        Hasher._combine(_:)(0x801004u >> ((v6 >> 29) & 0xF8));
        switch(v6 >> 40)
        {
          case 2uLL:
            Hasher._combine(_:)(0LL);
            break;
          case 3uLL:
            Hasher._combine(_:)(1uLL);
            break;
          case 4uLL:
            Hasher._combine(_:)(3uLL);
            break;
          case 5uLL:
            Hasher._combine(_:)(4uLL);
            break;
          case 6uLL:
            Hasher._combine(_:)(5uLL);
            break;
          default:
            Hasher._combine(_:)(2uLL);
            Swift::UInt8 v5 = BYTE5(v6) & 1;
            goto LABEL_4;
        }
      }

      v4 += 2;
      --v3;
    }

    while (v3);
  }

void sub_100176F20(uint64_t a1)
{
}

Swift::Int sub_100176F28(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  ChannelSequence.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void *sub_100176F68@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1LL;
  }
  return result;
}

void *sub_100176F80(void *result)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t sub_100176F98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100177A74(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100176FC4(uint64_t *a1, uint64_t *a2)
{
  return sub_1001779F0(*a1, *a2);
}

uint64_t sub_100176FD0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_100176FD8(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16LL);
}

uint64_t (*sub_100176FE8(uint64_t (*result)(void), unint64_t *a2))(void)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v3 < *(void *)(*(void *)v2 + 16LL))
  {
    uint64_t v4 = *(void *)v2 + 8 * v3;
    int v5 = *(_DWORD *)(v4 + 32);
    *((_WORD *)result + 2) = *(_WORD *)(v4 + 36);
    *(_DWORD *)uint64_t result = v5;
    return NANBitmap.Channel.operatingClass.getter;
  }

  __break(1u);
  return result;
}

uint64_t *sub_100177030@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }

  else
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    return (uint64_t *)swift_bridgeObjectRetain(result);
  }

  return result;
}

uint64_t sub_10017705C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  *a1 = *v1;
  a1[1] = 0LL;
  a1[2] = v3;
  return swift_bridgeObjectRetain(v2);
}

BOOL sub_100177070()
{
  return *(void *)(*(void *)v0 + 16LL) == 0LL;
}

uint64_t sub_100177084@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_100177ACC(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *sub_1001770B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_1001770D4(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_1001770F0(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_10017710C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *sub_100177124(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_10017713C(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0LL;
}

uint64_t sub_100177148()
{
  return *(void *)(*(void *)v0 + 16LL);
}

void *sub_100177154()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100080D2C(*v0);
  swift_bridgeObjectRelease(v1);
  return v2;
}

void *sub_100177188(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100176C70(a1, a2, a3, *v3);
}

uint64_t sub_100177190()
{
  uint64_t v0 = sub_100002274(&qword_100406380);
  uint64_t result = swift_allocObject(v0, 160LL, 7LL);
  uint64_t v2 = result;
  *(_OWORD *)(result + 16) = xmmword_10034D7C0;
  if (qword_100404390 != -1) {
    uint64_t result = swift_once(&qword_100404390, sub_100186430);
  }
  int v3 = static Channel.awdlSocial5GHz;
  unint64_t v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410894 << 32) | ((unint64_t)byte_100410895 << 40);
  *(_DWORD *)(v2 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v2 + 36) = WORD2(v4);
  *(_DWORD *)(v2 + 40) = v3;
  *(_WORD *)(v2 + 44) = WORD2(v4);
  *(_DWORD *)(v2 + 48) = v3;
  *(_WORD *)(v2 + 52) = WORD2(v4);
  *(_DWORD *)(v2 + 56) = v3;
  *(_WORD *)(v2 + 60) = WORD2(v4);
  *(_DWORD *)(v2 + 64) = 0;
  *(_WORD *)(v2 + 68) = 3;
  *(_DWORD *)(v2 + 72) = 0;
  *(_WORD *)(v2 + 76) = 3;
  *(_DWORD *)(v2 + 80) = 0;
  *(_WORD *)(v2 + 84) = 3;
  *(_DWORD *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 92) = 3;
  if (qword_100404388 != -1)
  {
    uint64_t result = swift_once(&qword_100404388, sub_1001863C8);
    unint64_t v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410894 << 32) | ((unint64_t)byte_100410895 << 40);
  }

  unint64_t v5 = ((unint64_t)byte_10041088D << 40) | ((unint64_t)byte_10041088C << 32);
  *(_DWORD *)(v2 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v2 + 100) = WORD2(v5);
  *(_DWORD *)(v2 + 104) = v4;
  *(_WORD *)(v2 + 108) = WORD2(v4);
  *(_DWORD *)(v2 + 112) = v4;
  *(_WORD *)(v2 + 116) = WORD2(v4);
  *(_DWORD *)(v2 + 120) = v4;
  *(_WORD *)(v2 + 124) = WORD2(v4);
  *(_DWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 132) = 3;
  *(_DWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 140) = 3;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 3;
  *(_DWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 156) = 3;
  static ChannelSequence.awdlDiscoveryMode = v2;
  return result;
}

uint64_t *ChannelSequence.awdlDiscoveryMode.unsafeMutableAddressor()
{
  if (qword_100404348 != -1) {
    swift_once(&qword_100404348, sub_100177190);
  }
  return &static ChannelSequence.awdlDiscoveryMode;
}

uint64_t static ChannelSequence.awdlDiscoveryMode.getter()
{
  return sub_10005E194(&qword_100404348, &static ChannelSequence.awdlDiscoveryMode);
}

uint64_t sub_100177364()
{
  uint64_t v0 = sub_100002274(&qword_100406380);
  uint64_t result = swift_allocObject(v0, 160LL, 7LL);
  uint64_t v2 = result;
  *(_OWORD *)(result + 16) = xmmword_10034D7C0;
  if (qword_100404390 != -1) {
    uint64_t result = swift_once(&qword_100404390, sub_100186430);
  }
  int v3 = static Channel.awdlSocial5GHz;
  unint64_t v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410894 << 32) | ((unint64_t)byte_100410895 << 40);
  *(_DWORD *)(v2 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v2 + 36) = WORD2(v4);
  *(_DWORD *)(v2 + 40) = v3;
  *(_WORD *)(v2 + 44) = WORD2(v4);
  *(_DWORD *)(v2 + 48) = v3;
  *(_WORD *)(v2 + 52) = WORD2(v4);
  *(_DWORD *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 60) = 3;
  *(_DWORD *)(v2 + 64) = 0;
  *(_WORD *)(v2 + 68) = 3;
  *(_DWORD *)(v2 + 72) = 0;
  *(_WORD *)(v2 + 76) = 3;
  *(_DWORD *)(v2 + 80) = 0;
  *(_WORD *)(v2 + 84) = 3;
  *(_DWORD *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 92) = 3;
  if (qword_100404388 != -1)
  {
    uint64_t result = swift_once(&qword_100404388, sub_1001863C8);
    unint64_t v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410894 << 32) | ((unint64_t)byte_100410895 << 40);
  }

  unint64_t v5 = ((unint64_t)byte_10041088D << 40) | ((unint64_t)byte_10041088C << 32);
  *(_DWORD *)(v2 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v2 + 100) = WORD2(v5);
  *(_DWORD *)(v2 + 104) = v4;
  *(_WORD *)(v2 + 108) = WORD2(v4);
  *(_DWORD *)(v2 + 112) = v4;
  *(_WORD *)(v2 + 116) = WORD2(v4);
  *(_DWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 124) = 3;
  *(_DWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 132) = 3;
  *(_DWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 140) = 3;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 3;
  *(_DWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 156) = 3;
  static ChannelSequence.awdlIdleMode = v2;
  return result;
}

uint64_t *ChannelSequence.awdlIdleMode.unsafeMutableAddressor()
{
  if (qword_100404350 != -1) {
    swift_once(&qword_100404350, sub_100177364);
  }
  return &static ChannelSequence.awdlIdleMode;
}

uint64_t static ChannelSequence.awdlIdleMode.getter()
{
  return sub_10005E194(&qword_100404350, &static ChannelSequence.awdlIdleMode);
}

uint64_t sub_100177538()
{
  uint64_t v0 = sub_100002274(&qword_100406380);
  uint64_t result = swift_allocObject(v0, 160LL, 7LL);
  uint64_t v2 = result;
  *(_OWORD *)(result + 16) = xmmword_10034D7C0;
  if (qword_100404390 != -1) {
    uint64_t result = swift_once(&qword_100404390, sub_100186430);
  }
  unint64_t v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410894 << 32) | ((unint64_t)byte_100410895 << 40);
  *(_DWORD *)(v2 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v2 + 36) = WORD2(v3);
  *(_DWORD *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 44) = 3;
  *(_DWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 52) = 3;
  *(_DWORD *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 60) = 3;
  *(_DWORD *)(v2 + 64) = 0;
  *(_WORD *)(v2 + 68) = 3;
  *(_DWORD *)(v2 + 72) = 0;
  *(_WORD *)(v2 + 76) = 3;
  *(_DWORD *)(v2 + 80) = 0;
  *(_WORD *)(v2 + 84) = 3;
  *(_DWORD *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 92) = 3;
  if (qword_100404388 != -1)
  {
    uint64_t result = swift_once(&qword_100404388, sub_1001863C8);
    unint64_t v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410894 << 32) | ((unint64_t)byte_100410895 << 40);
  }

  unint64_t v4 = ((unint64_t)byte_10041088D << 40) | ((unint64_t)byte_10041088C << 32);
  *(_DWORD *)(v2 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v2 + 100) = WORD2(v4);
  *(_DWORD *)(v2 + 104) = v3;
  *(_WORD *)(v2 + 108) = WORD2(v3);
  *(_DWORD *)(v2 + 112) = v3;
  *(_WORD *)(v2 + 116) = WORD2(v3);
  *(_DWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 124) = 3;
  *(_DWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 132) = 3;
  *(_DWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 140) = 3;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 3;
  *(_DWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 156) = 3;
  static ChannelSequence.awdlLowPowerMode = v2;
  return result;
}

uint64_t *ChannelSequence.awdlLowPowerMode.unsafeMutableAddressor()
{
  if (qword_100404358 != -1) {
    swift_once(&qword_100404358, sub_100177538);
  }
  return &static ChannelSequence.awdlLowPowerMode;
}

uint64_t static ChannelSequence.awdlLowPowerMode.getter()
{
  return sub_10005E194(&qword_100404358, &static ChannelSequence.awdlLowPowerMode);
}

void sub_10017770C()
{
  static ChannelSequence.none = (uint64_t)&off_1003D7288;
}

uint64_t *ChannelSequence.none.unsafeMutableAddressor()
{
  if (qword_100404360 != -1) {
    swift_once(&qword_100404360, sub_10017770C);
  }
  return &static ChannelSequence.none;
}

uint64_t static ChannelSequence.none.getter()
{
  return sub_10005E194(&qword_100404360, &static ChannelSequence.none);
}

unint64_t sub_100177780()
{
  unint64_t result = qword_100409DE8;
  if (!qword_100409DE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelSequence,  &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409DE8);
  }

  return result;
}

unint64_t sub_1001777C8()
{
  unint64_t result = qword_100409DF0;
  if (!qword_100409DF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelSequence,  &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409DF0);
  }

  return result;
}

uint64_t sub_10017780C()
{
  return sub_1001778A8( &qword_100409DF8,  &qword_100409E00,  (uint64_t)&protocol conformance descriptor for <> DefaultIndices<A>);
}

unint64_t sub_100177838()
{
  unint64_t result = qword_100409E08;
  if (!qword_100409E08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelSequence,  &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409E08);
  }

  return result;
}

uint64_t sub_10017787C()
{
  return sub_1001778A8(&qword_100409E10, &qword_100409E18, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t sub_1001778A8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000022F8(a2);
    sub_100177838();
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10017790C()
{
  unint64_t result = qword_100409E20;
  if (!qword_100409E20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelSequence,  &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409E20);
  }

  return result;
}

void *sub_100177950()
{
  return &protocol witness table for Int;
}

uint64_t sub_10017795C()
{
  return sub_1000572E4( &qword_100409E28,  &qword_100409E00,  (uint64_t)&protocol conformance descriptor for DefaultIndices<A>);
}

uint64_t sub_100177988()
{
  return sub_1000572E4(&qword_100409E30, &qword_100409E18, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t sub_1001779B4()
{
  return sub_1000572E4( &qword_100409E38,  &qword_100409E40,  (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

ValueMetadata *type metadata accessor for ChannelSequence()
{
  return &type metadata for ChannelSequence;
}

uint64_t sub_1001779F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0LL;
    if (!v3) {
      return result;
    }
    unint64_t v7 = ~a2 + a1;
    unint64_t v8 = a1 ^ 0x8000000000000000LL;
    if (v7 >= v8) {
      unint64_t v7 = v8;
    }
    unint64_t v9 = 0x8000000000000000LL;
    if (v7 < 0x8000000000000000LL) {
      unint64_t v9 = v7;
    }
    while ((v7 & 0x8000000000000000LL) == 0)
    {
      if (v8 == v9) {
        goto LABEL_18;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    unint64_t v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result) {
        return result;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100177A74(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = 0LL;
    while ((result ^ 0x8000000000000000LL) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }

    goto LABEL_12;
  }

  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

uint64_t sub_100177ACC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v7 = 0LL;
    while (result - a3 + v7)
    {
      uint64_t v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1LL))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }

      if (--v7 <= a2) {
        return v8;
      }
    }

    return 0LL;
  }

  if (a2)
  {
    unint64_t v3 = a3 - result;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      uint64_t v9 = v4 & 3;
      if ((v4 & 3) == 0) {
        uint64_t v9 = 4LL;
      }
      unint64_t v5 = v4 - v9;
      int64x2_t v10 = 0uLL;
      int64x2_t v11 = (int64x2_t)(unint64_t)result;
      int64x2_t v12 = vdupq_n_s64(1uLL);
      unint64_t v13 = v5;
      do
      {
        int64x2_t v11 = vaddq_s64(v11, v12);
        int64x2_t v10 = vaddq_s64(v10, v12);
        v13 -= 4LL;
      }

      while (v13);
      uint64_t v6 = vaddvq_s64(vaddq_s64(v10, v11));
    }

    else
    {
      unint64_t v5 = 0LL;
      uint64_t v6 = result;
    }

    uint64_t v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v15 = v5 + result - a3;
    unint64_t v16 = a2 - v5;
    uint64_t result = v6;
    while (v15)
    {
      if (!v14) {
        goto LABEL_27;
      }
      ++result;
      ++v14;
      ++v15;
      if (!--v16) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t NANDatapath.Configuration.serviceInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(v1);
  NANGenericServiceProtocol.packetData(for:)(3LL, v1);
  swift_bridgeObjectRelease(v1);
  return 2LL;
}

void *NANDatapath.DatapathType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.DatapathType.defaultValue;
}

uint64_t NANDatapath.DatapathType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x73616369746C756DLL;
  }
  else {
    return 0x74736163696E75LL;
  }
}

CoreP2P::NANDatapath::DatapathType_optional __swiftcall NANDatapath.DatapathType.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &off_1003D5130;
  return (CoreP2P::NANDatapath::DatapathType_optional)sub_100178524(rawValue, v1);
}

uint64_t sub_100177CA4(char *a1, char *a2)
{
  return sub_10002B480(*a1, *a2);
}

uint64_t sub_100177CB0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1003D5130;
  return sub_10014E378(v2, a1, a2);
}

void sub_100177CBC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x74736163696E75LL;
  if (*v1) {
    uint64_t v2 = 0x73616369746C756DLL;
  }
  unint64_t v3 = 0xE700000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE900000000000074LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_100177D00()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v2 = 0x74736163696E75LL;
  }
  if (v1) {
    unint64_t v3 = 0xE900000000000074LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100177D84(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v2 = 0x74736163696E75LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE900000000000074LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100177DE4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v3 = 0x74736163696E75LL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000074LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100177E64()
{
  if (*v0) {
    return 0x73616369746C756DLL;
  }
  else {
    return 0x74736163696E75LL;
  }
}

void *NANDatapath.ServiceType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.ServiceType.defaultValue;
}

uint64_t NANDatapath.ServiceType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6576697470616461LL;
  }
  if (a1 == 1) {
    return 0x656D69746C616572LL;
  }
  return 0x6E6574614C776F6CLL;
}

uint64_t static NANDatapath.ServiceType.< infix(_:_:)(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1 && a2 == 2) {
      return 1LL;
    }
  }

  else if (a2 - 1 < 2)
  {
    return 1LL;
  }

  return 0LL;
}

_UNKNOWN **static NANDatapath.ServiceType.allCases.getter()
{
  return &off_1003D7328;
}

uint64_t sub_100177F5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002B484(*a1, *a2);
}

unint64_t sub_100177F68@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreP2P11NANDatapathO11ServiceTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100177F94(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000LL;
  unint64_t v4 = 0xE800000000000000LL;
  uint64_t v5 = 0x656D69746C616572LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6574614C776F6CLL;
    unint64_t v4 = 0xEA00000000007963LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6576697470616461LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100177FF8(void *a1@<X8>)
{
  *a1 = &off_1003D7350;
}

Swift::Int sub_100178008()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE800000000000000LL;
  uint64_t v3 = 0x656D69746C616572LL;
  if (v1 != 1)
  {
    uint64_t v3 = 0x6E6574614C776F6CLL;
    unint64_t v2 = 0xEA00000000007963LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6576697470616461LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE800000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001780AC(uint64_t a1)
{
  unint64_t v2 = 0xE800000000000000LL;
  uint64_t v3 = 0x656D69746C616572LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 0x6E6574614C776F6CLL;
    unint64_t v2 = 0xEA00000000007963LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6576697470616461LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE800000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10017812C(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE800000000000000LL;
  uint64_t v4 = 0x656D69746C616572LL;
  if (v2 != 1)
  {
    uint64_t v4 = 0x6E6574614C776F6CLL;
    unint64_t v3 = 0xEA00000000007963LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x6576697470616461LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_1001781CC(_BYTE *a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*a1)
  {
    if (*a1 != 1 || v2 != 2) {
      return 0LL;
    }
  }

  else if ((v2 - 1) >= 2)
  {
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_100178200(unsigned __int8 *a1, _BYTE *a2)
{
  int v2 = *a1;
  if (*a2)
  {
    if (*a2 != 1 || v2 != 2) {
      return 1LL;
    }
  }

  else if ((v2 - 1) >= 2)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_100178234(_BYTE *a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*a1)
  {
    if (*a1 != 1 || v2 != 2) {
      return 1LL;
    }
  }

  else if ((v2 - 1) >= 2)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_100178268(unsigned __int8 *a1, _BYTE *a2)
{
  int v2 = *a1;
  if (*a2)
  {
    if (*a2 != 1 || v2 != 2) {
      return 0LL;
    }
  }

  else if ((v2 - 1) >= 2)
  {
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10017829C()
{
  uint64_t v1 = 0x656D69746C616572LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6574614C776F6CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6576697470616461LL;
  }
}

void *NANDatapath.ParametersType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.ParametersType.defaultValue;
}

uint64_t NANDatapath.ParametersType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 1735617902LL;
  }
  else {
    return 7365742LL;
  }
}

CoreP2P::NANDatapath::ParametersType_optional __swiftcall NANDatapath.ParametersType.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &off_1003D5180;
  return (CoreP2P::NANDatapath::ParametersType_optional)sub_100178524(rawValue, v1);
}

uint64_t sub_10017833C(char *a1, char *a2)
{
  return sub_10002B3EC(*a1, *a2);
}

uint64_t sub_100178348@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1003D5180;
  return sub_10014E378(v2, a1, a2);
}

void sub_100178354(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7365742LL;
  if (*v1) {
    uint64_t v2 = 1735617902LL;
  }
  unint64_t v3 = 0xE300000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_100178384()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 1735617902LL;
  }
  else {
    uint64_t v2 = 7365742LL;
  }
  if (v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE300000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001783F4(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 1735617902LL;
  }
  else {
    uint64_t v2 = 7365742LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE300000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100178440(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 1735617902LL;
  }
  else {
    uint64_t v3 = 7365742LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE300000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001784AC()
{
  if (*v0) {
    return 1735617902LL;
  }
  else {
    return 7365742LL;
  }
}

uint64_t NANDatapath.ParametersMulticastType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x614D6F54796E616DLL;
  }
  else {
    return 0x6E614D6F54656E6FLL;
  }
}

CoreP2P::NANDatapath::ParametersMulticastType_optional __swiftcall NANDatapath.ParametersMulticastType.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue = &off_1003D51D0;
  return (CoreP2P::NANDatapath::ParametersMulticastType_optional)sub_100178524(rawValue, v1);
}

uint64_t sub_100178524(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100178570(char *a1, char *a2)
{
  return sub_10002B8A0(*a1, *a2);
}

uint64_t sub_10017857C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1003D51D0;
  return sub_10014E378(v2, a1, a2);
}

void sub_100178588(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6E614D6F54656E6FLL;
  if (*v1) {
    uint64_t v2 = 0x614D6F54796E616DLL;
  }
  unint64_t v3 = 0xE900000000000079LL;
  if (*v1) {
    unint64_t v3 = 0xEA0000000000796ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_1001785D0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x614D6F54796E616DLL;
  }
  else {
    uint64_t v2 = 0x6E614D6F54656E6FLL;
  }
  if (v1) {
    unint64_t v3 = 0xEA0000000000796ELL;
  }
  else {
    unint64_t v3 = 0xE900000000000079LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100178658(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x614D6F54796E616DLL;
  }
  else {
    uint64_t v2 = 0x6E614D6F54656E6FLL;
  }
  if (*v1) {
    unint64_t v3 = 0xEA0000000000796ELL;
  }
  else {
    unint64_t v3 = 0xE900000000000079LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001786BC(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x614D6F54796E616DLL;
  }
  else {
    uint64_t v3 = 0x6E614D6F54656E6FLL;
  }
  if (v2) {
    unint64_t v4 = 0xEA0000000000796ELL;
  }
  else {
    unint64_t v4 = 0xE900000000000079LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100178740()
{
  if (*v0) {
    return 0x614D6F54796E616DLL;
  }
  else {
    return 0x6E614D6F54656E6FLL;
  }
}

uint64_t static NANDatapath.InternetSharingConfiguration.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  if (!v4[3])
  {
    if (!v6) {
      goto LABEL_6;
    }
LABEL_5:
    sub_1000225EC((uint64_t)v4, &qword_100409E48);
    return 0LL;
  }

  if (!v6) {
    goto LABEL_5;
  }
  sub_10017B1A0(v5);
LABEL_6:
  sub_10017B1A0(v4);
  return 1LL;
}

void NANDatapath.InternetSharingConfiguration.hash(into:)()
{
  Swift::UInt8 v1 = v2[3] == 0LL;
  sub_10017B1A0(v2);
  Hasher._combine(_:)(v1);
}

Swift::Int NANDatapath.InternetSharingConfiguration.hashValue.getter()
{
  Swift::UInt8 v1 = v3[3] == 0LL;
  sub_10017B1A0(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001788B8(uint64_t a1)
{
  Swift::UInt8 v2 = v4[3] == 0LL;
  sub_10017B1A0(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.operation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_100020AFC(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t NANAttribute.DatapathExtension.interfaceIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_10002255C(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t NANAttribute.DatapathExtension.interfaceIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100020B40(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t NANDatapath.SecurityConfiguration.init(cipherSuite:key:pmkID:passphrase:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_BYTE *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  return result;
}

void NANDatapath.SecurityConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2 + 1);
  __int128 v9 = *(_OWORD *)(v2 + 8);
  __int128 v4 = v9;
  sub_10017B1D8((uint64_t)&v9);
  Data.hash(into:)(a1, v4, *((void *)&v4 + 1));
  sub_10017B204((uint64_t)&v9);
  unint64_t v5 = *(void *)(v2 + 32);
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    uint64_t v6 = *(void *)(v2 + 48);
    if (v6)
    {
LABEL_3:
      uint64_t v7 = *(void *)(v2 + 40);
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(a1, v7, v6);
      swift_bridgeObjectRelease(v6);
      return;
    }
  }

  else
  {
    uint64_t v8 = *(void *)(v2 + 24);
    Hasher._combine(_:)(1u);
    sub_100020AFC(v8, v5);
    Data.hash(into:)(a1, v8, v5);
    sub_100020B40(v8, v5);
    uint64_t v6 = *(void *)(v2 + 48);
    if (v6) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
}

Swift::Int NANDatapath.SecurityConfiguration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100178AFC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100178B34(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v5, v7) & 1;
}

unint64_t NANDatapath.Configuration.identifier.getter()
{
  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v0 + 3) << 24);
}

uint64_t NANDatapath.Configuration.initiatorSubscribeID.getter()
{
  return *(unsigned __int8 *)(v0 + 7);
}

unint64_t NANDatapath.Configuration.responderManagementAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 25) | ((unint64_t)*(unsigned int *)(v0 + 27) << 16);
}

uint64_t NANDatapath.Configuration.type.getter()
{
  return *(unsigned __int8 *)(v0 + 31);
}

uint64_t NANDatapath.Configuration.type.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 31) = result & 1;
  return result;
}

uint64_t (*NANDatapath.Configuration.type.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.Configuration.securityConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000226B0(v1 + 48, a1, &qword_100409E50);
}

uint64_t NANDatapath.Configuration.securityConfiguration.setter(uint64_t a1)
{
  return sub_100057104(a1, v1 + 48, &qword_100409E50);
}

uint64_t NANDatapath.Configuration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000226B0(v1 + 104, a1, (uint64_t *)&unk_10040DCB0);
}

uint64_t NANDatapath.Configuration.internetSharingConfiguration.setter(uint64_t a1)
{
  return sub_100057104(a1, v1 + 104, (uint64_t *)&unk_10040DCB0);
}

unint64_t NANDatapath.Configuration.multicastAddress.getter()
{
  return *(unsigned int *)(v0 + 144) | ((unint64_t)*(unsigned __int16 *)(v0 + 148) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 150) << 48);
}

uint64_t NANDatapath.Configuration.multicastAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 144) = result;
  *(_WORD *)(v1 + 148) = WORD2(result);
  *(_BYTE *)(v1 + 150) = BYTE6(result) & 1;
  return result;
}

uint64_t NANDatapath.Configuration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + 151);
}

uint64_t NANDatapath.Configuration.multicastServiceType.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 151) = result & 1;
  return result;
}

uint64_t (*NANDatapath.Configuration.multicastServiceType.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANDatapath.Configuration.hash(into:)(__int128 *a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v1);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 6);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 1));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 7));
  uint64_t v9 = *(void *)(v1 + 16);
  Swift::String v10 = String.lowercased()();
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10._object);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 24));
  Swift::UInt8 v11 = *(_BYTE *)(v2 + 26);
  Swift::UInt8 v12 = *(_BYTE *)(v2 + 27);
  Swift::UInt8 v13 = *(_BYTE *)(v2 + 28);
  Swift::UInt8 v14 = *(_BYTE *)(v2 + 29);
  Swift::UInt8 v15 = *(_BYTE *)(v2 + 30);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 25));
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  if (*(_BYTE *)(v2 + 31)) {
    uint64_t v16 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v16 = 0x74736163696E75LL;
  }
  if (*(_BYTE *)(v2 + 31)) {
    unint64_t v17 = 0xE900000000000074LL;
  }
  else {
    unint64_t v17 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  unint64_t v18 = 0xE800000000000000LL;
  uint64_t v19 = 0x656D69746C616572LL;
  if (*(_BYTE *)(v2 + 32) != 1)
  {
    uint64_t v19 = 0x6E6574614C776F6CLL;
    unint64_t v18 = 0xEA00000000007963LL;
  }

  if (*(_BYTE *)(v2 + 32)) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0x6576697470616461LL;
  }
  if (*(_BYTE *)(v2 + 32)) {
    unint64_t v21 = v18;
  }
  else {
    unint64_t v21 = 0xE800000000000000LL;
  }
  String.hash(into:)(a1, v20, v21);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain(v22);
  sub_10006C6D0(a1, v22);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = *(void *)(v2 + 96);
  if (v23 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v25 = *(void *)(v2 + 80);
    uint64_t v24 = *(void *)(v2 + 88);
    unint64_t v27 = *(void *)(v2 + 64);
    uint64_t v26 = *(void *)(v2 + 72);
    uint64_t v29 = *(void *)(v2 + 48);
    uint64_t v28 = *(void *)(v2 + 56);
    char v42 = v29;
    uint64_t v43 = v28;
    unint64_t v44 = v27;
    uint64_t v45 = v26;
    unint64_t v46 = v25;
    uint64_t v47 = v24;
    uint64_t v48 = v23;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v28, v27);
    sub_10002255C(v26, v25);
    swift_bridgeObjectRetain(v23);
    NANDatapath.SecurityConfiguration.hash(into:)((uint64_t)a1);
    sub_1000AADB0(v29, v28, v27, v26, v25, v24, v23);
  }

  sub_1000226B0(v2 + 104, (uint64_t)&v40, (uint64_t *)&unk_10040DCB0);
  if (v41 == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(_BYTE *)(v2 + 150) & 1) == 0)
    {
LABEL_20:
      unsigned int v30 = *(unsigned __int16 *)(v2 + 148);
      unsigned int v31 = *(_DWORD *)(v2 + 144);
      unint64_t v32 = v31 | ((unint64_t)*(unsigned __int16 *)(v2 + 148) << 32);
      unint64_t v33 = v32 >> 8;
      unint64_t v34 = v32 >> 16;
      unint64_t v35 = v32 >> 24;
      unsigned int v36 = v30 >> 8;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v33);
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v35);
      Hasher._combine(_:)(v30);
      goto LABEL_23;
    }
  }

  else
  {
    sub_1000589F8(&v40, (uint64_t)v39);
    Hasher._combine(_:)(1u);
    sub_10017B140(v39, (uint64_t)v38);
    Swift::UInt8 v37 = v38[3] == 0LL;
    sub_10017B1A0(v38);
    Hasher._combine(_:)(v37);
    sub_10017B1A0(v39);
    if ((*(_BYTE *)(v2 + 150) & 1) == 0) {
      goto LABEL_20;
    }
  }

  LOBYTE(v36) = 0;
LABEL_23:
  Hasher._combine(_:)(v36);
  if (*(_BYTE *)(v2 + 151) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)(a1, 0xD000000000000012LL, 0x80000001003618E0LL);
  }

Swift::Int NANDatapath.Configuration.hashValue.getter()
{
  return Hasher._finalize()();
}

void sub_1001790E0(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 4);
  char v3 = *(_BYTE *)(v1 + 6);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_WORD *)(a1 + 4) = v2;
  *(_BYTE *)(a1 + 6) = v3;
}

Swift::Int sub_100179100(uint64_t a1)
{
  return Hasher._finalize()();
}

unint64_t NANDatapath.ResponseConfiguration.identifier.getter()
{
  return *v0 | ((unint64_t)v0[8] << 8) | ((unint64_t)v0[9] << 16) | ((unint64_t)*(unsigned int *)(v0 + 10) << 24);
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceInfo.getter()
{
  uint64_t v1 = v0[2];
  sub_1001062A0(v1, v0[3], v0[4]);
  return v1;
}

unint64_t NANDatapath.ResponseConfiguration.responderManagementAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 40) | ((unint64_t)*(unsigned int *)(v0 + 42) << 16);
}

unint64_t NANDatapath.ResponseConfiguration.responderDataAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 46) | ((unint64_t)*(unsigned int *)(v0 + 48) << 16);
}

uint64_t NANDatapath.ResponseConfiguration.serviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

uint64_t NANDatapath.ResponseConfiguration.dialogToken.getter()
{
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t NANDatapath.ResponseConfiguration.status.getter()
{
  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t NANDatapath.ResponseConfiguration.status.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 74) = result;
  return result;
}

uint64_t (*NANDatapath.ResponseConfiguration.status.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.ResponseConfiguration.securityConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000226B0(v1 + 80, a1, &qword_100409E50);
}

uint64_t NANDatapath.ResponseConfiguration.securityConfiguration.setter(uint64_t a1)
{
  return sub_100057104(a1, v1 + 80, &qword_100409E50);
}

uint64_t NANDatapath.ResponseConfiguration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000226B0(v1 + 136, a1, &qword_100409E58);
}

uint64_t NANDatapath.ResponseConfiguration.internetSharingConfiguration.setter(uint64_t a1)
{
  return sub_100057104(a1, v1 + 136, &qword_100409E58);
}

unint64_t NANDatapath.ResponseConfiguration.multicastAddress.getter()
{
  return *(unsigned int *)(v0 + 177) | ((unint64_t)*(unsigned __int16 *)(v0 + 181) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 183) << 48);
}

uint64_t NANDatapath.ResponseConfiguration.multicastAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 177) = result;
  *(_WORD *)(v1 + 181) = WORD2(result);
  *(_BYTE *)(v1 + 183) = BYTE6(result) & 1;
  return result;
}

uint64_t (*NANDatapath.ResponseConfiguration.multicastAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.ResponseConfiguration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t NANDatapath.ResponseConfiguration.multicastServiceType.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 184) = result & 1;
  return result;
}

uint64_t NANDatapath.ResponseConfiguration.init(instanceID:publishID:initiatorManagementAddress:initiatorDataAddress:initiatorServiceInfo:responderManagementAddress:responderDataAddress:serviceName:serviceType:dialogToken:status:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)@<X0>( char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  *(_BYTE *)(a9 + 176) = -1;
  *(_BYTE *)a9 = a1;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 3) = BYTE1(a3);
  *(_BYTE *)(a9 + 4) = BYTE2(a3);
  *(_BYTE *)(a9 + 5) = BYTE3(a3);
  *(void *)(a9 + 177) = 0x101000000000000LL;
  uint64_t v21 = a9 + 177;
  *(_BYTE *)(a9 + 6) = BYTE4(a3);
  *(_BYTE *)(a9 + 2) = a3;
  *(_BYTE *)(a9 + 7) = BYTE5(a3);
  *(_BYTE *)(a9 + 9) = BYTE1(a4);
  *(_BYTE *)(a9 + 10) = BYTE2(a4);
  *(_BYTE *)(a9 + 11) = BYTE3(a4);
  *(_BYTE *)(a9 + 12) = BYTE4(a4);
  *(_BYTE *)(a9 + 8) = a4;
  *(_BYTE *)(a9 + 13) = BYTE5(a4);
  *(void *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = a6;
  *(void *)(a9 + 32) = a7;
  *(_BYTE *)(a9 + 41) = BYTE1(a8);
  *(_BYTE *)(a9 + 42) = BYTE2(a8);
  *(_BYTE *)(a9 + 43) = BYTE3(a8);
  *(_BYTE *)(a9 + 40) = a8;
  *(_BYTE *)(a9 + 44) = BYTE4(a8);
  *(_BYTE *)(a9 + 45) = BYTE5(a8);
  *(_DWORD *)(a9 + 47) = *(_DWORD *)((char *)&a10 + 1);
  *(_BYTE *)(a9 + 46) = a10;
  *(_BYTE *)(a9 + 51) = BYTE5(a10);
  *(void *)(a9 + 56) = a11;
  *(void *)(a9 + 64) = a12;
  *(_BYTE *)(a9 + 72) = a13;
  *(void *)(a9 + 168) = 0LL;
  *(_OWORD *)(a9 + 152) = 0u;
  *(_WORD *)(a9 + 73) = *(_WORD *)((char *)&a13 + 1);
  *(_OWORD *)(a9 + 136) = 0u;
  sub_1000586C0(a14, a9 + 80, &qword_100409E50);
  uint64_t result = sub_100057104(a15, a9 + 136, &qword_100409E58);
  *(_WORD *)(v21 + 4) = a17;
  *(_DWORD *)uint64_t v21 = a16;
  *(_BYTE *)(a9 + 183) = a18 & 1;
  *(_BYTE *)(a9 + 184) = a20 & 1;
  return result;
}

void NANDatapath.ResponseConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 1));
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 7);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 2));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v11 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 12);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 13);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 8));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  uint64_t v14 = *(void *)(v1 + 16);
  if (v14 == 4LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v16 = *(void *)(v1 + 24);
    unint64_t v15 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    sub_100020AFC(v16, v15);
    Data.hash(into:)(a1, v16, v15);
    sub_1001062E0(v14, v16, v15);
  }

  Swift::UInt8 v17 = *(_BYTE *)(v1 + 41);
  Swift::UInt8 v18 = *(_BYTE *)(v1 + 42);
  Swift::UInt8 v19 = *(_BYTE *)(v1 + 43);
  Swift::UInt8 v20 = *(_BYTE *)(v1 + 44);
  Swift::UInt8 v21 = *(_BYTE *)(v1 + 45);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 40));
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Swift::UInt8 v22 = *(_BYTE *)(v1 + 47);
  Swift::UInt8 v23 = *(_BYTE *)(v1 + 48);
  Swift::UInt8 v24 = *(_BYTE *)(v1 + 49);
  Swift::UInt8 v25 = *(_BYTE *)(v1 + 50);
  Swift::UInt8 v26 = *(_BYTE *)(v1 + 51);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 46));
  Hasher._combine(_:)(v22);
  Hasher._combine(_:)(v23);
  Hasher._combine(_:)(v24);
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(v26);
  uint64_t v27 = *(void *)(v1 + 64);
  Swift::String v28 = String.lowercased()();
  swift_bridgeObjectRetain(v27);
  String.hash(into:)(a1, v28._countAndFlagsBits, v28._object);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v28._object);
  unint64_t v29 = 0xE800000000000000LL;
  uint64_t v30 = 0x656D69746C616572LL;
  if (*(_BYTE *)(v2 + 72) != 1)
  {
    uint64_t v30 = 0x6E6574614C776F6CLL;
    unint64_t v29 = 0xEA00000000007963LL;
  }

  if (*(_BYTE *)(v2 + 72)) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0x6576697470616461LL;
  }
  if (*(_BYTE *)(v2 + 72)) {
    unint64_t v32 = v29;
  }
  else {
    unint64_t v32 = 0xE800000000000000LL;
  }
  String.hash(into:)(a1, v31, v32);
  swift_bridgeObjectRelease(v32);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 73));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 74));
  uint64_t v33 = *(void *)(v2 + 128);
  if (v33 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v35 = *(void *)(v2 + 112);
    uint64_t v34 = *(void *)(v2 + 120);
    unint64_t v37 = *(void *)(v2 + 96);
    uint64_t v36 = *(void *)(v2 + 104);
    uint64_t v39 = *(void *)(v2 + 80);
    uint64_t v38 = *(void *)(v2 + 88);
    v54[48] = v39;
    uint64_t v55 = v38;
    unint64_t v56 = v37;
    uint64_t v57 = v36;
    unint64_t v58 = v35;
    uint64_t v59 = v34;
    uint64_t v60 = v33;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v38, v37);
    sub_10002255C(v36, v35);
    swift_bridgeObjectRetain(v33);
    NANDatapath.SecurityConfiguration.hash(into:)(a1);
    sub_1000AADB0(v39, v38, v37, v36, v35, v34, v33);
  }

  sub_1000226B0(v2 + 136, (uint64_t)v54, &qword_100409E58);
  if (v54[40] != 255)
  {
    sub_10017B230((uint64_t)v54, (uint64_t)v53);
    Hasher._combine(_:)(1u);
    sub_10017B26C((uint64_t)v53, (uint64_t)v50);
    if ((v52 & 1) != 0)
    {
      sub_10017B2A8((uint64_t)v50);
      Swift::UInt8 v40 = 0;
    }

    else
    {
      uint64_t v48 = v50[0];
      uint64_t v49 = v50[1];
      Swift::UInt8 v40 = v51;
      Hasher._combine(_:)(1u);
      String.hash(into:)(a1, v48, v49);
      swift_bridgeObjectRelease(v49);
    }

    Hasher._combine(_:)(v40);
    sub_10017B2A8((uint64_t)v53);
    if ((*(_BYTE *)(v2 + 183) & 1) != 0) {
      goto LABEL_22;
    }
LABEL_19:
    unsigned int v41 = *(unsigned __int16 *)(v2 + 181);
    unsigned int v42 = *(_DWORD *)(v2 + 177);
    unint64_t v43 = v42 | ((unint64_t)*(unsigned __int16 *)(v2 + 181) << 32);
    unint64_t v44 = v43 >> 8;
    unint64_t v45 = v43 >> 16;
    unint64_t v46 = v43 >> 24;
    unsigned int v47 = v41 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
    Hasher._combine(_:)(v44);
    Hasher._combine(_:)(v45);
    Hasher._combine(_:)(v46);
    Hasher._combine(_:)(v41);
    goto LABEL_23;
  }

  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(v2 + 183) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_22:
  LOBYTE(v47) = 0;
LABEL_23:
  Hasher._combine(_:)(v47);
  if (*(_BYTE *)(v2 + 184) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)(a1, 0xD000000000000012LL, 0x80000001003618E0LL);
  }

Swift::Int NANDatapath.ResponseConfiguration.hashValue.getter()
{
  return Hasher._finalize()();
}

void sub_10017994C(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 12);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(v1 + 8);
  *(_WORD *)(a1 + 5) = v2;
}

Swift::Int sub_10017996C(uint64_t a1)
{
  return Hasher._finalize()();
}

void __swiftcall NANDatapath.ConfirmationConfiguration.init(instanceID:initiatorDataAddress:status:)( CoreP2P::NANDatapath::ConfirmationConfiguration *__return_ptr retstr, Swift::UInt8 instanceID, CoreP2P::WiFiAddress *initiatorDataAddress, CoreP2P::NANAttribute::Datapath::Status status)
{
}

BOOL sub_1001799C0(unint64_t *a1, unint64_t *a2)
{
  return _s7CoreP2P11NANDatapathO25ConfirmationConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t NANDatapath.Configuration.init(instanceID:serviceName:responderPublishID:responderManagementAddress:initiatorDataAddress:initiatorSubscribeID:publicOWEKey:protocolType:port:hostname:serviceType:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, unint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18)
{
  v65  = a7;
  int v66 = a4;
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  int v62 = a1;
  uint64_t v70 = a17;
  v71  = a8;
  uint64_t v69 = a16;
  unint64_t v67 = a5;
  uint64_t v68 = a15;
  unint64_t v55 = a13;
  uint64_t v56 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  Swift::UInt8 v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  uint64_t v58 = (uint64_t)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_1004050A0);
  __chkstk_darwin();
  Swift::UInt8 v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405118);
  __chkstk_darwin();
  uint64_t v59 = (uint64_t)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v27 = (uint64_t *)((char *)&v45 - v26);
  __chkstk_darwin();
  unint64_t v29 = (char *)&v45 - v28;
  __chkstk_darwin();
  uint64_t v31 = (char *)&v45 - v30;
  unint64_t v72 = sub_100020554((uint64_t)_swiftEmptyArrayStorage);
  if (a10 == 2)
  {
    uint64_t v32 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v31, 1LL, 1LL, v32);
  }

  else
  {
    *uint64_t v31 = a10 & 1;
    uint64_t v33 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v31, v33, 1LL);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v31, 0LL, 1LL, v33);
  }

  int v60 = a18;
  int v57 = a14;
  sub_1000226B0((uint64_t)v31, (uint64_t)v29, &qword_100405118);
  sub_100013D20((uint64_t)v29, 1);
  sub_1000225EC((uint64_t)v31, &qword_100405118);
  sub_1000226B0(a11, (uint64_t)v24, &qword_1004050A0);
  NANGenericServiceProtocol.port.setter((uint64_t)v24);
  uint64_t v61 = a11;
  if (v55 && (uint64_t v34 = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(a12, v55), v35))
  {
    *uint64_t v27 = v34;
    v27[1]  = v35;
    uint64_t v36 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v27, v36, 2LL);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v27, 0LL, 1LL, v36);
  }

  else
  {
    uint64_t v36 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v27, 1LL, 1LL, v36);
  }

  unint64_t v51 = a6 >> 40;
  unint64_t v49 = HIDWORD(a6);
  unint64_t v48 = a6 >> 24;
  unint64_t v47 = a6 >> 16;
  unint64_t v46 = a6 >> 8;
  unint64_t v45 = a6;
  char v37 = v67;
  unint64_t v54 = HIDWORD(v67);
  unint64_t v55 = v67 >> 40;
  unint64_t v52 = v67 >> 16;
  unint64_t v53 = v67 >> 24;
  unint64_t v50 = v67 >> 8;
  sub_1000226B0((uint64_t)v27, (uint64_t)v29, &qword_100405118);
  sub_100013D20((uint64_t)v29, 2);
  sub_1000225EC((uint64_t)v27, &qword_100405118);
  uint64_t v38 = v58;
  sub_1000226B0(v71, v58, (uint64_t *)&unk_10040D470);
  sub_1000667B0(v72, (uint64_t)v21);
  sub_10006D2CC(v38, (uint64_t)&v21[*(int *)(v56 + 24)]);
  sub_10017B2DC((uint64_t)v21, (uint64_t)v29);
  type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  swift_storeEnumTagMultiPayload(v29, v36, 7LL);
  uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL);
  v39(v29, 0LL, 1LL, v36);
  uint64_t v40 = v59;
  sub_1000226B0((uint64_t)v29, v59, &qword_100405118);
  sub_100013D20(v40, 7);
  sub_10017B320((uint64_t)v21);
  sub_1000225EC((uint64_t)v29, &qword_100405118);
  sub_1000225EC(v38, (uint64_t *)&unk_10040D470);
  sub_1000667B0(v72, (uint64_t)v21);
  LOBYTE(v38)  = v65;
  *(_WORD *)(v21 + 1)  = v65;
  sub_10017B2DC((uint64_t)v21, (uint64_t)v29);
  swift_storeEnumTagMultiPayload(v29, v36, 7LL);
  v39(v29, 0LL, 1LL, v36);
  sub_1000226B0((uint64_t)v29, v40, &qword_100405118);
  sub_100013D20(v40, 7);
  sub_10017B320((uint64_t)v21);
  sub_1000225EC((uint64_t)v29, &qword_100405118);
  sub_1000225EC(v61, &qword_1004050A0);
  sub_1000225EC(v71, (uint64_t *)&unk_10040D470);
  unint64_t v41 = v72;
  *(_BYTE *)a9  = v62;
  *(_BYTE *)(a9 + 1)  = v45;
  *(_BYTE *)(a9 + 2)  = v46;
  *(_BYTE *)(a9 + 3)  = v47;
  *(_BYTE *)(a9 + 4)  = v48;
  *(_BYTE *)(a9 + 5)  = v49;
  *(_BYTE *)(a9 + 6)  = v51;
  *(_BYTE *)(a9 + 7)  = v38;
  uint64_t v42 = v64;
  *(void *)(a9 + 8)  = v63;
  *(void *)(a9 + 16)  = v42;
  *(_BYTE *)(a9 + 24)  = v66;
  *(_BYTE *)(a9 + 25)  = v37;
  *(_BYTE *)(a9 + 26)  = v50;
  *(_BYTE *)(a9 + 27)  = v52;
  *(_BYTE *)(a9 + 28)  = v53;
  *(_BYTE *)(a9 + 29)  = v54;
  *(_WORD *)(a9 + 30)  = v55;
  *(_BYTE *)(a9 + 32)  = v57;
  *(void *)(a9 + 40)  = v41;
  sub_1000586C0(v68, a9 + 48, &qword_100409E50);
  uint64_t result = sub_1000586C0(v69, a9 + 104, (uint64_t *)&unk_10040DCB0);
  uint64_t v44 = v70;
  *(_WORD *)(a9 + 148)  = WORD2(v70);
  *(_DWORD *)(a9 + 144)  = v44;
  *(_BYTE *)(a9 + 150)  = BYTE6(v44) & 1;
  *(_BYTE *)(a9 + 151)  = v60 & 1;
  return result;
}

uint64_t NANDatapath.ServiceType.init(apiServiceType:)(uint64_t a1)
{
  if (a1 == 2) {
    return 2LL;
  }
  else {
    return a1 == 1;
  }
}

uint64_t _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0( void *a1, void *a2)
{
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = a1[3];
  unint64_t v6 = a1[4];
  uint64_t v7 = a2[3];
  unint64_t v8 = a2[4];
  if (v6 >> 60 != 15)
  {
    if (v8 >> 60 != 15)
    {
      sub_10002255C(a1[3], a1[4]);
      sub_10002255C(v7, v8);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
      char v10 = v9;
      sub_100020B40(v7, v8);
      sub_100020B40(v5, v6);
      if ((v10 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_9;
    }

uint64_t _s7CoreP2P11NANDatapathO21ResponseConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0LL;
  }
  int v4 = *((unsigned __int16 *)a1 + 3);
  int v5 = *((unsigned __int16 *)a2 + 3);
  *(_DWORD *)uint64_t v83 = *(_DWORD *)(a1 + 2);
  *(_WORD *)&v83[4]  = v4;
  if (*(_DWORD *)v83 != *(_DWORD *)(a2 + 2) || v4 != v5) {
    return 0LL;
  }
  int v7 = *((unsigned __int16 *)a1 + 6);
  int v8 = *((unsigned __int16 *)a2 + 6);
  *(_DWORD *)uint64_t v83 = *((_DWORD *)a1 + 2);
  *(_WORD *)&v83[4]  = v7;
  if (*(_DWORD *)v83 != *((_DWORD *)a2 + 2) || v7 != v8) {
    return 0LL;
  }
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v11 = *((void *)a1 + 3);
  unint64_t v12 = *((void *)a1 + 4);
  uint64_t v13 = *((void *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 3);
  unint64_t v15 = *((void *)a2 + 4);
  if (v10 == 4LL)
  {
LABEL_17:
    sub_1001062A0(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a1 + 4));
    sub_1001062A0(v13, v14, v15);
    sub_1001062E0(v10, v11, v12);
    sub_1001062E0(v13, v14, v15);
    return 0LL;
  }

  sub_1001062A0(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a1 + 4));
  sub_1001062A0(v13, v14, v15);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v12);
  char v17 = v16;
  sub_1001062E0(v13, v14, v15);
  sub_1001062E0(v10, v11, v12);
  if ((v17 & 1) == 0) {
    return 0LL;
  }
LABEL_20:
  int v18 = *((unsigned __int16 *)a1 + 22);
  int v19 = *((unsigned __int16 *)a2 + 22);
  *(_DWORD *)uint64_t v83 = *((_DWORD *)a1 + 10);
  *(_WORD *)&v83[4]  = v18;
  if (*(_DWORD *)v83 != *((_DWORD *)a2 + 10) || v18 != v19) {
    return 0LL;
  }
  int v21 = *((unsigned __int16 *)a1 + 25);
  int v22 = *((unsigned __int16 *)a2 + 25);
  *(_DWORD *)uint64_t v83 = *(_DWORD *)(a1 + 46);
  *(_WORD *)&v83[4]  = v21;
  if (*(_DWORD *)v83 != *(_DWORD *)(a2 + 46) || v21 != v22) {
    return 0LL;
  }
  Swift::String v25 = String.lowercased()();
  Swift::String v26 = String.lowercased()();
  if (v25._countAndFlagsBits == v26._countAndFlagsBits && v25._object == v26._object)
  {
    swift_bridgeObjectRelease_n(v25._object, 2LL);
  }

  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)( v25._countAndFlagsBits,  v25._object,  v26._countAndFlagsBits,  v26._object,  0LL);
    swift_bridgeObjectRelease(v25._object);
    swift_bridgeObjectRelease(v26._object);
    uint64_t result = 0LL;
    if ((v27 & 1) == 0) {
      return result;
    }
  }

  uint64_t v28 = 0x6576697470616461LL;
  if (a1[72])
  {
    if (a1[72] == 1)
    {
      unint64_t v29 = 0xE800000000000000LL;
      uint64_t v30 = 0x656D69746C616572LL;
    }

    else
    {
      uint64_t v30 = 0x6E6574614C776F6CLL;
      unint64_t v29 = 0xEA00000000007963LL;
    }
  }

  else
  {
    unint64_t v29 = 0xE800000000000000LL;
    uint64_t v30 = 0x6576697470616461LL;
  }

  if (a2[72])
  {
    if (a2[72] == 1)
    {
      unint64_t v31 = 0xE800000000000000LL;
      uint64_t v28 = 0x656D69746C616572LL;
    }

    else
    {
      uint64_t v28 = 0x6E6574614C776F6CLL;
      unint64_t v31 = 0xEA00000000007963LL;
    }
  }

  else
  {
    unint64_t v31 = 0xE800000000000000LL;
  }

  if (v30 == v28 && v29 == v31)
  {
    swift_bridgeObjectRelease_n(v29, 2LL);
LABEL_49:
    if (a1[73] != a2[73] || a1[74] != a2[74]) {
      return 0LL;
    }
    uint64_t v33 = *((void *)a1 + 10);
    uint64_t v34 = *((void *)a1 + 11);
    unint64_t v35 = *((void *)a1 + 12);
    uint64_t v36 = *((void *)a1 + 13);
    unint64_t v38 = *((void *)a1 + 14);
    uint64_t v37 = *((void *)a1 + 15);
    uint64_t v39 = *((void *)a1 + 16);
    uint64_t v40 = *((void *)a2 + 10);
    uint64_t v41 = *((void *)a2 + 11);
    unint64_t v42 = *((void *)a2 + 12);
    uint64_t v43 = *((void *)a2 + 13);
    unint64_t v45 = *((void *)a2 + 14);
    uint64_t v44 = *((void *)a2 + 15);
    uint64_t v46 = *((void *)a2 + 16);
    if (v39 == 1)
    {
      if (v46 == 1) {
        goto LABEL_57;
      }
    }

    else if (v46 != 1)
    {
      LOBYTE(v89[0])  = *((void *)a1 + 10);
      v89[1]  = v34;
      v89[2]  = v35;
      v89[3]  = v36;
      v89[4]  = v38;
      v89[5]  = v37;
      v89[6]  = v39;
      LOBYTE(v90[0])  = v40;
      v90[1]  = v41;
      v90[2]  = v42;
      v90[3]  = v43;
      v90[4]  = v45;
      v90[5]  = v44;
      v90[6]  = v46;
      uint64_t v78 = v39;
      uint64_t v80 = v33;
      uint64_t v70 = v34;
      v71  = v35;
      uint64_t v53 = v34;
      unint64_t v54 = v35;
      uint64_t v55 = v36;
      uint64_t v56 = v36;
      unint64_t v72 = v38;
      v73  = v37;
      unint64_t v57 = v45;
      uint64_t v58 = v44;
      uint64_t v59 = v46;
      sub_10017D3D0(v33, v53, v54, v56, v38, v37, v39);
      sub_10017D3D0(v40, v41, v42, v43, v57, v58, v59);
      char v76 = _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v89, v90);
      sub_1000AADB0(v40, v41, v42, v43, v57, v58, v59);
      sub_1000AADB0(v80, v70, v71, v55, v72, v73, v78);
      if ((v76 & 1) == 0) {
        return 0LL;
      }
LABEL_57:
      sub_1000226B0((uint64_t)(a1 + 136), (uint64_t)v88, &qword_100409E58);
      sub_1000226B0((uint64_t)(a2 + 136), (uint64_t)v87, &qword_100409E58);
      sub_1000226B0((uint64_t)v88, (uint64_t)v83, &qword_100409E58);
      sub_1000226B0((uint64_t)v87, (uint64_t)v85, &qword_100409E58);
      if (v84 == 255)
      {
        sub_1000225EC((uint64_t)v87, &qword_100409E58);
        sub_1000225EC((uint64_t)v88, &qword_100409E58);
        if (v86 == 255)
        {
          sub_1000225EC((uint64_t)v83, &qword_100409E58);
LABEL_63:
          if ((a1[183] & 1) != 0)
          {
            if (!a2[183]) {
              return 0LL;
            }
          }

          else
          {
            if ((a2[183] & 1) != 0) {
              return 0LL;
            }
            unint64_t v61 = *(unsigned int *)(a1 + 177) | ((unint64_t)*(unsigned __int16 *)(a1 + 181) << 32);
            unint64_t v62 = *(unsigned int *)(a2 + 177) | ((unint64_t)*(unsigned __int16 *)(a2 + 181) << 32);
            v63.i64[0]  = 0xFFFFFFFFFFFFLL;
            v63.i64[1]  = 0xFFFFFFFFFFFFLL;
            uint64x2_t v64 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v61), v63);
            v65  = (int16x8_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033A8F0);
            uint64x2_t v66 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v62), v63);
            int64x2_t v67 = (int64x2_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033A8F0);
            int16x8_t v68 = (int16x8_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033A8E0);
            v83[0]  = *(_DWORD *)(a1 + 177);
            *(int32x2_t *)v64.i8  = vmovn_s64((int64x2_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033A8E0));
            *(int32x2_t *)v65.i8  = vmovn_s64((int64x2_t)v65);
            v65.i16[1]  = v65.i16[2];
            v65.i16[2]  = v64.i16[0];
            v65.i16[3]  = v64.i16[2];
            *(_DWORD *)&v83[1]  = vmovn_s16(v65).u32[0];
            v83[5]  = BYTE5(v61);
            v88[0]  = v62;
            *(int32x2_t *)v64.i8  = vmovn_s64((int64x2_t)v68);
            *(int32x2_t *)v68.i8  = vmovn_s64(v67);
            v68.i16[1]  = v68.i16[2];
            v68.i16[2]  = v64.i16[0];
            v68.i16[3]  = v64.i16[2];
            *(_DWORD *)&v88[1]  = vmovn_s16(v68).u32[0];
            v88[5]  = BYTE5(v62);
          }

          if ((a1[184] & 1) != 0)
          {
            if ((a2[184] & 1) != 0) {
              return 1LL;
            }
          }

          else if ((a2[184] & 1) == 0)
          {
            return 1LL;
          }

          return 0LL;
        }
      }

      else
      {
        sub_1000226B0((uint64_t)v83, (uint64_t)v82, &qword_100409E58);
        if (v86 != 255)
        {
          sub_10017B230((uint64_t)v85, (uint64_t)v81);
          char v60 = _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0((uint64_t)v82, (uint64_t)v81);
          sub_10017B2A8((uint64_t)v81);
          sub_1000225EC((uint64_t)v87, &qword_100409E58);
          sub_1000225EC((uint64_t)v88, &qword_100409E58);
          sub_10017B2A8((uint64_t)v82);
          sub_1000225EC((uint64_t)v83, &qword_100409E58);
          if ((v60 & 1) == 0) {
            return 0LL;
          }
          goto LABEL_63;
        }

        sub_1000225EC((uint64_t)v87, &qword_100409E58);
        sub_1000225EC((uint64_t)v88, &qword_100409E58);
        sub_10017B2A8((uint64_t)v82);
      }

      sub_1000225EC((uint64_t)v83, &qword_100409F60);
      return 0LL;
    }

    uint64_t v47 = *((void *)a1 + 10);
    uint64_t v77 = *((void *)a1 + 16);
    uint64_t v79 = v47;
    uint64_t v74 = *((void *)a2 + 11);
    v75  = *((void *)a2 + 14);
    unint64_t v48 = *((void *)a2 + 12);
    unint64_t v49 = *((void *)a1 + 14);
    uint64_t v50 = *((void *)a1 + 15);
    uint64_t v51 = v44;
    uint64_t v52 = v46;
    sub_10017D3D0(v47, v34, v35, v36, v38, v37, v39);
    sub_10017D3D0(v40, v74, v48, v43, v75, v51, v52);
    sub_1000AADB0(v79, v34, v35, v36, v49, v50, v77);
    sub_1000AADB0(v40, v74, v48, v43, v75, v51, v52);
    return 0LL;
  }

  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v29, v28, v31, 0LL);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  uint64_t result = 0LL;
  if ((v32 & 1) != 0) {
    goto LABEL_49;
  }
  return result;
}

BOOL _s7CoreP2P11NANDatapathO25ConfirmationConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0( unint64_t a1, unint64_t a2)
{
  LOBYTE(v7)  = BYTE1(a1);
  BYTE1(v7)  = BYTE2(a1);
  BYTE2(v7)  = BYTE3(a1);
  HIBYTE(v7)  = BYTE4(a1);
  LOBYTE(v8)  = BYTE5(a1);
  HIBYTE(v8)  = BYTE6(a1);
  LOBYTE(v5)  = BYTE1(a2);
  BYTE1(v5)  = BYTE2(a2);
  BYTE2(v5)  = BYTE3(a2);
  HIBYTE(v5)  = BYTE4(a2);
  LOBYTE(v6)  = BYTE5(a2);
  HIBYTE(v6)  = BYTE6(a2);
  return v7 == v5 && v8 == v6 && HIBYTE(a1) == HIBYTE(a2);
}

uint64_t _s7CoreP2P11NANDatapathO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  int v4 = *(unsigned __int16 *)(a1 + 5);
  int v5 = *(unsigned __int16 *)(a2 + 5);
  *(_DWORD *)unint64_t v72 = *(_DWORD *)(a1 + 1);
  *(_WORD *)&v72[4]  = v4;
  BOOL v6 = *(_DWORD *)v72 == *(_DWORD *)(a2 + 1) && v4 == v5;
  if (!v6 || a1[7] != a2[7]) {
    return 0LL;
  }
  Swift::String v7 = String.lowercased()();
  Swift::String v8 = String.lowercased()();
  if (v7._countAndFlagsBits == v8._countAndFlagsBits && v7._object == v8._object)
  {
    swift_bridgeObjectRelease_n(v7._object, 2LL);
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)( v7._countAndFlagsBits,  v7._object,  v8._countAndFlagsBits,  v8._object,  0LL);
    swift_bridgeObjectRelease(v7._object);
    swift_bridgeObjectRelease(v8._object);
    uint64_t result = 0LL;
    if ((v9 & 1) == 0) {
      return result;
    }
  }

  if (a1[24] != a2[24]) {
    return 0LL;
  }
  int v11 = *(unsigned __int16 *)(a1 + 29);
  int v12 = *(unsigned __int16 *)(a2 + 29);
  *(_DWORD *)unint64_t v72 = *(_DWORD *)(a1 + 25);
  *(_WORD *)&v72[4]  = v11;
  if (*(_DWORD *)v72 != *(_DWORD *)(a2 + 25) || v11 != v12) {
    return 0LL;
  }
  if (a1[31]) {
    uint64_t v14 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v14 = 0x74736163696E75LL;
  }
  if (a1[31]) {
    unint64_t v15 = 0xE900000000000074LL;
  }
  else {
    unint64_t v15 = 0xE700000000000000LL;
  }
  if (a2[31]) {
    uint64_t v16 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v16 = 0x74736163696E75LL;
  }
  if (a2[31]) {
    unint64_t v17 = 0xE900000000000074LL;
  }
  else {
    unint64_t v17 = 0xE700000000000000LL;
  }
  if (v14 == v16 && v15 == v17)
  {
    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0LL);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v17);
    uint64_t result = 0LL;
    if ((v18 & 1) == 0) {
      return result;
    }
  }

  uint64_t v19 = 0x6576697470616461LL;
  if (a1[32])
  {
    if (a1[32] == 1)
    {
      unint64_t v20 = 0xE800000000000000LL;
      uint64_t v21 = 0x656D69746C616572LL;
    }

    else
    {
      uint64_t v21 = 0x6E6574614C776F6CLL;
      unint64_t v20 = 0xEA00000000007963LL;
    }
  }

  else
  {
    unint64_t v20 = 0xE800000000000000LL;
    uint64_t v21 = 0x6576697470616461LL;
  }

  if (a2[32])
  {
    if (a2[32] == 1)
    {
      unint64_t v22 = 0xE800000000000000LL;
      uint64_t v19 = 0x656D69746C616572LL;
    }

    else
    {
      uint64_t v19 = 0x6E6574614C776F6CLL;
      unint64_t v22 = 0xEA00000000007963LL;
    }
  }

  else
  {
    unint64_t v22 = 0xE800000000000000LL;
  }

  if (v21 == v19 && v20 == v22)
  {
    swift_bridgeObjectRelease_n(v20, 2LL);
    goto LABEL_49;
  }

  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v20, v19, v22, 0LL);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v22);
  uint64_t result = 0LL;
  if ((v23 & 1) != 0)
  {
LABEL_49:
    if ((sub_1000680E4(*((void *)a1 + 5), *((void *)a2 + 5)) & 1) == 0) {
      return 0LL;
    }
    uint64_t v24 = *((void *)a1 + 6);
    uint64_t v25 = *((void *)a1 + 7);
    unint64_t v27 = *((void *)a1 + 8);
    uint64_t v26 = *((void *)a1 + 9);
    unint64_t v29 = *((void *)a1 + 10);
    uint64_t v28 = *((void *)a1 + 11);
    uint64_t v30 = *((void *)a1 + 12);
    uint64_t v31 = *((void *)a2 + 6);
    uint64_t v32 = *((void *)a2 + 7);
    unint64_t v33 = *((void *)a2 + 8);
    uint64_t v34 = *((void *)a2 + 9);
    unint64_t v36 = *((void *)a2 + 10);
    uint64_t v35 = *((void *)a2 + 11);
    uint64_t v37 = *((void *)a2 + 12);
    if (v30 == 1)
    {
      if (v37 == 1) {
        goto LABEL_56;
      }
    }

    else if (v37 != 1)
    {
      LOBYTE(v78[0])  = *((void *)a1 + 6);
      v78[1]  = v25;
      v78[2]  = v27;
      v78[3]  = v26;
      v78[4]  = v29;
      v78[5]  = v28;
      v78[6]  = v30;
      LOBYTE(v79[0])  = v31;
      v79[1]  = v32;
      v79[2]  = v33;
      v79[3]  = v34;
      v79[4]  = v36;
      v79[5]  = v35;
      v79[6]  = v37;
      uint64_t v56 = v25;
      uint64_t v57 = v24;
      uint64_t v61 = v32;
      uint64_t v62 = v31;
      uint64_t v41 = v24;
      uint64_t v42 = v25;
      unint64_t v43 = v33;
      uint64_t v44 = v34;
      uint64_t v64 = v28;
      unint64_t v66 = v29;
      uint64_t v45 = v30;
      sub_10017D3D0(v41, v42, v27, v26, v29, v28, v30);
      sub_10017D3D0(v62, v61, v43, v44, v36, v35, v37);
      char v59 = _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v78, v79);
      sub_1000AADB0(v62, v61, v43, v44, v36, v35, v37);
      sub_1000AADB0(v57, v56, v27, v26, v66, v64, v45);
      if ((v59 & 1) == 0) {
        return 0LL;
      }
LABEL_56:
      sub_1000226B0((uint64_t)(a1 + 104), (uint64_t)v77, (uint64_t *)&unk_10040DCB0);
      sub_1000226B0((uint64_t)(a2 + 104), (uint64_t)v76, (uint64_t *)&unk_10040DCB0);
      sub_1000226B0((uint64_t)v77, (uint64_t)v72, (uint64_t *)&unk_10040DCB0);
      sub_1000226B0((uint64_t)v76, (uint64_t)&v74, (uint64_t *)&unk_10040DCB0);
      if (v73 == 1)
      {
        sub_1000225EC((uint64_t)v76, (uint64_t *)&unk_10040DCB0);
        sub_1000225EC((uint64_t)v77, (uint64_t *)&unk_10040DCB0);
        if (v75 == 1)
        {
          sub_1000225EC((uint64_t)v72, (uint64_t *)&unk_10040DCB0);
LABEL_69:
          if ((a1[150] & 1) != 0)
          {
            if (!a2[150]) {
              return 0LL;
            }
          }

          else
          {
            if ((a2[150] & 1) != 0) {
              return 0LL;
            }
            unint64_t v47 = *((unsigned int *)a1 + 36) | ((unint64_t)*((unsigned __int16 *)a1 + 74) << 32);
            unint64_t v48 = *((unsigned int *)a2 + 36) | ((unint64_t)*((unsigned __int16 *)a2 + 74) << 32);
            v49.i64[0]  = 0xFFFFFFFFFFFFLL;
            v49.i64[1]  = 0xFFFFFFFFFFFFLL;
            uint64x2_t v50 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v47), v49);
            int16x8_t v51 = (int16x8_t)vshlq_u64(v50, (uint64x2_t)xmmword_10033A8F0);
            uint64x2_t v52 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v48), v49);
            int64x2_t v53 = (int64x2_t)vshlq_u64(v52, (uint64x2_t)xmmword_10033A8F0);
            int16x8_t v54 = (int16x8_t)vshlq_u64(v52, (uint64x2_t)xmmword_10033A8E0);
            v72[0]  = *((_DWORD *)a1 + 36);
            *(int32x2_t *)v50.i8  = vmovn_s64((int64x2_t)vshlq_u64(v50, (uint64x2_t)xmmword_10033A8E0));
            *(int32x2_t *)v51.i8  = vmovn_s64((int64x2_t)v51);
            v51.i16[1]  = v51.i16[2];
            v51.i16[2]  = v50.i16[0];
            v51.i16[3]  = v50.i16[2];
            *(_DWORD *)&v72[1]  = vmovn_s16(v51).u32[0];
            v72[5]  = BYTE5(v47);
            LOBYTE(v67[0])  = v48;
            *(int32x2_t *)v50.i8  = vmovn_s64((int64x2_t)v54);
            *(int32x2_t *)v54.i8  = vmovn_s64(v53);
            v54.i16[1]  = v54.i16[2];
            v54.i16[2]  = v50.i16[0];
            v54.i16[3]  = v50.i16[2];
            *(_DWORD *)((char *)v67 + 1)  = vmovn_s16(v54).u32[0];
            BYTE5(v67[0])  = BYTE5(v48);
          }

          if ((a1[151] & 1) != 0)
          {
            if ((a2[151] & 1) != 0) {
              return 1LL;
            }
          }

          else if ((a2[151] & 1) == 0)
          {
            return 1LL;
          }

          return 0LL;
        }

unint64_t _s7CoreP2P11NANDatapathO11ServiceTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D50C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10017B140(__int128 *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v5 = *a1;
    __int128 v6 = a1[1];
    *(void *)(a2 + 32)  = *((void *)a1 + 4);
    *(_OWORD *)a2  = v5;
    *(_OWORD *)(a2 + 16)  = v6;
  }

  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24)  = v3;
    *(void *)(a2 + 32)  = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }

  return a2;
}

void *sub_10017B1A0(void *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL) {
    sub_100002AC4(a1);
  }
  return a1;
}

uint64_t sub_10017B1D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017B204(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017B230(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10017B26C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10017B2A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017B2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017B320(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10017B360()
{
  unint64_t result = qword_100409E60;
  if (!qword_100409E60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.DatapathType,  &type metadata for NANDatapath.DatapathType);
    atomic_store(result, (unint64_t *)&qword_100409E60);
  }

  return result;
}

unint64_t sub_10017B3A8()
{
  unint64_t result = qword_100409E68;
  if (!qword_100409E68)
  {
    uint64_t v1 = sub_1000022F8(&qword_100409E70);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100409E68);
  }

  return result;
}

unint64_t sub_10017B3F8()
{
  unint64_t result = qword_100409E78;
  if (!qword_100409E78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ServiceType,  &type metadata for NANDatapath.ServiceType);
    atomic_store(result, (unint64_t *)&qword_100409E78);
  }

  return result;
}

unint64_t sub_10017B440()
{
  unint64_t result = qword_100409E80;
  if (!qword_100409E80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ParametersType,  &type metadata for NANDatapath.ParametersType);
    atomic_store(result, (unint64_t *)&qword_100409E80);
  }

  return result;
}

unint64_t sub_10017B488()
{
  unint64_t result = qword_100409E88;
  if (!qword_100409E88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ParametersMulticastType,  &type metadata for NANDatapath.ParametersMulticastType);
    atomic_store(result, (unint64_t *)&qword_100409E88);
  }

  return result;
}

unint64_t sub_10017B4D0()
{
  unint64_t result = qword_100409E90;
  if (!qword_100409E90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.InternetSharingConfiguration,  &type metadata for NANDatapath.InternetSharingConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409E90);
  }

  return result;
}

unint64_t sub_10017B518()
{
  unint64_t result = qword_100409E98;
  if (!qword_100409E98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.SecurityConfiguration,  &type metadata for NANDatapath.SecurityConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409E98);
  }

  return result;
}

unint64_t sub_10017B55C(uint64_t a1)
{
  unint64_t result = sub_10017B580();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_10017B580()
{
  unint64_t result = qword_100409EA0;
  if (!qword_100409EA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.Configuration,  &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409EA0);
  }

  return result;
}

unint64_t sub_10017B5C8()
{
  unint64_t result = qword_10040D430;
  if (!qword_10040D430)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPeerServiceIdentifier,  &type metadata for NANPeerServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040D430);
  }

  return result;
}

uint64_t sub_10017B60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B76C(a1, a2, a3, (uint64_t (*)(void))sub_10017B620, (uint64_t (*)(void))sub_10017B664);
}

unint64_t sub_10017B620()
{
  unint64_t result = qword_100409EE8;
  if (!qword_100409EE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.Configuration,  &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409EE8);
  }

  return result;
}

unint64_t sub_10017B664()
{
  unint64_t result = qword_100409EF0;
  if (!qword_100409EF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.Configuration,  &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409EF0);
  }

  return result;
}

unint64_t sub_10017B6AC()
{
  unint64_t result = qword_100409EF8;
  if (!qword_100409EF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.Configuration,  &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409EF8);
  }

  return result;
}

unint64_t sub_10017B6F0(uint64_t a1)
{
  unint64_t result = sub_10017B714();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_10017B714()
{
  unint64_t result = qword_10040C4F0;
  if (!qword_10040C4F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ResponseConfiguration,  &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_10040C4F0);
  }

  return result;
}

uint64_t sub_10017B758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017B76C(a1, a2, a3, (uint64_t (*)(void))sub_10017B79C, (uint64_t (*)(void))sub_10017B7E0);
}

uint64_t sub_10017B76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8)  = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16)  = result;
  return result;
}

unint64_t sub_10017B79C()
{
  unint64_t result = qword_100409F40;
  if (!qword_100409F40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ResponseConfiguration,  &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409F40);
  }

  return result;
}

unint64_t sub_10017B7E0()
{
  unint64_t result = qword_100409F48;
  if (!qword_100409F48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ResponseConfiguration,  &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409F48);
  }

  return result;
}

unint64_t sub_10017B828()
{
  unint64_t result = qword_100409F50;
  if (!qword_100409F50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ResponseConfiguration,  &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409F50);
  }

  return result;
}

unint64_t sub_10017B870()
{
  unint64_t result = qword_100409F58;
  if (!qword_100409F58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ConfirmationConfiguration,  &type metadata for NANDatapath.ConfirmationConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409F58);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDatapath()
{
  return &type metadata for NANDatapath;
}

ValueMetadata *type metadata accessor for NANDatapath.DatapathType()
{
  return &type metadata for NANDatapath.DatapathType;
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ServiceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10017B924 + 4 * byte_10034D7D5[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10017B958 + 4 * byte_10034D7D0[v4]))();
}

uint64_t sub_10017B958(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10017B960(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10017B968LL);
  }
  return result;
}

uint64_t sub_10017B974(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10017B97CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10017B980(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10017B988(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ServiceType()
{
  return &type metadata for NANDatapath.ServiceType;
}

ValueMetadata *type metadata accessor for NANDatapath.ParametersType()
{
  return &type metadata for NANDatapath.ParametersType;
}

uint64_t _s7CoreP2P11NANDatapathO12DatapathTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10017BA00 + 4 * byte_10034D7DF[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10017BA34 + 4 * byte_10034D7DA[v4]))();
}

uint64_t sub_10017BA34(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10017BA3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10017BA44LL);
  }
  return result;
}

uint64_t sub_10017BA50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10017BA58LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10017BA5C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10017BA64(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ParametersMulticastType()
{
  return &type metadata for NANDatapath.ParametersMulticastType;
}

void *destroy for NANDatapath.InternetSharingConfiguration(void *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL) {
    return (void *)sub_100002AC4(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for NANDatapath.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16)  = v5;
    *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24)  = v3;
    *(void *)(a1 + 32)  = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }

  return a1;
}

uint64_t assignWithCopy for NANDatapath.InternetSharingConfiguration(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24)  = v4;
      *(void *)(a1 + 32)  = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }

void *sub_10017BB8C(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        *unint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3]  = v5;
      result[4]  = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *unint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *unint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t assignWithTake for NANDatapath.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    sub_100002AC4((void *)a1);
  }
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.InternetSharingConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_1000208D8(v2, v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANDatapath.InternetSharingConfiguration( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32)  = 0LL;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16)  = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40)  = 0;
    }
    if (a2) {
      *(void *)(result + 24)  = a2;
    }
  }

  return result;
}

uint64_t sub_10017BDEC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_1000208D8(v3, v1) = -1;
  }
  return (v1 + 1);
}

double sub_10017BE04(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8)  = 0u;
    *(_OWORD *)(a1 + 24)  = 0u;
    *(void *)a1  = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 24)  = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.InternetSharingConfiguration()
{
  return &type metadata for NANDatapath.InternetSharingConfiguration;
}

uint64_t destroy for NANDatapath.SecurityConfiguration(void *a1)
{
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_1000208D8(a1[3], v2);
  }
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100020AFC(v4, v5);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  uint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_100020AFC(*v6, *(void *)(a2 + 32));
    *(void *)(a1 + 24)  = v8;
    *(void *)(a1 + 32)  = v7;
  }

  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100020AFC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  sub_1000208D8(v6, v7);
  uint64_t v8 = (uint64_t *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 != 15LL)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = *v8;
      sub_100020AFC(*v8, *(void *)(a2 + 32));
      uint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 32);
      *(void *)(a1 + 24)  = v11;
      *(void *)(a1 + 32)  = v9;
      sub_1000208D8(v12, v13);
      goto LABEL_8;
    }

    sub_10017C004(a1 + 24);
    goto LABEL_6;
  }

  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)v8;
    goto LABEL_8;
  }

  uint64_t v10 = *v8;
  sub_100020AFC(*v8, *(void *)(a2 + 32));
  *(void *)(a1 + 24)  = v10;
  *(void *)(a1 + 32)  = v9;
LABEL_8:
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 48)  = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_10017C004(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_1000208D8(v4, v5);
  uint64_t v6 = (void *)(a2 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 32);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24)  = *v6;
      *(void *)(a1 + 32)  = v8;
      sub_1000208D8(v9, v7);
      goto LABEL_6;
    }

    sub_10017C004(a1 + 24);
  }

  *(_OWORD *)(a1 + 24)  = *(_OWORD *)v6;
LABEL_6:
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.SecurityConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_1000208D8(v2, v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.SecurityConfiguration( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 56)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 56)  = 0;
    }
    if (a2) {
      *(void *)(result + 48)  = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.SecurityConfiguration()
{
  return &type metadata for NANDatapath.SecurityConfiguration;
}

void destroy for NANDatapath.Configuration(void *a1)
{
  uint64_t v2 = a1[12];
  if (v2 != 1)
  {
    sub_1000208D8(a1[7], a1[8]);
    unint64_t v3 = a1[10];
    if (v3 >> 60 != 15) {
      sub_1000208D8(a1[9], v3);
    }
    swift_bridgeObjectRelease(v2);
  }

  if (a1[16] >= 2uLL) {
    sub_100002AC4(a1 + 13);
  }
}

uint64_t initializeWithCopy for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  *(_BYTE *)(a1 + 24)  = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 29)  = *(_WORD *)(a2 + 29);
  *(_DWORD *)(a1 + 25)  = *(_DWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 31)  = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40)  = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6 == 1)
  {
    __int128 v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v7;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  }

  else
  {
    *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    unint64_t v9 = *(void *)(a2 + 64);
    sub_100020AFC(v8, v9);
    *(void *)(a1 + 56)  = v8;
    *(void *)(a1 + 64)  = v9;
    uint64_t v10 = (uint64_t *)(a2 + 72);
    unint64_t v11 = *(void *)(a2 + 80);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72)  = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v12 = *v10;
      sub_100020AFC(*v10, *(void *)(a2 + 80));
      *(void *)(a1 + 72)  = v12;
      *(void *)(a1 + 80)  = v11;
    }

    *(void *)(a1 + 88)  = *(void *)(a2 + 88);
    *(void *)(a1 + 96)  = v6;
    swift_bridgeObjectRetain(v6);
  }

  unint64_t v13 = (_OWORD *)(a1 + 104);
  uint64_t v14 = (_OWORD *)(a2 + 104);
  unint64_t v15 = *(void *)(a2 + 128);
  if (v15 > 1)
  {
    uint64_t v17 = *(void *)(a2 + 136);
    *(void *)(a1 + 128)  = v15;
    *(void *)(a1 + 136)  = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }

  else
  {
    __int128 v16 = *(_OWORD *)(a2 + 120);
    *unint64_t v13 = *v14;
    *(_OWORD *)(a1 + 120)  = v16;
    *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  }

  *(_DWORD *)(a1 + 144)  = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147)  = *(_DWORD *)(a2 + 147);
  *(_BYTE *)(a1 + 151)  = *(_BYTE *)(a2 + 151);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24)  = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25)  = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26)  = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27)  = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28)  = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29)  = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30)  = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31)  = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (__n128 *)(a1 + 48);
  unint64_t v9 = (__n128 *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) != 1LL)
  {
    if (v10 == 1)
    {
      sub_10017C6EC((void *)(a1 + 48));
      __int128 v14 = *(_OWORD *)(a2 + 64);
      __n128 v11 = *(__n128 *)(a2 + 80);
      __n128 v15 = *v9;
      *(void *)(a1 + 96)  = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 64)  = v14;
      *(__n128 *)(a1 + 80)  = v11;
      *uint64_t v8 = v15;
      goto LABEL_18;
    }

    *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
    uint64_t v20 = *(void *)(a2 + 56);
    unint64_t v21 = *(void *)(a2 + 64);
    sub_100020AFC(v20, v21);
    uint64_t v22 = *(void *)(a1 + 56);
    unint64_t v23 = *(void *)(a1 + 64);
    *(void *)(a1 + 56)  = v20;
    *(void *)(a1 + 64)  = v21;
    sub_1000208D8(v22, v23);
    uint64_t v24 = (uint64_t *)(a2 + 72);
    unint64_t v25 = *(void *)(a2 + 80);
    if (*(void *)(a1 + 80) >> 60 == 15LL)
    {
      if (v25 >> 60 != 15)
      {
        uint64_t v26 = *v24;
        sub_100020AFC(*v24, *(void *)(a2 + 80));
        *(void *)(a1 + 72)  = v26;
        *(void *)(a1 + 80)  = v25;
LABEL_17:
        *(void *)(a1 + 88)  = *(void *)(a2 + 88);
        uint64_t v32 = *(void *)(a2 + 96);
        uint64_t v33 = *(void *)(a1 + 96);
        *(void *)(a1 + 96)  = v32;
        swift_bridgeObjectRetain(v32);
        __n128 v11 = swift_bridgeObjectRelease(v33);
        goto LABEL_18;
      }
    }

    else
    {
      if (v25 >> 60 != 15)
      {
        uint64_t v29 = *v24;
        sub_100020AFC(*v24, *(void *)(a2 + 80));
        uint64_t v30 = *(void *)(a1 + 72);
        unint64_t v31 = *(void *)(a1 + 80);
        *(void *)(a1 + 72)  = v29;
        *(void *)(a1 + 80)  = v25;
        sub_1000208D8(v30, v31);
        goto LABEL_17;
      }

      sub_10017C004(a1 + 72);
    }

    *(_OWORD *)(a1 + 72)  = *(_OWORD *)v24;
    goto LABEL_17;
  }

  if (v10 == 1)
  {
    __n128 v11 = *v9;
    __int128 v12 = *(_OWORD *)(a2 + 64);
    __int128 v13 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 64)  = v12;
    *(_OWORD *)(a1 + 80)  = v13;
    *uint64_t v8 = v11;
  }

  else
  {
    *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
    uint64_t v16 = *(void *)(a2 + 56);
    unint64_t v17 = *(void *)(a2 + 64);
    sub_100020AFC(v16, v17);
    *(void *)(a1 + 56)  = v16;
    *(void *)(a1 + 64)  = v17;
    char v18 = (uint64_t *)(a2 + 72);
    unint64_t v19 = *(void *)(a2 + 80);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72)  = *(_OWORD *)v18;
    }

    else
    {
      uint64_t v27 = *v18;
      sub_100020AFC(*v18, *(void *)(a2 + 80));
      *(void *)(a1 + 72)  = v27;
      *(void *)(a1 + 80)  = v19;
    }

    *(void *)(a1 + 88)  = *(void *)(a2 + 88);
    uint64_t v28 = *(void *)(a2 + 96);
    *(void *)(a1 + 96)  = v28;
    swift_bridgeObjectRetain(v28);
  }

void *sub_10017C6EC(void *a1)
{
  return a1;
}

__n128 initializeWithTake for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v5;
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)(a1 + 48)  = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112)  = v7;
  *(_OWORD *)(a1 + 128)  = v8;
  *(__n128 *)(a1 + 96)  = result;
  return result;
}

uint64_t assignWithTake for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28)  = *(_BYTE *)(a2 + 28);
  *(_WORD *)(a1 + 29)  = *(_WORD *)(a2 + 29);
  *(_BYTE *)(a1 + 31)  = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  if (*(void *)(a1 + 96) == 1LL) {
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(a2 + 96);
  if (v7 == 1)
  {
    sub_10017C6EC((void *)(a1 + 48));
LABEL_4:
    __int128 v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v8;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    goto LABEL_11;
  }

  *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  unint64_t v10 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  sub_1000208D8(v9, v10);
  __n128 v11 = (void *)(a2 + 72);
  unint64_t v12 = *(void *)(a1 + 80);
  if (v12 >> 60 != 15)
  {
    unint64_t v13 = *(void *)(a2 + 80);
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *(void *)(a1 + 72);
      *(void *)(a1 + 72)  = *v11;
      *(void *)(a1 + 80)  = v13;
      sub_1000208D8(v14, v12);
      goto LABEL_10;
    }

    sub_10017C004(a1 + 72);
  }

  *(_OWORD *)(a1 + 72)  = *(_OWORD *)v11;
LABEL_10:
  uint64_t v15 = *(void *)(a1 + 96);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = v7;
  swift_bridgeObjectRelease(v15);
LABEL_11:
  uint64_t v16 = *(void *)(a1 + 128);
  if (v16 != 1)
  {
    if (*(void *)(a2 + 128) == 1LL)
    {
      sub_10017B1A0((void *)(a1 + 104));
    }

    else if (v16)
    {
      sub_100002AC4((void *)(a1 + 104));
    }
  }

  __int128 v17 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = v17;
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144)  = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147)  = *(_DWORD *)(a2 + 147);
  *(_BYTE *)(a1 + 151)  = *(_BYTE *)(a2 + 151);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 152)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 152)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.Configuration()
{
  return &type metadata for NANDatapath.Configuration;
}

uint64_t destroy for NANDatapath.ResponseConfiguration(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16) != 4LL) {
    sub_1000208D8(*(void *)(a1 + 24), *(void *)(a1 + 32));
  }
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 64));
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 != 1)
  {
    sub_1000208D8(*(void *)(a1 + 88), *(void *)(a1 + 96));
    unint64_t v4 = *(void *)(a1 + 112);
    if (v4 >> 60 != 15) {
      sub_1000208D8(*(void *)(a1 + 104), v4);
    }
    uint64_t result = swift_bridgeObjectRelease(v3);
  }

  int v5 = *(unsigned __int8 *)(a1 + 176);
  if (v5 != 255)
  {
    if ((v5 & 1) != 0) {
      return sub_100002AC4((void *)(a1 + 136));
    }
    else {
      return swift_bridgeObjectRelease(*(void *)(a1 + 144));
    }
  }

  return result;
}

uint64_t initializeWithCopy for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 4)
  {
    *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  }

  else
  {
    *(_BYTE *)(a1 + 16)  = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    unint64_t v6 = *(void *)(a2 + 32);
    sub_100020AFC(v5, v6);
    *(void *)(a1 + 24)  = v5;
    *(void *)(a1 + 32)  = v6;
  }

  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 46)  = *(_DWORD *)(a2 + 46);
  *(_WORD *)(a1 + 50)  = *(_WORD *)(a2 + 50);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = v7;
  *(_WORD *)(a1 + 72)  = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74)  = *(_BYTE *)(a2 + 74);
  uint64_t v8 = *(void *)(a2 + 128);
  swift_bridgeObjectRetain(v7);
  if (v8 == 1)
  {
    __int128 v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v9;
    *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  }

  else
  {
    *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
    uint64_t v10 = *(void *)(a2 + 88);
    unint64_t v11 = *(void *)(a2 + 96);
    sub_100020AFC(v10, v11);
    *(void *)(a1 + 88)  = v10;
    *(void *)(a1 + 96)  = v11;
    unint64_t v12 = (uint64_t *)(a2 + 104);
    unint64_t v13 = *(void *)(a2 + 112);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 104)  = *(_OWORD *)v12;
    }

    else
    {
      uint64_t v14 = *v12;
      sub_100020AFC(*v12, *(void *)(a2 + 112));
      *(void *)(a1 + 104)  = v14;
      *(void *)(a1 + 112)  = v13;
    }

    *(void *)(a1 + 120)  = *(void *)(a2 + 120);
    *(void *)(a1 + 128)  = v8;
    swift_bridgeObjectRetain(v8);
  }

  uint64_t v15 = (_OWORD *)(a1 + 136);
  uint64_t v16 = (_OWORD *)(a2 + 136);
  int v17 = *(unsigned __int8 *)(a2 + 176);
  if (v17 == 255)
  {
    __int128 v18 = *(_OWORD *)(a2 + 152);
    *uint64_t v15 = *v16;
    *(_OWORD *)(a1 + 152)  = v18;
    *(_OWORD *)(a1 + 161)  = *(_OWORD *)(a2 + 161);
  }

  else if ((v17 & 1) != 0)
  {
    __int128 v20 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 160)  = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v15, v16);
    *(_BYTE *)(a1 + 176)  = 1;
  }

  else
  {
    uint64_t v19 = *(void *)(a2 + 144);
    *(void *)(a1 + 136)  = *(void *)(a2 + 136);
    *(void *)(a1 + 144)  = v19;
    *(_BYTE *)(a1 + 152)  = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 176)  = 0;
    swift_bridgeObjectRetain(v19);
  }

  *(_DWORD *)(a1 + 177)  = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180)  = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184)  = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11)  = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12)  = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13)  = *(_BYTE *)(a2 + 13);
  uint64_t v4 = a1 + 16;
  unint64_t v6 = (__int128 *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) == 4LL)
  {
    if (v5 == 4)
    {
      __int128 v7 = *v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v4 = v7;
    }

    else
    {
      *(_BYTE *)(a1 + 16)  = v5;
      uint64_t v9 = *(void *)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      sub_100020AFC(v9, v10);
      *(void *)(a1 + 24)  = v9;
      *(void *)(a1 + 32)  = v10;
    }
  }

  else if (v5 == 4)
  {
    sub_10017D06C(a1 + 16);
    uint64_t v8 = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v4 = *v6;
    *(void *)(v4 + 16)  = v8;
  }

  else
  {
    *(_BYTE *)(a1 + 16)  = v5;
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a2 + 32);
    sub_100020AFC(v11, v12);
    uint64_t v13 = *(void *)(a1 + 24);
    unint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24)  = v11;
    *(void *)(a1 + 32)  = v12;
    sub_1000208D8(v13, v14);
  }

  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41)  = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42)  = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43)  = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44)  = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45)  = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46)  = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47)  = *(_BYTE *)(a2 + 47);
  *(_BYTE *)(a1 + 48)  = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49)  = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50)  = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51)  = *(_BYTE *)(a2 + 51);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 64);
  uint64_t v16 = *(void *)(a1 + 64);
  *(void *)(a1 + 64)  = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73)  = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74)  = *(_BYTE *)(a2 + 74);
  int v17 = (_OWORD *)(a1 + 80);
  __int128 v18 = (__int128 *)(a2 + 80);
  uint64_t v19 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128) != 1LL)
  {
    if (v19 == 1)
    {
      sub_10017C6EC((void *)(a1 + 80));
      __int128 v24 = *(_OWORD *)(a2 + 96);
      __int128 v23 = *(_OWORD *)(a2 + 112);
      __int128 v25 = *v18;
      *(void *)(a1 + 128)  = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 96)  = v24;
      *(_OWORD *)(a1 + 112)  = v23;
      *int v17 = v25;
      goto LABEL_25;
    }

    *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
    uint64_t v30 = *(void *)(a2 + 88);
    unint64_t v31 = *(void *)(a2 + 96);
    sub_100020AFC(v30, v31);
    uint64_t v32 = *(void *)(a1 + 88);
    unint64_t v33 = *(void *)(a1 + 96);
    *(void *)(a1 + 88)  = v30;
    *(void *)(a1 + 96)  = v31;
    sub_1000208D8(v32, v33);
    uint64_t v34 = (uint64_t *)(a2 + 104);
    unint64_t v35 = *(void *)(a2 + 112);
    if (*(void *)(a1 + 112) >> 60 == 15LL)
    {
      if (v35 >> 60 != 15)
      {
        uint64_t v36 = *v34;
        sub_100020AFC(*v34, *(void *)(a2 + 112));
        *(void *)(a1 + 104)  = v36;
        *(void *)(a1 + 112)  = v35;
LABEL_24:
        *(void *)(a1 + 120)  = *(void *)(a2 + 120);
        uint64_t v42 = *(void *)(a2 + 128);
        uint64_t v43 = *(void *)(a1 + 128);
        *(void *)(a1 + 128)  = v42;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRelease(v43);
        goto LABEL_25;
      }
    }

    else
    {
      if (v35 >> 60 != 15)
      {
        uint64_t v39 = *v34;
        sub_100020AFC(*v34, *(void *)(a2 + 112));
        uint64_t v40 = *(void *)(a1 + 104);
        unint64_t v41 = *(void *)(a1 + 112);
        *(void *)(a1 + 104)  = v39;
        *(void *)(a1 + 112)  = v35;
        sub_1000208D8(v40, v41);
        goto LABEL_24;
      }

      sub_10017C004(a1 + 104);
    }

    *(_OWORD *)(a1 + 104)  = *(_OWORD *)v34;
    goto LABEL_24;
  }

  if (v19 == 1)
  {
    __int128 v20 = *v18;
    __int128 v21 = *(_OWORD *)(a2 + 96);
    __int128 v22 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128)  = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 96)  = v21;
    *(_OWORD *)(a1 + 112)  = v22;
    *int v17 = v20;
  }

  else
  {
    *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
    uint64_t v26 = *(void *)(a2 + 88);
    unint64_t v27 = *(void *)(a2 + 96);
    sub_100020AFC(v26, v27);
    *(void *)(a1 + 88)  = v26;
    *(void *)(a1 + 96)  = v27;
    uint64_t v28 = (uint64_t *)(a2 + 104);
    unint64_t v29 = *(void *)(a2 + 112);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 104)  = *(_OWORD *)v28;
    }

    else
    {
      uint64_t v37 = *v28;
      sub_100020AFC(*v28, *(void *)(a2 + 112));
      *(void *)(a1 + 104)  = v37;
      *(void *)(a1 + 112)  = v29;
    }

    *(void *)(a1 + 120)  = *(void *)(a2 + 120);
    uint64_t v38 = *(void *)(a2 + 128);
    *(void *)(a1 + 128)  = v38;
    swift_bridgeObjectRetain(v38);
  }

uint64_t sub_10017D06C(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v4 = a1 + 16;
  uint64_t v6 = a2 + 16;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) == 4LL) {
    goto LABEL_4;
  }
  if (v5 == 4)
  {
    sub_10017D06C(a1 + 16);
LABEL_4:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
    *(void *)(v4 + 16)  = *(void *)(v6 + 16);
    goto LABEL_6;
  }

  *(_BYTE *)(a1 + 16)  = v5;
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_1000208D8(v7, v8);
LABEL_6:
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73)  = *(_WORD *)(a2 + 73);
  if (*(void *)(a1 + 128) == 1LL)
  {
LABEL_9:
    __int128 v11 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v11;
    *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128)  = *(void *)(a2 + 128);
    goto LABEL_16;
  }

  if (*(void *)(a2 + 128) == 1LL)
  {
    sub_10017C6EC((void *)(a1 + 80));
    goto LABEL_9;
  }

  *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  unint64_t v13 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  sub_1000208D8(v12, v13);
  unint64_t v14 = (void *)(a2 + 104);
  unint64_t v15 = *(void *)(a1 + 112);
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = *(void *)(a2 + 112);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *(void *)(a1 + 104);
      *(void *)(a1 + 104)  = *v14;
      *(void *)(a1 + 112)  = v16;
      sub_1000208D8(v17, v15);
      goto LABEL_15;
    }

    sub_10017C004(a1 + 104);
  }

  *(_OWORD *)(a1 + 104)  = *(_OWORD *)v14;
LABEL_15:
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v19 = *(void *)(a1 + 128);
  *(void *)(a1 + 120)  = *(void *)(a2 + 120);
  *(void *)(a1 + 128)  = v18;
  swift_bridgeObjectRelease(v19);
LABEL_16:
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
LABEL_20:
    __int128 v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152)  = v20;
    *(_OWORD *)(a1 + 161)  = *(_OWORD *)(a2 + 161);
    goto LABEL_21;
  }

  if (*(unsigned __int8 *)(a2 + 176) == 255 || a1 != a2)
  {
    sub_10017B2A8(a1 + 136);
    goto LABEL_20;
  }

uint64_t getEnumTagSinglePayload for NANDatapath.ResponseConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 185)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ResponseConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 184)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 185)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 185)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ResponseConfiguration()
{
  return &type metadata for NANDatapath.ResponseConfiguration;
}

uint64_t getEnumTagSinglePayload for NANDatapath.ConfirmationConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ConfirmationConfiguration( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 8)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 8)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 7)  = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ConfirmationConfiguration()
{
  return &type metadata for NANDatapath.ConfirmationConfiguration;
}

uint64_t sub_10017D3D0( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 != 1)
  {
    sub_100020AFC(a2, a3);
    sub_10002255C(a4, a5);
    return swift_bridgeObjectRetain(a7);
  }

  return result;
}

uint64_t static NANActionFrame.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a1 != 14)
  {
    if (a3 == 14 || byte_10034E12A[a1] != byte_10034E12A[a3]) {
      return 0LL;
    }
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a4);
  }

  if (a3 == 14) {
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a4);
  }
  return 0LL;
}

uint64_t NANActionFrame.init(customDeviceInformation:)(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_10040D7E0);
  uint64_t v3 = type metadata accessor for NANAttribute(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = swift_allocObject(v2, v7 + v5, v6 | 7);
  *(_OWORD *)(v8 + 16)  = xmmword_100339900;
  uint64_t v9 = v8 + v7;
  sub_10017DCC0(a1, v9);
  swift_storeEnumTagMultiPayload(v9, v3, 40LL);
  sub_10005802C(a1, type metadata accessor for NANAttribute.CustomDeviceInformation);
  return 13LL;
}

void NANActionFrame.init(customAttributes:)()
{
  uint64_t v0 = sub_100002274(&qword_10040D7E0);
  uint64_t v1 = type metadata accessor for NANAttribute(0LL);
  *(_OWORD *)(swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
              + *(void *)(*(void *)(v1 - 8) + 72LL),
  unint64_t v2 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = type metadata accessor for BinaryEncoder();
  uint64_t v4 = (uint64_t *)swift_allocObject(v3, 40LL, 7LL);
  *((_OWORD *)v4 + 1)  = xmmword_1003398F0;
  v4[4]  = v2;
  v6[3]  = v3;
  v6[4]  = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
  v6[0]  = v4;
  swift_retain();
  NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(v6);
  sub_100002AC4(v6);
  swift_beginAccess(v4 + 2, v6, 0LL, 0LL);
  unint64_t v5 = v4[3];
  sub_100020AFC(v4[2], v5);
  swift_release(v4);
  __asm { BR              X9 }

void NANActionFrame.hash(into:)(uint64_t a1, char a2, uint64_t a3)
{
  if (a2 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034E12A[a2]);
  }

  Swift::UInt v5 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v7 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain(a3);
    do
    {
      NANAttribute.hash(into:)();
      v7 += v8;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease(a3);
  }

uint64_t sub_10017D834()
{
  if (*v0) {
    return 0x7475626972747461LL;
  }
  else {
    return 1701869940LL;
  }
}

uint64_t sub_10017D86C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017E134(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10017D890(uint64_t a1)
{
  unint64_t v2 = sub_10017DD04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017D8B8(uint64_t a1)
{
  unint64_t v2 = sub_10017DD04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANActionFrame.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_100409F70);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_10017DD04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANActionFrame.CodingKeys,  &type metadata for NANActionFrame.CodingKeys,  v13,  v11,  v12);
  char v22 = a2;
  char v21 = 0;
  unint64_t v14 = sub_10017DD48();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for NANManagementFrameType, v14);
  if (!v3)
  {
    uint64_t v19 = a3;
    char v20 = 1;
    uint64_t v15 = sub_100002274(&qword_100405E78);
    uint64_t v16 = sub_10017E264( (unint64_t *)&qword_100409F88,  &qword_100406960,  (uint64_t)&protocol conformance descriptor for NANAttribute,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANActionFrame.hashValue.getter(unsigned __int8 a1, uint64_t a2)
{
  int v4 = a1;
  Hasher.init(_seed:)(v10, 0LL);
  if (v4 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034E12A[(char)a1]);
  }

  Swift::UInt v5 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v7 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain(a2);
    do
    {
      NANAttribute.hash(into:)();
      v7 += v8;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease(a2);
  }

  return Hasher._finalize()();
}

uint64_t NANActionFrame.init(from:)(void *a1)
{
  return sub_10017DD8C(a1);
}

Swift::Int sub_10017DB44()
{
  return NANActionFrame.hashValue.getter(*(_BYTE *)v0, *(void *)(v0 + 8));
}

void sub_10017DB50(uint64_t a1)
{
}

Swift::Int sub_10017DB5C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((void *)v1 + 1);
  Hasher.init(_seed:)(v9, a1);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034E12A[v2]);
  }

  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain(v3);
    do
    {
      NANAttribute.hash(into:)();
      v6 += v7;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(v3);
  }

  return Hasher._finalize()();
}

uint64_t sub_10017DC28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10017DD8C(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }

  return result;
}

uint64_t sub_10017DC54(void *a1)
{
  return NANActionFrame.encode(to:)(a1, *(_BYTE *)v1, *(void *)(v1 + 8));
}

uint64_t sub_10017DC70(char *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (v2 != 14)
  {
    if ((_DWORD)v4 == 14 || byte_10034E12A[v2] != byte_10034E12A[v4]) {
      return 0LL;
    }
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v5);
  }

  if ((_DWORD)v4 == 14) {
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v5);
  }
  return 0LL;
}

uint64_t sub_10017DCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10017DD04()
{
  unint64_t result = qword_100409F78;
  if (!qword_100409F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034E0D8, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409F78);
  }

  return result;
}

unint64_t sub_10017DD48()
{
  unint64_t result = qword_100409F80;
  if (!qword_100409F80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANManagementFrameType,  &type metadata for NANManagementFrameType);
    atomic_store(result, (unint64_t *)&qword_100409F80);
  }

  return result;
}

uint64_t sub_10017DD8C(void *a1)
{
  uint64_t v2 = sub_100002274(&qword_100409FB0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  unint64_t v8 = sub_10017DD04();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANActionFrame.CodingKeys,  &type metadata for NANActionFrame.CodingKeys,  v8,  v6,  v7);
  char v17 = 0;
  unint64_t v9 = sub_10017E220();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for NANManagementFrameType,  &v17,  v2,  &type metadata for NANManagementFrameType,  v9);
  uint64_t v10 = v18;
  uint64_t v11 = sub_100002274(&qword_100405E78);
  char v15 = 1;
  uint64_t v12 = sub_10017E264( (unint64_t *)&qword_100406938,  &qword_100406940,  (uint64_t)&protocol conformance descriptor for NANAttribute,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100002AC4(a1);
  return v10;
}

unint64_t sub_10017DF3C()
{
  unint64_t result = qword_100409F90;
  if (!qword_100409F90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANActionFrame,  &type metadata for NANActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409F90);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANActionFrame()
{
  return &type metadata for NANActionFrame;
}

uint64_t storeEnumTagSinglePayload for NANActionFrame.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10017DFDC + 4 * byte_10034DF41[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10017E010 + 4 * asc_10034DF3C[v4]))();
}

uint64_t sub_10017E010(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10017E018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10017E020LL);
  }
  return result;
}

uint64_t sub_10017E02C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10017E034LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10017E038(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10017E040(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrame.CodingKeys()
{
  return &type metadata for NANActionFrame.CodingKeys;
}

unint64_t sub_10017E060()
{
  unint64_t result = qword_100409F98;
  if (!qword_100409F98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034E0B0, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409F98);
  }

  return result;
}

unint64_t sub_10017E0A8()
{
  unint64_t result = qword_100409FA0;
  if (!qword_100409FA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034E020, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409FA0);
  }

  return result;
}

unint64_t sub_10017E0F0()
{
  unint64_t result = qword_100409FA8;
  if (!qword_100409FA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034E048, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409FA8);
  }

  return result;
}

uint64_t sub_10017E134(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7475626972747461LL && a2 == 0xEA00000000007365LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007365LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461LL, 0xEA00000000007365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_10017E220()
{
  unint64_t result = qword_100409FB8;
  if (!qword_100409FB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANManagementFrameType,  &type metadata for NANManagementFrameType);
    atomic_store(result, (unint64_t *)&qword_100409FB8);
  }

  return result;
}

uint64_t sub_10017E264(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_1000022F8(&qword_100405E78);
    sub_10000AF70(a2, type metadata accessor for NANAttribute, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *sub_10017E2E8()
{
  char v15 = &type metadata for NANDatapath.Configuration;
  uint64_t v1 = sub_100002274(&qword_10040A178);
  uint64_t v2 = String.init<A>(describing:)(&v15, v1);
  unint64_t v4 = v3;
  char v15 = 0LL;
  unint64_t v16 = 0xE000000000000000LL;
  v5._countAndFlagsBits  = 32LL;
  v5._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  __int16 v6 = *((_WORD *)v0 + 2);
  char v7 = *((_BYTE *)v0 + 6);
  int v12 = *v0;
  __int16 v13 = v6;
  char v14 = v7;
  _print_unlocked<A, B>(_:_:)( &v12,  &v15,  &type metadata for NANPeerServiceIdentifier,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v8 = (uint64_t)v15;
  uint64_t v9 = (void *)v16;
  char v15 = (ValueMetadata *)v2;
  unint64_t v16 = v4;
  swift_bridgeObjectRetain(v4);
  v10._countAndFlagsBits  = v8;
  v10._object  = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v9);
  return v15;
}

ValueMetadata *sub_10017E3D0()
{
  char v14 = &type metadata for NANDatapath.ResponseConfiguration;
  uint64_t v1 = sub_100002274(&qword_10040A170);
  uint64_t v2 = String.init<A>(describing:)(&v14, v1);
  unint64_t v4 = v3;
  char v14 = 0LL;
  unint64_t v15 = 0xE000000000000000LL;
  v5._countAndFlagsBits  = 32LL;
  v5._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  __int16 v6 = *((_WORD *)v0 + 6);
  char v11 = *v0;
  int v12 = *((_DWORD *)v0 + 2);
  __int16 v13 = v6;
  _print_unlocked<A, B>(_:_:)( &v11,  &v14,  &type metadata for NANPeerServiceIdentifier,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v7 = (uint64_t)v14;
  uint64_t v8 = (void *)v15;
  char v14 = (ValueMetadata *)v2;
  unint64_t v15 = v4;
  swift_bridgeObjectRetain(v4);
  v9._countAndFlagsBits  = v7;
  v9._object  = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  return v14;
}

uint64_t sub_10017E4B8()
{
  return sub_10017E4CC(type metadata accessor for NANSubscribe.Configuration, &qword_10040A180);
}

uint64_t sub_10017E4CC(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v14 = a1(0LL);
  uint64_t v4 = sub_100002274(a2);
  uint64_t v5 = String.init<A>(describing:)(&v14, v4);
  unint64_t v7 = v6;
  uint64_t v14 = 0LL;
  unint64_t v15 = 0xE000000000000000LL;
  v8._countAndFlagsBits  = 32LL;
  v8._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  char v13 = *v2;
  _print_unlocked<A, B>(_:_:)( &v13,  &v14,  &type metadata for UInt8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v9 = v14;
  Swift::String v10 = (void *)v15;
  uint64_t v14 = v5;
  unint64_t v15 = v7;
  swift_bridgeObjectRetain(v7);
  v11._countAndFlagsBits  = v9;
  v11._object  = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  return v14;
}

uint64_t NANPublish.Configuration.serviceInfo.getter()
{
  if (qword_100404428 != -1) {
    swift_once(&qword_100404428, sub_1001E6B28);
  }
  Swift::String v1 = String.lowercased()();
  Swift::String v2 = String.lowercased()();
  if (v1._countAndFlagsBits == v2._countAndFlagsBits && v1._object == v2._object)
  {
    swift_bridgeObjectRelease_n(v1._object, 2LL);
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)( v1._countAndFlagsBits,  v1._object,  v2._countAndFlagsBits,  v2._object,  0LL);
    swift_bridgeObjectRelease(v1._object);
    swift_bridgeObjectRelease(v2._object);
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = *(void *)(v0 + 24);
      goto LABEL_11;
    }
  }

  uint64_t v5 = *(void *)(v0 + 24);
  NANGenericServiceProtocol.blob.getter(v5);
  if (v6 >> 60 != 15) {
    return 3LL;
  }
LABEL_11:
  int v7 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 96));
  BOOL v8 = *(unsigned __int8 *)(v0 + 77) == 2;
  uint64_t v9 = 2LL;
  if ((v7 & v8) != 0) {
    uint64_t v10 = 3LL;
  }
  else {
    uint64_t v10 = 2LL;
  }
  swift_bridgeObjectRetain(v5);
  NANGenericServiceProtocol.packetData(for:)(v10, v5);
  swift_bridgeObjectRelease(v5);
  return v9;
}

uint64_t NANPublish.Configuration.controlFlag.getter()
{
  else {
    int v1 = 516;
  }
  int v2 = *(unsigned __int8 *)(v0 + 77);
  if ((v2 & 1) != 0) {
    int v3 = 3;
  }
  else {
    int v3 = 1;
  }
  if (v2 == 2) {
    int v4 = 0;
  }
  else {
    int v4 = v3;
  }
  return v4 | v1;
}

uint64_t NANPublish.DatapathConfiguration.serviceInfo.getter(uint64_t a1, uint64_t a2)
{
  return 2LL;
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.apiFunction.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 2LL;
  }
  else {
    return 1LL;
  }
}

void *NANPublish.PublishType.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.PublishType.defaultValue;
}

uint64_t NANPublish.PublishType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6963696C6F736E75LL;
  }
  if (a1 == 1) {
    return 0x65746963696C6F73LL;
  }
  return 0xD000000000000017LL;
}

uint64_t sub_10017E848(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002B9F0(*a1, *a2);
}

unint64_t sub_10017E854@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreP2P10NANPublishO11PublishTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10017E880(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEB00000000646574LL;
  unint64_t v4 = 0xE900000000000064LL;
  unint64_t v5 = 0x65746963696C6F73LL;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000017LL;
    unint64_t v4 = 0x8000000100360960LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6963696C6F736E75LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

Swift::Int sub_10017E8F0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE900000000000064LL;
  unint64_t v3 = 0x65746963696C6F73LL;
  if (v1 != 1)
  {
    unint64_t v3 = 0xD000000000000017LL;
    unint64_t v2 = 0x8000000100360960LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6963696C6F736E75LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xEB00000000646574LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10017E9A0(uint64_t a1)
{
  unint64_t v2 = 0xE900000000000064LL;
  unint64_t v3 = 0x65746963696C6F73LL;
  if (*v1 != 1)
  {
    unint64_t v3 = 0xD000000000000017LL;
    unint64_t v2 = 0x8000000100360960LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6963696C6F736E75LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xEB00000000646574LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10017EA2C(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE900000000000064LL;
  unint64_t v4 = 0x65746963696C6F73LL;
  if (v2 != 1)
  {
    unint64_t v4 = 0xD000000000000017LL;
    unint64_t v3 = 0x8000000100360960LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x6963696C6F736E75LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xEB00000000646574LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_10017EAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100183A78();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017EB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100183A78();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10017EB80()
{
  unint64_t v1 = 0x65746963696C6F73LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000017LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6963696C6F736E75LL;
  }
}

void *NANPublish.SolicitedTransmissionType.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.SolicitedTransmissionType.defaultValue;
}

CoreP2P::NANPublish::SolicitedTransmissionType_optional __swiftcall NANPublish.SolicitedTransmissionType.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue  = &off_1003D4D80;
  return (CoreP2P::NANPublish::SolicitedTransmissionType_optional)sub_100178524(rawValue, v1);
}

uint64_t sub_10017EC04@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_1003D4D80;
  return sub_10014E378(v2, a1, a2);
}

uint64_t sub_10017EC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100183A34();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017EC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100183A34();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANPublish.EventCondition.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.EventCondition.defaultValue;
}

uint64_t NANPublish.EventCondition.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x65746963696C6F73LL;
  }
  else {
    return 1701736302LL;
  }
}

CoreP2P::NANPublish::EventCondition_optional __swiftcall NANPublish.EventCondition.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue  = &off_1003D4D30;
  return (CoreP2P::NANPublish::EventCondition_optional)sub_100178524(rawValue, v1);
}

uint64_t sub_10017ED08(char *a1, char *a2)
{
  return sub_10002B94C(*a1, *a2);
}

uint64_t sub_10017ED14@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_1003D4D30;
  return sub_10014E378(v2, a1, a2);
}

void sub_10017ED20(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701736302LL;
  if (*v1) {
    uint64_t v2 = 0x65746963696C6F73LL;
  }
  unint64_t v3 = 0xE400000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xEB00000000785464LL;
  }
  *a1  = v2;
  a1[1]  = v3;
}

Swift::Int sub_10017ED60()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x65746963696C6F73LL;
  }
  else {
    uint64_t v2 = 1701736302LL;
  }
  if (v1) {
    unint64_t v3 = 0xEB00000000785464LL;
  }
  else {
    unint64_t v3 = 0xE400000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10017EDE0(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x65746963696C6F73LL;
  }
  else {
    uint64_t v2 = 1701736302LL;
  }
  if (*v1) {
    unint64_t v3 = 0xEB00000000785464LL;
  }
  else {
    unint64_t v3 = 0xE400000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10017EE3C(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x65746963696C6F73LL;
  }
  else {
    uint64_t v3 = 1701736302LL;
  }
  if (v2) {
    unint64_t v4 = 0xEB00000000785464LL;
  }
  else {
    unint64_t v4 = 0xE400000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10017EEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001839F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017EF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001839F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10017EF60()
{
  if (*v0) {
    return 0x65746963696C6F73LL;
  }
  else {
    return 1701736302LL;
  }
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.controlFlag.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 3LL;
  }
  else {
    return 1LL;
  }
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 7561575LL;
  }
  else {
    return 0x7055776F6C6C6F66LL;
  }
}

CoreP2P::NANPublish::FurtherServiceDiscoveryFunction_optional __swiftcall NANPublish.FurtherServiceDiscoveryFunction.init(rawValue:)( Swift::String rawValue)
{
  v1._rawValue  = &off_1003D4DD0;
  return (CoreP2P::NANPublish::FurtherServiceDiscoveryFunction_optional)sub_100178524(rawValue, v1);
}

_UNKNOWN **static NANPublish.FurtherServiceDiscoveryFunction.allCases.getter()
{
  return &off_1003D7378;
}

uint64_t sub_10017EFF4(char *a1, char *a2)
{
  return sub_10002B75C(*a1, *a2);
}

uint64_t sub_10017F000@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_1003D4DD0;
  return sub_10014E378(v2, a1, a2);
}

void sub_10017F00C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7561575LL;
  if (!*v1) {
    uint64_t v2 = 0x7055776F6C6C6F66LL;
  }
  unint64_t v3 = 0xE800000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000LL;
  }
  *a1  = v2;
  a1[1]  = v3;
}

void sub_10017F044(void *a1@<X8>)
{
  *a1  = &off_1003D73A0;
}

Swift::Int sub_10017F054()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 7561575LL;
  }
  else {
    uint64_t v2 = 0x7055776F6C6C6F66LL;
  }
  if (v1) {
    unint64_t v3 = 0xE300000000000000LL;
  }
  else {
    unint64_t v3 = 0xE800000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10017F0CC(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 7561575LL;
  }
  else {
    uint64_t v2 = 0x7055776F6C6C6F66LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE300000000000000LL;
  }
  else {
    unint64_t v3 = 0xE800000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10017F120(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 7561575LL;
  }
  else {
    uint64_t v3 = 0x7055776F6C6C6F66LL;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000LL;
  }
  else {
    unint64_t v4 = 0xE800000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10017F194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001839AC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017F1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001839AC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10017F23C()
{
  if (*v0) {
    return 7561575LL;
  }
  else {
    return 0x7055776F6C6C6F66LL;
  }
}

void NANPublish.InternetSharingConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10017B26C(v2, (uint64_t)v7);
  if ((v9 & 1) != 0)
  {
    sub_10017B2A8((uint64_t)v7);
    Swift::UInt8 v4 = 0;
  }

  else
  {
    uint64_t v5 = v7[0];
    uint64_t v6 = v7[1];
    Swift::UInt8 v4 = v8;
    Hasher._combine(_:)(1u);
    String.hash(into:)(a1, v5, v6);
    swift_bridgeObjectRelease(v6);
  }

  Hasher._combine(_:)(v4);
}

Swift::Int NANPublish.InternetSharingConfiguration.hashValue.getter()
{
  if ((v7 & 1) != 0)
  {
    sub_10017B2A8((uint64_t)v5);
    Swift::UInt8 v1 = 0;
  }

  else
  {
    uint64_t v2 = v5[0];
    uint64_t v3 = v5[1];
    Swift::UInt8 v1 = v6;
    Hasher._combine(_:)(1u);
    String.hash(into:)(v8, v2, v3);
    swift_bridgeObjectRelease(v3);
  }

  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10017F394(uint64_t a1)
{
  if ((v8 & 1) != 0)
  {
    sub_10017B2A8((uint64_t)v6);
    Swift::UInt8 v2 = 0;
  }

  else
  {
    uint64_t v3 = v6[0];
    uint64_t v4 = v6[1];
    Swift::UInt8 v2 = v7;
    Hasher._combine(_:)(1u);
    String.hash(into:)(v9, v3, v4);
    swift_bridgeObjectRelease(v4);
  }

  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANInternetSharingStatistics.Provider.sharingMode.setter(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

CoreP2P::NANPublish::DatapathConfiguration __swiftcall NANPublish.DatapathConfiguration.init(serviceType:serviceSpecificInfo:securityConfiguration:)( CoreP2P::NANDatapath::ServiceType serviceType, CoreP2P::NANGenericServiceProtocol serviceSpecificInfo, Swift::OpaquePointer securityConfiguration)
{
  int v3 = (serviceType << 16) | 0x200;
  result.securityConfiguration  = securityConfiguration;
  result.serviceSpecificInfo  = serviceSpecificInfo;
  result.parametersType  = v3;
  result.multicastType  = (CoreP2P::NANDatapath::ParametersMulticastType_optional)SBYTE1(v3);
  result.serviceType  = BYTE2(v3);
  return result;
}

uint64_t NANPublish.DatapathConfiguration.hash(into:)(__int128 *a1, int a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v9 = 1735617902LL;
  }
  else {
    uint64_t v9 = 7365742LL;
  }
  if (v8) {
    unint64_t v10 = 0xE300000000000000LL;
  }
  else {
    unint64_t v10 = 0xE400000000000000LL;
  }
  String.hash(into:)(a1, v9, v10);
  swift_bridgeObjectRelease(v10);
  if ((a2 & 0xFF00) == 0x200)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((a2 & 0x100) != 0) {
      uint64_t v11 = 0x614D6F54796E616DLL;
    }
    else {
      uint64_t v11 = 0x6E614D6F54656E6FLL;
    }
    if ((a2 & 0x100) != 0) {
      unint64_t v12 = 0xEA0000000000796ELL;
    }
    else {
      unint64_t v12 = 0xE900000000000079LL;
    }
    String.hash(into:)(a1, v11, v12);
    swift_bridgeObjectRelease(v12);
  }

  unint64_t v13 = 0xE800000000000000LL;
  uint64_t v14 = 0x656D69746C616572LL;
  if (BYTE2(a2) != 1)
  {
    uint64_t v14 = 0x6E6574614C776F6CLL;
    unint64_t v13 = 0xEA00000000007963LL;
  }

  if (BYTE2(a2)) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0x6576697470616461LL;
  }
  if (BYTE2(a2)) {
    unint64_t v16 = v13;
  }
  else {
    unint64_t v16 = 0xE800000000000000LL;
  }
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRetain(a3);
  sub_10006C6D0(a1, a3);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRetain(a4);
  sub_10008333C((uint64_t)a1, a4);
  return swift_bridgeObjectRelease(a4);
}

uint64_t static NANPublish.DatapathConfiguration.__derived_struct_equals(_:_:)( int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_1001814F8(a1 & 0xFFFF01, a2, a3, a4 & 0xFFFF01, a5, a6);
}

Swift::Int NANPublish.DatapathConfiguration.hashValue.getter(int a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10017F63C()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 1);
  uint64_t v5 = *((void *)v0 + 2);
  Hasher.init(_seed:)(v7, 0LL);
  NANPublish.DatapathConfiguration.hash(into:)(v7, v1 | (v2 << 8) | (v3 << 16), v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_10017F6A8(__int128 *a1)
{
  return NANPublish.DatapathConfiguration.hash(into:)( a1,  *v1 | (v1[1] << 8) | (v1[2] << 16),  *((void *)v1 + 1),  *((void *)v1 + 2));
}

Swift::Int sub_10017F6C4(uint64_t a1)
{
  int v2 = *v1;
  int v3 = v1[1];
  int v4 = v1[2];
  uint64_t v5 = *((void *)v1 + 1);
  uint64_t v6 = *((void *)v1 + 2);
  Hasher.init(_seed:)(v8, a1);
  NANPublish.DatapathConfiguration.hash(into:)(v8, v2 | (v3 << 8) | (v4 << 16), v5, v6);
  return Hasher._finalize()();
}

uint64_t sub_10017F72C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001814F8( *a1 | (a1[1] << 8) | (a1[2] << 16),  *((void *)a1 + 1),  *((void *)a1 + 2),  *a2 | (a2[1] << 8) | (a2[2] << 16),  *((void *)a2 + 1),  *((void *)a2 + 2));
}

uint64_t NANPublish.Configuration.serviceSpecificInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24)  = a1;
  ++*(_BYTE *)(v1 + 32);
  return result;
}

uint64_t (*NANPublish.Configuration.serviceSpecificInfo.modify( void *a1))(uint64_t result, char a2)
{
  *a1  = v1;
  return sub_10017F7AC;
}

uint64_t sub_10017F7AC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    ++*(_BYTE *)(*(void *)result + 32LL);
  }
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterTx.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 40);
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t NANPublish.Configuration.matchingFilterTx.setter(char a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 48));
  *(_BYTE *)(v2 + 40)  = a1;
  *(void *)(v2 + 48)  = a2;
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterRx.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 56);
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t NANPublish.Configuration.matchingFilterRx.setter(char a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 64));
  *(_BYTE *)(v2 + 56)  = a1;
  *(void *)(v2 + 64)  = a2;
  return result;
}

uint64_t NANPublish.Configuration.solicitedTransmissionType.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 73)  = result & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.solicitedTransmissionType.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.eventCondition.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 74)  = result & 1;
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterCondition.getter()
{
  return *(unsigned __int8 *)(v0 + 75);
}

uint64_t NANPublish.Configuration.matchingFilterCondition.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 75)  = result & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.matchingFilterCondition.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.rangingRequired.getter()
{
  return *(unsigned __int8 *)(v0 + 76);
}

uint64_t NANPublish.Configuration.rangingRequired.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 76)  = result;
  return result;
}

uint64_t (*NANPublish.Configuration.rangingRequired.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANPublish.Configuration.managementAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 78) | ((unint64_t)*(unsigned int *)(v0 + 80) << 16);
}

uint64_t NANPublish.Configuration.managementAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 78)  = result;
  *(_BYTE *)(v1 + 80)  = BYTE2(result);
  *(_BYTE *)(v1 + 81)  = BYTE3(result);
  *(_BYTE *)(v1 + 82)  = BYTE4(result);
  *(_BYTE *)(v1 + 83)  = BYTE5(result);
  return result;
}

unint64_t NANPublish.Configuration.responderAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 84) | ((unint64_t)*(unsigned int *)(v0 + 86) << 16);
}

uint64_t NANPublish.Configuration.responderAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 84)  = result;
  *(_BYTE *)(v1 + 86)  = BYTE2(result);
  *(_BYTE *)(v1 + 87)  = BYTE3(result);
  *(_BYTE *)(v1 + 88)  = BYTE4(result);
  *(_BYTE *)(v1 + 89)  = BYTE5(result);
  return result;
}

uint64_t NANPublish.Configuration.announcementPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 72);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t NANPublish.Configuration.announcementPeriod.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 72);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*NANPublish.Configuration.announcementPeriod.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.awakeDWInterval.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 76));
}

uint64_t NANPublish.Configuration.awakeDWInterval.setter(char a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 76))  = a1;
  return result;
}

uint64_t (*NANPublish.Configuration.awakeDWInterval.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.enableFastDiscovery.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 80));
}

uint64_t NANPublish.Configuration.enableFastDiscovery.setter(char a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 80))  = a1;
  return result;
}

uint64_t (*NANPublish.Configuration.enableFastDiscovery.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.datapathConfiguration.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 84));
  uint64_t v2 = *((void *)v1 + 2);
  uint64_t v3 = *v1 | (v1[1] << 8) | (v1[2] << 16);
  swift_bridgeObjectRetain(*((void *)v1 + 1));
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t NANPublish.Configuration.datapathConfiguration.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  char v6 = a1;
  unsigned int v7 = a1 >> 8;
  unsigned int v8 = HIWORD(a1);
  uint64_t v9 = v3 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 84);
  swift_bridgeObjectRelease(*(void *)(v9 + 8));
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v9 + 16));
  *(_BYTE *)uint64_t v9 = v6 & 1;
  *(_BYTE *)(v9 + 1)  = v7;
  *(_BYTE *)(v9 + 2)  = v8;
  *(void *)(v9 + 8)  = a2;
  *(void *)(v9 + 16)  = a3;
  return result;
}

uint64_t (*NANPublish.Configuration.datapathConfiguration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANPublish.Configuration(0LL);
  return sub_1000226B0(v1 + *(int *)(v3 + 88), a1, &qword_100409E58);
}

uint64_t NANPublish.Configuration.internetSharingConfiguration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 88);
  return sub_1001820D8(a1, v3);
}

uint64_t (*NANPublish.Configuration.internetSharingConfiguration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_10017FCB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002274(&qword_100405118);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  unsigned int v7 = (char *)&v22 - v6;
  uint64_t v8 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NANPublish.Configuration(0LL);
  uint64_t v18 = sub_100057FE8(v1 + *(int *)(v17 + 92), (uint64_t)v13, type metadata accessor for OWEKeys);
  P256.KeyAgreement.PrivateKey.publicKey.getter(v18);
  sub_10005802C((uint64_t)v13, type metadata accessor for OWEKeys);
  uint64_t v19 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v16, 0LL, 1LL, v19);
  sub_1000667B0(*(void *)(v1 + 24), (uint64_t)v10);
  sub_10006D2CC((uint64_t)v16, (uint64_t)&v10[*(int *)(v8 + 24)]);
  sub_100057FE8( (uint64_t)v10,  (uint64_t)v7,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v20 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  swift_storeEnumTagMultiPayload(v7, v20, 7LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v7, 0LL, 1LL, v20);
  sub_1000226B0((uint64_t)v7, (uint64_t)v5, &qword_100405118);
  sub_100013D20((uint64_t)v5, 7);
  sub_10005802C((uint64_t)v10, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000225EC((uint64_t)v7, &qword_100405118);
  uint64_t result = sub_1000225EC((uint64_t)v16, (uint64_t *)&unk_10040D470);
  ++*(_BYTE *)(v1 + 32);
  return result;
}

uint64_t NANPublish.Configuration.oweKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANPublish.Configuration(0LL);
  return sub_100057FE8(v1 + *(int *)(v3 + 92), a1, type metadata accessor for OWEKeys);
}

uint64_t NANPublish.Configuration.oweKeys.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANPublish.Configuration(0LL);
  sub_100182120(a1, v1 + *(int *)(v3 + 92));
  sub_10017FCB0();
  return sub_10005802C(a1, type metadata accessor for OWEKeys);
}

uint64_t (*NANPublish.Configuration.oweKeys.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  type metadata accessor for NANPublish.Configuration(0LL);
  return sub_10017FFB8;
}

uint64_t sub_10017FFB8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_10017FCB0();
  }
  return result;
}

uint64_t NANPublish.Configuration.authenticationType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 96));
}

BOOL NANPublish.Configuration.requiresAuthentication.getter()
{
  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 96)) & 1) == 0;
}

uint64_t NANPublish.Configuration.pairingBootstrappingMethod.getter()
{
  uint64_t v1 = type metadata accessor for NANPublish.Configuration(0LL);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 100)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 100) + 2) << 16);
}

uint64_t NANPublish.Configuration.pairingBootstrappingMethod.setter(int a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration(0LL);
  uint64_t v4 = v1 + *(int *)(result + 100);
  *(_WORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 2)  = BYTE2(a1) & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.pairingBootstrappingMethod.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANPublish.Configuration.multicastAddress.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 104));
  return *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48);
}

uint64_t NANPublish.Configuration.multicastAddress.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration(0LL);
  uint64_t v4 = v1 + *(int *)(result + 104);
  *(_WORD *)(v4 + 4)  = WORD2(a1);
  *(_DWORD *)uint64_t v4 = a1;
  *(_BYTE *)(v4 + 6)  = BYTE6(a1) & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.multicastAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 108));
}

uint64_t NANPublish.Configuration.multicastServiceType.setter(char a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 108))  = a1 & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.multicastServiceType.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANPublish.Configuration.hash(into:)(__int128 *a1)
{
  uint64_t v2 = v1;
  uint64_t v47 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v6 = (Swift::UInt64 *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Hasher._combine(_:)(*(_BYTE *)v1);
  uint64_t v7 = *(void *)(v1 + 16);
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8._object);
  uint64_t v9 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain(v9);
  sub_10006C6D0(a1, v9);
  swift_bridgeObjectRelease(v9);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 32));
  uint64_t v10 = *(void *)(v2 + 48);
  char v11 = *(_BYTE *)(v2 + 40);
  swift_bridgeObjectRetain(v10);
  NANMatchingFilter.hash(into:)((uint64_t)a1, v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = *(void *)(v2 + 64);
  char v13 = *(_BYTE *)(v2 + 56);
  swift_bridgeObjectRetain(v12);
  NANMatchingFilter.hash(into:)((uint64_t)a1, v13);
  swift_bridgeObjectRelease(v12);
  unint64_t v14 = 0xD000000000000017LL;
  unint64_t v15 = 0x8000000100360960LL;
  if (*(_BYTE *)(v2 + 72) == 1)
  {
    unint64_t v14 = 0x65746963696C6F73LL;
    unint64_t v15 = 0xE900000000000064LL;
  }

  if (*(_BYTE *)(v2 + 72)) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0x6963696C6F736E75LL;
  }
  if (*(_BYTE *)(v2 + 72)) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = 0xEB00000000646574LL;
  }
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  if (*(_BYTE *)(v2 + 73)) {
    uint64_t v18 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v18 = 0x74736163696E75LL;
  }
  if (*(_BYTE *)(v2 + 73)) {
    unint64_t v19 = 0xE900000000000074LL;
  }
  else {
    unint64_t v19 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease(v19);
  if (*(_BYTE *)(v2 + 74)) {
    uint64_t v20 = 0x65746963696C6F73LL;
  }
  else {
    uint64_t v20 = 1701736302LL;
  }
  if (*(_BYTE *)(v2 + 74)) {
    unint64_t v21 = 0xEB00000000785464LL;
  }
  else {
    unint64_t v21 = 0xE400000000000000LL;
  }
  String.hash(into:)(a1, v20, v21);
  swift_bridgeObjectRelease(v21);
  if (*(_BYTE *)(v2 + 75)) {
    uint64_t v22 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v22 = 0x526C617571457874LL;
  }
  if (*(_BYTE *)(v2 + 75)) {
    unint64_t v23 = 0xEC00000078526C61LL;
  }
  else {
    unint64_t v23 = 0xE900000000000078LL;
  }
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 76));
  int v24 = *(unsigned __int8 *)(v2 + 77);
  if (v24 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v24 & 1) != 0) {
      uint64_t v25 = 7561575LL;
    }
    else {
      uint64_t v25 = 0x7055776F6C6C6F66LL;
    }
    if ((v24 & 1) != 0) {
      unint64_t v26 = 0xE300000000000000LL;
    }
    else {
      unint64_t v26 = 0xE800000000000000LL;
    }
    String.hash(into:)(a1, v25, v26);
    swift_bridgeObjectRelease(v26);
  }

  Swift::UInt8 v27 = *(_BYTE *)(v2 + 79);
  Swift::UInt8 v28 = *(_BYTE *)(v2 + 80);
  Swift::UInt8 v29 = *(_BYTE *)(v2 + 81);
  Swift::UInt8 v30 = *(_BYTE *)(v2 + 82);
  Swift::UInt8 v31 = *(_BYTE *)(v2 + 83);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 78));
  Hasher._combine(_:)(v27);
  Hasher._combine(_:)(v28);
  Hasher._combine(_:)(v29);
  Hasher._combine(_:)(v30);
  Hasher._combine(_:)(v31);
  Swift::UInt8 v32 = *(_BYTE *)(v2 + 85);
  Swift::UInt8 v33 = *(_BYTE *)(v2 + 86);
  Swift::UInt8 v34 = *(_BYTE *)(v2 + 87);
  Swift::UInt8 v35 = *(_BYTE *)(v2 + 88);
  Swift::UInt8 v36 = *(_BYTE *)(v2 + 89);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 84));
  Hasher._combine(_:)(v32);
  Hasher._combine(_:)(v33);
  Hasher._combine(_:)(v34);
  Hasher._combine(_:)(v35);
  Hasher._combine(_:)(v36);
  uint64_t v37 = type metadata accessor for NANPublish.Configuration(0LL);
  uint64_t v38 = v47;
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + *(int *)(v37 + 72), v47);
  int v39 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v4 + 88))(v6, v38);
  if (v39 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
    int64_t v40 = *v6;
    uint64_t v41 = 1000000000LL;
  }

  else if (v39 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
    int64_t v40 = *v6;
    uint64_t v41 = 1000000LL;
  }

  else
  {
    if (v39 != enum case for DispatchTimeInterval.microseconds(_:))
    {
      if (v39 == enum case for DispatchTimeInterval.nanoseconds(_:))
      {
        (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
        Swift::UInt64 v46 = *v6;
      }

      else
      {
        if (v39 != enum case for DispatchTimeInterval.never(_:)) {
          (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 8))(v6, v38);
        }
        Swift::UInt64 v46 = 0x7FFFFFFFFFFFFFFFLL;
      }

LABEL_47:
      Hasher._combine(_:)(v46);
      __asm { BR              X10 }
    }

    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
    int64_t v40 = *v6;
    uint64_t v41 = 1000LL;
  }

  Swift::UInt64 v42 = v40 * v41;
  BOOL v43 = (unsigned __int128)(v40 * (__int128)v41) >> 64 != (v40 * v41) >> 63;
  BOOL v44 = v40 <= 0;
  unint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  if (v44) {
    unint64_t v45 = 0x8000000000000000LL;
  }
  if (v43) {
    Swift::UInt64 v46 = v45;
  }
  else {
    Swift::UInt64 v46 = v42;
  }
  goto LABEL_47;
}

    uint64_t v22 = (void *)((unint64_t)(v26 - 32) | 0x8000000000000000LL);
    goto LABEL_48;
  }

  unint64_t v23 = v18 + 3933;
  uint64_t v18 = 0xD000000000000012LL;
  uint64_t v22 = (void *)0x80000001003679E0LL;
  switch(v23)
  {
    case 0:
      uint64_t v22 = (void *)0xEF64657472617453LL;
      uint64_t v18 = 0x20746F4E204D5446LL;
      break;
    case 1:
      unint64_t v26 = "Peer Not Rangeable";
      goto LABEL_47;
    case 2:
      uint64_t v22 = (void *)0xED0000726F727245LL;
      uint64_t v18 = 0x20636972656E6547LL;
      break;
    case 3:
      int v24 = "Operation Not Permitted";
      goto LABEL_53;
    case 4:
      uint64_t v22 = (void *)0xEB00000000657275LL;
      uint64_t v18 = 0x6C69614620435049LL;
      break;
    case 5:
      uint64_t v18 = 0xD000000000000013LL;
      unint64_t v26 = "Reference Not Bound";
      goto LABEL_47;
    case 6:
      uint64_t v18 = 0xD000000000000027LL;
      unint64_t v26 = "Station Unsupported PCO Transition Time";
      goto LABEL_47;
    case 7:
      uint64_t v18 = 0xD000000000000024LL;
      unint64_t v26 = "Station Unsupported 802.11n Features";
      goto LABEL_47;
    case 8:
      unint64_t v26 = "Supplicant Timeout";
      goto LABEL_47;
    case 9:
      uint64_t v22 = (void *)0xEB000000004B4D50LL;
      goto LABEL_51;
    case 10:
      goto LABEL_17;
    case 11:
      uint64_t v18 = 0xD000000000000018LL;
      unint64_t v26 = "Invalid RSN Capabilities";
      goto LABEL_47;
    case 12:
      int v24 = "Unsupported RSN Version";
      goto LABEL_53;
    case 13:
      uint64_t v22 = (void *)0xEC000000504D4B41LL;
      goto LABEL_51;
    case 14:
      int v24 = "Invalid Pairwise Cipher";
      goto LABEL_53;
    case 15:
      uint64_t v18 = 0xD000000000000014LL;
      unint64_t v26 = "Invalid Group Cipher";
      goto LABEL_47;
    case 16:
      uint64_t v22 = (void *)0xEA00000000004549LL;
      goto LABEL_51;
    case 17:
      uint64_t v18 = 0xD000000000000015LL;
      unint64_t v26 = "DSSS/OFDM Unsupported";
      goto LABEL_47;
    case 18:
      uint64_t v18 = 0xD000000000000016LL;
      unint64_t v26 = "Short Slot Unsupported";
      goto LABEL_47;
    case 19:
      uint64_t v18 = 0xD000000000000014LL;
      unint64_t v26 = "Unsupported Rate Set";
      goto LABEL_47;
    case 20:
      uint64_t v22 = (void *)0xE700000000000000LL;
      uint64_t v18 = 0x6C6C7546205041LL;
      break;
    case 21:
      uint64_t v18 = 0xD000000000000011LL;
      unint64_t v26 = "Challenge Failure";
      goto LABEL_47;
    case 22:
      uint64_t v18 = 0xD000000000000026LL;
      unint64_t v26 = "Invalid Authentication Sequence Number";
      goto LABEL_47;
    case 23:
      uint64_t v18 = 0xD000000000000024LL;
      unint64_t v26 = "Authentication Algorithm Unsupported";
      goto LABEL_47;
    case 24:
      unint64_t v26 = "Association Denied";
      goto LABEL_47;
    case 25:
      uint64_t v18 = 0xD000000000000014LL;
      unint64_t v26 = "Reassociation Denied";
      goto LABEL_47;
    case 26:
      uint64_t v18 = 0xD000000000000018LL;
      unint64_t v26 = "Unsupported Capabilities";
      goto LABEL_47;
    case 27:
      uint64_t v18 = 0xD000000000000013LL;
      unint64_t v26 = "Unspecified failure";
      goto LABEL_47;
    case 28:
      uint64_t v22 = (void *)0xE700000000000000LL;
      uint64_t v18 = 0x74756F656D6954LL;
      break;
    case 29:
      uint64_t v22 = (void *)0xEE0074616D726F46LL;
LABEL_51:
      uint64_t v18 = 0x2064696C61766E49LL;
      break;
    case 30:
      int v24 = "Operation Not Supported";
      goto LABEL_53;
    case 31:
      uint64_t v22 = (void *)0xE700000000000000LL;
      uint64_t v18 = 0x6E776F6E6B6E55LL;
      break;
    case 32:
      uint64_t v18 = 0xD000000000000013LL;
      unint64_t v26 = "Insufficient Memory";
      goto LABEL_47;
    case 33:
      break;
    default:
      goto LABEL_55;
  }

        __break(1u);
        JUMPOUT(0x10026D6B0LL);
      }

      if ((*(_BYTE *)(a2 + 47) & 1) == 0)
      {
        uint64_t v96 = *v117;
        uint64_t v97 = *v115;
LABEL_39:
        uint64_t v52 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v97, v97, v97, v96);
        uint64_t v55 = 1LL;
        uint64_t v56 = 0LL;
        uint64_t v57 = a5;
        uint64_t v51 = v95;
        uint64_t v58 = v94;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v50)( v52,  v53,  v54,  v55,  v56,  v57,  v51,  v58);
      }

      goto LABEL_46;
    case 3LL:
      swift_bridgeObjectRetain(a2);
      if (Channel.isDFS.getter(*(_DWORD *)(a2 + 32))
        || Channel.isDFS.getter(*(_DWORD *)(a2 + 40))
        || Channel.isDFS.getter(*(_DWORD *)(a2 + 48)))
      {
        goto LABEL_13;
      }

      swift_bridgeObjectRelease(a2);
      uint64_t v104 = swift_getAssociatedTypeWitness(255LL, a18, a17, &protocol requirements base descriptor for RadioSchedule);
      __int128 v105 = swift_getAssociatedConformanceWitness( a18,  a17,  v104,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
      __int128 v106 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 32);
      __int128 v107 = swift_checkMetadataState(0LL, v104);
      v106(a11, a12, a13, a3, a4, a5, v107, v105);
      v106(a14, a15, a16, 0LL, 0LL, a5, v107, v105);
      __int128 v108 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v109 = *v108;
      uint64_t v110 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      v111  = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v109, v109, *v110, *v108);
      ((void (*)(uint64_t))v106)(v111);
      unsigned int v112 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v108, *v108, *v108, *v110);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v106)( v112,  v113,  v114,  2LL,  0LL,  a5,  v107,  v105);
    case 4LL:
      uint64_t v41 = 0LL;
      Swift::UInt64 v42 = 39LL;
      do
      {
        BOOL v43 = v41 + 1;
        if (__OFADD__(v41, 1LL))
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }

        if ((*(_BYTE *)(a2 + v42) & 1) != 0)
        {
          swift_bridgeObjectRetain(a2);
          char v59 = 0LL;
          uint64_t v60 = a2 + 37;
          do
          {
            uint64_t v61 = v59 + 1;
            if (__OFADD__(v59, 1LL)) {
              goto LABEL_45;
            }
            if (Channel.isDFS.getter(*(_DWORD *)(v60 - 5)))
            {
LABEL_13:
              swift_bridgeObjectRelease(a2);
              goto LABEL_18;
            }

            ++v59;
            v60 += 8LL;
          }

          while (v61 != v21);
          swift_bridgeObjectRelease(a2);
          uint64_t v62 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
          uint64_t v63 = *v62;
          uint64_t v64 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
          v65  = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v63, *v64, *v64, *v64);
          int v116 = v66;
          v118  = v65;
          int16x8_t v68 = v67;
          uint64_t v69 = swift_getAssociatedTypeWitness( 255LL,  a18,  a17,  &protocol requirements base descriptor for RadioSchedule);
          uint64_t v70 = swift_getAssociatedConformanceWitness( a18,  a17,  v69,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
          v71  = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 32);
          unint64_t v72 = swift_checkMetadataState(0LL, v69);
          v71(v118, v116, v68, a3, a4, a5, v72, v70);
          v73  = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v64, *v62, *v64, *v64);
          ((void (*)(uint64_t))v71)(v73);
          __int128 v74 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v64, *v64, *v62, *v64);
          ((void (*)(uint64_t))v71)(v74);
          v75  = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v64, *v64, *v64, *v62);
          return ((uint64_t (*)(uint64_t))v71)(v75);
        }

        v42 += 8LL;
        ++v41;
      }

      while (v43 != v21);
LABEL_18:
      BOOL v44 = *(_BYTE *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      unint64_t v45 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      Swift::UInt8 v29 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v44, v44, *v45, *v45);
      Swift::UInt8 v30 = v46;
      Swift::UInt8 v31 = v47;
LABEL_19:
      __int128 v48 = swift_getAssociatedTypeWitness(255LL, a18, a17, &protocol requirements base descriptor for RadioSchedule);
      __int128 v49 = swift_getAssociatedConformanceWitness( a18,  a17,  v48,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
      __int128 v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 32);
      uint64_t v51 = swift_checkMetadataState(0LL, v48);
      uint64_t v52 = v29;
      int v53 = v30;
      int16x8_t v54 = v31;
      uint64_t v55 = a3;
      uint64_t v56 = a4;
      uint64_t v57 = a5;
      uint64_t v58 = v49;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v50)( v52,  v53,  v54,  v55,  v56,  v57,  v51,  v58);
    default:
      goto LABEL_18;
  }

    v129  = v164;
    v130  = v164 >> 40;
    isUniquelyReferenced_nonNull_native  = HIDWORD(v164);
    v131  = v164 >> 24;
    v132  = v164 >> 16;
    v133  = v164 >> 8;
    v187  = 0;
    v134  = v184;
    v135  = (uint64_t *)((char *)v184 + *(void *)(*v184 + 576));
    swift_beginAccess(v135, v188, 0LL, 0LL);
    v177  = (char *)&v156;
    v186[0]  = *v135;
    v136  = v186[0];
    __chkstk_darwin();
    *(&v156 - 4)  = (uint64_t)v183;
    *(&v156 - 3)  = (uint64_t)v134;
    *((_BYTE *)&v156 - 16)  = v129;
    *((_BYTE *)&v156 - 15)  = v133;
    *((_BYTE *)&v156 - 14)  = v132;
    *((_BYTE *)&v156 - 13)  = v131;
    *((_BYTE *)&v156 - 12)  = isUniquelyReferenced_nonNull_native;
    *((_BYTE *)&v156 - 11)  = v130;
    *(&v156 - 1)  = (uint64_t)&v187;
    v137  = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    v138  = sub_100245750();
    v139  = type metadata accessor for Dictionary(0LL, v137, v181, v138);
    swift_bridgeObjectRetain(v136);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v139);
    Sequence.forEach(_:)(sub_100333130, &v156 - 6, v139, WitnessTable);
    swift_bridgeObjectRelease(v186[0]);
    LOBYTE(v45)  = v187;
    v141  = v182;
    swift_beginAccess(v182, v186, 33LL, 0LL);
    int16x8_t v54 = swift_isUniquelyReferenced_nonNull_native(*v141);
    v185  = *v141;
    v142  = v185;
    *v141  = 0x8000000000000000LL;
    uint64_t v47 = v178;
    uint64_t v51 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
    v144  = *(void *)(v142 + 16);
    v145  = (v143 & 1) == 0;
    v146  = v144 + v145;
    if (__OFADD__(v144, v145))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    LOBYTE(v50)  = v143;
    if (*(void *)(v142 + 24) < v146)
    {
      sub_100240434(v146, v54);
      v147  = sub_100327838( v47,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
      isUniquelyReferenced_nonNull_native  = v180;
      if ((v50 & 1) != (v148 & 1)) {
        goto LABEL_73;
      }
      uint64_t v51 = v147;
      if ((v50 & 1) != 0)
      {
LABEL_54:
        v149  = v45 ^ 1;
        v150  = v161;
        sub_100022628(*(void *)(v185 + 56) + *(void *)(v175 + 72) * v51, v161, type metadata accessor for AWDLPeer);
        v151  = v179;
        v176(v150, 0LL, 1LL, v179);
        *(_BYTE *)(v150 + *(int *)(v151 + 1close(*(_DWORD *)(v0 + 16)) = v149;
        sub_10029F08C(v150, 1, &v185, v51, v47);
        sub_1000225EC(v150, (uint64_t *)&unk_10040E540);
        *v182  = v185;
        swift_endAccess(v186);

        v152  = isUniquelyReferenced_nonNull_native;
        goto LABEL_58;
      }

      goto LABEL_64;
    }

    isUniquelyReferenced_nonNull_native  = v180;
    if ((v54 & 1) == 0) {
      goto LABEL_63;
    }
    if ((v143 & 1) != 0) {
      goto LABEL_54;
    }
LABEL_64:
    v176(v161, 1LL, 1LL, v179);
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
LABEL_24:
    isUniquelyReferenced_nonNull_native  = (uint64_t)v177;
    if ((v45 & 1) == 0) {
      goto LABEL_71;
    }
    __int128 v50 = v159;
    sub_100022628(v190[7] + *(void *)(v175 + 72) * v54, v159, type metadata accessor for AWDLPeer);
    uint64_t v85 = v179;
    v176(v50, 0LL, 1LL, v179);
    *(_BYTE *)(v50 + *(int *)(v85 + 112))  = v51 & 1;
    sub_10029F08C(v50, 1, (uint64_t *)&v190, v54, v178);
    sub_1000225EC(v50, (uint64_t *)&unk_10040E540);
    *v182  = v190;
    swift_endAccess(v191);
    LOBYTE(v50)  = 0;
LABEL_35:
    __int128 v48 = v174;
  }

  sub_10005802C(v118, type metadata accessor for AWDLPeer);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_47;
  }
  v121  = v182;
  swift_beginAccess(v182, v188, 33LL, 0LL);
  int16x8_t v54 = swift_isUniquelyReferenced_nonNull_native(*v121);
  v186[0]  = *v121;
  v122  = v186[0];
  *v121  = 0x8000000000000000LL;
  unint64_t v45 = v178;
  uint64_t v51 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
  v124  = *(void *)(v122 + 16);
  v125  = (v123 & 1) == 0;
  v126  = v124 + v125;
  if (__OFADD__(v124, v125))
  {
LABEL_62:
    __break(1u);
LABEL_63:
    sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
    if ((v50 & 1) != 0) {
      goto LABEL_54;
    }
    goto LABEL_64;
  }

  __int128 v50 = v123;
  if (*(void *)(v122 + 24) >= v126)
  {
    if ((v54 & 1) != 0)
    {
      if ((v123 & 1) != 0) {
        goto LABEL_57;
      }
    }

    else
    {
      sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
      if ((v50 & 1) != 0) {
        goto LABEL_57;
      }
    }

    goto LABEL_68;
  }

  sub_100240434(v126, v54);
  v127  = sub_100327838( v45,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
  if ((v50 & 1) != (v128 & 1)) {
    goto LABEL_73;
  }
  uint64_t v51 = v127;
  if ((v50 & 1) == 0)
  {
LABEL_68:
    v176(v158, 1LL, 1LL, v179);
    __break(1u);
LABEL_69:
    sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
    if ((v54 & 1) == 0) {
      goto LABEL_70;
    }
LABEL_32:
    __int128 v89 = v157;
    sub_100022628(*(void *)(v189 + 56) + *(void *)(v175 + 72) * v51, v157, type metadata accessor for AWDLPeer);
    uint64_t v90 = v179;
    v176(v89, 0LL, 1LL, v179);
    *(_BYTE *)(v89 + *(int *)(v90 + 112))  = 0;
    sub_10029F08C(v89, 1, &v189, v51, v178);
    unint64_t v88 = v89;
LABEL_33:
    sub_1000225EC(v88, (uint64_t *)&unk_10040E540);
    *v182  = v189;
    swift_endAccess(&v190);
LABEL_34:
    int v91 = v50;
    v190  = (void *)v50;
    uint64_t v92 = __chkstk_darwin();
    *(&v156 - 2)  = (uint64_t)v184;
    *((_BYTE *)&v156 - 8)  = v92;
    *((_BYTE *)&v156 - 7)  = v93;
    *((_BYTE *)&v156 - 6)  = v94;
    *((_BYTE *)&v156 - 5)  = v95;
    *((_BYTE *)&v156 - 4)  = v96;
    *((_BYTE *)&v156 - 3)  = v97;
    v98  = type metadata accessor for Dictionary(0LL, v162, v181, v163);
    unsigned int v99 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v98);
    LOBYTE(v50)  = (_BYTE)v173;
    Sequence.forEach(_:)(sub_1003330F0, &v156 - 4, v98, v99);
    swift_bridgeObjectRelease(v91);
    goto LABEL_35;
  }

Swift::Int NANPublish.Configuration.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_100180A24@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, char a13, char a14, char a15, char a16, int a17, __int16 a18, uint64_t a19, uint64_t a20, char a21, char a22, int a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, __int16 a29, __int16 a30, char a31, int a32, __int16 a33, char a34, char a35, char a36)
{
  *(_BYTE *)a9  = a1;
  *(void *)(a9 + 8)  = a2;
  *(void *)(a9 + 16)  = a3;
  *(void *)(a9 + 24)  = a4;
  *(_BYTE *)(a9 + 32)  = a5;
  *(_BYTE *)(a9 + 40)  = a6;
  *(void *)(a9 + 48)  = a7;
  *(_BYTE *)(a9 + 56)  = a8;
  *(void *)(a9 + 64)  = a10;
  *(_BYTE *)(a9 + 72)  = a11;
  *(_BYTE *)(a9 + 73)  = a12 & 1;
  *(_BYTE *)(a9 + 74)  = a13 & 1;
  *(_BYTE *)(a9 + 75)  = a14 & 1;
  *(_BYTE *)(a9 + 76)  = a15;
  *(_BYTE *)(a9 + 77)  = a16;
  *(_DWORD *)(a9 + 78)  = a17;
  *(_WORD *)(a9 + 82)  = a18;
  *(_WORD *)(a9 + 85)  = *(_WORD *)((char *)&a19 + 1);
  *(_BYTE *)(a9 + 84)  = a19;
  *(_WORD *)(a9 + 87)  = *(_WORD *)((char *)&a19 + 3);
  *(_BYTE *)(a9 + 89)  = BYTE5(a19);
  uint64_t v37 = (int *)type metadata accessor for NANPublish.Configuration(0LL);
  uint64_t v38 = a9 + v37[18];
  uint64_t v39 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32LL))(v38, a20, v39);
  *(_BYTE *)(a9 + v37[19])  = a21;
  *(_BYTE *)(a9 + v37[20])  = a22;
  uint64_t v40 = a9 + v37[21];
  *(_BYTE *)uint64_t v40 = a23 & 1;
  *(_WORD *)(v40 + 1)  = *(_WORD *)((char *)&a23 + 1);
  *(void *)(v40 + 8)  = a24;
  *(void *)(v40 + 16)  = a25;
  sub_100183ABC(a26, a9 + v37[22]);
  uint64_t result = sub_100183B04(a27, a9 + v37[23]);
  *(_BYTE *)(a9 + v37[24])  = a28 & 1;
  uint64_t v42 = a9 + v37[25];
  *(_WORD *)uint64_t v42 = a30;
  *(_BYTE *)(v42 + 2)  = a31 & 1;
  uint64_t v43 = a9 + v37[26];
  *(_WORD *)(v43 + 4)  = a33;
  *(_DWORD *)uint64_t v43 = a32;
  *(_BYTE *)(v43 + 6)  = a34 & 1;
  *(_BYTE *)(a9 + v37[27])  = a36 & 1;
  return result;
}

Swift::Int sub_100180C58(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100180C90()
{
  return sub_10017E4CC(type metadata accessor for NANPublish.Configuration, &qword_10040A148);
}

uint64_t NANPublish.Configuration.init(instanceID:serviceName:instanceName:blob:txtRecordData:managementAddress:responderAddress:datapathConfiguration:announcementPeriod:furtherServiceDiscoveryFunction:enableFastDiscovery:authenticationType:internetSharingConfiguration:pairingBootstrappingMethod:publisherType:multicastAddress:multicastServiceType:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, unsigned __int8 a18, char a19, uint64_t a20, unsigned __int16 a21, unsigned __int8 a22, unint64_t a23, char a24)
{
  uint64_t v92 = a6;
  v93  = a7;
  uint64_t v90 = a2;
  int v89 = a1;
  uint64_t v88 = a9;
  type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin();
  uint64_t v87 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  uint64_t v86 = (uint64_t)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  Swift::UInt8 v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405118);
  __chkstk_darwin();
  uint64_t v83 = (uint64_t)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  Swift::UInt8 v34 = (uint64_t *)((char *)&v65 - v33);
  __chkstk_darwin();
  Swift::UInt8 v36 = (uint64_t *)((char *)&v65 - v35);
  __chkstk_darwin();
  uint64_t v38 = (char *)&v65 - v37;
  __chkstk_darwin();
  uint64_t v40 = (uint64_t *)((char *)&v65 - v39);
  uint64_t v41 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  uint64_t v84 = *(void *)(v41 - 8);
  uint64_t v85 = v41;
  uint64_t v42 = __chkstk_darwin();
  v81  = (char *)&v65 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  P256.KeyAgreement.PrivateKey.init()(v42);
  v95  = sub_100020554((uint64_t)_swiftEmptyArrayStorage);
  if (a5)
  {
    void *v40 = a4;
    v40[1]  = a5;
    uint64_t v44 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v40, v44, 3LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v40, 0LL, 1LL, v44);
  }

  else
  {
    uint64_t v45 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v40, 1LL, 1LL, v45);
  }

  sub_1000226B0((uint64_t)v40, (uint64_t)v38, &qword_100405118);
  sub_100013D20((uint64_t)v38, 3);
  sub_1000225EC((uint64_t)v40, &qword_100405118);
  unint64_t v46 = v93;
  uint64_t v91 = a3;
  uint64_t v66 = a8;
  if (v93 >> 60 == 15)
  {
    uint64_t v47 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v36, 1LL, 1LL, v47);
    uint64_t v48 = v92;
  }

  else
  {
    uint64_t v48 = v92;
    *Swift::UInt8 v36 = v92;
    v36[1]  = v46;
    uint64_t v49 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v36, v49, 6LL);
    __int128 v50 = *(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL);
    uint64_t v51 = v49;
    unint64_t v46 = v93;
    v50(v36, 0LL, 1LL, v51);
  }

  v73  = a23;
  int v80 = a22;
  int v72 = a21;
  int v77 = a18;
  int v79 = a17;
  uint64_t v78 = a16;
  v75  = a15;
  uint64_t v76 = a20;
  uint64_t v74 = a14;
  v71  = a13;
  uint64_t v70 = a12;
  uint64_t v69 = a11;
  sub_1000226B0((uint64_t)v36, (uint64_t)v38, &qword_100405118);
  sub_10002255C(v48, v46);
  sub_100013D20((uint64_t)v38, 6);
  sub_1000225EC((uint64_t)v36, &qword_100405118);
  if (a10 >> 60 == 15)
  {
    uint64_t v52 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v34, 1LL, 1LL, v52);
    uint64_t v53 = v66;
  }

  else
  {
    uint64_t v53 = v66;
    *Swift::UInt8 v34 = v66;
    v34[1]  = a10;
    uint64_t v52 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v34, v52, 4LL);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v34, 0LL, 1LL, v52);
  }

  int v67 = a24 & 1;
  int v68 = a19 & 1;
  sub_1000226B0((uint64_t)v34, (uint64_t)v38, &qword_100405118);
  sub_10002255C(v53, a10);
  sub_100013D20((uint64_t)v38, 4);
  uint64_t v54 = sub_1000225EC((uint64_t)v34, &qword_100405118);
  uint64_t v55 = v81;
  P256.KeyAgreement.PrivateKey.publicKey.getter(v54);
  uint64_t v56 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL))(v31, 0LL, 1LL, v56);
  uint64_t v57 = v86;
  sub_1000667B0(v95, v86);
  sub_10006D2CC((uint64_t)v31, v57 + *(int *)(v82 + 24));
  sub_100057FE8(v57, (uint64_t)v38, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  swift_storeEnumTagMultiPayload(v38, v52, 7LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v38, 0LL, 1LL, v52);
  uint64_t v58 = v83;
  sub_1000226B0((uint64_t)v38, v83, &qword_100405118);
  sub_100013D20(v58, 7);
  sub_10005802C(v57, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000225EC((uint64_t)v38, &qword_100405118);
  sub_1000225EC((uint64_t)v31, (uint64_t *)&unk_10040D470);
  uint64_t v59 = v95;
  uint64_t v94 = 0LL;
  swift_stdlib_random(&v94, 8LL);
  sub_100020B40(v53, a10);
  sub_100020B40(v92, v93);
  char v60 = v94;
  uint64_t v61 = (uint64_t)v87;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v87, v55, v85);
  uint64_t v64 = v73 & 0xFFFFFFFFFFFFLL | ((HIWORD(v73) & 1) << 48);
  return sub_100180A24( v89,  v90,  v91,  v59,  v60,  2,  (uint64_t)_swiftEmptyArrayStorage,  3,  v88,  (uint64_t)_swiftEmptyArrayStorage,  v80,  1,  0,  0,  0,  v79,  v69,  (v69 & 0xFFFFFFFFFFFFuLL) >> 32,  v70 & 0xFFFFFFFFFFFFLL,  v78,  1,  v77 & 1,  v71 & 0xFFFF01,  v74,  v75,  v76,  v61,  v68,  v63,  v72,  0,  v64,  SWORD2(v64),  SBYTE6(v64),  SHIBYTE(v64),  v67);
}

uint64_t type metadata accessor for NANPublish.Configuration(uint64_t a1)
{
  uint64_t result = qword_10040A0B8;
  if (!qword_10040A0B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANPublish.Configuration);
  }
  return result;
}

uint64_t _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((v13[40] & 1) == 0)
  {
    sub_10017B26C((uint64_t)v13, (uint64_t)&v10);
    uint64_t v4 = v11;
    if ((v17 & 1) != 0)
    {
      swift_bridgeObjectRelease(v11);
      goto LABEL_6;
    }

    int v5 = v12;
    uint64_t v6 = v15;
    int v7 = v16;
    if (v10 == v14 && v11 == v15)
    {
      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v14, v15, 0LL);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v4);
      uint64_t v3 = 0LL;
      if ((v8 & 1) == 0)
      {
LABEL_12:
        sub_10017B2A8((uint64_t)v13);
        return v3;
      }
    }

    uint64_t v3 = v5 ^ v7 ^ 1u;
    goto LABEL_12;
  }

  if (v17 != 1)
  {
LABEL_6:
    sub_1000225EC((uint64_t)v13, &qword_10040A188);
    return 0LL;
  }

  sub_10017B2A8((uint64_t)&v14);
  sub_10017B2A8((uint64_t)v13);
  return 1LL;
}

uint64_t sub_1001814F8(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  BOOL v12 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v13 = 1735617902LL;
  }
  else {
    uint64_t v13 = 7365742LL;
  }
  if (v12) {
    unint64_t v14 = 0xE300000000000000LL;
  }
  else {
    unint64_t v14 = 0xE400000000000000LL;
  }
  if ((a4 & 1) != 0) {
    uint64_t v15 = 1735617902LL;
  }
  else {
    uint64_t v15 = 7365742LL;
  }
  if ((a4 & 1) != 0) {
    unint64_t v16 = 0xE400000000000000LL;
  }
  else {
    unint64_t v16 = 0xE300000000000000LL;
  }
  if (v13 == v15 && v14 == v16)
  {
    swift_bridgeObjectRelease_n(v14, 2LL);
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) == 0) {
      return 0LL;
    }
  }

  int v18 = a4 & 0xFF00;
  if ((a1 & 0xFF00) == 0x200)
  {
    if (v18 != 512) {
      return 0LL;
    }
  }

  else
  {
    if (v18 == 512) {
      return 0LL;
    }
    if ((a1 & 0x100) != 0) {
      uint64_t v19 = 0x614D6F54796E616DLL;
    }
    else {
      uint64_t v19 = 0x6E614D6F54656E6FLL;
    }
    if ((a1 & 0x100) != 0) {
      unint64_t v20 = 0xEA0000000000796ELL;
    }
    else {
      unint64_t v20 = 0xE900000000000079LL;
    }
    if ((a4 & 0x100) != 0) {
      uint64_t v21 = 0x614D6F54796E616DLL;
    }
    else {
      uint64_t v21 = 0x6E614D6F54656E6FLL;
    }
    if ((a4 & 0x100) != 0) {
      unint64_t v22 = 0xEA0000000000796ELL;
    }
    else {
      unint64_t v22 = 0xE900000000000079LL;
    }
    if (v19 == v21 && v20 == v22)
    {
      swift_bridgeObjectRelease_n(v20, 2LL);
    }

    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v21, v22, 0LL);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v22);
      if ((v23 & 1) == 0) {
        return 0LL;
      }
    }
  }

  if (BYTE2(a1))
  {
    if (BYTE2(a1) == 1) {
      uint64_t v24 = 0x656D69746C616572LL;
    }
    else {
      uint64_t v24 = 0x6E6574614C776F6CLL;
    }
    if (BYTE2(a1) == 1) {
      unint64_t v25 = 0xE800000000000000LL;
    }
    else {
      unint64_t v25 = 0xEA00000000007963LL;
    }
  }

  else
  {
    unint64_t v25 = 0xE800000000000000LL;
    uint64_t v24 = 0x6576697470616461LL;
  }

  unint64_t v26 = 0xE800000000000000LL;
  uint64_t v27 = 0x656D69746C616572LL;
  if (BYTE2(a4) != 1)
  {
    uint64_t v27 = 0x6E6574614C776F6CLL;
    unint64_t v26 = 0xEA00000000007963LL;
  }

  if (BYTE2(a4)) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0x6576697470616461LL;
  }
  if (BYTE2(a4)) {
    unint64_t v29 = v26;
  }
  else {
    unint64_t v29 = 0xE800000000000000LL;
  }
  if (v24 == v28 && v25 == v29)
  {
    swift_bridgeObjectRelease_n(v25, 2LL);
  }

  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v28, v29, 0LL);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v29);
    if ((v30 & 1) == 0) {
      return 0LL;
    }
  }

  if ((sub_1000680E4(a2, a5) & 1) != 0) {
    return sub_10007E5B0(a3, a6);
  }
  return 0LL;
}

uint64_t _s7CoreP2P10NANPublishO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  Swift::String v4 = String.lowercased()();
  Swift::String v5 = String.lowercased()();
  if (v4._countAndFlagsBits == v5._countAndFlagsBits && v4._object == v5._object)
  {
    swift_bridgeObjectRelease_n(v4._object, 2LL);
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)( v4._countAndFlagsBits,  v4._object,  v5._countAndFlagsBits,  v5._object,  0LL);
    swift_bridgeObjectRelease(v4._object);
    swift_bridgeObjectRelease(v5._object);
    uint64_t result = 0LL;
    if ((v7 & 1) == 0) {
      return result;
    }
  }

  if ((sub_1000680E4(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) == 0) {
    return 0LL;
  }
  if (a1[32] != a2[32]) {
    return 0LL;
  }
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v10 = *((void *)a2 + 6);
  if ((sub_10002A7D8(a1[40], a2[40]) & 1) == 0) {
    return 0LL;
  }
  if ((sub_10007A838(v9, v10) & 1) == 0) {
    return 0LL;
  }
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v12 = *((void *)a2 + 8);
  if ((sub_10002A7D8(a1[56], a2[56]) & 1) == 0 || (sub_10007A838(v11, v12) & 1) == 0) {
    return 0LL;
  }
  unint64_t v13 = 0xEB00000000646574LL;
  unint64_t v14 = 0x6963696C6F736E75LL;
  if (a1[72])
  {
    if (a1[72] == 1)
    {
      unint64_t v15 = 0x65746963696C6F73LL;
      unint64_t v16 = 0xE900000000000064LL;
    }

    else
    {
      unint64_t v16 = 0x8000000100360960LL;
      unint64_t v15 = 0xD000000000000017LL;
    }
  }

  else
  {
    unint64_t v15 = 0x6963696C6F736E75LL;
    unint64_t v16 = 0xEB00000000646574LL;
  }

  if (a2[72])
  {
    if (a2[72] == 1)
    {
      unint64_t v14 = 0x65746963696C6F73LL;
      unint64_t v13 = 0xE900000000000064LL;
    }

    else
    {
      unint64_t v13 = 0x8000000100360960LL;
      unint64_t v14 = 0xD000000000000017LL;
    }
  }

  if (v15 == v14 && v16 == v13)
  {
    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v14, v13, 0LL);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v13);
    uint64_t result = 0LL;
    if ((v17 & 1) == 0) {
      return result;
    }
  }

  uint64_t v18 = a1[73] ? 0x73616369746C756DLL : 0x74736163696E75LL;
  unint64_t v19 = a1[73] ? 0xE900000000000074LL : 0xE700000000000000LL;
  uint64_t v20 = a2[73] ? 0x73616369746C756DLL : 0x74736163696E75LL;
  unint64_t v21 = a2[73] ? 0xE900000000000074LL : 0xE700000000000000LL;
  if (v18 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n(v19, 2LL);
  }

  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0LL);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v21);
    uint64_t result = 0LL;
    if ((v22 & 1) == 0) {
      return result;
    }
  }

  uint64_t v23 = a1[74] ? 0x65746963696C6F73LL : 1701736302LL;
  unint64_t v24 = a1[74] ? 0xEB00000000785464LL : 0xE400000000000000LL;
  uint64_t v25 = a2[74] ? 0x65746963696C6F73LL : 1701736302LL;
  unint64_t v26 = a2[74] ? 0xEB00000000785464LL : 0xE400000000000000LL;
  if (v23 == v25 && v24 == v26)
  {
    swift_bridgeObjectRelease_n(v24, 2LL);
  }

  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 0LL);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v26);
    uint64_t result = 0LL;
    if ((v27 & 1) == 0) {
      return result;
    }
  }

  uint64_t v28 = a1[75] ? 0x757145746F4E7874LL : 0x526C617571457874LL;
  unint64_t v29 = a1[75] ? 0xEC00000078526C61LL : 0xE900000000000078LL;
  uint64_t v30 = a2[75] ? 0x757145746F4E7874LL : 0x526C617571457874LL;
  unint64_t v31 = a2[75] ? 0xEC00000078526C61LL : 0xE900000000000078LL;
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n(v29, 2LL);
  }

  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0LL);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v31);
    uint64_t result = 0LL;
    if ((v32 & 1) == 0) {
      return result;
    }
  }

  if (a1[76] != a2[76]) {
    return 0LL;
  }
  int v33 = a1[77];
  int v34 = a2[77];
  if (v33 == 2)
  {
    if (v34 != 2) {
      return 0LL;
    }
  }

  else
  {
    if (v34 == 2) {
      return 0LL;
    }
    if ((v33 & 1) != 0) {
      uint64_t v35 = 7561575LL;
    }
    else {
      uint64_t v35 = 0x7055776F6C6C6F66LL;
    }
    if ((v33 & 1) != 0) {
      unint64_t v36 = 0xE300000000000000LL;
    }
    else {
      unint64_t v36 = 0xE800000000000000LL;
    }
    if ((v34 & 1) != 0) {
      uint64_t v37 = 7561575LL;
    }
    else {
      uint64_t v37 = 0x7055776F6C6C6F66LL;
    }
    if ((v34 & 1) != 0) {
      unint64_t v38 = 0xE300000000000000LL;
    }
    else {
      unint64_t v38 = 0xE800000000000000LL;
    }
    if (v35 == v37 && v36 == v38)
    {
      swift_bridgeObjectRelease_n(v36, 2LL);
    }

    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v37, v38, 0LL);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v38);
      uint64_t result = 0LL;
      if ((v39 & 1) == 0) {
        return result;
      }
    }
  }

  int v40 = *((unsigned __int16 *)a1 + 41);
  int v41 = *((unsigned __int16 *)a2 + 41);
  *(_DWORD *)uint64_t v90 = *(_DWORD *)(a1 + 78);
  *(_WORD *)&v90[4]  = v40;
  if (*(_DWORD *)v90 != *(_DWORD *)(a2 + 78) || v40 != v41) {
    return 0LL;
  }
  int v43 = *((unsigned __int16 *)a1 + 44);
  int v44 = *((unsigned __int16 *)a2 + 44);
  *(_DWORD *)uint64_t v90 = *((_DWORD *)a1 + 21);
  *(_WORD *)&v90[4]  = v43;
  if (*(_DWORD *)v90 != *((_DWORD *)a2 + 21) || v43 != v44) {
    return 0LL;
  }
  unint64_t v46 = (int *)type metadata accessor for NANPublish.Configuration(0LL);
  if ((static DispatchTimeInterval.== infix(_:_:)(&a1[v46[18]], &a2[v46[18]]) & 1) == 0) {
    return 0LL;
  }
  if ((sub_10002A720(a1[v46[19]], a2[v46[19]]) & 1) == 0) {
    return 0LL;
  }
  if (a1[v46[20]] != a2[v46[20]]) {
    return 0LL;
  }
  uint64_t v47 = v46[21];
  int v48 = a1[v47];
  int v49 = a1[v47 + 1];
  int v50 = a1[v47 + 2];
  uint64_t v51 = *(void *)&a1[v47 + 8];
  uint64_t v52 = *(void *)&a1[v47 + 16];
  uint64_t v53 = &a2[v47];
  if ((sub_1001814F8( v48 | (v49 << 8) | (v50 << 16),  v51,  v52,  *v53 | (v53[1] << 8) | (v53[2] << 16),  *((void *)v53 + 1),  *((void *)v53 + 2)) & 1) == 0) {
    return 0LL;
  }
  sub_1000226B0((uint64_t)&a1[v46[22]], (uint64_t)v95, &qword_100409E58);
  sub_1000226B0((uint64_t)&a2[v46[22]], (uint64_t)v94, &qword_100409E58);
  sub_1000226B0((uint64_t)v95, (uint64_t)v90, &qword_100409E58);
  sub_1000226B0((uint64_t)v94, (uint64_t)v92, &qword_100409E58);
  if (v91 == 255)
  {
    sub_1000225EC((uint64_t)v94, &qword_100409E58);
    sub_1000225EC((uint64_t)v95, &qword_100409E58);
    if (v93 == 255)
    {
      uint64_t v55 = sub_1000225EC((uint64_t)v90, &qword_100409E58);
      goto LABEL_117;
    }

LABEL_122:
    sub_1000225EC((uint64_t)v90, &qword_100409F60);
    return 0LL;
  }

  sub_1000226B0((uint64_t)v90, (uint64_t)v89, &qword_100409E58);
  if (v93 == 255)
  {
    sub_1000225EC((uint64_t)v94, &qword_100409E58);
    sub_1000225EC((uint64_t)v95, &qword_100409E58);
    sub_10017B2A8((uint64_t)v89);
    goto LABEL_122;
  }

  sub_10017B230((uint64_t)v92, (uint64_t)v88);
  char v54 = _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0((uint64_t)v89, (uint64_t)v88);
  sub_10017B2A8((uint64_t)v88);
  sub_1000225EC((uint64_t)v94, &qword_100409E58);
  sub_1000225EC((uint64_t)v95, &qword_100409E58);
  sub_10017B2A8((uint64_t)v89);
  uint64_t v55 = sub_1000225EC((uint64_t)v90, &qword_100409E58);
  if ((v54 & 1) == 0) {
    return 0LL;
  }
LABEL_117:
  uint64_t v56 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v55);
  unint64_t v58 = v57;
  uint64_t v59 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v56);
  unint64_t v61 = v60;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v58);
  char v63 = v62;
  sub_1000208D8(v59, v61);
  sub_1000208D8(v56, v58);
  if ((v63 & 1) != 0)
  {
    uint64_t v64 = v46[24];
    v65  = a1[v64];
    int v66 = a2[v64];
    if ((v65 & 1) != 0)
    {
      if (!v66) {
        return 0LL;
      }
    }

    else if ((v66 & 1) != 0)
    {
      return 0LL;
    }

    uint64_t v67 = v46[25];
    int v68 = &a1[v67];
    unsigned __int8 v69 = a1[v67 + 2];
    uint64_t v70 = &a2[v67];
    v71  = a2[v67 + 2];
    if ((v69 & 1) != 0)
    {
      if (!v71) {
        return 0LL;
      }
    }

    else
    {
      if ((v71 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v72 = v46[26];
    v73  = &a1[v72];
    unsigned __int8 v74 = a1[v72 + 6];
    v75  = &a2[v72];
    if ((v74 & 1) != 0)
    {
      if (!v75[6]) {
        return 0LL;
      }
    }

    else
    {
      if ((v75[6] & 1) != 0) {
        return 0LL;
      }
      unint64_t v76 = *(unsigned int *)v73 | ((unint64_t)*((unsigned __int16 *)v73 + 2) << 32);
      unint64_t v77 = *(unsigned int *)v75 | ((unint64_t)*((unsigned __int16 *)v75 + 2) << 32);
      v78.i64[0]  = 0xFFFFFFFFFFFFLL;
      v78.i64[1]  = 0xFFFFFFFFFFFFLL;
      uint64x2_t v79 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v76), v78);
      int16x8_t v80 = (int16x8_t)vshlq_u64(v79, (uint64x2_t)xmmword_10033A8F0);
      v81  = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v77), v78);
      int64x2_t v82 = (int64x2_t)vshlq_u64(v81, (uint64x2_t)xmmword_10033A8F0);
      int16x8_t v83 = (int16x8_t)vshlq_u64(v81, (uint64x2_t)xmmword_10033A8E0);
      v90[0]  = v76;
      *(int32x2_t *)v79.i8  = vmovn_s64((int64x2_t)vshlq_u64(v79, (uint64x2_t)xmmword_10033A8E0));
      *(int32x2_t *)v80.i8  = vmovn_s64((int64x2_t)v80);
      v80.i16[1]  = v80.i16[2];
      v80.i16[2]  = v79.i16[0];
      v80.i16[3]  = v79.i16[2];
      *(_DWORD *)&v90[1]  = vmovn_s16(v80).u32[0];
      v90[5]  = BYTE5(v76);
      v95[0]  = v77;
      *(int32x2_t *)v79.i8  = vmovn_s64((int64x2_t)v83);
      *(int32x2_t *)v83.i8  = vmovn_s64(v82);
      v83.i16[1]  = v83.i16[2];
      v83.i16[2]  = v79.i16[0];
      v83.i16[3]  = v79.i16[2];
      *(_DWORD *)&v95[1]  = vmovn_s16(v83).u32[0];
      v95[5]  = BYTE5(v77);
    }

    uint64_t v85 = v46[27];
    unsigned __int8 v86 = a1[v85];
    unsigned __int8 v87 = a2[v85];
    if ((v86 & 1) != 0)
    {
      if ((v87 & 1) != 0) {
        return 1LL;
      }
    }

    else if ((v87 & 1) == 0)
    {
      return 1LL;
    }
  }

  return 0LL;
}

unint64_t _s7CoreP2P10NANPublishO11PublishTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D4CC8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001820D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100409E58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100182120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100182168()
{
  unint64_t result = qword_100409FC0;
  if (!qword_100409FC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.PublishType,  &type metadata for NANPublish.PublishType);
    atomic_store(result, (unint64_t *)&qword_100409FC0);
  }

  return result;
}

unint64_t sub_1001821B0()
{
  unint64_t result = qword_100409FC8;
  if (!qword_100409FC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.SolicitedTransmissionType,  &type metadata for NANPublish.SolicitedTransmissionType);
    atomic_store(result, (unint64_t *)&qword_100409FC8);
  }

  return result;
}

unint64_t sub_1001821F8()
{
  unint64_t result = qword_100409FD0;
  if (!qword_100409FD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.EventCondition,  &type metadata for NANPublish.EventCondition);
    atomic_store(result, (unint64_t *)&qword_100409FD0);
  }

  return result;
}

unint64_t sub_100182240()
{
  unint64_t result = qword_100409FD8;
  if (!qword_100409FD8)
  {
    uint64_t v1 = sub_1000022F8(&qword_100409FE0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100409FD8);
  }

  return result;
}

unint64_t sub_100182290()
{
  unint64_t result = qword_100409FE8;
  if (!qword_100409FE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.FurtherServiceDiscoveryFunction,  &type metadata for NANPublish.FurtherServiceDiscoveryFunction);
    atomic_store(result, (unint64_t *)&qword_100409FE8);
  }

  return result;
}

unint64_t sub_1001822D8()
{
  unint64_t result = qword_100409FF0;
  if (!qword_100409FF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.InternetSharingConfiguration,  &type metadata for NANPublish.InternetSharingConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409FF0);
  }

  return result;
}

unint64_t sub_100182320()
{
  unint64_t result = qword_100409FF8;
  if (!qword_100409FF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.DatapathConfiguration,  &type metadata for NANPublish.DatapathConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409FF8);
  }

  return result;
}

uint64_t sub_100182364(uint64_t a1)
{
  uint64_t result = sub_100182408(&qword_10040A000, (uint64_t)&protocol conformance descriptor for NANPublish.Configuration);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_100182398(uint64_t a1)
{
  *(void *)(a1 + 8)  = sub_100182408( &qword_10040A048,  (uint64_t)&protocol conformance descriptor for NANPublish.Configuration);
  uint64_t result = sub_100182408(&qword_10040A050, (uint64_t)&protocol conformance descriptor for NANPublish.Configuration);
  *(void *)(a1 + 16)  = result;
  return result;
}

uint64_t sub_1001823E4()
{
  return sub_100182408(&qword_10040A058, (uint64_t)&protocol conformance descriptor for NANPublish.Configuration);
}

uint64_t sub_100182408(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for NANPublish.Configuration(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPublish()
{
  return &type metadata for NANPublish;
}

uint64_t storeEnumTagSinglePayload for NANPublish.PublishType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001824A4 + 4 * byte_10034E14A[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001824D8 + 4 * byte_10034E145[v4]))();
}

uint64_t sub_1001824D8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001824E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001824E8LL);
  }
  return result;
}

uint64_t sub_1001824F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001824FCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100182500(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100182508(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.PublishType()
{
  return &type metadata for NANPublish.PublishType;
}

ValueMetadata *type metadata accessor for NANPublish.SolicitedTransmissionType()
{
  return &type metadata for NANPublish.SolicitedTransmissionType;
}

ValueMetadata *type metadata accessor for NANPublish.EventCondition()
{
  return &type metadata for NANPublish.EventCondition;
}

uint64_t _s7CoreP2P10NANPublishO25SolicitedTransmissionTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100182594 + 4 * byte_10034E154[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001825C8 + 4 * byte_10034E14F[v4]))();
}

uint64_t sub_1001825C8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001825D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001825D8LL);
  }
  return result;
}

uint64_t sub_1001825E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001825ECLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001825F0(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001825F8(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.FurtherServiceDiscoveryFunction()
{
  return &type metadata for NANPublish.FurtherServiceDiscoveryFunction;
}

uint64_t destroy for NANPublish.InternetSharingConfiguration(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return sub_100002AC4((void *)a1);
  }
  else {
    return swift_bridgeObjectRelease(*(void *)(a1 + 8));
  }
}

uint64_t initializeWithCopy for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    __int128 v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24)  = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }

  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1  = *(void *)a2;
    *(void *)(a1 + 8)  = v6;
    *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
    swift_bridgeObjectRetain(v6);
    char v5 = 0;
  }

  *(_BYTE *)(a1 + 40)  = v5;
  return a1;
}

uint64_t assignWithCopy for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      sub_100002AC4((void *)a1);
    }
    else {
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24)  = v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40)  = 1;
    }

    else
    {
      *(void *)a1  = *(void *)a2;
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)(a1 + 8)  = v7;
      *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 40)  = 0;
      swift_bridgeObjectRetain(v7);
    }
  }

  return a1;
}

uint64_t assignWithTake for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      sub_100002AC4((void *)a1);
    }
    else {
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16)  = v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      char v7 = 1;
    }

    else
    {
      char v7 = 0;
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
    }

    *(_BYTE *)(a1 + 40)  = v7;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.InternetSharingConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANPublish.InternetSharingConfiguration( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25)  = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16)  = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40)  = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1001828B0(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t sub_1001828CC(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32)  = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16)  = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2)  = 2;
  }

  *(_BYTE *)(result + 40)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.InternetSharingConfiguration()
{
  return &type metadata for NANPublish.InternetSharingConfiguration;
}

uint64_t destroy for NANPublish.DatapathConfiguration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t _s7CoreP2P10NANPublishO21DatapathConfigurationVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for NANPublish.DatapathConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for NANPublish.DatapathConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.DatapathConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPublish.DatapathConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0LL;
    *(void *)(result + 16)  = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPublish.DatapathConfiguration()
{
  return &type metadata for NANPublish.DatapathConfiguration;
}

void *initializeBufferWithCopyOfBuffer for NANPublish.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v26);
  }

  else
  {
    *(_BYTE *)a1  = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8)  = a2[1];
    *(void *)(a1 + 16)  = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 24)  = v8;
    *(_BYTE *)(a1 + 32)  = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 40)  = *((_BYTE *)a2 + 40);
    uint64_t v9 = a2[6];
    *(void *)(a1 + 48)  = v9;
    *(_BYTE *)(a1 + 56)  = *((_BYTE *)a2 + 56);
    uint64_t v10 = a2[8];
    *(_BYTE *)(a1 + 72)  = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a1 + 73)  = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 74)  = *((_BYTE *)a2 + 74);
    *(_BYTE *)(a1 + 75)  = *((_BYTE *)a2 + 75);
    *(_WORD *)(a1 + 76)  = *((_WORD *)a2 + 38);
    *(_DWORD *)(a1 + 78)  = *(_DWORD *)((char *)a2 + 78);
    *(_WORD *)(a1 + 82)  = *((_WORD *)a2 + 41);
    *(_DWORD *)(a1 + 84)  = *((_DWORD *)a2 + 21);
    *(_WORD *)(a1 + 88)  = *((_WORD *)a2 + 44);
    uint64_t v11 = a3[18];
    uint64_t v41 = a1 + v11;
    uint64_t v12 = (uint64_t)a2 + v11;
    *(void *)(a1 + 64)  = v10;
    uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14(v41, v12, v13);
    uint64_t v15 = a3[20];
    *((_BYTE *)v4 + a3[19])  = *((_BYTE *)a2 + a3[19]);
    *((_BYTE *)v4 + v15)  = *((_BYTE *)a2 + v15);
    uint64_t v16 = a3[21];
    uint64_t v17 = a3[22];
    uint64_t v18 = (char *)v4 + v16;
    unint64_t v19 = (char *)a2 + v16;
    *uint64_t v18 = *v19;
    *(_WORD *)(v18 + 1)  = *(_WORD *)(v19 + 1);
    uint64_t v20 = *((void *)v19 + 1);
    uint64_t v21 = *((void *)v19 + 2);
    *((void *)v18 + 1)  = v20;
    *((void *)v18 + 2)  = v21;
    char v22 = (char *)v4 + v17;
    uint64_t v23 = (uint64_t)a2 + v17;
    int v24 = *((unsigned __int8 *)a2 + v17 + 40);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    if (v24 == 255)
    {
      __int128 v25 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)char v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1)  = v25;
      *(_OWORD *)(v22 + 25)  = *(_OWORD *)(v23 + 25);
    }

    else if ((v24 & 1) != 0)
    {
      __int128 v28 = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 24)  = v28;
      (**(void (***)(char *, uint64_t))(v28 - 8))(v22, v23);
      v22[40]  = 1;
    }

    else
    {
      uint64_t v27 = *(void *)(v23 + 8);
      *(void *)char v22 = *(void *)v23;
      *((void *)v22 + 1)  = v27;
      v22[16]  = *(_BYTE *)(v23 + 16);
      v22[40]  = 0;
      swift_bridgeObjectRetain(v27);
    }

    uint64_t v29 = a3[23];
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (uint64_t)a2 + v29;
    uint64_t v32 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
    uint64_t v33 = a3[25];
    *((_BYTE *)v4 + a3[24])  = *((_BYTE *)a2 + a3[24]);
    int v34 = (char *)v4 + v33;
    uint64_t v35 = (uint64_t)a2 + v33;
    *(_WORD *)int v34 = *(_WORD *)v35;
    v34[2]  = *(_BYTE *)(v35 + 2);
    uint64_t v36 = a3[26];
    uint64_t v37 = a3[27];
    unint64_t v38 = (_DWORD *)((char *)v4 + v36);
    char v39 = (_DWORD *)((char *)a2 + v36);
    *unint64_t v38 = *v39;
    *(_DWORD *)((char *)v38 + 3)  = *(_DWORD *)((char *)v39 + 3);
    *((_BYTE *)v4 + v37)  = *((_BYTE *)a2 + v37);
  }

  return v4;
}

uint64_t destroy for NANPublish.Configuration(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[18];
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (char *)a1 + a2[21];
  swift_bridgeObjectRelease(*((void *)v6 + 1));
  swift_bridgeObjectRelease(*((void *)v6 + 2));
  uint64_t v7 = (char *)a1 + a2[22];
  int v8 = v7[40];
  if (v8 != 255)
  {
    if ((v8 & 1) != 0) {
      sub_100002AC4(v7);
    }
    else {
      swift_bridgeObjectRelease(*((void *)v7 + 1));
    }
  }

  uint64_t v9 = (char *)a1 + a2[23];
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
}

uint64_t initializeWithCopy for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v7;
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 48)  = v8;
  *(_BYTE *)(a1 + 56)  = *(_BYTE *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73)  = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74)  = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75)  = *(_BYTE *)(a2 + 75);
  *(_WORD *)(a1 + 76)  = *(_WORD *)(a2 + 76);
  *(_DWORD *)(a1 + 78)  = *(_DWORD *)(a2 + 78);
  *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88)  = *(_WORD *)(a2 + 88);
  uint64_t v10 = a3[18];
  uint64_t v39 = a1 + v10;
  uint64_t v11 = a2 + v10;
  *(void *)(a1 + 64)  = v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v39, v11, v12);
  uint64_t v14 = a3[20];
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v14)  = *(_BYTE *)(a2 + v14);
  uint64_t v15 = a3[21];
  uint64_t v16 = a3[22];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_BYTE *)uint64_t v17 = *(_BYTE *)v18;
  *(_WORD *)(v17 + 1)  = *(_WORD *)(v18 + 1);
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t v20 = *(void *)(v18 + 16);
  *(void *)(v17 + 8)  = v19;
  *(void *)(v17 + 16)  = v20;
  uint64_t v21 = a1 + v16;
  uint64_t v22 = a2 + v16;
  int v23 = *(unsigned __int8 *)(a2 + v16 + 40);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  if (v23 == 255)
  {
    __int128 v24 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16)  = v24;
    *(_OWORD *)(v21 + 25)  = *(_OWORD *)(v22 + 25);
  }

  else if ((v23 & 1) != 0)
  {
    __int128 v26 = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 24)  = v26;
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(v21, v22);
    *(_BYTE *)(v21 + 40)  = 1;
  }

  else
  {
    uint64_t v25 = *(void *)(v22 + 8);
    *(void *)uint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8)  = v25;
    *(_BYTE *)(v21 + 16)  = *(_BYTE *)(v22 + 16);
    *(_BYTE *)(v21 + 40)  = 0;
    swift_bridgeObjectRetain(v25);
  }

  uint64_t v27 = a3[23];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
  uint64_t v31 = a3[25];
  *(_BYTE *)(a1 + a3[24])  = *(_BYTE *)(a2 + a3[24]);
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(_WORD *)uint64_t v32 = *(_WORD *)v33;
  *(_BYTE *)(v32 + 2)  = *(_BYTE *)(v33 + 2);
  uint64_t v34 = a3[26];
  uint64_t v35 = a3[27];
  uint64_t v36 = (_DWORD *)(a1 + v34);
  uint64_t v37 = (_DWORD *)(a2 + v34);
  *uint64_t v36 = *v37;
  *(_DWORD *)((char *)v36 + 3)  = *(_DWORD *)((char *)v37 + 3);
  *(_BYTE *)(a1 + v35)  = *(_BYTE *)(a2 + v35);
  return a1;
}

uint64_t assignWithCopy for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48)  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56)  = *(_BYTE *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64)  = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73)  = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74)  = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75)  = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76)  = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77)  = *(_BYTE *)(a2 + 77);
  *(_BYTE *)(a1 + 78)  = *(_BYTE *)(a2 + 78);
  *(_BYTE *)(a1 + 79)  = *(_BYTE *)(a2 + 79);
  *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81)  = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82)  = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83)  = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84)  = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85)  = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86)  = *(_BYTE *)(a2 + 86);
  *(_BYTE *)(a1 + 87)  = *(_BYTE *)(a2 + 87);
  *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89)  = *(_BYTE *)(a2 + 89);
  uint64_t v14 = a3[18];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + a3[20])  = *(_BYTE *)(a2 + a3[20]);
  uint64_t v18 = a3[21];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_BYTE *)uint64_t v19 = *(_BYTE *)(a2 + v18);
  *(_BYTE *)(v19 + 1)  = *(_BYTE *)(a2 + v18 + 1);
  *(_BYTE *)(v19 + 2)  = *(_BYTE *)(a2 + v18 + 2);
  uint64_t v21 = *(void *)(a2 + v18 + 8);
  uint64_t v22 = *(void *)(a1 + v18 + 8);
  *(void *)(v19 + 8)  = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = *(void *)(v20 + 16);
  uint64_t v24 = *(void *)(v19 + 16);
  *(void *)(v19 + 16)  = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[22];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (__int128 *)(a2 + v25);
  int v28 = *(unsigned __int8 *)(a1 + v25 + 40);
  int v29 = *(unsigned __int8 *)(a2 + v25 + 40);
  if (v28 == 255)
  {
    if (v29 == 255)
    {
      __int128 v32 = *v27;
      __int128 v33 = v27[1];
      *(_OWORD *)(v26 + 25)  = *(__int128 *)((char *)v27 + 25);
      *(_OWORD *)uint64_t v26 = v32;
      *(_OWORD *)(v26 + 16)  = v33;
      goto LABEL_11;
    }

    if ((v29 & 1) != 0)
    {
LABEL_8:
      uint64_t v34 = *((void *)v27 + 3);
      *(void *)(v26 + 24)  = v34;
      *(void *)(v26 + 32)  = *((void *)v27 + 4);
      (**(void (***)(uint64_t, __int128 *))(v34 - 8))(v26, v27);
      *(_BYTE *)(v26 + 40)  = 1;
      goto LABEL_11;
    }

uint64_t initializeWithTake for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73)  = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74)  = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75)  = *(_BYTE *)(a2 + 75);
  *(_WORD *)(a1 + 76)  = *(_WORD *)(a2 + 76);
  *(_DWORD *)(a1 + 78)  = *(_DWORD *)(a2 + 78);
  *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88)  = *(_WORD *)(a2 + 88);
  uint64_t v7 = a3[18];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 56)  = v6;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[20];
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v11)  = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[21];
  uint64_t v13 = a3[22];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = (__int128 *)(a2 + v12);
  __int128 v16 = *v15;
  *(void *)(v14 + 16)  = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v14 = v16;
  uint64_t v17 = (_OWORD *)(a1 + v13);
  uint64_t v18 = (_OWORD *)(a2 + v13);
  __int128 v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1]  = v19;
  *(_OWORD *)((char *)v17 + 25)  = *(_OWORD *)((char *)v18 + 25);
  uint64_t v20 = a3[23];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
  uint64_t v24 = a3[25];
  *(_BYTE *)(a1 + a3[24])  = *(_BYTE *)(a2 + a3[24]);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_WORD *)uint64_t v25 = *(_WORD *)v26;
  *(_BYTE *)(v25 + 2)  = *(_BYTE *)(v26 + 2);
  uint64_t v27 = a3[26];
  uint64_t v28 = a3[27];
  int v29 = (_DWORD *)(a1 + v27);
  __int128 v30 = (_DWORD *)(a2 + v27);
  *int v29 = *v30;
  *(_DWORD *)((char *)v29 + 3)  = *(_DWORD *)((char *)v30 + 3);
  *(_BYTE *)(a1 + v28)  = *(_BYTE *)(a2 + v28);
  return a1;
}

uint64_t assignWithTake for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56)  = *(_BYTE *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72)  = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73)  = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74)  = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75)  = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76)  = *(_BYTE *)(a2 + 76);
  *(void *)(a1 + 77)  = *(void *)(a2 + 77);
  *(_DWORD *)(a1 + 85)  = *(_DWORD *)(a2 + 85);
  *(_BYTE *)(a1 + 89)  = *(_BYTE *)(a2 + 89);
  uint64_t v11 = a3[18];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = a3[20];
  *(_BYTE *)(a1 + a3[19])  = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v15)  = *(_BYTE *)(a2 + v15);
  uint64_t v16 = a3[21];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(_BYTE *)uint64_t v17 = *(_BYTE *)(a2 + v16);
  *(_WORD *)(v17 + 1)  = *(_WORD *)(a2 + v16 + 1);
  uint64_t v19 = *(void *)(a1 + v16 + 8);
  *(void *)(v17 + 8)  = *(void *)(a2 + v16 + 8);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(v17 + 16);
  *(void *)(v17 + 16)  = *(void *)(v18 + 16);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[22];
  uint64_t v22 = (_OWORD *)(a1 + v21);
  uint64_t v23 = a2 + v21;
  if (*(unsigned __int8 *)(v23 + 40) == 255 || a1 != a2)
  {
    sub_10017B2A8((uint64_t)v22);
LABEL_5:
    __int128 v24 = *(_OWORD *)(v23 + 16);
    *uint64_t v22 = *(_OWORD *)v23;
    v22[1]  = v24;
    *(_OWORD *)((char *)v22 + 25)  = *(_OWORD *)(v23 + 25);
  }

  uint64_t v25 = a3[23];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 40LL))(v26, v27, v28);
  uint64_t v29 = a3[25];
  *(_BYTE *)(a1 + a3[24])  = *(_BYTE *)(a2 + a3[24]);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_WORD *)uint64_t v30 = *(_WORD *)v31;
  *(_BYTE *)(v30 + 2)  = *(_BYTE *)(v31 + 2);
  uint64_t v32 = a3[26];
  uint64_t v33 = a3[27];
  uint64_t v34 = (_DWORD *)(a1 + v32);
  uint64_t v35 = (_DWORD *)(a2 + v32);
  *uint64_t v34 = *v35;
  *(_DWORD *)((char *)v34 + 3)  = *(_DWORD *)((char *)v35 + 3);
  *(_BYTE *)(a1 + v33)  = *(_BYTE *)(a2 + v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100183748);
}

uint64_t sub_100183748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 72);
    }

    else
    {
      uint64_t v10 = type metadata accessor for OWEKeys(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 92);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for NANPublish.Configuration( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001837F4);
}

uint64_t sub_1001837F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16)  = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 72);
    }

    else
    {
      uint64_t v10 = type metadata accessor for OWEKeys(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 92);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t sub_100183890(uint64_t a1)
{
  v5[0]  = (char *)&value witness table for Builtin.Int8 + 64;
  v5[1]  = &unk_10034E848;
  v5[2]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  _OWORD v5[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v5[4]  = &unk_10034E848;
  void v5[5] = &unk_10034E848;
  v5[6]  = &unk_10034E860;
  v5[7]  = &unk_10034E878;
  v5[8]  = &unk_10034E878;
  void v5[9] = &unk_10034E878;
  v5[10]  = &unk_10034E878;
  v5[11]  = &unk_10034E860;
  v5[12]  = &unk_10034E890;
  v5[13]  = &unk_10034E890;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v5[14]  = *(void *)(result - 8) + 64LL;
    v5[15]  = &unk_10034E8A8;
    v5[16]  = &unk_10034E878;
    v5[17]  = &unk_10034E8C0;
    v5[18]  = &unk_10034E8D8;
    uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey(319LL);
    if (v4 <= 0x3F)
    {
      v5[19]  = *(void *)(result - 8) + 64LL;
      v5[20]  = (char *)&value witness table for Builtin.Int8 + 64;
      v5[21]  = &unk_10034E8F0;
      v5[22]  = &unk_10034E908;
      v5[23]  = (char *)&value witness table for Builtin.Int8 + 64;
      swift_initStructMetadata(a1, 256LL, 24LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1001839AC()
{
  unint64_t result = qword_10040A150;
  if (!qword_10040A150)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.FurtherServiceDiscoveryFunction,  &type metadata for NANPublish.FurtherServiceDiscoveryFunction);
    atomic_store(result, (unint64_t *)&qword_10040A150);
  }

  return result;
}

unint64_t sub_1001839F0()
{
  unint64_t result = qword_10040A158;
  if (!qword_10040A158)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.EventCondition,  &type metadata for NANPublish.EventCondition);
    atomic_store(result, (unint64_t *)&qword_10040A158);
  }

  return result;
}

unint64_t sub_100183A34()
{
  unint64_t result = qword_10040A160;
  if (!qword_10040A160)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.SolicitedTransmissionType,  &type metadata for NANPublish.SolicitedTransmissionType);
    atomic_store(result, (unint64_t *)&qword_10040A160);
  }

  return result;
}

unint64_t sub_100183A78()
{
  unint64_t result = qword_10040A168;
  if (!qword_10040A168)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPublish.PublishType,  &type metadata for NANPublish.PublishType);
    atomic_store(result, (unint64_t *)&qword_10040A168);
  }

  return result;
}

uint64_t sub_100183ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100409E58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100183B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100183B48(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (i  = 9LL; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1LL)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }

  __break(1u);
  return result;
}

uint64_t static Channel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1001887C8(a1 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL);
}

CoreP2P::Channel::Band_optional __swiftcall Channel.Band.init(rawValue:)(Swift::UInt8 rawValue)
{
  if (rawValue == 128) {
    char v1 = 2;
  }
  else {
    char v1 = 3;
  }
  if (rawValue == 16) {
    v2.value  = CoreP2P_Channel_Band_fiveGHz;
  }
  else {
    v2.value  = v1;
  }
  if (rawValue == 4) {
    return 0;
  }
  else {
    return v2;
  }
}

unint64_t NANBitmap.Channel.channel.getter(unint64_t a1)
{
  if (qword_1004043B8 != -1) {
    goto LABEL_89;
  }
LABEL_2:
  uint64_t v2 = *((void *)off_10040A1B0 + 2);
  if (!v2) {
    return 0x300000000LL;
  }
  if (*((unsigned __int8 *)off_10040A1B0 + 32) == a1)
  {
    unint64_t v3 = (char *)off_10040A1B0 + 40;
    uint64_t v4 = (char *)off_10040A1B0 + 34;
    BOOL v5 = (char *)off_10040A1B0 + 33;
    goto LABEL_12;
  }

  if (v2 == 1) {
    return 0x300000000LL;
  }
  unint64_t v3 = (char *)off_10040A1B0 + 56;
  for (i  = 1LL; ; ++i)
  {
    uint64_t v7 = i + 1;
    if (__OFADD__(i, 1LL))
    {
      __break(1u);
LABEL_89:
      swift_once(&qword_1004043B8, sub_100187378);
      goto LABEL_2;
    }

    v3 += 16;
    if (v7 == v2) {
      return 0x300000000LL;
    }
  }

  BOOL v5 = v3 - 7;
  uint64_t v4 = v3 - 6;
LABEL_12:
  unint64_t v8 = HIDWORD(a1);
  uint64_t v9 = *(void *)v3;
  unsigned int v10 = *v4;
  unsigned __int8 v11 = *v5;
  swift_bridgeObjectRetain(*(void *)v3);
  if (a1 >= 0x83u)
  {
    if ((BYTE4(a1) & (BYTE4(a1) - 1)) == 0 && (a1 & 0xFF000000) == 0x1000000)
    {
      unint64_t v8 = __clz(__rbit32(HIDWORD(a1) | 0x100));
      else {
        uint64_t v14 = v10;
      }
      if (qword_1004043C0 != -1) {
        goto LABEL_92;
      }
      goto LABEL_29;
    }

    goto LABEL_86;
  }

  unint64_t v13 = __clz(__rbit32((a1 >> 16) | 0x10000));
  if (*(void *)(v9 + 16) <= v13) {
    goto LABEL_86;
  }
  LODWORD(a1)  = *(_DWORD *)(v9 + 4 * v13 + 32);
  if (qword_1004043C0 != -1) {
    swift_once(&qword_1004043C0, sub_100187C0C);
  }
  uint64_t v14 = *((void *)off_10040A1B8 + 2);
  if (!v14)
  {
LABEL_52:
    unsigned int v37 = a1;
LABEL_53:
    sub_100185C58();
    swift_bridgeObjectRelease(v9);
    return v37 | ((unint64_t)v11 << 32) | ((unint64_t)v10 << 40);
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = (char *)off_10040A1B8 + 32;
  while (1)
  {
    uint64_t v26 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (((0x801004u >> (8 * v11)) & 0xFFC) == (0x801004u >> (8 * *v16)))
    {
      switch(v16[1])
      {
        case 2:
          if (v10 == 2) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 3:
          if (v10 == 3) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 4:
          if (v10 == 4) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 5:
          if (v10 == 5) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 6:
          if (v10 != 6) {
            goto LABEL_55;
          }
          goto LABEL_69;
        default:
LABEL_69:
          uint64_t v27 = *((void *)v16 + 1);
          uint64_t v28 = *(void *)(v27 + 16);
          if (!v28) {
            goto LABEL_86;
          }
          if (*(_DWORD *)(v27 + 32) == (_DWORD)a1)
          {
            uint64_t v29 = (void *)(v27 + 40);
LABEL_72:
            uint64_t v30 = *v29;
            unint64_t v31 = __clz(__rbit32(v8 | 0x100));
            if (*(void *)(v30 + 16) > v31)
            {
              uint64_t v24 = v30 + 4 * v31;
              goto LABEL_74;
            }

            goto LABEL_86;
          }

          if (v28 == 1) {
            goto LABEL_86;
          }
          uint64_t v29 = (void *)(v27 + 56);
          uint64_t v34 = 1LL;
          while (1)
          {
            uint64_t v35 = v34 + 1;
            if (__OFADD__(v34, 1LL)) {
              break;
            }
            if (*((_DWORD *)v29 - 2) == (_DWORD)a1) {
              goto LABEL_72;
            }
            v29 += 2;
            ++v34;
            if (v35 == v28) {
              goto LABEL_86;
            }
          }

          break;
      }

LABEL_55:
    v16 += 16;
    ++v15;
    if (v26 == v14) {
      goto LABEL_52;
    }
  }

  while (1)
  {
    __break(1u);
LABEL_92:
    uint64_t v36 = v14;
    swift_once(&qword_1004043C0, sub_100187C0C);
    uint64_t v14 = v36;
LABEL_29:
    a1  = BYTE2(a1);
    uint64_t v17 = *((void *)off_10040A1B8 + 2);
    if (!v17)
    {
LABEL_51:
      if ((sub_100183B48(a1, v9) & 1) == 0) {
        goto LABEL_86;
      }
      goto LABEL_52;
    }

    uint64_t v18 = 0LL;
    uint64_t v19 = (char *)off_10040A1B8 + 32;
LABEL_33:
    uint64_t v20 = v18 + 1;
    if (!__OFADD__(v18, 1LL)) {
      break;
    }
    __break(1u);
  }

  if (((0x801004u >> (8 * v11)) & 0xFFC) != (0x801004u >> (8 * *v19)))
  {
LABEL_32:
    v19 += 16;
    ++v18;
    if (v20 == v17) {
      goto LABEL_51;
    }
    goto LABEL_33;
  }

  switch(v19[1])
  {
    case 2:
      if ((_DWORD)v14 == 2) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 3:
      if ((_DWORD)v14 == 3) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 4:
      if ((_DWORD)v14 == 4) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 5:
      if ((_DWORD)v14 == 5) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 6:
      if ((_DWORD)v14 != 6) {
        goto LABEL_32;
      }
      goto LABEL_46;
    default:
LABEL_46:
      uint64_t v21 = *((void *)v19 + 1);
      uint64_t v22 = *(void *)(v21 + 16);
      if (!v22) {
        goto LABEL_86;
      }
      if (*(_DWORD *)(v21 + 32) != (_DWORD)a1)
      {
        if (v22 == 1) {
          goto LABEL_86;
        }
        uint64_t v23 = v21 + 56;
        uint64_t v32 = 1LL;
        while (1)
        {
          uint64_t v33 = v32 + 1;
          if (__OFADD__(v32, 1LL)) {
            break;
          }
          if (*(_DWORD *)(v23 - 8) == (_DWORD)a1) {
            goto LABEL_49;
          }
          v23 += 16LL;
          ++v32;
          if (v33 == v22) {
            goto LABEL_86;
          }
        }

        __break(1u);
        goto LABEL_94;
      }

      uint64_t v23 = v21 + 40;
LABEL_49:
      if (*(void *)(*(void *)v23 + 16LL) > v8)
      {
        uint64_t v24 = *(void *)v23 + 4 * v8;
LABEL_74:
        unsigned int v37 = *(_DWORD *)(v24 + 32);
        goto LABEL_53;
      }

            v128  = *(int *)(v150 + 28);
            v129  = (uint64_t)v151;
            unsigned int v10 = v167;
            v130  = (uint64_t)&v167[v128];
            if (static DNSRecords.SRV.__derived_struct_equals(_:_:)( (void *)((char *)v151 + v128),  (uint64_t *)&v167[v128]))
            {
              sub_10005802C(v129, type metadata accessor for AWDLPeer.AdvertisedService);
              sub_10005802C((uint64_t)v10, type metadata accessor for AWDLPeer.AdvertisedService);
            }

            else
            {
              v132  = *((void *)v10 + 1);
              v131  = *((void *)v10 + 2);
              v134  = *((void *)v10 + 3);
              v133  = *((void *)v10 + 4);
              v135  = v10[40];
              v136  = (uint64_t)v10;
              v137  = v10[41];
              v138  = v146;
              swift_beginAccess(v146, &v175, 32LL, 0LL);
              v139  = *v138;
              v180  = v132;
              v181  = v131;
              v182  = v134;
              v183  = v133;
              v184  = v135;
              v185  = v137;
              v141  = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator(0LL, v160, v161, v140);
              sub_100004E30();
              swift_bridgeObjectRetain(v131);
              swift_bridgeObjectRetain(v133);
              Dictionary.subscript.getter(&v180, v139, &type metadata for DNSRecords.PTR, v141);
              swift_bridgeObjectRelease(v133);
              swift_bridgeObjectRelease(v131);
              v142  = v179;
              if (v179)
              {
                swift_endAccess(&v175);
                sub_1002ABC24(v130);
                swift_release(v142);
              }

              else
              {
                swift_endAccess(&v175);
              }

              sub_10005802C((uint64_t)v151, type metadata accessor for AWDLPeer.AdvertisedService);
              sub_10005802C(v136, type metadata accessor for AWDLPeer.AdvertisedService);
              uint64_t v38 = (uint64_t)v147;
              unsigned int v10 = (char *)v136;
            }

            unsigned int v37 = v163;
            uint64_t v36 = v162;
            goto LABEL_11;
          }
        }

        unint64_t v57 = (v57 + 1) & v168;
        a2  = v166;
        unsigned int v10 = v167;
      }

      while (((*(void *)(v170 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v57) & 1) != 0);
    }

    swift_bridgeObjectRelease(a2);
    uint64_t v40 = *((void *)v10 + 3);
    uint64_t v39 = *((void *)v10 + 4);
    uint64_t v41 = v10[40];
    uint64_t v42 = v10[41];
    char v43 = v156;
    swift_beginAccess(v156, &v180, 32LL, 0LL);
    uint64_t v44 = *v43;
    v175  = v40;
    v176  = v39;
    v177  = v41;
    v178  = v42;
    unint64_t v46 = type metadata accessor for AWDLDiscoveryEngine.Browse(0LL, v160, v161, v45);
    sub_100004DEC();
    swift_bridgeObjectRetain(v39);
    Dictionary.subscript.getter(&v175, v44, &type metadata for DNSRecords.Identifier, v46);
    swift_bridgeObjectRelease(v39);
    int v47 = v179;
    if (v179)
    {
      swift_endAccess(&v180);
      sub_1002ABF50( v10,  *(unsigned __int16 *)(v153 + v152[5]) | ((unint64_t)*(unsigned int *)(v153 + v152[5] + 2) << 16));
      swift_release(v47);
    }

    else
    {
      swift_endAccess(&v180);
    }

    sub_10005802C((uint64_t)v10, type metadata accessor for AWDLPeer.AdvertisedService);
    unsigned int v37 = v163;
    uint64_t v36 = v162;
  }

  uint64_t v52 = v37 + 4;
  if (v37 + 4 >= v155)
  {
LABEL_60:
    swift_release(v159);
    __chkstk_darwin();
    v143  = v153;
    *(&v144 - 2)  = v145;
    *(&v144 - 1)  = v143;
    swift_bridgeObjectRetain(a2);
    sub_1002FF724((void (*)(char *))sub_1002B2D78, (uint64_t)(&v144 - 4), a2);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a2);
    return;
  }

  int v50 = *(void *)(v154 + 8 * v52);
  if (v50)
  {
    uint64_t v51 = v37 + 4;
    goto LABEL_31;
  }

  while (1)
  {
    uint64_t v51 = v52 + 1;
    if (__OFADD__(v52, 1LL)) {
      break;
    }
    if (v51 >= v155) {
      goto LABEL_60;
    }
    int v50 = *(void *)(v154 + 8 * v51);
    ++v52;
    if (v50) {
      goto LABEL_31;
    }
  }

LABEL_86:
      swift_bridgeObjectRelease(v9);
      return 0x300000000LL;
  }

      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
      __break(1u);
      JUMPOUT(0x100189290LL);
    }
  }

  uint64_t v14 = v13[1];
  uint64_t v15 = *((void *)v13 + 1);
  switch(BYTE5(a1))
  {
    case 2:
      if (v14 == 2) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 3:
      if (v14 == 3) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 4:
      if (v14 == 4) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 5:
      if (v14 == 5) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 6:
      if (v14 == 6) {
        goto LABEL_41;
      }
      goto LABEL_26;
    default:
LABEL_41:
      uint64_t v16 = *(void *)(v15 + 16);
      if (!v16) {
        goto LABEL_26;
      }
      uint64_t v17 = 0LL;
      uint64_t v18 = v15 + 32;
      break;
  }

  while (1)
  {
    uint64_t v19 = v18 + 16 * v17;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      LODWORD(v22)  = *(_DWORD *)v19;
      if (*(_DWORD *)(v20 + 32) == (_DWORD)a1)
      {
        uint64_t v23 = 0;
      }

      else
      {
        if (v21 == 1) {
          goto LABEL_43;
        }
        if (*(_DWORD *)(v20 + 36) == (_DWORD)a1)
        {
          uint64_t v23 = 1;
        }

        else
        {
          uint64_t v28 = 0LL;
          uint64_t v29 = v21 - 2;
          uint64_t v30 = v20 + 40;
          do
          {
            if (v29 == v28) {
              goto LABEL_43;
            }
            unint64_t v31 = *(_DWORD *)(v30 + 4 * v28++);
          }

          while (v31 != (_DWORD)a1);
          if (v28 > 6) {
            goto LABEL_43;
          }
          uint64_t v23 = v28 + 1;
        }
      }

      uint64_t v24 = *(void *)(v9 + 16);
      if (v24)
      {
        if (*(_DWORD *)(v9 + 32) == (_DWORD)v22)
        {
          swift_bridgeObjectRelease(v9);
          if (v8 < 0x83)
          {
            unsigned int v37 = 0;
            goto LABEL_79;
          }

          goto LABEL_80;
        }

        if (v24 != 1) {
          break;
        }
      }
    }

            sub_100226544();
          }

          return sub_10005802C(v30, type metadata accessor for DriverEvent);
        default:
          sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          goto LABEL_29;
      }

              sub_10027D13C((void *)1, 0LL, 4);
              return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
            }

unint64_t NANBitmap.Channel.init(channel:)(uint64_t a1)
{
  return sub_100188DE4(a1 & 0xFFFFFFFFFFFFLL);
}

BOOL Channel.is2_4GHz.getter(uint64_t a1)
{
  return (a1 & 0x700000000LL) == 0;
}

uint64_t Channel.init<A>(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) + 16LL);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  v6,  a2,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  unsigned int v10 = (char *)&v40 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  char v43 = (char *)&v40 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v44 = v21;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v42((char *)&v40 - v19, (uint64_t)a1, a2);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3) & 1) != 0)
  {
    AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness( v6,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v10, a2, v6);
    char v23 = dispatch thunk of static Comparable.>= infix(_:_:)(v20, v18, a2, *(void *)(*(void *)(a3 + 32) + 8LL));
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, a2);
    if ((v23 & 1) == 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      goto LABEL_17;
    }
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3) < 32) {
    goto LABEL_15;
  }
  uint64_t v40 = v13;
  uint64_t v41 = a1;
  v42(v43, (uint64_t)v20, a2);
  int v45 = -1;
  char v24 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
  uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  if ((v24 & 1) == 0)
  {
    if (v25 >= 33) {
      goto LABEL_10;
    }
    uint64_t v36 = v43;
    dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    a1  = v41;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v36, a2);
LABEL_15:
    unsigned int v37 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v44 + 8);
    v38(v20, a2);
    unint64_t v39 = sub_1001889D8(v37);
    v38(a1, a2);
    return v39 & 0xFFFFFFFFFFFFLL;
  }

  if (v25 <= 32)
  {
    uint64_t v26 = swift_getAssociatedConformanceWitness( v6,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  AssociatedTypeWitness,  v26);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v10, a2, v6);
    uint64_t v27 = v43;
    char v28 = dispatch thunk of static Comparable.> infix(_:_:)(v43, v18, a2, *(void *)(*(void *)(a3 + 32) + 8LL));
    uint64_t v29 = *(void (**)(char *, uint64_t))(v44 + 8);
    v29(v18, a2);
    unsigned int v30 = v45;
    unint64_t v31 = v40;
    v42(v40, (uint64_t)v27, a2);
    a1  = v41;
    if ((v28 & 1) != 0)
    {
      unsigned int v32 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
      v29(v31, a2);
      if (v30 < v32) {
        goto LABEL_11;
      }
    }

    else
    {
      v29(v31, a2);
    }

    goto LABEL_14;
  }

int *Channel.nanPrimary.unsafeMutableAddressor()
{
  if (qword_1004043A0 != -1) {
    swift_once(&qword_1004043A0, sub_100186540);
  }
  return &static Channel.nanPrimary;
}

unint64_t Optional<A>.init(integerLiteral:)(unsigned int a1)
{
  return sub_1001889D8(a1) & 0xFFFFFFFFFFFFLL;
}

int *Channel.awdlSocial2GHz.unsafeMutableAddressor()
{
  if (qword_100404388 != -1) {
    swift_once(&qword_100404388, sub_1001863C8);
  }
  return &static Channel.awdlSocial2GHz;
}

unint64_t Channel.init(_:band:bandwidth:)(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return a1 | ((unint64_t)a2 << 32) | ((unint64_t)a3 << 40);
}

BOOL Channel.isDFS.getter(unsigned int a1)
{
  if (qword_100404368 != -1) {
    swift_once(&qword_100404368, sub_100185C34);
  }
  return sub_10008F720(a1, qword_10040A190);
}

uint64_t Channel.init<A, B>(channel:operatingClass:)( char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a6 + 8);
  v127  = a2;
  v128  = v10;
  v122  = *(void *)(*(void *)(v10 + 24) + 16LL);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  v122,  a4,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness);
  v120  = (char *)&v118 - v12;
  v134  = *(void *)(a4 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  v132  = (char *)&v118 - v16;
  uint64_t v17 = *(void *)(a5 + 8);
  v131  = *(char **)(*(void *)(v17 + 24) + 16LL);
  uint64_t v18 = swift_getAssociatedTypeWitness( 0LL,  v131,  a3,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v19 = __chkstk_darwin(v18);
  v130  = (char *)&v118 - v20;
  v136  = *(void *)(a3 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  char v23 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21);
  v133  = (unint64_t)&v118 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  char v28 = (char *)&v118 - v27;
  __chkstk_darwin(v26);
  unsigned int v30 = (char *)&v118 - v29;
  unsigned int v32 = *(void (**)(unint64_t, char *, uint64_t))(v31 + 16);
  v124  = (uint64_t)a1;
  v129  = v32;
  v32((unint64_t)&v118 - v29, a1, a3);
  v135  = a3;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v17) & 1) != 0)
  {
    unint64_t v33 = v15;
    char v34 = v131;
    uint64_t v35 = v135;
    AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness( v131,  v135,  v18,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v37 = v18;
    uint64_t v38 = v17;
    unint64_t v39 = v28;
    uint64_t v40 = v130;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v37,  AssociatedConformanceWitness);
    uint64_t v41 = v40;
    char v28 = v39;
    uint64_t v17 = v38;
    uint64_t v18 = v37;
    uint64_t v42 = v34;
    uint64_t v15 = v33;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v41, v35, v42);
    LOBYTE(v37)  = dispatch thunk of static Comparable.>= infix(_:_:)( v30,  v28,  v35,  *(void *)(*(void *)(v17 + 32) + 8LL));
    (*(void (**)(char *, uint64_t))(v136 + 8))(v28, v35);
    if ((v37 & 1) == 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      goto LABEL_95;
    }
  }

  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter(v135, v17);
  uint64_t v44 = v128;
  v119  = v15;
  if (v43 < 32) {
    goto LABEL_16;
  }
  v126  = v23;
  uint64_t v45 = v135;
  v129(v133, v30, v135);
  v143[0]  = -1;
  char v46 = dispatch thunk of static BinaryInteger.isSigned.getter(v45, v17);
  uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter(v45, v17);
  if ((v46 & 1) != 0)
  {
    if (v47 <= 32)
    {
      int v48 = v131;
      uint64_t v49 = v135;
      uint64_t v50 = swift_getAssociatedConformanceWitness( v131,  v135,  v18,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v51 = v130;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v18,  v50);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v51, v49, v48);
      uint64_t v52 = (char *)v133;
      char v53 = dispatch thunk of static Comparable.> infix(_:_:)(v133, v28, v49, *(void *)(*(void *)(v17 + 32) + 8LL));
      char v54 = *(void (**)(char *, uint64_t))(v136 + 8);
      v54(v28, v49);
      unsigned int v55 = v143[0];
      uint64_t v56 = v126;
      v129((unint64_t)v126, v52, v49);
      if ((v53 & 1) != 0)
      {
        uint64_t v57 = v135;
        unsigned int v58 = dispatch thunk of BinaryInteger._lowWord.getter(v135, v17);
        v54(v56, v57);
        if (v55 < v58) {
          goto LABEL_11;
        }
      }

      else
      {
        v54(v56, v135);
      }

LABEL_88:
            swift_bridgeObjectRelease(v66);
            v114  = v123;
LABEL_85:
            v139  = v129;
            v140  = v133;
            v141  = v136;
            sub_100185C58();
            swift_bridgeObjectRelease(v71);
            uint64_t v115 = v139;
            uint64_t v116 = v140;
            v117  = v141;
            v81(v67, a4);
            v114(v124, v135);
            return v115 | (v116 << 32) | (v117 << 40);
          }
        }
      }

      goto LABEL_52;
    }

    if (qword_1004043C0 != -1) {
      swift_once(&qword_1004043C0, sub_100187C0C);
    }
    v125  = (char *)off_10040A1B8;
    uint64_t v96 = *((void *)off_10040A1B8 + 2);
    if (!v96) {
      goto LABEL_52;
    }
    v118  = v81;
    uint64_t v97 = v67;
    uint64_t v44 = 0x801004u >> (8 * v133);
    v98  = v125 + 32;
    swift_bridgeObjectRetain_n(v125, 2LL);
    int v99 = v136;
    uint64_t v100 = 0LL;
    while (1)
    {
      v65  = v100 + 1;
      if (__OFADD__(v100, 1LL)) {
        break;
      }
      if ((0x801004u >> (8 * v98[16 * v100])) == v44)
      {
        uint64_t v104 = &v98[16 * v100];
        int v105 = v104[1];
        uint64_t v106 = *((void *)v104 + 1);
        if (v105 == 6)
        {
          if (v99 != 6) {
            goto LABEL_56;
          }
        }

        else if (v105 == 5)
        {
          if (v99 != 5) {
            goto LABEL_56;
          }
        }

        else if (v105 != 4 || v99 != 4)
        {
          goto LABEL_56;
        }

        uint64_t v108 = *(void *)(v106 + 16);
        if (v108)
        {
          swift_bridgeObjectRetain_n(*((void *)v104 + 1), 2LL);
          uint64_t v109 = 0LL;
          while (1)
          {
            uint64_t v110 = *(void *)(v106 + 32 + 16 * v109 + 8);
            v111  = *(void *)(v110 + 16);
            if (v111)
            {
              if (*(_DWORD *)(v110 + 32) == (_DWORD)v129) {
                goto LABEL_84;
              }
              if (v111 != 1)
              {
                if (*(_DWORD *)(v110 + 36) == (_DWORD)v129)
                {
LABEL_84:
                  swift_bridgeObjectRelease(v106);
                  swift_bridgeObjectRelease(v126);
                  swift_bridgeObjectRelease_n(v125, 2LL);
                  swift_bridgeObjectRelease(v106);
                  uint64_t v67 = v127;
                  v114  = v123;
                  v81  = v118;
                  goto LABEL_85;
                }

                if (v111 != 2) {
                  break;
                }
              }
            }

LABEL_72:
            if (++v109 == v108)
            {
              swift_bridgeObjectRelease_n(v106, 2LL);
              uint64_t v97 = v127;
              int v99 = v136;
              goto LABEL_56;
            }
          }

          uint64_t v112 = 10LL;
          while (1)
          {
            uint64_t v113 = v112 - 7;
            if (__OFADD__(v112 - 8, 1LL)) {
              break;
            }
            if (*(_DWORD *)(v110 + 4 * v112) == (_DWORD)v129) {
              goto LABEL_84;
            }
            ++v112;
            if (v113 == v111) {
              goto LABEL_72;
            }
          }

          __break(1u);
          break;
        }
      }

  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v64, 2LL);
LABEL_73:
  *(_BYTE *)(v2 + 5)  = v3;
}

          v178  = 0;
        }

        else
        {
          v178  = v177 - 1;
        }

        v243  = *(void *)(v174 + 16);
        if (!v243)
        {
LABEL_92:
          swift_release(v5);
          swift_bridgeObjectRelease(v174);
          break;
        }

        v244  = (unint64_t *)(v174 + 48);
        v245  = *(void *)(v174 + 16);
        while (*((_WORD *)v244 - 8) != 1284)
        {
          v244 += 3;
          if (!--v245)
          {
            v267  = 0LL;
            v268  = (unint64_t *)(v174 + 48);
            while (1)
            {
              v269  = v267 + 1;
              if (__OFADD__(v267, 1LL))
              {
                __break(1u);
LABEL_108:
                __break(1u);
                JUMPOUT(0x1001F844CLL);
              }

              if (*((_WORD *)v268 - 8) == 779) {
                break;
              }
              v268 += 3;
              ++v267;
              if (v269 == v243) {
                goto LABEL_92;
              }
            }

            v270  = *(v268 - 1);
            v271  = *v268;
            sub_100020AFC(v270, *v268);
            sub_10020965C(v270, v271);
            v282  = v281;
            sub_1000208D8(v270, v271);
            v283  = 0LL;
            v284  = (unint64_t *)(v174 + 48);
            while (1)
            {
              v285  = v283 + 1;
              if (__OFADD__(v283, 1LL)) {
                goto LABEL_108;
              }
              if (*((_WORD *)v284 - 8) == 787) {
                break;
              }
              v284 += 3;
              ++v283;
              if (v285 == v243) {
                goto LABEL_92;
              }
            }

            v294  = *(v284 - 1);
            v295  = *v284;
            sub_100020AFC(v294, *v284);
            swift_bridgeObjectRelease(v174);
            sub_1001E73DC(787LL, v294, v295);
            v297  = v296;
            sub_1000208D8(v294, v295);
            if ((v297 & 0x1000000000000LL) == 0)
            {
              *(void *)(v1 + 32)  = v297 >> 8;
              *(void *)(v1 + 48)  = v297 >> 16;
              *(void *)(v1 + 64)  = v297 >> 24;
              *(void *)(v1 + 80)  = HIDWORD(v297);
              *(void *)(v1 + 96)  = v297 >> 40;
              v298  = sub_100002274(&qword_100405E00);
              v168  = type metadata accessor for DriverEvent(0LL);
              v299  = *(void *)(v168 - 8);
              v300  = *(void *)(v299 + 72);
              v301  = *(unsigned __int8 *)(v299 + 80);
              v302  = (v301 + 32) & ~v301;
              uint64_t v31 = swift_allocObject(v298, v302 + v300, v301 | 7);
              *(_OWORD *)(v31 + 16)  = xmmword_100339900;
              v303  = (void *)(v31 + v302);
              *(_WORD *)(v1 + 336)  = v282;
              *(_BYTE *)(v1 + 338)  = v297;
              *(_BYTE *)(v1 + 339)  = *(void *)(v1 + 32);
              *(_BYTE *)(v1 + 340)  = *(void *)(v1 + 48);
              *(_BYTE *)(v1 + 341)  = *(void *)(v1 + 64);
              *(_BYTE *)(v1 + 342)  = *(void *)(v1 + 80);
              *(_BYTE *)(v1 + 343)  = *(void *)(v1 + 96);
              *(_BYTE *)(v1 + 344)  = v178;
              sub_100058678(v1 + 336);
              sub_100058090((const void *)(v1 + 336), v303);
              v208  = v303;
LABEL_80:
              v251  = v168;
              goto LABEL_81;
            }

            goto LABEL_94;
          }
        }

        v265  = *(v244 - 1);
        v266  = *v244;
        sub_100020AFC(v265, *v244);
        sub_10020C898(v265, v266);
        v272  = v176;
        *(_DWORD *)(v1 + 96)  = v178;
        swift_bridgeObjectRelease(v174);
        sub_1000208D8(v265, v266);
        v273  = *(_BYTE *)(v1 + 336);
        v9.i32[0]  = *(_DWORD *)(v1 + 338);
        v274  = *(_BYTE *)(v1 + 342);
        v275  = *(_BYTE *)(v1 + 343);
        v276  = v272;
        v277  = sub_10020039C(v272);
        if (v277 != 15)
        {
          v286  = v277;
          *(uint16x8_t *)(v1 + 80)  = vmovl_u8(v9);
          v287  = sub_100002274(&qword_100405E00);
          v288  = type metadata accessor for DriverEvent(0LL);
          v289  = *(void *)(v288 - 8);
          v290  = *(void *)(v289 + 72);
          v291  = *(unsigned __int8 *)(v289 + 80);
          v292  = (v291 + 32) & ~v291;
          uint64_t v31 = swift_allocObject(v287, v292 + v290, v291 | 7);
          *(_OWORD *)(v31 + 16)  = xmmword_100339900;
          v293  = (void *)(v31 + v292);
          *(_BYTE *)(v1 + 336)  = v273;
          *(_DWORD *)(v1 + 337)  = vmovn_s16(*(int16x8_t *)(v1 + 80)).u32[0];
          *(_BYTE *)(v1 + 341)  = v274;
          *(_BYTE *)(v1 + 342)  = v275;
          *(_BYTE *)(v1 + 343)  = v286;
          *(_BYTE *)(v1 + 344)  = *(_DWORD *)(v1 + 96);
          sub_1002003C0(v1 + 336);
          sub_100058090((const void *)(v1 + 336), v293);
          v208  = v293;
          v251  = v288;
LABEL_81:
          swift_storeEnumTagMultiPayload(v208, v251, 0LL);
          swift_release(v5);
          (*(void (**)(void, void))(*(void *)(v1 + 120) + 8LL))( *(void *)(v1 + 136),  *(void *)(v1 + 128));
          swift_release(v11);
          return (void *)v31;
        }

        v278  = (os_log_s *)Logger.logObject.getter(v277);
        v279  = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v278, v279))
        {
          v280  = (uint8_t *)swift_slowAlloc(5LL, -1LL);
          *(_DWORD *)v280  = 16777472;
          *(_BYTE *)(v1 + 336)  = v276;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 336, v1 + 337);
          _os_log_impl( (void *)&_mh_execute_header,  v278,  v279,  "Failed to convert %hhu into a management frame type",  v280,  5u);
          swift_slowDealloc(v280, -1LL, -1LL);
        }

        swift_release(v5);

        break;
      case 0x29:
        type metadata accessor for wl_nan_ev_datapath_cmn(0LL);
        sub_1001F850C(1282, v117, (uint64_t)v11, v7, v117);
        if (*(_BYTE *)(v1 + 358) != 6) {
          goto LABEL_94;
        }
        v119  = *(unsigned __int8 *)(v1 + 336);
        v120  = *(_BYTE *)(v1 + 337);
        v118.i32[0]  = *(_DWORD *)(v1 + 340);
        *(uint16x8_t *)(v1 + 96)  = vmovl_u8(v118);
        v121  = *(_BYTE *)(v1 + 344);
        v122  = *(_BYTE *)(v1 + 345);
        v123  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        v124  = *(void *)(v168 - 8);
        v125  = *(void *)(v124 + 72);
        v126  = *(unsigned __int8 *)(v124 + 80);
        v127  = (v126 + 32) & ~v126;
        uint64_t v31 = swift_allocObject(v123, v127 + v125, v126 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        int v48 = (void *)(v31 + v127);
        *(_BYTE *)(v1 + 336)  = v120;
        *(_DWORD *)(v1 + 337)  = vmovn_s16(*(int16x8_t *)(v1 + 96)).u32[0];
        *(_BYTE *)(v1 + 341)  = v121;
        *(_BYTE *)(v1 + 342)  = v122;
        *(_BYTE *)(v1 + 343)  = v119 == 1;
        int16x8_t v83 = 1LL;
LABEL_29:
        *(void *)(v1 + 344)  = v83;
        sub_1000586B4(v1 + 336);
        goto LABEL_79;
      case 0x2C:
        type metadata accessor for wl_nan_host_assist_req(0LL);
        sub_1001F850C(1538, v128, (uint64_t)v11, v7, v128);
        v129  = *(void *)(v1 + 336);
        v130.i32[0]  = *(_DWORD *)(v1 + 344);
        v131  = *(_BYTE *)(v1 + 348);
        v132  = *(unsigned __int8 *)(v1 + 350);
        v133  = *(_BYTE *)(v1 + 351);
        v134  = *(_BYTE *)(v1 + 349) - 1;
        *(uint16x8_t *)(v1 + 96)  = vmovl_u8(v130);
        if (v134 > 0xFu) {
          v135  = 15;
        }
        else {
          v135  = byte_10035BEA0[(char)v134];
        }
        v215  = v132 - 1;
        if (v132 == 9) {
          v216  = 8;
        }
        else {
          v216  = 9;
        }
        if (v132 == 8) {
          v217  = 7;
        }
        else {
          v217  = v216;
        }
        if (v215 >= 7) {
          v218  = v217;
        }
        else {
          v218  = v215;
        }
        v219  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        v220  = *(void *)(v168 - 8);
        v221  = *(void *)(v220 + 72);
        v222  = *(unsigned __int8 *)(v220 + 80);
        v223  = (v222 + 32) & ~v222;
        uint64_t v31 = swift_allocObject(v219, v223 + v221, v222 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        int v48 = (void *)(v31 + v223);
        *(_BYTE *)(v1 + 336)  = v131;
        *(_BYTE *)(v1 + 337)  = v133;
        *(void *)(v1 + 338)  = v129;
        *(_DWORD *)(v1 + 346)  = vmovn_s16(*(int16x8_t *)(v1 + 96)).u32[0];
        *(_BYTE *)(v1 + 350)  = v135;
        *(_BYTE *)(v1 + 351)  = v218;
        sub_1000586A8(v1 + 336);
        goto LABEL_79;
      case 0x2F:
        type metadata accessor for wl_nan_event_oob_af_txs(0LL);
        sub_1001F850C(2051, v136, (uint64_t)v11, v7, v136);
        v179  = *(unsigned __int8 *)(v1 + 336);
        v180  = *(unsigned __int8 *)(v1 + 337);
        v181  = *(_WORD *)(v1 + 338);
        if (v179 <= 4) {
          v182  = 0x302010004uLL >> (8 * v179);
        }
        else {
          v182  = 4;
        }
        if (v180 <= 3) {
          v183  = 0x2010003u >> (8 * v180);
        }
        else {
          v183  = 3;
        }
        v184  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        v185  = *(void *)(v168 - 8);
        v186  = *(void *)(v185 + 72);
        v187  = *(unsigned __int8 *)(v185 + 80);
        v188  = (v187 + 32) & ~v187;
        uint64_t v31 = swift_allocObject(v184, v188 + v186, v187 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        int v48 = (void *)(v31 + v188);
        *(_WORD *)(v1 + 336)  = v181;
        *(_BYTE *)(v1 + 338)  = v182;
        *(_BYTE *)(v1 + 339)  = v183;
        sub_100058118(v1 + 336);
        goto LABEL_79;
      case 0x30:
        *(_BYTE *)(v1 + 336)  = 0;
        sub_1001FA2F4(2051LL, v5);
        *(_DWORD *)(v8 - 172)  = 2051;
        v137  = (void *)swift_getKeyPath(&unk_10035B950);
        type metadata accessor for wl_nan_tlv(0LL);
        v139  = v138;
        v140  = sub_10000AF70( &qword_10040BA28,  (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_tlv,  (uint64_t)&unk_100338620);
        v141  = sub_1000BFF38();
        v142  = sub_1000BFEF4();
        sub_1001F8694( v8 - 168,  v1 + 144,  (char *)(v8 - 172),  v137,  20LL,  (uint64_t)sub_1001FA7C0,  0LL,  (uint64_t)v11,  v7,  v139,  (uint64_t)&type metadata for IEEE80211Frame.Management.ActionFrame,  v3,  v140,  v141,  v142);
        swift_release(v137);
        v236  = *(_BYTE *)(v1 + 144);
        *(_OWORD *)(v1 + 96)  = *(_OWORD *)(v1 + 152);
        v237  = *(void *)(v1 + 168);
        v238  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        v239  = *(void *)(v168 - 8);
        v240  = *(void *)(v239 + 72);
        v241  = *(unsigned __int8 *)(v239 + 80);
        v242  = (v241 + 32) & ~v241;
        uint64_t v31 = swift_allocObject(v238, v242 + v240, v241 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        int v48 = (void *)(v31 + v242);
        *(void *)(v1 + 336)  = *(void *)(v8 - 168);
        *(_DWORD *)(v1 + 344)  = *(_DWORD *)(v8 - 160);
        *(_BYTE *)(v1 + 352)  = v236;
        *(_OWORD *)(v1 + 360)  = *(_OWORD *)(v1 + 96);
        *(void *)(v1 + 376)  = v237;
        sub_10005810C(v1 + 336);
        goto LABEL_79;
      default:
        goto LABEL_94;
    }
  }

  else
  {
LABEL_94:
    swift_release(v5);
  }

  (*(void (**)(void, void))(*(void *)(v1 + 120) + 8LL))(*(void *)(v1 + 136), *(void *)(v1 + 128));
  swift_release(v11);
  return _swiftEmptyArrayStorage;
}

      uint64_t v12 = 0;
      uint64_t v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        uint64_t v21 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v22 = a3 + 55;
        }

        else
        {
          uint64_t v21 = 97;
          uint64_t v22 = 65;
        }

        if (a3 <= 10) {
          char v23 = a3 + 48;
        }
        else {
          char v23 = 58;
        }
        if (result)
        {
          LOWORD(v24)  = 0;
          do
          {
            uint64_t v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                uint64_t v12 = 0;
                uint64_t v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                uint64_t v26 = -87;
              }

              else
              {
                uint64_t v26 = -55;
              }
            }

            else
            {
              uint64_t v26 = -48;
            }

            uint64_t v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          uint64_t v13 = 0;
          uint64_t v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        BOOL v5 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v6 = a3 + 55;
        }

        else
        {
          BOOL v5 = 97;
          uint64_t v6 = 65;
        }

        if (a3 <= 10) {
          uint64_t v7 = a3 + 48;
        }
        else {
          uint64_t v7 = 58;
        }
        if (result)
        {
          LOWORD(v8)  = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            uint64_t v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                uint64_t v12 = 0;
                uint64_t v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                uint64_t v11 = -87;
              }

              else
              {
                uint64_t v11 = -55;
              }
            }

            else
            {
              uint64_t v11 = -48;
            }

            uint64_t v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

    v176(v160, 1LL, 1LL, v179);
    __break(1u);
    goto LABEL_73;
  }

  char v46 = v14[*(int *)(v179 + 112)];
  sub_10005802C((uint64_t)v14, type metadata accessor for AWDLPeer);
  uint64_t v47 = (uint64_t)v173;
  int v48 = v174;
  isUniquelyReferenced_nonNull_native  = (uint64_t)v177;
  if (!(v45 & 1 | ((v46 & 1) == 0))) {
    goto LABEL_12;
  }
  LOBYTE(v50)  = 0;
  while (1)
  {
    v177  = (char *)type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v100 = (uint64_t)v184 + *(void *)(*v184 + 568);
    uint64_t v101 = swift_beginAccess(v100, &v190, 0LL, 0LL);
    uint64_t v102 = v165;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v48 + 16))(v165, v100, v47, v101);
    uint64_t v103 = v47;
    uint64_t v104 = (uint64_t)v166;
    DispatchTime.distance(to:)(isUniquelyReferenced_nonNull_native);
    int v105 = *(void (**)(char *, uint64_t))(v48 + 8);
    v105(v102, v103);
    v105((char *)isUniquelyReferenced_nonNull_native, v103);
    uint64_t v106 = (uint64_t)v167;
    *v167  = 10LL;
    __int128 v107 = v168;
    uint64_t v108 = v169;
    (*(void (**)(uint64_t, void, uint64_t))(v168 + 104))( v106,  enum case for DispatchTimeInterval.seconds(_:),  v169);
    LOBYTE(v105)  = static DispatchTimeInterval.< infix(_:_:)(v104, v106);
    uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
    v109(v106, v108);
    v109(v104, v108);
    if ((v105 & 1) == 0)
    {
      uint64_t v110 = v184;
      v111  = (uint64_t *)((char *)v184 + *(void *)(*v184 + 576));
      swift_beginAccess(v111, &v189, 0LL, 0LL);
      v173  = &v156;
      uint64_t v112 = *v111;
      __chkstk_darwin();
      *(&v156 - 2)  = (uint64_t)v183;
      *(&v156 - 1)  = (uint64_t)v110;
      uint64_t v113 = isUniquelyReferenced_nonNull_native;
      v114  = sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      uint64_t v115 = sub_100245750();
      swift_bridgeObjectRetain(v112);
      uint64_t v116 = Dictionary.filter(_:)(sub_100333114, &v156 - 4, v112, v114, v181, v115);
      sub_100306D68(v116);
      variable initialization expression of AWDLPeer.lastUpdated();
      v117  = swift_beginAccess(v100, v188, 33LL, 0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v48 + 40))(v100, v113, v103, v117);
      swift_endAccess(v188);
    }

    v118  = v172;
    uint64_t v47 = v180;
    v119  = v171;
    isUniquelyReferenced_nonNull_native  = v170;
    sub_100057FE8(v180, v172, type metadata accessor for AWDLPeer);
    if (!v119) {
      break;
    }
    v120  = *(_BYTE *)(v118 + *(int *)(v179 + 116));
    sub_10005802C(v118, type metadata accessor for AWDLPeer);
    if (isUniquelyReferenced_nonNull_native & 1 | ((v120 & 1) == 0))
    {
      sub_10005802C(v47, type metadata accessor for AWDLPeer);

      return;
    }

LABEL_56:
      uint64_t v100 = v65;
      if (v65 == v96)
      {
        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease_n(v125, 2LL);
        uint64_t v44 = v128;
        uint64_t v67 = v97;
        int v66 = v126;
        v81  = v118;
        goto LABEL_53;
      }
    }

    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_once(&qword_1004043B8, sub_100187378);
  }

  v81  = *(void (**)(char *, uint64_t))(v134 + 8);
  swift_bridgeObjectRetain(off_10040A1B0);
LABEL_87:
  v81(v67, a4);
  v123(v124, v135);
  swift_bridgeObjectRelease(v66);
  return 0x300000000LL;
}

uint64_t Channel.operatingClass.getter(unint64_t a1)
{
  int v2 = BYTE5(a1);
  if (qword_1004043C0 != -1) {
LABEL_69:
  }
    swift_once(&qword_1004043C0, sub_100187C0C);
  uint64_t v3 = *((void *)off_10040A1B8 + 2);
  int v4 = a1;
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (char *)off_10040A1B8 + 32;
    while (1)
    {
      uint64_t v7 = v5 + 1;
      if (__OFADD__(v5, 1LL))
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }

BOOL Channel.is6GHz.getter(uint64_t a1)
{
  return (a1 & 0xFE00000000LL) != 0;
}

uint64_t static Channel.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1001888B0(a1 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL);
}

int *Channel.awdlSocial5GHz.unsafeMutableAddressor()
{
  if (qword_100404390 != -1) {
    swift_once(&qword_100404390, sub_100186430);
  }
  return &static Channel.awdlSocial5GHz;
}

uint64_t Channel.Band.maximumBandwidth.getter(int a1)
{
  return (a1 + 3);
}

BOOL static Channel.Band.< infix(_:_:)(char a1, char a2)
{
  return ((0x801004u >> (8 * a1)) & 0xFFC) < ((0x801004u >> (8 * a2)) & 0xFFC);
}

uint64_t Channel.Band.rawValue.getter(char a1)
{
  return 0x801004u >> (8 * a1);
}

uint64_t Channel.Band.description.getter(char a1)
{
  if (!a1) {
    return 0x7A484720342E32LL;
  }
  if (a1 == 1) {
    return 0x7A48472035LL;
  }
  return 0x7A48472036LL;
}

_UNKNOWN **static Channel.Band.allCases.getter()
{
  return &off_1003D73C8;
}

BOOL sub_1001858FC(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) == ((0x801004u >> (8 * *a2)) & 0xFFC);
}

unsigned __int8 *sub_100185930@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 4) {
    char v3 = 0;
  }
  else {
    char v3 = 3;
  }
  if (v2 == 16) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v2 == 128) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  *a2  = v5;
  return result;
}

void sub_100185960(_BYTE *a1@<X8>)
{
  *a1  = 0x801004u >> (8 * *v1);
}

Swift::Int sub_10018597C()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(0x801004u >> (8 * v1));
  return Hasher._finalize()();
}

void sub_1001859CC()
{
}

Swift::Int sub_100185A04(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(0x801004u >> (8 * v2));
  return Hasher._finalize()();
}

void sub_100185A50(void *a1@<X8>)
{
  *a1  = &off_1003D73F0;
}

uint64_t sub_100185A60()
{
  int v1 = *v0;
  uint64_t v2 = 0x7A48472035LL;
  if (v1 != 1) {
    uint64_t v2 = 0x7A48472036LL;
  }
  if (*v0) {
    return v2;
  }
  else {
    return 0x7A484720342E32LL;
  }
}

uint64_t sub_100185AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100189810();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100185B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100189810();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_100185B50(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) < ((0x801004u >> (8 * *a2)) & 0xFFC);
}

BOOL sub_100185B84(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a2)) & 0xFFC) >= ((0x801004u >> (8 * *a1)) & 0xFFC);
}

BOOL sub_100185BB8(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) >= ((0x801004u >> (8 * *a2)) & 0xFFC);
}

BOOL sub_100185BEC(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a2)) & 0xFFC) < ((0x801004u >> (8 * *a1)) & 0xFFC);
}

BOOL Optional<A>.is5GHz.getter(uint64_t a1)
{
  return (a1 & 0xFF00000000LL) == (void)&_mh_execute_header;
}

uint64_t sub_100185C34()
{
  uint64_t result = sub_100004F7C((uint64_t)&off_1003D6EE0);
  qword_10040A190  = result;
  return result;
}

void sub_100185C58()
{
  int v1 = *(unsigned __int8 *)(v0 + 5);
  uint64_t v2 = v0;
  unsigned __int8 v3 = (v1 & 1) == 0;
  int v4 = *(unsigned __int8 *)(v0 + 4);
  if (v4 == 2)
  {
    if (qword_1004043C0 != -1) {
      goto LABEL_78;
    }
    goto LABEL_4;
  }

  if (qword_1004043B8 != -1) {
    swift_once(&qword_1004043B8, sub_100187378);
  }
  uint64_t v8 = *((void *)off_10040A1B0 + 2);
  if (!v8)
  {
LABEL_79:
    *(_DWORD *)&v65[8]  = 0;
    _StringGuts.grow(_:)(58LL);
    v41._object  = (void *)0x8000000100367050LL;
    v41._countAndFlagsBits  = 0xD00000000000002CLL;
    String.append(_:)(v41);
    *(void *)v65  = *(unsigned int *)v2;
    v42._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    object  = v42._object;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(object);
    v44._countAndFlagsBits  = 32LL;
    v44._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v44);
    if (v4) {
      uint64_t v45 = 0x7A48472035LL;
    }
    else {
      uint64_t v45 = 0x7A484720342E32LL;
    }
    if (v4) {
      unint64_t v46 = 0xE500000000000000LL;
    }
    else {
      unint64_t v46 = 0xE700000000000000LL;
    }
    unint64_t v47 = v46;
    String.append(_:)(*(Swift::String *)&v45);
    swift_bridgeObjectRelease(v46);
    v48._countAndFlagsBits  = 32LL;
    v48._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v48);
    uint64_t v49 = 0x7A484D203031LL;
    uint64_t v2 = 0xE600000000000000LL;
    switch(v1)
    {
      case 2:
        break;
      case 3:
        uint64_t v49 = 0x7A484D203032LL;
        break;
      case 4:
        uint64_t v49 = 0x7A484D203038LL;
        break;
      case 5:
        uint64_t v49 = 0x7A484D20303631LL;
        uint64_t v2 = 0xE700000000000000LL;
        break;
      case 6:
        uint64_t v2 = 0xE700000000000000LL;
        uint64_t v49 = 0x7A484D20303233LL;
        break;
      default:
        if ((v1 & 1) != 0) {
          uint64_t v49 = 0x7A484D202B3034LL;
        }
        else {
          uint64_t v49 = 0x7A484D202D3034LL;
        }
        uint64_t v2 = 0xE700000000000000LL;
        break;
    }

    uint64_t v50 = v2;
    String.append(_:)(*(Swift::String *)&v49);
    swift_bridgeObjectRelease(v2);
    v51._countAndFlagsBits  = 544370464LL;
    v51._object  = (void *)0xE400000000000000LL;
    String.append(_:)(v51);
    if ((v1 & 1) != 0) {
      uint64_t v52 = 0x7A484D202D3034LL;
    }
    else {
      uint64_t v52 = 0x7A484D202B3034LL;
    }
    unint64_t v53 = 0xE700000000000000LL;
    String.append(_:)(*(Swift::String *)&v52);
    swift_bridgeObjectRelease(0xE700000000000000LL);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)&v65[4],  0xE000000000000000LL,  "CoreP2P/Channel.swift",  21LL,  2LL,  400LL,  0);
    goto LABEL_98;
  }

  uint64_t v9 = 0LL;
  if (v4) {
    int v10 = 16;
  }
  else {
    int v10 = 4;
  }
  uint64_t v11 = (char *)off_10040A1B0 + 32;
  do
  {
    uint64_t v12 = &v11[16 * v9];
    int v13 = v12[2];
    uint64_t v14 = *((void *)v12 + 1);
    int v15 = v12[1];
    if (v15)
    {
      if (v15 != 1 || v10 != 16) {
        goto LABEL_13;
      }
    }

    else if (v10 != 4)
    {
      goto LABEL_13;
    }

    if ((v13 - 2) >= 5 && (v1 & 1) != ((v13 & 1) == 0))
    {
      uint64_t v16 = *(void *)(v14 + 16);
      if (v16)
      {
        int v17 = *(_DWORD *)v2;
        if (*(_DWORD *)(v14 + 32) == *(_DWORD *)v2) {
          return;
        }
        if (v16 != 1)
        {
          if (*(_DWORD *)(v14 + 36) == v17) {
            return;
          }
          if (v16 != 2)
          {
            uint64_t v18 = 10LL;
            do
            {
              uint64_t v19 = v18 - 7;
              if (__OFADD__(v18 - 8, 1LL)) {
                goto LABEL_77;
              }
              if (*(_DWORD *)(v14 + 4 * v18) == v17) {
                return;
              }
              ++v18;
            }

            while (v19 != v16);
          }
        }
      }
    }

LABEL_53:
      if (++v7 == v5)
      {
        while (1)
        {
          swift_bridgeObjectRelease_n(v64, 2LL);
LABEL_100:
          *(_DWORD *)&v66[8]  = 0;
          _StringGuts.grow(_:)(58LL);
          v54._object  = (void *)0x8000000100367050LL;
          v54._countAndFlagsBits  = 0xD00000000000002CLL;
          String.append(_:)(v54);
          *(void *)int v66 = *(unsigned int *)v2;
          v55._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
          uint64_t v56 = v55._object;
          String.append(_:)(v55);
          swift_bridgeObjectRelease(v56);
          v57._countAndFlagsBits  = 32LL;
          v57._object  = (void *)0xE100000000000000LL;
          String.append(_:)(v57);
          v58._countAndFlagsBits  = 0x7A48472036LL;
          v58._object  = (void *)0xE500000000000000LL;
          String.append(_:)(v58);
          v59._countAndFlagsBits  = 32LL;
          v59._object  = (void *)0xE100000000000000LL;
          String.append(_:)(v59);
          if ((v1 & 1) != 0) {
            uint64_t v60 = 0x7A484D202B3034LL;
          }
          else {
            uint64_t v60 = 0x7A484D202D3034LL;
          }
          if ((v1 & 1) != 0) {
            uint64_t v2 = 0x7A484D202D3034LL;
          }
          else {
            uint64_t v2 = 0x7A484D202B3034LL;
          }
          unint64_t v61 = 0xE700000000000000LL;
          String.append(_:)(*(Swift::String *)&v60);
          swift_bridgeObjectRelease(0xE700000000000000LL);
          v62._countAndFlagsBits  = 544370464LL;
          v62._object  = (void *)0xE400000000000000LL;
          String.append(_:)(v62);
          v63._countAndFlagsBits  = v2;
          v63._object  = (void *)0xE700000000000000LL;
          String.append(_:)(v63);
          swift_bridgeObjectRelease(0xE700000000000000LL);
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)&v66[4],  0xE000000000000000LL,  "CoreP2P/Channel.swift",  21LL,  2LL,  390LL,  0);
LABEL_98:
          __break(1u);
        }
      }
    }

    int v35 = *(_DWORD *)v2;
    swift_bridgeObjectRetain_n(*((void *)v31 + 1), 2LL);
    uint64_t v36 = 0LL;
    while (2)
    {
      uint64_t v37 = *(void *)(v33 + 32 + 16 * v36 + 8);
      uint64_t v38 = *(void *)(v37 + 16);
      if (!v38) {
        goto LABEL_61;
      }
      if (*(_DWORD *)(v37 + 32) == v35) {
        goto LABEL_72;
      }
      if (v38 == 1)
      {
LABEL_61:
        if (++v36 == v34)
        {
          swift_bridgeObjectRelease_n(v33, 2LL);
          goto LABEL_53;
        }

        continue;
      }

      break;
    }

    if (*(_DWORD *)(v37 + 36) != v35)
    {
      if (v38 != 2)
      {
        uint64_t v39 = 10LL;
        while (1)
        {
          uint64_t v40 = v39 - 7;
          if (__OFADD__(v39 - 8, 1LL)) {
            break;
          }
          if (*(_DWORD *)(v37 + 4 * v39) == v35) {
            goto LABEL_72;
          }
          ++v39;
          if (v40 == v38) {
            goto LABEL_61;
          }
        }

        __break(1u);
        continue;
      }

      goto LABEL_61;
    }

    break;
  }

    if (v5 < 0) {
      uint64_t v26 = v5;
    }
    else {
      uint64_t v26 = v11;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v5);
    uint64_t v19 = v27 + v6;
    if (!__OFADD__(v27, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
  __break(1u);
  return result;
}

          uint64_t v9 = 1;
          LOWORD(v8)  = v10;
          goto LABEL_38;
        }

unint64_t Channel.init(_:maximumBandwidthOnBand:)(unsigned int a1, unsigned __int8 a2)
{
  unsigned __int8 v5 = a2 + 3;
  sub_100185C58();
  return a1 | ((unint64_t)a2 << 32) | ((unint64_t)v5 << 40);
}

void *sub_10018635C()
{
  uint64_t result = (void *)sub_100004F7C((uint64_t)&off_1003D3218);
  off_10040A198  = result;
  return result;
}

void *sub_100186380()
{
  uint64_t result = (void *)sub_100004F7C((uint64_t)&off_1003D3270);
  off_10040A1A0  = result;
  return result;
}

void *sub_1001863A4()
{
  uint64_t result = (void *)sub_100004F7C((uint64_t)&off_1003D3300);
  off_10040A1A8  = result;
  return result;
}

unint64_t sub_1001863C8(uint64_t a1)
{
  return sub_100186554(a1, &static Channel.awdlSocial2GHz, &byte_10041088C, &byte_10041088D);
}

unint64_t static Channel.awdlSocial2GHz.getter()
{
  if (qword_100404388 != -1) {
    swift_once(&qword_100404388, sub_1001863C8);
  }
  return static Channel.awdlSocial2GHz | ((unint64_t)byte_10041088C << 32) | ((unint64_t)byte_10041088D << 40);
}

unint64_t sub_100186430(uint64_t a1)
{
  return sub_100186618(a1, &static Channel.awdlSocial5GHz, &byte_100410894, &byte_100410895);
}

unint64_t static Channel.awdlSocial5GHz.getter()
{
  if (qword_100404390 != -1) {
    swift_once(&qword_100404390, sub_100186430);
  }
  return static Channel.awdlSocial5GHz | ((unint64_t)byte_100410894 << 32) | ((unint64_t)byte_100410895 << 40);
}

unint64_t sub_100186498(uint64_t a1)
{
  return sub_10018671C(a1, &static Channel.awdlAlternateSocial5GHz, &byte_10041089C, &byte_10041089D);
}

int *Channel.awdlAlternateSocial5GHz.unsafeMutableAddressor()
{
  if (qword_100404398 != -1) {
    swift_once(&qword_100404398, sub_100186498);
  }
  return &static Channel.awdlAlternateSocial5GHz;
}

unint64_t static Channel.awdlAlternateSocial5GHz.getter()
{
  if (qword_100404398 != -1) {
    swift_once(&qword_100404398, sub_100186498);
  }
  return static Channel.awdlAlternateSocial5GHz | ((unint64_t)byte_10041089C << 32) | ((unint64_t)byte_10041089D << 40);
}

unint64_t sub_100186540(uint64_t a1)
{
  return sub_100186554(a1, &static Channel.nanPrimary, &byte_1004108A4, &byte_1004108A5);
}

unint64_t sub_100186554(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4)
{
  unint64_t result = sub_1001889D8(6u);
  if ((result & 0xFF00000000LL) == 0x300000000LL)
  {
    __break(1u);
  }

  else
  {
    *a2  = result;
    *a3  = BYTE4(result);
    *a4  = BYTE5(result);
  }

  return result;
}

unint64_t static Channel.nanPrimary.getter()
{
  if (qword_1004043A0 != -1) {
    swift_once(&qword_1004043A0, sub_100186540);
  }
  return static Channel.nanPrimary | ((unint64_t)byte_1004108A4 << 32) | ((unint64_t)byte_1004108A5 << 40);
}

unint64_t sub_100186604(uint64_t a1)
{
  return sub_100186618(a1, &static Channel.nanSecondary, &byte_1004108AC, &byte_1004108AD);
}

unint64_t sub_100186618(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4)
{
  unint64_t result = sub_1001889D8(0x95u);
  if ((result & 0xFF00000000LL) == 0x300000000LL)
  {
    __break(1u);
  }

  else
  {
    *a2  = result;
    *a3  = BYTE4(result);
    *a4  = BYTE5(result);
  }

  return result;
}

int *Channel.nanSecondary.unsafeMutableAddressor()
{
  if (qword_1004043A8 != -1) {
    swift_once(&qword_1004043A8, sub_100186604);
  }
  return &static Channel.nanSecondary;
}

unint64_t static Channel.nanSecondary.getter()
{
  if (qword_1004043A8 != -1) {
    swift_once(&qword_1004043A8, sub_100186604);
  }
  return static Channel.nanSecondary | ((unint64_t)byte_1004108AC << 32) | ((unint64_t)byte_1004108AD << 40);
}

unint64_t sub_100186708(uint64_t a1)
{
  return sub_10018671C(a1, &static Channel.nanAlternateSecondary, &byte_1004108B4, &byte_1004108B5);
}

unint64_t sub_10018671C(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4)
{
  unint64_t result = sub_1001889D8(0x2Cu);
  if ((result & 0xFF00000000LL) == 0x300000000LL)
  {
    __break(1u);
  }

  else
  {
    *a2  = result;
    *a3  = BYTE4(result);
    *a4  = BYTE5(result);
  }

  return result;
}

int *Channel.nanAlternateSecondary.unsafeMutableAddressor()
{
  if (qword_1004043B0 != -1) {
    swift_once(&qword_1004043B0, sub_100186708);
  }
  return &static Channel.nanAlternateSecondary;
}

unint64_t static Channel.nanAlternateSecondary.getter()
{
  if (qword_1004043B0 != -1) {
    swift_once(&qword_1004043B0, sub_100186708);
  }
  return static Channel.nanAlternateSecondary | ((unint64_t)byte_1004108B4 << 32) | ((unint64_t)byte_1004108B5 << 40);
}

uint64_t Channel.description.getter(uint64_t a1)
{
  unsigned __int8 v1 = BYTE5(a1);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  int v2 = v1 - 2;
  unint64_t v3 = 0xE200000000000000LL;
  uint64_t v4 = 11051LL;
  switch(v2)
  {
    case 0:
    case 1:
      uint64_t v4 = 0LL;
      unint64_t v3 = 0xE000000000000000LL;
      break;
    case 2:
      break;
    case 3:
      uint64_t v4 = 30840LL;
      break;
    case 4:
      uint64_t v4 = 31097LL;
      break;
    default:
      uint64_t v4 = 45LL;
      unint64_t v3 = 0xE100000000000000LL;
      break;
  }

  unint64_t v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v3);
  return v7;
}

void Channel.hash(into:)(int a1, unint64_t a2)
{
  switch(BYTE5(a2))
  {
    case 2:
      Swift::UInt v3 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v3 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v3 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v3 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v3 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }

uint64_t sub_10018696C()
{
  uint64_t v1 = 1684955490LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x74646977646E6162LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C656E6E616863LL;
  }
}

uint64_t sub_1001869C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001896C0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001869E8(uint64_t a1)
{
  unint64_t v2 = sub_100189340();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100186A10(uint64_t a1)
{
  unint64_t v2 = sub_100189340();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Channel.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_10040A1D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_100189340();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Channel.CodingKeys,  &type metadata for Channel.CodingKeys,  v11,  v9,  v10);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v5);
  if (!v2)
  {
    char v19 = BYTE4(a2);
    char v18 = 1;
    unint64_t v12 = sub_100189384();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Channel.Band, v12);
    char v17 = BYTE5(a2);
    char v16 = 2;
    unint64_t v13 = sub_1001893C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Bandwidth, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Channel.hashValue.getter(unint64_t a1)
{
  switch(BYTE5(a1))
  {
    case 2:
      Swift::UInt v2 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v2 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v2 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v2 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v2 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a1) & 1);
      break;
  }

  return Hasher._finalize()();
}

uint64_t Channel.init(from:)(void *a1)
{
  return sub_100188C3C(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_100186C9C()
{
  return Channel.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
}

void sub_100186CB4(int a1)
{
}

Swift::Int sub_100186CCC(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)v1;
  char v3 = *(_BYTE *)(v1 + 4);
  int v4 = *(unsigned __int8 *)(v1 + 5);
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(0x801004u >> (8 * v3));
  switch(v4)
  {
    case 2:
      Swift::UInt v5 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v5 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v5 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v5 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v5 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v5);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v4 & 1);
      break;
  }

  return Hasher._finalize()();
}

uint64_t sub_100186DB4()
{
  return Channel.description.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
}

uint64_t sub_100186DCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100188C3C(a1);
  if (!v2)
  {
    *(_DWORD *)a2  = result;
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
  }

  return result;
}

uint64_t sub_100186E04(void *a1)
{
  return Channel.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
}

uint64_t sub_100186E2C(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_100186EF8(a1, a2, a3, a4, sub_1001888B0);
}

BOOL sub_100186E38(unsigned int *a1, unsigned int *a2)
{
  return (sub_1001888B0( *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40),  *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40)) & 1) == 0;
}

BOOL sub_100186E7C(unsigned int *a1, unsigned int *a2)
{
  return (sub_1001888B0( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40)) & 1) == 0;
}

uint64_t sub_100186EC0(unsigned int *a1, unsigned int *a2)
{
  return sub_1001888B0( *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40),  *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40));
}

uint64_t sub_100186EEC(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_100186EF8(a1, a2, a3, a4, sub_1001887C8);
}

uint64_t sub_100186EF8( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40));
}

uint64_t Optional<A>.description.getter(uint64_t a1)
{
  if ((a1 & 0xFF00000000LL) == 0x300000000LL) {
    return 48LL;
  }
  else {
    return Channel.description.getter(a1 & 0xFFFFFFFFFFFFLL);
  }
}

BOOL Optional<A>.is2_4GHz.getter(uint64_t a1)
{
  return (a1 & 0x700000000LL) == 0 && (a1 & 0xFF00000000LL) != 0x300000000LL;
}

BOOL Optional<A>.is6GHz.getter(uint64_t a1)
{
  return (a1 & 0xFE00000000LL) != 0 && (a1 & 0xFF00000000LL) != 0x300000000LL;
}

BOOL Optional<A>.isDFS.getter(uint64_t a1)
{
  if ((a1 & 0xFF00000000LL) == 0x300000000LL) {
    return 0LL;
  }
  unsigned int v2 = a1;
  if (qword_100404368 != -1) {
    swift_once(&qword_100404368, sub_100185C34);
  }
  return sub_10008F720(v2, qword_10040A190);
}

id Optional<A>.apiChannel.getter(uint64_t a1)
{
  if ((a1 & 0xFF00000000LL) != 0x300000000LL) {
    return Channel.apiChannel.getter(a1 & 0xFFFFFFFFFFFFLL);
  }
  LOBYTE(v2)  = 0;
  return objc_msgSend( objc_allocWithZone(WiFiChannel),  "initWithChannelNumber:bandwidth:is2_4GHz:is5GHz:is6GHz:isDFS:extensionChannelAbove:",  0,  1,  0,  0,  0,  0,  v2);
}

id Channel.apiChannel.getter(unint64_t a1)
{
  unint64_t v2 = a1 >> 40;
  else {
    uint64_t v3 = qword_10034EE28[(char)(BYTE5(a1) - 2)];
  }
  if (qword_100404368 != -1) {
    swift_once(&qword_100404368, sub_100185C34);
  }
  LOBYTE(v5)  = v2 & ((v2 - 7) < 0xFBu);
  return objc_msgSend( objc_allocWithZone(WiFiChannel),  "initWithChannelNumber:bandwidth:is2_4GHz:is5GHz:is6GHz:isDFS:extensionChannelAbove:",  a1,  v3,  (a1 & 0x700000000) == 0,  HIDWORD(a1) & 1,  (a1 & 0x700000000) == 0x200000000,  sub_10008F720(a1, qword_10040A190),  v5);
}

unint64_t sub_100187158@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001889D8(*a1);
  *(_DWORD *)a2  = result;
  *(_WORD *)(a2 + 4)  = WORD2(result);
  return result;
}

uint64_t sub_100187188()
{
  unint64_t v1 = *v0 | ((unint64_t)*((unsigned __int16 *)v0 + 2) << 32);
  if ((v1 & 0xFF00000000LL) == 0x300000000LL) {
    return 48LL;
  }
  else {
    return Channel.description.getter(v1);
  }
}

unint64_t Channel.init(apiChannel:)(void *a1)
{
  unsigned int v2 = [a1 channelNumber];
  int v3 = 2;
  switch((unint64_t)[a1 bandwidth])
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      int v3 = 3;
      goto LABEL_7;
    case 2uLL:
      int v3 = [a1 extensionChannelAbove];
      goto LABEL_7;
    case 3uLL:
      int v3 = 4;
      goto LABEL_7;
    case 4uLL:
      int v3 = 5;
      goto LABEL_7;
    case 5uLL:
      int v3 = 6;
LABEL_7:
      if (!objc_msgSend(a1, "is2_4GHz")
        || ([a1 is5GHz] & 1) != 0
        || [a1 is6GHz])
      {
        if ((objc_msgSend(a1, "is2_4GHz") & 1) != 0
          || ![a1 is5GHz]
          || [a1 is6GHz])
        {
          if ((objc_msgSend(a1, "is2_4GHz") & 1) != 0
            || ([a1 is5GHz] & 1) != 0
            || ([a1 is6GHz] & 1) == 0)
          {
            goto LABEL_21;
          }

          unsigned __int8 v4 = 2;
        }

        else
        {
          unsigned __int8 v4 = 1;
        }
      }

      else
      {
        unsigned __int8 v4 = 0;
      }

      if ((_s7CoreP2P7ChannelV7isValid7channel2on4withSbs6UInt32V_AC4BandOAA9BandwidthOtFZ_0(v2, v4, v3) & 1) != 0)
      {
        sub_100185C58();

        return v2 | ((unint64_t)v4 << 32) | ((unint64_t)v3 << 40);
      }

void *sub_100187378()
{
  unint64_t result = sub_100187394();
  off_10040A1B0  = result;
  return result;
}

void *sub_100187394()
{
  uint64_t v0 = sub_1000A5F88(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  unint64_t v3 = v1 >> 1;
  unint64_t v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v1 > 1), v2 + 1, 1, v0);
    unint64_t v1 = v0[3];
    unint64_t v3 = v1 >> 1;
  }

  v0[2]  = v4;
  uint64_t v5 = &v0[2 * v2];
  *((_WORD *)v5 + 16)  = 81;
  *((_BYTE *)v5 + 34)  = 3;
  void v5[5] = &off_1003D4390;
  int64_t v6 = v2 + 2;
  if (v3 <= v4) {
    uint64_t v0 = sub_1000A5F88((void *)(v1 > 1), v6, 1, v0);
  }
  v0[2]  = v6;
  uint64_t v7 = &v0[2 * v4];
  *((_WORD *)v7 + 16)  = 82;
  *((_BYTE *)v7 + 34)  = 3;
  void v7[5] = &off_1003D43E8;
  unint64_t v9 = v0[2];
  unint64_t v8 = v0[3];
  unint64_t v10 = v8 >> 1;
  unint64_t v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v8 > 1), v9 + 1, 1, v0);
    unint64_t v8 = v0[3];
    unint64_t v10 = v8 >> 1;
  }

  v0[2]  = v11;
  unint64_t v12 = &v0[2 * v9];
  *((_WORD *)v12 + 16)  = 83;
  *((_BYTE *)v12 + 34)  = 0;
  void v12[5] = &off_1003D4410;
  int64_t v13 = v9 + 2;
  if (v10 <= v11) {
    uint64_t v0 = sub_1000A5F88((void *)(v8 > 1), v13, 1, v0);
  }
  v0[2]  = v13;
  uint64_t v14 = &v0[2 * v11];
  *((_WORD *)v14 + 16)  = 84;
  *((_BYTE *)v14 + 34)  = 1;
  v14[5]  = &off_1003D4458;
  unint64_t v16 = v0[2];
  unint64_t v15 = v0[3];
  unint64_t v17 = v15 >> 1;
  unint64_t v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v15 > 1), v16 + 1, 1, v0);
    unint64_t v15 = v0[3];
    unint64_t v17 = v15 >> 1;
  }

  v0[2]  = v18;
  char v19 = &v0[2 * v16];
  *((_WORD *)v19 + 16)  = 371;
  *((_BYTE *)v19 + 34)  = 3;
  v19[5]  = &off_1003D44A0;
  int64_t v20 = v16 + 2;
  if (v17 <= v18) {
    uint64_t v0 = sub_1000A5F88((void *)(v15 > 1), v20, 1, v0);
  }
  v0[2]  = v20;
  int v21 = &v0[2 * v18];
  *((_WORD *)v21 + 16)  = 372;
  *((_BYTE *)v21 + 34)  = 0;
  v21[5]  = &off_1003D44D0;
  unint64_t v23 = v0[2];
  unint64_t v22 = v0[3];
  unint64_t v24 = v22 >> 1;
  unint64_t v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v22 > 1), v23 + 1, 1, v0);
    unint64_t v22 = v0[3];
    unint64_t v24 = v22 >> 1;
  }

  v0[2]  = v25;
  uint64_t v26 = &v0[2 * v23];
  *((_WORD *)v26 + 16)  = 373;
  *((_BYTE *)v26 + 34)  = 1;
  v26[5]  = &off_1003D44F8;
  int64_t v27 = v23 + 2;
  if (v24 <= v25) {
    uint64_t v0 = sub_1000A5F88((void *)(v22 > 1), v27, 1, v0);
  }
  v0[2]  = v27;
  int v28 = &v0[2 * v25];
  *((_WORD *)v28 + 16)  = 374;
  *((_BYTE *)v28 + 34)  = 3;
  v28[5]  = &off_1003D4520;
  unint64_t v30 = v0[2];
  unint64_t v29 = v0[3];
  unint64_t v31 = v29 >> 1;
  unint64_t v32 = v30 + 1;
  if (v29 >> 1 <= v30)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v29 > 1), v30 + 1, 1, v0);
    unint64_t v29 = v0[3];
    unint64_t v31 = v29 >> 1;
  }

  v0[2]  = v32;
  uint64_t v33 = &v0[2 * v30];
  *((_WORD *)v33 + 16)  = 375;
  *((_BYTE *)v33 + 34)  = 0;
  v33[5]  = &off_1003D4550;
  int64_t v34 = v30 + 2;
  if (v31 <= v32) {
    uint64_t v0 = sub_1000A5F88((void *)(v29 > 1), v34, 1, v0);
  }
  v0[2]  = v34;
  int v35 = &v0[2 * v32];
  *((_WORD *)v35 + 16)  = 376;
  *((_BYTE *)v35 + 34)  = 1;
  v35[5]  = &off_1003D4578;
  unint64_t v37 = v0[2];
  unint64_t v36 = v0[3];
  unint64_t v38 = v36 >> 1;
  unint64_t v39 = v37 + 1;
  if (v36 >> 1 <= v37)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v36 > 1), v37 + 1, 1, v0);
    unint64_t v36 = v0[3];
    unint64_t v38 = v36 >> 1;
  }

  v0[2]  = v39;
  uint64_t v40 = &v0[2 * v37];
  *((_WORD *)v40 + 16)  = 377;
  *((_BYTE *)v40 + 34)  = 3;
  v40[5]  = &off_1003D45A0;
  int64_t v41 = v37 + 2;
  if (v38 <= v39) {
    uint64_t v0 = sub_1000A5F88((void *)(v36 > 1), v41, 1, v0);
  }
  v0[2]  = v41;
  Swift::String v42 = &v0[2 * v39];
  *((_WORD *)v42 + 16)  = 378;
  *((_BYTE *)v42 + 34)  = 0;
  v42[5]  = &off_1003D45F0;
  unint64_t v44 = v0[2];
  unint64_t v43 = v0[3];
  unint64_t v45 = v43 >> 1;
  unint64_t v46 = v44 + 1;
  if (v43 >> 1 <= v44)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v43 > 1), v44 + 1, 1, v0);
    unint64_t v43 = v0[3];
    unint64_t v45 = v43 >> 1;
  }

  v0[2]  = v46;
  unint64_t v47 = &v0[2 * v44];
  *((_WORD *)v47 + 16)  = 379;
  *((_BYTE *)v47 + 34)  = 1;
  v47[5]  = &off_1003D4628;
  int64_t v48 = v44 + 2;
  if (v45 <= v46) {
    uint64_t v0 = sub_1000A5F88((void *)(v43 > 1), v48, 1, v0);
  }
  v0[2]  = v48;
  uint64_t v49 = &v0[2 * v46];
  *((_WORD *)v49 + 16)  = 380;
  *((_BYTE *)v49 + 34)  = 3;
  v49[5]  = &off_1003D4660;
  unint64_t v51 = v0[2];
  unint64_t v50 = v0[3];
  unint64_t v52 = v50 >> 1;
  unint64_t v53 = v51 + 1;
  if (v50 >> 1 <= v51)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v50 > 1), v51 + 1, 1, v0);
    unint64_t v50 = v0[3];
    unint64_t v52 = v50 >> 1;
  }

  v0[2]  = v53;
  Swift::String v54 = &v0[2 * v51];
  *((_WORD *)v54 + 16)  = 381;
  *((_BYTE *)v54 + 34)  = 3;
  v54[5]  = &off_1003D4690;
  if (v52 <= v53) {
    uint64_t v0 = sub_1000A5F88((void *)(v50 > 1), v51 + 2, 1, v0);
  }
  v0[2]  = v51 + 2;
  Swift::String v55 = &v0[2 * v53];
  *((_WORD *)v55 + 16)  = 382;
  *((_BYTE *)v55 + 34)  = 0;
  v55[5]  = &off_1003D46D0;
  unint64_t v57 = v0[2];
  unint64_t v56 = v0[3];
  unint64_t v58 = v56 >> 1;
  unint64_t v59 = v57 + 1;
  if (v56 >> 1 <= v57)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v56 > 1), v57 + 1, 1, v0);
    unint64_t v56 = v0[3];
    unint64_t v58 = v56 >> 1;
  }

  v0[2]  = v59;
  uint64_t v60 = &v0[2 * v57];
  *((_WORD *)v60 + 16)  = 383;
  *((_BYTE *)v60 + 34)  = 1;
  v60[5]  = &off_1003D4700;
  int64_t v61 = v57 + 2;
  if (v58 <= v59) {
    uint64_t v0 = sub_1000A5F88((void *)(v56 > 1), v61, 1, v0);
  }
  v0[2]  = v61;
  Swift::String v62 = &v0[2 * v59];
  *((_WORD *)v62 + 16)  = 384;
  *((_BYTE *)v62 + 34)  = 4;
  v62[5]  = &off_1003D4730;
  unint64_t v64 = v0[2];
  unint64_t v63 = v0[3];
  v65  = v63 >> 1;
  unint64_t v66 = v64 + 1;
  if (v63 >> 1 <= v64)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v63 > 1), v64 + 1, 1, v0);
    unint64_t v63 = v0[3];
    v65  = v63 >> 1;
  }

  v0[2]  = v66;
  uint64_t v67 = &v0[2 * v64];
  *((_WORD *)v67 + 16)  = 385;
  *((_BYTE *)v67 + 34)  = 5;
  v67[5]  = &off_1003D4770;
  int64_t v68 = v64 + 2;
  if (v65 <= v66) {
    uint64_t v0 = sub_1000A5F88((void *)(v63 > 1), v68, 1, v0);
  }
  v0[2]  = v68;
  unsigned __int8 v69 = &v0[2 * v66];
  *((_WORD *)v69 + 16)  = 386;
  *((_BYTE *)v69 + 34)  = 4;
  v69[5]  = &off_1003D47A0;
  v71  = v0[2];
  unint64_t v70 = v0[3];
  unint64_t v72 = v70 >> 1;
  v73  = v71 + 1;
  if (v70 >> 1 <= v71)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v70 > 1), v71 + 1, 1, v0);
    unint64_t v70 = v0[3];
    unint64_t v72 = v70 >> 1;
  }

  v0[2]  = v73;
  unint64_t v74 = &v0[2 * v71];
  *((_WORD *)v74 + 16)  = 643;
  *((_BYTE *)v74 + 34)  = 3;
  v74[5]  = &off_1003D47D8;
  v75  = v71 + 2;
  if (v72 <= v73) {
    uint64_t v0 = sub_1000A5F88((void *)(v70 > 1), v75, 1, v0);
  }
  v0[2]  = v75;
  uint64_t v76 = &v0[2 * v73];
  *((_WORD *)v76 + 16)  = 644;
  *((_BYTE *)v76 + 34)  = 1;
  v76[5]  = &off_1003D48E8;
  unint64_t v78 = v0[2];
  unint64_t v77 = v0[3];
  unint64_t v79 = v77 >> 1;
  unint64_t v80 = v78 + 1;
  if (v77 >> 1 <= v78)
  {
    uint64_t v0 = sub_1000A5F88((void *)(v77 > 1), v78 + 1, 1, v0);
    unint64_t v77 = v0[3];
    unint64_t v79 = v77 >> 1;
  }

  v0[2]  = v80;
  v81  = &v0[2 * v78];
  *((_WORD *)v81 + 16)  = 645;
  *((_BYTE *)v81 + 34)  = 4;
  v81[5]  = &off_1003D4980;
  int64_t v82 = v78 + 2;
  if (v79 <= v80) {
    uint64_t v0 = sub_1000A5F88((void *)(v77 > 1), v82, 1, v0);
  }
  v0[2]  = v82;
  int16x8_t v83 = &v0[2 * v80];
  *((_WORD *)v83 + 16)  = 646;
  *((_BYTE *)v83 + 34)  = 5;
  v83[5]  = &off_1003D49D8;
  uint64_t v84 = sub_1001A111C((uint64_t)v0);
  swift_bridgeObjectRelease(v0);
  return v84;
}

void *sub_100187C0C()
{
  unint64_t result = sub_100187C28();
  off_10040A1B8  = result;
  return result;
}

void *sub_100187C28()
{
  uint64_t v0 = sub_100002274(&qword_10040A240);
  uint64_t v1 = swift_allocObject(v0, 144LL, 7LL);
  *(_DWORD *)(v1 + 32)  = 42;
  *(void *)(v1 + 40)  = &off_1003D3410;
  *(_DWORD *)(v1 + 48)  = 58;
  *(void *)(v1 + 56)  = &off_1003D3440;
  *(_DWORD *)(v1 + 64)  = 106;
  *(void *)(v1 + 72)  = &off_1003D3470;
  *(_DWORD *)(v1 + 80)  = 122;
  *(void *)(v1 + 88)  = &off_1003D34A0;
  *(_DWORD *)(v1 + 96)  = 138;
  *(_OWORD *)(v1 + 16)  = xmmword_100349740;
  *(void *)(v1 + 104)  = &off_1003D34D0;
  *(_DWORD *)(v1 + 112)  = 155;
  *(void *)(v1 + 120)  = &off_1003D3500;
  *(_DWORD *)(v1 + 128)  = 171;
  *(void *)(v1 + 136)  = &off_1003D3530;
  unint64_t v2 = sub_1000A61AC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  unint64_t v5 = v4 + 1;
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_1000A61AC((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2]  = v5;
  int64_t v6 = &v2[2 * v4];
  *((_WORD *)v6 + 16)  = 1025;
  v6[5]  = v1;
  uint64_t v7 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v7 + 16)  = xmmword_100339910;
  *(_DWORD *)(v7 + 32)  = 50;
  *(void *)(v7 + 40)  = &off_1003D3560;
  *(_DWORD *)(v7 + 48)  = 114;
  *(void *)(v7 + 56)  = &off_1003D35A0;
  *(_DWORD *)(v7 + 64)  = 163;
  *(void *)(v7 + 72)  = &off_1003D35E0;
  unint64_t v8 = v2[3];
  int64_t v9 = v4 + 2;
  if (v5 >= v8 >> 1) {
    unint64_t v2 = sub_1000A61AC((void *)(v8 > 1), v9, 1, v2);
  }
  v2[2]  = v9;
  unint64_t v10 = &v2[2 * v5];
  *((_WORD *)v10 + 16)  = 1281;
  v10[5]  = v7;
  uint64_t v11 = swift_allocObject(v0, 496LL, 7LL);
  *(_OWORD *)(v11 + 16)  = xmmword_10034EE50;
  *(_DWORD *)(v11 + 32)  = 3;
  *(void *)(v11 + 40)  = &off_1003D3620;
  *(_DWORD *)(v11 + 48)  = 11;
  *(void *)(v11 + 56)  = &off_1003D3648;
  *(_DWORD *)(v11 + 64)  = 19;
  *(void *)(v11 + 72)  = &off_1003D3670;
  *(_DWORD *)(v11 + 80)  = 27;
  *(void *)(v11 + 88)  = &off_1003D3698;
  *(_DWORD *)(v11 + 96)  = 35;
  *(void *)(v11 + 104)  = &off_1003D36C0;
  *(_DWORD *)(v11 + 112)  = 43;
  *(void *)(v11 + 120)  = &off_1003D36E8;
  *(_DWORD *)(v11 + 128)  = 51;
  *(void *)(v11 + 136)  = &off_1003D3710;
  *(_DWORD *)(v11 + 144)  = 59;
  *(void *)(v11 + 152)  = &off_1003D3738;
  *(_DWORD *)(v11 + 160)  = 67;
  *(void *)(v11 + 168)  = &off_1003D3760;
  *(_DWORD *)(v11 + 176)  = 75;
  *(void *)(v11 + 184)  = &off_1003D3788;
  *(_DWORD *)(v11 + 192)  = 83;
  *(void *)(v11 + 200)  = &off_1003D37B0;
  *(_DWORD *)(v11 + 208)  = 91;
  *(void *)(v11 + 216)  = &off_1003D37D8;
  *(_DWORD *)(v11 + 224)  = 99;
  *(void *)(v11 + 232)  = &off_1003D3800;
  *(_DWORD *)(v11 + 240)  = 107;
  *(void *)(v11 + 248)  = &off_1003D3828;
  *(_DWORD *)(v11 + 256)  = 115;
  *(void *)(v11 + 264)  = &off_1003D3850;
  *(_DWORD *)(v11 + 272)  = 123;
  *(void *)(v11 + 280)  = &off_1003D3878;
  *(_DWORD *)(v11 + 288)  = 131;
  *(void *)(v11 + 296)  = &off_1003D38A0;
  *(_DWORD *)(v11 + 304)  = 139;
  *(void *)(v11 + 312)  = &off_1003D38C8;
  *(_DWORD *)(v11 + 320)  = 147;
  *(void *)(v11 + 328)  = &off_1003D38F0;
  *(_DWORD *)(v11 + 336)  = 155;
  *(void *)(v11 + 344)  = &off_1003D3918;
  *(_DWORD *)(v11 + 352)  = 163;
  *(void *)(v11 + 360)  = &off_1003D3940;
  *(_DWORD *)(v11 + 368)  = 171;
  *(void *)(v11 + 376)  = &off_1003D3968;
  *(_DWORD *)(v11 + 384)  = 179;
  *(void *)(v11 + 392)  = &off_1003D3990;
  *(_DWORD *)(v11 + 400)  = 187;
  *(void *)(v11 + 408)  = &off_1003D39B8;
  *(_DWORD *)(v11 + 416)  = 195;
  *(void *)(v11 + 424)  = &off_1003D39E0;
  *(_DWORD *)(v11 + 432)  = 203;
  *(void *)(v11 + 440)  = &off_1003D3A08;
  *(_DWORD *)(v11 + 448)  = 211;
  *(void *)(v11 + 456)  = &off_1003D3A30;
  *(_DWORD *)(v11 + 464)  = 219;
  *(void *)(v11 + 472)  = &off_1003D3A58;
  *(_DWORD *)(v11 + 480)  = 227;
  *(void *)(v11 + 488)  = &off_1003D3A80;
  unint64_t v13 = v2[2];
  unint64_t v12 = v2[3];
  if (v13 >= v12 >> 1) {
    unint64_t v2 = sub_1000A61AC((void *)(v12 > 1), v13 + 1, 1, v2);
  }
  v2[2]  = v13 + 1;
  uint64_t v14 = &v2[2 * v13];
  *((_WORD *)v14 + 16)  = 2;
  v14[5]  = v11;
  uint64_t v15 = swift_allocObject(v0, 496LL, 7LL);
  *(_OWORD *)(v15 + 16)  = xmmword_10034EE50;
  *(_DWORD *)(v15 + 32)  = 3;
  *(void *)(v15 + 40)  = &off_1003D3AA8;
  *(_DWORD *)(v15 + 48)  = 11;
  *(void *)(v15 + 56)  = &off_1003D3AD0;
  *(_DWORD *)(v15 + 64)  = 19;
  *(void *)(v15 + 72)  = &off_1003D3AF8;
  *(_DWORD *)(v15 + 80)  = 27;
  *(void *)(v15 + 88)  = &off_1003D3B20;
  *(_DWORD *)(v15 + 96)  = 35;
  *(void *)(v15 + 104)  = &off_1003D3B48;
  *(_DWORD *)(v15 + 112)  = 43;
  *(void *)(v15 + 120)  = &off_1003D3B70;
  *(_DWORD *)(v15 + 128)  = 51;
  *(void *)(v15 + 136)  = &off_1003D3B98;
  *(_DWORD *)(v15 + 144)  = 59;
  *(void *)(v15 + 152)  = &off_1003D3BC0;
  *(_DWORD *)(v15 + 160)  = 67;
  *(void *)(v15 + 168)  = &off_1003D3BE8;
  *(_DWORD *)(v15 + 176)  = 75;
  *(void *)(v15 + 184)  = &off_1003D3C10;
  *(_DWORD *)(v15 + 192)  = 83;
  *(void *)(v15 + 200)  = &off_1003D3C38;
  *(_DWORD *)(v15 + 208)  = 91;
  *(void *)(v15 + 216)  = &off_1003D3C60;
  *(_DWORD *)(v15 + 224)  = 99;
  *(void *)(v15 + 232)  = &off_1003D3C88;
  *(_DWORD *)(v15 + 240)  = 107;
  *(void *)(v15 + 248)  = &off_1003D3CB0;
  *(_DWORD *)(v15 + 256)  = 115;
  *(void *)(v15 + 264)  = &off_1003D3CD8;
  *(_DWORD *)(v15 + 272)  = 123;
  *(void *)(v15 + 280)  = &off_1003D3D00;
  *(_DWORD *)(v15 + 288)  = 131;
  *(void *)(v15 + 296)  = &off_1003D3D28;
  *(_DWORD *)(v15 + 304)  = 139;
  *(void *)(v15 + 312)  = &off_1003D3D50;
  *(_DWORD *)(v15 + 320)  = 147;
  *(void *)(v15 + 328)  = &off_1003D3D78;
  *(_DWORD *)(v15 + 336)  = 155;
  *(void *)(v15 + 344)  = &off_1003D3DA0;
  *(_DWORD *)(v15 + 352)  = 163;
  *(void *)(v15 + 360)  = &off_1003D3DC8;
  *(_DWORD *)(v15 + 368)  = 171;
  *(void *)(v15 + 376)  = &off_1003D3DF0;
  *(_DWORD *)(v15 + 384)  = 179;
  *(void *)(v15 + 392)  = &off_1003D3E18;
  *(_DWORD *)(v15 + 400)  = 187;
  *(void *)(v15 + 408)  = &off_1003D3E40;
  *(_DWORD *)(v15 + 416)  = 195;
  *(void *)(v15 + 424)  = &off_1003D3E68;
  *(_DWORD *)(v15 + 432)  = 203;
  *(void *)(v15 + 440)  = &off_1003D3E90;
  *(_DWORD *)(v15 + 448)  = 211;
  *(void *)(v15 + 456)  = &off_1003D3EB8;
  *(_DWORD *)(v15 + 464)  = 219;
  *(void *)(v15 + 472)  = &off_1003D3EE0;
  *(_DWORD *)(v15 + 480)  = 227;
  *(void *)(v15 + 488)  = &off_1003D3F08;
  unint64_t v17 = v2[2];
  unint64_t v16 = v2[3];
  if (v17 >= v16 >> 1) {
    unint64_t v2 = sub_1000A61AC((void *)(v16 > 1), v17 + 1, 1, v2);
  }
  v2[2]  = v17 + 1;
  unint64_t v18 = &v2[2 * v17];
  *((_WORD *)v18 + 16)  = 258;
  v18[5]  = v15;
  uint64_t v19 = swift_allocObject(v0, 256LL, 7LL);
  *(_OWORD *)(v19 + 16)  = xmmword_10034EE60;
  *(_DWORD *)(v19 + 32)  = 7;
  *(void *)(v19 + 40)  = &off_1003D3F30;
  *(_DWORD *)(v19 + 48)  = 23;
  *(void *)(v19 + 56)  = &off_1003D3F60;
  *(_DWORD *)(v19 + 64)  = 39;
  *(void *)(v19 + 72)  = &off_1003D3F90;
  *(_DWORD *)(v19 + 80)  = 55;
  *(void *)(v19 + 88)  = &off_1003D3FC0;
  *(_DWORD *)(v19 + 96)  = 71;
  *(void *)(v19 + 104)  = &off_1003D3FF0;
  *(_DWORD *)(v19 + 112)  = 87;
  *(void *)(v19 + 120)  = &off_1003D4020;
  *(_DWORD *)(v19 + 128)  = 103;
  *(void *)(v19 + 136)  = &off_1003D4050;
  *(_DWORD *)(v19 + 144)  = 119;
  *(void *)(v19 + 152)  = &off_1003D4080;
  *(_DWORD *)(v19 + 160)  = 135;
  *(void *)(v19 + 168)  = &off_1003D40B0;
  *(_DWORD *)(v19 + 176)  = 151;
  *(void *)(v19 + 184)  = &off_1003D40E0;
  *(_DWORD *)(v19 + 192)  = 167;
  *(void *)(v19 + 200)  = &off_1003D4110;
  *(_DWORD *)(v19 + 208)  = 183;
  *(void *)(v19 + 216)  = &off_1003D4140;
  *(_DWORD *)(v19 + 224)  = 199;
  *(void *)(v19 + 232)  = &off_1003D4170;
  *(_DWORD *)(v19 + 240)  = 215;
  *(void *)(v19 + 248)  = &off_1003D41A0;
  unint64_t v21 = v2[2];
  unint64_t v20 = v2[3];
  if (v21 >= v20 >> 1) {
    unint64_t v2 = sub_1000A61AC((void *)(v20 > 1), v21 + 1, 1, v2);
  }
  v2[2]  = v21 + 1;
  unint64_t v22 = &v2[2 * v21];
  *((_WORD *)v22 + 16)  = 1026;
  v22[5]  = v19;
  uint64_t v23 = swift_allocObject(v0, 144LL, 7LL);
  *(_OWORD *)(v23 + 16)  = xmmword_100349740;
  *(_DWORD *)(v23 + 32)  = 15;
  *(void *)(v23 + 40)  = &off_1003D41D0;
  *(_DWORD *)(v23 + 48)  = 47;
  *(void *)(v23 + 56)  = &off_1003D4210;
  *(_DWORD *)(v23 + 64)  = 79;
  *(void *)(v23 + 72)  = &off_1003D4250;
  *(_DWORD *)(v23 + 80)  = 111;
  *(void *)(v23 + 88)  = &off_1003D4290;
  *(_DWORD *)(v23 + 96)  = 143;
  *(void *)(v23 + 104)  = &off_1003D42D0;
  *(_DWORD *)(v23 + 112)  = 175;
  *(void *)(v23 + 120)  = &off_1003D4310;
  *(_DWORD *)(v23 + 128)  = 207;
  *(void *)(v23 + 136)  = &off_1003D4350;
  unint64_t v25 = v2[2];
  unint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    unint64_t v2 = sub_1000A61AC((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2]  = v25 + 1;
  uint64_t v26 = &v2[2 * v25];
  *((_WORD *)v26 + 16)  = 1282;
  v26[5]  = v23;
  return v2;
}

Swift::Int sub_1001885C8(Swift::UInt32 a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    unint64_t v5 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      Swift::UInt32 v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }

    while (v4);
  }

  return Hasher._finalize()();
}

Swift::Int sub_100188644()
{
  return sub_1001885C8(*(_DWORD *)v0, *(void *)(v0 + 8));
}

void sub_100188650()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    unint64_t v3 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      Swift::UInt32 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }

    while (v2);
  }

Swift::Int sub_1001886A8(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    unint64_t v5 = (Swift::UInt32 *)(v3 + 32);
    do
    {
      Swift::UInt32 v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }

    while (v4);
  }

  return Hasher._finalize()();
}

BOOL sub_100188720(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && sub_100079910(*(void *)(a1 + 8), *(void *)(a2 + 8));
}

uint64_t NonNANOperatingChannelInformation.init(channel:)(uint64_t a1)
{
  int v1 = a1;
  unsigned __int8 v2 = Channel.operatingClass.getter(a1 & 0xFFFFFFFFFFFFLL);
  if ((v1 & 0xFFFFFF00) == 0) {
    return v2 | (v1 << 8);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001887C8(unint64_t a1, unint64_t a2)
{
  if ((_DWORD)a1 != (_DWORD)a2
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0LL;
  }

  switch(BYTE5(a1))
  {
    case 2:
      if (BYTE5(a2) != 2) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 3:
      if (BYTE5(a2) != 3) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 4:
      if (BYTE5(a2) != 4) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 5:
      if (BYTE5(a2) != 5) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    case 6:
      if (BYTE5(a2) != 6) {
        return 0LL;
      }
      uint64_t result = 1LL;
      break;
    default:
      uint64_t result = 1LL;
      break;
  }

  return result;
}

uint64_t sub_1001888B0(unint64_t a1, unint64_t a2)
{
  if (((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) < ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC)
    || a1 < a2)
  {
    return 1LL;
  }

  int v6 = BYTE5(a2);
  uint64_t v7 = sub_100002274(&qword_100407088);
  if (v6 == 2) {
    return 0LL;
  }
  if (BYTE5(a1) == 2) {
    return 1LL;
  }
  if (v6 == 3) {
    return 0LL;
  }
  if (BYTE5(a1) == 3) {
    return 1LL;
  }
  if (v6 == 4) {
    return 0LL;
  }
  if (BYTE5(a1) == 4) {
    return 1LL;
  }
  if (v6 == 5) {
    return 0LL;
  }
  if (BYTE5(a1) == 5) {
    return 1LL;
  }
  if (v6 == 6) {
    return 0LL;
  }
  if (BYTE5(a1) == 6) {
    return 1LL;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
  __break(1u);
  return result;
}

unint64_t sub_1001889D8(unsigned int a1)
{
  if (qword_100404370 != -1) {
    swift_once(&qword_100404370, sub_10018635C);
  }
  if (sub_10008F720(a1, (uint64_t)off_10040A198))
  {
    char v2 = 0;
    char v3 = 3;
LABEL_13:
    unsigned __int8 v5 = v2;
    unsigned __int8 v6 = v3;
    sub_100185C58();
    return a1 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40);
  }

  if (qword_100404378 != -1) {
    swift_once(&qword_100404378, sub_100186380);
  }
  if (sub_10008F720(a1, (uint64_t)off_10040A1A0))
  {
    char v2 = 1;
    char v3 = 4;
    goto LABEL_13;
  }

  if (qword_100404380 != -1) {
    swift_once(&qword_100404380, sub_1001863A4);
  }
  if (sub_10008F720(a1, (uint64_t)off_10040A1A8))
  {
    char v2 = 2;
    char v3 = 5;
    goto LABEL_13;
  }

  return 0x300000000LL;
}

uint64_t _s7CoreP2P7ChannelV7isValid7channel2on4withSbs6UInt32V_AC4BandOAA9BandwidthOtFZ_0( unsigned int a1, char a2, int a3)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (qword_100404378 != -1) {
        swift_once(&qword_100404378, sub_100186380);
      }
      unsigned __int8 v5 = (uint64_t *)&off_10040A1A0;
      unsigned __int8 v6 = &off_1003D6B00;
    }

    else
    {
      if (qword_100404380 != -1) {
        swift_once(&qword_100404380, sub_1001863A4);
      }
      unsigned __int8 v5 = (uint64_t *)&off_10040A1A8;
      unsigned __int8 v6 = &off_1003D6B28;
    }
  }

  else
  {
    if (qword_100404370 != -1) {
      swift_once(&qword_100404370, sub_10018635C);
    }
    unsigned __int8 v5 = (uint64_t *)&off_10040A198;
    unsigned __int8 v6 = &off_1003D6AD8;
  }

  uint64_t v7 = *v5;
  unint64_t v8 = sub_1000053A8((uint64_t)v6);
  swift_bridgeObjectRetain(v7);
  BOOL v9 = sub_10008F720(a1, v7);
  swift_bridgeObjectRelease(v7);
  if (v9) {
    char v10 = sub_10008F7EC(a3, (uint64_t)v8);
  }
  else {
    char v10 = 0;
  }
  swift_bridgeObjectRelease(v8);
  return v10 & 1;
}

uint64_t sub_100188C3C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A228);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned __int8 v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100189340();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Channel.CodingKeys,  &type metadata for Channel.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  BYTE3(v18)  = 0;
  unsigned int v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v18 + 3, v3);
  BYTE1(v18)  = 1;
  unint64_t v11 = sub_100189854();
  KeyedDecodingContainer.decode<A>(_:forKey:)( (uint64_t *)((char *)&v18 + 2),  &type metadata for Channel.Band,  (char *)&v18 + 1,  v3,  &type metadata for Channel.Band,  v11);
  uint64_t v12 = BYTE2(v18);
  char v17 = 2;
  unint64_t v13 = sub_100189898();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for Bandwidth,  &v17,  v3,  &type metadata for Bandwidth,  v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v14 = v18;
  sub_100002AC4(a1);
  return v10 | (unint64_t)(v12 << 32) | (v14 << 40);
}

unint64_t sub_100188DE4(unint64_t a1)
{
  if (qword_1004043B8 != -1) {
LABEL_85:
  }
    swift_once(&qword_1004043B8, sub_100187378);
  uint64_t v2 = *((void *)off_10040A1B0 + 2);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  unsigned int v4 = (0x801004u >> (8 * BYTE4(a1))) & 0xFFC;
  for (i  = (unsigned __int8 *)off_10040A1B0 + 32; ; i += 16)
  {
    uint64_t v6 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_85;
    }

LABEL_80:
    if (v22 < 0x100)
    {
      uint64_t v36 = 1LL << v23;
      return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
    }

    goto LABEL_86;
  }

  unint64_t v25 = 0LL;
  uint64_t v26 = v24 - 2;
  do
  {
    if (v26 == v25) {
      goto LABEL_43;
    }
    int v27 = *(_DWORD *)(v9 + 4 * v25++ + 40);
  }

  while (v27 != (_DWORD)v22);
  if (v25 > 0xE) {
    goto LABEL_43;
  }
  swift_bridgeObjectRelease(v9);
  char v37 = v25 + 1;
LABEL_79:
  uint64_t v22 = 1LL << v37;
  uint64_t v36 = 1LL << v23;
  return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
}

unint64_t sub_1001892B8()
{
  unint64_t result = qword_10040A1C0;
  if (!qword_10040A1C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_10040A1C0);
  }

  return result;
}

unint64_t sub_1001892FC()
{
  unint64_t result = qword_10040A1C8;
  if (!qword_10040A1C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_10040A1C8);
  }

  return result;
}

unint64_t sub_100189340()
{
  unint64_t result = qword_10040A1D8;
  if (!qword_10040A1D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034ED60, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A1D8);
  }

  return result;
}

unint64_t sub_100189384()
{
  unint64_t result = qword_10040A1E0;
  if (!qword_10040A1E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_10040A1E0);
  }

  return result;
}

unint64_t sub_1001893C8()
{
  unint64_t result = qword_10040A1E8;
  if (!qword_10040A1E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Bandwidth, &type metadata for Bandwidth);
    atomic_store(result, (unint64_t *)&qword_10040A1E8);
  }

  return result;
}

unint64_t sub_100189410()
{
  unint64_t result = qword_10040A1F0;
  if (!qword_10040A1F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_10040A1F0);
  }

  return result;
}

unint64_t sub_100189458()
{
  unint64_t result = qword_10040A1F8;
  if (!qword_10040A1F8)
  {
    uint64_t v1 = sub_1000022F8(&qword_10040A200);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10040A1F8);
  }

  return result;
}

unint64_t sub_1001894A8()
{
  unint64_t result = qword_10040FD30;
  if (!qword_10040FD30)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Channel, &type metadata for Channel);
    atomic_store(result, (unint64_t *)&qword_10040FD30);
  }

  return result;
}

void *sub_1001894EC()
{
  return &protocol witness table for UInt32;
}

ValueMetadata *type metadata accessor for Channel()
{
  return &type metadata for Channel;
}

ValueMetadata *type metadata accessor for Channel.Band()
{
  return &type metadata for Channel.Band;
}

uint64_t _s7CoreP2P7ChannelV4BandOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100189568 + 4 * byte_10034E944[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10018959C + 4 * byte_10034E93F[v4]))();
}

uint64_t sub_10018959C(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001895A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001895ACLL);
  }
  return result;
}

uint64_t sub_1001895B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001895C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001895C4(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001895CC(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for Channel.CodingKeys()
{
  return &type metadata for Channel.CodingKeys;
}

unint64_t sub_1001895EC()
{
  unint64_t result = qword_10040A208;
  if (!qword_10040A208)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034ED38, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A208);
  }

  return result;
}

unint64_t sub_100189634()
{
  unint64_t result = qword_10040A210;
  if (!qword_10040A210)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034ECA8, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A210);
  }

  return result;
}

unint64_t sub_10018967C()
{
  unint64_t result = qword_10040A218;
  if (!qword_10040A218)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034ECD0, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A218);
  }

  return result;
}

uint64_t sub_1001896C0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6C656E6E616863LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C656E6E616863LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1684955490 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684955490LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x74646977646E6162LL && a2 == 0xE900000000000068LL)
  {
    swift_bridgeObjectRelease(0xE900000000000068LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74646977646E6162LL, 0xE900000000000068LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

unint64_t sub_100189810()
{
  unint64_t result = qword_10040A220;
  if (!qword_10040A220)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_10040A220);
  }

  return result;
}

unint64_t sub_100189854()
{
  unint64_t result = qword_10040A230;
  if (!qword_10040A230)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_10040A230);
  }

  return result;
}

unint64_t sub_100189898()
{
  unint64_t result = qword_10040A238;
  if (!qword_10040A238)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Bandwidth, &type metadata for Bandwidth);
    atomic_store(result, (unint64_t *)&qword_10040A238);
  }

  return result;
}

uint64_t assignWithCopy for Channel.ChannelBitmap(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for Channel.ChannelBitmap()
{
  return &type metadata for Channel.ChannelBitmap;
}

unint64_t sub_100189930()
{
  unint64_t result = qword_10040A248;
  if (!qword_10040A248)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034EDC0, &type metadata for Channel.ChannelBitmap);
    atomic_store(result, (unint64_t *)&qword_10040A248);
  }

  return result;
}

uint64_t sub_100189974(uint64_t a1, unint64_t *a2)
{
  uint64_t v5 = sub_100002274(&qword_10040A328);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (uint64_t *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_100002274(&qword_10040A330);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = ~v12;
  uint64_t v15 = -v12;
  v19[0]  = a1;
  v19[1]  = a1 + 64;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  else {
    uint64_t v16 = -1LL;
  }
  v19[2]  = v14;
  v19[3]  = 0LL;
  v19[4]  = v16 & v13;
  v19[5]  = 0LL;
  swift_bridgeObjectRetain(a1);
  sub_100189E3C(v11);
  uint64_t v17 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48);
  while (v17(v11, 1LL, v5) != 1)
  {
    sub_1000586C0((uint64_t)v11, (uint64_t)v8, &qword_10040A328);
    sub_10018BC30(v8, a2);
    sub_1000225EC((uint64_t)v8, &qword_10040A328);
    if (v2) {
      break;
    }
    sub_100189E3C(v11);
  }

  return sub_100057324(v19[0]);
}

uint64_t sub_100189B08(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v24 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v7 = &type metadata for Any[8];
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v10 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    if (v10 < v25)
    {
      unint64_t v11 = *(void *)(v24 + 8 * v10);
      ++v6;
      if (v11) {
        goto LABEL_22;
      }
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v25) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v24 + 8 * v6);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v6 = v10 + 2;
      if (v10 + 2 >= v25) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v24 + 8 * v6);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v6 = v10 + 3;
      if (v10 + 3 >= v25) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v24 + 8 * v6);
      if (v11)
      {
LABEL_22:
        unint64_t v4 = (v11 - 1) & v11;
        for (i  = __clz(__rbit64(v11)) + (v6 << 6); ; i  = v8 | (v6 << 6))
        {
          char v13 = *(_BYTE *)(*(void *)(v1 + 48) + i);
          sub_100002AE4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v31 + 8);
          LOBYTE(v31[0])  = v13;
          v29[0]  = v31[0];
          v29[1]  = v31[1];
          uint64_t v30 = v32;
          v27[0]  = v13;
          sub_100002AE4((uint64_t)v29 + 8, (uint64_t)v28);
          unint64_t v14 = sub_100021774();
          if (swift_dynamicCast(&v33, v28, v7, v14, 6LL))
          {
            uint64_t v15 = v1;
            uint64_t v16 = v33;
            unsigned __int8 v17 = v29[0];
            v27[0]  = v29[0];
            sub_100002AE4((uint64_t)v29 + 8, (uint64_t)v28);
            uint64_t v18 = sub_10018A6BC(v17);
            uint64_t v20 = v19;
            sub_100002AC4(v28);
            sub_1000225EC((uint64_t)v29, &qword_10040A338);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v26);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000A7604(0LL, v26[2] + 1LL, 1, v26);
              uint64_t v26 = (void *)result;
            }

            unint64_t v22 = v26[2];
            unint64_t v21 = v26[3];
            if (v22 >= v21 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000A7604((void *)(v21 > 1), v22 + 1, 1, v26);
              uint64_t v26 = (void *)result;
            }

            void v26[2] = v22 + 1;
            char v23 = &v26[3 * v22];
            v23[4]  = v18;
            v23[5]  = v20;
            v23[6]  = v16;
            uint64_t v1 = v15;
            uint64_t v7 = &type metadata for Any[8];
            if (!v4) {
              goto LABEL_7;
            }
          }

          else
          {
            v27[0]  = v29[0];
            sub_100002AE4((uint64_t)v29 + 8, (uint64_t)v28);
            sub_1000225EC((uint64_t)v27, &qword_10040A338);
            uint64_t result = sub_1000225EC((uint64_t)v29, &qword_10040A338);
            if (!v4) {
              goto LABEL_7;
            }
          }

uint64_t sub_100189E3C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100002274(&qword_10040A328);
  uint64_t v46 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v42 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100002274(&qword_1004063D0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v12 = (uint64_t *)sub_100002274(&qword_1004063D8);
  uint64_t v13 = *(v12 - 1);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v1;
  uint64_t v17 = v1[1];
  uint64_t v19 = v1[2];
  int64_t v18 = v1[3];
  unint64_t v20 = v1[4];
  unint64_t v47 = a1;
  int64_t v41 = v15;
  if (v20)
  {
    uint64_t v43 = v17;
    uint64_t v44 = v19;
    uint64_t v45 = v3;
    uint64_t v21 = (v20 - 1) & v20;
    int64_t v48 = v18;
    unint64_t v22 = __clz(__rbit64(v20)) | (v18 << 6);
LABEL_3:
    uint64_t v23 = *(void *)(v16 + 48) - v22 + 8 * v22;
    __int16 v24 = *(_WORD *)(v23 + 4);
    char v25 = *(_BYTE *)(v23 + 6);
    uint64_t v26 = *(void *)(v16 + 56) + *(void *)(v6 + 72) * v22;
    int v27 = *(_DWORD *)v23;
    i  = v16;
    sub_10018DD58(v26, (uint64_t)v8);
    uint64_t v29 = (uint64_t)&v11[*((int *)v12 + 12)];
    *(_DWORD *)unint64_t v11 = v27;
    *((_WORD *)v11 + 2)  = v24;
    void v11[6] = v25;
    sub_10018F100((uint64_t)v8, v29);
    uint64_t v30 = 0LL;
    uint64_t v19 = v44;
    uint64_t v3 = v45;
    uint64_t v17 = v43;
    goto LABEL_4;
  }

  int64_t v34 = v18 + 1;
  if (__OFADD__(v18, 1LL)) {
    goto LABEL_33;
  }
  int64_t v37 = (unint64_t)(v19 + 64) >> 6;
  if (v34 >= v37)
  {
    int64_t v48 = v18;
    uint64_t v21 = 0LL;
    uint64_t v30 = 1LL;
    i  = v16;
    goto LABEL_4;
  }

  unint64_t v38 = *(void *)(v17 + 8 * v34);
  if (v38)
  {
    uint64_t v45 = v3;
LABEL_13:
    uint64_t v43 = v17;
    uint64_t v44 = v19;
    uint64_t v21 = (v38 - 1) & v38;
    unint64_t v22 = __clz(__rbit64(v38)) + (v34 << 6);
    int64_t v48 = v34;
    goto LABEL_3;
  }

  int64_t v39 = v18 + 2;
  if (v18 + 2 >= v37)
  {
    uint64_t v21 = 0LL;
    uint64_t v30 = 1LL;
    int64_t v48 = v18 + 1;
    i  = v16;
    goto LABEL_4;
  }

  unint64_t v38 = *(void *)(v17 + 8 * v39);
  if (v38)
  {
LABEL_17:
    uint64_t v45 = v3;
    int64_t v34 = v39;
    goto LABEL_13;
  }

  if (v18 + 3 >= v37)
  {
LABEL_30:
    uint64_t v21 = 0LL;
    uint64_t v30 = 1LL;
    int64_t v48 = v39;
    i  = v16;
    goto LABEL_4;
  }

  unint64_t v38 = *(void *)(v17 + 8 * (v18 + 3));
  if (v38)
  {
    uint64_t v45 = v3;
    int64_t v34 = v18 + 3;
    goto LABEL_13;
  }

  int64_t v39 = v18 + 4;
  if (v18 + 4 < v37)
  {
    unint64_t v38 = *(void *)(v17 + 8 * v39);
    if (v38) {
      goto LABEL_17;
    }
    int64_t v34 = v18 + 5;
    if (v18 + 5 < v37)
    {
      uint64_t v45 = v3;
      unint64_t v38 = *(void *)(v17 + 8 * v34);
      if (!v38)
      {
        int64_t v34 = v37 - 1;
        uint64_t v40 = v18 + 6;
        do
        {
          if (v37 == v40) {
            goto LABEL_34;
          }
          unint64_t v38 = *(void *)(v17 + 8 * v40++);
        }

        while (!v38);
        int64_t v34 = v40 - 1;
      }

      goto LABEL_13;
    }

    goto LABEL_30;
  }

  uint64_t v21 = 0LL;
  uint64_t v30 = 1LL;
  int64_t v48 = v18 + 3;
  for (i  = v16; ; i  = v16)
  {
LABEL_4:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v13 + 56))(v11, v30, 1LL, v12);
    *uint64_t v1 = i;
    v1[1]  = v17;
    int64_t v31 = v48;
    v1[2]  = v19;
    v1[3]  = v31;
    __int128 v1[4] = v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_1000225EC((uint64_t)v11, &qword_1004063D0);
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1LL, 1LL, v3);
    }

    int64_t v12 = &qword_1004063D8;
    uint64_t v33 = (uint64_t)v41;
    sub_1000586C0((uint64_t)v11, (uint64_t)v41, &qword_1004063D8);
    unint64_t v11 = &v42[*(int *)(v3 + 48)];
    uint64_t v17 = v1[5];
    sub_1000586C0(v33, (uint64_t)v11, &qword_1004063D8);
    int64_t v34 = v17 + 1;
    if (!__OFADD__(v17, 1LL)) {
      break;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    uint64_t v21 = 0LL;
    uint64_t v30 = 1LL;
    int64_t v48 = v34;
    uint64_t v3 = v45;
  }

  v1[5]  = v34;
  char v35 = v47;
  uint64_t v36 = (uint64_t)v47 + *(int *)(v3 + 48);
  *unint64_t v47 = v17;
  sub_1000586C0((uint64_t)v11, v36, &qword_1004063D8);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v35, 0LL, 1LL, v3);
}

unint64_t NANCoreAnalyticsMetrics.peerAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 33) | ((unint64_t)*(unsigned int *)(v0 + 35) << 16);
}

uint64_t NANCoreAnalyticsMetrics.peerAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 33)  = result;
  *(_BYTE *)(v1 + 35)  = BYTE2(result);
  *(_BYTE *)(v1 + 36)  = BYTE3(result);
  *(_BYTE *)(v1 + 37)  = BYTE4(result);
  *(_BYTE *)(v1 + 38)  = BYTE5(result);
  return result;
}

uint64_t NANCoreAnalyticsMetrics.internetSharingStatistics.getter()
{
  uint64_t v1 = *(void *)(v0 + 344);
  swift_bridgeObjectRetain(*(void *)(v0 + 352));
  return v1;
}

uint64_t NANCoreAnalyticsMetrics.internetSharingStatistics.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v3 + 352));
  *(void *)(v3 + 344)  = a1;
  *(void *)(v3 + 352)  = a2;
  *(_BYTE *)(v3 + 360)  = a3;
  return result;
}

uint64_t (*NANCoreAnalyticsMetrics.internetSharingStatistics.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANCoreAnalyticsMetrics.hash(into:)(__int128 *a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_DWORD *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 4) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 5) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 6) & 1);
  Hasher._combine(_:)(*(_DWORD *)(v2 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 12));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 16));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 17));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 18));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 19));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 20));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 24));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 28));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 32));
  Swift::UInt8 v4 = *(_BYTE *)(v2 + 34);
  Swift::UInt8 v5 = *(_BYTE *)(v2 + 35);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 36);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 37);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 38);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 33));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_DWORD *)(v2 + 40));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 44));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 48));
  Hasher._combine(_:)(*(void *)(v2 + 56));
  Hasher._combine(_:)(*(void *)(v2 + 64));
  Hasher._combine(_:)(*(void *)(v2 + 72));
  Hasher._combine(_:)(*(void *)(v2 + 80));
  Hasher._combine(_:)(*(void *)(v2 + 88));
  Hasher._combine(_:)(*(void *)(v2 + 96));
  Hasher._combine(_:)(*(void *)(v2 + 104));
  Hasher._combine(_:)(*(void *)(v2 + 112));
  Hasher._combine(_:)(*(void *)(v2 + 120));
  Hasher._combine(_:)(*(void *)(v2 + 128));
  Hasher._combine(_:)(*(void *)(v2 + 136));
  Hasher._combine(_:)(*(void *)(v2 + 144));
  Hasher._combine(_:)(*(void *)(v2 + 152));
  Hasher._combine(_:)(*(void *)(v2 + 160));
  Hasher._combine(_:)(*(void *)(v2 + 168));
  Hasher._combine(_:)(*(void *)(v2 + 176));
  Hasher._combine(_:)(*(void *)(v2 + 184));
  Hasher._combine(_:)(*(void *)(v2 + 192));
  Hasher._combine(_:)(*(void *)(v2 + 200));
  Hasher._combine(_:)(*(void *)(v2 + 208));
  Hasher._combine(_:)(*(void *)(v2 + 216));
  Hasher._combine(_:)(*(void *)(v2 + 224));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 232));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 240));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 248));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 256));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 264));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 272));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 280));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 288));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 296));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 304));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 312));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 320));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 328));
  sub_100082AA4((uint64_t)a1, *(void *)(v2 + 336));
  uint64_t v9 = *(void *)(v2 + 352);
  if (v9)
  {
    uint64_t v10 = *(void *)(v2 + 344);
    Swift::UInt8 v11 = *(_BYTE *)(v2 + 360) & 1;
    Hasher._combine(_:)(1u);
    if (v10 == 2LL)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10 & 1);
    }

    Hasher._combine(_:)((BYTE1(v10) & 1) + 1);
    Hasher._combine(_:)(BYTE2(v10) & 1);
    swift_bridgeObjectRetain(v9);
    sub_10006C098(a1, v9);
    Hasher._combine(_:)(v11);
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

Swift::Int NANCoreAnalyticsMetrics.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10018A630(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10018A668(void *__src, const void *a2)
{
  return _s7CoreP2P23NANCoreAnalyticsMetricsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t sub_10018A6BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10018A6FC + 4 * word_10034EE70[a1]))( 0x5F5050485F4E414ELL,  0xEF4E4F4953524556LL);
}

unint64_t sub_10018A6FC()
{
  return 0xD000000000000019LL;
}

uint64_t NANCoreAnalyticsMetrics.eventPayload.getter()
{
  uint64_t v1 = v0;
  int v2 = *v0;
  v111  = &type metadata for UInt32;
  LODWORD(v110)  = v2;
  sub_100022594(&v110, &v108);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 0LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v4 = *((_BYTE *)v0 + 4);
  v111  = &type metadata for Bool;
  LOBYTE(v110)  = v4;
  sub_100022594(&v110, &v108);
  char v5 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 1LL, v5);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v6 = *((_BYTE *)v0 + 5);
  v111  = &type metadata for Bool;
  LOBYTE(v110)  = v6;
  sub_100022594(&v110, &v108);
  char v7 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 2LL, v7);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v8 = *((_BYTE *)v0 + 6);
  v111  = &type metadata for Bool;
  LOBYTE(v110)  = v8;
  sub_100022594(&v110, &v108);
  char v9 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 3LL, v9);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v10 = v0[2];
  v111  = &type metadata for UInt32;
  LODWORD(v110)  = v10;
  sub_100022594(&v110, &v108);
  char v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 5LL, v11);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v12 = v0[3];
  v111  = &type metadata for UInt32;
  LODWORD(v110)  = v12;
  sub_100022594(&v110, &v108);
  char v13 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 6LL, v13);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v14 = *((_BYTE *)v0 + 16);
  v111  = &type metadata for UInt8;
  LOBYTE(v110)  = v14;
  sub_100022594(&v110, &v108);
  char v15 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 7LL, v15);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v16 = *((_BYTE *)v0 + 17);
  v111  = &type metadata for UInt8;
  LOBYTE(v110)  = v16;
  sub_100022594(&v110, &v108);
  char v17 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 8LL, v17);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v18 = *((_BYTE *)v0 + 32);
  v111  = &type metadata for UInt8;
  LOBYTE(v110)  = v18;
  sub_100022594(&v110, &v108);
  char v19 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 10LL, v19);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v20 = WiFiAddress.description.getter(*(unsigned __int16 *)((char *)v1 + 33) | ((unint64_t)*(unsigned int *)((char *)v1 + 35) << 16));
  v111  = &type metadata for String;
  *(void *)&__int128 v110 = v20;
  *((void *)&v110 + 1)  = v21;
  sub_100022594(&v110, &v108);
  char v22 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 11LL, v22);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v23 = v0[10];
  v111  = &type metadata for Int32;
  LODWORD(v110)  = v23;
  sub_100022594(&v110, &v108);
  char v24 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 12LL, v24);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v25 = v0[11];
  v111  = &type metadata for Int32;
  LODWORD(v110)  = v25;
  sub_100022594(&v110, &v108);
  char v26 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 13LL, v26);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v27 = v0[12];
  v111  = &type metadata for UInt32;
  LODWORD(v110)  = v27;
  sub_100022594(&v110, &v108);
  char v28 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 56LL, v28);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v29 = *((void *)v0 + 7);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v29;
  sub_100022594(&v110, &v108);
  char v30 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 15LL, v30);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v31 = *((void *)v0 + 8);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v31;
  sub_100022594(&v110, &v108);
  char v32 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 16LL, v32);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v33 = *((void *)v0 + 9);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v33;
  sub_100022594(&v110, &v108);
  char v34 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 17LL, v34);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v35 = *((void *)v0 + 10);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v35;
  sub_100022594(&v110, &v108);
  char v36 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 18LL, v36);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v37 = *((void *)v0 + 11);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v37;
  sub_100022594(&v110, &v108);
  char v38 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 19LL, v38);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v39 = *((void *)v0 + 12);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v39;
  sub_100022594(&v110, &v108);
  char v40 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 20LL, v40);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v41 = *((void *)v0 + 13);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v41;
  sub_100022594(&v110, &v108);
  char v42 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 21LL, v42);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v43 = *((void *)v0 + 14);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v43;
  sub_100022594(&v110, &v108);
  char v44 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 22LL, v44);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v45 = *((void *)v0 + 15);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v45;
  sub_100022594(&v110, &v108);
  char v46 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 23LL, v46);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v47 = *((void *)v0 + 16);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v47;
  sub_100022594(&v110, &v108);
  char v48 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 24LL, v48);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v49 = *((void *)v0 + 17);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v49;
  sub_100022594(&v110, &v108);
  char v50 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 25LL, v50);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v51 = *((void *)v0 + 18);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v51;
  sub_100022594(&v110, &v108);
  char v52 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 26LL, v52);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v53 = *((void *)v0 + 19);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v53;
  sub_100022594(&v110, &v108);
  char v54 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 27LL, v54);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v55 = *((void *)v0 + 20);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v55;
  sub_100022594(&v110, &v108);
  char v56 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 28LL, v56);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v57 = *((void *)v0 + 21);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v57;
  sub_100022594(&v110, &v108);
  char v58 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 29LL, v58);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v59 = *((void *)v0 + 22);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v59;
  sub_100022594(&v110, &v108);
  char v60 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 30LL, v60);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v61 = *((void *)v0 + 23);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v61;
  sub_100022594(&v110, &v108);
  char v62 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 31LL, v62);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v63 = *((void *)v0 + 24);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v63;
  sub_100022594(&v110, &v108);
  char v64 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 32LL, v64);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v65  = *((void *)v0 + 25);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v65;
  sub_100022594(&v110, &v108);
  char v66 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 33LL, v66);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v67 = *((void *)v0 + 26);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v67;
  sub_100022594(&v110, &v108);
  char v68 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 34LL, v68);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v69 = *((void *)v0 + 27);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v69;
  sub_100022594(&v110, &v108);
  char v70 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 35LL, v70);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v71  = *((void *)v0 + 28);
  v111  = &type metadata for UInt64;
  *(void *)&__int128 v110 = v71;
  sub_100022594(&v110, &v108);
  char v72 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 36LL, v72);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v73  = *((_BYTE *)v0 + 18);
  v111  = &type metadata for UInt8;
  LOBYTE(v110)  = v73;
  sub_100022594(&v110, &v108);
  char v74 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 52LL, v74);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v75  = v0[5];
  v111  = &type metadata for UInt32;
  LODWORD(v110)  = v75;
  sub_100022594(&v110, &v108);
  char v76 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 51LL, v76);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v77 = v0[6];
  v111  = &type metadata for UInt32;
  LODWORD(v110)  = v77;
  sub_100022594(&v110, &v108);
  char v78 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 54LL, v78);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int v79 = v0[7];
  v111  = &type metadata for UInt32;
  LODWORD(v110)  = v79;
  sub_100022594(&v110, &v108);
  char v80 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 55LL, v80);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  v81  = *((_BYTE *)v0 + 19);
  v111  = &type metadata for UInt8;
  LOBYTE(v110)  = v81;
  sub_100022594(&v110, &v108);
  char v82 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 53LL, v82);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v84 = *((void *)v0 + 43);
  int16x8_t v83 = (void *)*((void *)v0 + 44);
  BOOL v85 = v83 && *((void *)v0 + 43) != 2LL && (v84 & 1) == 0;
  v111  = &type metadata for Int;
  *(void *)&__int128 v110 = v85;
  sub_100022594(&v110, &v108);
  char v86 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10002011C(&v108, 57LL, v86);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v83)
  {
    v111  = &type metadata for Bool;
    LOBYTE(v110)  = BYTE2(v84) & 1;
    sub_100022594(&v110, &v108);
    char v87 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10002011C(&v108, 58LL, v87);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    v111  = &type metadata for UInt8;
    LOBYTE(v110)  = (BYTE1(v84) & 1) + 1;
    sub_100022594(&v110, &v108);
    char v88 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10002011C(&v108, 59LL, v88);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v89 = v83[2];
    v111  = &type metadata for Int;
    *(void *)&__int128 v110 = v89;
    sub_100022594(&v110, &v108);
    char v90 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10002011C(&v108, 60LL, v90);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    unint64_t v91 = sub_10001C8B0(58LL);
    v93  = v92;
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    if ((v93 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton) & 1) == 0) {
        sub_10013DF68();
      }
      sub_100022594((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v91), &v108);
      sub_10013BCD8(v91, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      __int128 v108 = 0u;
      __int128 v109 = 0u;
    }

    sub_1000225EC((uint64_t)&v108, &qword_100405280);
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    unint64_t v94 = sub_10001C8B0(59LL);
    char v96 = v95;
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    if ((v96 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton) & 1) == 0) {
        sub_10013DF68();
      }
      sub_100022594((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v94), &v108);
      sub_10013BCD8(v94, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      __int128 v108 = 0u;
      __int128 v109 = 0u;
    }

    sub_1000225EC((uint64_t)&v108, &qword_100405280);
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    unint64_t v97 = sub_10001C8B0(60LL);
    char v99 = v98;
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    if ((v99 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton) & 1) == 0) {
        sub_10013DF68();
      }
      sub_100022594((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v97), &v108);
      sub_10013BCD8(v97, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      __int128 v108 = 0u;
      __int128 v109 = 0u;
    }

    sub_1000225EC((uint64_t)&v108, &qword_100405280);
  }

  uint64_t v100 = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
  uint64_t v101 = sub_100189B08(v100);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  uint64_t v102 = *(void *)(v101 + 16);
  if (v102)
  {
    sub_100002274(&qword_100409230);
    uint64_t v103 = (void *)static _DictionaryStorage.allocate(capacity:)(v102);
  }

  else
  {
    uint64_t v103 = _swiftEmptyDictionarySingleton;
  }

  *(void *)&__int128 v110 = v103;
  uint64_t v104 = (void *)swift_bridgeObjectRetain(v101);
  sub_100153550(v104, 1, &v110);
  swift_bridgeObjectRelease(v101);
  if (v83)
  {
    uint64_t v105 = swift_bridgeObjectRetain(v83);
    sub_100189974(v105, (unint64_t *)&v110);
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    uint64_t v106 = v83;
  }

  else
  {
    uint64_t v106 = _swiftEmptyDictionarySingleton;
  }

  swift_bridgeObjectRelease(v106);
  sub_10018DA94(*((void *)v1 + 29), 0x25u, &v110);
  sub_10018DA94(*((void *)v1 + 30), 0x26u, &v110);
  sub_10018DA94(*((void *)v1 + 31), 0x27u, &v110);
  sub_10018DA94(*((void *)v1 + 32), 0x28u, &v110);
  sub_10018DA94(*((void *)v1 + 33), 0x29u, &v110);
  sub_10018DA94(*((void *)v1 + 34), 0x2Au, &v110);
  sub_10018DA94(*((void *)v1 + 35), 0x2Bu, &v110);
  sub_10018DA94(*((void *)v1 + 36), 0x2Cu, &v110);
  sub_10018DA94(*((void *)v1 + 37), 0x2Du, &v110);
  sub_10018DA94(*((void *)v1 + 38), 0x2Eu, &v110);
  sub_10018DA94(*((void *)v1 + 39), 0x2Fu, &v110);
  sub_10018DA94(*((void *)v1 + 40), 0x30u, &v110);
  sub_10018DA94(*((void *)v1 + 41), 0x31u, &v110);
  sub_10018DA94(*((void *)v1 + 42), 0x32u, &v110);
  return v110;
}

uint64_t sub_10018BC30(void *a1, unint64_t *a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274(&qword_10040A328);
  __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v50 = 0LL;
  unint64_t v51 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  uint64_t result = swift_bridgeObjectRelease(v51);
  unint64_t v50 = 0xD000000000000017LL;
  unint64_t v51 = 0x8000000100362110LL;
  char v11 = a1;
  uint64_t v12 = *a1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v45 = v7;
    uint64_t v46 = v5;
    uint64_t v47 = v4;
    uint64_t v52 = v12 + 1;
    v13._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object  = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object);
    uint64_t v15 = v51;
    unint64_t v48 = v50;
    uint64_t v44 = v8;
    uint64_t v16 = *(int *)(v8 + 48);
    char v17 = v49;
    char v18 = (char *)v49 + v16;
    uint64_t v43 = sub_100002274(&qword_1004063D8);
    uint64_t v19 = *(int *)(v43 + 48);
    uint64_t v20 = (uint64_t)&v18[v19];
    uint64_t v21 = v11;
    char v22 = (char *)v11 + v16;
    *char v17 = v12;
    uint64_t v23 = (uint64_t)&v22[v19];
    LOWORD(v19)  = *((_WORD *)v22 + 2);
    char v24 = v22[6];
    *(_DWORD *)char v18 = *(_DWORD *)v22;
    *((_WORD *)v18 + 2)  = v19;
    v18[6]  = v24;
    sub_10018DD58(v23, v20);
    type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    sub_10018DD9C(v20);
    isa  = UInt8._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*a2);
    unint64_t v50 = *a2;
    *a2  = 0x8000000000000000LL;
    sub_100020244((uint64_t)isa, v48, v15, isUniquelyReferenced_nonNull_native);
    unint64_t v27 = *a2;
    *a2  = v50;
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v27);
    unint64_t v50 = 0LL;
    unint64_t v51 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    uint64_t result = swift_bridgeObjectRelease(v51);
    unint64_t v50 = 0xD000000000000015LL;
    unint64_t v51 = 0x8000000100362130LL;
    uint64_t v28 = *v21;
    if (!__OFADD__(*v21, 1LL))
    {
      uint64_t v52 = *v21 + 1LL;
      v29._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      char v30 = v29._object;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v30);
      uint64_t v31 = v50;
      uint64_t v32 = v51;
      uint64_t v33 = (char *)v49 + *(int *)(v44 + 48);
      uint64_t v34 = (uint64_t)&v33[*(int *)(v43 + 48)];
      *uint64_t v49 = v28;
      __int16 v35 = *((_WORD *)v22 + 2);
      char v36 = v22[6];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v22;
      *((_WORD *)v33 + 2)  = v35;
      v33[6]  = v36;
      sub_10018DD58(v23, v34);
      char v38 = v45;
      uint64_t v37 = v46;
      uint64_t v39 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v34, v47);
      sub_10018DD9C(v34);
      DispatchTimeInterval.rawSeconds.getter();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
      Class v40 = Int._bridgeToObjectiveC()().super.super.isa;
      char v41 = swift_isUniquelyReferenced_nonNull_native(*a2);
      unint64_t v50 = *a2;
      *a2  = 0x8000000000000000LL;
      sub_100020244((uint64_t)v40, v31, v32, v41);
      unint64_t v42 = *a2;
      *a2  = v50;
      swift_bridgeObjectRelease(v32);
      return swift_bridgeObjectRelease(v42);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10018BFA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10018A6BC(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10018A6BC(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10018C030()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10018A6BC(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10018C090(uint64_t a1)
{
  uint64_t v3 = sub_10018A6BC(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10018C0D0(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10018A6BC(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10018C12C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10018DA30(*a1, a1[1]);
  *a2  = result;
  return result;
}

uint64_t sub_10018C158@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10018A6BC(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

CoreP2P::NANInternetSharingStatistics::Provider::SharingMode_optional __swiftcall NANInternetSharingStatistics.Provider.SharingMode.init(rawValue:)( Swift::UInt8 rawValue)
{
  if (rawValue == 2) {
    v1.value  = CoreP2P_NANInternetSharingStatistics_Provider_SharingMode_dhcpServer;
  }
  else {
    v1.value  = CoreP2P_NANInternetSharingStatistics_Provider_SharingMode_unknownDefault;
  }
  if (rawValue == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

unsigned __int8 *sub_10018C19C@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 2) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  if (v2 == 1) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  *a2  = v4;
  return result;
}

void sub_10018C1BC(char *a1@<X8>)
{
  if (*v1) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *a1  = v2;
}

Swift::Int sub_10018C1D4()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    Swift::UInt8 v2 = 2;
  }
  else {
    Swift::UInt8 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10018C220()
{
  if (*v0) {
    Swift::UInt8 v1 = 2;
  }
  else {
    Swift::UInt8 v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10018C254(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    Swift::UInt8 v3 = 2;
  }
  else {
    Swift::UInt8 v3 = 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void NANInternetSharingStatistics.Provider.hash(into:)(uint64_t a1, __int16 a2)
{
  char v2 = HIBYTE(a2);
  if ((a2 & 1) != 0) {
    Swift::UInt8 v3 = 2;
  }
  else {
    Swift::UInt8 v3 = 1;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2 & 1);
}

BOOL static NANInternetSharingStatistics.Provider.__derived_struct_equals(_:_:)(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

Swift::Int NANInternetSharingStatistics.Provider.hashValue.getter(__int16 a1)
{
  if ((a1 & 1) != 0) {
    Swift::UInt8 v2 = 2;
  }
  else {
    Swift::UInt8 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(HIBYTE(a1) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_10018C340()
{
  int v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    Swift::UInt8 v3 = 2;
  }
  else {
    Swift::UInt8 v3 = 1;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10018C3A4()
{
  Swift::UInt8 v1 = v0[1];
  if (*v0) {
    Swift::UInt8 v2 = 2;
  }
  else {
    Swift::UInt8 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10018C3EC(uint64_t a1)
{
  int v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    Swift::UInt8 v4 = 2;
  }
  else {
    Swift::UInt8 v4 = 1;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_10018C44C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState.init(apiValue:)( unint64_t a1)
{
  if (a1 >= 4) {
    return 0LL;
  }
  else {
    return 0x3040102u >> (8 * a1);
  }
}

uint64_t sub_10018C494@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P28NANInternetSharingStatisticsV9RequesterV08InternetD18PolicyChannelStateO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_10018C4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10018F0BC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t NANInternetSharingStatistics.Requester.dhcpDelay.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL))(v1, a1, v3);
}

uint64_t NANInternetSharingStatistics.Requester.policy.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANInternetSharingStatistics.Requester(0LL) + 20));
}

uint64_t NANInternetSharingStatistics.Requester.policy.setter(char a1)
{
  uint64_t result = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 20))  = a1;
  return result;
}

uint64_t (*NANInternetSharingStatistics.Requester.policy.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANInternetSharingStatistics.Requester.init(dhcpDelay:policy:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a3, a1, v6);
  uint64_t result = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  *(_BYTE *)(a3 + *(int *)(result + 20))  = a2;
  return result;
}

uint64_t NANInternetSharingStatistics.Requester.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v11);
  uint64_t v12 = v25;
  dispatch thunk of Decoder.unkeyedContainer()(v26, v11, v10);
  if (v12) {
    return sub_100002AC4(a1);
  }
  int v25 = a1;
  uint64_t v22 = v7;
  uint64_t v23 = v9;
  uint64_t v13 = v27;
  uint64_t v14 = v28;
  sub_1000237C8((uint64_t)v26, v27);
  *uint64_t v6 = (int)dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v13, v14);
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchTimeInterval.seconds(_:), v3);
  uint64_t v15 = *(void (**)(char *, void *, uint64_t))(v4 + 32);
  uint64_t v16 = (uint64_t)v23;
  v15(v23, v6, v3);
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  sub_1000237C8((uint64_t)v26, v27);
  unint64_t v19 = sub_10018DD14();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState,  &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState,  v19,  v17,  v18);
  *(_BYTE *)(v16 + *(int *)(v22 + 20))  = v29;
  sub_100002AC4(v26);
  sub_10018DD58(v16, v24);
  sub_100002AC4(v25);
  return sub_10018DD9C(v16);
}

uint64_t NANInternetSharingStatistics.Requester.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v14, v4, v5);
  uint64_t result = DispatchTimeInterval.rawSeconds.getter();
  if (result < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v7 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v8 = v15;
  uint64_t v9 = v16;
  sub_1000237C8((uint64_t)v14, v15);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v7, v8, v9);
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    uint64_t v11 = v15;
    uint64_t v12 = v16;
    uint64_t v13 = *(unsigned __int8 *)(v3 + *(int *)(v10 + 20));
    sub_1000237C8((uint64_t)v14, v15);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v13, v11, v12);
  }

  return sub_100002AC4(v14);
}

void NANInternetSharingStatistics.Requester.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (Swift::UInt64 *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000000LL;
LABEL_7:
    Swift::UInt64 v8 = v6 * v7;
    BOOL v9 = (unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63;
    BOOL v10 = v6 <= 0;
    unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (v10) {
      unint64_t v11 = 0x8000000000000000LL;
    }
    if (v9) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = v8;
    }
    goto LABEL_12;
  }

  if (v5 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000LL;
    goto LABEL_7;
  }

  if (v5 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000LL;
    goto LABEL_7;
  }

  if (v5 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    Swift::UInt64 v12 = *v4;
  }

  else
  {
    if (v5 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 8))(v4, v1);
    }
    Swift::UInt64 v12 = 0x7FFFFFFFFFFFFFFFLL;
  }

BOOL static NANInternetSharingStatistics.Requester.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static DispatchTimeInterval.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  return *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20));
}

Swift::Int NANInternetSharingStatistics.Requester.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10018CB7C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10018CBB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANInternetSharingStatistics.Requester.init(from:)(a1, a2);
}

uint64_t sub_10018CBC8(void *a1)
{
  return NANInternetSharingStatistics.Requester.encode(to:)(a1);
}

BOOL sub_10018CBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static DispatchTimeInterval.== infix(_:_:)(a1, a2) & 1) != 0
      && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(a3 + 20));
}

uint64_t NANInternetSharingStatistics.provider.getter(unsigned int a1)
{
  return (a1 >> 8) & 0x101;
}

uint64_t NANInternetSharingStatistics.provider.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 1)  = result & 1;
  *(_BYTE *)(v1 + 2)  = BYTE1(result) & 1;
  return result;
}

uint64_t NANInternetSharingStatistics.init(provider:)(__int16 a1)
{
  if ((a1 & 1) != 0) {
    int v2 = 258;
  }
  else {
    int v2 = 2;
  }
  return v2 & 0xFFFEFFFF | ((((unsigned __int16)(a1 & 0x100) >> 8) & 1) << 16);
}

void NANInternetSharingStatistics.hash(into:)(__int128 *a1, int a2, uint64_t a3, char a4)
{
  if (a2 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2 & 1);
  }

  if ((a2 & 0x100) != 0) {
    Swift::UInt8 v8 = 2;
  }
  else {
    Swift::UInt8 v8 = 1;
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  swift_bridgeObjectRetain(a3);
  sub_10006C098(a1, a3);
  swift_bridgeObjectRelease(a3);
  Hasher._combine(_:)(a4 & 1);
}

uint64_t static NANInternetSharingStatistics.__derived_struct_equals(_:_:)( int a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  return sub_10018D544(a1 & 0x101FF, a2, a3, a4 & 0x101FF, a5, a6);
}

Swift::Int NANInternetSharingStatistics.hashValue.getter(int a1, uint64_t a2, char a3)
{
  if (a1 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1 & 1);
  }

  if ((a1 & 0x100) != 0) {
    Swift::UInt8 v6 = 2;
  }
  else {
    Swift::UInt8 v6 = 1;
  }
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE2(a1) & 1);
  swift_bridgeObjectRetain(a2);
  sub_10006C098(v8, a2);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(a3 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_10018CE1C()
{
  if (v0[1]) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  int v2 = v1 | *v0;
  if (v0[2]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  return NANInternetSharingStatistics.hashValue.getter(v2 | v3, *((void *)v0 + 1), v0[16]);
}

void sub_10018CE54(__int128 *a1)
{
  if (v1[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *v1;
  if (v1[2]) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  NANInternetSharingStatistics.hash(into:)(a1, v3 | v4, *((void *)v1 + 1), v1[16]);
}

Swift::Int sub_10018CE8C(uint64_t a1)
{
  int v2 = *v1;
  int v3 = v1[1];
  Swift::UInt8 v4 = v1[2];
  uint64_t v5 = *((void *)v1 + 1);
  Swift::UInt8 v6 = v1[16];
  Hasher.init(_seed:)(v9, a1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }

  if (v3) {
    Swift::UInt8 v7 = 2;
  }
  else {
    Swift::UInt8 v7 = 1;
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain(v5);
  sub_10006C098(v9, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t sub_10018CF5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  char v3 = a1[16];
  if (a1[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  int v5 = v4 | *a1;
  if (a1[2]) {
    int v6 = 0x10000;
  }
  else {
    int v6 = 0;
  }
  int v7 = v5 | v6;
  if (a2[1]) {
    int v8 = 256;
  }
  else {
    int v8 = 0;
  }
  int v9 = v8 | *a2;
  if (a2[2]) {
    int v10 = 0x10000;
  }
  else {
    int v10 = 0;
  }
  return sub_10018D544(v7, v2, v3, v9 | v10, *((void *)a2 + 1), a2[16]);
}

uint64_t sub_10018CFC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    sub_100002AE4(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0]  = v11;
    id v12 = v11;
    goto LABEL_23;
  }

  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v10 = __clz(__rbit64(v15)) + (v13 << 6);
      int64_t v7 = v13;
      goto LABEL_3;
    }

    int64_t v16 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v13 = v16;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        unint64_t v15 = *(void *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          int64_t v13 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v16 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          int64_t v13 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            unint64_t v15 = *(void *)(v4 + 8 * v13);
            if (v15) {
              goto LABEL_7;
            }
            int64_t v7 = v14 - 1;
            int64_t v17 = v5 + 6;
            while (v14 != v17)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v17++);
              if (v15)
              {
                int64_t v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  uint64_t v25 = 0LL;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *int v1 = v3;
  v1[1]  = v4;
  v1[2]  = v6;
  v1[3]  = v7;
  __int128 v1[4] = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1000586C0((uint64_t)v24, (uint64_t)v22, &qword_10040A348);
  if (*(void *)&v22[0])
  {
    v20[0]  = v22[0];
    v20[1]  = v22[1];
    uint64_t v21 = v23;
    v18(v20);
    return sub_1000225EC((uint64_t)v20, &qword_10040A350);
  }

  else
  {
    *(void *)(a1 + 32)  = 0LL;
    *(_OWORD *)a1  = 0u;
    *(_OWORD *)(a1 + 16)  = 0u;
  }

  return result;
}

void sub_10018D19C()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    int64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    unint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3]  = v4;
    v0[4]  = v5;
    unint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0]  = v8;
    v20[1]  = v9;
    v20[2]  = v10;
    swift_bridgeObjectRetain(v9);
    id v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease(v9);
    return;
  }

  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }

      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }

          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    v0[3]  = v4;
    v0[4]  = 0LL;
  }

uint64_t sub_10018D328@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_100002AE4(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1)  = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1]  = v4;
  v1[2]  = v6;
  v1[3]  = v7;
  __int128 v1[4] = v9;
  unint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1000586C0((uint64_t)&v23, (uint64_t)v22, &qword_10040A340);
  if (*((void *)&v22[0] + 1))
  {
    v21[0]  = v22[0];
    v21[1]  = v22[1];
    void v21[2] = v22[2];
    v19(v21);
    return sub_1000225EC((uint64_t)v21, &qword_100409590);
  }

  else
  {
    a1[1]  = 0u;
    a1[2]  = 0u;
    *a1  = 0u;
  }

  return result;
}

id sub_10018D50C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2  = *a1;
  a2[1]  = v2;
  a2[2]  = v4;
  swift_bridgeObjectRetain(v2);
  return v4;
}

uint64_t sub_10018D544(int a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  if (a1 == 2)
  {
    if (a4 != 2)
    {
      char v8 = 0;
      return v8 & 1;
    }
  }

  else
  {
    char v8 = 0;
  }

  char v8 = 0;
  if (((a1 ^ a4) & 0x100) == 0 && ((a1 ^ a4) & 0x10000) == 0)
  {
    char v9 = sub_1000684A0(a2, a5);
    char v8 = a3 ^ a6 ^ 1;
    if ((v9 & 1) == 0) {
      char v8 = 0;
    }
  }

  return v8 & 1;
}

uint64_t _s7CoreP2P23NANCoreAnalyticsMetricsV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && ((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 5) ^ *(unsigned __int8 *)(a2 + 5)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 6) ^ *(unsigned __int8 *)(a2 + 6)) & 1) == 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
    && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18)
    && *(unsigned __int8 *)(a1 + 19) == *(unsigned __int8 *)(a2 + 19)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    BOOL v2 = *(_DWORD *)(a1 + 33) == *(_DWORD *)(a2 + 33)
      && *(unsigned __int16 *)(a1 + 37) == *(unsigned __int16 *)(a2 + 37);
    if (v2
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(void *)(a1 + 64) == *(void *)(a2 + 64)
      && *(void *)(a1 + 72) == *(void *)(a2 + 72)
      && *(void *)(a1 + 80) == *(void *)(a2 + 80)
      && *(void *)(a1 + 88) == *(void *)(a2 + 88)
      && *(void *)(a1 + 96) == *(void *)(a2 + 96)
      && *(void *)(a1 + 104) == *(void *)(a2 + 104)
      && *(void *)(a1 + 112) == *(void *)(a2 + 112)
      && *(void *)(a1 + 120) == *(void *)(a2 + 120)
      && *(void *)(a1 + 128) == *(void *)(a2 + 128)
      && *(void *)(a1 + 136) == *(void *)(a2 + 136)
      && *(void *)(a1 + 144) == *(void *)(a2 + 144)
      && *(void *)(a1 + 152) == *(void *)(a2 + 152)
      && *(void *)(a1 + 160) == *(void *)(a2 + 160)
      && *(void *)(a1 + 168) == *(void *)(a2 + 168)
      && *(void *)(a1 + 176) == *(void *)(a2 + 176)
      && *(void *)(a1 + 184) == *(void *)(a2 + 184)
      && *(void *)(a1 + 192) == *(void *)(a2 + 192)
      && *(void *)(a1 + 200) == *(void *)(a2 + 200)
      && *(void *)(a1 + 208) == *(void *)(a2 + 208)
      && *(void *)(a1 + 216) == *(void *)(a2 + 216)
      && *(void *)(a1 + 224) == *(void *)(a2 + 224)
      && sub_10007D95C(*(void *)(a1 + 232), *(void *)(a2 + 232))
      && sub_10007D95C(*(void *)(a1 + 240), *(void *)(a2 + 240))
      && sub_10007D95C(*(void *)(a1 + 248), *(void *)(a2 + 248))
      && sub_10007D95C(*(void *)(a1 + 256), *(void *)(a2 + 256))
      && sub_10007D95C(*(void *)(a1 + 264), *(void *)(a2 + 264))
      && sub_10007D95C(*(void *)(a1 + 272), *(void *)(a2 + 272))
      && sub_10007D95C(*(void *)(a1 + 280), *(void *)(a2 + 280))
      && sub_10007D95C(*(void *)(a1 + 288), *(void *)(a2 + 288))
      && sub_10007D95C(*(void *)(a1 + 296), *(void *)(a2 + 296))
      && sub_10007D95C(*(void *)(a1 + 304), *(void *)(a2 + 304))
      && sub_10007D95C(*(void *)(a1 + 312), *(void *)(a2 + 312))
      && sub_10007D95C(*(void *)(a1 + 320), *(void *)(a2 + 320))
      && sub_10007D95C(*(void *)(a1 + 328), *(void *)(a2 + 328))
      && sub_10007D95C(*(void *)(a1 + 336), *(void *)(a2 + 336)))
    {
      uint64_t v5 = *(void *)(a1 + 352);
      uint64_t v6 = *(void *)(a2 + 352);
      if (v5)
      {
        if (v6)
        {
          uint64_t v7 = *(void *)(a2 + 344);
          char v8 = *(_BYTE *)(a2 + 360);
          uint64_t v9 = *(void *)(a1 + 344) & 0x101FFLL;
          char v10 = *(_BYTE *)(a1 + 360) & 1;
          int v11 = v7 & 0x101FF;
          char v12 = v8 & 1;
          swift_bridgeObjectRetain(v5);
          swift_bridgeObjectRetain(v6);
          LOBYTE(v9)  = sub_10018D544(v9, v5, v10, v11, v6, v12);
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease(v6);
          if ((v9 & 1) != 0) {
            return 1LL;
          }
        }
      }

      else if (!v6)
      {
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_10018DA30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D6458, a1, a2, &unk_1004044A8);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x3F) {
    return 63LL;
  }
  else {
    return v3;
  }
}

uint64_t _s7CoreP2P28NANInternetSharingStatisticsV9RequesterV08InternetD18PolicyChannelStateO8rawValueAGSgs5UInt8V_tcfC_0( uint64_t result)
{
  else {
    return result;
  }
}

uint64_t sub_10018DA94(uint64_t a1, unsigned __int8 a2, void *a3)
{
  uint64_t v31 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  sub_10006999C(0, 0LL, 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v28 = a3;
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = sub_10018A6BC(a2);
      char v10 = v9;
      unint64_t v11 = sub_100024970();
      uint64_t v12 = BinaryInteger.description.getter(&type metadata for Int, v11);
      int64_t v14 = v13;
      v30[0]  = v8;
      v30[1]  = v10;
      swift_bridgeObjectRetain(v10);
      v15._countAndFlagsBits  = v12;
      v15._object  = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v14);
      unint64_t v16 = (objc_class *)v8;
      v17.super.super.isa  = Double._bridgeToObjectiveC()().super.super.isa;
      uint64_t v31 = v5;
      unint64_t v19 = v5[2];
      unint64_t v18 = v5[3];
      if (v19 >= v18 >> 1)
      {
        sub_10006999C(v18 > 1, v19 + 1, 1);
        uint64_t v5 = v31;
      }

      ++v7;
      v5[2]  = v19 + 1;
      uint64_t v20 = (NSNumber *)&v5[3 * v19];
      v20[4].super.super.isa  = v16;
      v20[5].super.super.isa  = v10;
      v20[6].super.super.isa  = v17.super.super.isa;
    }

    while (v6 != v7);
    swift_bridgeObjectRelease_n(a1, 2LL);
    a3  = v28;
    uint64_t v21 = v5[2];
    if (v21) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v22 = &_swiftEmptyDictionarySingleton;
    goto LABEL_10;
  }

  swift_bridgeObjectRelease(a1);
  uint64_t v21 = _swiftEmptyArrayStorage[2];
  if (!v21) {
    goto LABEL_9;
  }
LABEL_7:
  sub_100002274(&qword_100409230);
  uint64_t v22 = (void *)static _DictionaryStorage.allocate(capacity:)(v21);
LABEL_10:
  v30[0]  = v22;
  __int128 v23 = (void *)swift_bridgeObjectRetain(v5);
  sub_100153550(v23, 1, v30);
  swift_release(v5);
  uint64_t v24 = v30[0];
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*a3);
  v30[0]  = *a3;
  *a3  = 0x8000000000000000LL;
  sub_1001538DC(v24, (uint64_t)sub_10018D50C, 0LL, isUniquelyReferenced_nonNull_native, v30);
  uint64_t v26 = *a3;
  *a3  = v30[0];
  return swift_bridgeObjectRelease(v26);
}

uint64_t type metadata accessor for NANInternetSharingStatistics.Requester(uint64_t a1)
{
  uint64_t result = qword_10040A2E8;
  if (!qword_10040A2E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANInternetSharingStatistics.Requester);
  }
  return result;
}

unint64_t sub_10018DD14()
{
  unint64_t result = qword_10040A250;
  if (!qword_10040A250)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState,  &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState);
    atomic_store(result, (unint64_t *)&qword_10040A250);
  }

  return result;
}

uint64_t sub_10018DD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018DD9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10018DDDC()
{
  unint64_t result = qword_10040A258;
  if (!qword_10040A258)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANCoreAnalyticsMetrics,  &type metadata for NANCoreAnalyticsMetrics);
    atomic_store(result, (unint64_t *)&qword_10040A258);
  }

  return result;
}

unint64_t sub_10018DE24()
{
  unint64_t result = qword_10040A260;
  if (!qword_10040A260)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInternetSharingStatistics.Provider.SharingMode,  &type metadata for NANInternetSharingStatistics.Provider.SharingMode);
    atomic_store(result, (unint64_t *)&qword_10040A260);
  }

  return result;
}

unint64_t sub_10018DE6C()
{
  unint64_t result = qword_10040A268;
  if (!qword_10040A268)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInternetSharingStatistics.Provider,  &type metadata for NANInternetSharingStatistics.Provider);
    atomic_store(result, (unint64_t *)&qword_10040A268);
  }

  return result;
}

unint64_t sub_10018DEB4()
{
  unint64_t result = qword_10040A270;
  if (!qword_10040A270)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState,  &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState);
    atomic_store(result, (unint64_t *)&qword_10040A270);
  }

  return result;
}

unint64_t sub_10018DEFC()
{
  unint64_t result = qword_10040A278;
  if (!qword_10040A278)
  {
    uint64_t v1 = type metadata accessor for NANInternetSharingStatistics.Requester(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANInternetSharingStatistics.Requester, v1);
    atomic_store(result, (unint64_t *)&qword_10040A278);
  }

  return result;
}

unint64_t sub_10018DF48()
{
  unint64_t result = qword_10040A280;
  if (!qword_10040A280)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInternetSharingStatistics.Status,  &type metadata for NANInternetSharingStatistics.Status);
    atomic_store(result, (unint64_t *)&qword_10040A280);
  }

  return result;
}

unint64_t sub_10018DF90()
{
  unint64_t result = qword_10040A288;
  if (!qword_10040A288)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInternetSharingStatistics,  &type metadata for NANInternetSharingStatistics);
    atomic_store(result, (unint64_t *)&qword_10040A288);
  }

  return result;
}

uint64_t destroy for NANCoreAnalyticsMetrics(void *a1)
{
  return swift_bridgeObjectRelease(a1[44]);
}

uint64_t initializeWithCopy for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 20)  = *(void *)(a2 + 20);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  int v3 = *(_DWORD *)(a2 + 33);
  *(_WORD *)(a1 + 37)  = *(_WORD *)(a2 + 37);
  *(_DWORD *)(a1 + 33)  = v3;
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152)  = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168)  = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184)  = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200)  = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216)  = *(_OWORD *)(a2 + 216);
  uint64_t v4 = *(void *)(a2 + 232);
  uint64_t v5 = *(void *)(a2 + 240);
  *(void *)(a1 + 232)  = v4;
  *(void *)(a1 + 240)  = v5;
  uint64_t v6 = *(void *)(a2 + 248);
  uint64_t v7 = *(void *)(a2 + 256);
  *(void *)(a1 + 248)  = v6;
  *(void *)(a1 + 256)  = v7;
  uint64_t v9 = *(void *)(a2 + 264);
  uint64_t v8 = *(void *)(a2 + 272);
  *(void *)(a1 + 264)  = v9;
  *(void *)(a1 + 272)  = v8;
  uint64_t v10 = *(void *)(a2 + 280);
  uint64_t v11 = *(void *)(a2 + 288);
  *(void *)(a1 + 280)  = v10;
  *(void *)(a1 + 288)  = v11;
  uint64_t v12 = *(void *)(a2 + 296);
  uint64_t v13 = *(void *)(a2 + 304);
  *(void *)(a1 + 296)  = v12;
  *(void *)(a1 + 304)  = v13;
  uint64_t v14 = *(void *)(a2 + 320);
  uint64_t v16 = *(void *)(a2 + 312);
  *(void *)(a1 + 312)  = v16;
  *(void *)(a1 + 320)  = v14;
  uint64_t v18 = v14;
  uint64_t v19 = *(void *)(a2 + 328);
  uint64_t v20 = *(void *)(a2 + 336);
  *(void *)(a1 + 328)  = v19;
  *(void *)(a1 + 336)  = v20;
  *(_BYTE *)(a1 + 344)  = *(_BYTE *)(a2 + 344);
  *(_WORD *)(a1 + 345)  = *(_WORD *)(a2 + 345);
  uint64_t v17 = *(void *)(a2 + 352);
  *(void *)(a1 + 352)  = v17;
  *(_BYTE *)(a1 + 360)  = *(_BYTE *)(a2 + 360);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t assignWithCopy for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 345;
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19)  = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33)  = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34)  = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35)  = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36)  = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37)  = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38)  = *(_BYTE *)(a2 + 38);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44)  = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = *(void *)(a2 + 120);
  *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  *(void *)(a1 + 168)  = *(void *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = *(void *)(a2 + 184);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = *(void *)(a2 + 200);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = *(void *)(a2 + 216);
  *(void *)(a1 + 224)  = *(void *)(a2 + 224);
  uint64_t v5 = *(void *)(a2 + 232);
  uint64_t v6 = *(void *)(a1 + 232);
  *(void *)(a1 + 232)  = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 240)  = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 248);
  uint64_t v10 = *(void *)(a1 + 248);
  *(void *)(a1 + 248)  = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 256);
  uint64_t v12 = *(void *)(a1 + 256);
  *(void *)(a1 + 256)  = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 264);
  uint64_t v14 = *(void *)(a1 + 264);
  *(void *)(a1 + 264)  = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 272);
  uint64_t v16 = *(void *)(a1 + 272);
  *(void *)(a1 + 272)  = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a2 + 280);
  uint64_t v18 = *(void *)(a1 + 280);
  *(void *)(a1 + 280)  = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *(void *)(a2 + 288);
  uint64_t v20 = *(void *)(a1 + 288);
  *(void *)(a1 + 288)  = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = *(void *)(a2 + 296);
  uint64_t v22 = *(void *)(a1 + 296);
  *(void *)(a1 + 296)  = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = *(void *)(a2 + 304);
  uint64_t v24 = *(void *)(a1 + 304);
  *(void *)(a1 + 304)  = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = *(void *)(a2 + 312);
  uint64_t v26 = *(void *)(a1 + 312);
  *(void *)(a1 + 312)  = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = *(void *)(a2 + 320);
  uint64_t v28 = *(void *)(a1 + 320);
  *(void *)(a1 + 320)  = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *(void *)(a2 + 328);
  uint64_t v30 = *(void *)(a1 + 328);
  *(void *)(a1 + 328)  = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = *(void *)(a2 + 336);
  uint64_t v32 = *(void *)(a1 + 336);
  *(void *)(a1 + 336)  = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_BYTE *)(a1 + 344)  = *(_BYTE *)(a2 + 344);
  *(_BYTE *)(a1 + 345)  = *(_BYTE *)(a2 + 345);
  *(_BYTE *)(a1 + 346)  = *(_BYTE *)(v4 + 1);
  uint64_t v33 = *(void *)(a2 + 352);
  uint64_t v34 = *(void *)(a1 + 352);
  *(void *)(a1 + 352)  = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_BYTE *)(a1 + 360)  = *(_BYTE *)(v4 + 15);
  return a1;
}

void *initializeWithTake for NANCoreAnalyticsMetrics(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x169uLL);
}

uint64_t assignWithTake for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 345;
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 20)  = *(void *)(a2 + 20);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36)  = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37)  = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38)  = *(_BYTE *)(a2 + 38);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152)  = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168)  = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184)  = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200)  = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216)  = *(_OWORD *)(a2 + 216);
  uint64_t v5 = *(void *)(a1 + 232);
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 240);
  *(void *)(a1 + 240)  = *(void *)(a2 + 240);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a1 + 248);
  *(void *)(a1 + 248)  = *(void *)(a2 + 248);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 256);
  *(void *)(a1 + 256)  = *(void *)(a2 + 256);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a1 + 264);
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a1 + 272);
  *(void *)(a1 + 272)  = *(void *)(a2 + 272);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 280);
  *(void *)(a1 + 280)  = *(void *)(a2 + 280);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a1 + 288);
  *(void *)(a1 + 288)  = *(void *)(a2 + 288);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a1 + 296);
  *(void *)(a1 + 296)  = *(void *)(a2 + 296);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 304);
  *(void *)(a1 + 304)  = *(void *)(a2 + 304);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a1 + 312);
  *(void *)(a1 + 312)  = *(void *)(a2 + 312);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a1 + 320);
  *(void *)(a1 + 320)  = *(void *)(a2 + 320);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a1 + 328);
  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a1 + 336);
  *(void *)(a1 + 336)  = *(void *)(a2 + 336);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 344)  = *(_BYTE *)(a2 + 344);
  *(_BYTE *)(a1 + 345)  = *(_BYTE *)(a2 + 345);
  *(_BYTE *)(a1 + 346)  = *(_BYTE *)(v4 + 1);
  uint64_t v19 = *(void *)(a1 + 352);
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 360)  = *(_BYTE *)(v4 + 15);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANCoreAnalyticsMetrics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 361)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 232);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANCoreAnalyticsMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248)  = 0u;
    *(_OWORD *)(result + 232)  = 0u;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 360)  = 0;
    *(_OWORD *)(result + 344)  = 0u;
    *(_OWORD *)(result + 328)  = 0u;
    *(_OWORD *)(result + 312)  = 0u;
    *(_OWORD *)(result + 296)  = 0u;
    *(_OWORD *)(result + 280)  = 0u;
    *(_OWORD *)(result + 264)  = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 361)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 232)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 361)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANCoreAnalyticsMetrics()
{
  return &type metadata for NANCoreAnalyticsMetrics;
}

uint64_t sub_10018E878(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8)  = v3;
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANInternetSharingStatistics(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NANInternetSharingStatistics(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16)  = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics()
{
  return &type metadata for NANInternetSharingStatistics;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics.Provider( unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Provider( _WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10018EAEC + 4 * byte_10034EEF3[v4]))();
  }
  *a1  = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_10018EB20 + 4 * byte_10034EEEE[v4]))();
}

uint64_t sub_10018EB20(uint64_t result)
{
  *(_BYTE *)(result + 2)  = v1;
  return result;
}

uint64_t sub_10018EB28(uint64_t result, int a2)
{
  *(_WORD *)(result + 2)  = 0;
  if (a2) {
    JUMPOUT(0x10018EB30LL);
  }
  return result;
}

uint64_t sub_10018EB3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2)  = 0;
  if (!a2) {
    JUMPOUT(0x10018EB44LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10018EB48(uint64_t result)
{
  *(_DWORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_10018EB50(uint64_t result)
{
  *(_WORD *)(result + 2)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Provider()
{
  return &type metadata for NANInternetSharingStatistics.Provider;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Provider.SharingMode()
{
  return &type metadata for NANInternetSharingStatistics.Provider.SharingMode;
}

void *initializeBufferWithCopyOfBuffer for NANInternetSharingStatistics.Requester( void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1  = *a2;
    a1  = (void *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20))  = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t destroy for NANInternetSharingStatistics.Requester(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t initializeWithCopy for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20))  = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20))  = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20))  = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20))  = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics.Requester( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018EDB8);
}

uint64_t sub_10018EDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 5) {
    return v9 - 4;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Requester( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018EE3C);
}

uint64_t sub_10018EE3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20))  = a2 + 4;
  return result;
}

uint64_t sub_10018EEB4(uint64_t a1)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = &unk_10034F340;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10018EF70 + 4 * byte_10034EEFD[v4]))();
  }
  *a1  = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10018EFA4 + 4 * byte_10034EEF8[v4]))();
}

uint64_t sub_10018EFA4(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10018EFAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10018EFB4LL);
  }
  return result;
}

uint64_t sub_10018EFC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10018EFC8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10018EFCC(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10018EFD4(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState()
{
  return &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState;
}

uint64_t _s7CoreP2P28NANInternetSharingStatisticsV6StatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10018F03C + 4 * byte_10034EF07[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10018F070 + 4 * byte_10034EF02[v4]))();
}

uint64_t sub_10018F070(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10018F078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10018F080LL);
  }
  return result;
}

uint64_t sub_10018F08C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10018F094LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10018F098(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10018F0A0(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Status()
{
  return &type metadata for NANInternetSharingStatistics.Status;
}

unint64_t sub_10018F0BC()
{
  unint64_t result = qword_10040A320;
  if (!qword_10040A320)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState,  &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState);
    atomic_store(result, (unint64_t *)&qword_10040A320);
  }

  return result;
}

uint64_t sub_10018F100(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for NANCoreAnalyticsMetrics.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xC2) {
    goto LABEL_17;
  }
  if (a2 + 62 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 62) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 62;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 62;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 62;
    }
  }

uint64_t storeEnumTagSinglePayload for NANCoreAnalyticsMetrics.Key( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 62 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 62) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xC2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xC1) {
    return ((uint64_t (*)(void))((char *)&loc_10018F220 + 4 * byte_10034EF11[v4]))();
  }
  *a1  = a2 + 62;
  return ((uint64_t (*)(void))((char *)sub_10018F254 + 4 * byte_10034EF0C[v4]))();
}

uint64_t sub_10018F254(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10018F25C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10018F264LL);
  }
  return result;
}

uint64_t sub_10018F270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10018F278LL);
  }
  *(_BYTE *)unint64_t result = a2 + 62;
  return result;
}

uint64_t sub_10018F27C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10018F284(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANCoreAnalyticsMetrics.Key()
{
  return &type metadata for NANCoreAnalyticsMetrics.Key;
}

unint64_t sub_10018F2A4()
{
  unint64_t result = qword_10040A358;
  if (!qword_10040A358)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F408, &type metadata for NANCoreAnalyticsMetrics.Key);
    atomic_store(result, (unint64_t *)&qword_10040A358);
  }

  return result;
}

void NANMulticastLinkCondition.per.setter(double a1)
{
  *__int16 v1 = a1;
}

double NANMulticastLinkCondition.snr.getter(double a1, double a2)
{
  return a2;
}

void NANMulticastLinkCondition.snr.setter(double a1)
{
  *(double *)(v1 + 8)  = a1;
}

double NANMulticastLinkCondition.cca.getter(double a1, double a2, double a3)
{
  return a3;
}

void NANMulticastLinkCondition.cca.setter(double a1)
{
  *(double *)(v1 + 16)  = a1;
}

double NANMulticastLinkCondition.init(from:)(void *a1)
{
  return sub_10018F730(a1);
}

uint64_t NANMulticastLinkCondition.encode(to:)(void *a1, double a2, double a3, double a4)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v17, v8, v9);
  uint64_t v10 = v18;
  uint64_t v11 = v19;
  sub_1000237C8((uint64_t)v17, v18);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v10, v11, a2);
  if (!v4)
  {
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    sub_1000237C8((uint64_t)v17, v18);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v12, v13, a3);
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    sub_1000237C8((uint64_t)v17, v18);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v14, v15, a4);
  }

  return sub_100002AC4(v17);
}

void NANMulticastLinkCondition.hash(into:)(double a1, double a2, double a3)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v5 = 0LL;
  }
  Hasher._combine(_:)(v5);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v7 = 0LL;
  }
  Hasher._combine(_:)(v7);
}

BOOL static NANMulticastLinkCondition.__derived_struct_equals(_:_:)( double a1, double a2, double a3, double a4, double a5, double a6)
{
  BOOL v6 = a1 == a4;
  if (a2 != a5) {
    BOOL v6 = 0;
  }
  return a3 == a6 && v6;
}

Swift::Int NANMulticastLinkCondition.hashValue.getter(double a1, double a2, double a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10018F510()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  NANMulticastLinkCondition.hash(into:)(v1, v2, v3);
  return Hasher._finalize()();
}

void sub_10018F570()
{
}

Swift::Int sub_10018F57C(uint64_t a1)
{
  double v2 = *v1;
  double v3 = v1[1];
  double v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  NANMulticastLinkCondition.hash(into:)(v2, v3, v4);
  return Hasher._finalize()();
}

void sub_10018F5D8(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_10018F730(a1);
  if (!v2)
  {
    *(double *)a2  = v4;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

uint64_t sub_10018F604(void *a1)
{
  double v4 = *v1;
  double v3 = v1[1];
  double v5 = v1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v6, v7);
  uint64_t v8 = v16;
  uint64_t v9 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v9, v4);
  if (!v2)
  {
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v10, v11, v3);
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v12, v13, v5);
  }

  return sub_100002AC4(v15);
}

BOOL sub_10018F700(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

double sub_10018F730(void *a1)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Decoder.unkeyedContainer()(v14, v4, v5);
  if (!v1)
  {
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()( v6,  (uint64_t)&type metadata for Double,  v7,  (uint64_t)&protocol witness table for Double);
    double v2 = v13;
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()( v8,  (uint64_t)&type metadata for Double,  v9,  (uint64_t)&protocol witness table for Double);
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()( v10,  (uint64_t)&type metadata for Double,  v11,  (uint64_t)&protocol witness table for Double);
    sub_100002AC4(v14);
  }

  sub_100002AC4(a1);
  return v2;
}

unint64_t sub_10018F8B4()
{
  unint64_t result = qword_10040A360;
  if (!qword_10040A360)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANMulticastLinkCondition,  &type metadata for NANMulticastLinkCondition);
    atomic_store(result, (unint64_t *)&qword_10040A360);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANMulticastLinkCondition()
{
  return &type metadata for NANMulticastLinkCondition;
}

char *sub_10018F908(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = result;
  uint64_t v4 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (!v4) {
    return (char *)_swiftEmptyArrayStorage;
  }
  unint64_t result = (char *)sub_10006972C(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v6 = (char *)a2;
    for (i  = v6 - v12; ; --i)
    {
      uint64_t v8 = *(void *)(a3 + 24);
      uint64_t v9 = *(void *)(a3 + 32);
      sub_1000237C8(a3, v8);
      unint64_t result = (char *)UnkeyedDecodingContainer.inferredDecode<A>()( v8,  (uint64_t)&type metadata for UInt8,  v9,  (uint64_t)&protocol witness table for UInt8);
      if (v3)
      {
        swift_release(_swiftEmptyArrayStorage);
        return (char *)_swiftEmptyArrayStorage;
      }

      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        unint64_t result = (char *)sub_10006972C(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v11 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v11)  = v14;
      if (!i) {
        goto LABEL_17;
      }
      if (!--v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

void *sub_10018FA68( unsigned int a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t), uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v6 = (unsigned __int16)(HIWORD(a1) - a1);
  unsigned int v20 = HIWORD(a1);
  unsigned __int16 v21 = a1;
  else {
    uint64_t v7 = (unsigned __int16)(HIWORD(a1) - a1);
  }
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)a3(0, v7 & ~(v7 >> 63), 0LL);
  if ((v7 & 0x8000000000000000LL) == 0)
  {
    LODWORD(v10)  = v20 - v21;
    if (v20 >= v21) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = 0LL;
    }
    uint64_t v11 = -v10;
    while (v7)
    {
      uint64_t v12 = *(void *)(a2 + 24);
      uint64_t v13 = *(void *)(a2 + 32);
      sub_1000237C8(a2, v12);
      uint64_t v14 = a4();
      unint64_t result = (void *)UnkeyedDecodingContainer.inferredDecode<A>()(v12, a5, v13, v14);
      if (v5)
      {
        swift_release(_swiftEmptyArrayStorage);
        return _swiftEmptyArrayStorage;
      }

      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        unint64_t result = (void *)a3(v15 > 1, v16 + 1, 1LL);
      }
      _swiftEmptyArrayStorage[2]  = v16 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v16)  = v22;
      if (v20 < v21) {
        goto LABEL_21;
      }
      if (!v11) {
        goto LABEL_22;
      }
      ++v11;
      --v7;
      if (!--v6) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_10018FBEC(unsigned int a1, uint64_t a2)
{
  uint64_t v3 = (unsigned __int16)(HIWORD(a1) - a1);
  unsigned int v15 = HIWORD(a1);
  unsigned __int16 v16 = a1;
  else {
    uint64_t v4 = (unsigned __int16)(HIWORD(a1) - a1);
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)sub_100069750(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    LODWORD(v7)  = v15 - v16;
    if (v15 >= v16) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v8 = -v7;
    while (v4)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      uint64_t v10 = *(void *)(a2 + 32);
      sub_1000237C8(a2, v9);
      unint64_t v11 = sub_10019B62C();
      unint64_t result = (void *)UnkeyedDecodingContainer.inferredDecode<A>()( v9,  (uint64_t)&type metadata for NANPMK.ID,  v10,  v11);
      if (v2)
      {
        swift_release(_swiftEmptyArrayStorage);
        return _swiftEmptyArrayStorage;
      }

      __int128 v12 = v17;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
      {
        unint64_t result = (void *)sub_100069750(v13 > 1, v14 + 1, 1);
        __int128 v12 = v17;
      }

      _swiftEmptyArrayStorage[2]  = v14 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v14 + 4]  = v12;
      if (v15 < v16) {
        goto LABEL_21;
      }
      if (!v8) {
        goto LABEL_22;
      }
      ++v8;
      --v4;
      if (!--v3) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

void static IEEE80211InformationElement.HighThroughputCapability.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 0xFFFFFFFFFFLL) == (a4 & 0xFFFFFFFFFFLL)) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
  }
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.hash(into:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100020AFC(a3, a4);
  Data.hash(into:)(a1, a3, a4);
  return sub_1000208D8(a3, a4);
}

uint64_t sub_10018FE18()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10018FE40 + 4 * byte_10034F510[*v0]))( 1802401130LL,  0xE400000000000000LL);
}

uint64_t sub_10018FE40()
{
  return 1868983913LL;
}

uint64_t sub_10018FE4C()
{
  return 0x7261507564706D61LL;
}

uint64_t sub_10018FE70()
{
  return 7562093LL;
}

uint64_t sub_10018FE80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10019AE08(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10018FEA4(uint64_t a1)
{
  unint64_t v2 = sub_100196B68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018FECC(uint64_t a1)
{
  unint64_t v2 = sub_100196B68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.encode(to:)( void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v8 = sub_100002274(&qword_10040A368);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_100196B68();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys,  &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v21[0])  = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v21, v8);
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v20;
    LOBYTE(v21[0])  = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 16, v21, v8);
    LOBYTE(v21[0])  = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), v21, v8);
    v21[0]  = v15;
    v21[1]  = v16;
    char v22 = 3;
    unint64_t v17 = sub_10005CD78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int IEEE80211InformationElement.HighThroughputCapability.hashValue.getter( unint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  Hasher.init(_seed:)(v9, 0LL);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100020AFC(a2, a3);
  Data.hash(into:)(v9, a2, a3);
  sub_1000208D8(a2, a3);
  return Hasher._finalize()();
}

unint64_t IEEE80211InformationElement.HighThroughputCapability.init(from:)(void *a1)
{
  return sub_100196CA0(a1) & 0xFFFFFFFFFFLL;
}

Swift::Int sub_100190150()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Swift::UInt16 v4 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)(v7, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v7, v1, v2);
  sub_1000208D8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001901F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt16 v5 = *(_WORD *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 4);
  Hasher._combine(_:)(*(_WORD *)v1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_1000208D8(v3, v4);
}

Swift::Int sub_100190268(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  Swift::UInt16 v4 = *(_WORD *)v1;
  Swift::UInt16 v5 = *(_WORD *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 4);
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v8, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

unint64_t sub_100190304@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100196CA0(a1);
  if (!v2)
  {
    *(_DWORD *)a2  = result;
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_100190340(void *a1)
{
  return IEEE80211InformationElement.HighThroughputCapability.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32),  *((void *)v1 + 1),  *((void *)v1 + 2));
}

void sub_100190364(unsigned __int16 *a1, unsigned __int16 *a2)
{
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.mcs.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100020AFC(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.mcs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000208D8(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24)  = a1;
  *(void *)(v2 + 32)  = a2;
  return result;
}

double IEEE80211InformationElement.HighThroughputOperation.init(from:)@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }

  return result;
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  uint64_t v4 = *(void *)(v2 + 8);
  unint64_t v5 = *(void *)(v2 + 16);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_1000208D8(v4, v5);
  uint64_t v7 = *(void *)(v2 + 24);
  unint64_t v6 = *(void *)(v2 + 32);
  sub_100020AFC(v7, v6);
  Data.hash(into:)(a1, v7, v6);
  return sub_1000208D8(v7, v6);
}

void static IEEE80211InformationElement.HighThroughputOperation.__derived_struct_equals(_:_:)( uint64_t *a1, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)a1 == *a2)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2]);
    if ((v3 & 1) != 0) {
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[3], a1[4]);
    }
  }

uint64_t sub_100190528()
{
  uint64_t v1 = 0x6F6974617265706FLL;
  if (*v0 != 1) {
    uint64_t v1 = 7562093LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x437972616D697270LL;
  }
}

uint64_t sub_10019058C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10019AFB4(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001905B0(uint64_t a1)
{
  unint64_t v2 = sub_100197A60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001905D8(uint64_t a1)
{
  unint64_t v2 = sub_100197A60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.encode(to:)(void *a1)
{
  char v3 = v1;
  uint64_t v5 = sub_100002274(&qword_10040A378);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_100197A60();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys,  &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  LOBYTE(v17)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v17, v5);
  if (!v2)
  {
    __int128 v17 = *(_OWORD *)(v3 + 8);
    char v16 = 1;
    unint64_t v13 = sub_10005CD78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v13);
    __int128 v17 = *(_OWORD *)(v3 + 24);
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int IEEE80211InformationElement.HighThroughputOperation.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v7, 0LL);
  Hasher._combine(_:)(*(_BYTE *)v0);
  uint64_t v2 = v0[1];
  unint64_t v3 = v1[2];
  sub_100020AFC(v1[1], v3);
  Data.hash(into:)(v7, v2, v3);
  sub_1000208D8(v2, v3);
  uint64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  sub_100020AFC(v5, v4);
  Data.hash(into:)(v7, v5, v4);
  sub_1000208D8(v5, v4);
  return Hasher._finalize()();
}

Swift::Int sub_100190810()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 32);
  Swift::UInt8 v5 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v7, 0LL);
  Hasher._combine(_:)(v5);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v7, v1, v2);
  sub_1000208D8(v1, v2);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(v7, v3, v4);
  sub_1000208D8(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001908BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v6 = *(void *)(v1 + 32);
  Hasher._combine(_:)(*(_BYTE *)v1);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  sub_1000208D8(v3, v4);
  sub_100020AFC(v5, v6);
  Data.hash(into:)(a1, v5, v6);
  return sub_1000208D8(v5, v6);
}

Swift::Int sub_100190948(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v5 = *(void *)(v1 + 32);
  Swift::UInt8 v6 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v6);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v8, v2, v3);
  sub_1000208D8(v2, v3);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(v8, v4, v5);
  sub_1000208D8(v4, v5);
  return Hasher._finalize()();
}

double sub_1001909F0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double result = IEEE80211InformationElement.HighThroughputOperation.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }

  return result;
}

uint64_t sub_100190A34(void *a1)
{
  return IEEE80211InformationElement.HighThroughputOperation.encode(to:)(a1);
}

void sub_100190A48(uint64_t *a1, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)a1 == *a2)
  {
    uint64_t v2 = a1[3];
    uint64_t v3 = a1[4];
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2]);
    if ((v4 & 1) != 0) {
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3);
    }
  }

void IEEE80211InformationElement.VeryHighThroughputCapability.hash(into:)( int a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v3 = a3;
  unint64_t v4 = HIDWORD(a2);
  unint64_t v5 = HIWORD(a2);
  unsigned int v6 = HIWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v6);
}

BOOL static IEEE80211InformationElement.VeryHighThroughputCapability.__derived_struct_equals(_:_:)( uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  BOOL v4 = (unsigned __int16)a2 == (unsigned __int16)a4 && HIWORD(a2) == HIWORD(a4);
  return a1 == a3 && v4;
}

uint64_t sub_100190B3C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100190B64 + 4 * byte_10034F514[*v0]))( 1868983913LL,  0xE400000000000000LL);
}

uint64_t sub_100190B64()
{
  return 0x70614D53434D7872LL;
}

uint64_t sub_100190B7C()
{
  return 0x474C686769487872LL;
}

uint64_t sub_100190BD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10019B128(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100190BF8(uint64_t a1)
{
  unint64_t v2 = sub_100197AA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100190C20(uint64_t a1)
{
  unint64_t v2 = sub_100197AA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.encode(to:)( void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040A388);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_100197AA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys,  &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys,  v13,  v11,  v12);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v7);
  if (!v3)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), &v19, v7);
    char v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2), &v18, v7);
    char v17 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
    char v16 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a3), &v16, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int IEEE80211InformationElement.VeryHighThroughputCapability.hashValue.getter( unint64_t a1, unsigned int a2)
{
  Swift::UInt16 v2 = a2;
  Swift::UInt32 v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = HIWORD(a1);
  unsigned int v6 = HIWORD(a2);
  Hasher.init(_seed:)(v8, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

unint64_t IEEE80211InformationElement.VeryHighThroughputCapability.init(from:)(void *a1)
{
  return sub_100196E6C(a1);
}

unint64_t sub_100190E84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100196E6C(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_DWORD *)(a2 + 8)  = v5;
  }

  return result;
}

uint64_t sub_100190EC8(void *a1)
{
  return IEEE80211InformationElement.VeryHighThroughputCapability.encode(to:)( a1,  *(void *)v1,  *(unsigned int *)(v1 + 8));
}

Swift::Int sub_100190EE4()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt16 v2 = *(_WORD *)(v0 + 4);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 6);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 8);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)(v7, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void sub_100190F78()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 4);
  Swift::UInt16 v2 = *(_WORD *)(v0 + 6);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 8);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 10);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_100190FE0(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)v1;
  Swift::UInt16 v3 = *(_WORD *)(v1 + 4);
  Swift::UInt16 v4 = *(_WORD *)(v1 + 6);
  Swift::UInt16 v5 = *(_WORD *)(v1 + 8);
  Swift::UInt16 v6 = *(_WORD *)(v1 + 10);
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL sub_100191070(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6)
}

uint64_t sub_1001910C0(uint64_t a1)
{
  unint64_t v2 = sub_100197AE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001910E8(uint64_t a1)
{
  unint64_t v2 = sub_100197AE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputOperation.encode(to:)(void *a1)
{
  return sub_100193218( a1,  &qword_10040A398,  (uint64_t (*)(void))sub_100197AE8,  (uint64_t)&type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
}

uint64_t sub_100191140(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100193314( a1,  a2,  a3,  &qword_10040A398,  (uint64_t (*)(void))sub_100197AE8,  (uint64_t)&type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.rsnPreAuthentication.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.rsnPreAuthentication;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.noPairwiseCapabilities.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.noPairwiseCapabilities;
}

uint64_t IEEE80211InformationElement.RSNCapability.Capabilities.ptksaReplayCounters.getter@<X0>( __int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10019119C(a1, 2LL, a2);
}

uint64_t IEEE80211InformationElement.RSNCapability.Capabilities.gtksaReplayCounters.getter@<X0>( __int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10019119C(a1, 4LL, a2);
}

uint64_t sub_10019119C@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  return sub_100071694(a2, 2LL, a1, a3);
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.mfpr.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.mfpr;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.mfpc.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.mfpc;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.ocvc.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.ocvc;
}

uint64_t sub_100191248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100198DF4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001912A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100198DF4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001912F0@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v4 = sub_10019AD60(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2  = v4;
  return result;
}

void *IEEE80211InformationElement.RSNCapability.defaultVersion.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.defaultVersion;
}

uint64_t IEEE80211InformationElement.RSNCapability.groupCipherSuite.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t IEEE80211InformationElement.RSNCapability.groupManagementCipherSuite.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t IEEE80211InformationElement.RSNCapability.groupManagementCipherSuite.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 40)  = result;
  return result;
}

void IEEE80211InformationElement.RSNCapability.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_WORD *)v2);
  Hasher._combine(_:)(byte_1003511DF[*(char *)(v2 + 2)]);
  uint64_t v4 = *(void *)(v2 + 8);
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    unint64_t v6 = (char *)(v4 + 32);
    do
    {
      uint64_t v7 = *v6++;
      Hasher._combine(_:)(byte_1003511DF[v7]);
      --v5;
    }

    while (v5);
  }

  uint64_t v8 = *(void *)(v2 + 16);
  Swift::UInt v9 = *(void *)(v8 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    uint64_t v10 = (char *)(v8 + 32);
    do
    {
      char v11 = *v10++;
      Hasher._combine(_:)(v11 + 1);
      --v9;
    }

    while (v9);
  }

  Hasher._combine(_:)(*(_WORD *)(v2 + 24));
  uint64_t v12 = *(void *)(v2 + 32);
  uint64_t v17 = v12;
  Swift::UInt v13 = *(void *)(v12 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    swift_bridgeObjectRetain(v12);
    unint64_t v14 = (unint64_t *)(v12 + 40);
    do
    {
      uint64_t v15 = *(v14 - 1);
      unint64_t v16 = *v14;
      sub_100020AFC(v15, *v14);
      Data.hash(into:)(a1, v15, v16);
      sub_1000208D8(v15, v16);
      v14 += 2;
      --v13;
    }

    while (v13);
    sub_100197B2C(&v17);
  }

  Hasher._combine(_:)(byte_1003511DF[*(char *)(v2 + 40)]);
}

Swift::Int IEEE80211InformationElement.RSNCapability.hashValue.getter()
{
  return Hasher._finalize()();
}

double sub_1001914B8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result = IEEE80211InformationElement.RSNCapability.init(from:)(a1, &v6);
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25)  = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

double IEEE80211InformationElement.RSNCapability.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25)  = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

uint64_t sub_100191538(void *a1)
{
  return IEEE80211InformationElement.RSNCapability.encode(to:)(a1);
}

uint64_t IEEE80211InformationElement.RSNCapability.encode(to:)(void *a1)
{
  Swift::UInt16 v3 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v22, v4, v5);
  uint64_t v6 = v23;
  uint64_t v7 = v24;
  uint64_t v8 = *v1;
  sub_1000237C8((uint64_t)v22, v23);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (v2) {
    return sub_100002AC4(v22);
  }
  LOBYTE(v21)  = *((_BYTE *)v3 + 2);
  uint64_t v9 = v23;
  uint64_t v10 = v24;
  sub_1000237C8((uint64_t)v22, v23);
  unint64_t v11 = sub_100198044();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v21,  &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite,  v11,  v9,  v10);
  uint64_t v12 = *((void *)v3 + 1);
  unint64_t v13 = *(void *)(v12 + 16);
  if (v13 < 0x10000)
  {
    uint64_t v14 = v23;
    uint64_t v15 = v24;
    sub_1000237C8((uint64_t)v22, v23);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v13, v14, v15);
    uint64_t v21 = v12;
    uint64_t v16 = v23;
    uint64_t v17 = v24;
    sub_1000237C8((uint64_t)v22, v23);
    uint64_t v18 = sub_100002274(&qword_10040A3B0);
    uint64_t v19 = sub_100087780( &qword_10040A3B8,  &qword_10040A3B0,  (void (*)(void))sub_100198044,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v21, v18, v19, v16, v17);
    return sub_100002AC4(v22);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

Swift::Int sub_10019172C(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_100191764(__int128 *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  __int128 v5 = *a1;
  v6[0]  = v2;
  *(_OWORD *)((char *)v6 + 9)  = *(__int128 *)((char *)a1 + 25);
  __int128 v3 = a2[1];
  __int128 v7 = *a2;
  v8[0]  = v3;
  *(_OWORD *)((char *)v8 + 9)  = *(__int128 *)((char *)a2 + 25);
  return _s7CoreP2P27IEEE80211InformationElementO13RSNCapabilityV23__derived_struct_equalsySbAE_AEtFZ_0( (unsigned __int16 *)&v5,  (unsigned __int16 *)&v7);
}

uint64_t sub_1001917AC()
{
  uint64_t result = sub_1001A0414(4LL);
  static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport.unsafeMutableAddressor()
{
  if (qword_1004043C8 != -1) {
    swift_once(&qword_1004043C8, sub_1001917AC);
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport.getter()
{
  return sub_10005E194( &qword_1004043C8,  &static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport);
}

uint64_t sub_100191828()
{
  uint64_t result = sub_1001A0414(5LL);
  static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement.unsafeMutableAddressor()
{
  if (qword_1004043D0 != -1) {
    swift_once(&qword_1004043D0, sub_100191828);
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement.getter()
{
  return sub_10005E194(&qword_1004043D0, &static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement);
}

uint64_t sub_1001918A4()
{
  uint64_t result = sub_1001A0414(8LL);
  static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported.unsafeMutableAddressor()
{
  if (qword_1004043D8 != -1) {
    swift_once(&qword_1004043D8, sub_1001918A4);
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported.getter()
{
  return sub_10005E194(&qword_1004043D8, &static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported);
}

uint64_t sub_100191920()
{
  uint64_t result = sub_1001A0414(9LL);
  static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported.unsafeMutableAddressor()
{
  if (qword_1004043E0 != -1) {
    swift_once(&qword_1004043E0, sub_100191920);
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported.getter()
{
  return sub_10005E194(&qword_1004043E0, &static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported);
}

uint64_t sub_10019199C()
{
  uint64_t result = sub_1001A0414(10LL);
  static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR.unsafeMutableAddressor()
{
  if (qword_1004043E8 != -1) {
    swift_once(&qword_1004043E8, sub_10019199C);
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR.getter()
{
  return sub_10005E194(&qword_1004043E8, &static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR);
}

uint64_t sub_100191A18()
{
  uint64_t result = sub_1001A0414(11LL);
  static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport.unsafeMutableAddressor()
{
  if (qword_1004043F0 != -1) {
    swift_once(&qword_1004043F0, sub_100191A18);
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport.getter()
{
  return sub_10005E194( &qword_1004043F0,  &static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport);
}

void *IEEE80211InformationElement.ExtendedRSNCapability.init(from:)(void *a1)
{
  return sub_100197B54(a1);
}

uint64_t sub_100191AA8(uint64_t a1)
{
  unint64_t v2 = sub_100198088();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100191AD0(uint64_t a1)
{
  unint64_t v2 = sub_100198088();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.ExtendedRSNCapability.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040A3C0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __int128 v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_100198088();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100002274(&qword_100406978);
  unint64_t v12 = sub_1001980CC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *sub_100191BFC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = IEEE80211InformationElement.ExtendedRSNCapability.init(from:)(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_100191C24(void *a1)
{
  return IEEE80211InformationElement.ExtendedRSNCapability.encode(to:)(a1, *v1);
}

uint64_t sub_100191C3C()
{
  return sub_10019FF68(0LL, *v0);
}

void sub_100191C48()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    __int128 v3 = (Swift::UInt8 *)(v1 + 32);
    do
    {
      Swift::UInt8 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }

    while (v2);
  }

uint64_t sub_100191C98(uint64_t a1)
{
  return sub_10019FF68(a1, *v1);
}

uint64_t sub_100191CA4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10005D5F4(a1, (void (*)(uint64_t))sub_10008F9C4, a2);
}

uint64_t sub_100191CB0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A0368(v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a2  = v7;
  return result;
}

BOOL sub_100191D0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v9 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A0368(v4);
  uint64_t v5 = v9;
  char v6 = sub_10007990C(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    uint64_t v7 = swift_bridgeObjectRetain(v4);
    sub_10008F9C4(v7);
    uint64_t v5 = v4;
  }

  *a1  = v5;
  swift_bridgeObjectRelease(v4);
  return (v6 & 1) == 0;
}

uint64_t sub_100191DA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001A027C(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_100191DD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A0368(v4);
  uint64_t v5 = v8;
  sub_10008F9C4(v4);
  char v6 = sub_10007990C(v8, _swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if ((v6 & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease(v8);
    uint64_t v5 = 0LL;
  }

  *a2  = v5;
  return result;
}

uint64_t sub_100191E64(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_10008F9C4(*a1);
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_100191E8C(uint64_t *a1)
{
  return sub_1001A0368(*a1);
}

uint64_t sub_100191E94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain_n(*v2, 2LL);
  sub_1001A0408(v4);
  sub_1001A0368(v7);
  swift_bridgeObjectRelease(v5);
  uint64_t result = swift_bridgeObjectRelease(v7);
  *a2  = v5;
  return result;
}

uint64_t sub_100191F10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v6 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A0368(v2);
  char v4 = sub_10007990C(v6, v3);
  swift_bridgeObjectRelease(v6);
  return v4 & 1;
}

uint64_t sub_100191F78(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A0368(v2);
  char v3 = sub_10007990C(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v5);
  return v3 & 1;
}

uint64_t sub_100191FD8(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  sub_1001A0368(v3);
  LOBYTE(v2)  = sub_10007990C(v5, v2);
  swift_bridgeObjectRelease(v5);
  return v2 & 1;
}

uint64_t sub_100192040(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A0408(v2);
  sub_1001A0368(v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10019209C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1001E11BC(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2  = v4;
  return result;
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.init(from:)(void *a1)
{
  return sub_100197428(a1);
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.encode(to:)(void *a1, char a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v4, v5);
  __int16 v13 = 3840;
  char v14 = -84;
  uint64_t v6 = v16;
  uint64_t v7 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  unint64_t v8 = sub_100165A78();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v13, &type metadata for OUI, v8, v6, v7);
  if (!v2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(byte_1003511DF[v9], v10, v11);
  }

  return sub_100002AC4(v15);
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.rawValue.getter(char a1)
{
  return byte_1003511DF[a1];
}

BOOL sub_1001921F0(char *a1, char *a2)
{
  return byte_1003511DF[*a1] == byte_1003511DF[*a2];
}

uint64_t sub_100192214@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10019223C(_BYTE *a1@<X8>)
{
  *a1  = byte_1003511DF[*v1];
}

Swift::Int sub_100192254()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(byte_1003511DF[v1]);
  return Hasher._finalize()();
}

void sub_1001922A0()
{
}

Swift::Int sub_1001922D4(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(byte_1003511DF[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10019231C@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100197428(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_100192344(void *a1)
{
  return IEEE80211InformationElement.IEEE80211CipherSuite.encode(to:)(a1, *v1);
}

uint64_t sub_10019235C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019A734();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001923B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019A734();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100192404@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v4 = sub_10019AD28(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2  = v4;
  return result;
}

uint64_t sub_100192440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019B7C8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019249C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019B7C8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001924E8()
{
  if (*v0) {
    return 0x65696B6F6F63LL;
  }
  else {
    return 0x6B636162656D6F63LL;
  }
}

uint64_t sub_10019252C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10019B344(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100192550(uint64_t a1)
{
  unint64_t v2 = sub_100198128();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100192578(uint64_t a1)
{
  unint64_t v2 = sub_100198128();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100002274(&qword_10040A3D0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_100198128();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v19[0])  = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0]  = a3;
    v19[1]  = v18;
    char v20 = 1;
    unint64_t v15 = sub_10005CD78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for Data, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001926DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100197170(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.init(from:)( void *a1)
{
  return sub_100197170(a1);
}

uint64_t sub_100192728(void *a1)
{
  return IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.encode(to:)( a1,  *v1,  *((void *)v1 + 1),  *((void *)v1 + 2));
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100058430(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
  return v1;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback.setter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100057CA0(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8)  = a2;
  *(void *)(v3 + 16)  = a3;
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.finiteCylicGroupID.setter( uint64_t result)
{
  *(_BYTE *)(v1 + 24)  = result & 1;
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10002255C(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.setter( uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100020B40(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32)  = a1;
  *(void *)(v2 + 40)  = a2;
  return result;
}

void IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = v2[2];
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v6 = *v2;
    uint64_t v5 = v2[1];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_100020AFC(v5, v4);
    Data.hash(into:)(a1, v5, v4);
    sub_100057CA0(v6, v5, v4);
  }

  sub_1000586C0((uint64_t)(v2 + 3), (uint64_t)&v9, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v9, (uint64_t)&v10, &qword_1004096B0);
  if (v10 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }

  unint64_t v7 = v2[5];
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v8 = v2[4];
    Hasher._combine(_:)(1u);
    sub_100020AFC(v8, v7);
    Data.hash(into:)(a1, v8, v7);
    sub_100020B40(v8, v7);
  }

Swift::Int IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001929A8()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  __int128 v6 = v0[2];
  Hasher.init(_seed:)(v3, 0LL);
  IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_1001929F8(uint64_t a1)
{
}

Swift::Int sub_100192A30(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  __int128 v7 = v1[2];
  Hasher.init(_seed:)(v4, a1);
  IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

double sub_100192A7C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result = IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.init(from:)(a1, v6);
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }

  return result;
}

double IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.init(from:)@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }

  return result;
}

uint64_t sub_100192AFC(void *a1)
{
  return IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.encode(to:)(a1);
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.encode(to:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Encoder.unkeyedContainer()(v23, v3, v4);
  sub_1000586C0(v1, (uint64_t)v28, &qword_10040A3E0);
  sub_1000586C0((uint64_t)v28, (uint64_t)v29, &qword_10040A3E0);
  char v5 = v30 >> 60 != 15;
  sub_1000586C0(v1 + 24, (uint64_t)&v33, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v33, (uint64_t)&v34, &qword_1004096B0);
  if ((v34 & 1) == 0)
  {
    sub_1000586C0(v1 + 32, (uint64_t)v27, &qword_10040A408);
    sub_1000586C0((uint64_t)v27, (uint64_t)v31, &qword_10040A408);
    if (v32 >> 60 != 15) {
      v5 |= 2u;
    }
  }

  v22[0]  = v5;
  uint64_t v6 = v24;
  uint64_t v7 = v25;
  sub_1000237C8((uint64_t)v23, v24);
  unint64_t v8 = sub_10019816C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v22,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control,  v8,  v6,  v7);
  if (!v2)
  {
    sub_1000586C0((uint64_t)v28, (uint64_t)v22, &qword_10040A3E0);
    uint64_t v9 = v24;
    uint64_t v10 = v25;
    sub_1000237C8((uint64_t)v23, v24);
    uint64_t v11 = sub_100002274(&qword_10040A3E0);
    uint64_t v12 = sub_100087780( &qword_10040A3F0,  &qword_10040A3E0,  (void (*)(void))sub_1001981B0,  (uint64_t)&protocol conformance descriptor for <A> A?);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, v11, v12, v9, v10);
    sub_1000586C0((uint64_t)&v33, (uint64_t)v22, &qword_1004096B0);
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    sub_1000237C8((uint64_t)v23, v24);
    uint64_t v15 = sub_100002274(&qword_1004096B0);
    uint64_t v16 = sub_100087780( &qword_10040A400,  &qword_1004096B0,  (void (*)(void))sub_100164754,  (uint64_t)&protocol conformance descriptor for <A> A?);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, v15, v16, v13, v14);
    sub_1000586C0(v1 + 32, (uint64_t)v26, &qword_10040A408);
    sub_1000586C0((uint64_t)v26, (uint64_t)v22, &qword_10040A408);
    uint64_t v17 = v24;
    uint64_t v18 = v25;
    sub_1000237C8((uint64_t)v23, v24);
    uint64_t v19 = sub_100002274(&qword_10040A408);
    uint64_t v20 = sub_100087780( &qword_10040A410,  &qword_10040A408,  (void (*)(void))sub_10005CD78,  (uint64_t)&protocol conformance descriptor for <A> A?);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, v19, v20, v17, v18);
  }

  return sub_100002AC4(v23);
}

BOOL sub_100192E10(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2]  = a1[2];
  v8[0]  = v3;
  __int128 v5 = a2[2];
  v8[1]  = v4;
  v8[2]  = v5;
  return _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0( (uint64_t *)v7,  (uint64_t *)v8);
}

uint64_t IEEE80211InformationElement.AuthenticationKeyManagementSuite.init(from:)(void *a1)
{
  return sub_1001972BC(a1);
}

uint64_t IEEE80211InformationElement.AuthenticationKeyManagementSuite.encode(to:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100021104(a1, v1);
  dispatch thunk of Encoder.unkeyedContainer()(v9, v1, v2);
  __int16 v7 = 3840;
  char v8 = -84;
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  sub_1000237C8((uint64_t)v9, v10);
  unint64_t v5 = sub_100165A78();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v7, &type metadata for OUI, v5, v3, v4);
  return sub_100002AC4(v9);
}

uint64_t sub_100192F10@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_100192F38@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001972BC(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_100192F60()
{
  return 1701080931LL;
}

uint64_t sub_100192F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 1701080931 && a2 == 0xE400000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE400000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701080931LL, 0xE400000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3  = v8 & 1;
  return result;
}

uint64_t sub_100192FF4(uint64_t a1)
{
  unint64_t v2 = sub_1001981F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019301C(uint64_t a1)
{
  unint64_t v2 = sub_1001981F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.MessageIntegrityCode.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100002274(&qword_10040A418);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  unint64_t v12 = sub_1001981F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys,  &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys,  v12,  v10,  v11);
  v16[0]  = a2;
  v16[1]  = a3;
  unint64_t v13 = sub_10005CD78();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *IEEE80211InformationElement.MessageIntegrityCode.init(from:)(void *a1)
{
  return sub_10019704C(a1);
}

void *sub_10019315C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10019704C(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
  }

  return result;
}

uint64_t sub_100193184(void *a1)
{
  return IEEE80211InformationElement.MessageIntegrityCode.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10019319C(uint64_t a1)
{
  unint64_t v2 = sub_100198238();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001931C4(uint64_t a1)
{
  unint64_t v2 = sub_100198238();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.WrappedData.encode(to:)(void *a1)
{
  return sub_100193218( a1,  &qword_10040A428,  (uint64_t (*)(void))sub_100198238,  (uint64_t)&type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
}

uint64_t sub_100193218(void *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7 = sub_100002274(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  uint64_t v13 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v13, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1001932E8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100193314( a1,  a2,  a3,  &qword_10040A428,  (uint64_t (*)(void))sub_100198238,  (uint64_t)&type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
}

uint64_t sub_100193314(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v9 = sub_100002274(a4);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100021104(a1, v13);
  uint64_t v15 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v15, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

BOOL sub_1001933E4(char *a1, char *a2)
{
  return byte_1003511D6[*a1] == byte_1003511D6[*a2];
}

Swift::Int sub_100193408()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(byte_1003511D6[v1]);
  return Hasher._finalize()();
}

void sub_100193454()
{
}

Swift::Int sub_100193488(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(byte_1003511D6[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1001934D0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100196BD4(*a1);
  *a2  = result;
  return result;
}

void sub_1001934F8(_BYTE *a1@<X8>)
{
  *a1  = byte_1003511D6[*v1];
}

uint64_t sub_100193510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019B450();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019356C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019B450();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unsigned __int8 *sub_1001935B8@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 100) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  if (v2 == 8) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  *a2  = v4;
  return result;
}

void sub_1001935D8(char *a1@<X8>)
{
  if (*v1) {
    char v2 = 100;
  }
  else {
    char v2 = 8;
  }
  *a1  = v2;
}

Swift::Int sub_1001935F4()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    Swift::UInt8 v2 = 100;
  }
  else {
    Swift::UInt8 v2 = 8;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100193644()
{
  if (*v0) {
    Swift::UInt8 v1 = 100;
  }
  else {
    Swift::UInt8 v1 = 8;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10019367C(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    Swift::UInt8 v3 = 100;
  }
  else {
    Swift::UInt8 v3 = 8;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001936C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019B494();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100193724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019B494();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100193770()
{
  __asm { BR              X12 }

uint64_t sub_1001937AC@<X0>(int a1@<W8>)
{
  return (a1 << 8) | 6u;
}

uint64_t IEEE80211InformationElement.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10019827C(a1);
  if (!v2) {
    return sub_1000899E8((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_100193878(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A680);
  swift_beginAccess(a1, v10, 33LL, 0LL);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_1000237C8(a1, v4);
  uint64_t v6 = sub_1000572E4( &qword_10040A688,  &qword_10040A680,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  uint64_t result = swift_endAccess(v10);
  if (!v1)
  {
    uint64_t v8 = (char *)&loc_100193954 + 4 * byte_10034F523[sub_100196BD4(v9)];
    __asm { BR              X11 }
  }

  return result;
}

uint64_t sub_100193B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_10040A680);
  swift_beginAccess(a1, v12, 33LL, 0LL);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  sub_1000237C8(a1, v6);
  uint64_t v8 = sub_1000572E4( &qword_10040A688,  &qword_10040A680,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v5, v5, v8, v6, v7);
  swift_endAccess(v12);
  if (!v2)
  {
    unsigned __int8 v9 = (char *)&loc_100193BF4 + 4 * byte_10034F531[sub_100196BD4(v11)];
    __asm { BR              X11 }
  }

  return a2;
}

uint64_t sub_100193DB0(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A680);
  swift_beginAccess(a1, v10, 33LL, 0LL);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_1000237C8(a1, v4);
  uint64_t v6 = sub_1000572E4( &qword_10040A688,  &qword_10040A680,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  uint64_t result = swift_endAccess(v10);
  if (!v1)
  {
    uint64_t v8 = (char *)&loc_100193E90 + 4 * byte_10034F53F[sub_100196BD4(v9)];
    __asm { BR              X11 }
  }

  return result;
}

uint64_t sub_10019407C(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A680);
  swift_beginAccess(a1, v10, 33LL, 0LL);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_1000237C8(a1, v4);
  uint64_t v6 = sub_1000572E4( &qword_10040A688,  &qword_10040A680,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  uint64_t result = swift_endAccess(v10);
  if (!v1)
  {
    uint64_t v8 = (char *)&loc_100194158 + 4 * byte_10034F54D[sub_100196BD4(v9)];
    __asm { BR              X11 }
  }

  return result;
}

uint64_t sub_100194324(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_10040A680);
  swift_beginAccess(a1, v12, 33LL, 0LL);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  sub_1000237C8(a1, v6);
  uint64_t v8 = sub_1000572E4( &qword_10040A688,  &qword_10040A680,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v5, v5, v8, v6, v7);
  swift_endAccess(v12);
  if (!v2)
  {
    unsigned __int8 v9 = (char *)&loc_1001943FC + 4 * byte_10034F55B[sub_100196BD4(v11)];
    __asm { BR              X11 }
  }

  return a2;
}

uint64_t sub_1001945C0(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A680);
  swift_beginAccess(a1, v9, 33LL, 0LL);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_1000237C8(a1, v4);
  uint64_t v6 = sub_1000572E4( &qword_10040A688,  &qword_10040A680,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  uint64_t result = swift_endAccess(v9);
  if (!v1)
  {
    uint64_t v8 = (char *)&loc_100194698 + 4 * byte_10034F569[sub_100196BD4(v9[24])];
    __asm { BR              X11 }
  }

  return result;
}

uint64_t sub_1001947CC(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A680);
  swift_beginAccess(a1, v10, 33LL, 0LL);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_1000237C8(a1, v4);
  uint64_t v6 = sub_1000572E4( &qword_10040A688,  &qword_10040A680,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  uint64_t result = swift_endAccess(v10);
  if (!v1)
  {
    uint64_t v8 = (char *)&loc_1001948A8 + 4 * byte_10034F573[sub_100196BD4(v9)];
    __asm { BR              X11 }
  }

  return result;
}

void IEEE80211InformationElement.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002274(&qword_10040A418);
  v15[7]  = *(void *)(v4 - 8);
  v15[8]  = v4;
  __chkstk_darwin(v4);
  v15[6]  = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274(&qword_10040A428);
  v15[4]  = *(void *)(v6 - 8);
  v15[5]  = v6;
  __chkstk_darwin(v6);
  v15[3]  = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274(&qword_10040A398);
  v15[1]  = *(void *)(v8 - 8);
  v15[2]  = v8;
  __chkstk_darwin(v8);
  uint64_t v9 = sub_100002274(&qword_10040A3C0);
  __chkstk_darwin(v9);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  dispatch thunk of Encoder.unkeyedContainer()(v16, v10, v11);
  unint64_t v12 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = type metadata accessor for BinaryEncoder();
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(_OWORD *)(v14 + 16)  = xmmword_1003398F0;
  v15[9]  = v14 + 16;
  uint64_t v18 = v14;
  *(void *)(v14 + 32)  = v12;
  v15[11]  = v2;
  sub_1000899E8(v2, (uint64_t)v17);
  __asm { BR              X10 }

uint64_t sub_100194C40()
{
  __int128 v3 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 272)  = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 288)  = v3;
  *(_OWORD *)(v0 + 297)  = *(_OWORD *)(v0 + 241);
  *(void *)(v0 + 152)  = v1;
  *(void *)(v0 + 160)  = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
  uint64_t v4 = *(void *)(v2 - 72);
  *(void *)(v0 + 128)  = v4;
  uint64_t v5 = *(void *)(v0 + 88);
  sub_100089A24(v5, (void (*)(void, void, void, void, void, void, void))sub_100058460);
  swift_retain();
  uint64_t v6 = *(void *)(v0 + 80);
  IEEE80211InformationElement.RSNCapability.encode(to:)((void *)(v0 + 128));
  sub_100002AC4((void *)(v0 + 128));
  sub_100089A24(v5, (void (*)(void, void, void, void, void, void, void))sub_100057CD0);
  if (!v6)
  {
    uint64_t v7 = *(void *)(v0 + 72);
    sub_100193770();
    swift_beginAccess(v7, v0 + 128, 0LL, 0LL);
    __asm { BR              X12 }
  }

  swift_release(v4);
  return sub_100002AC4((void *)(v0 + 176));
}

void IEEE80211InformationElement.hash(into:)()
{
  __asm { BR              X10 }

void sub_100195A50()
{
}

void sub_100195D80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (a20 | a21 | v21 | a19 | a18 | a17) {
    Swift::UInt v22 = 6LL;
  }
  else {
    Swift::UInt v22 = 5LL;
  }
  Hasher._combine(_:)(v22);
  JUMPOUT(0x100195D60LL);
}

Swift::Int IEEE80211InformationElement.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100195F08()
{
  return Hasher._finalize()();
}

void sub_100195F54()
{
}

Swift::Int sub_100195F90(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100195FE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IEEE80211InformationElement.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1000899E8((uint64_t)v5, a2);
  }
  return result;
}

void sub_100196024(void *a1)
{
}

uint64_t sub_100196070(uint64_t a1, uint64_t a2)
{
  return v3 & 1;
}

BOOL _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  if (v6 >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      sub_100058430(*a1, v5, v6);
      sub_100058430(v7, v8, v9);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
      char v11 = v10;
      sub_100057CA0(v7, v8, v9);
      sub_100057CA0(v4, v5, v6);
      if ((v11 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_3;
    }

BOOL _s7CoreP2P27IEEE80211InformationElementO13RSNCapabilityV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && byte_1003511DF[*((char *)a1 + 2)] == byte_1003511DF[*((char *)a2 + 2)]
      && sub_10007D9DC(*((void *)a1 + 1), *((void *)a2 + 1))
      && (sub_10007990C(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) != 0
      && a1[12] == a2[12]
      && (_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0( *((void *)a1 + 4),  *((void *)a2 + 4)) & 1) != 0 && byte_1003511DF[*((char *)a1 + 40)] == byte_1003511DF[*((char *)a2 + 40)];
}

void _s7CoreP2P27IEEE80211InformationElementO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }

BOOL sub_100196430()
{
  uint64_t v4 = v22;
  uint64_t v3 = v23;
  int v5 = v24;
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  sub_1000899E8(v0, (uint64_t)&v14);
  BOOL v12 = 0;
  if (!v21 && v14 == v1 && byte_1003511DF[v2] == byte_1003511DF[v15])
  {
    uint64_t v8 = v17;
    int v9 = v18;
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    if (sub_10007D9DC(v4, v16)
      && (sub_10007990C(v3, v8) & 1) != 0
      && v5 == v9
      && (_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v10) & 1) != 0
      && byte_1003511DF[v7] == byte_1003511DF[v11])
    {
      return 1;
    }
  }

  return v12;
}

unint64_t sub_100196B68()
{
  unint64_t result = qword_10040A370;
  if (!qword_10040A370)
  {
    unint64_t result = swift_getWitnessTable( &unk_100351074,  &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A370);
  }

  return result;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0( unsigned __int8 a1)
{
  if (a1 > 0xDu) {
    return 13LL;
  }
  else {
    return byte_1003511EC[(char)a1];
  }
}

uint64_t sub_100196BD4(unsigned __int8 a1)
{
  if (a1 <= 0xBEu)
  {
    if (a1 > 0x3Cu)
    {
      if (a1 == 61) {
        return 2LL;
      }
      if (a1 == 140) {
        return 3LL;
      }
    }

    else
    {
      if (a1 == 45) {
        return 0LL;
      }
      if (a1 == 48) {
        return 1LL;
      }
    }
  }

  else if (a1 <= 0xDCu)
  {
    if (a1 == 191) {
      return 4LL;
    }
    if (a1 == 192) {
      return 5LL;
    }
  }

  else
  {
    switch(a1)
    {
      case 0xDDu:
        return 6LL;
      case 0xF4u:
        return 7LL;
      case 0xFFu:
        return 8LL;
    }
  }

  return 9LL;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0( char a1)
{
  else {
    return (a1 - 1);
  }
}

unint64_t sub_100196CA0(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A678);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100196B68();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys,  &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  LOBYTE(v15)  = 0;
  unsigned __int16 v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  LOBYTE(v15)  = 1;
  unsigned __int16 v11 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  LOBYTE(v15)  = 2;
  unsigned __int8 v12 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  char v16 = 3;
  unint64_t v13 = sub_1000702C8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for Data, &v16, v3, &type metadata for Data, v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v10 | ((unint64_t)v11 << 16) | ((unint64_t)v12 << 32);
}

unint64_t sub_100196E6C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A670);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100197AA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys,  &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v19 = 0;
  unsigned int v10 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
  char v18 = 1;
  unsigned __int16 v11 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
  char v17 = 2;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  char v16 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  char v15 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v10 | ((unint64_t)v11 << 32) | (v14 << 48);
}

void *sub_10019704C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A630);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_1001981F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys,  &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    unint64_t v11 = sub_1000702C8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v14;
    sub_100002AC4(a1);
  }

  return v9;
}

uint64_t sub_100197170(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v14, v3, v4);
  if (!v1)
  {
    uint64_t v5 = v15;
    uint64_t v6 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()( v5,  (uint64_t)&type metadata for UInt16,  v6,  (uint64_t)&protocol witness table for UInt16);
    uint64_t v3 = v13;
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    uint64_t v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v7, v8);
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.decodeData(with:)(v9, v10, v11);
    sub_100002AC4(v14);
  }

  sub_100002AC4(a1);
  return v3;
}

uint64_t sub_1001972BC(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (uint64_t)sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v17, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    uint64_t v5 = sub_1000237C8((uint64_t)v17, v18);
    unint64_t v8 = sub_100070284();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for OUI, &type metadata for OUI, v8, v6, v7);
    if ((sub_100023504(v20 | (v21 << 16), 0xAC0F00u) & 1) != 0)
    {
      uint64_t v9 = v18;
      uint64_t v10 = v19;
      uint64_t v5 = sub_1000237C8((uint64_t)v17, v18);
      char v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v9, v10);
      uint64_t v12 = _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(v11);
      if (v12 != 25)
      {
        uint64_t v5 = v12;
        sub_100002AC4(v17);
        sub_100002AC4(a1);
        return v5;
      }
    }

    unint64_t v13 = sub_1000033FC();
    uint64_t v14 = swift_allocError(&type metadata for WiFiError, v13, 0LL, 0LL);
    *(_OWORD *)uint64_t v15 = xmmword_100337020;
    *(_BYTE *)(v15 + 16)  = 2;
    swift_willThrow(v14);
    sub_100002AC4(v17);
  }

  sub_100002AC4(a1);
  return v5;
}

uint64_t sub_100197428(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (uint64_t)sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v17, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    uint64_t v5 = sub_1000237C8((uint64_t)v17, v18);
    unint64_t v8 = sub_100070284();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for OUI, &type metadata for OUI, v8, v6, v7);
    if ((sub_100023504(v20 | (v21 << 16), 0xAC0F00u) & 1) != 0)
    {
      uint64_t v9 = v18;
      uint64_t v10 = v19;
      uint64_t v5 = sub_1000237C8((uint64_t)v17, v18);
      unsigned __int8 v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v9, v10);
      uint64_t v12 = _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(v11);
      if (v12 != 13)
      {
        uint64_t v5 = v12;
        sub_100002AC4(v17);
        sub_100002AC4(a1);
        return v5;
      }
    }

    unint64_t v13 = sub_1000033FC();
    uint64_t v14 = swift_allocError(&type metadata for WiFiError, v13, 0LL, 0LL);
    *(_OWORD *)uint64_t v15 = xmmword_100337020;
    *(_BYTE *)(v15 + 16)  = 2;
    swift_willThrow(v14);
    sub_100002AC4(v17);
  }

  sub_100002AC4(a1);
  return v5;
}

uint64_t sub_100197594@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v31, v5, v6);
  if (v2)
  {
    sub_100002AC4(a1);
    sub_100057CA0(0LL, 0LL, 0xF000000000000000LL);
    return sub_100020B40(0LL, 0xF000000000000000LL);
  }

  uint64_t v7 = v32;
  uint64_t v8 = v33;
  sub_1000237C8((uint64_t)v31, v32);
  unint64_t v9 = sub_10019B4D8();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control,  v9,  v7,  v8);
  uint64_t v10 = v32;
  uint64_t v11 = v33;
  sub_1000237C8((uint64_t)v31, v32);
  unint64_t v12 = sub_10019B51C();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat,  v12,  v10,  v11);
  if ((v28 & 1) != 0)
  {
    uint64_t v19 = v32;
    uint64_t v20 = v33;
    sub_1000237C8((uint64_t)v31, v32);
    unint64_t v21 = sub_10019B560();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback,  v21,  v19,  v20);
    uint64_t v15 = v28;
    uint64_t v14 = v29;
    unint64_t v16 = v30;
    if ((v28 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v22 = v32;
    uint64_t v34 = v33;
    sub_1000237C8((uint64_t)v31, v32);
    unint64_t v23 = sub_10016B024();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup,  v23,  v22,  v34);
    uint64_t v24 = v32;
    uint64_t v34 = v33;
    sub_1000237C8((uint64_t)v31, v32);
    uint64_t v25 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v24, v34);
    uint64_t v26 = v32;
    uint64_t v34 = v33;
    sub_1000237C8((uint64_t)v31, v32);
    uint64_t v17 = UnkeyedDecodingContainer.decodeData(with:)(v25, v26, v34);
    unint64_t v18 = v27;
    goto LABEL_7;
  }

  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  unint64_t v16 = 0xF000000000000000LL;
  if ((v28 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v17 = 0LL;
  unint64_t v18 = 0xF000000000000000LL;
LABEL_7:
  sub_100002AC4(v31);
  sub_100058430(v15, v14, v16);
  sub_10002255C(v17, v18);
  sub_100002AC4(a1);
  sub_100057CA0(v15, v14, v16);
  uint64_t result = sub_100020B40(v17, v18);
  *(void *)a2  = v15;
  *(void *)(a2 + 8)  = v14;
  *(void *)(a2 + 16)  = v16;
  *(_BYTE *)(a2 + 24)  = (v28 & 2) == 0;
  *(void *)(a2 + 32)  = v17;
  *(void *)(a2 + 40)  = v18;
  return result;
}

uint64_t sub_100197870@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v21, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v22;
  uint64_t v8 = v23;
  sub_1000237C8((uint64_t)v21, v22);
  UnkeyedDecodingContainer.inferredDecode<A>()( v7,  (uint64_t)&type metadata for UInt8,  v8,  (uint64_t)&protocol witness table for UInt8);
  char v9 = v24;
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  sub_1000237C8((uint64_t)v21, v22);
  uint64_t v12 = UnkeyedDecodingContainer.decodeData(with:)(5LL, v10, v11);
  unint64_t v14 = v13;
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  sub_1000237C8((uint64_t)v21, v22);
  sub_100020AFC(v12, v14);
  uint64_t v17 = UnkeyedDecodingContainer.decodeData(with:)(16LL, v15, v16);
  unint64_t v19 = v18;
  sub_100020AFC(v17, v18);
  sub_100002AC4(v21);
  sub_100020AFC(v12, v14);
  sub_100020AFC(v17, v19);
  sub_1000208D8(v17, v19);
  sub_1000208D8(v12, v14);
  sub_100002AC4(a1);
  sub_1000208D8(v12, v14);
  uint64_t result = sub_1000208D8(v17, v19);
  *(_BYTE *)a2  = v9;
  *(void *)(a2 + 8)  = v12;
  *(void *)(a2 + 16)  = v14;
  *(void *)(a2 + 24)  = v17;
  *(void *)(a2 + 32)  = v19;
  return result;
}

unint64_t sub_100197A60()
{
  unint64_t result = qword_10040A380;
  if (!qword_10040A380)
  {
    unint64_t result = swift_getWitnessTable( &unk_100351024,  &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A380);
  }

  return result;
}

unint64_t sub_100197AA4()
{
  unint64_t result = qword_10040A390;
  if (!qword_10040A390)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350FD4,  &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A390);
  }

  return result;
}

unint64_t sub_100197AE8()
{
  unint64_t result = qword_10040A3A0;
  if (!qword_10040A3A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350F84,  &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3A0);
  }

  return result;
}

void *sub_100197B2C(void *a1)
{
  return a1;
}

void *sub_100197B54(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    sub_1000237C8((uint64_t)v13, v14);
    char v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7);
    uint64_t v9 = sub_100002274(&qword_1004040A8);
    uint64_t v10 = swift_allocObject(v9, 33LL, 7LL);
    *(_OWORD *)(v10 + 16)  = xmmword_100339900;
    *(_BYTE *)(v10 + 32)  = v8;
    uint64_t v11 = sub_10018F908(0LL, v8 & 0xF, (uint64_t)v13);
    uint64_t v16 = (void *)v10;
    sub_10019D8A0((uint64_t)v11);
    uint64_t v5 = v16;
    sub_100002AC4(v13);
  }

  sub_100002AC4(a1);
  return v5;
}

uint64_t sub_100197C74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v34, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v35;
  uint64_t v8 = v36;
  sub_1000237C8((uint64_t)v34, v35);
  UnkeyedDecodingContainer.inferredDecode<A>()( v7,  (uint64_t)&type metadata for UInt16,  v8,  (uint64_t)&protocol witness table for UInt16);
  __int16 v9 = v38;
  uint64_t v10 = v35;
  uint64_t v11 = v36;
  sub_1000237C8((uint64_t)v34, v35);
  unint64_t v12 = sub_10019B5A4();
  UnkeyedDecodingContainer.inferredDecode<A>()( v10,  (uint64_t)&type metadata for IEEE80211InformationElement.IEEE80211CipherSuite,  v11,  v12);
  int v13 = v38;
  uint64_t v14 = v35;
  uint64_t v15 = v36;
  sub_1000237C8((uint64_t)v34, v35);
  int v16 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v14, v15);
  uint64_t v17 = sub_10018FA68( v16 << 16,  (uint64_t)v34,  (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_100069790,  (uint64_t (*)(void))sub_10019B5A4,  (uint64_t)&type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
  int v37 = v13;
  uint64_t v18 = v35;
  uint64_t v19 = v36;
  sub_1000237C8((uint64_t)v34, v35);
  swift_bridgeObjectRetain(v17);
  int v20 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v18, v19);
  unint64_t v21 = sub_10018FA68( v20 << 16,  (uint64_t)v34,  (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_10006976C,  (uint64_t (*)(void))sub_10019B670,  (uint64_t)&type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite);
  uint64_t v22 = v35;
  uint64_t v32 = v36;
  uint64_t v23 = v21;
  sub_1000237C8((uint64_t)v34, v35);
  unint64_t v24 = sub_10019B5E8();
  swift_bridgeObjectRetain(v23);
  UnkeyedDecodingContainer.inferredDecode<A>()( v22,  (uint64_t)&type metadata for IEEE80211InformationElement.RSNCapability.Capabilities,  v32,  v24);
  uint64_t v33 = v23;
  LOWORD(v32)  = v38;
  uint64_t v26 = v35;
  uint64_t v25 = v36;
  sub_1000237C8((uint64_t)v34, v35);
  int v27 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v26, v25);
  unsigned __int16 v28 = sub_10018FBEC(v27 << 16, (uint64_t)v34);
  uint64_t v29 = v35;
  uint64_t v30 = v36;
  sub_1000237C8((uint64_t)v34, v35);
  swift_bridgeObjectRetain(v28);
  UnkeyedDecodingContainer.inferredDecode<A>()( v29,  (uint64_t)&type metadata for IEEE80211InformationElement.IEEE80211CipherSuite,  v30,  v12);
  LOBYTE(v29)  = v38;
  sub_100002AC4(v34);
  sub_100002AC4(a1);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v33);
  uint64_t result = swift_bridgeObjectRelease(v17);
  *(_WORD *)a2  = v9;
  *(_BYTE *)(a2 + 2)  = v37;
  *(void *)(a2 + 8)  = v17;
  *(void *)(a2 + 16)  = v33;
  *(_WORD *)(a2 + 24)  = v32;
  *(void *)(a2 + 32)  = v28;
  *(_BYTE *)(a2 + 40)  = v29;
  return result;
}

unint64_t sub_100198044()
{
  unint64_t result = qword_10040A3A8;
  if (!qword_10040A3A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.IEEE80211CipherSuite,  &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A3A8);
  }

  return result;
}

unint64_t sub_100198088()
{
  unint64_t result = qword_10040A3C8;
  if (!qword_10040A3C8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350F34,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3C8);
  }

  return result;
}

unint64_t sub_1001980CC()
{
  unint64_t result = qword_100407410;
  if (!qword_100407410)
  {
    uint64_t v1 = sub_1000022F8(&qword_100406978);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100407410);
  }

  return result;
}

unint64_t sub_100198128()
{
  unint64_t result = qword_10040A3D8;
  if (!qword_10040A3D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350EE4,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3D8);
  }

  return result;
}

unint64_t sub_10019816C()
{
  unint64_t result = qword_10040A3E8;
  if (!qword_10040A3E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350EBC,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A3E8);
  }

  return result;
}

unint64_t sub_1001981B0()
{
  unint64_t result = qword_10040A3F8;
  if (!qword_10040A3F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040A3F8);
  }

  return result;
}

unint64_t sub_1001981F4()
{
  unint64_t result = qword_10040A420;
  if (!qword_10040A420)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350E6C,  &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A420);
  }

  return result;
}

unint64_t sub_100198238()
{
  unint64_t result = qword_10040A430;
  if (!qword_10040A430)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350E1C,  &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A430);
  }

  return result;
}

uint64_t sub_10019827C(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (!v1)
  {
    sub_10002084C((uint64_t)a1, (uint64_t)&v11);
    uint64_t v5 = sub_100002274(&qword_1004068C8);
    uint64_t v6 = type metadata accessor for BinaryDecoder();
    if ((swift_dynamicCast(v12, &v11, v5, v6, 6LL) & 1) != 0)
    {
      if (!__OFADD__(*(void *)(v12[0] + 32LL), 1LL)) {
        __asm { BR              X10 }
      }

      __break(1u);
      JUMPOUT(0x1001988E4LL);
    }

    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(_OWORD *)uint64_t v9 = xmmword_100337020;
    *(_BYTE *)(v9 + 16)  = 2;
    swift_willThrow(v8);
    sub_100002AC4(v13);
  }

  return sub_100002AC4(a1);
}

void sub_100198990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  *(void *)(v6 + 32)  = (int)v9;
  swift_beginAccess(a1, va1, 1LL, 0LL);
  uint64_t v12 = *(void *)(v6 + 40);
  *(void *)(v6 + 40)  = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v18 = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  uint64_t v13 = v6;
  sub_100197594((uint64_t *)va, v11 - 136);
  if (!v7)
  {
    *(void *)(v11 - 72)  = *(unsigned __int8 *)(v11 - 112);
    sub_1000208D8(v9, v8);
    JUMPOUT(0x100198634LL);
  }

  JUMPOUT(0x100198B40LL);
}

void sub_100198AD4()
{
}

unint64_t sub_100198BCC()
{
  unint64_t result = qword_10040A438;
  if (!qword_10040A438)
  {
    unint64_t result = swift_getWitnessTable(&unk_100350DF4, &type metadata for IEEE80211InformationElement.ElementType);
    atomic_store(result, (unint64_t *)&qword_10040A438);
  }

  return result;
}

unint64_t sub_100198C10()
{
  unint64_t result = qword_10040A450;
  if (!qword_10040A450)
  {
    unint64_t result = swift_getWitnessTable(&unk_100350DCC, &type metadata for IEEE80211InformationElement.ExtendedElementID);
    atomic_store(result, (unint64_t *)&qword_10040A450);
  }

  return result;
}

unint64_t sub_100198C54()
{
  unint64_t result = qword_100409F88;
  if (!qword_100409F88)
  {
    uint64_t v1 = sub_1000022F8(&qword_100405E78);
    sub_10000AF70( &qword_100406960,  type metadata accessor for NANAttribute,  (uint64_t)&protocol conformance descriptor for NANAttribute);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100409F88);
  }

  return result;
}

unint64_t sub_100198CD4()
{
  unint64_t result = qword_10040A498;
  if (!qword_10040A498)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.HighThroughputCapability,  &type metadata for IEEE80211InformationElement.HighThroughputCapability);
    atomic_store(result, (unint64_t *)&qword_10040A498);
  }

  return result;
}

unint64_t sub_100198D1C()
{
  unint64_t result = qword_10040A4A0;
  if (!qword_10040A4A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.HighThroughputOperation,  &type metadata for IEEE80211InformationElement.HighThroughputOperation);
    atomic_store(result, (unint64_t *)&qword_10040A4A0);
  }

  return result;
}

unint64_t sub_100198D64()
{
  unint64_t result = qword_10040A4A8;
  if (!qword_10040A4A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.VeryHighThroughputCapability,  &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability);
    atomic_store(result, (unint64_t *)&qword_10040A4A8);
  }

  return result;
}

unint64_t sub_100198DAC()
{
  unint64_t result = qword_10040A4B0;
  if (!qword_10040A4B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.VeryHighThroughputOperation,  &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation);
    atomic_store(result, (unint64_t *)&qword_10040A4B0);
  }

  return result;
}

unint64_t sub_100198DF4()
{
  unint64_t result = qword_10040A4B8;
  if (!qword_10040A4B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities,  &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A4B8);
  }

  return result;
}

unint64_t sub_100198E3C()
{
  unint64_t result = qword_10040A4C0;
  if (!qword_10040A4C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities,  &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A4C0);
  }

  return result;
}

unint64_t sub_100198E84()
{
  unint64_t result = qword_10040A4C8;
  if (!qword_10040A4C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities,  &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A4C8);
  }

  return result;
}

unint64_t sub_100198ECC()
{
  unint64_t result = qword_10040A4D0;
  if (!qword_10040A4D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities,  &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A4D0);
  }

  return result;
}

unint64_t sub_100198F14()
{
  unint64_t result = qword_10040A4D8;
  if (!qword_10040A4D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability,  &type metadata for IEEE80211InformationElement.RSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A4D8);
  }

  return result;
}

unint64_t sub_100198F5C()
{
  unint64_t result = qword_10040A4E0;
  if (!qword_10040A4E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A4E0);
  }

  return result;
}

unint64_t sub_100198FA0(uint64_t a1)
{
  unint64_t result = sub_100198FC4();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_100198FC4()
{
  unint64_t result = qword_10040A4E8;
  if (!qword_10040A4E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A4E8);
  }

  return result;
}

unint64_t sub_10019900C()
{
  unint64_t result = qword_10040A4F0;
  if (!qword_10040A4F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A4F0);
  }

  return result;
}

unint64_t sub_100199054()
{
  unint64_t result = qword_10040A4F8;
  if (!qword_10040A4F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A4F8);
  }

  return result;
}

unint64_t sub_10019909C()
{
  unint64_t result = qword_10040A500;
  if (!qword_10040A500)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A500);
  }

  return result;
}

unint64_t sub_1001990E4()
{
  unint64_t result = qword_10040A508;
  if (!qword_10040A508)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.IEEE80211CipherSuite,  &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A508);
  }

  return result;
}

unint64_t sub_10019912C()
{
  unint64_t result = qword_10040A510;
  if (!qword_10040A510)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040A510);
  }

  return result;
}

unint64_t sub_100199174()
{
  unint64_t result = qword_10040A518;
  if (!qword_10040A518)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters);
    atomic_store(result, (unint64_t *)&qword_10040A518);
  }

  return result;
}

unint64_t sub_1001991BC()
{
  unint64_t result = qword_10040A520;
  if (!qword_10040A520)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.AuthenticationKeyManagementSuite,  &type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite);
    atomic_store(result, (unint64_t *)&qword_10040A520);
  }

  return result;
}

unint64_t sub_100199204()
{
  unint64_t result = qword_10040A528;
  if (!qword_10040A528)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.MessageIntegrityCode,  &type metadata for IEEE80211InformationElement.MessageIntegrityCode);
    atomic_store(result, (unint64_t *)&qword_10040A528);
  }

  return result;
}

unint64_t sub_10019924C()
{
  unint64_t result = qword_10040A530;
  if (!qword_10040A530)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.WrappedData,  &type metadata for IEEE80211InformationElement.WrappedData);
    atomic_store(result, (unint64_t *)&qword_10040A530);
  }

  return result;
}

unint64_t sub_100199294()
{
  unint64_t result = qword_10040A538;
  if (!qword_10040A538)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement,  &type metadata for IEEE80211InformationElement);
    atomic_store(result, (unint64_t *)&qword_10040A538);
  }

  return result;
}

uint64_t destroy for IEEE80211InformationElement(uint64_t a1)
{
  return sub_100057CD0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(_BYTE *)(a2 + 48);
  sub_100058460(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(void *)(a1 + 40)  = v8;
  *(_BYTE *)(a1 + 48)  = v9;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(_BYTE *)(a2 + 48);
  sub_100058460(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  unint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(void *)(a1 + 40)  = v8;
  char v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48)  = v9;
  sub_100057CD0(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  char v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48)  = v3;
  sub_100057CD0(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 9) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(void *)(result + 40)  = 0LL;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 48)  = 0;
    *(void *)unint64_t result = a2 - 247;
    if (a3 >= 0xF7) {
      *(_BYTE *)(result + 49)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xF7) {
      *(_BYTE *)(result + 49)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 48)  = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1001994E4(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 9);
  }
}

uint64_t sub_1001994FC(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(void *)unint64_t result = a2 - 9;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)(result + 40)  = 0LL;
    LOBYTE(a2)  = 9;
  }

  *(_BYTE *)(result + 48)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement()
{
  return &type metadata for IEEE80211InformationElement;
}

uint64_t sub_100199538(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.HighThroughputCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.HighThroughputCapability(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_1000208D8(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputCapability()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputCapability;
}

uint64_t destroy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1)
{
  return sub_1000208D8(*(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t initializeWithCopy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100020AFC(v4, v5);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_100020AFC(v7, v6);
  *(void *)(a1 + 24)  = v7;
  *(void *)(a1 + 32)  = v6;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100020AFC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  sub_1000208D8(v6, v7);
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  sub_100020AFC(v9, v8);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v9;
  *(void *)(a1 + 32)  = v8;
  sub_1000208D8(v10, v11);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_1000208D8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_1000208D8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 40)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 40)  = 0;
    }
    if (a2)
    {
      *(void *)(result + 8)  = 0LL;
      *(void *)(result + 16)  = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputOperation()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputOperation;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputCapability()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputOperation()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation;
}

uint64_t destroy for IEEE80211InformationElement.RSNCapability(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32)  = v5;
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 32)  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.RSNCapability(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.RSNCapability( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 40)  = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.RSNCapability()
{
  return &type metadata for IEEE80211InformationElement.RSNCapability;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.RSNCapability.Capabilities()
{
  return &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedRSNCapability()
{
  return &type metadata for IEEE80211InformationElement.ExtendedRSNCapability;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.IEEE80211CipherSuite( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_100199B0C + 4 * byte_10034F5A7[v4]))();
  }
  *a1  = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100199B40 + 4 * byte_10034F5A2[v4]))();
}

uint64_t sub_100199B40(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100199B48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100199B50LL);
  }
  return result;
}

uint64_t sub_100199B5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100199B64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_100199B68(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100199B70(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.IEEE80211CipherSuite()
{
  return &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite;
}

uint64_t destroy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 >> 60 != 15) {
    unint64_t result = sub_1000208D8(*(void *)(result + 8), v2);
  }
  unint64_t v3 = *(void *)(v1 + 40);
  if (v3 >> 60 != 15) {
    return sub_1000208D8(*(void *)(v1 + 32), v3);
  }
  return result;
}

uint64_t initializeWithCopy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  }

  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    sub_100020AFC(v5, v4);
    *(void *)(a1 + 8)  = v5;
    *(void *)(a1 + 16)  = v4;
  }

  *(_BYTE *)(a1 + 24)  = *(_BYTE *)(a2 + 24);
  uint64_t v6 = (uint64_t *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_100020AFC(*v6, v7);
    *(void *)(a1 + 32)  = v8;
    *(void *)(a1 + 40)  = v7;
  }

  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters( uint64_t a1, __int128 *a2)
{
  if (*(void *)(a1 + 16) >> 60 == 15LL)
  {
    if (*((void *)a2 + 2) >> 60 == 15LL)
    {
      __int128 v4 = *a2;
      *(void *)(a1 + 16)  = *((void *)a2 + 2);
      *(_OWORD *)a1  = v4;
    }

    else
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v6 = *((void *)a2 + 1);
      unint64_t v7 = *((void *)a2 + 2);
      sub_100020AFC(v6, v7);
      *(void *)(a1 + 8)  = v6;
      *(void *)(a1 + 16)  = v7;
    }
  }

  else if (*((void *)a2 + 2) >> 60 == 15LL)
  {
    sub_100168274(a1);
    uint64_t v5 = *((void *)a2 + 2);
    *(_OWORD *)a1  = *a2;
    *(void *)(a1 + 16)  = v5;
  }

  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    unint64_t v9 = *((void *)a2 + 2);
    sub_100020AFC(v8, v9);
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 8)  = v8;
    *(void *)(a1 + 16)  = v9;
    sub_1000208D8(v10, v11);
  }

  *(_BYTE *)(a1 + 24)  = *((_BYTE *)a2 + 24);
  unint64_t v12 = (uint64_t *)(a2 + 2);
  unint64_t v13 = *((void *)a2 + 5);
  if (*(void *)(a1 + 40) >> 60 != 15LL)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_100020AFC(*v12, v13);
      uint64_t v16 = *(void *)(a1 + 32);
      unint64_t v17 = *(void *)(a1 + 40);
      *(void *)(a1 + 32)  = v15;
      *(void *)(a1 + 40)  = v13;
      sub_1000208D8(v16, v17);
      return a1;
    }

    sub_1001682A8(a1 + 32);
    goto LABEL_13;
  }

  if (v13 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)v12;
    return a1;
  }

  uint64_t v14 = *v12;
  sub_100020AFC(*v12, v13);
  *(void *)(a1 + 32)  = v14;
  *(void *)(a1 + 40)  = v13;
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    sub_100168274(a1);
LABEL_4:
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
    goto LABEL_6;
  }

  *(_WORD *)a1  = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v5;
  sub_1000208D8(v6, v4);
LABEL_6:
  *(_BYTE *)(a1 + 24)  = *(_BYTE *)(a2 + 24);
  unint64_t v7 = (void *)(a2 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 40);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(void *)(a1 + 32)  = *v7;
      *(void *)(a1 + 40)  = v9;
      sub_1000208D8(v10, v8);
      return a1;
    }

    sub_1001682A8(a1 + 32);
  }

  *(_OWORD *)(a1 + 32)  = *(_OWORD *)v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xC && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 16) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)(result + 40)  = 0LL;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 12;
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 48)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 48)  = 0;
    }
    if (a2)
    {
      *(void *)(result + 8)  = 0LL;
      *(void *)(result + 16)  = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.AuthenticationKeyManagementSuite( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE8) {
    goto LABEL_17;
  }
  if (a2 + 24 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 24) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 24;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.AuthenticationKeyManagementSuite( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE7) {
    return ((uint64_t (*)(void))((char *)&loc_10019A060 + 4 * byte_10034F5B1[v4]))();
  }
  *a1  = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_10019A094 + 4 * byte_10034F5AC[v4]))();
}

uint64_t sub_10019A094(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A09C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019A0A4LL);
  }
  return result;
}

uint64_t sub_10019A0B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019A0B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 24;
  return result;
}

uint64_t sub_10019A0BC(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A0C4(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.AuthenticationKeyManagementSuite()
{
  return &type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.MessageIntegrityCode()
{
  return &type metadata for IEEE80211InformationElement.MessageIntegrityCode;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.WrappedData()
{
  return &type metadata for IEEE80211InformationElement.WrappedData;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedElementID()
{
  return &type metadata for IEEE80211InformationElement.ExtendedElementID;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.ElementType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10019A160 + 4 * byte_10034F5BB[v4]))();
  }
  *a1  = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10019A194 + 4 * byte_10034F5B6[v4]))();
}

uint64_t sub_10019A194(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A19C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019A1A4LL);
  }
  return result;
}

uint64_t sub_10019A1B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019A1B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_10019A1BC(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A1C4(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ElementType()
{
  return &type metadata for IEEE80211InformationElement.ElementType;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.WrappedData.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO17ExtendedElementIDOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10019A260 + 4 * byte_10034F5C5[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10019A294 + 4 * byte_10034F5C0[v4]))();
}

uint64_t sub_10019A294(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019A2A4LL);
  }
  return result;
}

uint64_t sub_10019A2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019A2B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10019A2BC(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A2C4(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO20MessageIntegrityCodeV10CodingKeysOwst_0( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10019A320 + 4 * byte_10034F5CA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10019A340 + 4 * byte_10034F5CF[v4]))();
  }
}

_BYTE *sub_10019A320(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10019A340(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10019A348(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10019A350(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10019A358(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10019A360(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10019A3D8 + 4 * byte_10034F5D9[v4]))();
  }
  *a1  = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10019A40C + 4 * byte_10034F5D4[v4]))();
}

uint64_t sub_10019A40C(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019A41CLL);
  }
  return result;
}

uint64_t sub_10019A428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019A430LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10019A434(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A43C(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10019A4A4 + 4 * byte_10034F5E3[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10019A4D8 + 4 * byte_10034F5DE[v4]))();
}

uint64_t sub_10019A4D8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A4E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019A4E8LL);
  }
  return result;
}

uint64_t sub_10019A4F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019A4FCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10019A500(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019A508(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputOperation.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys;
}

unint64_t sub_10019A53C()
{
  unint64_t result = qword_10040A540;
  if (!qword_10040A540)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003505E4,  &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A540);
  }

  return result;
}

unint64_t sub_10019A584()
{
  unint64_t result = qword_10040A548;
  if (!qword_10040A548)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035069C,  &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A548);
  }

  return result;
}

unint64_t sub_10019A5CC()
{
  unint64_t result = qword_10040A550;
  if (!qword_10040A550)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350754,  &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A550);
  }

  return result;
}

unint64_t sub_10019A614()
{
  unint64_t result = qword_10040A558;
  if (!qword_10040A558)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035085C,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A558);
  }

  return result;
}

unint64_t sub_10019A65C()
{
  unint64_t result = qword_10040A560;
  if (!qword_10040A560)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350914,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A560);
  }

  return result;
}

unint64_t sub_10019A6A4()
{
  unint64_t result = qword_10040A568;
  if (!qword_10040A568)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035096C,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A568);
  }

  return result;
}

unint64_t sub_10019A6EC()
{
  unint64_t result = qword_10040A570;
  if (!qword_10040A570)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035093C,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A570);
  }

  return result;
}

unint64_t sub_10019A734()
{
  unint64_t result = qword_10040A578;
  if (!qword_10040A578)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350994,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A578);
  }

  return result;
}

unint64_t sub_10019A77C()
{
  unint64_t result = qword_10040A580;
  if (!qword_10040A580)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003509CC,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A580);
  }

  return result;
}

unint64_t sub_10019A7C4()
{
  unint64_t result = qword_10040A588;
  if (!qword_10040A588)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350BC4,  &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A588);
  }

  return result;
}

unint64_t sub_10019A80C()
{
  unint64_t result = qword_10040A590;
  if (!qword_10040A590)
  {
    unint64_t result = swift_getWitnessTable(&unk_100350CDC, &type metadata for IEEE80211InformationElement.ElementType);
    atomic_store(result, (unint64_t *)&qword_10040A590);
  }

  return result;
}

unint64_t sub_10019A854()
{
  unint64_t result = qword_10040A598;
  if (!qword_10040A598)
  {
    unint64_t result = swift_getWitnessTable(&unk_100350DA4, &type metadata for IEEE80211InformationElement.ExtendedElementID);
    atomic_store(result, (unint64_t *)&qword_10040A598);
  }

  return result;
}

unint64_t sub_10019A89C()
{
  unint64_t result = qword_10040A5A0;
  if (!qword_10040A5A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350BEC,  &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5A0);
  }

  return result;
}

unint64_t sub_10019A8E4()
{
  unint64_t result = qword_10040A5A8;
  if (!qword_10040A5A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350C14,  &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5A8);
  }

  return result;
}

unint64_t sub_10019A92C()
{
  unint64_t result = qword_10040A5B0;
  if (!qword_10040A5B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350B34,  &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5B0);
  }

  return result;
}

unint64_t sub_10019A974()
{
  unint64_t result = qword_10040A5B8;
  if (!qword_10040A5B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350B5C,  &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5B8);
  }

  return result;
}

unint64_t sub_10019A9BC()
{
  unint64_t result = qword_10040A5C0;
  if (!qword_10040A5C0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350884,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5C0);
  }

  return result;
}

unint64_t sub_10019AA04()
{
  unint64_t result = qword_10040A5C8;
  if (!qword_10040A5C8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003508AC,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5C8);
  }

  return result;
}

unint64_t sub_10019AA4C()
{
  unint64_t result = qword_10040A5D0;
  if (!qword_10040A5D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003507CC,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5D0);
  }

  return result;
}

unint64_t sub_10019AA94()
{
  unint64_t result = qword_10040A5D8;
  if (!qword_10040A5D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003507F4,  &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5D8);
  }

  return result;
}

unint64_t sub_10019AADC()
{
  unint64_t result = qword_10040A5E0;
  if (!qword_10040A5E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035077C,  &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5E0);
  }

  return result;
}

unint64_t sub_10019AB24()
{
  unint64_t result = qword_10040A5E8;
  if (!qword_10040A5E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003507A4,  &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5E8);
  }

  return result;
}

unint64_t sub_10019AB6C()
{
  unint64_t result = qword_10040A5F0;
  if (!qword_10040A5F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003506C4,  &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5F0);
  }

  return result;
}

unint64_t sub_10019ABB4()
{
  unint64_t result = qword_10040A5F8;
  if (!qword_10040A5F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003506EC,  &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5F8);
  }

  return result;
}

unint64_t sub_10019ABFC()
{
  unint64_t result = qword_10040A600;
  if (!qword_10040A600)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035060C,  &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A600);
  }

  return result;
}

unint64_t sub_10019AC44()
{
  unint64_t result = qword_10040A608;
  if (!qword_10040A608)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350634,  &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A608);
  }

  return result;
}

unint64_t sub_10019AC8C()
{
  unint64_t result = qword_10040A610;
  if (!qword_10040A610)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350554,  &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A610);
  }

  return result;
}

unint64_t sub_10019ACD4()
{
  unint64_t result = qword_10040A618;
  if (!qword_10040A618)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035057C,  &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A618);
  }

  return result;
}

uint64_t sub_10019AD28(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result)  = 0;
  int v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_10019AD60(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result)  = 0;
  int v3 = (unsigned __int16 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_10019AD98(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result)  = 0;
  int v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_10019ADD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_10019AE08(uint64_t a1, unint64_t a2)
{
  if (a1 == 1802401130 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802401130LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1868983913 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1868983913LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7261507564706D61LL && a2 == 0xEF73726574656D61LL)
  {
    unint64_t v8 = 0xEF73726574656D61LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261507564706D61LL, 0xEF73726574656D61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 7562093 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(7562093LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10019AFB4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x437972616D697270LL && a2 == 0xEE006C656E6E6168LL)
  {
    unint64_t v5 = 0xEE006C656E6E6168LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x437972616D697270LL, 0xEE006C656E6E6168LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL)
  {
    unint64_t v7 = 0xE90000000000006ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6974617265706FLL, 0xE90000000000006ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 7562093 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7562093LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10019B128(uint64_t a1, unint64_t a2)
{
  if (a1 == 1868983913 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1868983913LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x70614D53434D7872LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70614D53434D7872LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x474C686769487872LL && a2 == 0xED00006574615249LL)
  {
    unint64_t v8 = 0xED00006574615249LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x474C686769487872LL, 0xED00006574615249LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x70614D53434D7874LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70614D53434D7874LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x474C686769487874LL && a2 == 0xED00006574615249LL)
  {
    swift_bridgeObjectRelease(0xED00006574615249LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x474C686769487874LL, 0xED00006574615249LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10019B344(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6B636162656D6F63LL && a2 == 0xED00007265746641LL)
  {
    unint64_t v5 = 0xED00007265746641LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B636162656D6F63LL, 0xED00007265746641LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x65696B6F6F63LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65696B6F6F63LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_10019B450()
{
  unint64_t result = qword_10040A620;
  if (!qword_10040A620)
  {
    unint64_t result = swift_getWitnessTable(&unk_100350C64, &type metadata for IEEE80211InformationElement.ElementType);
    atomic_store(result, (unint64_t *)&qword_10040A620);
  }

  return result;
}

unint64_t sub_10019B494()
{
  unint64_t result = qword_10040A628;
  if (!qword_10040A628)
  {
    unint64_t result = swift_getWitnessTable(&unk_100350D6C, &type metadata for IEEE80211InformationElement.ExtendedElementID);
    atomic_store(result, (unint64_t *)&qword_10040A628);
  }

  return result;
}

unint64_t sub_10019B4D8()
{
  unint64_t result = qword_10040A638;
  if (!qword_10040A638)
  {
    unint64_t result = swift_getWitnessTable( &unk_100350A94,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A638);
  }

  return result;
}

unint64_t sub_10019B51C()
{
  unint64_t result = qword_10040A640;
  if (!qword_10040A640)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003511AC,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat);
    atomic_store(result, (unint64_t *)&qword_10040A640);
  }

  return result;
}

unint64_t sub_10019B560()
{
  unint64_t result = qword_10040A648;
  if (!qword_10040A648)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040A648);
  }

  return result;
}

unint64_t sub_10019B5A4()
{
  unint64_t result = qword_10040A650;
  if (!qword_10040A650)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.IEEE80211CipherSuite,  &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A650);
  }

  return result;
}

unint64_t sub_10019B5E8()
{
  unint64_t result = qword_10040A658;
  if (!qword_10040A658)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities,  &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A658);
  }

  return result;
}

unint64_t sub_10019B62C()
{
  unint64_t result = qword_10040A660;
  if (!qword_10040A660)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANPMK.ID, &type metadata for NANPMK.ID);
    atomic_store(result, (unint64_t *)&qword_10040A660);
  }

  return result;
}

unint64_t sub_10019B670()
{
  unint64_t result = qword_10040A668;
  if (!qword_10040A668)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211InformationElement.AuthenticationKeyManagementSuite,  &type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite);
    atomic_store(result, (unint64_t *)&qword_10040A668);
  }

  return result;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO24HighThroughputCapabilityV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10019B700 + 4 * byte_10034F5ED[v4]))();
  }
  *a1  = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10019B734 + 4 * byte_10034F5E8[v4]))();
}

uint64_t sub_10019B734(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019B73C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019B744LL);
  }
  return result;
}

uint64_t sub_10019B750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019B758LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10019B75C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019B764(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat;
}

unint64_t sub_10019B784()
{
  unint64_t result = qword_10040A690;
  if (!qword_10040A690)
  {
    unint64_t result = swift_getWitnessTable( &unk_100351184,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat);
    atomic_store(result, (unint64_t *)&qword_10040A690);
  }

  return result;
}

unint64_t sub_10019B7C8()
{
  unint64_t result = qword_10040A698;
  if (!qword_10040A698)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035114C,  &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat);
    atomic_store(result, (unint64_t *)&qword_10040A698);
  }

  return result;
}

void sub_10019B814( CoreP2P::WiFiInterfaceRole a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (!v5) {
    *a5  = v7;
  }
}

void sub_10019B844(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = v4[5];
    char v10 = (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL);
    swift_retain();
    v11._countAndFlagsBits  = a2;
    v11._object  = a3;
    Swift::String_optional v12 = AppleDevice.findOrCreateInterface(for:on:with:)(a1, v11, v10);
    swift_release(v9);
    if (v12.value._object)
    {
      swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
      uint64_t v13 = swift_retain();
      AppleIO80211Driver.init(device:role:name:)(v13, a1, v12.value._countAndFlagsBits, (uint64_t)v12.value._object);
      return;
    }

    unint64_t v18 = sub_1000033FC();
    uint64_t v15 = swift_allocError(&type metadata for WiFiError, v18, 0LL, 0LL);
    uint64_t v17 = 7LL;
  }

  else
  {
    unint64_t v14 = sub_1000033FC();
    uint64_t v15 = swift_allocError(&type metadata for WiFiError, v14, 0LL, 0LL);
    uint64_t v17 = 2LL;
  }

  *(void *)uint64_t v16 = v17;
  *(void *)(v16 + 8)  = 0LL;
  *(_BYTE *)(v16 + 16)  = 1;
  swift_willThrow(v15);
}

void sub_10019B958(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1 == CoreP2P_WiFiInterfaceRole_infrastructure)
  {
    unint64_t v19 = sub_1000033FC();
    uint64_t v16 = swift_allocError(&type metadata for WiFiError, v19, 0LL, 0LL);
    uint64_t v18 = 2LL;
    goto LABEL_6;
  }

  uint64_t v8 = *v4;
  uint64_t v9 = v4[5];
  char v10 = (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL);
  swift_retain();
  v11._countAndFlagsBits  = a2;
  v11._object  = a3;
  Swift::String_optional v12 = AppleDevice.findOrCreateInterface(for:on:with:)(a1, v11, v10);
  swift_release(v9);
  if (!v12.value._object
    || (swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52)),
        uint64_t v13 = swift_retain(),
        AppleBroadcomDriver.init(device:role:name:)(v13, a1, v12.value._countAndFlagsBits, (uint64_t)v12.value._object),
        !v14))
  {
    unint64_t v15 = sub_1000033FC();
    uint64_t v16 = swift_allocError(&type metadata for WiFiError, v15, 0LL, 0LL);
    uint64_t v18 = 7LL;
LABEL_6:
    *(void *)uint64_t v17 = v18;
    *(void *)(v17 + 8)  = 0LL;
    *(_BYTE *)(v17 + 16)  = 1;
    swift_willThrow(v16);
  }

uint64_t WiFiDriver<>.createInterface(for:on:macAddress:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v34 = a7;
  int v11 = a1;
  uint64_t v12 = type metadata accessor for Optional(0LL, a5);
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - v13;
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  a6,  a5,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v18 = (char *)&v30 - v17;
  if (!v11)
  {
    unint64_t v28 = sub_1000033FC();
    uint64_t v25 = swift_allocError(&type metadata for WiFiError, v28, 0LL, 0LL);
    uint64_t v27 = 2LL;
    goto LABEL_7;
  }

  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  v31(a5, a6);
  AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness( a6,  a5,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 72))( a1,  v35,  v36,  a4 & 0xFFFFFFFFFFFFLL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if (!v22)
  {
LABEL_5:
    unint64_t v24 = sub_1000033FC();
    uint64_t v25 = swift_allocError(&type metadata for WiFiError, v24, 0LL, 0LL);
    uint64_t v27 = 7LL;
LABEL_7:
    *(void *)uint64_t v26 = v27;
    *(void *)(v26 + 8)  = 0LL;
    *(_BYTE *)(v26 + 16)  = 1;
    return swift_willThrow(v25);
  }

  v31(a5, a6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 48))(v18, a1, v20, v22, a5, a6);
  uint64_t v23 = *(void *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1LL, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
    goto LABEL_5;
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v34, v14, a5);
}

void sub_10019BCC4( CoreP2P::WiFiInterfaceRole a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (!v5) {
    *a5  = v7;
  }
}

void *InterfaceIdentifier.size.unsafeMutableAddressor()
{
  return &static InterfaceIdentifier.size;
}

uint64_t InterfaceIdentifier.ipv6Address.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1000FB08C((uint64_t)&off_1003D7418);
  unint64_t v6 = v5;
  unint64_t v11 = v5;
  sub_100020AFC(a1, a2);
  sub_100020AFC(v4, v6);
  sub_1000FA9C4(a1, a2);
  sub_1000208D8(a1, a2);
  sub_1000208D8(v4, v6);
  uint64_t v7 = v4;
  sub_100208BAC(v4, v11);
  uint64_t v9 = v8;
  sub_1000208D8(v7, v11);
  return v9;
}

void InterfaceIdentifier.description.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_10019BE38()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = BYTE6(v0);
  uint64_t result = 0x3A30386566LL;
  *(void *)(v3 - 112)  = 0x3A30386566LL;
  *(void *)(v3 - 104)  = 0xE500000000000000LL;
  if (!BYTE6(v0)) {
    return result;
  }
  uint64_t v37 = v1 >> 32;
  uint64_t v35 = BYTE6(v0);
  unint64_t v33 = v0 >> 8;
  unint64_t v31 = v0 >> 24;
  unint64_t v32 = v0 >> 16;
  char v34 = v0;
  unint64_t v29 = v0 >> 40;
  unint64_t v30 = HIDWORD(v0);
  uint64_t v36 = BYTE6(v0);
  while (1)
  {
    uint64_t v10 = __OFADD__(v4, 2LL) ? 0x7FFFFFFFFFFFFFFFLL : v4 + 2;
    uint64_t v11 = sub_100002274((uint64_t *)&unk_100405140);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + 16)  = xmmword_100339900;
    if (v2) {
      break;
    }
    if (v4 >= v35) {
      goto LABEL_36;
    }
    *(void *)(v3 - 126)  = v1;
    *(_BYTE *)(v3 - 118)  = v34;
    *(_BYTE *)(v3 - 117)  = v33;
    *(_BYTE *)(v3 - 116)  = v32;
    *(_BYTE *)(v3 - 115)  = v31;
    *(_BYTE *)(v3 - 114)  = v30;
    uint64_t v22 = v4 + 1;
    *(_BYTE *)(v3 - 113)  = v29;
    if (v4 + 1 >= v35) {
      goto LABEL_39;
    }
    uint64_t v17 = *(unsigned __int8 *)(v3 - 126 + v4);
    *(void *)(v3 - 126)  = v1;
    *(_BYTE *)(v3 - 118)  = v34;
    *(_BYTE *)(v3 - 117)  = v33;
    *(_BYTE *)(v3 - 116)  = v32;
    *(_BYTE *)(v3 - 115)  = v31;
    *(_BYTE *)(v3 - 114)  = v30;
    *(_BYTE *)(v3 - 113)  = v29;
    uint64_t v7 = *(unsigned __int8 *)(v3 - 126 + v22);
LABEL_4:
    *(void *)(v12 + 56)  = &type metadata for Int;
    *(void *)(v12 + 64)  = &protocol witness table for Int;
    *(void *)(v12 + 32)  = v7 | (v17 << 8);
    v8._countAndFlagsBits  = String.init(format:_:)(0x783430253ALL, 0xE500000000000000LL, v12);
    object  = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    uint64_t v4 = v10;
    if (v10 >= v5) {
      return *(void *)(v3 - 112);
    }
  }

  if (v2 == 1)
  {
    if (v4 < (int)v1 || v4 >= v37)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
    }

    uint64_t v13 = __DataStorage._bytes.getter();
    if (!v13) {
      goto LABEL_46;
    }
    uint64_t v14 = v13;
    uint64_t v15 = __DataStorage._offset.getter();
    if (__OFSUB__(v4, v15)) {
      goto LABEL_38;
    }
    uint64_t v16 = v4 + 1;
    uint64_t v17 = *(unsigned __int8 *)(v14 + v4 - v15);
    uint64_t v18 = __DataStorage._bytes.getter();
    if (!v18) {
      goto LABEL_47;
    }
    uint64_t v19 = v18;
    uint64_t v20 = __DataStorage._offset.getter();
    uint64_t v21 = v16 - v20;
    if (__OFSUB__(v16, v20)) {
      goto LABEL_43;
    }
    goto LABEL_3;
  }

  if (v4 < *(void *)(v1 + 16)) {
    goto LABEL_37;
  }
  if (v4 >= *(void *)(v1 + 24)) {
    goto LABEL_40;
  }
  uint64_t v23 = __DataStorage._bytes.getter();
  if (!v23) {
    goto LABEL_48;
  }
  uint64_t v24 = v23;
  uint64_t v25 = __DataStorage._offset.getter();
  if (__OFSUB__(v4, v25)) {
    goto LABEL_42;
  }
  uint64_t v26 = v4 + 1;
  if (v4 + 1 < *(void *)(v1 + 16)) {
    goto LABEL_44;
  }
  if (v26 >= *(void *)(v1 + 24)) {
    goto LABEL_45;
  }
  uint64_t v17 = *(unsigned __int8 *)(v24 + v4 - v25);
  uint64_t v27 = __DataStorage._bytes.getter();
  if (!v27) {
    goto LABEL_49;
  }
  uint64_t v19 = v27;
  uint64_t v28 = __DataStorage._offset.getter();
  uint64_t v21 = v26 - v28;
  if (!__OFSUB__(v26, v28))
  {
LABEL_3:
    uint64_t v7 = *(unsigned __int8 *)(v19 + v21);
    uint64_t v5 = v36;
    goto LABEL_4;
  }

  __break(1u);
  return *(void *)(v3 - 112);
}

void sub_10019C1C8()
{
}

uint64_t InterfaceIdentifier.customMirror.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[0]  = a1;
  v17[1]  = a2;
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for Mirror.AncestorRepresentation.generated(_:),  v4);
  sub_100020AFC(a1, a2);
  uint64_t v12 = sub_100002274(&qword_100405DC0);
  unint64_t v13 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( v17,  &v16,  v10,  v7,  &type metadata for InterfaceIdentifier,  v12,  v13);
}

uint64_t InterfaceIdentifier.init(from:)(void *a1)
{
  return sub_10019C3E4(a1);
}

uint64_t InterfaceIdentifier.init(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t sub_10019C3BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10019C3E4(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
  }

  return result;
}

uint64_t sub_10019C3E4(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v3, v4);
  if (!v1)
  {
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    sub_1000237C8((uint64_t)v9, v10);
    UnkeyedDecodingContainer.decodeData(with:)(8LL, v5, v6);
    __asm { BR              X10 }
  }

  sub_100002AC4(a1);
  return v3;
}

unint64_t sub_10019C5F0()
{
  unint64_t result = qword_10040A6A0;
  if (!qword_10040A6A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InterfaceIdentifier,  &type metadata for InterfaceIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040A6A0);
  }

  return result;
}

ValueMetadata *type metadata accessor for InterfaceIdentifier()
{
  return &type metadata for InterfaceIdentifier;
}

uint64_t ExtendableOptionSet.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _swiftEmptyArrayStorage;
  return dispatch thunk of OptionSet.init(rawValue:)(&v3, a1, *(void *)(a2 + 8));
}

uint64_t ExtendableOptionSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019C82C( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10019E1DC);
}

uint64_t ExtendableOptionSet.formIntersection(_:)( uint64_t (*a1)(_BYTE *, void), uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(*(void *)(a3 + 8) + 8LL);
  dispatch thunk of RawRepresentable.rawValue.getter(a2, v8);
  unint64_t v9 = *(void *)(v21[0] + 16LL);
  swift_bridgeObjectRelease(v21[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(a2, v8);
  unint64_t v10 = *(void *)(v22 + 16);
  swift_bridgeObjectRelease(v22);
  if (v10 < v9)
  {
    dispatch thunk of RawRepresentable.rawValue.getter(a2, v8);
    uint64_t v11 = *(void *)(v21[0] + 16LL);
    swift_bridgeObjectRelease(v21[0]);
    dispatch thunk of RawRepresentable.rawValue.getter(a2, v8);
    uint64_t v12 = *(void *)(v22 + 16);
    swift_bridgeObjectRelease(v22);
    unint64_t v13 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t *, uint64_t))(a3 + 24))( v21,  a2,  a3);
    sub_10019E2DC(v11 - v12);
    v13(v21, 0LL);
  }

  dispatch thunk of RawRepresentable.rawValue.getter(a2, v8);
  uint64_t v14 = *(void *)(v21[0] + 16LL);
  swift_bridgeObjectRelease(v21[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(a2, v8);
  uint64_t v15 = *(void *)(v22 + 16);
  uint64_t result = swift_bridgeObjectRelease(v22);
  if (v14) {
    BOOL v17 = v15 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    unint64_t v18 = 0LL;
    uint64_t v19 = v15 - 1;
    uint64_t v20 = v14 - 1;
    do
    {
      uint64_t result = sub_10019E304(v18, v18, v4, a1, a2, a3);
      if (v20 == v18) {
        break;
      }
      BOOL v17 = v19 == v18++;
    }

    while (!v17);
  }

  return result;
}

uint64_t ExtendableOptionSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019C82C( a1,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10019E404);
}

uint64_t sub_10019C82C( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v10 = *(void *)(*(void *)(a3 + 8) + 8LL);
  dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
  uint64_t v11 = *(void *)(v25[0] + 16LL);
  swift_bridgeObjectRelease(v25[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
  uint64_t v12 = *(void *)(v28 + 16);
  swift_bridgeObjectRelease(v28);
  if (v11) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = v12 - 1;
    uint64_t v16 = v11 - 1;
    do
    {
      a4(v14, v14, v6, a1, a2, a3);
      if (v16 == v14) {
        break;
      }
      BOOL v13 = v15 == v14++;
    }

    while (!v13);
  }

  dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
  unint64_t v17 = *(void *)(v25[0] + 16LL);
  swift_bridgeObjectRelease(v25[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
  unint64_t v18 = *(void *)(v28 + 16);
  uint64_t result = swift_bridgeObjectRelease(v28);
  if (v17 < v18)
  {
    dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
    uint64_t v20 = v28;
    dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
    swift_bridgeObjectRelease(v27);
    dispatch thunk of RawRepresentable.rawValue.getter(a2, v10);
    unint64_t v21 = *(void *)(v26 + 16);
    swift_bridgeObjectRelease(v25[0]);
    uint64_t result = swift_bridgeObjectRelease(v26);
    unint64_t v22 = *(void *)(v28 + 16);
    if (v22 < v21)
    {
      __break(1u);
    }

    else
    {
      unint64_t v23 = (2 * v22) | 1;
      uint64_t v24 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 24))( v25,  a2,  a3);
      sub_10019EB3C(v20, v20 + 32, v21, v23);
      swift_bridgeObjectRelease(v20);
      return v24(v25, 0LL);
    }
  }

  return result;
}

uint64_t ExtendableOptionSet.init(bitOffset:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = a3;
    uint64_t v3 = a2;
    char v5 = a1;
    unint64_t v7 = a1 >> 3;
    uint64_t v6 = sub_10019D518(0, (a1 >> 3) + 1);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v6);
    if ((result & 1) != 0) {
      goto LABEL_3;
    }
  }

  uint64_t result = (uint64_t)sub_10019EA0C(v6);
  uint64_t v6 = (void *)result;
LABEL_3:
  if (v7 >= v6[2])
  {
    __break(1u);
  }

  else
  {
    *((_BYTE *)v6 + v7 + 32) |= 1 << (v5 & 7);
    unint64_t v9 = v6;
    return dispatch thunk of OptionSet.init(rawValue:)(&v9, v3, *(void *)(v4 + 8));
  }

  return result;
}

uint64_t static OptionSet<>.withValue<A>(_:at:withBitCount:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = v9;
  v135  = a1;
  v127  = a9;
  v129  = a6;
  uint64_t v16 = *(void *)(a6 + 8);
  v128  = a4;
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  v16,  a4,  &protocol requirements base descriptor for RawRepresentable);
  __chkstk_darwin(AssociatedTypeWitness);
  v126  = (char *)&v114 - v18;
  uint64_t v19 = *(void **)(a7 + 8);
  v119  = *(void *)(v19[3] + 16LL);
  uint64_t v20 = swift_getAssociatedTypeWitness( 0LL,  v119,  a5,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v21 = __chkstk_darwin(v20);
  v132  = *(void *)(a5 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  v121  = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v26 = __chkstk_darwin(v25);
  v133  = (char *)&v114 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v131  = (char *)&v114 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v134  = (char *)&v114 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v122  = (char *)&v114 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v114 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v43 = (char *)&v114 - v42;
  v130  = a2;
  BOOL v44 = __OFADD__(a2, a3);
  uint64_t v45 = a2 + a3;
  if (v44)
  {
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

  uint64_t v116 = v41;
  v117  = v37;
  v118  = v40;
  v120  = v39;
  v123  = v9;
  v124  = AssociatedTypeWitness;
  v125  = a8;
  if (dispatch thunk of static FixedWidthInteger.bitWidth.getter(AssociatedTypeWitness, a8) < v45)
  {
LABEL_3:
    unint64_t v46 = sub_1000033FC();
    uint64_t v47 = swift_allocError(&type metadata for WiFiError, v46, 0LL, 0LL);
    *(void *)uint64_t v48 = 0LL;
    *(void *)(v48 + 8)  = 0LL;
    *(_BYTE *)(v48 + 16)  = 2;
    return swift_willThrow(v47);
  }

  if (a3 < 0) {
    goto LABEL_67;
  }
  uint64_t v50 = 0LL;
  if (a3)
  {
    unint64_t v51 = 0LL;
    uint64_t v52 = v135;
    while (1)
    {
      if (v51 <= 0x3F) {
        v50 |= 1LL << v51;
      }
      if (a3 - 1 == v51) {
        break;
      }
      if (a3 == ++v51)
      {
        __break(1u);
        goto LABEL_12;
      }
    }
  }

  else
  {
LABEL_12:
    uint64_t v52 = v135;
  }

  uint64_t v53 = v132;
  char v54 = *(void (**)(char *, uint64_t, uint64_t))(v132 + 16);
  v54(v43, v52, a5);
  char v55 = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
  v54(v36, (uint64_t)v43, a5);
  uint64_t v115 = v54;
  if ((v55 & 1) == 0)
  {
    uint64_t v57 = *(void (**)(char *, uint64_t))(v53 + 8);
    uint64_t v63 = v36;
    goto LABEL_19;
  }

  uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v53 + 8);
  v57(v36, a5);
  if (v56 <= 64) {
    goto LABEL_20;
  }
  char v58 = v122;
  v54(v122, (uint64_t)v43, a5);
  v137  = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19) >= 64)
    {
      unint64_t v99 = sub_100024970();
      uint64_t v100 = v134;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v137, &type metadata for Int, v99, a5, v19);
      uint64_t v101 = v58;
      char v102 = dispatch thunk of static Comparable.< infix(_:_:)(v58, v100, a5, *(void *)(v19[4] + 8LL));
      uint64_t v103 = v100;
      char v54 = v115;
      v57(v103, a5);
      v57(v101, a5);
      if ((v102 & 1) != 0) {
        goto LABEL_61;
      }
      goto LABEL_20;
    }

    uint64_t v59 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
    char v60 = v58;
    uint64_t v61 = v59;
    char v62 = v60;
LABEL_60:
    v57(v62, a5);
    if (v61 < v137) {
      goto LABEL_61;
    }
LABEL_20:
    uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
    v65  = v131;
    v54(v131, (uint64_t)v43, a5);
    if (v64 < 65)
    {
      uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
      v57(v65, a5);
      if (v72 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19) & 1) != 0)
      {
LABEL_32:
        uint64_t v76 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
        v57(v43, a5);
        uint64_t v10 = v76 & v50;
        LOBYTE(v76)  = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
        uint64_t v77 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
        if ((v76 & 1) != 0)
        {
          if (v77 > 64)
          {
            v137  = v10;
            unint64_t v78 = sub_100024970();
            int v79 = v134;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v137, &type metadata for Int, v78, a5, v19);
            char v80 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v52, a5, *(void *)(v19[2] + 8LL));
            v81  = v79;
            goto LABEL_40;
          }
        }

        else if (v77 > 63)
        {
          v137  = v10;
          uint64_t v84 = v121;
          v115(v121, v52, a5);
          if (v10 < 0)
          {
            v57(v84, a5);
            goto LABEL_3;
          }

          unint64_t v85 = sub_100024970();
          char v86 = v134;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v137, &type metadata for Int, v85, a5, v19);
          char v80 = dispatch thunk of static Equatable.== infix(_:_:)(v86, v84, a5, *(void *)(v19[2] + 8LL));
          v57(v86, a5);
          v81  = v84;
LABEL_40:
          v57(v81, a5);
          if ((v80 & 1) == 0) {
            goto LABEL_3;
          }
LABEL_41:
          unint64_t v38 = v130;
          if (v130 <= -65) {
            goto LABEL_42;
          }
          uint64_t v89 = v124;
          uint64_t v88 = v125;
          if (v130 > 64)
          {
            uint64_t v87 = 0LL;
            goto LABEL_53;
          }

          if ((v130 & 0x8000000000000000LL) == 0)
          {
            uint64_t v87 = v10 << v130;
            goto LABEL_53;
          }

LABEL_69:
          if (v38 > 0xFFFFFFFFFFFFFFC0LL)
          {
            uint64_t v87 = v10 >> -(char)v130;
            goto LABEL_43;
          }

void *sub_10019D518(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
  }

  else
  {
    if (!a2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for UInt8);
    *(void *)(v4 + 16)  = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (void *)v4;
  }

  return result;
}

uint64_t static OptionSet<>.withValue<A>(_:at:withBitCount:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v20 = a5;
  uint64_t v21 = a7;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  a6,  a4,  &protocol requirements base descriptor for RawRepresentable);
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v16 = (char *)&v18 - v15;
  dispatch thunk of RawRepresentable.rawValue.getter(a4, a6);
  static OptionSet<>.withValue<A>(_:at:withBitCount:)( (uint64_t)v16,  a1,  v18,  v19,  AssociatedTypeWitness,  v20,  a9,  v21,  a8);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
}

uint64_t static OptionSet<>.withBool(_:at:)@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = a1 & 1;
  unint64_t v11 = sub_1000C0114();
  return static OptionSet<>.withValue<A>(_:at:withBitCount:)( (uint64_t)&v13,  a2,  1LL,  a3,  (uint64_t)&type metadata for Int,  a4,  v11,  a5,  a6);
}

uint64_t sub_10019D750(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000A60A0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_10019D8A0(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000A6094(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_10019D9E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000A65E8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_10019DB28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000A73EC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

void *Dictionary<>.serializeForCoreAnalytics()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v14 = a1;
  v13[2]  = a2;
  v13[3]  = a3;
  v13[4]  = a4;
  v13[5]  = a5;
  uint64_t v5 = type metadata accessor for Dictionary(0LL, a2, a3, a4);
  uint64_t v6 = sub_100002274(&qword_1004063E8);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v5);
  uint64_t v8 = Sequence.compactMap<A>(_:)(sub_10019ECD0, v13, v5, v6, WitnessTable);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    sub_100002274(&qword_100409230);
    uint64_t v10 = (void *)static _DictionaryStorage.allocate(capacity:)(v9);
  }

  else
  {
    uint64_t v10 = &_swiftEmptyDictionarySingleton;
  }

  int64_t v14 = v10;
  uint64_t v11 = (void *)swift_bridgeObjectRetain(v8);
  sub_100153550(v11, 1, &v14);
  swift_bridgeObjectRelease(v8);
  return v14;
}

void *Dictionary<>.serializeForCoreAnalytics()(void *a1, uint64_t a2)
{
  uint64_t v11 = a1;
  v10[2]  = a2;
  uint64_t v2 = type metadata accessor for Dictionary(0LL, &type metadata for String, a2, &protocol witness table for String);
  uint64_t v3 = sub_100002274(&qword_1004063E8);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v2);
  uint64_t v5 = Sequence.compactMap<A>(_:)(sub_10019ECEC, v10, v2, v3, WitnessTable);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    sub_100002274(&qword_100409230);
    unint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
  }

  else
  {
    unint64_t v7 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v11 = v7;
  uint64_t v8 = (void *)swift_bridgeObjectRetain(v5);
  sub_100153550(v8, 1, &v11);
  swift_bridgeObjectRelease(v5);
  return v11;
}

uint64_t sub_10019DE88@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v33 = a5;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2(0LL, a2, a3, "key value ", 0LL);
  uint64_t v30 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  int64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = *(int *)(v12 + 48);
  char v16 = (char *)&v28 + v15 - v13;
  uint64_t v17 = a1 + v15;
  uint64_t v18 = *(void *)(a2 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v32 = a1;
  uint64_t v28 = v19;
  v19((char *)&v28 - v13, a1, a2);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL);
  uint64_t v29 = v17;
  v20(v16, v17, a3);
  unint64_t v21 = sub_100021774();
  if ((swift_dynamicCast(v34, v16, a3, v21, 6LL) & 1) != 0)
  {
    uint64_t v22 = v34[0];
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, a2);
    uint64_t result = dispatch thunk of RawRepresentable.rawValue.getter(a2, v31);
    uint64_t v24 = v34[0];
    uint64_t v25 = v34[1];
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, a2);
    uint64_t v26 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    v28(v11, v32, a2);
    v20(v26, v29, a3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v11, TupleTypeMetadata2);
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v22 = 0LL;
  }

  uint64_t v27 = v33;
  *uint64_t v33 = v24;
  v27[1]  = v25;
  v27[2]  = v22;
  return result;
}

uint64_t sub_10019E048@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v31 = a3;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2(0LL, &type metadata for String, a2, "key value ", 0LL);
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v7 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v9 = (void **)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (void **)((char *)&v31 - v11);
  uint64_t v13 = *(int *)(v10 + 48);
  int64_t v14 = (char *)&v31 + v13 - v11;
  uint64_t v15 = &a1[v13];
  uint64_t v16 = *((void *)a1 + 1);
  *uint64_t v12 = *(void *)a1;
  v12[1]  = v16;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v18(v14, &a1[v13], a2);
  unint64_t v19 = sub_100021774();
  if ((swift_dynamicCast(&v32, v14, a2, v19, 6LL) & 1) != 0)
  {
    uint64_t v20 = v32;
    unint64_t v21 = (char *)v9 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v23 = *(void *)a1;
    uint64_t v22 = *((void *)a1 + 1);
    *uint64_t v9 = v23;
    v9[1]  = v22;
    v18(v21, v15, a2);
    uint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
    swift_bridgeObjectRetain(v22);
    uint64_t result = v24(v21, a2);
  }

  else
  {
    uint64_t v26 = (char *)v9 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v27 = *(void *)a1;
    uint64_t v28 = *((void *)a1 + 1);
    *uint64_t v9 = v27;
    v9[1]  = v28;
    v18(v26, v15, a2);
    uint64_t v29 = *(uint64_t (**)(void *, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain(v28);
    uint64_t result = v29(v9, TupleTypeMetadata2);
    uint64_t v23 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v20 = 0LL;
  }

  uint64_t v30 = v31;
  *uint64_t v31 = v23;
  v30[1]  = v22;
  v30[2]  = v20;
  return result;
}

uint64_t sub_10019E1DC( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_BYTE *, void), uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  dispatch thunk of RawRepresentable.rawValue.getter(a5, *(void *)(*(void *)(a6 + 8) + 8LL));
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(v14 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  LOBYTE(a2)  = *(_BYTE *)(v14 + a2 + 32);
  swift_bridgeObjectRelease(v14);
  a4  = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 24))( v13,  v7,  v6);
  uint64_t v7 = v11;
  uint64_t v6 = *v11;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v11);
  *uint64_t v7 = v6;
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

unint64_t sub_10019E2DC(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16LL);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return (unint64_t)sub_1001E0AA0(result, v2);
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10019E304( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_BYTE *, void), uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  dispatch thunk of RawRepresentable.rawValue.getter(a5, *(void *)(*(void *)(a6 + 8) + 8LL));
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(v14 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  LOBYTE(a2)  = *(_BYTE *)(v14 + a2 + 32);
  swift_bridgeObjectRelease(v14);
  a4  = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 24))( v13,  v7,  v6);
  uint64_t v7 = v11;
  uint64_t v6 = *v11;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v11);
  *uint64_t v7 = v6;
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

uint64_t sub_10019E404( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(void *, void), uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  dispatch thunk of RawRepresentable.rawValue.getter(a5, *(void *)(*(void *)(a6 + 8) + 8LL));
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(v13[0] + 16LL) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  LOBYTE(a2)  = *(_BYTE *)(v13[0] + a2 + 32);
  swift_bridgeObjectRelease(v13[0]);
  a4  = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *, uint64_t *, uint64_t))(v6 + 24))( v13,  v7,  v6);
  uint64_t v7 = v11;
  uint64_t v6 = *v11;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v11);
  *uint64_t v7 = v6;
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

uint64_t ExtendableOptionSet.init<A>(bitOffset:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v60 = a2;
  uint64_t v61 = a4;
  uint64_t v59 = a6;
  uint64_t v10 = *(void *)(a5 + 8);
  uint64_t v57 = *(void *)(*(void *)(v10 + 24) + 16LL);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  v57,  a3,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v56 = (char *)v54 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  char v58 = (char *)v54 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)v54 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v54 - v21;
  uint64_t v62 = a1;
  uint64_t v63 = v23;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v24((char *)v54 - v21, a1, a3);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v10) & 1) != 0)
  {
    uint64_t v25 = v10;
    uint64_t v26 = v24;
    uint64_t v27 = v7;
    uint64_t v28 = v57;
    uint64_t v29 = AssociatedTypeWitness;
    AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness( v57,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v31 = v20;
    uint64_t v32 = v56;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v29,  AssociatedConformanceWitness);
    uint64_t v33 = v32;
    uint64_t v20 = v31;
    uint64_t v34 = v28;
    uint64_t v7 = v27;
    uint64_t v24 = v26;
    uint64_t v10 = v25;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v33, a3, v34);
    LOBYTE(v29)  = dispatch thunk of static Comparable.>= infix(_:_:)( v22,  v31,  a3,  *(void *)(*(void *)(v25 + 32) + 8LL));
    (*(void (**)(char *, uint64_t))(v63 + 8))(v31, a3);
    if ((v29 & 1) == 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      goto LABEL_17;
    }
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v10) < 64) {
    goto LABEL_15;
  }
  v54[0]  = v15;
  v54[1]  = v7;
  v24(v58, (uint64_t)v22, a3);
  uint64_t v64 = -1LL;
  char v35 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v10);
  uint64_t v36 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v10);
  if ((v35 & 1) == 0)
  {
    if (v36 >= 65) {
      goto LABEL_10;
    }
    unint64_t v51 = v58;
    dispatch thunk of BinaryInteger._lowWord.getter(a3, v10);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v51, a3);
LABEL_15:
    unint64_t v52 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v10);
    uint64_t v53 = *(void (**)(char *, uint64_t))(v63 + 8);
    v53(v22, a3);
    ExtendableOptionSet.init(bitOffset:)(v52, v60, v61);
    return ((uint64_t (*)(uint64_t, uint64_t))v53)(v62, a3);
  }

  if (v36 <= 64)
  {
    uint64_t v37 = v57;
    uint64_t v38 = AssociatedTypeWitness;
    uint64_t v39 = swift_getAssociatedConformanceWitness( v57,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    Class v40 = v20;
    uint64_t v41 = v56;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100339A38, 256LL, v38, v39);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v41, a3, v37);
    uint64_t v42 = v58;
    LOBYTE(v38)  = dispatch thunk of static Comparable.> infix(_:_:)( v58,  v40,  a3,  *(void *)(*(void *)(v10 + 32) + 8LL));
    uint64_t v43 = v24;
    BOOL v44 = *(void (**)(char *, uint64_t))(v63 + 8);
    v44(v40, a3);
    unint64_t v45 = v64;
    unint64_t v46 = (char *)v54[0];
    v43((char *)v54[0], (uint64_t)v42, a3);
    if ((v38 & 1) != 0)
    {
      unint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v10);
      v44(v46, a3);
      if (v45 < v47) {
        goto LABEL_11;
      }
    }

    else
    {
      v44(v46, a3);
    }

    goto LABEL_14;
  }

void *sub_10019E9E4(void *a1)
{
  return sub_1000A60A0(0LL, a1[2], 0, a1);
}

void *sub_10019E9F8(void *a1)
{
  return sub_1000A6800(0LL, a1[2], 0, a1);
}

void *sub_10019EA0C(void *a1)
{
  return sub_1000A6094(0LL, a1[2], 0, a1);
}

void *sub_10019EA20(void *a1)
{
  return sub_1000A70B4(0LL, a1[2], 0, a1);
}

void *sub_10019EA34(void *a1)
{
  return sub_1000A73EC(0LL, a1[2], 0, a1);
}

void *sub_10019EA48(void *a1)
{
  return sub_1000A74F8(0LL, a1[2], 0, a1);
}

uint64_t sub_10019EA5C(unint64_t a1)
{
  return sub_1000A7958(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10019EA70( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v6 = result;
    if (a2 < result)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }

    if (result >= a2)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    uint64_t v8 = a3;
    if (a3 != a4)
    {
      if (a4 < a3)
      {
LABEL_17:
        __break(1u);
        return result;
      }

      uint64_t v10 = result + 1;
      while (v8 < a4)
      {
        uint64_t result = a5(v10 - 1, v8);
        if (a2 == v10) {
          return result;
        }
        if (v10 < v6 || v10 >= a2) {
          goto LABEL_14;
        }
        ++v8;
        ++v10;
        if (a4 == v8) {
          return result;
        }
      }

      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }

  return result;
}

void *sub_10019EB3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  int64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = (void *)*v4;
  int64_t v8 = *(void *)(*v4 + 16LL);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_1000A6094(result, v13, 1, v7);
      uint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }

    goto LABEL_22;
  }

uint64_t sub_10019ECD0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10019DE88(a1, v2[2], v2[3], v2[5], a2);
}

uint64_t sub_10019ECEC@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  return sub_10019E048(a1, *(void *)(v2 + 16), a2);
}

void *InfraStatistics.none.unsafeMutableAddressor()
{
  return &static InfraStatistics.none;
}

uint64_t TrafficClass.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019ED48 + 4 * byte_100351370[a1]))( 0x756F72676B636142LL,  0xEA0000000000646ELL);
}

uint64_t sub_10019ED48()
{
  return 0x6666452074736542LL;
}

uint64_t sub_10019ED68()
{
  return 0x6563696F56LL;
}

uint64_t sub_10019ED7C()
{
  return 0x6F65646956LL;
}

_UNKNOWN **static TrafficClass.allCases.getter()
{
  return &off_1003D7440;
}

uint64_t TrafficClass.rawValue.getter(char a1)
{
  return *(void *)&aBk_0[8 * a1];
}

uint64_t sub_10019EDB8(char *a1, char *a2)
{
  return sub_10002AF40(*a1, *a2);
}

unint64_t sub_10019EDC4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreP2P12TrafficClassO8rawValueACSgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10019EDF0(void *a1@<X8>)
{
  *a1  = *(void *)&aBk_0[8 * *v1];
  a1[1]  = 0xE200000000000000LL;
}

Swift::Int sub_10019EE0C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, *(void *)&aBk_0[8 * v1], 0xE200000000000000LL);
  swift_bridgeObjectRelease(0xE200000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_10019EE64(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE200000000000000LL);
}

Swift::Int sub_10019EE90(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, *(void *)&aBk_0[8 * v2], 0xE200000000000000LL);
  swift_bridgeObjectRelease(0xE200000000000000LL);
  return Hasher._finalize()();
}

void sub_10019EEE4(void *a1@<X8>)
{
  *a1  = &off_1003D7468;
}

uint64_t sub_10019EEF4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019EF28 + 4 * byte_100351374[*v0]))( 0x756F72676B636142LL,  0xEA0000000000646ELL);
}

uint64_t sub_10019EF28()
{
  return 0x6666452074736542LL;
}

uint64_t sub_10019EF48()
{
  return 0x6563696F56LL;
}

uint64_t sub_10019EF5C()
{
  return 0x6F65646956LL;
}

uint64_t sub_10019EF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019FC9C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019EFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019FC9C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t TrafficType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019F044 + 4 * byte_100351378[a1]))( 1701736270LL,  0xE400000000000000LL);
}

uint64_t sub_10019F044()
{
  return 0x6D6974206C616552LL;
}

uint64_t sub_10019F064()
{
  return 0x6E696D6165727453LL;
}

uint64_t sub_10019F084()
{
  return 0x746164206B6C7542LL;
}

_UNKNOWN **static TrafficType.allCases.getter()
{
  return &off_1003D7490;
}

void sub_10019F0AC(void *a1@<X8>)
{
  *a1  = &off_1003D74B8;
}

uint64_t sub_10019F0BC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019F0E4 + 4 * byte_10035137C[*v0]))( 1701736270LL,  0xE400000000000000LL);
}

uint64_t sub_10019F0E4()
{
  return 0x6D6974206C616552LL;
}

uint64_t sub_10019F104()
{
  return 0x6E696D6165727453LL;
}

uint64_t sub_10019F124()
{
  return 0x746164206B6C7542LL;
}

uint64_t TrafficState.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019F16C + 4 * byte_100351380[a1]))( 1701602377LL,  0xE400000000000000LL);
}

uint64_t sub_10019F16C()
{
  return 0x6D6974206C616552LL;
}

uint64_t sub_10019F18C()
{
  return 0x6E696D6165727453LL;
}

uint64_t sub_10019F1AC()
{
  return 0x746164206B6C7542LL;
}

uint64_t sub_10019F1C8()
{
  return 0x697469736E617254LL;
}

_UNKNOWN **static TrafficState.allCases.getter()
{
  return &off_1003D74E0;
}

void sub_10019F1F8(void *a1@<X8>)
{
  *a1  = &off_1003D7508;
}

uint64_t sub_10019F208()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019F230 + 4 * byte_100351385[*v0]))( 1701602377LL,  0xE400000000000000LL);
}

uint64_t sub_10019F230()
{
  return 0x6D6974206C616552LL;
}

uint64_t sub_10019F250()
{
  return 0x6E696D6165727453LL;
}

uint64_t sub_10019F270()
{
  return 0x746164206B6C7542LL;
}

uint64_t sub_10019F28C()
{
  return 0x697469736E617254LL;
}

double InfrastructureQualityOfService.availabilityPercentage.getter(char a1)
{
  return dbl_1003519E8[a1];
}

uint64_t InfrastructureQualityOfService.description.getter(char a1)
{
  v8[0]  = 0LL;
  v8[1]  = 0xE000000000000000LL;
  v2._countAndFlagsBits  = 0x2072656954LL;
  v2._object  = (void *)0xE500000000000000LL;
  String.append(_:)(v2);
  v3._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object  = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits  = 10272LL;
  v5._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  Double.write<A>(to:)( v8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  dbl_1003519E8[a1]);
  v6._countAndFlagsBits  = 10533LL;
  v6._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  return v8[0];
}

BOOL static InfrastructureQualityOfService.> infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

Swift::Int sub_10019F3A8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_10019F3EC()
{
}

Swift::Int sub_10019F418(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

uint64_t sub_10019F458@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P30InfrastructureQualityOfServiceO8rawValueACSgSi_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10019F480(void *a1@<X8>)
{
  *a1  = *v1 + 1LL;
}

uint64_t sub_10019F490()
{
  return InfrastructureQualityOfService.description.getter(*v0);
}

double NANQualityOfService.availabilityPercentage.getter(char a1)
{
  return dbl_100351A30[a1];
}

void NANQualityOfService.description.getter(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10019F4E8()
{
  v7[0]  = 0LL;
  v7[1]  = 0xE000000000000000LL;
  v1._countAndFlagsBits  = 0x2072656954LL;
  v1._object  = (void *)0xE500000000000000LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object  = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits  = 10272LL;
  v4._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  Double.write<A>(to:)( v7,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  dbl_100351A08[v0]);
  v5._countAndFlagsBits  = 10533LL;
  v5._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  return v7[0];
}

void sub_10019F5B4()
{
  v0._countAndFlagsBits  = 0x656D69546C616552LL;
  v0._object  = (void *)0xEA00000000002820LL;
  String.append(_:)(v0);
  JUMPOUT(0x10019F584LL);
}

BOOL static NANQualityOfService.< infix(_:_:)(char a1, char a2)
{
  return dbl_100351A30[a1] < dbl_100351A30[a2];
}

_UNKNOWN **static NANQualityOfService.allCases.getter()
{
  return &off_1003D7530;
}

void sub_10019F628(void *a1@<X8>)
{
  *a1  = &off_1003D7530;
}

void sub_10019F638()
{
}

BOOL sub_10019F640(char *a1, char *a2)
{
  return dbl_100351A30[*a1] < dbl_100351A30[*a2];
}

BOOL sub_10019F664(char *a1, char *a2)
{
  return dbl_100351A30[*a2] >= dbl_100351A30[*a1];
}

BOOL sub_10019F688(char *a1, char *a2)
{
  return dbl_100351A30[*a1] >= dbl_100351A30[*a2];
}

BOOL sub_10019F6AC(char *a1, char *a2)
{
  return dbl_100351A30[*a2] < dbl_100351A30[*a1];
}

void *InfraStatistics.infraRealtimePacketThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraRealtimePacketThreshold;
}

void *InfraStatistics.infraStreamingPacketLengthThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraStreamingPacketLengthThreshold;
}

uint64_t static InfraStatistics.infraStreamingPacketLengthThreshold.getter()
{
  return 1400LL;
}

void *InfraStatistics.infraEstimatedOverhead.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraEstimatedOverhead;
}

double static InfraStatistics.infraEstimatedOverhead.getter()
{
  return 0.7;
}

void *InfraStatistics.infra5GHzBulkDataUtilizationThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infra5GHzBulkDataUtilizationThreshold;
}

double static InfraStatistics.infra5GHzBulkDataUtilizationThreshold.getter()
{
  return 0.8;
}

void *InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold;
}

double static InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold.getter()
{
  return 0.5;
}

unint64_t _s7CoreP2P12TrafficClassO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5328, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t _s7CoreP2P30InfrastructureQualityOfServiceO8rawValueACSgSi_tcfC_0(unint64_t a1)
{
  if (a1 >= 5) {
    return 4LL;
  }
  else {
    return (0x302010004uLL >> (8 * a1));
  }
}

unint64_t sub_10019F7A8()
{
  unint64_t result = qword_10040A6A8;
  if (!qword_10040A6A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TrafficClass, &type metadata for TrafficClass);
    atomic_store(result, (unint64_t *)&qword_10040A6A8);
  }

  return result;
}

uint64_t sub_10019F7EC()
{
  return sub_10005AC9C(&qword_10040A6B0, &qword_10040A6B8);
}

unint64_t sub_10019F814()
{
  unint64_t result = qword_10040A6C0;
  if (!qword_10040A6C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TrafficType, &type metadata for TrafficType);
    atomic_store(result, (unint64_t *)&qword_10040A6C0);
  }

  return result;
}

uint64_t sub_10019F858()
{
  return sub_10005AC9C(&qword_10040A6C8, &qword_10040A6D0);
}

unint64_t sub_10019F880()
{
  unint64_t result = qword_10040A6D8;
  if (!qword_10040A6D8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TrafficState, &type metadata for TrafficState);
    atomic_store(result, (unint64_t *)&qword_10040A6D8);
  }

  return result;
}

uint64_t sub_10019F8C4()
{
  return sub_10005AC9C(&qword_10040A6E0, &qword_10040A6E8);
}

unint64_t sub_10019F8EC()
{
  unint64_t result = qword_10040A6F0;
  if (!qword_10040A6F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InfrastructureQualityOfService,  &type metadata for InfrastructureQualityOfService);
    atomic_store(result, (unint64_t *)&qword_10040A6F0);
  }

  return result;
}

unint64_t sub_10019F934()
{
  unint64_t result = qword_10040A6F8;
  if (!qword_10040A6F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANQualityOfService,  &type metadata for NANQualityOfService);
    atomic_store(result, (unint64_t *)&qword_10040A6F8);
  }

  return result;
}

uint64_t sub_10019F978()
{
  return sub_10005AC9C(&qword_10040A700, &qword_10040A708);
}

ValueMetadata *type metadata accessor for TrafficClass()
{
  return &type metadata for TrafficClass;
}

ValueMetadata *type metadata accessor for TrafficType()
{
  return &type metadata for TrafficType;
}

uint64_t storeEnumTagSinglePayload for TrafficState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10019FA0C + 4 * byte_100351395[v4]))();
  }
  *a1  = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10019FA40 + 4 * byte_100351390[v4]))();
}

uint64_t sub_10019FA40(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019FA48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019FA50LL);
  }
  return result;
}

uint64_t sub_10019FA5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019FA64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10019FA68(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019FA70(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrafficState()
{
  return &type metadata for TrafficState;
}

uint64_t _s7CoreP2P12TrafficClassOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10019FAD8 + 4 * byte_10035139F[v4]))();
  }
  *a1  = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10019FB0C + 4 * byte_10035139A[v4]))();
}

uint64_t sub_10019FB0C(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019FB14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019FB1CLL);
  }
  return result;
}

uint64_t sub_10019FB28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019FB30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10019FB34(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019FB3C(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for InfrastructureQualityOfService()
{
  return &type metadata for InfrastructureQualityOfService;
}

uint64_t storeEnumTagSinglePayload for NANQualityOfService(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10019FBA4 + 4 * byte_1003513A9[v4]))();
  }
  *a1  = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10019FBD8 + 4 * byte_1003513A4[v4]))();
}

uint64_t sub_10019FBD8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019FBE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10019FBE8LL);
  }
  return result;
}

uint64_t sub_10019FBF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10019FBFCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10019FC00(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10019FC08(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANQualityOfService()
{
  return &type metadata for NANQualityOfService;
}

uint64_t getEnumTagSinglePayload for InfraStatistics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for InfraStatistics(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104)  = 0LL;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 112)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for InfraStatistics()
{
  return &type metadata for InfraStatistics;
}

unint64_t sub_10019FC9C()
{
  unint64_t result = qword_10040A710;
  if (!qword_10040A710)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TrafficClass, &type metadata for TrafficClass);
    atomic_store(result, (unint64_t *)&qword_10040A710);
  }

  return result;
}

void *NANAttribute.DeviceCapability.OperationMode.vht.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht;
}

CoreP2P::NANAttribute::DeviceCapability::AnntenaCount __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NANAttribute.DeviceCapability.AnntenaCount.init(txAnntenaCount:rxAnntenaCount:)( Swift::Int txAnntenaCount, Swift::Int rxAnntenaCount)
{
  uint64_t v5 = sub_100002274(&qword_100404AE0);
  inited  = swift_initStackObject(v5, v12);
  *(void *)(inited + 24)  = 4LL;
  char v7 = sub_1001A06FC(txAnntenaCount, 0LL, 4LL);
  if (v2)
  {
    *(void *)(inited + 16)  = 0LL;
    swift_release(inited);
  }

  else
  {
    *(_BYTE *)(inited + 32)  = v7;
    unsigned __int8 v8 = sub_1001A06FC(rxAnntenaCount, 4LL, 4LL);
    *(_BYTE *)(inited + 33)  = v8;
    char v10 = *(_BYTE *)(inited + 32);
    else {
      unsigned __int8 v11 = 0;
    }
    LOBYTE(rxAnntenaCount)  = v11 | v10;
    swift_setDeallocating(inited);
  }

  return (CoreP2P::NANAttribute::DeviceCapability::AnntenaCount)rxAnntenaCount;
}

void *NANAttribute.CustomDeviceInformation.Version.latest.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Version.latest;
}

void *sub_10019FDC0(__int16 a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = (HIBYTE(a1) - a1);
  unsigned int v17 = HIBYTE(a1);
  unsigned __int8 v18 = a1;
  else {
    uint64_t v5 = (HIBYTE(a1) - a1);
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)sub_1000696EC(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    LODWORD(v7)  = v17 - v18;
    if (v17 >= v18) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v8 = -v7;
    while (v5)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      uint64_t v10 = *(void *)(a2 + 32);
      sub_1000237C8(a2, v9);
      unint64_t v11 = sub_1001E469C();
      unint64_t result = (void *)UnkeyedDecodingContainer.inferredDecode<A>()( v9,  (uint64_t)&type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry,  v10,  v11);
      if (v3)
      {
        swift_release(_swiftEmptyArrayStorage);
        return _swiftEmptyArrayStorage;
      }

      char v12 = v22;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
      {
        unint64_t result = (void *)sub_1000696EC(v13 > 1, v14 + 1, 1);
        char v12 = v22;
      }

      _swiftEmptyArrayStorage[2]  = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      *((_DWORD *)v15 + 8)  = v19;
      *(void *)((char *)v15 + 36)  = v20;
      *((_BYTE *)v15 + 44)  = v21;
      *((_BYTE *)v15 + 45)  = v12;
      if (v17 < v18) {
        goto LABEL_21;
      }
      if (!v8) {
        goto LABEL_22;
      }
      ++v8;
      --v5;
      --v4;
      uint64_t v3 = 0LL;
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_10019FF6C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10019FFC0()
{
  return Hasher._finalize()();
}

void sub_1001A0070(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1001A00BC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001A0170(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 32);
    do
    {
      Swift::UInt8 v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }

    while (v3);
  }

  return Hasher._finalize()();
}

BOOL sub_1001A01D8(unint64_t a1, __int16 a2, unint64_t a3, __int16 a4)
{
  if ((a2 & 0x100) == 0) {
    return (a4 & 0x100) == 0 && a1 == a3;
  }
  BOOL result = 0LL;
  if ((a4 & 0x100) != 0
    && a1 == a3
    && WORD1(a1) == WORD1(a3)
    && BYTE4(a1) == BYTE4(a3))
  {
    if ((a2 & 1) != 0)
    {
      if ((a4 & 1) != 0) {
        return 1LL;
      }
    }

    else if ((a4 & 1) == 0 && HIWORD(a1) == HIWORD(a3))
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1001A0268(uint64_t a1)
{
  return sub_1001A0290( a1,  (uint64_t (*)(uint64_t, uint64_t))sub_1001E441C,  (uint64_t (*)(uint64_t, uint64_t))sub_1001E520C);
}

uint64_t sub_1001A027C(uint64_t a1)
{
  return sub_1001A0290( a1,  (uint64_t (*)(uint64_t, uint64_t))sub_1001E5210,  (uint64_t (*)(uint64_t, uint64_t))sub_1001E520C);
}

uint64_t sub_1001A0290( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  uint64_t v10 = *v3;
  swift_bridgeObjectRetain(*v3);
  sub_1001A0374(a1, a2);
  uint64_t v8 = v10;
  if ((sub_10007990C(v10, _swiftEmptyArrayStorage) & 1) != 0)
  {
    swift_bridgeObjectRelease(v10);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRetain(v7);
    sub_10008F9D0(a1, a3);
    sub_1001A0374(v7, a2);
    swift_bridgeObjectRelease(v7);
  }

  return v8;
}

uint64_t sub_1001A035C(uint64_t a1)
{
  return sub_1001A0374(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001E441C);
}

uint64_t sub_1001A0368(uint64_t a1)
{
  return sub_1001A0374(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001E5210);
}

uint64_t sub_1001A0374(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  unint64_t v4 = *(void *)(*(void *)v2 + 16LL);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v4 - v5;
  if (v4 > v5) {
    unint64_t v6 = sub_10019E2DC(v6);
  }
  __chkstk_darwin(v6);
  return sub_10019EA70(0LL, v7, 0LL, v5, a2);
}

uint64_t sub_1001A0408(uint64_t a1)
{
  return sub_10008F9D0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001E520C);
}

uint64_t sub_1001A0418(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    char v1 = a1;
    unint64_t v3 = a1 >> 3;
    uint64_t v2 = sub_10019D518(0, (a1 >> 3) + 1);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v2);
    if ((result & 1) != 0) {
      goto LABEL_3;
    }
  }

  uint64_t result = (uint64_t)sub_10019EA0C(v2);
  uint64_t v2 = (void *)result;
LABEL_3:
  if (v3 >= v2[2])
  {
    __break(1u);
  }

  else
  {
    *((_BYTE *)v2 + v3 + 32) |= 1 << (v1 & 7);
    return (uint64_t)v2;
  }

  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1  = 0;
  *(_BYTE *)(a1 + 2)  = 1;
  uint64_t v2 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v3 = a1 + v2[6];
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  *(_OWORD *)(a1 + v2[7])  = xmmword_10033BED0;
  *(_OWORD *)(a1 + v2[8])  = xmmword_10033BED0;
  *(_OWORD *)(a1 + v2[9])  = xmmword_10033BED0;
  uint64_t v5 = a1 + v2[10];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  *(void *)(a1 + v2[11])  = _swiftEmptyArrayStorage;
  uint64_t v7 = a1 + v2[12];
  uint64_t v8 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( v7,  1LL,  1LL,  v8);
  uint64_t v10 = a1 + v2[13];
  *(void *)uint64_t v10 = 0LL;
  *(void *)(v10 + 8)  = 0LL;
  *(void *)(v10 + 16)  = 0LL;
  *(_BYTE *)(v10 + 24)  = 1;
  return result;
}

void *NANAttribute.CustomDeviceInformation.Flags.furtherServiceDiscoveryFollowUp.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.furtherServiceDiscoveryFollowUp;
}

uint64_t sub_1001A05B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A06FC(a1, a2, a3);
}

unint64_t sub_1001A05C4(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  return sub_1001A0954(a1, a2, a3);
}

unint64_t sub_1001A05D8(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  return sub_1001A084C(a1, a2, a3);
}

unint64_t sub_1001A05EC(unint64_t result, unint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3)) {
    goto LABEL_22;
  }
  if (a3 < 0) {
    goto LABEL_23;
  }
  uint64_t v3 = 0LL;
  if (a3)
  {
    unint64_t v4 = 0LL;
    while (1)
    {
      if (v4 < 0x40) {
        v3 |= 1LL << v4;
      }
      if (a3 - 1 == v4) {
        break;
      }
      if (a3 == ++v4)
      {
        __break(1u);
        break;
      }
    }
  }

  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_24;
  }
  if ((result & ~v3) != 0)
  {
LABEL_15:
    unint64_t v5 = sub_1000033FC();
    uint64_t v6 = swift_allocError(&type metadata for WiFiError, v5, 0LL, 0LL);
    *(void *)uint64_t v7 = 0LL;
    *(void *)(v7 + 8)  = 0LL;
    *(_BYTE *)(v7 + 16)  = 2;
    return swift_willThrow(v6);
  }

  else
  {
    if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0LL;
    }
    if ((a2 & 0x8000000000000000LL) != 0) {
      goto LABEL_26;
    }
    if (a2 >= 0x40) {
      return 0LL;
    }
    result <<= a2;
    if ((result & 0x8000000000000000LL) != 0) {
      goto LABEL_25;
    }
    if (result >> 16)
    {
      while (1)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        if (a2 <= 0xFFFFFFFFFFFFFFC0LL) {
          break;
        }
        result >>= -(char)a2;
        if (!(result >> 16)) {
          return result;
        }
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001A06FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3)) {
    goto LABEL_31;
  }
  if (a2 + a3 > 8) {
    goto LABEL_18;
  }
  if (a3 < 0) {
    goto LABEL_32;
  }
  if (a3)
  {
    uint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
    while (1)
    {
      if (v4 < 0x40) {
        v3 |= 1LL << v4;
      }
      if (a3 - 1 == v4) {
        break;
      }
      if (a3 == ++v4)
      {
        __break(1u);
        break;
      }
    }

    if ((result & ~v3) == 0)
    {
      if (a2 <= -65) {
        goto LABEL_22;
      }
      if (a2 > 64) {
        return 0LL;
      }
      if (a2 < 0) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }

    goto LABEL_18;
  }

  if (result)
  {
LABEL_18:
    unint64_t v5 = sub_1000033FC();
    uint64_t v6 = swift_allocError(&type metadata for WiFiError, v5, 0LL, 0LL);
    *(void *)uint64_t v7 = 0LL;
    *(void *)(v7 + 8)  = 0LL;
    *(_BYTE *)(v7 + 16)  = 2;
    swift_willThrow(v6);
    return v8;
  }

  if (a2 < -64)
  {
    uint64_t result = 0LL;
    goto LABEL_22;
  }

  if (a2 > 64) {
    return 0LL;
  }
  unint64_t v8 = 0LL;
  uint64_t result = 0LL;
  if (a2 < 0)
  {
    return v8;
  }

unint64_t sub_1001A084C(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v4 = 0LL;
  if (a3)
  {
    unint64_t v5 = 0LL;
    while (1)
    {
      if (v5 < 0x40) {
        v4 |= 1LL << v5;
      }
      if (a3 - 1 == v5) {
        break;
      }
      if (a3 == ++v5)
      {
        __break(1u);
        break;
      }
    }
  }

  unint64_t v3 = a1;
  if ((~(_BYTE)v4 & a1) != 0)
  {
LABEL_14:
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8)  = 0LL;
    *(_BYTE *)(v9 + 16)  = 2;
    return swift_willThrow(v8);
  }

  if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0LL;
  }
  if ((a2 & 0x8000000000000000LL) != 0) {
    goto LABEL_24;
  }
  if (a2 >= 0x40) {
    return 0LL;
  }
  unint64_t result = (unint64_t)a1 << a2;
  if (((v3 << a2) & 0x8000000000000000LL) == 0)
  {
    if (!(result >> 16)) {
      return result;
    }
    __break(1u);
    goto LABEL_21;
  }

unint64_t sub_1001A0954(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v4 = 0LL;
  if (a3)
  {
    unint64_t v5 = 0LL;
    while (1)
    {
      if (v5 < 0x40) {
        v4 |= 1LL << v5;
      }
      if (a3 - 1 == v5) {
        break;
      }
      if (a3 == ++v5)
      {
        __break(1u);
        break;
      }
    }
  }

  unint64_t v3 = a1;
  if ((~(_BYTE)v4 & a1) != 0)
  {
LABEL_14:
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8)  = 0LL;
    *(_BYTE *)(v9 + 16)  = 2;
    return swift_willThrow(v8);
  }

  if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0LL;
  }
  if ((a2 & 0x8000000000000000LL) != 0) {
    goto LABEL_24;
  }
  if (a2 >= 0x40) {
    return 0LL;
  }
  unint64_t result = (unint64_t)a1 << a2;
  if (((v3 << a2) & 0x8000000000000000LL) == 0)
  {
    if (result <= 0xFF) {
      return result;
    }
    __break(1u);
    goto LABEL_21;
  }

unint64_t NANAttribute.Availability.Control.mapID.getter(__int16 a1)
{
  return sub_100071514(0LL, 4LL, a1) & 0xF;
}

void *NANAttribute.Availability.Control.potentialChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.potentialChange;
}

CoreP2P::NANAttribute::Availability::Control __swiftcall NANAttribute.Availability.Control.init(mapID:with:)( CoreP2P::NANMapID mapID, CoreP2P::NANAttribute::Availability::Control with)
{
  return (CoreP2P::NANAttribute::Availability::Control)(sub_1001A084C(mapID.rawValue, 0LL, 4LL) | with.rawValue & 0x3F0);
}

CoreP2P::NANAttribute::Availability __swiftcall NANAttribute.Availability.init(sequenceID:control:availabilityEntries:)( Swift::UInt8 sequenceID, CoreP2P::NANAttribute::Availability::Control control, Swift::OpaquePointer availabilityEntries)
{
  int v3 = sequenceID | (*(_DWORD *)&control << 16);
  result.availabilityEntries  = availabilityEntries;
  result.sequenceID  = v3;
  result.control  = *(CoreP2P::NANAttribute::Availability::Control *)((char *)&v3 + 2);
  return result;
}

void *NANAttribute.Availability.Control.committedChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.committedChange;
}

void sub_1001A0B48()
{
  __asm { BR              X10 }

BOOL static NANAttribute.Cluster.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C75E8(a1, a2 & 0xFFFFFFFF000000FFLL, a3, a4 & 0xFFFFFFFF000000FFLL);
}

uint64_t Array<A>.retrieve(attribute:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NANAttribute(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11)
  {
    uint64_t v19 = v8;
    uint64_t v20 = a3;
    int v12 = byte_10035B442[a1];
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t result = swift_bridgeObjectRetain(a2);
    for (i  = 0LL; ; ++i)
    {
      uint64_t v16 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      sub_100057FE8(v13 + *(void *)(v7 + 72) * i, (uint64_t)v10, type metadata accessor for NANAttribute);
      NANAttribute.attributeType.getter();
      if (byte_10035B442[v17] == v12)
      {
        swift_bridgeObjectRelease(a2);
        a3  = v20;
        sub_100022628((uint64_t)v10, v20, type metadata accessor for NANAttribute);
        uint64_t v18 = 0LL;
        uint64_t v8 = v19;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v18, 1LL, v8);
      }

      uint64_t result = sub_10005802C((uint64_t)v10, type metadata accessor for NANAttribute);
      if (v16 == v11)
      {
        swift_bridgeObjectRelease(a2);
        uint64_t v18 = 1LL;
        uint64_t v8 = v19;
        a3  = v20;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v18, 1LL, v8);
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v18 = 1LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v18, 1LL, v8);
  }

  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryFunction.getter( unsigned int a1)
{
  if ((a1 & 1) != 0) {
    return (a1 >> 1) & 1;
  }
  else {
    return 2LL;
  }
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.datapathType.getter(unsigned int a1)
{
  if ((a1 & 4) != 0) {
    return (a1 >> 3) & 1;
  }
  else {
    return 2LL;
  }
}

void *NANAttribute.ServiceDescriptorExtension.Control.securityRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.securityRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.gasForFurtherServiceDiscovery.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.gasForFurtherServiceDiscovery;
}

void *NANAttribute.ServiceDescriptorExtension.Control.datapathRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.datapathRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.serviceUpdateIndicator.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.serviceUpdateIndicator;
}

void *sub_1001A111C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    char v22 = _swiftEmptyArrayStorage;
    sub_100069698(0, v1, 0);
    uint64_t v4 = (__int16 *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      char v5 = *((_BYTE *)v4 + 2);
      uint64_t v6 = *((void *)v4 + 1);
      __int16 v17 = *v4;
      char v18 = v5;
      uint64_t v19 = v6;
      swift_bridgeObjectRetain_n(v6, 2LL);
      uint64_t v7 = sub_100002274(&qword_100406B58);
      uint64_t v8 = sub_100002274(&qword_100406450);
      swift_dynamicCast(v20, &v17, v7, v8, 7LL);
      char v9 = v20[0];
      char v10 = v20[1];
      char v11 = v20[2];
      uint64_t v12 = v21;
      swift_bridgeObjectRelease(v6);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100069698(0, v2[2] + 1LL, 1);
        uint64_t v2 = v22;
      }

      unint64_t v14 = v2[2];
      unint64_t v13 = v2[3];
      if (v14 >= v13 >> 1)
      {
        sub_100069698(v13 > 1, v14 + 1, 1);
        uint64_t v2 = v22;
      }

      v2[2]  = v14 + 1;
      uint64_t v15 = &v2[2 * v14];
      *((_BYTE *)v15 + 32)  = v9;
      *((_BYTE *)v15 + 33)  = v10;
      *((_BYTE *)v15 + 34)  = v11;
      v15[5]  = v12;
      v4 += 8;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_1001A1288(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_1000699B8(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000226B0(v4, (uint64_t)v13, &qword_100405110);
      uint64_t v5 = sub_100002274(&qword_100405110);
      uint64_t v6 = sub_100002274(&qword_100406398);
      swift_dynamicCast(v14, v13, v5, v6, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000699B8(0, v2[2] + 1LL, 1);
        uint64_t v2 = v15;
      }

      unint64_t v8 = v2[2];
      unint64_t v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000699B8(v7 > 1, v8 + 1, 1);
        uint64_t v2 = v15;
      }

      v2[2]  = v8 + 1;
      char v9 = &v2[6 * v8];
      __int128 v10 = v14[0];
      __int128 v11 = v14[2];
      void v9[3] = v14[1];
      v9[4]  = v11;
      v9[2]  = v10;
      v4 += 48LL;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_1001A13CC(unint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(_BYTE *)(a4 + a2 + 32);
  uint64_t v6 = (void *)*a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *uint64_t v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

uint64_t sub_1001A1464(unint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(_BYTE *)(a4 + a2 + 32);
  uint64_t v6 = (void *)*a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *uint64_t v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

uint64_t sub_1001A14FC()
{
  if (*v0) {
    return 0x61466D6F646E6172LL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1001A1544@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E173C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A1568(uint64_t a1)
{
  unint64_t v2 = sub_1001C76E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A1590(uint64_t a1)
{
  unint64_t v2 = sub_1001C76E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.MasterIndication.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_10040A720);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001C76E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.MasterIndication.CodingKeys,  &type metadata for NANAttribute.MasterIndication.CodingKeys,  v11,  v9,  v10);
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(BYTE1(a2), &v14, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NANAttribute.MasterIndication.init(from:)(void *a1)
{
  return sub_1001CBC64(a1);
}

uint64_t sub_1001A16E0@<X0>(_WORD *a1@<X8>)
{
  return sub_1001B3804((uint64_t (*)(void))sub_1001CBC64, a1);
}

uint64_t sub_1001A16FC(void *a1)
{
  return NANAttribute.MasterIndication.encode(to:)(a1, *v1);
}

void NANAttribute.Cluster.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  unint64_t v11 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
}

unint64_t sub_1001A17C4()
{
  unint64_t v1 = 0x746E756F43706F68LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000022LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1001A1824@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E1840(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A1848(uint64_t a1)
{
  unint64_t v2 = sub_1001CBDB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A1870(uint64_t a1)
{
  unint64_t v2 = sub_1001CBDB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Cluster.encode(to:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040A730);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001CBDB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Cluster.CodingKeys,  &type metadata for NANAttribute.Cluster.CodingKeys,  v13,  v11,  v12);
  uint64_t v20 = a2;
  char v19 = 0;
  unint64_t v14 = sub_1001CBDF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v7, &type metadata for NANMasterRank, v14);
  if (!v3)
  {
    char v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v18, v7);
    char v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a3), &v17, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.Cluster.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2 = a2;
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  *(void *)uint64_t v12 = HIDWORD(a2);
  Hasher.init(_seed:)(v13, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v12[0]);
  return Hasher._finalize()();
}

unint64_t NANAttribute.Cluster.init(from:)(void *a1)
{
  unint64_t result = sub_1001CDC94(a1);
  if (v1) {
    return v3 & 0xFFFFFFFF000000FFLL;
  }
  return result;
}

Swift::Int sub_1001A1B10()
{
  Swift::UInt32 v11 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v1 = *(_BYTE *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v12, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

void sub_1001A1C08()
{
  Swift::UInt32 v9 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 8);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
}

Swift::Int sub_1001A1CC8(uint64_t a1)
{
  Swift::UInt32 v12 = *(_DWORD *)(v1 + 12);
  Swift::UInt8 v2 = *(_BYTE *)v1;
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v13, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

uint64_t sub_1001A1DBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CDC94(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_BYTE *)(a2 + 8)  = v5;
    *(_DWORD *)(a2 + 12)  = v6;
  }

  return result;
}

uint64_t sub_1001A1E28(void *a1)
{
  return NANAttribute.Cluster.encode(to:)( a1,  *(void *)v1,  *(unsigned __int8 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 12) << 32));
}

BOOL sub_1001A1E4C(uint64_t a1, uint64_t a2)
{
  return sub_1001C75E8( *(void *)a1,  *(unsigned __int8 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32),  *(void *)a2,  *(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32));
}

void NANAttribute.ServiceIDList.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain(a2);
    char v5 = (unint64_t *)(a2 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      sub_100020AFC(v6, *v5);
      Data.hash(into:)(a1, v6, v7);
      sub_1000208D8(v6, v7);
      v5 += 2;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a2);
  }

uint64_t sub_1001A1F18()
{
  return 0x7365636976726573LL;
}

uint64_t sub_1001A1F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x7365636976726573LL && a2 == 0xE800000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE800000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7365636976726573LL, 0xE800000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3  = v8 & 1;
  return result;
}

uint64_t sub_1001A1FC4(uint64_t a1)
{
  unint64_t v2 = sub_1001CDE24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A1FEC(uint64_t a1)
{
  unint64_t v2 = sub_1001CDE24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ServiceIDList.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040A748);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_1001CDE24();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ServiceIDList.CodingKeys,  &type metadata for NANAttribute.ServiceIDList.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100002274(&qword_10040A758);
  uint64_t v12 = sub_100087780( &qword_10040A760,  &qword_10040A758,  (void (*)(void))sub_1001CDE68,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.ServiceIDList.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    Swift::UInt8 v3 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      sub_100020AFC(v4, *v3);
      Data.hash(into:)(v7, v4, v5);
      sub_1000208D8(v4, v5);
      v3 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(a1);
  }

  return Hasher._finalize()();
}

void *NANAttribute.ServiceIDList.init(from:)(void *a1)
{
  return sub_1001CB33C(a1);
}

Swift::Int sub_1001A21F4()
{
  return NANAttribute.ServiceIDList.hashValue.getter(*v0);
}

void sub_1001A21FC(uint64_t a1)
{
}

Swift::Int sub_1001A2204(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = (unint64_t *)(v2 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_100020AFC(v5, *v4);
      Data.hash(into:)(v8, v5, v6);
      sub_1000208D8(v5, v6);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v2);
  }

  return Hasher._finalize()();
}

void *sub_1001A22A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001CB33C(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001A22D0(void *a1)
{
  return NANAttribute.ServiceIDList.encode(to:)(a1, *v1);
}

uint64_t sub_1001A22E8(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t NANAttribute.ServiceDescriptor.Control.type.getter(uint64_t a1)
{
  return sub_1001ADA80(a1, (uint64_t (*)(void, uint64_t, uint64_t))sub_100071528);
}

void *NANAttribute.ServiceDescriptor.Control.matchingFilter.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.matchingFilter;
}

void *NANAttribute.ServiceDescriptor.Control.serviceResponseFilter.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.serviceResponseFilter;
}

void *NANAttribute.ServiceDescriptor.Control.serviceInfo.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.serviceInfo;
}

void *NANAttribute.ServiceDescriptor.Control.discoveryRangeLimited.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.discoveryRangeLimited;
}

void *NANAttribute.ServiceDescriptor.Control.bindingBitmap.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.bindingBitmap;
}

void *NANAttribute.ServiceDescriptor.Control.reserved.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.reserved;
}

uint64_t sub_1001A234C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D34D8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A23A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D34D8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.type.getter(uint64_t a1)
{
  return sub_1001B3000(a1, (unsigned __int8 (*)(void, uint64_t, uint64_t))sub_100071528);
}

BOOL NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.include.getter@<W0>( char a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10007153C(1LL, 1LL, a1, a2) != 0;
}

uint64_t NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.bloomFilterIndex.getter(char a1)
{
  unint64_t v1 = sub_100071528(2uLL, 2LL, a1);
  uint64_t result = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v1);
  if (result == 4)
  {
    unint64_t v3 = sub_1000033FC();
    uint64_t v4 = swift_allocError(&type metadata for WiFiError, v3, 0LL, 0LL);
    *(_OWORD *)uint64_t v5 = xmmword_100337020;
    *(_BYTE *)(v5 + 16)  = 2;
    uint64_t v6 = v4;
    swift_willThrow(v4);
    uint64_t result = swift_unexpectedError(v6, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
    __break(1u);
  }

  return result;
}

CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl __swiftcall NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.init(type:include:bloomFilterIndex:)( CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl::FilterType type, Swift::Bool include, CoreP2P::NANBloomFilter::Index bloomFilterIndex)
{
  char v5 = sub_1001A0954(type & 1, 0LL, 1LL);
  unsigned __int8 v6 = sub_1001A06FC(include, 1LL, 1LL);
  unsigned __int8 v7 = sub_1001A0954(bloomFilterIndex, 2uLL, 2LL);
  else {
    unsigned __int8 v8 = 0;
  }
  char v9 = v8 | v5;
  else {
    unsigned __int8 v10 = 0;
  }
  return (CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl)(v10 | v9);
}

uint64_t sub_1001A25F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3640();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A2654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3640();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.ServiceDescriptor.ServiceFilterControl.include.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

void NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::UInt v5 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    unint64_t v6 = (Swift::UInt8 *)(a2 + 37);
    do
    {
      Swift::UInt8 v7 = *(v6 - 5);
      Swift::UInt8 v8 = *(v6 - 4);
      Swift::UInt8 v9 = *(v6 - 3);
      Swift::UInt8 v10 = *(v6 - 2);
      Swift::UInt8 v11 = *(v6 - 1);
      Swift::UInt8 v12 = *v6;
      v6 += 6;
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      --v5;
    }

    while (v5);
  }

  Hasher._combine(_:)(a3 & 1);
}

uint64_t static NANAttribute.ServiceDescriptor.ServiceFilterControl.__derived_struct_equals(_:_:)( uint64_t a1, int a2, uint64_t a3, int a4)
{
  return _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a3) & ~(a2 ^ a4) & 1;
}

uint64_t sub_1001A2788()
{
  if (*v0) {
    return 0x6564756C636E69LL;
  }
  else {
    return 0x6573736572646461LL;
  }
}

uint64_t sub_1001A27C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E198C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A27EC(uint64_t a1)
{
  unint64_t v2 = sub_1001E4E58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A2814(uint64_t a1)
{
  unint64_t v2 = sub_1001E4E58();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int NANAttribute.ServiceDescriptor.ServiceFilterControl.hashValue.getter(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

uint64_t NANAttribute.ServiceDescriptor.ServiceFilterControl.init(from:)(void *a1)
{
  return sub_1001CBE3C(a1);
}

Swift::Int sub_1001A28A0()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1001A28EC(uint64_t a1)
{
}

Swift::Int sub_1001A28F8(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  char v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001A2940@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CBE3C(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_BYTE *)(a2 + 8)  = v5 & 1;
  }

  return result;
}

uint64_t sub_1001A2970(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)a2) & ~(v2 ^ v3) & 1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceID.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100020AFC(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.bindingBitmap.getter()
{
  return *(unsigned __int16 *)(v0 + 20) | (*(unsigned __int8 *)(v0 + 22) << 16);
}

uint64_t NANAttribute.ServiceDescriptor.bindingBitmap.setter(uint64_t result)
{
  *(_WORD *)(v1 + 20)  = result;
  *(_BYTE *)(v1 + 22)  = BYTE2(result) & 1;
  char v2 = *(_BYTE *)(v1 + 18);
  if ((result & 0x10000) != 0)
  {
    if ((*(_BYTE *)(v1 + 18) & 0x40) == 0) {
      return result;
    }
    char v3 = v2 & 0xBF;
  }

  else
  {
    if ((*(_BYTE *)(v1 + 18) & 0x40) != 0) {
      return result;
    }
    char v3 = v2 | 0x40;
  }

  *(_BYTE *)(v1 + 18)  = v3;
  return result;
}

uint64_t *(*NANAttribute.ServiceDescriptor.bindingBitmap.modify( void *a1))(uint64_t *result, char a2)
{
  *a1  = v1;
  return sub_1001A2A3C;
}

uint64_t *sub_1001A2A3C(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *result;
    char v3 = *(_BYTE *)(*result + 18);
    if ((*(_BYTE *)(*result + 22) & 1) != 0)
    {
      if ((*(_BYTE *)(*result + 18) & 0x40) != 0) {
        *(_BYTE *)(v2 + 18)  = v3 & 0xBF;
      }
    }

    else if ((*(_BYTE *)(*result + 18) & 0x40) == 0)
    {
      *(_BYTE *)(v2 + 18)  = v3 | 0x40;
    }
  }

  return result;
}

uint64_t NANAttribute.ServiceDescriptor.matchingFilters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24)  = a1;
  char v4 = *(_BYTE *)(v1 + 18);
  if (a1)
  {
    if ((*(_BYTE *)(v1 + 18) & 4) != 0) {
      return result;
    }
    char v5 = v4 | 4;
  }

  else
  {
    if ((*(_BYTE *)(v1 + 18) & 4) == 0) {
      return result;
    }
    char v5 = v4 & 0xFB;
  }

  *(_BYTE *)(v1 + 18)  = v5;
  return result;
}

uint64_t *(*NANAttribute.ServiceDescriptor.matchingFilters.modify( void *a1))(uint64_t *result, char a2)
{
  *a1  = v1;
  return sub_1001A2ACC;
}

uint64_t *sub_1001A2ACC(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *result;
    char v3 = *(_BYTE *)(*result + 18);
    if (*(void *)(*result + 24))
    {
      if ((*(_BYTE *)(*result + 18) & 4) == 0) {
        *(_BYTE *)(v2 + 18)  = v3 | 4;
      }
    }

    else if ((*(_BYTE *)(*result + 18) & 4) != 0)
    {
      *(_BYTE *)(v2 + 18)  = v3 & 0xFB;
    }
  }

  return result;
}

uint64_t NANAttribute.ServiceDescriptor.serviceFilterControl.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1001CDEAC(v1, *(void *)(v0 + 40), *(unsigned __int16 *)(v0 + 48) | (*(unsigned __int8 *)(v0 + 50) << 16));
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceFilterControl.setter(uint64_t a1, uint64_t a2, int a3)
{
  int v8 = *(unsigned __int16 *)(v3 + 48);
  uint64_t v7 = v3 + 48;
  uint64_t result = sub_1001062BC(*(void *)(v7 - 16), *(void *)(v7 - 8), v8 | (*(unsigned __int8 *)(v7 + 2) << 16));
  *(void *)(v7 - 16)  = a1;
  *(void *)(v7 - 8)  = a2;
  *(_BYTE *)(v7 + 2)  = BYTE2(a3);
  *(_WORD *)uint64_t v7 = a3;
  return result;
}

uint64_t NANAttribute.ServiceDescriptor.serviceInfo.getter()
{
  uint64_t v1 = v0[7];
  sub_1001062A0(v1, v0[8], v0[9]);
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001062E0(*(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72));
  *(void *)(v3 + 56)  = a1;
  *(void *)(v3 + 64)  = a2;
  *(void *)(v3 + 72)  = a3;
  return result;
}

void NANAttribute.ServiceDescriptor.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  __int128 v18 = *v2;
  __int128 v4 = v18;
  sub_10017B1D8((uint64_t)&v18);
  Data.hash(into:)(a1, v4, *((void *)&v4 + 1));
  sub_10017B204((uint64_t)&v18);
  Hasher._combine(_:)(*((_BYTE *)v2 + 16));
  Hasher._combine(_:)(*((_BYTE *)v2 + 17));
  Hasher._combine(_:)(*((_BYTE *)v2 + 18));
  if (*((_BYTE *)v2 + 22) == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v5 = *((void *)v2 + 3);
    if (v5) {
      goto LABEL_3;
    }
LABEL_8:
    Hasher._combine(_:)(0);
    goto LABEL_9;
  }

  Swift::UInt16 v10 = *((_WORD *)v2 + 10);
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v10);
  uint64_t v5 = *((void *)v2 + 3);
  if (!v5) {
    goto LABEL_8;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Swift::UInt v6 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    swift_bridgeObjectRetain(v5);
    uint64_t v7 = (unint64_t *)(v5 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      unint64_t v9 = *v7;
      sub_100020AFC(v8, *v7);
      Data.hash(into:)(a1, v8, v9);
      sub_1000208D8(v8, v9);
      v7 += 2;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v5);
  }

Swift::Int NANAttribute.ServiceDescriptor.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001A2E34(uint64_t a1)
{
  return Hasher._finalize()();
}

__n128 NANAttribute.ServiceDescriptor.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32)  = v6[2];
    *(_OWORD *)(a2 + 48)  = v5;
    *(_OWORD *)(a2 + 64)  = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2  = v6[0];
    *(__n128 *)(a2 + 16)  = result;
  }

  return result;
}

uint64_t sub_1001A2EB4(void *a1)
{
  return NANAttribute.ServiceDescriptor.encode(to:)(a1);
}

uint64_t NANAttribute.ServiceDescriptor.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v77, v4, v5);
  __int128 v74 = *v1;
  uint64_t v6 = v78;
  uint64_t v7 = v79;
  sub_1000237C8((uint64_t)v77, v78);
  unint64_t v8 = sub_1001CDE68();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, &type metadata for NANServiceName.Hash, v8, v6, v7);
  if (!v2)
  {
    uint64_t v9 = v78;
    uint64_t v10 = v79;
    uint64_t v11 = *((unsigned __int8 *)v1 + 16);
    sub_1000237C8((uint64_t)v77, v78);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v11, v9, v10);
    uint64_t v12 = v78;
    uint64_t v13 = v79;
    uint64_t v14 = *((unsigned __int8 *)v3 + 17);
    sub_1000237C8((uint64_t)v77, v78);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v14, v12, v13);
    char v15 = *((_BYTE *)v3 + 18);
    LOBYTE(v74)  = v15;
    uint64_t v16 = v78;
    uint64_t v17 = v79;
    sub_1000237C8((uint64_t)v77, v78);
    unint64_t v18 = sub_1001D093C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v74,  &type metadata for NANAttribute.ServiceDescriptor.Control,  v18,  v16,  v17);
    sub_1000586C0((uint64_t)v3 + 20, (uint64_t)v81, &qword_100406918);
    sub_1000586C0((uint64_t)v81, (uint64_t)&v82, &qword_100406918);
    if ((v83 & 1) == 0 && (v15 & 0x40) != 0)
    {
      uint64_t v20 = v78;
      uint64_t v21 = v79;
      uint64_t v22 = v82;
      sub_1000237C8((uint64_t)v77, v78);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v22, v20, v21);
    }

    sub_1000586C0((uint64_t)v3 + 24, (uint64_t)v80, &qword_10040A778);
    sub_1000586C0((uint64_t)v80, (uint64_t)&v84, &qword_10040A778);
    uint64_t v23 = v84;
    if (v84 && (v15 & 4) != 0)
    {
      char v68 = v15;
      int64_t v24 = *(void *)(v84 + 16);
      if (v24)
      {
        *(void *)&__int128 v74 = _swiftEmptyArrayStorage;
        sub_100069880(0, v24, 0);
        __asm { BR              X9 }
      }

      unint64_t v25 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v26 = type metadata accessor for BinaryEncoder();
      uint64_t v27 = swift_allocObject(v26, 40LL, 7LL);
      *(_OWORD *)(v27 + 16)  = xmmword_1003398F0;
      *(void *)(v27 + 32)  = v25;
      v75  = v26;
      uint64_t v76 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
      *(void *)&__int128 v74 = v27;
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      swift_retain();
      uint64_t v28 = sub_100002274(&qword_1004063B0);
      uint64_t v29 = sub_1000572E4( &qword_1004064F0,  &qword_1004063B0,  (uint64_t)&protocol conformance descriptor for LengthValue<A>);
      Array<A>.encode(to:)(&v74, _swiftEmptyArrayStorage, v28, v29);
      sub_100002AC4(&v74);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      swift_beginAccess(v27 + 16, v72, 0LL, 0LL);
      uint64_t v30 = *(void *)(v27 + 16);
      unint64_t v31 = *(void *)(v27 + 24);
      sub_100020AFC(v30, v31);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      swift_release(v27);
      sub_100072350(v30, v31);
      uint64_t v33 = v32;
      unint64_t v35 = v34;
      *(void *)&__int128 v74 = v32;
      *((void *)&v74 + 1)  = v34;
      uint64_t v36 = v78;
      uint64_t v37 = v79;
      sub_1000237C8((uint64_t)v77, v78);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, v28, v29, v36, v37);
      sub_1000208D8(v33, v35);
      char v15 = v68;
    }

    if (*((unsigned __int8 *)v3 + 50) != 255 && (v15 & 8) != 0)
    {
      uint64_t v45 = *((void *)v3 + 4);
      unint64_t v44 = *((void *)v3 + 5);
      uint64_t v46 = *((unsigned __int16 *)v3 + 24) | (*((unsigned __int8 *)v3 + 50) << 16);
      char v69 = v15;
      if (((*((unsigned __int8 *)v3 + 50) << 16) & 0x10000) != 0) {
        __asm { BR              X10 }
      }

      uint64_t v47 = *(void *)(v45 + 16);
      uint64_t v48 = (unsigned __int128)(v47 * (__int128)6LL) >> 64;
      uint64_t v49 = 6 * v47;
      if (v48 != v49 >> 63)
      {
        __break(1u);
        JUMPOUT(0x1001A39BCLL);
      }

      uint64_t v50 = v49 | 1;
      if ((v49 | 1uLL) >= 0x100)
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
        __break(1u);
        swift_unexpectedError(0LL, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
        __break(1u);
        JUMPOUT(0x1001A3A9CLL);
      }

      uint64_t v51 = v78;
      uint64_t v52 = v79;
      sub_1000237C8((uint64_t)v77, v78);
      sub_1001CDEC4(v45, v44, v46, 0);
      sub_1001CDEC4(v45, v44, v46, 0);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v50, v51, v52);
      LOBYTE(v74)  = sub_1001A06FC(v44 & 1, 1LL, 1LL);
      uint64_t v53 = v78;
      uint64_t v54 = v79;
      sub_1000237C8((uint64_t)v77, v78);
      unint64_t v55 = sub_1001D0980();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v74,  &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl,  v55,  v53,  v54);
      *(void *)&__int128 v74 = v45;
      uint64_t v56 = v78;
      uint64_t v70 = v79;
      sub_1000237C8((uint64_t)v77, v78);
      uint64_t v57 = sub_100002274(&qword_100407490);
      uint64_t v58 = sub_100087780( &qword_100407498,  &qword_100407490,  (void (*)(void))sub_1000286C4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, v57, v58, v56, v70);
      sub_1001062BC(v45, v44, v46);
      sub_1001062BC(v45, v44, v46);
      char v15 = v69;
    }

    uint64_t v38 = *((void *)v3 + 7);
    if (v38 != 4LL && (v15 & 0x10) != 0)
    {
      uint64_t v40 = *((void *)v3 + 8);
      unint64_t v39 = *((void *)v3 + 9);
      sub_100020AFC(v40, v39);
      unint64_t v41 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v42 = type metadata accessor for BinaryEncoder();
      uint64_t v43 = swift_allocObject(v42, 40LL, 7LL);
      *(_OWORD *)(v43 + 16)  = xmmword_1003398F0;
      *(void *)(v43 + 32)  = v41;
      v75  = v42;
      uint64_t v76 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
      *(void *)&__int128 v74 = v43;
      sub_1001062A0(v38, v40, v39);
      swift_retain();
      NANServiceInfo.encode(to:)((uint64_t)&v74, v38, v40, v39);
      sub_100002AC4(&v74);
      sub_1001062E0(v38, v40, v39);
      swift_beginAccess(v43 + 16, &v74, 0LL, 0LL);
      uint64_t v59 = *(void *)(v43 + 16);
      unint64_t v60 = *(void *)(v43 + 24);
      sub_100020AFC(v59, v60);
      swift_release(v43);
      sub_100072350(v59, v60);
      uint64_t v62 = v61;
      unint64_t v64 = v63;
      v73[0]  = v61;
      v73[1]  = v63;
      v65  = v78;
      v71  = v79;
      sub_1000237C8((uint64_t)v77, v78);
      uint64_t v66 = sub_100002274(&qword_1004063B0);
      uint64_t v67 = sub_1000572E4( &qword_1004064F0,  &qword_1004063B0,  (uint64_t)&protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v73, v66, v67, v65, v71);
      sub_1000208D8(v62, v64);
      sub_1001062E0(v38, v40, v39);
    }
  }

  return sub_100002AC4(v77);
}

BOOL sub_1001A3ADC(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2]  = a1[2];
  v8[3]  = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0]  = *a1;
  v8[1]  = v4;
  __int128 v5 = a2[3];
  v9[2]  = a2[2];
  void v9[3] = v5;
  v9[4]  = a2[4];
  __int128 v6 = *a2;
  v9[1]  = a2[1];
  v8[4]  = v3;
  v9[0]  = v6;
  return _s7CoreP2P12NANAttributeO17ServiceDescriptorV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v9);
}

void *NANAttribute.ServiceDescriptorExtension.Control.datapathTypeIsMulticast.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.datapathTypeIsMulticast;
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.multicastType.getter(unsigned int a1)
{
  if ((~a1 & 0xC) != 0) {
    return 2LL;
  }
  else {
    return (a1 >> 4) & 1;
  }
}

void *NANAttribute.ServiceDescriptorExtension.Control.multicastType.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.multicastType;
}

void *NANAttribute.ServiceDescriptorExtension.Control.qosRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.qosRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.rangingRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.rangingRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.rangeLimit.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.rangeLimit;
}

uint64_t sub_1001A3B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D37F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A3BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D37F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1001A3C30()
{
  if (*v0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0xD000000000000011LL;
  }
}

uint64_t sub_1001A3C70@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E1A88(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A3C94(uint64_t a1)
{
  unint64_t v2 = sub_1001D09C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A3CBC(uint64_t a1)
{
  unint64_t v2 = sub_1001D09C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ServiceDescriptorExtension.RangeLimit.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_10040A788);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D09C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys,  v11,  v9,  v10);
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2), &v14, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NANAttribute.ServiceDescriptorExtension.RangeLimit.init(from:)(void *a1)
{
  return sub_1001CD3F4(a1);
}

uint64_t sub_1001A3E0C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1001CD3F4(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001A3E34(void *a1)
{
  return NANAttribute.ServiceDescriptorExtension.RangeLimit.encode(to:)(a1, *v1);
}

unint64_t NANAttribute.ServiceDescriptorExtension.rangeLimit.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t NANAttribute.ServiceDescriptorExtension.rangeLimit.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4)  = result;
  *(_BYTE *)(v1 + 8)  = BYTE4(result) & 1;
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceUpdateIndicator.getter()
{
  return *(unsigned __int8 *)(v0 + 9) | (*(unsigned __int8 *)(v0 + 10) << 8);
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceUpdateIndicator.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 9)  = result;
  *(_BYTE *)(v1 + 10)  = BYTE1(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.datapathID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001062E0(*(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
  *(void *)(v3 + 16)  = a1;
  *(void *)(v3 + 24)  = a2;
  *(void *)(v3 + 32)  = a3;
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_WORD *)(v2 + 2));
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(_BYTE *)(v2 + 10) & 1) == 0)
    {
LABEL_3:
      Swift::UInt8 v4 = *(_BYTE *)(v2 + 9);
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }

  else
  {
    int v5 = *(_DWORD *)(v2 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(HIWORD(v5));
    if ((*(_BYTE *)(v2 + 10) & 1) == 0) {
      goto LABEL_3;
    }
  }

  Swift::UInt8 v4 = 0;
LABEL_6:
  Hasher._combine(_:)(v4);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 16);
  if (v6 == 4)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t v7 = *(void *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_1001D0A08(v2);
    Data.hash(into:)(a1, v8, v7);
  }

  return sub_1001D0A34(v2);
}

Swift::Int NANAttribute.ServiceDescriptorExtension.hashValue.getter()
{
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(_BYTE *)(v0 + 10) & 1) == 0)
    {
LABEL_3:
      Swift::UInt8 v1 = *(_BYTE *)(v0 + 9);
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }

  else
  {
    int v2 = *(_DWORD *)(v0 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(HIWORD(v2));
    if ((*(_BYTE *)(v0 + 10) & 1) == 0) {
      goto LABEL_3;
    }
  }

  Swift::UInt8 v1 = 0;
LABEL_6:
  Hasher._combine(_:)(v1);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 4)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_1001D0A08(v0);
    Data.hash(into:)(v7, v5, v4);
  }

  sub_1001D0A34(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001A4110()
{
  return NANAttribute.ServiceDescriptorExtension.hashValue.getter();
}

uint64_t sub_1001A4148(uint64_t a1)
{
  return NANAttribute.ServiceDescriptorExtension.hash(into:)(a1);
}

Swift::Int sub_1001A4180(uint64_t a1)
{
  int v2 = *(_DWORD *)(v1 + 4);
  int v3 = *(unsigned __int8 *)(v1 + 8);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 9);
  char v5 = *(_BYTE *)(v1 + 10);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  unint64_t v8 = *(void *)(v1 + 32);
  Swift::UInt8 v9 = *(_BYTE *)v1;
  Swift::UInt16 v10 = *(_WORD *)(v1 + 2);
  Hasher.init(_seed:)(v12, a1);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(HIWORD(v2));
    if ((v5 & 1) == 0) {
      goto LABEL_3;
    }
  }

  Swift::UInt8 v4 = 0;
LABEL_6:
  Hasher._combine(_:)(v4);
  if (v6 == 4LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_1001062A0(v6, v7, v8);
    Data.hash(into:)(v12, v7, v8);
  }

  sub_1001062E0(v6, v7, v8);
  return Hasher._finalize()();
}

double NANAttribute.ServiceDescriptorExtension.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)&v5;
    *(_OWORD *)a2  = v5;
    *(_OWORD *)(a2 + 16)  = v6;
    *(void *)(a2 + 32)  = v7;
  }

  return result;
}

uint64_t sub_1001A4310(void *a1)
{
  return NANAttribute.ServiceDescriptorExtension.encode(to:)(a1);
}

uint64_t NANAttribute.ServiceDescriptorExtension.encode(to:)(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v38, v4, v5);
  uint64_t v6 = v39;
  uint64_t v7 = v40;
  uint64_t v8 = *v1;
  sub_1000237C8((uint64_t)v38, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    __int16 v9 = *(_WORD *)(v3 + 2);
    LOWORD(v37[0])  = v9;
    uint64_t v10 = v39;
    uint64_t v11 = v40;
    sub_1000237C8((uint64_t)v38, v39);
    unint64_t v12 = sub_1001D0A60();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v37,  &type metadata for NANAttribute.ServiceDescriptorExtension.Control,  v12,  v10,  v11);
    sub_1000586C0(v3 + 4, (uint64_t)v43, &qword_10040A7A0);
    sub_1000586C0((uint64_t)v43, (uint64_t)&v47, &qword_10040A7A0);
    if ((v48 & 1) == 0 && (v9 & 0x100) != 0)
    {
      LODWORD(v37[0])  = v47;
      uint64_t v14 = v39;
      uint64_t v15 = v40;
      sub_1000237C8((uint64_t)v38, v39);
      unint64_t v16 = sub_1001D0AA4();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v37,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit,  v16,  v14,  v15);
    }

    sub_1000586C0(v3 + 9, (uint64_t)v42, &qword_10040A7A8);
    sub_1000586C0((uint64_t)v42, (uint64_t)v49, &qword_10040A7A8);
    if ((v49[1] & 1) == 0 && (v9 & 0x200) != 0)
    {
      uint64_t v17 = v39;
      uint64_t v18 = v40;
      uint64_t v19 = v49[0];
      sub_1000237C8((uint64_t)v38, v39);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v19, v17, v18);
    }

    sub_1000586C0(v3 + 16, (uint64_t)v41, (uint64_t *)&unk_10040DCD0);
    sub_1000586C0((uint64_t)v41, (uint64_t)v44, (uint64_t *)&unk_10040DCD0);
    uint64_t v20 = v44[0];
    if (v44[0] != 4LL)
    {
      uint64_t v21 = v45;
      uint64_t v22 = v46;
      sub_1001D0A08(v3);
      unint64_t v23 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v24 = type metadata accessor for BinaryEncoder();
      uint64_t v25 = swift_allocObject(v24, 40LL, 7LL);
      *(_OWORD *)(v25 + 16)  = xmmword_1003398F0;
      *(void *)(v25 + 32)  = v23;
      v37[3]  = v24;
      v37[4]  = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
      v37[0]  = v25;
      sub_1001D0A08(v3);
      swift_retain();
      NANServiceInfo.encode(to:)((uint64_t)v37, v20, v21, v22);
      sub_100002AC4(v37);
      sub_1001D0A34(v3);
      swift_beginAccess(v25 + 16, v37, 0LL, 0LL);
      uint64_t v26 = *(void *)(v25 + 16);
      unint64_t v27 = *(void *)(v25 + 24);
      sub_100020AFC(v26, v27);
      swift_release(v25);
      sub_10007242C(v26, v27);
      uint64_t v29 = v28;
      unint64_t v31 = v30;
      v36[0]  = v28;
      v36[1]  = v30;
      uint64_t v32 = v39;
      uint64_t v33 = v40;
      sub_1000237C8((uint64_t)v38, v39);
      uint64_t v34 = sub_100002274(&qword_1004068A0);
      uint64_t v35 = sub_1000572E4( &qword_10040A7B0,  &qword_1004068A0,  (uint64_t)&protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v36, v34, v35, v32, v33);
      sub_1000208D8(v29, v31);
      sub_1001D0A34(v3);
    }
  }

  return sub_100002AC4(v38);
}

uint64_t sub_1001A46E0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P12NANAttributeO26ServiceDescriptorExtensionV23__derived_struct_equalsySbAE_AEtFZ_0( (unsigned __int8 *)v5,  (unsigned __int8 *)v7) & 1;
}

void *NANAttribute.ConnectionCapability.wifiDirect.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.wifiDirect;
}

void *NANAttribute.ConnectionCapability.p2ps.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.p2ps;
}

void *NANAttribute.ConnectionCapability.tdls.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.tdls;
}

void *NANAttribute.ConnectionCapability.wlanInfrastructure.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.wlanInfrastructure;
}

void *NANAttribute.ConnectionCapability.ibss.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.ibss;
}

void *NANAttribute.ConnectionCapability.mesh.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.mesh;
}

uint64_t sub_1001A4770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D39A0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A47CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D39A0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001A4818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E43D8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A4874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E43D8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.IBSS.availability.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 18);
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int16 *)(v0 + 16);
  sub_100020AFC(v2, v3);
  if (v1) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  return v4 | v5;
}

uint64_t NANAttribute.IBSS.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7 = a1 >> 8;
  uint64_t result = sub_1000208D8(*(void *)(v3 + 24), *(void *)(v3 + 32));
  *(_BYTE *)(v3 + 16)  = a1;
  *(_BYTE *)(v3 + 17)  = v7;
  *(_BYTE *)(v3 + 18)  = BYTE2(a1) & 1;
  *(void *)(v3 + 24)  = a2;
  *(void *)(v3 + 32)  = a3;
  return result;
}

uint64_t NANAttribute.WLANInfrastructure.role.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 40)  = result & 1;
  return result;
}

void NANAttribute.WLANInfrastructure.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt8 v4 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Swift::UInt8 v9 = *(_BYTE *)(v2 + 7);
  Swift::UInt8 v10 = *(_BYTE *)(v2 + 8);
  Swift::UInt8 v11 = *(_BYTE *)(v2 + 9);
  Swift::UInt8 v12 = *(_BYTE *)(v2 + 10);
  Swift::UInt8 v13 = *(_BYTE *)(v2 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 6));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  char v14 = *(_BYTE *)(v2 + 18);
  uint64_t v15 = *(void *)(v2 + 24);
  uint64_t v16 = *(void *)(v2 + 32);
  Swift::UInt8 v17 = *(_BYTE *)(v2 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 16));
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v14 & 1);
  sub_1001D0AE8(v2);
  Data.hash(into:)(a1, v15, v16);
  sub_1001D0B14(v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 40));
}

uint64_t sub_1001A4A80()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001A4AB4 + 4 * byte_100351A7C[*v0]))( 0xD000000000000010LL,  0x8000000100367260LL);
}

uint64_t sub_1001A4AB4(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1001A4ACC()
{
  return 0x6962616C69617661LL;
}

uint64_t sub_1001A4AEC()
{
  return 1701605234LL;
}

uint64_t sub_1001A4AFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E1B70(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A4B20(uint64_t a1)
{
  unint64_t v2 = sub_1001D0B40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A4B48(uint64_t a1)
{
  unint64_t v2 = sub_1001D0B40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.WLANInfrastructure.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002274(&qword_10040A7C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt8 v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D0B40();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.WLANInfrastructure.CodingKeys,  &type metadata for NANAttribute.WLANInfrastructure.CodingKeys,  v11,  v9,  v10);
  LODWORD(v16)  = *(_DWORD *)v3;
  WORD2(v16)  = *(_WORD *)(v3 + 4);
  char v18 = 0;
  unint64_t v12 = sub_1000286C4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for WiFiAddress, v12);
  if (!v2)
  {
    LODWORD(v16)  = *(_DWORD *)(v3 + 6);
    WORD2(v16)  = *(_WORD *)(v3 + 10);
    char v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for WiFiAddress, v12);
    __int128 v16 = *(_OWORD *)(v3 + 16);
    uint64_t v17 = *(void *)(v3 + 32);
    char v18 = 2;
    unint64_t v13 = sub_1001D0B84();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for DeprecatedNANAvailability, v13);
    LOBYTE(v16)  = *(_BYTE *)(v3 + 40);
    char v18 = 3;
    unint64_t v14 = sub_1001D0BC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v16,  &v18,  v5,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole,  v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.WLANInfrastructure.hashValue.getter()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 5);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 6));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  char v11 = *(_BYTE *)(v0 + 18);
  uint64_t v12 = *(void *)(v0 + 24);
  uint64_t v13 = *(void *)(v0 + 32);
  Swift::UInt8 v14 = *(_BYTE *)(v0 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 16));
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v11 & 1);
  sub_1001D0AE8(v0);
  Data.hash(into:)(v16, v12, v13);
  sub_1001D0B14(v0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 40));
  return Hasher._finalize()();
}

double NANAttribute.WLANInfrastructure.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25)  = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

Swift::Int sub_1001A4EF0()
{
  return NANAttribute.WLANInfrastructure.hashValue.getter();
}

void sub_1001A4F28(uint64_t a1)
{
}

Swift::Int sub_1001A4F60(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  unint64_t v3 = *(void *)(v1 + 32);
  Swift::UInt8 v19 = *(_BYTE *)(v1 + 18);
  Swift::UInt8 v20 = *(_BYTE *)(v1 + 40);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v14 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v15 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v16 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v17 = *(_BYTE *)(v1 + 16);
  Swift::UInt8 v18 = *(_BYTE *)(v1 + 17);
  Hasher.init(_seed:)(v21, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v21, v2, v3);
  sub_1000208D8(v2, v3);
  Hasher._combine(_:)(v20);
  return Hasher._finalize()();
}

uint64_t sub_1001A50F0(void *a1)
{
  return NANAttribute.WLANInfrastructure.encode(to:)(a1);
}

uint64_t sub_1001A5104(__int128 *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  __int128 v5 = *a1;
  v6[0]  = v2;
  *(_OWORD *)((char *)v6 + 9)  = *(__int128 *)((char *)a1 + 25);
  __int128 v3 = a2[1];
  __int128 v7 = *a2;
  v8[0]  = v3;
  *(_OWORD *)((char *)v8 + 9)  = *(__int128 *)((char *)a2 + 25);
  return _s7CoreP2P12NANAttributeO18WLANInfrastructureV23__derived_struct_equalsySbAE_AEtFZ_0( (uint64_t)&v5,  (uint64_t)&v7) & 1;
}

void *NANAttribute.P2POperation.DeviceRole.device.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.device;
}

void *NANAttribute.P2POperation.DeviceRole.groupOwner.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.groupOwner;
}

void *NANAttribute.P2POperation.DeviceRole.client.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.client;
}

uint64_t sub_1001A5170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3B50();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A51CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3B50();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.P2POperation.availability.getter(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  return a2 & 0x1FFFF;
}

uint64_t NANAttribute.Mesh.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7 = a1 >> 8;
  uint64_t result = sub_1000208D8(*(void *)(v3 + 16), *(void *)(v3 + 24));
  *(_BYTE *)(v3 + 8)  = a1;
  *(_BYTE *)(v3 + 9)  = v7;
  *(_BYTE *)(v3 + 10)  = BYTE2(a1) & 1;
  *(void *)(v3 + 16)  = a2;
  *(void *)(v3 + 24)  = a3;
  return result;
}

uint64_t NANAttribute.P2POperation.hash(into:)( uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  *(_DWORD *)Swift::UInt8 v16 = a3 >> 8;
  unint64_t v9 = a2 >> 8;
  unint64_t v10 = a2 >> 16;
  unint64_t v11 = a2 >> 24;
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = a2 >> 40;
  unint64_t v14 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(BYTE2(a3) & 1);
  sub_100020AFC(a4, a5);
  Data.hash(into:)(a1, a4, a5);
  return sub_1000208D8(a4, a5);
}

uint64_t static NANAttribute.P2POperation.__derived_struct_equals(_:_:)( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1001C6EF4(a1 & 0xFFFFFFFFFFFFFFLL, a2 & 0x1FFFF, a3, a4, a5 & 0xFFFFFFFFFFFFFFLL, a6 & 0x1FFFF);
}

uint64_t sub_1001A53A8()
{
  uint64_t v1 = 0x657264644163616DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6962616C69617661LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701605234LL;
  }
}

uint64_t sub_1001A5408@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E1D28(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A542C(uint64_t a1)
{
  unint64_t v2 = sub_1001D0C0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A5454(uint64_t a1)
{
  unint64_t v2 = sub_1001D0C0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.P2POperation.encode(to:)(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v9 = sub_100002274(&qword_10040A7E0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v14);
  unint64_t v15 = sub_1001D0C0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.P2POperation.CodingKeys,  &type metadata for NANAttribute.P2POperation.CodingKeys,  v15,  v14,  v13);
  LOBYTE(v26)  = a2;
  char v33 = 0;
  unint64_t v16 = sub_1001D0C50();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v26,  &v33,  v9,  &type metadata for NANAttribute.P2POperation.DeviceRole,  v16);
  if (!v5)
  {
    int v17 = a3;
    uint64_t v18 = v24;
    uint64_t v19 = v25;
    LOBYTE(v26)  = BYTE1(a2);
    HIBYTE(v26)  = BYTE2(a2);
    char v27 = BYTE3(a2);
    char v28 = BYTE4(a2);
    char v29 = BYTE5(a2);
    char v30 = BYTE6(a2);
    char v33 = 1;
    unint64_t v20 = sub_1000286C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v33, v9, &type metadata for WiFiAddress, v20);
    __int16 v26 = v17;
    char v27 = BYTE2(v17) & 1;
    uint64_t v31 = v18;
    uint64_t v32 = v19;
    char v33 = 2;
    unint64_t v21 = sub_1001D0B84();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v33, v9, &type metadata for DeprecatedNANAvailability, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.P2POperation.hashValue.getter( unint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v7 = a1;
  *(_DWORD *)unint64_t v15 = a2 >> 8;
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v12 = a1 >> 40;
  *(void *)uint64_t v14 = HIWORD(a1);
  Hasher.init(_seed:)(v16, 0LL);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  sub_100020AFC(a3, a4);
  Data.hash(into:)(v16, a3, a4);
  sub_1000208D8(a3, a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.P2POperation.init(from:)(void *a1)
{
  return sub_1001CA730(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_1001A57A4()
{
  if (*((_BYTE *)v0 + 10)) {
    int v1 = 0x10000;
  }
  else {
    int v1 = 0;
  }
  return NANAttribute.P2POperation.hashValue.getter( *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 6) << 48),  *((unsigned __int16 *)v0 + 4) | v1,  *((void *)v0 + 2),  *((void *)v0 + 3));
}

uint64_t sub_1001A57E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 16);
  unint64_t v5 = *(void *)(v2 + 24);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v9 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v10 = *(_BYTE *)(v2 + 5);
  Swift::UInt8 v11 = *(_BYTE *)(v2 + 6);
  Swift::UInt8 v12 = *(_BYTE *)(v2 + 8);
  Swift::UInt8 v14 = *(_BYTE *)(v2 + 9);
  Swift::UInt8 v15 = *(_BYTE *)(v2 + 10);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  return sub_1000208D8(v4, v5);
}

Swift::Int sub_1001A58C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v14 = *(_BYTE *)(v1 + 10);
  Hasher.init(_seed:)(v15, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v15, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001A59EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CA730(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(_BYTE *)(a2 + 3)  = BYTE3(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
    *(_BYTE *)(a2 + 6)  = BYTE6(result);
    *(_WORD *)(a2 + 8)  = v5;
    *(_BYTE *)(a2 + 10)  = BYTE2(v5) & 1;
    *(void *)(a2 + 16)  = v6;
    *(void *)(a2 + 24)  = v7;
  }

  return result;
}

uint64_t sub_1001A5A5C(void *a1)
{
  if (*((_BYTE *)v1 + 10)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  return NANAttribute.P2POperation.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48),  *((unsigned __int16 *)v1 + 4) | v2,  *((void *)v1 + 2),  *((void *)v1 + 3));
}

uint64_t sub_1001A5AA8(unsigned int *a1, unsigned int *a2)
{
  if (*((_BYTE *)a1 + 10)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (*((_BYTE *)a2 + 10)) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  return sub_1001C6EF4( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48),  *((unsigned __int16 *)a1 + 4) | v2,  *((void *)a1 + 2),  *((void *)a1 + 3),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48),  *((unsigned __int16 *)a2 + 4) | v3);
}

uint64_t NANAttribute.IBSS.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt8 v4 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Swift::UInt8 v9 = *(_BYTE *)(v2 + 7);
  Swift::UInt8 v10 = *(_BYTE *)(v2 + 8);
  Swift::UInt8 v11 = *(_BYTE *)(v2 + 9);
  Swift::UInt8 v12 = *(_BYTE *)(v2 + 10);
  Swift::UInt8 v13 = *(_BYTE *)(v2 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 6));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  char v14 = *(_BYTE *)(v2 + 18);
  uint64_t v15 = *(void *)(v2 + 24);
  uint64_t v16 = *(void *)(v2 + 32);
  Swift::UInt8 v17 = *(_BYTE *)(v2 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 16));
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v14 & 1);
  sub_1001D0AE8(v2);
  Data.hash(into:)(a1, v15, v16);
  return sub_1001D0B14(v2);
}

uint64_t sub_1001A5C24()
{
  uint64_t v1 = 0x657264644163616DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6962616C69617661LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4953534273736269LL;
  }
}

uint64_t sub_1001A5C90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E1E90(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A5CB4(uint64_t a1)
{
  unint64_t v2 = sub_1001D0C94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A5CDC(uint64_t a1)
{
  unint64_t v2 = sub_1001D0C94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.IBSS.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002274(&qword_10040A7F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt8 v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D0C94();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.IBSS.CodingKeys,  &type metadata for NANAttribute.IBSS.CodingKeys,  v11,  v9,  v10);
  LODWORD(v15)  = *(_DWORD *)v3;
  WORD2(v15)  = *(_WORD *)(v3 + 4);
  char v17 = 0;
  unint64_t v12 = sub_1000286C4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, &v17, v5, &type metadata for WiFiAddress, v12);
  if (!v2)
  {
    LODWORD(v15)  = *(_DWORD *)(v3 + 6);
    WORD2(v15)  = *(_WORD *)(v3 + 10);
    char v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, &v17, v5, &type metadata for WiFiAddress, v12);
    __int128 v15 = *(_OWORD *)(v3 + 16);
    uint64_t v16 = *(void *)(v3 + 32);
    char v17 = 2;
    unint64_t v13 = sub_1001D0B84();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, &v17, v5, &type metadata for DeprecatedNANAvailability, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.IBSS.hashValue.getter()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 5);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 6));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  char v11 = *(_BYTE *)(v0 + 18);
  uint64_t v12 = *(void *)(v0 + 24);
  uint64_t v13 = *(void *)(v0 + 32);
  Swift::UInt8 v14 = *(_BYTE *)(v0 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 16));
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v11 & 1);
  sub_1001D0AE8(v0);
  Data.hash(into:)(v16, v12, v13);
  sub_1001D0B14(v0);
  return Hasher._finalize()();
}

double NANAttribute.IBSS.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }

  return result;
}

Swift::Int sub_1001A603C()
{
  return NANAttribute.IBSS.hashValue.getter();
}

uint64_t sub_1001A6074(uint64_t a1)
{
  return NANAttribute.IBSS.hash(into:)(a1);
}

Swift::Int sub_1001A60AC(uint64_t a1)
{
  Swift::UInt8 v19 = *(_BYTE *)(v1 + 18);
  uint64_t v2 = *(void *)(v1 + 24);
  unint64_t v3 = *(void *)(v1 + 32);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v14 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v15 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v16 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v17 = *(_BYTE *)(v1 + 16);
  Swift::UInt8 v18 = *(_BYTE *)(v1 + 17);
  Hasher.init(_seed:)(v20, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v20, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001A622C(void *a1)
{
  return NANAttribute.IBSS.encode(to:)(a1);
}

BOOL sub_1001A6240(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P12NANAttributeO4IBSSV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t NANAttribute.Mesh.availability.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 10);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  int v4 = *(unsigned __int16 *)(v0 + 8);
  sub_100020AFC(v2, v3);
  if (v1) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  return v4 | v5;
}

uint64_t NANAttribute.Mesh.meshID.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100020AFC(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t NANAttribute.Mesh.meshID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000208D8(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32)  = a1;
  *(void *)(v2 + 40)  = a2;
  return result;
}

uint64_t NANAttribute.Mesh.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt8 v4 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  *(_OWORD *)Swift::UInt8 v14 = *(_OWORD *)(v2 + 8);
  uint64_t v15 = *(void *)(v2 + 24);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v14[1]);
  Hasher._combine(_:)(v14[2] & 1);
  uint64_t v9 = *(void *)&v14[8];
  uint64_t v10 = v15;
  sub_100112040((uint64_t)v14);
  Data.hash(into:)(a1, v9, v10);
  sub_10008826C((uint64_t)v14);
  __int128 v13 = *(_OWORD *)(v2 + 32);
  __int128 v11 = v13;
  sub_10017B1D8((uint64_t)&v13);
  Data.hash(into:)(a1, v11, *((void *)&v11 + 1));
  return sub_10017B204((uint64_t)&v13);
}

uint64_t sub_1001A6440()
{
  uint64_t v1 = 0x6962616C69617661LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x44496873656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657264644163616DLL;
  }
}

uint64_t sub_1001A64A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2014(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A64C8(uint64_t a1)
{
  unint64_t v2 = sub_1001D0CD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A64F0(uint64_t a1)
{
  unint64_t v2 = sub_1001D0CD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Mesh.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002274(&qword_10040A808);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt8 v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D0CD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Mesh.CodingKeys,  &type metadata for NANAttribute.Mesh.CodingKeys,  v11,  v9,  v10);
  LODWORD(v16)  = *(_DWORD *)v3;
  WORD2(v16)  = *(_WORD *)(v3 + 4);
  char v18 = 0;
  unint64_t v12 = sub_1000286C4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for WiFiAddress, v12);
  if (!v2)
  {
    __int128 v16 = *(_OWORD *)(v3 + 8);
    uint64_t v17 = *(void *)(v3 + 24);
    char v18 = 1;
    unint64_t v13 = sub_1001D0B84();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for DeprecatedNANAvailability, v13);
    __int128 v16 = *(_OWORD *)(v3 + 32);
    char v18 = 2;
    unint64_t v14 = sub_1001D0D1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for BinaryDecoder.DataCopy, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.Mesh.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v11, 0LL);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 5);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)(v0 + 8);
  uint64_t v14 = *(void *)(v0 + 24);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v13[1]);
  Hasher._combine(_:)(v13[2] & 1);
  uint64_t v7 = *(void *)&v13[8];
  uint64_t v8 = v14;
  sub_100112040((uint64_t)v13);
  Data.hash(into:)(v11, v7, v8);
  sub_10008826C((uint64_t)v13);
  __int128 v12 = *(_OWORD *)(v1 + 32);
  __int128 v9 = v12;
  sub_10017B1D8((uint64_t)&v12);
  Data.hash(into:)(v11, v9, *((void *)&v9 + 1));
  sub_10017B204((uint64_t)&v12);
  return Hasher._finalize()();
}

double NANAttribute.Mesh.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }

  return result;
}

uint64_t sub_1001A6824(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 16);
  unint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  unint64_t v7 = *(void *)(v2 + 40);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v9 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v10 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v11 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v12 = *(_BYTE *)(v2 + 5);
  Swift::UInt8 v14 = *(_BYTE *)(v2 + 8);
  Swift::UInt8 v15 = *(_BYTE *)(v2 + 9);
  Swift::UInt8 v16 = *(_BYTE *)(v2 + 10);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_1000208D8(v4, v5);
  sub_100020AFC(v6, v7);
  Data.hash(into:)(a1, v6, v7);
  return sub_1000208D8(v6, v7);
}

Swift::Int sub_1001A6930(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  unint64_t v5 = *(void *)(v1 + 40);
  Swift::UInt8 v6 = *(_BYTE *)v1;
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v14 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v15 = *(_BYTE *)(v1 + 10);
  Hasher.init(_seed:)(v16, a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v16, v2, v3);
  sub_1000208D8(v2, v3);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(v16, v4, v5);
  sub_1000208D8(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1001A6A70(void *a1)
{
  return NANAttribute.Mesh.encode(to:)(a1);
}

uint64_t sub_1001A6A84(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v8[0]  = *a1;
  v8[1]  = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v8[2]  = a1[2];
  v9[0]  = v3;
  __int128 v5 = a2[2];
  v9[1]  = v4;
  v9[2]  = v5;
  _s7CoreP2P12NANAttributeO4MeshV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v9);
  return v6 & 1;
}

uint64_t NANAttribute.FurtherServiceDiscovery.availability.getter(int a1, uint64_t a2, unint64_t a3)
{
  return a1 & 0x1FFFF;
}

uint64_t NANAttribute.FurtherServiceDiscovery.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7 = a1 >> 8;
  uint64_t result = sub_1000208D8(*(void *)(v3 + 8), *(void *)(v3 + 16));
  *(_BYTE *)uint64_t v3 = a1;
  *(_BYTE *)(v3 + 1)  = v7;
  *(_BYTE *)(v3 + 2)  = BYTE2(a1) & 1;
  *(void *)(v3 + 8)  = a2;
  *(void *)(v3 + 16)  = a3;
  return result;
}

BOOL static NANAttribute.FurtherServiceDiscovery.__derived_struct_equals(_:_:)( int a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL result = 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a4 && ((a1 ^ a4) & 0x10000) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
    if ((v4 & 1) != 0) {
      return 1;
    }
  }

  return result;
}

uint64_t sub_1001A6BAC()
{
  return 0x6962616C69617661LL;
}

uint64_t sub_1001A6BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6962616C69617661LL && a2 == 0xEC0000007974696CLL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEC0000007974696CLL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661LL, 0xEC0000007974696CLL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3  = v8 & 1;
  return result;
}

uint64_t sub_1001A6C78(uint64_t a1)
{
  unint64_t v2 = sub_1001D0D60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A6CA0(uint64_t a1)
{
  unint64_t v2 = sub_1001D0D60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FurtherServiceDiscovery.encode(to:)( void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  unsigned int v7 = a2 >> 8;
  uint64_t v8 = sub_100002274(&qword_10040A820);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::UInt8 v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001D0D60();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys,  &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys,  v14,  v12,  v13);
  v19[0]  = a2;
  v19[1]  = v7;
  v19[2]  = BYTE2(a2) & 1;
  uint64_t v20 = a3;
  uint64_t v21 = v18;
  unint64_t v15 = sub_1001D0B84();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, v16, v8, &type metadata for DeprecatedNANAvailability, v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t NANAttribute.FurtherServiceDiscovery.init(from:)(void *a1)
{
  return sub_1001CCB1C(a1) & 0x1FFFF;
}

uint64_t sub_1001A6E10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CCB1C(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result) & 1;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001A6E4C(void *a1)
{
  if (*((_BYTE *)v1 + 2)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  return NANAttribute.FurtherServiceDiscovery.encode(to:)( a1,  *v1 | v2,  *((void *)v1 + 1),  *((void *)v1 + 2));
}

BOOL sub_1001A6E7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  BOOL result = 0;
  if (v2 && ((a1[2] ^ a2[2]) & 1) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2));
    if ((v3 & 1) != 0) {
      return 1;
    }
  }

  return result;
}

uint64_t NANAttribute.FurtherAvailabilityMap.hash(into:)(uint64_t a1, Swift::UInt8 a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(a3);
}

uint64_t static NANAttribute.FurtherAvailabilityMap.__derived_struct_equals(_:_:)( char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001B38B4(a1, a2, a3, a4, sub_10007B190);
}

uint64_t sub_1001A6F24()
{
  if (*v0) {
    return 0xD000000000000013LL;
  }
  else {
    return 0x444970616DLL;
  }
}

uint64_t sub_1001A6F60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2184(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A6F84(uint64_t a1)
{
  unint64_t v2 = sub_1001D0DA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A6FAC(uint64_t a1)
{
  unint64_t v2 = sub_1001D0DA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FurtherAvailabilityMap.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040A830);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D0DA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys,  &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys,  v13,  v11,  v12);
  char v22 = a2;
  char v21 = 0;
  unint64_t v14 = sub_100086D9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for NANMapID, v14);
  if (!v3)
  {
    uint64_t v19 = a3;
    char v20 = 1;
    uint64_t v15 = sub_100002274(&qword_10040A840);
    uint64_t v16 = sub_100087780( &qword_10040A848,  &qword_10040A840,  (void (*)(void))sub_1001D0DE8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.FurtherAvailabilityMap.hashValue.getter(Swift::UInt8 a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t NANAttribute.FurtherAvailabilityMap.init(from:)(void *a1)
{
  return sub_1001CC8A8(a1);
}

Swift::Int sub_1001A71C8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v1);
  sub_1000831EC((uint64_t)v4, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001A7234(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Hasher._combine(_:)(*(_BYTE *)v1);
  swift_bridgeObjectRetain(v3);
  sub_1000831EC(a1, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001A7280(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain(v2);
  sub_1000831EC((uint64_t)v5, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001A72E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B3C20((uint64_t (*)(void))sub_1001CC8A8, a1);
}

uint64_t sub_1001A7304(void *a1)
{
  return NANAttribute.FurtherAvailabilityMap.encode(to:)(a1, *(_BYTE *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1001A7320(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001B3C74(a1, a2, a3, a4, sub_10007B190);
}

uint64_t NANAttribute.Ranging.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = a2 >> 24;
  unint64_t v10 = HIDWORD(a2);
  unint64_t v11 = a2 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  sub_100020AFC(a3, a4);
  Data.hash(into:)(a1, a3, a4);
  return sub_1000208D8(a3, a4);
}

void static NANAttribute.Ranging.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v6)  = BYTE4(a1);
  HIBYTE(v6)  = BYTE5(a1);
  LOBYTE(v5)  = BYTE4(a4);
  HIBYTE(v5)  = BYTE5(a4);
  if ((_DWORD)a1 == (_DWORD)a4 && v6 == v5) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
  }
}

uint64_t sub_1001A7494()
{
  if (*v0) {
    return 1635017060LL;
  }
  else {
    return 0x657264644163616DLL;
  }
}

uint64_t sub_1001A74CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2268(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A74F0(uint64_t a1)
{
  unint64_t v2 = sub_1001D0E2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A7518(uint64_t a1)
{
  unint64_t v2 = sub_1001D0E2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Ranging.encode(to:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v21 = HIDWORD(a2);
  unint64_t v22 = a2 >> 40;
  uint64_t v9 = sub_100002274(&qword_10040A858);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001D0E2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Ranging.CodingKeys,  &type metadata for NANAttribute.Ranging.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v25[0])  = v4;
  BYTE1(v25[0])  = v6;
  BYTE2(v25[0])  = v7;
  BYTE3(v25[0])  = v8;
  BYTE4(v25[0])  = v21;
  BYTE5(v25[0])  = v22;
  char v26 = 0;
  unint64_t v15 = sub_1000286C4();
  uint64_t v16 = v23;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v26, v9, &type metadata for WiFiAddress, v15);
  if (!v16)
  {
    v25[0]  = v19;
    v25[1]  = v20;
    char v26 = 1;
    unint64_t v17 = sub_1001D0D1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v26, v9, &type metadata for BinaryDecoder.DataCopy, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v11, v9);
}

Swift::Int NANAttribute.Ranging.hashValue.getter(unint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  Hasher.init(_seed:)(v12, 0LL);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  sub_100020AFC(a2, a3);
  Data.hash(into:)(v12, a2, a3);
  sub_1000208D8(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.Ranging.init(from:)(void *a1)
{
  return sub_1001CDED0(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_1001A77D8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(_BYTE *)v0;
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 5);
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v10, v1, v2);
  sub_1000208D8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001A78B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 5);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_1000208D8(v3, v4);
}

Swift::Int sub_1001A7964(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 5);
  Hasher.init(_seed:)(v11, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v11, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001A7A40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CDED0(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(_BYTE *)(a2 + 3)  = BYTE3(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001A7A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A83AC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, unint64_t, void, void))NANAttribute.Ranging.encode(to:));
}

void sub_1001A7AB0(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a1 + 4);
  uint64_t v4 = *(void *)(a1 + 8);
}

void NANAttribute.ClusterDiscovery.hash(into:)( int a1, unint64_t a2, Swift::UInt64 a3, unint64_t a4)
{
  Swift::UInt8 v4 = a4;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = a4 >> 8;
  unint64_t v12 = a4 >> 16;
  *(void *)uint64_t v13 = a4 >> 24;
  *(void *)unint64_t v14 = HIDWORD(a4);
  *(void *)unint64_t v15 = a4 >> 40;
  *(void *)uint64_t v16 = HIWORD(a4);
  *(void *)unint64_t v17 = HIBYTE(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
}

BOOL static NANAttribute.ClusterDiscovery.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1001C5DD0(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5, a6);
}

uint64_t sub_1001A7C60()
{
  unint64_t v1 = 0x7366664F656D6974LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4972657473756C63LL;
  }
}

uint64_t sub_1001A7CC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2354(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A7CEC(uint64_t a1)
{
  unint64_t v2 = sub_1001D0E70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A7D14(uint64_t a1)
{
  unint64_t v2 = sub_1001D0E70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ClusterDiscovery.encode(to:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v23 = a2 >> 24;
  unint64_t v24 = HIDWORD(a2);
  unint64_t v25 = a2 >> 40;
  uint64_t v8 = sub_100002274(&qword_10040A868);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001D0E70();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ClusterDiscovery.CodingKeys,  &type metadata for NANAttribute.ClusterDiscovery.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v27)  = v4;
  BYTE1(v27)  = v6;
  BYTE2(v27)  = v7;
  BYTE3(v27)  = v23;
  BYTE4(v27)  = v24;
  BYTE5(v27)  = v25;
  char v28 = 0;
  unint64_t v15 = sub_1000286C4();
  uint64_t v16 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v8, &type metadata for WiFiAddress, v15);
  if (!v16)
  {
    uint64_t v17 = v21;
    LOBYTE(v27)  = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v27, v8);
    uint64_t v27 = v17;
    char v28 = 2;
    unint64_t v18 = sub_1001CBDF8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v8, &type metadata for NANMasterRank, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ClusterDiscovery.hashValue.getter( unint64_t a1, Swift::UInt64 a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  Swift::UInt8 v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  unint64_t v11 = a3 >> 8;
  *(void *)uint64_t v13 = a3 >> 16;
  *(void *)unint64_t v14 = a3 >> 24;
  *(void *)unint64_t v15 = HIDWORD(a3);
  *(void *)uint64_t v16 = a3 >> 40;
  *(void *)uint64_t v17 = HIWORD(a3);
  *(void *)unint64_t v18 = HIBYTE(a3);
  Hasher.init(_seed:)(v19, 0LL);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ClusterDiscovery.init(from:)(void *a1)
{
  return sub_1001CB620(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_1001A8094()
{
  return NANAttribute.ClusterDiscovery.hashValue.getter( *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40),  *((void *)v0 + 1),  *((void *)v0 + 2));
}

void sub_1001A80B0()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 16);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 17);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 18);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 19);
  Swift::UInt8 v11 = *(_BYTE *)(v0 + 20);
  Swift::UInt8 v12 = *(_BYTE *)(v0 + 21);
  Swift::UInt8 v13 = *(_BYTE *)(v0 + 22);
  Swift::UInt8 v14 = *(_BYTE *)(v0 + 23);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
}

Swift::Int sub_1001A81B4(uint64_t a1)
{
  Swift::UInt64 v2 = *(void *)(v1 + 8);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 16);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 17);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 18);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 19);
  Swift::UInt8 v14 = *(_BYTE *)(v1 + 20);
  Swift::UInt8 v15 = *(_BYTE *)(v1 + 21);
  Swift::UInt8 v16 = *(_BYTE *)(v1 + 22);
  Swift::UInt8 v17 = *(_BYTE *)(v1 + 23);
  Hasher.init(_seed:)(v18, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  return Hasher._finalize()();
}

uint64_t sub_1001A8300@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CB620(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(_BYTE *)(a2 + 3)  = BYTE3(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001A8390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A83AC( a1,  a2,  a3,  (uint64_t (*)(uint64_t, unint64_t, void, void))NANAttribute.ClusterDiscovery.encode(to:));
}

uint64_t sub_1001A83AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t, void, void))
{
  return a4( a1,  *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v4 + 5) << 40),  *((void *)v4 + 1),  *((void *)v4 + 2));
}

BOOL sub_1001A83DC(unsigned int *a1, unsigned int *a2)
{
  return sub_1001C5DD0( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40),  *((void *)a1 + 1),  *((void *)a1 + 2),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40),  *((void *)a2 + 1),  *((void *)a2 + 2));
}

void NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.hash(into:)(int a1, Swift::UInt16 a2)
{
}

uint64_t sub_1001A843C(uint64_t a1)
{
  unint64_t v2 = sub_1001D0EB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A8464(uint64_t a1)
{
  unint64_t v2 = sub_1001D0EB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.encode(to:)( void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040A878);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::UInt8 v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_1001D0EB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2, v11, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.hashValue.getter( Swift::UInt16 a1)
{
  return Hasher._finalize()();
}

void *NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.init(from:)(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A888);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_1001D0EB4();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    uint64_t v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002AC4(a1);
  return v9;
}

uint64_t sub_1001A86B4@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v5 = sub_100002274(&qword_10040A888);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D0EB4();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002AC4(a1);
  }
  __int16 v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100002AC4(a1);
  *a2  = v13;
  return result;
}

uint64_t sub_1001A87C4(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040A878);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = *v1;
  sub_100021104(a1, v7);
  unint64_t v10 = sub_1001D0EB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys,  v10,  v7,  v8);
  KeyedEncodingContainer.encode(_:forKey:)(v9, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void *NANAttribute.DeviceCapability.OperationMode.vht80_80.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht80_80;
}

void *NANAttribute.DeviceCapability.OperationMode.vht_160.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht_160;
}

void *NANAttribute.DeviceCapability.OperationMode.ndlPaging.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.ndlPaging;
}

uint64_t sub_1001A88D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3EB0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A892C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3EB0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.DeviceCapability.AnntenaCount.txAntennaCount.getter(uint64_t a1)
{
  return sub_1001ADB58(a1, 0LL, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007153C);
}

uint64_t NANAttribute.DeviceCapability.AnntenaCount.rxAntennaCount.getter(uint64_t a1)
{
  return sub_1001ADB58(a1, 4LL, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007153C);
}

uint64_t sub_1001A89A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3FD0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A89FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D3FD0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1)
{
  return sub_100020E48( a1,  (uint64_t *)&unk_10040B310,  (uint64_t)&nominal type descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

void *NANAttribute.DeviceCapability.Capabilities.dfsMaster.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.dfsMaster;
}

void *NANAttribute.DeviceCapability.Capabilities.extendedIDKey.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.extendedIDKey;
}

void *NANAttribute.DeviceCapability.Capabilities.simultaneousDatapathReception.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.simultaneousDatapathReception;
}

void *NANAttribute.DeviceCapability.Capabilities.extendedNANDatapath.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.extendedNANDatapath;
}

void *NANAttribute.DeviceCapability.Capabilities.s3Capable.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.s3Capable;
}

uint64_t sub_1001A8A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D40F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A8AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D40F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.ElementContainer.mapIDs.setter(uint64_t result)
{
  *uint64_t v1 = result;
  v1[1]  = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.DeviceCapability.maximumChannelSwitchTime.getter@<X0>( unsigned __int16 a1@<W1>, void *a2@<X8>)
{
  *a2  = a1;
  uint64_t v3 = enum case for DispatchTimeInterval.microseconds(_:);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(a2, v3, v4);
}

uint64_t NANAttribute.Datapath.control.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 10)  = result;
  return result;
}

void NANAttribute.DeviceCapability.hash(into:)(uint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v3 = a3;
  unsigned int v4 = HIWORD(a3);
  unint64_t v5 = HIWORD(a2);
  unint64_t v6 = a2 >> 40;
  if ((a2 & 0x100) != 0) {
    Swift::UInt8 v7 = 1;
  }
  else {
    Swift::UInt8 v7 = 2 * a2;
  }
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 16;
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

BOOL static NANAttribute.DeviceCapability.__derived_struct_equals(_:_:)( uint64_t a1, int a2, uint64_t a3, int a4)
{
  return sub_1001C6068( a1 & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(a1) & 1) << 8),  a2 & 0xFFFFFF,  a3 & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(a3) & 1) << 8),  a4 & 0xFFFFFF);
}

uint64_t sub_1001A8C74(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8CA4 + 4 * byte_100351A80[a1]))( 0x444970616DLL,  0xE500000000000000LL);
}

unint64_t sub_1001A8CA4()
{
  return 0xD000000000000023LL;
}

uint64_t sub_1001A8D2C()
{
  return 0x696C696261706163LL;
}

uint64_t sub_1001A8D4C()
{
  return sub_1001A8C74(*v0);
}

uint64_t sub_1001A8D54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E24BC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001A8D78(uint64_t a1)
{
  unint64_t v2 = sub_1001D0EF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A8DA0(uint64_t a1)
{
  unint64_t v2 = sub_1001D0EF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapability.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040A890);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D0EF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapability.CodingKeys,  &type metadata for NANAttribute.DeviceCapability.CodingKeys,  v13,  v11,  v12);
  __int16 v34 = a2 & 0x1FF;
  char v33 = 0;
  unint64_t v14 = sub_1001D0F3C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v7, &type metadata for NANMapIDs, v14);
  if (!v3)
  {
    __int16 v31 = WORD1(a2);
    char v32 = 1;
    unint64_t v15 = sub_1001D0F80();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v31,  &v32,  v7,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation,  v15);
    char v30 = BYTE4(a2);
    char v29 = 2;
    unint64_t v16 = sub_100086BEC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v7, &type metadata for NANBitmap.Band, v16);
    char v28 = BYTE5(a2);
    char v27 = 3;
    unint64_t v17 = sub_1001D0FC4();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v28,  &v27,  v7,  &type metadata for NANAttribute.DeviceCapability.OperationMode,  v17);
    char v26 = BYTE6(a2);
    char v25 = 4;
    unint64_t v18 = sub_1001D1008();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v26,  &v25,  v7,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount,  v18);
    char v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v24, v7);
    char v23 = BYTE2(a3);
    char v22 = 6;
    unint64_t v19 = sub_1001D104C();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v23,  &v22,  v7,  &type metadata for NANAttribute.DeviceCapability.Capabilities,  v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.DeviceCapability.hashValue.getter(uint64_t a1, int a2)
{
  if ((a1 & 0x100) != 0) {
    Swift::UInt8 v4 = 1;
  }
  else {
    Swift::UInt8 v4 = 2 * a1;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(WORD1(a1));
  Hasher._combine(_:)(BYTE4(a1));
  Hasher._combine(_:)(BYTE5(a1));
  Hasher._combine(_:)(BYTE6(a1));
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(BYTE2(a2));
  return Hasher._finalize()();
}

unint64_t NANAttribute.DeviceCapability.init(from:)(void *a1)
{
  unint64_t result = sub_1001CB7F0(a1);
  if (!v1) {
    return result & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(result) & 1) << 8);
  }
  return result;
}

Swift::Int sub_1001A9148()
{
  char v1 = *v0;
  int v2 = v0[1];
  Swift::UInt16 v3 = *((_WORD *)v0 + 1);
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Swift::UInt8 v6 = v0[6];
  Swift::UInt16 v7 = *((_WORD *)v0 + 4);
  Swift::UInt8 v8 = v0[10];
  Hasher.init(_seed:)(v11, 0LL);
  if (v2) {
    Swift::UInt8 v9 = 1;
  }
  else {
    Swift::UInt8 v9 = 2 * v1;
  }
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_1001A9218()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 6);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 8);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 10);
  if ((*(_BYTE *)(v0 + 1) & 1) != 0) {
    Swift::UInt8 v7 = 1;
  }
  else {
    Swift::UInt8 v7 = 2 * *(_BYTE *)v0;
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int sub_1001A92B4(uint64_t a1)
{
  char v2 = *v1;
  int v3 = v1[1];
  Swift::UInt16 v4 = *((_WORD *)v1 + 1);
  Swift::UInt8 v5 = v1[4];
  Swift::UInt8 v6 = v1[5];
  Swift::UInt8 v7 = v1[6];
  Swift::UInt16 v8 = *((_WORD *)v1 + 4);
  Swift::UInt8 v9 = v1[10];
  Hasher.init(_seed:)(v12, a1);
  if (v3) {
    Swift::UInt8 v10 = 1;
  }
  else {
    Swift::UInt8 v10 = 2 * v2;
  }
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

unint64_t sub_1001A9380@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001CB7F0(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(_BYTE *)(a2 + 1)  = BYTE1(result) & 1;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
    *(_BYTE *)(a2 + 6)  = BYTE6(result);
    *(_WORD *)(a2 + 8)  = v5;
    *(_BYTE *)(a2 + 10)  = BYTE2(v5);
  }

  return result;
}

uint64_t sub_1001A93DC(void *a1)
{
  return NANAttribute.DeviceCapability.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[1] << 8),  *((unsigned __int16 *)v1 + 4) | (v1[10] << 16));
}

BOOL sub_1001A9438(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001C6068( *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 1) << 16) | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[1] << 8),  *((unsigned __int16 *)a1 + 4) | (a1[10] << 16),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 1) << 16) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[1] << 8),  *((unsigned __int16 *)a2 + 4) | (a2[10] << 16));
}

uint64_t sub_1001A94C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4394();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A9524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4394();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001A9570()
{
  uint64_t result = sub_1001A0418(0LL);
  qword_10040A718  = result;
  return result;
}

uint64_t NANAttribute.DeviceCapabilityExtension.regulatoryInformationForSixGHz.getter(uint64_t a1)
{
  if (qword_1004043F8 != -1) {
    swift_once(&qword_1004043F8, sub_1001A9570);
  }
  uint64_t v2 = qword_10040A718;
  uint64_t v6 = qword_10040A718;
  swift_bridgeObjectRetain_n(qword_10040A718, 2LL);
  sub_1001A0374(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  char v3 = sub_10007990C(v6, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  if ((v3 & 1) == 0 || !*(void *)(a1 + 16)) {
    return 5LL;
  }
  unsigned int v4 = (*(unsigned __int8 *)(a1 + 32) >> 1) & 7;
  if (v4 >= 5) {
    return 5LL;
  }
  else {
    return v4;
  }
}

uint64_t sub_1001A965C()
{
  uint64_t result = sub_1001A0418(8uLL);
  static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled  = result;
  return result;
}

uint64_t *NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled.unsafeMutableAddressor()
{
  if (qword_100404400 != -1) {
    swift_once(&qword_100404400, sub_1001A965C);
  }
  return &static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled;
}

uint64_t static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled.getter()
{
  return sub_10005E194(&qword_100404400, &static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled);
}

uint64_t sub_1001A96D8()
{
  uint64_t result = sub_1001A0418(9uLL);
  static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled  = result;
  return result;
}

uint64_t *NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled.unsafeMutableAddressor()
{
  if (qword_100404408 != -1) {
    swift_once(&qword_100404408, sub_1001A96D8);
  }
  return &static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled;
}

uint64_t static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled.getter()
{
  return sub_10005E194(&qword_100404408, &static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled);
}

uint64_t sub_1001A9754(uint64_t a1)
{
  unint64_t v2 = sub_1001D1090();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A977C(uint64_t a1)
{
  unint64_t v2 = sub_1001D1090();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapabilityExtension.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040A8C8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::UInt8 v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_1001D1090();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys,  &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100002274(&qword_100406978);
  uint64_t v12 = sub_1000E5170( (unint64_t *)&qword_100407410,  (uint64_t)&protocol witness table for UInt8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *NANAttribute.DeviceCapabilityExtension.init(from:)(void *a1)
{
  return sub_1001CCEB0(a1);
}

Swift::Int sub_1001A98D4()
{
  return sub_1001A0170(0LL, *v0);
}

Swift::Int sub_1001A98F0(uint64_t a1)
{
  return sub_1001A0170(a1, *v1);
}

void *sub_1001A9908@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001CCEB0(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001A9930(void *a1)
{
  return NANAttribute.DeviceCapabilityExtension.encode(to:)(a1, *v1);
}

uint64_t sub_1001A994C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_10008F9C4(v4);
  swift_bridgeObjectRelease(v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a2  = v7;
  return result;
}

uint64_t sub_1001A99B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A0374(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a2  = v7;
  return result;
}

uint64_t sub_1001A9A14@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_10008F9D0(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4378);
  swift_bridgeObjectRelease(v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a2  = v7;
  return result;
}

BOOL sub_1001A9A80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v9 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A0374(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  uint64_t v5 = v9;
  char v6 = sub_10007990C(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    uint64_t v7 = swift_bridgeObjectRetain(v4);
    sub_10008F9C4(v7);
    uint64_t v5 = v4;
  }

  *a1  = v5;
  swift_bridgeObjectRelease(v4);
  return (v6 & 1) == 0;
}

uint64_t sub_1001A9B24@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001A0290( *a1,  (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64,  (uint64_t (*)(uint64_t, uint64_t))sub_1001E4378);
  *a2  = result;
  return result;
}

uint64_t sub_1001A9B5C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A0374(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  uint64_t v5 = v8;
  sub_10008F9C4(v4);
  char v6 = sub_10007990C(v8, _swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if ((v6 & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease(v8);
    uint64_t v5 = 0LL;
  }

  *a2  = v5;
  return result;
}

uint64_t sub_1001A9BF8(uint64_t *a1)
{
  return sub_1001A0374(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
}

uint64_t sub_1001A9C18(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_10008F9D0(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4378);
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_1001A9C48@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain_n(*v2, 2LL);
  sub_10008F9D0(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4378);
  sub_1001A0374(v7, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  swift_bridgeObjectRelease(v5);
  uint64_t result = swift_bridgeObjectRelease(v7);
  *a2  = v5;
  return result;
}

uint64_t sub_1001A9CD4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v6 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A0374(v2, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  char v4 = sub_10007990C(v6, v3);
  swift_bridgeObjectRelease(v6);
  return v4 & 1;
}

uint64_t sub_1001A9D44(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A0374(v2, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  char v3 = sub_10007990C(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v5);
  return v3 & 1;
}

uint64_t sub_1001A9DAC(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  sub_1001A0374(v3, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  LOBYTE(v2)  = sub_10007990C(v5, v2);
  swift_bridgeObjectRelease(v5);
  return v2 & 1;
}

uint64_t sub_1001A9E1C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_10008F9D0(v2, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4378);
  sub_1001A0374(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001E4B64);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1001A9E88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1001E1478(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2  = v4;
  return result;
}

uint64_t sub_1001A9EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4334();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A9F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4334();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.Datapath.Status.description.getter(char a1)
{
  if (!a1) {
    return 0x65756E69746E6F63LL;
  }
  if (a1 == 1) {
    return 0x6465747065636361LL;
  }
  return 0x64657463656A6572LL;
}

uint64_t sub_1001A9FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E42F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AA024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E42F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001AA070()
{
  uint64_t v1 = 0x6465747065636361LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x64657463656A6572LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756E69746E6F63LL;
  }
}

void *NANAttribute.Datapath.Control.confirmRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.confirmRequired;
}

void *NANAttribute.Datapath.Control.security.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.security;
}

void *NANAttribute.Datapath.Control.publishID.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.publishID;
}

void *NANAttribute.Datapath.Control.responderDatapathInterfaceAddress.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.responderDatapathInterfaceAddress;
}

void *NANAttribute.Datapath.Control.serviceSpecificInfo.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.serviceSpecificInfo;
}

uint64_t sub_1001AA10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D44B8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AA168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D44B8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.Datapath.type.getter()
{
  unsigned int v1 = sub_100071528(0LL, 4LL, *(_BYTE *)(v0 + 1));
  if (v1 >= 5) {
    return 5LL;
  }
  else {
    return v1;
  }
}

unint64_t NANAttribute.Datapath.status.getter()
{
  unint64_t result = sub_100071528(4uLL, 4LL, *(_BYTE *)(v0 + 1));
  return result;
}

unint64_t NANAttribute.Datapath.initiatorDatapathInterfaceAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 3) | ((unint64_t)*(unsigned int *)(v0 + 5) << 16);
}

uint64_t NANAttribute.Datapath.initiatorDatapathInterfaceAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 3)  = result;
  *(_BYTE *)(v1 + 5)  = BYTE2(result);
  *(_BYTE *)(v1 + 6)  = BYTE3(result);
  *(_BYTE *)(v1 + 7)  = BYTE4(result);
  *(_BYTE *)(v1 + 8)  = BYTE5(result);
  return result;
}

uint64_t (*NANAttribute.Datapath.initiatorDatapathInterfaceAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.Datapath.datapathID.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t NANAttribute.Datapath.datapathID.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 9)  = result;
  return result;
}

uint64_t NANAttribute.Datapath.control.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t NANAttribute.Datapath.publishID.getter()
{
  return *(unsigned __int8 *)(v0 + 11) | (*(unsigned __int8 *)(v0 + 12) << 8);
}

uint64_t NANAttribute.Datapath.publishID.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 11)  = result;
  *(_BYTE *)(v1 + 12)  = BYTE1(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.publishID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANAttribute.Datapath.responderDatapathInterfaceAddress.getter()
{
  return *(unsigned int *)(v0 + 13) | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 19) << 48);
}

uint64_t NANAttribute.Datapath.responderDatapathInterfaceAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 13)  = result;
  *(_WORD *)(v1 + 17)  = WORD2(result);
  *(_BYTE *)(v1 + 19)  = BYTE6(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.responderDatapathInterfaceAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.Datapath.serviceInfo.getter()
{
  uint64_t v1 = v0[3];
  sub_1001062A0(v1, v0[4], v0[5]);
  return v1;
}

uint64_t NANAttribute.Datapath.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001062E0(*(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
  *(void *)(v3 + 24)  = a1;
  *(void *)(v3 + 32)  = a2;
  *(void *)(v3 + 40)  = a3;
  return result;
}

uint64_t NANAttribute.Datapath.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 2));
  Swift::UInt8 v4 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v5 = *(_BYTE *)(v2 + 5);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 6);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 7);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 3));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 9));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 10));
  if ((*(_BYTE *)(v2 + 12) & 1) != 0)
  {
    Swift::UInt8 v9 = 0;
  }

  else
  {
    Swift::UInt8 v9 = *(_BYTE *)(v2 + 11);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  if ((*(_BYTE *)(v2 + 19) & 1) != 0)
  {
    LOBYTE(v10)  = 0;
  }

  else
  {
    unsigned int v11 = *(unsigned __int16 *)(v2 + 17);
    unsigned int v12 = *(_DWORD *)(v2 + 13);
    unint64_t v13 = v12 | ((unint64_t)*(unsigned __int16 *)(v2 + 17) << 32);
    unint64_t v14 = v13 >> 8;
    unint64_t v15 = v13 >> 16;
    unint64_t v16 = v13 >> 24;
    unsigned int v10 = v11 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v11);
  }

  Hasher._combine(_:)(v10);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 24);
  if (v17 == 4)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v19 = *(void *)(v2 + 32);
    uint64_t v18 = *(void *)(v2 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    sub_1001D10D4(v2);
    Data.hash(into:)(a1, v19, v18);
  }

  return sub_1001D1100(v2);
}

Swift::Int NANAttribute.Datapath.hashValue.getter()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 8);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 3));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 9));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 10));
  if ((*(_BYTE *)(v0 + 12) & 1) != 0)
  {
    Swift::UInt8 v6 = 0;
  }

  else
  {
    Swift::UInt8 v6 = *(_BYTE *)(v0 + 11);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v6);
  if ((*(_BYTE *)(v0 + 19) & 1) != 0)
  {
    LOBYTE(v7)  = 0;
  }

  else
  {
    unsigned int v8 = *(unsigned __int16 *)(v0 + 17);
    unsigned int v9 = *(_DWORD *)(v0 + 13);
    unint64_t v10 = v9 | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32);
    unint64_t v11 = v10 >> 8;
    unint64_t v12 = v10 >> 16;
    unint64_t v13 = v10 >> 24;
    unsigned int v7 = v8 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(v8);
  }

  Hasher._combine(_:)(v7);
  uint64_t v14 = *(unsigned __int8 *)(v0 + 24);
  if (v14 == 4)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 32);
    uint64_t v15 = *(void *)(v0 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    sub_1001D10D4(v0);
    Data.hash(into:)(v18, v16, v15);
  }

  sub_1001D1100(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001AA740()
{
  return NANAttribute.Datapath.hashValue.getter();
}

uint64_t sub_1001AA778(uint64_t a1)
{
  return NANAttribute.Datapath.hash(into:)(a1);
}

Swift::Int sub_1001AA7B0(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  __int128 v7 = v1[2];
  Hasher.init(_seed:)(v4, a1);
  NANAttribute.Datapath.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

double NANAttribute.Datapath.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }

  return result;
}

uint64_t sub_1001AA83C(void *a1)
{
  return NANAttribute.Datapath.encode(to:)(a1);
}

uint64_t NANAttribute.Datapath.encode(to:)(void *a1)
{
  Swift::UInt8 v3 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v37, v4, v5);
  uint64_t v6 = v38;
  uint64_t v7 = v39;
  uint64_t v8 = *v1;
  sub_1000237C8((uint64_t)v37, v38);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    LOBYTE(v35)  = v3[1];
    uint64_t v9 = v38;
    uint64_t v10 = v39;
    sub_1000237C8((uint64_t)v37, v38);
    uint64_t v11 = sub_100002274(&qword_10040A8D8);
    uint64_t v12 = sub_1000572E4(&qword_10040A8E0, &qword_10040A8D8, (uint64_t)&unk_100348B28);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, v11, v12, v9, v10);
    LOBYTE(v35)  = v3[2];
    uint64_t v13 = v38;
    uint64_t v14 = v39;
    sub_1000237C8((uint64_t)v37, v38);
    unint64_t v15 = sub_1001D112C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for NANReasonCode, v15, v13, v14);
    LODWORD(v35)  = *(_DWORD *)(v3 + 3);
    WORD2(v35)  = *(_WORD *)(v3 + 7);
    uint64_t v16 = v38;
    uint64_t v17 = v39;
    sub_1000237C8((uint64_t)v37, v38);
    unint64_t v18 = sub_1000286C4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for WiFiAddress, v18, v16, v17);
    uint64_t v19 = v38;
    uint64_t v20 = v39;
    uint64_t v21 = v3[9];
    sub_1000237C8((uint64_t)v37, v38);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v21, v19, v20);
    unsigned __int8 v22 = v3[10];
    LOBYTE(v35)  = v22;
    uint64_t v23 = v38;
    uint64_t v24 = v39;
    sub_1000237C8((uint64_t)v37, v38);
    unint64_t v25 = sub_1001D1170();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v35,  &type metadata for NANAttribute.Datapath.Control,  v25,  v23,  v24);
    sub_1000586C0((uint64_t)(v3 + 11), (uint64_t)v42, &qword_10040A7A8);
    sub_1000586C0((uint64_t)v42, (uint64_t)v43, &qword_10040A7A8);
    if ((v43[1] & 1) == 0 && (v22 & 8) != 0)
    {
      uint64_t v27 = v38;
      uint64_t v28 = v39;
      uint64_t v29 = v43[0];
      sub_1000237C8((uint64_t)v37, v38);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v29, v27, v28);
    }

    sub_1000586C0((uint64_t)(v3 + 13), (uint64_t)v41, &qword_10040A8F8);
    sub_1000586C0((uint64_t)v41, (uint64_t)&v46, &qword_10040A8F8);
    if ((v48 & 1) == 0 && (v22 & 0x10) != 0)
    {
      LODWORD(v35)  = v46;
      WORD2(v35)  = v47;
      uint64_t v30 = v38;
      uint64_t v31 = v39;
      sub_1000237C8((uint64_t)v37, v38);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for WiFiAddress, v18, v30, v31);
    }

    sub_1000586C0((uint64_t)(v3 + 24), (uint64_t)v40, (uint64_t *)&unk_10040DCD0);
    sub_1000586C0((uint64_t)v40, (uint64_t)&v44, (uint64_t *)&unk_10040DCD0);
    if (v44 != 4LL && (v22 & 0x20) != 0)
    {
      __int128 v35 = v44;
      uint64_t v36 = v45;
      uint64_t v32 = v38;
      uint64_t v33 = v39;
      sub_1000237C8((uint64_t)v37, v38);
      unint64_t v34 = sub_1001D11B4();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for NANServiceInfo, v34, v32, v33);
    }
  }

  return sub_100002AC4(v37);
}

uint64_t sub_1001AAC14(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2]  = a1[2];
  v8[0]  = v3;
  __int128 v5 = a2[2];
  v8[1]  = v4;
  v8[2]  = v5;
  return _s7CoreP2P12NANAttributeO8DatapathV23__derived_struct_equalsySbAE_AEtFZ_0( (unsigned __int8 *)v7,  (unsigned __int8 *)v8) & 1;
}

void *NANAttribute.DatapathExtension.Control.confirmRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.confirmRequired;
}

void *NANAttribute.DatapathExtension.Control.security.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.security;
}

void *NANAttribute.DatapathExtension.Control.publishID.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.publishID;
}

void *NANAttribute.DatapathExtension.Control.responderDatapathInterfaceAddress.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.responderDatapathInterfaceAddress;
}

uint64_t sub_1001AAC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4620();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AACE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4620();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.DatapathExtension.serviceInfo.getter()
{
  uint64_t v1 = v0[5];
  sub_1001062A0(v1, v0[6], v0[7]);
  return v1;
}

uint64_t NANAttribute.DatapathExtension.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001062E0(*(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56));
  *(void *)(v3 + 40)  = a1;
  *(void *)(v3 + 48)  = a2;
  *(void *)(v3 + 56)  = a3;
  return result;
}

uint64_t sub_1001AADB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E42AC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AAE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E42AC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANAttribute.DatapathExtension.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 2));
  Swift::UInt8 v4 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v5 = *(_BYTE *)(v2 + 5);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 6);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 7);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 3));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 9));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 10));
  if ((*(_BYTE *)(v2 + 12) & 1) != 0)
  {
    Swift::UInt8 v9 = 0;
  }

  else
  {
    Swift::UInt8 v9 = *(_BYTE *)(v2 + 11);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  if ((*(_BYTE *)(v2 + 19) & 1) != 0)
  {
    LOBYTE(v10)  = 0;
  }

  else
  {
    unsigned int v11 = *(unsigned __int16 *)(v2 + 17);
    unsigned int v12 = *(_DWORD *)(v2 + 13);
    unint64_t v13 = v12 | ((unint64_t)*(unsigned __int16 *)(v2 + 17) << 32);
    unint64_t v14 = v13 >> 8;
    unint64_t v15 = v13 >> 16;
    unint64_t v16 = v13 >> 24;
    unsigned int v10 = v11 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v11);
  }

  Hasher._combine(_:)(v10);
  unint64_t v17 = *(void *)(v2 + 32);
  if (v17 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v18 = *(void *)(v2 + 24);
    Hasher._combine(_:)(1u);
    sub_100020AFC(v18, v17);
    Data.hash(into:)(a1, v18, v17);
    sub_100020B40(v18, v17);
  }

  uint64_t v19 = *(void *)(v2 + 40);
  if (v19 == 4LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v22 = v2 + 48;
    uint64_t v20 = *(void *)(v2 + 48);
    unint64_t v21 = *(void *)(v22 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    sub_100020AFC(v20, v21);
    Data.hash(into:)(a1, v20, v21);
    sub_1001062E0(v19, v20, v21);
  }

Swift::Int NANAttribute.DatapathExtension.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001AB08C(uint64_t a1)
{
  return Hasher._finalize()();
}

double NANAttribute.DatapathExtension.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2  = v7[0];
    a2[1]  = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2]  = v8;
    a2[3]  = v6;
  }

  return result;
}

uint64_t sub_1001AB104(void *a1)
{
  return NANAttribute.DatapathExtension.encode(to:)(a1);
}

uint64_t NANAttribute.DatapathExtension.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v51, v4, v5);
  uint64_t v6 = v52;
  uint64_t v7 = v53;
  uint64_t v8 = *v1;
  sub_1000237C8((uint64_t)v51, v52);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    LOBYTE(v48)  = v3[1];
    uint64_t v9 = v52;
    uint64_t v10 = v53;
    sub_1000237C8((uint64_t)v51, v52);
    uint64_t v11 = sub_100002274(&qword_10040A8D8);
    uint64_t v12 = sub_1000572E4(&qword_10040A8E0, &qword_10040A8D8, (uint64_t)&unk_100348B28);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, v11, v12, v9, v10);
    LOBYTE(v48)  = v3[2];
    uint64_t v13 = v52;
    uint64_t v14 = v53;
    sub_1000237C8((uint64_t)v51, v52);
    unint64_t v15 = sub_1001D112C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, &type metadata for NANReasonCode, v15, v13, v14);
    LODWORD(v48)  = *(_DWORD *)(v3 + 3);
    WORD2(v48)  = *(_WORD *)(v3 + 7);
    uint64_t v16 = v52;
    uint64_t v17 = v53;
    sub_1000237C8((uint64_t)v51, v52);
    unint64_t v18 = sub_1000286C4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, &type metadata for WiFiAddress, v18, v16, v17);
    uint64_t v19 = v52;
    uint64_t v20 = v53;
    uint64_t v21 = v3[9];
    sub_1000237C8((uint64_t)v51, v52);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v21, v19, v20);
    unsigned __int8 v22 = v3[10];
    LOBYTE(v48)  = v22;
    uint64_t v23 = v52;
    uint64_t v24 = v53;
    sub_1000237C8((uint64_t)v51, v52);
    unint64_t v25 = sub_1001D1C70();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v48,  &type metadata for NANAttribute.DatapathExtension.Control,  v25,  v23,  v24);
    sub_1000586C0((uint64_t)(v3 + 11), (uint64_t)v55, &qword_10040A7A8);
    sub_1000586C0((uint64_t)v55, (uint64_t)v56, &qword_10040A7A8);
    if ((v56[1] & 1) == 0 && (v22 & 8) != 0)
    {
      uint64_t v27 = v52;
      uint64_t v28 = v53;
      uint64_t v29 = v56[0];
      sub_1000237C8((uint64_t)v51, v52);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v29, v27, v28);
    }

    sub_1000586C0((uint64_t)(v3 + 13), (uint64_t)v54, &qword_10040A8F8);
    sub_1000586C0((uint64_t)v54, (uint64_t)&v57, &qword_10040A8F8);
    if ((v59 & 1) == 0 && (v22 & 0x10) != 0)
    {
      LODWORD(v48)  = v57;
      WORD2(v48)  = v58;
      uint64_t v30 = v52;
      uint64_t v31 = v53;
      sub_1000237C8((uint64_t)v51, v52);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, &type metadata for WiFiAddress, v18, v30, v31);
    }

    unint64_t v32 = *((void *)v3 + 4);
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *((void *)v3 + 3);
      sub_100020AFC(v33, *((void *)v3 + 4));
      unint64_t v34 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v35 = type metadata accessor for BinaryEncoder();
      uint64_t v36 = (uint64_t *)swift_allocObject(v35, 40LL, 7LL);
      *((_OWORD *)v36 + 1)  = xmmword_1003398F0;
      v36[4]  = v34;
      uint64_t v49 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v50 = sub_10016F300();
      char v48 = v36;
      uint64_t v37 = (void *)sub_1000237C8((uint64_t)&v48, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_beginAccess(*v37 + 16LL, v47, 33LL, 0LL);
      sub_10002255C(v33, v32);
      swift_retain();
      sub_1000FA9C4(v33, v32);
      swift_endAccess(v47);
      sub_100002AC4(&v48);
      sub_100020B40(v33, v32);
      swift_beginAccess(v36 + 2, v46, 0LL, 0LL);
      unint64_t v38 = v36[3];
      sub_100020AFC(v36[2], v38);
      swift_release(v36);
      __asm { BR              X9 }
    }

    uint64_t v39 = *((void *)v3 + 5);
    if (v39 != 4LL)
    {
      uint64_t v41 = *((void *)v3 + 6);
      unint64_t v40 = *((void *)v3 + 7);
      sub_100020AFC(v41, v40);
      unint64_t v42 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v43 = type metadata accessor for BinaryEncoder();
      __int128 v44 = (uint64_t *)swift_allocObject(v43, 40LL, 7LL);
      *((_OWORD *)v44 + 1)  = xmmword_1003398F0;
      v44[4]  = v42;
      uint64_t v49 = (ValueMetadata *)v43;
      unint64_t v50 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
      char v48 = v44;
      sub_1001062A0(v39, v41, v40);
      swift_retain();
      NANServiceInfo.encode(to:)((uint64_t)&v48, v39, v41, v40);
      sub_100002AC4(&v48);
      sub_1001062E0(v39, v41, v40);
      swift_beginAccess(v44 + 2, &v48, 0LL, 0LL);
      unint64_t v45 = v44[3];
      sub_100020AFC(v44[2], v45);
      swift_release(v44);
      __asm { BR              X9 }
    }
  }

  return sub_100002AC4(v51);
}

BOOL sub_1001AB8F0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  __int128 v3 = a1[3];
  v7[2]  = a1[2];
  _OWORD v7[3] = v3;
  __int128 v4 = a2[1];
  v8[0]  = *a2;
  v8[1]  = v4;
  __int128 v5 = a2[3];
  v8[2]  = a2[2];
  v8[3]  = v5;
  return _s7CoreP2P12NANAttributeO17DatapathExtensionV23__derived_struct_equalsySbAE_AEtFZ_0( (unsigned __int8 *)v7,  (unsigned __int8 *)v8);
}

void *NANAttribute.Availability.Control.publicAvailabilityChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.publicAvailabilityChange;
}

void *NANAttribute.Availability.Control.dataClusterChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.dataClusterChange;
}

void *NANAttribute.Availability.Control.multicastScheduleChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.multicastScheduleChange;
}

void *NANAttribute.Availability.Control.multicastScheduleChangeChanged.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.multicastScheduleChangeChanged;
}

uint64_t NANAttribute.Availability.Control.scheduleChangeFlags.getter(__int16 a1)
{
  return a1 & 0x3F0;
}

uint64_t sub_1001AB970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D47D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AB9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D47D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.Availability.hash(into:)(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain(a3);
  sub_10008300C(a1, a3);
  return swift_bridgeObjectRelease(a3);
}

uint64_t static NANAttribute.Availability.__derived_struct_equals(_:_:)( unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1001ABA9C()
{
  unint64_t v1 = 0x6C6F72746E6F63LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65636E6575716573LL;
  }
}

uint64_t sub_1001ABB00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E27AC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001ABB24(uint64_t a1)
{
  unint64_t v2 = sub_1001D1CB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001ABB4C(uint64_t a1)
{
  unint64_t v2 = sub_1001D1CB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Availability.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040A918);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D1CB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Availability.CodingKeys,  &type metadata for NANAttribute.Availability.CodingKeys,  v13,  v11,  v12);
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v23, v7);
  if (!v3)
  {
    __int16 v21 = WORD1(a2);
    char v22 = 1;
    unint64_t v14 = sub_1001D1CF8();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v21,  &v22,  v7,  &type metadata for NANAttribute.Availability.Control,  v14);
    uint64_t v19 = a3;
    char v20 = 2;
    uint64_t v15 = sub_100002274(&qword_10040A930);
    uint64_t v16 = sub_100087780( &qword_10040A938,  &qword_10040A930,  (void (*)(void))sub_1001D1D3C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.Availability.hashValue.getter(unsigned int a1, uint64_t a2)
{
  Swift::UInt8 v3 = a1;
  unsigned int v4 = HIWORD(a1);
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain(a2);
  sub_10008300C((uint64_t)v6, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.Availability.init(from:)(void *a1)
{
  return sub_1001CAB60(a1) & 0xFFFF00FFLL;
}

Swift::Int sub_1001ABDB4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(_BYTE *)v0;
  Swift::UInt16 v3 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain(v1);
  sub_10008300C((uint64_t)v5, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001ABE30(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt16 v4 = *(_WORD *)(v1 + 2);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain(v3);
  sub_10008300C(a1, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001ABE88(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Swift::UInt16 v4 = *(_WORD *)(v1 + 2);
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain(v2);
  sub_10008300C((uint64_t)v6, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001ABF00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CAB60(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(void *)(a2 + 8)  = v5;
  }

  return result;
}

uint64_t sub_1001ABF34(void *a1)
{
  return NANAttribute.Availability.encode(to:)(a1, *v1 | (*((unsigned __int16 *)v1 + 1) << 16), *((void *)v1 + 1));
}

uint64_t sub_1001ABF58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  else {
    return 0LL;
  }
}

void *NANAttribute.DataCluster.Control.selectedDataCluster.unsafeMutableAddressor()
{
  return &static NANAttribute.DataCluster.Control.selectedDataCluster;
}

uint64_t sub_1001ABF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4938();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001ABFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4938();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void __swiftcall NANAttribute.DataCluster.init(clusterID:control:scheduleEntries:)( CoreP2P::NANAttribute::DataCluster *__return_ptr retstr, CoreP2P::WiFiAddress *clusterID, CoreP2P::NANAttribute::DataCluster::Control control, Swift::OpaquePointer scheduleEntries)
{
}

uint64_t sub_1001AC050()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_10040E3A0);
  uint64_t v2 = swift_allocObject(v1, 64LL, 7LL);
  *(_OWORD *)(v2 + 16)  = xmmword_100339900;
  if (NANIntervalDuration.timeUnits.getter(0))
  {
    __int16 v3 = sub_1001A084C(3u, 3uLL, 3LL);
    uint64_t result = sub_1000FB08C((uint64_t)&off_1003D7558);
    *(_BYTE *)(v2 + 32)  = 0;
    *(_WORD *)(v2 + 40)  = v3;
    *(void *)(v2 + 48)  = result;
    *(void *)(v2 + 56)  = v5;
    static NANAttribute.DataCluster.empty  = 0;
    *(int *)((char *)&static NANAttribute.DataCluster.empty + 3)  = 0;
    qword_100410900  = v2;
  }

  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError(v0, "CoreP2P/NANAvailability.swift", 29LL, 1LL);
    __break(1u);
  }

  return result;
}

int *NANAttribute.DataCluster.empty.unsafeMutableAddressor()
{
  if (qword_100404410 != -1) {
    swift_once(&qword_100404410, sub_1001AC050);
  }
  return &static NANAttribute.DataCluster.empty;
}

unint64_t static NANAttribute.DataCluster.empty.getter()
{
  if (qword_100404410 != -1) {
    swift_once(&qword_100404410, sub_1001AC050);
  }
  unint64_t v0 = static NANAttribute.DataCluster.empty | ((unint64_t)byte_1004108FC << 32) | ((unint64_t)byte_1004108FD << 40) | ((unint64_t)byte_1004108FE << 48);
  swift_bridgeObjectRetain(qword_100410900);
  return v0;
}

uint64_t NANAttribute.DataCluster.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain(a3);
  sub_100082834(a1, a3);
  return swift_bridgeObjectRelease(a3);
}

uint64_t static NANAttribute.DataCluster.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C6FFC(a1 & 0xFFFFFFFFFFFFFFLL, a2, a3 & 0xFFFFFFFFFFFFFFLL, a4);
}

uint64_t sub_1001AC27C()
{
  uint64_t v1 = 0x6C6F72746E6F63LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x656C756465686373LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4972657473756C63LL;
  }
}

uint64_t sub_1001AC2E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2908(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001AC30C(uint64_t a1)
{
  unint64_t v2 = sub_1001D1D80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AC334(uint64_t a1)
{
  unint64_t v2 = sub_1001D1D80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DataCluster.encode(to:)(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  uint64_t v21 = a3;
  unint64_t v22 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = a2 >> 40;
  uint64_t v7 = sub_100002274(&qword_10040A948);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D1D80();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DataCluster.CodingKeys,  &type metadata for NANAttribute.DataCluster.CodingKeys,  v13,  v11,  v12);
  LOBYTE(v26)  = a2;
  BYTE1(v26)  = v5;
  BYTE2(v26)  = v6;
  BYTE3(v26)  = v22;
  BYTE4(v26)  = v23;
  BYTE5(v26)  = v24;
  char v27 = 0;
  unint64_t v14 = sub_1000286C4();
  uint64_t v15 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v7, &type metadata for WiFiAddress, v14);
  if (!v15)
  {
    uint64_t v16 = v21;
    LOBYTE(v26)  = BYTE6(a2);
    char v27 = 1;
    unint64_t v17 = sub_1001D1DC4();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v26,  &v27,  v7,  &type metadata for NANAttribute.DataCluster.Control,  v17);
    uint64_t v26 = v16;
    char v27 = 2;
    uint64_t v18 = sub_100002274(&qword_10040A960);
    uint64_t v19 = sub_100087780( &qword_10040A968,  &qword_10040A960,  (void (*)(void))sub_1001D1E08,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v7, v18, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.DataCluster.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)(v11, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain(a2);
  sub_100082834((uint64_t)v11, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.DataCluster.init(from:)(void *a1)
{
  return sub_1001CA958(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_1001AC658()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(_BYTE *)v0;
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 6);
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain(v1);
  sub_100082834((uint64_t)v10, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001AC73C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 6);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain(v3);
  sub_100082834(a1, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001AC7E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 6);
  Hasher.init(_seed:)(v11, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain(v2);
  sub_100082834((uint64_t)v11, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001AC8C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CA958(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(_BYTE *)(a2 + 3)  = BYTE3(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
    *(_BYTE *)(a2 + 6)  = BYTE6(result);
    *(void *)(a2 + 8)  = v5;
  }

  return result;
}

uint64_t sub_1001AC924(void *a1)
{
  return NANAttribute.DataCluster.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48),  *((void *)v1 + 1));
}

uint64_t sub_1001AC958(unsigned int *a1, unsigned int *a2)
{
  return sub_1001C6FFC( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48),  *((void *)a1 + 1),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48),  *((void *)a2 + 1));
}

void *NANAttribute.DeviceLink.Control.peerID.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.peerID;
}

void *NANAttribute.DeviceLink.Control.immutableSchedule.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.immutableSchedule;
}

void *NANAttribute.DeviceLink.Control.dataCluster.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.dataCluster;
}

void *NANAttribute.DeviceLink.Control.qos.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.qos;
}

void *NANAttribute.DeviceLink.Control.maximumIdlePeriod.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.maximumIdlePeriod;
}

void *NANAttribute.DeviceLink.Control.linkType.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.linkType;
}

uint64_t NANAttribute.DeviceLink.Control.setupReason.getter(char a1)
{
  char v1 = sub_100071528(6uLL, 2LL, a1);
  if (v1 == 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001ACA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4AE8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001ACAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4AE8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001ACAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4268();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001ACB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4268();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

CoreP2P::NANAttribute::DeviceLink::Status_optional __swiftcall NANAttribute.DeviceLink.Status.init(rawValue:)( CoreP2P::NANAttribute::DeviceLink::Status_optional rawValue)
{
  return rawValue;
}

unsigned __int8 *sub_1001ACBAC@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 3) {
    LOBYTE(v2)  = 3;
  }
  *a2  = v2;
  return result;
}

uint64_t sub_1001ACBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4224();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001ACC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4224();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.DeviceLink.type.getter(__int16 a1)
{
  unsigned int v1 = sub_100071528(0LL, 4LL, SHIBYTE(a1));
  if (v1 >= 5) {
    return 5LL;
  }
  else {
    return v1;
  }
}

unint64_t NANAttribute.DeviceLink.status.getter(__int16 a1)
{
  unint64_t result = sub_100071528(4uLL, 4LL, SHIBYTE(a1));
  return result;
}

unint64_t NANAttribute.RangingSetup.control.getter(unint64_t a1)
{
  return a1 >> 24;
}

uint64_t NANAttribute.RangingSetup.control.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 3)  = result;
  return result;
}

unint64_t NANAttribute.DeviceLink.peerID.getter(unint64_t a1)
{
  return BYTE4(a1) | (((a1 >> 40) & 1) << 8);
}

uint64_t NANAttribute.DeviceLink.peerID.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 4)  = result;
  *(_BYTE *)(v1 + 5)  = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.DeviceLink.maximumIdlePeriod.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NANAttribute.DeviceLink.maximumIdlePeriod.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8)  = result;
  *(_BYTE *)(v2 + 16)  = a2 & 1;
  return result;
}

uint64_t NANAttribute.DeviceLink.hash(into:)( uint64_t a1, unint64_t a2, Swift::UInt64 a3, char a4, uint64_t a5)
{
  unint64_t v10 = a2 >> 8;
  unint64_t v11 = a2 >> 16;
  unint64_t v12 = a2 >> 24;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  if ((a2 & 0x10000000000LL) != 0)
  {
    LOBYTE(v13)  = 0;
  }

  else
  {
    unint64_t v13 = HIDWORD(a2);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  if ((a4 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a3);
  }

  swift_bridgeObjectRetain(a5);
  sub_100082834(a1, a5);
  return swift_bridgeObjectRelease(a5);
}

uint64_t static NANAttribute.DeviceLink.__derived_struct_equals(_:_:)( unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return sub_1001C63A0( a1 & 0xFFFFFFFFFFLL | (((a1 >> 40) & 1) << 40),  a2,  a3 & 1,  a4,  a5 & 0xFFFFFFFFFFLL | (((a5 >> 40) & 1) << 40),  a6,  a7 & 1,  a8);
}

Swift::Int NANAttribute.DeviceLink.hashValue.getter( unint64_t a1, Swift::UInt64 a2, char a3, uint64_t a4)
{
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  Hasher.init(_seed:)(v13, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if ((a1 & 0x10000000000LL) != 0)
  {
    LOBYTE(v11)  = 0;
  }

  else
  {
    unint64_t v11 = HIDWORD(a1);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }

  swift_bridgeObjectRetain(a4);
  sub_100082834((uint64_t)v13, a4);
  swift_bridgeObjectRelease(a4);
  return Hasher._finalize()();
}

Swift::Int sub_1001ACF7C()
{
  return NANAttribute.DeviceLink.hashValue.getter( *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40),  *((void *)v0 + 1),  *((_BYTE *)v0 + 16),  *((void *)v0 + 3));
}

uint64_t sub_1001ACFB4(uint64_t a1)
{
  return NANAttribute.DeviceLink.hash(into:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40),  *((void *)v1 + 1),  *((_BYTE *)v1 + 16),  *((void *)v1 + 3));
}

Swift::Int sub_1001ACFEC(uint64_t a1)
{
  Swift::UInt8 v2 = *(_BYTE *)(v1 + 4);
  char v3 = *(_BYTE *)(v1 + 5);
  Swift::UInt64 v4 = *(void *)(v1 + 8);
  int v5 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  Swift::UInt8 v7 = *(_BYTE *)v1;
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 3);
  Hasher.init(_seed:)(v12, a1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if ((v3 & 1) != 0) {
    Swift::UInt8 v2 = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v2);
  if (v5)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }

  swift_bridgeObjectRetain(v6);
  sub_100082834((uint64_t)v12, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1001AD0F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001D22A4(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(_BYTE *)(a2 + 3)  = BYTE3(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result) & 1;
    *(void *)(a2 + 8)  = v5;
    *(_BYTE *)(a2 + 16)  = v6 & 1;
    *(void *)(a2 + 24)  = v7;
  }

  return result;
}

unint64_t NANAttribute.DeviceLink.init(from:)(void *a1)
{
  unint64_t result = sub_1001D22A4(a1);
  if (!v1) {
    return result & 0xFFFFFFFFFFLL | (((result >> 40) & 1) << 40);
  }
  return result;
}

uint64_t sub_1001AD194(void *a1)
{
  return NANAttribute.DeviceLink.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40),  *((void *)v1 + 1),  *((_BYTE *)v1 + 16),  *((void *)v1 + 3));
}

uint64_t NANAttribute.DeviceLink.encode(to:)( void *a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  dispatch thunk of Encoder.unkeyedContainer()(v42, v10, v11);
  uint64_t v12 = v43;
  uint64_t v13 = v44;
  sub_1000237C8((uint64_t)v42, v43);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v12, v13);
  if (v5) {
    return sub_100002AC4(v42);
  }
  LOBYTE(v45)  = BYTE1(a2);
  uint64_t v14 = v43;
  uint64_t v41 = v44;
  sub_1000237C8((uint64_t)v42, v43);
  char v15 = a4;
  unint64_t v16 = a3;
  uint64_t v17 = sub_100002274(&qword_10040A978);
  uint64_t v18 = a5;
  uint64_t v19 = sub_1000572E4(&qword_10040A980, &qword_10040A978, (uint64_t)&unk_100348B28);
  uint64_t v20 = v17;
  unint64_t v21 = v16;
  char v22 = v15;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v45, v20, v19, v14, v41);
  LOBYTE(v45)  = BYTE2(a2);
  uint64_t v23 = v43;
  uint64_t v24 = v44;
  sub_1000237C8((uint64_t)v42, v43);
  unint64_t v25 = sub_1001D112C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v45, &type metadata for NANReasonCode, v25, v23, v24);
  char v26 = BYTE3(a2);
  LOBYTE(v45)  = BYTE3(a2);
  uint64_t v27 = v43;
  uint64_t v28 = v44;
  sub_1000237C8((uint64_t)v42, v43);
  unint64_t v29 = sub_1001D25E8();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v45,  &type metadata for NANAttribute.DeviceLink.Control,  v29,  v27,  v28);
  if ((a2 & 0x10000000000LL) == 0 && (a2 & 0x1000000) != 0)
  {
    unint64_t v31 = HIDWORD(a2);
    uint64_t v32 = v43;
    uint64_t v33 = v44;
    sub_1000237C8((uint64_t)v42, v43);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v31, v32, v33);
  }

  if ((v22 & 1) != 0 || (v26 & 0x10) == 0)
  {
LABEL_13:
    if (*(void *)(v18 + 16))
    {
      if ((v26 & 2) != 0)
      {
        uint64_t v45 = v18;
        uint64_t v37 = v43;
        uint64_t v38 = v44;
        sub_1000237C8((uint64_t)v42, v43);
        uint64_t v39 = sub_100002274(&qword_10040A960);
        uint64_t v40 = sub_100087780( &qword_10040A968,  &qword_10040A960,  (void (*)(void))sub_1001D1E08,  (uint64_t)&protocol conformance descriptor for <A> [A]);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v45, v39, v40, v37, v38);
      }
    }

    return sub_100002AC4(v42);
  }

  if (!(v21 >> 26))
  {
    unint64_t v34 = v21 >> 10;
    uint64_t v35 = v43;
    uint64_t v36 = v44;
    sub_1000237C8((uint64_t)v42, v43);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v34, v35, v36);
    goto LABEL_13;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001AD4EC(unsigned int *a1, unsigned int *a2)
{
  return sub_1001C63A0( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40),  *((void *)a1 + 1),  *((_BYTE *)a1 + 16),  *((void *)a1 + 3),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40),  *((void *)a2 + 1),  *((_BYTE *)a2 + 16),  *((void *)a2 + 3));
}

void NANAttribute.DeviceLinkQoS.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static NANAttribute.DeviceLinkQoS.__derived_struct_equals(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 == a2 && HIWORD(a1) == HIWORD(a2);
}

uint64_t sub_1001AD5A0()
{
  if (*v0) {
    return 0x4C6D756D6978616DLL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1001AD5EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2A8C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001AD610(uint64_t a1)
{
  unint64_t v2 = sub_1001D262C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AD638(uint64_t a1)
{
  unint64_t v2 = sub_1001D262C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceLinkQoS.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_10040A990);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt8 v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D262C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys,  &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys,  v11,  v9,  v10);
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2), &v14, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.DeviceLinkQoS.hashValue.getter(unsigned int a1)
{
  Swift::UInt8 v1 = a1;
  unsigned int v2 = HIWORD(a1);
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.DeviceLinkQoS.init(from:)(void *a1)
{
  return sub_1001CB1EC(a1) & 0xFFFF00FFLL;
}

Swift::Int sub_1001AD7E8()
{
  Swift::UInt8 v1 = *(_BYTE *)v0;
  Swift::UInt16 v2 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001AD844()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001AD880(uint64_t a1)
{
  Swift::UInt8 v2 = *(_BYTE *)v1;
  Swift::UInt16 v3 = *(_WORD *)(v1 + 2);
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001AD8D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CB1EC(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
  }

  return result;
}

uint64_t sub_1001AD908(void *a1)
{
  return NANAttribute.DeviceLinkQoS.encode(to:)(a1, *v1 | (*((unsigned __int16 *)v1 + 1) << 16));
}

BOOL sub_1001AD928(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1);
}

void *NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.overwriteAll.unsafeMutableAddressor()
{
  return &static NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.overwriteAll;
}

unint64_t NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.mapID.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 256LL;
  }
  else {
    return sub_100071528(1uLL, 4LL, a1) & 0xF;
  }
}

uint64_t sub_1001AD9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4D28();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001ADA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4D28();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.UnalignedSchedule.UnalignedWindowControl.entryType.getter(uint64_t a1)
{
  return sub_1001ADA80(a1, (uint64_t (*)(void, uint64_t, uint64_t))sub_100071528);
}

uint64_t sub_1001ADA80(uint64_t a1, uint64_t (*a2)(void, uint64_t, uint64_t))
{
  uint64_t result = a2(0LL, 2LL, a1);
  if (result > 3u)
  {
    unint64_t v3 = sub_1000033FC();
    uint64_t v4 = swift_allocError(&type metadata for WiFiError, v3, 0LL, 0LL);
    *(_OWORD *)uint64_t v5 = xmmword_100337020;
    *(_BYTE *)(v5 + 16)  = 2;
    uint64_t v6 = v4;
    swift_willThrow(v4);
    uint64_t result = swift_unexpectedError(v6, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
    __break(1u);
  }

  return result;
}

void *NANAttribute.UnalignedSchedule.UnalignedWindowControl.availableOnEntry.unsafeMutableAddressor()
{
  return &static NANAttribute.UnalignedSchedule.UnalignedWindowControl.availableOnEntry;
}

uint64_t NANAttribute.UnalignedSchedule.UnalignedWindowControl.rxNSS.getter(uint64_t a1)
{
  return sub_1001ADB58(a1, 3LL, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007153C);
}

uint64_t sub_1001ADB58(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  return a3(a2, 4LL, a1);
}

uint64_t sub_1001ADBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4E90();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001ADC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4E90();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t NANAttribute.UnalignedSchedule.unalignedWindowOverwrite.getter( uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 >> 8;
}

uint64_t NANAttribute.UnalignedSchedule.unalignedWindowControl.getter(uint64_t a1, uint64_t a2, int a3)
{
  return BYTE2(a3) | ((HIBYTE(a3) & 1) << 8);
}

uint64_t NANAttribute.UnalignedSchedule.unalignedWindowControl.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 18)  = result;
  *(_BYTE *)(v1 + 19)  = BYTE1(result) & 1;
  return result;
}

unint64_t NANAttribute.UnalignedSchedule.entry.getter( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return __PAIR64__(a4, HIDWORD(a3));
}

uint64_t NANAttribute.UnalignedSchedule.entry.setter(uint64_t result, __int16 a2)
{
  *(void *)(v2 + 20)  = result;
  *(_WORD *)(v2 + 28)  = a2;
  return result;
}

void NANAttribute.UnalignedSchedule.hash(into:)( int a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  Swift::UInt32 v6 = a3;
  int v15 = HIDWORD(a4);
  int v16 = a5;
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = HIDWORD(a3);
  unint64_t v10 = a4 >> 8;
  char v11 = BYTE3(a4);
  unsigned int v12 = WORD2(a5);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(v10);
  if ((v11 & 1) != 0)
  {
    LOBYTE(v13)  = 0;
  }

  else
  {
    unint64_t v13 = a4 >> 16;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  if (v12 >> 8 >= 0xFF)
  {
LABEL_9:
    Swift::UInt8 v14 = 0;
    goto LABEL_10;
  }

  Hasher._combine(_:)(1u);
  if ((v12 & 0x100) != 0)
  {
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(HIWORD(v15));
    Hasher._combine(_:)(v16);
    if ((v12 & 1) == 0)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(HIWORD(v16));
      return;
    }

    goto LABEL_9;
  }

  Swift::UInt8 v14 = v15;
LABEL_10:
  Hasher._combine(_:)(v14);
}

uint64_t static NANAttribute.UnalignedSchedule.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)&var10[4]  = HIDWORD(a7);
  *(void *)&var10[8]  = a8;
  uint64_t v8 = *(void *)&var10[4];
  *(_WORD *)var10  = a3;
  var10[2]  = BYTE2(a3);
  var10[3]  = BYTE3(a3);
  *(void *)&var10[4]  = __PAIR64__(a4, HIDWORD(a3));
  *(_WORD *)&var10[12]  = WORD2(a4);
  uint64_t v9 = *(void *)var10;
  uint64_t v10 = *(void *)&var10[8];
  *(_WORD *)var10  = a7;
  var10[2]  = BYTE2(a7);
  var10[3]  = BYTE3(a7);
  *(void *)&var10[4]  = v8;
  *(_WORD *)&var10[12]  = WORD2(a8);
  return sub_1001C63F4( a1 & 0xFFFFFFFF0000FFFFLL,  a2,  v9,  v10,  a5 & 0xFFFFFFFF0000FFFFLL,  a6,  *(uint64_t *)var10,  *(uint64_t *)&var10[8]);
}

Swift::Int NANAttribute.UnalignedSchedule.hashValue.getter( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4 = a3;
  *(void *)&v14[0]  = a3;
  *((void *)&v14[0] + 1)  = a4;
  unint64_t v7 = a3 >> 8;
  unint64_t v8 = a3 >> 16;
  char v9 = BYTE3(a3);
  uint64_t v10 = *(void *)((char *)v14 + 4);
  unint64_t v11 = HIDWORD(a4);
  Hasher.init(_seed:)(v14, 0LL);
  LOBYTE(v13)  = v4;
  BYTE1(v13)  = v7;
  BYTE2(v13)  = v8;
  BYTE3(v13)  = v9;
  *(void *)((char *)&v13 + 4)  = v10;
  WORD6(v13)  = v11;
  NANAttribute.UnalignedSchedule.hash(into:)((int)v14, a1 & 0xFFFFFFFF0000FFFFLL, a2, v13, *((uint64_t *)&v13 + 1));
  return Hasher._finalize()();
}

Swift::Int sub_1001ADEF0()
{
  unint64_t v1 = *((void *)v0 + 1);
  unsigned __int16 v2 = v0[8];
  char v3 = *((_BYTE *)v0 + 18);
  char v4 = *((_BYTE *)v0 + 19);
  uint64_t v5 = *(void *)(v0 + 10);
  unsigned __int16 v6 = v0[14];
  uint64_t v7 = *v0;
  uint64_t v8 = *((unsigned int *)v0 + 1);
  Hasher.init(_seed:)(v11, 0LL);
  LOWORD(v10)  = v2;
  BYTE2(v10)  = v3;
  BYTE3(v10)  = v4;
  *(void *)((char *)&v10 + 4)  = v5;
  WORD6(v10)  = v6;
  NANAttribute.UnalignedSchedule.hash(into:)((int)v11, v7 | (v8 << 32), v1, v10, *((uint64_t *)&v10 + 1));
  return Hasher._finalize()();
}

void sub_1001ADF84(int a1)
{
  BYTE2(v2)  = *((_BYTE *)v1 + 18);
  BYTE3(v2)  = *((_BYTE *)v1 + 19);
  *(void *)((char *)&v2 + 4)  = *(void *)(v1 + 10);
  WORD6(v2)  = v1[14];
  NANAttribute.UnalignedSchedule.hash(into:)( a1,  *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32),  *((void *)v1 + 1),  v2,  *((uint64_t *)&v2 + 1));
}

Swift::Int sub_1001ADFC4(uint64_t a1)
{
  unint64_t v2 = *((void *)v1 + 1);
  unsigned __int16 v3 = v1[8];
  char v4 = *((_BYTE *)v1 + 18);
  char v5 = *((_BYTE *)v1 + 19);
  uint64_t v6 = *(void *)(v1 + 10);
  unsigned __int16 v7 = v1[14];
  uint64_t v8 = *v1;
  uint64_t v9 = *((unsigned int *)v1 + 1);
  Hasher.init(_seed:)(v12, a1);
  LOWORD(v11)  = v3;
  BYTE2(v11)  = v4;
  BYTE3(v11)  = v5;
  *(void *)((char *)&v11 + 4)  = v6;
  WORD6(v11)  = v7;
  NANAttribute.UnalignedSchedule.hash(into:)((int)v12, v8 | (v9 << 32), v2, v11, *((uint64_t *)&v11 + 1));
  return Hasher._finalize()();
}

uint64_t sub_1001AE054@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CF328(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_DWORD *)(a2 + 4)  = HIDWORD(result);
    *(void *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 16)  = v6;
    *(_BYTE *)(a2 + 18)  = BYTE2(v6);
    *(_BYTE *)(a2 + 19)  = BYTE3(v6);
    *(void *)(a2 + 20)  = __PAIR64__(v7, HIDWORD(v6));
    *(_WORD *)(a2 + 28)  = WORD2(v7);
  }

  return result;
}

uint64_t NANAttribute.UnalignedSchedule.init(from:)(void *a1)
{
  uint64_t result = sub_1001CF328(a1);
  if (!v1) {
    return result & 0xFFFFFFFF0000FFFFLL;
  }
  return result;
}

uint64_t sub_1001AE128(void *a1)
{
  LOWORD(sub_1000208D8(v2, v3) = v1[8];
  BYTE2(sub_1000208D8(v2, v3) = *((_BYTE *)v1 + 18);
  BYTE3(sub_1000208D8(v2, v3) = *((_BYTE *)v1 + 19);
  *(void *)((char *)&v3 + 4)  = *(void *)(v1 + 10);
  WORD6(sub_1000208D8(v2, v3) = v1[14];
  return NANAttribute.UnalignedSchedule.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32),  *((void *)v1 + 1),  v3,  *((uint64_t *)&v3 + 1));
}

uint64_t NANAttribute.UnalignedSchedule.encode(to:)( void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v6 = WORD2(a5);
  *(void *)&__int128 v50 = a4;
  *((void *)&v50 + 1)  = a5;
  char v10 = BYTE3(a4);
  uint64_t v53 = *(void *)((char *)&v50 + 4);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  dispatch thunk of Encoder.unkeyedContainer()(&v50, v11, v12);
  uint64_t v13 = v51;
  uint64_t v14 = v52;
  sub_1000237C8((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v13, v14);
  if (v5) {
    return sub_100002AC4(&v50);
  }
  uint64_t v15 = v51;
  uint64_t v16 = v52;
  sub_1000237C8((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2 >> 8, v15, v16);
  unint64_t v17 = HIDWORD(a2);
  uint64_t v18 = v51;
  uint64_t v19 = v52;
  sub_1000237C8((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v17, v18, v19);
  uint64_t v20 = v51;
  uint64_t v21 = v52;
  sub_1000237C8((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a3, v20, v21);
  unint64_t v22 = HIDWORD(a3);
  uint64_t v23 = v51;
  uint64_t v24 = v52;
  sub_1000237C8((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v22, v23, v24);
  uint64_t v25 = v51;
  uint64_t v26 = v52;
  sub_1000237C8((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a4, v25, v26);
  v45[0]  = BYTE1(a4);
  uint64_t v27 = v51;
  uint64_t v28 = v52;
  sub_1000237C8((uint64_t)&v50, v51);
  unint64_t v29 = sub_1001D2670();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v45,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  v29,  v27,  v28);
  char v30 = HIBYTE(v6) > 0xFEu ? 1 : v10;
  if ((v30 & 1) != 0) {
    return sub_100002AC4(&v50);
  }
  if ((v6 & 0x100) != 0)
  {
    int v39 = sub_100071528(0LL, 2LL, SBYTE2(a4));
    if ((v39 - 2) >= 2 && v39)
    {
      if (v39 != 1) {
        goto LABEL_20;
      }
    }

    else
    {
      unsigned int v40 = sub_100071528(0LL, 2LL, SBYTE2(a4));
      if (v40 < 2) {
        return sub_100002AC4(&v50);
      }
      if (v40 != 2)
      {
        if (v40 != 3) {
          goto LABEL_20;
        }
        return sub_100002AC4(&v50);
      }
    }

    v45[0]  = v53;
    __int16 v46 = WORD1(v53);
    char v47 = BYTE4(v53);
    __int16 v48 = HIWORD(v53);
    char v49 = v6 & 1;
    uint64_t v35 = v51;
    uint64_t v36 = v52;
    sub_1000237C8((uint64_t)&v50, v51);
    unint64_t v37 = sub_100086BA8();
    uint64_t v38 = &type metadata for NANBitmap.Channel;
    goto LABEL_18;
  }

  unsigned __int8 v31 = sub_100071528(0LL, 2LL, SBYTE2(a4));
  if (!v31)
  {
    v45[0]  = BYTE2(a4);
    uint64_t v32 = v51;
    uint64_t v33 = v52;
    sub_1000237C8((uint64_t)&v50, v51);
    unint64_t v34 = sub_1001D26B4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v45,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  v34,  v32,  v33);
    v45[0]  = v53;
    uint64_t v35 = v51;
    uint64_t v36 = v52;
    sub_1000237C8((uint64_t)&v50, v51);
    unint64_t v37 = sub_100086BEC();
    uint64_t v38 = &type metadata for NANBitmap.Band;
LABEL_18:
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v45, v38, v37, v35, v36);
    return sub_100002AC4(&v50);
  }

uint64_t sub_1001AE570(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BYTE2(v4)  = *((_BYTE *)a1 + 18);
  BYTE3(v4)  = *((_BYTE *)a1 + 19);
  *(void *)((char *)&v4 + 4)  = *(void *)(a1 + 10);
  WORD6(v4)  = a1[14];
  __int128 v2 = v4;
  LOWORD(v4)  = a2[8];
  BYTE2(v4)  = *((_BYTE *)a2 + 18);
  BYTE3(v4)  = *((_BYTE *)a2 + 19);
  *(void *)((char *)&v4 + 4)  = *(void *)(a2 + 10);
  WORD6(v4)  = a2[14];
  return sub_1001C63F4( *a1 | ((unint64_t)*((unsigned int *)a1 + 1) << 32),  *((void *)a1 + 1),  v2,  *((uint64_t *)&v2 + 1),  *a2 | ((unint64_t)*((unsigned int *)a2 + 1) << 32),  *((void *)a2 + 1),  v4,  *((uint64_t *)&v4 + 1));
}

void *NANAttribute.RangingInformation.LocationInformation.localCoordinates.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.localCoordinates;
}

void *NANAttribute.RangingInformation.LocationInformation.geospatial.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.geospatial;
}

void *NANAttribute.RangingInformation.LocationInformation.civic.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.civic;
}

void *NANAttribute.RangingInformation.LocationInformation.lastMovementIndication.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.lastMovementIndication;
}

uint64_t sub_1001AE620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4FF8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AE67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D4FF8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t NANAttribute.RangingInformation.lastMovementIndication.getter(uint64_t a1)
{
  return (a1 & 0x1FFFFFFFFuLL) >> 16;
}

uint64_t NANAttribute.RangingInformation.lastMovementIndication.setter(uint64_t result)
{
  *((_WORD *)v1 + 1)  = result;
  __int128 v1[4] = BYTE2(result) & 1;
  char v2 = *v1;
  if ((result & 0x10000) != 0)
  {
    if ((*v1 & 8) == 0) {
      return result;
    }
    char v3 = v2 & 0xF7;
  }

  else
  {
    if ((*v1 & 8) != 0) {
      return result;
    }
    char v3 = v2 | 8;
  }

  *uint64_t v1 = v3;
  return result;
}

char **(*NANAttribute.RangingInformation.lastMovementIndication.modify( void *a1))(char **result, char a2)
{
  *a1  = v1;
  return sub_1001AE728;
}

char **sub_1001AE728(char **result, char a2)
{
  if ((a2 & 1) == 0)
  {
    char v2 = *result;
    char v3 = **result;
    if (((*result)[4] & 1) != 0)
    {
      if ((**result & 8) != 0) {
        *char v2 = v3 & 0xF7;
      }
    }

    else if ((**result & 8) == 0)
    {
      *char v2 = v3 | 8;
    }
  }

  return result;
}

void NANAttribute.RangingInformation.hash(into:)(int a1, uint64_t a2)
{
  if ((a2 & 0x100000000LL) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(WORD1(a2));
  }

uint64_t static NANAttribute.RangingInformation.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    if ((a1 & 0x100000000LL) != 0)
    {
      if ((a2 & 0x100000000LL) != 0) {
        return 1LL;
      }
    }

    else if (WORD1(a1) == WORD1(a2) && (a2 & 0x100000000LL) == 0)
    {
      return 1LL;
    }
  }

  return 0LL;
}

Swift::Int NANAttribute.RangingInformation.hashValue.getter(uint64_t a1)
{
  if ((a1 & 0x100000000LL) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(WORD1(a1));
  }

  return Hasher._finalize()();
}

Swift::Int sub_1001AE858()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Swift::UInt8 v3 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v3);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  return Hasher._finalize()();
}

void sub_1001AE8D8()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher._combine(_:)(*(_BYTE *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

Swift::Int sub_1001AE934(uint64_t a1)
{
  Swift::UInt16 v2 = *(_WORD *)(v1 + 2);
  int v3 = *(unsigned __int8 *)(v1 + 4);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v4);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  return Hasher._finalize()();
}

unint64_t sub_1001AE9B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001CF1F8(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result) & 1;
  }

  return result;
}

uint64_t NANAttribute.RangingInformation.init(from:)(void *a1)
{
  unint64_t v1 = sub_1001CF1F8(a1);
  return v1 & 0xFFFF00FF | ((HIDWORD(v1) & 1) << 32);
}

uint64_t sub_1001AEA1C(void *a1)
{
  return NANAttribute.RangingInformation.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32));
}

uint64_t NANAttribute.RangingInformation.encode(to:)(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v13, v4, v5);
  char v16 = a2;
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  sub_1000237C8((uint64_t)v13, v14);
  unint64_t v8 = sub_1001D26F8();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v16,  &type metadata for NANAttribute.RangingInformation.LocationInformation,  v8,  v6,  v7);
  if (!v2 && (a2 & 0x100000000LL) == 0 && (a2 & 8) != 0)
  {
    unint64_t v9 = a2 >> 16;
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    sub_1000237C8((uint64_t)v13, v14);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v9, v10, v11);
  }

  return sub_100002AC4(v13);
}

uint64_t sub_1001AEB3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    char v2 = a2[4];
    if ((a1[4] & 1) != 0)
    {
      if (a2[4]) {
        return 1LL;
      }
    }

    else
    {
      if ((v2 & 1) == 0) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1001AEB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E41E0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AEBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E41E0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001AEC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E419C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AEC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E419C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANAttribute.RangingSetup.Control.rangingReportRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.rangingReportRequired;
}

void *NANAttribute.RangingSetup.Control.fineTimingMeasurementParameters.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.fineTimingMeasurementParameters;
}

void *NANAttribute.RangingSetup.Control.scheduleEntries.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.scheduleEntries;
}

uint64_t sub_1001AECF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D51F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AED50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D51F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANAttribute.RangingSetup.FineTimingMeasurementParameters.init(from:)(void *a1)
{
  return sub_1001D2134(a1);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.maximumBurstDuration.getter( unsigned int a1)
{
  return sub_1001AEDF0(a1, 0LL, 4LL);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.minimumDeltaFineTimingMeasurement.getter( unsigned int a1)
{
  return sub_1001AEDF0(a1, 4uLL, 6LL);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.maximumFineTimingMeasurementsPerBurst.getter( unsigned int a1)
{
  return sub_1001AEDF0(a1, 9uLL, 5LL);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.fineTimingMeasurementFormatAndBandwidth.getter( unsigned int a1)
{
  return sub_1001AEDF0(a1, 0xDuLL, 6LL);
}

unint64_t sub_1001AEDF0(unsigned int a1, unint64_t a2, uint64_t a3)
{
  return sub_100071908(a2, a3, a1);
}

void *sub_1001AEE58@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result = sub_1001D2134(a1);
  if (!v2) {
    *a2  = (_DWORD)result;
  }
  return result;
}

uint64_t sub_1001AEE80(void *a1)
{
  return OUI.encode(to:)(a1, *v1);
}

unint64_t NANAttribute.RangingSetup.type.getter(__int16 a1)
{
  unint64_t result = sub_100071528(0LL, 4LL, SHIBYTE(a1));
  return result;
}

uint64_t NANAttribute.RangingSetup.status.getter(__int16 a1)
{
  char v1 = sub_100071528(4uLL, 4LL, SHIBYTE(a1));
  if (v1 == 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0LL;
  }
}

uint64_t NANAttribute.RangingSetup.fineTimingMeasurementParameters.getter(uint64_t a1, char a2)
{
  *((void *)&v3 + 1)  = a2 & 1;
  *(void *)&__int128 v3 = a1;
  return v3 >> 32;
}

uint64_t NANAttribute.RangingSetup.hash(into:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  Swift::UInt32 v6 = HIDWORD(a2);
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a2 >> 24;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }

  swift_bridgeObjectRetain(a4);
  sub_100082834(a1, a4);
  return swift_bridgeObjectRelease(a4);
}

uint64_t static NANAttribute.RangingSetup.__derived_struct_equals(_:_:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  return sub_1001C6514(a1, a2 & 1, a3, a4, a5 & 1, a6);
}

Swift::Int NANAttribute.RangingSetup.hashValue.getter(unint64_t a1, char a2, uint64_t a3)
{
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIDWORD(a1));
  }

  swift_bridgeObjectRetain(a3);
  sub_100082834((uint64_t)v10, a3);
  swift_bridgeObjectRelease(a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001AF104()
{
  return NANAttribute.RangingSetup.hashValue.getter(*(void *)v0, *(_BYTE *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_1001AF11C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt32 v4 = *(_DWORD *)(v2 + 4);
  int v5 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v9 = *(_BYTE *)(v2 + 3);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }

  swift_bridgeObjectRetain(v6);
  sub_100082834(a1, v6);
  return swift_bridgeObjectRelease(v6);
}

Swift::Int sub_1001AF1C8(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)(v1 + 4);
  int v3 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt8 v5 = *(_BYTE *)v1;
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 3);
  Hasher.init(_seed:)(v10, a1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  swift_bridgeObjectRetain(v4);
  sub_100082834((uint64_t)v10, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_1001AF2A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001D1E4C(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_BYTE *)(a2 + 8)  = v5 & 1;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

unint64_t NANAttribute.RangingSetup.init(from:)(void *a1)
{
  unint64_t result = sub_1001D1E4C(a1);
  if (v1) {
    return v3 & 1;
  }
  return result;
}

uint64_t sub_1001AF328(void *a1)
{
  return NANAttribute.RangingSetup.encode(to:)(a1, *(void *)v1, *(_BYTE *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t NANAttribute.RangingSetup.encode(to:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v31, v8, v9);
  uint64_t v10 = v32;
  uint64_t v11 = v33;
  sub_1000237C8((uint64_t)v31, v32);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v10, v11);
  if (!v4)
  {
    LOBYTE(v34)  = BYTE1(a2);
    uint64_t v12 = v32;
    uint64_t v13 = v33;
    sub_1000237C8((uint64_t)v31, v32);
    uint64_t v14 = sub_100002274(&qword_10040A9B8);
    uint64_t v15 = sub_1000572E4(&qword_10040A9C0, &qword_10040A9B8, (uint64_t)&unk_100348B28);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, v14, v15, v12, v13);
    LOBYTE(v34)  = BYTE2(a2);
    uint64_t v16 = v32;
    uint64_t v17 = v33;
    sub_1000237C8((uint64_t)v31, v32);
    unint64_t v18 = sub_1001D112C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, &type metadata for NANReasonCode, v18, v16, v17);
    char v19 = BYTE3(a2);
    LOBYTE(v34)  = BYTE3(a2);
    uint64_t v20 = v32;
    uint64_t v21 = v33;
    sub_1000237C8((uint64_t)v31, v32);
    unint64_t v22 = sub_1001D273C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v34,  &type metadata for NANAttribute.RangingSetup.Control,  v22,  v20,  v21);
    if ((a3 & 1) == 0 && (a2 & 0x2000000) != 0)
    {
      LODWORD(v34)  = HIDWORD(a2);
      uint64_t v24 = v32;
      uint64_t v25 = v33;
      sub_1000237C8((uint64_t)v31, v32);
      unint64_t v26 = sub_1001D2780();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v34,  &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters,  v26,  v24,  v25);
    }

    if (*(void *)(a4 + 16) && (v19 & 4) != 0)
    {
      uint64_t v34 = a4;
      uint64_t v27 = v32;
      uint64_t v28 = v33;
      sub_1000237C8((uint64_t)v31, v32);
      uint64_t v29 = sub_100002274(&qword_10040A960);
      uint64_t v30 = sub_100087780( &qword_10040A968,  &qword_10040A960,  (void (*)(void))sub_1001D1E08,  (uint64_t)&protocol conformance descriptor for <A> [A]);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, v29, v30, v27, v28);
    }
  }

  return sub_100002AC4(v31);
}

uint64_t sub_1001AF5C4(uint64_t a1, uint64_t a2)
{
  return sub_1001C6514( *(void *)a1,  *(_BYTE *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)a2,  *(_BYTE *)(a2 + 8),  *(void *)(a2 + 16));
}

uint64_t NANAttribute.ElementContainer.hash(into:)(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x100) != 0) {
    Swift::UInt8 v7 = 1;
  }
  else {
    Swift::UInt8 v7 = 2 * a2;
  }
  Hasher._combine(_:)(v7);
  sub_100020AFC(a3, a4);
  Data.hash(into:)(a1, a3, a4);
  return sub_1000208D8(a3, a4);
}

void static NANAttribute.ElementContainer.__derived_struct_equals(_:_:)( unsigned __int16 a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((a4 & 0x100) == 0)
  {
    if (a1 & 0x100 | (a4 ^ a1) & 0x7F) {
      return;
    }
    goto LABEL_3;
  }

  if ((a1 & 0x100) != 0) {
LABEL_3:
  }
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

uint64_t sub_1001AF688()
{
  if (*v0) {
    return 1635017060LL;
  }
  else {
    return 0x73444970616DLL;
  }
}

uint64_t sub_1001AF6B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2B9C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001AF6DC(uint64_t a1)
{
  unint64_t v2 = sub_1001D27C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF704(uint64_t a1)
{
  unint64_t v2 = sub_1001D27C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ElementContainer.encode(to:)(void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v8 = sub_100002274(&qword_10040A9D8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001D27C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ElementContainer.CodingKeys,  &type metadata for NANAttribute.ElementContainer.CodingKeys,  v14,  v12,  v13);
  LOWORD(v20[0])  = a2 & 0x1FF;
  char v21 = 0;
  unint64_t v15 = sub_1001D0F3C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v8, &type metadata for NANMapIDs, v15);
  if (!v4)
  {
    v20[0]  = a3;
    v20[1]  = v19;
    char v21 = 1;
    unint64_t v16 = sub_1001D0D1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v8, &type metadata for BinaryDecoder.DataCopy, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ElementContainer.hashValue.getter(__int16 a1, uint64_t a2, unint64_t a3)
{
  if ((a1 & 0x100) != 0) {
    Swift::UInt8 v6 = 1;
  }
  else {
    Swift::UInt8 v6 = 2 * a1;
  }
  Hasher._combine(_:)(v6);
  sub_100020AFC(a2, a3);
  Data.hash(into:)(v8, a2, a3);
  sub_1000208D8(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ElementContainer.init(from:)(void *a1)
{
  return sub_1001CBADC(a1) & 0x1FF;
}

Swift::Int sub_1001AF938()
{
  char v1 = *v0;
  int v2 = v0[1];
  uint64_t v3 = *((void *)v0 + 1);
  unint64_t v4 = *((void *)v0 + 2);
  Hasher.init(_seed:)(v7, 0LL);
  if (v2) {
    Swift::UInt8 v5 = 1;
  }
  else {
    Swift::UInt8 v5 = 2 * v1;
  }
  Hasher._combine(_:)(v5);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(v7, v3, v4);
  sub_1000208D8(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001AF9C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 1) & 1) != 0) {
    Swift::UInt8 v5 = 1;
  }
  else {
    Swift::UInt8 v5 = 2 * *(_BYTE *)v1;
  }
  Hasher._combine(_:)(v5);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_1000208D8(v3, v4);
}

Swift::Int sub_1001AFA30(uint64_t a1)
{
  char v2 = *v1;
  int v3 = v1[1];
  uint64_t v4 = *((void *)v1 + 1);
  unint64_t v5 = *((void *)v1 + 2);
  Hasher.init(_seed:)(v8, a1);
  if (v3) {
    Swift::UInt8 v6 = 1;
  }
  else {
    Swift::UInt8 v6 = 2 * v2;
  }
  Hasher._combine(_:)(v6);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(v8, v4, v5);
  sub_1000208D8(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1001AFAB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CBADC(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(_BYTE *)(a2 + 1)  = BYTE1(result) & 1;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001AFAEC(void *a1)
{
  return NANAttribute.ElementContainer.encode(to:)( a1,  *v1 | (unsigned __int16)(v1[1] << 8),  *((void *)v1 + 1),  *((void *)v1 + 2));
}

void sub_1001AFB18(uint64_t a1, _BYTE *a2)
{
  char v4 = *(_BYTE *)(a1 + 1);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    if (!a2[1]) {
      return;
    }
LABEL_8:
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
    return;
  }

  if (((*(_BYTE *)a1 ^ *a2) & 0x7F) != 0) {
    char v7 = 1;
  }
  else {
    char v7 = a2[1];
  }
  if ((v7 & 1) == 0) {
    goto LABEL_8;
  }
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.role.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2) & 1;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.role.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 12)  = result & 1;
  return result;
}

unint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.maximumRangeErrorExponent.getter( uint64_t a1, unint64_t a2)
{
  return a2 >> 40;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 13)  = result;
  *(_BYTE *)(v1 + 15)  = BYTE2(result);
  return result;
}

void __swiftcall NANAttribute.ExtendedWLANInfrastructure.init(accessPointBSSID:infrastructureMACAddress:role:operatingChannelInformation:beaconInformation:)( CoreP2P::NANAttribute::ExtendedWLANInfrastructure *__return_ptr retstr, CoreP2P::WiFiAddress *accessPointBSSID, CoreP2P::WiFiAddress *infrastructureMACAddress, CoreP2P::NANAttribute::WLANInfrastructure::DeviceRole role, CoreP2P::NonNANOperatingChannelInformation operatingChannelInformation, CoreP2P::NonNANBeaconInformation beaconInformation)
{
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.init(network:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  Channel.operatingClass.getter(a4 & 0xFFFFFFFFFFFFLL);
  if ((v4 & 0xFFFFFF00) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  return result;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.encode(to:)( void *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  unint64_t v10 = HIDWORD(a2);
  unint64_t v11 = a2 >> 40;
  sub_100021104(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v30, v8, v9);
  v33[0]  = a2;
  v33[1]  = v5;
  v33[2]  = v6;
  v33[3]  = v7;
  v33[4]  = v10;
  v33[5]  = v11;
  uint64_t v12 = v31;
  uint64_t v13 = v32;
  sub_1000237C8((uint64_t)v30, v31);
  unint64_t v14 = sub_1000286C4();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v33, &type metadata for WiFiAddress, v14, v12, v13);
  if (!v29)
  {
    v33[0]  = BYTE6(a2);
    v33[1]  = HIBYTE(a2);
    *(_DWORD *)&v33[2]  = a3;
    uint64_t v15 = v31;
    uint64_t v16 = v32;
    sub_1000237C8((uint64_t)v30, v31);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v33, &type metadata for WiFiAddress, v14, v15, v16);
    v33[0]  = BYTE4(a3) & 1;
    uint64_t v17 = v31;
    uint64_t v18 = v32;
    sub_1000237C8((uint64_t)v30, v31);
    unint64_t v19 = sub_1001D0BC8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v33,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole,  v19,  v17,  v18);
    *(_WORD *)uint64_t v33 = *(_WORD *)((char *)&a3 + 5);
    v33[2]  = HIBYTE(a3);
    uint64_t v20 = v31;
    uint64_t v21 = v32;
    sub_1000237C8((uint64_t)v30, v31);
    unint64_t v22 = sub_1001D2808();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v33,  &type metadata for NonNANOperatingChannelInformation,  v22,  v20,  v21);
    *(_DWORD *)uint64_t v33 = a4;
    uint64_t v23 = v31;
    uint64_t v24 = v32;
    sub_1000237C8((uint64_t)v30, v31);
    unint64_t v25 = sub_1001D284C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v33,  &type metadata for NonNANBeaconInformation,  v25,  v23,  v24);
  }

  return sub_100002AC4(v30);
}

void NANAttribute.ExtendedWLANInfrastructure.hash(into:)( int a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Swift::UInt16 v4 = a4;
  *(void *)uint64_t v13 = a3 >> 8;
  *(void *)unint64_t v14 = a3 >> 16;
  *(void *)uint64_t v15 = a3 >> 24;
  *(void *)uint64_t v16 = a3 >> 40;
  *(void *)uint64_t v17 = HIWORD(a3);
  *(void *)uint64_t v18 = HIBYTE(a3);
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = HIWORD(a2);
  unint64_t v12 = HIBYTE(a2);
  *(_DWORD *)unint64_t v19 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE4(a3) & 1);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v19[0]);
}

uint64_t static NANAttribute.ExtendedWLANInfrastructure.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1001C654C(a1, a2 & 0xFFFFFF01FFFFFFFFLL, a3, a4, a5 & 0xFFFFFF01FFFFFFFFLL, a6);
}

uint64_t sub_1001AFFDC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001B0014 + 4 * byte_100351A87[a1]))( 0xD000000000000010LL,  0x8000000100367260LL);
}

uint64_t sub_1001B0014(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1001B005C()
{
  return sub_1001AFFDC(*v0);
}

uint64_t sub_1001B0064@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2C74(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B0088(uint64_t a1)
{
  unint64_t v2 = sub_1001E47AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B00B0(uint64_t a1)
{
  unint64_t v2 = sub_1001E47AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int NANAttribute.ExtendedWLANInfrastructure.hashValue.getter( unint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v18 = a3;
  Swift::UInt8 v4 = a1;
  *(void *)uint64_t v13 = a2 >> 8;
  *(void *)unint64_t v14 = a2 >> 16;
  *(void *)uint64_t v15 = a2 >> 24;
  *(void *)uint64_t v16 = a2 >> 40;
  *(void *)uint64_t v17 = HIWORD(a2);
  *(void *)unint64_t v19 = HIBYTE(a2);
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  unint64_t v10 = HIWORD(a1);
  unint64_t v11 = HIBYTE(a1);
  *(_DWORD *)uint64_t v20 = HIWORD(a3);
  Hasher.init(_seed:)(v21, 0LL);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE4(a2) & 1);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v20[0]);
  return Hasher._finalize()();
}

unint64_t NANAttribute.ExtendedWLANInfrastructure.init(from:)(void *a1)
{
  unint64_t result = sub_1001CCFF4(a1);
  if (v1) {
    return v3 & 0xFFFFFF01FFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001B0284()
{
  uint64_t v1 = &_mh_execute_header;
  if (!*(_BYTE *)(v0 + 12)) {
    uint64_t v1 = 0LL;
  }
  return NANAttribute.ExtendedWLANInfrastructure.hashValue.getter( *(void *)v0,  (unint64_t)v1 | *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 15) << 56),  *(_DWORD *)(v0 + 16));
}

void sub_1001B02C0(int a1)
{
  unint64_t v2 = &_mh_execute_header;
  if (!*(_BYTE *)(v1 + 12)) {
    unint64_t v2 = 0LL;
  }
  NANAttribute.ExtendedWLANInfrastructure.hash(into:)( a1,  *(void *)v1,  (unint64_t)v2 | *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 15) << 56),  *(_DWORD *)(v1 + 16));
}

Swift::Int sub_1001B02FC(uint64_t a1)
{
  Swift::UInt8 v18 = *(_BYTE *)(v1 + 12);
  Swift::UInt8 v2 = *(_BYTE *)v1;
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v14 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v15 = *(_BYTE *)(v1 + 13);
  Swift::UInt8 v16 = *(_BYTE *)(v1 + 14);
  Swift::UInt8 v17 = *(_BYTE *)(v1 + 15);
  Swift::UInt16 v19 = *(_WORD *)(v1 + 16);
  Swift::UInt16 v20 = *(_WORD *)(v1 + 18);
  Hasher.init(_seed:)(v21, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  return Hasher._finalize()();
}

uint64_t sub_1001B0480@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CCFF4(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_WORD *)(a2 + 8)  = v5;
    *(_BYTE *)(a2 + 10)  = BYTE2(v5);
    *(_BYTE *)(a2 + 11)  = BYTE3(v5);
    *(_BYTE *)(a2 + 12)  = BYTE4(v5) & 1;
    *(_BYTE *)(a2 + 13)  = BYTE5(v5);
    *(_BYTE *)(a2 + 14)  = BYTE6(v5);
    *(_BYTE *)(a2 + 15)  = HIBYTE(v5);
    *(_DWORD *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001B0528(void *a1)
{
  uint64_t v2 = &_mh_execute_header;
  if (!*(_BYTE *)(v1 + 12)) {
    uint64_t v2 = 0LL;
  }
  return NANAttribute.ExtendedWLANInfrastructure.encode(to:)( a1,  *(void *)v1,  (unint64_t)v2 | *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 15) << 56),  *(_DWORD *)(v1 + 16));
}

uint64_t sub_1001B0574(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = &_mh_execute_header;
  if (*(_BYTE *)(a1 + 12)) {
    Swift::UInt8 v3 = &_mh_execute_header;
  }
  else {
    Swift::UInt8 v3 = 0LL;
  }
  if (!*(_BYTE *)(a2 + 12)) {
    uint64_t v2 = 0LL;
  }
  return sub_1001C654C( *(void *)a1,  (unint64_t)v3 | *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 15) << 56),  *(_DWORD *)(a1 + 16),  *(void *)a2,  (unint64_t)v2 | *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 15) << 56),  *(_DWORD *)(a2 + 16));
}

uint64_t NANAttribute.ExtendedP2POperation.operatingChannelInformation.getter( uint64_t a1, unsigned __int16 a2)
{
  return HIBYTE(a1) | (a2 << 8);
}

uint64_t NANAttribute.ExtendedP2POperation.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 7)  = result;
  *(_BYTE *)(v1 + 9)  = BYTE2(result);
  return result;
}

uint64_t NANAttribute.ExtendedMesh.beaconInformation.getter(uint64_t a1, unsigned int a2)
{
  return HIWORD(a2);
}

uint64_t NANAttribute.ExtendedMesh.beaconInformation.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 10)  = result;
  return result;
}

void NANAttribute.ExtendedP2POperation.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  unint64_t v11 = a3 >> 8;
  *(void *)Swift::UInt8 v12 = a3 >> 16;
  *(void *)Swift::UInt8 v13 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
}

BOOL static NANAttribute.ExtendedP2POperation.__derived_struct_equals(_:_:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_1001C6DD4(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1001B0708()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001B0730 + 4 * byte_100351A8C[*v0]))( 1701605234LL,  0xE400000000000000LL);
}

uint64_t sub_1001B0730()
{
  return 0x657264644163616DLL;
}

unint64_t sub_1001B074C()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1001B0770()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1001B078C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E2E60(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B07B0(uint64_t a1)
{
  unint64_t v2 = sub_1001D2890();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B07D8(uint64_t a1)
{
  unint64_t v2 = sub_1001D2890();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedP2POperation.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040A9F8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D2890();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys,  &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys,  v13,  v11,  v12);
  LOBYTE(v20)  = a2;
  char v23 = 0;
  unint64_t v14 = sub_1001D0C50();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v20,  &v23,  v7,  &type metadata for NANAttribute.P2POperation.DeviceRole,  v14);
  if (!v3)
  {
    LOBYTE(v20)  = BYTE1(a2);
    BYTE1(v20)  = BYTE2(a2);
    BYTE2(v20)  = BYTE3(a2);
    HIBYTE(v20)  = BYTE4(a2);
    char v21 = BYTE5(a2);
    char v22 = BYTE6(a2);
    char v23 = 1;
    unint64_t v15 = sub_1000286C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v23, v7, &type metadata for WiFiAddress, v15);
    LOBYTE(v20)  = HIBYTE(a2);
    *(_WORD *)((char *)&v20 + 1)  = a3;
    char v23 = 2;
    unint64_t v16 = sub_1001D2808();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v20,  &v23,  v7,  &type metadata for NonNANOperatingChannelInformation,  v16);
    LOWORD(v20)  = WORD1(a3);
    HIWORD(v20)  = WORD2(a3);
    char v23 = 3;
    unint64_t v17 = sub_1001D284C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v23, v7, &type metadata for NonNANBeaconInformation, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.ExtendedP2POperation.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2 = a2;
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  *(void *)uint64_t v12 = a2 >> 8;
  *(void *)unint64_t v13 = a2 >> 16;
  *(void *)unint64_t v14 = HIDWORD(a2);
  Hasher.init(_seed:)(v15, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedP2POperation.init(from:)(void *a1)
{
  uint64_t result = sub_1001CA4BC(a1);
  if (v1) {
    return v3 & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001B0B44()
{
  Swift::UInt8 v1 = *(_BYTE *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v11 = *(_BYTE *)(v0 + 9);
  Swift::UInt16 v12 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v13 = *(_WORD *)(v0 + 12);
  Hasher.init(_seed:)(v14, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  return Hasher._finalize()();
}

void sub_1001B0C60()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 9);
  Swift::UInt16 v10 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v11 = *(_WORD *)(v0 + 12);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
}

Swift::Int sub_1001B0D38(uint64_t a1)
{
  Swift::UInt8 v2 = *(_BYTE *)v1;
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 9);
  Swift::UInt16 v13 = *(_WORD *)(v1 + 10);
  Swift::UInt16 v14 = *(_WORD *)(v1 + 12);
  Hasher.init(_seed:)(v15, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  return Hasher._finalize()();
}

uint64_t sub_1001B0E50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CA4BC(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_DWORD *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 12)  = WORD2(v5);
  }

  return result;
}

uint64_t sub_1001B0ECC(void *a1)
{
  return NANAttribute.ExtendedP2POperation.encode(to:)( a1,  *(void *)v1,  *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32));
}

BOOL sub_1001B0EF0(uint64_t a1, uint64_t a2)
{
  return sub_1001C6DD4( *(void *)a1,  *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32),  *(void *)a2,  *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

uint64_t NANAttribute.ExtendedIBSS.operatingChannelInformation.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2) & 0xFFFFFF;
}

uint64_t NANAttribute.ExtendedIBSS.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 12)  = result;
  *(_BYTE *)(v1 + 14)  = BYTE2(result);
  return result;
}

void NANAttribute.ExtendedIBSS.hash(into:)( int a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Swift::UInt16 v18 = a4;
  Swift::UInt8 v4 = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIBYTE(a2);
  unint64_t v12 = a3 >> 8;
  *(void *)Swift::UInt16 v13 = a3 >> 16;
  *(void *)Swift::UInt16 v14 = a3 >> 24;
  *(void *)unint64_t v15 = HIDWORD(a3);
  *(void *)unint64_t v16 = a3 >> 40;
  *(void *)unint64_t v17 = HIWORD(a3);
  *(_DWORD *)uint64_t v19 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19[0]);
}

BOOL static NANAttribute.ExtendedIBSS.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1001C66AC(a1, a2 & 0xFFFFFFFFFFFFFFLL, a3, a4, a5 & 0xFFFFFFFFFFFFFFLL, a6);
}

uint64_t sub_1001B1064()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001B1098 + 4 * byte_100351A90[*v0]))( 0x4953534273736269LL,  0xE900000000000044LL);
}

uint64_t sub_1001B1098()
{
  return 0x657264644163616DLL;
}

unint64_t sub_1001B10B4()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1001B10D8()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1001B10F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E300C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B1118(uint64_t a1)
{
  unint64_t v2 = sub_1001D28D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B1140(uint64_t a1)
{
  unint64_t v2 = sub_1001D28D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedIBSS.encode(to:)(void *a1, unint64_t a2, uint64_t a3, int a4)
{
  HIDWORD(v22)  = a4;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  uint64_t v23 = a3;
  unint64_t v24 = a2 >> 24;
  unint64_t v25 = HIDWORD(a2);
  unint64_t v26 = a2 >> 40;
  uint64_t v8 = sub_100002274(&qword_10040AA08);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001D28D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ExtendedIBSS.CodingKeys,  &type metadata for NANAttribute.ExtendedIBSS.CodingKeys,  v14,  v12,  v13);
  v29[0]  = a2;
  v29[1]  = v6;
  v29[2]  = v7;
  v29[3]  = v24;
  v29[4]  = v25;
  v29[5]  = v26;
  char v28 = 0;
  unint64_t v15 = sub_1000286C4();
  uint64_t v16 = v27;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v8, &type metadata for WiFiAddress, v15);
  if (!v16)
  {
    int v17 = HIDWORD(v22);
    v29[0]  = BYTE6(a2);
    v29[1]  = HIBYTE(a2);
    int v18 = HIDWORD(v23);
    *(_DWORD *)&v29[2]  = v23;
    char v28 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v8, &type metadata for WiFiAddress, v15);
    v29[0]  = v18;
    v29[1]  = BYTE1(v18);
    v29[2]  = BYTE2(v18);
    char v28 = 2;
    unint64_t v19 = sub_1001D2808();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v29,  &v28,  v8,  &type metadata for NonNANOperatingChannelInformation,  v19);
    *(_DWORD *)uint64_t v29 = v17;
    char v28 = 3;
    unint64_t v20 = sub_1001D284C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v8, &type metadata for NonNANBeaconInformation, v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ExtendedIBSS.hashValue.getter( unint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v19 = a3;
  Swift::UInt8 v3 = a2;
  Swift::UInt8 v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  unint64_t v10 = HIWORD(a1);
  unint64_t v11 = HIBYTE(a1);
  *(void *)uint64_t v13 = a2 >> 8;
  *(void *)unint64_t v14 = a2 >> 16;
  *(void *)unint64_t v15 = a2 >> 24;
  *(void *)uint64_t v16 = HIDWORD(a2);
  *(void *)int v17 = a2 >> 40;
  *(void *)int v18 = HIWORD(a2);
  *(_DWORD *)unint64_t v20 = HIWORD(a3);
  Hasher.init(_seed:)(v21, 0LL);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedIBSS.init(from:)(void *a1)
{
  uint64_t result = sub_1001CAD3C(a1);
  if (v1) {
    return v3 & 0xFFFFFFFFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001B1544()
{
  return NANAttribute.ExtendedIBSS.hashValue.getter( *(void *)v0,  *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 14) << 48),  *(_DWORD *)(v0 + 16));
}

void sub_1001B156C()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 1);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 3);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v11 = *(_BYTE *)(v0 + 11);
  Swift::UInt8 v12 = *(_BYTE *)(v0 + 12);
  Swift::UInt8 v13 = *(_BYTE *)(v0 + 13);
  Swift::UInt8 v14 = *(_BYTE *)(v0 + 14);
  Swift::UInt16 v15 = *(_WORD *)(v0 + 16);
  Swift::UInt16 v16 = *(_WORD *)(v0 + 18);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
}

Swift::Int sub_1001B168C(uint64_t a1)
{
  Swift::UInt8 v2 = *(_BYTE *)v1;
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v14 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v15 = *(_BYTE *)(v1 + 12);
  Swift::UInt8 v16 = *(_BYTE *)(v1 + 13);
  Swift::UInt8 v17 = *(_BYTE *)(v1 + 14);
  Swift::UInt16 v18 = *(_WORD *)(v1 + 16);
  Swift::UInt16 v19 = *(_WORD *)(v1 + 18);
  Hasher.init(_seed:)(v20, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  return Hasher._finalize()();
}

uint64_t sub_1001B17FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CAD3C(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_WORD *)(a2 + 8)  = v5;
    *(_BYTE *)(a2 + 10)  = BYTE2(v5);
    *(_BYTE *)(a2 + 11)  = BYTE3(v5);
    *(_BYTE *)(a2 + 12)  = BYTE4(v5);
    *(_BYTE *)(a2 + 13)  = BYTE5(v5);
    *(_BYTE *)(a2 + 14)  = BYTE6(v5);
    *(_DWORD *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001B189C(void *a1)
{
  return NANAttribute.ExtendedIBSS.encode(to:)( a1,  *(void *)v1,  *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48),  *(_DWORD *)(v1 + 16));
}

BOOL sub_1001B18D4(uint64_t a1, uint64_t a2)
{
  return sub_1001C66AC( *(void *)a1,  *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 14) << 48),  *(_DWORD *)(a1 + 16),  *(void *)a2,  *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48),  *(_DWORD *)(a2 + 16));
}

uint64_t NANAttribute.ExtendedMesh.operatingChannelInformation.getter(uint64_t a1, unsigned __int8 a2)
{
  return HIWORD(a1) | (a2 << 16);
}

uint64_t NANAttribute.ExtendedMesh.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 6)  = result;
  *(_BYTE *)(v1 + 8)  = BYTE2(result);
  return result;
}

uint64_t NANAttribute.ExtendedMesh.hash(into:)( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  Swift::UInt8 v7 = a3;
  unint64_t v9 = a2 >> 8;
  unint64_t v10 = a2 >> 16;
  unint64_t v11 = a2 >> 24;
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = a2 >> 40;
  unint64_t v14 = HIWORD(a2);
  *(void *)Swift::UInt8 v16 = HIBYTE(a2);
  *(void *)Swift::UInt8 v17 = a3 >> 16;
  *(void *)Swift::UInt16 v18 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  sub_100020AFC(a4, a5);
  Data.hash(into:)(a1, a4, a5);
  return sub_1000208D8(a4, a5);
}

void static NANAttribute.ExtendedMesh.__derived_struct_equals(_:_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
}

uint64_t sub_1001B1A54()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001B1A88 + 4 * byte_100351A94[*v0]))( 0x657264644163616DLL,  0xEA00000000007373LL);
}

unint64_t sub_1001B1A88()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1001B1AAC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1001B1AC8()
{
  return 0x44496873656DLL;
}

uint64_t sub_1001B1ADC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E31D4(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B1B00(uint64_t a1)
{
  unint64_t v2 = sub_1001D2918();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B1B28(uint64_t a1)
{
  unint64_t v2 = sub_1001D2918();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedMesh.encode(to:)( void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = a2 >> 16;
  uint64_t v28 = a3;
  unint64_t v29 = a2 >> 24;
  unint64_t v30 = HIDWORD(a2);
  unint64_t v31 = a2 >> 40;
  uint64_t v9 = sub_100002274(&qword_10040AA18);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v14);
  unint64_t v15 = sub_1001D2918();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ExtendedMesh.CodingKeys,  &type metadata for NANAttribute.ExtendedMesh.CodingKeys,  v15,  v14,  v13);
  LOBYTE(v33[0])  = a2;
  BYTE1(v33[0])  = v7;
  BYTE2(v33[0])  = v8;
  BYTE3(v33[0])  = v29;
  BYTE4(v33[0])  = v30;
  BYTE5(v33[0])  = v31;
  char v34 = 0;
  unint64_t v16 = sub_1000286C4();
  uint64_t v17 = v32;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v34, v9, &type metadata for WiFiAddress, v16);
  if (!v17)
  {
    uint64_t v19 = v26;
    uint64_t v18 = v27;
    LOBYTE(v33[0])  = BYTE6(a2);
    BYTE1(v33[0])  = HIBYTE(a2);
    uint64_t v20 = v28;
    BYTE2(v33[0])  = v28;
    char v34 = 1;
    unint64_t v21 = sub_1001D2808();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v33,  &v34,  v9,  &type metadata for NonNANOperatingChannelInformation,  v21);
    LOWORD(v33[0])  = WORD1(v20);
    WORD1(v33[0])  = WORD2(v20);
    char v34 = 2;
    unint64_t v22 = sub_1001D284C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v34, v9, &type metadata for NonNANBeaconInformation, v22);
    v33[0]  = v19;
    v33[1]  = v18;
    char v34 = 3;
    unint64_t v23 = sub_1001D0D1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v34, v9, &type metadata for BinaryDecoder.DataCopy, v23);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.ExtendedMesh.hashValue.getter( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v6 = a2;
  Swift::UInt8 v7 = a1;
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v12 = a1 >> 40;
  *(void *)uint64_t v14 = HIWORD(a1);
  *(void *)unint64_t v15 = HIBYTE(a1);
  *(void *)unint64_t v16 = a2 >> 16;
  *(void *)uint64_t v17 = HIDWORD(a2);
  Hasher.init(_seed:)(v18, 0LL);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  sub_100020AFC(a3, a4);
  Data.hash(into:)(v18, a3, a4);
  sub_1000208D8(a3, a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedMesh.init(from:)(void *a1)
{
  uint64_t result = sub_1001CAF98(a1);
  if (v1) {
    return v3 & 0xFFFFFFFF00FFLL;
  }
  return result;
}

Swift::Int sub_1001B1EDC()
{
  return NANAttribute.ExtendedMesh.hashValue.getter( *(void *)v0,  *(unsigned __int8 *)(v0 + 8) | ((unint64_t)*(unsigned __int16 *)(v0 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 12) << 32),  *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

uint64_t sub_1001B1EFC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 16);
  unint64_t v5 = *(void *)(v2 + 24);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v9 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v10 = *(_BYTE *)(v2 + 5);
  Swift::UInt8 v11 = *(_BYTE *)(v2 + 6);
  Swift::UInt8 v12 = *(_BYTE *)(v2 + 7);
  Swift::UInt8 v14 = *(_BYTE *)(v2 + 8);
  Swift::UInt16 v15 = *(_WORD *)(v2 + 10);
  Swift::UInt16 v16 = *(_WORD *)(v2 + 12);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  return sub_1000208D8(v4, v5);
}

Swift::Int sub_1001B1FF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 3);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 8);
  Swift::UInt16 v14 = *(_WORD *)(v1 + 10);
  Swift::UInt16 v15 = *(_WORD *)(v1 + 12);
  Hasher.init(_seed:)(v16, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v16, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001B2128@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CAF98(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_BYTE *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 10)  = v6;
    *(_WORD *)(a2 + 12)  = v7;
    *(void *)(a2 + 16)  = v8;
    *(void *)(a2 + 24)  = v9;
  }

  return result;
}

uint64_t sub_1001B21A0(void *a1)
{
  return NANAttribute.ExtendedMesh.encode(to:)( a1,  *(void *)v1,  *(unsigned __int8 *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

void sub_1001B21D0(uint64_t a1, uint64_t a2)
{
}

unint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry2.getter( uint64_t a1, unint64_t a2)
{
  return a2 >> 24;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry2.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 11)  = result;
  return result;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry3.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 12)  = result;
  return result;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.maximumRangeErrorExponent.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 13)  = result;
  return result;
}

void NANAttribute.FineTimingMeasurementRangeReport.Entry.hash(into:)( int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  unint64_t v4 = HIDWORD(a2);
  unint64_t v5 = a2 >> 40;
  unint64_t v6 = HIWORD(a2);
  unint64_t v7 = HIBYTE(a2);
  unint64_t v8 = a3 >> 8;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = a3 >> 24;
  unint64_t v11 = HIDWORD(a3);
  *(void *)Swift::UInt8 v12 = a3 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12[0]);
}

BOOL static NANAttribute.FineTimingMeasurementRangeReport.Entry.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C731C(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1001B2304()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001B2338 + 4 * byte_100351A98[*v0]))( 0x6D69547472617473LL,  0xE900000000000065LL);
}

uint64_t sub_1001B2338()
{
  return 0x6469737362LL;
}

uint64_t sub_1001B234C()
{
  return 0x746E4565676E6172LL;
}

uint64_t sub_1001B236C()
{
  return 0x746E4565676E6172LL;
}

uint64_t sub_1001B2390()
{
  return 0x746E4565676E6172LL;
}

unint64_t sub_1001B23B4()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1001B23D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E3384(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B23F4(uint64_t a1)
{
  unint64_t v2 = sub_1001D295C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B241C(uint64_t a1)
{
  unint64_t v2 = sub_1001D295C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.encode(to:)( void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040AA28);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D295C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys,  v13,  v11,  v12);
  char v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v24, v7);
  if (!v3)
  {
    v22[0]  = BYTE4(a2);
    v22[1]  = BYTE5(a2);
    v22[2]  = BYTE6(a2);
    v22[3]  = HIBYTE(a2);
    __int16 v23 = a3;
    char v21 = 1;
    unint64_t v14 = sub_1000286C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v7, &type metadata for WiFiAddress, v14);
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a3 >> 16, &v20, v7);
    char v19 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(a3 >> 24, &v19, v7);
    char v18 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a3), &v18, v7);
    char v17 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(a3 >> 40, &v17, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.FineTimingMeasurementRangeReport.Entry.hashValue.getter( unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2 = a2;
  Swift::UInt32 v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = a1 >> 40;
  unint64_t v6 = HIWORD(a1);
  unint64_t v7 = HIBYTE(a1);
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a2 >> 24;
  *(void *)uint64_t v12 = HIDWORD(a2);
  *(void *)unint64_t v13 = a2 >> 40;
  Hasher.init(_seed:)(v14, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.init(from:)(void *a1)
{
  uint64_t result = sub_1001CD544(a1);
  if (v1) {
    return v3 & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001B276C()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 11);
  Swift::UInt8 v11 = *(_BYTE *)(v0 + 12);
  Swift::UInt8 v12 = *(_BYTE *)(v0 + 13);
  Hasher.init(_seed:)(v13, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

void sub_1001B2874()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 4);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 5);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 6);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 7);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 8);
  Swift::UInt8 v6 = *(_BYTE *)(v0 + 9);
  Swift::UInt8 v7 = *(_BYTE *)(v0 + 10);
  Swift::UInt8 v8 = *(_BYTE *)(v0 + 11);
  Swift::UInt8 v9 = *(_BYTE *)(v0 + 12);
  Swift::UInt8 v10 = *(_BYTE *)(v0 + 13);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
}

Swift::Int sub_1001B2940(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)v1;
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 4);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 5);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 6);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 7);
  Swift::UInt8 v7 = *(_BYTE *)(v1 + 8);
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 9);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 10);
  Swift::UInt8 v10 = *(_BYTE *)(v1 + 11);
  Swift::UInt8 v12 = *(_BYTE *)(v1 + 12);
  Swift::UInt8 v13 = *(_BYTE *)(v1 + 13);
  Hasher.init(_seed:)(v14, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  return Hasher._finalize()();
}

uint64_t sub_1001B2A44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CD544(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_WORD *)(a2 + 8)  = v5;
    *(_BYTE *)(a2 + 10)  = BYTE2(v5);
    *(_BYTE *)(a2 + 11)  = BYTE3(v5);
    *(_BYTE *)(a2 + 12)  = BYTE4(v5);
    *(_BYTE *)(a2 + 13)  = BYTE5(v5);
  }

  return result;
}

uint64_t sub_1001B2AB8(void *a1)
{
  return NANAttribute.FineTimingMeasurementRangeReport.Entry.encode(to:)( a1,  *(void *)v1,  *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40));
}

BOOL sub_1001B2AE4(uint64_t a1, uint64_t a2)
{
  return sub_1001C731C( *(void *)a1,  *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40),  *(void *)a2,  *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40));
}

uint64_t sub_1001B2B20()
{
  return 0x73656972746E65LL;
}

uint64_t sub_1001B2B38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73656972746E65LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656972746E65LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3  = v8 & 1;
  return result;
}

uint64_t sub_1001B2BCC(uint64_t a1)
{
  unint64_t v2 = sub_1001D29A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B2BF4(uint64_t a1)
{
  unint64_t v2 = sub_1001D29A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040AA38);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::UInt8 v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_1001D29A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100002274(&qword_10040AA48);
  uint64_t v12 = sub_100087780( &qword_10040AA50,  &qword_10040AA48,  (void (*)(void))sub_1001D29E4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.FineTimingMeasurementRangeReport.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001B2D84()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1001B2DC8(uint64_t a1)
{
}

Swift::Int sub_1001B2DD0(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B2E10@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v12, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  sub_1000237C8((uint64_t)v12, v13);
  __int16 v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v7, v8);
  unint64_t v10 = sub_10019FDC0(v9 << 8, (uint64_t)v12);
  sub_100002AC4(v12);
  uint64_t result = sub_100002AC4(a1);
  *a2  = v10;
  return result;
}

void *NANAttribute.FineTimingMeasurementRangeReport.init(from:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100021104(a1, v2);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v2, v3);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  sub_1000237C8((uint64_t)v9, v10);
  __int16 v6 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v4, v5);
  uint64_t v7 = sub_10019FDC0(v6 << 8, (uint64_t)v9);
  sub_100002AC4(v9);
  sub_100002AC4(a1);
  return v7;
}

uint64_t sub_1001B2FCC(void *a1)
{
  return NANAttribute.FineTimingMeasurementRangeReport.encode(to:)(a1, *v1);
}

uint64_t sub_1001B2FE4(uint64_t *a1, uint64_t *a2, uint8x8_t a3, uint8x8_t a4)
{
  return _s7CoreP2P12NANAttributeO32FineTimingMeasurementRangeReportV23__derived_struct_equalsySbAE_AEtFZ_0( *a1,  *a2,  a3,  a4);
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.replayCounters.getter(uint64_t a1)
{
  return sub_1001B3000(a1, (unsigned __int8 (*)(void, uint64_t, uint64_t))sub_100071528);
}

uint64_t sub_1001B3000(uint64_t a1, unsigned __int8 (*a2)(void, uint64_t, uint64_t))
{
  int v2 = a2(0LL, 1LL, a1);
  if (v2 == 1) {
    return 1LL;
  }
  if (!v2) {
    return 0LL;
  }
  unint64_t v4 = sub_1000033FC();
  uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
  *(_OWORD *)uint64_t v6 = xmmword_100337020;
  *(_BYTE *)(v6 + 16)  = 2;
  uint64_t v7 = v5;
  swift_willThrow(v5);
  uint64_t result = swift_unexpectedError(v7, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
  __break(1u);
  return result;
}

unint64_t NANAttribute.CipherSuiteInformation.Capabilities.groupKeySupport.getter(char a1)
{
  unint64_t result = sub_100071528(1uLL, 2LL, a1);
  if (result > 3u)
  {
    unint64_t v2 = sub_1000033FC();
    uint64_t v3 = swift_allocError(&type metadata for WiFiError, v2, 0LL, 0LL);
    *(_OWORD *)uint64_t v4 = xmmword_100337020;
    *(_BYTE *)(v4 + 16)  = 2;
    uint64_t v5 = v3;
    swift_willThrow(v3);
    unint64_t result = swift_unexpectedError(v5, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
    __break(1u);
  }

  return result;
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.gtksaReplayCounters.getter(char a1)
{
  int v2 = sub_100071528(1uLL, 2LL, a1);
  if ((v2 - 1) >= 2)
  {
    uint64_t result = 2LL;
    if (v2 && v2 != 3)
    {
      unint64_t v5 = sub_1000033FC();
      uint64_t v6 = swift_allocError(&type metadata for WiFiError, v5, 0LL, 0LL);
      *(_OWORD *)uint64_t v7 = xmmword_100337020;
      *(_BYTE *)(v7 + 16)  = 2;
      uint64_t v8 = v6;
      swift_willThrow(v6);
      uint64_t result = swift_unexpectedError(v8, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
    }
  }

  else
  {
    char v3 = sub_100071528(3uLL, 1LL, a1);
    if (v3 == 1) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v3) {
      return v9;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.broadcastIntegrityProtocol.getter(char a1)
{
  unsigned int v2 = sub_100071528(1uLL, 2LL, a1);
  uint64_t result = 2LL;
  if (v2 >= 2)
  {
    if (v2 == 2)
    {
      uint64_t result = sub_100071528(4uLL, 1LL, a1);
      if ((_BYTE)result)
      {
        goto LABEL_9;
      }
    }

    else if (v2 != 3)
    {
      unint64_t v4 = sub_1000033FC();
      uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
      *(_OWORD *)uint64_t v6 = xmmword_100337020;
      *(_BYTE *)(v6 + 16)  = 2;
      uint64_t v7 = v5;
      swift_willThrow(v5);
      swift_unexpectedError(v7, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
LABEL_9:
      unint64_t v8 = sub_1000033FC();
      uint64_t v9 = swift_allocError(&type metadata for WiFiError, v8, 0LL, 0LL);
      *(_OWORD *)uint64_t v10 = xmmword_100337020;
      *(_BYTE *)(v10 + 16)  = 2;
      swift_willThrow(v9);
      uint64_t result = swift_unexpectedError(v9, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1001B33C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5748();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B3424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5748();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANAttribute.CipherSuiteInformation.CipherSuite.hash(into:)(uint64_t a1, __int16 a2)
{
  Swift::UInt8 v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2 + 1);
  Hasher._combine(_:)(v2);
}

uint64_t sub_1001B34A0()
{
  if (*v0) {
    return 0x496873696C627570LL;
  }
  else {
    return 0x7553726568706963LL;
  }
}

uint64_t sub_1001B34E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E35FC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B350C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2A28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B3534(uint64_t a1)
{
  unint64_t v2 = sub_1001D2A28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CipherSuiteInformation.CipherSuite.encode(to:)(void *a1, __int16 a2)
{
  uint64_t v5 = sub_100002274(&qword_10040AA60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D2A28();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys,  v11,  v9,  v10);
  char v17 = a2;
  char v16 = 0;
  unint64_t v12 = sub_1001D2A6C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for NANCipherSuite, v12);
  if (!v2)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(HIBYTE(a2), &v15, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.CipherSuiteInformation.CipherSuite.hashValue.getter(__int16 a1)
{
  char v1 = a1;
  Swift::UInt8 v2 = HIBYTE(a1);
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.CipherSuiteInformation.CipherSuite.init(from:)(void *a1)
{
  return sub_1001CC598(a1);
}

Swift::Int sub_1001B36F4()
{
  char v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001B3750()
{
  Swift::UInt8 v1 = v0[1];
  Hasher._combine(_:)(*v0 + 1);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001B3790(uint64_t a1)
{
  char v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2 + 1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001B37E8@<X0>(_WORD *a1@<X8>)
{
  return sub_1001B3804((uint64_t (*)(void))sub_1001CC598, a1);
}

uint64_t sub_1001B3804@<X0>(uint64_t (*a1)(void)@<X3>, _WORD *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001B382C(void *a1)
{
  return NANAttribute.CipherSuiteInformation.CipherSuite.encode(to:)(a1, *v1);
}

void NANAttribute.CipherSuiteInformation.hash(into:)(int a1, Swift::UInt8 a2, uint64_t a3)
{
  Swift::UInt v4 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt8 *)(a3 + 33);
    do
    {
      Swift::UInt8 v6 = *(v5 - 1) + 1;
      Swift::UInt8 v7 = *v5;
      v5 += 2;
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      --v4;
    }

    while (v4);
  }

uint64_t static NANAttribute.CipherSuiteInformation.__derived_struct_equals(_:_:)( char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001B38B4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_10007CA54);
}

uint64_t sub_1001B38B4(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (a1 == a3) {
    return a5(a2, a4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001B38D4()
{
  if (*v0) {
    return 0x7553726568706963LL;
  }
  else {
    return 0x696C696261706163LL;
  }
}

uint64_t sub_1001B3918@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E3710(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B393C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2AB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B3964(uint64_t a1)
{
  unint64_t v2 = sub_1001D2AB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CipherSuiteInformation.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100002274(&qword_10040AA78);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D2AB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys,  &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys,  v13,  v11,  v12);
  char v22 = a2;
  char v21 = 0;
  unint64_t v14 = sub_1001D2AF4();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v22,  &v21,  v7,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities,  v14);
  if (!v3)
  {
    uint64_t v19 = a3;
    char v20 = 1;
    uint64_t v15 = sub_100002274(&qword_10040AA90);
    uint64_t v16 = sub_100087780( &qword_10040AA98,  &qword_10040AA90,  (void (*)(void))sub_1001D2B38,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.CipherSuiteInformation.hashValue.getter(Swift::UInt8 a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt8 *)(a2 + 33);
    do
    {
      Swift::UInt8 v6 = *(v5 - 1) + 1;
      Swift::UInt8 v7 = *v5;
      v5 += 2;
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      --v4;
    }

    while (v4);
  }

  return Hasher._finalize()();
}

uint64_t NANAttribute.CipherSuiteInformation.init(from:)(void *a1)
{
  return sub_1001CC6FC(a1);
}

Swift::Int sub_1001B3BA4()
{
  return NANAttribute.CipherSuiteInformation.hashValue.getter(*(_BYTE *)v0, *(void *)(v0 + 8));
}

void sub_1001B3BB0(int a1)
{
}

Swift::Int sub_1001B3BBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  Swift::UInt8 v3 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v5, a1);
  NANAttribute.CipherSuiteInformation.hash(into:)((int)v5, v3, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B3C04@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B3C20((uint64_t (*)(void))sub_1001CC6FC, a1);
}

uint64_t sub_1001B3C20@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }

  return result;
}

uint64_t sub_1001B3C4C(void *a1)
{
  return NANAttribute.CipherSuiteInformation.encode(to:)(a1, *(_BYTE *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1001B3C68(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001B3C74(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10007CA54);
}

uint64_t sub_1001B3C74( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  if (*a1 == *a2) {
    return a5(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0LL;
  }
}

BOOL NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType.init(rawValue:)( char a1)
{
  return a1 != 1;
}

_BYTE *sub_1001B3CA8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 1;
  return result;
}

Swift::Int sub_1001B3CBC(uint64_t a1, uint64_t a2)
{
  return sub_1001B5574(a1, a2, 1u);
}

void sub_1001B3CC4()
{
}

Swift::Int sub_1001B3CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B55E4(a1, a2, a3, 1u);
}

uint64_t sub_1001B3CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4158();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B3D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4158();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL NANAttribute.SecurityContextInformation.SecurityContextIdentifier.type.getter(__int16 a1)
{
  return (a1 & 0xFF00) != 256;
}

uint64_t NANAttribute.SecurityContextInformation.SecurityContextIdentifier.hash(into:)( uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v7 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  sub_100020AFC(a3, a4);
  Data.hash(into:)(a1, a3, a4);
  return sub_1000208D8(a3, a4);
}

Swift::Int NANAttribute.SecurityContextInformation.SecurityContextIdentifier.hashValue.getter( __int16 a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5 = a1;
  Swift::UInt8 v6 = HIBYTE(a1);
  Hasher.init(_seed:)(v8, 0LL);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100020AFC(a2, a3);
  Data.hash(into:)(v8, a2, a3);
  sub_1000208D8(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001B3EA0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(_BYTE *)v0;
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 1);
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v6, v1, v2);
  sub_1000208D8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B3F30(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v5);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_1000208D8(v3, v4);
}

Swift::Int sub_1001B3F9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 1);
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v7, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001B4028@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CE9AC(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t NANAttribute.SecurityContextInformation.SecurityContextIdentifier.init(from:)(void *a1)
{
  return sub_1001CE9AC(a1);
}

void sub_1001B407C(void *a1)
{
}

void NANAttribute.SecurityContextInformation.SecurityContextIdentifier.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Encoder.unkeyedContainer()(v7, v5, v6);
  __asm { BR              X10 }

uint64_t sub_1001B4104()
{
  uint64_t v4 = v16;
  uint64_t v5 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(BYTE6(v0), v4, v5);
  if (!v3)
  {
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(BYTE1(v2), v6, v7);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v2, v8, v9);
    v14[0]  = v1;
    v14[1]  = v0;
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    unint64_t v12 = sub_10005CD78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v14, &type metadata for Data, v12, v10, v11);
  }

  return sub_100002AC4(v15);
}

void sub_1001B42D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2));
  }
}

void NANAttribute.SecurityContextInformation.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    do
    {
      uint64_t v6 = *(void *)(v5 + 8);
      unint64_t v7 = *(void *)(v5 + 16);
      Swift::UInt8 v8 = *(_BYTE *)(v5 + 1);
      Hasher._combine(_:)(*(_BYTE *)v5);
      Hasher._combine(_:)(v8);
      sub_100020AFC(v6, v7);
      Data.hash(into:)(a1, v6, v7);
      sub_1000208D8(v6, v7);
      v5 += 24LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a2);
  }

unint64_t sub_1001B43C8()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1001B43E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E381C(a1, a2);
  *a3  = result & 1;
  return result;
}

uint64_t sub_1001B440C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2B7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4434(uint64_t a1)
{
  unint64_t v2 = sub_1001D2B7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.SecurityContextInformation.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040AAA8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_1001D2B7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.SecurityContextInformation.CodingKeys,  &type metadata for NANAttribute.SecurityContextInformation.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100002274(&qword_10040AAB8);
  uint64_t v12 = sub_100087780( &qword_10040AAC0,  &qword_10040AAB8,  (void (*)(void))sub_1001D2BC0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.SecurityContextInformation.hashValue.getter(uint64_t a1)
{
  return sub_1001B5360(a1, (void (*)(void *, uint64_t))sub_100082E90);
}

void *NANAttribute.SecurityContextInformation.init(from:)(void *a1)
{
  return sub_1001CD2A8(a1);
}

Swift::Int sub_1001B45A0(uint64_t a1, uint64_t a2)
{
  return sub_1001B53D8(a1, a2, (void (*)(void *, uint64_t))sub_100082E90);
}

void sub_1001B45AC(uint64_t a1)
{
}

Swift::Int sub_1001B45B4(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v9, a1);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain(v2);
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v4 + 16);
      Swift::UInt8 v7 = *(_BYTE *)(v4 + 1);
      Hasher._combine(_:)(*(_BYTE *)v4);
      Hasher._combine(_:)(v7);
      sub_100020AFC(v5, v6);
      Data.hash(into:)(v9, v5, v6);
      sub_1000208D8(v5, v6);
      v4 += 24LL;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v2);
  }

  return Hasher._finalize()();
}

void *sub_1001B467C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001CD2A8(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001B46A4(void *a1)
{
  return NANAttribute.SecurityContextInformation.encode(to:)(a1, *v1);
}

uint64_t sub_1001B46BC(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO26SecurityContextInformationV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t sub_1001B46C8()
{
  if (*v0) {
    return 1635017060LL;
  }
  else {
    return 0x496873696C627570LL;
  }
}

uint64_t sub_1001B4700@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E38A0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B4724(uint64_t a1)
{
  unint64_t v2 = sub_1001D2C04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B474C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2C04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.SharedKeyDescriptor.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100002274(&qword_10040AAD0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001D2C04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys,  &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v19[0])  = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0]  = a3;
    v19[1]  = v18;
    char v20 = 1;
    unint64_t v15 = sub_1001D0D1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for BinaryDecoder.DataCopy, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t NANAttribute.SharedKeyDescriptor.init(from:)(void *a1)
{
  return sub_1001CC42C(a1);
}

uint64_t sub_1001B48D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CC42C(a1);
  if (!v2)
  {
    *(_BYTE *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001B48FC(void *a1)
{
  return NANAttribute.SharedKeyDescriptor.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

void *NANAttribute.MulticastScheduleChange.Control.accepted.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.accepted;
}

void *NANAttribute.MulticastScheduleChange.Control.request.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.request;
}

void *NANAttribute.MulticastScheduleChange.Control.response.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.response;
}

uint64_t sub_1001B493C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5A18();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B4998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5A18();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.MulticastScheduleChange.reason.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIWORD(a3);
}

uint64_t NANAttribute.MulticastScheduleChange.hash(into:)( uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, unsigned int a4, uint64_t a5)
{
  Swift::UInt16 v6 = a4;
  unsigned int v9 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain(a5);
  sub_100082834(a1, a5);
  return swift_bridgeObjectRelease(a5);
}

uint64_t static NANAttribute.MulticastScheduleChange.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1001B4AA4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001B4AD4 + 4 * byte_100351A9E[a1]))( 0x444967736D6ELL,  0xE600000000000000LL);
}

unint64_t sub_1001B4AD4()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1001B4AF0()
{
  return 0x6C6F72746E6F63LL;
}

uint64_t sub_1001B4B08()
{
  return 0x6E6F73616572LL;
}

unint64_t sub_1001B4B18()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1001B4B38()
{
  return sub_1001B4AA4(*v0);
}

uint64_t sub_1001B4B40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E398C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B4B64(uint64_t a1)
{
  unint64_t v2 = sub_1001D2C48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4B8C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2C48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.MulticastScheduleChange.encode(to:)( void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v24 = a3;
  uint64_t v9 = sub_100002274(&qword_10040AAE0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v14);
  unint64_t v15 = sub_1001D2C48();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys,  &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys,  v15,  v14,  v13);
  LOBYTE(v25)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v5)
  {
    uint64_t v16 = v23;
    LOBYTE(v25)  = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24);
    LOWORD(v25)  = a4;
    char v26 = 2;
    unint64_t v17 = sub_1001D2C8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v25,  &v26,  v9,  &type metadata for NANAttribute.MulticastScheduleChange.Control,  v17);
    LOBYTE(v25)  = BYTE2(a4);
    char v26 = 3;
    unint64_t v18 = sub_1001D112C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v26, v9, &type metadata for NANReasonCode, v18);
    uint64_t v25 = v16;
    char v26 = 4;
    uint64_t v19 = sub_100002274(&qword_10040A960);
    uint64_t v20 = sub_100087780( &qword_10040A968,  &qword_10040A960,  (void (*)(void))sub_1001D1E08,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v26, v9, v19, v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.MulticastScheduleChange.hashValue.getter( Swift::UInt64 a1, Swift::UInt64 a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt16 v5 = a3;
  unsigned int v8 = HIWORD(a3);
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain(a4);
  sub_100082834((uint64_t)v10, a4);
  swift_bridgeObjectRelease(a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.MulticastScheduleChange.init(from:)(void *a1)
{
  uint64_t result = sub_1001CCC58(a1);
  if (v1) {
    return v3 & 0xFFFFFF;
  }
  return result;
}

Swift::Int sub_1001B4E8C()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 16);
  Swift::UInt8 v5 = *(_BYTE *)(v0 + 18);
  Hasher.init(_seed:)(v7, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain(v3);
  sub_100082834((uint64_t)v7, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001B4F2C(uint64_t a1)
{
  Swift::UInt64 v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 24);
  Swift::UInt16 v5 = *(_WORD *)(v1 + 16);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 18);
  Hasher._combine(_:)(*(void *)v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain(v4);
  sub_100082834(a1, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1001B4FA0(uint64_t a1)
{
  Swift::UInt64 v2 = *(void *)v1;
  Swift::UInt64 v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 24);
  Swift::UInt16 v5 = *(_WORD *)(v1 + 16);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 18);
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain(v4);
  sub_100082834((uint64_t)v8, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001B503C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CCC58(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 16)  = v6;
    *(_BYTE *)(a2 + 18)  = BYTE2(v6);
    *(void *)(a2 + 24)  = v7;
  }

  return result;
}

uint64_t sub_1001B5074(void *a1)
{
  return NANAttribute.MulticastScheduleChange.encode(to:)( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16),  *(void *)(v1 + 24));
}

uint64_t sub_1001B509C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18))
  {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0( *(void *)(a1 + 24),  *(void *)(a2 + 24));
  }

  else
  {
    return 0LL;
  }

void NANAttribute.PublicAvailability.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = (unint64_t *)(a2 + 56);
    do
    {
      uint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      Swift::UInt16 v8 = *((_WORD *)v5 - 8);
      Hasher._combine(_:)(*((_BYTE *)v5 - 24));
      Hasher._combine(_:)(v8);
      sub_100020AFC(v6, v7);
      Data.hash(into:)(a1, v6, v7);
      sub_1000208D8(v6, v7);
      v5 += 4;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a2);
  }

unint64_t sub_1001B519C()
{
  return 0xD000000000000021LL;
}

uint64_t sub_1001B51B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E3B8C(a1, a2);
  *a3  = result & 1;
  return result;
}

uint64_t sub_1001B51E0(uint64_t a1)
{
  unint64_t v2 = sub_1001D2CD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B5208(uint64_t a1)
{
  unint64_t v2 = sub_1001D2CD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.PublicAvailability.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040AAF8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_1001D2CD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.PublicAvailability.CodingKeys,  &type metadata for NANAttribute.PublicAvailability.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100002274(&qword_10040A960);
  uint64_t v12 = sub_100087780( &qword_10040A968,  &qword_10040A960,  (void (*)(void))sub_1001D1E08,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.PublicAvailability.hashValue.getter(uint64_t a1)
{
  return sub_1001B5360(a1, (void (*)(void *, uint64_t))sub_100082834);
}

Swift::Int sub_1001B5360(uint64_t a1, void (*a2)(void *, uint64_t))
{
  return Hasher._finalize()();
}

void *NANAttribute.PublicAvailability.init(from:)(void *a1)
{
  return sub_1001CBFF8(a1);
}

Swift::Int sub_1001B53CC(uint64_t a1, uint64_t a2)
{
  return sub_1001B53D8(a1, a2, (void (*)(void *, uint64_t))sub_100082834);
}

Swift::Int sub_1001B53D8(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)(v7, 0LL);
  swift_bridgeObjectRetain(v5);
  a3(v7, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

void sub_1001B5430(uint64_t a1)
{
}

Swift::Int sub_1001B5438(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v9, a1);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = (unint64_t *)(v2 + 56);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      Swift::UInt16 v7 = *((_WORD *)v4 - 8);
      Hasher._combine(_:)(*((_BYTE *)v4 - 24));
      Hasher._combine(_:)(v7);
      sub_100020AFC(v5, v6);
      Data.hash(into:)(v9, v5, v6);
      sub_1000208D8(v5, v6);
      v4 += 4;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v2);
  }

  return Hasher._finalize()();
}

void *sub_1001B5500@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001CBFF8(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001B5528(void *a1)
{
  return NANAttribute.PublicAvailability.encode(to:)(a1, *v1);
}

uint64_t sub_1001B5540(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

BOOL NANAttribute.PairingIdentityResolution.CipherVersion.init(rawValue:)(char a1)
{
  return a1 != 0;
}

_BYTE *sub_1001B5558@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 0;
  return result;
}

Swift::Int sub_1001B556C(uint64_t a1, uint64_t a2)
{
  return sub_1001B5574(a1, a2, 0);
}

Swift::Int sub_1001B5574(uint64_t a1, uint64_t a2, Swift::UInt8 a3)
{
  return Hasher._finalize()();
}

void sub_1001B55B8()
{
}

Swift::Int sub_1001B55DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B55E4(a1, a2, a3, 0);
}

Swift::Int sub_1001B55E4(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt8 a4)
{
  return Hasher._finalize()();
}

uint64_t sub_1001B5624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4114();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B5680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4114();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANAttribute.PairingIdentityResolution.init(nonce:tag:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001B5710()
{
  if (BYTE6(v0) == 8LL) {
    __asm { BR              X10 }
  }

  unint64_t v4 = sub_1000033FC();
  uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
  *(void *)uint64_t v6 = 0LL;
  *(void *)(v6 + 8)  = 0LL;
  *(_BYTE *)(v6 + 16)  = 2;
  swift_willThrow(v5);
  sub_1000208D8(v3, v2);
  sub_1000208D8(v1, v0);
  return v1;
}

uint64_t NANAttribute.PairingIdentityResolution.init(from:)(void *a1)
{
  uint64_t result = sub_1001CEBE8(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t NANAttribute.PairingIdentityResolution.hash(into:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1000208D8(a4, a5);
}

uint64_t sub_1001B58E8()
{
  uint64_t v1 = 0x65636E6F6ELL;
  if (*v0 != 1) {
    uint64_t v1 = 6775156LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6556726568706963LL;
  }
}

uint64_t sub_1001B5944@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E3C10(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B5968(uint64_t a1)
{
  unint64_t v2 = sub_1001D2D14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B5990(uint64_t a1)
{
  unint64_t v2 = sub_1001D2D14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.PairingIdentityResolution.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v22 = a3;
  uint64_t v9 = sub_100002274(&qword_10040AB08);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v14);
  unint64_t v15 = sub_1001D2D14();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys,  &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys,  v15,  v14,  v13);
  LOBYTE(v23)  = 0;
  unint64_t v16 = sub_1001D2D58();
  KeyedEncodingContainer.encode<A>(_:forKey:)( v16,  &v23,  v9,  &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion,  v16);
  if (!v5)
  {
    uint64_t v17 = a4;
    uint64_t v18 = v21;
    uint64_t v23 = a2;
    uint64_t v24 = v22;
    char v25 = 1;
    unint64_t v19 = sub_10005CD78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
    uint64_t v23 = v17;
    uint64_t v24 = v18;
    char v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.PairingIdentityResolution.hashValue.getter( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001B5BF0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(0);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v6, v1, v2);
  sub_1000208D8(v1, v2);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(v6, v3, v4);
  sub_1000208D8(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001B5C98(uint64_t a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  Hasher._combine(_:)(0);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  sub_1000208D8(v3, v4);
  sub_100020AFC(v5, v6);
  Data.hash(into:)(a1, v5, v6);
  return sub_1000208D8(v5, v6);
}

Swift::Int sub_1001B5D24(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(0);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v7, v2, v3);
  sub_1000208D8(v2, v3);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(v7, v4, v5);
  sub_1000208D8(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1001B5DC8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001CEBE8(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
    a2[2]  = v6;
    a2[3]  = v7;
  }

  return result;
}

uint64_t sub_1001B5DF4(void *a1)
{
  return NANAttribute.PairingIdentityResolution.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1001B5E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E40D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B5E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E40D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001B5EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E408C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B5F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E408C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANAttribute.PairingBootstrapping.Method.opportunistic.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.opportunistic;
}

void *NANAttribute.PairingBootstrapping.Method.pinCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.pinCode;
}

void *NANAttribute.PairingBootstrapping.Method.passphrase.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.passphrase;
}

void *NANAttribute.PairingBootstrapping.Method.qrCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.qrCode;
}

void *NANAttribute.PairingBootstrapping.Method.nfcTag.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.nfcTag;
}

void *NANAttribute.PairingBootstrapping.Method.keypadPinCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.keypadPinCode;
}

void *NANAttribute.PairingBootstrapping.Method.keypadPassphrase.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.keypadPassphrase;
}

void *NANAttribute.PairingBootstrapping.Method.qrCodeScan.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.qrCodeScan;
}

void *NANAttribute.PairingBootstrapping.Method.nfcReader.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.nfcReader;
}

void *NANAttribute.PairingBootstrapping.Method.bootstrapManagedByService.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.bootstrapManagedByService;
}

void *NANAttribute.PairingBootstrapping.Method.bootstrapHandshakeSkipped.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.bootstrapHandshakeSkipped;
}

void *NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods;
}

uint64_t static NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods.getter()
{
  return 31LL;
}

uint64_t sub_1001B5FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5CE8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B6054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5CE8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

  ;
}

uint64_t NANAttribute.PairingBootstrapping.Comeback.comebackAfter.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8)  = a2 & 1;
  return result;
}

uint64_t NANAttribute.PairingBootstrapping.Comeback.hash(into:)( uint64_t a1, Swift::UInt64 a2, char a3, uint64_t a4, unint64_t a5)
{
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }

  sub_100020AFC(a4, a5);
  Data.hash(into:)(a1, a4, a5);
  return sub_1000208D8(a4, a5);
}

void static NANAttribute.PairingBootstrapping.Comeback.__derived_struct_equals(_:_:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a2 & 1) != 0)
  {
    if ((a6 & 1) != 0) {
LABEL_4:
    }
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4);
  }

  else if ((a6 & 1) == 0 && a1 == a5)
  {
    goto LABEL_4;
  }

Swift::Int NANAttribute.PairingBootstrapping.Comeback.hashValue.getter( Swift::UInt64 a1, char a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }

  sub_100020AFC(a3, a4);
  Data.hash(into:)(v9, a3, a4);
  sub_1000208D8(a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_1001B61FC()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)(v6, 0LL);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  sub_100020AFC(v3, v4);
  Data.hash(into:)(v6, v3, v4);
  sub_1000208D8(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001B62A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 24);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v5 = *(void *)v1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }

  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_1000208D8(v3, v4);
}

Swift::Int sub_1001B6328(uint64_t a1)
{
  Swift::UInt64 v2 = *(void *)v1;
  int v3 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = *(void *)(v1 + 24);
  Hasher.init(_seed:)(v7, a1);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }

  sub_100020AFC(v4, v5);
  Data.hash(into:)(v7, v4, v5);
  sub_1000208D8(v4, v5);
  return Hasher._finalize()();
}

void sub_1001B63C8(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      return;
    }
LABEL_8:
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
    return;
  }

  if (*(void *)a1 == *(void *)a2) {
    char v7 = *(_BYTE *)(a2 + 8);
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) == 0) {
    goto LABEL_8;
  }
}

unint64_t NANAttribute.PairingBootstrapping.type.getter()
{
  unint64_t result = sub_100071528(0LL, 4LL, *(_BYTE *)(v0 + 1));
  return result;
}

uint64_t NANAttribute.PairingBootstrapping.comeback.getter()
{
  uint64_t v1 = v0[1];
  sub_100117128(v1, v0[2], v0[3], v0[4]);
  return v1;
}

uint64_t NANAttribute.PairingBootstrapping.comeback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10011D8A4(*(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
  *(void *)(v4 + 8)  = a1;
  *(void *)(v4 + 16)  = a2;
  *(void *)(v4 + 24)  = a3;
  *(void *)(v4 + 32)  = a4;
  return result;
}

void NANAttribute.PairingBootstrapping.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 2));
  unint64_t v4 = *(void *)(v2 + 32);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 16);
    uint64_t v5 = *(void *)(v2 + 24);
    Swift::UInt64 v7 = *(void *)(v2 + 8);
    Hasher._combine(_:)(1u);
    if ((v6 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7);
    }

    sub_1001D2D9C(v2);
    Data.hash(into:)(a1, v5, v4);
  }

  sub_1001D2DCC(v2);
  Hasher._combine(_:)(*(_WORD *)(v2 + 40));
}

Swift::Int NANAttribute.PairingBootstrapping.hashValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 24);
    Swift::UInt64 v4 = *(void *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v3 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v4);
    }

    sub_1001D2D9C(v0);
    Data.hash(into:)(v6, v2, v1);
  }

  sub_1001D2DCC(v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 40));
  return Hasher._finalize()();
}

Swift::Int sub_1001B66AC()
{
  return NANAttribute.PairingBootstrapping.hashValue.getter();
}

void sub_1001B66E4(uint64_t a1)
{
}

Swift::Int sub_1001B671C(uint64_t a1)
{
  Swift::UInt64 v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v5 = *(void *)(v1 + 32);
  Swift::UInt16 v6 = *(_WORD *)(v1 + 40);
  Swift::UInt8 v7 = *(_BYTE *)v1;
  Swift::UInt8 v8 = *(_BYTE *)(v1 + 1);
  Swift::UInt8 v9 = *(_BYTE *)(v1 + 2);
  Hasher.init(_seed:)(v11, a1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    if ((v3 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }

    sub_100117128(v2, v3, v4, v5);
    Data.hash(into:)(v11, v4, v5);
  }

  sub_10011D8A4(v2, v3, v4, v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

double NANAttribute.PairingBootstrapping.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 26)  = *(_OWORD *)((char *)v7 + 10);
  }

  return result;
}

uint64_t sub_1001B6878(void *a1)
{
  return NANAttribute.PairingBootstrapping.encode(to:)(a1);
}

uint64_t NANAttribute.PairingBootstrapping.encode(to:)(void *a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v24, v4, v5);
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  uint64_t v8 = *v1;
  sub_1000237C8((uint64_t)v24, v25);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    LOBYTE(v23[0])  = *(_BYTE *)(v3 + 1);
    uint64_t v9 = v25;
    uint64_t v10 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    uint64_t v11 = sub_100002274(&qword_10040AB20);
    uint64_t v12 = sub_1000572E4(&qword_10040AB28, &qword_10040AB20, (uint64_t)&unk_100348B28);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v23, v11, v12, v9, v10);
    LOBYTE(v23[0])  = *(_BYTE *)(v3 + 2);
    uint64_t v13 = v25;
    uint64_t v14 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    unint64_t v15 = sub_1001D112C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v23, &type metadata for NANReasonCode, v15, v13, v14);
    sub_1000586C0(v3 + 8, (uint64_t)v27, &qword_10040AB30);
    sub_1000586C0((uint64_t)v27, (uint64_t)&v28, &qword_10040AB30);
    if (*((void *)&v29 + 1) >> 60 != 15LL)
    {
      __int128 v30 = v28;
      __int128 v31 = v29;
      sub_1000586C0((uint64_t)&v30, (uint64_t)v32, &qword_10040AB40);
      sub_1000586C0((uint64_t)v32, (uint64_t)&v36, &qword_10040AB40);
      if (v37 == 1)
      {
        sub_1001D2D9C(v3);
      }

      else
      {
        unint64_t v19 = v36;
        if (v36 >= 0x10000)
        {
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
          __break(1u);
          JUMPOUT(0x1001B6CC8LL);
        }

        uint64_t v20 = v25;
        uint64_t v21 = v26;
        sub_1000237C8((uint64_t)v24, v25);
        sub_1001D2D9C(v3);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v19, v20, v21);
      }

      __int128 v33 = v31;
      sub_1001D2E40((uint64_t)&v33, (uint64_t)v34);
      sub_1001D2E40((uint64_t)v34, (uint64_t)v35);
      __asm { BR              X11 }
    }

    v23[0]  = *(_WORD *)(v3 + 40);
    uint64_t v16 = v25;
    uint64_t v17 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    unint64_t v18 = sub_1001D2DFC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v23,  &type metadata for NANAttribute.PairingBootstrapping.Method,  v18,  v16,  v17);
  }

  return sub_100002AC4(v24);
}

BOOL sub_1001B6CD8(__int128 *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  __int128 v5 = *a1;
  v6[0]  = v2;
  *(_OWORD *)((char *)v6 + 10)  = *(__int128 *)((char *)a1 + 26);
  __int128 v3 = a2[1];
  __int128 v7 = *a2;
  v8[0]  = v3;
  *(_OWORD *)((char *)v8 + 10)  = *(__int128 *)((char *)a2 + 26);
  return _s7CoreP2P12NANAttributeO20PairingBootstrappingV23__derived_struct_equalsySbAE_AEtFZ_0( (unsigned __int8 *)&v5,  (unsigned __int8 *)&v7);
}

uint64_t NANAttribute.VendorSpecific.oui.getter(int a1)
{
  return a1 & 0xFFFFFF;
}

uint64_t NANAttribute.VendorSpecific.oui.setter(uint64_t result)
{
  *(_WORD *)uint64_t v1 = result;
  *(_BYTE *)(v1 + 2)  = BYTE2(result);
  return result;
}

uint64_t NANAttribute.VendorSpecific.hash(into:)( uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  char v6 = a2;
  unsigned int v8 = a2 >> 8;
  unsigned int v9 = HIWORD(a2);
  uint64_t v10 = sub_100002274(&qword_1004040A8);
  uint64_t v11 = swift_allocObject(v10, 35LL, 7LL);
  *(_OWORD *)(v11 + 16)  = xmmword_100339910;
  *(_BYTE *)(v11 + 32)  = v6;
  *(_BYTE *)(v11 + 33)  = v8;
  *(_BYTE *)(v11 + 34)  = v9;
  uint64_t v12 = sub_1000FB08C(v11);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease(v11);
  Data.hash(into:)(a1, v12, v14);
  sub_1000208D8(v12, v14);
  sub_100020AFC(a3, a4);
  Data.hash(into:)(a1, a3, a4);
  return sub_1000208D8(a3, a4);
}

void static NANAttribute.VendorSpecific.__derived_struct_equals(_:_:)( int a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t sub_1001B6E1C()
{
  if (*v0) {
    return 1635017060LL;
  }
  else {
    return 6911343LL;
  }
}

uint64_t sub_1001B6E48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E3D70(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001B6E6C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2E7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B6E94(uint64_t a1)
{
  unint64_t v2 = sub_1001D2E7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.VendorSpecific.encode(to:)(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v20 = a3;
  char v4 = a2;
  unsigned int v6 = a2 >> 8;
  unsigned int v7 = HIWORD(a2);
  uint64_t v8 = sub_100002274(&qword_10040AB48);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100021104(a1, v12);
  unint64_t v14 = sub_1001D2E7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.VendorSpecific.CodingKeys,  &type metadata for NANAttribute.VendorSpecific.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v23[0])  = v4;
  BYTE1(v23[0])  = v6;
  BYTE2(v23[0])  = v7;
  char v24 = 0;
  unint64_t v15 = sub_100165A78();
  uint64_t v16 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v8, &type metadata for OUI, v15);
  if (!v16)
  {
    v23[0]  = v20;
    v23[1]  = v21;
    char v24 = 1;
    unint64_t v17 = sub_1001D0D1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v8, &type metadata for BinaryDecoder.DataCopy, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.VendorSpecific.hashValue.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  char v5 = a1;
  unsigned int v6 = a1 >> 8;
  unsigned int v7 = HIWORD(a1);
  Hasher.init(_seed:)(v14, 0LL);
  uint64_t v8 = sub_100002274(&qword_1004040A8);
  uint64_t v9 = swift_allocObject(v8, 35LL, 7LL);
  *(_OWORD *)(v9 + 16)  = xmmword_100339910;
  *(_BYTE *)(v9 + 32)  = v5;
  *(_BYTE *)(v9 + 33)  = v6;
  *(_BYTE *)(v9 + 34)  = v7;
  uint64_t v10 = sub_1000FB08C(v9);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v9);
  Data.hash(into:)(v14, v10, v12);
  sub_1000208D8(v10, v12);
  sub_100020AFC(a2, a3);
  Data.hash(into:)(v14, a2, a3);
  sub_1000208D8(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.VendorSpecific.init(from:)(void *a1)
{
  return sub_1001CB488(a1) & 0xFFFFFF;
}

Swift::Int sub_1001B7128()
{
  return NANAttribute.VendorSpecific.hashValue.getter( *v0 | (*((unsigned __int8 *)v0 + 2) << 16),  *((void *)v0 + 1),  *((void *)v0 + 2));
}

uint64_t sub_1001B713C(uint64_t a1)
{
  __int16 v3 = *v1;
  char v4 = *((_BYTE *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 1);
  unint64_t v5 = *((void *)v1 + 2);
  uint64_t v7 = sub_100002274(&qword_1004040A8);
  uint64_t v8 = swift_allocObject(v7, 35LL, 7LL);
  *(_OWORD *)(v8 + 16)  = xmmword_100339910;
  *(_WORD *)(v8 + 32)  = v3;
  *(_BYTE *)(v8 + 34)  = v4;
  uint64_t v9 = sub_1000FB08C(v8);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease(v8);
  Data.hash(into:)(a1, v9, v11);
  sub_1000208D8(v9, v11);
  sub_100020AFC(v6, v5);
  Data.hash(into:)(a1, v6, v5);
  return sub_1000208D8(v6, v5);
}

Swift::Int sub_1001B71F8(uint64_t a1)
{
  __int16 v2 = *v1;
  char v3 = *((_BYTE *)v1 + 2);
  uint64_t v4 = *((void *)v1 + 1);
  unint64_t v5 = *((void *)v1 + 2);
  Hasher.init(_seed:)(v12, a1);
  uint64_t v6 = sub_100002274(&qword_1004040A8);
  uint64_t v7 = swift_allocObject(v6, 35LL, 7LL);
  *(_OWORD *)(v7 + 16)  = xmmword_100339910;
  *(_WORD *)(v7 + 32)  = v2;
  *(_BYTE *)(v7 + 34)  = v3;
  uint64_t v8 = sub_1000FB08C(v7);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease(v7);
  Data.hash(into:)(v12, v8, v10);
  sub_1000208D8(v8, v10);
  sub_100020AFC(v4, v5);
  Data.hash(into:)(v12, v4, v5);
  sub_1000208D8(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1001B72CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001CB488(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }

  return result;
}

uint64_t sub_1001B7308(void *a1)
{
  return NANAttribute.VendorSpecific.encode(to:)( a1,  *v1 | (*((unsigned __int8 *)v1 + 2) << 16),  *((void *)v1 + 1),  *((void *)v1 + 2));
}

void sub_1001B732C(unsigned __int16 *a1, unsigned __int16 *a2)
{
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.flags.modify( uint64_t a1))(uint64_t result)
{
  *(void *)a1  = v1;
  *(_DWORD *)(a1 + 8)  = *v1;
  return sub_1001B7370;
}

uint64_t sub_1001B7370(uint64_t result)
{
  **(_BYTE **)uint64_t result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.datapathSubscribeID.getter()
{
  return *(unsigned __int8 *)(v0 + 1) | (*(unsigned __int8 *)(v0 + 2) << 8);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.datapathSubscribeID.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 1)  = result;
  *(_BYTE *)(v1 + 2)  = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return sub_1000226B0(v1 + *(int *)(v3 + 24), a1, (uint64_t *)&unk_10040D470);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return sub_100057104(a1, v1 + *(int *)(v3 + 24), (uint64_t *)&unk_10040D470);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 28);
  uint64_t v2 = *(void *)v1;
  sub_10002255C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.setter( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 28);
  uint64_t result = sub_100020B40(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 32);
  uint64_t v2 = *(void *)v1;
  sub_10002255C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.setter( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 32);
  uint64_t result = sub_100020B40(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 36);
  uint64_t v2 = *(void *)v1;
  sub_10002255C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.setter( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 36);
  uint64_t result = sub_100020B40(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return sub_1000226B0(v1 + *(int *)(v3 + 40), a1, qword_100410330);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return sub_100057104(a1, v1 + *(int *)(v3 + 40), qword_100410330);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.getter()
{
  uint64_t v1 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 44)));
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.setter( uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 44);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v3));
  *(void *)(v1 + sub_1000208D8(v2, v3) = a1;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.getter@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return sub_1000226B0(v1 + *(int *)(v3 + 48), a1, (uint64_t *)&unk_10040DCC0);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return sub_100057104(a1, v1 + *(int *)(v3 + 48), (uint64_t *)&unk_10040DCC0);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 52));
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.setter( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v10 = v4 + *(int *)(result + 52);
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 8)  = a2;
  *(void *)(v10 + 16)  = a3;
  *(_BYTE *)(v10 + 24)  = a4 & 1;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v108 = a1;
  uint64_t v83 = a2;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  v98  = *(void *)(v2 - 8);
  uint64_t v99 = v2;
  __chkstk_darwin(v2);
  unint64_t v97 = (char *)v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v104 = (char *)v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v89 = (char *)v75 - v8;
  uint64_t v9 = sub_100002274((uint64_t *)&unk_10040DCC0);
  __chkstk_darwin(v9);
  uint64_t v88 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100002274(qword_100410330);
  __chkstk_darwin(v11);
  v93  = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v94 = (char *)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v87 = (char *)v75 - v17;
  uint64_t v18 = sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin(v18);
  char v86 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_WORD *)uint64_t v23 = 0;
  v23[2]  = 1;
  char v24 = &v23[*(int *)(v21 + 24)];
  v95  = v14;
  uint64_t v96 = v13;
  uint64_t v84 = *(void (**)(void))(v14 + 56);
  unint64_t v85 = v24;
  v84();
  uint64_t v100 = &v23[v20[7]];
  *(_OWORD *)uint64_t v100 = xmmword_10033BED0;
  uint64_t v105 = (uint64_t *)&v23[v20[8]];
  *(_OWORD *)uint64_t v105 = xmmword_10033BED0;
  char v102 = &v23[v20[9]];
  *(_OWORD *)char v102 = xmmword_10033BED0;
  uint64_t v25 = &v23[v20[10]];
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
  unint64_t v92 = v25;
  v91(v25, 1LL, 1LL, v26);
  uint64_t v27 = v20[11];
  *(void *)&v23[v27]  = _swiftEmptyArrayStorage;
  __int128 v28 = &v23[v20[12]];
  __int128 v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v90 = v4;
  v29(v28, 1LL, 1LL, v4);
  uint64_t v30 = v20[13];
  uint64_t v107 = v23;
  __int128 v31 = &v23[v30];
  *(void *)__int128 v31 = 0LL;
  *((void *)v31 + 1)  = 0LL;
  *((void *)v31 + 2)  = 0LL;
  v31[24]  = 1;
  uint64_t v32 = v108[3];
  uint64_t v33 = v108[4];
  sub_100021104(v108, v32);
  uint64_t v34 = v106;
  dispatch thunk of Decoder.unkeyedContainer()(v110, v32, v33);
  if (v34)
  {
    uint64_t v39 = (uint64_t)v107;
    sub_100002AC4(v108);
    return sub_10005802C(v39, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  }

  else
  {
    uint64_t v78 = v31;
    uint64_t v79 = v29;
    char v80 = v28;
    v81  = v26;
    uint64_t v82 = v27;
    uint64_t v35 = sub_100002274(&qword_100406460);
    uint64_t v36 = v111;
    uint64_t v37 = v112;
    sub_1000237C8((uint64_t)v110, v111);
    unint64_t v38 = sub_100070180();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v35, v35, v38, v36, v37);
    uint64_t v106 = 0LL;
    unint64_t v41 = *(void *)(v109 + 16);
    uint64_t v77 = v109;
    if (v41)
    {
      int v76 = enum case for DispatchTimeInterval.seconds(_:);
      unint64_t v42 = (unint64_t *)(v109 + 48);
      v75[2]  = &type metadata for Any[8];
      uint64_t v43 = v104;
      uint64_t v44 = v105;
      do
      {
        uint64_t v46 = *(v42 - 1);
        unint64_t v45 = *v42;
        switch(*((_BYTE *)v42 - 16))
        {
          case 0:
            uint64_t v47 = type metadata accessor for BinaryDecoder();
            __int16 v48 = (void *)swift_allocObject(v47, 48LL, 7LL);
            v48[5]  = &_swiftEmptyDictionarySingleton;
            uint64_t v101 = v46;
            v48[2]  = v46;
            v48[3]  = v45;
            __asm { BR              X9 }

            return result;
          case 1:
            uint64_t v49 = type metadata accessor for BinaryDecoder();
            __int128 v50 = (void *)swift_allocObject(v49, 48LL, 7LL);
            v50[5]  = &_swiftEmptyDictionarySingleton;
            uint64_t v101 = v46;
            void v50[2] = v46;
            void v50[3] = v45;
            unint64_t v103 = v45;
            __asm { BR              X9 }

            return result;
          case 2:
            sub_100020AFC(*(v42 - 1), *v42);
            sub_100020AFC(v46, v45);
            sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v51 = type metadata accessor for BinaryDecoder();
            uint64_t v52 = (void *)swift_allocObject(v51, 48LL, 7LL);
            v52[5]  = &_swiftEmptyDictionarySingleton;
            v52[2]  = v46;
            v52[3]  = v45;
            unint64_t v103 = v45;
            __asm { BR              X9 }

            return result;
          case 3:
            unint64_t v103 = v41;
            uint64_t v53 = v43;
            unint64_t v54 = v45;
            unint64_t v55 = (uint64_t *)v100;
            uint64_t v56 = *(void *)v100;
            unint64_t v57 = *((void *)v100 + 1);
            sub_100020AFC(v46, v54);
            sub_100020B40(v56, v57);
            *unint64_t v55 = v46;
            v55[1]  = v54;
            uint64_t v43 = v53;
            unint64_t v41 = v103;
            break;
          case 4:
            unint64_t v58 = v41;
            char v59 = v43;
            unint64_t v60 = *v42;
            uint64_t v61 = *v44;
            unint64_t v62 = v44[1];
            sub_100020AFC(*(v42 - 1), *v42);
            sub_100020B40(v61, v62);
            *uint64_t v44 = v46;
            v44[1]  = v60;
            goto LABEL_14;
          case 5:
            unint64_t v58 = v41;
            char v59 = v43;
            unint64_t v63 = *v42;
            uint64_t v64 = *(void *)v102;
            v65  = *((void *)v102 + 1);
            sub_100020AFC(*(v42 - 1), *v42);
            uint64_t v66 = v64;
            uint64_t v67 = (uint64_t *)v102;
            sub_100020B40(v66, v65);
            *uint64_t v67 = v46;
            v67[1]  = v63;
LABEL_14:
            uint64_t v43 = v59;
            unint64_t v41 = v58;
            break;
          case 6:
            unint64_t v103 = *v42;
            __asm { BR              X8 }

            return result;
          case 7:
            sub_100020AFC(*(v42 - 1), *v42);
            sub_100020AFC(v46, v45);
            sub_100020AFC(v46, v45);
            sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v68 = type metadata accessor for BinaryDecoder();
            char v69 = (void *)swift_allocObject(v68, 48LL, 7LL);
            v69[5]  = &_swiftEmptyDictionarySingleton;
            v69[2]  = v46;
            v69[3]  = v45;
            __asm { BR              X9 }

            return result;
          case 8:
            sub_100020AFC(*(v42 - 1), *v42);
            sub_100020AFC(v46, v45);
            sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v70 = type metadata accessor for BinaryDecoder();
            v71  = (void *)swift_allocObject(v70, 48LL, 7LL);
            v71[5]  = &_swiftEmptyDictionarySingleton;
            v71[2]  = v46;
            v71[3]  = v45;
            unint64_t v103 = v45;
            __asm { BR              X9 }

            return result;
          case 9:
            sub_100020AFC(*(v42 - 1), *v42);
            sub_100020AFC(v46, v45);
            sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v72 = type metadata accessor for BinaryDecoder();
            v73  = (void *)swift_allocObject(v72, 48LL, 7LL);
            v73[5]  = &_swiftEmptyDictionarySingleton;
            v73[2]  = v46;
            v73[3]  = v45;
            unint64_t v103 = v45;
            __asm { BR              X9 }

            return result;
          default:
            break;
        }

        v42 += 3;
        --v41;
      }

      while (v41);
    }

    swift_bridgeObjectRelease(v77);
    sub_100002AC4(v110);
    uint64_t v74 = (uint64_t)v107;
    sub_100057FE8((uint64_t)v107, v83, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_100002AC4(v108);
    return sub_10005802C(v74, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  }

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002274((uint64_t *)&unk_10040DCC0);
  __chkstk_darwin(v5);
  uint64_t v88 = (uint64_t)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v90 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v87 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v89 = (uint64_t)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274(qword_100410330);
  __chkstk_darwin(v8);
  v93  = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v94 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v91 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v92 = (char *)&v86 - v13;
  uint64_t v14 = sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  v98  = *(int **)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v96 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_100021104(a1, v19);
  dispatch thunk of Encoder.unkeyedContainer()(v112, v19, v20);
  int v21 = *v3;
  unint64_t v97 = v3;
  v95  = v10;
  if (v21)
  {
    uint64_t v22 = sub_100002274(&qword_1004040A8);
    uint64_t v23 = swift_allocObject(v22, 33LL, 7LL);
    *(_OWORD *)(v23 + 16)  = xmmword_100339900;
    *(_BYTE *)(v23 + 32)  = v21;
    sub_1000FB08C(v23);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v23);
    __asm { BR              X10 }
  }

  if ((v3[2] & 1) == 0)
  {
    unsigned __int8 v26 = v3[1];
    uint64_t v27 = sub_100002274(&qword_1004040A8);
    uint64_t v28 = swift_allocObject(v27, 33LL, 7LL);
    *(_OWORD *)(v28 + 16)  = xmmword_100339900;
    *(_BYTE *)(v28 + 32)  = v26;
    sub_1000FB08C(v28);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease(v28);
    __asm { BR              X10 }
  }

  __int128 v31 = v98;
  uint64_t v32 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  sub_1000226B0((uint64_t)&v3[v32[6]], (uint64_t)v16, (uint64_t *)&unk_10040D470);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v31 + 6))(v16, 1LL, v17) != 1)
  {
    uint64_t v33 = (*((uint64_t (**)(char *, char *, uint64_t))v31 + 4))(v96, v16, v17);
    P256.KeyAgreement.PublicKey.rawRepresentation.getter(v33);
    __asm { BR              X10 }
  }

  sub_1000225EC((uint64_t)v16, (uint64_t *)&unk_10040D470);
  unint64_t v35 = *(void *)&v3[v32[7] + 8];
  if (v35 >> 60 != 15) {
    __asm { BR              X10 }
  }

  unint64_t v36 = *(void *)&v3[v32[8] + 8];
  if (v36 >> 60 != 15) {
    __asm { BR              X10 }
  }

  unint64_t v37 = *(void *)&v3[v32[9] + 8];
  if (v37 >> 60 != 15) {
    __asm { BR              X10 }
  }

  uint64_t v39 = v93;
  sub_1000226B0((uint64_t)&v3[v32[10]], v93, qword_100410330);
  uint64_t v40 = v94;
  uint64_t v41 = v95;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v39, 1LL, v95) != 1)
  {
    uint64_t v43 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v92, v39, v41);
    uint64_t v44 = v91;
    uint64_t v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))(v91, v43, v41);
    uint64_t v100 = UUID.uuid.getter(v45);
    __int16 v101 = v46;
    char v102 = v47;
    char v103 = v48;
    char v104 = v49;
    char v105 = v50;
    char v106 = v51;
    char v107 = v52;
    sub_1000EF854((uint64_t)&v100, (uint64_t)&v108);
    uint64_t v54 = v53;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v41);
    __asm { BR              X10 }
  }

  v98  = v32;
  uint64_t v42 = v2;
  sub_1000225EC(v39, qword_100410330);
  uint64_t v55 = *(void *)&v3[v98[11]];
  if (*(void *)(v55 + 16))
  {
    swift_bridgeObjectRetain(*(void *)&v3[v98[11]]);
    unint64_t v56 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v57 = (ValueMetadata *)type metadata accessor for BinaryEncoder();
    unint64_t v58 = (uint64_t *)swift_allocObject(v57, 40LL, 7LL);
    *((_OWORD *)v58 + 1)  = xmmword_1003398F0;
    v58[4]  = v56;
    uint64_t v109 = v57;
    unint64_t v110 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
    uint64_t v100 = (uint64_t)v58;
    unint64_t v59 = sub_1001D2EC0();
    swift_bridgeObjectRetain(v55);
    swift_retain();
    Array<A>.encode(to:)(&v100, v55, &type metadata for NANPeerServiceIdentifier, v59);
    if (!v42)
    {
      sub_100002AC4(&v100);
      swift_bridgeObjectRelease(v55);
      swift_beginAccess(v58 + 2, v111, 0LL, 0LL);
      unint64_t v60 = v58[3];
      sub_100020AFC(v58[2], v60);
      swift_bridgeObjectRelease(v55);
      swift_release(v58);
      __asm { BR              X9 }
    }

    sub_100002AC4(&v100);
    swift_release(v58);
    swift_bridgeObjectRelease_n(v55, 2LL);
    return sub_100002AC4(v112);
  }

  uint64_t v61 = v88;
  sub_1000226B0((uint64_t)&v3[v98[12]], v88, (uint64_t *)&unk_10040DCC0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v61, 1LL, v90) == 1)
  {
    sub_1000225EC(v61, (uint64_t *)&unk_10040DCC0);
    unint64_t v62 = &v3[v98[13]];
    if ((v62[24] & 1) == 0)
    {
      double v64 = *((double *)v62 + 1);
      double v63 = *((double *)v62 + 2);
      v65  = *(double *)v62;
      unint64_t v66 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v67 = type metadata accessor for BinaryEncoder();
      uint64_t v68 = (uint64_t *)swift_allocObject(v67, 40LL, 7LL);
      *((_OWORD *)v68 + 1)  = xmmword_1003398F0;
      v68[4]  = v66;
      uint64_t v109 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v69 = sub_10006E360();
      unint64_t v110 = v69;
      uint64_t v100 = (uint64_t)v68;
      sub_1000237C8((uint64_t)&v100, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_retain();
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(&type metadata for BinaryEncoder.UnkeyedContainer, v69, v65);
      if (!v2)
      {
        uint64_t v70 = v109;
        v71  = v110;
        sub_1000237C8((uint64_t)&v100, (uint64_t)v109);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v70, v71, v64);
        uint64_t v72 = v109;
        v73  = v110;
        sub_1000237C8((uint64_t)&v100, (uint64_t)v109);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v72, v73, v63);
        sub_100002AC4(&v100);
        swift_beginAccess(v68 + 2, &v100, 0LL, 0LL);
        unint64_t v85 = v68[3];
        sub_100020AFC(v68[2], v85);
        swift_release(v68);
        __asm { BR              X9 }
      }

      sub_100002AC4(&v100);
      swift_release(v68);
    }

    return sub_100002AC4(v112);
  }

  sub_100022628(v61, v89, type metadata accessor for NANInternetSharingStatistics.Requester);
  unint64_t v74 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  v75  = type metadata accessor for BinaryEncoder();
  int v76 = (uint64_t *)swift_allocObject(v75, 40LL, 7LL);
  *((_OWORD *)v76 + 1)  = xmmword_1003398F0;
  v76[4]  = v74;
  uint64_t v109 = &type metadata for BinaryEncoder.UnkeyedContainer;
  unint64_t v110 = sub_10006E360();
  uint64_t v100 = (uint64_t)v76;
  swift_retain();
  uint64_t v77 = DispatchTimeInterval.rawSeconds.getter();
  if (v77 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v78 = v77;
  if (v77 > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
    JUMPOUT(0x1001BA5F8LL);
  }

  uint64_t v79 = v109;
  unint64_t v80 = v110;
  sub_1000237C8((uint64_t)&v100, (uint64_t)v109);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v78, v79, v80);
  if (!v2)
  {
    v81  = v109;
    unint64_t v82 = v110;
    uint64_t v83 = *(unsigned __int8 *)(v89 + *(int *)(v90 + 20));
    sub_1000237C8((uint64_t)&v100, (uint64_t)v109);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v83, v81, v82);
    sub_100002AC4(&v100);
    swift_beginAccess(v76 + 2, v99, 0LL, 0LL);
    unint64_t v84 = v76[3];
    sub_100020AFC(v76[2], v84);
    swift_release(v76);
    __asm { BR              X9 }
  }

  sub_100002AC4(&v100);
  swift_release(v76);
  sub_10005802C(v89, type metadata accessor for NANInternetSharingStatistics.Requester);
  return sub_100002AC4(v112);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v110 = a1;
  uint64_t v108 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v106 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v109 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v4);
  char v107 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v103 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v97 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274((uint64_t *)&unk_10040DCC0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v96 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100002274(qword_100410330);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v19);
  uint64_t v105 = (uint64_t)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8((uint64_t)v2, v105, v21);
  v123  = xmmword_10033A980;
  if (*v2)
  {
    LODWORD(v125)  = *v2;
    uint64_t v22 = &type metadata for NANAttribute.CustomDeviceInformation.Flags;
    unint64_t v23 = 0xE500000000000000LL;
    uint64_t v24 = 0x7367616C66LL;
  }

  else
  {
    uint64_t v24 = 0LL;
    unint64_t v23 = 0LL;
    uint64_t v22 = 0LL;
    v125  = 0LL;
    v126  = 0LL;
    v127  = 0LL;
  }

  v124[0]  = v24;
  v124[1]  = v23;
  v128  = v22;
  unsigned __int8 v25 = v2[2];
  uint64_t v104 = v6;
  char v102 = v10;
  uint64_t v99 = v15;
  if ((v25 & 1) != 0)
  {
    unint64_t v26 = 0LL;
    unint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    v131  = 0LL;
    v132  = 0LL;
    v133  = 0LL;
  }

  else
  {
    LOBYTE(v131)  = v2[1];
    unint64_t v27 = 0x8000000100367170LL;
    uint64_t v28 = &type metadata for UInt8;
    unint64_t v26 = 0xD000000000000013LL;
  }

  uint64_t v100 = v11;
  v129  = v26;
  v130  = v27;
  v134  = v28;
  v135  = 0x7974697275636573LL;
  v136  = 0xE800000000000000LL;
  v117  = xmmword_10033E830;
  sub_1000226B0((uint64_t)&v2[v19[6]], (uint64_t)v18, (uint64_t *)&unk_10040D470);
  uint64_t v29 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48LL))(v18, 1LL, v29);
  uint64_t v31 = 0LL;
  unint64_t v32 = 0LL;
  if (v30 != 1)
  {
    sub_1000225EC((uint64_t)v18, (uint64_t *)&unk_10040D470);
    unint64_t v32 = 0xEE0079654B204557LL;
    uint64_t v31 = 0x4F2063696C627550LL;
  }

  v118[0]  = v31;
  v118[1]  = v32;
  unint64_t v33 = *(void *)&v2[v19[7] + 8] >> 60;
  if (v33 == 15) {
    unint64_t v34 = 0LL;
  }
  else {
    unint64_t v34 = 0xD000000000000014LL;
  }
  v98  = (unint64_t)"Encrypted Signature";
  unint64_t v35 = 0x8000000100367150LL;
  if (v33 > 0xE) {
    unint64_t v35 = 0LL;
  }
  v118[2]  = v34;
  v118[3]  = v35;
  if (*(void *)&v2[v19[8] + 8] >> 60 == 15LL) {
    unint64_t v36 = 0LL;
  }
  else {
    unint64_t v36 = 0xD000000000000013LL;
  }
  if (*(void *)&v2[v19[8] + 8] >> 60 == 15LL) {
    unint64_t v37 = 0LL;
  }
  else {
    unint64_t v37 = 0x8000000100367130LL;
  }
  v119  = v36;
  v120  = v37;
  int32x2_t v38 = vdup_n_s32(*(void *)&v2[v19[9] + 8] >> 60 == 15LL);
  v39.i64[0]  = v38.u32[0];
  v39.i64[1]  = v38.u32[1];
  v121  = vandq_s8((int8x16_t)vcgezq_s64(vshlq_n_s64(v39, 0x3FuLL)), (int8x16_t)xmmword_10035B4C0);
  v111  = v19;
  if (v30 == 1)
  {
    uint64_t v40 = _swiftEmptyArrayStorage;
  }

  else
  {
    swift_bridgeObjectRetain(v32);
    uint64_t v40 = sub_1000A60A0(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v42 = v40[2];
    unint64_t v41 = v40[3];
    if (v42 >= v41 >> 1) {
      uint64_t v40 = sub_1000A60A0((void *)(v41 > 1), v42 + 1, 1, v40);
    }
    v40[2]  = v42 + 1;
    uint64_t v43 = &v40[2 * v42];
    v43[4]  = v31;
    v43[5]  = v32;
    uint64_t v19 = v111;
  }

  if (v33 > 0xE)
  {
    uint64_t v44 = v2;
    uint64_t v45 = v100;
    if (!v37) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }

  swift_bridgeObjectRetain(v98 | 0x8000000000000000LL);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v40);
  uint64_t v44 = v2;
  uint64_t v45 = v100;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v40 = sub_1000A60A0(0LL, v40[2] + 1LL, 1, v40);
  }
  unint64_t v48 = v40[2];
  unint64_t v47 = v40[3];
  if (v48 >= v47 >> 1) {
    uint64_t v40 = sub_1000A60A0((void *)(v47 > 1), v48 + 1, 1, v40);
  }
  v40[2]  = v48 + 1;
  char v49 = &v40[2 * v48];
  unint64_t v50 = v98 | 0x8000000000000000LL;
  v49[4]  = 0xD000000000000014LL;
  v49[5]  = v50;
  unint64_t v36 = v119;
  unint64_t v37 = v120;
  if (v120)
  {
LABEL_33:
    swift_bridgeObjectRetain(v37);
    if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0) {
      uint64_t v40 = sub_1000A60A0(0LL, v40[2] + 1LL, 1, v40);
    }
    unint64_t v52 = v40[2];
    unint64_t v51 = v40[3];
    if (v52 >= v51 >> 1) {
      uint64_t v40 = sub_1000A60A0((void *)(v51 > 1), v52 + 1, 1, v40);
    }
    v40[2]  = v52 + 1;
    uint64_t v53 = &v40[2 * v52];
    v53[4]  = v36;
    v53[5]  = v37;
  }

void NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  __chkstk_darwin(v4);
  uint64_t v44 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_10040DCC0);
  __chkstk_darwin(v6);
  uint64_t v46 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v43 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100002274(qword_100410330);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher._combine(_:)(*v1);
  if ((v1[2] & 1) != 0)
  {
    Swift::UInt8 v20 = 0;
  }

  else
  {
    Swift::UInt8 v20 = v1[1];
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v20);
  int v21 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  sub_1000226B0((uint64_t)&v1[v21[6]], (uint64_t)v19, (uint64_t *)&unk_10040D470);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1LL, v13) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    Hasher._combine(_:)(1u);
    uint64_t v22 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
    unint64_t v24 = v23;
    Data.hash(into:)(a1, v22, v23);
    sub_1000208D8(v22, v24);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

  unsigned __int8 v25 = (uint64_t *)&v2[v21[7]];
  unint64_t v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v27 = *v25;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v27, v26);
    Data.hash(into:)(a1, v27, v26);
    sub_100020B40(v27, v26);
  }

  uint64_t v28 = (uint64_t *)&v2[v21[8]];
  unint64_t v29 = v28[1];
  if (v29 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v30 = *v28;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v30, v29);
    Data.hash(into:)(a1, v30, v29);
    sub_100020B40(v30, v29);
  }

  uint64_t v31 = (uint64_t *)&v2[v21[9]];
  unint64_t v32 = v31[1];
  if (v32 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v33 = *v31;
    Hasher._combine(_:)(1u);
    sub_100020AFC(v33, v32);
    Data.hash(into:)(a1, v33, v32);
    sub_100020B40(v33, v32);
  }

  sub_1000226B0((uint64_t)&v2[v21[10]], (uint64_t)v12, qword_100410330);
  uint64_t v34 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v12, 1LL, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v35 = v43;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v43, v12, v8);
    Hasher._combine(_:)(1u);
    uint64_t v36 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v8, v36);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v8);
  }

  sub_100083290(a1, *(void *)&v2[v21[11]]);
  uint64_t v37 = v46;
  sub_1000226B0((uint64_t)&v2[v21[12]], v46, (uint64_t *)&unk_10040DCC0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v37, 1LL, v48) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v44;
    sub_100022628(v37, v44, type metadata accessor for NANInternetSharingStatistics.Requester);
    Hasher._combine(_:)(1u);
    NANInternetSharingStatistics.Requester.hash(into:)();
    sub_10005802C(v38, type metadata accessor for NANInternetSharingStatistics.Requester);
  }

  int64x2_t v39 = &v2[v21[13]];
  if (v39[24] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    double v41 = *((double *)v39 + 1);
    double v40 = *((double *)v39 + 2);
    double v42 = *(double *)v39;
    Hasher._combine(_:)(1u);
    NANMulticastLinkCondition.hash(into:)(v42, v41, v40);
  }

Swift::Int NANAttribute.CustomDeviceInformation.CustomAttributes.hashValue.getter()
{
  return sub_1000D3134((void (*)(void *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

Swift::Int sub_1001BB6A0(uint64_t a1, uint64_t a2)
{
  return sub_1000D3180( a1,  a2,  (void (*)(void *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

Swift::Int sub_1001BB6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBB80( a1,  a2,  a3,  (void (*)(void *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

uint64_t sub_1001BB6BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.CustomDeviceInformation.CustomAttributes.init(from:)(a1, a2);
}

uint64_t sub_1001BB6D0(void *a1)
{
  return NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(a1);
}

unint64_t NANAttribute.CustomDeviceInformation.PlatformType.init(from:)(void *a1)
{
  return sub_1001CCA54(a1);
}

uint64_t sub_1001BB704@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

unint64_t sub_1001BB72C@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001CCA54(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001BB754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4048();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand;
}

void *NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset;
}

void *NANAttribute.CustomDeviceInformation.Flags.linkConditionFeedbackRequest.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.linkConditionFeedbackRequest;
}

uint64_t NANAttribute.CustomDeviceInformation.Flags.description.getter(char a1)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v2 = sub_1000A60A0(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_1000A60A0((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2]  = v4 + 1;
    uint64_t v5 = (char *)&v2[2 * v4];
    strcpy(v5 + 32, "No SDB Support");
    v5[47]  = -18;
  }

  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }

  if ((a1 & 2) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1000A60A0(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_1000A60A0((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2]  = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4]  = 0xD000000000000018LL;
    v8[5]  = 0x80000001003671E0LL;
    if ((a1 & 4) == 0)
    {
LABEL_8:
      if ((a1 & 8) == 0) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }

  else if ((a1 & 4) == 0)
  {
    goto LABEL_8;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1000A60A0(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v10 = v2[2];
  unint64_t v9 = v2[3];
  if (v10 >= v9 >> 1) {
    uint64_t v2 = sub_1000A60A0((void *)(v9 > 1), v10 + 1, 1, v2);
  }
  v2[2]  = v10 + 1;
  uint64_t v11 = &v2[2 * v10];
  v11[4]  = 0xD000000000000021LL;
  v11[5]  = 0x80000001003671B0LL;
  if ((a1 & 8) != 0)
  {
LABEL_20:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1000A60A0(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_1000A60A0((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2]  = v13 + 1;
    uint64_t v14 = &v2[2 * v13];
    v14[4]  = 0xD00000000000001FLL;
    v14[5]  = 0x8000000100367190LL;
  }

uint64_t NANAttribute.CustomDeviceInformation.Flags.customMirror.getter(int a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v14 = a1;
  unint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v10 = sub_100002274(&qword_100405DC0);
  uint64_t v11 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( &v14,  &v13,  v8,  v5,  &type metadata for NANAttribute.CustomDeviceInformation.Flags,  v10,  v11);
}

uint64_t sub_1001BBBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5F54();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BBC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001D5F54();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001BBC94()
{
  return NANAttribute.CustomDeviceInformation.Flags.description.getter(*v0);
}

uint64_t sub_1001BBC9C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v15 = *v1;
  int v14 = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  uint64_t v12 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v9, v6, a1, v11, v12);
}

uint64_t NANAttribute.CustomDeviceInformation.Version.majorVersion.getter(unsigned __int8 a1)
{
  return a1 >> 2;
}

uint64_t NANAttribute.CustomDeviceInformation.Version.minorVersion.getter(char a1)
{
  return a1 & 3;
}

uint64_t static NANAttribute.CustomDeviceInformation.Version.< infix(_:_:)( unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned int v2 = a1 >> 2;
  unsigned int v3 = a2 >> 2;
  BOOL v4 = (a1 & 3u) < (a2 & 3u);
  if (v2 != v3) {
    BOOL v4 = 0;
  }
  return v2 < v3 || v4;
}

uint64_t NANAttribute.CustomDeviceInformation.Version.description.getter()
{
  v0._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object  = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits  = 46LL;
  v2._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  v3._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  BOOL v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits  = 93LL;
  v5._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0x5B6E6F6973726556LL;
}

BOOL NANAttribute.CustomDeviceInformation.Version.supportsCustomDeviceInformation.getter(unsigned __int8 a1)
{
  BOOL v1 = (a1 & 0xFC) != 4 || (a1 & 3) != 0;
  return a1 >= 4u && v1;
}

uint64_t sub_1001BBF34(uint64_t a1)
{
  unint64_t v2 = sub_1001D2F04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BBF5C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2F04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CustomDeviceInformation.Version.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040AB78);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100021104(a1, v8);
  unint64_t v10 = sub_1001D2F04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2, v11, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *NANAttribute.CustomDeviceInformation.Version.init(from:)(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040AB88);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_1001D2F04();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    uint64_t v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002AC4(a1);
  return v9;
}

uint64_t sub_1001BC168(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  BOOL v5 = (v2 & 3) < (v3 & 3);
  if (v4 != v3 >> 2) {
    BOOL v5 = 0;
  }
  return v4 < v3 >> 2 || v5;
}

uint64_t sub_1001BC19C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  if (v3 >> 2 < v2 >> 2) {
    return 0LL;
  }
  BOOL v6 = (v3 & 3) >= (v2 & 3);
  return v3 >> 2 != v4 || v6;
}

uint64_t sub_1001BC1DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  if (v2 >> 2 < v3 >> 2) {
    return 0LL;
  }
  BOOL v6 = (v2 & 3) >= (v3 & 3);
  return v4 != v3 >> 2 || v6;
}

uint64_t sub_1001BC21C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  BOOL v5 = (v3 & 3) < (v2 & 3);
  if (v3 >> 2 != v4) {
    BOOL v5 = 0;
  }
  return v3 >> 2 < v4 || v5;
}

uint64_t sub_1001BC250@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = sub_100002274(&qword_10040AB88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D2F04();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002AC4(a1);
  }
  char v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100002AC4(a1);
  *a2  = v13;
  return result;
}

uint64_t sub_1001BC360(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040AB78);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = *v1;
  sub_100021104(a1, v7);
  unint64_t v10 = sub_1001D2F04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys,  v10,  v7,  v8);
  KeyedEncodingContainer.encode(_:forKey:)(v9, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001BC448()
{
  return NANAttribute.CustomDeviceInformation.Version.description.getter();
}

uint64_t NANAttribute.CustomDeviceInformation.flags.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t NANAttribute.CustomDeviceInformation.customAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  return sub_100057FE8( v1 + *(int *)(v3 + 28),  a1,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

uint64_t NANAttribute.CustomDeviceInformation.customAttributes.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
  return sub_1001D2F5C(a1, v3);
}

uint64_t (*NANAttribute.CustomDeviceInformation.customAttributes.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.init(version:platformType:flags:customAttributes:)@<X0>( char a1@<W0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5  = a1;
  *(_BYTE *)(a5 + 1)  = a2;
  *(_DWORD *)(a5 + 4)  = a3;
  uint64_t v7 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  return sub_100022628( a4,  a5 + *(int *)(v7 + 28),  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

void NANAttribute.CustomDeviceInformation.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 4));
  type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
}

uint64_t sub_1001BC590()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BC5C0 + 4 * byte_100351AA3[*v0]))( 0x6E6F6973726576LL,  0xE700000000000000LL);
}

uint64_t sub_1001BC5C0()
{
  return 0x6D726F6674616C70LL;
}

uint64_t sub_1001BC5E0()
{
  return 0x7367616C66LL;
}

unint64_t sub_1001BC5F4()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1001BC610@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001E3E40(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001BC634(uint64_t a1)
{
  unint64_t v2 = sub_1001D2FA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BC65C(uint64_t a1)
{
  unint64_t v2 = sub_1001D2FA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CustomDeviceInformation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002274(&qword_10040AB90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_1001D2FA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys,  &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys,  v11,  v9,  v10);
  char v24 = *v3;
  char v23 = 0;
  unint64_t v12 = sub_1001D2FE4();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v24,  &v23,  v5,  &type metadata for NANAttribute.CustomDeviceInformation.Version,  v12);
  if (!v2)
  {
    char v22 = v3[1];
    char v21 = 1;
    unint64_t v13 = sub_1001D3028();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v22,  &v21,  v5,  &type metadata for NANAttribute.CustomDeviceInformation.PlatformType,  v13);
    int v20 = *((_DWORD *)v3 + 1);
    HIBYTE(v19)  = 2;
    unint64_t v14 = sub_1001D306C();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v20,  (char *)&v19 + 7,  v5,  &type metadata for NANAttribute.CustomDeviceInformation.Flags,  v14);
    uint64_t v15 = &v3[*(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28)];
    BYTE6(v19)  = 3;
    uint64_t v16 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v17 = sub_10000AF70( &qword_10040ABB8,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes,  (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, (char *)&v19 + 6, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.CustomDeviceInformation.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t NANAttribute.CustomDeviceInformation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v26);
  uint64_t v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = sub_100002274(&qword_10040ABC0);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D2FA0();
  uint64_t v28 = v7;
  uint64_t v14 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys,  &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys,  v13,  v11,  v12);
  if (!v14)
  {
    uint64_t v29 = v8;
    uint64_t v15 = v5;
    uint64_t v16 = v26;
    BYTE6(v32)  = 0;
    unint64_t v17 = sub_1001D30B0();
    uint64_t v18 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)( (uint64_t *)((char *)&v32 + 7),  &type metadata for NANAttribute.CustomDeviceInformation.Version,  (char *)&v32 + 6,  v27,  &type metadata for NANAttribute.CustomDeviceInformation.Version,  v17);
    *uint64_t v10 = HIBYTE(v32);
    BYTE4(v32)  = 1;
    unint64_t v19 = sub_1001D30F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)( (uint64_t *)((char *)&v32 + 5),  &type metadata for NANAttribute.CustomDeviceInformation.PlatformType,  (char *)&v32 + 4,  v18,  &type metadata for NANAttribute.CustomDeviceInformation.PlatformType,  v19);
    v10[1]  = BYTE5(v32);
    char v31 = 2;
    unint64_t v20 = sub_1001D3138();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v32,  &type metadata for NANAttribute.CustomDeviceInformation.Flags,  &v31,  v18,  &type metadata for NANAttribute.CustomDeviceInformation.Flags,  v20);
    *((_DWORD *)v10 + 1)  = v32;
    char v30 = 3;
    uint64_t v22 = sub_10000AF70( &qword_1004064A0,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes,  (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    char v23 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v16, &v30, v18, v16, v22);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v18);
    uint64_t v24 = v25;
    sub_100022628( (uint64_t)v4,  (uint64_t)&v10[*(int *)(v29 + 28)],  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_100022628((uint64_t)v10, v24, type metadata accessor for NANAttribute.CustomDeviceInformation);
  }

  return sub_100002AC4(a1);
}

Swift::Int sub_1001BCBB0()
{
  return Hasher._finalize()();
}

void sub_1001BCC28(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 4));
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
}

Swift::Int sub_1001BCC80(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001BCCF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.CustomDeviceInformation.init(from:)(a1, a2);
}

uint64_t sub_1001BCD08(void *a1)
{
  return NANAttribute.CustomDeviceInformation.encode(to:)(a1);
}

uint64_t NANAttribute.AttributeType.customMirror.getter(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v16 = a1;
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v9 = enum case for Mirror.DisplayStyle.enum(_:);
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Mirror.AncestorRepresentation.generated(_:),  v2);
  uint64_t v12 = sub_100002274(&qword_100405DC0);
  uint64_t v13 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( &v16,  &v15,  v8,  v5,  &type metadata for NANAttribute.AttributeType,  v12,  v13);
}

uint64_t NANAttribute.AttributeType.rawValue.getter(char a1)
{
  return byte_10035B442[a1];
}

BOOL sub_1001BCEAC(char *a1, char *a2)
{
  return byte_10035B442[*a1] == byte_10035B442[*a2];
}

uint64_t sub_1001BCED0@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1001BCEF8(_BYTE *a1@<X8>)
{
  *a1  = byte_10035B442[*v1];
}

uint64_t sub_1001BCF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4004();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BCF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E4004();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_1001BCFB8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(byte_10035B442[v1]);
  return Hasher._finalize()();
}

void sub_1001BD004()
{
}

Swift::Int sub_1001BD038(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(byte_10035B442[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1001BD080(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v17 = *v1;
  char v16 = _swiftEmptyArrayStorage;
  uint64_t v10 = enum case for Mirror.DisplayStyle.enum(_:);
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v13 = sub_100002274(&qword_100405DC0);
  uint64_t v14 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v17, &v16, v9, v6, a1, v13, v14);
}

uint64_t NANAttribute.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v111  = a2;
  uint64_t v110 = type metadata accessor for NANAttribute(0LL);
  uint64_t v3 = __chkstk_darwin(v110);
  v109[7]  = (char *)v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  v109[46]  = (char *)v109 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v109[25]  = (char *)v109 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v109[45]  = (char *)v109 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  __int128 v113 = (char *)v109 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v109[44]  = (char *)v109 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  __int128 v112 = (char *)v109 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v109[43]  = (char *)v109 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v109[23]  = (char *)v109 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v109[20]  = (char *)v109 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v109[42]  = (char *)v109 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v109[41]  = (char *)v109 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v109[22]  = (char *)v109 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v109[24]  = (char *)v109 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v109[19]  = (char *)v109 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v109[21]  = (char *)v109 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v109[18]  = (char *)v109 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v109[6]  = (char *)v109 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v109[17]  = (char *)v109 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v109[40]  = (char *)v109 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v109[39]  = (char *)v109 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v109[38]  = (char *)v109 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v109[16]  = (char *)v109 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v109[37]  = (char *)v109 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v109[36]  = (char *)v109 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v109[15]  = (char *)v109 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v109[14]  = (char *)v109 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v109[12]  = (char *)v109 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v109[35]  = (char *)v109 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v109[34]  = (char *)v109 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v109[11]  = (char *)v109 - v64;
  v65  = __chkstk_darwin(v63);
  v109[33]  = (char *)v109 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v109[13]  = (char *)v109 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v109[10]  = (char *)v109 - v70;
  v71  = __chkstk_darwin(v69);
  v109[32]  = (char *)v109 - v72;
  v73  = __chkstk_darwin(v71);
  v109[31]  = (char *)v109 - v74;
  v75  = __chkstk_darwin(v73);
  v109[8]  = (char *)v109 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v109[30]  = (char *)v109 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v109[29]  = (char *)v109 - v80;
  v81  = __chkstk_darwin(v79);
  v109[9]  = (char *)v109 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v109[28]  = (char *)v109 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v109[26]  = (char *)v109 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v109[27]  = (char *)v109 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  uint64_t v91 = (char *)v109 - v90;
  uint64_t v92 = __chkstk_darwin(v89);
  uint64_t v94 = (char *)v109 - v93;
  v95  = __chkstk_darwin(v92);
  uint64_t v97 = (char *)v109 - v96;
  __chkstk_darwin(v95);
  uint64_t v99 = (char *)v109 - v98;
  uint64_t v101 = a1[3];
  uint64_t v100 = a1[4];
  sub_100021104(a1, v101);
  char v102 = v119;
  dispatch thunk of Decoder.unkeyedContainer()(v114, v101, v100);
  if (!v102)
  {
    v109[2]  = v97;
    v109[3]  = v91;
    v109[1]  = v94;
    v109[4]  = v99;
    v119  = a1;
    uint64_t v103 = sub_100002274(&qword_100406478);
    uint64_t v104 = v115;
    uint64_t v105 = v116;
    sub_1000237C8((uint64_t)v114, v115);
    uint64_t v106 = sub_1000572E4( &qword_100406470,  &qword_100406478,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v103, v103, v106, v104, v105);
    v109[0]  = 0LL;
    v109[5]  = v118;
    char v107 = (char *)&loc_1001BD920
         + 4
         * word_100351AA8[_s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(v117)];
    __asm { BR              X10 }
  }

  return sub_100002AC4(a1);
}

void NANAttribute.encode(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v31 = a1;
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin(v3);
  uint64_t v27 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100002274(&qword_10040A8C8);
  v17[5]  = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v25 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100002274(&qword_10040AAF8);
  v17[4]  = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v23 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100002274(&qword_10040AAA8);
  void v17[3] = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v21 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100002274(&qword_10040AA38);
  void v17[2] = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v19 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100002274(&qword_10040A820);
  v17[1]  = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v9 = sub_100002274(&qword_10040A748);
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for NANAttribute(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = type metadata accessor for BinaryEncoder();
  uint64_t v15 = swift_allocObject(v33, 40LL, 7LL);
  *(_OWORD *)(v15 + 16)  = xmmword_1003398F0;
  uint64_t v30 = v15 + 16;
  uint64_t v34 = v15;
  *(void *)(v15 + 32)  = v14;
  uint64_t v32 = v2;
  sub_100057FE8(v2, (uint64_t)v13, type metadata accessor for NANAttribute);
  uint64_t v16 = (char *)&loc_1001C1C60 + dword_1001C398C[swift_getEnumCaseMultiPayload(v13, v11)];
  __asm { BR              X10 }

uint64_t sub_1001C1C70()
{
  uint64_t v3 = *v1;
  *(void *)(v0 + 256)  = *(void *)(v0 + 168);
  *(void *)(v0 + 264)  = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
  uint64_t v4 = *(void *)(v0 + 176);
  *(void *)(v0 + 232)  = v4;
  swift_retain();
  uint64_t v5 = *(void *)(v2 - 72);
  NANAttribute.MasterIndication.encode(to:)((void *)(v0 + 232), v3);
  uint64_t v6 = (void *)(v0 + 232);
  if (!v5)
  {
    sub_100002AC4(v6);
    uint64_t v8 = *(void **)(v0 + 152);
    uint64_t v9 = v8[3];
    uint64_t v10 = v8[4];
    sub_100021104(v8, v9);
    dispatch thunk of Encoder.unkeyedContainer()((void *)(v0 + 232), v9, v10);
    NANAttribute.attributeType.getter();
    *(_BYTE *)(v0 + 208)  = v11;
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 264);
    sub_1000237C8(v0 + 232, v12);
    unint64_t v14 = sub_1001D3204();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v0 + 208,  &type metadata for NANAttribute.AttributeType,  v14,  v12,  v13);
    swift_beginAccess(*(void *)(v0 + 144), v0 + 208, 0LL, 0LL);
    __asm { BR              X12 }
  }

  sub_100002AC4(v6);
  return swift_release(v4);
}

void NANAttribute.attributeType.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NANAttribute(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_1001C3AD4 + 4 * byte_100351C76[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_1001C3AD4()
{
  return 45LL;
}

void NANAttribute.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for NANAttribute(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v5, v6);
  uint64_t v7 = (char *)sub_1001C3EDC + 4 * word_100351CA2[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }

void sub_1001C3EDC()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int NANAttribute.hashValue.getter()
{
  return sub_1000D3134((void (*)(void *))NANAttribute.hash(into:));
}

Swift::Int sub_1001C51D4(uint64_t a1, uint64_t a2)
{
  return sub_1000D3180(a1, a2, (void (*)(void *))NANAttribute.hash(into:));
}

Swift::Int sub_1001C51E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBB80(a1, a2, a3, (void (*)(void *))NANAttribute.hash(into:));
}

uint64_t sub_1001C51F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.init(from:)(a1, a2);
}

void sub_1001C5204(uint64_t a1)
{
}

void *Array<A>.retrieve(allAttributes:)(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  char v11 = _swiftEmptyArrayStorage;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain(a2);
  if (v12)
  {
    uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = *(void *)(v5 + 72);
    uint64_t v25 = a2;
    uint64_t v27 = (v13 + 32) & ~v13;
    uint64_t v15 = a2 + v27;
    uint64_t v16 = a1;
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v18 = type metadata accessor for NANAttribute;
    uint64_t v26 = a1;
    do
    {
      sub_100057FE8(v15, (uint64_t)v10, v18);
      NANAttribute.attributeType.getter();
      if (byte_10035B442[v19] == byte_10035B442[v16])
      {
        uint64_t v20 = v18;
        sub_100022628((uint64_t)v10, (uint64_t)v8, v18);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
          sub_1000699D4(0, v17[2] + 1LL, 1);
        }
        uint64_t v17 = v28;
        unint64_t v22 = v28[2];
        unint64_t v21 = v28[3];
        if (v22 >= v21 >> 1)
        {
          sub_1000699D4(v21 > 1, v22 + 1, 1);
          uint64_t v17 = v28;
        }

        void v17[2] = v22 + 1;
        uint64_t v23 = (uint64_t)v17 + v27 + v22 * v14;
        uint64_t v18 = v20;
        sub_100022628((uint64_t)v8, v23, v20);
        uint64_t v16 = v26;
      }

      else
      {
        sub_10005802C((uint64_t)v10, v18);
      }

      v15 += v14;
      --v12;
    }

    while (v12);
    char v11 = v28;
    a2  = v25;
  }

  swift_bridgeObjectRelease(a2);
  return v11;
}

uint64_t Array<A>.modify(attribute:using:)(char a1, uint64_t (*a2)(unint64_t), uint64_t a3)
{
  uint64_t v8 = type metadata accessor for NANAttribute(0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = *v3;
  uint64_t v25 = *(void *)(*v3 + 16);
  if (v25)
  {
    uint64_t v21 = a3;
    unint64_t v22 = a2;
    uint64_t v23 = v3;
    uint64_t v24 = v4;
    int v14 = byte_10035B442[a1];
    unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = *(unint64_t **)(v10 + 72);
    swift_bridgeObjectRetain(v13);
    for (i  = 0LL; ; ++i)
    {
      sub_100057FE8(v13 + v15, (uint64_t)v12, type metadata accessor for NANAttribute);
      NANAttribute.attributeType.getter();
      int v19 = byte_10035B442[v18];
      sub_10005802C((uint64_t)v12, type metadata accessor for NANAttribute);
      if (v19 == v14) {
        break;
      }
      unint64_t v20 = i + 1;
      if (__OFADD__(i, 1LL))
      {
        __break(1u);
LABEL_13:
        uint64_t result = sub_10019EA5C(v13);
        unint64_t v13 = result;
        if ((i & 0x8000000000000000LL) != 0) {
          goto LABEL_14;
        }
        goto LABEL_9;
      }

      v15 += (unint64_t)v16;
      if (v20 == v25) {
        return swift_bridgeObjectRelease(v13);
      }
    }

    swift_bridgeObjectRelease(v13);
    uint64_t v16 = v23;
    unint64_t v13 = *v23;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v23);
    if ((result & 1) == 0) {
      goto LABEL_13;
    }
    if ((i & 0x8000000000000000LL) != 0)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }

void sub_1001C55A4()
{
  __asm { BR              X9 }

uint64_t sub_1001C55D8()
{
  if (!BYTE6(v2)) {
    goto LABEL_13;
  }
  sub_1000F01F8(v0, v2);
  if ((v4 & 0x100) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v5 = v4;
  if (!v3)
  {
    uint64_t v7 = BYTE6(v2);
    uint64_t v6 = 1LL;
    goto LABEL_9;
  }

  if (v3 == 1)
  {
    uint64_t v6 = (int)v0 + 1LL;
    uint64_t v7 = v0 >> 32;
    goto LABEL_9;
  }

  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v6 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v7 = *(void *)(v0 + 24);
LABEL_9:
  if (v7 < v6)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1001C569CLL);
  }

  uint64_t v9 = Data._Representation.subscript.getter(v6, v7, v0, v2);
  uint64_t v11 = v10;
  sub_1000208D8(v0, v2);
  *Swift::UInt8 v1 = v9;
  v1[1]  = v11;
  return v5;
}

CoreP2P::NANAttribute::ServiceDescriptor::Control __swiftcall NANAttribute.ServiceDescriptor.Control.init(type:_:)( CoreP2P::NANAttribute::ServiceDescriptor::Control::ControlType type, CoreP2P::NANAttribute::ServiceDescriptor::Control _)
{
  return (CoreP2P::NANAttribute::ServiceDescriptor::Control)(_.rawValue | type);
}

char *sub_1001C56B4(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v6 = (void *)*v4;
  int64_t v7 = *(void *)(*v4 + 16LL);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = sub_1000A60A0(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }

  uint64_t v16 = &v6[2 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy(v16, v9, &type metadata for String);
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = (char *)(v16 + 2);
    uint64_t v21 = &v6[2 * a2 + 4];
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      _OWORD v6[2] = v23;
LABEL_20:
      *uint64_t v16 = a3;
      v16[1]  = a4;
      *uint64_t v4 = v6;
      return result;
    }

    goto LABEL_27;
  }

void sub_1001C5834(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if ((a4 & 0xFFFFFF) >= 0xFF0000)
  {
    Swift::UInt8 v5 = 0;
LABEL_8:
    Hasher._combine(_:)(v5);
    return;
  }

  Hasher._combine(_:)(1u);
  if ((a4 & 0x10000) == 0)
  {
    Swift::UInt v9 = *(void *)(a2 + 16);
    Hasher._combine(_:)(v9);
    if (v9)
    {
      uint64_t v10 = (Swift::UInt8 *)(a2 + 37);
      do
      {
        Swift::UInt8 v11 = *(v10 - 5);
        Swift::UInt8 v12 = *(v10 - 4);
        Swift::UInt8 v13 = *(v10 - 3);
        Swift::UInt8 v14 = *(v10 - 2);
        Swift::UInt8 v15 = *(v10 - 1);
        Swift::UInt8 v16 = *v10;
        v10 += 6;
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        Hasher._combine(_:)(v14);
        Hasher._combine(_:)(v15);
        Hasher._combine(_:)(v16);
        --v9;
      }

      while (v9);
    }

    Swift::UInt8 v5 = a3 & 1;
    goto LABEL_8;
  }

  sub_100020AFC(a2, a3);
  Data.hash(into:)(a1, a2, a3);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(BYTE1(a4) & 1);
  sub_1001062BC(a2, a3, a4);
}

uint64_t sub_1001C5958(unint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(*(void *)a4 + 16LL) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(_BYTE *)(*(void *)a4 + a2 + 32);
  uint64_t v6 = (void *)*a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *uint64_t v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

uint64_t sub_1001C59F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1001E7548(a1, a2, a3, *a4);
}

BOOL _s7CoreP2P12NANAttributeO17ServiceDescriptorV23__derived_struct_equalsySbAE_AEtFZ_0( uint64_t a1, uint64_t a2)
{
  if ((v4 & 1) == 0
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || *(unsigned __int8 *)(a1 + 18) != *(unsigned __int8 *)(a2 + 18))
  {
    return 0LL;
  }

  char v5 = *(_BYTE *)(a2 + 22);
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 22)) {
      return 0LL;
    }
  }

  else
  {
    if ((v5 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v6)
  {
    if (!v7) {
      return 0LL;
    }
    swift_bridgeObjectRetain(*(void *)(a2 + 24));
    uint64_t v8 = swift_bridgeObjectRetain(v6);
    char v9 = sub_10007A838(v8, v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v7)
  {
    return 0LL;
  }

  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  uint64_t v12 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  uint64_t v15 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (*(unsigned __int8 *)(a2 + 50) == 255)
    {
LABEL_18:
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 64);
      unint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = *(void *)(a2 + 56);
      uint64_t v20 = *(void *)(a2 + 64);
      unint64_t v21 = *(void *)(a2 + 72);
      if (v16 == 4LL)
      {
      }

      else if (v19 != 4LL)
      {
        sub_1001062A0(v16, v17, v18);
        sub_1001062A0(v19, v20, v21);
        _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
        char v28 = v27;
        sub_1001062E0(v19, v20, v21);
        sub_1001062E0(v16, v17, v18);
        return (v28 & 1) != 0;
      }

      sub_1001062A0(v16, v17, v18);
      sub_1001062A0(v19, v20, v21);
      sub_1001062E0(v16, v17, v18);
      sub_1001062E0(v19, v20, v21);
      return 0LL;
    }

    goto LABEL_22;
  }

  if (*(unsigned __int8 *)(a2 + 50) == 255)
  {
LABEL_22:
    sub_1001CDEAC( *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
    sub_1001CDEAC(v11, v10, v12);
    sub_1001062BC(v11, v10, v12);
    uint64_t v22 = v14;
    unint64_t v23 = v13;
    uint64_t v24 = v15;
LABEL_23:
    sub_1001062BC(v22, v23, v24);
    return 0LL;
  }

  if (((*(unsigned __int8 *)(a1 + 50) << 16) & 0x10000) == 0)
  {
    if ((v15 & 0x10000) == 0)
    {
      sub_1001CDEAC( *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
      sub_1001CDEAC(v11, v10, v12);
      BOOL v29 = _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(v11, v14);
      sub_1001062BC(v14, v13, v15);
      sub_1001062BC(v11, v10, v12);
      BOOL result = 0LL;
      return result;
    }

BOOL sub_1001C5DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LOBYTE(v15)  = BYTE4(a1);
  HIBYTE(v15)  = BYTE5(a1);
  LOBYTE(v12)  = BYTE4(a4);
  HIBYTE(v12)  = BYTE5(a4);
  BOOL v8 = (_DWORD)a1 == (_DWORD)a4 && v15 == v12 && a2 == a5;
  LOBYTE(v14)  = BYTE2(a3);
  BYTE1(v14)  = BYTE3(a3);
  BYTE2(v14)  = BYTE4(a3);
  HIBYTE(v14)  = BYTE5(a3);
  LOBYTE(v16)  = BYTE6(a3);
  HIBYTE(v16)  = HIBYTE(a3);
  LOBYTE(v11)  = BYTE2(a6);
  BYTE1(v11)  = BYTE3(a6);
  BYTE2(v11)  = BYTE4(a6);
  HIBYTE(v11)  = BYTE5(a6);
  LOBYTE(v13)  = BYTE6(a6);
  HIBYTE(v13)  = HIBYTE(a6);
  return v14 == v11 && v16 == v13;
}

uint64_t _s7CoreP2P12NANAttributeO26ServiceDescriptorExtensionV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v4 = a2[8];
  if ((a1[8] & 1) != 0)
  {
    if (!a2[8]) {
      return 0LL;
    }
  }

  else
  {
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
      char v4 = 1;
    }
    if ((v4 & 1) != 0) {
      return 0LL;
    }
  }

  char v5 = a2[10];
  if ((a1[10] & 1) != 0)
  {
    if (!a2[10]) {
      return 0LL;
    }
  }

  else
  {
    if (a1[9] != a2[9]) {
      char v5 = 1;
    }
    if ((v5 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  unint64_t v8 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v9 = *((void *)a2 + 3);
  unint64_t v11 = *((void *)a2 + 4);
  if (v7 == 4LL)
  {
    if (v10 == 4LL)
    {
      sub_1001D0A08((uint64_t)a2);
      return 1LL;
    }

    goto LABEL_19;
  }

  if (v10 == 4LL)
  {
LABEL_19:
    sub_1001D0A08((uint64_t)a2);
    sub_1001D0A08((uint64_t)a1);
    sub_1001062E0(v7, v6, v8);
    sub_1001062E0(v10, v9, v11);
    return 0LL;
  }

  if (v7 == v10)
  {
    sub_1001D0A08((uint64_t)a2);
    sub_1001D0A08((uint64_t)a1);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v8);
    char v14 = v13;
    sub_1001D0A34((uint64_t)a2);
    sub_1001D0A34((uint64_t)a1);
    if ((v14 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

BOOL sub_1001C6068(uint64_t a1, int a2, uint64_t a3, int a4)
{
  __int16 v4 = a1;
  int v5 = WORD1(a1);
  int v6 = BYTE4(a1);
  int v7 = BYTE5(a1);
  int v8 = BYTE6(a1);
  BOOL result = 0LL;
  if ((a3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0) {
      return result;
    }
  }

  else if ((v4 & 0x100) != 0 || ((a3 ^ v4) & 0x7F) != 0)
  {
    return result;
  }

  if (v5 == WORD1(a3)
    && v6 == BYTE4(a3)
    && v7 == BYTE5(a3)
    && v8 == BYTE6(a3)
    && (unsigned __int16)a2 == (unsigned __int16)a4)
  {
    return BYTE2(a2) == BYTE2(a4);
  }

  return result;
}

uint64_t _s7CoreP2P12NANAttributeO8DatapathV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  BOOL v3 = *(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3) && *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7);
  if (!v3 || a1[9] != a2[9] || a1[10] != a2[10]) {
    return 0LL;
  }
  char v4 = a2[12];
  if ((a1[12] & 1) != 0)
  {
    if (!a2[12]) {
      return 0LL;
    }
  }

  else
  {
    if (a1[11] != a2[11]) {
      char v4 = 1;
    }
    if ((v4 & 1) != 0) {
      return 0LL;
    }
  }

  if ((a1[19] & 1) != 0)
  {
    if (!a2[19]) {
      return 0LL;
    }
  }

  else
  {
    if ((a2[19] & 1) != 0) {
      return 0LL;
    }
    v5.i64[0]  = 0xFFFFFFFFFFFFLL;
    v5.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v6 = (uint64x2_t)vandq_s8( (int8x16_t)vdupq_n_s64(*(unsigned int *)(a1 + 13) | ((unint64_t)*(unsigned __int16 *)(a1 + 17) << 32)),  v5);
    int16x8_t v7 = (int16x8_t)vshlq_u64(v6, (uint64x2_t)xmmword_10033A8F0);
    uint64x2_t v8 = (uint64x2_t)vandq_s8( (int8x16_t)vdupq_n_s64(*(unsigned int *)(a2 + 13) | ((unint64_t)*(unsigned __int16 *)(a2 + 17) << 32)),  v5);
    int64x2_t v9 = (int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_10033A8F0);
    int16x8_t v10 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_10033A8E0);
    v23[0]  = *(_DWORD *)(a1 + 13);
    *(int32x2_t *)v6.i8  = vmovn_s64((int64x2_t)vshlq_u64(v6, (uint64x2_t)xmmword_10033A8E0));
    *(int32x2_t *)v7.i8  = vmovn_s64((int64x2_t)v7);
    v7.i16[1]  = v7.i16[2];
    v7.i16[2]  = v6.i16[0];
    v7.i16[3]  = v6.i16[2];
    *(_DWORD *)&v23[1]  = vmovn_s16(v7).u32[0];
    v22[0]  = *(_DWORD *)(a2 + 13);
    *(int32x2_t *)v6.i8  = vmovn_s64((int64x2_t)v10);
    *(int32x2_t *)v10.i8  = vmovn_s64(v9);
    v10.i16[1]  = v10.i16[2];
    v10.i16[2]  = v6.i16[0];
    v10.i16[3]  = v6.i16[2];
    *(_DWORD *)&v22[1]  = vmovn_s16(v10).u32[0];
    if (*(_DWORD *)v23 == *(_DWORD *)v22)
    {
      v22[5]  = HIBYTE(*(_WORD *)(a2 + 17));
      v23[5]  = HIBYTE(*(_WORD *)(a1 + 17));
      BOOL v11 = *(unsigned __int16 *)&v23[4] == *(unsigned __int16 *)&v22[4];
    }

    else
    {
      BOOL v11 = 0;
    }

    if (!v11) {
      return 0LL;
    }
  }

  uint64_t v13 = *((void *)a1 + 3);
  uint64_t v12 = *((void *)a1 + 4);
  unint64_t v14 = *((void *)a1 + 5);
  uint64_t v16 = *((void *)a2 + 3);
  uint64_t v15 = *((void *)a2 + 4);
  unint64_t v17 = *((void *)a2 + 5);
  if (v13 == 4LL)
  {
    if (v16 == 4LL)
    {
      sub_1001D10D4((uint64_t)a2);
      return 1LL;
    }

    goto LABEL_30;
  }

  if (v16 == 4LL)
  {
LABEL_30:
    sub_1001D10D4((uint64_t)a2);
    sub_1001D10D4((uint64_t)a1);
    sub_1001062E0(v13, v12, v14);
    sub_1001062E0(v16, v15, v17);
    return 0LL;
  }

  if (v13 == v16)
  {
    sub_1001D10D4((uint64_t)a2);
    sub_1001D10D4((uint64_t)a1);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v12, v14);
    char v21 = v20;
    sub_1001D1100((uint64_t)a2);
    sub_1001D1100((uint64_t)a1);
    if ((v21 & 1) != 0) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_1001C63A0( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if ((_DWORD)a1 != (_DWORD)a5) {
    return 0LL;
  }
  if ((a1 & 0x10000000000LL) != 0)
  {
    if ((a5 & 0x10000000000LL) == 0) {
      return 0LL;
    }
  }

  else if ((a5 & 0x10000000000LL) != 0 || BYTE4(a1) != BYTE4(a5))
  {
    return 0LL;
  }

  if ((a3 & 1) != 0)
  {
    if ((a7 & 1) != 0) {
      return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
    }
  }

  else if ((a7 & 1) == 0 && a2 == a6)
  {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
  }

  return 0LL;
}

uint64_t sub_1001C63F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0LL;
  if ((unsigned __int16)a1 == (unsigned __int16)a5
    && HIDWORD(a1) == HIDWORD(a5)
    && a2 == a6
    && a3 == a7
    && BYTE1(a3) == BYTE1(a7))
  {
    char v9 = BYTE3(a7);
    if ((a3 & 0x1000000) != 0)
    {
      if (!BYTE3(a7)) {
        return 0LL;
      }
    }

    else
    {
      if (BYTE2(a3) != BYTE2(a7)) {
        char v9 = 1;
      }
      if ((v9 & 1) != 0) {
        return 0LL;
      }
    }

    if (BYTE5(a4) == 255)
    {
      if (BYTE5(a8) != 255) {
        return 0LL;
      }
    }

    else if (BYTE5(a8) == 255 {
           || !sub_1001A01D8( __PAIR64__(a4, HIDWORD(a3)),  BYTE4(a4) | (((HIDWORD(a4) >> 8) & 1) << 8),  __PAIR64__(a8, HIDWORD(a7)),  BYTE4(a8) | (((HIDWORD(a8) >> 8) & 1) << 8)))
    }
    {
      return 0LL;
    }

    return 1LL;
  }

  return v8;
}

uint64_t sub_1001C6514(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if ((_DWORD)a1 == (_DWORD)a4)
  {
    if ((a2 & 1) != 0)
    {
      if ((a5 & 1) != 0) {
        return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a3, a6);
      }
    }

    else if (HIDWORD(a1) == HIDWORD(a4) && (a5 & 1) == 0)
    {
      return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a3, a6);
    }
  }

  return 0LL;
}

uint64_t sub_1001C654C(uint64_t a1, unint64_t a2, int a3, uint64_t a4, unint64_t a5, int a6)
{
  LOBYTE(v15)  = BYTE4(a1);
  HIBYTE(v15)  = BYTE5(a1);
  LOBYTE(v12)  = BYTE4(a4);
  HIBYTE(v12)  = BYTE5(a4);
  if ((_DWORD)a1 != (_DWORD)a4 || v15 != v12) {
    return 0LL;
  }
  LOBYTE(v14)  = BYTE6(a1);
  BYTE1(v14)  = HIBYTE(a1);
  HIWORD(v14)  = a2;
  LOBYTE(v16)  = BYTE2(a2);
  HIBYTE(v16)  = BYTE3(a2);
  LOBYTE(v11)  = BYTE6(a4);
  BYTE1(v11)  = HIBYTE(a4);
  HIWORD(v11)  = a5;
  LOBYTE(v13)  = BYTE2(a5);
  HIBYTE(v13)  = BYTE3(a5);
  BOOL v9 = v14 == v11 && v16 == v13;
  unsigned int v10 = v9 & (((a2 & (unint64_t)&_mh_execute_header) == 0) ^ HIDWORD(a5));
  if (BYTE5(a2) != BYTE5(a5)) {
    unsigned int v10 = 0;
  }
  if (BYTE6(a2) != BYTE6(a5)) {
    unsigned int v10 = 0;
  }
  if (HIBYTE(a2) != HIBYTE(a5)) {
    unsigned int v10 = 0;
  }
  if (a3 == a6) {
    return v10;
  }
  else {
    return 0LL;
  }
}

BOOL sub_1001C66AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  LOBYTE(v17)  = BYTE4(a1);
  HIBYTE(v17)  = BYTE5(a1);
  LOBYTE(v14)  = BYTE4(a4);
  HIBYTE(v14)  = BYTE5(a4);
  if ((_DWORD)a1 != (_DWORD)a4 || v17 != v14) {
    return 0LL;
  }
  LOBYTE(v16)  = BYTE6(a1);
  BYTE1(v16)  = HIBYTE(a1);
  HIWORD(v16)  = a2;
  LOBYTE(v18)  = BYTE2(a2);
  HIBYTE(v18)  = BYTE3(a2);
  LOBYTE(v13)  = BYTE6(a4);
  BYTE1(v13)  = HIBYTE(a4);
  HIWORD(v13)  = a5;
  LOBYTE(v15)  = BYTE2(a5);
  HIBYTE(v15)  = BYTE3(a5);
  return v16 == v13
      && v18 == v15
      && BYTE4(a2) == BYTE4(a5)
      && BYTE5(a2) == BYTE5(a5)
      && BYTE6(a2) == BYTE6(a5)
      && a3 == a6;
}

void sub_1001C67E0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  LOBYTE(v8)  = BYTE4(a1);
  HIBYTE(v8)  = BYTE5(a1);
  LOBYTE(v7)  = BYTE4(a5);
  HIBYTE(v7)  = BYTE5(a5);
  BOOL v6 = (_DWORD)a1 == (_DWORD)a5 && v8 == v7;
  if (v6
    && BYTE6(a1) == BYTE6(a5)
    && HIBYTE(a1) == HIBYTE(a5)
    && a2 == a6
    && WORD1(a2) == WORD1(a6)
    && WORD2(a2) == WORD2(a6))
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4);
  }

BOOL _s7CoreP2P12NANAttributeO17DatapathExtensionV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  BOOL v4 = *(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3) && *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7);
  if (!v4 || a1[9] != a2[9] || a1[10] != a2[10]) {
    return 0LL;
  }
  char v5 = a2[12];
  if ((a1[12] & 1) != 0)
  {
    if (!a2[12]) {
      return 0LL;
    }
  }

  else
  {
    if (a1[11] != a2[11]) {
      char v5 = 1;
    }
    if ((v5 & 1) != 0) {
      return 0LL;
    }
  }

  if ((a1[19] & 1) != 0)
  {
    if (!a2[19]) {
      return 0LL;
    }
  }

  else
  {
    if ((a2[19] & 1) != 0) {
      return 0LL;
    }
    v6.i64[0]  = 0xFFFFFFFFFFFFLL;
    v6.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v7 = (uint64x2_t)vandq_s8( (int8x16_t)vdupq_n_s64(*(unsigned int *)(a1 + 13) | ((unint64_t)*(unsigned __int16 *)(a1 + 17) << 32)),  v6);
    int16x8_t v8 = (int16x8_t)vshlq_u64(v7, (uint64x2_t)xmmword_10033A8F0);
    uint64x2_t v9 = (uint64x2_t)vandq_s8( (int8x16_t)vdupq_n_s64(*(unsigned int *)(a2 + 13) | ((unint64_t)*(unsigned __int16 *)(a2 + 17) << 32)),  v6);
    int64x2_t v10 = (int64x2_t)vshlq_u64(v9, (uint64x2_t)xmmword_10033A8F0);
    int16x8_t v11 = (int16x8_t)vshlq_u64(v9, (uint64x2_t)xmmword_10033A8E0);
    v29[0]  = *(_DWORD *)(a1 + 13);
    *(int32x2_t *)v7.i8  = vmovn_s64((int64x2_t)vshlq_u64(v7, (uint64x2_t)xmmword_10033A8E0));
    *(int32x2_t *)v8.i8  = vmovn_s64((int64x2_t)v8);
    v8.i16[1]  = v8.i16[2];
    v8.i16[2]  = v7.i16[0];
    v8.i16[3]  = v7.i16[2];
    *(_DWORD *)&v29[1]  = vmovn_s16(v8).u32[0];
    v28[0]  = *(_DWORD *)(a2 + 13);
    *(int32x2_t *)v7.i8  = vmovn_s64((int64x2_t)v11);
    *(int32x2_t *)v11.i8  = vmovn_s64(v10);
    v11.i16[1]  = v11.i16[2];
    v11.i16[2]  = v7.i16[0];
    v11.i16[3]  = v7.i16[2];
    *(_DWORD *)&v28[1]  = vmovn_s16(v11).u32[0];
    if (*(_DWORD *)v29 == *(_DWORD *)v28)
    {
      v28[5]  = HIBYTE(*(_WORD *)(a2 + 17));
      v29[5]  = HIBYTE(*(_WORD *)(a1 + 17));
      BOOL v12 = *(unsigned __int16 *)&v29[4] == *(unsigned __int16 *)&v28[4];
    }

    else
    {
      BOOL v12 = 0;
    }

    if (!v12) {
      return 0LL;
    }
  }

  uint64_t v13 = *((void *)a1 + 3);
  unint64_t v14 = *((void *)a1 + 4);
  uint64_t v15 = *((void *)a2 + 3);
  unint64_t v16 = *((void *)a2 + 4);
  if (v14 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_10002255C(*((void *)a1 + 3), *((void *)a1 + 4));
      sub_10002255C(v15, v16);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14);
      char v18 = v17;
      sub_100020B40(v15, v16);
      sub_100020B40(v13, v14);
      if ((v18 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_32;
    }

BOOL _s7CoreP2P12NANAttributeO20PairingBootstrappingV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  unint64_t v7 = *((void *)a1 + 4);
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v10 = *((void *)a2 + 3);
  unint64_t v11 = *((void *)a2 + 4);
  if (v7 >> 60 == 15)
  {
    if (v11 >> 60 == 15)
    {
      sub_1001D2D9C((uint64_t)a2);
      return *((unsigned __int16 *)a1 + 20) == *((unsigned __int16 *)a2 + 20);
    }

    goto LABEL_9;
  }

  if (v11 >> 60 == 15)
  {
LABEL_9:
    sub_1001D2D9C((uint64_t)a2);
    sub_1001D2D9C((uint64_t)a1);
    sub_10011D8A4(v4, v5, v6, v7);
    sub_10011D8A4(v9, v8, v10, v11);
    return 0LL;
  }

  if ((v5 & 1) != 0)
  {
    if ((v8 & 1) == 0) {
      return 0LL;
    }
LABEL_17:
    sub_1001D2D9C((uint64_t)a2);
    sub_1001D2D9C((uint64_t)a1);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v14 = v13;
    sub_1001D2DCC((uint64_t)a2);
    sub_1001D2DCC((uint64_t)a1);
    if ((v14 & 1) != 0) {
      return *((unsigned __int16 *)a1 + 20) == *((unsigned __int16 *)a2 + 20);
    }
    return 0LL;
  }

  BOOL result = 0LL;
  if ((v8 & 1) == 0 && v4 == v9) {
    goto LABEL_17;
  }
  return result;
}

BOOL sub_1001C6DD4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL result = 0LL;
  unint64_t v6 = HIBYTE(a1);
  LOBYTE(v11)  = BYTE1(a1);
  BYTE1(v11)  = BYTE2(a1);
  BYTE2(v11)  = BYTE3(a1);
  HIBYTE(v11)  = BYTE4(a1);
  LOBYTE(v12)  = BYTE5(a1);
  HIBYTE(v12)  = BYTE6(a1);
  LOBYTE(v9)  = BYTE1(a3);
  BYTE1(v9)  = BYTE2(a3);
  BYTE2(v9)  = BYTE3(a3);
  HIBYTE(v9)  = BYTE4(a3);
  LOBYTE(v10)  = BYTE5(a3);
  HIBYTE(v10)  = BYTE6(a3);
  BOOL v8 = v11 != v9 || v12 != v10;
  return result;
}

uint64_t sub_1001C6EF4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LOBYTE(v11)  = BYTE1(a1);
  BYTE1(v11)  = BYTE2(a1);
  BYTE2(v11)  = BYTE3(a1);
  HIBYTE(v11)  = BYTE4(a1);
  LOBYTE(v12)  = BYTE5(a1);
  HIBYTE(v12)  = BYTE6(a1);
  LOBYTE(v9)  = BYTE1(a5);
  BYTE1(v9)  = BYTE2(a5);
  BYTE2(v9)  = BYTE3(a5);
  HIBYTE(v9)  = BYTE4(a5);
  LOBYTE(v10)  = BYTE5(a5);
  HIBYTE(v10)  = BYTE6(a5);
  BOOL v6 = v11 == v9 && v12 == v10;
  if (v6
    && (unsigned __int16)a2 == (unsigned __int16)a6
    && ((a2 ^ a6) & 0x10000) == 0
    && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4), (v8 & 1) != 0))
  {
    return 1LL;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1001C6FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v7)  = BYTE4(a1);
  HIBYTE(v7)  = BYTE5(a1);
  LOBYTE(v6)  = BYTE4(a3);
  HIBYTE(v6)  = BYTE5(a3);
  BOOL v4 = (_DWORD)a1 == (_DWORD)a3 && v7 == v6;
  if (v4 && BYTE6(a1) == BYTE6(a3)) {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a4);
  }
  else {
    return 0LL;
  }
}

void sub_1001C70C8(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v4 = a4;
  char v7 = a1;
  unsigned int v8 = a1 >> 8;
  unsigned int v9 = HIWORD(a1);
  unsigned int v10 = a4 >> 8;
  unsigned int v11 = HIWORD(a4);
  uint64_t v12 = sub_100002274(&qword_1004040A8);
  uint64_t v13 = swift_allocObject(v12, 35LL, 7LL);
  *(_OWORD *)(v13 + 16)  = xmmword_100339910;
  *(_BYTE *)(v13 + 32)  = v7;
  *(_BYTE *)(v13 + 33)  = v8;
  *(_BYTE *)(v13 + 34)  = v9;
  uint64_t v14 = sub_1000FB08C(v13);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease(v13);
  uint64_t v17 = swift_allocObject(v12, 35LL, 7LL);
  *(_OWORD *)(v17 + 16)  = xmmword_100339910;
  *(_BYTE *)(v17 + 32)  = v4;
  *(_BYTE *)(v17 + 33)  = v10;
  *(_BYTE *)(v17 + 34)  = v11;
  uint64_t v18 = sub_1000FB08C(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v16);
  LOBYTE(v17)  = v21;
  sub_1000208D8(v18, v20);
  sub_1000208D8(v14, v16);
  if ((v17 & 1) != 0) {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
  }
}

uint64_t _s7CoreP2P12NANAttributeO18WLANInfrastructureV23__derived_struct_equalsySbAE_AEtFZ_0( uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4))
  {
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }

  char v3 = 0;
  BOOL v6 = *(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6) && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
  if (v6
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
  {
    if (((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0)
    {
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 24), *(void *)(a1 + 32));
      if ((v8 & 1) != 0)
      {
        char v3 = *(_BYTE *)(a1 + 40) ^ *(_BYTE *)(a2 + 40) ^ 1;
        return v3 & 1;
      }
    }

    goto LABEL_5;
  }

  return v3 & 1;
}

BOOL sub_1001C731C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a1 != (_DWORD)a3) {
    return 0LL;
  }
  LOBYTE(v11)  = BYTE4(a1);
  BYTE1(v11)  = BYTE5(a1);
  BYTE2(v11)  = BYTE6(a1);
  HIBYTE(v11)  = HIBYTE(a1);
  LOBYTE(v10)  = BYTE4(a3);
  BYTE1(v10)  = BYTE5(a3);
  BYTE2(v10)  = BYTE6(a3);
  HIBYTE(v10)  = HIBYTE(a3);
  return v11 == v10
      && (unsigned __int16)a2 == (unsigned __int16)a4
      && BYTE2(a2) == BYTE2(a4)
      && BYTE3(a2) == BYTE3(a4)
      && BYTE4(a2) == BYTE4(a4)
      && BYTE5(a2) == BYTE5(a4);
}

BOOL _s7CoreP2P12NANAttributeO4IBSSV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  BOOL result = 0;
  if (v2
    && *(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6)
    && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
    && ((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 24), *(void *)(a1 + 32));
    if ((v5 & 1) != 0) {
      return 1;
    }
  }

  return result;
}

void _s7CoreP2P12NANAttributeO4MeshV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  if (v2
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
    && ((*(unsigned __int8 *)(a1 + 10) ^ *(unsigned __int8 *)(a2 + 10)) & 1) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 16), *(void *)(a1 + 24));
    if ((v4 & 1) != 0) {
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 32), *(void *)(a1 + 40));
    }
  }

BOOL sub_1001C75E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v10)  = BYTE2(a1);
  BYTE1(v10)  = BYTE3(a1);
  BYTE2(v10)  = BYTE4(a1);
  HIBYTE(v10)  = BYTE5(a1);
  LOBYTE(v11)  = BYTE6(a1);
  HIBYTE(v11)  = HIBYTE(a1);
  LOBYTE(v8)  = BYTE2(a3);
  BYTE1(v8)  = BYTE3(a3);
  BYTE2(v8)  = BYTE4(a3);
  HIBYTE(v8)  = BYTE5(a3);
  LOBYTE(v9)  = BYTE6(a3);
  HIBYTE(v9)  = HIBYTE(a3);
  return v10 == v8 && v11 == v9 && a2 == a4 && HIDWORD(a2) == HIDWORD(a4);
}

uint64_t type metadata accessor for NANAttribute(uint64_t a1)
{
  return sub_100020E48(a1, qword_10040B1E0, (uint64_t)&nominal type descriptor for NANAttribute);
}

unint64_t sub_1001C76E8()
{
  unint64_t result = qword_10040A728;
  if (!qword_10040A728)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035B1E0, &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A728);
  }

  return result;
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV23__derived_struct_equalsySbAE_AEtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
  return _s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0( (uint64_t)&a1[v4],  &a2[v4]);
}

void _s7CoreP2P12NANAttributeO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = (char *)a2;
  uint64_t v90 = a1;
  v88[0]  = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin(v88[0]);
  v88[1]  = (char *)v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = type metadata accessor for NANAttribute(0LL);
  uint64_t v3 = __chkstk_darwin(v89);
  v88[37]  = (char *)v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  v88[36]  = (char *)v88 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v88[38]  = (char *)v88 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v88[35]  = (char *)v88 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v88[34]  = (char *)v88 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v88[33]  = (char *)v88 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v88[32]  = (char *)v88 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v88[31]  = (char *)v88 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v88[29]  = (char *)v88 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v88[30]  = (char *)v88 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v88[28]  = (char *)v88 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v88[25]  = (char *)v88 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v88[27]  = (char *)v88 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v88[26]  = (char *)v88 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v88[24]  = (char *)v88 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v88[22]  = (char *)v88 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v88[23]  = (char *)v88 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v88[21]  = (char *)v88 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v88[18]  = (char *)v88 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v88[20]  = (char *)v88 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v88[17]  = (char *)v88 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v88[19]  = (char *)v88 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v88[15]  = (char *)v88 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v88[16]  = (char *)v88 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v88[14]  = (char *)v88 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v88[13]  = (char *)v88 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v88[11]  = (char *)v88 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v88[12]  = (char *)v88 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v88[9]  = (char *)v88 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v88[10]  = (char *)v88 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v88[8]  = (char *)v88 - v64;
  v65  = __chkstk_darwin(v63);
  v88[7]  = (char *)v88 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v88[5]  = (char *)v88 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v88[4]  = (char *)v88 - v70;
  v71  = __chkstk_darwin(v69);
  v88[6]  = (char *)v88 - v72;
  v73  = __chkstk_darwin(v71);
  v88[3]  = (char *)v88 - v74;
  v75  = __chkstk_darwin(v73);
  uint64_t v76 = __chkstk_darwin(v75);
  v88[2]  = (char *)v88 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  uint64_t v79 = __chkstk_darwin(v78);
  uint64_t v80 = __chkstk_darwin(v79);
  v81  = __chkstk_darwin(v80);
  __chkstk_darwin(v81);
  uint64_t v82 = sub_100002274(&qword_10040B720);
  uint64_t v83 = __chkstk_darwin(v82);
  uint64_t v85 = (char *)v88 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = (uint64_t)&v85[*(int *)(v83 + 48)];
  sub_100057FE8(v90, (uint64_t)v85, type metadata accessor for NANAttribute);
  uint64_t v90 = v86;
  sub_100057FE8((uint64_t)v91, v86, type metadata accessor for NANAttribute);
  uint64_t v91 = v85;
  uint64_t v87 = (char *)sub_1001C7E1C + 4 * word_100351CF8[swift_getEnumCaseMultiPayload(v85, v89)];
  __asm { BR              X10 }

BOOL sub_1001C7E1C()
{
  uint64_t v3 = *(void *)(v0 + 344);
  sub_100057FE8(v3, (uint64_t)v1, type metadata accessor for NANAttribute);
  uint64_t v4 = *(unsigned __int8 **)(v0 + 320);
  if (swift_getEnumCaseMultiPayload(v4, v2))
  {
    sub_1000225EC(v3, &qword_10040B720);
    return 0;
  }

  else
  {
    BOOL v6 = *v1 == *v4 && v1[1] == v4[1];
    sub_10005802C(v3, type metadata accessor for NANAttribute);
  }

  return v6;
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0( uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  v118  = *(void *)(v3 - 8);
  v119  = v3;
  __chkstk_darwin(v3);
  uint64_t v115 = &v107[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v117  = sub_100002274(&qword_10040B728);
  __chkstk_darwin(v117);
  BOOL v6 = &v107[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_100002274((uint64_t *)&unk_10040DCC0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v116 = &v107[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v8);
  v128  = &v107[-v11];
  __chkstk_darwin(v10);
  v124  = &v107[-v12];
  uint64_t v13 = type metadata accessor for UUID(0LL);
  v123  = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  v120  = &v107[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v122  = sub_100002274(&qword_100408B18);
  __chkstk_darwin(v122);
  v127  = &v107[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = sub_100002274(qword_100410330);
  uint64_t v17 = __chkstk_darwin(v16);
  v121  = &v107[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = __chkstk_darwin(v17);
  v125  = &v107[-v20];
  __chkstk_darwin(v19);
  v126  = &v107[-v21];
  v129  = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v22 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v24 = &v107[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = sub_100002274(&qword_10040B730);
  __chkstk_darwin(v25);
  uint64_t v27 = &v107[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v28 = sub_100002274((uint64_t *)&unk_10040D470);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = &v107[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = &v107[-v33];
  __chkstk_darwin(v32);
  uint64_t v37 = &v107[-v36];
  if (*v35 != *a2) {
    return 0LL;
  }
  char v38 = a2[2];
  if ((v35[2] & 1) != 0)
  {
    if (!a2[2]) {
      return 0LL;
    }
  }

  else
  {
    if (v35[1] != a2[1]) {
      char v38 = 1;
    }
    if ((v38 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v110 = v6;
  v111  = v13;
  uint64_t v39 = v35;
  uint64_t v40 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v41 = *(int *)(v40 + 24);
  v114  = v39;
  sub_1000226B0((uint64_t)&v39[v41], (uint64_t)v37, (uint64_t *)&unk_10040D470);
  __int128 v112 = (int *)v40;
  __int128 v113 = a2;
  sub_1000226B0((uint64_t)&a2[*(int *)(v40 + 24)], (uint64_t)v34, (uint64_t *)&unk_10040D470);
  uint64_t v42 = (uint64_t)&v27[*(int *)(v25 + 48)];
  sub_1000226B0((uint64_t)v37, (uint64_t)v27, (uint64_t *)&unk_10040D470);
  sub_1000226B0((uint64_t)v34, v42, (uint64_t *)&unk_10040D470);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v44 = v129;
  if (v43((uint64_t)v27, 1LL, v129) == 1)
  {
    sub_1000225EC((uint64_t)v34, (uint64_t *)&unk_10040D470);
    sub_1000225EC((uint64_t)v37, (uint64_t *)&unk_10040D470);
    if (v43(v42, 1LL, v44) == 1)
    {
      sub_1000225EC((uint64_t)v27, (uint64_t *)&unk_10040D470);
      goto LABEL_15;
    }

uint64_t _s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(char a1)
{
  else {
    return asc_10035B470[(char)(a1 + 35)];
  }
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0( uint64_t result)
{
  else {
    return result;
  }
}

uint64_t sub_1001CA4BC(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B808);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D2890();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys,  &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  HIBYTE(v28)  = 0;
  unint64_t v10 = sub_1001E4768();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v28,  &type metadata for NANAttribute.P2POperation.DeviceRole,  (char *)&v28 + 7,  v3,  &type metadata for NANAttribute.P2POperation.DeviceRole,  v10);
  uint64_t v11 = v28;
  HIBYTE(v28)  = 1;
  unint64_t v12 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v28,  &type metadata for WiFiAddress,  (char *)&v28 + 7,  v3,  &type metadata for WiFiAddress,  v12);
  uint64_t v26 = v28;
  uint64_t v24 = v11;
  uint64_t v25 = BYTE1(v28);
  uint64_t v27 = BYTE2(v28);
  uint64_t v13 = BYTE3(v28);
  uint64_t v14 = BYTE4(v28);
  uint64_t v15 = BYTE5(v28);
  HIBYTE(v28)  = 2;
  unint64_t v16 = sub_1001E46E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v28,  &type metadata for NonNANOperatingChannelInformation,  (char *)&v28 + 7,  v3,  &type metadata for NonNANOperatingChannelInformation,  v16);
  uint64_t v21 = v15;
  uint64_t v22 = v14;
  uint64_t v23 = v13;
  uint64_t v17 = v28;
  HIBYTE(v28)  = 3;
  unint64_t v18 = sub_1001E4724();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v28,  &type metadata for NonNANBeaconInformation,  (char *)&v28 + 7,  v3,  &type metadata for NonNANBeaconInformation,  v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v24 | (v26 << 8) | (v25 << 16) | (v27 << 24) | (v23 << 32) | (v22 << 40) | (v21 << 48) | (v17 << 56);
}

uint64_t sub_1001CA730(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B960);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D0C0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.P2POperation.CodingKeys,  &type metadata for NANAttribute.P2POperation.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v23 = 0;
  unint64_t v10 = sub_1001E4768();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v22,  &type metadata for NANAttribute.P2POperation.DeviceRole,  &v23,  v3,  &type metadata for NANAttribute.P2POperation.DeviceRole,  v10);
  uint64_t v11 = v22;
  char v23 = 1;
  unint64_t v12 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v22,  &type metadata for WiFiAddress,  &v23,  v3,  &type metadata for WiFiAddress,  v12);
  uint64_t v13 = v22;
  uint64_t v14 = BYTE1(v22);
  uint64_t v21 = BYTE2(v22);
  uint64_t v20 = BYTE3(v22);
  uint64_t v19 = BYTE4(v22);
  uint64_t v18 = BYTE5(v22);
  char v23 = 2;
  unint64_t v15 = sub_1001E4D04();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v22,  &type metadata for DeprecatedNANAvailability,  &v23,  v3,  &type metadata for DeprecatedNANAvailability,  v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v11 | (v13 << 8) | (v14 << 16) | (v21 << 24) | (v20 << 32) | (v19 << 40) | (v18 << 48);
}

uint64_t sub_1001CA958(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B898);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D1D80();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DataCluster.CodingKeys,  &type metadata for NANAttribute.DataCluster.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v22 = 0;
  unint64_t v10 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v21,  &type metadata for WiFiAddress,  &v22,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v11 = v21;
  uint64_t v12 = BYTE4(v21);
  uint64_t v13 = BYTE5(v21);
  char v22 = 1;
  unint64_t v14 = sub_1001E4A10();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v21,  &type metadata for NANAttribute.DataCluster.Control,  &v22,  v3,  &type metadata for NANAttribute.DataCluster.Control,  v14);
  uint64_t v19 = v21;
  uint64_t v20 = v11;
  uint64_t v15 = sub_100002274(&qword_10040A960);
  char v22 = 2;
  uint64_t v16 = sub_100087780( &qword_10040B768,  &qword_10040A960,  (void (*)(void))sub_1001E4504,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v15, &v22, v3, v15, v16);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v20 | (v12 << 32) | (v13 << 40) | (v19 << 48);
}

uint64_t sub_1001CAB60(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B8A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D1CB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Availability.CodingKeys,  &type metadata for NANAttribute.Availability.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  BYTE3(v19)  = 0;
  unsigned __int8 v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v19 + 3, v3);
  BYTE2(v19)  = 1;
  unint64_t v11 = sub_1001E4A54();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v19,  &type metadata for NANAttribute.Availability.Control,  (char *)&v19 + 2,  v3,  &type metadata for NANAttribute.Availability.Control,  v11);
  int v12 = (unsigned __int16)v19;
  uint64_t v13 = sub_100002274(&qword_10040A930);
  char v18 = 2;
  uint64_t v14 = sub_100087780( &qword_10040B8B8,  &qword_10040A930,  (void (*)(void))sub_1001E4A98,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v13, &v18, v3, v13, v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v10 | (v12 << 16);
}

uint64_t sub_1001CAD3C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B800);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D28D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ExtendedIBSS.CodingKeys,  &type metadata for NANAttribute.ExtendedIBSS.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  HIBYTE(v25)  = 0;
  unint64_t v10 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v25,  &type metadata for WiFiAddress,  (char *)&v25 + 7,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v24 = v25;
  uint64_t v11 = BYTE4(v25);
  uint64_t v12 = BYTE5(v25);
  HIBYTE(v25)  = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v25,  &type metadata for WiFiAddress,  (char *)&v25 + 7,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  uint64_t v13 = v25;
  uint64_t v14 = BYTE1(v25);
  uint64_t v15 = *(unsigned int *)((char *)&v25 + 2);
  HIBYTE(v25)  = 2;
  unint64_t v16 = sub_1001E46E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v25,  &type metadata for NonNANOperatingChannelInformation,  (char *)&v25 + 7,  v3,  &type metadata for NonNANOperatingChannelInformation,  v16);
  uint64_t v19 = v14;
  uint64_t v20 = v13;
  uint64_t v21 = v15;
  HIBYTE(v25)  = 3;
  unint64_t v17 = sub_1001E4724();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v25,  &type metadata for NonNANBeaconInformation,  (char *)&v25 + 7,  v3,  &type metadata for NonNANBeaconInformation,  v17);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v24 | (v22 << 32) | (v23 << 40) | (v20 << 48) | (v19 << 56);
}

uint64_t sub_1001CAF98(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B7E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D2918();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ExtendedMesh.CodingKeys,  &type metadata for NANAttribute.ExtendedMesh.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v28 = 0;
  unint64_t v10 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for WiFiAddress,  &v28,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v11 = v27;
  uint64_t v12 = BYTE4(v27);
  uint64_t v13 = BYTE5(v27);
  char v28 = 1;
  unint64_t v14 = sub_1001E46E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for NonNANOperatingChannelInformation,  &v28,  v3,  &type metadata for NonNANOperatingChannelInformation,  v14);
  uint64_t v24 = v13;
  uint64_t v25 = v12;
  uint64_t v26 = v11;
  uint64_t v15 = v27;
  uint64_t v16 = BYTE1(v27);
  uint64_t v17 = BYTE2(v27);
  char v28 = 2;
  unint64_t v18 = sub_1001E4724();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for NonNANBeaconInformation,  &v28,  v3,  &type metadata for NonNANBeaconInformation,  v18);
  uint64_t v21 = v17;
  uint64_t v22 = v16;
  uint64_t v23 = v15;
  char v28 = 3;
  unint64_t v19 = sub_1001D317C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for BinaryDecoder.DataCopy,  &v28,  v3,  &type metadata for BinaryDecoder.DataCopy,  v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v26 | (v25 << 32) | (v24 << 40) | (v23 << 48) | (v22 << 56);
}

uint64_t sub_1001CB1EC(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B880);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D262C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys,  &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v15 = 0;
  unsigned __int8 v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  char v14 = 1;
  int v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v10 | (v11 << 16);
}

void *sub_1001CB33C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B9B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_1001CDE24();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ServiceIDList.CodingKeys,  &type metadata for NANAttribute.ServiceIDList.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v11 = sub_100002274(&qword_10040A758);
    uint64_t v12 = sub_100087780( &qword_10040B9B8,  &qword_10040A758,  (void (*)(void))sub_1001E4DD0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v16;
    sub_100002AC4(a1);
  }

  return v9;
}

uint64_t sub_1001CB488(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B738);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D2E7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.VendorSpecific.CodingKeys,  &type metadata for NANAttribute.VendorSpecific.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v17 = 0;
  unint64_t v10 = sub_100070284();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for OUI, &v17, v3, &type metadata for OUI, v10);
  int v11 = v16;
  int v12 = BYTE1(v16);
  int v13 = BYTE2(v16);
  char v17 = 1;
  unint64_t v14 = sub_1001D317C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for BinaryDecoder.DataCopy,  &v17,  v3,  &type metadata for BinaryDecoder.DataCopy,  v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v11 | (v12 << 8) | (v13 << 16);
}

uint64_t sub_1001CB620(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B910);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D0E70();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ClusterDiscovery.CodingKeys,  &type metadata for NANAttribute.ClusterDiscovery.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v19 = 0;
  unint64_t v10 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for WiFiAddress,  &v19,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v17 = v18;
  uint64_t v11 = BYTE4(v18);
  uint64_t v12 = BYTE5(v18);
  LOBYTE(v18)  = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
  uint64_t v15 = v11;
  uint64_t v16 = v12;
  char v19 = 2;
  unint64_t v13 = sub_1001E4C7C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for NANMasterRank,  &v19,  v3,  &type metadata for NANMasterRank,  v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v17 | (v15 << 32) | (v16 << 40);
}

unint64_t sub_1001CB7F0(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B8E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D0EF8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapability.CodingKeys,  &type metadata for NANAttribute.DeviceCapability.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v28 = 0;
  unint64_t v10 = sub_1001E4834();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for NANMapIDs,  &v28,  v3,  &type metadata for NANMapIDs,  v10);
  uint64_t v11 = v29;
  unsigned __int8 v12 = BYTE1(v29);
  char v28 = 1;
  unint64_t v13 = sub_1001E4B6C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation,  &v28,  v3,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation,  v13);
  uint64_t v14 = (unsigned __int16)v29;
  char v28 = 2;
  unint64_t v15 = sub_100089CC8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for NANBitmap.Band,  &v28,  v3,  &type metadata for NANBitmap.Band,  v15);
  uint64_t v26 = v14;
  uint64_t v16 = v29;
  char v28 = 3;
  unint64_t v17 = sub_1001E4BB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for NANAttribute.DeviceCapability.OperationMode,  &v28,  v3,  &type metadata for NANAttribute.DeviceCapability.OperationMode,  v17);
  uint64_t v25 = v16;
  uint64_t v18 = v29;
  char v28 = 4;
  unint64_t v19 = sub_1001E4BF4();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount,  &v28,  v3,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount,  v19);
  uint64_t v24 = v18;
  uint64_t v20 = v29;
  LOBYTE(v29)  = 5;
  int v27 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v3);
  uint64_t v23 = v20;
  char v28 = 6;
  unint64_t v21 = sub_1001E4C38();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for NANAttribute.DeviceCapability.Capabilities,  &v28,  v3,  &type metadata for NANAttribute.DeviceCapability.Capabilities,  v21);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v11 | (v26 << 16) | (v25 << 32) | (v24 << 40) | (v23 << 48) | ((unint64_t)v12 << 8);
}

uint64_t sub_1001CBADC(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B830);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D27C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ElementContainer.CodingKeys,  &type metadata for NANAttribute.ElementContainer.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v17 = 0;
  unint64_t v10 = sub_1001E4834();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for NANMapIDs,  &v17,  v3,  &type metadata for NANMapIDs,  v10);
  int v11 = v16;
  int v12 = BYTE1(v16);
  char v17 = 1;
  unint64_t v13 = sub_1001D317C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for BinaryDecoder.DataCopy,  &v17,  v3,  &type metadata for BinaryDecoder.DataCopy,  v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v11 | (v12 << 8);
}

uint64_t sub_1001CBC64(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B9C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001C76E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.MasterIndication.CodingKeys,  &type metadata for NANAttribute.MasterIndication.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    char v15 = 0;
    unsigned __int8 v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    char v14 = 1;
    int v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100002AC4(a1);
    return v10 | (v11 << 8);
  }

  return v7;
}

unint64_t sub_1001CBDB4()
{
  unint64_t result = qword_10040A738;
  if (!qword_10040A738)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035B190, &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A738);
  }

  return result;
}

unint64_t sub_1001CBDF8()
{
  unint64_t result = qword_10040A740;
  if (!qword_10040A740)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANMasterRank, &type metadata for NANMasterRank);
    atomic_store(result, (unint64_t *)&qword_10040A740);
  }

  return result;
}

uint64_t sub_1001CBE3C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B9A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001E4E58();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys,  &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v10 = sub_100002274(&qword_100407490);
    HIBYTE(v13)  = 0;
    uint64_t v11 = sub_100087780( &qword_100407D80,  &qword_100407490,  (void (*)(void))sub_1000290F8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v10, (char *)&v13 + 7, v3, v10, v11);
    uint64_t v7 = v14;
    BYTE6(v13)  = 1;
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v13 + 6, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100002AC4(a1);
    swift_bridgeObjectRelease(v7);
  }

  return v7;
}

void *sub_1001CBFF8(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B760);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_1001D2CD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.PublicAvailability.CodingKeys,  &type metadata for NANAttribute.PublicAvailability.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v11 = sub_100002274(&qword_10040A960);
    uint64_t v12 = sub_100087780( &qword_10040B768,  &qword_10040A960,  (void (*)(void))sub_1001E4504,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v16;
    sub_100002AC4(a1);
  }

  return v9;
}

uint64_t sub_1001CC144@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = sub_100002274(&qword_10040B968);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = &v23.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D0B40();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.WLANInfrastructure.CodingKeys,  &type metadata for NANAttribute.WLANInfrastructure.CodingKeys,  v13,  v11,  v12);
  if (v2) {
    return sub_100002AC4(a1);
  }
  char v35 = 0;
  unint64_t v14 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for WiFiAddress,  &v35,  v7,  &type metadata for WiFiAddress,  v14);
  v3.i32[0]  = v31;
  int v34 = BYTE4(v31);
  int v15 = BYTE5(v31);
  char v35 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for WiFiAddress,  &v35,  v7,  &type metadata for WiFiAddress,  v14);
  int v30 = v15;
  v4.i32[0]  = v31;
  int v16 = BYTE4(v31);
  LODWORD(v14)  = BYTE5(v31);
  char v35 = 2;
  unint64_t v17 = sub_1001E4D04();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for DeprecatedNANAvailability,  &v35,  v7,  &type metadata for DeprecatedNANAvailability,  v17);
  int v28 = v16;
  int v29 = v14;
  int v26 = BYTE1(v31);
  int v27 = v31;
  int v25 = BYTE2(v31);
  uint64_t v18 = v32;
  char v35 = 3;
  unint64_t v19 = v33;
  sub_100020AFC(v32, v33);
  unint64_t v20 = sub_1001E47F0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole,  &v35,  v7,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole,  v20);
  int16x8_t v23 = (int16x8_t)vmovl_u8(v3);
  int16x8_t v24 = (int16x8_t)vmovl_u8(v4);
  (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v7);
  char v21 = v31;
  sub_100002AC4(a1);
  uint64_t result = sub_1000208D8(v18, v19);
  *(_DWORD *)a2  = vmovn_s16(v23).u32[0];
  *(_BYTE *)(a2 + 4)  = v34;
  *(_BYTE *)(a2 + 5)  = v30;
  *(_DWORD *)(a2 + 6)  = vmovn_s16(v24).u32[0];
  *(_BYTE *)(a2 + 10)  = v28;
  *(_BYTE *)(a2 + 11)  = v29;
  *(_BYTE *)(a2 + 16)  = v27;
  *(_BYTE *)(a2 + 17)  = v26;
  *(_BYTE *)(a2 + 18)  = v25;
  *(void *)(a2 + 24)  = v18;
  *(void *)(a2 + 32)  = v19;
  *(_BYTE *)(a2 + 40)  = v21;
  return result;
}

uint64_t sub_1001CC42C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B788);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D2C04();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys,  &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys,  v9,  v7,  v8);
  if (!v1)
  {
    LOBYTE(v14)  = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    char v13 = 1;
    unint64_t v10 = sub_1001D317C();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v14,  &type metadata for BinaryDecoder.DataCopy,  &v13,  v3,  &type metadata for BinaryDecoder.DataCopy,  v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002AC4(a1);
  return v7;
}

uint64_t sub_1001CC598(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B7C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D2A28();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v16 = 0;
  unint64_t v10 = sub_1001E4658();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v17,  &type metadata for NANCipherSuite,  &v16,  v3,  &type metadata for NANCipherSuite,  v10);
  int v11 = v17;
  char v15 = 1;
  int v12 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v11 | (v12 << 8);
}

uint64_t sub_1001CC6FC(void *a1)
{
  uint64_t v2 = sub_100002274(&qword_10040B7A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  unint64_t v8 = sub_1001D2AB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys,  &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys,  v8,  v6,  v7);
  char v17 = 0;
  unint64_t v9 = sub_1001E45D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities,  &v17,  v2,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities,  v9);
  uint64_t v10 = v18;
  uint64_t v11 = sub_100002274(&qword_10040AA90);
  char v15 = 1;
  uint64_t v12 = sub_100087780( &qword_10040B7B8,  &qword_10040AA90,  (void (*)(void))sub_1001E4614,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100002AC4(a1);
  return v10;
}

uint64_t sub_1001CC8A8(void *a1)
{
  uint64_t v2 = sub_100002274(&qword_10040B928);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  unint64_t v8 = sub_1001D0DA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys,  &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys,  v8,  v6,  v7);
  char v17 = 0;
  unint64_t v9 = sub_100089B2C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for NANMapID,  &v17,  v2,  &type metadata for NANMapID,  v9);
  uint64_t v10 = v18;
  uint64_t v11 = sub_100002274(&qword_10040A840);
  char v15 = 1;
  uint64_t v12 = sub_100087780( &qword_10040B930,  &qword_10040A840,  (void (*)(void))sub_1001E4CC0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100002AC4(a1);
  return v10;
}

unint64_t sub_1001CCA54(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = (unint64_t)sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v10, v3, v4);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    sub_1000237C8((uint64_t)v10, v11);
    unsigned int v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7);
    else {
      unint64_t v5 = v8;
    }
    sub_100002AC4(v10);
    sub_100002AC4(a1);
  }

  return v5;
}

uint64_t sub_1001CCB1C(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B940);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D0D60();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys,  &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  unint64_t v10 = sub_1001E4D04();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v17,  &type metadata for DeprecatedNANAvailability,  v11,  v3,  &type metadata for DeprecatedNANAvailability,  v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  int v13 = BYTE2(v17);
  int v14 = (unsigned __int16)v17;
  sub_100002AC4(a1);
  if (v13) {
    int v15 = 0x10000;
  }
  else {
    int v15 = 0;
  }
  return v14 | v15;
}

uint64_t sub_1001CCC58(void *a1)
{
  uint64_t v2 = sub_100002274(&qword_10040B778);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  unint64_t v8 = sub_1001D2C48();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys,  &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys,  v8,  v6,  v7);
  LOBYTE(v17)  = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v2);
  LOBYTE(v17)  = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v17, v2);
  char v19 = 2;
  unint64_t v10 = sub_1001E4548();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v17,  &type metadata for NANAttribute.MulticastScheduleChange.Control,  &v19,  v2,  &type metadata for NANAttribute.MulticastScheduleChange.Control,  v10);
  int v11 = (unsigned __int16)v17;
  char v19 = 3;
  unint64_t v12 = sub_1001E4438();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v17,  &type metadata for NANReasonCode,  &v19,  v2,  &type metadata for NANReasonCode,  v12);
  int v18 = v11;
  v16[1]  = v17;
  uint64_t v14 = sub_100002274(&qword_10040A960);
  char v19 = 4;
  uint64_t v15 = sub_100087780( &qword_10040B768,  &qword_10040A960,  (void (*)(void))sub_1001E4504,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v14, &v19, v2, v14, v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100002AC4(a1);
  return v9;
}

void *sub_1001CCEB0(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B8E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_1001D1090();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys,  &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v11 = sub_100002274(&qword_100406978);
    uint64_t v12 = sub_1000E5170( &qword_100407D68,  (uint64_t)&protocol witness table for UInt8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v16;
    sub_100002AC4(a1);
  }

  return v9;
}

uint64_t sub_1001CCFF4(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B818);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001E47AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys,  &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  HIBYTE(v27)  = 0;
  unint64_t v10 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for WiFiAddress,  (char *)&v27 + 7,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v26 = v27;
  uint64_t v11 = BYTE4(v27);
  uint64_t v12 = BYTE5(v27);
  HIBYTE(v27)  = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for WiFiAddress,  (char *)&v27 + 7,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v24 = v11;
  uint64_t v25 = v12;
  uint64_t v13 = v27;
  uint64_t v14 = BYTE1(v27);
  uint64_t v15 = *(unsigned int *)((char *)&v27 + 2);
  HIBYTE(v27)  = 2;
  unint64_t v16 = sub_1001E47F0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole,  (char *)&v27 + 7,  v3,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole,  v16);
  uint64_t v21 = v13;
  uint64_t v22 = v15;
  uint64_t v23 = v14;
  HIBYTE(v27)  = 3;
  unint64_t v17 = sub_1001E46E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for NonNANOperatingChannelInformation,  (char *)&v27 + 7,  v3,  &type metadata for NonNANOperatingChannelInformation,  v17);
  v20[1]  = BYTE2(v27);
  HIBYTE(v27)  = 4;
  unint64_t v18 = sub_1001E4724();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v27,  &type metadata for NonNANBeaconInformation,  (char *)&v27 + 7,  v3,  &type metadata for NonNANBeaconInformation,  v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v26 | (v24 << 32) | (v25 << 40) | (v21 << 48) | (v23 << 56);
}

void *sub_1001CD2A8(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B790);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100021104(a1, v7);
  unint64_t v10 = sub_1001D2B7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.SecurityContextInformation.CodingKeys,  &type metadata for NANAttribute.SecurityContextInformation.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v11 = sub_100002274(&qword_10040AAB8);
    uint64_t v12 = sub_100087780( &qword_10040B798,  &qword_10040AAB8,  (void (*)(void))sub_1001E458C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v16;
    sub_100002AC4(a1);
  }

  return v9;
}

uint64_t sub_1001CD3F4(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B980);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D09C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    char v15 = 0;
    unsigned __int16 v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    char v14 = 1;
    unsigned __int16 v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100002AC4(a1);
    return v10 | (v11 << 16);
  }

  return v7;
}

uint64_t sub_1001CD544(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B7E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D295C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  BYTE6(v25)  = 0;
  unsigned int v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v25 + 6, v3);
  char v24 = 1;
  unint64_t v11 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v25,  &type metadata for WiFiAddress,  &v24,  v3,  &type metadata for WiFiAddress,  v11);
  uint64_t v19 = v25;
  uint64_t v18 = BYTE1(v25);
  uint64_t v17 = BYTE2(v25);
  uint64_t v16 = BYTE3(v25);
  uint64_t v12 = BYTE4(v25);
  uint64_t v13 = BYTE5(v25);
  char v23 = 2;
  v15[0]  = KeyedDecodingContainer.decode(_:forKey:)(&v23, v3);
  v15[1]  = v13;
  v15[2]  = v12;
  char v22 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v22, v3);
  char v21 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v21, v3);
  char v20 = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v10 | (unint64_t)(v19 << 32) | (v18 << 40) | (v17 << 48) | (v16 << 56);
}

uint64_t sub_1001CD7B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = sub_100002274(&qword_10040B958);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned int v10 = &v22.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_1001D0C94();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.IBSS.CodingKeys,  &type metadata for NANAttribute.IBSS.CodingKeys,  v13,  v11,  v12);
  if (v2) {
    return sub_100002AC4(a1);
  }
  char v28 = 0;
  unint64_t v14 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v26,  &type metadata for WiFiAddress,  &v28,  v7,  &type metadata for WiFiAddress,  v14);
  v3.i32[0]  = v26[0];
  int v27 = BYTE4(v26[0]);
  char v15 = BYTE5(v26[0]);
  char v28 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)( v26,  &type metadata for WiFiAddress,  &v28,  v7,  &type metadata for WiFiAddress,  v14);
  LOBYTE(v14)  = v27;
  v4.i32[0]  = v26[0];
  int v24 = BYTE5(v26[0]);
  int v25 = BYTE4(v26[0]);
  char v28 = 2;
  unint64_t v16 = sub_1001E4D04();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v26,  &type metadata for DeprecatedNANAvailability,  &v28,  v7,  &type metadata for DeprecatedNANAvailability,  v16);
  (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v7);
  int16x8_t v22 = (int16x8_t)vmovl_u8(v3);
  int16x8_t v23 = (int16x8_t)vmovl_u8(v4);
  __int16 v17 = v26[0];
  char v18 = BYTE2(v26[0]);
  uint64_t v19 = v26[1];
  uint64_t v20 = v26[2];
  uint64_t result = sub_100002AC4(a1);
  *(_DWORD *)a2  = vmovn_s16(v22).u32[0];
  *(_BYTE *)(a2 + 4)  = v14;
  *(_BYTE *)(a2 + 5)  = v15;
  *(_DWORD *)(a2 + 6)  = vmovn_s16(v23).u32[0];
  *(_BYTE *)(a2 + 10)  = v25;
  *(_BYTE *)(a2 + 11)  = v24;
  *(_WORD *)(a2 + 16)  = v17;
  *(_BYTE *)(a2 + 18)  = v18;
  *(void *)(a2 + 24)  = v19;
  *(void *)(a2 + 32)  = v20;
  return result;
}

uint64_t sub_1001CD9EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_100002274(&qword_10040B950);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v23.i8[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  unint64_t v12 = sub_1001D0CD8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Mesh.CodingKeys,  &type metadata for NANAttribute.Mesh.CodingKeys,  v12,  v10,  v11);
  if (v2) {
    return sub_100002AC4(a1);
  }
  char v32 = 0;
  unint64_t v13 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for WiFiAddress,  &v32,  v6,  &type metadata for WiFiAddress,  v13);
  v3.i32[0]  = v29;
  int v14 = BYTE4(v29);
  int v15 = BYTE5(v29);
  char v32 = 1;
  unint64_t v16 = sub_1001E4D04();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for DeprecatedNANAvailability,  &v32,  v6,  &type metadata for DeprecatedNANAvailability,  v16);
  int v27 = v15;
  int v28 = v14;
  int v25 = BYTE1(v29);
  int v26 = v29;
  int v24 = BYTE2(v29);
  uint64_t v17 = v30;
  unint64_t v18 = v31;
  char v32 = 2;
  sub_100020AFC(v30, v31);
  unint64_t v19 = sub_1001D317C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for BinaryDecoder.DataCopy,  &v32,  v6,  &type metadata for BinaryDecoder.DataCopy,  v19);
  int16x8_t v23 = (int16x8_t)vmovl_u8(v3);
  (*(void (**)(__int8 *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v20 = v29;
  unint64_t v21 = v30;
  sub_100020AFC(v17, v18);
  sub_100020AFC(v20, v21);
  sub_1000208D8(v17, v18);
  sub_100002AC4(a1);
  sub_1000208D8(v17, v18);
  uint64_t result = sub_1000208D8(v20, v21);
  *(_DWORD *)a2  = vmovn_s16(v23).u32[0];
  *(_BYTE *)(a2 + 4)  = v28;
  *(_BYTE *)(a2 + 5)  = v27;
  *(_BYTE *)(a2 + 8)  = v26;
  *(_BYTE *)(a2 + 9)  = v25;
  *(_BYTE *)(a2 + 10)  = v24;
  *(void *)(a2 + 16)  = v17;
  *(void *)(a2 + 24)  = v18;
  *(void *)(a2 + 32)  = v20;
  *(void *)(a2 + 40)  = v21;
  return result;
}

uint64_t sub_1001CDC94(void *a1)
{
  uint64_t v2 = sub_100002274(&qword_10040B9C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  unint64_t v8 = sub_1001CBDB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Cluster.CodingKeys,  &type metadata for NANAttribute.Cluster.CodingKeys,  v8,  v6,  v7);
  HIBYTE(v12)  = 0;
  unint64_t v9 = sub_1001E4C7C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v13,  &type metadata for NANMasterRank,  (char *)&v12 + 7,  v2,  &type metadata for NANMasterRank,  v9);
  uint64_t v10 = v13;
  BYTE6(v12)  = 1;
  KeyedDecodingContainer.decode(_:forKey:)((char *)&v12 + 6, v2);
  BYTE5(v12)  = 2;
  KeyedDecodingContainer.decode(_:forKey:)((char *)&v12 + 5, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100002AC4(a1);
  return v10;
}

unint64_t sub_1001CDE24()
{
  unint64_t result = qword_10040A750;
  if (!qword_10040A750)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035B140, &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A750);
  }

  return result;
}

unint64_t sub_1001CDE68()
{
  unint64_t result = qword_10040A768;
  if (!qword_10040A768)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANServiceName.Hash,  &type metadata for NANServiceName.Hash);
    atomic_store(result, (unint64_t *)&qword_10040A768);
  }

  return result;
}

uint64_t sub_1001CDEAC(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (BYTE2(a3) != 255) {
    return sub_1001CDEC4(result, a2, a3, BYTE2(a3) & 1);
  }
  return result;
}

uint64_t sub_1001CDEC4(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return sub_100020AFC(result, a2);
  }
  else {
    return swift_bridgeObjectRetain(result);
  }
}

uint64_t sub_1001CDED0(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_10040B920);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_1001D0E2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANAttribute.Ranging.CodingKeys,  &type metadata for NANAttribute.Ranging.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  char v17 = 0;
  unint64_t v10 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for WiFiAddress,  &v17,  v3,  &type metadata for WiFiAddress,  v10);
  uint64_t v11 = v16;
  uint64_t v12 = BYTE4(v16);
  uint64_t v13 = BYTE5(v16);
  char v17 = 1;
  unint64_t v14 = sub_1001D317C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for BinaryDecoder.DataCopy,  &v17,  v3,  &type metadata for BinaryDecoder.DataCopy,  v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100002AC4(a1);
  return v11 | (v12 << 32) | (v13 << 40);
}

uint64_t sub_1001CE064@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  dispatch thunk of Decoder.unkeyedContainer()(v44, v6, v7);
  if (v2)
  {
    sub_100002AC4(a1);
    return sub_1001062E0(4LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v8 = v45;
    uint64_t v9 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    UnkeyedDecodingContainer.inferredDecode<A>()( v8,  (uint64_t)&type metadata for UInt8,  v9,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v10 = v45;
    uint64_t v11 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    uint64_t v12 = sub_100002274(&qword_10040A8D8);
    uint64_t v13 = sub_1000572E4(&qword_10040B8C8, &qword_10040A8D8, (uint64_t)&unk_100348A88);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, v12, v11, v13);
    uint64_t v14 = v45;
    uint64_t v15 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    unint64_t v16 = sub_1001E4438();
    UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for NANReasonCode, v15, v16);
    uint64_t v17 = v45;
    uint64_t v18 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    unint64_t v19 = sub_1000290F8();
    UnkeyedDecodingContainer.inferredDecode<A>()(v17, (uint64_t)&type metadata for WiFiAddress, v18, v19);
    v3.i32[0]  = v39;
    uint64_t v20 = v45;
    uint64_t v21 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    UnkeyedDecodingContainer.inferredDecode<A>()( v20,  (uint64_t)&type metadata for UInt8,  v21,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v22 = v45;
    uint64_t v23 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    unint64_t v24 = sub_1001E4B20();
    UnkeyedDecodingContainer.inferredDecode<A>()( v22,  (uint64_t)&type metadata for NANAttribute.Datapath.Control,  v23,  v24);
    char v26 = v39;
    if ((v39 & 8) != 0)
    {
      uint64_t v27 = v45;
      uint64_t v28 = v46;
      sub_1000237C8((uint64_t)v44, v45);
      char v38 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v27, v28);
      char v26 = v39;
    }

    else
    {
      char v38 = 0;
    }

    if ((v26 & 0x10) != 0)
    {
      char v37 = v26;
      uint64_t v31 = v45;
      uint64_t v30 = v46;
      sub_1000237C8((uint64_t)v44, v45);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for WiFiAddress,  &type metadata for WiFiAddress,  v19,  v31,  v30);
      unint64_t v29 = v39 | ((unint64_t)v40 << 32) | ((unint64_t)v41 << 40);
      char v26 = v37;
    }

    else
    {
      unint64_t v29 = 0LL;
    }

    if ((v26 & 0x20) != 0)
    {
      uint64_t v32 = v45;
      uint64_t v33 = v46;
      sub_1000237C8((uint64_t)v44, v45);
      unint64_t v34 = sub_1000702C8();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for Data,  &type metadata for Data,  v34,  v32,  v33);
      sub_100020AFC(v42, v43);
      sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v35 = type metadata accessor for BinaryDecoder();
      uint64_t v36 = (void *)swift_allocObject(v35, 48LL, 7LL);
      v36[5]  = &_swiftEmptyDictionarySingleton;
      v36[2]  = v42;
      v36[3]  = v43;
      __asm { BR              X10 }
    }

    sub_100002AC4(v44);
    sub_1001062A0(4LL, 0LL, 0LL);
    sub_100002AC4(a1);
    uint64_t result = sub_1001062E0(4LL, 0LL, 0LL);
    *(_BYTE *)a2  = v39;
    *(_BYTE *)(a2 + 1)  = v39;
    *(_BYTE *)(a2 + 2)  = v39;
    *(_DWORD *)(a2 + 3)  = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    *(_BYTE *)(a2 + 7)  = v40;
    *(_BYTE *)(a2 + 8)  = v41;
    *(_BYTE *)(a2 + 9)  = v39;
    *(_BYTE *)(a2 + 10)  = v26;
    *(_BYTE *)(a2 + 11)  = v38;
    *(_BYTE *)(a2 + 12)  = (v26 & 8) == 0;
    *(_WORD *)(a2 + 17)  = WORD2(v29);
    *(_DWORD *)(a2 + 13)  = v29;
    *(_BYTE *)(a2 + 19)  = (v26 & 0x10) == 0;
    *(void *)(a2 + 24)  = 4LL;
    *(void *)(a2 + 32)  = 0LL;
    *(void *)(a2 + 40)  = 0LL;
  }

  return result;
}

void sub_1001CE530( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  *(void *)(v11 + 32)  = (int)v12;
  swift_beginAccess(a1, va1, 1LL, 0LL);
  uint64_t v13 = *(void *)(v11 + 40);
  *(void *)(v11 + 40)  = a5;
  swift_bridgeObjectRelease(v13);
  uint64_t v19 = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  uint64_t v14 = v11;
  NANServiceInfo.init(from:)((uint64_t *)va);
  if (v9)
  {
    sub_1000208D8(v12, v10);
    JUMPOUT(0x1001CE2A8LL);
  }

  sub_1000208D8(v12, v10);
  JUMPOUT(0x1001CE3B8LL);
}

uint64_t sub_1001CE5D4(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v24, v3, v4);
  if (!v1)
  {
    uint64_t v5 = v25;
    uint64_t v6 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    UnkeyedDecodingContainer.inferredDecode<A>()( v5,  (uint64_t)&type metadata for UInt8,  v6,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v7 = v25;
    uint64_t v8 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    unint64_t v9 = sub_1001E4D48();
    UnkeyedDecodingContainer.inferredDecode<A>()( v7,  (uint64_t)&type metadata for NANAttribute.ServiceDescriptorExtension.Control,  v8,  v9);
    if ((v22 & 0x100) != 0)
    {
      uint64_t v11 = v25;
      uint64_t v12 = v26;
      sub_1000237C8((uint64_t)v24, v25);
      unint64_t v13 = sub_1001E4D8C();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit,  v13,  v11,  v12);
      if ((v22 & 0x200) == 0) {
        goto LABEL_6;
      }
    }

    else if ((v22 & 0x200) == 0)
    {
LABEL_6:
      int v27 = (unsigned __int16)v22;
      int v28 = v22;
      goto LABEL_9;
    }

    uint64_t v14 = v25;
    uint64_t v15 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v14, v15);
    int v27 = (unsigned __int16)v22;
    int v28 = v22;
LABEL_9:
    uint64_t v16 = sub_100002274(&qword_1004068A0);
    uint64_t v17 = v25;
    uint64_t v18 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    uint64_t v19 = sub_1000572E4( &qword_1004068A8,  &qword_1004068A0,  (uint64_t)&protocol conformance descriptor for LengthValue<A>);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v16, v16, v19, v17, v18);
    sub_100020AFC(v22, v23);
    sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v20 = type metadata accessor for BinaryDecoder();
    uint64_t v21 = (void *)swift_allocObject(v20, 48LL, 7LL);
    v21[5]  = &_swiftEmptyDictionarySingleton;
    void v21[2] = v22;
    void v21[3] = v23;
    __asm { BR              X10 }
  }

  sub_100002AC4(a1);
  return sub_1001062E0(4LL, 0LL, 0LL);
}

uint64_t sub_1001CE9AC(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v16, v3, v4);
  if (!v1)
  {
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    sub_1000237C8((uint64_t)v16, v17);
    LOWORD(v6)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v5, v6);
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    sub_1000237C8((uint64_t)v16, v17);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v7, v8);
    uint64_t v9 = v17;
    uint64_t v10 = v18;
    sub_1000237C8((uint64_t)v16, v17);
    UnkeyedDecodingContainer.inferredDecode<A>()( v9,  (uint64_t)&type metadata for UInt8,  v10,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v11 = (unsigned __int16)v6;
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    sub_1000237C8((uint64_t)v16, v17);
    UnkeyedDecodingContainer.decodeData(with:)(v11, v12, v13);
    __asm { BR              X10 }
  }

  return sub_100002AC4(a1);
}

void sub_1001CEB40(uint64_t a1, ...)
{
  uint64_t v4 = Data.subdata(in:)(0LL, BYTE6(v3), v2, v3);
  unint64_t v6 = v5;
  sub_1000208D8(v2, v3);
  sub_100020AFC(v4, v6);
  sub_1000208D8(v2, v3);
  sub_100002AC4((uint64_t *)va);
  sub_100002AC4(v1);
  sub_1000208D8(v4, v6);
  JUMPOUT(0x1001CEAECLL);
}

uint64_t sub_1001CEBE8(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v18, v3, v4);
  if (v1)
  {
    sub_100002AC4(a1);
  }

  else
  {
    uint64_t v5 = v19;
    uint64_t v6 = v20;
    sub_1000237C8((uint64_t)v18, v19);
    unint64_t v7 = sub_1001E44C0();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion,  &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion,  v7,  v5,  v6);
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    sub_1000237C8((uint64_t)v18, v19);
    uint64_t v3 = UnkeyedDecodingContainer.decodeData(with:)(8LL, v8, v9);
    unint64_t v12 = v11;
    uint64_t v13 = v19;
    uint64_t v14 = v20;
    sub_1000237C8((uint64_t)v18, v19);
    sub_100020AFC(v3, v12);
    uint64_t v15 = UnkeyedDecodingContainer.decodeData(with:)(8LL, v13, v14);
    unint64_t v17 = v16;
    sub_100020AFC(v15, v16);
    sub_100002AC4(v18);
    sub_100020AFC(v3, v12);
    sub_100020AFC(v15, v17);
    sub_1000208D8(v15, v17);
    sub_1000208D8(v3, v12);
    sub_100002AC4(a1);
    sub_1000208D8(v3, v12);
    sub_1000208D8(v15, v17);
  }

  return v3;
}

uint64_t sub_1001CEDC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v44, v5, v6);
  if (v2)
  {
    sub_100002AC4(a1);
    return sub_10011D8A4(0LL, 0LL, 0LL, 0xF000000000000000LL);
  }

  else
  {
    uint64_t v7 = v45;
    uint64_t v8 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    UnkeyedDecodingContainer.inferredDecode<A>()( v7,  (uint64_t)&type metadata for UInt8,  v8,  (uint64_t)&protocol witness table for UInt8);
    char v9 = v48;
    uint64_t v10 = v45;
    uint64_t v11 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    uint64_t v12 = sub_100002274(&qword_10040AB20);
    uint64_t v13 = sub_1000572E4(&qword_10040B740, &qword_10040AB20, (uint64_t)&unk_100348A88);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, v12, v11, v13);
    char v14 = v48;
    uint64_t v15 = v45;
    uint64_t v16 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    unint64_t v17 = sub_1001E4438();
    UnkeyedDecodingContainer.inferredDecode<A>()(v15, (uint64_t)&type metadata for NANReasonCode, v16, v17);
    int v19 = v48;
    if (sub_100071528(4uLL, 4LL, v14) == 2)
    {
      char v20 = sub_100071528(0LL, 4LL, v14);
      if (v20 == 2)
      {
        int v47 = v19;
        uint64_t v27 = v45;
        uint64_t v28 = v46;
        sub_1000237C8((uint64_t)v44, v45);
        LOWORD(v21)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v27, v28);
        uint64_t v29 = v45;
        uint64_t v30 = v46;
        sub_1000237C8((uint64_t)v44, v45);
        char v41 = v14;
        char v42 = v9;
        uint64_t v31 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v29, v30);
        uint64_t v32 = v45;
        uint64_t v33 = v46;
        sub_1000237C8((uint64_t)v44, v45);
        uint64_t v23 = UnkeyedDecodingContainer.decodeData(with:)(v31, v32, v33);
        unint64_t v24 = v34;
        uint64_t v22 = 0LL;
        uint64_t v21 = (unsigned __int16)v21;
      }

      else
      {
        uint64_t v35 = v45;
        uint64_t v36 = v46;
        sub_1000237C8((uint64_t)v44, v45);
        uint64_t v37 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v35, v36);
        uint64_t v38 = v45;
        uint64_t v39 = v46;
        sub_1000237C8((uint64_t)v44, v45);
        uint64_t v23 = UnkeyedDecodingContainer.decodeData(with:)(v37, v38, v39);
        unint64_t v24 = v40;
        int v47 = v19;
        char v41 = v14;
        char v42 = v9;
        uint64_t v21 = 0LL;
        uint64_t v22 = 1LL;
      }
    }

    else
    {
      int v47 = v19;
      char v41 = v14;
      char v42 = v9;
      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v23 = 0LL;
      unint64_t v24 = 0xF000000000000000LL;
    }

    uint64_t v25 = v45;
    uint64_t v43 = v46;
    sub_1000237C8((uint64_t)v44, v45);
    unint64_t v26 = sub_1001E447C();
    UnkeyedDecodingContainer.inferredDecode<A>()( v25,  (uint64_t)&type metadata for NANAttribute.PairingBootstrapping.Method,  v43,  v26);
    LOWORD(v25)  = v48;
    sub_100002AC4(v44);
    sub_100117128(v21, v22, v23, v24);
    sub_100002AC4(a1);
    uint64_t result = sub_10011D8A4(v21, v22, v23, v24);
    *(_BYTE *)a2  = v42;
    *(_BYTE *)(a2 + 1)  = v41;
    *(_BYTE *)(a2 + 2)  = v47;
    *(void *)(a2 + 8)  = v21;
    *(void *)(a2 + 16)  = v22;
    *(void *)(a2 + 24)  = v23;
    *(void *)(a2 + 32)  = v24;
    *(_WORD *)(a2 + 40)  = v25;
  }

  return result;
}

unint64_t sub_1001CF1F8(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (v1) {
    return sub_100002AC4(a1);
  }
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  sub_1000237C8((uint64_t)v13, v14);
  unint64_t v7 = sub_1001E4900();
  UnkeyedDecodingContainer.inferredDecode<A>()( v5,  (uint64_t)&type metadata for NANAttribute.RangingInformation.LocationInformation,  v6,  v7);
  if ((v12 & 8) != 0)
  {
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    sub_1000237C8((uint64_t)v13, v14);
    unsigned __int16 v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v10, v11);
  }

  else
  {
    unsigned __int16 v9 = 0;
  }

  sub_100002AC4(v13);
  sub_100002AC4(a1);
  return ((unint64_t)v9 << 16) | ((unint64_t)((v12 & 8) == 0) << 32) | v12;
}

uint64_t sub_1001CF328(void *a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unsigned __int16 v9 = (char *)&v62 - v8;
  char v84 = 1;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100021104(a1, v10);
  dispatch thunk of Decoder.unkeyedContainer()(v79, v10, v11);
  if (v1) {
    return sub_100002AC4(a1);
  }
  uint64_t v12 = v81;
  uint64_t v13 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()( v12,  (uint64_t)&type metadata for UInt8,  v13,  (uint64_t)&protocol witness table for UInt8);
  uint64_t v14 = v74;
  uint64_t v15 = v81;
  uint64_t v16 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()( v15,  (uint64_t)&type metadata for UInt8,  v16,  (uint64_t)&protocol witness table for UInt8);
  v71  = v14;
  uint64_t v17 = v74;
  uint64_t v18 = v81;
  uint64_t v19 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()( v18,  (uint64_t)&type metadata for UInt32,  v19,  (uint64_t)&protocol witness table for UInt32);
  uint64_t v70 = v17;
  uint64_t v20 = v74;
  uint64_t v21 = v81;
  uint64_t v22 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()( v21,  (uint64_t)&type metadata for UInt32,  v22,  (uint64_t)&protocol witness table for UInt32);
  uint64_t v69 = v20;
  uint64_t v23 = v74;
  uint64_t v24 = v81;
  uint64_t v25 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()( v24,  (uint64_t)&type metadata for UInt32,  v25,  (uint64_t)&protocol witness table for UInt32);
  uint64_t v68 = v23;
  uint64_t v26 = v74;
  uint64_t v27 = v81;
  uint64_t v28 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()( v27,  (uint64_t)&type metadata for UInt8,  v28,  (uint64_t)&protocol witness table for UInt8);
  uint64_t v66 = v26;
  LODWORD(v26)  = v74;
  uint64_t v29 = v81;
  uint64_t v67 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  unint64_t v30 = sub_1001E4944();
  UnkeyedDecodingContainer.inferredDecode<A>()( v29,  (uint64_t)&type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  v67,  v30);
  int v83 = v26;
  char v31 = v74;
  uint64_t v32 = v81;
  uint64_t v67 = v82;
  sub_1000237C8((uint64_t)v79, v81);
  unint64_t v33 = sub_1001E4988();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  v33,  v32,  v67);
  v65  = v9;
  LODWORD(v29)  = v74;
  char v84 = 0;
  char v34 = sub_100071528(0LL, 2LL, v74);
  LODWORD(v67)  = v29;
  char v35 = 0;
  unint64_t v36 = 0LL;
  __int16 v37 = -256;
  switch(v34)
  {
    case 0:
      uint64_t v38 = v81;
      uint64_t v39 = v82;
      sub_1000237C8((uint64_t)v79, v81);
      unint64_t v40 = sub_100089CC8();
      UnkeyedDecodingContainer.inferredDecode<A>()(v38, (uint64_t)&type metadata for NANBitmap.Band, v39, v40);
      char v35 = 0;
      __int16 v37 = 0;
      unint64_t v36 = v74;
      goto LABEL_17;
    case 1:
      uint64_t v42 = v81;
      uint64_t v43 = v82;
      sub_1000237C8((uint64_t)v79, v81);
      unint64_t v44 = sub_100089D0C();
      UnkeyedDecodingContainer.inferredDecode<A>()(v42, (uint64_t)&type metadata for NANBitmap.Channel, v43, v44);
      char v35 = 0;
      unint64_t v36 = v74 | ((unint64_t)HIWORD(v74) << 16) | ((unint64_t)v75 << 32) | ((unint64_t)v76 << 48);
      __int16 v37 = v77 | 0x100;
      goto LABEL_17;
    case 2:
      uint64_t v45 = a1[3];
      uint64_t v46 = a1[4];
      sub_100021104(a1, v45);
      uint64_t v47 = dispatch thunk of Decoder.userInfo.getter(v45, v46);
      if (qword_100404160 != -1) {
        swift_once(&qword_100404160, sub_1000BD3FC);
      }
      uint64_t v48 = sub_1000032DC(v3, (uint64_t)static CodingUserInfoKey.channelInformationHasAuxillaryBitmap);
      unint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v63 = v48;
      char v64 = v49;
      ((void (*)(char *))v49)(v65);
      else {
        memset(v78, 0, sizeof(v78));
      }
      swift_bridgeObjectRelease(v47);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v65, v3);
      sub_10002084C((uint64_t)a1, (uint64_t)&v74);
      uint64_t v52 = sub_100002274(&qword_1004068C8);
      uint64_t v53 = type metadata accessor for BinaryDecoder();
      v65  = (char *)v52;
      uint64_t v62 = v53;
      if ((swift_dynamicCast(v73, &v74, v52, v53, 6LL) & 1) != 0)
      {
        uint64_t v54 = v73[0];
        v64(v7, v63, v3);
        v73[3]  = &type metadata for Bool;
        LOBYTE(v73[0])  = 1;
        swift_beginAccess(v54 + 40, v72, 33LL, 0LL);
        sub_100013C3C((uint64_t)v73, (uint64_t)v7);
        swift_endAccess(v72);
        swift_release(v54);
      }

      uint64_t v55 = v81;
      uint64_t v56 = v82;
      sub_1000237C8((uint64_t)v79, v81);
      unint64_t v57 = sub_100089D0C();
      UnkeyedDecodingContainer.inferredDecode<A>()(v55, (uint64_t)&type metadata for NANBitmap.Channel, v56, v57);
      unint64_t v36 = v74 | ((unint64_t)HIWORD(v74) << 16) | ((unint64_t)v75 << 32) | ((unint64_t)v76 << 48);
      __int16 v37 = v77 | 0x100;
      sub_10002084C((uint64_t)a1, (uint64_t)&v74);
      if ((swift_dynamicCast(v73, &v74, v65, v62, 6LL) & 1) != 0)
      {
        uint64_t v58 = v73[0];
        v64(v7, v63, v3);
        sub_1000226B0((uint64_t)v78, (uint64_t)v73, &qword_100405280);
        swift_beginAccess(v58 + 40, v72, 33LL, 0LL);
        sub_100013C3C((uint64_t)v73, (uint64_t)v7);
        swift_endAccess(v72);
        swift_release(v58);
      }

      sub_1000225EC((uint64_t)v78, &qword_100405280);
      char v35 = v84;
      goto LABEL_17;
    case 3:
LABEL_17:
      sub_100002AC4(v79);
      sub_100002AC4(a1);
      uint64_t result = v71 | (v70 << 8) | (v69 << 32);
      v79[0]  = v83;
      v79[1]  = v31;
      v79[2]  = v67;
      v79[3]  = v35;
      *(void *)&v79[4]  = v36;
      __int16 v80 = v37;
      break;
    default:
      unint64_t v59 = sub_1000033FC();
      uint64_t v60 = swift_allocError(&type metadata for WiFiError, v59, 0LL, 0LL);
      *(_OWORD *)uint64_t v61 = xmmword_100337020;
      *(_BYTE *)(v61 + 16)  = 2;
      swift_willThrow(v60);
      uint64_t result = swift_unexpectedError(v60, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_1001CFBD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v41, v5, v6);
  if (v2)
  {
    sub_100002AC4(a1);
    swift_bridgeObjectRelease(0LL);
    sub_1001062BC(0LL, 0LL, 16711680LL);
    return sub_1001062E0(4LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v7 = v42;
    uint64_t v8 = v43;
    sub_1000237C8((uint64_t)v41, v42);
    unint64_t v9 = sub_1001E4DD0();
    UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for NANServiceName.Hash, v8, v9);
    uint64_t v11 = v42;
    uint64_t v12 = v43;
    sub_1000237C8((uint64_t)v41, v42);
    sub_100020AFC(v38, v39);
    UnkeyedDecodingContainer.inferredDecode<A>()( v11,  (uint64_t)&type metadata for UInt8,  v12,  (uint64_t)&protocol witness table for UInt8);
    unint64_t v44 = v39;
    uint64_t v13 = v42;
    uint64_t v14 = v43;
    sub_1000237C8((uint64_t)v41, v42);
    UnkeyedDecodingContainer.inferredDecode<A>()( v13,  (uint64_t)&type metadata for UInt8,  v14,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v15 = v42;
    uint64_t v16 = v43;
    sub_1000237C8((uint64_t)v41, v42);
    unint64_t v17 = sub_1001E4E14();
    UnkeyedDecodingContainer.inferredDecode<A>()( v15,  (uint64_t)&type metadata for NANAttribute.ServiceDescriptor.Control,  v16,  v17);
    if ((v38 & 0x40) != 0)
    {
      uint64_t v18 = v42;
      uint64_t v19 = v43;
      sub_1000237C8((uint64_t)v41, v42);
      __int16 v37 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v18, v19);
    }

    else
    {
      __int16 v37 = 0;
    }

    if ((v38 & 4) != 0)
    {
      uint64_t v21 = sub_100002274(&qword_1004063B0);
      uint64_t v22 = v42;
      uint64_t v23 = v43;
      sub_1000237C8((uint64_t)v41, v42);
      uint64_t v24 = sub_1000572E4( &qword_100406910,  &qword_1004063B0,  (uint64_t)&protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v21, v21, v24, v22, v23);
      sub_100020AFC(v38, v39);
      sub_100020AFC(v38, v39);
      sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v25 = type metadata accessor for BinaryDecoder();
      uint64_t v26 = (void *)swift_allocObject(v25, 48LL, 7LL);
      v26[5]  = &_swiftEmptyDictionarySingleton;
      void v26[2] = v38;
      v26[3]  = v39;
      __asm { BR              X10 }
    }

    if ((v38 & 8) != 0)
    {
      uint64_t v27 = sub_100002274(&qword_1004063B0);
      uint64_t v28 = v42;
      uint64_t v29 = v43;
      sub_1000237C8((uint64_t)v41, v42);
      uint64_t v30 = sub_1000572E4( &qword_100406910,  &qword_1004063B0,  (uint64_t)&protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v27, v27, v30, v28, v29);
      __asm { BR              X12 }
    }

    if ((v38 & 0x10) != 0)
    {
      uint64_t v31 = sub_100002274(&qword_1004063B0);
      uint64_t v32 = v42;
      uint64_t v33 = v43;
      sub_1000237C8((uint64_t)v41, v42);
      uint64_t v34 = sub_1000572E4( &qword_100406910,  &qword_1004063B0,  (uint64_t)&protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v31, v31, v34, v32, v33);
      sub_100020AFC(v38, v39);
      sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v36 = type metadata accessor for BinaryDecoder();
      char v35 = (void *)swift_allocObject(v36, 48LL, 7LL);
      v35[5]  = &_swiftEmptyDictionarySingleton;
      v35[2]  = v38;
      v35[3]  = v39;
      __asm { BR              X10 }
    }

    sub_100002AC4(v41);
    unint64_t v20 = v44;
    sub_100020AFC(v38, v44);
    swift_bridgeObjectRetain(0LL);
    sub_1001CDEAC(0LL, 0LL, 16711680LL);
    sub_1001062A0(4LL, 0LL, 0LL);
    sub_1000208D8(v38, v20);
    sub_100002AC4(a1);
    sub_1000208D8(v38, v20);
    swift_bridgeObjectRelease(0LL);
    sub_1001062BC(0LL, 0LL, 16711680LL);
    uint64_t result = sub_1001062E0(4LL, 0LL, 0LL);
    *(void *)a2  = v38;
    *(void *)(a2 + 8)  = v20;
    *(_BYTE *)(a2 + 16)  = v38;
    *(_BYTE *)(a2 + 17)  = v38;
    *(_BYTE *)(a2 + 18)  = v38;
    *(_WORD *)(a2 + 20)  = v37;
    *(_BYTE *)(a2 + 22)  = (v38 & 0x40) == 0;
    *(void *)(a2 + 24)  = 0LL;
    *(void *)(a2 + 32)  = 0LL;
    *(void *)(a2 + 40)  = 0LL;
    *(_BYTE *)(a2 + 50)  = -1;
    *(_WORD *)(a2 + 48)  = 0;
    *(void *)(a2 + 56)  = 4LL;
    *(void *)(a2 + 64)  = 0LL;
    *(void *)(a2 + 72)  = 0LL;
  }

  return result;
}

unint64_t sub_1001D093C()
{
  unint64_t result = qword_10040A770;
  if (!qword_10040A770)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control,  &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040A770);
  }

  return result;
}

unint64_t sub_1001D0980()
{
  unint64_t result = qword_10040A780;
  if (!qword_10040A780)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl,  &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040A780);
  }

  return result;
}

unint64_t sub_1001D09C4()
{
  unint64_t result = qword_10040A790;
  if (!qword_10040A790)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B0F0,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A790);
  }

  return result;
}

uint64_t sub_1001D0A08(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D0A34(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001D0A60()
{
  unint64_t result = qword_10040A798;
  if (!qword_10040A798)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control,  &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040A798);
  }

  return result;
}

unint64_t sub_1001D0AA4()
{
  unint64_t result = qword_10040A7B8;
  if (!qword_10040A7B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.RangeLimit,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit);
    atomic_store(result, (unint64_t *)&qword_10040A7B8);
  }

  return result;
}

uint64_t sub_1001D0AE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D0B14(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001D0B40()
{
  unint64_t result = qword_10040A7C8;
  if (!qword_10040A7C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035B0A0, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A7C8);
  }

  return result;
}

unint64_t sub_1001D0B84()
{
  unint64_t result = qword_10040A7D0;
  if (!qword_10040A7D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DeprecatedNANAvailability,  &type metadata for DeprecatedNANAvailability);
    atomic_store(result, (unint64_t *)&qword_10040A7D0);
  }

  return result;
}

unint64_t sub_1001D0BC8()
{
  unint64_t result = qword_10040A7D8;
  if (!qword_10040A7D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040A7D8);
  }

  return result;
}

unint64_t sub_1001D0C0C()
{
  unint64_t result = qword_10040A7E8;
  if (!qword_10040A7E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035B050, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A7E8);
  }

  return result;
}

unint64_t sub_1001D0C50()
{
  unint64_t result = qword_10040A7F0;
  if (!qword_10040A7F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole,  &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040A7F0);
  }

  return result;
}

unint64_t sub_1001D0C94()
{
  unint64_t result = qword_10040A800;
  if (!qword_10040A800)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035B000, &type metadata for NANAttribute.IBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A800);
  }

  return result;
}

unint64_t sub_1001D0CD8()
{
  unint64_t result = qword_10040A810;
  if (!qword_10040A810)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AFB0, &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A810);
  }

  return result;
}

unint64_t sub_1001D0D1C()
{
  unint64_t result = qword_10040A818;
  if (!qword_10040A818)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BinaryDecoder.DataCopy,  &type metadata for BinaryDecoder.DataCopy);
    atomic_store(result, (unint64_t *)&qword_10040A818);
  }

  return result;
}

unint64_t sub_1001D0D60()
{
  unint64_t result = qword_10040A828;
  if (!qword_10040A828)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AF60, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A828);
  }

  return result;
}

unint64_t sub_1001D0DA4()
{
  unint64_t result = qword_10040A838;
  if (!qword_10040A838)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AF10, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A838);
  }

  return result;
}

unint64_t sub_1001D0DE8()
{
  unint64_t result = qword_10040A850;
  if (!qword_10040A850)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DeprecatedNANAvailabilityEntry,  &type metadata for DeprecatedNANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040A850);
  }

  return result;
}

unint64_t sub_1001D0E2C()
{
  unint64_t result = qword_10040A860;
  if (!qword_10040A860)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AEC0, &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A860);
  }

  return result;
}

unint64_t sub_1001D0E70()
{
  unint64_t result = qword_10040A870;
  if (!qword_10040A870)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AE70, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A870);
  }

  return result;
}

unint64_t sub_1001D0EB4()
{
  unint64_t result = qword_10040A880;
  if (!qword_10040A880)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035AE20,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A880);
  }

  return result;
}

unint64_t sub_1001D0EF8()
{
  unint64_t result = qword_10040A898;
  if (!qword_10040A898)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035ADD0, &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A898);
  }

  return result;
}

unint64_t sub_1001D0F3C()
{
  unint64_t result = qword_10040A8A0;
  if (!qword_10040A8A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANMapIDs, &type metadata for NANMapIDs);
    atomic_store(result, (unint64_t *)&qword_10040A8A0);
  }

  return result;
}

unint64_t sub_1001D0F80()
{
  unint64_t result = qword_10040A8A8;
  if (!qword_10040A8A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation);
    atomic_store(result, (unint64_t *)&qword_10040A8A8);
  }

  return result;
}

unint64_t sub_1001D0FC4()
{
  unint64_t result = qword_10040A8B0;
  if (!qword_10040A8B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode,  &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040A8B0);
  }

  return result;
}

unint64_t sub_1001D1008()
{
  unint64_t result = qword_10040A8B8;
  if (!qword_10040A8B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040A8B8);
  }

  return result;
}

unint64_t sub_1001D104C()
{
  unint64_t result = qword_10040A8C0;
  if (!qword_10040A8C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities,  &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A8C0);
  }

  return result;
}

unint64_t sub_1001D1090()
{
  unint64_t result = qword_10040A8D0;
  if (!qword_10040A8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AD80, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A8D0);
  }

  return result;
}

uint64_t sub_1001D10D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D1100(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001D112C()
{
  unint64_t result = qword_10040A8E8;
  if (!qword_10040A8E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_10040A8E8);
  }

  return result;
}

unint64_t sub_1001D1170()
{
  unint64_t result = qword_10040A8F0;
  if (!qword_10040A8F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Control,  &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040A8F0);
  }

  return result;
}

unint64_t sub_1001D11B4()
{
  unint64_t result = qword_10040A900;
  if (!qword_10040A900)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANServiceInfo,  &type metadata for NANServiceInfo);
    atomic_store(result, (unint64_t *)&qword_10040A900);
  }

  return result;
}

uint64_t sub_1001D11F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v56 = 1;
  char v55 = 1;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  dispatch thunk of Decoder.unkeyedContainer()(v52, v6, v7);
  if (v2)
  {
    sub_100002AC4(a1);
    sub_100020B40(0LL, 0xF000000000000000LL);
    return sub_1001062E0(4LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v8 = v53;
    uint64_t v9 = v54;
    sub_1000237C8((uint64_t)v52, v53);
    UnkeyedDecodingContainer.inferredDecode<A>()( v8,  (uint64_t)&type metadata for UInt8,  v9,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v10 = v53;
    uint64_t v11 = v54;
    sub_1000237C8((uint64_t)v52, v53);
    uint64_t v12 = sub_100002274(&qword_10040A8D8);
    uint64_t v13 = sub_1000572E4(&qword_10040B8C8, &qword_10040A8D8, (uint64_t)&unk_100348A88);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, v12, v11, v13);
    uint64_t v14 = v53;
    uint64_t v15 = v54;
    sub_1000237C8((uint64_t)v52, v53);
    unint64_t v16 = sub_1001E4438();
    UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for NANReasonCode, v15, v16);
    uint64_t v17 = v53;
    uint64_t v18 = v54;
    sub_1000237C8((uint64_t)v52, v53);
    unint64_t v19 = sub_1000290F8();
    UnkeyedDecodingContainer.inferredDecode<A>()(v17, (uint64_t)&type metadata for WiFiAddress, v18, v19);
    v3.i32[0]  = v49;
    uint64_t v20 = v53;
    uint64_t v21 = v54;
    sub_1000237C8((uint64_t)v52, v53);
    UnkeyedDecodingContainer.inferredDecode<A>()( v20,  (uint64_t)&type metadata for UInt8,  v21,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v22 = v53;
    uint64_t v23 = v54;
    sub_1000237C8((uint64_t)v52, v53);
    unint64_t v24 = sub_1001E4ADC();
    UnkeyedDecodingContainer.inferredDecode<A>()( v22,  (uint64_t)&type metadata for NANAttribute.DatapathExtension.Control,  v23,  v24);
    BOOL v47 = (v49 & 8) == 0;
    if ((v49 & 8) != 0)
    {
      uint64_t v27 = v53;
      uint64_t v28 = v54;
      sub_1000237C8((uint64_t)v52, v53);
      char v26 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v27, v28);
      char v56 = 0;
    }

    else
    {
      char v26 = 0;
    }

    char v43 = v26;
    BOOL v45 = (v49 & 0x10) == 0;
    if ((v49 & 0x10) != 0)
    {
      uint64_t v29 = v53;
      uint64_t v30 = v54;
      sub_1000237C8((uint64_t)v52, v53);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for WiFiAddress,  &type metadata for WiFiAddress,  v19,  v29,  v30);
      char v42 = v49;
      unint64_t v41 = v49 | ((unint64_t)v50 << 32) | ((unint64_t)v51 << 40);
      char v55 = 0;
    }

    else
    {
      char v42 = v49;
      unint64_t v41 = 0LL;
    }

    uint64_t v31 = v53;
    uint64_t v32 = v54;
    sub_1000237C8((uint64_t)v52, v53);
    uint64_t v33 = sub_100002274(&qword_100406478);
    uint64_t v34 = sub_1000572E4( &qword_100406470,  &qword_100406478,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
    uint64_t v35 = UnkeyedDecodingContainer.inferredArrayDecode<A>()(v31, v33, v32, v34);
    uint64_t v36 = *(void *)(v35 + 16);
    if (v36)
    {
      __int16 v37 = (void *)(v35 + 48);
      do
      {
        uint64_t v46 = *(v37 - 1);
        uint64_t v48 = *v37;
        if (!*((_BYTE *)v37 - 16))
        {
          uint64_t v39 = type metadata accessor for BinaryDecoder();
          unint64_t v40 = (void *)swift_allocObject(v39, 48LL, 7LL);
          v40[5]  = &_swiftEmptyDictionarySingleton;
          v40[2]  = v46;
          v40[3]  = v48;
          __asm { BR              X9 }
        }

        if (*((_BYTE *)v37 - 16) == 1)
        {
          uint64_t v44 = type metadata accessor for BinaryDecoder();
          uint64_t v38 = (void *)swift_allocObject(v44, 48LL, 7LL);
          void v38[5] = &_swiftEmptyDictionarySingleton;
          v38[2]  = v46;
          v38[3]  = v48;
          __asm { BR              X9 }
        }

        v37 += 3;
        --v36;
      }

      while (v36);
      swift_bridgeObjectRelease(v35);
      BOOL v47 = v56;
      BOOL v45 = v55;
    }

    else
    {
      swift_bridgeObjectRelease(v35);
    }

    sub_100002AC4(v52);
    sub_10002255C(0LL, 0xF000000000000000LL);
    sub_1001062A0(4LL, 0LL, 0LL);
    sub_100002AC4(a1);
    sub_100020B40(0LL, 0xF000000000000000LL);
    uint64_t result = sub_1001062E0(4LL, 0LL, 0LL);
    *(_BYTE *)a2  = v49;
    *(_BYTE *)(a2 + 1)  = v49;
    *(_BYTE *)(a2 + 2)  = v49;
    *(_DWORD *)(a2 + 3)  = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    *(_BYTE *)(a2 + 7)  = v50;
    *(_BYTE *)(a2 + 8)  = v51;
    *(_BYTE *)(a2 + 9)  = v49;
    *(_BYTE *)(a2 + 10)  = v42;
    *(_BYTE *)(a2 + 11)  = v43;
    *(_BYTE *)(a2 + 12)  = v47;
    *(_WORD *)(a2 + 17)  = WORD2(v41);
    *(_DWORD *)(a2 + 13)  = v41;
    *(_BYTE *)(a2 + 19)  = v45;
    *(void *)(a2 + 24)  = 0LL;
    *(void *)(a2 + 32)  = 0xF000000000000000LL;
    *(void *)(a2 + 40)  = 4LL;
    *(void *)(a2 + 48)  = 0LL;
    *(void *)(a2 + 56)  = 0LL;
  }

  return result;
}

unint64_t sub_1001D1C70()
{
  unint64_t result = qword_10040A908;
  if (!qword_10040A908)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.Control,  &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040A908);
  }

  return result;
}

unint64_t sub_1001D1CB4()
{
  unint64_t result = qword_10040A920;
  if (!qword_10040A920)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AD30, &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A920);
  }

  return result;
}

unint64_t sub_1001D1CF8()
{
  unint64_t result = qword_10040A928;
  if (!qword_10040A928)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Availability.Control,  &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040A928);
  }

  return result;
}

unint64_t sub_1001D1D3C()
{
  unint64_t result = qword_10040A940;
  if (!qword_10040A940)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAvailabilityEntry,  &type metadata for NANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040A940);
  }

  return result;
}

unint64_t sub_1001D1D80()
{
  unint64_t result = qword_10040A950;
  if (!qword_10040A950)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035ACE0, &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A950);
  }

  return result;
}

unint64_t sub_1001D1DC4()
{
  unint64_t result = qword_10040A958;
  if (!qword_10040A958)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DataCluster.Control,  &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040A958);
  }

  return result;
}

unint64_t sub_1001D1E08()
{
  unint64_t result = qword_10040A970;
  if (!qword_10040A970)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANScheduleEntry,  &type metadata for NANScheduleEntry);
    atomic_store(result, (unint64_t *)&qword_10040A970);
  }

  return result;
}

unint64_t sub_1001D1E4C(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v28, v3, v4);
  if (v1) {
    return sub_100002AC4(a1);
  }
  uint64_t v5 = v29;
  uint64_t v6 = v30;
  sub_1000237C8((uint64_t)v28, v29);
  UnkeyedDecodingContainer.inferredDecode<A>()( v5,  (uint64_t)&type metadata for UInt8,  v6,  (uint64_t)&protocol witness table for UInt8);
  uint64_t v7 = v29;
  uint64_t v8 = v30;
  sub_1000237C8((uint64_t)v28, v29);
  uint64_t v9 = sub_100002274(&qword_10040A9B8);
  uint64_t v10 = sub_1000572E4(&qword_10040B840, &qword_10040A9B8, (uint64_t)&unk_100348A88);
  UnkeyedDecodingContainer.inferredDecode<A>()(v7, v9, v8, v10);
  uint64_t v11 = v29;
  uint64_t v12 = v30;
  sub_1000237C8((uint64_t)v28, v29);
  unint64_t v13 = sub_1001E4438();
  UnkeyedDecodingContainer.inferredDecode<A>()(v11, (uint64_t)&type metadata for NANReasonCode, v12, v13);
  uint64_t v14 = v29;
  uint64_t v15 = v30;
  sub_1000237C8((uint64_t)v28, v29);
  unint64_t v16 = sub_1001E4878();
  UnkeyedDecodingContainer.inferredDecode<A>()( v14,  (uint64_t)&type metadata for NANAttribute.RangingSetup.Control,  v15,  v16);
  if ((v27 & 2) != 0)
  {
    uint64_t v19 = v29;
    uint64_t v25 = v30;
    sub_1000237C8((uint64_t)v28, v29);
    uint64_t v20 = sub_100002274(&qword_10040B850);
    uint64_t v21 = sub_100087780( &qword_10040B858,  &qword_10040B850,  (void (*)(void))sub_1001E48BC,  (uint64_t)&protocol conformance descriptor for <A> A?);
    UnkeyedDecodingContainer.inferredDecode<A>()(v19, v20, v25, v21);
    unint64_t v18 = (unint64_t)v27 << 32;
  }

  else
  {
    unint64_t v18 = 0LL;
  }

  if ((v27 & 4) != 0)
  {
    unint64_t v26 = v18;
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    sub_1000237C8((uint64_t)v28, v29);
    unint64_t v24 = sub_1001E4504();
    UnkeyedDecodingContainer.inferredArrayDecode<A>()(v22, (uint64_t)&type metadata for NANScheduleEntry, v23, v24);
    unint64_t v18 = v26;
  }

  sub_100002AC4(v28);
  sub_100002AC4(a1);
  return v27 | ((unint64_t)v27 << 8) | ((unint64_t)v27 << 16) | ((unint64_t)v27 << 24) | v18;
}

void *sub_1001D2134(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v14, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()( v6,  (uint64_t)&type metadata for UInt8,  v7,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()( v8,  (uint64_t)&type metadata for UInt8,  v9,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    sub_1000237C8((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()( v10,  (uint64_t)&type metadata for UInt8,  v11,  (uint64_t)&protocol witness table for UInt8);
    uint64_t v5 = (void *)(v13 | (v13 << 8) | (v13 << 16));
    sub_100002AC4(v14);
  }

  sub_100002AC4(a1);
  return v5;
}

unint64_t sub_1001D22A4(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v33, v3, v4);
  if (v1) {
    return sub_100002AC4(a1);
  }
  uint64_t v5 = v34;
  uint64_t v6 = v35;
  sub_1000237C8((uint64_t)v33, v34);
  UnkeyedDecodingContainer.inferredDecode<A>()( v5,  (uint64_t)&type metadata for UInt8,  v6,  (uint64_t)&protocol witness table for UInt8);
  uint64_t v7 = v36;
  uint64_t v8 = v34;
  uint64_t v9 = v35;
  sub_1000237C8((uint64_t)v33, v34);
  uint64_t v10 = sub_100002274(&qword_10040A978);
  uint64_t v11 = sub_1000572E4(&qword_10040B888, &qword_10040A978, (uint64_t)&unk_100348A88);
  UnkeyedDecodingContainer.inferredDecode<A>()(v8, v10, v9, v11);
  uint64_t v12 = v36;
  uint64_t v13 = v34;
  uint64_t v14 = v35;
  sub_1000237C8((uint64_t)v33, v34);
  unint64_t v15 = sub_1001E4438();
  UnkeyedDecodingContainer.inferredDecode<A>()(v13, (uint64_t)&type metadata for NANReasonCode, v14, v15);
  uint64_t v16 = v36;
  uint64_t v17 = v34;
  uint64_t v18 = v35;
  sub_1000237C8((uint64_t)v33, v34);
  unint64_t v19 = sub_1001E49CC();
  UnkeyedDecodingContainer.inferredDecode<A>()( v17,  (uint64_t)&type metadata for NANAttribute.DeviceLink.Control,  v18,  v19);
  uint64_t v21 = v36;
  if ((v36 & 1) != 0)
  {
    uint64_t v22 = v34;
    uint64_t v23 = v35;
    sub_1000237C8((uint64_t)v33, v34);
    unint64_t v32 = (unint64_t)dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v22, v23) << 32;
  }

  else
  {
    unint64_t v32 = 0LL;
  }

  if ((v21 & 0x10) != 0)
  {
    uint64_t v24 = v34;
    uint64_t v25 = v35;
    sub_1000237C8((uint64_t)v33, v34);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v24, v25);
  }

  uint64_t v31 = v16;
  if ((v21 & 2) != 0)
  {
    uint64_t v27 = sub_100002274(&qword_10040A960);
    uint64_t v28 = v34;
    uint64_t v30 = v35;
    sub_1000237C8((uint64_t)v33, v34);
    uint64_t v29 = sub_100087780( &qword_10040B768,  &qword_10040A960,  (void (*)(void))sub_1001E4504,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v27, v27, v29, v28, v30);
    unint64_t v26 = v36;
  }

  else
  {
    unint64_t v26 = _swiftEmptyArrayStorage;
  }

  sub_100002AC4(v33);
  swift_bridgeObjectRetain(v26);
  sub_100002AC4(a1);
  swift_bridgeObjectRelease(v26);
  return v32 | ((unint64_t)((v21 & 1) == 0) << 40) | (v21 << 24) | (v31 << 16) | (v12 << 8) | v7;
}

unint64_t sub_1001D25E8()
{
  unint64_t result = qword_10040A988;
  if (!qword_10040A988)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Control,  &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040A988);
  }

  return result;
}

unint64_t sub_1001D262C()
{
  unint64_t result = qword_10040A998;
  if (!qword_10040A998)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AC90, &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A998);
  }

  return result;
}

unint64_t sub_1001D2670()
{
  unint64_t result = qword_10040A9A0;
  if (!qword_10040A9A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040A9A0);
  }

  return result;
}

unint64_t sub_1001D26B4()
{
  unint64_t result = qword_10040A9A8;
  if (!qword_10040A9A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040A9A8);
  }

  return result;
}

unint64_t sub_1001D26F8()
{
  unint64_t result = qword_10040A9B0;
  if (!qword_10040A9B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation,  &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040A9B0);
  }

  return result;
}

unint64_t sub_1001D273C()
{
  unint64_t result = qword_10040A9C8;
  if (!qword_10040A9C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Control,  &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040A9C8);
  }

  return result;
}

unint64_t sub_1001D2780()
{
  unint64_t result = qword_10040A9D0;
  if (!qword_10040A9D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters,  &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040A9D0);
  }

  return result;
}

unint64_t sub_1001D27C4()
{
  unint64_t result = qword_10040A9E0;
  if (!qword_10040A9E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AC40, &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A9E0);
  }

  return result;
}

unint64_t sub_1001D2808()
{
  unint64_t result = qword_10040A9E8;
  if (!qword_10040A9E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NonNANOperatingChannelInformation,  &type metadata for NonNANOperatingChannelInformation);
    atomic_store(result, (unint64_t *)&qword_10040A9E8);
  }

  return result;
}

unint64_t sub_1001D284C()
{
  unint64_t result = qword_10040A9F0;
  if (!qword_10040A9F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NonNANBeaconInformation,  &type metadata for NonNANBeaconInformation);
    atomic_store(result, (unint64_t *)&qword_10040A9F0);
  }

  return result;
}

unint64_t sub_1001D2890()
{
  unint64_t result = qword_10040AA00;
  if (!qword_10040AA00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035ABF0, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AA00);
  }

  return result;
}

unint64_t sub_1001D28D4()
{
  unint64_t result = qword_10040AA10;
  if (!qword_10040AA10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035ABA0, &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AA10);
  }

  return result;
}

unint64_t sub_1001D2918()
{
  unint64_t result = qword_10040AA20;
  if (!qword_10040AA20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AB50, &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AA20);
  }

  return result;
}

unint64_t sub_1001D295C()
{
  unint64_t result = qword_10040AA30;
  if (!qword_10040AA30)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035AB00,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AA30);
  }

  return result;
}

unint64_t sub_1001D29A0()
{
  unint64_t result = qword_10040AA40;
  if (!qword_10040AA40)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035AAB0,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AA40);
  }

  return result;
}

unint64_t sub_1001D29E4()
{
  unint64_t result = qword_10040AA58;
  if (!qword_10040AA58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.FineTimingMeasurementRangeReport.Entry,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry);
    atomic_store(result, (unint64_t *)&qword_10040AA58);
  }

  return result;
}

unint64_t sub_1001D2A28()
{
  unint64_t result = qword_10040AA68;
  if (!qword_10040AA68)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035AA60,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AA68);
  }

  return result;
}

unint64_t sub_1001D2A6C()
{
  unint64_t result = qword_10040AA70;
  if (!qword_10040AA70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANCipherSuite,  &type metadata for NANCipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040AA70);
  }

  return result;
}

unint64_t sub_1001D2AB0()
{
  unint64_t result = qword_10040AA80;
  if (!qword_10040AA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035AA10, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AA80);
  }

  return result;
}

unint64_t sub_1001D2AF4()
{
  unint64_t result = qword_10040AA88;
  if (!qword_10040AA88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AA88);
  }

  return result;
}

unint64_t sub_1001D2B38()
{
  unint64_t result = qword_10040AAA0;
  if (!qword_10040AAA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.CipherSuite,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040AAA0);
  }

  return result;
}

unint64_t sub_1001D2B7C()
{
  unint64_t result = qword_10040AAB0;
  if (!qword_10040AAB0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A9C0,  &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AAB0);
  }

  return result;
}

unint64_t sub_1001D2BC0()
{
  unint64_t result = qword_10040AAC8;
  if (!qword_10040AAC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier,  &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040AAC8);
  }

  return result;
}

unint64_t sub_1001D2C04()
{
  unint64_t result = qword_10040AAD8;
  if (!qword_10040AAD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A970, &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AAD8);
  }

  return result;
}

unint64_t sub_1001D2C48()
{
  unint64_t result = qword_10040AAE8;
  if (!qword_10040AAE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A920, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AAE8);
  }

  return result;
}

unint64_t sub_1001D2C8C()
{
  unint64_t result = qword_10040AAF0;
  if (!qword_10040AAF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control,  &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040AAF0);
  }

  return result;
}

unint64_t sub_1001D2CD0()
{
  unint64_t result = qword_10040AB00;
  if (!qword_10040AB00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A8D0, &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AB00);
  }

  return result;
}

unint64_t sub_1001D2D14()
{
  unint64_t result = qword_10040AB10;
  if (!qword_10040AB10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A880, &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AB10);
  }

  return result;
}

unint64_t sub_1001D2D58()
{
  unint64_t result = qword_10040AB18;
  if (!qword_10040AB18)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion,  &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040AB18);
  }

  return result;
}

uint64_t sub_1001D2D9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D2DCC(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001D2DFC()
{
  unint64_t result = qword_10040AB38;
  if (!qword_10040AB38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method,  &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040AB38);
  }

  return result;
}

uint64_t sub_1001D2E40(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1001D2E7C()
{
  unint64_t result = qword_10040AB50;
  if (!qword_10040AB50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A830, &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AB50);
  }

  return result;
}

unint64_t sub_1001D2EC0()
{
  unint64_t result = qword_10040AB60;
  if (!qword_10040AB60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPeerServiceIdentifier,  &type metadata for NANPeerServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040AB60);
  }

  return result;
}

unint64_t sub_1001D2F04()
{
  unint64_t result = qword_10040AB80;
  if (!qword_10040AB80)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A7E0,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AB80);
  }

  return result;
}

uint64_t type metadata accessor for NANAttribute.CustomDeviceInformation(uint64_t a1)
{
  return sub_100020E48(a1, qword_10040B278, (uint64_t)&nominal type descriptor for NANAttribute.CustomDeviceInformation);
}

uint64_t sub_1001D2F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001D2FA0()
{
  unint64_t result = qword_10040AB98;
  if (!qword_10040AB98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A790, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040AB98);
  }

  return result;
}

unint64_t sub_1001D2FE4()
{
  unint64_t result = qword_10040ABA0;
  if (!qword_10040ABA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Version,  &type metadata for NANAttribute.CustomDeviceInformation.Version);
    atomic_store(result, (unint64_t *)&qword_10040ABA0);
  }

  return result;
}

unint64_t sub_1001D3028()
{
  unint64_t result = qword_10040ABA8;
  if (!qword_10040ABA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.PlatformType,  &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040ABA8);
  }

  return result;
}

unint64_t sub_1001D306C()
{
  unint64_t result = qword_10040ABB0;
  if (!qword_10040ABB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags,  &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040ABB0);
  }

  return result;
}

unint64_t sub_1001D30B0()
{
  unint64_t result = qword_10040ABC8;
  if (!qword_10040ABC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Version,  &type metadata for NANAttribute.CustomDeviceInformation.Version);
    atomic_store(result, (unint64_t *)&qword_10040ABC8);
  }

  return result;
}

unint64_t sub_1001D30F4()
{
  unint64_t result = qword_10040ABD0;
  if (!qword_10040ABD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.PlatformType,  &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040ABD0);
  }

  return result;
}

unint64_t sub_1001D3138()
{
  unint64_t result = qword_10040ABD8;
  if (!qword_10040ABD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags,  &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040ABD8);
  }

  return result;
}

unint64_t sub_1001D317C()
{
  unint64_t result = qword_10040ABE0;
  if (!qword_10040ABE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BinaryDecoder.DataCopy,  &type metadata for BinaryDecoder.DataCopy);
    atomic_store(result, (unint64_t *)&qword_10040ABE0);
  }

  return result;
}

unint64_t sub_1001D31C0()
{
  unint64_t result = qword_10040ABE8;
  if (!qword_10040ABE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ConnectionCapability,  &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040ABE8);
  }

  return result;
}

unint64_t sub_1001D3204()
{
  unint64_t result = qword_10040ABF0;
  if (!qword_10040ABF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.AttributeType,  &type metadata for NANAttribute.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040ABF0);
  }

  return result;
}

void *sub_1001D3248( void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  a2(a1[3], a1[4]);
  a3(v5, v6, v7);
  return a1;
}

void *sub_1001D32A0(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  a2(a1[2], a1[3]);
  a2(v4, v5);
  return a1;
}

unint64_t sub_1001D32E8()
{
  unint64_t result = qword_10040AC58;
  if (!qword_10040AC58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ConnectionCapability,  &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AC58);
  }

  return result;
}

uint64_t sub_1001D332C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = *(void *)(a1 + 72);
  sub_100020AFC(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRetain(v2);
  sub_1001CDEAC(v3, v4, v5);
  sub_1001062A0(v6, v7, v8);
  return a1;
}

unint64_t sub_1001D33B8()
{
  unint64_t result = qword_10040FD00;
  if (!qword_10040FD00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MasterIndication,  &type metadata for NANAttribute.MasterIndication);
    atomic_store(result, (unint64_t *)&qword_10040FD00);
  }

  return result;
}

unint64_t sub_1001D3400()
{
  unint64_t result = qword_10040AC60;
  if (!qword_10040AC60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Cluster,  &type metadata for NANAttribute.Cluster);
    atomic_store(result, (unint64_t *)&qword_10040AC60);
  }

  return result;
}

unint64_t sub_1001D3448()
{
  unint64_t result = qword_10040AC68;
  if (!qword_10040AC68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceIDList,  &type metadata for NANAttribute.ServiceIDList);
    atomic_store(result, (unint64_t *)&qword_10040AC68);
  }

  return result;
}

unint64_t sub_1001D3490()
{
  unint64_t result = qword_10040AC70;
  if (!qword_10040AC70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control.ControlType,  &type metadata for NANAttribute.ServiceDescriptor.Control.ControlType);
    atomic_store(result, (unint64_t *)&qword_10040AC70);
  }

  return result;
}

unint64_t sub_1001D34D8()
{
  unint64_t result = qword_10040AC78;
  if (!qword_10040AC78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control,  &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC78);
  }

  return result;
}

unint64_t sub_1001D3520()
{
  unint64_t result = qword_10040AC80;
  if (!qword_10040AC80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control,  &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC80);
  }

  return result;
}

unint64_t sub_1001D3568()
{
  unint64_t result = qword_10040AC88;
  if (!qword_10040AC88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control,  &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC88);
  }

  return result;
}

unint64_t sub_1001D35B0()
{
  unint64_t result = qword_10040AC90;
  if (!qword_10040AC90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control,  &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC90);
  }

  return result;
}

unint64_t sub_1001D35F8()
{
  unint64_t result = qword_10040AC98;
  if (!qword_10040AC98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType,  &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType);
    atomic_store(result, (unint64_t *)&qword_10040AC98);
  }

  return result;
}

unint64_t sub_1001D3640()
{
  unint64_t result = qword_10040ACA0;
  if (!qword_10040ACA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl,  &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040ACA0);
  }

  return result;
}

unint64_t sub_1001D3688()
{
  unint64_t result = qword_10040ACA8;
  if (!qword_10040ACA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl,  &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040ACA8);
  }

  return result;
}

unint64_t sub_1001D36D0()
{
  unint64_t result = qword_10040ACB0;
  if (!qword_10040ACB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl,  &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040ACB0);
  }

  return result;
}

unint64_t sub_1001D3718()
{
  unint64_t result = qword_10040ACB8;
  if (!qword_10040ACB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl,  &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040ACB8);
  }

  return result;
}

unint64_t sub_1001D3760()
{
  unint64_t result = qword_10040ACC0;
  if (!qword_10040ACC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceFilterControl,  &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040ACC0);
  }

  return result;
}

unint64_t sub_1001D37A8()
{
  unint64_t result = qword_10040ACC8;
  if (!qword_10040ACC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor,  &type metadata for NANAttribute.ServiceDescriptor);
    atomic_store(result, (unint64_t *)&qword_10040ACC8);
  }

  return result;
}

unint64_t sub_1001D37F0()
{
  unint64_t result = qword_10040ACD0;
  if (!qword_10040ACD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control,  &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040ACD0);
  }

  return result;
}

unint64_t sub_1001D3838()
{
  unint64_t result = qword_10040ACD8;
  if (!qword_10040ACD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control,  &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040ACD8);
  }

  return result;
}

unint64_t sub_1001D3880()
{
  unint64_t result = qword_10040ACE0;
  if (!qword_10040ACE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control,  &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040ACE0);
  }

  return result;
}

unint64_t sub_1001D38C8()
{
  unint64_t result = qword_10040ACE8;
  if (!qword_10040ACE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control,  &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040ACE8);
  }

  return result;
}

unint64_t sub_1001D3910()
{
  unint64_t result = qword_10040ACF0;
  if (!qword_10040ACF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.RangeLimit,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit);
    atomic_store(result, (unint64_t *)&qword_10040ACF0);
  }

  return result;
}

unint64_t sub_1001D3958()
{
  unint64_t result = qword_10040ACF8;
  if (!qword_10040ACF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension,  &type metadata for NANAttribute.ServiceDescriptorExtension);
    atomic_store(result, (unint64_t *)&qword_10040ACF8);
  }

  return result;
}

unint64_t sub_1001D39A0()
{
  unint64_t result = qword_10040AD00;
  if (!qword_10040AD00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ConnectionCapability,  &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AD00);
  }

  return result;
}

unint64_t sub_1001D39E8()
{
  unint64_t result = qword_10040AD08;
  if (!qword_10040AD08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ConnectionCapability,  &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AD08);
  }

  return result;
}

unint64_t sub_1001D3A30()
{
  unint64_t result = qword_10040AD10;
  if (!qword_10040AD10)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ConnectionCapability,  &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AD10);
  }

  return result;
}

unint64_t sub_1001D3A78()
{
  unint64_t result = qword_10040AD18;
  if (!qword_10040AD18)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ConnectionCapability,  &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AD18);
  }

  return result;
}

unint64_t sub_1001D3AC0()
{
  unint64_t result = qword_10040AD20;
  if (!qword_10040AD20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AD20);
  }

  return result;
}

unint64_t sub_1001D3B08()
{
  unint64_t result = qword_10040AD28;
  if (!qword_10040AD28)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.WLANInfrastructure,  &type metadata for NANAttribute.WLANInfrastructure);
    atomic_store(result, (unint64_t *)&qword_10040AD28);
  }

  return result;
}

unint64_t sub_1001D3B50()
{
  unint64_t result = qword_10040AD30;
  if (!qword_10040AD30)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole,  &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AD30);
  }

  return result;
}

unint64_t sub_1001D3B98()
{
  unint64_t result = qword_10040AD38;
  if (!qword_10040AD38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole,  &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AD38);
  }

  return result;
}

unint64_t sub_1001D3BE0()
{
  unint64_t result = qword_10040AD40;
  if (!qword_10040AD40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole,  &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AD40);
  }

  return result;
}

unint64_t sub_1001D3C28()
{
  unint64_t result = qword_10040AD48;
  if (!qword_10040AD48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole,  &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AD48);
  }

  return result;
}

unint64_t sub_1001D3C70()
{
  unint64_t result = qword_10040AD50;
  if (!qword_10040AD50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.P2POperation,  &type metadata for NANAttribute.P2POperation);
    atomic_store(result, (unint64_t *)&qword_10040AD50);
  }

  return result;
}

unint64_t sub_1001D3CB8()
{
  unint64_t result = qword_10040AD58;
  if (!qword_10040AD58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.IBSS,  &type metadata for NANAttribute.IBSS);
    atomic_store(result, (unint64_t *)&qword_10040AD58);
  }

  return result;
}

unint64_t sub_1001D3D00()
{
  unint64_t result = qword_10040AD60;
  if (!qword_10040AD60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Mesh,  &type metadata for NANAttribute.Mesh);
    atomic_store(result, (unint64_t *)&qword_10040AD60);
  }

  return result;
}

unint64_t sub_1001D3D48()
{
  unint64_t result = qword_10040AD68;
  if (!qword_10040AD68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.FurtherServiceDiscovery,  &type metadata for NANAttribute.FurtherServiceDiscovery);
    atomic_store(result, (unint64_t *)&qword_10040AD68);
  }

  return result;
}

unint64_t sub_1001D3D90()
{
  unint64_t result = qword_10040AD70;
  if (!qword_10040AD70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.FurtherAvailabilityMap,  &type metadata for NANAttribute.FurtherAvailabilityMap);
    atomic_store(result, (unint64_t *)&qword_10040AD70);
  }

  return result;
}

unint64_t sub_1001D3DD8()
{
  unint64_t result = qword_10040AD78;
  if (!qword_10040AD78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Ranging,  &type metadata for NANAttribute.Ranging);
    atomic_store(result, (unint64_t *)&qword_10040AD78);
  }

  return result;
}

unint64_t sub_1001D3E20()
{
  unint64_t result = qword_10040AD80;
  if (!qword_10040AD80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ClusterDiscovery,  &type metadata for NANAttribute.ClusterDiscovery);
    atomic_store(result, (unint64_t *)&qword_10040AD80);
  }

  return result;
}

unint64_t sub_1001D3E68()
{
  unint64_t result = qword_10040AD88;
  if (!qword_10040AD88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation);
    atomic_store(result, (unint64_t *)&qword_10040AD88);
  }

  return result;
}

unint64_t sub_1001D3EB0()
{
  unint64_t result = qword_10040AD90;
  if (!qword_10040AD90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode,  &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040AD90);
  }

  return result;
}

unint64_t sub_1001D3EF8()
{
  unint64_t result = qword_10040AD98;
  if (!qword_10040AD98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode,  &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040AD98);
  }

  return result;
}

unint64_t sub_1001D3F40()
{
  unint64_t result = qword_10040ADA0;
  if (!qword_10040ADA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode,  &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040ADA0);
  }

  return result;
}

unint64_t sub_1001D3F88()
{
  unint64_t result = qword_10040ADA8;
  if (!qword_10040ADA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode,  &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040ADA8);
  }

  return result;
}

unint64_t sub_1001D3FD0()
{
  unint64_t result = qword_10040ADB0;
  if (!qword_10040ADB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040ADB0);
  }

  return result;
}

unint64_t sub_1001D4018()
{
  unint64_t result = qword_10040ADB8;
  if (!qword_10040ADB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040ADB8);
  }

  return result;
}

unint64_t sub_1001D4060()
{
  unint64_t result = qword_10040ADC0;
  if (!qword_10040ADC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040ADC0);
  }

  return result;
}

unint64_t sub_1001D40A8()
{
  unint64_t result = qword_10040ADC8;
  if (!qword_10040ADC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040ADC8);
  }

  return result;
}

unint64_t sub_1001D40F0()
{
  unint64_t result = qword_10040ADD0;
  if (!qword_10040ADD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities,  &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040ADD0);
  }

  return result;
}

unint64_t sub_1001D4138()
{
  unint64_t result = qword_10040ADD8;
  if (!qword_10040ADD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities,  &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040ADD8);
  }

  return result;
}

unint64_t sub_1001D4180()
{
  unint64_t result = qword_10040ADE0;
  if (!qword_10040ADE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities,  &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040ADE0);
  }

  return result;
}

unint64_t sub_1001D41C8()
{
  unint64_t result = qword_10040ADE8;
  if (!qword_10040ADE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities,  &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040ADE8);
  }

  return result;
}

unint64_t sub_1001D4210()
{
  unint64_t result = qword_10040ADF0;
  if (!qword_10040ADF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability,  &type metadata for NANAttribute.DeviceCapability);
    atomic_store(result, (unint64_t *)&qword_10040ADF0);
  }

  return result;
}

unint64_t sub_1001D4258()
{
  unint64_t result = qword_10040ADF8;
  if (!qword_10040ADF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz,  &type metadata for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz);
    atomic_store(result, (unint64_t *)&qword_10040ADF8);
  }

  return result;
}

unint64_t sub_1001D42A0()
{
  unint64_t result = qword_10040AE00;
  if (!qword_10040AE00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension,  &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040AE00);
  }

  return result;
}

unint64_t sub_1001D42E4(uint64_t a1)
{
  unint64_t result = sub_1001D4308();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_1001D4308()
{
  unint64_t result = qword_10040AE08;
  if (!qword_10040AE08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension,  &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040AE08);
  }

  return result;
}

unint64_t sub_1001D4350()
{
  unint64_t result = qword_10040AE10;
  if (!qword_10040AE10)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension,  &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040AE10);
  }

  return result;
}

unint64_t sub_1001D4398()
{
  unint64_t result = qword_10040AE18;
  if (!qword_10040AE18)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension,  &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040AE18);
  }

  return result;
}

unint64_t sub_1001D43E0()
{
  unint64_t result = qword_10040AE20;
  if (!qword_10040AE20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension,  &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040AE20);
  }

  return result;
}

unint64_t sub_1001D4428()
{
  unint64_t result = qword_10040AE28;
  if (!qword_10040AE28)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.AttributeType,  &type metadata for NANAttribute.Datapath.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040AE28);
  }

  return result;
}

unint64_t sub_1001D4470()
{
  unint64_t result = qword_10040AE30;
  if (!qword_10040AE30)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Status,  &type metadata for NANAttribute.Datapath.Status);
    atomic_store(result, (unint64_t *)&qword_10040AE30);
  }

  return result;
}

unint64_t sub_1001D44B8()
{
  unint64_t result = qword_10040AE38;
  if (!qword_10040AE38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Control,  &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE38);
  }

  return result;
}

unint64_t sub_1001D4500()
{
  unint64_t result = qword_10040AE40;
  if (!qword_10040AE40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Control,  &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE40);
  }

  return result;
}

unint64_t sub_1001D4548()
{
  unint64_t result = qword_10040AE48;
  if (!qword_10040AE48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Control,  &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE48);
  }

  return result;
}

unint64_t sub_1001D4590()
{
  unint64_t result = qword_10040AE50;
  if (!qword_10040AE50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Control,  &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE50);
  }

  return result;
}

unint64_t sub_1001D45D8()
{
  unint64_t result = qword_10040AE58;
  if (!qword_10040AE58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath,  &type metadata for NANAttribute.Datapath);
    atomic_store(result, (unint64_t *)&qword_10040AE58);
  }

  return result;
}

unint64_t sub_1001D4620()
{
  unint64_t result = qword_10040AE60;
  if (!qword_10040AE60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.Control,  &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE60);
  }

  return result;
}

unint64_t sub_1001D4668()
{
  unint64_t result = qword_10040AE68;
  if (!qword_10040AE68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.Control,  &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE68);
  }

  return result;
}

unint64_t sub_1001D46B0()
{
  unint64_t result = qword_10040AE70;
  if (!qword_10040AE70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.Control,  &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE70);
  }

  return result;
}

unint64_t sub_1001D46F8()
{
  unint64_t result = qword_10040AE78;
  if (!qword_10040AE78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.Control,  &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE78);
  }

  return result;
}

unint64_t sub_1001D4740()
{
  unint64_t result = qword_10040AE80;
  if (!qword_10040AE80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.ServiceInfoType,  &type metadata for NANAttribute.DatapathExtension.ServiceInfoType);
    atomic_store(result, (unint64_t *)&qword_10040AE80);
  }

  return result;
}

unint64_t sub_1001D4788()
{
  unint64_t result = qword_10040AE88;
  if (!qword_10040AE88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension,  &type metadata for NANAttribute.DatapathExtension);
    atomic_store(result, (unint64_t *)&qword_10040AE88);
  }

  return result;
}

unint64_t sub_1001D47D0()
{
  unint64_t result = qword_10040AE90;
  if (!qword_10040AE90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Availability.Control,  &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE90);
  }

  return result;
}

unint64_t sub_1001D4818()
{
  unint64_t result = qword_10040AE98;
  if (!qword_10040AE98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Availability.Control,  &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE98);
  }

  return result;
}

unint64_t sub_1001D4860()
{
  unint64_t result = qword_10040AEA0;
  if (!qword_10040AEA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Availability.Control,  &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEA0);
  }

  return result;
}

unint64_t sub_1001D48A8()
{
  unint64_t result = qword_10040AEA8;
  if (!qword_10040AEA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Availability.Control,  &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEA8);
  }

  return result;
}

unint64_t sub_1001D48F0()
{
  unint64_t result = qword_10040AEB0;
  if (!qword_10040AEB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Availability,  &type metadata for NANAttribute.Availability);
    atomic_store(result, (unint64_t *)&qword_10040AEB0);
  }

  return result;
}

unint64_t sub_1001D4938()
{
  unint64_t result = qword_10040AEB8;
  if (!qword_10040AEB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DataCluster.Control,  &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEB8);
  }

  return result;
}

unint64_t sub_1001D4980()
{
  unint64_t result = qword_10040AEC0;
  if (!qword_10040AEC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DataCluster.Control,  &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEC0);
  }

  return result;
}

unint64_t sub_1001D49C8()
{
  unint64_t result = qword_10040AEC8;
  if (!qword_10040AEC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DataCluster.Control,  &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEC8);
  }

  return result;
}

unint64_t sub_1001D4A10()
{
  unint64_t result = qword_10040AED0;
  if (!qword_10040AED0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DataCluster.Control,  &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AED0);
  }

  return result;
}

unint64_t sub_1001D4A58()
{
  unint64_t result = qword_10040AED8;
  if (!qword_10040AED8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DataCluster,  &type metadata for NANAttribute.DataCluster);
    atomic_store(result, (unint64_t *)&qword_10040AED8);
  }

  return result;
}

unint64_t sub_1001D4AA0()
{
  unint64_t result = qword_10040AEE0;
  if (!qword_10040AEE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Control.SetupReason,  &type metadata for NANAttribute.DeviceLink.Control.SetupReason);
    atomic_store(result, (unint64_t *)&qword_10040AEE0);
  }

  return result;
}

unint64_t sub_1001D4AE8()
{
  unint64_t result = qword_10040AEE8;
  if (!qword_10040AEE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Control,  &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEE8);
  }

  return result;
}

unint64_t sub_1001D4B30()
{
  unint64_t result = qword_10040AEF0;
  if (!qword_10040AEF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Control,  &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEF0);
  }

  return result;
}

unint64_t sub_1001D4B78()
{
  unint64_t result = qword_10040AEF8;
  if (!qword_10040AEF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Control,  &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040AEF8);
  }

  return result;
}

unint64_t sub_1001D4BC0()
{
  unint64_t result = qword_10040AF00;
  if (!qword_10040AF00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Control,  &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040AF00);
  }

  return result;
}

unint64_t sub_1001D4C08()
{
  unint64_t result = qword_10040AF08;
  if (!qword_10040AF08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.AttributeType,  &type metadata for NANAttribute.DeviceLink.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040AF08);
  }

  return result;
}

unint64_t sub_1001D4C50()
{
  unint64_t result = qword_10040AF10;
  if (!qword_10040AF10)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Status,  &type metadata for NANAttribute.DeviceLink.Status);
    atomic_store(result, (unint64_t *)&qword_10040AF10);
  }

  return result;
}

unint64_t sub_1001D4C98()
{
  unint64_t result = qword_10040AF18;
  if (!qword_10040AF18)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink,  &type metadata for NANAttribute.DeviceLink);
    atomic_store(result, (unint64_t *)&qword_10040AF18);
  }

  return result;
}

unint64_t sub_1001D4CE0()
{
  unint64_t result = qword_10040AF20;
  if (!qword_10040AF20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLinkQoS,  &type metadata for NANAttribute.DeviceLinkQoS);
    atomic_store(result, (unint64_t *)&qword_10040AF20);
  }

  return result;
}

unint64_t sub_1001D4D28()
{
  unint64_t result = qword_10040AF28;
  if (!qword_10040AF28)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040AF28);
  }

  return result;
}

unint64_t sub_1001D4D70()
{
  unint64_t result = qword_10040AF30;
  if (!qword_10040AF30)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040AF30);
  }

  return result;
}

unint64_t sub_1001D4DB8()
{
  unint64_t result = qword_10040AF38;
  if (!qword_10040AF38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040AF38);
  }

  return result;
}

unint64_t sub_1001D4E00()
{
  unint64_t result = qword_10040AF40;
  if (!qword_10040AF40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040AF40);
  }

  return result;
}

unint64_t sub_1001D4E48()
{
  unint64_t result = qword_10040AF48;
  if (!qword_10040AF48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType);
    atomic_store(result, (unint64_t *)&qword_10040AF48);
  }

  return result;
}

unint64_t sub_1001D4E90()
{
  unint64_t result = qword_10040AF50;
  if (!qword_10040AF50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AF50);
  }

  return result;
}

unint64_t sub_1001D4ED8()
{
  unint64_t result = qword_10040AF58;
  if (!qword_10040AF58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AF58);
  }

  return result;
}

unint64_t sub_1001D4F20()
{
  unint64_t result = qword_10040AF60;
  if (!qword_10040AF60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AF60);
  }

  return result;
}

unint64_t sub_1001D4F68()
{
  unint64_t result = qword_10040AF68;
  if (!qword_10040AF68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AF68);
  }

  return result;
}

unint64_t sub_1001D4FB0()
{
  unint64_t result = qword_10040AF70;
  if (!qword_10040AF70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule,  &type metadata for NANAttribute.UnalignedSchedule);
    atomic_store(result, (unint64_t *)&qword_10040AF70);
  }

  return result;
}

unint64_t sub_1001D4FF8()
{
  unint64_t result = qword_10040AF78;
  if (!qword_10040AF78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation,  &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AF78);
  }

  return result;
}

unint64_t sub_1001D5040()
{
  unint64_t result = qword_10040AF80;
  if (!qword_10040AF80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation,  &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AF80);
  }

  return result;
}

unint64_t sub_1001D5088()
{
  unint64_t result = qword_10040AF88;
  if (!qword_10040AF88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation,  &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AF88);
  }

  return result;
}

unint64_t sub_1001D50D0()
{
  unint64_t result = qword_10040AF90;
  if (!qword_10040AF90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation,  &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AF90);
  }

  return result;
}

unint64_t sub_1001D5118()
{
  unint64_t result = qword_10040AF98;
  if (!qword_10040AF98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingInformation,  &type metadata for NANAttribute.RangingInformation);
    atomic_store(result, (unint64_t *)&qword_10040AF98);
  }

  return result;
}

unint64_t sub_1001D5160()
{
  unint64_t result = qword_10040AFA0;
  if (!qword_10040AFA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.AttributeType,  &type metadata for NANAttribute.RangingSetup.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040AFA0);
  }

  return result;
}

unint64_t sub_1001D51A8()
{
  unint64_t result = qword_10040AFA8;
  if (!qword_10040AFA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Status,  &type metadata for NANAttribute.RangingSetup.Status);
    atomic_store(result, (unint64_t *)&qword_10040AFA8);
  }

  return result;
}

unint64_t sub_1001D51F0()
{
  unint64_t result = qword_10040AFB0;
  if (!qword_10040AFB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Control,  &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AFB0);
  }

  return result;
}

unint64_t sub_1001D5238()
{
  unint64_t result = qword_10040AFB8;
  if (!qword_10040AFB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Control,  &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AFB8);
  }

  return result;
}

unint64_t sub_1001D5280()
{
  unint64_t result = qword_10040AFC0;
  if (!qword_10040AFC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Control,  &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AFC0);
  }

  return result;
}

unint64_t sub_1001D52C8()
{
  unint64_t result = qword_10040AFC8;
  if (!qword_10040AFC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Control,  &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AFC8);
  }

  return result;
}

unint64_t sub_1001D5310()
{
  unint64_t result = qword_10040AFD0;
  if (!qword_10040AFD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters,  &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AFD0);
  }

  return result;
}

unint64_t sub_1001D5358()
{
  unint64_t result = qword_10040AFD8;
  if (!qword_10040AFD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters,  &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AFD8);
  }

  return result;
}

unint64_t sub_1001D53A0()
{
  unint64_t result = qword_10040AFE0;
  if (!qword_10040AFE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters,  &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AFE0);
  }

  return result;
}

unint64_t sub_1001D53E8()
{
  unint64_t result = qword_10040AFE8;
  if (!qword_10040AFE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters,  &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AFE8);
  }

  return result;
}

unint64_t sub_1001D5430()
{
  unint64_t result = qword_10040AFF0;
  if (!qword_10040AFF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup,  &type metadata for NANAttribute.RangingSetup);
    atomic_store(result, (unint64_t *)&qword_10040AFF0);
  }

  return result;
}

unint64_t sub_1001D5478()
{
  unint64_t result = qword_10040AFF8;
  if (!qword_10040AFF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ElementContainer,  &type metadata for NANAttribute.ElementContainer);
    atomic_store(result, (unint64_t *)&qword_10040AFF8);
  }

  return result;
}

unint64_t sub_1001D54C0()
{
  unint64_t result = qword_10040B000;
  if (!qword_10040B000)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ExtendedWLANInfrastructure,  &type metadata for NANAttribute.ExtendedWLANInfrastructure);
    atomic_store(result, (unint64_t *)&qword_10040B000);
  }

  return result;
}

unint64_t sub_1001D5508()
{
  unint64_t result = qword_10040B008;
  if (!qword_10040B008)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ExtendedP2POperation,  &type metadata for NANAttribute.ExtendedP2POperation);
    atomic_store(result, (unint64_t *)&qword_10040B008);
  }

  return result;
}

unint64_t sub_1001D5550()
{
  unint64_t result = qword_10040B010;
  if (!qword_10040B010)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ExtendedIBSS,  &type metadata for NANAttribute.ExtendedIBSS);
    atomic_store(result, (unint64_t *)&qword_10040B010);
  }

  return result;
}

unint64_t sub_1001D5598()
{
  unint64_t result = qword_10040B018;
  if (!qword_10040B018)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ExtendedMesh,  &type metadata for NANAttribute.ExtendedMesh);
    atomic_store(result, (unint64_t *)&qword_10040B018);
  }

  return result;
}

unint64_t sub_1001D55E0()
{
  unint64_t result = qword_10040B020;
  if (!qword_10040B020)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.FineTimingMeasurementRangeReport.Entry,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry);
    atomic_store(result, (unint64_t *)&qword_10040B020);
  }

  return result;
}

unint64_t sub_1001D5628()
{
  unint64_t result = qword_10040B028;
  if (!qword_10040B028)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.FineTimingMeasurementRangeReport,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport);
    atomic_store(result, (unint64_t *)&qword_10040B028);
  }

  return result;
}

unint64_t sub_1001D5670()
{
  unint64_t result = qword_10040B030;
  if (!qword_10040B030)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters);
    atomic_store(result, (unint64_t *)&qword_10040B030);
  }

  return result;
}

unint64_t sub_1001D56B8()
{
  unint64_t result = qword_10040B038;
  if (!qword_10040B038)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport);
    atomic_store(result, (unint64_t *)&qword_10040B038);
  }

  return result;
}

unint64_t sub_1001D5700()
{
  unint64_t result = qword_10040B040;
  if (!qword_10040B040)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol);
    atomic_store(result, (unint64_t *)&qword_10040B040);
  }

  return result;
}

unint64_t sub_1001D5748()
{
  unint64_t result = qword_10040B048;
  if (!qword_10040B048)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B048);
  }

  return result;
}

unint64_t sub_1001D5790()
{
  unint64_t result = qword_10040B050;
  if (!qword_10040B050)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B050);
  }

  return result;
}

unint64_t sub_1001D57D8()
{
  unint64_t result = qword_10040B058;
  if (!qword_10040B058)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B058);
  }

  return result;
}

unint64_t sub_1001D5820()
{
  unint64_t result = qword_10040B060;
  if (!qword_10040B060)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B060);
  }

  return result;
}

unint64_t sub_1001D5868()
{
  unint64_t result = qword_10040B068;
  if (!qword_10040B068)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.CipherSuite,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040B068);
  }

  return result;
}

unint64_t sub_1001D58B0()
{
  unint64_t result = qword_10040B070;
  if (!qword_10040B070)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation,  &type metadata for NANAttribute.CipherSuiteInformation);
    atomic_store(result, (unint64_t *)&qword_10040B070);
  }

  return result;
}

unint64_t sub_1001D58F8()
{
  unint64_t result = qword_10040B078;
  if (!qword_10040B078)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType,  &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType);
    atomic_store(result, (unint64_t *)&qword_10040B078);
  }

  return result;
}

unint64_t sub_1001D5940()
{
  unint64_t result = qword_10040B080;
  if (!qword_10040B080)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier,  &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040B080);
  }

  return result;
}

unint64_t sub_1001D5988()
{
  unint64_t result = qword_10040B088;
  if (!qword_10040B088)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.SecurityContextInformation,  &type metadata for NANAttribute.SecurityContextInformation);
    atomic_store(result, (unint64_t *)&qword_10040B088);
  }

  return result;
}

unint64_t sub_1001D59D0()
{
  unint64_t result = qword_10040B090;
  if (!qword_10040B090)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.SharedKeyDescriptor,  &type metadata for NANAttribute.SharedKeyDescriptor);
    atomic_store(result, (unint64_t *)&qword_10040B090);
  }

  return result;
}

unint64_t sub_1001D5A18()
{
  unint64_t result = qword_10040B098;
  if (!qword_10040B098)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control,  &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040B098);
  }

  return result;
}

unint64_t sub_1001D5A60()
{
  unint64_t result = qword_10040B0A0;
  if (!qword_10040B0A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control,  &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040B0A0);
  }

  return result;
}

unint64_t sub_1001D5AA8()
{
  unint64_t result = qword_10040B0A8;
  if (!qword_10040B0A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control,  &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040B0A8);
  }

  return result;
}

unint64_t sub_1001D5AF0()
{
  unint64_t result = qword_10040B0B0;
  if (!qword_10040B0B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control,  &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040B0B0);
  }

  return result;
}

unint64_t sub_1001D5B38()
{
  unint64_t result = qword_10040B0B8;
  if (!qword_10040B0B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MulticastScheduleChange,  &type metadata for NANAttribute.MulticastScheduleChange);
    atomic_store(result, (unint64_t *)&qword_10040B0B8);
  }

  return result;
}

unint64_t sub_1001D5B80()
{
  unint64_t result = qword_10040B0C0;
  if (!qword_10040B0C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PublicAvailability,  &type metadata for NANAttribute.PublicAvailability);
    atomic_store(result, (unint64_t *)&qword_10040B0C0);
  }

  return result;
}

unint64_t sub_1001D5BC8()
{
  unint64_t result = qword_10040B0C8;
  if (!qword_10040B0C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion,  &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040B0C8);
  }

  return result;
}

unint64_t sub_1001D5C10()
{
  unint64_t result = qword_10040B0D0;
  if (!qword_10040B0D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingIdentityResolution,  &type metadata for NANAttribute.PairingIdentityResolution);
    atomic_store(result, (unint64_t *)&qword_10040B0D0);
  }

  return result;
}

unint64_t sub_1001D5C58()
{
  unint64_t result = qword_10040B0D8;
  if (!qword_10040B0D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.PairingType,  &type metadata for NANAttribute.PairingBootstrapping.PairingType);
    atomic_store(result, (unint64_t *)&qword_10040B0D8);
  }

  return result;
}

unint64_t sub_1001D5CA0()
{
  unint64_t result = qword_10040B0E0;
  if (!qword_10040B0E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Status,  &type metadata for NANAttribute.PairingBootstrapping.Status);
    atomic_store(result, (unint64_t *)&qword_10040B0E0);
  }

  return result;
}

unint64_t sub_1001D5CE8()
{
  unint64_t result = qword_10040B0E8;
  if (!qword_10040B0E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method,  &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040B0E8);
  }

  return result;
}

unint64_t sub_1001D5D30()
{
  unint64_t result = qword_10040B0F0;
  if (!qword_10040B0F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method,  &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040B0F0);
  }

  return result;
}

unint64_t sub_1001D5D78()
{
  unint64_t result = qword_10040B0F8;
  if (!qword_10040B0F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method,  &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040B0F8);
  }

  return result;
}

unint64_t sub_1001D5DC0()
{
  unint64_t result = qword_10040B100;
  if (!qword_10040B100)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method,  &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040B100);
  }

  return result;
}

unint64_t sub_1001D5E08()
{
  unint64_t result = qword_10040B108;
  if (!qword_10040B108)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Comeback,  &type metadata for NANAttribute.PairingBootstrapping.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040B108);
  }

  return result;
}

unint64_t sub_1001D5E50()
{
  unint64_t result = qword_10040B110;
  if (!qword_10040B110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping,  &type metadata for NANAttribute.PairingBootstrapping);
    atomic_store(result, (unint64_t *)&qword_10040B110);
  }

  return result;
}

unint64_t sub_1001D5E98()
{
  unint64_t result = qword_10040B118;
  if (!qword_10040B118)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.VendorSpecific,  &type metadata for NANAttribute.VendorSpecific);
    atomic_store(result, (unint64_t *)&qword_10040B118);
  }

  return result;
}

uint64_t sub_1001D5EDC()
{
  return sub_10000AF70( &qword_10040B120,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes,  (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

unint64_t sub_1001D5F0C()
{
  unint64_t result = qword_10040B128;
  if (!qword_10040B128)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.PlatformType,  &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040B128);
  }

  return result;
}

unint64_t sub_1001D5F54()
{
  unint64_t result = qword_10040B130;
  if (!qword_10040B130)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags,  &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040B130);
  }

  return result;
}

unint64_t sub_1001D5F9C()
{
  unint64_t result = qword_10040B138;
  if (!qword_10040B138)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags,  &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040B138);
  }

  return result;
}

unint64_t sub_1001D5FE4()
{
  unint64_t result = qword_10040B140;
  if (!qword_10040B140)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags,  &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040B140);
  }

  return result;
}

unint64_t sub_1001D602C()
{
  unint64_t result = qword_10040B148;
  if (!qword_10040B148)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags,  &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040B148);
  }

  return result;
}

unint64_t sub_1001D6074()
{
  unint64_t result = qword_10040B150;
  if (!qword_10040B150)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Version,  &type metadata for NANAttribute.CustomDeviceInformation.Version);
    atomic_store(result, (unint64_t *)&qword_10040B150);
  }

  return result;
}

uint64_t sub_1001D60B8()
{
  return sub_10000AF70( &qword_10040B158,  type metadata accessor for NANAttribute.CustomDeviceInformation,  (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation);
}

unint64_t sub_1001D60E8()
{
  unint64_t result = qword_10040B160;
  if (!qword_10040B160)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.AttributeType,  &type metadata for NANAttribute.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B160);
  }

  return result;
}

uint64_t sub_1001D612C()
{
  return sub_10000AF70( &qword_10040B168,  type metadata accessor for NANAttribute,  (uint64_t)&protocol conformance descriptor for NANAttribute);
}

char *initializeBufferWithCopyOfBuffer for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = (char *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 2u:
        uint64_t v8 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v11 = *(void *)a2;
        unint64_t v12 = *((void *)a2 + 1);
        sub_100020AFC(*(void *)a2, v12);
        *(void *)a1  = v11;
        *((void *)a1 + 1)  = v12;
        a1[16]  = a2[16];
        *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
        *((_WORD *)a1 + 10)  = *((_WORD *)a2 + 10);
        a1[22]  = a2[22];
        uint64_t v13 = *((void *)a2 + 3);
        *((void *)a1 + 3)  = v13;
        unsigned __int8 v14 = a2[50];
        int v15 = *((unsigned __int16 *)a2 + 24);
        swift_bridgeObjectRetain(v13);
        if (v14 == 255)
        {
          *((_OWORD *)a1 + 2)  = *((_OWORD *)a2 + 2);
          *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
        }

        else
        {
          uint64_t v76 = v15 & 0xFF00FFFF | (v14 << 16);
          uint64_t v77 = *((void *)a2 + 4);
          unint64_t v78 = *((void *)a2 + 5);
          sub_1001CDEC4(v77, v78, v76, BYTE2(v76) & 1);
          *((void *)a1 + 4)  = v77;
          *((void *)a1 + 5)  = v78;
          *((_WORD *)a1 + 24)  = v76;
          a1[50]  = BYTE2(v76) & 1;
        }

        uint64_t v79 = a2[56];
        if (v79 == 4)
        {
          *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
          *((void *)a1 + 9)  = *((void *)a2 + 9);
        }

        else
        {
          a1[56]  = v79;
          uint64_t v88 = *((void *)a2 + 8);
          unint64_t v87 = *((void *)a2 + 9);
          sub_100020AFC(v88, v87);
          *((void *)a1 + 8)  = v88;
          *((void *)a1 + 9)  = v87;
        }

        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 5u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        a1[16]  = a2[16];
        *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
        uint64_t v16 = *((void *)a2 + 3);
        unint64_t v17 = *((void *)a2 + 4);
        sub_100020AFC(v16, v17);
        *((void *)a1 + 3)  = v16;
        *((void *)a1 + 4)  = v17;
        a1[40]  = a2[40];
        swift_storeEnumTagMultiPayload(a1, a3, 5LL);
        break;
      case 6u:
        *a1  = *a2;
        *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
        *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
        a1[8]  = a2[8];
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v19 = *((void *)a2 + 2);
        unint64_t v18 = *((void *)a2 + 3);
        sub_100020AFC(v19, v18);
        *((void *)a1 + 2)  = v19;
        *((void *)a1 + 3)  = v18;
        swift_storeEnumTagMultiPayload(a1, a3, 6LL);
        break;
      case 7u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        a1[16]  = a2[16];
        *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
        uint64_t v21 = *((void *)a2 + 3);
        unint64_t v20 = *((void *)a2 + 4);
        sub_100020AFC(v21, v20);
        *((void *)a1 + 3)  = v21;
        *((void *)a1 + 4)  = v20;
        swift_storeEnumTagMultiPayload(a1, a3, 7LL);
        break;
      case 8u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        a1[8]  = a2[8];
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v22 = *((void *)a2 + 2);
        unint64_t v23 = *((void *)a2 + 3);
        sub_100020AFC(v22, v23);
        *((void *)a1 + 2)  = v22;
        *((void *)a1 + 3)  = v23;
        uint64_t v25 = *((void *)a2 + 4);
        unint64_t v24 = *((void *)a2 + 5);
        sub_100020AFC(v25, v24);
        *((void *)a1 + 4)  = v25;
        *((void *)a1 + 5)  = v24;
        swift_storeEnumTagMultiPayload(a1, a3, 8LL);
        break;
      case 9u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        uint64_t v27 = *((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        sub_100020AFC(v27, v26);
        *((void *)a1 + 1)  = v27;
        *((void *)a1 + 2)  = v26;
        swift_storeEnumTagMultiPayload(a1, a3, 9LL);
        break;
      case 0xAu:
        *a1  = *a2;
        uint64_t v28 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v28;
        swift_bridgeObjectRetain(v28);
        swift_storeEnumTagMultiPayload(a1, a3, 10LL);
        break;
      case 0xCu:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        uint64_t v30 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        sub_100020AFC(v30, v29);
        *((void *)a1 + 1)  = v30;
        *((void *)a1 + 2)  = v29;
        swift_storeEnumTagMultiPayload(a1, a3, 12LL);
        break;
      case 0xEu:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
        a1[8]  = a2[8];
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v31 = a2[16];
        if (v31 == 4)
        {
          *((_OWORD *)a1 + 1)  = *((_OWORD *)a2 + 1);
          *((void *)a1 + 4)  = *((void *)a2 + 4);
        }

        else
        {
          a1[16]  = v31;
          v81  = *((void *)a2 + 3);
          unint64_t v80 = *((void *)a2 + 4);
          sub_100020AFC(v81, v80);
          *((void *)a1 + 3)  = v81;
          *((void *)a1 + 4)  = v80;
        }

        swift_storeEnumTagMultiPayload(a1, a3, 14LL);
        break;
      case 0x10u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
        uint64_t v32 = a2[24];
        if (v32 == 4)
        {
          *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
          *((void *)a1 + 5)  = *((void *)a2 + 5);
        }

        else
        {
          a1[24]  = v32;
          uint64_t v83 = *((void *)a2 + 4);
          unint64_t v82 = *((void *)a2 + 5);
          sub_100020AFC(v83, v82);
          *((void *)a1 + 4)  = v83;
          *((void *)a1 + 5)  = v82;
        }

        swift_storeEnumTagMultiPayload(a1, a3, 16LL);
        break;
      case 0x11u:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        uint64_t v33 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v33;
        swift_bridgeObjectRetain(v33);
        swift_storeEnumTagMultiPayload(a1, a3, 17LL);
        break;
      case 0x12u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        a1[6]  = a2[6];
        uint64_t v34 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v34;
        swift_bridgeObjectRetain(v34);
        swift_storeEnumTagMultiPayload(a1, a3, 18LL);
        break;
      case 0x13u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        a1[16]  = a2[16];
        uint64_t v35 = *((void *)a2 + 3);
        *((void *)a1 + 3)  = v35;
        swift_bridgeObjectRetain(v35);
        swift_storeEnumTagMultiPayload(a1, a3, 19LL);
        break;
      case 0x17u:
        int v36 = *((_DWORD *)a2 + 1);
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_DWORD *)a1 + 1)  = v36;
        a1[8]  = a2[8];
        uint64_t v37 = *((void *)a2 + 2);
        *((void *)a1 + 2)  = v37;
        swift_bridgeObjectRetain(v37);
        swift_storeEnumTagMultiPayload(a1, a3, 23LL);
        break;
      case 0x18u:
        uint64_t v38 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v38);
        swift_storeEnumTagMultiPayload(a1, a3, 24LL);
        break;
      case 0x19u:
        *(_WORD *)a1  = *(_WORD *)a2;
        uint64_t v40 = *((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        sub_100020AFC(v40, v39);
        *((void *)a1 + 1)  = v40;
        *((void *)a1 + 2)  = v39;
        swift_storeEnumTagMultiPayload(a1, a3, 25LL);
        break;
      case 0x1Du:
        int v41 = *((_DWORD *)a2 + 1);
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_DWORD *)a1 + 1)  = v41;
        a1[8]  = a2[8];
        *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
        uint64_t v43 = *((void *)a2 + 2);
        unint64_t v42 = *((void *)a2 + 3);
        sub_100020AFC(v43, v42);
        *((void *)a1 + 2)  = v43;
        *((void *)a1 + 3)  = v42;
        swift_storeEnumTagMultiPayload(a1, a3, 29LL);
        break;
      case 0x1Eu:
        *a1  = *a2;
        uint64_t v44 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v44;
        swift_bridgeObjectRetain(v44);
        swift_storeEnumTagMultiPayload(a1, a3, 30LL);
        break;
      case 0x1Fu:
        uint64_t v45 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v45);
        swift_storeEnumTagMultiPayload(a1, a3, 31LL);
        break;
      case 0x20u:
        *a1  = *a2;
        uint64_t v47 = *((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        sub_100020AFC(v47, v46);
        *((void *)a1 + 1)  = v47;
        *((void *)a1 + 2)  = v46;
        swift_storeEnumTagMultiPayload(a1, a3, 32LL);
        break;
      case 0x21u:
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
        a1[18]  = a2[18];
        uint64_t v48 = *((void *)a2 + 3);
        *((void *)a1 + 3)  = v48;
        swift_bridgeObjectRetain(v48);
        swift_storeEnumTagMultiPayload(a1, a3, 33LL);
        break;
      case 0x22u:
        uint64_t v49 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v49);
        swift_storeEnumTagMultiPayload(a1, a3, 34LL);
        break;
      case 0x23u:
        uint64_t v50 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v50);
        swift_storeEnumTagMultiPayload(a1, a3, 35LL);
        break;
      case 0x24u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        unsigned __int8 v51 = (uint64_t *)(a2 + 24);
        *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
        unint64_t v52 = *((void *)a2 + 4);
        if (v52 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24)  = *(_OWORD *)v51;
        }

        else
        {
          uint64_t v84 = *v51;
          sub_100020AFC(*v51, *((void *)a2 + 4));
          *((void *)a1 + 3)  = v84;
          *((void *)a1 + 4)  = v52;
        }

        uint64_t v85 = a2[40];
        if (v85 == 4)
        {
          *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
          *((void *)a1 + 7)  = *((void *)a2 + 7);
        }

        else
        {
          a1[40]  = v85;
          uint64_t v90 = *((void *)a2 + 6);
          unint64_t v89 = *((void *)a2 + 7);
          sub_100020AFC(v90, v89);
          *((void *)a1 + 6)  = v90;
          *((void *)a1 + 7)  = v89;
        }

        swift_storeEnumTagMultiPayload(a1, a3, 36LL);
        break;
      case 0x25u:
        uint64_t v53 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v53);
        swift_storeEnumTagMultiPayload(a1, a3, 37LL);
        break;
      case 0x26u:
        uint64_t v54 = *(void *)a2;
        unint64_t v55 = *((void *)a2 + 1);
        sub_100020AFC(*(void *)a2, v55);
        *(void *)a1  = v54;
        *((void *)a1 + 1)  = v55;
        uint64_t v57 = *((void *)a2 + 2);
        unint64_t v56 = *((void *)a2 + 3);
        sub_100020AFC(v57, v56);
        *((void *)a1 + 2)  = v57;
        *((void *)a1 + 3)  = v56;
        swift_storeEnumTagMultiPayload(a1, a3, 38LL);
        break;
      case 0x27u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        uint64_t v58 = a1 + 8;
        unint64_t v59 = a2 + 8;
        unint64_t v60 = *((void *)a2 + 4);
        if (v60 >> 60 == 15)
        {
          __int128 v61 = *(_OWORD *)(a2 + 24);
          *uint64_t v58 = *v59;
          *(_OWORD *)(a1 + 24)  = v61;
        }

        else
        {
          *(void *)uint64_t v58 = *(void *)v59;
          a1[16]  = a2[16];
          uint64_t v86 = *((void *)a2 + 3);
          sub_100020AFC(v86, v60);
          *((void *)a1 + 3)  = v86;
          *((void *)a1 + 4)  = v60;
        }

        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        swift_storeEnumTagMultiPayload(a1, a3, 39LL);
        break;
      case 0x28u:
        *(_WORD *)a1  = *(_WORD *)a2;
        *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
        uint64_t v62 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
        uint64_t v63 = &a1[v62];
        char v64 = &a2[v62];
        *uint64_t v63 = a2[v62];
        *(_WORD *)(v63 + 1)  = *(_WORD *)&a2[v62 + 1];
        v65  = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
        uint64_t v66 = v65[6];
        uint64_t v67 = &v63[v66];
        uint64_t v68 = &v64[v66];
        uint64_t v69 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
        uint64_t v70 = *(void *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1LL, v69))
        {
          v71  = sub_100002274((uint64_t *)&unk_10040D470);
          memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0LL, 1LL, v69);
        }

        uint64_t v91 = v65[7];
        uint64_t v92 = &v63[v91];
        v93  = (uint64_t *)&v64[v91];
        unint64_t v94 = v93[1];
        if (v94 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
        }

        else
        {
          v95  = *v93;
          sub_100020AFC(*v93, v93[1]);
          *(void *)uint64_t v92 = v95;
          *((void *)v92 + 1)  = v94;
        }

        uint64_t v96 = v65[8];
        unsigned __int8 v97 = &v63[v96];
        v98  = (uint64_t *)&v64[v96];
        unint64_t v99 = v98[1];
        if (v99 >> 60 == 15)
        {
          *(_OWORD *)unsigned __int8 v97 = *(_OWORD *)v98;
        }

        else
        {
          uint64_t v100 = *v98;
          sub_100020AFC(*v98, v98[1]);
          *(void *)unsigned __int8 v97 = v100;
          *((void *)v97 + 1)  = v99;
        }

        uint64_t v101 = v65[9];
        uint64_t v102 = &v63[v101];
        uint64_t v103 = (uint64_t *)&v64[v101];
        unint64_t v104 = v103[1];
        if (v104 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
        }

        else
        {
          uint64_t v105 = *v103;
          sub_100020AFC(*v103, v103[1]);
          *(void *)uint64_t v102 = v105;
          *((void *)v102 + 1)  = v104;
        }

        uint64_t v106 = v65[10];
        char v107 = &v63[v106];
        int v108 = &v64[v106];
        uint64_t v109 = type metadata accessor for UUID(0LL);
        uint64_t v110 = *(void *)(v109 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1LL, v109))
        {
          v111  = sub_100002274(qword_100410330);
          memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v107, v108, v109);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0LL, 1LL, v109);
        }

        uint64_t v112 = v65[11];
        uint64_t v113 = *(void *)&v64[v112];
        *(void *)&v63[v112]  = v113;
        v125  = v65;
        v114  = v65[12];
        uint64_t v115 = &v63[v114];
        uint64_t v116 = &v64[v114];
        v117  = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
        v118  = *(void *)(v117 - 8);
        v119  = *(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48);
        swift_bridgeObjectRetain(v113);
        if (v119(v116, 1LL, v117))
        {
          v120  = sub_100002274((uint64_t *)&unk_10040DCC0);
          memcpy(v115, v116, *(void *)(*(void *)(v120 - 8) + 64LL));
        }

        else
        {
          v121  = type metadata accessor for DispatchTimeInterval(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 16LL))(v115, v116, v121);
          v115[*(int *)(v117 + 20)]  = v116[*(int *)(v117 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56))(v115, 0LL, 1LL, v117);
        }

        v122  = v125[13];
        v123  = &v63[v122];
        v124  = &v64[v122];
        *(_OWORD *)v123  = *(_OWORD *)v124;
        *(_OWORD *)(v123 + 9)  = *(_OWORD *)(v124 + 9);
        swift_storeEnumTagMultiPayload(a1, a3, 40LL);
        break;
      case 0x29u:
        *(_WORD *)a1  = *(_WORD *)a2;
        a1[2]  = a2[2];
        v73  = *((void *)a2 + 1);
        unint64_t v72 = *((void *)a2 + 2);
        sub_100020AFC(v73, v72);
        *((void *)a1 + 1)  = v73;
        *((void *)a1 + 2)  = v72;
        swift_storeEnumTagMultiPayload(a1, a3, 41LL);
        break;
      case 0x2Au:
        *a1  = *a2;
        v75  = *((void *)a2 + 1);
        unint64_t v74 = *((void *)a2 + 2);
        sub_100020AFC(v75, v74);
        *((void *)a1 + 1)  = v75;
        *((void *)a1 + 2)  = v74;
        swift_storeEnumTagMultiPayload(a1, a3, 42LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for NANAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 2:
    case 24:
    case 31:
    case 34:
    case 35:
    case 37:
      uint64_t v4 = *(void *)a1;
      return swift_bridgeObjectRelease(v4);
    case 3:
      sub_1000208D8(*(void *)a1, *(void *)(a1 + 8));
      uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 24));
      if (*(unsigned __int8 *)(a1 + 50) != 255)
      {
        uint64_t v7 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
        uint64_t result = sub_1001062D4(*(void *)(a1 + 32), *(void *)(a1 + 40), v7, BYTE2(v7) & 1);
      }

      if (*(_BYTE *)(a1 + 56) == 4LL) {
        return result;
      }
      uint64_t v5 = *(void *)(a1 + 64);
      unint64_t v6 = *(void *)(a1 + 72);
      return sub_1000208D8(v5, v6);
    case 5:
    case 7:
      goto LABEL_12;
    case 6:
    case 29:
      goto LABEL_22;
    case 8:
      sub_1000208D8(*(void *)(a1 + 16), *(void *)(a1 + 24));
      goto LABEL_14;
    case 9:
    case 12:
    case 25:
    case 32:
    case 41:
    case 42:
      uint64_t v5 = *(void *)(a1 + 8);
      unint64_t v6 = *(void *)(a1 + 16);
      return sub_1000208D8(v5, v6);
    case 10:
    case 17:
    case 18:
    case 30:
      uint64_t v4 = *(void *)(a1 + 8);
      return swift_bridgeObjectRelease(v4);
    case 14:
      if (*(_BYTE *)(a1 + 16) == 4LL) {
        return result;
      }
LABEL_12:
      uint64_t v5 = *(void *)(a1 + 24);
      unint64_t v6 = *(void *)(a1 + 32);
      return sub_1000208D8(v5, v6);
    case 16:
      if (*(_BYTE *)(a1 + 24) == 4LL) {
        return result;
      }
LABEL_14:
      uint64_t v5 = *(void *)(a1 + 32);
      unint64_t v6 = *(void *)(a1 + 40);
      return sub_1000208D8(v5, v6);
    case 19:
    case 33:
      uint64_t v4 = *(void *)(a1 + 24);
      return swift_bridgeObjectRelease(v4);
    case 23:
      uint64_t v4 = *(void *)(a1 + 16);
      return swift_bridgeObjectRelease(v4);
    case 36:
      unint64_t v8 = *(void *)(a1 + 32);
      if (v8 >> 60 != 15) {
        uint64_t result = sub_1000208D8(*(void *)(a1 + 24), v8);
      }
      if (*(_BYTE *)(a1 + 40) == 4LL) {
        return result;
      }
      uint64_t v5 = *(void *)(a1 + 48);
      unint64_t v6 = *(void *)(a1 + 56);
      break;
    case 38:
      sub_1000208D8(*(void *)a1, *(void *)(a1 + 8));
LABEL_22:
      uint64_t v5 = *(void *)(a1 + 16);
      unint64_t v6 = *(void *)(a1 + 24);
      return sub_1000208D8(v5, v6);
    case 39:
      unint64_t v6 = *(void *)(a1 + 32);
      if (v6 >> 60 == 15) {
        return result;
      }
      uint64_t v5 = *(void *)(a1 + 24);
      break;
    case 40:
      uint64_t v9 = a1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
      uint64_t v10 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
      uint64_t v11 = v9 + v10[6];
      uint64_t v12 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      unsigned __int8 v14 = (uint64_t *)(v9 + v10[7]);
      unint64_t v15 = v14[1];
      if (v15 >> 60 != 15) {
        sub_1000208D8(*v14, v15);
      }
      uint64_t v16 = (uint64_t *)(v9 + v10[8]);
      unint64_t v17 = v16[1];
      if (v17 >> 60 != 15) {
        sub_1000208D8(*v16, v17);
      }
      unint64_t v18 = (uint64_t *)(v9 + v10[9]);
      unint64_t v19 = v18[1];
      if (v19 >> 60 != 15) {
        sub_1000208D8(*v18, v19);
      }
      uint64_t v20 = v9 + v10[10];
      uint64_t v21 = type metadata accessor for UUID(0LL);
      uint64_t v22 = *(void *)(v21 - 8);
      swift_bridgeObjectRelease(*(void *)(v9 + v10[11]));
      uint64_t v23 = v9 + v10[12];
      uint64_t v24 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48LL))(v23, 1LL, v24);
      if (!(_DWORD)result)
      {
        uint64_t v25 = type metadata accessor for DispatchTimeInterval(0LL);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(v23, v25);
      }

      return result;
    default:
      return result;
  }

  return sub_1000208D8(v5, v6);
}

char *initializeWithCopy for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 2u:
      uint64_t v6 = *(void *)a2;
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_73;
    case 3u:
      uint64_t v10 = *(void *)a2;
      unint64_t v11 = *((void *)a2 + 1);
      sub_100020AFC(*(void *)a2, v11);
      *(void *)a1  = v10;
      *((void *)a1 + 1)  = v11;
      a1[16]  = a2[16];
      *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
      *((_WORD *)a1 + 10)  = *((_WORD *)a2 + 10);
      a1[22]  = a2[22];
      uint64_t v12 = *((void *)a2 + 3);
      *((void *)a1 + 3)  = v12;
      unsigned __int8 v13 = a2[50];
      int v14 = *((unsigned __int16 *)a2 + 24);
      swift_bridgeObjectRetain(v12);
      if (v13 == 255)
      {
        *((_OWORD *)a1 + 2)  = *((_OWORD *)a2 + 2);
        *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
      }

      else
      {
        v75  = v14 & 0xFF00FFFF | (v13 << 16);
        uint64_t v76 = *((void *)a2 + 4);
        unint64_t v77 = *((void *)a2 + 5);
        sub_1001CDEC4(v76, v77, v75, BYTE2(v75) & 1);
        *((void *)a1 + 4)  = v76;
        *((void *)a1 + 5)  = v77;
        *((_WORD *)a1 + 24)  = v75;
        a1[50]  = BYTE2(v75) & 1;
      }

      uint64_t v78 = a2[56];
      if (v78 == 4)
      {
        *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
        *((void *)a1 + 9)  = *((void *)a2 + 9);
      }

      else
      {
        a1[56]  = v78;
        uint64_t v87 = *((void *)a2 + 8);
        unint64_t v86 = *((void *)a2 + 9);
        sub_100020AFC(v87, v86);
        *((void *)a1 + 8)  = v87;
        *((void *)a1 + 9)  = v86;
      }

      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
      goto LABEL_73;
    case 5u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
      *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
      a1[16]  = a2[16];
      *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
      uint64_t v15 = *((void *)a2 + 3);
      unint64_t v16 = *((void *)a2 + 4);
      sub_100020AFC(v15, v16);
      *((void *)a1 + 3)  = v15;
      *((void *)a1 + 4)  = v16;
      a1[40]  = a2[40];
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
      goto LABEL_73;
    case 6u:
      *a1  = *a2;
      *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
      *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
      a1[8]  = a2[8];
      *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
      uint64_t v18 = *((void *)a2 + 2);
      unint64_t v17 = *((void *)a2 + 3);
      sub_100020AFC(v18, v17);
      *((void *)a1 + 2)  = v18;
      *((void *)a1 + 3)  = v17;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 6LL;
      goto LABEL_73;
    case 7u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
      *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
      a1[16]  = a2[16];
      *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
      uint64_t v20 = *((void *)a2 + 3);
      unint64_t v19 = *((void *)a2 + 4);
      sub_100020AFC(v20, v19);
      *((void *)a1 + 3)  = v20;
      *((void *)a1 + 4)  = v19;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 7LL;
      goto LABEL_73;
    case 8u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      a1[8]  = a2[8];
      *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
      uint64_t v21 = *((void *)a2 + 2);
      unint64_t v22 = *((void *)a2 + 3);
      sub_100020AFC(v21, v22);
      *((void *)a1 + 2)  = v21;
      *((void *)a1 + 3)  = v22;
      uint64_t v24 = *((void *)a2 + 4);
      unint64_t v23 = *((void *)a2 + 5);
      sub_100020AFC(v24, v23);
      *((void *)a1 + 4)  = v24;
      *((void *)a1 + 5)  = v23;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 8LL;
      goto LABEL_73;
    case 9u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      uint64_t v26 = *((void *)a2 + 1);
      unint64_t v25 = *((void *)a2 + 2);
      sub_100020AFC(v26, v25);
      *((void *)a1 + 1)  = v26;
      *((void *)a1 + 2)  = v25;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 9LL;
      goto LABEL_73;
    case 0xAu:
      *a1  = *a2;
      uint64_t v27 = *((void *)a2 + 1);
      *((void *)a1 + 1)  = v27;
      swift_bridgeObjectRetain(v27);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 10LL;
      goto LABEL_73;
    case 0xCu:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      uint64_t v29 = *((void *)a2 + 1);
      unint64_t v28 = *((void *)a2 + 2);
      sub_100020AFC(v29, v28);
      *((void *)a1 + 1)  = v29;
      *((void *)a1 + 2)  = v28;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 12LL;
      goto LABEL_73;
    case 0xEu:
      *a1  = *a2;
      *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
      *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
      a1[8]  = a2[8];
      *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
      uint64_t v30 = a2[16];
      if (v30 == 4)
      {
        *((_OWORD *)a1 + 1)  = *((_OWORD *)a2 + 1);
        *((void *)a1 + 4)  = *((void *)a2 + 4);
      }

      else
      {
        a1[16]  = v30;
        uint64_t v80 = *((void *)a2 + 3);
        unint64_t v79 = *((void *)a2 + 4);
        sub_100020AFC(v80, v79);
        *((void *)a1 + 3)  = v80;
        *((void *)a1 + 4)  = v79;
      }

      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 14LL;
      goto LABEL_73;
    case 0x10u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
      *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
      *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
      *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
      *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
      uint64_t v31 = a2[24];
      if (v31 == 4)
      {
        *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
        *((void *)a1 + 5)  = *((void *)a2 + 5);
      }

      else
      {
        a1[24]  = v31;
        uint64_t v82 = *((void *)a2 + 4);
        v81  = *((void *)a2 + 5);
        sub_100020AFC(v82, v81);
        *((void *)a1 + 4)  = v82;
        *((void *)a1 + 5)  = v81;
      }

      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 16LL;
      goto LABEL_73;
    case 0x11u:
      *a1  = *a2;
      *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
      uint64_t v32 = *((void *)a2 + 1);
      *((void *)a1 + 1)  = v32;
      swift_bridgeObjectRetain(v32);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 17LL;
      goto LABEL_73;
    case 0x12u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      a1[6]  = a2[6];
      uint64_t v33 = *((void *)a2 + 1);
      *((void *)a1 + 1)  = v33;
      swift_bridgeObjectRetain(v33);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 18LL;
      goto LABEL_73;
    case 0x13u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      a1[16]  = a2[16];
      uint64_t v34 = *((void *)a2 + 3);
      *((void *)a1 + 3)  = v34;
      swift_bridgeObjectRetain(v34);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 19LL;
      goto LABEL_73;
    case 0x17u:
      int v35 = *((_DWORD *)a2 + 1);
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_DWORD *)a1 + 1)  = v35;
      a1[8]  = a2[8];
      uint64_t v36 = *((void *)a2 + 2);
      *((void *)a1 + 2)  = v36;
      swift_bridgeObjectRetain(v36);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 23LL;
      goto LABEL_73;
    case 0x18u:
      uint64_t v37 = *(void *)a2;
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain(v37);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 24LL;
      goto LABEL_73;
    case 0x19u:
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v39 = *((void *)a2 + 1);
      unint64_t v38 = *((void *)a2 + 2);
      sub_100020AFC(v39, v38);
      *((void *)a1 + 1)  = v39;
      *((void *)a1 + 2)  = v38;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 25LL;
      goto LABEL_73;
    case 0x1Du:
      int v40 = *((_DWORD *)a2 + 1);
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_DWORD *)a1 + 1)  = v40;
      a1[8]  = a2[8];
      *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
      uint64_t v42 = *((void *)a2 + 2);
      unint64_t v41 = *((void *)a2 + 3);
      sub_100020AFC(v42, v41);
      *((void *)a1 + 2)  = v42;
      *((void *)a1 + 3)  = v41;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 29LL;
      goto LABEL_73;
    case 0x1Eu:
      *a1  = *a2;
      uint64_t v43 = *((void *)a2 + 1);
      *((void *)a1 + 1)  = v43;
      swift_bridgeObjectRetain(v43);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 30LL;
      goto LABEL_73;
    case 0x1Fu:
      uint64_t v44 = *(void *)a2;
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain(v44);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 31LL;
      goto LABEL_73;
    case 0x20u:
      *a1  = *a2;
      uint64_t v46 = *((void *)a2 + 1);
      unint64_t v45 = *((void *)a2 + 2);
      sub_100020AFC(v46, v45);
      *((void *)a1 + 1)  = v46;
      *((void *)a1 + 2)  = v45;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 32LL;
      goto LABEL_73;
    case 0x21u:
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
      a1[18]  = a2[18];
      uint64_t v47 = *((void *)a2 + 3);
      *((void *)a1 + 3)  = v47;
      swift_bridgeObjectRetain(v47);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 33LL;
      goto LABEL_73;
    case 0x22u:
      uint64_t v48 = *(void *)a2;
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain(v48);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 34LL;
      goto LABEL_73;
    case 0x23u:
      uint64_t v49 = *(void *)a2;
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain(v49);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 35LL;
      goto LABEL_73;
    case 0x24u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
      *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
      *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
      *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
      uint64_t v50 = (uint64_t *)(a2 + 24);
      *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
      unint64_t v51 = *((void *)a2 + 4);
      if (v51 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24)  = *(_OWORD *)v50;
      }

      else
      {
        uint64_t v83 = *v50;
        sub_100020AFC(*v50, *((void *)a2 + 4));
        *((void *)a1 + 3)  = v83;
        *((void *)a1 + 4)  = v51;
      }

      uint64_t v84 = a2[40];
      if (v84 == 4)
      {
        *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
        *((void *)a1 + 7)  = *((void *)a2 + 7);
      }

      else
      {
        a1[40]  = v84;
        uint64_t v89 = *((void *)a2 + 6);
        unint64_t v88 = *((void *)a2 + 7);
        sub_100020AFC(v89, v88);
        *((void *)a1 + 6)  = v89;
        *((void *)a1 + 7)  = v88;
      }

      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 36LL;
      goto LABEL_73;
    case 0x25u:
      uint64_t v52 = *(void *)a2;
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain(v52);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 37LL;
      goto LABEL_73;
    case 0x26u:
      uint64_t v53 = *(void *)a2;
      unint64_t v54 = *((void *)a2 + 1);
      sub_100020AFC(*(void *)a2, v54);
      *(void *)a1  = v53;
      *((void *)a1 + 1)  = v54;
      uint64_t v56 = *((void *)a2 + 2);
      unint64_t v55 = *((void *)a2 + 3);
      sub_100020AFC(v56, v55);
      *((void *)a1 + 2)  = v56;
      *((void *)a1 + 3)  = v55;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 38LL;
      goto LABEL_73;
    case 0x27u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      uint64_t v57 = a1 + 8;
      uint64_t v58 = a2 + 8;
      unint64_t v59 = *((void *)a2 + 4);
      if (v59 >> 60 == 15)
      {
        __int128 v60 = *(_OWORD *)(a2 + 24);
        *uint64_t v57 = *v58;
        *(_OWORD *)(a1 + 24)  = v60;
      }

      else
      {
        *(void *)uint64_t v57 = *(void *)v58;
        a1[16]  = a2[16];
        uint64_t v85 = *((void *)a2 + 3);
        sub_100020AFC(v85, v59);
        *((void *)a1 + 3)  = v85;
        *((void *)a1 + 4)  = v59;
      }

      *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 39LL;
      goto LABEL_73;
    case 0x28u:
      *(_WORD *)a1  = *(_WORD *)a2;
      *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
      uint64_t v61 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
      uint64_t v62 = &a1[v61];
      uint64_t v63 = &a2[v61];
      *uint64_t v62 = a2[v61];
      *(_WORD *)(v62 + 1)  = *(_WORD *)&a2[v61 + 1];
      char v64 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
      v65  = v64[6];
      uint64_t v66 = &v62[v65];
      uint64_t v67 = &v63[v65];
      uint64_t v68 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
      uint64_t v69 = *(void *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1LL, v68))
      {
        uint64_t v70 = sub_100002274((uint64_t *)&unk_10040D470);
        memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v66, v67, v68);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0LL, 1LL, v68);
      }

      uint64_t v90 = v64[7];
      uint64_t v91 = &v62[v90];
      uint64_t v92 = (uint64_t *)&v63[v90];
      v93  = v92[1];
      if (v93 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
      }

      else
      {
        uint64_t v94 = *v92;
        sub_100020AFC(*v92, v92[1]);
        *(void *)uint64_t v91 = v94;
        *((void *)v91 + 1)  = v93;
      }

      v95  = v64[8];
      uint64_t v96 = &v62[v95];
      unsigned __int8 v97 = (uint64_t *)&v63[v95];
      v98  = v97[1];
      if (v98 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
      }

      else
      {
        uint64_t v99 = *v97;
        sub_100020AFC(*v97, v97[1]);
        *(void *)uint64_t v96 = v99;
        *((void *)v96 + 1)  = v98;
      }

      uint64_t v100 = v64[9];
      uint64_t v101 = &v62[v100];
      uint64_t v102 = (uint64_t *)&v63[v100];
      unint64_t v103 = v102[1];
      if (v103 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
      }

      else
      {
        uint64_t v104 = *v102;
        sub_100020AFC(*v102, v102[1]);
        *(void *)uint64_t v101 = v104;
        *((void *)v101 + 1)  = v103;
      }

      uint64_t v105 = v64[10];
      uint64_t v106 = &v62[v105];
      char v107 = &v63[v105];
      uint64_t v108 = type metadata accessor for UUID(0LL);
      uint64_t v109 = *(void *)(v108 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1LL, v108))
      {
        uint64_t v110 = sub_100002274(qword_100410330);
        memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v106, v107, v108);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0LL, 1LL, v108);
      }

      v111  = v64[11];
      uint64_t v112 = *(void *)&v63[v111];
      *(void *)&v62[v111]  = v112;
      v125  = v64;
      uint64_t v113 = v64[12];
      v114  = &v62[v113];
      uint64_t v115 = &v63[v113];
      uint64_t v116 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
      v117  = *(void *)(v116 - 8);
      v118  = *(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
      swift_bridgeObjectRetain(v112);
      if (v118(v115, 1LL, v116))
      {
        v119  = sub_100002274((uint64_t *)&unk_10040DCC0);
        memcpy(v114, v115, *(void *)(*(void *)(v119 - 8) + 64LL));
      }

      else
      {
        v120  = type metadata accessor for DispatchTimeInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 16LL))(v114, v115, v120);
        v114[*(int *)(v116 + 20)]  = v115[*(int *)(v116 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0LL, 1LL, v116);
      }

      v121  = v125[13];
      v122  = &v62[v121];
      v123  = &v63[v121];
      *(_OWORD *)v122  = *(_OWORD *)v123;
      *(_OWORD *)(v122 + 9)  = *(_OWORD *)(v123 + 9);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 40LL;
      goto LABEL_73;
    case 0x29u:
      *(_WORD *)a1  = *(_WORD *)a2;
      a1[2]  = a2[2];
      uint64_t v72 = *((void *)a2 + 1);
      v71  = *((void *)a2 + 2);
      sub_100020AFC(v72, v71);
      *((void *)a1 + 1)  = v72;
      *((void *)a1 + 2)  = v71;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 41LL;
      goto LABEL_73;
    case 0x2Au:
      *a1  = *a2;
      uint64_t v74 = *((void *)a2 + 1);
      v73  = *((void *)a2 + 2);
      sub_100020AFC(v74, v73);
      *((void *)a1 + 1)  = v74;
      *((void *)a1 + 2)  = v73;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 42LL;
LABEL_73:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

char *assignWithCopy for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C((uint64_t)a1, type metadata accessor for NANAttribute);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 2u:
        uint64_t v6 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_74;
      case 3u:
        uint64_t v10 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
        sub_100020AFC(*(void *)a2, v11);
        *(void *)a1  = v10;
        *((void *)a1 + 1)  = v11;
        a1[16]  = a2[16];
        a1[17]  = a2[17];
        a1[18]  = a2[18];
        __int16 v12 = *((_WORD *)a2 + 10);
        a1[22]  = a2[22];
        *((_WORD *)a1 + 10)  = v12;
        uint64_t v13 = *((void *)a2 + 3);
        *((void *)a1 + 3)  = v13;
        unsigned __int8 v14 = a2[50];
        int v15 = *((unsigned __int16 *)a2 + 24);
        swift_bridgeObjectRetain(v13);
        if (v14 == 255)
        {
          __int128 v16 = *((_OWORD *)a2 + 2);
          *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
          *((_OWORD *)a1 + 2)  = v16;
        }

        else
        {
          v93  = v15 & 0xFF00FFFF | (v14 << 16);
          uint64_t v94 = *((void *)a2 + 4);
          v95  = *((void *)a2 + 5);
          sub_1001CDEC4(v94, v95, v93, BYTE2(v93) & 1);
          *((void *)a1 + 4)  = v94;
          *((void *)a1 + 5)  = v95;
          *((_WORD *)a1 + 24)  = v93;
          a1[50]  = BYTE2(v93) & 1;
        }

        uint64_t v96 = a2[56];
        if (v96 == 4)
        {
          __int128 v97 = *(_OWORD *)(a2 + 56);
          *((void *)a1 + 9)  = *((void *)a2 + 9);
          *(_OWORD *)(a1 + 56)  = v97;
        }

        else
        {
          a1[56]  = v96;
          uint64_t v109 = *((void *)a2 + 8);
          unint64_t v108 = *((void *)a2 + 9);
          sub_100020AFC(v109, v108);
          *((void *)a1 + 8)  = v109;
          *((void *)a1 + 9)  = v108;
        }

        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
        goto LABEL_74;
      case 5u:
        int v17 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v17;
        int v18 = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        *(_DWORD *)(a1 + 6)  = v18;
        a1[16]  = a2[16];
        a1[17]  = a2[17];
        a1[18]  = a2[18];
        uint64_t v19 = *((void *)a2 + 3);
        unint64_t v20 = *((void *)a2 + 4);
        sub_100020AFC(v19, v20);
        *((void *)a1 + 3)  = v19;
        *((void *)a1 + 4)  = v20;
        a1[40]  = a2[40];
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_74;
      case 6u:
        *a1  = *a2;
        int v21 = *(_DWORD *)(a2 + 1);
        *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
        *(_DWORD *)(a1 + 1)  = v21;
        a1[8]  = a2[8];
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        uint64_t v23 = *((void *)a2 + 2);
        unint64_t v22 = *((void *)a2 + 3);
        sub_100020AFC(v23, v22);
        *((void *)a1 + 2)  = v23;
        *((void *)a1 + 3)  = v22;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
        goto LABEL_74;
      case 7u:
        int v24 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v24;
        int v25 = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        *(_DWORD *)(a1 + 6)  = v25;
        a1[16]  = a2[16];
        a1[17]  = a2[17];
        a1[18]  = a2[18];
        uint64_t v27 = *((void *)a2 + 3);
        unint64_t v26 = *((void *)a2 + 4);
        sub_100020AFC(v27, v26);
        *((void *)a1 + 3)  = v27;
        *((void *)a1 + 4)  = v26;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
        goto LABEL_74;
      case 8u:
        int v28 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v28;
        a1[8]  = a2[8];
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        uint64_t v29 = *((void *)a2 + 2);
        unint64_t v30 = *((void *)a2 + 3);
        sub_100020AFC(v29, v30);
        *((void *)a1 + 2)  = v29;
        *((void *)a1 + 3)  = v30;
        uint64_t v32 = *((void *)a2 + 4);
        unint64_t v31 = *((void *)a2 + 5);
        sub_100020AFC(v32, v31);
        *((void *)a1 + 4)  = v32;
        *((void *)a1 + 5)  = v31;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 8LL;
        goto LABEL_74;
      case 9u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        uint64_t v34 = *((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        sub_100020AFC(v34, v33);
        *((void *)a1 + 1)  = v34;
        *((void *)a1 + 2)  = v33;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 9LL;
        goto LABEL_74;
      case 0xAu:
        *a1  = *a2;
        uint64_t v35 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v35;
        swift_bridgeObjectRetain(v35);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 10LL;
        goto LABEL_74;
      case 0xCu:
        int v36 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v36;
        uint64_t v38 = *((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        sub_100020AFC(v38, v37);
        *((void *)a1 + 1)  = v38;
        *((void *)a1 + 2)  = v37;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 12LL;
        goto LABEL_74;
      case 0xEu:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        int v39 = *((_DWORD *)a2 + 1);
        a1[8]  = a2[8];
        *((_DWORD *)a1 + 1)  = v39;
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v40 = a2[16];
        if (v40 == 4)
        {
          __int128 v41 = *((_OWORD *)a2 + 1);
          *((void *)a1 + 4)  = *((void *)a2 + 4);
          *((_OWORD *)a1 + 1)  = v41;
        }

        else
        {
          a1[16]  = v40;
          uint64_t v99 = *((void *)a2 + 3);
          v98  = *((void *)a2 + 4);
          sub_100020AFC(v99, v98);
          *((void *)a1 + 3)  = v99;
          *((void *)a1 + 4)  = v98;
        }

        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 14LL;
        goto LABEL_74;
      case 0x10u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        int v42 = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 3)  = v42;
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
        int v43 = *(_DWORD *)(a2 + 13);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13)  = v43;
        uint64_t v44 = a2[24];
        if (v44 == 4)
        {
          __int128 v45 = *(_OWORD *)(a2 + 24);
          *((void *)a1 + 5)  = *((void *)a2 + 5);
          *(_OWORD *)(a1 + 24)  = v45;
        }

        else
        {
          a1[24]  = v44;
          uint64_t v101 = *((void *)a2 + 4);
          unint64_t v100 = *((void *)a2 + 5);
          sub_100020AFC(v101, v100);
          *((void *)a1 + 4)  = v101;
          *((void *)a1 + 5)  = v100;
        }

        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 16LL;
        goto LABEL_74;
      case 0x11u:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        uint64_t v46 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v46;
        swift_bridgeObjectRetain(v46);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 17LL;
        goto LABEL_74;
      case 0x12u:
        int v47 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v47;
        a1[6]  = a2[6];
        uint64_t v48 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v48;
        swift_bridgeObjectRetain(v48);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 18LL;
        goto LABEL_74;
      case 0x13u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        a1[3]  = a2[3];
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        uint64_t v49 = *((void *)a2 + 1);
        a1[16]  = a2[16];
        *((void *)a1 + 1)  = v49;
        uint64_t v50 = *((void *)a2 + 3);
        *((void *)a1 + 3)  = v50;
        swift_bridgeObjectRetain(v50);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 19LL;
        goto LABEL_74;
      case 0x17u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        a1[3]  = a2[3];
        int v51 = *((_DWORD *)a2 + 1);
        a1[8]  = a2[8];
        *((_DWORD *)a1 + 1)  = v51;
        uint64_t v52 = *((void *)a2 + 2);
        *((void *)a1 + 2)  = v52;
        swift_bridgeObjectRetain(v52);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 23LL;
        goto LABEL_74;
      case 0x18u:
        uint64_t v53 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v53);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 24LL;
        goto LABEL_74;
      case 0x19u:
        *(_WORD *)a1  = *(_WORD *)a2;
        uint64_t v55 = *((void *)a2 + 1);
        unint64_t v54 = *((void *)a2 + 2);
        sub_100020AFC(v55, v54);
        *((void *)a1 + 1)  = v55;
        *((void *)a1 + 2)  = v54;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 25LL;
        goto LABEL_74;
      case 0x1Du:
        int v56 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v56;
        LOWORD(v56)  = *((_WORD *)a2 + 3);
        a1[8]  = a2[8];
        *((_WORD *)a1 + 3)  = v56;
        *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
        uint64_t v58 = *((void *)a2 + 2);
        unint64_t v57 = *((void *)a2 + 3);
        sub_100020AFC(v58, v57);
        *((void *)a1 + 2)  = v58;
        *((void *)a1 + 3)  = v57;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 29LL;
        goto LABEL_74;
      case 0x1Eu:
        *a1  = *a2;
        uint64_t v59 = *((void *)a2 + 1);
        *((void *)a1 + 1)  = v59;
        swift_bridgeObjectRetain(v59);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 30LL;
        goto LABEL_74;
      case 0x1Fu:
        uint64_t v60 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v60);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 31LL;
        goto LABEL_74;
      case 0x20u:
        *a1  = *a2;
        uint64_t v62 = *((void *)a2 + 1);
        unint64_t v61 = *((void *)a2 + 2);
        sub_100020AFC(v62, v61);
        *((void *)a1 + 1)  = v62;
        *((void *)a1 + 2)  = v61;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 32LL;
        goto LABEL_74;
      case 0x21u:
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
        a1[18]  = a2[18];
        uint64_t v63 = *((void *)a2 + 3);
        *((void *)a1 + 3)  = v63;
        swift_bridgeObjectRetain(v63);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 33LL;
        goto LABEL_74;
      case 0x22u:
        uint64_t v64 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v64);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 34LL;
        goto LABEL_74;
      case 0x23u:
        v65  = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v65);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 35LL;
        goto LABEL_74;
      case 0x24u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        int v66 = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 3)  = v66;
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
        int v67 = *(_DWORD *)(a2 + 13);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13)  = v67;
        uint64_t v68 = (uint64_t *)(a2 + 24);
        unint64_t v69 = *((void *)a2 + 4);
        if (v69 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24)  = *(_OWORD *)v68;
        }

        else
        {
          uint64_t v102 = *v68;
          sub_100020AFC(*v68, *((void *)a2 + 4));
          *((void *)a1 + 3)  = v102;
          *((void *)a1 + 4)  = v69;
        }

        uint64_t v103 = a2[40];
        if (v103 == 4)
        {
          __int128 v104 = *(_OWORD *)(a2 + 40);
          *((void *)a1 + 7)  = *((void *)a2 + 7);
          *(_OWORD *)(a1 + 40)  = v104;
        }

        else
        {
          a1[40]  = v103;
          v111  = *((void *)a2 + 6);
          unint64_t v110 = *((void *)a2 + 7);
          sub_100020AFC(v111, v110);
          *((void *)a1 + 6)  = v111;
          *((void *)a1 + 7)  = v110;
        }

        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 36LL;
        goto LABEL_74;
      case 0x25u:
        uint64_t v70 = *(void *)a2;
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain(v70);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 37LL;
        goto LABEL_74;
      case 0x26u:
        v71  = *(void *)a2;
        unint64_t v72 = *((void *)a2 + 1);
        sub_100020AFC(*(void *)a2, v72);
        *(void *)a1  = v71;
        *((void *)a1 + 1)  = v72;
        uint64_t v74 = *((void *)a2 + 2);
        v73  = *((void *)a2 + 3);
        sub_100020AFC(v74, v73);
        *((void *)a1 + 2)  = v74;
        *((void *)a1 + 3)  = v73;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 38LL;
        goto LABEL_74;
      case 0x27u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        v75  = a1 + 8;
        uint64_t v76 = a2 + 8;
        if (*((void *)a2 + 4) >> 60 == 15LL)
        {
          __int128 v77 = *(_OWORD *)(a2 + 24);
          _OWORD *v75 = *v76;
          *(_OWORD *)(a1 + 24)  = v77;
        }

        else
        {
          uint64_t v105 = *(void *)v76;
          a1[16]  = a2[16];
          *(void *)v75  = v105;
          uint64_t v106 = *((void *)a2 + 3);
          unint64_t v107 = *((void *)a2 + 4);
          sub_100020AFC(v106, v107);
          *((void *)a1 + 3)  = v106;
          *((void *)a1 + 4)  = v107;
        }

        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 39LL;
        goto LABEL_74;
      case 0x28u:
        *a1  = *a2;
        a1[1]  = a2[1];
        *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
        uint64_t v78 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
        unint64_t v79 = &a1[v78];
        uint64_t v80 = &a2[v78];
        *unint64_t v79 = a2[v78];
        *(_WORD *)(v79 + 1)  = *(_WORD *)&a2[v78 + 1];
        v81  = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
        uint64_t v82 = v81[6];
        uint64_t v83 = &v79[v82];
        uint64_t v84 = &v80[v82];
        uint64_t v85 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
        uint64_t v86 = *(void *)(v85 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1LL, v85))
        {
          uint64_t v87 = sub_100002274((uint64_t *)&unk_10040D470);
          memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v83, v84, v85);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0LL, 1LL, v85);
        }

        uint64_t v112 = v81[7];
        uint64_t v113 = &v79[v112];
        v114  = (uint64_t *)&v80[v112];
        unint64_t v115 = v114[1];
        if (v115 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
        }

        else
        {
          uint64_t v116 = *v114;
          sub_100020AFC(*v114, v114[1]);
          *(void *)uint64_t v113 = v116;
          *((void *)v113 + 1)  = v115;
        }

        v117  = v81[8];
        v118  = &v79[v117];
        v119  = (uint64_t *)&v80[v117];
        v120  = v119[1];
        if (v120 >> 60 == 15)
        {
          *(_OWORD *)v118  = *(_OWORD *)v119;
        }

        else
        {
          v121  = *v119;
          sub_100020AFC(*v119, v119[1]);
          *(void *)v118  = v121;
          *((void *)v118 + 1)  = v120;
        }

        v122  = v81[9];
        v123  = &v79[v122];
        v124  = (uint64_t *)&v80[v122];
        v125  = v124[1];
        if (v125 >> 60 == 15)
        {
          *(_OWORD *)v123  = *(_OWORD *)v124;
        }

        else
        {
          v126  = *v124;
          sub_100020AFC(*v124, v124[1]);
          *(void *)v123  = v126;
          *((void *)v123 + 1)  = v125;
        }

        v127  = v81[10];
        v128  = &v79[v127];
        v129  = &v80[v127];
        v130  = type metadata accessor for UUID(0LL);
        v131  = *(void *)(v130 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1LL, v130))
        {
          v132  = sub_100002274(qword_100410330);
          memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v128, v129, v130);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0LL, 1LL, v130);
        }

        v133  = v81[11];
        v134  = *(void *)&v80[v133];
        *(void *)&v79[v133]  = v134;
        v148  = v81;
        v135  = v81[12];
        v136  = &v79[v135];
        v137  = &v80[v135];
        v138  = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
        v139  = *(void *)(v138 - 8);
        v140  = *(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48);
        swift_bridgeObjectRetain(v134);
        if (v140(v137, 1LL, v138))
        {
          v141  = sub_100002274((uint64_t *)&unk_10040DCC0);
          memcpy(v136, v137, *(void *)(*(void *)(v141 - 8) + 64LL));
        }

        else
        {
          v142  = type metadata accessor for DispatchTimeInterval(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 16LL))(v136, v137, v142);
          v136[*(int *)(v138 + 20)]  = v137[*(int *)(v138 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v136, 0LL, 1LL, v138);
        }

        v143  = v148[13];
        v144  = &v79[v143];
        v145  = (__int128 *)&v80[v143];
        v146  = *v145;
        *(_OWORD *)(v144 + 9)  = *(__int128 *)((char *)v145 + 9);
        *(_OWORD *)v144  = v146;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 40LL;
        goto LABEL_74;
      case 0x29u:
        __int16 v88 = *(_WORD *)a2;
        a1[2]  = a2[2];
        *(_WORD *)a1  = v88;
        uint64_t v90 = *((void *)a2 + 1);
        unint64_t v89 = *((void *)a2 + 2);
        sub_100020AFC(v90, v89);
        *((void *)a1 + 1)  = v90;
        *((void *)a1 + 2)  = v89;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 41LL;
        goto LABEL_74;
      case 0x2Au:
        *a1  = *a2;
        uint64_t v92 = *((void *)a2 + 1);
        unint64_t v91 = *((void *)a2 + 2);
        sub_100020AFC(v92, v91);
        *((void *)a1 + 1)  = v92;
        *((void *)a1 + 2)  = v91;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 42LL;
LABEL_74:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

_DWORD *initializeWithTake for NANAttribute(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 40)
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    a1[1]  = a2[1];
    uint64_t v6 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *uint64_t v7 = *((_BYTE *)a2 + v6);
    *(_WORD *)(v7 + 1)  = *(_WORD *)((char *)a2 + v6 + 1);
    uint64_t v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v10 = v9[6];
    unint64_t v11 = &v7[v10];
    __int16 v12 = &v8[v10];
    uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
    {
      uint64_t v15 = sub_100002274((uint64_t *)&unk_10040D470);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
    }

    *(_OWORD *)&v7[v9[7]]  = *(_OWORD *)&v8[v9[7]];
    *(_OWORD *)&v7[v9[8]]  = *(_OWORD *)&v8[v9[8]];
    *(_OWORD *)&v7[v9[9]]  = *(_OWORD *)&v8[v9[9]];
    uint64_t v16 = v9[10];
    int v17 = &v7[v16];
    int v18 = &v8[v16];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
    {
      uint64_t v21 = sub_100002274(qword_100410330);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }

    *(void *)&v7[v9[11]]  = *(void *)&v8[v9[11]];
    uint64_t v22 = v9[12];
    uint64_t v23 = &v7[v22];
    int v24 = &v8[v22];
    uint64_t v25 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
    {
      uint64_t v27 = sub_100002274((uint64_t *)&unk_10040DCC0);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      uint64_t v28 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v23, v24, v28);
      v23[*(int *)(v25 + 20)]  = v24[*(int *)(v25 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
    }

    uint64_t v29 = v9[13];
    unint64_t v30 = &v7[v29];
    unint64_t v31 = &v8[v29];
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 9)  = *(_OWORD *)(v31 + 9);
    swift_storeEnumTagMultiPayload(a1, a3, 40LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

_DWORD *assignWithTake for NANAttribute(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C((uint64_t)a1, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 40)
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      a1[1]  = a2[1];
      uint64_t v6 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      *uint64_t v7 = *((_BYTE *)a2 + v6);
      *(_WORD *)(v7 + 1)  = *(_WORD *)((char *)a2 + v6 + 1);
      uint64_t v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
      uint64_t v10 = v9[6];
      unint64_t v11 = &v7[v10];
      __int16 v12 = &v8[v10];
      uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
        uint64_t v15 = sub_100002274((uint64_t *)&unk_10040D470);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      }

      *(_OWORD *)&v7[v9[7]]  = *(_OWORD *)&v8[v9[7]];
      *(_OWORD *)&v7[v9[8]]  = *(_OWORD *)&v8[v9[8]];
      *(_OWORD *)&v7[v9[9]]  = *(_OWORD *)&v8[v9[9]];
      uint64_t v16 = v9[10];
      int v17 = &v7[v16];
      int v18 = &v8[v16];
      uint64_t v19 = type metadata accessor for UUID(0LL);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
      {
        uint64_t v21 = sub_100002274(qword_100410330);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      }

      *(void *)&v7[v9[11]]  = *(void *)&v8[v9[11]];
      uint64_t v22 = v9[12];
      uint64_t v23 = &v7[v22];
      int v24 = &v8[v22];
      uint64_t v25 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
      {
        uint64_t v27 = sub_100002274((uint64_t *)&unk_10040DCC0);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
      }

      else
      {
        uint64_t v28 = type metadata accessor for DispatchTimeInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v23, v24, v28);
        v23[*(int *)(v25 + 20)]  = v24[*(int *)(v25 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
      }

      uint64_t v29 = v9[13];
      unint64_t v30 = &v7[v29];
      unint64_t v31 = &v8[v29];
      *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
      *(_OWORD *)(v30 + 9)  = *(_OWORD *)(v31 + 9);
      swift_storeEnumTagMultiPayload(a1, a3, 40LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1001D8D54(uint64_t a1)
{
  v4[0]  = &unk_100358630;
  v4[1]  = &unk_100358648;
  v4[2]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[3] = &unk_100358660;
  v4[4]  = (char *)&value witness table for Builtin.Int16 + 64;
  void v4[5] = &unk_100358678;
  v4[6]  = &unk_100358690;
  v4[7]  = &unk_1003586A8;
  v4[8]  = &unk_1003586C0;
  void v4[9] = &unk_1003586D8;
  v4[10]  = &unk_1003586F0;
  v4[11]  = &unk_100358630;
  v4[12]  = &unk_100358708;
  v4[13]  = &unk_100358720;
  v4[14]  = &unk_100358738;
  v4[15]  = &unk_100358750;
  v4[16]  = &unk_100358768;
  v4[17]  = &unk_1003586F0;
  v4[18]  = &unk_1003586F0;
  v4[19]  = &unk_100358780;
  v4[20]  = &unk_100358798;
  v4[21]  = &unk_1003587B0;
  v4[22]  = &unk_1003587C8;
  v4[23]  = &unk_1003587E0;
  v4[24]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[25]  = &unk_100358708;
  v4[26]  = &unk_1003587F8;
  v4[27]  = &unk_100358810;
  v4[28]  = &unk_100358828;
  v4[29]  = &unk_100358840;
  v4[30]  = &unk_1003586F0;
  v4[31]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[32]  = &unk_100358708;
  v4[33]  = &unk_100358780;
  v4[34]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[35]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[36]  = &unk_100358858;
  v4[37]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[38]  = &unk_100358840;
  v4[39]  = &unk_100358870;
  uint64_t result = type metadata accessor for NANAttribute.CustomDeviceInformation(319LL);
  if (v3 <= 0x3F)
  {
    v4[40]  = *(void *)(result - 8) + 64LL;
    v4[41]  = &unk_100358708;
    v4[42]  = &unk_100358888;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 43LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.MasterIndication(_WORD *a1, int a2, int a3)
{
  else {
    int v3 = 4;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_1001D8F74 + 4 * byte_100351E7F[v4]))();
  }
  *a1  = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1001D8F54 + 4 * byte_100351E7A[v4]))();
}

uint64_t sub_1001D8F54(uint64_t result)
{
  *(_BYTE *)(result + 2)  = v1;
  return result;
}

uint64_t sub_1001D8F74(uint64_t result)
{
  *(_BYTE *)(result + 2)  = 0;
  return result;
}

uint64_t sub_1001D8F7C(uint64_t result)
{
  *(_DWORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_1001D8F84(uint64_t result)
{
  *(_WORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_1001D8F8C(uint64_t result)
{
  *(_WORD *)(result + 2)  = 0;
  return result;
}

uint64_t sub_1001D8F94(uint64_t result)
{
  *(_DWORD *)(result + 2)  = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.MasterIndication()
{
  return &type metadata for NANAttribute.MasterIndication;
}

ValueMetadata *type metadata accessor for NANAttribute.Cluster()
{
  return &type metadata for NANAttribute.Cluster;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceIDList()
{
  return &type metadata for NANAttribute.ServiceIDList;
}

uint64_t destroy for NANAttribute.ServiceDescriptor(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 24));
  if (*(unsigned __int8 *)(a1 + 50) != 255)
  {
    uint64_t v3 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
    uint64_t result = sub_1001062D4(*(void *)(a1 + 32), *(void *)(a1 + 40), v3, BYTE2(v3) & 1);
  }

  if (*(_BYTE *)(a1 + 56) != 4LL) {
    return sub_1000208D8(*(void *)(a1 + 64), *(void *)(a1 + 72));
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100020AFC(*(void *)a2, v5);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v6;
  unsigned __int8 v7 = *(_BYTE *)(a2 + 50);
  int v8 = *(unsigned __int16 *)(a2 + 48);
  swift_bridgeObjectRetain(v6);
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
  }

  else
  {
    uint64_t v9 = v8 & 0xFF00FFFF | (v7 << 16);
    uint64_t v10 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40);
    sub_1001CDEC4(v10, v11, v9, BYTE2(v9) & 1);
    *(void *)(a1 + 32)  = v10;
    *(void *)(a1 + 40)  = v11;
    *(_WORD *)(a1 + 48)  = v9;
    *(_BYTE *)(a1 + 50)  = BYTE2(v9) & 1;
  }

  uint64_t v12 = *(unsigned __int8 *)(a2 + 56);
  if (v12 == 4)
  {
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  }

  else
  {
    *(_BYTE *)(a1 + 56)  = v12;
    uint64_t v14 = *(void *)(a2 + 64);
    unint64_t v13 = *(void *)(a2 + 72);
    sub_100020AFC(v14, v13);
    *(void *)(a1 + 64)  = v14;
    *(void *)(a1 + 72)  = v13;
  }

  return a1;
}

uint64_t assignWithCopy for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100020AFC(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  sub_1000208D8(v6, v7);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  __int16 v8 = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  *(_WORD *)(a1 + 20)  = v8;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  unint64_t v11 = (__int128 *)(a1 + 32);
  uint64_t v12 = (__int128 *)(a2 + 32);
  int v13 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (BYTE2(v13) == 255)
    {
      __int128 v14 = *v12;
      *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
      *unint64_t v11 = v14;
    }

    else
    {
      uint64_t v16 = *(void *)(a2 + 32);
      unint64_t v17 = *(void *)(a2 + 40);
      sub_1001CDEC4(v16, v17, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v13) & 1);
      *(void *)(a1 + 32)  = v16;
      *(void *)(a1 + 40)  = v17;
      *(_WORD *)(a1 + 48)  = v13;
      *(_BYTE *)(a1 + 50)  = BYTE2(v13) & 1;
    }
  }

  else if (BYTE2(v13) == 255)
  {
    sub_1000225EC(a1 + 32, &qword_10040B218);
    int v15 = *(_DWORD *)(a2 + 47);
    *unint64_t v11 = *v12;
    *(_DWORD *)(a1 + 47)  = v15;
  }

  else
  {
    uint64_t v18 = *(void *)(a2 + 32);
    unint64_t v19 = *(void *)(a2 + 40);
    sub_1001CDEC4(v18, v19, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v13) & 1);
    uint64_t v20 = *(void *)(a1 + 32);
    unint64_t v21 = *(void *)(a1 + 40);
    char v22 = *(_BYTE *)(a1 + 50);
    *(void *)(a1 + 32)  = v18;
    *(void *)(a1 + 40)  = v19;
    uint64_t v23 = *(unsigned __int16 *)(a1 + 48);
    *(_WORD *)(a1 + 48)  = v13;
    *(_BYTE *)(a1 + 50)  = BYTE2(v13) & 1;
    sub_1001062D4(v20, v21, v23, v22);
  }

  int v24 = (__int128 *)(a1 + 56);
  uint64_t v26 = (__int128 *)(a2 + 56);
  uint64_t v25 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a1 + 56) == 4LL)
  {
    if (v25 == 4)
    {
      __int128 v27 = *v26;
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
      *int v24 = v27;
    }

    else
    {
      *(_BYTE *)(a1 + 56)  = v25;
      uint64_t v30 = *(void *)(a2 + 64);
      unint64_t v29 = *(void *)(a2 + 72);
      sub_100020AFC(v30, v29);
      *(void *)(a1 + 64)  = v30;
      *(void *)(a1 + 72)  = v29;
    }
  }

  else if (v25 == 4)
  {
    sub_10017D06C(a1 + 56);
    uint64_t v28 = *(void *)(a2 + 72);
    *int v24 = *v26;
    *(void *)(a1 + 72)  = v28;
  }

  else
  {
    *(_BYTE *)(a1 + 56)  = v25;
    uint64_t v32 = *(void *)(a2 + 64);
    unint64_t v31 = *(void *)(a2 + 72);
    sub_100020AFC(v32, v31);
    uint64_t v33 = *(void *)(a1 + 64);
    unint64_t v34 = *(void *)(a1 + 72);
    *(void *)(a1 + 64)  = v32;
    *(void *)(a1 + 72)  = v31;
    sub_1000208D8(v33, v34);
  }

  return a1;
}

__n128 initializeWithTake for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(__n128 *)(a1 + 16)  = result;
  *(_OWORD *)(a1 + 32)  = v3;
  return result;
}

uint64_t assignWithTake for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  sub_1000208D8(v4, v5);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  unint64_t v7 = (_OWORD *)(a2 + 32);
  unsigned int v8 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (HIWORD(v8) > 0xFEu)
  {
    sub_1000225EC(a1 + 32, &qword_10040B218);
LABEL_4:
    *(_OWORD *)(a1 + 32)  = *v7;
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
    goto LABEL_6;
  }

  uint64_t v9 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *v7;
  *(_WORD *)(a1 + 48)  = v8;
  *(_BYTE *)(a1 + 50)  = BYTE2(v8) & 1;
  sub_1001062D4(v10, v11, v9, BYTE2(v9) & 1);
LABEL_6:
  uint64_t v12 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a1 + 56) != 4LL)
  {
    if (v12 != 4)
    {
      *(_BYTE *)(a1 + 56)  = v12;
      uint64_t v13 = *(void *)(a1 + 64);
      unint64_t v14 = *(void *)(a1 + 72);
      *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
      sub_1000208D8(v13, v14);
      return a1;
    }

    sub_10017D06C(a1 + 56);
  }

  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_1000208D8(v2, v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptor( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72)  = 0LL;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80)  = 0;
    }
    if (a2) {
      *(void *)(result + 24)  = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor()
{
  return &type metadata for NANAttribute.ServiceDescriptor;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.Control()
{
  return &type metadata for NANAttribute.ServiceDescriptor.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.Control.ControlType()
{
  return &type metadata for NANAttribute.ServiceDescriptor.Control.ControlType;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.ServiceDescriptor.ServiceFilterControl( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1  = *a2;
  *(_BYTE *)(a1 + 8)  = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for NANAttribute.ServiceDescriptor.ServiceFilterControl(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8)  = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8)  = *((_BYTE *)a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceFilterControl()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl;
}

uint64_t destroy for NANAttribute.ServiceDescriptorExtension(uint64_t result)
{
  if (*(_BYTE *)(result + 16) != 4LL) {
    return sub_1000208D8(*(void *)(result + 24), *(void *)(result + 32));
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 4)
  {
    *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  }

  else
  {
    *(_BYTE *)(a1 + 16)  = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    unint64_t v5 = *(void *)(a2 + 32);
    sub_100020AFC(v4, v5);
    *(void *)(a1 + 24)  = v4;
    *(void *)(a1 + 32)  = v5;
  }

  return a1;
}

uint64_t assignWithCopy for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  int v3 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4)  = v3;
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v4 = a1 + 16;
  uint64_t v6 = (__int128 *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) == 4LL)
  {
    if (v5 == 4)
    {
      __int128 v7 = *v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v4 = v7;
    }

    else
    {
      *(_BYTE *)(a1 + 16)  = v5;
      uint64_t v9 = *(void *)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      sub_100020AFC(v9, v10);
      *(void *)(a1 + 24)  = v9;
      *(void *)(a1 + 32)  = v10;
    }
  }

  else if (v5 == 4)
  {
    sub_10017D06C(a1 + 16);
    uint64_t v8 = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v4 = *v6;
    *(void *)(v4 + 16)  = v8;
  }

  else
  {
    *(_BYTE *)(a1 + 16)  = v5;
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a2 + 32);
    sub_100020AFC(v11, v12);
    uint64_t v13 = *(void *)(a1 + 24);
    unint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24)  = v11;
    *(void *)(a1 + 32)  = v12;
    sub_1000208D8(v13, v14);
  }

  return a1;
}

uint64_t assignWithTake for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v3 = a1 + 16;
  uint64_t v5 = a2 + 16;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) != 4LL)
  {
    if (v4 != 4)
    {
      *(_BYTE *)(a1 + 16)  = v4;
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v7 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
      sub_1000208D8(v6, v7);
      return a1;
    }

    sub_10017D06C(a1 + 16);
  }

  *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
  *(void *)(v3 + 16)  = *(void *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptorExtension(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 252);
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 16);
  }
  int v4 = v3 - 5;
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptorExtension( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 40)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 40)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16)  = a2 + 4;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.Control()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.RangeLimit()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit;
}

ValueMetadata *type metadata accessor for NANAttribute.ConnectionCapability()
{
  return &type metadata for NANAttribute.ConnectionCapability;
}

uint64_t destroy for NANAttribute.WLANInfrastructure(uint64_t a1)
{
  return sub_1000208D8(*(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t initializeWithCopy for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_100020AFC(v4, v5);
  *(void *)(a1 + 24)  = v4;
  *(void *)(a1 + 32)  = v5;
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11)  = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_100020AFC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v4;
  *(void *)(a1 + 32)  = v5;
  sub_1000208D8(v6, v7);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_1000208D8(v4, v5);
  *(_BYTE *)(a1 + 40)  = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.WLANInfrastructure(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 18);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.WLANInfrastructure( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 40)  = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 18)  = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure()
{
  return &type metadata for NANAttribute.WLANInfrastructure;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure.DeviceRole()
{
  return &type metadata for NANAttribute.WLANInfrastructure.DeviceRole;
}

uint64_t initializeWithCopy for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100020AFC(v3, v4);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100020AFC(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_1000208D8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.P2POperation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.P2POperation( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16)  = 0LL;
    *(void *)(result + 24)  = 0LL;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 32)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 32)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 10)  = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation()
{
  return &type metadata for NANAttribute.P2POperation;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation.DeviceRole()
{
  return &type metadata for NANAttribute.P2POperation.DeviceRole;
}

uint64_t initializeWithCopy for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  uint64_t v3 = *(void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 32);
  sub_100020AFC(v3, v4);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11)  = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  uint64_t v3 = *(void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 32);
  sub_100020AFC(v3, v4);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_1000208D8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.IBSS(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 18);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.IBSS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 40)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 40)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 18)  = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.IBSS()
{
  return &type metadata for NANAttribute.IBSS;
}

uint64_t destroy for NANAttribute.Mesh(uint64_t a1)
{
  return sub_1000208D8(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t initializeWithCopy for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100020AFC(v4, v5);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  sub_100020AFC(v7, v6);
  *(void *)(a1 + 32)  = v7;
  *(void *)(a1 + 40)  = v6;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100020AFC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  sub_1000208D8(v6, v7);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  sub_100020AFC(v9, v8);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32)  = v9;
  *(void *)(a1 + 40)  = v8;
  sub_1000208D8(v10, v11);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_1000208D8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  sub_1000208D8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.Mesh(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Mesh(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40)  = 0LL;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 48)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 48)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 10)  = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Mesh()
{
  return &type metadata for NANAttribute.Mesh;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherServiceDiscovery()
{
  return &type metadata for NANAttribute.FurtherServiceDiscovery;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherAvailabilityMap()
{
  return &type metadata for NANAttribute.FurtherAvailabilityMap;
}

uint64_t sub_1001DA2E4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Ranging(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Ranging(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_1000208D8(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.Ranging()
{
  return &type metadata for NANAttribute.Ranging;
}

ValueMetadata *type metadata accessor for NANAttribute.ClusterDiscovery()
{
  return &type metadata for NANAttribute.ClusterDiscovery;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.DeviceCapability(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7)  = *(_DWORD *)((char *)a2 + 7);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DeviceCapability(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceCapability(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 10)  = 0;
    *(_WORD *)(result + 8)  = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 11)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability()
{
  return &type metadata for NANAttribute.DeviceCapability;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation()
{
  return &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.OperationMode()
{
  return &type metadata for NANAttribute.DeviceCapability.OperationMode;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.AnntenaCount()
{
  return &type metadata for NANAttribute.DeviceCapability.AnntenaCount;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.Capabilities()
{
  return &type metadata for NANAttribute.DeviceCapability.Capabilities;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz;
}

uint64_t destroy for NANAttribute.Datapath(uint64_t result)
{
  if (*(_BYTE *)(result + 24) != 4LL) {
    return sub_1000208D8(*(void *)(result + 32), *(void *)(result + 40));
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  uint64_t v3 = *(unsigned __int8 *)(a2 + 24);
  if (v3 == 4)
  {
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  }

  else
  {
    *(_BYTE *)(a1 + 24)  = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    unint64_t v5 = *(void *)(a2 + 40);
    sub_100020AFC(v4, v5);
    *(void *)(a1 + 32)  = v4;
    *(void *)(a1 + 40)  = v5;
  }

  return a1;
}

uint64_t assignWithCopy for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
  int v3 = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = v3;
  uint64_t v4 = a1 + 24;
  unint64_t v6 = (__int128 *)(a2 + 24);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) == 4LL)
  {
    if (v5 == 4)
    {
      __int128 v7 = *v6;
      *(void *)(a1 + 40)  = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v4 = v7;
    }

    else
    {
      *(_BYTE *)(a1 + 24)  = v5;
      uint64_t v9 = *(void *)(a2 + 32);
      unint64_t v10 = *(void *)(a2 + 40);
      sub_100020AFC(v9, v10);
      *(void *)(a1 + 32)  = v9;
      *(void *)(a1 + 40)  = v10;
    }
  }

  else if (v5 == 4)
  {
    sub_10017D06C(a1 + 24);
    uint64_t v8 = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v4 = *v6;
    *(void *)(v4 + 16)  = v8;
  }

  else
  {
    *(_BYTE *)(a1 + 24)  = v5;
    uint64_t v11 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40);
    sub_100020AFC(v11, v12);
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 32)  = v11;
    *(void *)(a1 + 40)  = v12;
    sub_1000208D8(v13, v14);
  }

  return a1;
}

uint64_t assignWithTake for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v3 = a1 + 24;
  uint64_t v5 = a2 + 24;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) != 4LL)
  {
    if (v4 != 4)
    {
      *(_BYTE *)(a1 + 24)  = v4;
      uint64_t v6 = *(void *)(a1 + 32);
      unint64_t v7 = *(void *)(a1 + 40);
      *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
      sub_1000208D8(v6, v7);
      return a1;
    }

    sub_10017D06C(a1 + 24);
  }

  *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
  *(void *)(v3 + 16)  = *(void *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.Datapath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 252);
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 24);
  }
  int v4 = v3 - 5;
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Datapath( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 40)  = 0LL;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 48)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 48)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24)  = a2 + 4;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath()
{
  return &type metadata for NANAttribute.Datapath;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.AttributeType()
{
  return &type metadata for NANAttribute.Datapath.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.Status()
{
  return &type metadata for NANAttribute.Datapath.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.Control()
{
  return &type metadata for NANAttribute.Datapath.Control;
}

uint64_t destroy for NANAttribute.DatapathExtension(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 32);
  if (v2 >> 60 != 15) {
    __n128 result = sub_1000208D8(*(void *)(result + 24), v2);
  }
  if (*(_BYTE *)(v1 + 40) != 4LL) {
    return sub_1000208D8(*(void *)(v1 + 48), *(void *)(v1 + 56));
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  int v4 = (uint64_t *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)v4;
  }

  else
  {
    uint64_t v6 = *v4;
    sub_100020AFC(*v4, *(void *)(a2 + 32));
    *(void *)(a1 + 24)  = v6;
    *(void *)(a1 + 32)  = v5;
  }

  uint64_t v7 = *(unsigned __int8 *)(a2 + 40);
  if (v7 == 4)
  {
    *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  }

  else
  {
    *(_BYTE *)(a1 + 40)  = v7;
    uint64_t v9 = *(void *)(a2 + 48);
    unint64_t v8 = *(void *)(a2 + 56);
    sub_100020AFC(v9, v8);
    *(void *)(a1 + 48)  = v9;
    *(void *)(a1 + 56)  = v8;
  }

  return a1;
}

uint64_t assignWithCopy for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9)  = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10)  = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
  int v4 = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = v4;
  unint64_t v5 = (_OWORD *)(a1 + 24);
  uint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15LL)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100020AFC(*v6, *(void *)(a2 + 32));
      *(void *)(a1 + 24)  = v8;
      *(void *)(a1 + 32)  = v7;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v7 >> 60 == 15)
  {
    sub_1001DAB38(a1 + 24);
LABEL_6:
    *unint64_t v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }

  uint64_t v9 = *v6;
  sub_100020AFC(*v6, *(void *)(a2 + 32));
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v9;
  *(void *)(a1 + 32)  = v7;
  sub_1000208D8(v10, v11);
LABEL_8:
  unint64_t v12 = (__int128 *)(a1 + 40);
  unint64_t v14 = (__int128 *)(a2 + 40);
  uint64_t v13 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) == 4LL)
  {
    if (v13 == 4)
    {
      __int128 v15 = *v14;
      *(void *)(a1 + 56)  = *(void *)(a2 + 56);
      *unint64_t v12 = v15;
    }

    else
    {
      *(_BYTE *)(a1 + 40)  = v13;
      uint64_t v18 = *(void *)(a2 + 48);
      unint64_t v17 = *(void *)(a2 + 56);
      sub_100020AFC(v18, v17);
      *(void *)(a1 + 48)  = v18;
      *(void *)(a1 + 56)  = v17;
    }
  }

  else if (v13 == 4)
  {
    sub_10017D06C(a1 + 40);
    uint64_t v16 = *(void *)(a2 + 56);
    *unint64_t v12 = *v14;
    *(void *)(a1 + 56)  = v16;
  }

  else
  {
    *(_BYTE *)(a1 + 40)  = v13;
    uint64_t v20 = *(void *)(a2 + 48);
    unint64_t v19 = *(void *)(a2 + 56);
    sub_100020AFC(v20, v19);
    uint64_t v21 = *(void *)(a1 + 48);
    unint64_t v22 = *(void *)(a1 + 56);
    *(void *)(a1 + 48)  = v20;
    *(void *)(a1 + 56)  = v19;
    sub_1000208D8(v21, v22);
  }

  return a1;
}

uint64_t sub_1001DAB38(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  int v4 = (_OWORD *)(a1 + 24);
  unint64_t v5 = (_OWORD *)(a2 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 32);
  if (v7 >> 60 == 15)
  {
    sub_1001DAB38(a1 + 24);
LABEL_4:
    *int v4 = *v5;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)v5;
  *(void *)(a1 + 32)  = v7;
  sub_1000208D8(v8, v6);
LABEL_6:
  uint64_t v9 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) != 4LL)
  {
    if (v9 != 4)
    {
      *(_BYTE *)(a1 + 40)  = v9;
      uint64_t v10 = *(void *)(a1 + 48);
      unint64_t v11 = *(void *)(a1 + 56);
      *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
      sub_1000208D8(v10, v11);
      return a1;
    }

    sub_10017D06C(a1 + 40);
  }

  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DatapathExtension(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 252);
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 40);
  }
  int v4 = v3 - 5;
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DatapathExtension( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 56)  = 0LL;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 64)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 64)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40)  = a2 + 4;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension()
{
  return &type metadata for NANAttribute.DatapathExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension.Control()
{
  return &type metadata for NANAttribute.DatapathExtension.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension.ServiceInfoType()
{
  return &type metadata for NANAttribute.DatapathExtension.ServiceInfoType;
}

uint64_t sub_1001DAD38(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Availability(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Availability(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability()
{
  return &type metadata for NANAttribute.Availability;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability.Control()
{
  return &type metadata for NANAttribute.Availability.Control;
}

uint64_t sub_1001DAE20(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DataCluster(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.DataCluster(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster()
{
  return &type metadata for NANAttribute.DataCluster;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster.Control()
{
  return &type metadata for NANAttribute.DataCluster.Control;
}

uint64_t initializeWithCopy for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8)  = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink()
{
  return &type metadata for NANAttribute.DeviceLink;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Control()
{
  return &type metadata for NANAttribute.DeviceLink.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Control.SetupReason()
{
  return &type metadata for NANAttribute.DeviceLink.Control.SetupReason;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.AttributeType()
{
  return &type metadata for NANAttribute.DeviceLink.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Status()
{
  return &type metadata for NANAttribute.DeviceLink.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLinkQoS()
{
  return &type metadata for NANAttribute.DeviceLinkQoS;
}

__n128 initializeWithCopy for NANAttribute.UnalignedSchedule(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14)  = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.UnalignedSchedule(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 29);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.UnalignedSchedule( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8)  = 0LL;
    *(void *)(result + 16)  = 0LL;
    *(_WORD *)(result + 28)  = 0;
    *(_DWORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 30)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 30)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 29)  = ~(_BYTE)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule()
{
  return &type metadata for NANAttribute.UnalignedSchedule;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowControl()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.RangingInformation(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4)  = *((_BYTE *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingInformation()
{
  return &type metadata for NANAttribute.RangingInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingInformation.LocationInformation()
{
  return &type metadata for NANAttribute.RangingInformation.LocationInformation;
}

uint64_t sub_1001DB1D4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4)  = v3;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.RangingSetup(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  int v3 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4)  = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for NANAttribute.RangingSetup(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4)  = v3;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup()
{
  return &type metadata for NANAttribute.RangingSetup;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.AttributeType()
{
  return &type metadata for NANAttribute.RangingSetup.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.Status()
{
  return &type metadata for NANAttribute.RangingSetup.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.Control()
{
  return &type metadata for NANAttribute.RangingSetup.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.FineTimingMeasurementParameters()
{
  return &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters;
}

ValueMetadata *type metadata accessor for NANAttribute.ElementContainer()
{
  return &type metadata for NANAttribute.ElementContainer;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedWLANInfrastructure(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ExtendedWLANInfrastructure( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16)  = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 20)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 20)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 12)  = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedWLANInfrastructure()
{
  return &type metadata for NANAttribute.ExtendedWLANInfrastructure;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedP2POperation()
{
  return &type metadata for NANAttribute.ExtendedP2POperation;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedIBSS()
{
  return &type metadata for NANAttribute.ExtendedIBSS;
}

uint64_t initializeWithCopy for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4)  = v3;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100020AFC(v4, v5);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6)  = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7)  = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100020AFC(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_1000208D8(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedMesh()
{
  return &type metadata for NANAttribute.ExtendedMesh;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport;
}

void *initializeBufferWithCopyOfBuffer for NANAttribute.FineTimingMeasurementRangeReport.Entry( void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6)  = *(uint64_t *)((char *)a2 + 6);
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.Entry()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation()
{
  return &type metadata for NANAttribute.CipherSuiteInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CipherSuiteInformation.CipherSuite( unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 65287 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65287 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65287;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }

uint64_t storeEnumTagSinglePayload for NANAttribute.CipherSuiteInformation.CipherSuite( _WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65287 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65287 < 0xFF0000) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1001DB68C + 4 * byte_100351E89[v4]))();
  }
  *a1  = a2 - 249;
  return ((uint64_t (*)(void))((char *)sub_1001DB6C0 + 4 * byte_100351E84[v4]))();
}

uint64_t sub_1001DB6C0(uint64_t result)
{
  *(_BYTE *)(result + 2)  = v1;
  return result;
}

uint64_t sub_1001DB6C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2)  = 0;
  if (a2) {
    JUMPOUT(0x1001DB6D0LL);
  }
  return result;
}

uint64_t sub_1001DB6DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2)  = 0;
  if (!a2) {
    JUMPOUT(0x1001DB6E4LL);
  }
  *(_BYTE *)__n128 result = a2 + 7;
  return result;
}

uint64_t sub_1001DB6E8(uint64_t result)
{
  *(_DWORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_1001DB6F0(uint64_t result)
{
  *(_WORD *)(result + 2)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CipherSuite()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation()
{
  return &type metadata for NANAttribute.SecurityContextInformation;
}

uint64_t assignWithCopy for NANAttribute.SecurityContextInformation.SecurityContextIdentifier( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier()
{
  return &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType()
{
  return &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType;
}

ValueMetadata *type metadata accessor for NANAttribute.SharedKeyDescriptor()
{
  return &type metadata for NANAttribute.SharedKeyDescriptor;
}

uint64_t initializeWithCopy for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange()
{
  return &type metadata for NANAttribute.MulticastScheduleChange;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange.Control()
{
  return &type metadata for NANAttribute.MulticastScheduleChange.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.PublicAvailability()
{
  return &type metadata for NANAttribute.PublicAvailability;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution()
{
  return &type metadata for NANAttribute.PairingIdentityResolution;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution.CipherVersion()
{
  return &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion;
}

uint64_t destroy for NANAttribute.PairingBootstrapping(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 32);
  if (v1 >> 60 != 15) {
    return sub_1000208D8(*(void *)(result + 24), v1);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    __int128 v7 = *(_OWORD *)(a2 + 24);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24)  = v7;
  }

  else
  {
    *(void *)uint64_t v4 = *(void *)v5;
    *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    sub_100020AFC(v8, v6);
    *(void *)(a1 + 24)  = v8;
    *(void *)(a1 + 32)  = v6;
  }

  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  if (*(void *)(a1 + 32) >> 60 == 15LL)
  {
    if (*(void *)(a2 + 32) >> 60 == 15LL)
    {
      __int128 v6 = *(_OWORD *)(a2 + 24);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 24)  = v6;
    }

    else
    {
      uint64_t v8 = *(void *)v5;
      *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
      *(void *)uint64_t v4 = v8;
      uint64_t v9 = *(void *)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      sub_100020AFC(v9, v10);
      *(void *)(a1 + 24)  = v9;
      *(void *)(a1 + 32)  = v10;
    }
  }

  else if (*(void *)(a2 + 32) >> 60 == 15LL)
  {
    sub_1001DBA70(a1 + 8);
    __int128 v7 = v5[1];
    *uint64_t v4 = *v5;
    v4[1]  = v7;
  }

  else
  {
    uint64_t v11 = *(void *)v5;
    *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
    *(void *)uint64_t v4 = v11;
    uint64_t v12 = *(void *)(a2 + 24);
    unint64_t v13 = *(void *)(a2 + 32);
    sub_100020AFC(v12, v13);
    uint64_t v14 = *(void *)(a1 + 24);
    unint64_t v15 = *(void *)(a1 + 32);
    *(void *)(a1 + 24)  = v12;
    *(void *)(a1 + 32)  = v13;
    sub_1000208D8(v14, v15);
  }

  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t sub_1001DBA70(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >> 60 != 15)
    {
      *(void *)uint64_t v4 = *(void *)v5;
      *(_BYTE *)(a1 + 16)  = *(_BYTE *)(v5 + 8);
      uint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(void *)(a1 + 32)  = v7;
      sub_1000208D8(v9, v6);
      goto LABEL_6;
    }

    sub_1001DBA70(a1 + 8);
  }

  __int128 v8 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16)  = v8;
LABEL_6:
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.PairingBootstrapping(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF3 && *(_BYTE *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 243);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 2);
  BOOL v4 = v3 >= 0xE;
  int v5 = v3 - 14;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.PairingBootstrapping( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_WORD *)(result + 40)  = 0;
    *(void *)__n128 result = a2 - 243;
    if (a3 >= 0xF3) {
      *(_BYTE *)(result + 42)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xF3) {
      *(_BYTE *)(result + 42)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 2)  = a2 + 13;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping()
{
  return &type metadata for NANAttribute.PairingBootstrapping;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.PairingType()
{
  return &type metadata for NANAttribute.PairingBootstrapping.PairingType;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Status()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Method()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Method;
}

uint64_t initializeWithCopy for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100020AFC(v3, v4);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_BYTE *)(a1 + 8)  = *((_BYTE *)a2 + 8);
  *(void *)a1  = v3;
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  sub_100020AFC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  sub_1000208D8(v6, v7);
  return a1;
}

uint64_t assignWithTake for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_BYTE *)(a1 + 8)  = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_1000208D8(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Comeback()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Comeback;
}

uint64_t sub_1001DBD0C(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100020AFC(v3, v4);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.VendorSpecific()
{
  return &type metadata for NANAttribute.VendorSpecific;
}

void *initializeBufferWithCopyOfBuffer for NANAttribute.CustomDeviceInformation( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v15 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    *(_DWORD *)(a1 + 4)  = *((_DWORD *)a2 + 1);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    *(_BYTE *)uint64_t v6 = *((_BYTE *)a2 + v5);
    *(_WORD *)(v6 + 1)  = *(_WORD *)((char *)a2 + v5 + 1);
    __int128 v8 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v9 = v8[6];
    unint64_t v10 = (void *)(v6 + v9);
    uint64_t v11 = (const void *)(v7 + v9);
    uint64_t v12 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100002274((uint64_t *)&unk_10040D470);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v16 = v8[7];
    uint64_t v17 = v6 + v16;
    uint64_t v18 = (uint64_t *)(v7 + v16);
    unint64_t v19 = v18[1];
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    }

    else
    {
      uint64_t v20 = *v18;
      sub_100020AFC(*v18, v18[1]);
      *(void *)uint64_t v17 = v20;
      *(void *)(v17 + 8)  = v19;
    }

    uint64_t v21 = v8[8];
    uint64_t v22 = v6 + v21;
    uint64_t v23 = (uint64_t *)(v7 + v21);
    unint64_t v24 = v23[1];
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    }

    else
    {
      uint64_t v25 = *v23;
      sub_100020AFC(*v23, v23[1]);
      *(void *)uint64_t v22 = v25;
      *(void *)(v22 + 8)  = v24;
    }

    uint64_t v26 = v8[9];
    uint64_t v27 = v6 + v26;
    uint64_t v28 = (uint64_t *)(v7 + v26);
    unint64_t v29 = v28[1];
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    }

    else
    {
      uint64_t v30 = *v28;
      sub_100020AFC(*v28, v28[1]);
      *(void *)uint64_t v27 = v30;
      *(void *)(v27 + 8)  = v29;
    }

    uint64_t v31 = v8[10];
    uint64_t v32 = (void *)(v6 + v31);
    uint64_t v33 = (const void *)(v7 + v31);
    uint64_t v34 = type metadata accessor for UUID(0LL);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
    {
      uint64_t v36 = sub_100002274(qword_100410330);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
    }

    uint64_t v37 = v8[11];
    uint64_t v38 = *(void *)(v7 + v37);
    *(void *)(v6 + v37)  = v38;
    uint64_t v39 = v8[12];
    uint64_t v40 = (void *)(v6 + v39);
    __int128 v41 = (const void *)(v7 + v39);
    uint64_t v42 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain(v38);
    if (v44(v41, 1LL, v42))
    {
      uint64_t v45 = sub_100002274((uint64_t *)&unk_10040DCC0);
      memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64LL));
    }

    else
    {
      uint64_t v46 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v46 - 8) + 16LL))(v40, v41, v46);
      *((_BYTE *)v40 + *(int *)(v42 + 20))  = *((_BYTE *)v41 + *(int *)(v42 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
    }

    uint64_t v47 = v8[13];
    uint64_t v48 = (_OWORD *)(v6 + v47);
    uint64_t v49 = (_OWORD *)(v7 + v47);
    *uint64_t v48 = *v49;
    *(_OWORD *)((char *)v48 + 9)  = *(_OWORD *)((char *)v49 + 9);
  }

  return v3;
}

uint64_t destroy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v4 = v2 + v3[6];
  uint64_t v5 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = (uint64_t *)(v2 + v3[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_1000208D8(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(v2 + v3[8]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_1000208D8(*v9, v10);
  }
  uint64_t v11 = (uint64_t *)(v2 + v3[9]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_1000208D8(*v11, v12);
  }
  uint64_t v13 = v2 + v3[10];
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  swift_bridgeObjectRelease(*(void *)(v2 + v3[11]));
  uint64_t v16 = v2 + v3[12];
  uint64_t v17 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v16, 1LL, v17);
  if (!(_DWORD)result)
  {
    uint64_t v19 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(v16, v19);
  }

  return result;
}

uint64_t initializeWithCopy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_BYTE *)uint64_t v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1)  = *(_WORD *)(a2 + v4 + 1);
  uint64_t v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(v5 + v8);
  unint64_t v10 = (const void *)(v6 + v8);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = v7[7];
  uint64_t v15 = v5 + v14;
  uint64_t v16 = (uint64_t *)(v6 + v14);
  unint64_t v17 = v16[1];
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }

  else
  {
    uint64_t v18 = *v16;
    sub_100020AFC(*v16, v16[1]);
    *(void *)uint64_t v15 = v18;
    *(void *)(v15 + 8)  = v17;
  }

  uint64_t v19 = v7[8];
  uint64_t v20 = v5 + v19;
  uint64_t v21 = (uint64_t *)(v6 + v19);
  unint64_t v22 = v21[1];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  }

  else
  {
    uint64_t v23 = *v21;
    sub_100020AFC(*v21, v21[1]);
    *(void *)uint64_t v20 = v23;
    *(void *)(v20 + 8)  = v22;
  }

  uint64_t v24 = v7[9];
  uint64_t v25 = v5 + v24;
  uint64_t v26 = (uint64_t *)(v6 + v24);
  unint64_t v27 = v26[1];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  }

  else
  {
    uint64_t v28 = *v26;
    sub_100020AFC(*v26, v26[1]);
    *(void *)uint64_t v25 = v28;
    *(void *)(v25 + 8)  = v27;
  }

  uint64_t v29 = v7[10];
  uint64_t v30 = (void *)(v5 + v29);
  uint64_t v31 = (const void *)(v6 + v29);
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_100002274(qword_100410330);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  uint64_t v35 = v7[11];
  uint64_t v36 = *(void *)(v6 + v35);
  *(void *)(v5 + v35)  = v36;
  uint64_t v37 = v7[12];
  uint64_t v38 = (void *)(v5 + v37);
  uint64_t v39 = (const void *)(v6 + v37);
  uint64_t v40 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain(v36);
  if (v42(v39, 1LL, v40))
  {
    uint64_t v43 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64LL));
  }

  else
  {
    uint64_t v44 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v44 - 8) + 16LL))(v38, v39, v44);
    *((_BYTE *)v38 + *(int *)(v40 + 20))  = *((_BYTE *)v39 + *(int *)(v40 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
  }

  uint64_t v45 = v7[13];
  uint64_t v46 = (_OWORD *)(v5 + v45);
  uint64_t v47 = (_OWORD *)(v6 + v45);
  *uint64_t v46 = *v47;
  *(_OWORD *)((char *)v46 + 9)  = *(_OWORD *)((char *)v47 + 9);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_BYTE *)uint64_t v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1)  = *(_WORD *)(a2 + v4 + 1);
  uint64_t v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(v5 + v8);
  unint64_t v10 = (void *)(v6 + v8);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = v7[7];
  uint64_t v18 = (uint64_t *)(v5 + v17);
  uint64_t v19 = (uint64_t *)(v6 + v17);
  unint64_t v20 = *(void *)(v6 + v17 + 8);
  if (*(void *)(v5 + v17 + 8) >> 60 == 15LL)
  {
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v19;
      sub_100020AFC(v21, v20);
      *uint64_t v18 = v21;
      v18[1]  = v20;
      goto LABEL_14;
    }

    goto LABEL_12;
  }

  if (v20 >> 60 == 15)
  {
    sub_1001682A8((uint64_t)v18);
LABEL_12:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    goto LABEL_14;
  }

  uint64_t v22 = *v19;
  sub_100020AFC(v22, v20);
  uint64_t v23 = *v18;
  unint64_t v24 = v18[1];
  *uint64_t v18 = v22;
  v18[1]  = v20;
  sub_1000208D8(v23, v24);
LABEL_14:
  uint64_t v25 = v7[8];
  uint64_t v26 = (uint64_t *)(v5 + v25);
  unint64_t v27 = (uint64_t *)(v6 + v25);
  unint64_t v28 = *(void *)(v6 + v25 + 8);
  if (*(void *)(v5 + v25 + 8) >> 60 == 15LL)
  {
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = *v27;
      sub_100020AFC(v29, v28);
      *uint64_t v26 = v29;
      v26[1]  = v28;
      goto LABEL_21;
    }

    goto LABEL_19;
  }

  if (v28 >> 60 == 15)
  {
    sub_1001682A8((uint64_t)v26);
LABEL_19:
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    goto LABEL_21;
  }

  uint64_t v30 = *v27;
  sub_100020AFC(v30, v28);
  uint64_t v31 = *v26;
  unint64_t v32 = v26[1];
  *uint64_t v26 = v30;
  v26[1]  = v28;
  sub_1000208D8(v31, v32);
LABEL_21:
  uint64_t v33 = v7[9];
  uint64_t v34 = (uint64_t *)(v5 + v33);
  uint64_t v35 = (uint64_t *)(v6 + v33);
  unint64_t v36 = *(void *)(v6 + v33 + 8);
  if (*(void *)(v5 + v33 + 8) >> 60 == 15LL)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_100020AFC(v37, v36);
      *uint64_t v34 = v37;
      v34[1]  = v36;
      goto LABEL_28;
    }

    goto LABEL_26;
  }

  if (v36 >> 60 == 15)
  {
    sub_1001682A8((uint64_t)v34);
LABEL_26:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_28;
  }

  uint64_t v38 = *v35;
  sub_100020AFC(v38, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1]  = v36;
  sub_1000208D8(v39, v40);
LABEL_28:
  uint64_t v41 = v7[10];
  uint64_t v42 = (void *)(v5 + v41);
  uint64_t v43 = (void *)(v6 + v41);
  uint64_t v44 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1LL, v44);
  int v48 = v46(v43, 1LL, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(void *, void *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0LL, 1LL, v44);
      goto LABEL_34;
    }

    goto LABEL_33;
  }

  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v45 + 8))(v42, v44);
LABEL_33:
    uint64_t v49 = sub_100002274(qword_100410330);
    memcpy(v42, v43, *(void *)(*(void *)(v49 - 8) + 64LL));
    goto LABEL_34;
  }

  (*(void (**)(void *, void *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_34:
  uint64_t v50 = v7[11];
  uint64_t v51 = *(void *)(v6 + v50);
  uint64_t v52 = *(void *)(v5 + v50);
  *(void *)(v5 + v50)  = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  uint64_t v53 = v7[12];
  unint64_t v54 = (_BYTE *)(v5 + v53);
  uint64_t v55 = (_BYTE *)(v6 + v53);
  uint64_t v56 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1LL, v56);
  int v60 = v58(v55, 1LL, v56);
  if (!v59)
  {
    if (!v60)
    {
      uint64_t v68 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v68 - 8) + 24LL))(v54, v55, v68);
      v54[*(int *)(v56 + 20)]  = v55[*(int *)(v56 + 20)];
      goto LABEL_40;
    }

    sub_10005802C((uint64_t)v54, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_39;
  }

  if (v60)
  {
LABEL_39:
    uint64_t v62 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v54, v55, *(void *)(*(void *)(v62 - 8) + 64LL));
    goto LABEL_40;
  }

  uint64_t v61 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v61 - 8) + 16LL))(v54, v55, v61);
  v54[*(int *)(v56 + 20)]  = v55[*(int *)(v56 + 20)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0LL, 1LL, v56);
LABEL_40:
  uint64_t v63 = v7[13];
  uint64_t v64 = (_OWORD *)(v5 + v63);
  v65  = (__int128 *)(v6 + v63);
  __int128 v66 = *v65;
  *(_OWORD *)((char *)v64 + 9)  = *(__int128 *)((char *)v65 + 9);
  *uint64_t v64 = v66;
  return a1;
}

uint64_t initializeWithTake for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_BYTE *)uint64_t v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1)  = *(_WORD *)(a2 + v4 + 1);
  uint64_t v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(v5 + v8);
  unint64_t v10 = (const void *)(v6 + v8);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  *(_OWORD *)(v5 + v7[7])  = *(_OWORD *)(v6 + v7[7]);
  *(_OWORD *)(v5 + v7[8])  = *(_OWORD *)(v6 + v7[8]);
  *(_OWORD *)(v5 + v7[9])  = *(_OWORD *)(v6 + v7[9]);
  uint64_t v14 = v7[10];
  int v15 = (void *)(v5 + v14);
  uint64_t v16 = (const void *)(v6 + v14);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100002274(qword_100410330);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  *(void *)(v5 + v7[11])  = *(void *)(v6 + v7[11]);
  uint64_t v20 = v7[12];
  uint64_t v21 = (void *)(v5 + v20);
  uint64_t v22 = (const void *)(v6 + v20);
  uint64_t v23 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    uint64_t v26 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v21, v22, v26);
    *((_BYTE *)v21 + *(int *)(v23 + 20))  = *((_BYTE *)v22 + *(int *)(v23 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  uint64_t v27 = v7[13];
  unint64_t v28 = (_OWORD *)(v5 + v27);
  uint64_t v29 = (_OWORD *)(v6 + v27);
  *unint64_t v28 = *v29;
  *(_OWORD *)((char *)v28 + 9)  = *(_OWORD *)((char *)v29 + 9);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_BYTE *)uint64_t v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1)  = *(_WORD *)(a2 + v4 + 1);
  uint64_t v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(v5 + v8);
  unint64_t v10 = (void *)(v6 + v8);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = v7[7];
  uint64_t v18 = v5 + v17;
  uint64_t v19 = v6 + v17;
  unint64_t v20 = *(void *)(v5 + v17 + 8);
  if (v20 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    goto LABEL_12;
  }

  unint64_t v21 = *(void *)(v19 + 8);
  if (v21 >> 60 == 15)
  {
    sub_1001682A8(v18);
    goto LABEL_10;
  }

  uint64_t v22 = *(void *)v18;
  *(void *)uint64_t v18 = *(void *)v19;
  *(void *)(v18 + 8)  = v21;
  sub_1000208D8(v22, v20);
LABEL_12:
  uint64_t v23 = v7[8];
  uint64_t v24 = v5 + v23;
  uint64_t v25 = v6 + v23;
  unint64_t v26 = *(void *)(v5 + v23 + 8);
  if (v26 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_17;
  }

  unint64_t v27 = *(void *)(v25 + 8);
  if (v27 >> 60 == 15)
  {
    sub_1001682A8(v24);
    goto LABEL_15;
  }

  uint64_t v28 = *(void *)v24;
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8)  = v27;
  sub_1000208D8(v28, v26);
LABEL_17:
  uint64_t v29 = v7[9];
  uint64_t v30 = v5 + v29;
  uint64_t v31 = v6 + v29;
  unint64_t v32 = *(void *)(v5 + v29 + 8);
  if (v32 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    goto LABEL_22;
  }

  unint64_t v33 = *(void *)(v31 + 8);
  if (v33 >> 60 == 15)
  {
    sub_1001682A8(v30);
    goto LABEL_20;
  }

  uint64_t v34 = *(void *)v30;
  *(void *)uint64_t v30 = *(void *)v31;
  *(void *)(v30 + 8)  = v33;
  sub_1000208D8(v34, v32);
LABEL_22:
  uint64_t v35 = v7[10];
  unint64_t v36 = (void *)(v5 + v35);
  uint64_t v37 = (void *)(v6 + v35);
  uint64_t v38 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  unint64_t v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1LL, v38);
  int v42 = v40(v37, 1LL, v38);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
      goto LABEL_28;
    }

    goto LABEL_27;
  }

  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
LABEL_27:
    uint64_t v43 = sub_100002274(qword_100410330);
    memcpy(v36, v37, *(void *)(*(void *)(v43 - 8) + 64LL));
    goto LABEL_28;
  }

  (*(void (**)(void *, void *, uint64_t))(v39 + 40))(v36, v37, v38);
LABEL_28:
  uint64_t v44 = v7[11];
  uint64_t v45 = *(void *)(v5 + v44);
  *(void *)(v5 + v44)  = *(void *)(v6 + v44);
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = v7[12];
  int v47 = (_BYTE *)(v5 + v46);
  int v48 = (_BYTE *)(v6 + v46);
  uint64_t v49 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1LL, v49);
  int v53 = v51(v48, 1LL, v49);
  if (!v52)
  {
    if (!v53)
    {
      uint64_t v60 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v60 - 8) + 40LL))(v47, v48, v60);
      v47[*(int *)(v49 + 20)]  = v48[*(int *)(v49 + 20)];
      goto LABEL_34;
    }

    sub_10005802C((uint64_t)v47, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_33;
  }

  if (v53)
  {
LABEL_33:
    uint64_t v55 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v47, v48, *(void *)(*(void *)(v55 - 8) + 64LL));
    goto LABEL_34;
  }

  uint64_t v54 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v54 - 8) + 32LL))(v47, v48, v54);
  v47[*(int *)(v49 + 20)]  = v48[*(int *)(v49 + 20)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0LL, 1LL, v49);
LABEL_34:
  uint64_t v56 = v7[13];
  uint64_t v57 = (_OWORD *)(v5 + v56);
  uint64_t v58 = (_OWORD *)(v6 + v56);
  *uint64_t v57 = *v58;
  *(_OWORD *)((char *)v57 + 9)  = *(_OWORD *)((char *)v58 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001DD05C);
}

uint64_t sub_1001DD05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 250)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 6) {
      return v4 - 5;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NANAttribute.CustomDeviceInformation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001DD0DC);
}

uint64_t sub_1001DD0DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 250)
  {
    *(_BYTE *)(result + 1)  = a2 + 5;
  }

  else
  {
    uint64_t v7 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001DD14C(uint64_t a1)
{
  v4[0]  = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1]  = &unk_100358E98;
  v4[2]  = (char *)&value witness table for Builtin.Int32 + 64;
  uint64_t result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for NANAttribute.CustomDeviceInformation.CustomAttributes( uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1  = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1)  = *(_WORD *)((char *)a2 + 1);
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
    {
      uint64_t v12 = sub_100002274((uint64_t *)&unk_10040D470);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    uint64_t v14 = a3[7];
    int v15 = (char *)v4 + v14;
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    unint64_t v17 = v16[1];
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)int v15 = *(_OWORD *)v16;
    }

    else
    {
      uint64_t v18 = *v16;
      sub_100020AFC(*v16, v16[1]);
      *(void *)int v15 = v18;
      *((void *)v15 + 1)  = v17;
    }

    uint64_t v19 = a3[8];
    unint64_t v20 = (char *)v4 + v19;
    unint64_t v21 = (uint64_t *)((char *)a2 + v19);
    unint64_t v22 = v21[1];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    }

    else
    {
      uint64_t v23 = *v21;
      sub_100020AFC(*v21, v21[1]);
      *(void *)unint64_t v20 = v23;
      *((void *)v20 + 1)  = v22;
    }

    uint64_t v24 = a3[9];
    uint64_t v25 = (char *)v4 + v24;
    unint64_t v26 = (uint64_t *)((char *)a2 + v24);
    unint64_t v27 = v26[1];
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }

    else
    {
      uint64_t v28 = *v26;
      sub_100020AFC(*v26, v26[1]);
      *(void *)uint64_t v25 = v28;
      *((void *)v25 + 1)  = v27;
    }

    uint64_t v29 = a3[10];
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for UUID(0LL);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = sub_100002274(qword_100410330);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }

    uint64_t v35 = a3[11];
    uint64_t v36 = a3[12];
    uint64_t v37 = *(uint64_t *)((char *)a2 + v35);
    *(void *)((char *)v4 + v35)  = v37;
    uint64_t v38 = (char *)v4 + v36;
    uint64_t v39 = (char *)a2 + v36;
    uint64_t v40 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    uint64_t v41 = *(void *)(v40 - 8);
    int v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    swift_bridgeObjectRetain(v37);
    if (v42(v39, 1LL, v40))
    {
      uint64_t v43 = sub_100002274((uint64_t *)&unk_10040DCC0);
      memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      uint64_t v44 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16LL))(v38, v39, v44);
      v38[*(int *)(v40 + 20)]  = v39[*(int *)(v40 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
    }

    uint64_t v45 = a3[13];
    uint64_t v46 = (_OWORD *)((char *)v4 + v45);
    int v47 = (_OWORD *)((char *)a2 + v45);
    *uint64_t v46 = *v47;
    *(_OWORD *)((char *)v46 + 9)  = *(_OWORD *)((char *)v47 + 9);
  }

  return v4;
}

uint64_t destroy for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_1000208D8(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[8]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_1000208D8(*v9, v10);
  }
  uint64_t v11 = (uint64_t *)(a1 + a2[9]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_1000208D8(*v11, v12);
  }
  uint64_t v13 = a1 + a2[10];
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[11]));
  uint64_t v16 = a1 + a2[12];
  uint64_t v17 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v16, 1LL, v17);
  if (!(_DWORD)result)
  {
    uint64_t v19 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(v16, v19);
  }

  return result;
}

uint64_t initializeWithCopy for NANAttribute.CustomDeviceInformation.CustomAttributes( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_100020AFC(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8)  = v15;
  }

  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }

  else
  {
    uint64_t v21 = *v19;
    sub_100020AFC(*v19, v19[1]);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8)  = v20;
  }

  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }

  else
  {
    uint64_t v26 = *v24;
    sub_100020AFC(*v24, v24[1]);
    *(void *)uint64_t v23 = v26;
    *(void *)(v23 + 8)  = v25;
  }

  uint64_t v27 = a3[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
  {
    uint64_t v32 = sub_100002274(qword_100410330);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  }

  uint64_t v33 = a3[11];
  uint64_t v34 = a3[12];
  uint64_t v35 = *(void *)(a2 + v33);
  *(void *)(a1 + v33)  = v35;
  uint64_t v36 = (void *)(a1 + v34);
  uint64_t v37 = (const void *)(a2 + v34);
  uint64_t v38 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
  swift_bridgeObjectRetain(v35);
  if (v40(v37, 1LL, v38))
  {
    uint64_t v41 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    uint64_t v42 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v42 - 8) + 16LL))(v36, v37, v42);
    *((_BYTE *)v36 + *(int *)(v38 + 20))  = *((_BYTE *)v37 + *(int *)(v38 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
  }

  uint64_t v43 = a3[13];
  uint64_t v44 = (_OWORD *)(a1 + v43);
  uint64_t v45 = (_OWORD *)(a2 + v43);
  *uint64_t v44 = *v45;
  *(_OWORD *)((char *)v44 + 9)  = *(_OWORD *)((char *)v45 + 9);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.CustomDeviceInformation.CustomAttributes( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 == 15LL)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      sub_100020AFC(v19, v18);
      *uint64_t v16 = v19;
      v16[1]  = v18;
      goto LABEL_14;
    }

    goto LABEL_12;
  }

  if (v18 >> 60 == 15)
  {
    sub_1001682A8((uint64_t)v16);
LABEL_12:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_14;
  }

  uint64_t v20 = *v17;
  sub_100020AFC(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *uint64_t v16 = v20;
  v16[1]  = v18;
  sub_1000208D8(v21, v22);
LABEL_14:
  uint64_t v23 = a3[8];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  unint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (*(void *)(a1 + v23 + 8) >> 60 == 15LL)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      sub_100020AFC(v27, v26);
      *uint64_t v24 = v27;
      v24[1]  = v26;
      goto LABEL_21;
    }

    goto LABEL_19;
  }

  if (v26 >> 60 == 15)
  {
    sub_1001682A8((uint64_t)v24);
LABEL_19:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_21;
  }

  uint64_t v28 = *v25;
  sub_100020AFC(v28, v26);
  uint64_t v29 = *v24;
  unint64_t v30 = v24[1];
  *uint64_t v24 = v28;
  v24[1]  = v26;
  sub_1000208D8(v29, v30);
LABEL_21:
  uint64_t v31 = a3[9];
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  unint64_t v34 = *(void *)(a2 + v31 + 8);
  if (*(void *)(a1 + v31 + 8) >> 60 == 15LL)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v35 = *v33;
      sub_100020AFC(v35, v34);
      *uint64_t v32 = v35;
      v32[1]  = v34;
      goto LABEL_28;
    }

    goto LABEL_26;
  }

  if (v34 >> 60 == 15)
  {
    sub_1001682A8((uint64_t)v32);
LABEL_26:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_28;
  }

  uint64_t v36 = *v33;
  sub_100020AFC(v36, v34);
  uint64_t v37 = *v32;
  unint64_t v38 = v32[1];
  *uint64_t v32 = v36;
  v32[1]  = v34;
  sub_1000208D8(v37, v38);
LABEL_28:
  uint64_t v39 = a3[10];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for UUID(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1LL, v42);
  int v46 = v44(v41, 1LL, v42);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
      goto LABEL_34;
    }

    goto LABEL_33;
  }

  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
LABEL_33:
    uint64_t v47 = sub_100002274(qword_100410330);
    memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_34;
  }

  (*(void (**)(void *, void *, uint64_t))(v43 + 24))(v40, v41, v42);
LABEL_34:
  uint64_t v48 = a3[11];
  uint64_t v49 = *(void *)(a2 + v48);
  uint64_t v50 = *(void *)(a1 + v48);
  *(void *)(a1 + v48)  = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = a3[12];
  int v52 = (_BYTE *)(a1 + v51);
  int v53 = (_BYTE *)(a2 + v51);
  uint64_t v54 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v52, 1LL, v54);
  int v58 = v56(v53, 1LL, v54);
  if (!v57)
  {
    if (!v58)
    {
      uint64_t v66 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v66 - 8) + 24LL))(v52, v53, v66);
      v52[*(int *)(v54 + 20)]  = v53[*(int *)(v54 + 20)];
      goto LABEL_40;
    }

    sub_10005802C((uint64_t)v52, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_39;
  }

  if (v58)
  {
LABEL_39:
    uint64_t v60 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v52, v53, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_40;
  }

  uint64_t v59 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v59 - 8) + 16LL))(v52, v53, v59);
  v52[*(int *)(v54 + 20)]  = v53[*(int *)(v54 + 20)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0LL, 1LL, v54);
LABEL_40:
  uint64_t v61 = a3[13];
  uint64_t v62 = (_OWORD *)(a1 + v61);
  uint64_t v63 = (__int128 *)(a2 + v61);
  __int128 v64 = *v63;
  *(_OWORD *)((char *)v62 + 9)  = *(__int128 *)((char *)v63 + 9);
  *uint64_t v62 = v64;
  return a1;
}

uint64_t initializeWithTake for NANAttribute.CustomDeviceInformation.CustomAttributes( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7])  = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12)  = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(_OWORD *)(a1 + a3[9])  = *(_OWORD *)(a2 + a3[9]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100002274(qword_100410330);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v19 = a3[12];
  *(void *)(a1 + a3[11])  = *(void *)(a2 + a3[11]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    uint64_t v25 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v20, v21, v25);
    *((_BYTE *)v20 + *(int *)(v22 + 20))  = *((_BYTE *)v21 + *(int *)(v22 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  uint64_t v26 = a3[13];
  uint64_t v27 = (_OWORD *)(a1 + v26);
  uint64_t v28 = (_OWORD *)(a2 + v26);
  *uint64_t v27 = *v28;
  *(_OWORD *)((char *)v27 + 9)  = *(_OWORD *)((char *)v28 + 9);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CustomDeviceInformation.CustomAttributes( uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  unint64_t v18 = *(void *)(a1 + v15 + 8);
  if (v18 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_12;
  }

  unint64_t v19 = *(void *)(v17 + 8);
  if (v19 >> 60 == 15)
  {
    sub_1001682A8(v16);
    goto LABEL_10;
  }

  uint64_t v20 = *(void *)v16;
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8)  = v19;
  sub_1000208D8(v20, v18);
LABEL_12:
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  unint64_t v24 = *(void *)(a1 + v21 + 8);
  if (v24 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    goto LABEL_17;
  }

  unint64_t v25 = *(void *)(v23 + 8);
  if (v25 >> 60 == 15)
  {
    sub_1001682A8(v22);
    goto LABEL_15;
  }

  uint64_t v26 = *(void *)v22;
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8)  = v25;
  sub_1000208D8(v26, v24);
LABEL_17:
  uint64_t v27 = a3[9];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  unint64_t v30 = *(void *)(a1 + v27 + 8);
  if (v30 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }

  unint64_t v31 = *(void *)(v29 + 8);
  if (v31 >> 60 == 15)
  {
    sub_1001682A8(v28);
    goto LABEL_20;
  }

  uint64_t v32 = *(void *)v28;
  *(void *)uint64_t v28 = *(void *)v29;
  *(void *)(v28 + 8)  = v31;
  sub_1000208D8(v32, v30);
LABEL_22:
  uint64_t v33 = a3[10];
  unint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  unint64_t v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1LL, v36);
  int v40 = v38(v35, 1LL, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
      goto LABEL_28;
    }

    goto LABEL_27;
  }

  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v37 + 8))(v34, v36);
LABEL_27:
    uint64_t v41 = sub_100002274(qword_100410330);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64LL));
    goto LABEL_28;
  }

  (*(void (**)(void *, void *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_28:
  uint64_t v42 = a3[11];
  uint64_t v43 = *(void *)(a1 + v42);
  *(void *)(a1 + v42)  = *(void *)(a2 + v42);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = a3[12];
  int v45 = (_BYTE *)(a1 + v44);
  int v46 = (_BYTE *)(a2 + v44);
  uint64_t v47 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1LL, v47);
  int v51 = v49(v46, 1LL, v47);
  if (!v50)
  {
    if (!v51)
    {
      uint64_t v58 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v58 - 8) + 40LL))(v45, v46, v58);
      v45[*(int *)(v47 + 20)]  = v46[*(int *)(v47 + 20)];
      goto LABEL_34;
    }

    sub_10005802C((uint64_t)v45, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_33;
  }

  if (v51)
  {
LABEL_33:
    uint64_t v53 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v45, v46, *(void *)(*(void *)(v53 - 8) + 64LL));
    goto LABEL_34;
  }

  uint64_t v52 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v52 - 8) + 32LL))(v45, v46, v52);
  v45[*(int *)(v47 + 20)]  = v46[*(int *)(v47 + 20)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0LL, 1LL, v47);
LABEL_34:
  uint64_t v54 = a3[13];
  uint64_t v55 = (_OWORD *)(a1 + v54);
  uint64_t v56 = (_OWORD *)(a2 + v54);
  *uint64_t v55 = *v56;
  *(_OWORD *)((char *)v55 + 9)  = *(_OWORD *)((char *)v56 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CustomDeviceInformation.CustomAttributes( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001DE408);
}

uint64_t sub_1001DE408(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100002274((uint64_t *)&unk_10040D470);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = sub_100002274(qword_100410330);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = sub_100002274((uint64_t *)&unk_10040DCC0);
    uint64_t v7 = *(void *)(v8 - 8);
    uint64_t v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + a3[11]);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11)  = -1;
  }
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.CustomDeviceInformation.CustomAttributes( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001DE4E8);
}

uint64_t sub_1001DE4E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100002274((uint64_t *)&unk_10040D470);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[6];
  }

  else
  {
    uint64_t result = sub_100002274(qword_100410330);
    uint64_t v9 = *(void *)(result - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = result;
      uint64_t v11 = a4[10];
    }

    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(void *)(a1 + a4[11])  = (a2 - 1);
        return result;
      }

      uint64_t v10 = sub_100002274((uint64_t *)&unk_10040DCC0);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = a4[12];
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1001DE5B8(uint64_t a1)
{
  v8[0]  = (char *)&value witness table for Builtin.Int8 + 64;
  v8[1]  = &unk_100358630;
  sub_100056310( 319LL,  &qword_10040B320,  (uint64_t (*)(uint64_t))&type metadata accessor for P256.KeyAgreement.PublicKey);
  if (v3 <= 0x3F)
  {
    v8[2]  = *(void *)(v2 - 8) + 64LL;
    v8[3]  = &unk_100358EC8;
    v8[4]  = &unk_100358EC8;
    v8[5]  = &unk_100358EC8;
    sub_100056310( 319LL,  (unint64_t *)&unk_10040B328,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v8[6]  = *(void *)(v4 - 8) + 64LL;
      v8[7]  = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_100056310(319LL, qword_10040DB60, type metadata accessor for NANInternetSharingStatistics.Requester);
      if (v7 <= 0x3F)
      {
        v8[8]  = *(void *)(v6 - 8) + 64LL;
        void v8[9] = &unk_100358EE0;
        swift_initStructMetadata(a1, 256LL, 10LL, v8, a1 + 16);
      }
    }
  }

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.PlatformType()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.PlatformType;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Flags()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Flags;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Version()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Version;
}

uint64_t getEnumTagSinglePayload for NANAttribute.AttributeType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xD3) {
    goto LABEL_17;
  }
  if (a2 + 45 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 45) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 45;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 45;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 45;
    }
  }

uint64_t storeEnumTagSinglePayload for NANAttribute.AttributeType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 45 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 45) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xD3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD2) {
    return ((uint64_t (*)(void))((char *)&loc_1001DE7D4 + 4 * byte_100351E93[v4]))();
  }
  *a1  = a2 + 45;
  return ((uint64_t (*)(void))((char *)sub_1001DE808 + 4 * byte_100351E8E[v4]))();
}

uint64_t sub_1001DE808(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DE810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001DE818LL);
  }
  return result;
}

uint64_t sub_1001DE824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001DE82CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 45;
  return result;
}

uint64_t sub_1001DE830(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DE838(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.AttributeType()
{
  return &type metadata for NANAttribute.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.CodingKeys()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Version.CodingKeys()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.VendorSpecific.CodingKeys()
{
  return &type metadata for NANAttribute.VendorSpecific.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution.CodingKeys()
{
  return &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.PublicAvailability.CodingKeys()
{
  return &type metadata for NANAttribute.PublicAvailability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange.CodingKeys()
{
  return &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.SharedKeyDescriptor.CodingKeys()
{
  return &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.CodingKeys()
{
  return &type metadata for NANAttribute.SecurityContextInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CodingKeys()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1001DE950 + 4 * byte_100351E9D[v4]))();
  }
  *a1  = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001DE984 + 4 * byte_100351E98[v4]))();
}

uint64_t sub_1001DE984(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DE98C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001DE994LL);
  }
  return result;
}

uint64_t sub_1001DE9A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001DE9A8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1001DE9AC(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DE9B4(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedMesh.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedMesh.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedIBSS.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedIBSS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedP2POperation.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ElementContainer.CodingKeys()
{
  return &type metadata for NANAttribute.ElementContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLinkQoS.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster.CodingKeys()
{
  return &type metadata for NANAttribute.DataCluster.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability.CodingKeys()
{
  return &type metadata for NANAttribute.Availability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceCapability.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1001DEA9C + 4 * byte_100351EA7[v4]))();
  }
  *a1  = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001DEAD0 + 4 * byte_100351EA2[v4]))();
}

uint64_t sub_1001DEAD0(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DEAD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001DEAE0LL);
  }
  return result;
}

uint64_t sub_1001DEAEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001DEAF4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1001DEAF8(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DEB00(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ClusterDiscovery.CodingKeys()
{
  return &type metadata for NANAttribute.ClusterDiscovery.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Ranging.CodingKeys()
{
  return &type metadata for NANAttribute.Ranging.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherAvailabilityMap.CodingKeys()
{
  return &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherServiceDiscovery.CodingKeys()
{
  return &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Mesh.CodingKeys()
{
  return &type metadata for NANAttribute.Mesh.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.IBSS.CodingKeys()
{
  return &type metadata for NANAttribute.IBSS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation.CodingKeys()
{
  return &type metadata for NANAttribute.P2POperation.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO17ServiceDescriptorV7ControlV11ControlTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001DEBE8 + 4 * byte_100351EB1[v4]))();
  }
  *a1  = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001DEC1C + 4 * byte_100351EAC[v4]))();
}

uint64_t sub_1001DEC1C(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DEC24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001DEC2CLL);
  }
  return result;
}

uint64_t sub_1001DEC38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001DEC40LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001DEC44(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DEC4C(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure.CodingKeys()
{
  return &type metadata for NANAttribute.WLANInfrastructure.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO25PairingIdentityResolutionV13CipherVersionOwst_0( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001DECB8 + 4 * byte_100351EB6[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001DECD8 + 4 * byte_100351EBB[v4]))();
  }
}

_BYTE *sub_1001DECB8(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1001DECD8(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001DECE0(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001DECE8(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001DECF0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001DECF8(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceIDList.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceIDList.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO8DatapathV6StatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001DED60 + 4 * byte_100351EC5[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001DED94 + 4 * byte_100351EC0[v4]))();
}

uint64_t sub_1001DED94(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DED9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001DEDA4LL);
  }
  return result;
}

uint64_t sub_1001DEDB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001DEDB8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001DEDBC(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001DEDC4(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Cluster.CodingKeys()
{
  return &type metadata for NANAttribute.Cluster.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.MasterIndication.CodingKeys()
{
  return &type metadata for NANAttribute.MasterIndication.CodingKeys;
}

unint64_t sub_1001DEDF4()
{
  unint64_t result = qword_10040B378;
  if (!qword_10040B378)
  {
    unint64_t result = swift_getWitnessTable(&unk_100358FB0, &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B378);
  }

  return result;
}

unint64_t sub_1001DEE3C()
{
  unint64_t result = qword_10040B380;
  if (!qword_10040B380)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359068, &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B380);
  }

  return result;
}

unint64_t sub_1001DEE84()
{
  unint64_t result = qword_10040B388;
  if (!qword_10040B388)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359120, &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B388);
  }

  return result;
}

unint64_t sub_1001DEECC()
{
  unint64_t result = qword_10040B390;
  if (!qword_10040B390)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003591D8,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B390);
  }

  return result;
}

unint64_t sub_1001DEF14()
{
  unint64_t result = qword_10040B398;
  if (!qword_10040B398)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359290, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B398);
  }

  return result;
}

unint64_t sub_1001DEF5C()
{
  unint64_t result = qword_10040B3A0;
  if (!qword_10040B3A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359348, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3A0);
  }

  return result;
}

unint64_t sub_1001DEFA4()
{
  unint64_t result = qword_10040B3A8;
  if (!qword_10040B3A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359400, &type metadata for NANAttribute.IBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3A8);
  }

  return result;
}

unint64_t sub_1001DEFEC()
{
  unint64_t result = qword_10040B3B0;
  if (!qword_10040B3B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003594B8, &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3B0);
  }

  return result;
}

unint64_t sub_1001DF034()
{
  unint64_t result = qword_10040B3B8;
  if (!qword_10040B3B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359570, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3B8);
  }

  return result;
}

unint64_t sub_1001DF07C()
{
  unint64_t result = qword_10040B3C0;
  if (!qword_10040B3C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359628, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3C0);
  }

  return result;
}

unint64_t sub_1001DF0C4()
{
  unint64_t result = qword_10040B3C8;
  if (!qword_10040B3C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003596E0, &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3C8);
  }

  return result;
}

unint64_t sub_1001DF10C()
{
  unint64_t result = qword_10040B3D0;
  if (!qword_10040B3D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359798, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3D0);
  }

  return result;
}

unint64_t sub_1001DF154()
{
  unint64_t result = qword_10040B3D8;
  if (!qword_10040B3D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359850,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3D8);
  }

  return result;
}

unint64_t sub_1001DF19C()
{
  unint64_t result = qword_10040B3E0;
  if (!qword_10040B3E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359908, &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3E0);
  }

  return result;
}

unint64_t sub_1001DF1E4()
{
  unint64_t result = qword_10040B3E8;
  if (!qword_10040B3E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003599C0, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3E8);
  }

  return result;
}

unint64_t sub_1001DF22C()
{
  unint64_t result = qword_10040B3F0;
  if (!qword_10040B3F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359A78, &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3F0);
  }

  return result;
}

unint64_t sub_1001DF274()
{
  unint64_t result = qword_10040B3F8;
  if (!qword_10040B3F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359B30, &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3F8);
  }

  return result;
}

unint64_t sub_1001DF2BC()
{
  unint64_t result = qword_10040B400;
  if (!qword_10040B400)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359BE8, &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B400);
  }

  return result;
}

unint64_t sub_1001DF304()
{
  unint64_t result = qword_10040B408;
  if (!qword_10040B408)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359CA0, &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B408);
  }

  return result;
}

unint64_t sub_1001DF34C()
{
  unint64_t result = qword_10040B410;
  if (!qword_10040B410)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359D58, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B410);
  }

  return result;
}

unint64_t sub_1001DF394()
{
  unint64_t result = qword_10040B418;
  if (!qword_10040B418)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359E10, &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B418);
  }

  return result;
}

unint64_t sub_1001DF3DC()
{
  unint64_t result = qword_10040B420;
  if (!qword_10040B420)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359EC8, &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B420);
  }

  return result;
}

unint64_t sub_1001DF424()
{
  unint64_t result = qword_10040B428;
  if (!qword_10040B428)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359F80,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B428);
  }

  return result;
}

unint64_t sub_1001DF46C()
{
  unint64_t result = qword_10040B430;
  if (!qword_10040B430)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A038,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B430);
  }

  return result;
}

unint64_t sub_1001DF4B4()
{
  unint64_t result = qword_10040B438;
  if (!qword_10040B438)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A0F0,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B438);
  }

  return result;
}

unint64_t sub_1001DF4FC()
{
  unint64_t result = qword_10040B440;
  if (!qword_10040B440)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A1A8, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B440);
  }

  return result;
}

unint64_t sub_1001DF544()
{
  unint64_t result = qword_10040B448;
  if (!qword_10040B448)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A260,  &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B448);
  }

  return result;
}

unint64_t sub_1001DF58C()
{
  unint64_t result = qword_10040B450;
  if (!qword_10040B450)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A318, &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B450);
  }

  return result;
}

unint64_t sub_1001DF5D4()
{
  unint64_t result = qword_10040B458;
  if (!qword_10040B458)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A3D0, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B458);
  }

  return result;
}

unint64_t sub_1001DF61C()
{
  unint64_t result = qword_10040B460;
  if (!qword_10040B460)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A488, &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B460);
  }

  return result;
}

unint64_t sub_1001DF664()
{
  unint64_t result = qword_10040B468;
  if (!qword_10040B468)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A540, &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B468);
  }

  return result;
}

unint64_t sub_1001DF6AC()
{
  unint64_t result = qword_10040B470;
  if (!qword_10040B470)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A5F8, &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B470);
  }

  return result;
}

unint64_t sub_1001DF6F4()
{
  unint64_t result = qword_10040B478;
  if (!qword_10040B478)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A6B0,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B478);
  }

  return result;
}

unint64_t sub_1001DF73C()
{
  unint64_t result = qword_10040B480;
  if (!qword_10040B480)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A768, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B480);
  }

  return result;
}

unint64_t sub_1001DF784()
{
  unint64_t result = qword_10040B488;
  if (!qword_10040B488)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A6D8, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B488);
  }

  return result;
}

unint64_t sub_1001DF7CC()
{
  unint64_t result = qword_10040B490;
  if (!qword_10040B490)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A700, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B490);
  }

  return result;
}

unint64_t sub_1001DF814()
{
  unint64_t result = qword_10040B498;
  if (!qword_10040B498)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A620,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B498);
  }

  return result;
}

unint64_t sub_1001DF85C()
{
  unint64_t result = qword_10040B4A0;
  if (!qword_10040B4A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A648,  &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4A0);
  }

  return result;
}

unint64_t sub_1001DF8A4()
{
  unint64_t result = qword_10040B4A8;
  if (!qword_10040B4A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A568, &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4A8);
  }

  return result;
}

unint64_t sub_1001DF8EC()
{
  unint64_t result = qword_10040B4B0;
  if (!qword_10040B4B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A590, &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4B0);
  }

  return result;
}

unint64_t sub_1001DF934()
{
  unint64_t result = qword_10040B4B8;
  if (!qword_10040B4B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A4B0, &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4B8);
  }

  return result;
}

unint64_t sub_1001DF97C()
{
  unint64_t result = qword_10040B4C0;
  if (!qword_10040B4C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A4D8, &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4C0);
  }

  return result;
}

unint64_t sub_1001DF9C4()
{
  unint64_t result = qword_10040B4C8;
  if (!qword_10040B4C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A3F8, &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4C8);
  }

  return result;
}

unint64_t sub_1001DFA0C()
{
  unint64_t result = qword_10040B4D0;
  if (!qword_10040B4D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A420, &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4D0);
  }

  return result;
}

unint64_t sub_1001DFA54()
{
  unint64_t result = qword_10040B4D8;
  if (!qword_10040B4D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A340, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4D8);
  }

  return result;
}

unint64_t sub_1001DFA9C()
{
  unint64_t result = qword_10040B4E0;
  if (!qword_10040B4E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A368, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4E0);
  }

  return result;
}

unint64_t sub_1001DFAE4()
{
  unint64_t result = qword_10040B4E8;
  if (!qword_10040B4E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A288, &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4E8);
  }

  return result;
}

unint64_t sub_1001DFB2C()
{
  unint64_t result = qword_10040B4F0;
  if (!qword_10040B4F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A2B0, &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4F0);
  }

  return result;
}

unint64_t sub_1001DFB74()
{
  unint64_t result = qword_10040B4F8;
  if (!qword_10040B4F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A1D0,  &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B4F8);
  }

  return result;
}

unint64_t sub_1001DFBBC()
{
  unint64_t result = qword_10040B500;
  if (!qword_10040B500)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A1F8,  &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B500);
  }

  return result;
}

unint64_t sub_1001DFC04()
{
  unint64_t result = qword_10040B508;
  if (!qword_10040B508)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A118, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B508);
  }

  return result;
}

unint64_t sub_1001DFC4C()
{
  unint64_t result = qword_10040B510;
  if (!qword_10040B510)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035A140, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B510);
  }

  return result;
}

unint64_t sub_1001DFC94()
{
  unint64_t result = qword_10040B518;
  if (!qword_10040B518)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A060,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B518);
  }

  return result;
}

unint64_t sub_1001DFCDC()
{
  unint64_t result = qword_10040B520;
  if (!qword_10040B520)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035A088,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B520);
  }

  return result;
}

unint64_t sub_1001DFD24()
{
  unint64_t result = qword_10040B528;
  if (!qword_10040B528)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359FA8,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B528);
  }

  return result;
}

unint64_t sub_1001DFD6C()
{
  unint64_t result = qword_10040B530;
  if (!qword_10040B530)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359FD0,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B530);
  }

  return result;
}

unint64_t sub_1001DFDB4()
{
  unint64_t result = qword_10040B538;
  if (!qword_10040B538)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359EF0,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B538);
  }

  return result;
}

unint64_t sub_1001DFDFC()
{
  unint64_t result = qword_10040B540;
  if (!qword_10040B540)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359F18,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B540);
  }

  return result;
}

unint64_t sub_1001DFE44()
{
  unint64_t result = qword_10040B548;
  if (!qword_10040B548)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359E38, &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B548);
  }

  return result;
}

unint64_t sub_1001DFE8C()
{
  unint64_t result = qword_10040B550;
  if (!qword_10040B550)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359E60, &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B550);
  }

  return result;
}

unint64_t sub_1001DFED4()
{
  unint64_t result = qword_10040B558;
  if (!qword_10040B558)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359D80, &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B558);
  }

  return result;
}

unint64_t sub_1001DFF1C()
{
  unint64_t result = qword_10040B560;
  if (!qword_10040B560)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359DA8, &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B560);
  }

  return result;
}

unint64_t sub_1001DFF64()
{
  unint64_t result = qword_10040B568;
  if (!qword_10040B568)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359CC8, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B568);
  }

  return result;
}

unint64_t sub_1001DFFAC()
{
  unint64_t result = qword_10040B570;
  if (!qword_10040B570)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359CF0, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B570);
  }

  return result;
}

unint64_t sub_1001DFFF4()
{
  unint64_t result = qword_10040B578;
  if (!qword_10040B578)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359C10, &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B578);
  }

  return result;
}

unint64_t sub_1001E003C()
{
  unint64_t result = qword_10040B580;
  if (!qword_10040B580)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359C38, &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B580);
  }

  return result;
}

unint64_t sub_1001E0084()
{
  unint64_t result = qword_10040B588;
  if (!qword_10040B588)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359B58, &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B588);
  }

  return result;
}

unint64_t sub_1001E00CC()
{
  unint64_t result = qword_10040B590;
  if (!qword_10040B590)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359B80, &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B590);
  }

  return result;
}

unint64_t sub_1001E0114()
{
  unint64_t result = qword_10040B598;
  if (!qword_10040B598)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359AA0, &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B598);
  }

  return result;
}

unint64_t sub_1001E015C()
{
  unint64_t result = qword_10040B5A0;
  if (!qword_10040B5A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359AC8, &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5A0);
  }

  return result;
}

unint64_t sub_1001E01A4()
{
  unint64_t result = qword_10040B5A8;
  if (!qword_10040B5A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003599E8, &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5A8);
  }

  return result;
}

unint64_t sub_1001E01EC()
{
  unint64_t result = qword_10040B5B0;
  if (!qword_10040B5B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359A10, &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5B0);
  }

  return result;
}

unint64_t sub_1001E0234()
{
  unint64_t result = qword_10040B5B8;
  if (!qword_10040B5B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359930, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5B8);
  }

  return result;
}

unint64_t sub_1001E027C()
{
  unint64_t result = qword_10040B5C0;
  if (!qword_10040B5C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359958, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5C0);
  }

  return result;
}

unint64_t sub_1001E02C4()
{
  unint64_t result = qword_10040B5C8;
  if (!qword_10040B5C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359878, &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5C8);
  }

  return result;
}

unint64_t sub_1001E030C()
{
  unint64_t result = qword_10040B5D0;
  if (!qword_10040B5D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003598A0, &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5D0);
  }

  return result;
}

unint64_t sub_1001E0354()
{
  unint64_t result = qword_10040B5D8;
  if (!qword_10040B5D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003597C0,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5D8);
  }

  return result;
}

unint64_t sub_1001E039C()
{
  unint64_t result = qword_10040B5E0;
  if (!qword_10040B5E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1003597E8,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5E0);
  }

  return result;
}

unint64_t sub_1001E03E4()
{
  unint64_t result = qword_10040B5E8;
  if (!qword_10040B5E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359708, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5E8);
  }

  return result;
}

unint64_t sub_1001E042C()
{
  unint64_t result = qword_10040B5F0;
  if (!qword_10040B5F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359730, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5F0);
  }

  return result;
}

unint64_t sub_1001E0474()
{
  unint64_t result = qword_10040B5F8;
  if (!qword_10040B5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359650, &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5F8);
  }

  return result;
}

unint64_t sub_1001E04BC()
{
  unint64_t result = qword_10040B600;
  if (!qword_10040B600)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359678, &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B600);
  }

  return result;
}

unint64_t sub_1001E0504()
{
  unint64_t result = qword_10040B608;
  if (!qword_10040B608)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359598, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B608);
  }

  return result;
}

unint64_t sub_1001E054C()
{
  unint64_t result = qword_10040B610;
  if (!qword_10040B610)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003595C0, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B610);
  }

  return result;
}

unint64_t sub_1001E0594()
{
  unint64_t result = qword_10040B618;
  if (!qword_10040B618)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003594E0, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B618);
  }

  return result;
}

unint64_t sub_1001E05DC()
{
  unint64_t result = qword_10040B620;
  if (!qword_10040B620)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359508, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B620);
  }

  return result;
}

unint64_t sub_1001E0624()
{
  unint64_t result = qword_10040B628;
  if (!qword_10040B628)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359428, &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B628);
  }

  return result;
}

unint64_t sub_1001E066C()
{
  unint64_t result = qword_10040B630;
  if (!qword_10040B630)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359450, &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B630);
  }

  return result;
}

unint64_t sub_1001E06B4()
{
  unint64_t result = qword_10040B638;
  if (!qword_10040B638)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359370, &type metadata for NANAttribute.IBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B638);
  }

  return result;
}

unint64_t sub_1001E06FC()
{
  unint64_t result = qword_10040B640;
  if (!qword_10040B640)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359398, &type metadata for NANAttribute.IBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B640);
  }

  return result;
}

unint64_t sub_1001E0744()
{
  unint64_t result = qword_10040B648;
  if (!qword_10040B648)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003592B8, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B648);
  }

  return result;
}

unint64_t sub_1001E078C()
{
  unint64_t result = qword_10040B650;
  if (!qword_10040B650)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003592E0, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B650);
  }

  return result;
}

unint64_t sub_1001E07D4()
{
  unint64_t result = qword_10040B658;
  if (!qword_10040B658)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359200, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B658);
  }

  return result;
}

unint64_t sub_1001E081C()
{
  unint64_t result = qword_10040B660;
  if (!qword_10040B660)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359228, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B660);
  }

  return result;
}

unint64_t sub_1001E0864()
{
  unint64_t result = qword_10040B668;
  if (!qword_10040B668)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359148,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B668);
  }

  return result;
}

unint64_t sub_1001E08AC()
{
  unint64_t result = qword_10040B670;
  if (!qword_10040B670)
  {
    unint64_t result = swift_getWitnessTable( &unk_100359170,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B670);
  }

  return result;
}

unint64_t sub_1001E08F4()
{
  unint64_t result = qword_10040B678;
  if (!qword_10040B678)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359090, &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B678);
  }

  return result;
}

unint64_t sub_1001E093C()
{
  unint64_t result = qword_10040B680;
  if (!qword_10040B680)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003590B8, &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B680);
  }

  return result;
}

unint64_t sub_1001E0984()
{
  unint64_t result = qword_10040B688;
  if (!qword_10040B688)
  {
    unint64_t result = swift_getWitnessTable(&unk_100358FD8, &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B688);
  }

  return result;
}

unint64_t sub_1001E09CC()
{
  unint64_t result = qword_10040B690;
  if (!qword_10040B690)
  {
    unint64_t result = swift_getWitnessTable(&unk_100359000, &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B690);
  }

  return result;
}

unint64_t sub_1001E0A14()
{
  unint64_t result = qword_10040B698;
  if (!qword_10040B698)
  {
    unint64_t result = swift_getWitnessTable(&unk_100358F20, &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B698);
  }

  return result;
}

unint64_t sub_1001E0A5C()
{
  unint64_t result = qword_10040B6A0;
  if (!qword_10040B6A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100358F48, &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B6A0);
  }

  return result;
}

char *sub_1001E0AA0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= v4[3] >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = (char *)sub_1000A6094(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }

  uint64_t v12 = v4[2];
  size_t v13 = v12 - a2;
  if (__OFSUB__(v12, a2)) {
    goto LABEL_27;
  }
  if ((v13 & 0x8000000000000000LL) == 0)
  {
    unint64_t result = (char *)v4 + a1 + 32;
    uint64_t v14 = (char *)v4 + a2 + 32;
    if (a1 != a2 || result >= &v14[v13]) {
      unint64_t result = (char *)memmove(result, v14, v13);
    }
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, v8);
    uint64_t v17 = v15 + v8;
    if (!v16)
    {
      v4[2]  = v17;
LABEL_21:
      *int v2 = v4;
      return result;
    }

    goto LABEL_28;
  }

uint64_t sub_1001E0BF4(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = a1 + 32;
  uint64_t v27 = a1 + 32;
  uint64_t v28 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v6 = *(void *)(v5 + 8 * v4);
    uint64_t v7 = v30;
    unint64_t v8 = v30[2];
    uint64_t v9 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain(v6);
    uint64_t result = swift_bridgeObjectRetain(v30);
    if (v9 >= v8)
    {
      uint64_t v10 = v30;
    }

    else
    {
      uint64_t result = (uint64_t)sub_1001E0AA0(v9, v8);
      uint64_t v10 = v30;
      unint64_t v8 = v30[2];
      uint64_t v9 = *(void *)(v6 + 16);
    }

    BOOL v11 = !v8 || v9 == 0;
    if (!v11) {
      break;
    }
LABEL_20:
    if (v8 != v9) {
      goto LABEL_31;
    }
    if (!v8) {
      goto LABEL_25;
    }
    if (v10 != (void *)v6)
    {
      if (v8 == 1) {
        goto LABEL_25;
      }
      if (*((unsigned __int8 *)v10 + 33) == *(unsigned __int8 *)(v6 + 33))
      {
        uint64_t v17 = 34LL;
        while (2 - v8 + v17 != 34)
        {
          int v18 = *((unsigned __int8 *)v10 + v17);
          int v19 = *(unsigned __int8 *)(v6 + v17++);
          if (v18 != v19) {
            goto LABEL_31;
          }
        }

LABEL_44:
      swift_bridgeObjectRelease(v6);
      goto LABEL_45;
    }

    swift_bridgeObjectRelease_n(v6, 2LL);
LABEL_45:
    if (++v4 == v3) {
      return (uint64_t)v30;
    }
  }

  uint64_t v29 = v4;
  unint64_t v12 = 0LL;
  uint64_t v13 = v9 - 1;
  unint64_t v14 = v8 - 1;
  uint64_t v15 = v9 & ~(v9 >> 63);
  while (v15 != v12)
  {
    if (v12 >= *(void *)(v6 + 16)) {
      goto LABEL_51;
    }
    char v16 = *(_BYTE *)(v6 + 32 + v12);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10019EA0C(v10);
      uint64_t v10 = (void *)result;
    }

    unint64_t v8 = v10[2];
    if (v12 >= v8) {
      goto LABEL_52;
    }
    *((_BYTE *)v10 + v12 + 32) &= v16;
    if (v14 != v12)
    {
      BOOL v11 = v13 == v12++;
      if (!v11) {
        continue;
      }
    }

    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v3 = v28;
    uint64_t v4 = v29;
    uint64_t v5 = v27;
    goto LABEL_20;
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease_n(v40, 2LL);
    int v45 = *(void **)&v25[v37];
    if (v45) {
      [v45 datapathTerminatedWithReason:4];
    }
    int v46 = *v39;
    if ((unint64_t)*v39 >> 62)
    {
      if (v46 < 0) {
        int v50 = *v39;
      }
      else {
        int v50 = v46 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*v39, 2LL);
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter(v50);
      if (v47)
      {
LABEL_48:
        if (v47 >= 1)
        {
          for (j  = 0LL; j != v47; ++j)
          {
            if ((v46 & 0xC000000000000001LL) != 0)
            {
              uint64_t v49 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v46);
            }

            else
            {
              uint64_t v49 = *(void **)(v46 + 8 * j + 32);
              swift_unknownObjectRetain(v49);
            }

            objc_msgSend(v49, "datapathTerminatedWithReason:", 4, v53);
            swift_unknownObjectRelease(v49);
          }

          goto LABEL_58;
        }

uint64_t sub_1001E0ED4(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = a1 + 32;
  while (1)
  {
    uint64_t v6 = *(void *)(v5 + 8 * v4);
    uint64_t v7 = v27;
    unint64_t v8 = v27[2];
    uint64_t v9 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v27);
    if (v9 >= v8)
    {
      uint64_t v10 = v27;
      if (!v8)
      {
LABEL_27:
        if (!v9) {
          goto LABEL_43;
        }
        goto LABEL_28;
      }
    }

    else
    {
      sub_1001E0AA0(v9, v8);
      uint64_t v9 = *(void *)(v6 + 16);
      uint64_t v10 = v27;
      unint64_t v8 = v27[2];
      if (!v8) {
        goto LABEL_27;
      }
    }

    if (v9)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10019EA0C(v10);
        uint64_t v10 = (void *)result;
      }

      unint64_t v11 = 0LL;
      uint64_t v12 = *(void *)(v6 + 16);
      uint64_t v13 = 32LL;
      uint64_t v14 = 1LL;
      do
      {
        if (v13 - (v9 & ~(v9 >> 63)) == 32)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }

        if (v11 == v12) {
          goto LABEL_47;
        }
        unint64_t v15 = v10[2];
        if (v11 >= v15) {
          goto LABEL_48;
        }
        *((_BYTE *)v10 + v13) &= *(_BYTE *)(v6 + v13);
        if (v14 == v8) {
          break;
        }
        if (v11 == v8 - 1) {
          goto LABEL_49;
        }
        ++v11;
        ++v14;
        ++v13;
      }

      while (v11 != v9);
      if (v15 != v12) {
        goto LABEL_28;
      }
      if (v10 != (void *)v6)
      {
        if (v15 != 1)
        {
          unint64_t v16 = 2 - v15;
          uint64_t v17 = 34LL;
          while (v16 + v17 != 34)
          {
            int v18 = *((unsigned __int8 *)v10 + v17);
            int v19 = *(unsigned __int8 *)(v6 + v17++);
            if (v18 != v19) {
              goto LABEL_28;
            }
          }
        }

uint64_t sub_1001E11BC(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0LL;
  uint64_t v27 = a1 + 32;
  uint64_t v26 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v6 = *(void *)(v27 + 8 * v4);
    uint64_t v7 = v28;
    unint64_t v8 = v28[2];
    uint64_t v9 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain(v6);
    uint64_t result = swift_bridgeObjectRetain(v28);
    if (v9 >= v8)
    {
      uint64_t v10 = v28;
    }

    else
    {
      uint64_t result = (uint64_t)sub_1001E0AA0(v9, v8);
      uint64_t v10 = v28;
      unint64_t v8 = v28[2];
      uint64_t v9 = *(void *)(v6 + 16);
    }

    BOOL v11 = !v8 || v9 == 0;
    if (!v11) {
      break;
    }
LABEL_23:
    if (v8 == v9)
    {
      if (!v8) {
        goto LABEL_3;
      }
      if (v10 == (void *)v6)
      {
        uint64_t v5 = v6;
        goto LABEL_4;
      }

      if (*((unsigned __int8 *)v10 + 32) == *(unsigned __int8 *)(v6 + 32))
      {
        if (v8 == 1) {
          goto LABEL_3;
        }
        if (*((unsigned __int8 *)v10 + 33) == *(unsigned __int8 *)(v6 + 33))
        {
          uint64_t v17 = 0LL;
          while (v8 - 2 != v17)
          {
            int v18 = *((unsigned __int8 *)v10 + v17 + 34);
            int v19 = *(unsigned __int8 *)(v6 + 34 + v17++);
            if (v18 != v19) {
              goto LABEL_32;
            }
          }

uint64_t sub_1001E1478(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = a1 + 32;
  uint64_t v28 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v7 = *(void *)(v5 + 8 * v4);
    unint64_t v8 = v29;
    unint64_t v9 = v29[2];
    uint64_t v10 = *(void *)(v7 + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v29);
    if (v10 >= v9)
    {
      BOOL v11 = v29;
      if (!v9)
      {
LABEL_28:
        if (!v10) {
          goto LABEL_3;
        }
        goto LABEL_29;
      }
    }

    else
    {
      sub_1001E0AA0(v10, v9);
      uint64_t v10 = *(void *)(v7 + 16);
      BOOL v11 = v29;
      unint64_t v9 = v29[2];
      if (!v9) {
        goto LABEL_28;
      }
    }

    if (v10)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v11);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10019EA0C(v11);
        BOOL v11 = (void *)result;
      }

      unint64_t v12 = 0LL;
      uint64_t v13 = *(void *)(v7 + 16);
      uint64_t v14 = 32LL;
      uint64_t v15 = 1LL;
      do
      {
        if (v14 - (v10 & ~(v10 >> 63)) == 32)
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }

        if (v12 == v13) {
          goto LABEL_46;
        }
        unint64_t v16 = v11[2];
        if (v12 >= v16) {
          goto LABEL_47;
        }
        *((_BYTE *)v11 + v14) &= *(_BYTE *)(v7 + v14);
        if (v15 == v9) {
          break;
        }
        if (v12 == v9 - 1) {
          goto LABEL_48;
        }
        ++v12;
        ++v15;
        ++v14;
      }

      while (v12 != v10);
      if (v16 != v13) {
        goto LABEL_29;
      }
      if (v11 == (void *)v7)
      {
        uint64_t v6 = v7;
        goto LABEL_4;
      }

      if (v16 != 1)
      {
        uint64_t v17 = 0LL;
        unint64_t v18 = v16 - 2;
        while (v18 != v17)
        {
          int v19 = *((unsigned __int8 *)v11 + v17 + 34);
          int v20 = *(unsigned __int8 *)(v7 + 34 + v17++);
          if (v19 != v20) {
            goto LABEL_29;
          }
        }
      }

LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

  uint64_t v32 = v4[2];
  if (!v32) {
    goto LABEL_36;
  }
  swift_bridgeObjectRetain(v4);
  for (i  = (char *)v4 + 37; !Channel.isDFS.getter(*(_DWORD *)(i - 5)); i += 8)
  {
    if (!--v32)
    {
      swift_bridgeObjectRelease_n(v4, 2LL);
      return 3LL;
    }
  }

  char v26 = 2LL;
  swift_bridgeObjectRelease_n(v4, 2LL);
  return v26;
}

uint64_t sub_1001E173C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100364600LL;
    if (a2 == 0x8000000100364600LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100364600LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x61466D6F646E6172LL && a2 == 0xEC000000726F7463LL)
  {
    swift_bridgeObjectRelease(0xEC000000726F7463LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61466D6F646E6172LL, 0xEC000000726F7463LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E1840(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100367200LL;
    if (a2 == 0x8000000100367200LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100367200LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x746E756F43706F68LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v6 = 0xE800000000000000LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F43706F68LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000022LL && a2 == 0x80000001003643C0LL)
  {
    swift_bridgeObjectRelease(0x80000001003643C0LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x80000001003643C0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E198C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6573736572646461LL && a2 == 0xE900000000000073LL)
  {
    unint64_t v5 = 0xE900000000000073LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6573736572646461LL, 0xE900000000000073LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6564756C636E69LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6564756C636E69LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E1A88(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v4 = 0x8000000100367220LL;
    if (a2 == 0x8000000100367220LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100367220LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000100367240LL)
  {
    swift_bridgeObjectRelease(0x8000000100367240LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100367240LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E1B70(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100367260LL;
    if (a2 == 0x8000000100367260LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100367260LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x8000000100367280LL)
  {
    unint64_t v6 = 0x8000000100367280LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x8000000100367280LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x6962616C69617661LL && a2 == 0xEC0000007974696CLL)
  {
    unint64_t v7 = 0xEC0000007974696CLL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661LL, 0xEC0000007974696CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 1701605234 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 3LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701605234LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1001E1D28(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701605234 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v7 = 0xEA00000000007373LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6962616C69617661LL && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease(0xEC0000007974696CLL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661LL, 0xEC0000007974696CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E1E90(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4953534273736269LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v5 = 0xE900000000000044LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4953534273736269LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v7 = 0xEA00000000007373LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6962616C69617661LL && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease(0xEC0000007974696CLL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661LL, 0xEC0000007974696CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E2014(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v5 = 0xEA00000000007373LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6962616C69617661LL && a2 == 0xEC0000007974696CLL)
  {
    unint64_t v7 = 0xEC0000007974696CLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661LL, 0xEC0000007974696CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x44496873656DLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496873656DLL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E2184(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x444970616DLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444970616DLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001003672A0LL)
  {
    swift_bridgeObjectRelease(0x80000001003672A0LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001003672A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E2268(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v5 = 0xEA00000000007373LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E2354(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4972657473756C63LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v5 = 0xE900000000000044LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4972657473756C63LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7366664F656D6974LL && a2 == 0xEA00000000007465LL)
  {
    unint64_t v7 = 0xEA00000000007465LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7366664F656D6974LL, 0xEA00000000007465LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000100367200LL)
  {
    swift_bridgeObjectRelease(0x8000000100367200LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100367200LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E24BC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x444970616DLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444970616DLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000023LL && a2 == 0x80000001003672C0LL)
  {
    unint64_t v7 = 0x80000001003672C0LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x80000001003672C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6574726F70707573LL && a2 == 0xEE0073646E614264LL)
  {
    unint64_t v8 = 0xEE0073646E614264LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574726F70707573LL, 0xEE0073646E614264LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 1701080941 && a2 == 0xE400000000000000LL)
  {
    unint64_t v9 = 0xE400000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v10 = 0x80000001003672F0LL;
    if (a2 == 0x80000001003672F0LL) {
      goto LABEL_31;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001003672F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0xD000000000000024LL && a2 == 0x8000000100367310LL)
  {
    unint64_t v11 = 0x8000000100367310LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024LL, 0x8000000100367310LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x696C696261706163LL && a2 == 0xEC00000073656974LL)
  {
    swift_bridgeObjectRelease(0xEC00000073656974LL);
    return 6LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163LL, 0xEC00000073656974LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t sub_1001E27AC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65636E6575716573LL && a2 == 0xEA00000000004449LL)
  {
    unint64_t v5 = 0xEA00000000004449LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573LL, 0xEA00000000004449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C6F72746E6F63LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v7 = 0xE700000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F72746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001003672A0LL)
  {
    swift_bridgeObjectRelease(0x80000001003672A0LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001003672A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E2908(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4972657473756C63LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v5 = 0xE900000000000044LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4972657473756C63LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C6F72746E6F63LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v7 = 0xE700000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F72746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x656C756465686373LL && a2 == 0xEF73656972746E45LL)
  {
    swift_bridgeObjectRelease(0xEF73656972746E45LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C756465686373LL, 0xEF73656972746E45LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E2A8C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100367340LL;
    if (a2 == 0x8000000100367340LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100367340LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x4C6D756D6978616DLL && a2 == 0xEE0079636E657461LL)
  {
    swift_bridgeObjectRelease(0xEE0079636E657461LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D756D6978616DLL, 0xEE0079636E657461LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E2B9C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x73444970616DLL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73444970616DLL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E2C74(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100367260LL;
    if (a2 == 0x8000000100367260LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100367260LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x8000000100367280LL)
  {
    unint64_t v6 = 0x8000000100367280LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x8000000100367280LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 1701605234 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100367360LL)
  {
    unint64_t v8 = 0x8000000100367360LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367360LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100367380LL)
  {
    swift_bridgeObjectRelease(0x8000000100367380LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100367380LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_1001E2E60(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701605234 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v7 = 0xEA00000000007373LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v8 = 0x8000000100367360LL;
    if (a2 == 0x8000000100367360LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367360LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100367380LL)
  {
    swift_bridgeObjectRelease(0x8000000100367380LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100367380LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1001E300C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4953534273736269LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v5 = 0xE900000000000044LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4953534273736269LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v7 = 0xEA00000000007373LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v8 = 0x8000000100367360LL;
    if (a2 == 0x8000000100367360LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367360LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100367380LL)
  {
    swift_bridgeObjectRelease(0x8000000100367380LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100367380LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1001E31D4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v5 = 0xEA00000000007373LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v7 = 0x8000000100367360LL;
    if (a2 == 0x8000000100367360LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367360LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v8 = 0x8000000100367380LL;
    if (a2 == 0x8000000100367380LL) {
      goto LABEL_18;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100367380LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x44496873656DLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496873656DLL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1001E3384(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6D69547472617473LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v5 = 0xE900000000000065LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D69547472617473LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6469737362LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v7 = 0xE500000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6469737362LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x746E4565676E6172LL && a2 == 0xEB00000000317972LL)
  {
    unint64_t v8 = 0xEB00000000317972LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E4565676E6172LL, 0xEB00000000317972LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x746E4565676E6172LL && a2 == 0xEB00000000327972LL)
  {
    unint64_t v9 = 0xEB00000000327972LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E4565676E6172LL, 0xEB00000000327972LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x746E4565676E6172LL && a2 == 0xEB00000000337972LL)
  {
    unint64_t v10 = 0xEB00000000337972LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E4565676E6172LL, 0xEB00000000337972LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0xD000000000000019LL && a2 == 0x80000001003673A0LL)
  {
    swift_bridgeObjectRelease(0x80000001003673A0LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x80000001003673A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_1001E35FC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7553726568706963LL && a2 == 0xEB00000000657469LL)
  {
    unint64_t v5 = 0xEB00000000657469LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7553726568706963LL, 0xEB00000000657469LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x496873696C627570LL && a2 == 0xE900000000000044LL)
  {
    swift_bridgeObjectRelease(0xE900000000000044LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496873696C627570LL, 0xE900000000000044LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E3710(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696C696261706163LL && a2 == 0xEC00000073656974LL)
  {
    unint64_t v5 = 0xEC00000073656974LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163LL, 0xEC00000073656974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7553726568706963LL && a2 == 0xEC00000073657469LL)
  {
    swift_bridgeObjectRelease(0xEC00000073657469LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7553726568706963LL, 0xEC00000073657469LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E381C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012LL && a2 == 0x80000001003673C0LL)
  {
    swift_bridgeObjectRelease(0x80000001003673C0LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001003673C0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

uint64_t sub_1001E38A0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x496873696C627570LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v5 = 0xE900000000000044LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496873696C627570LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E398C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x444967736D6ELL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444967736D6ELL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v7 = 0x80000001003673E0LL;
    if (a2 == 0x80000001003673E0LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001003673E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x6C6F72746E6F63LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F72746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0x6E6F73616572LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v9 = 0xE600000000000000LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73616572LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100367400LL)
  {
    swift_bridgeObjectRelease(0x8000000100367400LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100367400LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_1001E3B8C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000021LL && a2 == 0x8000000100367420LL)
  {
    swift_bridgeObjectRelease(0x8000000100367420LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x8000000100367420LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

uint64_t sub_1001E3C10(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6556726568706963LL && a2 == 0xED00006E6F697372LL)
  {
    unint64_t v5 = 0xED00006E6F697372LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556726568706963LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000LL)
  {
    unint64_t v7 = 0xE500000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6F6ELL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 6775156 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(6775156LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001E3D70(uint64_t a1, unint64_t a2)
{
  if (a1 == 6911343 && a2 == 0xE300000000000000LL)
  {
    unint64_t v5 = 0xE300000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6911343LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001E3E40(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6D726F6674616C70LL && a2 == 0xEC00000065707954LL)
  {
    unint64_t v7 = 0xEC00000065707954LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D726F6674616C70LL, 0xEC00000065707954LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7367616C66LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7367616C66LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000100367450LL)
  {
    swift_bridgeObjectRelease(0x8000000100367450LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100367450LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

unint64_t sub_1001E4004()
{
  unint64_t result = qword_10040B6A8;
  if (!qword_10040B6A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.AttributeType,  &type metadata for NANAttribute.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B6A8);
  }

  return result;
}

unint64_t sub_1001E4048()
{
  unint64_t result = qword_10040B6B0;
  if (!qword_10040B6B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CustomDeviceInformation.PlatformType,  &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040B6B0);
  }

  return result;
}

unint64_t sub_1001E408C()
{
  unint64_t result = qword_10040B6B8;
  if (!qword_10040B6B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Status,  &type metadata for NANAttribute.PairingBootstrapping.Status);
    atomic_store(result, (unint64_t *)&qword_10040B6B8);
  }

  return result;
}

unint64_t sub_1001E40D0()
{
  unint64_t result = qword_10040B6C0;
  if (!qword_10040B6C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.PairingType,  &type metadata for NANAttribute.PairingBootstrapping.PairingType);
    atomic_store(result, (unint64_t *)&qword_10040B6C0);
  }

  return result;
}

unint64_t sub_1001E4114()
{
  unint64_t result = qword_10040B6C8;
  if (!qword_10040B6C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion,  &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040B6C8);
  }

  return result;
}

unint64_t sub_1001E4158()
{
  unint64_t result = qword_10040B6D0;
  if (!qword_10040B6D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType,  &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType);
    atomic_store(result, (unint64_t *)&qword_10040B6D0);
  }

  return result;
}

unint64_t sub_1001E419C()
{
  unint64_t result = qword_10040B6D8;
  if (!qword_10040B6D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Status,  &type metadata for NANAttribute.RangingSetup.Status);
    atomic_store(result, (unint64_t *)&qword_10040B6D8);
  }

  return result;
}

unint64_t sub_1001E41E0()
{
  unint64_t result = qword_10040B6E0;
  if (!qword_10040B6E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.AttributeType,  &type metadata for NANAttribute.RangingSetup.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B6E0);
  }

  return result;
}

unint64_t sub_1001E4224()
{
  unint64_t result = qword_10040B6E8;
  if (!qword_10040B6E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Status,  &type metadata for NANAttribute.DeviceLink.Status);
    atomic_store(result, (unint64_t *)&qword_10040B6E8);
  }

  return result;
}

unint64_t sub_1001E4268()
{
  unint64_t result = qword_10040B6F0;
  if (!qword_10040B6F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.AttributeType,  &type metadata for NANAttribute.DeviceLink.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B6F0);
  }

  return result;
}

unint64_t sub_1001E42AC()
{
  unint64_t result = qword_10040B6F8;
  if (!qword_10040B6F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.ServiceInfoType,  &type metadata for NANAttribute.DatapathExtension.ServiceInfoType);
    atomic_store(result, (unint64_t *)&qword_10040B6F8);
  }

  return result;
}

unint64_t sub_1001E42F0()
{
  unint64_t result = qword_10040B700;
  if (!qword_10040B700)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Status,  &type metadata for NANAttribute.Datapath.Status);
    atomic_store(result, (unint64_t *)&qword_10040B700);
  }

  return result;
}

unint64_t sub_1001E4334()
{
  unint64_t result = qword_10040B708;
  if (!qword_10040B708)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.AttributeType,  &type metadata for NANAttribute.Datapath.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B708);
  }

  return result;
}

uint64_t sub_1001E4378(unint64_t a1, unint64_t a2)
{
  return sub_1001A1464(a1, a2, *(void **)(v2 + 16), **(void **)(v2 + 24));
}

unint64_t sub_1001E4394()
{
  unint64_t result = qword_10040B710;
  if (!qword_10040B710)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz,  &type metadata for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz);
    atomic_store(result, (unint64_t *)&qword_10040B710);
  }

  return result;
}

unint64_t sub_1001E43D8()
{
  unint64_t result = qword_10040B718;
  if (!qword_10040B718)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040B718);
  }

  return result;
}

uint64_t sub_1001E441C(unint64_t a1, unint64_t a2)
{
  return sub_1001A13CC(a1, a2, *(void **)(v2 + 16), **(void **)(v2 + 24));
}

unint64_t sub_1001E4438()
{
  unint64_t result = qword_10040B748;
  if (!qword_10040B748)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_10040B748);
  }

  return result;
}

unint64_t sub_1001E447C()
{
  unint64_t result = qword_10040B750;
  if (!qword_10040B750)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method,  &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040B750);
  }

  return result;
}

unint64_t sub_1001E44C0()
{
  unint64_t result = qword_10040B758;
  if (!qword_10040B758)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion,  &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040B758);
  }

  return result;
}

unint64_t sub_1001E4504()
{
  unint64_t result = qword_10040B770;
  if (!qword_10040B770)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANScheduleEntry,  &type metadata for NANScheduleEntry);
    atomic_store(result, (unint64_t *)&qword_10040B770);
  }

  return result;
}

unint64_t sub_1001E4548()
{
  unint64_t result = qword_10040B780;
  if (!qword_10040B780)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control,  &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040B780);
  }

  return result;
}

unint64_t sub_1001E458C()
{
  unint64_t result = qword_10040B7A0;
  if (!qword_10040B7A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier,  &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040B7A0);
  }

  return result;
}

unint64_t sub_1001E45D0()
{
  unint64_t result = qword_10040B7B0;
  if (!qword_10040B7B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities,  &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B7B0);
  }

  return result;
}

unint64_t sub_1001E4614()
{
  unint64_t result = qword_10040B7C0;
  if (!qword_10040B7C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.CipherSuiteInformation.CipherSuite,  &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040B7C0);
  }

  return result;
}

unint64_t sub_1001E4658()
{
  unint64_t result = qword_10040B7D0;
  if (!qword_10040B7D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANCipherSuite,  &type metadata for NANCipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040B7D0);
  }

  return result;
}

unint64_t sub_1001E469C()
{
  unint64_t result = qword_10040B7D8;
  if (!qword_10040B7D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.FineTimingMeasurementRangeReport.Entry,  &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry);
    atomic_store(result, (unint64_t *)&qword_10040B7D8);
  }

  return result;
}

unint64_t sub_1001E46E0()
{
  unint64_t result = qword_10040B7F0;
  if (!qword_10040B7F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NonNANOperatingChannelInformation,  &type metadata for NonNANOperatingChannelInformation);
    atomic_store(result, (unint64_t *)&qword_10040B7F0);
  }

  return result;
}

unint64_t sub_1001E4724()
{
  unint64_t result = qword_10040B7F8;
  if (!qword_10040B7F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NonNANBeaconInformation,  &type metadata for NonNANBeaconInformation);
    atomic_store(result, (unint64_t *)&qword_10040B7F8);
  }

  return result;
}

unint64_t sub_1001E4768()
{
  unint64_t result = qword_10040B810;
  if (!qword_10040B810)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole,  &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040B810);
  }

  return result;
}

unint64_t sub_1001E47AC()
{
  unint64_t result = qword_10040B820;
  if (!qword_10040B820)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B3F0,  &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B820);
  }

  return result;
}

unint64_t sub_1001E47F0()
{
  unint64_t result = qword_10040B828;
  if (!qword_10040B828)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole,  &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040B828);
  }

  return result;
}

unint64_t sub_1001E4834()
{
  unint64_t result = qword_10040B838;
  if (!qword_10040B838)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANMapIDs, &type metadata for NANMapIDs);
    atomic_store(result, (unint64_t *)&qword_10040B838);
  }

  return result;
}

unint64_t sub_1001E4878()
{
  unint64_t result = qword_10040B848;
  if (!qword_10040B848)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.Control,  &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040B848);
  }

  return result;
}

unint64_t sub_1001E48BC()
{
  unint64_t result = qword_10040B860;
  if (!qword_10040B860)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters,  &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040B860);
  }

  return result;
}

unint64_t sub_1001E4900()
{
  unint64_t result = qword_10040B868;
  if (!qword_10040B868)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation,  &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040B868);
  }

  return result;
}

unint64_t sub_1001E4944()
{
  unint64_t result = qword_10040B870;
  if (!qword_10040B870)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040B870);
  }

  return result;
}

unint64_t sub_1001E4988()
{
  unint64_t result = qword_10040B878;
  if (!qword_10040B878)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl,  &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040B878);
  }

  return result;
}

unint64_t sub_1001E49CC()
{
  unint64_t result = qword_10040B890;
  if (!qword_10040B890)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceLink.Control,  &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040B890);
  }

  return result;
}

unint64_t sub_1001E4A10()
{
  unint64_t result = qword_10040B8A0;
  if (!qword_10040B8A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DataCluster.Control,  &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040B8A0);
  }

  return result;
}

unint64_t sub_1001E4A54()
{
  unint64_t result = qword_10040B8B0;
  if (!qword_10040B8B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Availability.Control,  &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040B8B0);
  }

  return result;
}

unint64_t sub_1001E4A98()
{
  unint64_t result = qword_10040B8C0;
  if (!qword_10040B8C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAvailabilityEntry,  &type metadata for NANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040B8C0);
  }

  return result;
}

unint64_t sub_1001E4ADC()
{
  unint64_t result = qword_10040B8D0;
  if (!qword_10040B8D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DatapathExtension.Control,  &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040B8D0);
  }

  return result;
}

unint64_t sub_1001E4B20()
{
  unint64_t result = qword_10040B8D8;
  if (!qword_10040B8D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.Datapath.Control,  &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040B8D8);
  }

  return result;
}

uint64_t sub_1001E4B64(unint64_t a1, unint64_t a2)
{
  return sub_1001C5958(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_1001E4B6C()
{
  unint64_t result = qword_10040B8F0;
  if (!qword_10040B8F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation,  &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation);
    atomic_store(result, (unint64_t *)&qword_10040B8F0);
  }

  return result;
}

unint64_t sub_1001E4BB0()
{
  unint64_t result = qword_10040B8F8;
  if (!qword_10040B8F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode,  &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040B8F8);
  }

  return result;
}

unint64_t sub_1001E4BF4()
{
  unint64_t result = qword_10040B900;
  if (!qword_10040B900)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount,  &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040B900);
  }

  return result;
}

unint64_t sub_1001E4C38()
{
  unint64_t result = qword_10040B908;
  if (!qword_10040B908)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities,  &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B908);
  }

  return result;
}

unint64_t sub_1001E4C7C()
{
  unint64_t result = qword_10040B918;
  if (!qword_10040B918)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANMasterRank, &type metadata for NANMasterRank);
    atomic_store(result, (unint64_t *)&qword_10040B918);
  }

  return result;
}

unint64_t sub_1001E4CC0()
{
  unint64_t result = qword_10040B938;
  if (!qword_10040B938)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DeprecatedNANAvailabilityEntry,  &type metadata for DeprecatedNANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040B938);
  }

  return result;
}

unint64_t sub_1001E4D04()
{
  unint64_t result = qword_10040B948;
  if (!qword_10040B948)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DeprecatedNANAvailability,  &type metadata for DeprecatedNANAvailability);
    atomic_store(result, (unint64_t *)&qword_10040B948);
  }

  return result;
}

unint64_t sub_1001E4D48()
{
  unint64_t result = qword_10040B970;
  if (!qword_10040B970)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control,  &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040B970);
  }

  return result;
}

unint64_t sub_1001E4D8C()
{
  unint64_t result = qword_10040B978;
  if (!qword_10040B978)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.RangeLimit,  &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit);
    atomic_store(result, (unint64_t *)&qword_10040B978);
  }

  return result;
}

unint64_t sub_1001E4DD0()
{
  unint64_t result = qword_10040B988;
  if (!qword_10040B988)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANServiceName.Hash,  &type metadata for NANServiceName.Hash);
    atomic_store(result, (unint64_t *)&qword_10040B988);
  }

  return result;
}

unint64_t sub_1001E4E14()
{
  unint64_t result = qword_10040B990;
  if (!qword_10040B990)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control,  &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040B990);
  }

  return result;
}

unint64_t sub_1001E4E58()
{
  unint64_t result = qword_10040B9A8;
  if (!qword_10040B9A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B3A0,  &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B9A8);
  }

  return result;
}

uint64_t _s7CoreP2P12NANAttributeO18WLANInfrastructureV10DeviceRoleOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001E4EE8 + 4 * byte_100351ECF[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001E4F1C + 4 * byte_100351ECA[v4]))();
}

uint64_t sub_1001E4F1C(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E4F24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001E4F2CLL);
  }
  return result;
}

uint64_t sub_1001E4F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001E4F40LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001E4F44(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E4F4C(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO8DatapathV13AttributeTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1001E4FB4 + 4 * byte_100351ED9[v4]))();
  }
  *a1  = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001E4FE8 + 4 * byte_100351ED4[v4]))();
}

uint64_t sub_1001E4FE8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E4FF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001E4FF8LL);
  }
  return result;
}

uint64_t sub_1001E5004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001E500CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1001E5010(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E5018(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedWLANInfrastructure.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys;
}

unint64_t sub_1001E5038()
{
  unint64_t result = qword_10040B9D0;
  if (!qword_10040B9D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B2C0,  &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B9D0);
  }

  return result;
}

unint64_t sub_1001E5080()
{
  unint64_t result = qword_10040B9D8;
  if (!qword_10040B9D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B378,  &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B9D8);
  }

  return result;
}

unint64_t sub_1001E50C8()
{
  unint64_t result = qword_10040B9E0;
  if (!qword_10040B9E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B2E8,  &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B9E0);
  }

  return result;
}

unint64_t sub_1001E5110()
{
  unint64_t result = qword_10040B9E8;
  if (!qword_10040B9E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B310,  &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B9E8);
  }

  return result;
}

unint64_t sub_1001E5158()
{
  unint64_t result = qword_10040B9F0;
  if (!qword_10040B9F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B230,  &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B9F0);
  }

  return result;
}

unint64_t sub_1001E51A0()
{
  unint64_t result = qword_10040B9F8;
  if (!qword_10040B9F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10035B258,  &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B9F8);
  }

  return result;
}

uint64_t SymmetricKey.rawRepresentation.getter()
{
  return sub_1001E52BC( (uint64_t)sub_100061064,  (void (*)(uint64_t *__return_ptr, uint64_t, void, void *))&SymmetricKey.withUnsafeBytes<A>(_:));
}

uint64_t HashedAuthenticationCode.rawRepresentation.getter(uint64_t a1)
{
  return v2;
}

uint64_t SharedSecret.rawRepresentation.getter()
{
  return sub_1001E52BC( (uint64_t)sub_100061064,  (void (*)(uint64_t *__return_ptr, uint64_t, void, void *))&SharedSecret.withUnsafeBytes<A>(_:));
}

uint64_t sub_1001E52BC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, void, void *))
{
  return v3;
}

uint64_t P256.KeyAgreement.PublicKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E550C( a1,  (uint64_t (*)(void))&type metadata accessor for P256.KeyAgreement.PublicKey,  (void (*)(__int128 *, void *, void *))&P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:),  a2);
}

uint64_t static P256.KeyAgreement.PublicKey.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(a1);
  unint64_t v3 = v2;
  uint64_t v4 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v1);
  unint64_t v6 = v5;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v1, v3);
  char v8 = v7;
  sub_1000208D8(v4, v6);
  sub_1000208D8(v1, v3);
  return v8 & 1;
}

uint64_t P256.KeyAgreement.PublicKey.hash(into:)(uint64_t a1)
{
  uint64_t v2 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(a1);
  unint64_t v4 = v3;
  Data.hash(into:)(a1, v2, v3);
  return sub_1000208D8(v2, v4);
}

Swift::Int P256.KeyAgreement.PublicKey.hashValue.getter()
{
  uint64_t v0 = Hasher.init(_seed:)(v5, 0LL);
  uint64_t v1 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v0);
  unint64_t v3 = v2;
  Data.hash(into:)(v5, v1, v2);
  sub_1000208D8(v1, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001E5444@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.KeyAgreement.PublicKey.init(from:)(a1, a2);
}

Swift::Int sub_1001E5458(uint64_t a1)
{
  uint64_t v1 = Hasher.init(_seed:)(v6, a1);
  uint64_t v2 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v1);
  unint64_t v4 = v3;
  Data.hash(into:)(v6, v2, v3);
  sub_1000208D8(v2, v4);
  return Hasher._finalize()();
}

uint64_t P256.Signing.PrivateKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E550C( a1,  (uint64_t (*)(void))&type metadata accessor for P256.Signing.PrivateKey,  (void (*)(__int128 *, void *, void *))&P256.Signing.PrivateKey.init<A>(rawRepresentation:),  a2);
}

uint64_t sub_1001E54D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PrivateKey.init(from:)(a1, a2);
}

uint64_t P256.Signing.PublicKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E550C( a1,  (uint64_t (*)(void))&type metadata accessor for P256.Signing.PublicKey,  (void (*)(__int128 *, void *, void *))&P256.Signing.PublicKey.init<A>(rawRepresentation:),  a2);
}

uint64_t sub_1001E550C@<X0>( void *a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(__int128 *, void *, void *)@<X2>, uint64_t a4@<X8>)
{
  char v26 = a3;
  uint64_t v7 = a2(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v19 - v9;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  dispatch thunk of Decoder.singleValueContainer()(v23, v11, v12);
  if (!v4)
  {
    int v19 = v10;
    uint64_t v20 = v8;
    uint64_t v13 = v26;
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    sub_100021104(v23, v24);
    unint64_t v16 = sub_1000702C8();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)( &v22,  &type metadata for Data,  &type metadata for Data,  v16,  v14,  v15);
    __int128 v21 = v22;
    uint64_t v17 = v19;
    v13(&v21, &type metadata for Data, &protocol witness table for Data);
    sub_100002AC4(v23);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a4, v17, v7);
  }

  return sub_100002AC4(a1);
}

uint64_t sub_1001E5678@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PublicKey.init(from:)(a1, a2);
}

uint64_t P256.Signing.ECDSASignature.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  dispatch thunk of Decoder.singleValueContainer()(v18, v9, v10);
  if (!v2)
  {
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    sub_100021104(v18, v19);
    unint64_t v13 = sub_1000702C8();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)( &v17,  &type metadata for Data,  &type metadata for Data,  v13,  v11,  v12);
    __int128 v16 = v17;
    unint64_t v14 = sub_10005D508();
    P256.Signing.ECDSASignature.init<A>(rawRepresentation:)(&v16, &type metadata for Data, v14);
    sub_100002AC4(v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  }

  return sub_100002AC4(a1);
}

uint64_t sub_1001E57E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.ECDSASignature.init(from:)(a1, a2);
}

unint64_t sub_1001E5800()
{
  unint64_t result = qword_10040BA00;
  if (!qword_10040BA00)
  {
    uint64_t v1 = type metadata accessor for P256.KeyAgreement.PublicKey(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for P256.KeyAgreement.PublicKey, v1);
    atomic_store(result, (unint64_t *)&qword_10040BA00);
  }

  return result;
}

uint64_t NANManagementFrameType.init(frameType:frameSubtype:)(char a1, unsigned __int8 a2)
{
  if (a1 == 19) {
    return 14LL;
  }
  if (a1 != 24) {
    return 15LL;
  }
  uint64_t result = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(a2);
  return result;
}

BOOL static NANManagementFrameType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  if (a1 == 14) {
    return a2 == 14;
  }
  if (a2 == 14) {
    return 0LL;
  }
  return byte_10035B8C8[a1] == byte_10035B8C8[a2];
}

void *NANInformationElement.ouiType.unsafeMutableAddressor()
{
  return &static NANInformationElement.ouiType;
}

uint64_t NANManagementFrameType.init(from:)(void *a1)
{
  return sub_1001E6200(a1);
}

uint64_t NANManagementFrameType.encode(to:)(void *a1, unsigned __int8 a2)
{
  int v4 = a2;
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Encoder.unkeyedContainer()(v16, v5, v6);
  uint64_t v7 = v17;
  uint64_t v8 = v18;
  sub_1000237C8((uint64_t)v16, v17);
  if (v4 == 14)
  {
    uint64_t v9 = 19LL;
    uint64_t v10 = v7;
    uint64_t v11 = v8;
LABEL_5:
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v9, v10, v11);
    return sub_100002AC4(v16);
  }

  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(24LL, v7, v8);
  if (!v2)
  {
    uint64_t v12 = (char)a2;
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    sub_1000237C8((uint64_t)v16, v17);
    uint64_t v9 = byte_10035B8C8[v12];
    uint64_t v10 = v13;
    uint64_t v11 = v14;
    goto LABEL_5;
  }

  return sub_100002AC4(v16);
}

uint64_t NANActionFrameSubtype.rawValue.getter(char a1)
{
  return byte_10035B8C8[a1];
}

unint64_t NANManagementFrameType.description.getter(char a1)
{
  if (a1 == 14) {
    return 0xD000000000000011LL;
  }
  uint64_t v9 = v1;
  uint64_t v10 = v2;
  uint64_t v7 = 0x206E6F69746361LL;
  unint64_t v8 = 0xE700000000000000LL;
  char v6 = a1;
  v4._countAndFlagsBits  = String.init<A>(describing:)(&v6, &type metadata for NANActionFrameSubtype);
  object  = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  return v7;
}

void NANManagementFrameType.hash(into:)(uint64_t a1, char a2)
{
  if (a2 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035B8C8[a2]);
  }

Swift::Int NANManagementFrameType.hashValue.getter(unsigned __int8 a1)
{
  int v2 = a1;
  Hasher.init(_seed:)(v4, 0LL);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035B8C8[(char)a1]);
  }

  return Hasher._finalize()();
}

Swift::Int sub_1001E5B64()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  if (v1 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035B8C8[v1]);
  }

  return Hasher._finalize()();
}

void sub_1001E5BD0()
{
  uint64_t v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035B8C8[v1]);
  }

Swift::Int sub_1001E5C20(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035B8C8[v2]);
  }

  return Hasher._finalize()();
}

uint64_t sub_1001E5C88@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001E6200(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001E5CB0(void *a1)
{
  return NANManagementFrameType.encode(to:)(a1, *v1);
}

unint64_t sub_1001E5CC8()
{
  return NANManagementFrameType.description.getter(*v0);
}

BOOL sub_1001E5CD0(char *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2 == 14) {
    return (_DWORD)v3 == 14;
  }
  if ((_DWORD)v3 == 14) {
    return 0LL;
  }
  return byte_10035B8C8[v2] == byte_10035B8C8[v3];
}

BOOL sub_1001E5D1C(char *a1, char *a2)
{
  return byte_10035B8C8[*a1] == byte_10035B8C8[*a2];
}

uint64_t sub_1001E5D40@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1001E5D68(_BYTE *a1@<X8>)
{
  *a1  = byte_10035B8C8[*v1];
}

Swift::Int sub_1001E5D80()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(byte_10035B8C8[v1]);
  return Hasher._finalize()();
}

void sub_1001E5DCC()
{
}

Swift::Int sub_1001E5E00(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(byte_10035B8C8[v2]);
  return Hasher._finalize()();
}

void NANInformationElement.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v5 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain(a2);
    do
    {
      NANAttribute.hash(into:)();
      v5 += v6;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a2);
  }

Swift::Int NANInformationElement.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      NANAttribute.hash(into:)();
      v4 += v5;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(a1);
  }

  return Hasher._finalize()();
}

Swift::Int sub_1001E5F78()
{
  return NANInformationElement.hashValue.getter(*v0);
}

void sub_1001E5F80(uint64_t a1)
{
}

Swift::Int sub_1001E5F88(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = *(void *)(type metadata accessor for NANAttribute(0LL) - 8);
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain(v2);
    do
    {
      NANAttribute.hash(into:)();
      v5 += v6;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v2);
  }

  return Hasher._finalize()();
}

uint64_t sub_1001E601C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = NANInformationElement.init(from:)(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t NANInformationElement.init(from:)(void *a1)
{
  return sub_1001E649C(a1);
}

uint64_t sub_1001E6058(void *a1)
{
  return NANInformationElement.encode(to:)(a1, *v1);
}

uint64_t NANInformationElement.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v13, v4, v5);
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  sub_1000237C8((uint64_t)v13, v14);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(19LL, v6, v7);
  if (!v2)
  {
    uint64_t v16 = a2;
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    sub_1000237C8((uint64_t)v13, v14);
    uint64_t v10 = sub_100002274(&qword_100405E78);
    unint64_t v11 = sub_100198C54();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v16, v10, v11, v8, v9);
  }

  return sub_100002AC4(v13);
}

uint64_t sub_1001E6150(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 1:
      uint64_t result = 0LL;
      break;
    case 2:
      return result;
    case 3:
      uint64_t result = 2LL;
      break;
    case 4:
      uint64_t result = 3LL;
      break;
    case 5:
      uint64_t result = 4LL;
      break;
    case 6:
      uint64_t result = 5LL;
      break;
    case 7:
      uint64_t result = 6LL;
      break;
    case 8:
      uint64_t result = 7LL;
      break;
    case 9:
      uint64_t result = 8LL;
      break;
    case 10:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      goto LABEL_5;
    case 11:
      uint64_t result = 10LL;
      break;
    case 12:
      uint64_t result = 11LL;
      break;
    case 13:
      uint64_t result = 12LL;
      break;
    case 19:
      uint64_t result = 9LL;
      break;
    default:
      if (v1 == 221) {
        uint64_t result = 13LL;
      }
      else {
LABEL_5:
      }
        uint64_t result = 14LL;
      break;
  }

  return result;
}

uint64_t sub_1001E6200(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (uint64_t)sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v24, v3, v4);
  if (v1) {
    goto LABEL_4;
  }
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  sub_1000237C8((uint64_t)v24, v25);
  char v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7);
  if (v8 == 19)
  {
    uint64_t v5 = 14LL;
    goto LABEL_12;
  }

  if (v8 == 24)
  {
    uint64_t v10 = v25;
    uint64_t v11 = v26;
    sub_1000237C8((uint64_t)v24, v25);
    unsigned __int8 v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v10, v11);
    uint64_t v5 = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(v12);
    if (v5 == 14)
    {
      sub_10002084C((uint64_t)v24, (uint64_t)v23);
      unint64_t v21 = 0LL;
      unint64_t v22 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(61LL);
      v13._object  = (void *)0x80000001003674D0LL;
      v13._countAndFlagsBits  = 0xD000000000000030LL;
      String.append(_:)(v13);
      v14._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      object  = v14._object;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(object);
      v16._countAndFlagsBits  = 0x6570797462757320LL;
      v16._object  = (void *)0xE900000000000020LL;
      String.append(_:)(v16);
      goto LABEL_14;
    }

uint64_t sub_1001E649C(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (uint64_t)sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v16, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    uint64_t v5 = sub_1000237C8((uint64_t)v16, v17);
    if (dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7) == 19)
    {
      uint64_t v8 = v17;
      uint64_t v9 = v18;
      sub_1000237C8((uint64_t)v16, v17);
      uint64_t v10 = type metadata accessor for NANAttribute(0LL);
      uint64_t v11 = sub_1001E694C(&qword_100406940, (uint64_t)&protocol conformance descriptor for NANAttribute);
      uint64_t v5 = UnkeyedDecodingContainer.inferredArrayDecode<A>()(v8, v10, v9, v11);
    }

    else
    {
      unint64_t v12 = sub_1000033FC();
      uint64_t v13 = swift_allocError(&type metadata for WiFiError, v12, 0LL, 0LL);
      *(_OWORD *)uint64_t v14 = xmmword_100337020;
      *(_BYTE *)(v14 + 16)  = 2;
      swift_willThrow(v13);
    }

    sub_100002AC4(v16);
  }

  sub_100002AC4(a1);
  return v5;
}

unint64_t sub_1001E6600()
{
  unint64_t result = qword_10040BA08;
  if (!qword_10040BA08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANManagementFrameType,  &type metadata for NANManagementFrameType);
    atomic_store(result, (unint64_t *)&qword_10040BA08);
  }

  return result;
}

unint64_t sub_1001E6648()
{
  unint64_t result = qword_10040BA10;
  if (!qword_10040BA10)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANActionFrameSubtype,  &type metadata for NANActionFrameSubtype);
    atomic_store(result, (unint64_t *)&qword_10040BA10);
  }

  return result;
}

unint64_t sub_1001E6690()
{
  unint64_t result = qword_10040BA18;
  if (!qword_10040BA18)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANInformationElement,  &type metadata for NANInformationElement);
    atomic_store(result, (unint64_t *)&qword_10040BA18);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for NANManagementFrameType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF2)
  {
    unsigned int v6 = *a1;
    BOOL v7 = v6 >= 0xE;
    unsigned int v8 = v6 - 14;
    if (!v7) {
      unsigned int v8 = -1;
    }
    if (v8 + 1 >= 2) {
      return v8;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 14;
    if (a2 + 14 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1001E6724 + 4 * byte_10035B613[v4]))();
  }

uint64_t storeEnumTagSinglePayload for NANManagementFrameType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 14;
  if (a3 + 14 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5)  = v4;
  }
  else {
    LODWORD(v5)  = 0;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_1001E67CC + 4 * byte_10035B61D[v5]))();
  }
  *a1  = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1001E6800 + 4 * byte_10035B618[v5]))();
}

uint64_t sub_1001E6800(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E6808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001E6810LL);
  }
  return result;
}

uint64_t sub_1001E681C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001E6824LL);
  }
  *(_BYTE *)unint64_t result = a2 + 14;
  return result;
}

uint64_t sub_1001E6828(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E6830(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E683C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 0xE) {
    return v1 - 13;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_1001E6850(_BYTE *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 13;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANManagementFrameType()
{
  return &type metadata for NANManagementFrameType;
}

uint64_t storeEnumTagSinglePayload for NANActionFrameSubtype(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1001E68BC + 4 * byte_10035B627[v4]))();
  }
  *a1  = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1001E68F0 + 4 * byte_10035B622[v4]))();
}

uint64_t sub_1001E68F0(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E68F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1001E6900LL);
  }
  return result;
}

uint64_t sub_1001E690C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1001E6914LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_1001E6918(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1001E6920(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrameSubtype()
{
  return &type metadata for NANActionFrameSubtype;
}

ValueMetadata *type metadata accessor for NANInformationElement()
{
  return &type metadata for NANInformationElement;
}

uint64_t sub_1001E694C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for NANAttribute(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t *NANConstants.csaMatterServiceName.unsafeMutableAddressor()
{
  if (qword_100404428 != -1) {
    swift_once(&qword_100404428, sub_1001E6B28);
  }
  return &static NANConstants.csaMatterServiceName;
}

uint64_t sub_1001E69CC(uint64_t a1)
{
  return sub_1001E6B58( a1,  0x74656E7265746E69LL,  0xE800000000000000LL,  &static NANConstants.internetSharingServiceName,  &qword_100410910);
}

uint64_t *NANConstants.internetSharingServiceName.unsafeMutableAddressor()
{
  if (qword_100404418 != -1) {
    swift_once(&qword_100404418, sub_1001E69CC);
  }
  return &static NANConstants.internetSharingServiceName;
}

uint64_t static NANConstants.internetSharingServiceName.getter()
{
  return sub_1001E6AD8(&qword_100404418, &static NANConstants.internetSharingServiceName, &qword_100410910);
}

uint64_t sub_1001E6A50(uint64_t a1)
{
  return sub_1001E6B58( a1,  0xD000000000000012LL,  0x8000000100367510LL,  &static NANConstants.airplayServiceName,  &qword_100410920);
}

uint64_t *NANConstants.airplayServiceName.unsafeMutableAddressor()
{
  if (qword_100404420 != -1) {
    swift_once(&qword_100404420, sub_1001E6A50);
  }
  return &static NANConstants.airplayServiceName;
}

uint64_t static NANConstants.airplayServiceName.getter()
{
  return sub_1001E6AD8(&qword_100404420, &static NANConstants.airplayServiceName, &qword_100410920);
}

uint64_t sub_1001E6AD8(void *a1, uint64_t *a2, void *a3)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

uint64_t sub_1001E6B28(uint64_t a1)
{
  return sub_1001E6B58( a1,  0x6372657474616D5FLL,  0xED00007064755F2ELL,  &static NANConstants.csaMatterServiceName,  &qword_100410930);
}

uint64_t sub_1001E6B58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t result = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(a2, a3);
  if (v8)
  {
    *a4  = result;
    *a5  = v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t static NANConstants.csaMatterServiceName.getter()
{
  return sub_1001E6AD8(&qword_100404428, &static NANConstants.csaMatterServiceName, &qword_100410930);
}

uint64_t sub_1001E6BB4(uint64_t a1)
{
  return sub_1001E6D8C(a1, static NANConstants.maximumServiceRetryRate, 2LL);
}

uint64_t NANConstants.maximumServiceRetryRate.unsafeMutableAddressor()
{
  return sub_1001E6C28(&qword_100404430, (uint64_t)static NANConstants.maximumServiceRetryRate, (uint64_t)sub_1001E6BB4);
}

uint64_t static NANConstants.maximumServiceRetryRate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E6C84( &qword_100404430,  (uint64_t)static NANConstants.maximumServiceRetryRate,  (uint64_t)sub_1001E6BB4,  a1);
}

uint64_t sub_1001E6BFC(uint64_t a1)
{
  return sub_1001E6D8C(a1, static NANConstants.serviceTerminateEventTimeout, 4LL);
}

uint64_t NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor()
{
  return sub_1001E6C28( &qword_100404438,  (uint64_t)static NANConstants.serviceTerminateEventTimeout,  (uint64_t)sub_1001E6BFC);
}

uint64_t sub_1001E6C28(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return sub_1000032DC(v4, a2);
}

uint64_t static NANConstants.serviceTerminateEventTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E6C84( &qword_100404438,  (uint64_t)static NANConstants.serviceTerminateEventTimeout,  (uint64_t)sub_1001E6BFC,  a1);
}

uint64_t sub_1001E6C84@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = sub_1000032DC(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_1001E6CEC(uint64_t a1)
{
  return sub_1001E6D8C(a1, static NANConstants.authenticationRequestTimeout, 8LL);
}

uint64_t NANConstants.authenticationRequestTimeout.unsafeMutableAddressor()
{
  return sub_1001E6C28( &qword_100404440,  (uint64_t)static NANConstants.authenticationRequestTimeout,  (uint64_t)sub_1001E6CEC);
}

uint64_t static NANConstants.authenticationRequestTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E6C84( &qword_100404440,  (uint64_t)static NANConstants.authenticationRequestTimeout,  (uint64_t)sub_1001E6CEC,  a1);
}

uint64_t sub_1001E6D34(uint64_t a1)
{
  return sub_1001E6D8C(a1, static NANConstants.followUpTimeout, 7LL);
}

uint64_t NANConstants.followUpTimeout.unsafeMutableAddressor()
{
  return sub_1001E6C28(&qword_100404448, (uint64_t)static NANConstants.followUpTimeout, (uint64_t)sub_1001E6D34);
}

uint64_t static NANConstants.followUpTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E6C84(&qword_100404448, (uint64_t)static NANConstants.followUpTimeout, (uint64_t)sub_1001E6D34, a1);
}

uint64_t sub_1001E6D7C(uint64_t a1)
{
  return sub_1001E6D8C(a1, static NANConstants.keepAliveTimeout, 17LL);
}

uint64_t sub_1001E6D8C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  sub_10000B0D0(v5, a2);
  *(void *)sub_1000032DC(v5, (uint64_t)a2)  = a3;
  return (*(uint64_t (**)(void))(*(void *)(v5 - 8) + 104LL))();
}

uint64_t NANConstants.keepAliveTimeout.unsafeMutableAddressor()
{
  return sub_1001E6C28(&qword_100404450, (uint64_t)static NANConstants.keepAliveTimeout, (uint64_t)sub_1001E6D7C);
}

uint64_t static NANConstants.keepAliveTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E6C84(&qword_100404450, (uint64_t)static NANConstants.keepAliveTimeout, (uint64_t)sub_1001E6D7C, a1);
}

ValueMetadata *type metadata accessor for NANConstants()
{
  return &type metadata for NANConstants;
}

uint64_t sub_1001E6E38@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  v15[2]  = a3;
  v15[3]  = a4;
  v15[4]  = a5;
  v15[5]  = a6;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | result & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(a7, sub_1002006EC, v15);
    return swift_bridgeObjectRelease(a6);
  }

  if ((a2 & 0x2000000000000000LL) != 0)
  {
    *(void *)__src  = result;
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a3)
    {
      size_t v14 = String.count.getter(a5, a6);
      strncpy(a3, __src, v14);
      return swift_bridgeObjectRelease(a6);
    }

    __break(1u);
  }

  else
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
      uint64_t v10 = result;
      if (!result)
      {
        if (a3)
        {
          size_t v11 = String.count.getter(a5, a6);
          unint64_t v12 = a3;
          uint64_t v13 = 0LL;
          goto LABEL_8;
        }

        goto LABEL_18;
      }
    }

    if (a3)
    {
      size_t v11 = String.count.getter(a5, a6);
      unint64_t v12 = a3;
      uint64_t v13 = (const char *)v10;
LABEL_8:
      strncpy(v12, v13, v11);
      return swift_bridgeObjectRelease(a6);
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_1001E6F84(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 1) != 0) {
    AppleDevice.setRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, a4, a5);
  }
  else {
    AppleDevice.getRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, a4, a5);
  }
}

uint64_t BroadcomDevice<>.send(command:set:on:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 1) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(a8 + 32))( 0xFFFFFFFFLL,  a1,  a2,  0LL,  a4,  a5,  a6);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(a8 + 24))( 0xFFFFFFFFLL,  a1,  a2,  0LL,  a4,  a5,  a6);
  }
}

uint64_t sub_1001E7018( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  size_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_1001E70A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v18 = *(void *)(a3 + 16);
  if (v18)
  {
    uint64_t v5 = (uint64_t (*)(void *))result;
    unint64_t v6 = 0LL;
    uint64_t v7 = (uint64_t *)(a3 + 40);
    uint64_t v8 = _swiftEmptyArrayStorage;
    Swift::String v16 = (uint64_t (*)(void *))result;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v19[0]  = v10;
      v19[1]  = v9;
      swift_bridgeObjectRetain(v9);
      char v11 = v5(v19);
      if (v3)
      {
        swift_release(v8);
        swift_bridgeObjectRelease(v4);
        uint64_t v15 = v9;
        goto LABEL_16;
      }

      if ((v11 & 1) != 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
        uint64_t v20 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000696B4(0, v8[2] + 1LL, 1);
          uint64_t v8 = v20;
        }

        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          uint64_t result = sub_1000696B4(v12 > 1, v13 + 1, 1);
          uint64_t v8 = v20;
        }

        v8[2]  = v13 + 1;
        size_t v14 = &v8[2 * v13];
        v14[4]  = v10;
        v14[5]  = v9;
        uint64_t v4 = a3;
        uint64_t v5 = v16;
      }

      else
      {
        uint64_t result = swift_bridgeObjectRelease(v9);
      }

      ++v6;
      v7 += 2;
      if (v18 == v6) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_14:
    uint64_t v15 = v4;
LABEL_16:
    swift_bridgeObjectRelease(v15);
    return (uint64_t)v8;
  }

  return result;
}

void sub_1001E7214(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  __chkstk_darwin(v4);
  sub_100020AFC(a1, a2);
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = type metadata accessor for BinaryDecoder();
  unint64_t v6 = (void *)swift_allocObject(v5, 48LL, 7LL);
  v6[5]  = &_swiftEmptyDictionarySingleton;
  _OWORD v6[2] = a1;
  v6[3]  = a2;
  __asm { BR              X10 }

uint64_t sub_1001E72E4(uint64_t a1)
{
  *(void *)(v7 + 32)  = v5;
  swift_beginAccess(a1, v8 - 104, 1LL, 0LL);
  uint64_t v9 = *(void *)(v7 + 40);
  *(void *)(v7 + 40)  = v6;
  swift_bridgeObjectRelease(v9);
  *(void *)(v8 - 120)  = &type metadata for BinaryDecoder.UnkeyedContainer;
  *(void *)(v8 - 112)  = sub_100070240();
  *(void *)(v8 - 144)  = v7;
  uint64_t v10 = *(void *)sub_1000237C8(v8 - 144, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  *(void *)(v8 - 160)  = v4;
  *(void *)(v8 - 152)  = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  *(void *)(v8 - 184)  = v10;
  swift_retain();
  uint64_t v11 = *(void *)(v8 - 72);
  P256.Signing.ECDSASignature.init(from:)((void *)(v8 - 184), v3);
  if (!v11)
  {
    uint64_t v12 = *(void *)(v8 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v3, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v12, 0LL, 1LL, v2);
  }

  return sub_100002AC4((void *)(v8 - 144));
}

void sub_1001E73DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a3 >> 62;
  sub_100020AFC(a2, a3);
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = type metadata accessor for BinaryDecoder();
  uint64_t v7 = (void *)swift_allocObject(v6, 48LL, 7LL);
  void v7[5] = &_swiftEmptyDictionarySingleton;
  v7[2]  = a2;
  _OWORD v7[3] = a3;
  __asm { BR              X10 }

uint64_t sub_1001E746C(uint64_t a1)
{
  *(void *)(v4 + 32)  = v5;
  swift_beginAccess(a1, &v15, 1LL, 0LL);
  uint64_t v6 = *(void *)(v4 + 40);
  *(void *)(v4 + 40)  = v3;
  swift_bridgeObjectRelease(v6);
  v14[3]  = &type metadata for BinaryDecoder.UnkeyedContainer;
  v14[4]  = sub_100070240();
  v14[0]  = v4;
  uint64_t v7 = *(void *)sub_1000237C8((uint64_t)v14, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  uint64_t v12 = v2;
  uint64_t v13 = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  uint64_t v11 = v7;
  swift_retain();
  uint64_t v8 = sub_100212814(&v11);
  if (v1) {
    return sub_100002AC4(v14);
  }
  uint64_t v10 = v8 & 0xFFFFFFFFFFFFLL;
  sub_100002AC4(v14);
  return v10;
}

uint64_t sub_1001E754C(unint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(_BYTE *)(a4 + a2 + 32);
  uint64_t v6 = (void *)*a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *uint64_t v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

void *BroadcomCapabilities.supportsExtendedMessage.unsafeMutableAddressor()
{
  return &static BroadcomCapabilities.supportsExtendedMessage;
}

uint64_t AppleBroadcomDriver.capabilities.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 72);
  }

  else
  {
    uint64_t v2 = sub_1001E7648();
    uint64_t v3 = *(void *)(v0 + 72);
    *(void *)(v0 + 72)  = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v3);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1001E7648()
{
  uint64_t v0 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v63 = 0x40000000000LL;
  unint64_t v64 = __DataStorage.init(length:)(1024LL) | 0x4000000000000000LL;
  uint64_t v61 = &v65;
  sub_1001FEBD0();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  v62[0]  = 32LL;
  v62[1]  = 0xE100000000000000LL;
  __chkstk_darwin(v1);
  uint64_t v58 = v62;
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = sub_1001FDD04(0x7FFFFFFFFFFFFFFFLL, 1, sub_1001FF2E4, (uint64_t)v57, v2, v4);
  uint64_t v59 = 0LL;
  swift_bridgeObjectRelease(v4);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    uint64_t v9 = (void *)(v6 + 56);
    do
    {
      unint64_t v14 = *(v9 - 3);
      if (!((*(v9 - 2) ^ v14) >> 14))
      {
        __int128 v60 = *((_OWORD *)v9 - 1);
        uint64_t v15 = *v9;
        swift_bridgeObjectRetain(*v9);
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v8);
        v62[0]  = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100069A00(0, v8[2] + 1LL, 1);
          uint64_t v8 = (void *)v62[0];
        }

        unint64_t v11 = v8[2];
        unint64_t v10 = v8[3];
        __int128 v12 = v60;
        if (v11 >= v10 >> 1)
        {
          sub_100069A00(v10 > 1, v11 + 1, 1);
          __int128 v12 = v60;
          uint64_t v8 = (void *)v62[0];
        }

        v8[2]  = v11 + 1;
        uint64_t v13 = &v8[4 * v11];
        v13[4]  = v14;
        *(_OWORD *)(v13 + 5)  = v12;
        v13[7]  = v15;
      }

      v9 += 4;
      --v7;
    }

    while (v7);
  }

  swift_bridgeObjectRelease(v6);
  int64_t v17 = v8[2];
  if (v17)
  {
    v62[0]  = _swiftEmptyArrayStorage;
    sub_1000696B4(0, v17, 0);
    uint64_t v18 = (void *)v62[0];
    uint64_t v19 = v8 + 7;
    do
    {
      uint64_t v20 = *(v19 - 3);
      uint64_t v21 = *(v19 - 2);
      uint64_t v22 = *(v19 - 1);
      uint64_t v23 = *v19;
      swift_bridgeObjectRetain(*v19);
      uint64_t v24 = static String._fromSubstring(_:)(v20, v21, v22, v23);
      uint64_t v26 = v25;
      swift_bridgeObjectRelease(v23);
      v62[0]  = v18;
      unint64_t v28 = v18[2];
      unint64_t v27 = v18[3];
      if (v28 >= v27 >> 1)
      {
        sub_1000696B4(v27 > 1, v28 + 1, 1);
        uint64_t v18 = (void *)v62[0];
      }

      v18[2]  = v28 + 1;
      uint64_t v29 = &v18[2 * v28];
      v29[4]  = v24;
      v29[5]  = v26;
      v19 += 4;
      --v17;
    }

    while (v17);
    uint64_t v30 = swift_release(v8);
  }

  else
  {
    uint64_t v30 = swift_release(v8);
    uint64_t v18 = _swiftEmptyArrayStorage;
  }

  __chkstk_darwin(v30);
  uint64_t v58 = &v65;
  uint64_t v31 = sub_1001E70A4((uint64_t)sub_100200968, (uint64_t)v57, (uint64_t)v18);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain(v31);
    *(void *)&__int128 v60 = v32;
    unint64_t v34 = (void *)(v32 + 40);
    uint64_t v35 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v36 = *(v34 - 1);
      uint64_t v37 = *v34;
      BOOL v38 = v36 == 0x646E61626C617564LL && v37 == 0xE800000000000000LL;
      if (v38
        || (_stringCompareWithSmolCheck(_:_:expecting:)( 0x646E61626C617564LL,  0xE800000000000000LL,  *(v34 - 1),  *v34,  0LL) & 1) != 0)
      {
        break;
      }

      BOOL v43 = v36 == 7233902 && v37 == 0xE300000000000000LL;
      if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)(7233902LL, 0xE300000000000000LL, v36, v37, 0LL) & 1) != 0)
      {
        int v39 = &static WiFiDriverCapabilities.supportsNAN;
        if (qword_1004040C8 != -1)
        {
          swift_once(&qword_1004040C8, sub_10005DA98);
          int v39 = &static WiFiDriverCapabilities.supportsNAN;
        }

        goto LABEL_26;
      }

      if (v36 == 1818523489 && v37 == 0xE400000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1818523489LL, 0xE400000000000000LL, v36, v37, 0LL) & 1) != 0)
      {
        int v39 = &static WiFiDriverCapabilities.supportsAWDL;
        if (qword_1004040D0 != -1)
        {
          swift_once(&qword_1004040D0, sub_10005DB14);
          int v39 = &static WiFiDriverCapabilities.supportsAWDL;
        }

        goto LABEL_26;
      }

LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

        sub_10005802C(v210, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v216, v121);
        sub_10005802C(v233, type metadata accessor for LongTermPairingKeys);
        goto LABEL_75;
      }

      sub_100057FE8(v157 + *(int *)(v156 + 64), v158, type metadata accessor for OWEKeys);
      v159  = OWEKeys.generatePMK(for:asClient:)(v216, 1);
      v161  = v160;
      sub_10005802C(v158, type metadata accessor for OWEKeys);
      if (v161 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v245);
        v163  = (os_log_s *)Logger.logObject.getter(v162);
        v164  = static os_log_type_t.error.getter(v163);
        if (os_log_type_enabled(v163, v164))
        {
          v165  = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v166  = swift_slowAlloc(32LL, -1LL);
          v244  = v166;
          *(_DWORD *)v165  = 136315138;
          v167  = v121;
          v168  = NANPeerServiceIdentifier.description.getter(v239 | (v240 << 40) | (v241 << 32) | (v238 << 24) | (v236 << 16) | (v242 << 8) | v229);
          v170  = v169;
          v243  = sub_10000235C(v168, v169, &v244);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v243, &v244);
          swift_bridgeObjectRelease(v170);
          v171  = "Received an authentication response from %s but failed to verify because PMK generation failed";
LABEL_73:
          _os_log_impl((void *)&_mh_execute_header, v163, v164, v171, v165, 0xCu);
          swift_arrayDestroy(v166, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v166, -1LL, -1LL);
          swift_slowDealloc(v165, -1LL, -1LL);

          sub_10005802C(v210, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v216, v167);
          sub_10005802C(v233, type metadata accessor for LongTermPairingKeys);
LABEL_75:
          v98  = v213;
          unint64_t v100 = v213;
          goto LABEL_58;
        }

        goto LABEL_74;
      }

      v176  = v208;
      *v208  = v159;
      v176[1]  = v161;
      swift_storeEnumTagMultiPayload(v176, v218, 2LL);
      swift_beginAccess(v128, &v244, 33LL, 0LL);
      sub_100020AFC(v159, v161);
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v128);
      v243  = *v128;
      v178  = v243;
      *v128  = 0x8000000000000000LL;
      v179  = v239 | (v240 << 40) | (v241 << 32) | (v238 << 24) | (v236 << 16) | (v242 << 8) | v229;
      v242  = sub_10001C08C(v179);
      v181  = *(void *)(v178 + 16);
      v182  = (v180 & 1) == 0;
      v183  = v181 + v182;
      if (__OFADD__(v181, v182))
      {
        __break(1u);
      }

      else
      {
        LOBYTE(v121)  = v180;
        if (*(void *)(v178 + 24) < v183)
        {
          sub_1002419F0(v183, isUniquelyReferenced_nonNull_native);
          v178  = v243;
          v242  = sub_10001C08C(v179);
          if ((v121 & 1) == (v184 & 1))
          {
LABEL_81:
            v185  = v205;
            v186  = v179;
            v241  = v159;
            v187  = *v128;
            *v128  = v178;
            swift_bridgeObjectRelease(v187);
            v188  = (void *)*v128;
            v240  = v179;
            if ((v121 & 1) != 0)
            {
              swift_bridgeObjectRetain(v188);
              v189  = v227;
              v190  = v206;
              v191  = v207;
              v192  = v242;
            }

            else
            {
              v193  = (uint64_t)v202;
              swift_storeEnumTagMultiPayload(v202, v218, 3LL);
              v194  = v203;
              sub_100057FE8(v193, v203, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              type metadata accessor for P2PTimer(0LL);
              swift_bridgeObjectRetain(v188);
              variable initialization expression of AWDLPeer.lastUpdated();
              sub_10005802C(v193, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              v189  = v227;
              v190  = v206;
              v191  = v207;
              (*(void (**)(uint64_t, char *, uint64_t))(v206 + 32))(v194 + *(int *)(v227 + 20), v185, v207);
              v195  = v204;
              sub_100022628(v194, v204, type metadata accessor for NANPeer.Service.AuthenticationStatus);
              v192  = v242;
              sub_100244DE4(v242, v186, v195, v188);
            }

            v196  = v188[7];
            swift_bridgeObjectRelease(v188);
            v197  = v196 + *(void *)(v228 + 72) * v192;
            v198  = v208;
            sub_100262968((uint64_t)v208, v197, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            type metadata accessor for P2PTimer(0LL);
            variable initialization expression of AWDLPeer.lastUpdated();
            (*(void (**)(uint64_t, char *, uint64_t))(v190 + 40))(v197 + *(int *)(v189 + 20), v185, v191);
            sub_10005802C((uint64_t)v198, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            swift_endAccess(&v244);
            v199  = (char **)v245;
            v200  = v231;
            swift_bridgeObjectRetain(v231);
            sub_1002C0608(v47, v226, v200, v199);
            swift_bridgeObjectRelease(v200);
            swift_bridgeObjectRelease(v199);
            sub_100020B40(v241, v161);
            sub_10005802C(v210, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
            (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v216, v223);
            sub_10005802C(v233, type metadata accessor for LongTermPairingKeys);
            v98  = v213;
            unint64_t v100 = v213;
            goto LABEL_58;
          }

          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANPeerServiceIdentifier);
          __break(1u);
        }

        if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
          goto LABEL_81;
        }
      }

      sub_10032B2F8();
      v178  = v243;
      goto LABEL_81;
    }

    uint64_t v87 = (uint64_t *)(v4 + qword_100410BC8);
    swift_beginAccess(v4 + qword_100410BC8, &v244, 32LL, 0LL);
    __int16 v88 = *v87;
    if (*(void *)(*v87 + 16))
    {
      unint64_t v89 = sub_10001C08C((v239 << 48) | (v240 << 40) | (v241 << 32) | (v238 << 24) | (v236 << 16) | (v242 << 8) | v229);
      uint64_t v90 = v227;
      unint64_t v91 = v228;
      if ((v92 & 1) != 0)
      {
        v93  = *(void *)(v88 + 56) + *(void *)(v228 + 72) * v89;
        uint64_t v94 = v215;
        sub_100057FE8(v93, v215, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        v95  = 0LL;
LABEL_28:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v94, v95, 1LL, v90);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v94, 1LL, v90))
        {
          sub_1000225EC(v94, (uint64_t *)&unk_10040F0F0);
          swift_endAccess(&v244);
          goto LABEL_13;
        }

        uint64_t v96 = v212;
        sub_100057FE8(v94, v212, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        sub_1000225EC(v94, (uint64_t *)&unk_10040F0F0);
        swift_endAccess(&v244);
        EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(v96, v218);
        sub_10005802C(v96, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        uint64_t v58 = v237;
        if (EnumCaseMultiPayload == 4)
        {
          swift_bridgeObjectRetain(a3);
          v98  = v213;
          sub_1002C0608(v47, v59, a3, v213);
          swift_bridgeObjectRelease(a3);
LABEL_59:
          *(void *)&uint64_t result = swift_bridgeObjectRelease(v98).n128_u64[0];
          return result;
        }

        goto LABEL_32;
      }

      v95  = 1LL;
    }

    else
    {
      v95  = 1LL;
      uint64_t v90 = v227;
      unint64_t v91 = v228;
    }

    uint64_t v94 = v215;
    goto LABEL_28;
  }

  uint64_t v68 = (os_log_s *)Logger.logObject.getter(0LL);
  unint64_t v69 = static os_log_type_t.error.getter(v68);
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v71  = swift_slowAlloc(32LL, -1LL);
    v244  = v71;
    *(_DWORD *)uint64_t v70 = 136315138;
    unint64_t v72 = NANPeerServiceIdentifier.description.getter((v239 << 48) | (v240 << 40) | (v241 << 32) | (v46 << 24) | (v45 << 16) | (v242 << 8) | v44);
    uint64_t v74 = v73;
    v245  = sub_10000235C(v72, v73, &v244);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246);
    swift_bridgeObjectRelease(v74);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Failed to parse the follow up received from %s", v70, 0xCu);
    swift_arrayDestroy(v71, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  return result;
}

uint64_t BroadcomDriver<>.loadCapabilities()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v77 = 0x40000000000LL;
  unint64_t v78 = __DataStorage.init(length:)(1024LL) | 0x4000000000000000LL;
  uint64_t v72 = a1;
  v73  = a2;
  uint64_t v74 = a3;
  v75  = v3;
  sub_1001FEBD0();
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  unint64_t v69 = a3;
  uint64_t v70 = v75;
  v76[0]  = 32LL;
  v76[1]  = 0xE100000000000000LL;
  __chkstk_darwin(v8);
  unint64_t v64 = v76;
  swift_bridgeObjectRetain(v12);
  uint64_t v13 = sub_1001FDD04(0x7FFFFFFFFFFFFFFFLL, 1, sub_1001FF2E4, (uint64_t)v63, v9, v11);
  uint64_t v66 = 0LL;
  swift_bridgeObjectRelease(v11);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = _swiftEmptyArrayStorage;
  if (v14)
  {
    Swift::String v16 = (void *)(v13 + 56);
    do
    {
      unint64_t v21 = *(v16 - 3);
      if (!((*(v16 - 2) ^ v21) >> 14))
      {
        v71  = *((_OWORD *)v16 - 1);
        uint64_t v22 = *v16;
        swift_bridgeObjectRetain(*v16);
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v15);
        v76[0]  = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100069A00(0, v15[2] + 1LL, 1);
          uint64_t v15 = (void *)v76[0];
        }

        unint64_t v18 = v15[2];
        unint64_t v17 = v15[3];
        __int128 v19 = v71;
        if (v18 >= v17 >> 1)
        {
          sub_100069A00(v17 > 1, v18 + 1, 1);
          __int128 v19 = v71;
          uint64_t v15 = (void *)v76[0];
        }

        v15[2]  = v18 + 1;
        uint64_t v20 = &v15[4 * v18];
        v20[4]  = v21;
        *(_OWORD *)(v20 + 5)  = v19;
        v20[7]  = v22;
      }

      v16 += 4;
      --v14;
    }

    while (v14);
  }

  swift_bridgeObjectRelease(v13);
  int64_t v24 = v15[2];
  if (v24)
  {
    v76[0]  = _swiftEmptyArrayStorage;
    sub_1000696B4(0, v24, 0);
    uint64_t v25 = (void *)v76[0];
    uint64_t v26 = v15 + 7;
    do
    {
      uint64_t v27 = *(v26 - 3);
      uint64_t v28 = *(v26 - 2);
      uint64_t v30 = *(v26 - 1);
      uint64_t v29 = *v26;
      swift_bridgeObjectRetain(*v26);
      uint64_t v31 = static String._fromSubstring(_:)(v27, v28, v30, v29);
      uint64_t v33 = v32;
      swift_bridgeObjectRelease(v29);
      v76[0]  = v25;
      unint64_t v35 = v25[2];
      unint64_t v34 = v25[3];
      if (v35 >= v34 >> 1)
      {
        sub_1000696B4(v34 > 1, v35 + 1, 1);
        uint64_t v25 = (void *)v76[0];
      }

      v25[2]  = v35 + 1;
      uint64_t v36 = &v25[2 * v35];
      v36[4]  = v31;
      v36[5]  = v33;
      v26 += 4;
      --v24;
    }

    while (v24);
    uint64_t v37 = swift_release(v15);
  }

  else
  {
    uint64_t v37 = swift_release(v15);
    uint64_t v25 = _swiftEmptyArrayStorage;
  }

  __chkstk_darwin(v37);
  v63[0]  = v67;
  v63[1]  = v68;
  unint64_t v64 = v69;
  v65  = v70;
  *(void *)&v71  = sub_1001E70A4((uint64_t)sub_1001FF2FC, (uint64_t)&v62, (uint64_t)v25);
  uint64_t v38 = *(void *)(v71 + 16);
  if (v38)
  {
    int v39 = (void *)(swift_bridgeObjectRetain(v71) + 40);
    uint64_t v40 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v41 = *(v39 - 1);
      uint64_t v42 = *v39;
      BOOL v43 = v41 == 0x646E61626C617564LL && v42 == 0xE800000000000000LL;
      if (v43
        || (_stringCompareWithSmolCheck(_:_:expecting:)( 0x646E61626C617564LL,  0xE800000000000000LL,  *(v39 - 1),  *v39,  0LL) & 1) != 0)
      {
        break;
      }

      BOOL v48 = v41 == 7233902 && v42 == 0xE300000000000000LL;
      if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(7233902LL, 0xE300000000000000LL, v41, v42, 0LL) & 1) != 0)
      {
        uint64_t v44 = &static WiFiDriverCapabilities.supportsNAN;
        if (qword_1004040C8 != -1)
        {
          swift_once(&qword_1004040C8, sub_10005DA98);
          uint64_t v44 = &static WiFiDriverCapabilities.supportsNAN;
        }

        goto LABEL_26;
      }

      if (v41 == 1818523489 && v42 == 0xE400000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1818523489LL, 0xE400000000000000LL, v41, v42, 0LL) & 1) != 0)
      {
        uint64_t v44 = &static WiFiDriverCapabilities.supportsAWDL;
        if (qword_1004040D0 != -1)
        {
          swift_once(&qword_1004040D0, sub_10005DB14);
          uint64_t v44 = &static WiFiDriverCapabilities.supportsAWDL;
        }

        goto LABEL_26;
      }

uint64_t AppleBroadcomDriver.broadcomCapabilities.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t AppleBroadcomDriver.broadcomCapabilities.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 80, v4, 1LL, 0LL);
  *(void *)(v1 + 80)  = a1;
  return result;
}

uint64_t (*AppleBroadcomDriver.broadcomCapabilities.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t AppleBroadcomDriver.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

void AppleBroadcomDriver.__allocating_init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
}

void AppleBroadcomDriver.init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v9);
  *(void *)(v4 + 80)  = 0LL;
  *(_OWORD *)(v4 + 48)  = 0u;
  *(_OWORD *)(v4 + 64)  = 0u;
  *(void *)(v4 + 40)  = a1;
  *(_BYTE *)(v4 + 32)  = a2;
  *(void *)(v4 + 16)  = a3;
  *(void *)(v4 + 24)  = a4;
  __asm { BR              X10 }

uint64_t sub_1001E85A4()
{
  return v1;
}

uint64_t AppleBroadcomDriver.deinit()
{
  uint64_t v1 = v0;
  swift_beginAccess(v0 + 48, v8, 33LL, 0LL);
  uint64_t v2 = *(void *)(v0 + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 48);
    swift_unownedRetain(v3);
    swift_bridgeObjectRetain(v2);
    swift_unownedRelease(v3);
    swift_bridgeObjectRelease(v2);
    uint64_t v4 = *(void *)(v1 + 48);
    swift_unownedRetainStrong(v4);
    AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)(v1 + 56));
    swift_release(v4);
  }

  swift_endAccess(v8);
  swift_bridgeObjectRelease(*(void *)(v1 + 24));
  swift_release(*(void *)(v1 + 40));
  sub_1000A9C2C(*(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
  swift_bridgeObjectRelease(*(void *)(v1 + 72));
  uint64_t v5 = v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return v1;
}

uint64_t AppleBroadcomDriver.__deallocating_deinit()
{
  uint64_t v1 = v0;
  swift_beginAccess(v0 + 48, v8, 33LL, 0LL);
  uint64_t v2 = *(void *)(v0 + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 48);
    swift_unownedRetain(v3);
    swift_bridgeObjectRetain(v2);
    swift_unownedRelease(v3);
    swift_bridgeObjectRelease(v2);
    uint64_t v4 = *(void *)(v1 + 48);
    swift_unownedRetainStrong(v4);
    AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)(v1 + 56));
    swift_release(v4);
  }

  swift_endAccess(v8);
  swift_bridgeObjectRelease(*(void *)(v1 + 24));
  swift_release(*(void *)(v1 + 40));
  sub_1000A9C2C(*(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
  swift_bridgeObjectRelease(*(void *)(v1 + 72));
  uint64_t v5 = v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_1001E8804()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 80, v3, 0LL, 0LL);
  return *(void *)(v1 + 80);
}

uint64_t sub_1001E8840(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess(v3 + 80, v5, 1LL, 0LL);
  *(void *)(v3 + 80)  = a1;
  return result;
}

uint64_t (*sub_1001E8880(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

void *BroadcomDriver<>.awdlChannelSequence.getter()
{
  uint64_t v0 = 0LL;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  uint64_t v3 = 8 * v2 + 32;
  do
  {
    uint64_t v7 = result;
    unint64_t v4 = result[3];
    unint64_t v5 = v2 + 1;
    if (v2 >= v4 >> 1)
    {
      sub_100069808(v4 > 1, v2 + 1, 1);
      uint64_t result = v7;
    }

    result[2]  = v5;
    uint64_t v6 = (char *)result + v3 + v0;
    *((_WORD *)v6 + 2)  = 3;
    *(_DWORD *)uint64_t v6 = 0;
    v0 += 8LL;
    unint64_t v2 = v5;
  }

  while (v0 != 128);
  return result;
}

uint64_t sub_1001E8988()
{
  return sub_1001E89A8();
}

uint64_t sub_1001E89A8()
{
  uint64_t v1 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_1001FB3B0(0x101u, 1);
  if (!v0)
  {
    sub_1001F4B34();
    uint64_t v7 = v6;
    unint64_t v9 = v8;
    sub_100208DB4(v6, v8);
    int v11 = v10;
    sub_1000208D8(v7, v9);
    sub_1001FB4C0(0x115u, v11 | 0xE5007F);
    sub_1001F4B34();
    uint64_t v13 = v12;
    unint64_t v15 = v14;
    sub_100209800(v12, v14);
    uint64_t v17 = v16;
    sub_1000208D8(v13, v15);
    sub_1001FB5D0(0x118u, v17 | 0x441);
    uint64_t v18 = swift_slowAlloc(20LL, -1LL);
    *(_BYTE *)uint64_t v18 = 1;
    *(_WORD *)(v18 + 2)  = 16;
    *(_BYTE *)(v18 + 4) |= 0xE8u;
    *(_BYTE *)(v18 + 5) |= 7u;
    *(_BYTE *)(v18 + 6) |= 0xB0u;
    char v19 = *(_BYTE *)(v18 + 8);
    *(_BYTE *)(v18 + 7)  = -1;
    char v20 = *(_BYTE *)(v18 + 9);
    *(_BYTE *)(v18 + 8)  = v19 | 0x3F;
    *(_BYTE *)(v18 + 9)  = v20 | 0x90;
    *(_BYTE *)(v18 + 10) |= 1u;
    uint64_t v21 = (*(uint64_t (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for Data.Deallocator.none(_:),  v1);
    uint64_t v22 = Data.Deallocator._deallocator.getter(v21);
    uint64_t v24 = v23;
    uint64_t v25 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_retain();
    uint64_t v26 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v18, 20LL, 0LL, v22, v24, 0LL);
    swift_release(v24);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    sub_1001F4B34();
    sub_1000208D8(v27, v28);
    sub_1000208D8(0x1400000000LL, v26 | 0x4000000000000000LL);
    sub_1001FB4C0(0x105u, 20);
    unint64_t v29 = sub_1000033FC();
    uint64_t v30 = swift_allocError(&type metadata for WiFiError, v29, 0LL, 0LL);
    *(_OWORD *)uint64_t v31 = xmmword_10033A970;
    *(_BYTE *)(v31 + 16)  = 0;
    swift_willThrow(v30);
    return swift_slowDealloc(v18, -1LL, -1LL);
  }

  return result;
}

uint64_t BroadcomDriver<>.initializeNAN()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LOBYTE(v33[0])  = 1;
  uint64_t result = sub_1001FBA40(257, (uint64_t)v33, a1, (uint64_t)&type metadata for UInt8, a2, a3);
  if (!v3)
  {
    sub_1001FBB84(277LL, (uint64_t)&type metadata for UInt32, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    v34 |= 0xE5007Fu;
    v33[0]  = v34;
    sub_1001FBA40(277, (uint64_t)v33, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    type metadata accessor for wl_nan_cfg_ctrl2(0LL);
    uint64_t v31 = v12;
    sub_1001FBB84(280LL, v31, a1, v31, a2, a3);
    v32[1]  = v33[1];
    v33[0] |= 0x441u;
    v32[0]  = v33[0];
    sub_1001FBA40(280, (uint64_t)v32, a1, v31, a2, a3);
    uint64_t v13 = swift_slowAlloc(20LL, -1LL);
    uint64_t v31 = v13;
    *(_BYTE *)uint64_t v13 = 1;
    *(_WORD *)(v13 + 2)  = 16;
    *(_BYTE *)(v13 + 4) |= 0xE8u;
    *(_BYTE *)(v13 + 5) |= 7u;
    *(_BYTE *)(v13 + 6) |= 0xB0u;
    char v14 = *(_BYTE *)(v13 + 8);
    *(_BYTE *)(v13 + 7)  = -1;
    char v15 = *(_BYTE *)(v13 + 9);
    *(_BYTE *)(v13 + 8)  = v14 | 0x3F;
    *(_BYTE *)(v13 + 9)  = v15 | 0x90;
    *(_BYTE *)(v13 + 10) |= 1u;
    uint64_t v16 = (*(uint64_t (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for Data.Deallocator.none(_:),  v7);
    uint64_t v17 = Data.Deallocator._deallocator.getter(v16);
    uint64_t v29 = v18;
    uint64_t v30 = v17;
    uint64_t v19 = v18;
    uint64_t v20 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    uint64_t v21 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v31, 20LL, 0LL, v30, v19, 0LL);
    swift_release(v29);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_1001F5620( 7233902LL,  0xE300000000000000LL,  276LL,  0x1400000000LL,  v21 | 0x4000000000000000LL,  1LL,  a1,  a2,  *(void *)(a3 + 16));
    uint64_t v22 = v31;
    sub_1000208D8(v23, v24);
    sub_1000208D8(0x1400000000LL, v21 | 0x4000000000000000LL);
    v32[0]  = 20;
    sub_1001FBA40(261, (uint64_t)v32, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    unint64_t v25 = sub_1000033FC();
    uint64_t v26 = swift_allocError(&type metadata for WiFiError, v25, 0LL, 0LL);
    *(_OWORD *)uint64_t v27 = xmmword_10033A970;
    *(_BYTE *)(v27 + 16)  = 0;
    swift_willThrow(v26);
    return swift_slowDealloc(v22, -1LL, -1LL);
  }

  return result;
}

BOOL sub_1001E909C()
{
  return sub_1001E90BC();
}

BOOL sub_1001E90BC()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  sub_100208D24(v0, v2);
  char v5 = v4;
  sub_1000208D8(v1, v3);
  return v5 == 1;
}

BOOL BroadcomDriver<>.nanState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v4 == 1;
}

uint64_t sub_1001E91B0(char a1)
{
  uint64_t v2 = *v1;
  char v5 = a1 & 1;
  char v4 = a1 & 1;
  return sub_1001FAD98((uint64_t)&v4, &v5, v2, 0x116u);
}

uint64_t BroadcomDriver<>.update(nanState:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = a1 & 1;
  return sub_1001FAC60(278LL, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

uint64_t sub_1001E9254()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  sub_1002095CC(v0, v2);
  uint64_t v5 = v4;
  sub_1000208D8(v1, v3);
  return v5 & 0xFFFFFFFFFFFFLL;
}

unint64_t BroadcomDriver<>.clusterID.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40);
}

uint64_t sub_1001E938C(uint64_t a1)
{
  return sub_1001FB6E0(0x10Cu, a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t BroadcomDriver<>.update(clusterID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v9 = a1;
  char v10 = BYTE2(a1);
  char v11 = BYTE3(a1);
  char v12 = BYTE4(a1);
  char v13 = BYTE5(a1);
  type metadata accessor for ether_addr(0LL);
  return sub_1001FBA40(268, (uint64_t)&v9, a2, v7, a3, a4);
}

uint64_t sub_1001E9440()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  sub_10020C9E8(v0, v2);
  unsigned int v5 = v4;
  sub_1000208D8(v1, v3);
  return bswap32(v5) >> 16;
}

uint64_t BroadcomDriver<>.electionMetric.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __rev16(v8);
}

uint64_t sub_1001E9560(__int16 a1)
{
  uint64_t v2 = *v1;
  HIBYTE(v6)  = 0;
  LOBYTE(v6)  = HIBYTE(a1);
  *(_WORD *)((char *)&v6 + 1)  = a1;
  v4[0]  = HIBYTE(a1);
  v4[1]  = a1;
  __int16 v5 = 0;
  return sub_1001FAF88((uint64_t)v4, &v6, v2, 0x202u);
}

uint64_t BroadcomDriver<>.update(electionMetric:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v11 = 0;
  char v9 = HIBYTE(a1);
  __int16 v10 = a1;
  type metadata accessor for wl_nan_election_metric_config(0LL);
  return sub_1001FAC60(514LL, (uint64_t)&v9, a2, v7, a3, a4);
}

uint64_t sub_1001E9644()
{
  return sub_1001E9664();
}

uint64_t sub_1001E9664()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  sub_10020CB18(v0, v2);
  __int16 v6 = v5;
  sub_1000208D8(v1, v3);
  unsigned __int8 v7 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(v6);
  if (v7 == 5) {
    unsigned __int8 v8 = 0;
  }
  else {
    unsigned __int8 v8 = v7;
  }
  int v9 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(HIBYTE(v6));
  else {
    int v10 = v9;
  }
  return v8 | (v10 << 8);
}

uint64_t BroadcomDriver<>.dwAwakePeriods.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v7 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(v12);
  if (v7 == 5) {
    unsigned __int8 v8 = 0;
  }
  else {
    unsigned __int8 v8 = v7;
  }
  int v9 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(v13);
  else {
    int v10 = v9;
  }
  return v8 | (v10 << 8);
}

void sub_1001E97D0(char a1)
{
}

void sub_1001E97F0(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1001E981C(unsigned int a1)
{
  return sub_1001FB810( 0x402u,  *(_DWORD *)((char *)&unk_10035BE40 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 54)) | 1u);
}

void BroadcomDriver<>.update(dwAwakePeriods:)(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1001E98A4(unsigned int a1)
{
  v6[0]  = 1;
  v6[1]  = 0x1008040100uLL >> ((a1 >> 5) & 0xF8);
  __int16 v7 = 0;
  type metadata accessor for wl_nan_awake_dws(0LL);
  return sub_1001FBA40(1026, (uint64_t)v6, v3, v4, v2, v1);
}

BOOL sub_1001E991C()
{
  return sub_1001E9940();
}

BOOL sub_1001E9940()
{
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  sub_100208D24(v0, v2);
  char v5 = v4;
  sub_1000208D8(v1, v3);
  return v5 != 0;
}

BOOL BroadcomDriver<>.hostElection.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v4 != 0;
}

uint64_t sub_1001E9A30(char a1)
{
  return sub_1001FB5D0(0x201u, a1 & 1);
}

uint64_t BroadcomDriver<>.update(hostElection:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 & 1;
  return sub_1001FBA40(513, (uint64_t)&v5, a2, (uint64_t)&type metadata for Int, a3, a4);
}

uint64_t sub_1001E9A98(uint64_t a1)
{
  return sub_1001E9AB8(a1);
}

uint64_t sub_1001E9AB8(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __int16 v7 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v53 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for SHA256(0LL);
  uint64_t v52 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v51 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v56 = xmmword_1003398F0;
  __int128 v64 = xmmword_1003398F0;
  unsigned __int8 v12 = (int *)type metadata accessor for NANSubscribe.Configuration(0LL);
  unsigned __int8 v13 = (unsigned __int8 *)(a1 + v12[12]);
  uint64_t v14 = *((void *)v13 + 1);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v55 = v1;
  unint64_t v57 = v12;
  if (v15)
  {
    uint64_t result = sub_1001FC3BC(*v13, v14);
    uint64_t v58 = v2;
    if (!v2)
    {
      uint64_t v50 = v9;
      __asm { BR              X10 }
    }
  }

  else
  {
    uint64_t v18 = v12;
    uint64_t v19 = (unsigned __int8 *)(a1 + v12[11]);
    uint64_t v20 = *((void *)v19 + 1);
    if (!*(void *)(v20 + 16))
    {
      v49[3]  = v4;
      v49[1]  = v7;
      uint64_t v22 = a1 + v12[14];
      unint64_t v23 = *(unsigned __int16 *)(v22 + 16);
      v49[4]  = a1;
      _BYTE v49[2] = v5;
      v49[5]  = v8;
      uint64_t v50 = v9;
      if ((v23 & 0xFF00) == 0x200)
      {
        uint64_t v58 = v2;
        uint64_t v39 = NANSubscribe.Configuration.serviceInfo.getter();
        uint64_t v41 = v40;
        unint64_t v43 = v42;
        sub_100020AFC(v40, v42);
        unint64_t v44 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v45 = type metadata accessor for BinaryEncoder();
        unint64_t v46 = (uint64_t *)swift_allocObject(v45, 40LL, 7LL);
        *((_OWORD *)v46 + 1)  = v56;
        v46[4]  = v44;
        uint64_t v62 = v45;
        uint64_t v63 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
        uint64_t v60 = (uint64_t)v46;
        sub_100020AFC(v41, v43);
        swift_retain();
        uint64_t v47 = v58;
        NANServiceInfo.encode(to:)((uint64_t)&v60, v39, v41, v43);
        if (v47)
        {
          sub_100002AC4(&v60);
          sub_1000208D8(v41, v43);
          sub_1000208D8(v41, v43);
          swift_release(v46);
          swift_errorRelease(v47);
          sub_1000208D8(v41, v43);
          __asm { BR              X13 }
        }

        sub_100002AC4(&v60);
        sub_1000208D8(v41, v43);
        sub_1000208D8(v41, v43);
        swift_beginAccess(v46 + 2, v59, 0LL, 0LL);
        unint64_t v48 = v46[3];
        sub_100020AFC(v46[2], v48);
        swift_release(v46);
        sub_1000208D8(v41, v43);
        __asm { BR              X9 }
      }

      unint64_t v24 = *(void *)(v22 + 8);
      uint64_t v25 = *(void *)v22;
      sub_100020AFC(*(void *)v22, v24);
      char v26 = sub_1001A05C4(1u, 0LL, 1LL);
      if (!v2)
      {
        char v27 = v26;
        unsigned __int8 v28 = sub_1001A05B0((v23 >> 8) & 1, 1LL, 1LL);
        unsigned __int8 v29 = sub_1001A05C4(v23, 2uLL, 2LL);
        else {
          unsigned __int8 v30 = 0;
        }
        char v31 = v30 | v27;
        else {
          unsigned __int8 v32 = 0;
        }
        char v33 = v32 | v31;
        uint64_t v34 = sub_100002274(&qword_1004040A8);
        uint64_t v35 = swift_allocObject(v34, 33LL, 7LL);
        *(_OWORD *)(v35 + 16)  = xmmword_100339900;
        *(_BYTE *)(v35 + 32)  = v33;
        uint64_t v36 = sub_1000FB08C(v35);
        unint64_t v38 = v37;
        swift_bridgeObjectRelease(v35);
        uint64_t v60 = v36;
        unint64_t v61 = v38;
        sub_10011F034(v25, v24, v23);
        sub_100020AFC(v36, v38);
        sub_1000FA9C4(v25, v24);
        sub_1000AA7B4(v25, v24, v23);
        sub_1000208D8(v36, v38);
        __asm { BR              X10 }
      }

      swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
      swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
      swift_unexpectedError(v18, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
      JUMPOUT(0x1001EA7D4LL);
    }

    sub_1001FC3BC(*v19, v20);
    uint64_t v58 = v2;
    if (!v2)
    {
      uint64_t v50 = v9;
      __asm { BR              X10 }
    }

    return sub_1000208D8(v64, *((unint64_t *)&v64 + 1));
  }

  return result;
}

uint64_t BroadcomDriver<>.start(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v57 = a3;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
  unint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v62 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v60 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = type metadata accessor for SHA256(0LL);
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v58 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v64 = xmmword_1003398F0;
  v71  = xmmword_1003398F0;
  uint64_t v15 = (int *)type metadata accessor for NANSubscribe.Configuration(0LL);
  uint64_t v16 = (unsigned __int8 *)(a1 + v15[12]);
  uint64_t v17 = *((void *)v16 + 1);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v63 = a2;
  if (v18)
  {
    uint64_t result = sub_1001FC3BC(*v16, v17);
    v65  = v4;
    if (!v4)
    {
      uint64_t v56 = v12;
      __asm { BR              X10 }
    }
  }

  else
  {
    uint64_t v21 = (unsigned __int8 *)(a1 + v15[11]);
    uint64_t v22 = *((void *)v21 + 1);
    if (!*(void *)(v22 + 16))
    {
      uint64_t v56 = v12;
      uint64_t v55 = v15;
      uint64_t v24 = a1 + v15[14];
      unint64_t v25 = *(unsigned __int16 *)(v24 + 16);
      v52[3]  = a4;
      v52[2]  = v9;
      if ((v25 & 0xFF00) == 0x200)
      {
        v65  = v4;
        v52[1]  = (unint64_t)v11;
        uint64_t v54 = v8;
        uint64_t v53 = a1;
        uint64_t v42 = NANSubscribe.Configuration.serviceInfo.getter();
        uint64_t v44 = v43;
        unint64_t v46 = v45;
        sub_100020AFC(v43, v45);
        unint64_t v47 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v48 = type metadata accessor for BinaryEncoder();
        uint64_t v49 = (uint64_t *)swift_allocObject(v48, 40LL, 7LL);
        *((_OWORD *)v49 + 1)  = v64;
        v49[4]  = v47;
        uint64_t v69 = v48;
        uint64_t v70 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
        uint64_t v67 = (uint64_t)v49;
        sub_100020AFC(v44, v46);
        swift_retain();
        uint64_t v50 = v65;
        NANServiceInfo.encode(to:)((uint64_t)&v67, v42, v44, v46);
        if (v50)
        {
          sub_100002AC4(&v67);
          sub_1000208D8(v44, v46);
          sub_1000208D8(v44, v46);
          swift_release(v49);
          swift_errorRelease(v50);
          sub_1000208D8(v44, v46);
          __asm { BR              X13 }
        }

        sub_100002AC4(&v67);
        sub_1000208D8(v44, v46);
        sub_1000208D8(v44, v46);
        swift_beginAccess(v49 + 2, v66, 0LL, 0LL);
        unint64_t v51 = v49[3];
        sub_100020AFC(v49[2], v51);
        swift_release(v49);
        sub_1000208D8(v44, v46);
        __asm { BR              X9 }
      }

      unint64_t v26 = *(void *)(v24 + 8);
      uint64_t v53 = *(void *)v24;
      v52[0]  = v26;
      sub_100020AFC(v53, v26);
      char v27 = sub_1001A05C4(1u, 0LL, 1LL);
      if (!v4)
      {
        char v28 = v27;
        uint64_t v29 = sub_1001A05B0((v25 >> 8) & 1, 1LL, 1LL);
        unsigned __int8 v30 = sub_1001A05C4(v25, 2uLL, 2LL);
        v65  = 0LL;
        else {
          char v31 = 0;
        }
        char v32 = v31 | v28;
        else {
          unsigned __int8 v33 = 0;
        }
        char v34 = v33 | v32;
        uint64_t v35 = sub_100002274(&qword_1004040A8);
        uint64_t v36 = swift_allocObject(v35, 33LL, 7LL);
        *(_OWORD *)(v36 + 16)  = xmmword_100339900;
        *(_BYTE *)(v36 + 32)  = v34;
        uint64_t v37 = sub_1000FB08C(v36);
        unint64_t v39 = v38;
        swift_bridgeObjectRelease(v36);
        uint64_t v67 = v37;
        unint64_t v68 = v39;
        uint64_t v40 = v53;
        unint64_t v41 = v52[0];
        sub_10011F034(v53, v52[0], v25);
        sub_100020AFC(v37, v39);
        sub_1000FA9C4(v40, v41);
        sub_1000AA7B4(v40, v41, v25);
        sub_1000208D8(v37, v39);
        __asm { BR              X10 }
      }

      swift_unexpectedError(v4, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
      swift_unexpectedError(v4, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
      swift_unexpectedError(v65, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
      __break(1u);
      JUMPOUT(0x1001EB5E8LL);
    }

    sub_1001FC3BC(*v21, v22);
    v65  = v4;
    if (!v4)
    {
      uint64_t v56 = v12;
      __asm { BR              X10 }
    }

    return sub_1000208D8(v71, *((unint64_t *)&v71 + 1));
  }

  return result;
}

uint64_t sub_1001EB638(uint64_t a1)
{
  return sub_1001EB658(a1);
}

uint64_t sub_1001EB658(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __int16 v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SHA256(0LL);
  uint64_t v41 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v40 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v49 = xmmword_1003398F0;
  uint64_t v46 = a1;
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v43 = v1;
  __int128 v44 = xmmword_1003398F0;
  if (v14)
  {
    uint64_t result = sub_1001FC3BC(*(unsigned __int8 *)(v46 + 40), v13);
    if (!v2)
    {
      uint64_t v38 = v11;
      uint64_t v39 = v9;
      __asm { BR              X10 }
    }
  }

  else
  {
    uint64_t v17 = *(void *)(v46 + 64);
    if (!*(void *)(v17 + 16))
    {
      uint64_t v45 = v2;
      uint64_t v38 = v11;
      uint64_t v39 = v9;
      uint64_t v37 = v8;
      v34[4]  = v7;
      v34[5]  = v5;
      v34[6]  = v4;
      uint64_t v19 = NANPublish.Configuration.serviceInfo.getter();
      uint64_t v21 = v20;
      unint64_t v23 = v22;
      sub_100020AFC(v20, v22);
      unint64_t v24 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v25 = type metadata accessor for BinaryEncoder();
      unint64_t v26 = (uint64_t *)swift_allocObject(v25, 40LL, 7LL);
      *((_OWORD *)v26 + 1)  = v44;
      v26[4]  = v24;
      uint64_t v36 = v25;
      __src[3]  = v25;
      uint64_t v35 = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
      __src[4]  = v35;
      __src[0]  = v26;
      sub_100020AFC(v21, v23);
      swift_retain();
      uint64_t v27 = v45;
      NANServiceInfo.encode(to:)((uint64_t)__src, v19, v21, v23);
      if (v27)
      {
        sub_100002AC4(__src);
        sub_1000208D8(v21, v23);
        sub_1000208D8(v21, v23);
        swift_release(v26);
        swift_errorRelease(v27);
        sub_1000208D8(v21, v23);
        uint64_t v45 = 0LL;
        if (*(void *)(*(void *)(v46 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 84) + 16)
                       + 16LL))
          __int16 v29 = 580;
        else {
          __int16 v29 = 516;
        }
        int v30 = *(unsigned __int8 *)(v46 + 77);
        if ((v30 & 1) != 0) {
          __int16 v31 = 3;
        }
        else {
          __int16 v31 = 1;
        }
        if (v30 == 2) {
          __int16 v32 = 0;
        }
        else {
          __int16 v32 = v31;
        }
        LOWORD(__src[0])  = v29 | v32;
        sub_100211E68(__src, 2LL);
        __asm { BR              X10 }
      }

      uint64_t v45 = 0LL;
      sub_100002AC4(__src);
      sub_1000208D8(v21, v23);
      sub_1000208D8(v21, v23);
      swift_beginAccess(v26 + 2, v47, 0LL, 0LL);
      unint64_t v28 = v26[3];
      sub_100020AFC(v26[2], v28);
      swift_release(v26);
      sub_1000208D8(v21, v23);
      __asm { BR              X9 }
    }

    sub_1001FC3BC(*(unsigned __int8 *)(v46 + 56), v17);
    if (!v2)
    {
      uint64_t v38 = v11;
      uint64_t v39 = v9;
      __asm { BR              X10 }
    }

    return sub_1000208D8(v49, *((unint64_t *)&v49 + 1));
  }

  return result;
}

uint64_t BroadcomDriver<>.start(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a4;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v49 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v12 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v46 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for SHA256(0LL);
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  __int128 v44 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v54 = xmmword_1003398F0;
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v43 = v4;
  uint64_t v50 = a3;
  __int128 v51 = xmmword_1003398F0;
  if (v16)
  {
    uint64_t result = sub_1001FC3BC(*(unsigned __int8 *)(a1 + 40), v15);
    if (!v5)
    {
      uint64_t v40 = v12;
      __asm { BR              X10 }
    }
  }

  else
  {
    uint64_t v19 = *(void *)(a1 + 64);
    if (!*(void *)(v19 + 16))
    {
      uint64_t v38 = v5;
      uint64_t v40 = v12;
      v37[7]  = v11;
      uint64_t v39 = v9;
      v37[6]  = a2;
      uint64_t v41 = a1;
      uint64_t v21 = NANPublish.Configuration.serviceInfo.getter();
      uint64_t v23 = v22;
      unint64_t v25 = v24;
      sub_100020AFC(v22, v24);
      unint64_t v26 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v27 = type metadata accessor for BinaryEncoder();
      unint64_t v28 = (uint64_t *)swift_allocObject(v27, 40LL, 7LL);
      *((_OWORD *)v28 + 1)  = v51;
      v28[4]  = v26;
      v37[8]  = v27;
      __src[3]  = v27;
      __src[4]  = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
      __src[0]  = v28;
      sub_100020AFC(v23, v25);
      swift_retain();
      uint64_t v29 = v38;
      NANServiceInfo.encode(to:)((uint64_t)__src, v21, v23, v25);
      if (v29)
      {
        sub_100002AC4(__src);
        sub_1000208D8(v23, v25);
        sub_1000208D8(v23, v25);
        swift_release(v28);
        swift_errorRelease(v29);
        sub_1000208D8(v23, v25);
        uint64_t v38 = 0LL;
        uint64_t v30 = v41;
        if (*(void *)(*(void *)(v30 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 84) + 16)
                       + 16LL))
          __int16 v32 = 580;
        else {
          __int16 v32 = 516;
        }
        int v33 = *(unsigned __int8 *)(v30 + 77);
        if ((v33 & 1) != 0) {
          __int16 v34 = 3;
        }
        else {
          __int16 v34 = 1;
        }
        if (v33 == 2) {
          __int16 v35 = 0;
        }
        else {
          __int16 v35 = v34;
        }
        LOWORD(__src[0])  = v35 | v32;
        sub_100211E68(__src, 2LL);
        __asm { BR              X10 }
      }

      sub_100002AC4(__src);
      sub_1000208D8(v23, v25);
      sub_1000208D8(v23, v25);
      swift_beginAccess(v28 + 2, v52, 0LL, 0LL);
      unint64_t v31 = v28[3];
      sub_100020AFC(v28[2], v31);
      swift_release(v28);
      sub_1000208D8(v23, v25);
      __asm { BR              X9 }
    }

    sub_1001FC3BC(*(unsigned __int8 *)(a1 + 56), v19);
    if (!v5)
    {
      uint64_t v40 = v12;
      __asm { BR              X10 }
    }

    return sub_1000208D8(v54, *((unint64_t *)&v54 + 1));
  }

  return result;
}

void sub_1001EE41C(_BYTE *a1)
{
}

void sub_1001EE43C(_BYTE *a1)
{
  uint64_t v2 = type metadata accessor for SHA256Digest(0LL);
  __chkstk_darwin(v2);
  v9[11]  = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SHA256(0LL);
  v9[10]  = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v9[9]  = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v11 = xmmword_1003398F0;
  __int128 v12 = xmmword_1003398F0;
  uint64_t v13 = sub_100002274(&qword_1004040A8);
  uint64_t v6 = swift_allocObject(v13, 33LL, 7LL);
  __int128 v10 = xmmword_100339900;
  *(_OWORD *)(v6 + 16)  = xmmword_100339900;
  *(_BYTE *)(v6 + 32)  = *a1;
  sub_1000FB08C(v6);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v6);
  __asm { BR              X10 }

void BroadcomDriver<>.start(configuration:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v5 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v13 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v11[11]  = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  v11[10]  = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v11[9]  = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v16 = xmmword_1003398F0;
  __int128 v17 = xmmword_1003398F0;
  uint64_t v15 = sub_100002274(&qword_1004040A8);
  uint64_t v8 = swift_allocObject(v15, 33LL, 7LL);
  __int128 v14 = xmmword_100339900;
  *(_OWORD *)(v8 + 16)  = xmmword_100339900;
  *(_BYTE *)(v8 + 32)  = *a1;
  sub_1000FB08C(v8);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(v8);
  __asm { BR              X10 }

uint64_t sub_1001F0480(unsigned __int8 a1, uint64_t a2)
{
  return sub_1001FB5D0(0x506u, a1 | (unint64_t)(a2 << 16));
}

uint64_t BroadcomDriver<>.terminate(datapathID:initiatorAddress:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0]  = a1;
  v10[1]  = 0;
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  char v13 = BYTE3(a2);
  char v14 = BYTE4(a2);
  char v15 = BYTE5(a2);
  type metadata accessor for wl_nan_dp_end(0LL);
  return sub_1001FBA40(1286, (uint64_t)v10, a3, v8, a4, a5);
}

uint64_t sub_1001F0540(char a1)
{
  return sub_1001FB3B0(0x307u, a1);
}

uint64_t BroadcomDriver<>.terminate(subscribeID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = a1;
  return sub_1001FBA40(775, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

uint64_t sub_1001F05A4(char a1)
{
  return sub_1001FB3B0(0x304u, a1);
}

uint64_t BroadcomDriver<>.terminate(publishID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = a1;
  return sub_1001FBA40(772, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

void sub_1001F0608(uint64_t a1, unint64_t a2)
{
}

void sub_1001F062C(uint64_t a1, unint64_t a2)
{
  KeyPath  = swift_getKeyPath(&unk_10035B930);
  uint64_t v4 = sub_100002274(&qword_100406370);
  inited  = swift_initStackObject(v4, v9);
  *(_DWORD *)(inited + 32)  = 780;
  *(_OWORD *)(inited + 16)  = xmmword_100339900;
  *(void *)(inited + 40)  = a1;
  *(void *)(inited + 48)  = a2;
  sub_100020AFC(a1, a2);
  unsigned int v6 = *(_DWORD *)(inited + 32);
  uint64_t v7 = *(void *)(inited + 48);
  swift_bridgeObjectRetain(inited);
  if (v6 < 0x10000) {
    __asm { BR              X10 }
  }

  char v8 = 2;
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v8,  3455LL,  0);
  __break(1u);
  JUMPOUT(0x1001F0920LL);
}

void BroadcomDriver<>.transmit(followUp:for:to:with:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4, char a5)
{
  v11[58]  = a3;
  v11[59]  = a5;
  __int16 v12 = a4;
  char v13 = BYTE2(a4);
  char v14 = BYTE3(a4);
  char v15 = BYTE4(a4);
  char v16 = BYTE5(a4);
  int v17 = 0;
  __int16 v18 = 0;
  KeyPath  = swift_getKeyPath(&unk_10035B930);
  uint64_t v7 = sub_100002274(&qword_100406370);
  inited  = swift_initStackObject(v7, v11);
  *(_DWORD *)(inited + 32)  = 780;
  *(_OWORD *)(inited + 16)  = xmmword_100339900;
  *(void *)(inited + 40)  = a1;
  *(void *)(inited + 48)  = a2;
  sub_100020AFC(a1, a2);
  unsigned int v9 = *(_DWORD *)(inited + 32);
  uint64_t v10 = *(void *)(inited + 48);
  swift_bridgeObjectRetain(inited);
  if (!HIWORD(v9)) {
    __asm { BR              X10 }
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  JUMPOUT(0x1001F0C78LL);
}

uint64_t sub_1001F0C88( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_1001F0CCC( a1,  a2,  a3,  a4,  a5 & 0xFFFFFFFFFFFFLL,  a6 & 0xFFFFFFFFFFFFLL,  a7 & 0xFFFFFFFFFFFFLL,  a8,  a9,  a10,  a11);
}

uint64_t sub_1001F0CCC( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v25[14]  = a5;
  int v26 = a8;
  v25[15]  = a6;
  v25[16]  = a7;
  uint64_t v15 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v27 = v15;
  uint64_t v28 = v16;
  __chkstk_darwin(v15);
  __int16 v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = type metadata accessor for BinaryEncoder();
  uint64_t v21 = (uint64_t *)swift_allocObject(v20, 40LL, 7LL);
  *((_OWORD *)v21 + 1)  = xmmword_1003398F0;
  v21[4]  = v19;
  v30[3]  = v20;
  v30[4]  = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
  v30[0]  = v21;
  sub_10005852C(a2, a3, a4);
  swift_retain();
  uint64_t v22 = v29;
  IEEE80211Frame.Management.ActionFrame.encode(to:)(v30, a1, a2, a3, a4);
  sub_100002AC4(v30);
  sub_100057AA0(a2, a3, a4);
  if (!v22)
  {
    v25[11]  = v18;
    uint64_t v29 = a11;
    swift_beginAccess(v21 + 2, v30, 0LL, 0LL);
    unint64_t v24 = v21[3];
    sub_100020AFC(v21[2], v24);
    swift_release(v21);
    __asm { BR              X10 }
  }

  return swift_release(v21);
}

uint64_t BroadcomDriver<>.transmit(outOfBoundActionFrame:from:to:on:mapID:using:)( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v33 = a8;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v30 = a5;
  uint64_t v35 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v34 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  unint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v20 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v21 = type metadata accessor for BinaryEncoder();
  uint64_t v22 = (uint64_t *)swift_allocObject(v21, 40LL, 7LL);
  *((_OWORD *)v22 + 1)  = xmmword_1003398F0;
  v22[4]  = v20;
  v37[3]  = v21;
  v37[4]  = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
  v37[0]  = v22;
  sub_10005852C(a2, a3, a4);
  swift_retain();
  uint64_t v23 = v36;
  IEEE80211Frame.Management.ActionFrame.encode(to:)(v37, a1, a2, a3, a4);
  sub_100002AC4(v37);
  sub_100057AA0(a2, a3, a4);
  if (!v23)
  {
    int v27 = a1;
    uint64_t v28 = v19;
    v26[12]  = a13;
    v26[10]  = a14;
    v26[11]  = a12;
    uint64_t v29 = a11;
    swift_beginAccess(v22 + 2, v37, 0LL, 0LL);
    unint64_t v25 = v22[3];
    sub_100020AFC(v22[2], v25);
    swift_release(v22);
    __asm { BR              X10 }
  }

  return swift_release(v22);
}

void sub_1001F1C90(unsigned __int8 *a1)
{
}

void sub_1001F1CB0(unsigned __int8 *a1)
{
  uint64_t v2 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v16 = *(void *)(v2 - 8);
  uint64_t v17 = v2;
  __chkstk_darwin(v2);
  v14[9]  = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SHA256(0LL);
  v14[8]  = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  v14[7]  = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v25 = xmmword_1003398F0;
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v18 = sub_100002274(&qword_1004040A8);
  uint64_t v11 = swift_allocObject(v18, 38LL, 7LL);
  *(_OWORD *)(v11 + 16)  = xmmword_10033A980;
  uint64_t v23 = v6;
  uint64_t v24 = v5;
  *(_BYTE *)(v11 + 32)  = v5;
  *(_BYTE *)(v11 + 33)  = v6;
  uint64_t v21 = v8;
  uint64_t v22 = v7;
  *(_BYTE *)(v11 + 34)  = v7;
  *(_BYTE *)(v11 + 35)  = v8;
  uint64_t v19 = v10;
  uint64_t v20 = v9;
  *(_BYTE *)(v11 + 36)  = v9;
  *(_BYTE *)(v11 + 37)  = v10;
  sub_1000FB08C(v11);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease(v11);
  __asm { BR              X10 }

void BroadcomDriver<>.send(datapathResponse:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a4;
  uint64_t v23 = a3;
  uint64_t v29 = a2;
  uint64_t v5 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  v17[11]  = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SHA256(0LL);
  v17[10]  = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  v17[9]  = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v30 = xmmword_1003398F0;
  int v8 = a1[8];
  int v9 = a1[9];
  int v10 = a1[10];
  unsigned __int8 v11 = a1[11];
  int v12 = a1[12];
  int v13 = a1[13];
  uint64_t v21 = sub_100002274(&qword_1004040A8);
  uint64_t v14 = swift_allocObject(v21, 38LL, 7LL);
  *(_OWORD *)(v14 + 16)  = xmmword_10033A980;
  int v27 = v9;
  int v28 = v8;
  *(_BYTE *)(v14 + 32)  = v8;
  *(_BYTE *)(v14 + 33)  = v9;
  int v25 = v12;
  int v26 = v10;
  *(_BYTE *)(v14 + 34)  = v10;
  *(_BYTE *)(v14 + 35)  = v11;
  *(_BYTE *)(v14 + 36)  = v12;
  int v24 = v13;
  *(_BYTE *)(v14 + 37)  = v13;
  sub_1000FB08C(v14);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v14);
  __asm { BR              X10 }

uint64_t sub_1001F328C(unint64_t a1)
{
  return sub_1001FB4C0(0x50Eu, a1 | ((HIBYTE(a1) != 2) << 8));
}

uint64_t BroadcomDriver<>.send(datapathConfirmation:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0]  = a1;
  v9[1]  = HIBYTE(a1) != 2;
  __int16 v10 = 0;
  type metadata accessor for wl_nan_dp_conf(0LL);
  return sub_1001FBA40(1294, (uint64_t)v9, a2, v7, a3, a4);
}

uint64_t sub_1001F333C(uint64_t a1)
{
  return sub_1001F335C(a1);
}

uint64_t sub_1001F335C(uint64_t result)
{
  uint64_t v2 = v1;
  if (*(void *)(result + 16))
  {
    uint64_t v15 = result + 32;
    swift_bridgeObjectRetain(result);
    __int16 v3 = *(_WORD *)(v15 + 2);
    uint64_t v4 = *(void *)(v15 + 8);
    __int128 v24 = xmmword_1003398F0;
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain_n(v4, 3LL);
      uint64_t v6 = (_BYTE *)(v4 + 80);
      uint64_t v16 = v5;
      while (1)
      {
        uint64_t v7 = *((void *)v6 - 5);
        uint64_t v8 = *((void *)v6 - 4);
        unint64_t v9 = *((void *)v6 - 3);
        char v10 = *v6;
        uint64_t v11 = *((void *)v6 - 1);
        char v12 = *(v6 - 16);
        LOWORD(v17)  = *((_WORD *)v6 - 24);
        uint64_t v18 = v7;
        uint64_t v19 = v8;
        unint64_t v20 = v9;
        char v21 = v12;
        uint64_t v22 = v11;
        char v23 = v10;
        sub_100058430(v7, v8, v9);
        swift_bridgeObjectRetain(v11);
        sub_1001FC9C0((uint64_t)&v24, (uint64_t)&v17);
        if (v2) {
          break;
        }
        uint64_t v2 = 0LL;
        sub_100057CA0(v7, v8, v9);
        swift_bridgeObjectRelease(v11);
        v6 += 56;
        if (!--v5)
        {
          swift_bridgeObjectRelease_n(v4, 2LL);
          unint64_t v13 = *((void *)&v24 + 1);
          uint64_t v5 = v16;
          goto LABEL_8;
        }
      }

      sub_1000208D8(v24, *((unint64_t *)&v24 + 1));
      sub_100057CA0(v7, v8, v9);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v11);
      __break(1u);
    }

    else
    {
      swift_bridgeObjectRetain(v4);
      unint64_t v13 = 0xC000000000000000LL;
LABEL_8:
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      char v14 = sub_100071514(0LL, 4LL, v3);
      if (v2)
      {
LABEL_20:
        swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
        __break(1u);
        JUMPOUT(0x1001F3778LL);
      }

      BYTE4(v17)  = v14 & 0xF;
      if (*(void *)(v4 + 16) <= 0xFFuLL)
      {
        BYTE6(v18)  = *(void *)(v4 + 16);
        if ((v3 & 0x20) != 0) {
          WORD1(v17) |= 8u;
        }
        if ((v3 & 0x10) != 0) {
          WORD1(v17) |= 9u;
        }
        swift_bridgeObjectRelease(v4);
        if (!v5) {
          WORD1(v17) |= 0x2000u;
        }
        __asm { BR              X10 }
      }
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    goto LABEL_20;
  }

  return result;
}

uint64_t BroadcomDriver<>.update(availability:)(uint64_t result)
{
  uint64_t v2 = v1;
  if (*(void *)(result + 16))
  {
    uint64_t v15 = result + 32;
    swift_bridgeObjectRetain(result);
    __int16 v3 = *(_WORD *)(v15 + 2);
    uint64_t v4 = *(void *)(v15 + 8);
    __int128 v24 = xmmword_1003398F0;
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain_n(v4, 3LL);
      uint64_t v6 = (_BYTE *)(v4 + 80);
      uint64_t v16 = v5;
      while (1)
      {
        uint64_t v8 = *((void *)v6 - 5);
        uint64_t v7 = *((void *)v6 - 4);
        unint64_t v9 = *((void *)v6 - 3);
        char v10 = *v6;
        uint64_t v11 = *((void *)v6 - 1);
        char v12 = *(v6 - 16);
        LOWORD(v17)  = *((_WORD *)v6 - 24);
        uint64_t v18 = v8;
        uint64_t v19 = v7;
        unint64_t v20 = v9;
        char v21 = v12;
        uint64_t v22 = v11;
        char v23 = v10;
        sub_100058430(v8, v7, v9);
        swift_bridgeObjectRetain(v11);
        sub_1001FC9C0((uint64_t)&v24, (uint64_t)&v17);
        if (v2) {
          break;
        }
        uint64_t v2 = 0LL;
        sub_100057CA0(v8, v7, v9);
        swift_bridgeObjectRelease(v11);
        v6 += 56;
        if (!--v5)
        {
          swift_bridgeObjectRelease_n(v4, 2LL);
          unint64_t v13 = *((void *)&v24 + 1);
          uint64_t v5 = v16;
          goto LABEL_8;
        }
      }

      sub_1000208D8(v24, *((unint64_t *)&v24 + 1));
      sub_100057CA0(v8, v7, v9);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v11);
      __break(1u);
    }

    else
    {
      swift_bridgeObjectRetain(v4);
      unint64_t v13 = 0xC000000000000000LL;
LABEL_8:
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      char v14 = sub_100071514(0LL, 4LL, v3);
      if (v2)
      {
LABEL_20:
        swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26LL, 1LL);
        __break(1u);
        JUMPOUT(0x1001F3B3CLL);
      }

      BYTE4(v17)  = v14 & 0xF;
      if (*(void *)(v4 + 16) <= 0xFFuLL)
      {
        BYTE6(v18)  = *(void *)(v4 + 16);
        if ((v3 & 0x20) != 0) {
          WORD1(v17) |= 8u;
        }
        if ((v3 & 0x10) != 0) {
          WORD1(v17) |= 9u;
        }
        swift_bridgeObjectRelease(v4);
        if (!v5) {
          WORD1(v17) |= 0x2000u;
        }
        __asm { BR              X10 }
      }
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    goto LABEL_20;
  }

  return result;
}

void sub_1001F3B4C(unint64_t a1, uint64_t a2)
{
}

void sub_1001F3B6C(unint64_t a1, uint64_t a2)
{
  if (!v2)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_100208DB4(v5, v6);
    int v10 = v9;
    sub_1000208D8(v7, v8);
    sub_1001FB4C0(0x115u, v10 & 0xFFEFFFFF | ((a2 != 0) << 20));
    if (a2) {
      unint64_t v11 = a1;
    }
    else {
      unint64_t v11 = 100LL;
    }
    if (v11 >= 0x10000)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
      __break(1u);
      JUMPOUT(0x1001F42A4LL);
    }

    sub_1001FB930(0x10Eu, v11);
    if (a2)
    {
      int64_t v12 = *(void *)(a2 + 16);
      if (v12)
      {
        sub_100069A1C(0, v12, 0);
        __asm { BR              X9 }
      }
    }
  }

uint64_t BroadcomDriver<>.update(discoveryBeaconTransmissionSchedule:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1001FBB84(277LL, (uint64_t)&type metadata for UInt32, a3, (uint64_t)&type metadata for UInt32, a4, a5);
  if (!v5)
  {
    LODWORD(v15)  = v14 & 0xFFEFFFFF | ((a2 != 0) << 20);
    sub_1001FBA40(277, (uint64_t)&v15, a3, (uint64_t)&type metadata for UInt32, a4, a5);
    unint64_t v12 = 100LL;
    if (a2) {
      unint64_t v12 = a1;
    }
    if (v12 >= 0x10000)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
      __break(1u);
      JUMPOUT(0x1001F4A34LL);
    }

    LOWORD(v15)  = v12;
    uint64_t result = sub_1001FBA40(270, (uint64_t)&v15, a3, (uint64_t)&type metadata for UInt16, a4, a5);
    if (a2)
    {
      int64_t v13 = *(void *)(a2 + 16);
      if (v13)
      {
        sub_100069A1C(0, v13, 0);
        __asm { BR              X9 }
      }
    }
  }

  return result;
}

void sub_1001F4A64(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  AppleBroadcomDriver.init(device:role:name:)(v10, a2, a3, a4);
  *a5  = v11;
}

uint64_t sub_1001F4ACC()
{
  return AppleBroadcomDriver.capabilities.getter();
}

uint64_t sub_1001F4AEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

void sub_1001F4B34()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v1);
  __asm { BR              X10 }

void sub_1001F4BE4(uint64_t a1@<X8>)
{
  *(void *)(v5 - 128)  = a1;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xED00006E616E2E65LL, 0x726576697264LL, 0xE600000000000000LL);
  uint64_t v6 = String.count.getter(v4, v2);
  *(void *)(v5 - 96)  = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v5 - 160)  = v1;
    KeyPath  = swift_getKeyPath(&unk_10035BE00);
    uint64_t v8 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter(KeyPath);
    char v10 = v9;
    swift_release(KeyPath);
    if ((v10 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x1001F554CLL);
    }

    if (!__OFADD__(*(void *)(v5 - 96), v8))
    {
      *(void *)(v5 - 168)  = v8;
      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x1001F5504LL);
}

void sub_1001F5620( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a8 + 8),  a7,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v10);
  uint64_t v11 = (char *)&loc_1001F5728
      + *((int *)qword_1001F6168 + (*(unsigned __int8 (**)(uint64_t, uint64_t))(a9 + 32))(a7, a9));
  __asm { BR              X10 }

void sub_1001F5738()
{
  uint64_t v4 = String.count.getter(*(void *)(v3 - 128), v0);
  *(void *)(v3 - 120)  = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 - 168)  = v1;
    *(void *)(v3 - 144)  = v0;
    KeyPath  = swift_getKeyPath(&unk_10035BE00);
    uint64_t v6 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter(KeyPath);
    char v8 = v7;
    swift_release(KeyPath);
    if ((v8 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x1001F60D8LL);
    }

    if (!__OFADD__(*(void *)(v3 - 120), v6))
    {
      *(void *)(v3 - 152)  = v2;
      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x1001F6090LL);
}

uint64_t sub_1001F61AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v18 = xmmword_10035BE90;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 3);
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[2];
  uint64_t v13 = a3[3];
  swift_retain();
  swift_bridgeObjectRetain(v13);
  AppleDevice.getRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, v12, v13);
  if (v4)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    swift_release(v11);
    return swift_bridgeObjectRelease(v13);
  }

  swift_bridgeObjectRelease(v13);
  uint64_t result = swift_release(v11);
  if (!a1) {
    goto LABEL_11;
  }
  uint64_t v15 = a2 - a1 - 1;
  if (__OFSUB__(a2 - a1, 1LL))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

  if (v15 < 0 || v15 >= a2 - a1) {
    goto LABEL_11;
  }
  UnsafeMutableRawBufferPointer.subscript.setter(0LL);
  uint64_t v16 = swift_bridgeObjectRelease(0xE300000000000000LL);
  static String.Encoding.utf8.getter(v16);
  uint64_t result = String.init(cString:encoding:)(a1, v10);
  if (!v17) {
    return 0LL;
  }
  return result;
}

uint64_t sub_1001F6320@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  int v33 = a6;
  uint64_t v34 = a4;
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v11);
  uint64_t v32 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a4 + 8);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  v13,  a3,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v17 = (char *)&v31 - v16;
  __int128 v35 = xmmword_10035BE90;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 3);
  (*(void (**)(uint64_t, uint64_t))(v13 + 56))(a3, v13);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  uint64_t v20 = v19;
  AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness( v34,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for BroadcomDriver,  &associated conformance descriptor for BroadcomDriver.DeviceDriver.Device: BroadcomDevice);
  uint64_t v22 = v36;
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                       + 16))( a1,  a2,  0LL,  v18,  v20,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  if (v22)
  {
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
    return swift_bridgeObjectRelease(0xE300000000000000LL);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease(v20);
  int v25 = v32;
  __int128 v24 = v33;
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v26 = a2 - a1 - 1;
  if (__OFSUB__(a2 - a1, 1LL))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  if (v26 < 0 || v26 >= a2 - a1) {
    goto LABEL_15;
  }
  UnsafeMutableRawBufferPointer.subscript.setter(0LL);
  uint64_t v27 = swift_bridgeObjectRelease(0xE300000000000000LL);
  static String.Encoding.utf8.getter(v27);
  uint64_t result = String.init(cString:encoding:)(a1, v25);
  if (v28) {
    uint64_t v29 = result;
  }
  else {
    uint64_t v29 = 0LL;
  }
  unint64_t v30 = 0xE000000000000000LL;
  if (v28) {
    unint64_t v30 = v28;
  }
  *__int128 v24 = v29;
  v24[1]  = v30;
  return result;
}

uint64_t sub_1001F6554(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1[1];
  BOOL v7 = *a1 == 0x7478655F747665LL && v6 == 0xE700000000000000LL;
  if (!v7
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x7478655F747665LL, 0xE700000000000000LL, *a1, v6, 0LL) & 1) == 0)
  {
    return 1LL;
  }

  uint64_t v8 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 40))( v11,  a3,  a4);
  *v9 |= 1uLL;
  v8(v11, 0LL);
  return 0LL;
}

uint64_t sub_1001F6610@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001FF4E4(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

void static BroadcomDriver.parse(event:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v8[15]  = *(void *)(v4 - 8);
  v8[16]  = v4;
  __chkstk_darwin(v4);
  v8[17]  = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 0x726576697264LL, 0xE600000000000000LL);
  sub_100020AFC(a1, a2);
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = type metadata accessor for BinaryDecoder();
  BOOL v7 = (void *)swift_allocObject(v6, 48LL, 7LL);
  void v7[5] = &_swiftEmptyDictionarySingleton;
  v7[2]  = a1;
  _OWORD v7[3] = a2;
  v8[10]  = a2;
  __asm { BR              X10 }

void *sub_1001F6744(uint64_t a1)
{
  *(void *)(v1 + 96)  = v4;
  *(void *)(v5 + 32)  = (int)v4;
  swift_beginAccess(a1, v8 - 136, 1LL, 0LL);
  uint64_t v10 = *(void *)(v5 + 40);
  *(void *)(v5 + 40)  = v2;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = (void *)swift_allocObject(&unk_1003F01A8, 56LL, 7LL);
  v11[5]  = &type metadata for BinaryDecoder.UnkeyedContainer;
  unint64_t v12 = sub_100070240();
  void v11[6] = v12;
  void v11[2] = v5;
  sub_1000237C8((uint64_t)(v11 + 2), (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  unint64_t v13 = sub_1002000F4();
  swift_retain();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for BroadcomEventMessage,  &type metadata for BroadcomEventMessage,  v13,  &type metadata for BinaryDecoder.UnkeyedContainer,  v12);
  unsigned int v33 = *(_DWORD *)(v1 + 336) - 100;
  if (v33 <= 0x3B && ((1LL << v33) & 0xC00000000000001LL) != 0)
  {
    switch(*(_DWORD *)(v1 + 340))
    {
      case 5:
        *(_BYTE *)(v1 + 336)  = 0;
        sub_1001FA2F4(778LL, v5);
        *(void *)(v1 + 64)  = v143;
        *(void *)(v1 + 48)  = v144 & 0xFF00000000LL;
        KeyPath  = (void *)swift_getKeyPath(&unk_10035BA50);
        v146  = swift_getKeyPath(&unk_10035BA70);
        v147  = sub_1000BFF38();
        v148  = v146;
        v149  = sub_1001F97C4(v1 + 336, 778, KeyPath, v146, (uint64_t)v11, v7, v3, v147);
        swift_release(KeyPath);
        swift_release(v148);
        v150  = type metadata accessor for DriverEvent(0LL);
        v168  = v150;
        if (*(void *)(v1 + 48) == 0x300000000LL) {
          v152  = 0LL;
        }
        else {
          v152  = *(void *)(v1 + 64);
        }
        *(void *)&v151  = *(void *)(v1 + 336);
        *(_OWORD *)(v1 + 96)  = v151;
        v153  = sub_100002274(&qword_100405E00);
        v154  = *(void *)(v168 - 8);
        v155  = *(void *)(v154 + 72);
        v156  = *(unsigned __int8 *)(v154 + 80);
        v157  = (v156 + 32) & ~v156;
        uint64_t v31 = swift_allocObject(v153, v157 + v155, v156 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        v173  = (void *)(v31 + v157);
        v158  = *(int8x16_t *)(v1 + 96);
        v158.i64[1]  = *(void *)(v1 + 96);
        *(int8x8_t *)(v1 + 336)  = vqtbl1_s8(v158, (int8x8_t)0x706050403020001LL);
        *(void *)(v1 + 344)  = v152;
        *(void *)(v1 + 352)  = v149;
        sub_10005875C(v1 + 336);
        goto LABEL_55;
      case 6:
        *(_BYTE *)(v1 + 336)  = 0;
        sub_1001FA2F4(776LL, v5);
        *(void *)(v1 + 64)  = v159;
        *(void *)(v1 + 48)  = v160 & 0xFF00000000LL;
        v161  = (void *)swift_getKeyPath(&unk_10035BA10);
        v162  = swift_getKeyPath(&unk_10035BA30);
        v163  = sub_1000BFF38();
        v164  = v162;
        v200  = sub_1001F97C4(v1 + 336, 776, v161, v162, (uint64_t)v11, v7, v3, v163);
        swift_release(v161);
        swift_release(v164);
        v168  = type metadata accessor for DriverEvent(0LL);
        if (*(void *)(v1 + 48) == 0x300000000LL) {
          v201  = 0LL;
        }
        else {
          v201  = *(void *)(v1 + 64);
        }
        v202  = *(int8x8_t *)(v1 + 336);
        v203  = sub_100002274(&qword_100405E00);
        v204  = *(void *)(v168 - 8);
        v205  = *(void *)(v204 + 72);
        v206  = *(unsigned __int8 *)(v204 + 80);
        v207  = (v206 + 32) & ~v206;
        uint64_t v31 = swift_allocObject(v203, v207 + v205, v206 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        v173  = (void *)(v31 + v207);
        *(int8x8_t *)(v1 + 336)  = vext_s8(v202, v202, 6uLL);
        *(void *)(v1 + 344)  = v201;
        *(void *)(v1 + 352)  = v200;
        sub_100058750(v1 + 336);
        goto LABEL_55;
      case 7:
        type metadata accessor for wl_nan_ev_terminated(0LL);
        uint64_t v35 = sub_1001F850C(775, v34, (uint64_t)v11, v7, v34);
        int v36 = *(unsigned __int8 *)(v1 + 338);
        else {
          uint64_t v37 = qword_10035BE58[(char)(*(_BYTE *)(v1 + 337) - 1)];
        }
        v209  = *(_BYTE *)(v1 + 336);
        if (v36 == 1)
        {
          v246  = sub_100002274(&qword_100405E00);
          v168  = type metadata accessor for DriverEvent(0LL);
          v247  = *(void *)(v168 - 8);
          v248  = *(void *)(v247 + 72);
          v249  = *(unsigned __int8 *)(v247 + 80);
          v250  = (v249 + 32) & ~v249;
          uint64_t v31 = swift_allocObject(v246, v250 + v248, v249 | 7);
          *(_OWORD *)(v31 + 16)  = xmmword_100339900;
          uint64_t v48 = (void *)(v31 + v250);
          *(_BYTE *)(v1 + 336)  = v209;
          *(void *)(v1 + 344)  = v37;
          sub_10005869C(v1 + 336);
          goto LABEL_79;
        }

        if (!*(_BYTE *)(v1 + 338))
        {
          v210  = sub_100002274(&qword_100405E00);
          v168  = type metadata accessor for DriverEvent(0LL);
          v211  = *(void *)(v168 - 8);
          v212  = *(void *)(v211 + 72);
          v213  = *(unsigned __int8 *)(v211 + 80);
          v214  = (v213 + 32) & ~v213;
          uint64_t v31 = swift_allocObject(v210, v214 + v212, v213 | 7);
          *(_OWORD *)(v31 + 16)  = xmmword_100339900;
          uint64_t v48 = (void *)(v31 + v214);
          *(_BYTE *)(v1 + 336)  = v209;
          *(void *)(v1 + 344)  = v37;
          sub_100058690(v1 + 336);
LABEL_79:
          sub_100058090((const void *)(v1 + 336), v48);
          v208  = v48;
          goto LABEL_80;
        }

        v252  = (os_log_s *)Logger.logObject.getter(v35);
        v253  = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v252, v253))
        {
          v254  = (uint8_t *)swift_slowAlloc(5LL, -1LL);
          *(_DWORD *)v254  = 16777472;
          *(_BYTE *)(v1 + 336)  = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 336, v1 + 337);
          _os_log_impl((void *)&_mh_execute_header, v252, v253, "Failed to convert %hhu into service type", v254, 5u);
          swift_slowDealloc(v254, -1LL, -1LL);
        }

        v255  = sub_1000033FC();
        v256  = swift_allocError(&type metadata for WiFiError, v255, 0LL, 0LL);
        *(_OWORD *)v257  = xmmword_100337020;
        *(_BYTE *)(v257 + 16)  = 2;
        swift_willThrow(v256);
        swift_release(v5);
        swift_release(v11);
        unint64_t v14 = *(void *)(v1 + 80);
        uint64_t v15 = *(void *)(v1 + 96);
LABEL_2:
        sub_100020AFC(v15, v14);
        swift_errorRetain(v256);
        sub_100020AFC(v15, v14);
        uint64_t v16 = swift_errorRetain(v256);
        uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = v256;
          uint64_t v20 = swift_slowAlloc(22LL, -1LL);
          *(void *)(v1 + 80)  = swift_slowAlloc(8LL, -1LL);
          uint64_t v21 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v1 + 96)  = v21;
          *(void *)(v1 + 336)  = v21;
          *(_DWORD *)uint64_t v20 = 136315394;
          sub_100020AFC(v15, v14);
          sub_100020B54(0LL, 0xE000000000000000LL, v15, v14);
          uint64_t v23 = v22;
          unint64_t v25 = v24;
          sub_1000208D8(v15, v14);
          *(void *)(v1 + 144)  = sub_10000235C(v23, v25, (uint64_t *)(v1 + 336));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
          swift_bridgeObjectRelease(v25);
          sub_1000208D8(v15, v14);
          sub_1000208D8(v15, v14);
          *(_WORD *)(v20 + 12)  = 2112;
          swift_errorRetain(v19);
          uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v19);
          *(void *)(v1 + 144)  = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
          uint64_t v27 = *(uint64_t **)(v1 + 80);
          *uint64_t v27 = v26;
          swift_errorRelease(v19);
          swift_errorRelease(v19);
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to parse event %s: %@", (uint8_t *)v20, 0x16u);
          uint64_t v28 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v27, 1LL, v28);
          swift_slowDealloc(v27, -1LL, -1LL);
          uint64_t v29 = *(void *)(v1 + 96);
          swift_arrayDestroy(v29, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v29, -1LL, -1LL);
          swift_slowDealloc(v20, -1LL, -1LL);

          uint64_t v30 = v19;
        }

        else
        {

          sub_1000208D8(v15, v14);
          sub_1000208D8(v15, v14);
          swift_errorRelease(v256);
          swift_errorRelease(v256);
          uint64_t v30 = v256;
        }

        swift_errorRelease(v30);
        (*(void (**)(void, void))(*(void *)(v1 + 120) + 8LL))( *(void *)(v1 + 136),  *(void *)(v1 + 128));
        return _swiftEmptyArrayStorage;
      case 8:
        *(_BYTE *)(v1 + 336)  = 0;
        sub_1001FA2F4(777LL, v5);
        uint64_t v38 = (void *)swift_getKeyPath(&unk_10035B9D0);
        uint64_t v39 = swift_getKeyPath(&unk_10035B9F0);
        unint64_t v40 = sub_1000BFF38();
        v165  = sub_1001F97C4(v1 + 144, 777, v38, v39, (uint64_t)v11, v7, v3, v40);
        swift_release(v38);
        swift_release(v39);
        v166  = *(char *)(v1 + 152);
        v167  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        v169  = *(void *)(v168 - 8);
        v170  = *(void *)(v169 + 72);
        v171  = *(unsigned __int8 *)(v169 + 80);
        v172  = (v171 + 32) & ~v171;
        uint64_t v31 = swift_allocObject(v167, v172 + v170, v171 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        v173  = (void *)(v31 + v172);
        *(int8x8_t *)(v1 + 336)  = vext_s8(*(int8x8_t *)(v1 + 144), *(int8x8_t *)(v1 + 144), 6uLL);
        *(void *)(v1 + 344)  = v166;
        *(void *)(v1 + 352)  = v165;
        sub_100058684(v1 + 336);
LABEL_55:
        sub_100058090((const void *)(v1 + 336), v173);
        v208  = v173;
        goto LABEL_80;
      case 0xA:
        type metadata accessor for wl_nan_conf_status(0LL);
        sub_1001F850C(261, v41, (uint64_t)v11, v7, v41);
        __int16 v42 = *(_WORD *)(v1 + 156);
        uint64_t v43 = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        uint64_t v44 = *(void *)(v168 - 8);
        uint64_t v45 = *(void *)(v44 + 72);
        uint64_t v46 = *(unsigned __int8 *)(v44 + 80);
        uint64_t v47 = (v46 + 32) & ~v46;
        uint64_t v31 = swift_allocObject(v43, v47 + v45, v46 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        uint64_t v48 = (void *)(v31 + v47);
        *(_DWORD *)(v1 + 336)  = *(_DWORD *)(v1 + 152);
        *(_WORD *)(v1 + 340)  = v42;
        sub_100058774(v1 + 336);
        goto LABEL_79;
      case 0x14:
        uint64_t v49 = *(void *)(v1 + 96);
        unint64_t v50 = *(void *)(v1 + 80);
        sub_100020AFC(v49, v50);
        uint64_t v51 = sub_100020AFC(v49, v50);
        uint64_t v52 = (void *)Logger.logObject.getter(v51);
        os_log_type_t v53 = static os_log_type_t.default.getter();
        int v54 = v53;
        if (os_log_type_enabled((os_log_t)v52, v53))
        {
          *(void *)(v1 + 64)  = v52;
          uint64_t v55 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
          uint64_t v56 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v1 + 48)  = v56;
          *(void *)(v1 + 336)  = v56;
          *(_DWORD *)(v1 + 32)  = v54;
          *uint64_t v55 = 136315138;
          *(void *)(v1 + 16)  = v55 + 1;
          *(void *)(v1 + 24)  = v55;
          sub_100020AFC(v49, v50);
          sub_100020B54(0LL, 0xE000000000000000LL, v49, v50);
          *(void *)(v1 + 8)  = v57;
          unint64_t v59 = v58;
          sub_1000208D8(v49, v50);
          *(void *)(v1 + 144)  = sub_10000235C(*(void *)(v1 + 8), v59, (uint64_t *)(v1 + 336));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
          swift_bridgeObjectRelease(v59);
          sub_1000208D8(v49, v50);
          sub_1000208D8(v49, v50);
          uint64_t v60 = *(uint8_t **)(v1 + 24);
          _os_log_impl( (void *)&_mh_execute_header,  *(os_log_t *)(v1 + 64),  (os_log_type_t)*(_DWORD *)(v1 + 32),  "Got DP Indication: %s",  v60,  0xCu);
          uint64_t v61 = *(void *)(v1 + 48);
          swift_arrayDestroy(v61, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v61, -1LL, -1LL);
          swift_slowDealloc(v60, -1LL, -1LL);
        }

        else
        {

          sub_1000208D8(v49, v50);
          sub_1000208D8(v49, v50);
        }

        sub_1001FA044((uint64_t)v11, v7, v3, v1 + 336);
        v189  = *(_BYTE *)(v1 + 337);
        v190  = *(_BYTE *)(v1 + 338);
        v191  = *(int32x2_t *)(v1 + 340);
        *(_DWORD *)(v1 + 96)  = *(unsigned __int8 *)(v1 + 344);
        *(_DWORD *)(v1 + 80)  = *(unsigned __int8 *)(v1 + 345);
        v192  = *(_BYTE *)(v1 + 352);
        v193  = *(_BYTE *)(v1 + 353);
        v194  = *(int32x2_t *)(v1 + 354);
        *(void *)(v1 + 64)  = *(void *)(v1 + 376);
        v195  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        v196  = *(void *)(v168 - 8);
        v197  = *(void *)(v196 + 72);
        v198  = *(unsigned __int8 *)(v196 + 80);
        v199  = (v198 + 32) & ~v198;
        uint64_t v31 = swift_allocObject(v195, v199 + v197, v198 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        uint64_t v48 = (void *)(v31 + v199);
        *(_BYTE *)(v1 + 336)  = v189;
        *(_BYTE *)(v1 + 337)  = v190;
        *(_BYTE *)(v1 + 338)  = v192;
        *(_BYTE *)(v1 + 339)  = v193;
        *(int32x2_t *)(v1 + 340)  = vzip1_s32(v194, v191);
        *(_BYTE *)(v1 + 348)  = *(_DWORD *)(v1 + 96);
        *(_BYTE *)(v1 + 349)  = *(_DWORD *)(v1 + 80);
        *(void *)(v1 + 352)  = *(void *)(v1 + 64);
        sub_100058744(v1 + 336);
        goto LABEL_79;
      case 0x15:
        type metadata accessor for wl_nan_ev_datapath_cmn(0LL);
        sub_1001F850C(1282, v62, (uint64_t)v11, v7, v62);
        int v63 = *(unsigned __int8 *)(v1 + 336);
        *(_DWORD *)(v1 + 64)  = *(unsigned __int8 *)(v1 + 337);
        *(_DWORD *)(v1 + 80)  = *(unsigned __int16 *)(v1 + 344);
        *(_DWORD *)(v1 + 96)  = *(unsigned __int16 *)(v1 + 350);
        v168  = type metadata accessor for DriverEvent(0LL);
        BOOL v64 = v63 == 1;
        v65  = *(_DWORD *)(v1 + 340);
        int v66 = *(_DWORD *)(v1 + 346);
        uint64_t v67 = sub_100002274(&qword_100405E00);
        uint64_t v68 = *(void *)(v168 - 8);
        uint64_t v69 = *(void *)(v68 + 72);
        uint64_t v70 = *(unsigned __int8 *)(v68 + 80);
        v71  = (v70 + 32) & ~v70;
        uint64_t v31 = swift_allocObject(v67, v71 + v69, v70 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        uint64_t v48 = (void *)(v31 + v71);
        *(_BYTE *)(v1 + 336)  = *(_DWORD *)(v1 + 64);
        *(_DWORD *)(v1 + 337)  = v65;
        *(_WORD *)(v1 + 341)  = *(_DWORD *)(v1 + 80);
        *(_BYTE *)(v1 + 343)  = v64;
        *(_DWORD *)(v1 + 344)  = v66;
        *(_WORD *)(v1 + 348)  = *(_DWORD *)(v1 + 96);
        sub_100058720(v1 + 336);
        goto LABEL_79;
      case 0x17:
        type metadata accessor for wl_nan_ev_datapath_cmn(0LL);
        sub_1001F850C(1282, v72, (uint64_t)v11, v7, v72);
        v73  = *(unsigned __int8 *)(v1 + 336);
        char v74 = *(_BYTE *)(v1 + 337);
        v75  = *(_WORD *)(v1 + 344);
        v168  = type metadata accessor for DriverEvent(0LL);
        BOOL v76 = v73 == 1;
        int v77 = *(_DWORD *)(v1 + 340);
        uint64_t v78 = sub_100002274(&qword_100405E00);
        uint64_t v79 = *(void *)(v168 - 8);
        uint64_t v80 = *(void *)(v79 + 72);
        v81  = *(unsigned __int8 *)(v79 + 80);
        uint64_t v82 = (v81 + 32) & ~v81;
        uint64_t v31 = swift_allocObject(v78, v82 + v80, v81 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        uint64_t v48 = (void *)(v31 + v82);
        *(_BYTE *)(v1 + 336)  = v74;
        *(_DWORD *)(v1 + 337)  = v77;
        *(_WORD *)(v1 + 341)  = v75;
        *(_BYTE *)(v1 + 343)  = v76;
        uint64_t v83 = 2LL;
        goto LABEL_29;
      case 0x18:
        *(_BYTE *)(v1 + 336)  = 1;
        sub_1001FA2F4(0x100000000LL, v5);
        *(void *)(v1 + 32)  = v84;
        *(void *)(v1 + 48)  = v85;
        *(void *)(v1 + 64)  = v86;
        uint64_t v87 = (void *)swift_getKeyPath(&unk_10035B970);
        uint64_t v88 = swift_getKeyPath(&unk_10035B990);
        unint64_t v89 = sub_1000BFF38();
        sub_1001F9668( v8 - 168,  v1 + 144,  1025,  v87,  v88,  (uint64_t)sub_1001FA670,  0LL,  (uint64_t)v11,  v7,  (uint64_t)&type metadata for IEEE80211Frame,  v3,  v89);
        v224  = *(void *)(v1 + 48);
        *(void *)(v1 + 96)  = v224 >> 40;
        swift_release(v87);
        swift_release(v88);
        v225  = *(void *)(v8 - 168);
        v226  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        v227  = *(void *)(v168 - 8);
        v228  = *(void *)(v227 + 72);
        v229  = *(unsigned __int8 *)(v227 + 80);
        v230  = (v229 + 32) & ~v229;
        uint64_t v31 = swift_allocObject(v226, v230 + v228, v229 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        uint64_t v48 = (void *)(v31 + v230);
        v231  = *(_OWORD *)(v1 + 288);
        *(_OWORD *)(v1 + 464)  = *(_OWORD *)(v1 + 272);
        *(_OWORD *)(v1 + 480)  = v231;
        *(_OWORD *)(v1 + 496)  = *(_OWORD *)(v1 + 304);
        *(_OWORD *)(v1 + 505)  = *(_OWORD *)(v6 + 169);
        v232  = *(_OWORD *)(v1 + 224);
        *(_OWORD *)(v1 + 400)  = *(_OWORD *)(v1 + 208);
        *(_OWORD *)(v1 + 416)  = v232;
        v233  = *(_OWORD *)(v1 + 256);
        *(_OWORD *)(v1 + 432)  = *(_OWORD *)(v1 + 240);
        *(_OWORD *)(v1 + 448)  = v233;
        v234  = *(_OWORD *)(v1 + 160);
        *(_OWORD *)(v1 + 336)  = *(_OWORD *)(v1 + 144);
        *(_OWORD *)(v1 + 352)  = v234;
        v235  = *(_OWORD *)(v1 + 192);
        *(_OWORD *)(v1 + 368)  = *(_OWORD *)(v1 + 176);
        *(_OWORD *)(v1 + 384)  = v235;
        *(void *)(v1 + 528)  = *(void *)(v1 + 32);
        *(_DWORD *)(v1 + 536)  = v224;
        *(_BYTE *)(v1 + 540)  = BYTE4(v224);
        *(_BYTE *)(v1 + 541)  = *(void *)(v1 + 96);
        *(void *)(v1 + 544)  = *(void *)(v1 + 64);
        *(void *)(v1 + 552)  = v225;
        sub_10005854C(v1 + 336);
        goto LABEL_79;
      case 0x19:
        sub_1001FA044((uint64_t)v11, v7, v3, v1 + 336);
        __int128 v90 = *(_OWORD *)(v1 + 337);
        *(_OWORD *)(v1 + 48)  = *(_OWORD *)(v1 + 340);
        *(_OWORD *)(v1 + 64)  = v90;
        *(_OWORD *)(v1 + 32)  = *(_OWORD *)(v1 + 342);
        __int128 v91 = *(_OWORD *)(v1 + 346);
        *(_OWORD *)(v1 + 96)  = v91;
        LODWORD(v91)  = *(_DWORD *)(v1 + 354);
        *(uint16x8_t *)(v1 + 80)  = vmovl_u8(*(uint8x8_t *)&v91);
        uint64_t v92 = *(void *)(v1 + 376);
        v93  = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        uint64_t v94 = *(void *)(v168 - 8);
        v95  = *(void *)(v94 + 72);
        uint64_t v96 = *(unsigned __int8 *)(v94 + 80);
        uint64_t v97 = (v96 + 32) & ~v96;
        uint64_t v31 = swift_allocObject(v93, v97 + v95, v96 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        uint64_t v48 = (void *)(v31 + v97);
        *(void *)&v98  = vzip1q_s32( (int32x4_t)vzip1q_s16(*(int16x8_t *)(v1 + 64), *(int16x8_t *)(v1 + 48)),  *(int32x4_t *)(v1 + 32)).u64[0];
        *((void *)&v98 + 1)  = *(void *)(v1 + 96);
        *(_OWORD *)(v1 + 336)  = v98;
        *(_DWORD *)(v1 + 352)  = vmovn_s16(*(int16x8_t *)(v1 + 80)).u32[0];
        *(void *)(v1 + 360)  = v92;
        sub_100058738(v1 + 336);
        goto LABEL_79;
      case 0x1A:
        sub_1001FA044((uint64_t)v11, v7, v3, v1 + 336);
        char v99 = *(_BYTE *)(v1 + 337);
        *(_DWORD *)(v1 + 96)  = *(unsigned __int8 *)(v1 + 340);
        *(_DWORD *)(v1 + 80)  = *(unsigned __int8 *)(v1 + 341);
        int32x2_t v100 = *(int32x2_t *)(v1 + 342);
        int32x2_t v101 = *(int32x2_t *)(v1 + 352);
        char v102 = *(_BYTE *)(v1 + 356);
        *(_DWORD *)(v1 + 64)  = *(unsigned __int8 *)(v1 + 357);
        int v103 = *(unsigned __int8 *)(v1 + 358);
        uint64_t v104 = *(void *)(v1 + 376);
        uint64_t v105 = sub_100002274(&qword_100405E00);
        v168  = type metadata accessor for DriverEvent(0LL);
        uint64_t v106 = *(void *)(v168 - 8);
        uint64_t v107 = *(void *)(v106 + 72);
        uint64_t v108 = *(unsigned __int8 *)(v106 + 80);
        uint64_t v109 = (v108 + 32) & ~v108;
        uint64_t v31 = swift_allocObject(v105, v109 + v107, v108 | 7);
        *(_OWORD *)(v31 + 16)  = xmmword_100339900;
        uint64_t v48 = (void *)(v31 + v109);
        char v110 = v103 == 1;
        *(_BYTE *)(v1 + 336)  = v99;
        if (v103 == 2) {
          char v110 = 2;
        }
        *(_BYTE *)(v1 + 337)  = v110;
        *(_BYTE *)(v1 + 338)  = *(_DWORD *)(v1 + 96);
        *(_BYTE *)(v1 + 339)  = *(_DWORD *)(v1 + 80);
        *(int32x2_t *)(v1 + 340)  = vzip1_s32(v100, v101);
        *(_BYTE *)(v1 + 348)  = v102;
        *(_BYTE *)(v1 + 349)  = *(_DWORD *)(v1 + 64);
        *(void *)(v1 + 352)  = v104;
        sub_10005872C(v1 + 336);
        goto LABEL_79;
      case 0x1F:
        *(_DWORD *)(v1 + 144)  = 308;
        v111  = (uint64_t *)swift_getKeyPath(&unk_10035B9B0);
        type metadata accessor for wl_nan_cmd_xtlv_id(0LL);
        uint64_t v113 = v112;
        v114  = sub_10000AF70( &qword_10040BA30,  (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_cmd_xtlv_id,  (uint64_t)&unk_1003385E8);
        unint64_t v115 = sub_1000BFF38();
        unint64_t v116 = sub_1000BFEF4();
        v174  = sub_1001F9B7C(v1 + 336, (char *)(v1 + 144), v111, (uint64_t)v11, v7, v113, v3, v114, v115, v116);
        swift_release(v111);
        v175  = *(unsigned __int8 *)(v1 + 336);
        v176  = *(unsigned __int8 *)(v1 + 340);
        if (v175 == 1) {
          goto LABEL_72;
        }
        v177  = *(unsigned __int8 *)(v1 + 337);
        if (*(_BYTE *)(v1 + 336))
        {
          if (v177 != 1)
          {
LABEL_85:
            v258  = swift_bridgeObjectRelease(v174);
            v259  = (os_log_s *)Logger.logObject.getter(v258);
            v260  = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v259, v260))
            {
              v261  = swift_slowAlloc(18LL, -1LL);
              v262  = swift_slowAlloc(32LL, -1LL);
              *(void *)(v1 + 336)  = v262;
              *(_DWORD *)v261  = 16777986;
              *(_BYTE *)(v1 + 144)  = v175;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 145);
              *(_WORD *)(v261 + 5)  = 256;
              *(_BYTE *)(v1 + 144)  = v177;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 145);
              *(_WORD *)(v261 + 8)  = 2080;
              *(void *)(v1 + 144)  = sub_10000235C(0xD000000000000019LL, 0x8000000100367530LL, (uint64_t *)(v1 + 336));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
              _os_log_impl( (void *)&_mh_execute_header,  v259,  v260,  "Failed to convert status: %hhu, reason: %hhu into %s",  (uint8_t *)v261,  0x12u);
              swift_arrayDestroy(v262, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v262, -1LL, -1LL);
              swift_slowDealloc(v261, -1LL, -1LL);
            }

            unint64_t v14 = *(void *)(v1 + 80);
            uint64_t v15 = *(void *)(v1 + 96);
            v263  = sub_1000033FC();
            v256  = swift_allocError(&type metadata for WiFiError, v263, 0LL, 0LL);
            *(_OWORD *)v264  = xmmword_100337020;
            *(_BYTE *)(v264 + 16)  = 2;
            swift_willThrow(v256);
            swift_release(v11);
            swift_release(v5);
            goto LABEL_2;
          }

uint64_t sub_1001F850C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v23 = a1;
  uint64_t v8 = a3 + 16;
  uint64_t v9 = sub_100002274(&qword_100406AF8);
  swift_beginAccess(v8, v20, 33LL, 0LL);
  uint64_t v11 = *(void *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 48);
  sub_1000237C8(v8, v11);
  uint64_t v12 = sub_1000572E4( &qword_10040BBF0,  &qword_100406AF8,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v9, v9, v12, v11, v10);
  uint64_t result = swift_endAccess(v20);
  if (!v5)
  {
    uint64_t v15 = v21;
    unint64_t v14 = v22;
    if (v20[12] == v23)
    {
      uint64_t v16 = sub_1000572E4( &qword_10040BBF8,  &qword_100406AF8,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
      LengthValueHelper.load<A>(_:)(a5, v9, a5, v16);
    }

    else
    {
      unint64_t v17 = sub_1000033FC();
      uint64_t v18 = swift_allocError(&type metadata for WiFiError, v17, 0LL, 0LL);
      *(_OWORD *)uint64_t v19 = xmmword_100337020;
      *(_BYTE *)(v19 + 16)  = 2;
      swift_willThrow(v18);
    }

    return sub_1000208D8(v15, v14);
  }

  return result;
}

uint64_t sub_1001F8694( uint64_t a1, uint64_t a2, char *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v96 = a7;
  uint64_t v101 = a6;
  uint64_t v103 = a5;
  v123  = a3;
  uint64_t v102 = a2;
  uint64_t v100 = a1;
  unint64_t v115 = a4;
  uint64_t v16 = *a4;
  uint64_t v113 = *(void *)(a14 + 8);
  unint64_t v17 = (uint64_t *)(v16 + class metadata base offset for KeyPath);
  uint64_t v18 = *(void *)(v16 + class metadata base offset for KeyPath + 8);
  uint64_t v94 = *(void *)(*(void *)(v113 + 24) + 16LL);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  v94,  v18,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v19 = __chkstk_darwin(AssociatedTypeWitness);
  v93  = (char *)&v87 - v20;
  uint64_t v112 = v18;
  uint64_t v106 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v92 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  v95  = (char *)&v87 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v98  = (char *)&v87 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v104 = (char *)&v87 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  char v99 = (char *)&v87 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v97 = (char *)&v87 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v105 = (char *)&v87 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  unint64_t v116 = (char *)&v87 - v36;
  v111  = *v17;
  uint64_t v107 = *(void *)(v111 - 8);
  v114  = *(void *)(v107 + 64);
  __chkstk_darwin(v35);
  v117  = (char *)&v87 - v37;
  v120  = *(void *)(a15 + 8);
  uint64_t v38 = *(void *)(*(void *)(v120 + 24) + 16LL);
  v121  = a13;
  v122  = a10;
  uint64_t v39 = swift_getAssociatedTypeWitness(255LL, a13, a10, &protocol requirements base descriptor for RawRepresentable);
  uint64_t v108 = v38;
  uint64_t v110 = swift_getAssociatedTypeWitness( 0LL,  v38,  v39,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin(v110);
  uint64_t v109 = (char *)&v87 - v40;
  uint64_t v41 = swift_checkMetadataState(0LL, v39);
  v118  = *(void *)(v41 - 8);
  v119  = v41;
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v87 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v42);
  uint64_t v47 = (char *)&v87 - v46;
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v87 - v48;
  uint64_t v50 = sub_100002274(&qword_100406AF8);
  swift_beginAccess(a8 + 16, &v124, 33LL, 0LL);
  uint64_t v51 = *(void *)(a8 + 40);
  uint64_t v52 = *(void *)(a8 + 48);
  sub_1000237C8(a8 + 16, v51);
  uint64_t v53 = sub_1000572E4( &qword_10040BBF0,  &qword_100406AF8,  (uint64_t)&protocol conformance descriptor for TypeLengthValue<A, B>);
  uint64_t v54 = v126;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v50, v50, v53, v51, v52);
  if (v54) {
    return swift_endAccess(&v124);
  }
  uint64_t v88 = v44;
  uint64_t v56 = v47;
  uint64_t v57 = v118;
  swift_endAccess(&v124);
  int v89 = LOWORD(v125[0]);
  v126  = v125[1];
  unint64_t v90 = v125[2];
  dispatch thunk of RawRepresentable.rawValue.getter(v122, v121);
  uint64_t v58 = v119;
  uint64_t v59 = v120;
  char v60 = dispatch thunk of static BinaryInteger.isSigned.getter(v119, v120);
  v123  = v49;
  uint64_t v61 = dispatch thunk of BinaryInteger.bitWidth.getter(v58, v59);
  if ((v60 & 1) == 0)
  {
    uint64_t v67 = v57;
    if (v61 >= 17)
    {
      LOWORD(v125[0])  = v89;
      unint64_t v68 = sub_1000A9B40();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v125, &type metadata for UInt16, v68, v58, v59);
      uint64_t v69 = v123;
      char v70 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v123, v58, *(void *)(*(void *)(v59 + 16) + 8LL));
      v71  = *(void (**)(char *, uint64_t))(v67 + 8);
      v71(v56, v58);
      v71(v69, v58);
      unint64_t v66 = v90;
      if ((v70 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }

    uint64_t v82 = v123;
    unsigned __int16 v83 = dispatch thunk of BinaryInteger._lowWord.getter(v58, v59);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v82, v58);
    v81  = v89 == v83;
LABEL_13:
    unint64_t v66 = v90;
    if (!v81) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }

  if (v61 > 16)
  {
    LOWORD(v125[0])  = v89;
    unint64_t v62 = sub_1000A9B40();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v125, &type metadata for UInt16, v62, v58, v59);
    int v63 = v123;
    char v64 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v123, v58, *(void *)(*(void *)(v59 + 16) + 8LL));
    v65  = *(void (**)(char *, uint64_t))(v57 + 8);
    v65(v56, v58);
    v65(v63, v58);
    unint64_t v66 = v90;
    if ((v64 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_15:
    __asm { BR              X10 }
  }

  v122  = 0LL;
  uint64_t v72 = v108;
  v73  = v110;
  AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness( v108,  v58,  v110,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v75  = v109;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v73,  AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v75, v58, v72);
  uint64_t v76 = v57;
  int v77 = v123;
  LOBYTE(v72)  = dispatch thunk of static Comparable.>= infix(_:_:)( v123,  v56,  v58,  *(void *)(*(void *)(v59 + 32) + 8LL));
  uint64_t v78 = *(void (**)(char *, uint64_t))(v76 + 8);
  v78(v56, v58);
  uint64_t v79 = v88;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v88, v77, v58);
  if ((v72 & 1) != 0)
  {
    unsigned __int16 v80 = dispatch thunk of BinaryInteger._lowWord.getter(v58, v59);
    v78(v79, v58);
    v78(v77, v58);
    v81  = v89 == v80;
    goto LABEL_13;
  }

  v78(v79, v58);
  v78(v77, v58);
  unint64_t v66 = v90;
LABEL_17:
  unint64_t v84 = sub_1000033FC();
  uint64_t v85 = swift_allocError(&type metadata for WiFiError, v84, 0LL, 0LL);
  *(_OWORD *)uint64_t v86 = xmmword_100337020;
  *(_BYTE *)(v86 + 16)  = 2;
  swift_willThrow(v85);
  return sub_1000208D8(v126, v66);
}

uint64_t sub_1001F9228()
{
  if (BYTE6(v5) < v0)
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8)  = 0LL;
    *(_BYTE *)(v9 + 16)  = 2;
    swift_willThrow(v8);
    uint64_t v10 = *(void *)(v6 - 72);
    sub_1000208D8(v10, v5);
    sub_1000208D8(v10, v5);
    (*(void (**)(void, uint64_t))(v2 + 8))(*(void *)(v6 - 192), v4);
    JUMPOUT(0x1001F8E4CLL);
  }

  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16))(v3, *(void *)(v6 - 192), v4);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1001F92F0 + *((int *)qword_1001F9658 + v1)))(v11);
}

void sub_1001F9308()
{
  uint64_t v7 = (int)*(void *)(v6 - 72);
  BOOL v8 = __OFADD__(v7, v4);
  uint64_t v9 = v7 + v4;
  if (!v8)
  {
    uint64_t v10 = v7 + v0;
    if (__OFADD__(v7, v0))
    {
      __break(1u);
    }

    else if (v10 >= v9)
    {
      uint64_t v11 = Data._Representation.subscript.getter(v9, v10, *(void *)(v6 - 72), v5);
      unint64_t v13 = v12;
      uint64_t v14 = *(void *)(v6 - 152);
      v2();
      if (v14)
      {
        sub_1000208D8(v11, v13);
        uint64_t v15 = *(void *)(v6 - 72);
        sub_1000208D8(v15, v5);
        sub_1000208D8(v15, v5);
        uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 272) + 8LL);
        v16(v1, v3);
        v16(*(void *)(v6 - 192), v3);
      }

      else
      {
        (*(void (**)(void, uint64_t))(*(void *)(v6 - 272) + 8LL))(*(void *)(v6 - 192), v3);
        sub_1000208D8(v11, v13);
        uint64_t v17 = *(void *)(v6 - 72);
        sub_1000208D8(v17, v5);
        sub_1000208D8(v17, v5);
      }

      JUMPOUT(0x1001F8E4CLL);
    }

    __break(1u);
    JUMPOUT(0x1001F961CLL);
  }

  __break(1u);
  JUMPOUT(0x1001F931CLL);
}

void sub_1001F93C0()
{
  if (__OFADD__(*(void *)(*(void *)(v1 - 72) + 16LL), v0))
  {
    __break(1u);
    JUMPOUT(0x1001F9628LL);
  }

  JUMPOUT(0x1001F93D0LL);
}

uint64_t sub_1001F9668( uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter(a1);
  if ((v20 & 1) != 0)
  {
    unint64_t v26 = sub_1000033FC();
    uint64_t v27 = swift_allocError(&type metadata for WiFiError, v26, 0LL, 0LL);
    *(_OWORD *)uint64_t v28 = xmmword_100337020;
    *(_BYTE *)(v28 + 16)  = 2;
    return swift_willThrow(v27);
  }

  else
  {
    uint64_t v21 = v19;
    int v30 = a3;
    type metadata accessor for wl_nan_tlv(0LL);
    uint64_t v29 = v22;
    uint64_t v23 = sub_10000AF70( &qword_10040BA28,  (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_tlv,  (uint64_t)&unk_100338620);
    unint64_t v24 = sub_1000BFEF4();
    return sub_1001F8694(a1, a2, (char *)&v30, a4, v21, a6, a7, a8, a9, v29, a10, a11, v23, a12, v24);
  }

uint64_t sub_1001F97C4( uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = sub_100002274(&qword_100405E78);
  uint64_t result = sub_1001F9668(a1, (uint64_t)&v19, a2, a3, a4, (uint64_t)sub_1001F9874, 0LL, a5, a6, v17, a7, a8);
  if (!v8) {
    return v19;
  }
  return result;
}

void sub_1001F9874(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute(0LL);
  __chkstk_darwin(v4);
  sub_100020AFC(a1, a2);
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = type metadata accessor for BinaryDecoder();
  uint64_t v6 = (void *)swift_allocObject(v5, 48LL, 7LL);
  v6[5]  = &_swiftEmptyDictionarySingleton;
  _BYTE v6[2] = a1;
  v6[3]  = a2;
  __asm { BR              X10 }

uint64_t sub_1001F9944(uint64_t a1)
{
  __int128 v2[4] = v1;
  swift_beginAccess(a1, v4 - 104, 1LL, 0LL);
  uint64_t v5 = v2[5];
  void v2[5] = v3;
  uint64_t v6 = swift_bridgeObjectRelease(v5);
  uint64_t v8 = v2[2];
  unint64_t v7 = v2[3];
  *(void *)(v4 - 152)  = v8;
  *(void *)(v4 - 160)  = v8 >> 32;
  *(void *)(v4 - 168)  = _swiftEmptyArrayStorage;
  return ((uint64_t (*)(uint64_t))((char *)sub_1001F99C8 + 4 * byte_10035B90B[v7 >> 62]))(v6);
}

uint64_t sub_1001F99C8@<X0>(uint64_t a1@<X8>)
{
  if (a1 >= *(void *)(v7 - 160))
  {
    uint64_t result = swift_release(v2);
    **(void **)(v7 - 176)  = *(void *)(v7 - 168);
    return result;
  }

  *(void *)(v7 - 120)  = v4;
  *(void *)(v7 - 112)  = sub_10000AF70((unint64_t *)&qword_100405DE8, v5, v6);
  *(void *)(v7 - 144)  = v2;
  swift_retain();
  NANAttribute.init(from:)((void *)(v7 - 144), v3);
  if (!v1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v7 - 168)) & 1) == 0) {
      *(void *)(v7 - 168)  = sub_1000A7958( 0,  *(void *)(*(void *)(v7 - 168) + 16LL) + 1LL,  1,  *(void *)(v7 - 168));
    }
    uint64_t v11 = *(void *)(v7 - 168);
    unint64_t v13 = *(void *)(v11 + 16);
    unint64_t v12 = *(void *)(v11 + 24);
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      *(void *)(v7 - 200)  = v13;
      *(void *)(v7 - 192)  = v14;
      uint64_t v16 = sub_1000A7958(v12 > 1, v13 + 1, 1, *(void *)(v7 - 168));
      unint64_t v13 = *(void *)(v7 - 200);
      unint64_t v14 = *(void *)(v7 - 192);
      *(void *)(v7 - 168)  = v16;
    }

    uint64_t v15 = *(void *)(v7 - 168);
    *(void *)(v15 + 16)  = v14;
    sub_1002007C8( v3,  v15 + ((*(unsigned __int8 *)(*(void *)(v7 - 184) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 184) + 80LL))
    + *(void *)(*(void *)(v7 - 184) + 72LL) * v13);
LABEL_15:
    JUMPOUT(0x1001F99B0LL);
  }

  *(void *)(v7 - 72)  = v1;
  swift_errorRetain(v1);
  uint64_t v8 = sub_100002274((uint64_t *)&unk_10040C5B0);
  if ((swift_dynamicCast(v7 - 144, v7 - 72, v8, &type metadata for WiFiError, 0LL) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v7 - 144);
    int v10 = *(unsigned __int8 *)(v7 - 128);
    if (v10 == 2)
    {
      if ((v9 & 1) != 0)
      {
        swift_errorRelease(v1);
        swift_errorRelease(*(void *)(v7 - 72));
        goto LABEL_15;
      }
    }

    else
    {
      sub_10007030C(v9, *(void *)(v7 - 136), v10);
    }
  }

  swift_bridgeObjectRelease(*(void *)(v7 - 168));
  swift_errorRelease(*(void *)(v7 - 72));
  return swift_release(v2);
}

uint64_t sub_1001F9B7C( uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = sub_1001F9C44(a3);
  if ((v17 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = result;
    uint64_t v19 = sub_100002274(&qword_10040BBE0);
    uint64_t result = sub_1001F8694( a1,  (uint64_t)&v23,  a2,  a3,  v18,  (uint64_t)sub_1001F9C98,  0LL,  a4,  a5,  a6,  v19,  a7,  a8,  a9,  a10);
    if (!v22) {
      return v23;
    }
  }

  return result;
}

uint64_t sub_1001F9C44(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(class metadata base offset for KeyPath + v1 + 8) - 8LL) + 64LL);
    BOOL v5 = __OFADD__(result, v4);
    result += v4;
    if (v5) {
      __break(1u);
    }
  }

  return result;
}

void sub_1001F9C98(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040BBE8);
  uint64_t v5 = sub_100002274(&qword_1004050A8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(v4, v9 + v7, v8 | 7);
  *(_OWORD *)(v10 + 16)  = xmmword_100339900;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = v11 + *(int *)(v5 + 48);
  sub_100020AFC(a1, a2);
  if (qword_100404158 != -1) {
    swift_once(&qword_100404158, sub_1000BD360);
  }
  uint64_t v13 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v14 = sub_1000032DC(v13, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v14, v13);
  *(void *)(v12 + 24)  = &type metadata for Bool;
  *(_BYTE *)uint64_t v12 = 1;
  sub_10000D9B0(v10);
  uint64_t v15 = type metadata accessor for BinaryDecoder();
  uint64_t v16 = (void *)swift_allocObject(v15, 48LL, 7LL);
  v16[5]  = &_swiftEmptyDictionarySingleton;
  _DWORD v16[2] = a1;
  v16[3]  = a2;
  __asm { BR              X11 }

__n128 sub_1001FA044@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v33[0]  = 1282;
  KeyPath  = (uint64_t *)swift_getKeyPath(&unk_10035BE20);
  type metadata accessor for wl_nan_tlv(0LL);
  uint64_t v11 = v10;
  uint64_t v12 = sub_10000AF70( &qword_10040BA28,  (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_tlv,  (uint64_t)&unk_100338620);
  unint64_t v13 = sub_1000BFF38();
  unint64_t v14 = sub_1000BFEF4();
  uint64_t v15 = sub_1001F9B7C((uint64_t)v29, (char *)v33, KeyPath, a1, a2, v11, a3, v12, v13, v14);
  swift_release(KeyPath);
  if (!v4)
  {
    unsigned __int8 v17 = v30;
    char v18 = v31;
    unsigned __int16 v19 = v32;
    uint64_t v20 = *(void *)(v15 + 16);
    __n128 v27 = (__n128)v29[1];
    __int128 v28 = v29[0];
    if (v20)
    {
      uint64_t v21 = (unint64_t *)(v15 + 48);
      do
      {
        if (*((_WORD *)v21 - 8) == 774)
        {
          v33[8]  = v32;
          v33[9]  = v30;
          uint64_t v23 = *(v21 - 1);
          unint64_t v22 = *v21;
          unint64_t v24 = *v21 >> 62;
          sub_100020AFC(v23, *v21);
          swift_bridgeObjectRelease(v15);
          sub_100020AFC(v23, v22);
          sub_100020AFC(v23, v22);
          sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v25 = type metadata accessor for BinaryDecoder();
          unint64_t v26 = (void *)swift_allocObject(v25, 48LL, 7LL);
          v26[5]  = &_swiftEmptyDictionarySingleton;
          void v26[2] = v23;
          v26[3]  = v22;
          __asm { BR              X10 }
        }

        v21 += 3;
        --v20;
      }

      while (v20);
    }

    swift_bridgeObjectRelease(v15);
    __n128 result = v27;
    *(_OWORD *)a4  = v28;
    *(__n128 *)(a4 + 16)  = v27;
    *(_BYTE *)(a4 + 32)  = v17;
    *(_BYTE *)(a4 + 33)  = v18;
    *(_WORD *)(a4 + 34)  = v19;
    *(void *)(a4 + 40)  = _swiftEmptyArrayStorage;
  }

  return result;
}

void sub_1001FA220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v19 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);
  uint64_t v23 = va_arg(va1, void);
  uint64_t v24 = va_arg(va1, void);
  *(void *)(v11 + 32)  = (int)v9;
  swift_beginAccess(a1, va1, 1LL, 0LL);
  uint64_t v12 = *(void *)(v11 + 40);
  *(void *)(v11 + 40)  = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v24 = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  uint64_t v19 = v11;
  sub_100165754((uint64_t *)va);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  sub_1000208D8(v9, v8);
  if (v7)
  {
    sub_1000208D8(v9, v8);
    JUMPOUT(0x1001FA16CLL);
  }

  if ((v14 & 0xC0000000) != 0) {
    sub_100057AA0(v14, v16, v18);
  }
  sub_1000208D8(v9, v8);
  JUMPOUT(0x1001FA150LL);
}

void sub_1001FA2F4(uint64_t a1, uint64_t a2)
{
  if (!__OFADD__(*(void *)(a2 + 32), 2LL)) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1001FA614LL);
}

void sub_1001FA670(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2 >> 62;
  sub_100020AFC(a1, a2);
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = type metadata accessor for BinaryDecoder();
  uint64_t v6 = (void *)swift_allocObject(v5, 48LL, 7LL);
  v6[5]  = &_swiftEmptyDictionarySingleton;
  _BYTE v6[2] = a1;
  v6[3]  = a2;
  __asm { BR              X10 }

uint64_t sub_1001FA700(uint64_t a1)
{
  *(void *)(v5 + 32)  = v6;
  swift_beginAccess(a1, &v17, 1LL, 0LL);
  uint64_t v7 = *(void *)(v5 + 40);
  *(void *)(v5 + 40)  = v3;
  swift_bridgeObjectRelease(v7);
  uint64_t v15 = v4;
  uint64_t v16 = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  uint64_t v14 = v5;
  uint64_t result = sub_100164E58(&v14, v18);
  if (!v2)
  {
    __int128 v9 = v18[9];
    v1[8]  = v18[8];
    void v1[9] = v9;
    v1[10]  = *(_OWORD *)v19;
    *(_OWORD *)((char *)v1 + 169)  = *(_OWORD *)&v19[9];
    __int128 v10 = v18[5];
    __int128 v1[4] = v18[4];
    v1[5]  = v10;
    __int128 v11 = v18[7];
    v1[6]  = v18[6];
    v1[7]  = v11;
    __int128 v12 = v18[1];
    *uint64_t v1 = v18[0];
    v1[1]  = v12;
    __int128 v13 = v18[3];
    v1[2]  = v18[2];
    v1[3]  = v13;
  }

  return result;
}

void sub_1001FA7C0(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2 >> 62;
  sub_100020AFC(a1, a2);
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = type metadata accessor for BinaryDecoder();
  int v6 = (void *)swift_allocObject(v5, 48LL, 7LL);
  v6[5]  = &_swiftEmptyDictionarySingleton;
  _BYTE v6[2] = a1;
  v6[3]  = a2;
  __asm { BR              X10 }

uint64_t sub_1001FA84C(uint64_t a1)
{
  *(void *)(v5 + 32)  = v6;
  swift_beginAccess(a1, &v15, 1LL, 0LL);
  uint64_t v7 = *(void *)(v5 + 40);
  *(void *)(v5 + 40)  = v3;
  swift_bridgeObjectRelease(v7);
  uint64_t v13 = v4;
  uint64_t v14 = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  uint64_t v12 = v5;
  uint64_t result = sub_100165754(&v12);
  if (!v2)
  {
    *(_BYTE *)uint64_t v1 = result;
    *(void *)(v1 + 8)  = v9;
    *(void *)(v1 + 16)  = v10;
    *(void *)(v1 + 24)  = v11;
  }

  return result;
}

void sub_1001FA8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_1001FA930( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char __src, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a10  = BYTE6(v16);
  uint64_t v18 = sub_100211E68(&__src, 2LL);
  unint64_t v20 = v19;
  uint64_t v21 = sub_100211E68(&a10, 2LL);
  unint64_t v23 = v22;
  a14  = v18;
  a15  = v20;
  sub_100020AFC(v18, v20);
  sub_1000FA9C4(v21, v23);
  sub_1000208D8(v21, v23);
  sub_1000208D8(v18, v20);
  uint64_t v24 = a14;
  unint64_t v25 = a15;
  a12  = a14;
  a13  = a15;
  sub_100020AFC(v15, v16);
  sub_100020AFC(v24, v25);
  sub_1000FA9C4(v15, v16);
  sub_1000208D8(v15, v16);
  uint64_t v26 = sub_1000208D8(v24, v25);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1001FAA24 + *((int *)qword_1001FABA0 + v17)))(v26);
}

uint64_t sub_1001FAA34@<X0>(uint64_t a1@<X8>)
{
  if (((BYTE6(v1) + 3) & 0x10000) != 0)
  {
    __break(1u);
    JUMPOUT(0x1001FAB68LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1001FAA80 + *((int *)qword_1001FABB0 + a1)))();
}

uint64_t sub_1001FAA90()
{
  if ((((v0 & 0xFFFC) - BYTE6(v1)) & 0xFFFF0000) != 0)
  {
    __break(1u);
    JUMPOUT(0x1001FAB74LL);
  }

  uint64_t v4 = sub_1000FB1A0((unsigned __int16)((v0 & 0xFFFC) - BYTE6(v1)));
  unint64_t v6 = v5;
  sub_100020AFC(v2, v3);
  sub_1000FA9C4(v4, v6);
  sub_1000208D8(v4, v6);
  sub_1000208D8(v2, v3);
  return v2;
}

void sub_1001FABC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    sub_1001F5620(7233902LL, 0xE300000000000000LL, a1, a2, a3, a4 & 1, a5, a6, *(void *)(a7 + 16));
  }

uint64_t sub_1001FAC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = a1;
  uint64_t v13 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v13 + 16))(v15);
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a2;
  uint64_t v26 = v6;
  int v27 = v12;
  uint64_t v16 = sub_100002274((uint64_t *)&unk_10040C5B0);
  sub_1001E7018( (uint64_t)v15,  (uint64_t)sub_100200848,  (uint64_t)v20,  a4,  v16,  (uint64_t)(&type metadata for () + 1),  (uint64_t)&protocol self-conformance witness table for Error,  (uint64_t)&v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a4);
}

uint64_t sub_1001FAD98(uint64_t a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  __int128 v28 = a2;
  uint64_t v6 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (*(uint64_t (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Data.Deallocator.none(_:), v6);
  uint64_t v11 = Data.Deallocator._deallocator.getter(v10);
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain();
  uint64_t v15 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, 1LL, 0LL, v11, v13, 0LL);
  uint64_t v16 = sub_1001FF400(v15, 1LL);
  unint64_t v18 = v17;
  swift_release(v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a4 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v19 = v29;
    sub_1001F4B34();
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    uint64_t result = sub_1000208D8(v16, v18);
    if (!v19)
    {
      sub_100208D24(v21, v23);
      char v26 = v25;
      uint64_t result = sub_1000208D8(v21, v23);
      *__int128 v28 = v26;
    }
  }

  return result;
}

uint64_t sub_1001FAF88(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  __int128 v28 = a2;
  uint64_t v6 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (*(uint64_t (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Data.Deallocator.none(_:), v6);
  uint64_t v11 = Data.Deallocator._deallocator.getter(v10);
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain();
  uint64_t v15 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, 4LL, 0LL, v11, v13, 0LL);
  uint64_t v16 = sub_1001FF400(v15, 4LL);
  unint64_t v18 = v17;
  swift_release(v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a4 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v19 = v29;
    sub_1001F4B34();
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    uint64_t result = sub_1000208D8(v16, v18);
    if (!v19)
    {
      sub_10020C9E8(v21, v23);
      int v26 = v25;
      uint64_t result = sub_1000208D8(v21, v23);
      *__int128 v28 = v26;
    }
  }

  return result;
}

uint64_t sub_1001FB188( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v41 = a5;
  uint64_t v42 = a3;
  unsigned int v40 = a4;
  uint64_t v39 = a2;
  uint64_t v11 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = *(void *)(a6 - 8);
  uint64_t v16 = *(void *)(v38 + 64);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t))(v12 + 104))( v15,  enum case for Data.Deallocator.none(_:),  v11);
  uint64_t v19 = Data.Deallocator._deallocator.getter(v18);
  uint64_t v21 = v20;
  if (v16)
  {
    uint64_t v22 = v19;
    uint64_t v23 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    swift_retain();
    uint64_t v24 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, v16, 0LL, v22, v21, 0LL);
    uint64_t v25 = sub_1001FF400(v24, v16);
    unint64_t v27 = v26;
    swift_release(v21);
  }

  else
  {
    __int128 v28 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter(v19);
    uint64_t v30 = v29;
    v28(a1, 0LL);
    swift_release(v21);
    swift_release(v30);
    uint64_t v25 = 0LL;
    unint64_t v27 = 0xC000000000000000LL;
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v31 = v45;
  sub_1001FABC0(v40, v25, v27, 1, v41, v43, v44);
  uint64_t v33 = v32;
  unint64_t v35 = v34;
  uint64_t result = sub_1000208D8(v25, v27);
  if (v31)
  {
    *a9  = v31;
  }

  else
  {
    Data.load<A>(as:)(a6);
    sub_1000208D8(v33, v35);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 40))(v39, v17, a6);
  }

  return result;
}

uint64_t sub_1001FB3B0(unsigned int a1, char a2)
{
  char v11 = a2;
  uint64_t v4 = sub_1000EF854((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1001F4B34();
    if (!v2) {
      sub_1000208D8(v8, v9);
    }
    return sub_1000208D8(v6, v7);
  }

  return result;
}

uint64_t sub_1001FB4C0(unsigned int a1, int a2)
{
  int v11 = a2;
  uint64_t v4 = sub_1000EF854((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1001F4B34();
    if (!v2) {
      sub_1000208D8(v8, v9);
    }
    return sub_1000208D8(v6, v7);
  }

  return result;
}

uint64_t sub_1001FB5D0(unsigned int a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = sub_1000EF854((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1001F4B34();
    if (!v2) {
      sub_1000208D8(v8, v9);
    }
    return sub_1000208D8(v6, v7);
  }

  return result;
}

uint64_t sub_1001FB6E0(unsigned int a1, uint64_t a2)
{
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  char v13 = BYTE3(a2);
  char v14 = BYTE4(a2);
  char v15 = BYTE5(a2);
  uint64_t v4 = sub_1000EF854((uint64_t)&v11, (uint64_t)&v16);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1001F4B34();
    if (!v2) {
      sub_1000208D8(v8, v9);
    }
    return sub_1000208D8(v6, v7);
  }

  return result;
}

uint64_t sub_1001FB810(unsigned int a1, int a2)
{
  int v11 = a2;
  uint64_t v4 = sub_1000EF854((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1001F4B34();
    if (!v2) {
      sub_1000208D8(v8, v9);
    }
    return sub_1000208D8(v6, v7);
  }

  return result;
}

uint64_t sub_1001FB930(unsigned int a1, __int16 a2)
{
  __int16 v11 = a2;
  uint64_t v4 = sub_1000EF854((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1001F4B34();
    if (!v2) {
      sub_1000208D8(v8, v9);
    }
    return sub_1000208D8(v6, v7);
  }

  return result;
}

uint64_t sub_1001FBA40(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[2]  = a3;
  void v10[3] = a4;
  v10[4]  = a5;
  v10[5]  = a6;
  int v11 = a1;
  uint64_t v8 = sub_100002274((uint64_t *)&unk_10040C5B0);
  return sub_10016D190( a2,  (uint64_t)sub_10020087C,  (uint64_t)v10,  a4,  v8,  (uint64_t)(&type metadata for () + 1),  (uint64_t)&protocol self-conformance witness table for Error,  (uint64_t)&v12);
}

uint64_t sub_1001FBAD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v14 = sub_1000EF854(a1, a2);
  unint64_t v16 = v15;
  sub_1001FABC0(a4, v14, v15, 1, a5, a7, a8);
  if (v9)
  {
    uint64_t result = sub_1000208D8(v14, v16);
    *a9  = v9;
  }

  else
  {
    sub_1000208D8(v17, v18);
    return sub_1000208D8(v14, v16);
  }

  return result;
}

uint64_t sub_1001FBB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1000FB1A0(*(void *)(*(void *)(a4 - 8) + 64LL));
  unint64_t v14 = v13;
  sub_1001FABC0(a1, v12, v13, 0, a3, a5, a6);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t result = sub_1000208D8(v12, v14);
  if (!v6)
  {
    Data.load<A>(as:)(a4);
    return sub_1000208D8(v16, v18);
  }

  return result;
}

void sub_1001FBC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    __int128 v6 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1  = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16)  = v6;
    *(_WORD *)(a1 + 32)  = *(_WORD *)(a3 + 32);
    if (a4) {
      __asm { BR              X11 }
    }

    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1001FBDB8LL);
}

void sub_1001FBDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    *(void *)a1  = a3;
    *(_WORD *)(a1 + 8)  = a4;
    *(_BYTE *)(a1 + 10)  = BYTE2(a4);
    *(_BYTE *)(a1 + 11)  = BYTE3(a4);
    *(_WORD *)(a1 + 12)  = WORD2(a4);
    if (a5) {
      __asm { BR              X11 }
    }

    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1001FBF7CLL);
}

void sub_1001FBF9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    *(void *)a1  = a3;
    *(void *)(a1 + 8)  = a4;
    *(void *)(a1 + 16)  = a5;
    *(_WORD *)(a1 + 24)  = a6;
    *(_BYTE *)(a1 + 26)  = BYTE2(a6);
    *(_BYTE *)(a1 + 27)  = BYTE3(a6);
    *(_WORD *)(a1 + 28)  = WORD2(a6);
    if (a7) {
      __asm { BR              X11 }
    }

    __asm { BR              X11 }
  }

  __break(1u);
  JUMPOUT(0x1001FC1A0LL);
}

void sub_1001FC1C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __chkstk_darwin(a1);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a9 - 8) + 24LL))(v11, v12, a9);
    if (a4) {
      __asm { BR              X12 }
    }

    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1001FC39CLL);
}

uint64_t sub_1001FC3BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    swift_bridgeObjectRetain_n(a2, 2LL);
    __asm { BR              X8 }
  }

  return 0LL;
}

uint64_t sub_1001FC9C0(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v47 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  char v7 = *(_BYTE *)(a2 + 48);
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  if ((v3 & 2) != 0) {
    uint64_t v8 = 2LL;
  }
  else {
    uint64_t v8 = v3 & 1;
  }
  unint64_t v9 = sub_100071694(3LL, 2LL, v3, v3 & 1);
  uint64_t v10 = v2;
  if (v2) {
    goto LABEL_43;
  }
  char v11 = _s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceO8rawValueAESgSi_tcfC_0(v9);
  if (v11 == 4)
  {
    unint64_t v43 = sub_1000033FC();
    uint64_t v44 = swift_allocError(&type metadata for WiFiError, v43, 0LL, 0LL);
    *(_OWORD *)uint64_t v45 = xmmword_100337020;
    *(_BYTE *)(v45 + 16)  = 2;
    uint64_t v10 = v44;
    swift_willThrow(v44);
LABEL_43:
    swift_unexpectedError(v10, "CoreP2P/NANAvailability.swift", 29LL, 1LL);
    __break(1u);
    swift_unexpectedError(v8, "CoreP2P/NANAvailability.swift", 29LL, 1LL);
    __break(1u);
    goto LABEL_44;
  }

  __int16 v57 = v8 & 0xFCFF | ((((v11 & 0x30) >> 4) & 3) << 8);
  uint64_t result = sub_100071694(8LL, 4LL, v3, (v11 & 0x30) >> 4);
  if (result < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
LABEL_41:
    __break(1u);
  }

  if (result > 0x7FFFFFFF) {
    goto LABEL_41;
  }
  if ((result & 0xF000) != 0)
  {
LABEL_44:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    return result;
  }

  if (v5 >> 60 == 15)
  {
    HIBYTE(v56)  = 0;
    __int16 v13 = v57;
    if ((v7 & 1) == 0)
    {
LABEL_11:
      __int16 v57 = v13 | 0x100;
      uint64_t v14 = *(void *)(v6 + 16);
      if (!v14) {
        return result;
      }
      uint64_t v46 = v6;
      uint64_t v15 = (unsigned __int8 *)(v6 + 32);
      swift_bridgeObjectRetain(v6);
      do
      {
        int v16 = *v15++;
        swift_beginAccess(&v55, v54, 33LL, 0LL);
        HIDWORD(v55)  = v16;
        uint64_t v52 = &type metadata for UnsafeMutableRawBufferPointer;
        uint64_t v53 = &protocol witness table for UnsafeMutableRawBufferPointer;
        uint64_t v50 = &v55;
        uint64_t v51 = v58;
        unint64_t v17 = (const void **)sub_100021104(&v50, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
        unint64_t v18 = *v17;
        if (*v17 && (uint64_t v19 = v17[1], v20 = v19 - v18, v19 != v18))
        {
          if (v20 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v49 = (_BYTE)v19 - (_BYTE)v18;
            memcpy(__dst, v18, v19 - v18);
            uint64_t v21 = *(void *)__dst;
            unint64_t v22 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v49 << 48);
          }

          else
          {
            uint64_t v23 = type metadata accessor for __DataStorage(0LL);
            swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
            uint64_t v24 = __DataStorage.init(bytes:length:)(v18, v20);
            uint64_t v25 = v24;
            if ((unint64_t)v20 >= 0x7FFFFFFF)
            {
              uint64_t v26 = type metadata accessor for Data.RangeReference(0LL);
              uint64_t v21 = swift_allocObject(v26, 32LL, 7LL);
              *(void *)(v21 + 16)  = 0LL;
              *(void *)(v21 + 24)  = v20;
              unint64_t v22 = v25 | 0x8000000000000000LL;
            }

            else
            {
              uint64_t v21 = v20 << 32;
              unint64_t v22 = v24 | 0x4000000000000000LL;
            }
          }
        }

        else
        {
          uint64_t v21 = 0LL;
          unint64_t v22 = 0xC000000000000000LL;
        }

        sub_100002AC4(&v50);
        Data.append(_:)(v21, v22);
        swift_endAccess(v54);
        sub_1000208D8(v21, v22);
        if (v5 >> 60 != 15)
        {
          sub_100020AFC(v4, v5);
          Data.append(_:)(v4, v5);
          sub_100057CA0(v47, v4, v5);
        }

        --v14;
      }

      while (v14);
      return swift_bridgeObjectRelease(v46);
    }
  }

  else
  {
    sub_100020AFC(v4, v5);
    sub_1001FCF94((uint64_t)&v55, v47, v5, v27);
    uint64_t result = sub_100057CA0(v47, v4, v5);
    __int16 v13 = v57;
    if ((v7 & 1) == 0) {
      goto LABEL_11;
    }
  }

  __int16 v57 = v13 | 0x200;
  uint64_t v28 = *(void *)(v6 + 16);
  if (!v28) {
    return result;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v46 = v6;
  uint64_t v29 = (unsigned __int8 *)(v6 + 36);
  do
  {
    int v30 = *(v29 - 4);
    int v31 = *(v29 - 1);
    int v32 = *v29;
    swift_beginAccess(&v55, v54, 33LL, 0LL);
    HIDWORD(v55)  = v30 | (v31 << 16) | (v32 << 24);
    uint64_t v52 = &type metadata for UnsafeMutableRawBufferPointer;
    uint64_t v53 = &protocol witness table for UnsafeMutableRawBufferPointer;
    uint64_t v50 = &v55;
    uint64_t v51 = v58;
    uint64_t v33 = (const void **)sub_100021104(&v50, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
    unint64_t v34 = *v33;
    if (*v33 && (unint64_t v35 = v33[1], v36 = v35 - v34, v35 != v34))
    {
      if (v36 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v49 = (_BYTE)v35 - (_BYTE)v34;
        memcpy(__dst, v34, v35 - v34);
        uint64_t v37 = *(void *)__dst;
        unint64_t v38 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v49 << 48);
      }

      else
      {
        uint64_t v39 = type metadata accessor for __DataStorage(0LL);
        swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
        uint64_t v40 = __DataStorage.init(bytes:length:)(v34, v36);
        uint64_t v41 = v40;
        if ((unint64_t)v36 >= 0x7FFFFFFF)
        {
          uint64_t v42 = type metadata accessor for Data.RangeReference(0LL);
          uint64_t v37 = swift_allocObject(v42, 32LL, 7LL);
          *(void *)(v37 + 16)  = 0LL;
          *(void *)(v37 + 24)  = v36;
          unint64_t v38 = v41 | 0x8000000000000000LL;
        }

        else
        {
          uint64_t v37 = v36 << 32;
          unint64_t v38 = v40 | 0x4000000000000000LL;
        }
      }
    }

    else
    {
      uint64_t v37 = 0LL;
      unint64_t v38 = 0xC000000000000000LL;
    }

    sub_100002AC4(&v50);
    Data.append(_:)(v37, v38);
    swift_endAccess(v54);
    sub_1000208D8(v37, v38);
    if (v5 >> 60 != 15)
    {
      sub_100020AFC(v4, v5);
      Data.append(_:)(v4, v5);
      sub_100057CA0(v47, v4, v5);
    }

    v29 += 10;
    --v28;
  }

  while (v28);
  return swift_bridgeObjectRelease(v46);
}

void sub_1001FCF94(uint64_t a1@<X0>, __int16 a2@<W1>, unint64_t a3@<X3>, unint64_t a4@<X8>)
{
  unint64_t v7 = sub_100071298(6LL, 9LL, a2, a4);
  if ((v7 & 0x8000000000000000LL) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }

  else
  {
    if (v7 < 0x10000)
    {
      *(_WORD *)(a1 + 2)  = v7;
      unint64_t v8 = sub_1000713C8(3uLL, 3LL, a2);
      unint64_t v9 = a3 >> 62;
      char v10 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v8);
      if (v10 == 8)
      {
        *(_BYTE *)(a1 + 14)  = 0;
        __asm { BR              X10 }
      }

      *(_BYTE *)(a1 + 14)  = v10;
      __asm { BR              X10 }
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }

  __break(1u);
  swift_unexpectedError(0LL, "CoreP2P/NANAvailability.swift", 29LL, 1LL);
  __break(1u);
  JUMPOUT(0x1001FD200LL);
}

uint64_t sub_1001FD230( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v14 = sub_1000EFE10(a1, a2);
  unint64_t v16 = v15;
  unint64_t v20 = v15;
  sub_100020AFC(v14, v15);
  sub_100020AFC(a4, a5);
  sub_1000FA9C4(a4, a5);
  sub_1000208D8(a4, a5);
  sub_1000208D8(v14, v16);
  sub_1001F5620(7233902LL, 0xE300000000000000LL, 274LL, v14, v20, 1LL, a6, a7, *(void *)(a8 + 16));
  if (v21)
  {
    uint64_t result = sub_1000208D8(v14, v20);
    *a9  = v21;
  }

  else
  {
    sub_1000208D8(v17, v18);
    return sub_1000208D8(v14, v20);
  }

  return result;
}

uint64_t sub_1001FD344@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  dispatch thunk of Decoder.unkeyedContainer()(v39, v9, v10);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v11 = v40;
  uint64_t v12 = v41;
  sub_1000237C8((uint64_t)v39, v40);
  UnkeyedDecodingContainer.inferredDecode<A>()( v11,  (uint64_t)&type metadata for UInt8,  v12,  (uint64_t)&protocol witness table for UInt8);
  int v42 = v37;
  uint64_t v13 = v40;
  uint64_t v14 = v41;
  sub_1000237C8((uint64_t)v39, v40);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for UInt16,  &type metadata for UInt16,  &protocol witness table for UInt16,  v13,  v14);
  uint64_t v15 = a2;
  uint64_t v36 = (unsigned __int16)v37;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100021104(a1, v16);
  uint64_t v18 = dispatch thunk of Decoder.userInfo.getter(v16, v17);
  if (qword_100404158 != -1) {
    swift_once(&qword_100404158, sub_1000BD360);
  }
  uint64_t v19 = sub_1000032DC(v5, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
  uint64_t v20 = v15;
  if (*(void *)(v18 + 16))
  {
    unint64_t v21 = sub_10001C320((uint64_t)v8);
    uint64_t v22 = v36;
    if ((v23 & 1) != 0)
    {
      sub_100002AE4(*(void *)(v18 + 56) + 32 * v21, (uint64_t)&v37);
    }

    else
    {
      __int128 v37 = 0u;
      __int128 v38 = 0u;
    }
  }

  else
  {
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v22 = v36;
  }

  swift_bridgeObjectRelease(v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*((void *)&v38 + 1))
  {
    char v24 = swift_dynamicCast(&v43, &v37, &type metadata for Any[8], &type metadata for Bool, 6LL);
    char v25 = v42;
    if ((v24 & 1) != 0 && (v43 & 1) != 0)
    {
      uint64_t v26 = v40;
      uint64_t v27 = v41;
      sub_1000237C8((uint64_t)v39, v40);
      UnkeyedDecodingContainer.decodeData(with:)(((_DWORD)v22 + 3) & 0x1FFFC, v26, v27);
      __asm { BR              X11 }
    }
  }

  else
  {
    sub_1000B2F2C((uint64_t)&v37);
    char v25 = v42;
  }

  uint64_t v29 = v40;
  uint64_t v30 = v41;
  sub_1000237C8((uint64_t)v39, v40);
  uint64_t v31 = UnkeyedDecodingContainer.decodeData(with:)(v22, v29, v30);
  unint64_t v33 = v32;
  sub_100002AC4(v39);
  *(_BYTE *)uint64_t v20 = v25;
  *(void *)(v20 + 8)  = v31;
  *(void *)(v20 + 16)  = v33;
  sub_100020AFC(v31, v33);
  sub_100002AC4(a1);
  return sub_1000208D8(v31, v33);
}

uint64_t sub_1001FD714@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  dispatch thunk of Decoder.unkeyedContainer()(v39, v9, v10);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v11 = v40;
  uint64_t v12 = v41;
  sub_1000237C8((uint64_t)v39, v40);
  UnkeyedDecodingContainer.inferredDecode<A>()( v11,  (uint64_t)&type metadata for UInt16,  v12,  (uint64_t)&protocol witness table for UInt16);
  int v42 = (unsigned __int16)v37;
  uint64_t v13 = v40;
  uint64_t v14 = v41;
  sub_1000237C8((uint64_t)v39, v40);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for UInt16,  &type metadata for UInt16,  &protocol witness table for UInt16,  v13,  v14);
  uint64_t v15 = a2;
  uint64_t v36 = (unsigned __int16)v37;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100021104(a1, v16);
  uint64_t v18 = dispatch thunk of Decoder.userInfo.getter(v16, v17);
  if (qword_100404158 != -1) {
    swift_once(&qword_100404158, sub_1000BD360);
  }
  uint64_t v19 = sub_1000032DC(v5, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
  uint64_t v20 = v15;
  if (*(void *)(v18 + 16))
  {
    unint64_t v21 = sub_10001C320((uint64_t)v8);
    uint64_t v22 = v36;
    if ((v23 & 1) != 0)
    {
      sub_100002AE4(*(void *)(v18 + 56) + 32 * v21, (uint64_t)&v37);
    }

    else
    {
      __int128 v37 = 0u;
      __int128 v38 = 0u;
    }
  }

  else
  {
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v22 = v36;
  }

  swift_bridgeObjectRelease(v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*((void *)&v38 + 1))
  {
    char v24 = swift_dynamicCast(&v43, &v37, &type metadata for Any[8], &type metadata for Bool, 6LL);
    __int16 v25 = v42;
    if ((v24 & 1) != 0 && (v43 & 1) != 0)
    {
      uint64_t v26 = v40;
      uint64_t v27 = v41;
      sub_1000237C8((uint64_t)v39, v40);
      UnkeyedDecodingContainer.decodeData(with:)(((_DWORD)v22 + 3) & 0x1FFFC, v26, v27);
      __asm { BR              X11 }
    }
  }

  else
  {
    sub_1000B2F2C((uint64_t)&v37);
    __int16 v25 = v42;
  }

  uint64_t v29 = v40;
  uint64_t v30 = v41;
  sub_1000237C8((uint64_t)v39, v40);
  uint64_t v31 = UnkeyedDecodingContainer.decodeData(with:)(v22, v29, v30);
  unint64_t v33 = v32;
  sub_100002AC4(v39);
  *(_WORD *)uint64_t v20 = v25;
  *(void *)(v20 + 8)  = v31;
  *(void *)(v20 + 16)  = v33;
  sub_100020AFC(v31, v33);
  sub_100002AC4(a1);
  return sub_1000208D8(v31, v33);
}

uint64_t sub_1001FDAE4(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v14[0]  = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  dispatch thunk of Encoder.unkeyedContainer()(v11, v6, v7);
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  sub_1000237C8((uint64_t)v11, v12);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v14,  &type metadata for UInt8,  &protocol witness table for UInt8,  v8,  v9);
  if (!v4) {
    __asm { BR              X11 }
  }

  return sub_100002AC4(v11);
}

uint64_t sub_1001FDC8C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

uint64_t sub_1001FDD04( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v57[3]  = a4;
  if (a1 < 0) {
    goto LABEL_44;
  }
  uint64_t v10 = swift_allocObject(&unk_1003F0678, 24LL, 7LL);
  *(void *)(v10 + 16)  = _swiftEmptyArrayStorage;
  uint64_t v54 = swift_allocObject(&unk_1003F06A0, 24LL, 7LL);
  *(void *)(v54 + 16)  = 15LL;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7LL;
    if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v33 = 11LL;
    }
    sub_1001FE1A0(v33 | (v11 << 16), v54, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease(a6);
    uint64_t v14 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    uint64_t v34 = v54;
LABEL_41:
    swift_release(v34);
    return (uint64_t)v14;
  }

  uint64_t v49 = a1;
  uint64_t v50 = v10;
  uint64_t v13 = 7LL;
  if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  uint64_t v48 = v13 | (v12 << 16);
  unint64_t v55 = 4 * v12;
  uint64_t v14 = _swiftEmptyArrayStorage;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  unint64_t v17 = 15LL;
  while (1)
  {
    uint64_t v18 = String.subscript.getter(v15, a5, a6);
    uint64_t v20 = v19;
    v57[0]  = v18;
    v57[1]  = v19;
    char v21 = a3(v57);
    if (v6)
    {
      swift_release(v50);
      swift_release(v54);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }

    char v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0) {
      break;
    }
    unint64_t v15 = String.index(after:)(v15, a5, a6);
LABEL_11:
    if (v55 == v15 >> 14) {
      goto LABEL_31;
    }
  }

  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v15 = String.index(after:)(v15, a5, a6);
    *(void *)(v54 + 16)  = v15;
    unint64_t v16 = v15;
    unint64_t v17 = v15;
    goto LABEL_11;
  }

  if (v15 >> 14 < v16 >> 14) {
    goto LABEL_43;
  }
  uint64_t v23 = String.subscript.getter(v16, v15, a5, a6);
  uint64_t v51 = v24;
  uint64_t v52 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
    uint64_t v14 = sub_1000A7A78(0LL, v14[2] + 1LL, 1, v14);
  }
  unint64_t v30 = v14[2];
  unint64_t v29 = v14[3];
  if (v30 >= v29 >> 1) {
    uint64_t v14 = sub_1000A7A78((void *)(v29 > 1), v30 + 1, 1, v14);
  }
  v14[2]  = v30 + 1;
  uint64_t v31 = &v14[4 * v30];
  v31[4]  = v52;
  v31[5]  = v26;
  v31[6]  = v28;
  v31[7]  = v51;
  *(void *)(v50 + 16)  = v14;
  uint64_t v32 = String.index(after:)(v15, a5, a6);
  unint64_t v15 = v32;
  *(void *)(v54 + 16)  = v32;
  if (v14[2] != v49)
  {
    unint64_t v16 = v32;
    unint64_t v17 = v32;
    goto LABEL_11;
  }

  unint64_t v17 = v32;
  unint64_t v16 = v32;
LABEL_31:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    uint64_t v35 = v50;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v35);
    uint64_t v34 = v54;
    goto LABEL_41;
  }

  if (v55 >= v17 >> 14)
  {
    uint64_t v36 = String.subscript.getter(v17, v48, a5, a6);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
      uint64_t v14 = sub_1000A7A78(0LL, v14[2] + 1LL, 1, v14);
    }
    unint64_t v44 = v14[2];
    unint64_t v43 = v14[3];
    if (v44 >= v43 >> 1) {
      uint64_t v14 = sub_1000A7A78((void *)(v43 > 1), v44 + 1, 1, v14);
    }
    v14[2]  = v44 + 1;
    uint64_t v45 = &v14[4 * v44];
    v45[4]  = v36;
    v45[5]  = v38;
    v45[6]  = v40;
    v45[7]  = v42;
    uint64_t v35 = v50;
    *(void *)(v50 + 16)  = v14;
    goto LABEL_40;
  }

uint64_t sub_1001FE1A0( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = *(void *)(a2 + 16);
  int v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1) {
    return v8 ^ 1u;
  }
  if (a1 >> 14 >= v7 >> 14)
  {
    uint64_t v10 = String.subscript.getter(v7, a1, a5, a6);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    unint64_t v17 = *(void **)(a4 + 16);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v17);
    *(void *)(a4 + 16)  = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v17 = sub_1000A7A78(0LL, v17[2] + 1LL, 1, v17);
      *(void *)(a4 + 16)  = v17;
    }

    unint64_t v20 = v17[2];
    unint64_t v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      unint64_t v17 = sub_1000A7A78((void *)(v19 > 1), v20 + 1, 1, v17);
      *(void *)(a4 + 16)  = v17;
    }

    void v17[2] = v20 + 1;
    char v21 = &v17[4 * v20];
    v21[4]  = v10;
    v21[5]  = v12;
    v21[6]  = v14;
    v21[7]  = v16;
    return v8 ^ 1u;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
  __break(1u);
  return result;
}

void sub_1001FE2F8()
{
  __asm { BR              X11 }

void *sub_1001FE358@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v8 = v4;
  LOWORD(v9)  = a1;
  BYTE2(v9)  = BYTE2(a1);
  HIBYTE(v9)  = BYTE3(a1);
  uint64_t v10 = BYTE4(a1);
  uint64_t v11 = BYTE5(a1);
  uint64_t v12 = BYTE6(a1);
  uint64_t result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v7;
  }
  uint64_t v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *uint64_t v1 = v8;
  v1[1]  = v6;
  return result;
}

void sub_1001FE5E8(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_1001FE64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&loc_1001FE698
                                                            + dword_1001FE98C[*(void *)(v3 + 8) >> 62]))( a1,  a2,  a3);
}

uint64_t sub_1001FE6A8()
{
  uint64_t result = sub_1000208D8(v0, v3);
  *uint64_t v1 = v5;
  v1[1]  = v6 | ((unint64_t)v7 << 32) | ((unint64_t)v8 << 40) | ((unint64_t)v9 << 48);
  return result;
}

void sub_1001FE99C()
{
  __asm { BR              X12 }

uint64_t sub_1001FE9FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  LOWORD(v7)  = a1;
  BYTE2(v7)  = BYTE2(a1);
  HIBYTE(v7)  = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  uint64_t result = v2(&v6, (char *)&v6 + BYTE6(a1));
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *unint64_t v3 = v6;
  v3[1]  = v5;
  return result;
}

void sub_1001FEBD0()
{
  __asm { BR              X11 }

void *sub_1001FEC30@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  void *v12;
  unsigned int v7 = v4;
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  unsigned __int8 v9 = BYTE4(a1);
  unsigned __int8 v10 = BYTE5(a1);
  uint64_t v11 = BYTE6(a1);
  uint64_t result = v3(&v12, &v7, (char *)&v7 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v12;
  }
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *uint64_t v1 = v7;
  v1[1]  = v6;
  return result;
}

void sub_1001FEEB8(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = __DataStorage._bytes.getter();
    if (!v7)
    {
      __break(1u);
      JUMPOUT(0x1001FEFF4LL);
    }

    uint64_t v8 = v7;
    uint64_t v9 = __DataStorage._offset.getter();
    if (!__OFSUB__(v6, v9))
    {
      uint64_t v10 = v8 + v6 - v9;
      __DataStorage._length.getter();
      __int16 v11 = *(_WORD *)(a2 + 10);
      __int16 v12 = *(_WORD *)(a2 + 20);
      uint64_t v13 = *(void *)(a2 + 12);
      uint64_t v14 = *(void *)(a2 + 2);
      char v15 = *(_BYTE *)(a2 + 22);
      *(_WORD *)uint64_t v10 = *(_WORD *)a2;
      *(void *)(v10 + 2)  = v14;
      *(_WORD *)(v10 + 10)  = v11;
      *(void *)(v10 + 12)  = v13;
      *(_WORD *)(v10 + 20)  = v12;
      *(_BYTE *)(v10 + 22)  = v15;
      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x1001FEFE8LL);
}

void sub_1001FF004(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v6 = v5;
  uint64_t v7 = __DataStorage._offset.getter();
  uint64_t v8 = v3 - v7;
  if (__OFSUB__(v3, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v9 = v4 - v3;
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  a1(v6 + v8, v6 + v8 + v11);
}

char *sub_1001FF0AC(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

char *sub_1001FF158(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_1001FF200(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1001FF220(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_1001FF2B0(unint64_t a1, unint64_t a2, void *a3, uint64_t *a4)
{
  return sub_1001E754C(a1, a2, a3, *a4);
}

uint64_t sub_1001FF2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1001F6320(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t sub_1001FF2E4(uint64_t *a1)
{
  return sub_100200914(a1) & 1;
}

uint64_t sub_1001FF2FC(void *a1)
{
  return sub_1001F6554(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_1001FF31C(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  BOOL v4 = *a1 == 0x7478655F747665LL && v2 == 0xE700000000000000LL;
  if (!v4
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x7478655F747665LL, 0xE700000000000000LL, *a1, v2, 0LL) & 1) == 0)
  {
    return 1LL;
  }

  swift_beginAccess(v3 + 80, v6, 1LL, 0LL);
  uint64_t result = 0LL;
  *(void *)(v3 + 80) |= 1uLL;
  return result;
}

void sub_1001FF3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_1001FF400(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!a2)
  {
    swift_release(result);
    return 0LL;
  }

  if (a2 > 14)
  {
    uint64_t v10 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t v4 = swift_allocObject(v10, 32LL, 7LL);
    *(void *)(v4 + 16)  = 0LL;
    *(void *)(v4 + 24)  = a2;
    return v4;
  }

  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v5)
    {
LABEL_10:
      uint64_t v6 = __DataStorage._length.getter();
      if (v6 >= a2) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = v6;
      }
      uint64_t v8 = &v5[v7];
      if (v5) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0LL;
      }
      uint64_t v4 = sub_1000FAED4(v5, v9);
      swift_release(v2);
      return v4;
    }

    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0LL, result))
    {
      v5 -= result;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1001FF4E4(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (v1) {
    return sub_100002AC4(a1);
  }
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  sub_1000237C8((uint64_t)v13, v14);
  uint64_t v7 = UnkeyedDecodingContainer.decodeData(with:)(48LL, v5, v6);
  unint64_t v9 = v8;
  sub_100209058(v7, v8);
  sub_1000208D8(v7, v9);
  sub_100002AC4(v13);
  sub_100002AC4(a1);
  return bswap64(v12 | ((unint64_t)v11 << 32));
}

void sub_1001FF5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }

void sub_1001FF798( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v26 = a7;
  uint64_t v27 = a4;
  uint64_t v23 = a6;
  uint64_t v24 = a1;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  uint64_t v21 = a9;
  uint64_t v22 = a10;
  uint64_t v30 = a11;
  uint64_t v20 = *(void *)(*(void *)(*(void *)(a11 + 8) + 24LL) + 16LL);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness( 0LL,  v20,  a8,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v14 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v29 = *(void *)(a8 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  v19[2]  = (char *)v19 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  __chkstk_darwin(v18);
  __asm { BR              X9 }

uint64_t sub_1001FF8E4()
{
  *(void *)(v10 - 120)  = BYTE6(v2);
  *(void *)(v10 - 192)  = v0;
  *(void *)(v10 - 184)  = v2;
  dispatch thunk of static FixedWidthInteger.max.getter(v3, *(void *)(v10 - 72));
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v3, v1) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(v3, v1) < 64)
    {
      uint64_t v11 = dispatch thunk of BinaryInteger._lowWord.getter(v3, v1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 104) + 8LL))(v9, v3);
LABEL_19:
      BOOL v22 = v11 < *(void *)(v10 - 120);
LABEL_20:
      uint64_t v17 = *(void *)(v10 - 112);
      if (v22) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }

    *(void *)(v10 - 96)  = *(void *)(v10 - 120);
    unint64_t v18 = sub_100024970();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v10 - 96, &type metadata for Int, v18, v3, v1);
    char v19 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v8, v3, *(void *)(*(void *)(v1 + 32) + 8LL));
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 104) + 8LL);
    v20(v8, v3);
    goto LABEL_16;
  }

  *(void *)(v10 - 216)  = v6;
  char v12 = dispatch thunk of static BinaryInteger.isSigned.getter(v3, v1);
  uint64_t v13 = dispatch thunk of BinaryInteger.bitWidth.getter(v3, v1);
  if ((v12 & 1) != 0)
  {
    if (v13 <= 64)
    {
      uint64_t v23 = *(void *)(v10 - 200);
      AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness( v23,  v3,  v7,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v7,  AssociatedConformanceWitness);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v5, v3, v23);
      char v25 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v8, v3, *(void *)(*(void *)(v1 + 32) + 8LL));
      uint64_t v26 = *(void *)(v10 - 104);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v27(v8, v3);
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      uint64_t v29 = *(void *)(v10 - 208);
      v28(v29, v9, v3);
      if ((v25 & 1) != 0)
      {
        v27(v29, v3);
        v27(v9, v3);
        goto LABEL_22;
      }

      uint64_t v11 = dispatch thunk of BinaryInteger._lowWord.getter(v3, v1);
      v27(v29, v3);
      v27(v9, v3);
      goto LABEL_19;
    }

    *(void *)(v10 - 96)  = *(void *)(v10 - 120);
    unint64_t v14 = sub_100024970();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v10 - 96, &type metadata for Int, v14, v3, v1);
    char v15 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v8, v3, *(void *)(*(void *)(v1 + 32) + 8LL));
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 104) + 8LL);
    v16(v8, v3);
    v16(v9, v3);
    uint64_t v17 = *(void *)(v10 - 112);
    if ((v15 & 1) != 0) {
      goto LABEL_22;
    }
  }

  else
  {
    if (v13 < 64)
    {
      uint64_t v21 = dispatch thunk of BinaryInteger._lowWord.getter(v3, v1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 104) + 8LL))(v9, v3);
      BOOL v22 = v21 < *(void *)(v10 - 120);
      goto LABEL_20;
    }

    uint64_t v30 = *(void *)(v10 - 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v4, v9, v3);
    uint64_t v31 = *(void *)(v10 - 120);
    *(void *)(v10 - 96)  = v31;
    if (v31 > 0)
    {
      unint64_t v32 = sub_100024970();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v10 - 96, &type metadata for Int, v32, v3, v1);
      char v19 = dispatch thunk of static Comparable.< infix(_:_:)(v4, v8, v3, *(void *)(*(void *)(v1 + 32) + 8LL));
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v20(v8, v3);
      v20(v4, v3);
LABEL_16:
      v20(v9, v3);
      uint64_t v17 = *(void *)(v10 - 112);
      if ((v19 & 1) != 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }

    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v37(v4, v3);
    v37(v9, v3);
    uint64_t v17 = *(void *)(v10 - 112);
  }