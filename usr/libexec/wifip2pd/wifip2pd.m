int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  void aBlock[6];
  v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v7 = type metadata accessor for DispatchQoS(0LL);
  v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((static Sandbox.check()() & 1) != 0)
  {
    v11 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    aBlock[4] = sub_100001F4C;
    aBlock[5] = 0LL;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000021F0;
    aBlock[3] = &unk_1003D30D0;
    v12 = _Block_copy(aBlock);
    v13 = v11;
    static DispatchQoS.unspecified.getter(v13);
    v19 = _swiftEmptyArrayStorage;
    v14 = sub_100002234();
    v15 = sub_100002274((uint64_t *)&unk_1004052A0);
    v16 = sub_1000022B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
    _Block_release(v12);

    sub_100002B38(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    dispatch_main();
  }

  exit(1);
}

uint64_t sub_100001F4C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 1953066601LL, 0xE400000000000000LL);
  v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_100002B30(12LL);
    uint64_t v6 = sub_100002B30(32LL);
    *(_DWORD *)v5 = 136315138;
    IONotificationPortRef v21 = (IONotificationPortRef)v6;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"WiFiP2P-730.28 Nov 10 2024 02:11:32");
    unint64_t v9 = v8;
    uint64_t v20 = sub_10000235C(v7, v8, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "WiFiP2P version: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    sub_100002B24(v6);
    sub_100002B24((uint64_t)v5);
  }

  uint64_t v10 = type metadata accessor for AppleDevice(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  IONotificationPortRef v21 = AppleDevice.init()();
  v11 = (void (__cdecl *)(const void *))sub_100002274(&qword_1004040A0);
  swift_allocObject(v11, 80LL, 7LL);
  IONotificationPortRef v12 = (IONotificationPortRef)P2PMain.init(device:)((uint64_t)&v21);
  if (!v12)
  {
    v17 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)sub_100002B30(2LL);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "WiFiP2P initialization failed", v19, 2u);
      sub_100002B24((uint64_t)v19);
    }

    exit(1);
  }

  IONotificationPortRef v13 = v12;
  IONotificationPortRef v21 = v12;
  AppleDevice.attachForDriverDiscovery<A>(_:)( (uint64_t)&v21,  v11,  (CFStringRef (__cdecl *)(const void *))&protocol witness table for P2PMain<A>);
  v14 = *(uint64_t (**)(void (*)(), IONotificationPortRef))(*(void *)v13 + 184LL);
  swift_retain();
  uint64_t v15 = v14(sub_10000233C, v13);
  (*(void (**)(uint64_t))(*(void *)v13 + 208LL))(v15);
  swift_release(v13);
  return sub_100002B38(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
}

uint64_t sub_1000021F0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10000221C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000222C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100002234()
{
  unint64_t result = qword_100408950;
  if (!qword_100408950)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100408950);
  }

  return result;
}

uint64_t sub_100002274(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1000022B4()
{
  unint64_t result = qword_100408960;
  if (!qword_100408960)
  {
    uint64_t v1 = sub_1000022F8((uint64_t *)&unk_1004052A0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100408960);
  }

  return result;
}

uint64_t sub_1000022F8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

void sub_10000233C()
{
}

uint64_t sub_10000235C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000242C(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100002AE4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100002AE4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100002AC4(v12);
  return v7;
}

void *sub_10000242C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100002580((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_100002644(a5, a6);
    *a1 = v11;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100002580(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100002644(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1000026D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1000028AC(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000028AC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1000026D8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  v5 = sub_100002848(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  2,  1122LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

void *sub_100002848(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100002274(&qword_1004040A8);
  v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1000028AC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274(&qword_1004040A8);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  IONotificationPortRef v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100002A44(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_100002980(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100002980(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_100002A44(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

uint64_t sub_100002AC4(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100002AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100002B24(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_100002B30(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_100002B38@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t NANDriverCapabilities.supportedBands.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t IEEE80211InformationElement.ExtendedRSNCapability.rawValue.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*NANBitmap.Channel.operatingClass.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t IEEE80211InformationElement.RSNCapability.pairwiseCipherSuites.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t NANDiscoveryBeaconTransmissionSchedule.entries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 8));
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*NANBitmap.Time.bitmapData.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.mode.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NANInternetSharingStatistics.submitted.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*NANBeacon.Metadata.rate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.numberOfAntennas.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t NANDriverCapabilities.numberOfAntennas.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*NANDriverCapabilities.numberOfAntennas.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumChannelSwitchTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 32);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t type metadata accessor for NANDriverCapabilities(uint64_t a1)
{
  uint64_t result = qword_100404548;
  if (!qword_100404548) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANDriverCapabilities);
  }
  return result;
}

uint64_t NANDriverCapabilities.maximumChannelSwitchTime.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 32);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*NANDriverCapabilities.maximumChannelSwitchTime.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumPublisherCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 36));
}

uint64_t NANDriverCapabilities.maximumPublisherCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities(0LL);
  *(void *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumPublisherCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumSubscriberCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 40));
}

uint64_t NANDriverCapabilities.maximumSubscriberCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities(0LL);
  *(void *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumSubscriberCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumPeerEntries.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 44));
}

uint64_t NANDriverCapabilities.maximumPeerEntries.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities(0LL);
  *(void *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumPeerEntries.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumDatapathSessionCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 48));
}

uint64_t NANDriverCapabilities.maximumDatapathSessionCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities(0LL);
  *(void *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumDatapathSessionCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumAvailabilityMaps.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 52));
}

uint64_t NANDriverCapabilities.maximumAvailabilityMaps.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities(0LL);
  *(void *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumAvailabilityMaps.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumInterfacesSupported.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 56));
}

uint64_t NANDriverCapabilities.maximumInterfacesSupported.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities(0LL);
  *(void *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumInterfacesSupported.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0LL) + 60));
}

uint64_t NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.setter(char a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.init(supportedBands:supportedCipherSuites:mode:numberOfAntennas:maximumChannelSwitchTime:maximumPublisherCount:maximumSubscriberCount:maximumPeerEntries:maximumDatapathSessionCount:maximumAvailabilityMaps:maximumInterfacesSupported:unicastInsecureDatapathRestoreSupported:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = a4;
  v17 = (int *)type metadata accessor for NANDriverCapabilities(0LL);
  uint64_t v18 = a9 + v17[8];
  uint64_t v19 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL))(v18, a5, v19);
  *(void *)(a9 + v17[9]) = a6;
  *(void *)(a9 + v17[10]) = a7;
  *(void *)(a9 + v17[11]) = a8;
  *(void *)(a9 + v17[12]) = a10;
  *(void *)(a9 + v17[13]) = a11;
  *(void *)(a9 + v17[14]) = a12;
  *(_BYTE *)(a9 + v17[15]) = a13;
  return result;
}

uint64_t sub_100003104()
{
  uint64_t v0 = (int *)type metadata accessor for NANDriverCapabilities(0LL);
  sub_10000B0D0((uint64_t)v0, static NANDriverCapabilities.defaultCapabilities);
  uint64_t v1 = sub_1000032DC((uint64_t)v0, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
  uint64_t v2 = sub_100002274(&qword_100404AE0);
  uint64_t inited = swift_initStackObject(v2, v12);
  *(void *)(inited + 24) = 4LL;
  *(_BYTE *)(inited + 32) = sub_1001A05B0(1LL, 0LL, 4LL);
  unsigned __int8 v4 = sub_1001A05B0(1LL, 4LL, 4LL);
  *(_BYTE *)(inited + 33) = v4;
  char v5 = *(_BYTE *)(inited + 32);
  else {
    unsigned __int8 v6 = 0;
  }
  char v7 = v6 | v5;
  swift_setDeallocating(inited);
  int64_t v8 = (void *)(v1 + v0[8]);
  *int64_t v8 = 1LL;
  uint64_t v9 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL))(v8, v9, v10);
  *(void *)uint64_t v1 = &off_1003D31C8;
  *(void *)(v1 + 8) = &off_1003D31F0;
  *(_BYTE *)(v1 + 16) = 1;
  *(_BYTE *)(v1 + 17) = v7;
  *(void *)(v1 + v0[9]) = 4LL;
  *(void *)(v1 + v0[10]) = 4LL;
  *(void *)(v1 + v0[11]) = 8LL;
  *(void *)(v1 + v0[12]) = 8LL;
  *(void *)(v1 + v0[13]) = 1LL;
  *(void *)(v1 + v0[14]) = 1LL;
  *(_BYTE *)(v1 + v0[15]) = 1;
  return result;
}

uint64_t NANDriverCapabilities.defaultCapabilities.unsafeMutableAddressor()
{
  if (qword_1004040B0 != -1) {
    swift_once(&qword_1004040B0, sub_100003104);
  }
  uint64_t v0 = type metadata accessor for NANDriverCapabilities(0LL);
  return sub_1000032DC(v0, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
}

uint64_t sub_1000032DC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t static NANDriverCapabilities.defaultCapabilities.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1004040B0 != -1) {
    swift_once(&qword_1004040B0, sub_100003104);
  }
  uint64_t v2 = type metadata accessor for NANDriverCapabilities(0LL);
  uint64_t v3 = sub_1000032DC(v2, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
  return sub_100003350(v3, a1);
}

uint64_t sub_100003350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANDriverCapabilities(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t static OUI.size.getter()
{
  return 3LL;
}

uint64_t static InfraStatistics.infraRealtimePacketThreshold.getter()
{
  return 5LL;
}

uint64_t NANWiFiDriver.generateStatisticsReport(for:)()
{
  unint64_t v0 = sub_1000033FC();
  uint64_t v1 = swift_allocError(&type metadata for WiFiError, v0, 0LL, 0LL);
  *(_OWORD *)uint64_t v2 = xmmword_100337000;
  *(_BYTE *)(v2 + 16) = 1;
  return swift_willThrow(v1);
}

unint64_t sub_1000033FC()
{
  unint64_t result = qword_1004052B0;
  if (!qword_1004052B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WiFiError, &type metadata for WiFiError);
    atomic_store(result, (unint64_t *)&qword_1004052B0);
  }

  return result;
}

uint64_t static UInt8.invalid.getter()
{
  return 0LL;
}

uint64_t DeviceDriver<>.startSharingInternet(from:to:useBridging:errorHandler:completionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = *(void *)(a10 - 8);
  uint64_t v15 = __chkstk_darwin(a1);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v42 = *(void *)(v20 - 8);
  uint64_t v43 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(*(void *)(a11 + 8) + 8LL))(a10);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v24 = v23(v19, v11, a10);
  v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc(12LL, -1LL);
    v41 = a6;
    v28 = (uint8_t *)v27;
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v39;
    uint64_t v40 = a7;
    *(_DWORD *)v28 = 136315138;
    v38 = v28 + 4;
    v23(v17, (uint64_t)v19, a10);
    uint64_t v29 = String.init<A>(describing:)(v17, a10);
    unint64_t v31 = v30;
    uint64_t v44 = sub_10000235C(v29, v30, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, a10);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Unable to create a requester internet sharing policy because %s doesn't support it",  v28,  0xCu);
    uint64_t v32 = v39;
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    v33 = v28;
    a6 = v41;
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, a10);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v43);
  unint64_t v34 = sub_1000033FC();
  uint64_t v35 = swift_allocError(&type metadata for WiFiError, v34, 0LL, 0LL);
  *(_OWORD *)uint64_t v36 = xmmword_100337000;
  *(_BYTE *)(v36 + 16) = 1;
  a6();
  return swift_errorRelease(v35);
}

uint64_t DeviceDriver<>.startRequestingInternet(on:linkTestInterval:linkTestFaultHandler:errorHandler:completionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = *(void *)(a10 - 8);
  uint64_t v15 = __chkstk_darwin(a1);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v42 = *(void *)(v20 - 8);
  uint64_t v43 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(*(void *)(a11 + 8) + 8LL))(a10);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v24 = v23(v19, v11, a10);
  v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc(12LL, -1LL);
    v41 = a6;
    v28 = (uint8_t *)v27;
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v39;
    uint64_t v40 = a7;
    *(_DWORD *)v28 = 136315138;
    v38 = v28 + 4;
    v23(v17, (uint64_t)v19, a10);
    uint64_t v29 = String.init<A>(describing:)(v17, a10);
    unint64_t v31 = v30;
    uint64_t v44 = sub_10000235C(v29, v30, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, a10);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Unable to create a provider internet sharing policy because %s doesn't support it",  v28,  0xCu);
    uint64_t v32 = v39;
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    v33 = v28;
    a6 = v41;
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, a10);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v43);
  unint64_t v34 = sub_1000033FC();
  uint64_t v35 = swift_allocError(&type metadata for WiFiError, v34, 0LL, 0LL);
  *(_OWORD *)uint64_t v36 = xmmword_100337000;
  *(_BYTE *)(v36 + 16) = 1;
  a6();
  return swift_errorRelease(v35);
}

{
  uint64_t v11;
  uint64_t v12;
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v24)(uint64_t, uint64_t, char);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t (**v31)(uint64_t, uint64_t, char);
  uint64_t v32;
  uint64_t v33;
  void v36[3];
  uint64_t v37;
  void v38[3];
  uint64_t v39;
  char v40[32];
  size_t v12 = v11;
  uint64_t v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a11 + 56);
  v16(v36, a10, a11);
  v17 = v36[0];
  uint64_t v18 = v36[0] + 72LL;
  swift_beginAccess(v36[0] + 72LL, v40, 0LL, 0LL);
  sub_1000226B0(v18, (uint64_t)v38, &qword_100405280);
  swift_release(v17);
  uint64_t v19 = v39;
  sub_1000225EC((uint64_t)v38, &qword_100405280);
  if (v19)
  {
    uint64_t v20 = sub_1000033FC();
    uint64_t v21 = swift_allocError(&type metadata for WiFiError, v20, 0LL, 0LL);
    *(_OWORD *)v22 = xmmword_10033A9A0;
    *(_BYTE *)(v22 + 16) = 0;
    a6();
    return swift_errorRelease(v21);
  }

  else
  {
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject(&unk_1003DD9E0, 48LL, 7LL);
    *((void *)v24 + 2) = a6;
    *((void *)v24 + 3) = a7;
    *((void *)v24 + 4) = a8;
    *((void *)v24 + 5) = a9;
    v25 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
    os_log_type_t v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x74656E7265746E69LL,  0xEF676E6972616853LL);
    uint64_t v27 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    v28 = type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0LL);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    *(void *)(v26 + v27) = sub_10003FCD0();
    uint64_t v29 = v26
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(void *)uint64_t v29 = 0LL;
    *(void *)(v29 + 8) = 0LL;
    *(_BYTE *)(v29 + 16) = 2;
    unint64_t v30 = (void *)(v26
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *unint64_t v30 = a1;
    v30[1] = a2;
    unint64_t v31 = (uint64_t (**)(uint64_t, uint64_t, char))(v26
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *unint64_t v31 = sub_100055C48;
    v31[1] = v24;
    v38[0] = v12;
    v16(&v37, a10, a11);
    uint64_t v32 = v37;
    uint64_t v39 = v25;
    v38[0] = v26;
    v33 = v37 + 72;
    swift_beginAccess(v37 + 72, v36, 33LL, 0LL);
    swift_retain();
    sub_100057104((uint64_t)v38, v33, &qword_100405280);
    swift_endAccess(v36);
    swift_release(v32);
    sub_100055058();
    return swift_release(v26);
  }

uint64_t DeviceDriver<>.performLinkTest()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  int64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v27 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  IONotificationPortRef v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(*(void *)(a2 + 8) + 8LL))(a1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v15 = v14(v10, v2, a1);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v25;
    uint64_t v26 = v11;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v24 = v18 + 4;
    v14(v8, (uint64_t)v10, a1);
    uint64_t v19 = String.init<A>(describing:)(v8, a1);
    unint64_t v21 = v20;
    uint64_t v28 = sub_10000235C(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a1);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Unable to perform a link test because %s doesn't support it",  v18,  0xCu);
    uint64_t v22 = v25;
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v26);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a1);

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  }
}

  ;
}

uint64_t variable initialization expression of OffloadedServices.browses(uint64_t a1)
{
  unint64_t v2 = sub_100004DEC();
  return Dictionary.init()(&type metadata for DNSRecords.Identifier, a1, v2);
}

void *variable initialization expression of InMemoryPreferenceStorage.storage()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of OffloadedServices.advertises(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_100004E30();
  return Dictionary.init()(&type metadata for DNSRecords.PTR, a2, v3);
}

uint64_t variable initialization expression of OffloadedServices.resolvers( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = sub_100004E30();
  return Dictionary.init()(&type metadata for DNSRecords.PTR, a3, v4);
}

uint64_t variable initialization expression of LockedPreferencesStorage.lock()
{
  uint64_t v0 = type metadata accessor for Lock();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  unint64_t v2 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = 0;
  return v1;
}

void *variable initialization expression of NANMatchingFilter.matchingFilterList()
{
  return &_swiftEmptyArrayStorage;
}

id variable initialization expression of AppleDevice.infra()
{
  return [objc_allocWithZone(CWFInterface) initWithServiceType:1];
}

uint64_t variable initialization expression of AppleDevice.coreWiFiQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100004E74();
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_10000AF70( (unint64_t *)&unk_100410200,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = sub_100002274((uint64_t *)&unk_1004044E0);
  unint64_t v13 = sub_100004EB0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100362180LL,  v9,  v6,  v3,  0LL);
}

uint64_t static NANBitmap.Band.tvWhiteSpaces.getter()
{
  return 1LL;
}

double variable initialization expression of AppleDevice.currentInternetSharingSession@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of NANBitmap.Band.Iterator.currentIndex()
{
  return 0LL;
}

uint64_t variable initialization expression of AppleDevice.keychain()
{
  uint64_t result = kSecAttrViewHintHome;
  if (kSecAttrViewHintHome)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrViewHintHome);
    uint64_t v3 = v2;
    uint64_t v4 = type metadata accessor for AppleKeychain(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
    *(_DWORD *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken) = -1;
    uint64_t v6 = (void *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
    *uint64_t v6 = &_swiftEmptySetSingleton;
    v6[1] = 0LL;
    *(void *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors) = &_swiftEmptyDictionarySingleton;
    uint64_t v7 = (void *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    *uint64_t v7 = 0xD000000000000012LL;
    v7[1] = 0x8000000100360620LL;
    uint64_t v8 = (uint64_t *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
    *uint64_t v8 = v1;
    v8[1] = v3;
    return v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t variable initialization expression of AppleDevice.preferencesStorage()
{
  if (qword_100404148 != -1) {
    swift_once(&qword_100404148, sub_1000B0ED8);
  }
  uint64_t v0 = (void *)static SCPreferencesRef.p2pPreferences;
  uint64_t v1 = type metadata accessor for InMemoryPreferenceStorage();
  *(void *)(swift_allocObject(v1, 24LL, 7LL) + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v2 = type metadata accessor for Lock();
  uint64_t v3 = swift_allocObject(v2, 24LL, 7LL);
  id v4 = v0;
  uint64_t v5 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v3 + 16) = v5;
  _DWORD *v5 = 0;
  return v3;
}

double variable initialization expression of AppleDevice.interfaceDiscoverer@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of AppleDevice.logger()
{
  return Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x656369766564LL,  0xE600000000000000LL);
}

uint64_t variable initialization expression of IDPool.usedIDs(uint64_t a1, uint64_t a2)
{
  return Set.init()(a1, *(void *)(*(void *)(a2 + 8) + 16LL));
}

uint64_t variable initialization expression of LongTermPairingKeyStore.logger()
{
  return Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
}

uint64_t variable initialization expression of NANPMK.ID.data()
{
  uint64_t v0 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2[0] = 0x1000000000LL;
  v2[1] = __DataStorage.init(length:)(16LL);
  sub_100004EFC((int *)v2, 0);
  return v2[0];
}

CoreP2P::NANServiceName __swiftcall NANServiceName.init()()
{
  uint64_t v0 = 0LL;
  uint64_t v1 = (void *)0xE000000000000000LL;
  result.string._object = v1;
  result.string._countAndFlagsBits = v0;
  return result;
}

uint64_t static IEEE80211Frame.Header.FrameControl.moreFragments.getter()
{
  return 1024LL;
}

uint64_t variable initialization expression of IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback()
{
  return 0LL;
}

uint64_t variable initialization expression of AWDLPeer.arpa()
{
  return 0LL;
}

uint64_t variable initialization expression of AWDLActionFrame.RealtimeGroup.infrastructureChannel()
{
  return 0x300000000LL;
}

uint64_t variable initialization expression of CachedPreferenceStorage.cachedStorage()
{
  uint64_t v0 = type metadata accessor for InMemoryPreferenceStorage();
  uint64_t result = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t variable initialization expression of InfraAssociationJoinStatus.SubstateInformation.setSSIDStatus()
{
  return 8704LL;
}

double variable initialization expression of InfraAssociationReadyEvent.ipAddress@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = -1;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.preferredChannels()
{
  return 0LL;
}

uint64_t variable initialization expression of AWDLActionFrame.DataPathState.unicastOptions()
{
  return 43LL;
}

uint64_t variable initialization expression of AWDLActionFrame.DataPathState.awdlOnSince@<X0>( uint64_t a1@<X8>)
{
  return sub_100004518((uint64_t (*)(void))&type metadata accessor for DispatchTimeInterval, a1);
}

uint64_t variable initialization expression of AWDLPeer.logger()
{
  return Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xEE006C6477612E65LL,  1919247728LL,  0xE400000000000000LL);
}

uint64_t variable initialization expression of AWDLPeer.lastUpdated()
{
  if (qword_1004041A0 != -1) {
    swift_once(&qword_1004041A0, sub_1001207BC);
  }
  return (*(uint64_t (**)(void))(*(void *)algn_1004107A8 + 8LL))();
}

uint64_t variable initialization expression of AWDLPeer.deprecatedElectionParameter()
{
  return 0LL;
}

double variable initialization expression of AWDLPeer.electionParameter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.serviceParameter()
{
  return 0LL;
}

double variable initialization expression of AWDLPeer.synchronizationParameter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.dataPathStateParameter@<X0>(uint64_t a1@<X8>)
{
  return sub_100004518(type metadata accessor for AWDLActionFrame.DataPathState, a1);
}

double variable initialization expression of AWDLPeer.nanSynchronization@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

double variable initialization expression of AWDLPeer.realtimeGroup@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_100337010;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return result;
}

void *variable initialization expression of AWDLPeer.advertisedServiceIDPool()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of AWDLPeer.advertisedServices()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of AWDLPeer.average2_4RSSI()
{
  return 0LL;
}

double variable initialization expression of AWDLPeer.AdvertisedService.advertisementInfo@<D0>( uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t variable initialization expression of NANSubscribe.Configuration.bloomFilter()
{
  return 0LL;
}

uint64_t variable initialization expression of LongTermPairingKeys.PublicIdentity.lastModifiedDate@<X0>( uint64_t a1@<X8>)
{
  return sub_100004518((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t variable initialization expression of AppleKeychain.notificationToken()
{
  return 0xFFFFFFFFLL;
}

void *variable initialization expression of InMemoryKeychain.tokens()
{
  return &_swiftEmptySetSingleton;
}

uint64_t static NANBitmap.Band.sub1GHzExcludingTVWhiteSpaces.getter()
{
  return 2LL;
}

double variable initialization expression of IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific@<D0>( uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = -1;
  return result;
}

uint64_t static NANBitmap.Band.ghz2_4.getter()
{
  return 4LL;
}

uint64_t variable initialization expression of RoutingSocket.logger()
{
  return Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x676E6974756F72LL,  0xE700000000000000LL);
}

uint64_t DNSRecord.valueData.getter()
{
  return 0LL;
}

double variable initialization expression of NANDatapath.Configuration.securityConfiguration@<D0>( uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 1LL;
  return result;
}

double variable initialization expression of NANDatapath.Configuration.internetSharingConfiguration@<D0>( uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)&double result = 1LL;
  *(_OWORD *)(a1 + 24) = xmmword_100337020;
  return result;
}

double variable initialization expression of NANPublish.Configuration.internetSharingConfiguration@<D0>( uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = -1;
  return result;
}

uint64_t variable initialization expression of NANPublish.Configuration.pairingBootstrappingMethod()
{
  return 0x10000LL;
}

uint64_t variable initialization expression of NANPublish.Configuration.multicastAddress()
{
  return 0x1000000000000LL;
}

uint64_t variable initialization expression of NANCoreAnalyticsMetrics.internetSharingStatistics()
{
  return 0LL;
}

uint64_t variable initialization expression of NANAttribute.ServiceDescriptor.serviceFilterControl()
{
  return 0LL;
}

uint64_t variable initialization expression of NANAttribute.Datapath.serviceInfo()
{
  return 4LL;
}

uint64_t variable initialization expression of NANAttribute.DeviceLink.peerID()
{
  return 256LL;
}

uint64_t variable initialization expression of NANAttribute.UnalignedSchedule.entry()
{
  return 0LL;
}

uint64_t variable initialization expression of NANAttribute.RangingSetup.fineTimingMeasurementParameters()
{
  return 0x100000000LL;
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey@<X0>( uint64_t a1@<X8>)
{
  return sub_100004518((uint64_t (*)(void))&type metadata accessor for P256.KeyAgreement.PublicKey, a1);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID@<X0>( uint64_t a1@<X8>)
{
  return sub_100004518((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics@<X0>( uint64_t a1@<X8>)
{
  return sub_100004518(type metadata accessor for NANInternetSharingStatistics.Requester, a1);
}

uint64_t sub_100004518@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse()
{
  return 0LL;
}

uint64_t variable initialization expression of WiFiInterface.NeighborDiscoveryTable.table( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0LL, a1, a2, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10035CFC8, v4);
  return Dictionary.init()(v4, &type metadata for Int, WitnessTable);
}

uint64_t *variable initialization expression of ObservableWiFiProperty.tokenRegistrations( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10021E818();
}

BOOL sub_1000045EC(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100004600(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10033836C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10000463C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10033836C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100004684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100004C34(a1, a2, a3, (uint64_t)&unk_10033836C);
}

uint64_t sub_100004690(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100339220, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000046DC(uint64_t a1, uint64_t a2)
{
  return sub_100004830(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000046E8(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_10000475C(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000047D8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

void *sub_100004818@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100004824(uint64_t a1, uint64_t a2)
{
  return sub_100004830(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004830(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000486C(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000048AC(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

Swift::Int sub_10000491C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100004960()
{
}

Swift::Int sub_100004988(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *sub_1000049C8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000049D8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000049E4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100004A6C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100004AB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_DWORD *sub_100004AD8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100004AE8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100004AF4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100004B08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10033836C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void *sub_100004B54@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100004B68(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_100004B7C(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_100004B90(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

uint64_t sub_100004BA4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100339220, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100004BE0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100339220, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100004C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100004C34(a1, a2, a3, (uint64_t)&unk_100339220);
}

Swift::Int sub_100004C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(a4, a2);
  _CFObject.hash(into:)(v8, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100004C94(uint64_t a1)
{
  uint64_t v2 = sub_10000AF70( &qword_100404A20,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384F0);
  uint64_t v3 = sub_10000AF70( &qword_100404A28,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_10035D430);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004D18( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t BaseP2PControls.terminate(with:)(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100004D6C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = sub_10000235C(v6, v7, a3);
  uint64_t v10 = *a1 + 8;
  uint64_t v11 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
  swift_bridgeObjectRelease(v8);
  *a1 = v10;
}

_BYTE **sub_100004DDC(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t sub_100004DEC()
{
  unint64_t result = qword_1004044C0;
  if (!qword_1004044C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.Identifier,  &type metadata for DNSRecords.Identifier);
    atomic_store(result, (unint64_t *)&qword_1004044C0);
  }

  return result;
}

unint64_t sub_100004E30()
{
  unint64_t result = qword_10040D810;
  if (!qword_10040D810)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DNSRecords.PTR,  &type metadata for DNSRecords.PTR);
    atomic_store(result, (unint64_t *)&qword_10040D810);
  }

  return result;
}

unint64_t sub_100004E74()
{
  unint64_t result = qword_1004044D0;
  if (!qword_1004044D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004044D0);
  }

  return result;
}

unint64_t sub_100004EB0()
{
  unint64_t result = qword_100410210[0];
  if (!qword_100410210[0])
  {
    uint64_t v1 = sub_1000022F8((uint64_t *)&unk_1004044E0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, qword_100410210);
  }

  return result;
}

void sub_100004EFC(int *a1, int a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t sub_100004F7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100002274((uint64_t *)&unk_100404AD0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = ~(-1LL << *(_BYTE *)(v3 + 32));
    while (1)
    {
      unsigned int v9 = *(_DWORD *)(v6 + 4 * v4);
      uint64_t result = static Hasher._hash(seed:bytes:count:)(v7, v9, 4LL);
      unint64_t v11 = result & v8;
      unint64_t v12 = (result & (unint64_t)v8) >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * v12);
      uint64_t v14 = 1LL << (result & v8);
      uint64_t v15 = *(void *)(v3 + 48);
      if ((v14 & v13) != 0)
      {
        while (*(_DWORD *)(v15 + 4 * v11) != v9)
        {
          unint64_t v11 = (v11 + 1) & v8;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            goto LABEL_7;
          }
        }
      }

      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v12) = v14 | v13;
        *(_DWORD *)(v15 + 4 * v11) = v9;
        uint64_t v16 = *(void *)(v3 + 16);
        BOOL v17 = __OFADD__(v16, 1LL);
        uint64_t v18 = v16 + 1;
        if (v17)
        {
          __break(1u);
          return result;
        }

        *(void *)(v3 + 16) = v18;
      }

      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_100005098(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v35 - v7;
  uint64_t v8 = sub_100002274(&qword_100404A90);
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    sub_100002274(&qword_100404A98);
    unint64_t v12 = (void *)static _SetStorage.allocate(capacity:)(v11);
    uint64_t v13 = 0LL;
    uint64_t v14 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v37 = v11;
    uint64_t v38 = a1 + ((v14 + 32) & ~v14);
    uint64_t v15 = *(void *)(v3 + 72);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v16 = (char *)(v12 + 7);
    uint64_t v35 = v10;
    v41(v10, v38, v2);
    while (1)
    {
      uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v36(v10, 0LL, 1LL, v2);
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      uint64_t v40 = v13;
      v39(v42, v10, v2);
      uint64_t v18 = v12[5];
      uint64_t v19 = sub_10000AF70( &qword_100404AA0,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
      uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v2, v19);
      uint64_t v21 = ~(-1LL << *((_BYTE *)v12 + 32));
      unint64_t v22 = v20 & v21;
      unint64_t v23 = (v20 & (unint64_t)v21) >> 6;
      uint64_t v24 = *(void *)&v16[8 * v23];
      uint64_t v25 = 1LL << (v20 & v21);
      if ((v25 & v24) != 0)
      {
        do
        {
          v41(v6, v12[6] + v22 * v15, v2);
          uint64_t v26 = sub_10000AF70( &qword_100404AA8,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
          char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v42, v2, v26);
          uint64_t v28 = v3;
          uint64_t v29 = *(void (**)(char *, uint64_t))(v3 + 8);
          v29(v6, v2);
          if ((v27 & 1) != 0)
          {
            v29(v42, v2);
            uint64_t v3 = v28;
            int64_t v10 = v35;
            uint64_t v17 = v40;
            goto LABEL_4;
          }

          unint64_t v22 = (v22 + 1) & v21;
          unint64_t v23 = v22 >> 6;
          uint64_t v24 = *(void *)&v16[8 * (v22 >> 6)];
          uint64_t v25 = 1LL << v22;
          uint64_t v3 = v28;
        }

        while ((v24 & (1LL << v22)) != 0);
        int64_t v10 = v35;
      }

      unint64_t v30 = (uint64_t (*)(unint64_t, char *, uint64_t))v39;
      uint64_t v17 = v40;
      *(void *)&v16[8 * v23] = v25 | v24;
      uint64_t result = v30(v12[6] + v22 * v15, v42, v2);
      uint64_t v32 = v12[2];
      BOOL v33 = __OFADD__(v32, 1LL);
      uint64_t v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
        return result;
      }

      v12[2] = v34;
LABEL_4:
      uint64_t v13 = v17 + 1;
      if (v13 == v37)
      {
        v36(v10, 1LL, 1LL, v2);
        return (uint64_t)v12;
      }

      v41(v10, v38 + v15 * v13, v2);
    }
  }

  else
  {
    unint64_t v12 = &_swiftEmptySetSingleton;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, 1LL, 1LL, v2);
  }

  return (uint64_t)v12;
}

void *sub_1000053A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptySetSingleton;
  }
  sub_100002274(&qword_100404AC8);
  uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
  uint64_t v4 = 0LL;
  uint64_t v5 = v3 + 56;
  uint64_t v6 = a1 + 32;
  uint64_t v21 = v1;
  do
  {
    int v7 = *(unsigned __int8 *)(v6 + v4);
    Hasher.init(_seed:)(v22, *(void *)(v3 + 40));
    switch(v7)
    {
      case 2:
        Swift::UInt v8 = 0LL;
        goto LABEL_11;
      case 3:
        Swift::UInt v8 = 1LL;
        goto LABEL_11;
      case 4:
        Swift::UInt v8 = 3LL;
        goto LABEL_11;
      case 5:
        Swift::UInt v8 = 4LL;
        goto LABEL_11;
      case 6:
        Swift::UInt v8 = 5LL;
LABEL_11:
        Hasher._combine(_:)(v8);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        uint64_t v1 = v21;
        Hasher._combine(_:)(v7 & 1);
        break;
    }

    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
    unint64_t v11 = v9 & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    uint64_t v15 = *(void *)(v3 + 48);
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v16 = ~v10;
      while (2)
      {
        switch(*(_BYTE *)(v15 + v11))
        {
          case 2:
            if (v7 != 2) {
              goto LABEL_15;
            }
            break;
          case 3:
            if (v7 != 3) {
              goto LABEL_15;
            }
            break;
          case 4:
            if (v7 != 4) {
              goto LABEL_15;
            }
            break;
          case 5:
            if (v7 != 5) {
              goto LABEL_15;
            }
            break;
          case 6:
            if (v7 != 6) {
              goto LABEL_15;
            }
            break;
          default:
            if ((v7 - 2) < 5u || ((v7 ^ ((*(_BYTE *)(v15 + v11) & 1) == 0)) & 1) == 0)
            {
LABEL_15:
              unint64_t v11 = (v11 + 1) & v16;
              unint64_t v12 = v11 >> 6;
              uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
              uint64_t v14 = 1LL << v11;
              if ((v13 & (1LL << v11)) == 0) {
                goto LABEL_28;
              }
              continue;
            }

            break;
        }

        break;
      }
    }

    else
    {
LABEL_28:
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v7;
      uint64_t v17 = *(void *)(v3 + 16);
      BOOL v18 = __OFADD__(v17, 1LL);
      uint64_t v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        JUMPOUT(0x1000055D4LL);
      }

      *(void *)(v3 + 16) = v19;
    }

    ++v4;
  }

  while (v4 != v1);
  return (void *)v3;
}

Swift::Int sub_1000055FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100002274((uint64_t *)&unk_10040ED40);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v36 = v3 + 56;
    uint64_t v30 = v1;
    uint64_t v31 = a1 + 32;
    while (1)
    {
      uint64_t v5 = (uint64_t *)(v31 + 24 * v4);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      int v8 = *((unsigned __int8 *)v5 + 16);
      int v9 = *((unsigned __int8 *)v5 + 17);
      Hasher.init(_seed:)(v38, *(void *)(v3 + 40));
      Swift::String v10 = String.lowercased()();
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(v38, v10._countAndFlagsBits, v10._object);
      swift_bridgeObjectRelease(v10._object);
      uint64_t v11 = v8 ? 7365749LL : 7365492LL;
      uint64_t v35 = v11;
      String.hash(into:)(v38, v11, 0xE300000000000000LL);
      swift_bridgeObjectRelease(0xE300000000000000LL);
      int v34 = v9;
      Hasher._combine(_:)(v9);
      Swift::Int result = Hasher._finalize()();
      uint64_t v13 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v36 + 8 * (v14 >> 6));
      uint64_t v17 = 1LL << v14;
      if (((1LL << v14) & v16) != 0) {
        break;
      }
LABEL_21:
      *(void *)(v36 + 8 * v15) = v17 | v16;
      uint64_t v26 = *(void *)(v3 + 48) + 24 * v14;
      *(void *)uint64_t v26 = v7;
      *(void *)(v26 + 8) = v6;
      *(_BYTE *)(v26 + 16) = v8;
      *(_BYTE *)(v26 + 17) = v34;
      uint64_t v27 = *(void *)(v3 + 16);
      BOOL v28 = __OFADD__(v27, 1LL);
      uint64_t v29 = v27 + 1;
      if (v28)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v29;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }

    char v32 = v8;
    uint64_t v33 = v4;
    uint64_t v18 = ~v13;
    unint64_t v19 = sub_10000B08C();
    while (1)
    {
      uint64_t v20 = *(void *)(v3 + 48) + 24 * v14;
      uint64_t v21 = *(void *)(v20 + 8);
      int v22 = *(unsigned __int8 *)(v20 + 16);
      int v23 = *(unsigned __int8 *)(v20 + 17);
      v38[0] = *(void *)v20;
      v38[1] = v21;
      v37[0] = v7;
      v37[1] = v6;
      swift_bridgeObjectRetain(v21);
      if (StringProtocol.caseInsensitiveCompare<A>(_:)( v37,  &type metadata for String,  &type metadata for String,  v19,  v19))
      {
        Swift::Int result = swift_bridgeObjectRelease(v21);
      }

      else
      {
        if (v22) {
          uint64_t v24 = 7365749LL;
        }
        else {
          uint64_t v24 = 7365492LL;
        }
        if (v24 == v35)
        {
          swift_bridgeObjectRelease(v21);
          Swift::Int result = swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
LABEL_18:
          if (v23 == v34)
          {
            swift_bridgeObjectRelease(v6);
            uint64_t v1 = v30;
            uint64_t v4 = v33;
            goto LABEL_3;
          }

          goto LABEL_10;
        }

        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, 0xE300000000000000LL, v35, 0xE300000000000000LL, 0LL);
        swift_bridgeObjectRelease(v21);
        Swift::Int result = swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
        if ((v25 & 1) != 0) {
          goto LABEL_18;
        }
      }

LABEL_10:
      unint64_t v14 = (v14 + 1) & v18;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v36 + 8 * (v14 >> 6));
      uint64_t v17 = 1LL << v14;
      if ((v16 & (1LL << v14)) == 0)
      {
        uint64_t v1 = v30;
        uint64_t v4 = v33;
        LOBYTE(v8) = v32;
        goto LABEL_21;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

  __break(1u);
  return result;
}

    int v34 = sub_100024970();
    uint64_t v35 = v65;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v68, &type metadata for Int, v34, a1, v4);
    uint64_t v36 = dispatch thunk of static Comparable.< infix(_:_:)(v22, v35, a1, *(void *)(*(void *)(v4 + 32) + 8LL));
    uint64_t v31 = v59;
    v59((uint64_t)v35, a1);
    Swift::Int result = ((uint64_t (*)(char *, uint64_t))v31)(v22, a1);
    char v32 = v60;
    if ((v36 & 1) != 0) {
      goto LABEL_37;
    }
    goto LABEL_18;
  }

  char v25 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4);
  uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  if ((v25 & 1) == 0)
  {
    if (v33 >= 64)
    {
      uint64_t v31 = v59;
      v59((uint64_t)v22, a1);
      char v32 = v60;
      goto LABEL_18;
    }

    goto LABEL_14;
  }

  if (v33 > 64) {
    goto LABEL_10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v63,  a1,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  uint64_t v40 = v61;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  v41 = v65;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v40, a1, v63);
  uint64_t v42 = dispatch thunk of static Comparable.< infix(_:_:)(v22, v41, a1, *(void *)(*(void *)(v4 + 32) + 8LL));
  uint64_t v31 = v59;
  v59((uint64_t)v41, a1);
  char v25 = (uint64_t)v62;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v62, v22, a1);
  if ((v42 & 1) != 0)
  {
LABEL_36:
    Swift::Int result = ((uint64_t (*)(uint64_t, uint64_t))v31)(v25, a1);
    goto LABEL_37;
  }

  uint64_t v43 = v68;
  uint64_t v44 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
  Swift::Int result = ((uint64_t (*)(uint64_t, uint64_t))v31)(v25, a1);
  char v32 = v60;
  if (v44 < v43)
  {
LABEL_37:
    __break(1u);
    return result;
  }

  if (v5 == v2 && v4 == v3)
  {
    uint64_t v7 = 1;
    uint64_t v3 = v4;
  }

  else
  {
    uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v2, v3, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return v7 & 1;
}

  __break(1u);
  return result;
}

    sub_100058430(*((void *)a1 + 1), v5, v6);
    sub_100058430(v7, v8, v9);
    sub_100057CA0(v4, v5, v6);
    sub_100057CA0(v7, v8, v9);
    return 0LL;
  }

  if (v9 >> 60 != 15) {
    goto LABEL_10;
  }
LABEL_4:
  if (*((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    Swift::String v10 = *((void *)a1 + 5);
    uint64_t v11 = *((void *)a2 + 5);
    if ((a1[24] & 1) != 0)
    {
      if ((a2[24] & 1) != 0 && (sub_10007A3AC(v10, v11) & 1) != 0) {
        return 1LL;
      }
    }

    else if ((a2[24] & 1) == 0 && sub_10007A464(v10, v11))
    {
      return 1LL;
    }
  }

  return 0LL;
}

  if (qword_1004040E0 == -1)
  {
    if ((v9 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  swift_once(&qword_1004040E0, sub_10005DC0C);
  if ((v9 & 2) != 0)
  {
LABEL_12:
    uint64_t v11 = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    swift_beginAccess(&v16, v17, 33LL, 0LL);
    sub_10008F9D0(v11, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v17);
  }

  if (qword_1004040E0 == -1)
  {
    if ((v20 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  swift_once(&qword_1004040E0, sub_10005DC0C);
  if ((v20 & 2) != 0)
  {
LABEL_12:
    int v22 = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    swift_beginAccess(&v28, v29, 33LL, 0LL);
    sub_10008F9D0(v22, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v29);
  }

  uint64_t v43 = sub_100159F30();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v56, &type metadata for UInt64, v43, a2, v3);
  uint64_t v38 = v54;
  uint64_t v44 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v54, a2, *(void *)(*(void *)(v3 + 32) + 8LL));
  uint64_t v39 = *(void (**)(char *, uint64_t))(v55 + 8);
  v39(v15, a2);
  a1 = v50;
  if ((v44 & 1) == 0)
  {
LABEL_14:
    v39(v38, a2);
    goto LABEL_15;
  }

    *(void *)uint64_t v26 = *(void *)v27;
    uint64_t v35 = *((void *)v27 + 1);
    *(void *)(v26 + 8) = v35;
    *(_BYTE *)(v26 + 16) = *((_BYTE *)v27 + 16);
    *(_BYTE *)(v26 + 40) = 0;
    swift_bridgeObjectRetain(v35);
    goto LABEL_11;
  }

  if (v29 != 255)
  {
    if (a1 == a2) {
      goto LABEL_11;
    }
    sub_10017B2A8(v26);
    if ((*((_BYTE *)v27 + 40) & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }

  sub_10017B2A8(v26);
  uint64_t v30 = *(__int128 *)((char *)v27 + 25);
  uint64_t v31 = v27[1];
  *(_OWORD *)uint64_t v26 = *v27;
  *(_OWORD *)(v26 + 16) = v31;
  *(_OWORD *)(v26 + 25) = v30;
LABEL_11:
  uint64_t v36 = a3[23];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 24LL))(v37, v38, v39);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  uint64_t v40 = a3[25];
  v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = *(_BYTE *)(v42 + 2);
  *(_WORD *)v41 = *(_WORD *)v42;
  *(_BYTE *)(v41 + 2) = v43;
  uint64_t v44 = a3[26];
  uint64_t v45 = (_DWORD *)(a1 + v44);
  v46 = (_DWORD *)(a2 + v44);
  v47 = *(_DWORD *)((char *)v46 + 3);
  *uint64_t v45 = *v46;
  *(_DWORD *)((char *)v45 + 3) = v47;
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  return a1;
}

  uint64_t v33 = sub_1001892B8();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v45, &type metadata for UInt32, v33, a2, a3);
  uint64_t v27 = v43;
  int v34 = dispatch thunk of static Comparable.< infix(_:_:)(v18, v43, a2, *(void *)(*(void *)(a3 + 32) + 8LL));
  uint64_t v29 = *(void (**)(char *, uint64_t))(v44 + 8);
  v29(v18, a2);
  a1 = v41;
  if ((v34 & 1) == 0)
  {
LABEL_14:
    v29(v27, a2);
    goto LABEL_15;
  }

    v59 = sub_1001892B8();
    v60 = v135;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v143, &type metadata for UInt32, v59, v135, v17);
    v52 = (char *)v133;
    v61 = dispatch thunk of static Comparable.< infix(_:_:)(v28, v133, v60, *(void *)(*(void *)(v17 + 32) + 8LL));
    v54 = *(void (**)(char *, uint64_t))(v136 + 8);
    v54(v28, v60);
    if ((v61 & 1) != 0)
    {
LABEL_11:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_95:
      __break(1u);
      return result;
    }

    goto LABEL_14;
  }

  if (v47 >= 33) {
    goto LABEL_10;
  }
  v63 = (char *)v133;
  dispatch thunk of BinaryInteger._lowWord.getter(v135, v17);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v63, v135);
LABEL_15:
  uint64_t v44 = v128;
LABEL_16:
  v64 = v135;
  v129 = (void (*)(unint64_t, char *, uint64_t))dispatch thunk of BinaryInteger._lowWord.getter( v135,  v17);
  v65 = *(void *)(v136 + 8);
  ((void (*)(char *, uint64_t))v65)(v30, v64);
  if (qword_1004043B8 != -1) {
    goto LABEL_93;
  }
  while (1)
  {
    v123 = (void (*)(uint64_t, uint64_t))v65;
    v66 = (char *)off_10040A1B0;
    v67 = v127;
    v130 = (char *)*((void *)off_10040A1B0 + 2);
    if (!v130) {
      break;
    }
    v131 = (char *)off_10040A1B0 + 32;
    swift_bridgeObjectRetain(off_10040A1B0);
    v68 = 0LL;
    v126 = v66;
    while (1)
    {
      if (v68 >= *((void *)v66 + 2)) {
        goto LABEL_91;
      }
      v69 = &v131[16 * v68];
      v70 = *v69;
      v133 = v69[1];
      LODWORD(v136) = v69[2];
      v71 = *((void *)v69 + 1);
      swift_bridgeObjectRetain(v71);
      if ((dispatch thunk of static BinaryInteger.isSigned.getter(a4, v44) & 1) == 0) {
        break;
      }
      v72 = dispatch thunk of static BinaryInteger.isSigned.getter(a4, v44);
      v73 = dispatch thunk of BinaryInteger.bitWidth.getter(a4, v44);
      if ((v72 & 1) == 0)
      {
        if (v73 >= 8)
        {
          v138 = v70;
          v74 = sub_1001892FC();
          v75 = &v138;
          goto LABEL_35;
        }

        v82 = v134;
        v83 = v132;
        (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v132, v67, a4);
        v65 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v44);
        v81 = *(void (**)(char *, uint64_t))(v82 + 8);
        v84 = v83;
        v66 = v126;
        v81(v84, a4);
        goto LABEL_29;
      }

      if (v73 > 8)
      {
        v137 = v70;
        v74 = sub_1001892FC();
        v75 = &v137;
        goto LABEL_35;
      }

      v85 = AssociatedTypeWitness;
      v86 = v122;
      v87 = swift_getAssociatedConformanceWitness( v122,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v88 = v67;
      v89 = v120;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v85,  v87);
      v90 = v132;
      v91 = v89;
      v67 = v88;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v91, a4, v86);
      v65 = dispatch thunk of static Comparable.>= infix(_:_:)(v88, v90, a4, *(void *)(*(void *)(v44 + 32) + 8LL));
      v92 = v134;
      v81 = *(void (**)(char *, uint64_t))(v134 + 8);
      v81(v90, a4);
      v93 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
      v94 = v119;
      v93(v119, (uint64_t)v67, a4);
      if ((v65 & 1) == 0)
      {
        v81(v94, a4);
        v66 = v126;
        goto LABEL_52;
      }

      v65 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v44);
      v81(v94, a4);
      v66 = v126;
LABEL_52:
      swift_bridgeObjectRelease(v71);
LABEL_53:
    }

    if (dispatch thunk of BinaryInteger.bitWidth.getter(a4, v44) >= 8)
    {
      v142 = v70;
      v74 = sub_1001892FC();
      v75 = &v142;
LABEL_35:
      v95 = v132;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v75, &type metadata for UInt8, v74, a4, v44);
      v65 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v95, a4, *(void *)(*(void *)(v44 + 16) + 8LL));
      v81 = *(void (**)(char *, uint64_t))(v134 + 8);
      v81(v95, a4);
      if ((v65 & 1) == 0) {
        goto LABEL_52;
      }
      goto LABEL_36;
    }

    v76 = v134;
    v77 = v66;
    v78 = v67;
    v79 = v132;
    (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v132, v78, a4);
    v65 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v44);
    v80 = v79;
    v67 = v78;
    v66 = v77;
    v81 = *(void (**)(char *, uint64_t))(v76 + 8);
    v81(v80, a4);
LABEL_29:
LABEL_36:
    if ((v136 - 4) > 2)
    {
      v101 = *(void *)(v71 + 16);
      if (v101)
      {
        if (*(_DWORD *)(v71 + 32) == (_DWORD)v129) {
          goto LABEL_88;
        }
        if (v101 != 1)
        {
          if (*(_DWORD *)(v71 + 36) == (_DWORD)v129) {
            goto LABEL_88;
          }
          if (v101 != 2)
          {
            v102 = 10LL;
            while (1)
            {
              v103 = v102 - 7;
              if (__OFADD__(v102 - 8, 1LL)) {
                goto LABEL_92;
              }
              if (*(_DWORD *)(v71 + 4 * v102) == (_DWORD)v129) {
                break;
              }
              ++v102;
              if (v103 == v101) {
                goto LABEL_52;
              }
            }

  v48 = sub_100159F30();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v64, &type metadata for UInt64, v48, a3, v10);
  uint64_t v42 = v58;
  v49 = dispatch thunk of static Comparable.< infix(_:_:)(v20, v58, a3, *(void *)(*(void *)(v10 + 32) + 8LL));
  uint64_t v44 = *(void (**)(char *, uint64_t))(v63 + 8);
  v44(v20, a3);
  if ((v49 & 1) == 0)
  {
LABEL_14:
    v44(v42, a3);
    goto LABEL_15;
  }

    Swift::Int result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return result;
  }

  v112 = v8;
  uint64_t v29 = (void *)((char *)v5 + qword_10040C7A8);
  swift_beginAccess((char *)v5 + qword_10040C7A8, v122, 0LL, 0LL);
  uint64_t v30 = *v29;
  uint64_t v31 = *(void *)(*v29 + 16LL);
  v111 = v5;
  v113 = v12;
  *(void *)&v110 = v29;
  if (!v31) {
    goto LABEL_17;
  }
  swift_bridgeObjectRetain(v30);
  v115 = (id)sub_1003278A0((uint64_t)a1);
  if ((v32 & 1) != 0)
  {
    uint64_t v33 = (id *)*(unsigned int *)(v30 + 36);
    swift_bridgeObjectRelease(v30);
    int v34 = v29;
    uint64_t v35 = *v29;
    uint64_t v36 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    uint64_t v37 = *(void *)(v7 + 112);
    swift_bridgeObjectRetain(v35);
    uint64_t v38 = *(_OWORD *)(v7 + 96);
    v118 = *(_OWORD *)(v7 + 80);
    v119 = v38;
    v120 = v37;
    uint64_t v39 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v118);
    uint64_t v40 = sub_100245750();
    v114 = v33;
    Dictionary.subscript.getter(v121, &v123, v115, v33, 0LL, v35, v36, v39, v40);
    swift_bridgeObjectRelease(v35);

    v41 = (uint64_t)v123;
    uint64_t v42 = v124;
    uint64_t v44 = *((void *)&v125 + 1);
    uint64_t v43 = v125;
    uint64_t v45 = v126;
    v46 = v127;
    if (*((void *)&v125 + 1) >> 62 != 1LL)
    {
LABEL_15:
      sub_10023EC24(v41, (uint64_t)v42, v43, v44, v45, v46);
      uint64_t v29 = v34;
      goto LABEL_17;
    }

    v105 = v123;
    v106 = v124;
    v107 = v125;
    *(void *)&v108 = v126;
    LODWORD(v109) = v127;
    v47 = *v34;
    swift_bridgeObjectRetain(*v34);
    Dictionary.subscript.getter(&v118, &v123, v115, v114, 0LL, v47, v36, v39, v40);
    swift_bridgeObjectRelease(v47);
    sub_10023EC24((uint64_t)v123, (uint64_t)v124, v125, *((unint64_t *)&v125 + 1), v126, v127);
    v48 = (void *)v118;
    v49 = [(id)v118 hasSimilarOptionsTo:a1];

    if ((v49 & 1) != 0)
    {
      v41 = (uint64_t)v105;
      uint64_t v42 = v106;
      uint64_t v44 = *((void *)&v107 + 1);
      uint64_t v43 = v107;
      uint64_t v45 = v108;
      v46 = v109;
      goto LABEL_15;
    }

    v85 = v113 != 0;
    swift_beginAccess(v34, &v118, 33LL, 0LL);
    v86 = (void *)type metadata accessor for Dictionary(0LL, v36, v39, v40);
    v87 = v115;
    v115 = v86;
    Dictionary.remove(at:)(v121, &v123, v87, v114, 0LL, v86);
    swift_endAccess(&v118);
    sub_10023EC24((uint64_t)v123, (uint64_t)v124, v125, *((unint64_t *)&v125 + 1), v126, v127);

    v114 = &v105;
    v117 = 0;
    v88 = (uint64_t)v105;
    v123 = v105;
    __chkstk_darwin();
    v89 = v116;
    v103[2] = v116;
    v103[3] = &v117;
    v90 = (uint64_t)v112;
    v103[4] = v112;
    v103[5] = v10;
    LOBYTE(v104) = v85;
    v91 = sub_100002274(&qword_10040CD28);
    v92 = sub_100002274(&qword_10040CC28);
    v93 = sub_1000572E4( (unint64_t *)&unk_10040CD30,  &qword_10040CD28,  (uint64_t)&protocol conformance descriptor for [A : B]);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v92);
    v95 = Sequence.flatMap<A>(_:)(sub_100246390, v103, v91, v92, v93, WitnessTable);
    sub_10023EC24(v88, (uint64_t)v106, v107, *((unint64_t *)&v107 + 1), v108, v109);
    v96 = v113;
    v97 = _swiftEmptyArrayStorage;
    if ((v117 & 1) == 0)
    {
      v98 = sub_100002274((uint64_t *)&unk_10040CC40);
      v97 = (void *)swift_allocObject(v98, 64LL, 7LL);
      *((_OWORD *)v97 + 1) = xmmword_100339900;
      v97[4] = v89;
      v97[5] = v90;
      v97[6] = v10;
      *((_BYTE *)v97 + 56) = v96 != 0;
      v99 = v89;
      sub_100245900(v90, v10);
    }

    v100 = sub_100002274((uint64_t *)&unk_10040DD00);
    v101 = (id)static Array.+ infix(_:_:)(v95, v97, v100);
    swift_bridgeObjectRelease(v95);
    swift_bridgeObjectRelease(v97);
    v123 = v101;
    v124 = _swiftEmptyArrayStorage;
    v125 = xmmword_10035D840;
    v126 = 0LL;
    v127 = -1;
    v121[0] = a1;
    swift_beginAccess(v110, &v118, 33LL, 0LL);
    v102 = a1;
    Dictionary.subscript.setter(&v123, v121, v115);
    swift_endAccess(&v118);
    sub_100232CA4(v102, 1u, 1);
    uint64_t v27 = v90;
    BOOL v28 = v10;
    return sub_100245908(v27, v28);
  }

  swift_bridgeObjectRelease(v30);
LABEL_17:
  v109 = v10;
  v50 = (void *)swift_allocObject(&unk_1003F30B0, 56LL, 7LL);
  v51 = v29;
  v52 = *(id *)(v7 + 80);
  v50[2] = v52;
  v53 = *(void **)(v7 + 88);
  v50[3] = v53;
  v54 = *(void *)(v7 + 96);
  v50[4] = v54;
  v55 = *(void *)(v7 + 104);
  v50[5] = v55;
  v56 = *(void *)(v7 + 112);
  v50[6] = v56;
  swift_beginAccess(v51, v121, 33LL, 0LL);
  v57 = (void *)swift_allocObject(&unk_1003F30D8, 72LL, 7LL);
  v57[2] = v52;
  v57[3] = v53;
  v57[4] = v54;
  v57[5] = v55;
  v57[6] = v56;
  v57[7] = sub_1002474A4;
  v57[8] = v50;
  v58 = a1;
  LODWORD(v108) = swift_isUniquelyReferenced_nonNull_native(*v51);
  *(void *)&v118 = *v51;
  v59 = v118;
  *v51 = 0x8000000000000000LL;
  v115 = v58;
  v114 = (id *)sub_1003278A0((uint64_t)v58);
  v61 = *(void *)(v59 + 16);
  v62 = (v60 & 1) == 0;
  v63 = v61 + v62;
  if (__OFADD__(v61, v62))
  {
    __break(1u);
LABEL_29:
    Swift::Int result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*((void *)&v107 + 1));
    __break(1u);
    return result;
  }

  v64 = v60;
  v65 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  v123 = v52;
  v124 = v53;
  *(void *)&v125 = v54;
  *((void *)&v125 + 1) = v55;
  v126 = v56;
  v66 = _s16P2PActivityStateOMa(255LL, (uint64_t)&v123);
  v67 = sub_100245750();
  *((void *)&v107 + 1) = v65;
  type metadata accessor for _NativeDictionary(0LL, v65, v66, v67);
  v68 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v108, v63);
  v69 = v118;
  v70 = v109;
  if (v68)
  {
    v114 = (id *)sub_1003278A0((uint64_t)v115);
    if ((v64 & 1) != (v71 & 1)) {
      goto LABEL_29;
    }
  }

  v72 = (uint64_t *)v110;
  v73 = *(void *)v110;
  *(void *)v110 = v69;
  swift_bridgeObjectRelease(v73);
  v74 = *v72;
  v75 = *v72;
  if ((v64 & 1) != 0)
  {
    swift_bridgeObjectRetain(v75);
    v76 = v115;
  }

  else
  {
    v77 = swift_bridgeObjectRetain(v75);
    v79 = v57[6];
    v78 = (void (*)(id *__return_ptr, uint64_t))v57[7];
    v110 = *((_OWORD *)v57 + 1);
    v108 = *((_OWORD *)v57 + 2);
    v78(&v123, v77);
    v118 = v110;
    v119 = v108;
    v120 = v79;
    v80 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v118);
    (*(void (**)(__int128 *, id *, uint64_t))(*(void *)(v80 - 8) + 32LL))(&v118, &v123, v80);
    v76 = v115;
    v123 = v115;
    v81 = v115;
    _NativeDictionary._insert(at:key:value:)(v114, &v123, &v118, v74, *((void *)&v107 + 1), v66, v67);
  }

  swift_bridgeObjectRelease(v74);
  sub_10022C9A8();
  v83 = v82;
  swift_endAccess(v121);

  sub_100232CA4(v76, v83, 0);
  sub_100245908((uint64_t)v112, v70);
  swift_release(v57);
  return swift_release(v50);
}

  uint64_t v37 = *v4;
  *uint64_t v4 = v34;
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = *v4;
  if ((v32 & 1) != 0)
  {
    swift_bridgeObjectRetain(v38);
  }

  else
  {
    uint64_t v39 = swift_bridgeObjectRetain(v38);
    uint64_t v40 = v22[6];
    v50 = *((_OWORD *)v22 + 2);
    v52 = *((_OWORD *)v22 + 1);
    ((void (*)(uint64_t *__return_ptr, uint64_t))v22[7])(&v61, v39);
    v57 = v52;
    v58 = v50;
    v59 = v40;
    v41 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v57);
    (*(void (**)(__int128 *, uint64_t *, uint64_t))(*(void *)(v41 - 8) + 32LL))(&v57, &v61, v41);
    v61 = (uint64_t)v23;
    uint64_t v42 = v23;
    _NativeDictionary._insert(at:key:value:)(v31, &v61, &v57, v38, v55, v56, v53);
  }

  swift_bridgeObjectRelease(v38);
  sub_10022DBA8();
  uint64_t v44 = v43;
  swift_endAccess(v60);

  sub_100232CA4(v23, v44, 0);
  swift_release(v22);
  return swift_release(v21);
}

  int v23 = BYTE1(v6);
  uint64_t v24 = BYTE3(v6);
  v71 = BYTE5(v6);
  v72 = BYTE4(v6);
  char v25 = BYTE6(v6);
  uint64_t v26 = NANFollowUpReceivedEvent.followUpMessage.getter( v6 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v74 << 48),  a2,  a3);
  if (v26)
  {
    uint64_t v27 = v26;
    v75 = v7;
    BOOL v28 = (os_log_s *)Logger.logObject.getter(v26);
    uint64_t v29 = static os_log_type_t.default.getter();
    uint64_t v30 = v73 << 48;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v69 = BYTE3(v6);
      char v32 = swift_slowAlloc(32LL, -1LL);
      v78 = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v33 = BYTE1(v6);
      int v34 = v25;
      uint64_t v35 = NANPeerServiceIdentifier.description.getter((v73 << 48) | (v25 << 40) | (v71 << 32) | (v72 << 24) | (v69 << 16) | (v13 << 8) | v33);
      uint64_t v37 = v36;
      v77 = sub_10000235C(v35, v36, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_bridgeObjectRelease(v37);
      char v25 = v34;
      int v23 = v33;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received a follow up message from %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1LL, &type metadata for Any[8]);
      uint64_t v38 = v32;
      uint64_t v24 = v69;
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v39 = v31;
      uint64_t v30 = v73 << 48;
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    if ((NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.getter(v27) & 1) != 0
      && v75[*(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 96)] == 1)
    {
      uint64_t v40 = v75[77];
      if (v40 != 2)
      {
        if ((v40 & 1) == 0)
        {
          swift_bridgeObjectRelease(v27);
          uint64_t v27 = 0xE800000000000000LL;
LABEL_25:
          swift_bridgeObjectRelease(v27);
          v54 = *(void *)(v76 + qword_10040D290);
          v55 = swift_unownedRetainStrong(v54);
          v59 = sub_1002E8D68(v55, v56, v57, v58);
          swift_release(v54);
          v60 = *(void *)(v59 + *(void *)(*(void *)v59 + 272LL));
          swift_retain();
          swift_release(v59);
          v61 = *((void *)v75 + 3);
          swift_bridgeObjectRetain(v61);
          v62 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.standardizedAttributes.unsafeMutableAddressor();
          v63 = NANServiceInfo.init(information:filter:)(v61, *v62);
          v65 = v64;
          v66 = v13;
          v68 = v67;
          sub_1002A213C( v63,  v64,  v67,  (v73 << 40) | (v25 << 32) | (v71 << 24) | (v72 << 16) | (v24 << 8) | v66,  v70,  *v75);
          sub_1000208D8(v65, v68);
          swift_release(v60);
          return result;
        }

        v53 = _stringCompareWithSmolCheck(_:_:expecting:)( 7561575LL,  0xE300000000000000LL,  0x7055776F6C6C6F66LL,  0xE800000000000000LL,  0LL);
        swift_bridgeObjectRelease(0xE300000000000000LL);
        if ((v53 & 1) != 0) {
          goto LABEL_25;
        }
      }
    }

    sub_100260A58(v27, v30 | (v25 << 40) | (v71 << 32) | (v72 << 24) | (v24 << 16) | (v13 << 8) | v23);
    sub_100261908(v27);
    *(void *)&Swift::Int result = swift_bridgeObjectRelease(v27).n128_u64[0];
  }

  else
  {
    v41 = (os_log_s *)Logger.logObject.getter(0LL);
    LOBYTE(v6) = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, (os_log_type_t)v6))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v13;
      uint64_t v45 = v43;
      v78 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      v46 = NANPeerServiceIdentifier.description.getter((v73 << 48) | ((unint64_t)BYTE6(v6) << 40) | ((unint64_t)BYTE5(v6) << 32) | ((unint64_t)BYTE4(v6) << 24) | ((unint64_t)BYTE3(v6) << 16) | (v44 << 8) | BYTE1(v6));
      v48 = v47;
      v77 = sub_10000235C(v46, v47, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_bridgeObjectRelease(v48);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  (os_log_type_t)v6,  "Failed to parse the follow up received from %s",  v42,  0xCu);
      swift_arrayDestroy(v45, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }
  }

  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

uint64_t sub_1000058BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100002274((uint64_t *)&unk_100404AB0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    uint64_t v7 = *(void *)(v3 + 40);
    while (1)
    {
      int v8 = *(unsigned __int8 *)(v6 + v4);
      uint64_t result = static Hasher._hash(seed:bytes:count:)(v7, *(unsigned __int8 *)(v6 + v4), 1LL);
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      uint64_t v15 = *(void *)(v3 + 48);
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v16 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v16;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            break;
          }
        }
      }

      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v8;
      uint64_t v17 = *(void *)(v3 + 16);
      BOOL v18 = __OFADD__(v17, 1LL);
      uint64_t v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t initializeBufferWithCopyOfBuffer for NANDriverCapabilities(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    *(void *)(a1 + 8) = v8;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    uint64_t v9 = a3[8];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = a3[10];
    *(void *)(v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)(v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[12];
    *(void *)(v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(void *)(v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    uint64_t v16 = a3[14];
    *(void *)(v7 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(void *)(v7 + v16) = *(uint64_t *)((char *)a2 + v16);
    *(_BYTE *)(v7 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  }

  return v7;
}

uint64_t destroy for NANDriverCapabilities(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for NANDriverCapabilities(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v7;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(void *)(a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  uint64_t v14 = a3[12];
  *(void *)(a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(void *)(a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  uint64_t v15 = a3[14];
  *(void *)(a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  *(void *)(a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  *(_BYTE *)(a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  return a1;
}

uint64_t *assignWithCopy for NANDriverCapabilities(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  uint64_t v10 = a3[8];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  return a1;
}

uint64_t initializeWithTake for NANDriverCapabilities(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t *assignWithTake for NANDriverCapabilities(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  uint64_t v8 = a3[8];
  uint64_t v9 = (uint64_t)a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  uint64_t v13 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  uint64_t v14 = a3[14];
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDriverCapabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100005EBC);
}

uint64_t sub_100005EBC(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 32)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NANDriverCapabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100005F44);
}

char *sub_100005F44(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 32)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100005FB8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = &unk_100337078;
    swift_initStructMetadata(a1, 256LL, 12LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

__n128 initializeBufferWithCopyOfBuffer for NANAttribute.Cluster(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for in6_addr(uint64_t a1)
{
}

void type metadata accessor for in_addr(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for nw_path_status_t(uint64_t a1)
{
}

void type metadata accessor for WiFiP2PSPITransactionType(uint64_t a1)
{
}

void type metadata accessor for AWDLTrafficRegistrationService(uint64_t a1)
{
}

void type metadata accessor for WiFiAwareDataSessionLinkStatus(uint64_t a1)
{
}

void type metadata accessor for WiFiP2PInternetSharingPolicy(uint64_t a1)
{
}

void type metadata accessor for WiFiAwareTerminationReason(uint64_t a1)
{
}

void type metadata accessor for WiFiP2PError(uint64_t a1)
{
}

void type metadata accessor for apple80211_virtual_if_role(uint64_t a1)
{
}

void type metadata accessor for SCPreferences(uint64_t a1)
{
}

__n128 sub_100006160(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000617C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 60)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000619C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 60) = v3;
  return result;
}

void type metadata accessor for wl_nan_conf_status(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for RadioResources.PreferredChannel(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for wl_nan_ev_terminated(uint64_t a1)
{
}

uint64_t sub_10000620C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for wl_nan_event_disc_result(uint64_t a1)
{
}

void type metadata accessor for wl_nan_event_replied(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for wl_nan_ev_receive(uint64_t a1)
{
}

void type metadata accessor for wl_nan_cmd_xtlv_id(uint64_t a1)
{
}

void *sub_10000629C(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for wl_nan_event_txs(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for IEEE80211InformationElement.VeryHighThroughputCapability( uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for wl_nan_ev_rx_bcn(uint64_t a1)
{
}

__n128 sub_100006304(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100006318(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006338(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 36) = v3;
  return result;
}

void type metadata accessor for wl_nan_ev_datapath_cmn(uint64_t a1)
{
}

__n128 sub_10000637C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t sub_100006390(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000063B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 18) = v3;
  return result;
}

void type metadata accessor for wl_nan_host_assist_req(uint64_t a1)
{
}

_DWORD *initializeBufferWithCopyOfBuffer for NANAttribute.ServiceDescriptorExtension.RangeLimit( _DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for wl_nan_event_oob_af_txs(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for NANAttribute.ExtendedWLANInfrastructure(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedIBSS(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ExtendedIBSS(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for wl_nan_event_oob_af_rx(uint64_t a1)
{
}

_DWORD *sub_100006484(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DeviceLinkQoS(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceLinkQoS(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_conf(uint64_t a1)
{
}

__n128 sub_1000064EC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100006500(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006520(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 30) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_resp(uint64_t a1)
{
}

void type metadata accessor for wl_nan_tlv(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for NANAttribute.ExtendedP2POperation(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedP2POperation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.FineTimingMeasurementRangeReport.Entry( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 14) = v3;
  return result;
}

void type metadata accessor for wl_nan_sd_transmit(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for NANMasterRank(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANMasterRank(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANMasterRank(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_end(uint64_t a1)
{
}

__n128 sub_10000665C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100006670(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006690(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 34) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_req(uint64_t a1)
{
}

void type metadata accessor for wl_nan_awake_dws(uint64_t a1)
{
}

void type metadata accessor for wl_nan_election_metric_config(uint64_t a1)
{
}

void type metadata accessor for wl_nan_cfg_ctrl2(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_ppp_done(uint64_t a1)
{
}

void *sub_100006738(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2720uLL);
}

uint64_t sub_100006740(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10016)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006764(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 9992) = 0u;
    *(void *)(result + 10008) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 8440) = 0u;
    *(_OWORD *)(result + 8424) = 0u;
    *(_OWORD *)(result + 8408) = 0u;
    *(_OWORD *)(result + 8392) = 0u;
    *(_OWORD *)(result + 8376) = 0u;
    *(_OWORD *)(result + 8360) = 0u;
    *(_OWORD *)(result + 8344) = 0u;
    *(_OWORD *)(result + 8328) = 0u;
    *(_OWORD *)(result + 8312) = 0u;
    *(_OWORD *)(result + 8296) = 0u;
    *(_OWORD *)(result + 8280) = 0u;
    *(_OWORD *)(result + 8264) = 0u;
    *(_OWORD *)(result + 8248) = 0u;
    *(_OWORD *)(result + 8232) = 0u;
    *(_OWORD *)(result + 8216) = 0u;
    *(_OWORD *)(result + 8200) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 8952) = 0u;
    *(_OWORD *)(result + 8936) = 0u;
    *(_OWORD *)(result + 8920) = 0u;
    *(_OWORD *)(result + 8904) = 0u;
    *(_OWORD *)(result + 8888) = 0u;
    *(_OWORD *)(result + 8872) = 0u;
    *(_OWORD *)(result + 8856) = 0u;
    *(_OWORD *)(result + 8712) = 0u;
    *(_OWORD *)(result + 8840) = 0u;
    *(_OWORD *)(result + 8824) = 0u;
    *(_OWORD *)(result + 8776) = 0u;
    *(_OWORD *)(result + 8760) = 0u;
    *(_OWORD *)(result + 8744) = 0u;
    *(_OWORD *)(result + 8728) = 0u;
    *(_OWORD *)(result + 8808) = 0u;
    *(_OWORD *)(result + 8792) = 0u;
    *(_OWORD *)(result + 9208) = 0u;
    *(_OWORD *)(result + 9192) = 0u;
    *(_OWORD *)(result + 9176) = 0u;
    *(_OWORD *)(result + 9160) = 0u;
    *(_OWORD *)(result + 9144) = 0u;
    *(_OWORD *)(result + 9128) = 0u;
    *(_OWORD *)(result + 9112) = 0u;
    *(_OWORD *)(result + 8968) = 0u;
    *(_OWORD *)(result + 9096) = 0u;
    *(_OWORD *)(result + 9080) = 0u;
    *(_OWORD *)(result + 9032) = 0u;
    *(_OWORD *)(result + 9016) = 0u;
    *(_OWORD *)(result + 9000) = 0u;
    *(_OWORD *)(result + 8984) = 0u;
    *(_OWORD *)(result + 9064) = 0u;
    *(_OWORD *)(result + 9048) = 0u;
    *(_OWORD *)(result + 9464) = 0u;
    *(_OWORD *)(result + 9448) = 0u;
    *(_OWORD *)(result + 9432) = 0u;
    *(_OWORD *)(result + 9416) = 0u;
    *(_OWORD *)(result + 9400) = 0u;
    *(_OWORD *)(result + 9384) = 0u;
    *(_OWORD *)(result + 9368) = 0u;
    *(_OWORD *)(result + 9224) = 0u;
    *(_OWORD *)(result + 9352) = 0u;
    *(_OWORD *)(result + 9336) = 0u;
    *(_OWORD *)(result + 9288) = 0u;
    *(_OWORD *)(result + 9272) = 0u;
    *(_OWORD *)(result + 9256) = 0u;
    *(_OWORD *)(result + 9240) = 0u;
    *(_OWORD *)(result + 9320) = 0u;
    *(_OWORD *)(result + 9304) = 0u;
    *(_OWORD *)(result + 9720) = 0u;
    *(_OWORD *)(result + 9704) = 0u;
    *(_OWORD *)(result + 9688) = 0u;
    *(_OWORD *)(result + 9672) = 0u;
    *(_OWORD *)(result + 9656) = 0u;
    *(_OWORD *)(result + 9640) = 0u;
    *(_OWORD *)(result + 9624) = 0u;
    *(_OWORD *)(result + 9480) = 0u;
    *(_OWORD *)(result + 9608) = 0u;
    *(_OWORD *)(result + 9592) = 0u;
    *(_OWORD *)(result + 9544) = 0u;
    *(_OWORD *)(result + 9528) = 0u;
    *(_OWORD *)(result + 9512) = 0u;
    *(_OWORD *)(result + 9496) = 0u;
    *(_OWORD *)(result + 9576) = 0u;
    *(_OWORD *)(result + 9560) = 0u;
    *(_OWORD *)(result + 9976) = 0u;
    *(_OWORD *)(result + 9960) = 0u;
    *(_OWORD *)(result + 9944) = 0u;
    *(_OWORD *)(result + 9928) = 0u;
    *(_OWORD *)(result + 9912) = 0u;
    *(_OWORD *)(result + 9896) = 0u;
    *(_OWORD *)(result + 9880) = 0u;
    *(_OWORD *)(result + 9736) = 0u;
    *(_OWORD *)(result + 9864) = 0u;
    *(_OWORD *)(result + 9816) = 0u;
    *(_OWORD *)(result + 9800) = 0u;
    *(_OWORD *)(result + 9784) = 0u;
    *(_OWORD *)(result + 9768) = 0u;
    *(_OWORD *)(result + 9752) = 0u;
    *(_OWORD *)(result + 9848) = 0u;
    *(_OWORD *)(result + 9832) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 8696) = 0u;
    *(_OWORD *)(result + 8680) = 0u;
    *(_OWORD *)(result + 8664) = 0u;
    *(_OWORD *)(result + 8648) = 0u;
    *(_OWORD *)(result + 8632) = 0u;
    *(_OWORD *)(result + 8616) = 0u;
    *(_OWORD *)(result + 8600) = 0u;
    *(_OWORD *)(result + 8584) = 0u;
    *(_OWORD *)(result + 8568) = 0u;
    *(_OWORD *)(result + 8552) = 0u;
    *(_OWORD *)(result + 8536) = 0u;
    *(_OWORD *)(result + 8520) = 0u;
    *(_OWORD *)(result + 8504) = 0u;
    *(_OWORD *)(result + 8488) = 0u;
    *(_OWORD *)(result + 8472) = 0u;
    *(_OWORD *)(result + 8456) = 0u;
    *(_OWORD *)(result + 8184) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 10016) = v3;
  return result;
}

void type metadata accessor for apple80211_channels_info(uint64_t a1)
{
}

__n128 sub_100007264(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ClusterDiscovery(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for apple80211_companion_skywalk_if_create(uint64_t a1)
{
}

__n128 sub_1000072B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_virt_if_delete_data(uint64_t a1)
{
}

__n128 sub_1000072E0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000072F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100007314(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_keep_alive_dp_identifer(uint64_t a1)
{
}

__n128 initializeWithTake for NANServiceInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ClusterDiscovery(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for histogramBin_s(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_ir_status(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_ps_restriction(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_link_status(uint64_t a1)
{
}

__n128 sub_1000073E8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t sub_100007414(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100007434(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 152) = 0LL;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 160) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_transmission(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_confirm(uint64_t a1)
{
}

void *sub_1000074B0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x880uLL);
}

uint64_t sub_1000074B8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2176)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000074D8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 2168) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2176) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_response(uint64_t a1)
{
}

void *sub_100007758(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3E5uLL);
}

uint64_t sub_100007760(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 997)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100007780(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 984) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 996) = 0;
    *(_DWORD *)(result + 992) = 0;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 997) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_data(uint64_t a1)
{
}

void *sub_1000078CC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80CuLL);
}

uint64_t sub_1000078D4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2060)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000078F4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 2056) = 0;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2060) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_follow_up_transmit_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_cancel_publish_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_cancel_subscribe_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_terminate(uint64_t a1)
{
}

void *sub_100007B90(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x868uLL);
}

uint64_t sub_100007B98(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2152)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100007BB8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2152) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_request(uint64_t a1)
{
}

void *sub_100007E30(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x15C8uLL);
}

uint64_t sub_100007E38(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5576)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100007E5C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5576) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_publish_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_matching_filter(uint64_t a1)
{
}

void *sub_100008490(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE14uLL);
}

uint64_t sub_100008498(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3604)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000084B8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3592) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 3600) = 0;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 3604) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_subscribe_data(uint64_t a1)
{
}

void *sub_1000088B4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x102uLL);
}

uint64_t sub_1000088BC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 258)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000088DC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 248) = 0LL;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 256) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 258) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_service_name(uint64_t a1)
{
}

__n128 initializeWithCopy for AWDLActionFrame.ElectionParameter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.ElectionParameter(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.ElectionParameter(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_role_cfg(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_host_election(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_secondary_master_channel(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_primary_master_channel(uint64_t a1)
{
}

_WORD *initializeBufferWithCopyOfBuffer for NANAttribute.MasterIndication(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for apple80211_nan_dw_awake_period(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_random_factor(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_master_pref(uint64_t a1)
{
}

uint64_t sub_100008A6C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for apple80211_nan_cluster_id(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_enable(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_capability(uint64_t a1)
{
}

void *sub_100008ABC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xFB0uLL);
}

uint64_t sub_100008AC4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 4016)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_100008B18(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 4008) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4016) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4016) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_statistics(uint64_t a1)
{
}

void *sub_100008F98(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE80uLL);
}

uint64_t sub_100008FA0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3712)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100008FC0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3704) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 3712) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_statistics(uint64_t a1)
{
}

__n128 sub_1000093D8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for awdl_peer_advert_add(uint64_t a1)
{
}

void type metadata accessor for apple80211_peer_service_request(uint64_t a1)
{
}

__n128 sub_100009414(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100009448(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009468(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 136) = v3;
  return result;
}

void type metadata accessor for apple80211_lte_restricted_channels(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_social_time_slots(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_oper_mode(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_UMI_data(uint64_t a1)
{
}

__n128 sub_100009504(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_100009540(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 184) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_peer_traffic_registration(uint64_t a1)
{
}

void *sub_1000095AC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x190uLL);
}

uint64_t sub_1000095B4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 400)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000095D4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 392) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 400) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_sync_channel_sequence(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_preferred_channels(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_strategy(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_sync_enabled(uint64_t a1)
{
}

void type metadata accessor for apple80211_virtual_if_state(uint64_t a1)
{
}

__n128 initializeWithTake for NANServiceName(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for apple80211_userspace_p2p_options_t(uint64_t a1)
{
}

void type metadata accessor for apple80211_country_code_data(uint64_t a1)
{
}

__n128 sub_100009700(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_100009724(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009744(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for in6_aliasreq(uint64_t a1)
{
}

void *sub_1000097A4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t sub_1000097AC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 288)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000097CC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 280) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 288) = v3;
  return result;
}

void type metadata accessor for in6_ifreq(uint64_t a1)
{
}

__n128 initializeWithTake for NANAttribute.P2POperation(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100009864(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ifreq(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for WiFiAddress(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)__n128 result = v2;
  return result;
}

void type metadata accessor for apple80211_nan_cluster_changed_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_role_changed_event_data(uint64_t a1)
{
}

__n128 sub_1000098E0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for apple80211_nan_discovery_result_received_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_publish_replied_private_event_data(uint64_t a1)
{
}

__n128 sub_10000991C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_nan_dp_request_recvd_event_data(uint64_t a1)
{
}

__n128 sub_100009944(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100009958(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 22)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009978(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 22) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_resp_recvd_event_data(uint64_t a1)
{
}

__n128 sub_1000099BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Cluster(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_confirm_recvd_event_data(uint64_t a1)
{
}

void *sub_100009A04(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x820uLL);
}

uint64_t sub_100009A0C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2080)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009A2C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 2072) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2080) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_data_path_established_event_data(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.P2POperation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_100009CC4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009CE4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 28) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_data_path_end_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_host_assist_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_subscribe_terminated_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_publish_terminated_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_follow_up_received_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_follow_up_tx_complete_event_data(uint64_t a1)
{
}

__n128 sub_100009D8C(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100009D98(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for apple80211_nan_beacon_recvd_event_data(uint64_t a1)
{
}

uint64_t sub_100009DCC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_100009DE0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009E00(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 10) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_status(uint64_t a1)
{
}

void *sub_100009E40(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3E1uLL);
}

uint64_t sub_100009E48(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 993)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009E68(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 984) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_BYTE *)(result + 992) = 0;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 993) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_rx_data(uint64_t a1)
{
}

__n128 sub_100009FB0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100009FD4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009FF4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dw_start_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_preferred_channels_changed_event(uint64_t a1)
{
}

void type metadata accessor for apple80211_channel_band(uint64_t a1)
{
}

void *sub_10000A06C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF20uLL);
}

uint64_t sub_10000A074(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 3872)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10000A0C8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 3864) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 3872) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 3872) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4) = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for apple80211_nan_low_latency_peer_statistics(uint64_t a1)
{
}

void *sub_10000A524(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x650uLL);
}

uint64_t sub_10000A52C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 1616)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10000A580(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 1608) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1616) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1616) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_statistics_reduced(uint64_t a1)
{
}

__n128 sub_10000A784(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t sub_10000A7C0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 62);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10000A814(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 208) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 208) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 62) = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for apple80211_p2p_airplay_statistics(uint64_t a1)
{
}

void type metadata accessor for apple80211_p2p_thread_coex_event(uint64_t a1)
{
}

void type metadata accessor for apple80211_hostap_state(uint64_t a1)
{
}

__n128 sub_10000A8C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10000A8EC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 68)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A90C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 68) = v3;
  return result;
}

void type metadata accessor for apple80211_peer_presence_indication(uint64_t a1)
{
}

void *sub_10000A960(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t sub_10000A968(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 264)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A988(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 264) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_service_reg_soft_error_event(uint64_t a1)
{
}

void type metadata accessor for apple80211_idle_detect(uint64_t a1)
{
}

__n128 sub_10000AA1C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.NANSynchronization(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 40) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_stats_p2p_failure(uint64_t a1)
{
}

__n128 sub_10000AA78(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_10000AAB4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 184)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for apple80211_driver_availability(uint64_t a1)
{
}

void type metadata accessor for apple80211_chip_reset(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_infra_assoc_start_event_data(uint64_t a1)
{
}

void *sub_10000AB10(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1CCuLL);
}

uint64_t sub_10000AB18(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 460)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000AB38(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 456) = 0;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 460) = v3;
  return result;
}

void type metadata accessor for apple80211_join_status(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for IEEE80211Frame.Header(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_assoc_ready(uint64_t a1)
{
}

__n128 sub_10000AC18(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10000AC44(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000AC64(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 104) = v3;
  return result;
}

void type metadata accessor for apple80211_message_auth(uint64_t a1)
{
}

void type metadata accessor for apple80211_message_assoc(uint64_t a1)
{
}

void *sub_10000ACD0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x193uLL);
}

uint64_t sub_10000ACD8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 403)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000ACF8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 392) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 402) = 0;
    *(_WORD *)(result + 400) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 403) = v3;
  return result;
}

void type metadata accessor for apple80211_infra_scan_start_event_data(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for NANAttribute.MasterIndication(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 4;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0LL;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }

  return 0LL;
}

uint64_t sub_10000AE18(_WORD *a1, int a2, int a3)
{
  else {
    int v3 = 4;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_10000AE90 + 4 * byte_100337045[v4]))();
  }
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_10000AE70 + 4 * byte_100337040[v4]))();
}

uint64_t sub_10000AE70(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10000AE90(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_10000AE98(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10000AEA0(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10000AEA8(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_10000AEB0(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

void type metadata accessor for apple80211_infra_scan_complete_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_channel(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for WiFiAddress(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for WiFiAddress(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 6) = v3;
  return result;
}

void type metadata accessor for ether_addr(uint64_t a1)
{
}

uint64_t sub_10000AF44()
{
  return sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
}

uint64_t sub_10000AF70(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000AFB0()
{
  return sub_10000AF70( &qword_1004049F8,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiAwareTerminationReason,  (uint64_t)&unk_100338448);
}

uint64_t sub_10000AFDC()
{
  return sub_10000AF70( &qword_100404A00,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_1003384B0);
}

uint64_t sub_10000B008()
{
  return sub_10000AF70( &qword_100404A08,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_10035D400);
}

uint64_t sub_10000B034()
{
  return sub_10000AF70( &qword_100404A10,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService,  (uint64_t)&unk_10035D460);
}

uint64_t sub_10000B060()
{
  return sub_10000AF70( &qword_100404A18,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338340);
}

unint64_t sub_10000B08C()
{
  unint64_t result = qword_100404AC0;
  if (!qword_100404AC0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100404AC0);
  }

  return result;
}

uint64_t *sub_10000B0D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_10000B110(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000B130(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 44) = v3;
  return result;
}

void type metadata accessor for ifmediareq(uint64_t a1)
{
}

__n128 initializeWithTake for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.NANSynchronization(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for apple80211req(uint64_t a1)
{
}

void type metadata accessor for SystemPowerChangeMessageType(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for NANDataHostAssistRequest(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sockaddr(uint64_t a1)
{
}

void type metadata accessor for SCNetworkSet(uint64_t a1)
{
}

void type metadata accessor for SCNetworkService(uint64_t a1)
{
}

__n128 sub_10000B220(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000B23C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000B25C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 56) = v3;
  return result;
}

void type metadata accessor for apple80211_infra_peer_address_data(uint64_t a1)
{
}

void type metadata accessor for bcm_iov_batch_buf(uint64_t a1)
{
}

void type metadata accessor for in6_addr.__Unnamed_union___u6_addr(uint64_t a1)
{
}

void type metadata accessor for wl_tsf(uint64_t a1)
{
}

void type metadata accessor for wl_nan_events(uint64_t a1)
{
}

void type metadata accessor for wl_nan_ndl_qos(uint64_t a1)
{
}

void type metadata accessor for wl_nan_dp_qos(uint64_t a1)
{
}

void type metadata accessor for apple80211_companion_skywalk_if_create_code(uint64_t a1)
{
}

_DWORD *initializeBufferWithCopyOfBuffer for NANPeerServiceIdentifier(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANPeerServiceIdentifier(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NANPeerServiceIdentifier(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 7) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_identifier(uint64_t a1)
{
}

void type metadata accessor for histogramBin_s.__Unnamed_union___Anonymous_field2(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_ir_role(uint64_t a1)
{
}

void type metadata accessor for apple80211_disallow_nan_pwrsave_entities(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_link_status_type(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_transmission_reason(uint64_t a1)
{
}

__n128 sub_10000B410(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_10000B444(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 146)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000B464(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0LL;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 146) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_tx_availability(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_oob_action_frame_security_type(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_qos_requirements(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_sync_master(uint64_t a1)
{
}

void *sub_10000B508(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xEE8uLL);
}

uint64_t sub_10000B510(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3816)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000B530(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 3816) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_d2d_migration_statistics(uint64_t a1)
{
}

__n128 initializeWithTake for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for apple80211_awdl_services(uint64_t a1)
{
}

void *sub_10000B99C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t sub_10000B9A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 392)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000B9C4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 392) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_srv_statistics(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_state_statistics(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_info_ext(uint64_t a1)
{
}

void type metadata accessor for awdlStrategy(uint64_t a1)
{
}

void type metadata accessor for in6_addrlifetime(uint64_t a1)
{
}

void type metadata accessor for sockaddr_in6(uint64_t a1)
{
}

void *sub_10000BACC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t sub_10000BAD4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 272)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000BAF4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 264) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 272) = v3;
  return result;
}

void type metadata accessor for in6_ifreq.__Unnamed_union_ifr_ifru(uint64_t a1)
{
}

void type metadata accessor for ifreq.__Unnamed_union_ifr_ifru(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_state(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_role(uint64_t a1)
{
}

void *sub_10000BBB4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x802uLL);
}

uint64_t sub_10000BBBC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2050)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000BBDC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 2040) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_WORD *)(result + 2048) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2050) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_service_info(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_data_path_end_reason(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_host_assist_reason(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_status_reason_code(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_result(uint64_t a1)
{
}

void *sub_10000BE8C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3C2uLL);
}

uint64_t sub_10000BE94(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 962)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000BEB4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 952) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_WORD *)(result + 960) = 0;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 962) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_payload(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_info(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for NonNANOperatingChannelInformation(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NonNANOperatingChannelInformation(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  return 0LL;
}

uint64_t storeEnumTagSinglePayload for NonNANOperatingChannelInformation(uint64_t result, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  if (!a3) {
    int v3 = 0;
  }
  if (a2)
  {
    *(_WORD *)__n128 result = a2 - 1;
    *(_BYTE *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else if (v3)
  {
    if (v3 == 2) {
      *(_WORD *)(result + 3) = 0;
    }
    else {
      *(_BYTE *)(result + 3) = 0;
    }
  }

  return result;
}

void type metadata accessor for apple80211_nan_channel(uint64_t a1)
{
}

void *sub_10000C0EC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF00uLL);
}

uint64_t sub_10000C0F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3840)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000C114(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3832) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 3840) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_low_latency_peer_traffic_statistics(uint64_t a1)
{
}

void *sub_10000C54C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x588uLL);
}

uint64_t sub_10000C554(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 1416)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000C574(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 1416) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_reduced(uint64_t a1)
{
}

__n128 sub_10000C728(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t sub_10000C75C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[192]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10000C7B0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 184) = 0LL;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 192) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 192) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_configs(uint64_t a1)
{
}

void type metadata accessor for airplayStats_histogramBin(uint64_t a1)
{
}

void type metadata accessor for apple80211_p2p_airplay_statistics.__Unnamed_union_u(uint64_t a1)
{
}

void type metadata accessor for peerPresence(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_stats_p2p_failure_reason(uint64_t a1)
{
}

void type metadata accessor for apple80211_chip_reset_state(uint64_t a1)
{
}

void type metadata accessor for apple80211_join_substate_info(uint64_t a1)
{
}

uint64_t sub_10000C8B0()
{
  return sub_10000AF70( &qword_100404C98,  (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService,  (uint64_t)&unk_100339180);
}

uint64_t sub_10000C8DC()
{
  return sub_10000AF70( &qword_100404CA0,  (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService,  (uint64_t)&unk_1003391A8);
}

uint64_t getEnumTagSinglePayload for NANAttribute.Cluster(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for sockaddr_in(uint64_t a1)
{
}

__n128 sub_10000C93C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_tx_availability_params(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_data_qos_types(uint64_t a1)
{
}

void *sub_10000C988(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE10uLL);
}

uint64_t sub_10000C990(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3600)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000C9B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3592) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 3600) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_histograms(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_srv_info(uint64_t a1)
{
}

void *sub_10000CDBC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x4B0uLL);
}

uint64_t sub_10000CDC4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 1200)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000CDE4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 1192) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 1200) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_histograms_reduced(uint64_t a1)
{
}

__n128 initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 216)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Counts( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 216) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_counts(uint64_t a1)
{
}

__n128 sub_10000D038(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10000D05C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 70)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000D07C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 70) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_availability_time_bmap(uint64_t a1)
{
}

void sub_10000D0D4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t OffloadedServices.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100004DEC();
  uint64_t v7 = Dictionary.init()(&type metadata for DNSRecords.Identifier, a1, v6);
  unint64_t v8 = sub_100004E30();
  Dictionary.init()(&type metadata for DNSRecords.PTR, a2, v8);
  Dictionary.init()(&type metadata for DNSRecords.PTR, a3, v8);
  return v7;
}

unint64_t BonjourOffload.peersToInvalidate()()
{
  return sub_10000D274((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10000D274(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    __int128 v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100002274((uint64_t *)&unk_100405150);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  __int128 v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  uint64_t v21 = v1;
  uint64_t v22 = v3 + 64;
  unint64_t v6 = (unsigned __int8 *)(v1 + 32);
  swift_retain();
  while (1)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v9 = v6[2];
    uint64_t v10 = v6[3];
    uint64_t v11 = v6[4];
    uint64_t v12 = v6[5];
    uint64_t v23 = v5;
    uint64_t v24 = *((void *)v6 + 1);
    uint64_t v13 = *((void *)v6 + 2);
    swift_bridgeObjectRetain(v13);
    unint64_t result = sub_10001C15C(v7 | (v8 << 8) | (v9 << 16) | (v10 << 24) | (v11 << 32) | (v12 << 40));
    if ((v15 & 1) != 0) {
      break;
    }
    *(void *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v16 = (_BYTE *)(v4[6] + 6 * result);
    *uint64_t v16 = v7;
    v16[1] = v8;
    v16[2] = v9;
    v16[3] = v10;
    v16[4] = v11;
    v16[5] = v12;
    uint64_t v17 = (void *)(v4[7] + 16 * result);
    void *v17 = v24;
    v17[1] = v13;
    uint64_t v18 = v4[2];
    BOOL v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v6 += 24;
    v4[2] = v20;
    uint64_t v5 = v23 - 1;
    if (v23 == 1)
    {
      swift_release(v4);
      uint64_t v1 = v21;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000D3E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100002274(&qword_100405130);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v6 = *(v5 - 3);
    uint64_t v7 = *(v5 - 2);
    uint64_t v8 = *(v5 - 1);
    uint64_t v9 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_10001C958( v6,  v7,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    uint64_t v13 = (void *)(v3[7] + 16 * result);
    *uint64_t v13 = v8;
    v13[1] = v9;
    uint64_t v14 = v3[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000D52C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100002274(&qword_1004050F0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000226B0(v7, (uint64_t)&v14, &qword_1004050F8);
    uint64_t v8 = v14;
    unint64_t result = sub_10001C470(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_100022594(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000D658(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100002274((uint64_t *)&unk_1004105A0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v17 = a1;
  uint64_t v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000226B0(v7, (uint64_t)&v18, &qword_100405110);
    uint64_t v8 = v18;
    uint64_t v9 = v19;
    unint64_t result = sub_10001C958( v18,  v19,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    BOOL v12 = (uint64_t *)(v4[6] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100022594(&v20, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = v17;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10000D7A8(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_1004050C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v33 = (unsigned __int8 *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v28 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v28);
    return (unint64_t)v7;
  }

  sub_100002274(&qword_1004050C8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_9;
  }
  char v32 = &v33[*(int *)(v2 + 48)];
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v29 = a1;
  uint64_t v10 = a1 + ((v9 + 32) & ~v9);
  uint64_t v30 = *(void *)(v3 + 72);
  uint64_t v31 = v6 + 64;
  swift_retain();
  while (1)
  {
    uint64_t v34 = v8;
    char v11 = v33;
    sub_1000226B0(v10, (uint64_t)v33, &qword_1004050C0);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = v11[2];
    uint64_t v15 = v11[3];
    uint64_t v16 = v11[4];
    uint64_t v17 = v11[5];
    uint64_t v18 = v11[6];
    unint64_t result = sub_10001C08C(v12 | (v13 << 8) | (v14 << 16) | (v15 << 24) | (v16 << 32) | (v17 << 40) | (v18 << 48));
    if ((v20 & 1) != 0) {
      break;
    }
    unint64_t v21 = result;
    *(void *)(v31 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v22 = (_BYTE *)(v7[6] - result + 8 * result);
    _BYTE *v22 = v12;
    v22[1] = v13;
    v22[2] = v14;
    v22[3] = v15;
    v22[4] = v16;
    v22[5] = v17;
    v22[6] = v18;
    uint64_t v23 = v7[7];
    uint64_t v24 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    unint64_t result = sub_100022628( (uint64_t)v32,  v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v21,  type metadata accessor for NANInternetSharingStatistics.Requester);
    uint64_t v25 = v7[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_12;
    }
    v7[2] = v27;
    v10 += v30;
    uint64_t v8 = v34 - 1;
    if (v34 == 1)
    {
      swift_release(v7);
      uint64_t v28 = v29;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10000D9B0(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_1004050A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100002274((uint64_t *)&unk_1004050B0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = &v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000226B0(v13, (uint64_t)v5, &qword_1004050A8);
    unint64_t result = sub_10001C320((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for CodingUserInfoKey(0LL);
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    unint64_t result = (unint64_t)sub_100022594(v10, (_OWORD *)(v8[7] + 32 * v17));
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10000DB4C(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v74 = *(void *)(v5 - 8);
  uint64_t v75 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a2,  a1,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t v9 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v70 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v70 - v14;
  char v16 = *(void (**)(unint64_t, unint64_t))(a2 + 64);
  unint64_t v76 = a1;
  uint64_t v77 = v2;
  v16(a1, a2);
  v72 = v7;
  uint64_t v73 = v13;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
  uint64_t v18 = *(uint64_t (**)(unint64_t, unint64_t))(a2 + 40);
  unint64_t v19 = v76;
  uint64_t v20 = v18(v76, a2);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a2,  v19,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v27 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  unint64_t v28 = sub_100004DEC();
  LOBYTE(v27) = Dictionary.isEmpty.getter(v20, &type metadata for DNSRecords.Identifier, v27, v28);
  __n128 v29 = swift_bridgeObjectRelease(v20);
  if ((v27 & 1) != 0)
  {
    uint64_t v30 = (uint64_t (*)(unint64_t, unint64_t, __n128))v18;
    uint64_t v31 = ((uint64_t (*)(unint64_t, unint64_t, __n128))v18)(v19, a2, v29);
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v37);
    uint64_t v38 = *(void *)(v33 + 16);
    __n128 v39 = swift_bridgeObjectRelease(v33);
    if (!v38)
    {
      uint64_t v40 = v30(v19, a2, v39);
      uint64_t v42 = v41;
      uint64_t v44 = v43;
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v40);
      uint64_t v46 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
      unint64_t v47 = sub_100004E30();
      LOBYTE(v46) = Dictionary.isEmpty.getter(v44, &type metadata for DNSRecords.PTR, v46, v47);
      __n128 v48 = swift_bridgeObjectRelease(v44);
      if ((v46 & 1) != 0)
      {
        unint64_t v70 = v47;
        v71 = (uint64_t (*)(unint64_t, unint64_t))v30;
        uint64_t v78 = v77;
        v49 = v72;
        uint64_t v50 = (*(uint64_t (**)(unint64_t, __n128))(*(void *)(a2 + 8) + 8LL))(v19, v48);
        v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v53 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Stopping all datapaths because client removed all other services",  v53,  2u);
          swift_slowDealloc(v53, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v74 + 8))(v49, v75);
        uint64_t v54 = v71(v19, a2);
        uint64_t v56 = v55;
        uint64_t v58 = v57;
        uint64_t v60 = v59;
        uint64_t v61 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
        swift_bridgeObjectRelease(v58);
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v54);
        uint64_t v78 = v60;
        uint64_t v62 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.PTR, v61, v70);
        uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v62);
        uint64_t v64 = Array.init<A>(_:)(&v78, v61, v62, WitnessTable);
        uint64_t v78 = v64;
        __chkstk_darwin();
        *(&v70 - 4) = v19;
        *(&v70 - 3) = a2;
        *(&v70 - 2) = (unint64_t)v15;
        uint64_t v65 = type metadata accessor for Array(0LL, v61);
        uint64_t v66 = swift_getWitnessTable(&protocol conformance descriptor for [A], v65);
        Sequence.forEach(_:)(sub_1000226F4, &v70 - 6, v65, v66);
        __n128 v67 = swift_bridgeObjectRelease(v64);
        unint64_t v68 = v77;
        uint64_t v69 = (*(uint64_t (**)(unint64_t, unint64_t, __n128))(a2 + 72))(v19, a2, v67);
        __chkstk_darwin();
        *(&v70 - 4) = v19;
        *(&v70 - 3) = a2;
        *(&v70 - 2) = v68;
        sub_10000E110((void (*)(int *))sub_100022710, (uint64_t)(&v70 - 6), v69);
        swift_bridgeObjectRelease(v69);
      }
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v15, AssociatedTypeWitness);
}

uint64_t sub_10000E060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for BonjourOffload,  &associated type descriptor for BonjourOffload.DiscoveryEngine);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t sub_10000E110(void (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(a3 + 48) + 6 * i;
    __int16 v19 = *(_WORD *)(v18 + 4);
    uint64_t v20 = (uint64_t *)(*(void *)(a3 + 56) + 16 * i);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int v23 = *(_DWORD *)v18;
    __int16 v24 = v19;
    uint64_t v25 = v21;
    uint64_t v26 = v22;
    swift_bridgeObjectRetain(v22);
    a1(&v23);
    if (v3)
    {
      swift_release(a3);
      return swift_bridgeObjectRelease(v22);
    }

    uint64_t result = swift_bridgeObjectRelease(v22);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }

  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }

LABEL_28:
  __break(1u);
  return result;
}

    LOBYTE(v62) = a2;
    WORD1(v62) = HIWORD(a2);
    uint64_t v64 = &type metadata for NANAttribute.Availability;
    v63 = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v43 = Mirror.init(reflecting:)(&v62);
    uint64_t v44 = Mirror.description.getter(v43);
    uint64_t v46 = v45;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_31:
    uint64_t v54 = v57;
    *uint64_t v57 = v44;
    v54[1] = v46;
    return;
  }

  if (!*((_BYTE *)a1 + 48)) {
    goto LABEL_28;
  }
  uint64_t v62 = 0LL;
  v63 = 0xE000000000000000LL;
  v26._countAndFlagsBits = 60LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  if (!v58)
  {
    LOBYTE(v60) = (v11 >> 3) & 3;
    _print_unlocked<A, B>(_:_:)( &v60,  &v62,  &type metadata for NANAvailabilityEntry.UsagePreference,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v27._countAndFlagsBits = 8250LL;
    v27._object = (void *)0xE200000000000000LL;
    String.append(_:)(v27);
    unint64_t v28 = *(void *)(v12 + 16);
    __n128 v29 = _swiftEmptyArrayStorage;
    if (v28)
    {
      uint64_t v65 = _swiftEmptyArrayStorage;
      sub_1000696B4(0, v28, 0);
      __n128 v29 = v65;
      uint64_t v30 = v12 + 40;
      do
      {
        a3 = a3 & 0xFF000000FF00LL | *(unsigned __int8 *)(v30 - 8) | ((unint64_t)*(unsigned __int16 *)(v30 - 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v30 - 4) << 32) | ((unint64_t)*(unsigned __int16 *)(v30 - 2) << 48);
        uint64_t v31 = NANBitmap.Channel.channel.getter(a3);
        if ((v31 & 0xFF00000000LL) == 0x300000000LL)
        {
          uint64_t v32 = 0xE100000000000000LL;
          uint64_t v33 = 48LL;
        }

        else
        {
          uint64_t v34 = BYTE5(v31);
          uint64_t v59 = v31;
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
          uint64_t v61 = v35;
          uint64_t v36 = v34 - 2;
          uint64_t v37 = 0LL;
          uint64_t v38 = 0xE000000000000000LL;
          switch(v36)
          {
            case 0:
            case 1:
              break;
            case 2:
              uint64_t v38 = 0xE200000000000000LL;
              uint64_t v37 = 11051LL;
              break;
            case 3:
              uint64_t v38 = 0xE200000000000000LL;
              uint64_t v37 = 30840LL;
              break;
            case 4:
              uint64_t v38 = 0xE200000000000000LL;
              uint64_t v37 = 31097LL;
              break;
            default:
              uint64_t v37 = 45LL;
              uint64_t v38 = 0xE100000000000000LL;
              break;
          }

          __n128 v39 = v38;
          String.append(_:)(*(Swift::String *)&v37);
          swift_bridgeObjectRelease(v38);
          uint64_t v33 = v60;
          uint64_t v32 = v61;
        }

        uint64_t v65 = v29;
        uint64_t v41 = v29[2];
        uint64_t v40 = v29[3];
        if (v41 >= v40 >> 1)
        {
          sub_1000696B4(v40 > 1, v41 + 1, 1);
          __n128 v29 = v65;
        }

        v29[2] = v41 + 1;
        uint64_t v42 = &v29[2 * v41];
        v42[4] = v33;
        v42[5] = v32;
        v30 += 10LL;
        --v28;
      }

      while (v28);
    }

    uint64_t v60 = (uint64_t)v29;
    unint64_t v47 = sub_100002274((uint64_t *)&unk_100410510);
    __n128 v48 = sub_1000572E4(&qword_10040FEE0, (uint64_t *)&unk_100410510, (uint64_t)&protocol conformance descriptor for [A]);
    v49 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v47, v48);
    v51 = v50;
    swift_bridgeObjectRelease(v29);
    v52._countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v51);
    v53._countAndFlagsBits = 62LL;
    v53._object = (void *)0xE100000000000000LL;
    String.append(_:)(v53);
    goto LABEL_30;
  }

  swift_unexpectedError(v58, "CoreP2P/NANAvailability.swift", 29LL, 1LL);
  __break(1u);
}

      __break(1u);
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v14 = v15 + 92;
    if (__OFADD__(v15, 92LL))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }

    if (v12 < v14) {
      break;
    }
    unint64_t v13 = *(unsigned __int16 *)((char *)v8 + v15);
    __int16 v19 = __OFADD__(v15, v13);
    v15 += v13;
    if (v19) {
      goto LABEL_46;
    }
  }

  while (v12 >= v15);
  if ((v48 & 1) != 0) {
    goto LABEL_33;
  }
  uint64_t v44 = 1;
  uint64_t v45 = v46;
  uint64_t v43 = v47;
LABEL_44:
  free(v8);
  *(void *)a2 = v45;
  *(void *)(a2 + 8) = v43;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(_BYTE *)(a2 + 32) = v44;
}

  uint64_t v8 = result << a2;
  if (((result << a2) & 0x8000000000000000LL) == 0)
  {
    while (v8 > 0xFF)
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      if ((unint64_t)a2 > 0xFFFFFFFFFFFFFFC0LL)
      {
LABEL_36:
        uint64_t v8 = result >> -(char)a2;
        if ((v8 & 0x8000000000000000LL) != 0) {
          goto LABEL_37;
        }
      }

      else
      {
LABEL_22:
        uint64_t v8 = result >> 63;
        if (result >> 63 < 0) {
          goto LABEL_37;
        }
      }
    }

    return v8;
  }

  __int16 v24 = 2;
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v24,  1046LL,  0);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v10);
    uint64_t v20 = v27[2];
    uint64_t v21 = *(void *)(v6 + 16);
    if (!v20)
    {
      swift_bridgeObjectRetain(v6);
      __int16 v24 = 0LL;
      if (v21 > 0) {
LABEL_42:
      }
        sub_10019EB3C(v6, v6 + 32, v24, (2 * v21) | 1);
      goto LABEL_3;
    }

    swift_bridgeObjectRetain(v6);
    if (v21) {
      break;
    }
LABEL_3:
    swift_bridgeObjectRelease_n(v6, 2LL);
LABEL_4:
    if (++v4 == v3) {
      return (uint64_t)v27;
    }
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native(v27);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10019EA0C(v27);
    uint64_t v7 = (void *)result;
  }

  uint64_t v22 = 0LL;
  int v23 = *(void *)(v6 + 16);
  while ((v21 & ~(v21 >> 63)) != v22)
  {
    if (v22 == v23) {
      goto LABEL_51;
    }
    __int16 v24 = v7[2];
    if (v22 >= v24) {
      goto LABEL_52;
    }
    *((_BYTE *)v7 + v22 + 32) |= *(_BYTE *)(v6 + 32 + v22);
    uint64_t v25 = v22 + 1;
    if (v25 != v20)
    {
      uint64_t v26 = v25 - 1;
      if (v26 == v20 - 1) {
        goto LABEL_53;
      }
      uint64_t v22 = v26 + 1;
      if (v22 != v21) {
        continue;
      }
    }

    uint64_t v27 = v7;
    uint64_t v21 = v23;
    if (v24 >= v23) {
      goto LABEL_3;
    }
    goto LABEL_42;
  }

        int64_t v17 = v66 + 1;
        if (v17 == v65) {
          goto LABEL_32;
        }
      }

      while ((v16 & 0x8000000000000000LL) == 0 && (uint64_t)v16 < v61);
    }
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  uint64_t result = swift_unexpectedError(v1, "Swift/Dictionary.swift", 22LL, 1LL);
  __break(1u);
  return result;
}

  int v23 = 2;
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v23,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

void sub_10000E2D4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *((void *)a1 + 1);
  unint64_t v6 = *((void *)a1 + 2);
  unint64_t v8 = *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16);
  swift_bridgeObjectRetain(v6);
  WiFiAddress.ipv6LinkLocalAddress.getter(v8);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  if (v15)
  {
    unint64_t v16 = (void *)v15;
    DNSRecords.BrowseHost.keyData.getter(27LL, v7, v6);
    uint64_t v18 = v17;
    unint64_t v20 = v19;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000208D8(v18, v20);
    v26[0] = v10;
    v26[1] = v12;
    uint64_t v22 = sub_1000EF854((uint64_t)v26, (uint64_t)&v27);
    unint64_t v24 = v23;
    Class v25 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000208D8(v22, v24);
    [v16 handleEventType:3 keyData:isa valueData:v25];
    swift_bridgeObjectRelease(v6);

    swift_unknownObjectRelease(v16);
  }

  else
  {
    swift_bridgeObjectRelease(v6);
  }

  swift_bridgeObjectRelease(v14);
}

Swift::Void __swiftcall BonjourOffload.stopAllServices()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  unint64_t v113 = *(void *)(v5 - 8);
  uint64_t v114 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3,  v4,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t v9 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v107 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v107 - v14;
  unint64_t v16 = (void (*)(char *, char *))*((void *)v3 + 8);
  v115 = v2;
  v116 = v4;
  v16(v4, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    v107 = v7;
    uint64_t v110 = v13;
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    uint64_t v18 = v15;
    v17(v15, v12, AssociatedTypeWitness);
    unint64_t v19 = (uint64_t (*)(char *, char *))*((void *)v3 + 5);
    unint64_t v20 = v115;
    uint64_t v21 = v116;
    uint64_t v22 = v19(v116, v3);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v26);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v21,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
    uint64_t v28 = AssociatedTypeWitness;
    uint64_t v29 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    unint64_t v108 = sub_100004DEC();
    uint64_t v109 = v29;
    LOBYTE(v24) = Dictionary.isEmpty.getter(v22, &type metadata for DNSRecords.Identifier, v29, v108);
    __n128 v30 = swift_bridgeObjectRelease(v22);
    uint64_t v31 = (uint64_t (*)(char *, char *, __n128))v19;
    uint64_t v32 = v20;
    uint64_t v33 = v21;
    if ((v24 & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v34 = ((uint64_t (*)(char *, char *, __n128))v19)(v21, v3, v30);
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v40);
    uint64_t v41 = *(void *)(v36 + 16);
    __n128 v30 = swift_bridgeObjectRelease(v36);
    if (v41) {
      goto LABEL_8;
    }
    uint64_t v42 = v31(v33, v3, v30);
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v42);
    uint64_t v48 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  v28,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    unint64_t v49 = sub_100004E30();
    LOBYTE(v48) = Dictionary.isEmpty.getter(v46, &type metadata for DNSRecords.PTR, v48, v49);
    __n128 v30 = swift_bridgeObjectRelease(v46);
    if ((v48 & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v50 = v31(v33, v3, v30);
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v50);
    uint64_t v56 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  v28,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    LOBYTE(v50) = Dictionary.isEmpty.getter(v54, &type metadata for DNSRecords.PTR, v56, v49);
    __n128 v30 = swift_bridgeObjectRelease(v54);
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v18, v28);
    }

    else
    {
LABEL_8:
      v112 = v18;
      v118[0] = v32;
      uint64_t v57 = v107;
      uint64_t v58 = (*(uint64_t (**)(char *, __n128))(*((void *)v3 + 1) + 8LL))(v33, v30);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.error.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "Clearing all services because client was invalidated",  v61,  2u);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v113 + 8))(v57, v114);
      uint64_t v62 = ((uint64_t (*)(char *, char *))v31)(v33, v3);
      uint64_t v64 = v63;
      uint64_t v66 = v65;
      uint64_t v68 = v67;
      uint64_t v111 = v28;
      uint64_t v69 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  v28,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
      unint64_t v70 = sub_100004E30();
      unint64_t v113 = v70;
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v62);
      v118[0] = v68;
      uint64_t v71 = type metadata accessor for Dictionary.Values(0LL, &type metadata for DNSRecords.PTR, v69, v70);
      uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v71);
      uint64_t v114 = v69;
      uint64_t v73 = Array.init<A>(_:)(v118, v69, v71, WitnessTable);
      v118[0] = v73;
      __chkstk_darwin();
      *(&v107 - 4) = v33;
      *(&v107 - 3) = v3;
      uint64_t v74 = v112;
      *(&v107 - 2) = v112;
      uint64_t v75 = type metadata accessor for Array(0LL, v69);
      uint64_t v76 = swift_getWitnessTable(&protocol conformance descriptor for [A], v75);
      Sequence.forEach(_:)(sub_1000207F8, &v107 - 6, v75, v76);
      __n128 v77 = swift_bridgeObjectRelease(v73);
      uint64_t v78 = v31(v33, v3, v77);
      uint64_t v80 = v79;
      uint64_t v82 = v81;
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v80);
      swift_bridgeObjectRelease(v82);
      uint64_t v120 = v78;
      __chkstk_darwin();
      *(&v107 - 4) = v33;
      *(&v107 - 3) = v3;
      *(&v107 - 2) = v74;
      *(&v107 - 1) = v32;
      uint64_t v84 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.Identifier, v109, v108);
      uint64_t v85 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v84);
      Sequence.forEach(_:)(sub_100020814, &v107 - 6, v84, v85);
      __n128 v86 = swift_bridgeObjectRelease(v120);
      uint64_t v87 = v31(v33, v3, v86);
      uint64_t v89 = v88;
      uint64_t v91 = v90;
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v87);
      uint64_t v119 = v91;
      __chkstk_darwin();
      *(&v107 - 4) = v33;
      *(&v107 - 3) = v3;
      *(&v107 - 2) = v93;
      *(&v107 - 1) = v32;
      uint64_t v94 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  v111,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
      unint64_t v95 = v113;
      uint64_t v96 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v94, v113);
      uint64_t v97 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v96);
      Sequence.forEach(_:)(sub_100020830, &v107 - 6, v96, v97);
      __n128 v98 = swift_bridgeObjectRelease(v119);
      v99 = (uint64_t (*)(void *, char *, char *, __n128))*((void *)v3 + 7);
      v100 = (void (*)(void *, void))v99(v118, v33, v3, v98);
      Dictionary.removeAll(keepingCapacity:)(0);
      v100(v118, 0LL);
      v101 = (void (*)(void *, void))((uint64_t (*)(void *, char *, char *))v99)( v118,  v33,  v3);
      Dictionary.removeAll(keepingCapacity:)(0);
      v101(v118, 0LL);
      v102 = (void (*)(void *, void))((uint64_t (*)(void *, char *, char *))v99)( v118,  v33,  v3);
      type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v114, v95);
      Dictionary.removeAll(keepingCapacity:)(0);
      v102(v118, 0LL);
      v103 = (void (*)(void *, void, __n128))((uint64_t (*)(void *, char *, char *))v99)( v118,  v33,  v3);
      uint64_t v105 = v104;
      __n128 v106 = swift_bridgeObjectRelease(*(void *)(v104 + 8));
      *(void *)(v105 + 8) = _swiftEmptyDictionarySingleton;
      v103(v118, 0LL, v106);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v111);
    }
  }

uint64_t sub_10000EC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v11 = v9(a1, v10, AssociatedConformanceWitness);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = type metadata accessor for BonjourResolver(0LL);
    uint64_t v14 = swift_dynamicCastClass(v12, v13);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
      *(void *)(v14 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate) = 0LL;
      swift_unknownObjectRelease(v12);
      uint64_t v16 = v15;
    }

    else
    {
      uint64_t v16 = v12;
    }

    swift_unknownObjectRelease(v16);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 120))( a1,  v10,  AssociatedConformanceWitness);
}

uint64_t sub_10000ED24( uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  v31[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a5,  a4,  &protocol requirements base descriptor for BonjourOffload);
  unint64_t v32 = a5;
  v31[0] = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a5,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v10 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2( 0LL,  &type metadata for DNSRecords.Identifier,  v10,  "key value ",  0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)v31 - v13;
  uint64_t v15 = (uint64_t)a1 + *(int *)(v12 + 48);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v17 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v18 = v16(v15, v17, AssociatedConformanceWitness);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = type metadata accessor for BonjourBrowser(0LL);
    uint64_t v21 = swift_dynamicCastClass(v19, v20);
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
      *(void *)(v21 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate) = 0LL;
      swift_unknownObjectRelease(v19);
      uint64_t v23 = v22;
    }

    else
    {
      uint64_t v23 = v19;
    }

    swift_unknownObjectRelease(v23);
  }

  uint64_t v24 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v26 = *a1;
  uint64_t v25 = a1[1];
  char v27 = *((_BYTE *)a1 + 16);
  char v28 = *((_BYTE *)a1 + 17);
  *(void *)uint64_t v14 = v26;
  *((void *)v14 + 1) = v25;
  v14[16] = v27;
  v14[17] = v28;
  uint64_t v29 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v24, v15, v10);
  uint64_t v36 = &type metadata for DNSRecords.Identifier;
  uint64_t v37 = &protocol witness table for DNSRecords.Identifier;
  v33[0] = v26;
  v33[1] = v25;
  char v34 = v27;
  char v35 = v28;
  swift_bridgeObjectRetain(v25);
  BonjourOffload.stopBrowsing(record:)((uint64_t)v33, v31[0], v32);
  sub_100002AC4(v33);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v24, v10);
}

uint64_t BonjourOffload.stopBrowsing(record:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v148 = a1;
  sub_100002274(&qword_100404DB0);
  __chkstk_darwin();
  v125 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v10 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v127 = type metadata accessor for Optional(0LL, v10);
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin();
  v124 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v128 = (char *)&v118 - v12;
  v131 = (void (*)(char *, void *))v10;
  uint64_t v130 = *(void *)(v10 - 8);
  __chkstk_darwin();
  v129 = (char *)&v118 - v13;
  uint64_t v144 = AssociatedConformanceWitness;
  uint64_t v14 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v140 = type metadata accessor for Optional(0LL, v14);
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin();
  v133 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v141 = (char *)&v118 - v16;
  uint64_t v146 = v14;
  uint64_t v142 = *(void *)(v14 - 8);
  __chkstk_darwin();
  v132 = (char *)&v118 - v17;
  v147 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v145 = *(v147 - 1);
  __chkstk_darwin();
  v135 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v134 = (char *)&v118 - v19;
  __chkstk_darwin();
  v149 = (char *)&v118 - v20;
  uint64_t v21 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v118 - v23;
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  char v27 = (char *)&v118 - v26;
  (*(void (**)(unint64_t, unint64_t))(a3 + 64))(a2, a3);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v24, AssociatedTypeWitness);
  uint64_t v157 = v4;
  uint64_t v29 = *(void (**)(unint64_t))(*(void *)(a3 + 8) + 8LL);
  uint64_t v120 = *(void *)(a3 + 8);
  v29(a2);
  uint64_t v30 = v148;
  sub_10002084C(v148, (uint64_t)&v157);
  uint64_t v31 = swift_unknownObjectRetain_n(v4, 4LL);
  unint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.info.getter();
  int v122 = v33;
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v123 = AssociatedTypeWitness;
  v138 = v27;
  uint64_t v136 = v25;
  unint64_t v143 = a2;
  unint64_t v137 = a3;
  v121 = (void (*)(unint64_t, uint64_t))v29;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v119 = swift_slowAlloc(32LL, -1LL);
    uint64_t v153 = v119;
    *(_DWORD *)uint64_t v35 = 136315650;
    os_log_t v118 = v32;
    sub_10002084C((uint64_t)&v157, (uint64_t)&v162);
    uint64_t v36 = sub_100002274(&qword_100404DB8);
    uint64_t v37 = String.init<A>(describing:)(&v162, v36);
    unint64_t v39 = v38;
    uint64_t v162 = sub_10000235C(v37, v38, &v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
    swift_bridgeObjectRelease(v39);
    sub_100002AC4(&v157);
    *(_WORD *)(v35 + 12) = 2048;
    uint64_t v40 = *(uint64_t (**)(unint64_t, unint64_t))(a3 + 40);
    uint64_t v41 = v40(a2, a3);
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v45);
    unint64_t v47 = sub_100004DEC();
    uint64_t v48 = Dictionary.count.getter(v41, &type metadata for DNSRecords.Identifier, v146, v47);
    swift_unknownObjectRelease(v4);
    swift_bridgeObjectRelease(v41);
    uint64_t v162 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
    swift_unknownObjectRelease(v4);
    *(_WORD *)(v35 + 22) = 2048;
    uint64_t v49 = v40(a2, a3);
    uint64_t AssociatedTypeWitness = v123;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v50);
    uint64_t v56 = swift_getAssociatedTypeWitness( 0LL,  v144,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    unint64_t v57 = sub_100004E30();
    uint64_t v58 = Dictionary.count.getter(v54, &type metadata for DNSRecords.PTR, v56, v57);
    swift_unknownObjectRelease(v4);
    swift_bridgeObjectRelease(v54);
    uint64_t v162 = v58;
    uint64_t v59 = v148;
    uint64_t v25 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
    swift_unknownObjectRelease(v4);
    os_log_t v60 = v118;
    _os_log_impl( (void *)&_mh_execute_header,  v118,  (os_log_type_t)v122,  "Stopping browse for %s (browses: %ld, advertises: %ld)",  (uint8_t *)v35,  0x20u);
    uint64_t v61 = v119;
    swift_arrayDestroy(v119, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    uint64_t v59 = v30;
    swift_unknownObjectRelease_n(v4, 2LL);
    sub_100002AC4(&v157);

    swift_unknownObjectRelease_n(v4, 2LL);
  }

  uint64_t v62 = *(void (**)(char *, void *))(v145 + 8);
  v62(v149, v147);
  sub_10002084C(v59, (uint64_t)&v162);
  uint64_t v63 = sub_100002274(&qword_100404DB8);
  if (!swift_dynamicCast(&v153, &v162, v63, &type metadata for DNSRecords.Identifier, 0LL))
  {
    int v96 = swift_dynamicCast(&v157, &v162, v63, &type metadata for DNSRecords.Browse, 0LL);
    uint64_t v97 = v138;
    if (v96) {
      __asm { BR              X10 }
    }

    int v98 = swift_dynamicCast(&v157, &v162, v63, &type metadata for DNSRecords.BrowseHost, 0LL);
    unint64_t v99 = v143;
    unint64_t v100 = v137;
    if (v98) {
      __asm { BR              X10 }
    }

    if (swift_dynamicCast(&v157, &v162, v63, &type metadata for DNSRecords.ARPABrowse, 0LL))
    {
      swift_bridgeObjectRelease(v161);
    }

    else
    {
      uint64_t v148 = v4;
      uint64_t v157 = v4;
      __n128 v106 = v135;
      v121(v99, v120);
      v107 = v106;
      uint64_t v108 = sub_10002084C(v59, (uint64_t)&v157);
      uint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
      os_log_type_t v110 = static os_log_type_t.error.getter(v109);
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v112 = swift_slowAlloc(32LL, -1LL);
        v131 = v62;
        uint64_t v113 = v112;
        v150[0] = v112;
        *(_DWORD *)uint64_t v111 = 136315138;
        sub_10002084C((uint64_t)&v157, (uint64_t)&v153);
        uint64_t v114 = String.init<A>(describing:)(&v153, v63);
        unint64_t v116 = v115;
        uint64_t v153 = sub_10000235C(v114, v115, v150);
        uint64_t v97 = v138;
        uint64_t v25 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154);
        swift_bridgeObjectRelease(v116);
        sub_100002AC4(&v157);
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "Failed to stop browsing for record %s", v111, 0xCu);
        swift_arrayDestroy(v113, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v113, -1LL, -1LL);
        v117 = v111;
        unint64_t v100 = v137;
        swift_slowDealloc(v117, -1LL, -1LL);

        unint64_t v99 = v143;
        v131(v135, v147);
      }

      else
      {
        sub_100002AC4(&v157);

        v62(v107, v147);
        unint64_t v99 = v143;
      }
    }

    goto LABEL_25;
  }

  v131 = v62;
  uint64_t v65 = v153;
  unint64_t v64 = v154;
  int v66 = v155;
  int v67 = v156;
  unint64_t v68 = v137;
  uint64_t v69 = *(uint64_t (**)(unint64_t, unint64_t))(v137 + 40);
  swift_bridgeObjectRetain(v154);
  uint64_t v70 = v69(v143, v68);
  uint64_t v72 = v71;
  uint64_t v148 = v4;
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v145 = v65;
  uint64_t v157 = v65;
  v158 = (char *)v64;
  LODWORD(v135) = v66;
  char v159 = v66;
  LODWORD(v130) = v67;
  char v160 = v67;
  unint64_t v77 = sub_100004DEC();
  uint64_t v78 = v141;
  uint64_t v79 = v146;
  Dictionary.subscript.getter(&v157, v70, &type metadata for DNSRecords.Identifier, v146);
  v149 = (char *)v64;
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v72);
  __n128 v80 = swift_bridgeObjectRelease(v70);
  uint64_t v81 = v142;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v142 + 48))(v78, 1LL, v79, v80) != 1)
  {
    v101 = v132;
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v132, v78, v79);
    uint64_t AssociatedTypeWitness = v123;
    (*(void (**)(char *, uint64_t))(v144 + 48))(v101, v123);
    v150[0] = v145;
    v150[1] = (uint64_t)v149;
    char v151 = (char)v135;
    char v152 = v130;
    unint64_t v102 = v137;
    unint64_t v103 = v143;
    v147 = (void *)(*(uint64_t (**)(uint64_t *, unint64_t, unint64_t))(v137 + 56))( &v157,  v143,  v137);
    uint64_t v104 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.Identifier, v79, v77);
    uint64_t v105 = v133;
    Dictionary.removeValue(forKey:)(v150, v104);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v105, v140);
    ((void (*)(uint64_t *, void))v147)(&v157, 0LL);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v101, v79);
    swift_bridgeObjectRelease(v149);
    uint64_t v25 = v136;
    unint64_t v99 = v103;
    unint64_t v100 = v102;
    uint64_t v97 = v138;
LABEL_25:
    sub_100002AC4(&v162);
    sub_10000DB4C(v99, v100);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v97, AssociatedTypeWitness);
  }

  uint64_t v82 = v145;
  (*(void (**)(char *, uint64_t))(v139 + 8))(v78, v140);
  uint64_t v157 = v148;
  uint64_t v83 = v134;
  v121(v143, v120);
  uint64_t v84 = swift_bridgeObjectRetain(v149);
  uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
  os_log_type_t v86 = static os_log_type_t.error.getter(v85);
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v88 = swift_slowAlloc(32LL, -1LL);
    v150[0] = v88;
    *(_DWORD *)uint64_t v87 = 136315138;
    uint64_t v89 = v149;
    uint64_t v157 = v82;
    v158 = v149;
    swift_bridgeObjectRetain_n(v149, 2LL);
    v90._countAndFlagsBits = 24366LL;
    v90._object = (void *)0xE200000000000000LL;
    String.append(_:)(v90);
    if ((_DWORD)v135) {
      uint64_t v91 = 7365749LL;
    }
    else {
      uint64_t v91 = 7365492LL;
    }
    unint64_t v92 = 0xE300000000000000LL;
    String.append(_:)(*(Swift::String *)&v91);
    swift_bridgeObjectRelease(0xE300000000000000LL);
    v93._countAndFlagsBits = 46LL;
    v93._object = (void *)0xE100000000000000LL;
    String.append(_:)(v93);
    v94._countAndFlagsBits = 0x6C61636F6CLL;
    v94._object = (void *)0xE500000000000000LL;
    String.append(_:)(v94);
    swift_bridgeObjectRelease(v89);
    unint64_t v95 = (unint64_t)v158;
    uint64_t v157 = sub_10000235C(v157, (unint64_t)v158, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158);
    swift_bridgeObjectRelease_n(v89, 2LL);
    swift_bridgeObjectRelease(v95);
    _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "Cannot find browse for %s when attempting to stop it",  v87,  0xCu);
    swift_arrayDestroy(v88, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v88, -1LL, -1LL);
    swift_slowDealloc(v87, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v149, 2LL);
  }

  v131(v83, v147);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v123);
  return sub_100002AC4(&v162);
}

void sub_10000FE3C(uint64_t a1)
{
}

void sub_10000FE44()
{
}

void sub_10000FE74()
{
  int v7 = *(unsigned __int8 *)(v6 - 136);
  uint64_t v8 = *(void *)(v6 - 376);
  *(void *)(v6 - 280) = *(void *)(v8 + 40);
  uint64_t v9 = v0;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v1);
  *(void *)(v6 - 280) = (*(uint64_t (**)(void, uint64_t))(v6 - 280))(*(void *)(v6 - 328), v8);
  *(void *)(v6 - 288) = v10;
  *(void *)(v6 - 296) = v11;
  uint64_t v13 = v12;
  *(void *)(v6 - 216) = v3;
  *(void *)(v6 - 208) = v5;
  *(void *)(v6 - 304) = v9;
  *(void *)(v6 - 200) = v9;
  *(void *)(v6 - 192) = v1;
  *(_DWORD *)(v6 - 312) = v7;
  *(_BYTE *)(v6 - 184) = v7;
  *(_BYTE *)(v6 - 183) = v2;
  unint64_t v14 = sub_100004E30();
  uint64_t v15 = *(void *)(v6 - 448);
  uint64_t v16 = *(void *)(v6 - 424);
  *(void *)(v6 - 336) = v14;
  Dictionary.subscript.getter(v6 - 216, v13, &type metadata for DNSRecords.PTR, v16);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(*(void *)(v6 - 296));
  swift_bridgeObjectRelease(*(void *)(v6 - 288));
  swift_bridgeObjectRelease(*(void *)(v6 - 280));
  uint64_t v17 = *(void *)(v6 - 432);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    (*(void (**)(void, uint64_t))(*(void *)(v6 - 384) + 8LL))(*(void *)(v6 - 368), v4);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v5);
    JUMPOUT(0x10000FDB4LL);
  }

  *(void *)(v6 - 280) = v3;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  uint64_t v19 = *(void *)(v6 - 440);
  v18(v19, v15, v16);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 320) + 112LL))(v19, v4);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = type metadata accessor for BonjourResolver(0LL);
    uint64_t v23 = swift_dynamicCastClass(v21, v22);
    if (v23)
    {
      uint64_t v24 = v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
      swift_beginAccess( v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv,  v6 - 240,  0LL,  0LL);
      uint64_t v25 = v24;
      uint64_t v26 = *(void *)(v6 - 472);
      sub_1000226B0(v25, v26, &qword_100404DB0);
      uint64_t v27 = type metadata accessor for DNSRecords.SRV(0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v26, 1LL, v27) == 1)
      {
        sub_1000225EC(v26, &qword_100404DB0);
        (*(void (**)(void, uint64_t))(*(void *)(v6 - 320) + 120LL))(*(void *)(v6 - 440), v4);
        *(void *)(v6 - 216) = *(void *)(v6 - 280);
        *(void *)(v6 - 208) = v5;
        *(void *)(v6 - 200) = *(void *)(v6 - 304);
        *(void *)(v6 - 192) = v1;
        *(_BYTE *)(v6 - 184) = *(_DWORD *)(v6 - 312);
        *(_BYTE *)(v6 - 183) = v2;
        *(void *)(v6 - 280) = (*(uint64_t (**)(uint64_t, void, void))(*(void *)(v6 - 376) + 56LL))( v6 - 272,  *(void *)(v6 - 328),  *(void *)(v6 - 376));
        uint64_t v28 = type metadata accessor for Dictionary( 0LL,  &type metadata for DNSRecords.PTR,  *(void *)(v6 - 424),  *(void *)(v6 - 336));
        uint64_t v29 = *(void *)(v6 - 480);
        Dictionary.removeValue(forKey:)(v6 - 216, v28);
        swift_bridgeObjectRelease(v1);
        swift_bridgeObjectRelease(v5);
        (*(void (**)(uint64_t, void))(*(void *)(v6 - 464) + 8LL))(v29, *(void *)(v6 - 456));
        (*(void (**)(uint64_t, void))(v6 - 280))(v6 - 272, 0LL);
        swift_unknownObjectRelease(v21);
        (*(void (**)(void, void))(*(void *)(v6 - 432) + 8LL))( *(void *)(v6 - 440),  *(void *)(v6 - 424));
        JUMPOUT(0x10000FDF4LL);
      }

      swift_bridgeObjectRelease(v1);
      swift_bridgeObjectRelease(v5);
      swift_unknownObjectRelease(v21);
      sub_1000225EC(v26, &qword_100404DB0);
LABEL_10:
      (*(void (**)(void, void))(*(void *)(v6 - 432) + 8LL))( *(void *)(v6 - 440),  *(void *)(v6 - 424));
      JUMPOUT(0x10000FDB8LL);
    }

    swift_unknownObjectRelease(v21);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v5);
  goto LABEL_10;
}

uint64_t sub_100010264(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v47 = a3;
  sub_100002274(&qword_100404DB0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v45 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a5,  a4,  &protocol requirements base descriptor for BonjourOffload);
  unint64_t v48 = a5;
  unint64_t v46 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a5,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v15 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v16 = a1 + *(int *)(swift_getTupleTypeMetadata2(0LL, &type metadata for DNSRecords.PTR, v15, "key value ", 0LL) + 48);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v18 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t result = v17(v16, v18, AssociatedConformanceWitness);
  if (result)
  {
    uint64_t v20 = result;
    uint64_t v21 = type metadata accessor for BonjourAdvertiser(0LL);
    uint64_t v22 = swift_dynamicCastClass(v20, v21);
    if (!v22) {
      return swift_unknownObjectRelease(v20);
    }
    uint64_t v23 = v22;
    uint64_t v24 = v22 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo;
    swift_beginAccess( v22 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo,  v52,  0LL,  0LL);
    sub_1000226B0(v24, (uint64_t)v9, &qword_100404DB0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
    {
      sub_1000225EC((uint64_t)v9, &qword_100404DB0);
    }

    else
    {
      uint64_t v25 = v45;
      sub_100022628((uint64_t)v9, v45, type metadata accessor for DNSRecords.SRV);
      uint64_t v50 = (ValueMetadata *)v10;
      uint64_t v51 = &protocol witness table for DNSRecords.SRV;
      uint64_t v26 = sub_10002278C(v49);
      sub_1000210C0(v25, (uint64_t)v26);
      BonjourOffload.stopAdvertising(record:)((unint64_t)v49, v46, v48);
      sub_100020A2C(v25);
      sub_100002AC4(v49);
    }

    uint64_t v27 = (uint64_t *)(v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
    uint64_t v28 = *(void *)(v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8);
    if (v28)
    {
      uint64_t v30 = v27[5];
      unint64_t v29 = v27[6];
      uint64_t v31 = v27[3];
      unint64_t v32 = v27[4];
      uint64_t v33 = v27[2];
      uint64_t v34 = *v27;
      unint64_t v44 = v32 >> 8;
      uint64_t v45 = v34;
      uint64_t v50 = &type metadata for DNSRecords.TXT;
      uint64_t v51 = &protocol witness table for DNSRecords.TXT;
      uint64_t v35 = swift_allocObject(&unk_1003DD0C8, 72LL, 7LL);
      v49[0] = v35;
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = v28;
      *(void *)(v35 + 32) = v33;
      *(void *)(v35 + 40) = v31;
      *(_BYTE *)(v35 + 48) = v32 & 1;
      *(_BYTE *)(v35 + 49) = v44;
      *(void *)(v35 + 56) = v30;
      *(void *)(v35 + 64) = v29;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v31);
      sub_100020AFC(v30, v29);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v31);
      sub_100020AFC(v30, v29);
      BonjourOffload.stopAdvertising(record:)((unint64_t)v49, v46, v48);
      sub_10002091C(v45, v28, v33, v31, v32, v30, v29);
      sub_100002AC4(v49);
    }

    uint64_t v36 = v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service;
    uint64_t v37 = *(void *)(v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8);
    if (v37)
    {
      __int16 v38 = *(_WORD *)(v36 + 32);
      uint64_t v40 = *(void *)(v36 + 16);
      uint64_t v39 = *(void *)(v36 + 24);
      uint64_t v41 = *(void *)v36;
      uint64_t v50 = &type metadata for DNSRecords.PTR;
      uint64_t v51 = &protocol witness table for DNSRecords.PTR;
      uint64_t v42 = swift_allocObject(&unk_1003DD0A0, 50LL, 7LL);
      v49[0] = v42;
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = v37;
      *(void *)(v42 + 32) = v40;
      *(void *)(v42 + 40) = v39;
      *(_BYTE *)(v42 + 48) = v38 & 1;
      *(_BYTE *)(v42 + 49) = HIBYTE(v38);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v39);
      BonjourOffload.stopAdvertising(record:)((unint64_t)v49, v46, v48);
      swift_unknownObjectRelease(v20);
      return sub_100002AC4(v49);
    }

    else
    {
      return swift_unknownObjectRelease(v20);
    }
  }

  return result;
}

uint64_t BonjourOffload.stopAdvertising(record:)( unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v263 = a1;
  uint64_t v5 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v257 = v5;
  uint64_t v258 = v6;
  __chkstk_darwin();
  v256 = (char *)v233 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v253 = (uint64_t)v233 - v8;
  sub_100002274(&qword_100404DB0);
  __chkstk_darwin();
  uint64_t v242 = (uint64_t)v233 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v243 = (char *)v233 - v10;
  __chkstk_darwin();
  uint64_t v247 = (uint64_t)v233 - v11;
  unint64_t v265 = a2;
  unint64_t v266 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v13 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v14 = type metadata accessor for Optional(0LL, v13);
  uint64_t v249 = *(void *)(v14 - 8);
  uint64_t v250 = v14;
  __chkstk_darwin();
  v245 = (char *)v233 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v248 = (char *)v233 - v16;
  __chkstk_darwin();
  v252 = (char *)v233 - v17;
  uint64_t v18 = *(void *)(v13 - 8);
  uint64_t v259 = v13;
  uint64_t v260 = v18;
  __chkstk_darwin();
  v244 = (char *)v233 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v246 = (char *)v233 - v20;
  __chkstk_darwin();
  v251 = (char *)v233 - v21;
  uint64_t v255 = type metadata accessor for Logger(0LL);
  uint64_t v22 = *(void *)(v255 - 8);
  __chkstk_darwin();
  uint64_t v24 = (char *)v233 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v264 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))((char *)v233 - v25);
  uint64_t v26 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin();
  unint64_t v29 = (char *)v233 - v28;
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v32 = (char *)v233 - v31;
  (*(void (**)(unint64_t))(v266 + 64))(v265);
  v239 = v24;
  uint64_t v240 = v22;
  uint64_t v241 = v30;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v29, AssociatedTypeWitness);
  uint64_t v34 = v267;
  *(void *)&__int128 v277 = v267;
  uint64_t v35 = *(void *)(v266 + 8);
  uint64_t v36 = *(void (**)(unint64_t, uint64_t))(v35 + 8);
  unint64_t v37 = v265;
  v36(v265, v35);
  uint64_t v38 = v263;
  sub_10002084C(v263, (uint64_t)&v277);
  uint64_t v39 = swift_unknownObjectRetain_n(v34, 4LL);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.info.getter();
  int v42 = v41;
  BOOL v43 = os_log_type_enabled(v40, v41);
  v254 = v32;
  uint64_t v261 = AssociatedTypeWitness;
  v238 = v36;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v236 = swift_slowAlloc(32LL, -1LL);
    v276[0] = v236;
    *(_DWORD *)uint64_t v44 = 136315650;
    int v235 = v42;
    os_log_t v234 = v40;
    sub_10002084C((uint64_t)&v277, (uint64_t)&v272);
    uint64_t v45 = sub_100002274(&qword_100404DB8);
    uint64_t v46 = String.init<A>(describing:)(&v272, v45);
    unint64_t v48 = v47;
    *(void *)&__int128 v272 = sub_10000235C(v46, v47, v276);
    uint64_t v237 = v35;
    uint64_t v49 = v267;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
    swift_bridgeObjectRelease(v48);
    sub_100002AC4(&v277);
    *(_WORD *)(v44 + 12) = 2048;
    v233[1] = v44 + 14;
    unint64_t v50 = v266;
    uint64_t v51 = *(uint64_t (**)(unint64_t, unint64_t))(v266 + 40);
    uint64_t v52 = v51(v37, v266);
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v56);
    uint64_t v58 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  v261,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    unint64_t v59 = sub_100004DEC();
    uint64_t v60 = Dictionary.count.getter(v52, &type metadata for DNSRecords.Identifier, v58, v59);
    swift_unknownObjectRelease(v49);
    swift_bridgeObjectRelease(v52);
    *(void *)&__int128 v272 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
    swift_unknownObjectRelease(v49);
    *(_WORD *)(v44 + 22) = 2048;
    uint64_t v61 = v51(v37, v50);
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v61);
    unint64_t v67 = sub_100004E30();
    uint64_t v68 = v259;
    uint64_t v69 = Dictionary.count.getter(v65, &type metadata for DNSRecords.PTR, v259, v67);
    swift_unknownObjectRelease(v49);
    uint64_t v70 = v65;
    uint64_t v38 = v263;
    uint64_t v71 = v261;
    swift_bridgeObjectRelease(v70);
    *(void *)&__int128 v272 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
    uint64_t v72 = v49;
    uint64_t v35 = v237;
    swift_unknownObjectRelease(v72);
    os_log_t v73 = v234;
    _os_log_impl( (void *)&_mh_execute_header,  v234,  (os_log_type_t)v235,  "Stopping advertise for %s (browses: %ld, advertises: %ld)",  (uint8_t *)v44,  0x20u);
    uint64_t v74 = v236;
    swift_arrayDestroy(v236, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);

    uint64_t v75 = *(void (**)(uint64_t (*)(__int128 *, unint64_t, unint64_t), uint64_t))(v240 + 8);
    v75(v264, v255);
  }

  else
  {
    uint64_t v71 = AssociatedTypeWitness;
    uint64_t v76 = v267;
    swift_unknownObjectRelease_n(v267, 2LL);
    sub_100002AC4(&v277);

    swift_unknownObjectRelease_n(v76, 2LL);
    uint64_t v75 = *(void (**)(uint64_t (*)(__int128 *, unint64_t, unint64_t), uint64_t))(v240 + 8);
    v75(v264, v255);
    uint64_t v68 = v259;
  }

  uint64_t v78 = v257;
  uint64_t v77 = v258;
  uint64_t v79 = (uint64_t)v256;
  sub_10002084C(v38, (uint64_t)v276);
  uint64_t v80 = sub_100002274(&qword_100404DB8);
  if (!swift_dynamicCast(&v272, v276, v80, &type metadata for DNSRecords.PTR, 0LL))
  {
    uint64_t v91 = v253;
    if (swift_dynamicCast(v253, v276, v80, v78, 0LL))
    {
      sub_100022628(v91, v79, type metadata accessor for DNSRecords.SRV);
      uint64_t v92 = *(void *)(v79 + 8);
      uint64_t v93 = *(void *)(v79 + 16);
      uint64_t v94 = *(void *)(v79 + 24);
      char v95 = *(_BYTE *)(v79 + 32);
      char v96 = *(_BYTE *)(v79 + 33);
      *(void *)&__int128 v277 = *(void *)v79;
      *((void *)&v277 + 1) = v92;
      *(void *)&__int128 v278 = v93;
      *((void *)&v278 + 1) = v94;
      LOBYTE(v279) = v95;
      BYTE1(v279) = v96;
      unint64_t v81 = v266;
      uint64_t v97 = v79;
      int v98 = *(uint64_t (**)(__int128 *, unint64_t, unint64_t))(v266 + 56);
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v94);
      unint64_t v83 = v265;
      v264 = v98;
      unint64_t v99 = (void (*)(__int128 *, void, __n128))v98(&v272, v265, v81);
      unint64_t v100 = sub_100004E30();
      uint64_t v101 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v68, v100);
      unint64_t v102 = v248;
      Dictionary.removeValue(forKey:)(&v277, v101);
      swift_bridgeObjectRelease(v94);
      __n128 v103 = swift_bridgeObjectRelease(v92);
      v99(&v272, 0LL, v103);
      uint64_t v104 = v260;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v102, 1LL, v68) == 1)
      {
        (*(void (**)(char *, uint64_t))(v249 + 8))(v102, v250);
        __int128 v105 = *(_OWORD *)(v97 + 16);
        __int128 v277 = *(_OWORD *)v97;
        __int128 v278 = v105;
        LOWORD(v279) = *(_WORD *)(v97 + 32);
        v268[0] = v277;
        __int128 v269 = v105;
        LOWORD(v270) = v279;
        __n128 v106 = *(uint64_t (**)(unint64_t, unint64_t))(v81 + 40);
        sub_1000209DC((uint64_t)v268);
        sub_1000209DC((uint64_t)&v269);
        uint64_t v107 = v106(v83, v81);
        uint64_t v109 = v108;
        uint64_t v111 = v110;
        uint64_t v113 = v112;
        if (*(void *)(v108 + 16) && (unint64_t v114 = sub_10001C214((uint64_t)&v277), (v115 & 1) != 0))
        {
          unint64_t v116 = (char *)*(id *)(*(void *)(v109 + 56) + 8 * v114);
          swift_bridgeObjectRelease(v113);
          swift_bridgeObjectRelease(v111);
          swift_bridgeObjectRelease(v109);
          swift_bridgeObjectRelease(v107);
          sub_100020A04((uint64_t)v268);
          sub_100020A04((uint64_t)&v269);
          uint64_t v117 = (uint64_t)v243;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v243, 1LL, 1LL, v257);
          uint64_t v118 = (uint64_t)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
          swift_beginAccess( &v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  &v272,  33LL,  0LL);
          sub_100020A68(v117, v118);
          swift_endAccess(&v272);
        }

        else
        {
          swift_bridgeObjectRelease(v113);
          swift_bridgeObjectRelease(v111);
          swift_bridgeObjectRelease(v109);
          swift_bridgeObjectRelease(v107);
          sub_100020A04((uint64_t)v268);
          sub_100020A04((uint64_t)&v269);
        }

        sub_100020A2C(v97);
        uint64_t v90 = v261;
        goto LABEL_64;
      }

      v168 = v246;
      (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v246, v102, v68);
      uint64_t v169 = AssociatedConformanceWitness;
      uint64_t v170 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))( v168,  v261,  AssociatedConformanceWitness);
      if (v170)
      {
        uint64_t v171 = v170;
        uint64_t v172 = type metadata accessor for BonjourAdvertiser(0LL);
        v173 = (char *)swift_dynamicCastClass(v171, v172);
        if (v173)
        {
          uint64_t v174 = (uint64_t)v243;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v243, 1LL, 1LL, v257);
          uint64_t v175 = (uint64_t)&v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
          swift_beginAccess( &v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  &v277,  33LL,  0LL);
          swift_unknownObjectRetain(v171);
          sub_100020A68(v174, v175);
          swift_endAccess(&v277);
          swift_unknownObjectRelease(v171);
          if (*(void *)&v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 8]
            || *(void *)&v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 8])
          {
            uint64_t v176 = (uint64_t)v256;
            __int128 v177 = *((_OWORD *)v256 + 1);
            __int128 v277 = *(_OWORD *)v256;
            __int128 v278 = v177;
            LOWORD(v279) = *((_WORD *)v256 + 16);
            v268[0] = v277;
            __int128 v269 = v177;
            LOWORD(v270) = v279;
            swift_unknownObjectRetain(v171);
            sub_1000209DC((uint64_t)v268);
            sub_1000209DC((uint64_t)&v269);
            v178 = (void (*)(__int128 *, void))v264(&v272, v83, v81);
            uint64_t v180 = v179;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v179 + 8));
            *(void *)&__int128 v281 = *(void *)(v180 + 8);
            *(void *)(v180 + 8) = 0x8000000000000000LL;
            sub_10001EF2C((uint64_t)v173, (uint64_t)&v277, isUniquelyReferenced_nonNull_native);
            uint64_t v182 = *(void *)(v180 + 8);
            *(void *)(v180 + 8) = v281;
            swift_bridgeObjectRelease(v182);
            sub_100020A04((uint64_t)v268);
            sub_100020A04((uint64_t)&v269);
            v178(&v272, 0LL);
            uint64_t v183 = v259;
          }

          else
          {
            uint64_t v183 = v259;
            uint64_t v176 = (uint64_t)v256;
          }

          v168 = v246;
          goto LABEL_53;
        }

        swift_unknownObjectRelease(v171);
      }

      else
      {
        v173 = 0LL;
      }

      uint64_t v183 = v259;
      uint64_t v176 = (uint64_t)v256;
LABEL_53:
      uint64_t v90 = v261;
      (*(void (**)(char *, uint64_t, uint64_t))(v169 + 80))(v168, v261, v169);

      (*(void (**)(char *, uint64_t))(v260 + 8))(v168, v183);
      sub_100020A2C(v176);
      goto LABEL_64;
    }

    if (!swift_dynamicCast(&v277, v276, v80, &type metadata for DNSRecords.TXT, 0LL))
    {
      if (swift_dynamicCast(&v272, v276, v80, &type metadata for DNSRecords.ARPA, 0LL))
      {
        __int128 v277 = v272;
        __int128 v278 = v273;
        __int128 v279 = v274;
        __int128 v280 = v275;
        (*(void (**)(__int128 *, uint64_t))(AssociatedConformanceWitness + 96))(&v277, v71);
        sub_1000208A4((uint64_t)&v277);
        unint64_t v83 = v265;
        unint64_t v81 = v266;
        uint64_t v90 = v71;
      }

      else
      {
        uint64_t v203 = v38;
        int v204 = swift_dynamicCast(&v277, v276, v80, &type metadata for DNSRecords.AAAA, 0LL);
        unint64_t v83 = v265;
        if (v204)
        {
          uint64_t v205 = *((void *)&v280 + 1);
          swift_bridgeObjectRelease(v278);
          swift_bridgeObjectRelease(v205);
        }

        else
        {
          *(void *)&__int128 v277 = v267;
          v215 = v239;
          v238(v265, v35);
          uint64_t v216 = sub_10002084C(v203, (uint64_t)&v277);
          v217 = (os_log_s *)Logger.logObject.getter(v216);
          os_log_type_t v218 = static os_log_type_t.error.getter(v217);
          if (os_log_type_enabled(v217, v218))
          {
            v219 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v220 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v269 = v220;
            *(_DWORD *)v219 = 136315138;
            sub_10002084C((uint64_t)&v277, (uint64_t)&v272);
            uint64_t v221 = String.init<A>(describing:)(&v272, v80);
            unint64_t v223 = v222;
            *(void *)&__int128 v272 = sub_10000235C(v221, v222, (uint64_t *)&v269);
            unint64_t v83 = v265;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
            swift_bridgeObjectRelease(v223);
            sub_100002AC4(&v277);
            _os_log_impl( (void *)&_mh_execute_header,  v217,  v218,  "Failed to stop advertising for record %s",  v219,  0xCu);
            swift_arrayDestroy(v220, 1LL, &type metadata for Any[8]);
            swift_slowDealloc(v220, -1LL, -1LL);
            swift_slowDealloc(v219, -1LL, -1LL);

            v224 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))v239;
          }

          else
          {
            sub_100002AC4(&v277);

            v224 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))v215;
          }

          v75(v224, v255);
        }

        unint64_t v81 = v266;
        uint64_t v90 = v71;
      }

      goto LABEL_64;
    }

    uint64_t v137 = *((void *)&v277 + 1);
    uint64_t v138 = *((void *)&v278 + 1);
    unint64_t v263 = v280;
    v264 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))*((void *)&v279 + 1);
    __int128 v272 = v277;
    __int128 v273 = v278;
    LOWORD(v274) = v279;
    __int128 v269 = v277;
    __int128 v270 = v278;
    __int16 v271 = v279;
    unint64_t v81 = v266;
    uint64_t v139 = *(char **)(v266 + 56);
    swift_bridgeObjectRetain(*((void *)&v277 + 1));
    swift_bridgeObjectRetain(v138);
    unint64_t v140 = v265;
    v256 = v139;
    v141 = (void (*)(_OWORD *, void, __n128))((uint64_t (*)(_OWORD *, unint64_t, unint64_t))v139)( v268,  v265,  v81);
    unint64_t v142 = sub_100004E30();
    uint64_t v143 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v68, v142);
    uint64_t v144 = v245;
    Dictionary.removeValue(forKey:)(&v269, v143);
    uint64_t v145 = v144;
    uint64_t v146 = v137;
    swift_bridgeObjectRelease(v138);
    __n128 v147 = swift_bridgeObjectRelease(v137);
    v141(v268, 0LL, v147);
    uint64_t v148 = v260;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v145, 1LL, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v249 + 8))(v145, v250);
      v149 = *(uint64_t (**)(unint64_t, unint64_t))(v81 + 40);
      swift_bridgeObjectRetain(v137);
      swift_bridgeObjectRetain(v138);
      uint64_t v150 = v149(v140, v81);
      uint64_t v152 = v151;
      uint64_t v154 = v153;
      uint64_t v156 = v155;
      if (*(void *)(v151 + 16) && (unint64_t v157 = sub_10001C214((uint64_t)&v272), (v158 & 1) != 0))
      {
        char v159 = (char *)*(id *)(*(void *)(v152 + 56) + 8 * v157);
        swift_bridgeObjectRelease(v138);
        swift_bridgeObjectRelease(v137);
        swift_bridgeObjectRelease(v156);
        swift_bridgeObjectRelease(v154);
        swift_bridgeObjectRelease(v152);
        swift_bridgeObjectRelease(v150);
        char v160 = &v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        uint64_t v161 = *(void *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        uint64_t v162 = *(void *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 8];
        uint64_t v163 = *(void *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 16];
        uint64_t v164 = *(void *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 24];
        uint64_t v165 = *(void *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 32];
        uint64_t v166 = *(void *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 40];
        unint64_t v167 = *(void *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 48];
        *(_OWORD *)char v160 = 0u;
        *((_OWORD *)v160 + 1) = 0u;
        *((_OWORD *)v160 + 2) = 0u;
        *((void *)v160 + 6) = 0LL;
        sub_10002091C(v161, v162, v163, v164, v165, v166, v167);
        swift_bridgeObjectRelease(v138);
        swift_bridgeObjectRelease(v137);
        sub_1000208D8((uint64_t)v264, v263);
      }

      else
      {
        swift_bridgeObjectRelease(v156);
        swift_bridgeObjectRelease(v154);
        swift_bridgeObjectRelease(v152);
        swift_bridgeObjectRelease(v150);
        swift_bridgeObjectRelease_n(v138, 2LL);
        swift_bridgeObjectRelease_n(v137, 2LL);
        sub_1000208D8((uint64_t)v264, v263);
      }

      unint64_t v83 = v265;
      unint64_t v81 = v266;
      uint64_t v90 = v261;
      goto LABEL_64;
    }

    v184 = v145;
    v185 = v244;
    (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v244, v184, v68);
    uint64_t v186 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v185, v261);
    if (v186)
    {
      uint64_t v187 = v186;
      uint64_t v188 = type metadata accessor for BonjourAdvertiser(0LL);
      uint64_t v189 = swift_dynamicCastClass(v187, v188);
      if (v189)
      {
        uint64_t v190 = v189 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo;
        uint64_t v191 = *(void *)(v189 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
        uint64_t v192 = *(void *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 8);
        uint64_t v193 = *(void *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 16);
        uint64_t v194 = *(void *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 24);
        v195 = (char *)v189;
        uint64_t v196 = *(void *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 32);
        uint64_t v255 = *(void *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 40);
        uint64_t v253 = *(void *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 48);
        *(_OWORD *)uint64_t v190 = 0u;
        *(_OWORD *)(v190 + 16) = 0u;
        *(_OWORD *)(v190 + 32) = 0u;
        *(void *)(v190 + 48) = 0LL;
        swift_unknownObjectRetain(v187);
        sub_10002091C(v191, v192, v193, v194, v196, v255, v253);
        uint64_t v197 = *(void *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
        uint64_t v198 = *(void *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 8];
        uint64_t v200 = *(void *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 16];
        uint64_t v199 = *(void *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 24];
        sub_10002097C(v197, v198, v200, v199);
        swift_unknownObjectRelease(v187);
        if (v198)
        {
          sub_1000209AC(v197, v198, v200, v199);
          unint64_t v81 = v266;
          uint64_t v68 = v259;
          v201 = v244;
          v202 = v195;
LABEL_62:
          swift_bridgeObjectRetain(v146);
          swift_bridgeObjectRetain(v138);
          id v229 = v202;
          v230 = (void (*)(__int128 *, void))((uint64_t (*)(__int128 *, unint64_t, unint64_t))v256)( &v269,  v265,  v81);
          sub_100013B7C((uint64_t)v202, (uint64_t)&v272);
          v230(&v269, 0LL);
          uint64_t v148 = v260;
          goto LABEL_63;
        }

        uint64_t v226 = (uint64_t)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
        swift_beginAccess( &v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  v268,  0LL,  0LL);
        uint64_t v227 = v226;
        uint64_t v225 = v242;
        sub_1000226B0(v227, v242, &qword_100404DB0);
        int v228 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v258 + 48))(v225, 1LL, v257);
        unint64_t v81 = v266;
        uint64_t v68 = v259;
        uint64_t v148 = v260;
        v201 = v244;
        v202 = v195;
        if (v228 != 1)
        {
          sub_1000225EC(v225, &qword_100404DB0);
          goto LABEL_62;
        }

LABEL_59:
        sub_1000225EC(v225, &qword_100404DB0);
LABEL_63:
        v231 = v201;
        v232 = v201;
        uint64_t v90 = v261;
        (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 80))(v231, v261);
        swift_bridgeObjectRelease(v138);
        swift_bridgeObjectRelease(v146);
        sub_1000208D8((uint64_t)v264, v263);

        (*(void (**)(char *, uint64_t))(v148 + 8))(v232, v68);
        unint64_t v83 = v265;
        goto LABEL_64;
      }

      swift_unknownObjectRelease(v187);
    }

    uint64_t v225 = v242;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v258 + 56))(v242, 1LL, 1LL, v78);
    v202 = 0LL;
    v201 = v244;
    goto LABEL_59;
  }

  __int128 v277 = v272;
  __int128 v278 = v273;
  LOWORD(v279) = v274;
  __int128 v269 = v272;
  __int128 v270 = v273;
  __int16 v271 = v274;
  unint64_t v81 = v266;
  uint64_t v82 = *(uint64_t (**)(__int128 *, unint64_t, unint64_t))(v266 + 56);
  unint64_t v83 = v265;
  uint64_t v84 = (void (*)(_OWORD *, void))v82(v268, v265, v266);
  unint64_t v85 = sub_100004E30();
  uint64_t v86 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v68, v85);
  uint64_t v87 = v252;
  Dictionary.removeValue(forKey:)(&v269, v86);
  v84(v268, 0LL);
  uint64_t v88 = v260;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v87, 1LL, v68) != 1)
  {
    uint64_t v119 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
    uint64_t v120 = v251;
    v119(v251, v87, v68);
    uint64_t v121 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v120, v261);
    if (v121)
    {
      uint64_t v122 = v121;
      uint64_t v123 = type metadata accessor for BonjourAdvertiser(0LL);
      uint64_t v124 = swift_dynamicCastClass(v122, v123);
      if (v124)
      {
        v125 = (char *)v124;
        uint64_t v126 = v124 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service;
        uint64_t v127 = *(void *)(v124 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service);
        uint64_t v128 = *(void *)(v124
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                         + 8);
        uint64_t v129 = *(void *)(v124
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                         + 16);
        uint64_t v130 = *(void *)(v124
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                         + 24);
        *(_OWORD *)uint64_t v126 = 0u;
        *(_OWORD *)(v126 + 16) = 0u;
        *(_WORD *)(v126 + 32) = 0;
        swift_unknownObjectRetain(v122);
        sub_1000209AC(v127, v128, v129, v130);
        uint64_t v131 = *(void *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        uint64_t v132 = *(void *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 8];
        uint64_t v133 = *(void *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 16];
        uint64_t v134 = *(void *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 24];
        uint64_t v135 = *(void *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 32];
        unint64_t v136 = *(void *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 48];
        v264 = *(uint64_t (**)(__int128 *, unint64_t, unint64_t))&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                                                                                             + 40];
        sub_100020AB0(v131, v132, v133, v134, v135, (uint64_t)v264, v136);
        swift_unknownObjectRelease(v122);
        if (v132)
        {
          sub_10002091C(v131, v132, v133, v134, v135, (uint64_t)v264, v136);
          unint64_t v83 = v265;
          unint64_t v81 = v266;
          uint64_t v68 = v259;
LABEL_47:
          v207 = v251;
          v211 = v125;
          v212 = (void (*)(__int128 *, void))v82(&v269, v83, v81);
          sub_100013B7C((uint64_t)v125, (uint64_t)&v277);
          v212(&v269, 0LL);
          goto LABEL_48;
        }

        v208 = &v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
        swift_beginAccess( &v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  v268,  0LL,  0LL);
        uint64_t v209 = (uint64_t)v208;
        uint64_t v206 = v247;
        sub_1000226B0(v209, v247, &qword_100404DB0);
        int v210 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v258 + 48))(v206, 1LL, v257);
        unint64_t v83 = v265;
        unint64_t v81 = v266;
        uint64_t v68 = v259;
        if (v210 != 1)
        {
          sub_1000225EC(v206, &qword_100404DB0);
          goto LABEL_47;
        }

            char v160 = (id)v342;
            uint64_t v161 = Logger.logObject.getter(v160);
            v342 = v161;
            if (v33)
            {
              uint64_t v162 = static os_log_type_t.error.getter(v161);
              if (os_log_type_enabled((os_log_t)v342, (os_log_type_t)v162))
              {
                LODWORD(v339) = v162;
                v341 = v30;
                uint64_t v163 = swift_slowAlloc(42LL, -1LL);
                uint64_t v164 = (void *)swift_slowAlloc(8LL, -1LL);
                v340 = swift_slowAlloc(96LL, -1LL);
                *(void *)&v345[0] = v340;
                *(_DWORD *)uint64_t v163 = 138413058;
                *(void *)&v355 = v160;
                uint64_t v165 = v160;
                LODWORD(v335) = v33;
                uint64_t v166 = v165;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                ObjectType = (uint64_t)v164;
                *uint64_t v164 = v160;

                *(_WORD *)(v163 + 12) = 2080;
                unint64_t v167 = NANManagementFrameType.description.getter(v32);
                uint64_t v169 = v168;
                *(void *)&v355 = sub_10000235C(v167, v168, (uint64_t *)v345);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                swift_bridgeObjectRelease(v169);
                *(_WORD *)(v163 + 22) = 2080;
                uint64_t v170 = 0xE700000000000000LL;
                uint64_t v171 = 0x646570706F7264LL;
                if ((_DWORD)v335 != 2)
                {
                  uint64_t v171 = 0xD000000000000010LL;
                  uint64_t v170 = 0x8000000100364C40LL;
                }

                if ((_DWORD)v335 == 1) {
                  uint64_t v172 = 0x756F2064656D6974LL;
                }
                else {
                  uint64_t v172 = v171;
                }
                if ((_DWORD)v335 == 1) {
                  v173 = 0xE900000000000074LL;
                }
                else {
                  v173 = v170;
                }
                *(void *)&v355 = sub_10000235C(v172, v173, (uint64_t *)v345);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                swift_bridgeObjectRelease(v173);
                *(_WORD *)(v163 + 32) = 2080;
                uint64_t v174 = *(void **)v34;
                uint64_t v175 = *((void *)v34 + 1);
                uint64_t v176 = v34[16];
                sub_10027BE18(*(void **)v34, v175, v176);

                __int128 v177 = sub_100271188((uint64_t)v174, v175, v176);
                uint64_t v179 = v178;
                sub_10027BE5C(v174, v175, v176);
                *(void *)&v355 = sub_10000235C(v177, v179, (uint64_t *)v345);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);

                swift_bridgeObjectRelease(v179);
                uint64_t v180 = (id)v342;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v342,  (os_log_type_t)v339,  "%@ failed to transmit frame %s with status %s in %s",  (uint8_t *)v163,  0x2Au);
                v181 = sub_100002274(&qword_100404DE0);
                uint64_t v182 = ObjectType;
                swift_arrayDestroy(ObjectType, 1LL, v181);
                swift_slowDealloc(v182, -1LL, -1LL);
                uint64_t v183 = v340;
                swift_arrayDestroy(v340, 3LL, &type metadata for Any[8]);
                swift_slowDealloc(v183, -1LL, -1LL);
                swift_slowDealloc(v163, -1LL, -1LL);

                uint64_t v30 = v341;
                return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
              }
            }

            else
            {
              uint64_t v199 = static os_log_type_t.default.getter();
              uint64_t v200 = v199;
              if (os_log_type_enabled((os_log_t)v342, v199))
              {
                v201 = swift_slowAlloc(32LL, -1LL);
                v340 = swift_slowAlloc(8LL, -1LL);
                v339 = swift_slowAlloc(64LL, -1LL);
                *(void *)&v345[0] = v339;
                *(_DWORD *)v201 = 138412802;
                v341 = v30;
                *(void *)&v355 = v160;
                v202 = v160;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                *(void *)v340 = v160;
                v335 = (uint64_t)v202;

                LODWORD(ObjectType) = v200;
                *(_WORD *)(v201 + 12) = 2080;
                uint64_t v203 = NANManagementFrameType.description.getter(v32);
                uint64_t v205 = v204;
                *(void *)&v355 = sub_10000235C(v203, v204, (uint64_t *)v345);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                swift_bridgeObjectRelease(v205);
                *(_WORD *)(v201 + 22) = 2080;
                uint64_t v206 = *(void **)v34;
                v207 = *((void *)v34 + 1);
                v208 = v34[16];
                sub_10027BE18(*(void **)v34, v207, v208);
                uint64_t v209 = (id)v335;

                int v210 = sub_100271188((uint64_t)v206, v207, v208);
                v212 = v211;
                v213 = v207;
                uint64_t v30 = v341;
                sub_10027BE5C(v206, v213, v208);
                *(void *)&v355 = sub_10000235C(v210, v212, (uint64_t *)v345);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);

                swift_bridgeObjectRelease(v212);
                v214 = (id)v342;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v342,  (os_log_type_t)ObjectType,  "%@ successfully transmitted frame %s in %s",  (uint8_t *)v201,  0x20u);
                v215 = sub_100002274(&qword_100404DE0);
                uint64_t v216 = v340;
                swift_arrayDestroy(v340, 1LL, v215);
                swift_slowDealloc(v216, -1LL, -1LL);
                v217 = v339;
                swift_arrayDestroy(v339, 2LL, &type metadata for Any[8]);
                swift_slowDealloc(v217, -1LL, -1LL);
                swift_slowDealloc(v201, -1LL, -1LL);

                return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
              }
            }

            return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
          }

          if (v32 != 4) {
            goto LABEL_59;
          }
          if (!*(_BYTE *)(v31 + 8)) {
            goto LABEL_86;
          }
          uint64_t v146 = *(void *)v34;
          __n128 v147 = (id)v342;
          uint64_t v148 = (os_log_s *)Logger.logObject.getter(v147);
          v149 = static os_log_type_t.error.getter(v148);
          if (os_log_type_enabled(v148, (os_log_type_t)v149))
          {
            LODWORD(v339) = v149;
            v341 = v148;
            v342 = v146;
            uint64_t v150 = swift_slowAlloc(32LL, -1LL);
            ObjectType = swift_slowAlloc(8LL, -1LL);
            v340 = swift_slowAlloc(32LL, -1LL);
            *(void *)&v345[0] = v340;
            *(_DWORD *)uint64_t v150 = 138412802;
            *(void *)&v355 = v147;
            uint64_t v151 = v147;
            uint64_t v152 = (void *)ObjectType;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
            *uint64_t v152 = v147;

            *(_WORD *)(v150 + 12) = 2080;
            uint64_t v153 = 0xE700000000000000LL;
            uint64_t v154 = 0x646570706F7264LL;
            if (v33 != 2)
            {
              uint64_t v154 = 0xD000000000000010LL;
              uint64_t v153 = 0x8000000100364C40LL;
            }

            if (v33 == 1) {
              uint64_t v155 = 0x756F2064656D6974LL;
            }
            else {
              uint64_t v155 = v154;
            }
            if (v33 == 1) {
              uint64_t v156 = 0xE900000000000074LL;
            }
            else {
              uint64_t v156 = v153;
            }
            *(void *)&v355 = sub_10000235C(v155, v156, (uint64_t *)v345);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
            swift_bridgeObjectRelease(v156);
            *(_WORD *)(v150 + 22) = 2048;
            uint64_t v146 = v342;
            *(void *)&v355 = v342;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
            unint64_t v157 = v341;
            _os_log_impl( (void *)&_mh_execute_header,  v341,  (os_log_type_t)v339,  "%@ failed to send datapath request, with status %s, for retry #%ld",  (uint8_t *)v150,  0x20u);
            char v158 = sub_100002274(&qword_100404DE0);
            swift_arrayDestroy(v152, 1LL, v158);
            swift_slowDealloc(v152, -1LL, -1LL);
            char v159 = v340;
            swift_arrayDestroy(v340, 1LL, &type metadata for Any[8]);
            swift_slowDealloc(v159, -1LL, -1LL);
            swift_slowDealloc(v150, -1LL, -1LL);
          }

          else
          {
          }

          uint64_t v257 = v329;
          v256 = v330;
          uint64_t v258 = (void **)v327;
          uint64_t v259 = v328;
          type metadata accessor for P2PTimer(0LL);
          *(void *)uint64_t v259 = v146;
          (*(void (**)(os_log_t, void, uint64_t))(v257 + 104))( v259,  enum case for DispatchTimeInterval.seconds(_:),  v256);
          uint64_t v260 = *v258;
          uint64_t v261 = swift_allocObject(&unk_1003F4E80, 24LL, 7LL);
          swift_unknownObjectWeakInit(v261 + 16, v147);
          v262 = (void *)swift_allocObject(&unk_1003F4EA8, 40LL, 7LL);
          unint64_t v263 = v337;
          v262[2] = v336;
          v262[3] = v263;
          v262[4] = v261;
          v264 = v260;
          swift_retain();
          static P2PTimer.async(after:on:execute:)((uint64_t)v259, v264, (uint64_t)sub_10027D2C0, (uint64_t)v262);

          swift_release(v262);
          (*(void (**)(os_log_t, uint64_t))(v257 + 8))(v259, v256);
          swift_release(v261);
          return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
        case 6u:
          v341 = v21;
          uint64_t v97 = NANBitmap.Channel.operatingClass.getter(v353);
          v340 = *(unsigned __int8 *)(v97 + 8);
          int v98 = *(unsigned __int8 *)(v97 + 9);
          unint64_t v99 = *(unsigned __int8 *)(v97 + 10);
          unint64_t v100 = *(unsigned __int8 *)(v97 + 11);
          uint64_t v101 = *(unsigned __int8 *)(v97 + 12);
          v339 = *(unsigned __int8 *)(v97 + 13);
          unint64_t v102 = *(void *)(v97 + 24);
          sub_100058090(&v351, v345);
          __n128 v103 = *(void *)(NANBitmap.Channel.operatingClass.getter(v345) + 24);
          swift_bridgeObjectRetain(v103);
          uint64_t v104 = (__int128 *)v335;
          Array<A>.retrieve(attribute:)(41, v102, v335);
          sub_1001074E8( (uint64_t)&v351,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          __int128 v105 = type metadata accessor for NANAttribute(0LL);
          __n128 v106 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 48LL);
          if (v106(v104, 1LL, v105) == 1)
          {
            sub_1000225EC((uint64_t)v104, &qword_10040D440);
          }

          else
          {
            if (swift_getEnumCaseMultiPayload(v104, v105) == 36)
            {
              uint64_t v135 = v104[1];
              v355 = *v104;
              v356 = v135;
              unint64_t v136 = v104[3];
              v357[0] = v104[2];
              v357[1] = v136;
              uint64_t v137 = NANAttribute.Datapath.status.getter();
              v337 = v102;
              if (v137 == 3)
              {
                ObjectType = 0LL;
                v336 = 0LL;
                uint64_t v138 = v342;
              }

              else
              {
                v346 = 0LL;
                v347[0] = 0xE000000000000000LL;
                uint64_t v138 = v342;
                if (v137)
                {
                  if (v137 == 1) {
                    v251 = 0x6465747065636361LL;
                  }
                  else {
                    v251 = 0x64657463656A6572LL;
                  }
                  v252 = 0xE800000000000000LL;
                }

                else
                {
                  v252 = 0xE900000000000064LL;
                  v251 = 0x65756E69746E6F63LL;
                }

                unint64_t v265 = v252;
                String.append(_:)(*(Swift::String *)&v251);
                swift_bridgeObjectRelease(v252);
                ObjectType = v346;
                v336 = (char *)v347[0];
              }

              sub_1000586C0((uint64_t)v357 + 8, (uint64_t)&v346, (uint64_t *)&unk_10040DCD0);
              unint64_t v266 = v138 + qword_10040DA90;
              uint64_t v267 = *(void *)(v138 + qword_10040DA90);
              v268 = *(void *)(v266 + 8);
              __int128 v269 = *(void *)(v266 + 16);
              sub_1000586C0((uint64_t)&v346, v266, (uint64_t *)&unk_10040DCD0);
              sub_10027D1FC((uint64_t)&v346);
              sub_1001062E0(v267, v268, v269);
              sub_1000586C0((unint64_t)&v355 | 0xD, (uint64_t)v358, &qword_10040A8F8);
              sub_1000586C0((uint64_t)v358, v342 + qword_100410AD0, &qword_10040A8F8);
              sub_1000586C0((uint64_t)&v356 + 8, (uint64_t)v350, &qword_10040DCE0);
              __int128 v270 = *(void *)(v342 + qword_10040DA98);
              __int16 v271 = *(void *)(v342 + qword_10040DA98 + 8);
              sub_1000586C0((uint64_t)v350, v342 + qword_10040DA98, &qword_10040DCE0);
              sub_10027D228((uint64_t)v350);
              uint64_t v198 = (_BYTE *)v342;
              sub_100020B40(v270, v271);
              sub_10027D254(&v355);
              uint64_t v197 = v336;
              unint64_t v102 = v337;
              goto LABEL_112;
            }

            sub_10005802C((uint64_t)v104, type metadata accessor for NANAttribute);
          }

          swift_bridgeObjectRetain(v103);
          v184 = v331;
          Array<A>.retrieve(attribute:)(16, v102, v331);
          sub_1001074E8( (uint64_t)&v351,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          if (v106((__int128 *)v184, 1LL, v105) == 1)
          {
            sub_1000225EC(v184, &qword_10040D440);
          }

          else
          {
            if (swift_getEnumCaseMultiPayload(v184, v105) == 16)
            {
              v185 = *(_DWORD *)(v184 + 13);
              uint64_t v186 = *(_WORD *)(v184 + 17);
              uint64_t v187 = v184;
              uint64_t v188 = *(_BYTE *)(v184 + 19);
              uint64_t v189 = *(void *)(v187 + 40);
              uint64_t v190 = v102;
              uint64_t v191 = v342;
              uint64_t v192 = (char *)(v342 + qword_10040DA90);
              uint64_t v193 = *(void *)(v342 + qword_10040DA90);
              uint64_t v194 = *(void *)(v342 + qword_10040DA90 + 8);
              v195 = *(void *)(v342 + qword_10040DA90 + 16);
              *(_OWORD *)uint64_t v192 = *(_OWORD *)(v187 + 24);
              *((void *)v192 + 2) = v189;
              sub_1001062E0(v193, v194, v195);
              ObjectType = 0LL;
              uint64_t v196 = v191 + qword_100410AD0;
              *(_WORD *)(v196 + 4) = v186;
              *(_DWORD *)uint64_t v196 = v185;
              *(_BYTE *)(v196 + 6) = v188;
              uint64_t v197 = 0LL;
              uint64_t v198 = (_BYTE *)v191;
              unint64_t v102 = v190;
              goto LABEL_112;
            }

            sub_10005802C(v184, type metadata accessor for NANAttribute);
          }

          ObjectType = 0LL;
          uint64_t v197 = 0LL;
          uint64_t v198 = (_BYTE *)v342;
LABEL_112:
          __int128 v273 = v339;
          __int128 v272 = v340;
          __int128 v274 = (unsigned int *)&v198[qword_100410AD0];
          if ((v198[qword_100410AD0 + 6] & 1) != 0)
          {
            LOBYTE(v275) = v340;
            LOBYTE(v276) = v98;
            LOBYTE(v277) = v99;
            LOBYTE(v278) = v100;
            LOBYTE(v279) = v101;
            __int128 v280 = v339;
          }

          else
          {
            __int128 v279 = *((unsigned __int16 *)v274 + 2);
            __int128 v275 = *v274;
            __int128 v281 = v275 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v274 + 2) << 32);
            v276 = v281 >> 8;
            __int128 v277 = v281 >> 16;
            __int128 v278 = v281 >> 24;
            __int128 v280 = v279 >> 8;
          }

          v282 = v275 | (unint64_t)(unsigned __int16)(v276 << 8) | ((unint64_t)v277 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v278 << 24);
          v283 = v282 | ((unint64_t)v279 << 32) | (v280 << 40);
          *__int128 v274 = v282;
          *((_WORD *)v274 + 2) = WORD2(v283);
          *((_BYTE *)v274 + 6) = 0;
          v284 = v272 | (v98 << 8) | (v99 << 16) | (v100 << 24) | (v101 << 32) | (v273 << 40);
          if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v283, v284))
          {
            sub_1001074E8( (uint64_t)&v351,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          }

          else
          {
            v285 = v198;
            v286 = sub_1001074E8( (uint64_t)&v351,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100107584);
            v287 = (void *)Logger.logObject.getter(v286);
            v288 = static os_log_type_t.error.getter(v287);
            if (os_log_type_enabled((os_log_t)v287, (os_log_type_t)v288))
            {
              LODWORD(v334) = v288;
              v335 = (uint64_t)v287;
              v336 = v197;
              v289 = swift_slowAlloc(32LL, -1LL);
              v290 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
              v340 = swift_slowAlloc(64LL, -1LL);
              v343 = (uint64_t)v285;
              v344 = v340;
              *(_DWORD *)v289 = 138412802;
              v337 = v102;
              v291 = v285;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344);
              v339 = (uint64_t)v290;
              *(void *)v290 = v285;

              *(_WORD *)(v289 + 12) = 2080;
              v292 = WiFiAddress.description.getter(v284);
              v294 = v293;
              v343 = sub_10000235C(v292, v293, &v344);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344);
              swift_bridgeObjectRelease(v294);
              sub_1001074E8( (uint64_t)&v351,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
              swift_bridgeObjectRelease(v337);
              *(_WORD *)(v289 + 22) = 2080;
              v295 = *((unsigned __int16 *)v274 + 2);
              v296 = *v274;
              v297 = *((_BYTE *)v274 + 6);

              if ((v297 & 1) != 0) {
                goto LABEL_137;
              }
              v298 = WiFiAddress.description.getter((v296 | (v295 << 32)) & 0xFFFFFFFFFFFFLL);
              v300 = v299;
              v343 = sub_10000235C(v298, v299, &v344);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344);

              swift_bridgeObjectRelease(v300);
              v301 = (id)v335;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v335,  (os_log_type_t)v334,  "%@: bad responder data address in the event %s compared to attributes %s",  (uint8_t *)v289,  0x20u);
              v302 = sub_100002274(&qword_100404DE0);
              v303 = v339;
              swift_arrayDestroy(v339, 1LL, v302);
              swift_slowDealloc(v303, -1LL, -1LL);
              v304 = v340;
              swift_arrayDestroy(v340, 2LL, &type metadata for Any[8]);
              swift_slowDealloc(v304, -1LL, -1LL);
              swift_slowDealloc(v289, -1LL, -1LL);

              uint64_t v198 = (_BYTE *)v342;
              uint64_t v197 = v336;
            }

            else
            {

              sub_1001074E8( (uint64_t)&v351,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
              swift_bridgeObjectRelease(v102);
            }
          }

          sub_10027D13C((void *)1, 0LL, 4);
          swift_bridgeObjectRetain(v197);
          v305 = v198;
          v306 = (void *)Logger.logObject.getter(v305);
          v307 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled((os_log_t)v306, (os_log_type_t)v307))
          {
            swift_bridgeObjectRelease_n(v197, 2LL);

            uint64_t v30 = v341;
            return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
          }

          LODWORD(v337) = v307;
          v339 = (uint64_t)v306;
          v308 = (unint64_t)v197;
          v309 = swift_slowAlloc(32LL, -1LL);
          v310 = (void *)swift_slowAlloc(8LL, -1LL);
          v342 = swift_slowAlloc(64LL, -1LL);
          v343 = (uint64_t)v305;
          v344 = v342;
          *(_DWORD *)v309 = 138412802;
          v311 = v305;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344);
          v340 = (uint64_t)v310;
          *v310 = v305;

          *(_WORD *)(v309 + 12) = 2080;
          if (v308) {
            v312 = ObjectType;
          }
          else {
            v312 = 0x6E776F6E6B6E55LL;
          }
          if (v308) {
            v313 = v308;
          }
          else {
            v313 = 0xE700000000000000LL;
          }
          swift_bridgeObjectRetain(v308);
          v343 = sub_10000235C(v312, v313, &v344);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344);
          swift_bridgeObjectRelease(v308);
          swift_bridgeObjectRelease(v313);
          swift_bridgeObjectRelease(v308);
          *(_WORD *)(v309 + 22) = 2080;
          v314 = *((unsigned __int16 *)v274 + 2);
          v315 = *v274;
          v316 = *((_BYTE *)v274 + 6);

          if ((v316 & 1) == 0)
          {
            v317 = WiFiAddress.description.getter((v315 | (v314 << 32)) & 0xFFFFFFFFFFFFLL);
            v319 = v318;
            v343 = sub_10000235C(v317, v318, &v344);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344);

            swift_bridgeObjectRelease(v319);
            v320 = (os_log_t)v339;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v339,  (os_log_type_t)v337,  "%@ received datapath response with status %s from responder data address: %s",  (uint8_t *)v309,  0x20u);
            v321 = sub_100002274(&qword_100404DE0);
            v322 = v340;
            swift_arrayDestroy(v340, 1LL, v321);
            swift_slowDealloc(v322, -1LL, -1LL);
            v323 = v342;
            swift_arrayDestroy(v342, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v323, -1LL, -1LL);
            swift_slowDealloc(v309, -1LL, -1LL);

            uint64_t v30 = v341;
            return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
          }

          __break(1u);
LABEL_137:
          __break(1u);
          JUMPOUT(0x100276654LL);
        case 8u:
          v341 = v21;
          uint64_t v70 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v353);
          uint64_t v71 = v70[8];
          uint64_t v72 = v70[9];
          os_log_t v73 = v70[10];
          v340 = v70[11];
          uint64_t v74 = v70[12];
          uint64_t v75 = (os_log_s *)v70[13];
          uint64_t v76 = (char *)(v342 + qword_100410AC8);
          uint64_t v77 = (char *)(id)v342;
          v336 = v76;
          uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
          uint64_t v79 = static os_log_type_t.default.getter();
          uint64_t v80 = os_log_type_enabled(v78, v79);
          unint64_t v81 = v71 | (v72 << 8);
          v339 = (uint64_t)v75;
          if (v80)
          {
            uint64_t v82 = swift_slowAlloc(22LL, -1LL);
            v337 = v81;
            unint64_t v83 = v82;
            uint64_t v84 = (void *)swift_slowAlloc(8LL, -1LL);
            v335 = swift_slowAlloc(32LL, -1LL);
            *(void *)&v345[0] = v335;
            *(_DWORD *)unint64_t v83 = 138412546;
            v342 = v74;
            *(void *)&v355 = v77;
            unint64_t v85 = v77;
            v334 = v78;
            uint64_t v86 = v85;
            uint64_t v87 = v79;
            uint64_t v88 = v340;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
            *uint64_t v84 = v77;

            *(_WORD *)(v83 + 12) = 2080;
            uint64_t v89 = WiFiAddress.description.getter(v337 | (v73 << 16) | (v88 << 24) | (v342 << 32) | (v339 << 40));
            uint64_t v91 = v90;
            *(void *)&v355 = sub_10000235C(v89, v90, (uint64_t *)v345);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
            uint64_t v92 = v91;
            uint64_t v74 = v342;
            swift_bridgeObjectRelease(v92);
            uint64_t v93 = v334;
            _os_log_impl( (void *)&_mh_execute_header,  v334,  v87,  "%@ datapath established with %s",  (uint8_t *)v83,  0x16u);
            uint64_t v94 = sub_100002274(&qword_100404DE0);
            swift_arrayDestroy(v84, 1LL, v94);
            swift_slowDealloc(v84, -1LL, -1LL);
            char v95 = v335;
            swift_arrayDestroy(v335, 1LL, &type metadata for Any[8]);
            swift_slowDealloc(v95, -1LL, -1LL);
            char v96 = v83;
            unint64_t v81 = v337;
            swift_slowDealloc(v96, -1LL, -1LL);
          }

          else
          {
          }

          uint64_t v126 = &v77[qword_10040DA90];
          uint64_t v127 = *(void *)&v77[qword_10040DA90];
          if (v127 == 4LL)
          {
            uint64_t v128 = 0LL;
            uint64_t v129 = v339;
          }

          else
          {
            uint64_t v130 = v81;
            uint64_t v132 = *((void *)v126 + 1);
            uint64_t v131 = *((void *)v126 + 2);
            sub_100020AFC(v132, v131);
            NANServiceInfo.genericServiceProtocol.getter(v127, v132, v131);
            uint64_t v134 = v133;
            sub_1001062E0(v127, v132, v131);
            if (v134)
            {
              uint64_t v128 = NANGenericServiceProtocol.apiDatapathServiceSpecificInfo.getter(v134);
              swift_bridgeObjectRelease(v134);
            }

            else
            {
              uint64_t v128 = 0LL;
            }

            uint64_t v129 = v339;
            unint64_t v81 = v130;
          }

          os_log_type_t v218 = &v77[qword_100410AD0];
          if ((v77[qword_100410AD0 + 6] & 1) == 0)
          {
            v219 = v81 | (v73 << 16) | (v340 << 24) | (v74 << 32) | (v129 << 40);
            if (static WiFiAddress.!= infix(_:_:)( *(unsigned int *)v218 | ((unint64_t)*((unsigned __int16 *)v218 + 2) << 32),  v219))
            {
              v335 = v73;
              uint64_t v220 = v77;
              uint64_t v221 = (os_log_s *)Logger.logObject.getter(v220);
              unint64_t v222 = static os_log_type_t.error.getter(v221);
              LODWORD(v336) = v222;
              if (os_log_type_enabled(v221, v222))
              {
                unint64_t v223 = swift_slowAlloc(22LL, -1LL);
                v337 = v81;
                unint64_t v81 = v223;
                v334 = (os_log_t)swift_slowAlloc(8LL, -1LL);
                v333 = swift_slowAlloc(32LL, -1LL);
                *(void *)&v345[0] = v333;
                *(_DWORD *)unint64_t v81 = 138412546;
                v332 = v221;
                v342 = v74;
                *(void *)&v355 = v220;
                v330 = v81 + 4;
                v331 = (uint64_t)&v355 + 8;
                v224 = v220;
                uint64_t v74 = v342;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                *(void *)v334 = v220;

                *(_WORD *)(v81 + 12) = 2080;
                uint64_t v225 = WiFiAddress.description.getter(v219);
                uint64_t v227 = v226;
                *(void *)&v355 = sub_10000235C(v225, v226, (uint64_t *)v345);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v331);
                swift_bridgeObjectRelease(v227);
                uint64_t v221 = v332;
                _os_log_impl( (void *)&_mh_execute_header,  v332,  (os_log_type_t)v336,  "%@ got an updated responder data address %s",  (uint8_t *)v81,  0x16u);
                int v228 = sub_100002274(&qword_100404DE0);
                id v229 = v334;
                swift_arrayDestroy(v334, 1LL, v228);
                swift_slowDealloc(v229, -1LL, -1LL);
                v230 = v333;
                swift_arrayDestroy(v333, 1LL, &type metadata for Any[8]);
                swift_slowDealloc(v230, -1LL, -1LL);
                v231 = v81;
                LODWORD(v81) = v337;
                uint64_t v129 = v339;
                swift_slowDealloc(v231, -1LL, -1LL);
              }

              else
              {
              }

              LODWORD(v73) = v335;
            }
          }

          v232 = v81 | ((_DWORD)v73 << 16) | ((_DWORD)v340 << 24);
          *((_WORD *)v218 + 2) = ((v129 << 40) | (v74 << 32)) >> 32;
          *(_DWORD *)os_log_type_t v218 = v232;
          v218[6] = 0;
          v233 = *(void *)&v77[qword_10040DA60];
          swift_unownedRetainStrong(v233);
          os_log_t v234 = v128;
          v238 = sub_1002E8D68((uint64_t)v234, v235, v236, v237);
          swift_release(v233);
          v239 = &v77[qword_10040DA68];
          swift_beginAccess(&v77[qword_10040DA68], v350, 0LL, 0LL);
          uint64_t v240 = sub_10027E498(*(unsigned __int16 *)(v239 + 25) | ((unint64_t)*(unsigned int *)(v239 + 27) << 16));
          swift_release(v238);
          sub_10027D13C(v128, v240, 3);
          swift_release(v240);

          uint64_t v241 = &v77[qword_100410AD8];
          Strong = swift_unknownObjectWeakLoadStrong(&v77[qword_100410AD8]);
          if (Strong)
          {
            v243 = (void *)Strong;
            sub_1002BD4C4();
          }

          swift_unknownObjectWeakAssign(v241, 0LL);
          v244 = qword_10040DAB8;
          uint64_t v30 = v341;
          if ((v77[qword_10040DAB8] & 1) == 0)
          {
            sub_1000226B0((uint64_t)(v239 + 104), (uint64_t)&v355, (uint64_t *)&unk_10040DCB0);
            if (*((void *)&v356 + 1) == 1LL)
            {
              sub_1000225EC((uint64_t)&v355, (uint64_t *)&unk_10040DCB0);
            }

            else
            {
              sub_1000589F8(&v355, (uint64_t)v345);
              v77[v244] = 1;
              sub_10017B140(v345, (uint64_t)&v355);
              if (*((void *)&v356 + 1))
              {
                sub_1000589F8(&v355, (uint64_t)&v346);
                v245 = v348;
                v246 = v349;
                v342 = (uint64_t)sub_100021104(&v346, v348);
                v340 = v239[25];
                uint64_t v247 = v239[26];
                v248 = (unint64_t)*(unsigned int *)(v239 + 27) << 16;
                if (*((void *)v239 + 12) == 1LL)
                {
                  uint64_t v249 = 0LL;
                  uint64_t v250 = 0xF000000000000000LL;
                }

                else
                {
                  uint64_t v249 = *((void *)v239 + 7);
                  uint64_t v250 = *((void *)v239 + 8);
                  sub_100020AFC(v249, v250);
                }

                uint64_t v253 = ObjectType;
                uint64_t WitnessTable = swift_getWitnessTable(&unk_10035EA58, ObjectType);
                uint64_t v255 = sub_1002A1F20(v253, WitnessTable);
                (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v246 + 8))( v340 | (v247 << 8) | v248,  v249,  v250,  v255 & 0xFFFFFFFFFFFFFFLL,  v245,  v246);
                sub_100020B40(v249, v250);
                sub_10017B1A0(v345);
                sub_100002AC4(&v346);
                uint64_t v30 = v341;
              }

              else
              {
                sub_1002766D4();
                sub_10017B1A0(v345);
              }
            }
          }

          sub_100276D08();

          return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
        case 9u:
          v340 = *(void *)(NANBitmap.Channel.operatingClass.getter(v353) + 8);
          __asm { BR              X11 }

          return result;
        case 0xAu:
          v341 = v21;
          uint64_t v107 = *(_BYTE *)(NANBitmap.Channel.operatingClass.getter(v353) + 15);
          uint64_t v108 = (id)v342;
          uint64_t v109 = (unsigned __int8 *)(v342 + qword_10040DA68);
          swift_beginAccess(v342 + qword_10040DA68, v345, 0LL, 0LL);
          uint64_t v110 = *v109;
          uint64_t v111 = v109[1];
          uint64_t v112 = v109[2];
          v339 = v109[3];
          ObjectType = v109[4];
          v335 = v109[5];
          v331 = v109[6];
          uint64_t v113 = (char *)v108;
          unint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
          char v115 = static os_log_type_t.default.getter();
          unint64_t v116 = os_log_type_enabled(v114, v115);
          v340 = v112;
          if (v116)
          {
            uint64_t v117 = swift_slowAlloc(32LL, -1LL);
            uint64_t v118 = (void *)swift_slowAlloc(8LL, -1LL);
            v330 = swift_slowAlloc(64LL, -1LL);
            *(void *)&v355 = v330;
            *(_DWORD *)uint64_t v117 = 138412802;
            v328 = v114;
            v329 = v111;
            v346 = (uint64_t)v113;
            uint64_t v119 = v113;
            v342 = v110;
            uint64_t v120 = v119;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v347);
            *uint64_t v118 = v113;

            *(_WORD *)(v117 + 12) = 2080;
            LOBYTE(v346) = v107;
            uint64_t v121 = String.init<A>(describing:)(&v346, &type metadata for NANDataHostAssistRequest.Reason);
            uint64_t v123 = v122;
            v346 = sub_10000235C(v121, v122, (uint64_t *)&v355);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v347);
            swift_bridgeObjectRelease(v123);
            *(_WORD *)(v117 + 22) = 2080;
            uint64_t v111 = v329;
            v346 = sub_10000235C(0x64657463656A6572LL, 0xE800000000000000LL, (uint64_t *)&v355);
            uint64_t v110 = v342;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v347);
            unint64_t v114 = v328;
            _os_log_impl( (void *)&_mh_execute_header,  v328,  v115,  "%@ received datapath host assist for %s. Responding with %s",  (uint8_t *)v117,  0x20u);
            uint64_t v124 = sub_100002274(&qword_100404DE0);
            swift_arrayDestroy(v118, 1LL, v124);
            swift_slowDealloc(v118, -1LL, -1LL);
            v125 = v330;
            swift_arrayDestroy(v330, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v125, -1LL, -1LL);
            swift_slowDealloc(v117, -1LL, -1LL);
          }

          else
          {
          }

          unint64_t v140 = v333;
          uint64_t v139 = v334;
          v141 = v332;
          unint64_t v142 = *(void *)&v113[qword_10040DA60];
          swift_unownedRetainStrong(v142);
          sub_1002E8C08();
          swift_release(v142);
          uint64_t v30 = v341;
          swift_unownedRetainStrong(v142);
          (*(void (**)(os_log_t, uint64_t, os_log_t))(v140 + 16))( v141,  v142 + *(void *)(*(void *)v142 + 96LL),  v139);
          swift_release(v142);
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v337,  v336,  v139,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
          uint64_t v144 = (void *)(v110 | (v111 << 8) | (v340 << 16) | (v339 << 24) | (ObjectType << 32) | (v335 << 40) | (v331 << 48) | 0x200000000000000LL);
          (*(void (**)(void *, os_log_t, uint64_t))(AssociatedConformanceWitness + 272))( v144,  v139,  AssociatedConformanceWitness);
          (*(void (**)(os_log_t, os_log_t))(v140 + 8))(v141, v139);
          sub_10027D13C(v144, 0LL, 2);
          return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
        default:
          sub_1001074E8( (uint64_t)&v351,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          break;
      }
    }

    char isUniquelyReferenced_nonNull_native = v225;
    uint64_t v225 = v208 & v209;
    uint64_t v165 = *v12;
    *uint64_t v12 = v156;
    swift_bridgeObjectRelease(v165);
    uint64_t v166 = (void *)*v12;
    unint64_t v167 = swift_bridgeObjectRetain(*v12);
    if ((v161 & 1) == 0)
    {
      v168 = (uint64_t)v222;
      ((void (*)(_BYTE *, uint64_t, uint64_t, __n128))v17)(v222, v18, v226, v167);
      sub_100245018(v158, v168, (uint64_t)_swiftEmptyArrayStorage, v166);
    }

    uint64_t v169 = v166[7];
    swift_bridgeObjectRelease(v166);
    uint64_t v170 = (void *)(v169 + 8 * v158);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v171);
    uint64_t v12 = *(void **)((*v170 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v25 = *(void *)((*v170 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    goto LABEL_69;
  }

  sub_1002435A0(v160, isUniquelyReferenced_nonNull_native);
  uint64_t v156 = v229;
  uint64_t v163 = sub_10001C578(v18);
  if ((v161 & 1) == (v164 & 1))
  {
    char v158 = v163;
    goto LABEL_59;
  }

LABEL_41:
        sub_1000225EC(v206, &qword_100404DB0);
        __int128 v281 = v277;
        sub_100020A04((uint64_t)&v281);
        __int128 v269 = v278;
        LOWORD(v270) = v279;
        sub_100020A04((uint64_t)&v269);
        v207 = v251;
LABEL_48:
        v213 = v207;
        v214 = v207;
        uint64_t v90 = v261;
        (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 80))(v213, v261);

        (*(void (**)(char *, uint64_t))(v260 + 8))(v214, v68);
        goto LABEL_64;
      }

      swift_unknownObjectRelease(v122);
    }

    uint64_t v206 = v247;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v247, 1LL, 1LL, v78);
    v125 = 0LL;
    goto LABEL_41;
  }

  (*(void (**)(char *, uint64_t))(v249 + 8))(v87, v250);
  uint64_t v89 = (void (*)(__int128 *, void))v82(&v269, v83, v81);

  v89(&v269, 0LL);
  v268[0] = v277;
  sub_100020A04((uint64_t)v268);
  __int128 v269 = v278;
  LOWORD(v270) = v279;
  sub_100020A04((uint64_t)&v269);
  uint64_t v90 = v261;
LABEL_64:
  sub_100002AC4(v276);
  sub_10000DB4C(v83, v81);
  return (*(uint64_t (**)(char *, uint64_t))(v241 + 8))(v254, v90);
}

  __break(1u);
  return result;
}

      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

  __break(1u);
  return result;
}

uint64_t BonjourOffload.record(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v16[4] = *(void *)(v4 - 8);
  v16[5] = v4;
  __chkstk_darwin();
  v16[7] = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [a1 serviceKey];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  unint64_t v9 = v8;

  id v10 = [a1 serviceValue];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v14 = v13;
  }

  else
  {
    uint64_t v12 = 0LL;
    unint64_t v14 = 0xF000000000000000LL;
  }

  v16[6] = a2;
  static DNSRecords.createRecord(with:value:)(v7, v9, v12, v14);
  sub_100020B40(v12, v14);
  return sub_1000208D8(v7, v9);
}

uint64_t BonjourOffload.startBrowsing(record:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v139 = a2;
  uint64_t v136 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v8 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v119 = *(void *)(v9 - 8);
  uint64_t v120 = v9;
  __chkstk_darwin();
  uint64_t v118 = &v105[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  unint64_t v116 = &v105[-v11];
  uint64_t v123 = v8;
  uint64_t v115 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v112 = &v105[-v12];
  uint64_t v132 = AssociatedConformanceWitness;
  uint64_t v133 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v13 = type metadata accessor for Optional(0LL, v133);
  uint64_t v124 = *(void *)(v13 - 8);
  uint64_t v125 = v13;
  __chkstk_darwin();
  uint64_t v122 = &v105[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v121 = &v105[-v15];
  __chkstk_darwin();
  uint64_t v131 = &v105[-v16];
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v134 = v17;
  uint64_t v135 = v18;
  __chkstk_darwin();
  uint64_t v126 = &v105[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v113 = &v105[-v20];
  __chkstk_darwin();
  uint64_t v117 = &v105[-v21];
  __chkstk_darwin();
  unint64_t v114 = &v105[-v22];
  __chkstk_darwin();
  uint64_t v128 = &v105[-v23];
  __chkstk_darwin();
  uint64_t v138 = &v105[-v24];
  uint64_t v25 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v28 = &v105[-v27];
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v31 = &v105[-v30];
  unint64_t v32 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  uint64_t v137 = v3;
  v32(v139, a3);
  uint64_t v111 = v29;
  uint64_t v34 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32);
  uint64_t v129 = v31;
  v34(v31, v28, AssociatedTypeWitness);
  uint64_t v35 = v137;
  *(void *)&__int128 v148 = v137;
  uint64_t v36 = a3;
  unint64_t v37 = *(void (**)(uint64_t, uint64_t))(*(void *)(a3 + 8) + 8LL);
  uint64_t v38 = v139;
  uint64_t v109 = *(void *)(a3 + 8);
  uint64_t v110 = v37;
  ((void (*)(uint64_t))v37)(v139);
  uint64_t v39 = v136;
  sub_10002084C(v136, (uint64_t)&v148);
  uint64_t v40 = swift_unknownObjectRetain_n(v35, 4LL);
  os_log_type_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.info.getter();
  int v43 = v42;
  BOOL v44 = os_log_type_enabled(v41, v42);
  uint64_t v130 = v36;
  uint64_t v127 = AssociatedTypeWitness;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    uint64_t v108 = swift_slowAlloc(32LL, -1LL);
    v147[0] = v108;
    *(_DWORD *)uint64_t v45 = 136315650;
    os_log_t v107 = v41;
    sub_10002084C((uint64_t)&v148, (uint64_t)&v145);
    uint64_t v46 = sub_100002274(&qword_100404DB8);
    uint64_t v47 = String.init<A>(describing:)(&v145, v46);
    unint64_t v49 = v48;
    *(void *)&__int128 v145 = sub_10000235C(v47, v48, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8);
    swift_bridgeObjectRelease(v49);
    sub_100002AC4(&v148);
    *(_WORD *)(v45 + 12) = 2048;
    int v106 = v43;
    uint64_t v50 = v35;
    uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 40);
    uint64_t v52 = v51(v38, v36);
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v56);
    unint64_t v58 = sub_100004DEC();
    uint64_t v59 = Dictionary.count.getter(v52, &type metadata for DNSRecords.Identifier, v133, v58);
    swift_unknownObjectRelease(v50);
    swift_bridgeObjectRelease(v52);
    *(void *)&__int128 v145 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8);
    swift_unknownObjectRelease(v50);
    *(_WORD *)(v45 + 22) = 2048;
    uint64_t v60 = v51(v38, v130);
    uint64_t v35 = v50;
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v61);
    uint64_t v67 = swift_getAssociatedTypeWitness( 0LL,  v132,  v127,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    unint64_t v68 = sub_100004E30();
    uint64_t v69 = Dictionary.count.getter(v65, &type metadata for DNSRecords.PTR, v67, v68);
    swift_unknownObjectRelease(v50);
    swift_bridgeObjectRelease(v65);
    *(void *)&__int128 v145 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8);
    swift_unknownObjectRelease(v50);
    os_log_t v70 = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v107,  (os_log_type_t)v106,  "Starting browse for %s (browses: %ld, advertises: %ld)",  (uint8_t *)v45,  0x20u);
    uint64_t v71 = v108;
    swift_arrayDestroy(v108, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v71, -1LL, -1LL);
    uint64_t v72 = v45;
    uint64_t v39 = v136;
    swift_slowDealloc(v72, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease_n(v35, 2LL);
    sub_100002AC4(&v148);

    swift_unknownObjectRelease_n(v35, 2LL);
  }

  uint64_t v73 = v134;
  uint64_t v74 = *(_BYTE **)(v135 + 8);
  ((void (*)(_BYTE *, uint64_t))v74)(v138, v134);
  sub_10002084C(v39, (uint64_t)v147);
  uint64_t v75 = sub_100002274(&qword_100404DB8);
  if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.Identifier, 0LL))
  {
    __int128 v76 = v145;
    int v77 = LOBYTE(v146[0]);
    uint64_t v138 = v74;
    uint64_t v78 = v73;
    int v79 = BYTE1(v146[0]);
    *(void *)&__int128 v148 = v35;
    swift_bridgeObjectRetain(*((void *)&v145 + 1));
    uint64_t v80 = v128;
    v110(v139, v109);
    unint64_t v81 = (objc_class *)type metadata accessor for BonjourBrowser(0LL);
    uint64_t v82 = (char *)objc_allocWithZone(v81);
    *(void *)&v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate] = 0LL;
    *(void *)&v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers] = _swiftEmptyDictionarySingleton;
    unint64_t v83 = &v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service];
    *(_OWORD *)unint64_t v83 = v76;
    v83[16] = v77;
    v83[17] = v79;
    (*(void (**)(char *, _BYTE *, uint64_t))(v135 + 16))( &v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_logger],  v80,  v78);
    v140.receiver = v82;
    v140.super_class = v81;
    uint64_t v84 = (char *)objc_msgSendSuper2(&v140, "init");
    ((void (*)(_BYTE *, uint64_t))v138)(v80, v78);
    uint64_t v85 = (*(uint64_t (**)(uint64_t))(v130 + 32))(v139);
    uint64_t v86 = *(void *)&v84[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate];
    *(void *)&v84[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate] = v85;
    swift_unknownObjectRelease(v86);
    uint64_t v87 = v132;
    uint64_t v88 = *(void (**)(void, void, void, char *, uint64_t, uint64_t))(v132 + 32);
    LODWORD(v138) = v77;
    uint64_t v89 = v84;
    uint64_t v90 = v127;
    v88(v76, *((void *)&v76 + 1), v77 | (v79 << 8), v89, v127, v87);

    uint64_t v100 = v133;
    uint64_t v101 = v131;
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v133 - 8) + 56LL))(v131, 0LL, 1LL, v133);
    __int128 v142 = v76;
    char v143 = (char)v138;
    char v144 = v79;
    unint64_t v102 = (void (*)(__int128 *, void))(*(uint64_t (**)(__int128 *, uint64_t))(v130 + 56))( &v148,  v139);
    unint64_t v103 = sub_100004DEC();
    uint64_t v104 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.Identifier, v100, v103);
    Dictionary.subscript.setter(v101, &v142, v104);
    v102(&v148, 0LL);

    (*(void (**)(_BYTE *, uint64_t))(v111 + 8))(v129, v90);
  }

  else
  {
    if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.Browse, 0LL))
    {
      __int128 v148 = v145;
      v149[0] = v146[0];
      *(_OWORD *)((char *)v149 + 10) = *(_OWORD *)((char *)v146 + 10);
      __asm { BR              X10 }
    }

    if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.BrowseHost, 0LL)) {
      __asm { BR              X10 }
    }

    if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.ARPABrowse, 0LL))
    {
      (*(void (**)(_BYTE *, uint64_t))(v111 + 8))(v129, v127);
      swift_bridgeObjectRelease(*((void *)&v146[0] + 1));
    }

    else
    {
      *(void *)&__int128 v145 = v35;
      uint64_t v91 = v126;
      v110(v139, v109);
      uint64_t v92 = sub_10002084C(v39, (uint64_t)&v145);
      uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        char v95 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v96 = swift_slowAlloc(32LL, -1LL);
        v141[0] = v96;
        *(_DWORD *)char v95 = 136315138;
        uint64_t v138 = v74;
        sub_10002084C((uint64_t)&v145, (uint64_t)&v142);
        uint64_t v97 = String.init<A>(describing:)(&v142, v75);
        unint64_t v99 = v98;
        *(void *)&__int128 v142 = sub_10000235C(v97, v98, v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 8);
        swift_bridgeObjectRelease(v99);
        sub_100002AC4(&v145);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Failed to start browsing for record %s", v95, 0xCu);
        swift_arrayDestroy(v96, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);

        ((void (*)(_BYTE *, uint64_t))v138)(v91, v134);
      }

      else
      {
        sub_100002AC4(&v145);

        ((void (*)(_BYTE *, uint64_t))v74)(v91, v73);
      }

      (*(void (**)(_BYTE *, uint64_t))(v111 + 8))(v129, v127);
    }
  }

  return sub_100002AC4(v147);
}

void sub_100012CBC()
{
}

void sub_100012CC8()
{
  uint64_t v5 = *(void *)(v4 - 168);
  uint64_t v6 = *(void *)(v4 - 160);
  __int128 v7 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v0 + 320) = v7;
  __int16 v8 = *(_WORD *)(v4 - 136);
  *(_WORD *)(v0 + 336) = v8;
  *(void *)(v0 + 232) = v5;
  *(void *)(v0 + 384) = v5;
  *(void *)(v0 + 392) = v6;
  *(_OWORD *)(v0 + 400) = v7;
  *(_WORD *)(v0 + 416) = v8;
  sub_100020DE0(v4 - 176);
  *(void *)(v0 + 240) = v6;
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v10, v9);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 320);
  *(_WORD *)(v0 + 304) = *(_WORD *)(v0 + 336);
  sub_100004DEC();
  uint64_t v18 = *(void *)(v0 + 120);
  Dictionary.subscript.getter(v0 + 288, v11, &type metadata for DNSRecords.Identifier, *(void *)(v0 + 216));
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v11);
  uint64_t v19 = sub_100020A04(v0 + 320);
  __chkstk_darwin(v19);
  v38[2] = v10;
  v38[3] = v9;
  v38[4] = *(void *)(v0 + 184);
  uint64_t v20 = type metadata accessor for BonjourBrowser(0LL);
  uint64_t v21 = *(void *)(v0 + 152);
  sub_100013EF8( (void (*)(char *, char *))sub_1000227F4,  (uint64_t)v38,  (uint64_t)&type metadata for Never,  v20,  v22,  v4 - 128);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 144) + 8LL))(v18, v21);
  uint64_t v23 = *(void **)(v4 - 128);
  if (v23)
  {
    sub_100017FC0(v0 + 384);
    swift_bridgeObjectRelease(*(void *)(v0 + 240));
    sub_100020A04(v0 + 320);

    JUMPOUT(0x100012C8CLL);
  }

  unint64_t v24 = *(void *)(v0 + 240);
  *(void *)(v0 + 288) = v3;
  (*(void (**)(uint64_t, void))(v0 + 32))(v10, *(void *)(v0 + 24));
  sub_100020DE0(v4 - 176);
  sub_100020DE0(v4 - 176);
  uint64_t v25 = sub_100020DE0(v4 - 176);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = *(void *)(v0 + 320);
    uint64_t v28 = *(void *)(v0 + 328);
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    *(void *)(v4 - 128) = v31;
    *(_DWORD *)uint64_t v30 = 136315394;
    *(void *)(v0 + 288) = v29;
    *(void *)(v0 + 296) = v28;
    sub_1000209DC(v0 + 320);
    swift_bridgeObjectRetain(v28);
    v32._countAndFlagsBits = 24366LL;
    v32._object = (void *)0xE200000000000000LL;
    String.append(_:)(v32);
    if (*(_BYTE *)(v0 + 336)) {
      uint64_t v33 = 7365749LL;
    }
    else {
      uint64_t v33 = 7365492LL;
    }
    *(void *)(v0 + 256) = v2;
    unint64_t v34 = 0xE300000000000000LL;
    String.append(_:)(*(Swift::String *)&v33);
    swift_bridgeObjectRelease(0xE300000000000000LL);
    v35._countAndFlagsBits = 46LL;
    v35._object = (void *)0xE100000000000000LL;
    String.append(_:)(v35);
    v36._countAndFlagsBits = 0x6C61636F6CLL;
    v36._object = (void *)0xE500000000000000LL;
    String.append(_:)(v36);
    sub_100020A04(v0 + 320);
    unint64_t v37 = *(void *)(v0 + 296);
    *(void *)(v0 + 288) = sub_10000235C(*(void *)(v0 + 288), v37, (uint64_t *)(v4 - 128));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296);
    swift_bridgeObjectRelease(v37);
    sub_100020DAC(v4 - 176);
    sub_100020DAC(v4 - 176);
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain(v24);
    *(void *)(v0 + 288) = sub_10000235C(*(void *)(v0 + 232), v24, (uint64_t *)(v4 - 128));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296);
    swift_bridgeObjectRelease(v24);
    sub_100020DAC(v4 - 176);
    sub_100020DAC(v4 - 176);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Cannot find browse for %s when querying TXT record for %s",  (uint8_t *)v30,  0x16u);
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    JUMPOUT(0x100012BACLL);
  }

  sub_100020DAC(v4 - 176);
  sub_100020DAC(v4 - 176);
  sub_100020DAC(v4 - 176);
  sub_100020DAC(v4 - 176);

  JUMPOUT(0x100012C7CLL);
}

uint64_t sub_100013AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    sub_100022594((_OWORD *)a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_10001EDDC(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    *uint64_t v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_1000225EC(a1, &qword_100405280);
    sub_10001E720(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_1000225EC((uint64_t)v11, &qword_100405280);
  }

void sub_100013B7C(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v12 = *(_OWORD *)a2;
  __int128 v10 = v4;
  __int16 v11 = *(_WORD *)(a2 + 32);
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v9 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_10001EF2C(a1, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v7 = *v2;
    *uint64_t v2 = v9;
    swift_bridgeObjectRelease(v7);
    sub_100020A04((uint64_t)&v12);
    sub_100020A04((uint64_t)&v10);
  }

  else
  {
    uint64_t v8 = (void *)sub_10001E820(a2);
    sub_100020A04((uint64_t)&v12);
    sub_100020A04((uint64_t)&v10);
  }

uint64_t sub_100013C3C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100022594((_OWORD *)a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v9 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_10001F19C(v10, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v5 = *v2;
    *uint64_t v2 = v9;
    swift_bridgeObjectRelease(v5);
    uint64_t v6 = type metadata accessor for CodingUserInfoKey(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a2, v6);
  }

  else
  {
    sub_1000225EC(a1, &qword_100405280);
    sub_10001E8F4(a2, v10);
    uint64_t v8 = type metadata accessor for CodingUserInfoKey(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a2, v8);
    return sub_1000225EC((uint64_t)v10, &qword_100405280);
  }

uint64_t sub_100013D20(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100002274(&qword_100405118);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  __int128 v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_1000225EC(a1, &qword_100405118);
    unint64_t v13 = sub_10001C01C(a2);
    if ((v14 & 1) != 0)
    {
      unint64_t v15 = v13;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v17 = *v3;
      uint64_t v24 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10013C8CC();
        uint64_t v17 = v24;
      }

      sub_100022628( *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15,  (uint64_t)v8,  type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_10013B8BC(v15, v17);
      uint64_t v18 = *v3;
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease(v18);
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v19 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1LL, v9);
    return sub_1000225EC((uint64_t)v8, &qword_100405118);
  }

  else
  {
    sub_100022628(a1, (uint64_t)v12, type metadata accessor for NANGenericServiceProtocol.Attribute);
    char v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v24 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_10001F954((uint64_t)v12, a2, v20);
    uint64_t v21 = *v3;
    uint64_t *v3 = v24;
    return swift_bridgeObjectRelease(v21);
  }

uint64_t sub_100013EF8@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  __int128 v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v10);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  char v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))( v29,  1LL,  1LL,  a4);
  }
  uint64_t v25 = a3;
  uint64_t v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  }
  return result;
}

uint64_t sub_100014090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload,  &associated type descriptor for BonjourOffload.DiscoveryEngine);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v11 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t result = v10(a1, v11, AssociatedConformanceWitness);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = type metadata accessor for BonjourBrowser(0LL);
    uint64_t result = swift_dynamicCastClass(v13, v14);
    if (result)
    {
      *a4 = result;
      return result;
    }

    uint64_t result = swift_unknownObjectRelease(v13);
  }

  *a4 = 0LL;
  return result;
}

_BYTE *sub_100014178@<X0>( _BYTE *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a3)
  {
    uint64_t v5 = *(void *)(a4 + 48) + 40 * a2;
    uint64_t v7 = *(void *)v5;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 24);
    char v10 = *(_BYTE *)(v5 + 32);
    LOBYTE(v5) = *(_BYTE *)(v5 + 33);
    uint64_t v11 = *(void *)(a4 + 56) + 16 * a2;
    id v12 = *(id *)v11;
    LOBYTE(v11) = *(_BYTE *)(v11 + 8);
    *(void *)uint64_t result = v12;
    result[8] = v11;
    *(void *)a5 = v7;
    *(void *)(a5 + 8) = v6;
    *(void *)(a5 + 16) = v8;
    *(void *)(a5 + 24) = v9;
    *(_BYTE *)(a5 + 32) = v10;
    *(_BYTE *)(a5 + 33) = v5;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    return v12;
  }

LABEL_8:
  __break(1u);
  return result;
}

    uint64_t v23 = v47 + 1;
    if (__OFADD__(v47, 1LL))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    if (v23 >= v43) {
      goto LABEL_38;
    }
    uint64_t v24 = *(void *)(v44 + 8 * v23);
    uint64_t v25 = v47 + 1;
    if (!v24)
    {
      uint64_t v25 = v47 + 2;
      if (v47 + 2 >= v43) {
        goto LABEL_38;
      }
      uint64_t v24 = *(void *)(v44 + 8 * v25);
      if (!v24)
      {
        uint64_t v25 = v47 + 3;
        if (v47 + 3 >= v43) {
          goto LABEL_38;
        }
        uint64_t v24 = *(void *)(v44 + 8 * v25);
        if (!v24)
        {
          uint64_t v25 = v47 + 4;
          if (v47 + 4 >= v43) {
            goto LABEL_38;
          }
          uint64_t v24 = *(void *)(v44 + 8 * v25);
          if (!v24) {
            break;
          }
        }
      }
    }

      if ((v4 & ~v2) == 0) {
        goto LABEL_16;
      }
      uint64_t v5 = v1 + 1;
      if (__OFADD__(v1, 1LL))
      {
        __break(1u);
        goto LABEL_49;
      }

      ++v1;
      if ((unint64_t)(v5 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        uint64_t v1 = v5;
        goto LABEL_16;
      }
    }

    if ((unint64_t)v1 < 8)
    {
      __int128 v4 = 1 << v1;
      goto LABEL_8;
    }

    uint64_t v6 = 0;
    uint64_t v1 = 9LL;
    if (__OFADD__(8LL, 1LL)) {
      goto LABEL_49;
    }
LABEL_34:
    switch(v6)
    {
      case 4u:
        uint64_t v13 = 0;
LABEL_40:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v3);
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1000A6E98(0LL, v3[2] + 1LL, 1, v3);
          uint64_t v3 = (void *)result;
        }

        uint64_t v15 = v3[2];
        uint64_t v14 = v3[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t result = (uint64_t)sub_1000A6E98((void *)(v14 > 1), v15 + 1, 1, v3);
          uint64_t v3 = (void *)result;
        }

        v3[2] = v15 + 1;
        *((_BYTE *)v3 + v15 + 32) = v13;
        break;
      case 0x80u:
        uint64_t v13 = 2;
        goto LABEL_40;
      case 0x10u:
        uint64_t v13 = 1;
        goto LABEL_40;
    }

    if (v1 >= 8) {
      return (uint64_t)v3;
    }
  }

  uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  v21(v13, (uint64_t)v20, a2);
  if (v25 < 65)
  {
    Swift::String v32 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
    v23(v13, a2);
    if (v32 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3) & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v23(v13, a2);
  }

  uint64_t AssociatedTypeWitness = (uint64_t)v54;
  v21(v54, (uint64_t)v20, a2);
  uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v26 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
  uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  if ((v26 & 1) != 0)
  {
    if (v27 > 64)
    {
      uint64_t v28 = sub_100024970();
      uint64_t v29 = v53;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v57, &type metadata for Int, v28, a2, a3);
      uint64_t v30 = dispatch thunk of static Comparable.< infix(_:_:)( v29,  AssociatedTypeWitness,  a2,  *(void *)(*(void *)(a3 + 32) + 8LL));
      v23(v29, a2);
      uint64_t v31 = AssociatedTypeWitness;
      goto LABEL_19;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  *a8 = result;
  return result;
}

    sub_100086CBC(a2);
    sub_100086CBC(a1);
    sub_100057CA0(v5, v4, v6);
    sub_100057CA0(v8, v7, v9);
    return 0LL;
  }

  if (v9 >> 60 != 15) {
    goto LABEL_8;
  }
  sub_100086CBC(a2);
LABEL_4:
  return 0LL;
}

uint64_t sub_100014238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for BonjourOffload,  &associated type descriptor for BonjourOffload.DiscoveryEngine);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v10 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine,  &associated type descriptor for BonjourOffloadDiscoveryEngine.DatapathIdentifier);
  uint64_t v11 = type metadata accessor for Optional(0LL, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v24[-v13];
  a1 += 16LL;
  swift_beginAccess(a1, v27, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v16 = Strong;
    __int128 v17 = *(_OWORD *)(a2 + 24);
    __int128 v28 = *(_OWORD *)(a2 + 8);
    __int128 v29 = v17;
    __int16 v30 = *(_WORD *)(a2 + 40);
    __int16 v33 = v30;
    __int128 v31 = *(_OWORD *)(a2 + 8);
    __int128 v32 = v17;
    __int128 v18 = *(_OWORD *)(a2 + 24);
    v25[0] = v31;
    v25[1] = v18;
    __int16 v26 = *(_WORD *)(a2 + 40);
    uint64_t v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 56);
    sub_100020DE0(a2);
    char v20 = (void (*)(_BYTE *, void))v19(v24, a3, a4);
    unint64_t v21 = sub_100004E30();
    uint64_t v22 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v10, v21);
    Dictionary.removeValue(forKey:)(v25, v22);
    sub_100020A04((uint64_t)&v31);
    sub_100020A04((uint64_t)&v32);
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
    v20(v24, 0LL);
    return swift_unknownObjectRelease(v16);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v14, 1LL, 1LL, v10);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  }

uint64_t sub_100014434( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a4;
  uint64_t v12 = sub_100002274(&qword_100404DB0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a8,  a7,  &protocol requirements base descriptor for BonjourOffload,  &associated type descriptor for BonjourOffload.DiscoveryEngine);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a8,  a7,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  __int128 v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v18 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v19 = v17(a1, v18, AssociatedConformanceWitness);
  if (!v19) {
    goto LABEL_5;
  }
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for BonjourResolver(0LL);
  uint64_t v22 = swift_dynamicCastClass(v20, v21);
  if (!v22)
  {
    swift_unknownObjectRelease(v20);
    char v25 = 0;
    return v25 & 1;
  }

  uint64_t v23 = v22 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
  swift_beginAccess( v22 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv,  v32,  0LL,  0LL);
  sub_1000226B0(v23, (uint64_t)v14, &qword_100404DB0);
  swift_unknownObjectRelease(v20);
  uint64_t v24 = type metadata accessor for DNSRecords.SRV(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48LL))(v14, 1LL, v24) == 1)
  {
    sub_1000225EC((uint64_t)v14, &qword_100404DB0);
LABEL_5:
    char v25 = 0;
    return v25 & 1;
  }

  __int16 v26 = &v14[*(int *)(v24 + 24)];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  swift_bridgeObjectRetain(v27);
  sub_100020A2C((uint64_t)v14);
  if (v28 == v33 && v27 == a5)
  {
    swift_bridgeObjectRelease(a5);
    char v25 = 1;
  }

  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, v33, a5, 0LL);
    swift_bridgeObjectRelease(v27);
  }

  return v25 & 1;
}

uint64_t sub_100014648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload,  &associated type descriptor for BonjourOffload.DiscoveryEngine);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v11 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t result = v10(a1, v11, AssociatedConformanceWitness);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = type metadata accessor for BonjourResolver(0LL);
    uint64_t result = swift_dynamicCastClass(v13, v14);
    if (result)
    {
      *a4 = result;
      return result;
    }

    uint64_t result = swift_unknownObjectRelease(v13);
  }

  *a4 = 0LL;
  return result;
}

uint64_t BonjourOffload.startAdvertising(record:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v363 = a2;
  uint64_t v360 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v348 = *(void *)(swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine)
                   - 8);
  __chkstk_darwin();
  v341 = (char *)&v326 - v7;
  uint64_t v352 = v8;
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v339 = *(void *)(v9 - 8);
  uint64_t v340 = v9;
  __chkstk_darwin();
  v335 = (char *)&v326 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v342 = (char *)&v326 - v11;
  __chkstk_darwin();
  unint64_t v343 = (unint64_t)&v326 - v12;
  __chkstk_darwin();
  v346 = (char *)&v326 - v13;
  sub_100002274(&qword_100404DB0);
  __chkstk_darwin();
  uint64_t v336 = (uint64_t)&v326 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v344 = (uint64_t)&v326 - v15;
  __chkstk_darwin();
  v349 = (char *)&v326 - v16;
  uint64_t v17 = type metadata accessor for DNSRecords.SRV(0LL);
  unint64_t v358 = *(void *)(v17 - 8);
  uint64_t v359 = v17;
  __chkstk_darwin();
  uint64_t v338 = (uint64_t)&v326 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v353 = (__int128 *)((char *)&v326 - v19);
  __chkstk_darwin();
  unint64_t v355 = (unint64_t)&v326 - v20;
  __chkstk_darwin();
  uint64_t v347 = (uint64_t)&v326 - v21;
  uint64_t v361 = type metadata accessor for Logger(0LL);
  uint64_t v356 = *(void *)(v361 - 8);
  __chkstk_darwin();
  v337 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v326 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  v350 = (char *)&v326 - v23;
  __chkstk_darwin();
  v362 = (char *)&v326 - v24;
  uint64_t v25 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v28 = (char *)&v326 - v27;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  __int128 v31 = (char *)&v326 - v30;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(v363, a3);
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v28, AssociatedTypeWitness);
  uint64_t v33 = v3;
  *(void *)&__int128 v384 = v3;
  uint64_t v34 = *(void *)(a3 + 8);
  v333 = *(void (**)(uint64_t))(v34 + 8);
  uint64_t v334 = v29;
  uint64_t v35 = v363;
  uint64_t v332 = v34;
  v333(v363);
  uint64_t v36 = v360;
  sub_10002084C(v360, (uint64_t)&v384);
  uint64_t v37 = swift_unknownObjectRetain_n(v3, 4LL);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.info.getter();
  int v40 = v39;
  BOOL v41 = os_log_type_enabled(v38, v39);
  uint64_t v357 = a3;
  uint64_t v351 = AssociatedTypeWitness;
  v345 = v31;
  if (v41)
  {
    uint64_t v42 = a3;
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    v331 = (void (*)(char *, uint64_t))swift_slowAlloc(32LL, -1LL);
    v377[0] = (uint64_t)v331;
    *(_DWORD *)uint64_t v43 = 136315650;
    os_log_t v330 = v38;
    BOOL v44 = v33;
    sub_10002084C((uint64_t)&v384, (uint64_t)&v373);
    uint64_t v45 = sub_100002274(&qword_100404DB8);
    uint64_t v46 = String.init<A>(describing:)(&v373, v45);
    int v329 = v40;
    unint64_t v48 = v47;
    *(void *)&__int128 v373 = sub_10000235C(v46, v47, v377);
    v328 = (char *)&v373 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, (char *)&v373 + 8);
    swift_bridgeObjectRelease(v48);
    sub_100002AC4(&v384);
    *(_WORD *)(v43 + 12) = 2048;
    uint64_t v327 = v43 + 14;
    unint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 40);
    uint64_t v50 = v49(v35, v42);
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v54);
    uint64_t v56 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  v351,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    unint64_t v57 = sub_100004DEC();
    uint64_t v58 = Dictionary.count.getter(v50, &type metadata for DNSRecords.Identifier, v56, v57);
    swift_unknownObjectRelease(v44);
    swift_bridgeObjectRelease(v50);
    *(void *)&__int128 v373 = v58;
    uint64_t v59 = v328;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, v328);
    swift_unknownObjectRelease(v44);
    *(_WORD *)(v43 + 22) = 2048;
    uint64_t v327 = v43 + 24;
    uint64_t v60 = v49(v35, v42);
    uint64_t v36 = v360;
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    swift_bridgeObjectRelease(v66);
    uint64_t v67 = v63;
    uint64_t v33 = v44;
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v61);
    unint64_t v68 = sub_100004E30();
    uint64_t v69 = Dictionary.count.getter(v65, &type metadata for DNSRecords.PTR, v352, v68);
    swift_unknownObjectRelease(v44);
    swift_bridgeObjectRelease(v65);
    *(void *)&__int128 v373 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, v59);
    swift_unknownObjectRelease(v44);
    os_log_t v70 = v330;
    _os_log_impl( (void *)&_mh_execute_header,  v330,  (os_log_type_t)v329,  "Starting advertise for %s (browses: %ld, advertises: %ld)",  (uint8_t *)v43,  0x20u);
    uint64_t v71 = v331;
    swift_arrayDestroy(v331, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease_n(v33, 2LL);
    sub_100002AC4(&v384);

    swift_unknownObjectRelease_n(v33, 2LL);
  }

  uint64_t v72 = v356;
  uint64_t v73 = *(void (**)(char *, uint64_t))(v356 + 8);
  v73(v362, v361);
  unint64_t v74 = v355;
  sub_10002084C(v36, (uint64_t)v377);
  uint64_t v75 = sub_100002274(&qword_100404DB8);
  if (swift_dynamicCast(&v388, v377, v75, &type metadata for DNSRecords.PTR, 0LL))
  {
    __int128 v373 = v388;
    __int128 v374 = v389;
    LOWORD(v375) = v390;
    uint64_t v76 = *((void *)&v388 + 1);
    v353 = (__int128 *)v388;
    unint64_t v355 = *((void *)&v389 + 1);
    uint64_t v356 = v389;
    LODWORD(v344) = v390;
    LODWORD(v343) = HIBYTE(v390);
    __int128 v370 = v388;
    __int128 v366 = v389;
    __int16 v367 = v390;
    uint64_t v77 = v357;
    uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t))(v357 + 40);
    sub_1000209DC((uint64_t)&v370);
    sub_1000209DC((uint64_t)&v366);
    v362 = v33;
    uint64_t v79 = v78(v363, v77);
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    v342 = v84;
    uint64_t v85 = *(void *)(v80 + 16);
    uint64_t v360 = v76;
    if (v85 && (unint64_t v86 = sub_10001C214((uint64_t)&v373), (v87 & 1) != 0))
    {
      uint64_t v88 = (char *)*(id *)(*(void *)(v81 + 56) + 8 * v86);
      uint64_t v89 = v359;
    }

    else
    {
      *(void *)&__int128 v384 = v362;
      uint64_t v109 = v350;
      ((void (*)(uint64_t, uint64_t))v333)(v363, v332);
      uint64_t v110 = (objc_class *)type metadata accessor for BonjourAdvertiser(0LL);
      uint64_t v111 = (char *)objc_allocWithZone(v110);
      uint64_t v112 = &v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      *(_OWORD *)uint64_t v112 = 0u;
      *((_OWORD *)v112 + 1) = 0u;
      *((_WORD *)v112 + 16) = 0;
      uint64_t v113 = &v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      *((void *)v113 + 6) = 0LL;
      *((_OWORD *)v113 + 1) = 0u;
      *((_OWORD *)v113 + 2) = 0u;
      *(_OWORD *)uint64_t v113 = 0u;
      uint64_t v89 = v359;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v358 + 56))( &v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  1LL,  1LL,  v359);
      unint64_t v114 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      uint64_t v115 = v361;
      v114(&v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v109, v361);
      v364.receiver = v111;
      v364.super_class = v110;
      uint64_t v88 = (char *)objc_msgSendSuper2(&v364, "init");
      v73(v109, v115);
    }

    uint64_t v116 = (uint64_t)v349;
    uint64_t v117 = (uint64_t)v353;
    __int16 v118 = v344;
    __int16 v119 = v343;
    swift_bridgeObjectRelease(v342);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v79);
    sub_100020A04((uint64_t)&v370);
    sub_100020A04((uint64_t)&v366);
    __int16 v120 = v118 | (v119 << 8);
    uint64_t v121 = &v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    uint64_t v122 = *(void *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    uint64_t v123 = *(void *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8];
    uint64_t v124 = *(void *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 16];
    uint64_t v125 = *(void *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 24];
    uint64_t v126 = v360;
    *(void *)uint64_t v121 = v117;
    *((void *)v121 + 1) = v126;
    unint64_t v127 = v355;
    *((void *)v121 + 2) = v356;
    *((void *)v121 + 3) = v127;
    *((_WORD *)v121 + 16) = v120;
    sub_1000209DC((uint64_t)&v370);
    sub_1000209DC((uint64_t)&v366);
    sub_1000209AC(v122, v123, v124, v125);
    uint64_t v128 = (uint64_t)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
    swift_beginAccess( &v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  v368,  0LL,  0LL);
    sub_1000226B0(v128, v116, &qword_100404DB0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v358 + 48))(v116, 1LL, v89) == 1)
    {
      sub_1000225EC(v116, &qword_100404DB0);
      uint64_t v129 = v363;
LABEL_32:
      uint64_t v218 = v357;
      v219 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v357 + 56);
      uint64_t v220 = v88;
      uint64_t v221 = (void (*)(__int128 *, void))v219(&v384, v129, v218);
      uint64_t v223 = v222;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v222 + 8));
      *(void *)&__int128 v381 = *(void *)(v223 + 8);
      *(void *)(v223 + 8) = 0x8000000000000000LL;
      sub_10001EF2C((uint64_t)v220, (uint64_t)&v373, isUniquelyReferenced_nonNull_native);
      uint64_t v225 = *(void *)(v223 + 8);
      *(void *)(v223 + 8) = v381;
      swift_bridgeObjectRelease(v225);
      sub_100020A04((uint64_t)&v370);
      sub_100020A04((uint64_t)&v366);
      v221(&v384, 0LL);
LABEL_33:

LABEL_42:
      v303 = *(void (**)(char *, uint64_t))(v334 + 8);
      goto LABEL_43;
    }

    uint64_t v154 = v347;
    sub_100022628(v116, v347, type metadata accessor for DNSRecords.SRV);
    uint64_t v155 = (uint64_t *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
    uint64_t v156 = *(void *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8];
    uint64_t v129 = v363;
    if (!v156)
    {
      sub_100020A2C(v154);
      goto LABEL_32;
    }

    uint64_t v157 = *v155;
    uint64_t v158 = v155[3];
    uint64_t v159 = v155[4];
    uint64_t v160 = v155[5];
    unint64_t v161 = v155[6];
    uint64_t v360 = v155[2];
    uint64_t v361 = v157;
    *(void *)&__int128 v384 = v157;
    *((void *)&v384 + 1) = v156;
    *(void *)&__int128 v385 = v360;
    *((void *)&v385 + 1) = v158;
    uint64_t v356 = v159;
    LOWORD(v386) = v159 & 0xFF01;
    *((void *)&v386 + 1) = v160;
    *(void *)&__int128 v387 = v161;
    uint64_t v162 = v357;
    uint64_t v163 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v357 + 56);
    swift_bridgeObjectRetain(v156);
    uint64_t v359 = v158;
    swift_bridgeObjectRetain(v158);
    unint64_t v358 = v161;
    sub_100020AFC(v160, v161);
    uint64_t v164 = (void (*)(__int128 *, void))v163(&v381, v129, v162);

    v164(&v381, 0LL);
    uint64_t v165 = AssociatedConformanceWitness;
    uint64_t v166 = *(void (**)(__int128 *, __int128 *, uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                            + 56);
    unint64_t v167 = v88;
    v166(&v373, &v384, v154, v167, v351, v165);
    uint64_t v250 = v348;
    uint64_t v251 = v356;

    v252 = v346;
    uint64_t v253 = v352;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v250 + 56))(v346, 0LL, 1LL, v352);
    __int128 v381 = v373;
    __int128 v382 = v374;
    __int16 v383 = v375;
    v254 = (void (*)(__int128 *, void))v163(&v378, v363, v357);
    unint64_t v255 = sub_100004E30();
    uint64_t v256 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v253, v255);
    Dictionary.subscript.setter(v252, &v381, v256);
    v254(&v378, 0LL);
    sub_10002091C(v361, v156, v360, v359, v251, v160, v358);

    uint64_t v257 = v347;
LABEL_41:
    sub_100020A2C(v257);
    goto LABEL_42;
  }

  uint64_t v90 = v36;
  int v91 = swift_dynamicCast(v74, v377, v75, v359, 0LL);
  uint64_t v92 = v357;
  if (v91)
  {
    uint64_t v93 = v74;
    uint64_t v94 = (uint64_t)v353;
    sub_100022628(v93, (uint64_t)v353, type metadata accessor for DNSRecords.SRV);
    __int128 v95 = *(_OWORD *)(v94 + 16);
    __int128 v373 = *(_OWORD *)v94;
    __int128 v374 = v95;
    LOWORD(v375) = *(_WORD *)(v94 + 32);
    v393[0] = v373;
    __int128 v370 = v95;
    __int16 v371 = v375;
    uint64_t v96 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 40);
    sub_1000209DC((uint64_t)v393);
    sub_1000209DC((uint64_t)&v370);
    v362 = v33;
    uint64_t v97 = v363;
    uint64_t v98 = v96(v363, v92);
    uint64_t v100 = v99;
    uint64_t v102 = v101;
    uint64_t v360 = v103;
    if (*(void *)(v99 + 16) && (unint64_t v104 = sub_10001C214((uint64_t)&v373), (v105 & 1) != 0))
    {
      int v106 = (char *)*(id *)(*(void *)(v100 + 56) + 8 * v104);
      unint64_t v107 = v358;
      uint64_t v108 = v359;
    }

    else
    {
      *(void *)&__int128 v384 = v362;
      v168 = v350;
      ((void (*)(uint64_t, uint64_t))v333)(v97, v332);
      uint64_t v169 = (objc_class *)type metadata accessor for BonjourAdvertiser(0LL);
      uint64_t v356 = v102;
      uint64_t v170 = v98;
      uint64_t v171 = v169;
      uint64_t v172 = (char *)objc_allocWithZone(v169);
      v173 = &v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      *(_OWORD *)v173 = 0u;
      *((_OWORD *)v173 + 1) = 0u;
      *((_WORD *)v173 + 16) = 0;
      uint64_t v174 = &v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      *((void *)v174 + 6) = 0LL;
      *((_OWORD *)v174 + 1) = 0u;
      *((_OWORD *)v174 + 2) = 0u;
      *(_OWORD *)uint64_t v174 = 0u;
      unint64_t v107 = v358;
      uint64_t v175 = v73;
      uint64_t v108 = v359;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v358 + 56))( &v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  1LL,  1LL,  v359);
      uint64_t v176 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      uint64_t v177 = v361;
      v176(&v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v168, v361);
      v365.receiver = v172;
      v365.super_class = v171;
      uint64_t v98 = v170;
      uint64_t v102 = v356;
      int v106 = (char *)objc_msgSendSuper2(&v365, "init");
      v175(v168, v177);
    }

    uint64_t v178 = v344;
    swift_bridgeObjectRelease(v360);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v98);
    sub_100020A04((uint64_t)v393);
    sub_100020A04((uint64_t)&v370);
    sub_1000210C0((uint64_t)v353, v178);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v178, 0LL, 1LL, v108);
    uint64_t v179 = (uint64_t)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
    swift_beginAccess( &v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  &v384,  33LL,  0LL);
    sub_100020A68(v178, v179);
    swift_endAccess(&v384);
    uint64_t v180 = &v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    uint64_t v181 = *(void *)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8];
    if (v181)
    {
      uint64_t v182 = *(void *)v180;
      uint64_t v183 = *((void *)v180 + 2);
      uint64_t v184 = *((void *)v180 + 3);
      __int16 v185 = *((_WORD *)v180 + 16);
      *(void *)&__int128 v381 = *(void *)v180;
      *((void *)&v381 + 1) = v181;
      *(void *)&__int128 v382 = v183;
      *((void *)&v382 + 1) = v184;
      __int16 v383 = v185 & 0xFF01;
      uint64_t v186 = (uint64_t *)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      uint64_t v187 = *(void *)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 8];
      if (v187)
      {
        uint64_t v188 = *v186;
        uint64_t v189 = v186[2];
        uint64_t v190 = v186[3];
        uint64_t v191 = v186[4];
        unint64_t v192 = v186[5];
        unint64_t v355 = v186[6];
        *(void *)&__int128 v384 = v188;
        *((void *)&v384 + 1) = v187;
        *(void *)&__int128 v385 = v189;
        *((void *)&v385 + 1) = v190;
        LOWORD(v386) = v191 & 0xFF01;
        *((void *)&v386 + 1) = v192;
        *(void *)&__int128 v387 = v355;
        __int128 v193 = v353[1];
        __int128 v388 = *v353;
        __int128 v389 = v193;
        __int16 v390 = *((_WORD *)v353 + 16);
        __int128 v391 = v388;
        __int128 v366 = v193;
        __int16 v367 = v390;
        uint64_t v194 = v357;
        v195 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v357 + 56);
        sub_10002097C(v182, v181, v183, v184);
        uint64_t v360 = v189;
        uint64_t v361 = v188;
        uint64_t v356 = v187;
        unint64_t v358 = v192;
        uint64_t v359 = v190;
        v350 = (char *)v191;
        uint64_t v196 = v191;
        uint64_t v197 = v195;
        uint64_t v198 = v192;
        unint64_t v199 = v355;
        sub_100020AB0(v188, v187, v189, v190, v196, v198, v355);
        sub_1000209DC((uint64_t)&v391);
        sub_1000209DC((uint64_t)&v366);
        uint64_t v200 = (void (*)(__int128 *, void))v195(&v378, v363, v194);
        v201 = (void *)sub_10001E820((uint64_t)&v388);
        sub_100020A04((uint64_t)&v391);
        sub_100020A04((uint64_t)&v366);

        v200(&v378, 0LL);
        uint64_t v202 = AssociatedConformanceWitness;
        uint64_t v203 = *(void (**)(__int128 *, __int128 *, __int128 *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
        int v204 = v106;
        v203(&v381, &v384, v353, v204, v351, v202);
        uint64_t v295 = v334;
        uint64_t v296 = v348;
        uint64_t v297 = (uint64_t)v350;

        v298 = (char *)v343;
        uint64_t v299 = v352;
        (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v296 + 56))(v343, 0LL, 1LL, v352);
        __int128 v378 = v381;
        __int128 v379 = v382;
        __int16 v380 = v383;
        v300 = (void (*)(_OWORD *, void))v197(v368, v363, v357);
        unint64_t v301 = sub_100004E30();
        uint64_t v302 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v299, v301);
        Dictionary.subscript.setter(v298, &v378, v302);
        v300(v368, 0LL);
        sub_10002091C(v361, v356, v360, v359, v297, v358, v199);

        sub_100020A2C((uint64_t)v353);
        v303 = *(void (**)(char *, uint64_t))(v295 + 8);
LABEL_43:
        v248 = v345;
        uint64_t v258 = v351;
LABEL_44:
        v303(v248, v258);
        return sub_100002AC4(v377);
      }
    }

    uint64_t v205 = (uint64_t)v353;
    __int128 v206 = v353[1];
    __int128 v384 = *v353;
    __int128 v385 = v206;
    LOWORD(v386) = *((_WORD *)v353 + 16);
    v368[0] = v384;
    __int128 v378 = v206;
    LOWORD(v379) = v386;
    uint64_t v207 = v357;
    v208 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v357 + 56);
    uint64_t v209 = v106;
    sub_1000209DC((uint64_t)v368);
    sub_1000209DC((uint64_t)&v378);
    int v210 = (void (*)(__int128 *, void))v208(&v388, v363, v207);
    uint64_t v212 = v211;
    char v213 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v211 + 8));
    *(void *)&__int128 v366 = *(void *)(v212 + 8);
    *(void *)(v212 + 8) = 0x8000000000000000LL;
    sub_10001EF2C((uint64_t)v209, (uint64_t)&v384, v213);
    uint64_t v214 = *(void *)(v212 + 8);
    *(void *)(v212 + 8) = v366;
    swift_bridgeObjectRelease(v214);
    sub_100020A04((uint64_t)v368);
    sub_100020A04((uint64_t)&v378);
    v210(&v388, 0LL);

    uint64_t v257 = v205;
    goto LABEL_41;
  }

  if (swift_dynamicCast(&v373, v377, v75, &type metadata for DNSRecords.TXT, 0LL))
  {
    v331 = v73;
    __int128 v384 = v373;
    __int128 v385 = v374;
    __int128 v386 = v375;
    uint64_t v360 = *((void *)&v375 + 1);
    v346 = (char *)v376;
    *(void *)&__int128 v387 = v376;
    v349 = (char *)*((void *)&v373 + 1);
    uint64_t v347 = v373;
    unint64_t v355 = *((void *)&v374 + 1);
    v353 = (__int128 *)v374;
    uint64_t v344 = v375;
    unint64_t v343 = BYTE1(v375);
    __int128 v388 = v373;
    __int128 v389 = v374;
    __int16 v390 = v375;
    __int16 v383 = v375;
    __int128 v381 = v373;
    __int128 v382 = v374;
    v393[0] = v373;
    __int16 v392 = v375;
    __int128 v391 = v374;
    uint64_t v130 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 40);
    sub_1000209DC((uint64_t)v393);
    sub_1000209DC((uint64_t)&v391);
    uint64_t v131 = v33;
    uint64_t v132 = v363;
    v337 = v130;
    uint64_t v133 = v130(v363, v92);
    uint64_t v135 = v134;
    uint64_t v137 = v136;
    uint64_t v139 = v138;
    __int128 v378 = v381;
    __int128 v379 = v382;
    __int16 v380 = v383;
    objc_super v140 = (os_log_s *)sub_100004E30();
    v141 = v342;
    uint64_t v142 = v352;
    os_log_t v330 = v140;
    Dictionary.subscript.getter(&v378, v137, &type metadata for DNSRecords.PTR, v352);
    swift_bridgeObjectRelease(v139);
    swift_bridgeObjectRelease(v137);
    swift_bridgeObjectRelease(v135);
    swift_bridgeObjectRelease(v133);
    sub_100020A04((uint64_t)v393);
    sub_100020A04((uint64_t)&v391);
    uint64_t v143 = v348;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v348 + 48))(v141, 1LL, v142) == 1)
    {
      (*(void (**)(char *, uint64_t))(v339 + 8))(v141, v340);
      sub_1000209DC((uint64_t)v393);
      sub_1000209DC((uint64_t)&v391);
      v362 = v131;
      uint64_t v144 = v337(v132, v92);
      uint64_t v146 = v145;
      uint64_t v148 = v147;
      uint64_t v150 = v149;
      if (*(void *)(v145 + 16) && (unint64_t v151 = sub_10001C214((uint64_t)&v381), (v152 & 1) != 0))
      {
        uint64_t v153 = (char *)*(id *)(*(void *)(v146 + 56) + 8 * v151);
      }

      else
      {
        *(void *)&__int128 v378 = v362;
        uint64_t v259 = v350;
        ((void (*)(uint64_t, uint64_t))v333)(v363, v332);
        uint64_t v260 = (objc_class *)type metadata accessor for BonjourAdvertiser(0LL);
        uint64_t v261 = (char *)objc_allocWithZone(v260);
        v262 = &v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
        *(_OWORD *)v262 = 0u;
        *((_OWORD *)v262 + 1) = 0u;
        *((_WORD *)v262 + 16) = 0;
        unint64_t v263 = &v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        *((void *)v263 + 6) = 0LL;
        *((_OWORD *)v263 + 1) = 0u;
        *((_OWORD *)v263 + 2) = 0u;
        *(_OWORD *)unint64_t v263 = 0u;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v358 + 56))( &v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  1LL,  1LL,  v359);
        uint64_t v264 = v361;
        (*(void (**)(char *, char *, uint64_t))(v356 + 16))( &v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger],  v259,  v361);
        v372.receiver = v261;
        v372.super_class = v260;
        uint64_t v153 = (char *)objc_msgSendSuper2(&v372, "init");
        v331(v259, v264);
      }

      unint64_t v265 = v346;
      unint64_t v267 = v343;
      uint64_t v266 = v344;
      swift_bridgeObjectRelease(v150);
      swift_bridgeObjectRelease(v148);
      swift_bridgeObjectRelease(v146);
      swift_bridgeObjectRelease(v144);
      sub_100020A04((uint64_t)v393);
      sub_100020A04((uint64_t)&v391);
      unint64_t v268 = v266 | (v267 << 8);
      __int128 v269 = &v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      uint64_t v270 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      uint64_t v271 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 8];
      uint64_t v272 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 16];
      uint64_t v273 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 24];
      uint64_t v274 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 32];
      uint64_t v275 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 40];
      unint64_t v276 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 48];
      __int128 v277 = v349;
      *(void *)__int128 v269 = v347;
      *((void *)v269 + 1) = v277;
      unint64_t v278 = v355;
      *((void *)v269 + 2) = v353;
      *((void *)v269 + 3) = v278;
      *((void *)v269 + 4) = v268;
      *((void *)v269 + 5) = v360;
      *((void *)v269 + 6) = v265;
      sub_100021028(&v384);
      sub_10002091C(v270, v271, v272, v273, v274, v275, v276);
      __int128 v279 = &v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      uint64_t v280 = *(void *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                            + 8];
      uint64_t v281 = v357;
      if (!v280) {
        goto LABEL_51;
      }
      uint64_t v282 = *(void *)v279;
      uint64_t v283 = *((void *)v279 + 2);
      uint64_t v284 = *((void *)v279 + 3);
      __int16 v285 = *((_WORD *)v279 + 16);
      *(void *)&__int128 v378 = *(void *)v279;
      *((void *)&v378 + 1) = v280;
      *(void *)&__int128 v379 = v283;
      *((void *)&v379 + 1) = v284;
      __int16 v380 = v285 & 0xFF01;
      v286 = &v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
      swift_beginAccess( &v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo],  &v370,  0LL,  0LL);
      uint64_t v287 = (uint64_t)v286;
      uint64_t v288 = v336;
      sub_1000226B0(v287, v336, &qword_100404DB0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v358 + 48))(v288, 1LL, v359) == 1)
      {
        sub_1000225EC(v288, &qword_100404DB0);
LABEL_51:
        v289 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v281 + 56);
        sub_1000209DC((uint64_t)v393);
        sub_1000209DC((uint64_t)&v391);
        uint64_t v220 = v153;
        v290 = (void (*)(_OWORD *, void))v289(v368, v363, v281);
        uint64_t v292 = v291;
        char v293 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v291 + 8));
        *(void *)&__int128 v366 = *(void *)(v292 + 8);
        *(void *)(v292 + 8) = 0x8000000000000000LL;
        sub_10001EF2C((uint64_t)v220, (uint64_t)&v381, v293);
        uint64_t v294 = *(void *)(v292 + 8);
        *(void *)(v292 + 8) = v366;
        swift_bridgeObjectRelease(v294);
        sub_100020A04((uint64_t)v393);
        sub_100020A04((uint64_t)&v391);
        v290(v368, 0LL);
        sub_100021074(&v384);
        goto LABEL_33;
      }

      sub_100022628(v288, v338, type metadata accessor for DNSRecords.SRV);
      uint64_t v313 = v281;
      v314 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v281 + 56);
      sub_1000209DC((uint64_t)v393);
      sub_1000209DC((uint64_t)&v391);
      sub_10002097C(v282, v280, v283, v284);
      uint64_t v315 = v363;
      v316 = (void (*)(_OWORD *, void))v314(v368, v363, v313);
      v317 = (void *)sub_10001E820((uint64_t)&v381);
      sub_100020A04((uint64_t)v393);
      sub_100020A04((uint64_t)&v391);

      v316(v368, 0LL);
      uint64_t v318 = AssociatedConformanceWitness;
      v319 = *(void (**)(__int128 *, __int128 *, uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                              + 56);
      v320 = v153;
      v321 = v335;
      uint64_t v216 = v351;
      v319(&v378, &v384, v338, v320, v351, v318);
      uint64_t v322 = v334;

      uint64_t v323 = v352;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v348 + 56))(v321, 0LL, 1LL, v352);
      v368[0] = v378;
      v368[1] = v379;
      __int16 v369 = v380;
      v324 = (void (*)(__int128 *, void))v314(&v366, v315, v357);
      uint64_t v325 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v323, v330);
      Dictionary.subscript.setter(v321, v368, v325);
      v324(&v366, 0LL);

      sub_100021074(&v384);
      sub_100020A2C(v338);
      v303 = *(void (**)(char *, uint64_t))(v322 + 8);
      v248 = v345;
    }

    else
    {
      uint64_t v226 = v341;
      (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v341, v141, v142);
      uint64_t v227 = v345;
      uint64_t v216 = v351;
      uint64_t v228 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v226, v351);
      if (v228)
      {
        uint64_t v229 = v228;
        uint64_t v230 = type metadata accessor for BonjourAdvertiser(0LL);
        uint64_t v231 = swift_dynamicCastClass(v229, v230);
        if (v231)
        {
          unint64_t v232 = v344 | (v343 << 8);
          v233 = (void *)(v231
                          + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
          uint64_t v234 = *(void *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
          uint64_t v235 = *(void *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 8);
          uint64_t v236 = *(void *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 16);
          uint64_t v237 = *(void *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 24);
          uint64_t v238 = *(void *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 32);
          uint64_t v239 = *(void *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 40);
          unint64_t v240 = *(void *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 48);
          uint64_t v241 = v349;
          void *v233 = v347;
          v233[1] = v241;
          unint64_t v242 = v355;
          void v233[2] = v353;
          v233[3] = v242;
          v233[4] = v232;
          v243 = v346;
          v233[5] = v360;
          v233[6] = v243;
          sub_100021028(&v384);
          uint64_t v244 = v234;
          uint64_t v143 = v348;
          uint64_t v245 = v235;
          uint64_t v246 = v236;
          uint64_t v226 = v341;
          uint64_t v247 = v238;
          uint64_t v216 = v351;
          uint64_t v142 = v352;
          sub_10002091C(v244, v245, v246, v237, v247, v239, v240);
        }

        swift_unknownObjectRelease(v229);
      }

      (*(void (**)(char *, __int128 *, uint64_t))(AssociatedConformanceWitness + 64))(v226, &v384, v216);
      sub_100021074(&v384);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v226, v142);
      v303 = *(void (**)(char *, uint64_t))(v334 + 8);
      v248 = v227;
    }

LABEL_57:
    uint64_t v258 = v216;
    goto LABEL_44;
  }

  int v215 = swift_dynamicCast(&v373, v377, v75, &type metadata for DNSRecords.ARPA, 0LL);
  uint64_t v216 = v351;
  v217 = v345;
  if (v215)
  {
    __int128 v384 = v373;
    __int128 v385 = v374;
    __int128 v386 = v375;
    __int128 v387 = v376;
    (*(void (**)(__int128 *, uint64_t))(AssociatedConformanceWitness + 88))(&v384, v351);
    sub_1000208A4((uint64_t)&v384);
LABEL_56:
    v303 = *(void (**)(char *, uint64_t))(v334 + 8);
    v248 = v217;
    goto LABEL_57;
  }

  if (!swift_dynamicCast(&v384, v377, v75, &type metadata for DNSRecords.AAAA, 0LL))
  {
    *(void *)&__int128 v384 = v33;
    v304 = (char *)v337;
    ((void (*)(uint64_t, uint64_t))v333)(v363, v332);
    uint64_t v305 = sub_10002084C(v90, (uint64_t)&v384);
    v306 = (os_log_s *)Logger.logObject.getter(v305);
    os_log_type_t v307 = static os_log_type_t.error.getter(v306);
    if (os_log_type_enabled(v306, v307))
    {
      v331 = v73;
      v308 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v309 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v388 = v309;
      *(_DWORD *)v308 = 136315138;
      sub_10002084C((uint64_t)&v384, (uint64_t)&v373);
      uint64_t v310 = String.init<A>(describing:)(&v373, v75);
      unint64_t v312 = v311;
      *(void *)&__int128 v373 = sub_10000235C(v310, v311, (uint64_t *)&v388);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, (char *)&v373 + 8);
      swift_bridgeObjectRelease(v312);
      sub_100002AC4(&v384);
      _os_log_impl((void *)&_mh_execute_header, v306, v307, "Failed to start advertising for record %s", v308, 0xCu);
      swift_arrayDestroy(v309, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v309, -1LL, -1LL);
      swift_slowDealloc(v308, -1LL, -1LL);

      v331((char *)v337, v361);
      (*(void (**)(char *, uint64_t))(v334 + 8))(v345, v216);
      return sub_100002AC4(v377);
    }

    sub_100002AC4(&v384);
    v73(v304, v361);
    goto LABEL_56;
  }

  (*(void (**)(char *, uint64_t))(v334 + 8))(v217, v216);
  uint64_t v249 = *((void *)&v387 + 1);
  swift_bridgeObjectRelease(v385);
  swift_bridgeObjectRelease(v249);
  return sub_100002AC4(v377);
}

  __break(1u);
}

  uint64_t v153 = isUniquelyReferenced_nonNull_native ^ 1;
  uint64_t v154 = v158;
  sub_100022628(*(void *)(v186[0] + 56) + *(void *)(v175 + 72) * v51, v158, type metadata accessor for AWDLPeer);
  uint64_t v155 = v179;
  v176(v154, 0LL, 1LL, v179);
  *(_BYTE *)(v154 + *(int *)(v155 + 116)) = v153 & 1;
  sub_10029F08C(v154, 1, v186, v51, v45);
  sub_1000225EC(v154, (uint64_t *)&unk_10040E540);
  *uint64_t v182 = v186[0];
  swift_endAccess(v188);

  char v152 = v47;
LABEL_58:
  sub_10005802C(v152, type metadata accessor for AWDLPeer);
}

uint64_t BonjourOffload.startResolving(record:)( uint64_t a1, uint64_t a2, void (**a3)(uint64_t, char *))
{
  uint64_t v5 = a2;
  uint64_t v145 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v135 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v134 = type metadata accessor for Optional(0LL, v135);
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin();
  uint64_t v131 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v132 = (char *)&v124 - v9;
  uint64_t v130 = AssociatedConformanceWitness;
  uint64_t v137 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v140 = type metadata accessor for Optional(0LL, v137);
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin();
  uint64_t v138 = (char *)&v124 - v10;
  uint64_t v146 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v144 = (void *)*(v146 - 1);
  __chkstk_darwin();
  uint64_t v142 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v136 = (char *)&v124 - v12;
  __chkstk_darwin();
  uint64_t v129 = (char *)&v124 - v13;
  __chkstk_darwin();
  uint64_t v143 = (char *)&v124 - v14;
  uint64_t v15 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v124 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v124 - v20;
  a3[8](v5, (char *)a3);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v141 = v21;
  uint64_t v127 = AssociatedTypeWitness;
  v23(v21, v18, AssociatedTypeWitness);
  *(void *)&__int128 v154 = v3;
  uint64_t v24 = (void (*)(void))*((void *)a3[1] + 1);
  uint64_t v25 = v143;
  uint64_t v124 = a3[1];
  uint64_t v125 = (void (*)(uint64_t, void))v24;
  v24(v5);
  uint64_t v26 = v145;
  uint64_t v27 = sub_10002084C(v145, (uint64_t)&v154);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  __int128 v31 = a3;
  uint64_t v126 = v19;
  uint64_t v128 = v5;
  if (v30)
  {
    __int128 v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v148 = v33;
    *(_DWORD *)__int128 v32 = 136315138;
    sub_10002084C((uint64_t)&v154, (uint64_t)&v151);
    uint64_t v34 = sub_100002274(&qword_100404DB8);
    uint64_t v35 = String.init<A>(describing:)(&v151, v34);
    unint64_t v37 = v36;
    *(void *)&__int128 v151 = sub_10000235C(v35, v36, (uint64_t *)&v148);
    __int128 v31 = a3;
    uint64_t v5 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, (char *)&v151 + 8);
    swift_bridgeObjectRelease(v37);
    sub_100002AC4(&v154);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Starting resolve for %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL, &type metadata for Any[8]);
    uint64_t v38 = v33;
    uint64_t v26 = v145;
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    sub_100002AC4(&v154);
  }

  os_log_type_t v39 = (void *)v144[1];
  ((void (*)(char *, void *))v39)(v25, v146);
  sub_10002084C(v26, (uint64_t)&v154);
  uint64_t v40 = sub_100002274(&qword_100404DB8);
  if (swift_dynamicCast(&v148, &v154, v40, &type metadata for DNSRecords.PTR, 6LL))
  {
    uint64_t v144 = v39;
    __int128 v151 = v148;
    __int128 v152 = v149;
    LOWORD(v153) = v150;
    __int128 v157 = v149;
    __int16 v158 = v150;
    BOOL v41 = v31[5];
    uint64_t v42 = *((void *)&v149 + 1);
    uint64_t v142 = (char *)v149;
    swift_bridgeObjectRetain(*((void *)&v149 + 1));
    uint64_t v145 = v3;
    uint64_t v43 = ((uint64_t (*)(uint64_t, void))v41)(v5, v31);
    uint64_t v45 = v44;
    uint64_t v46 = v31;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    __int128 v154 = v157;
    LOWORD(v155) = v158;
    sub_100004DEC();
    uint64_t v51 = v138;
    Dictionary.subscript.getter(&v154, v43, &type metadata for DNSRecords.Identifier, v137);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v43);
    sub_100020A04((uint64_t)&v157);
    __chkstk_darwin();
    *(&v124 - 4) = (void (*)(uint64_t, char *))v5;
    *(&v124 - 3) = (void (*)(uint64_t, char *))v46;
    uint64_t v143 = (char *)v46;
    *(&v124 - 2) = (void (*)(uint64_t, char *))v141;
    uint64_t v52 = type metadata accessor for BonjourBrowser(0LL);
    uint64_t v53 = v140;
    sub_100013EF8( (void (*)(char *, char *))sub_1000227F4,  (uint64_t)(&v124 - 6),  (uint64_t)&type metadata for Never,  v52,  v54,  (uint64_t)&v147);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v51, v53);
    uint64_t v55 = v147;
    if (v147 && (BOOL v56 = sub_100018608((uint64_t)&v151), v55, v56))
    {
      uint64_t v146 = (void *)v56;
      __int128 v159 = v151;
      sub_1000209DC((uint64_t)&v157);
      sub_1000209DC((uint64_t)&v159);
      uint64_t v57 = v145;
      uint64_t v58 = v128;
      uint64_t v59 = v143;
      uint64_t v60 = ((uint64_t (*)(uint64_t, char *))v41)(v128, v143);
      uint64_t v62 = v61;
      uint64_t v64 = v63;
      uint64_t v66 = v65;
      __int128 v154 = v151;
      __int128 v155 = v152;
      __int16 v156 = v153;
      unint64_t v67 = sub_100004E30();
      unint64_t v68 = v132;
      uint64_t v69 = v135;
      uint64_t v144 = (void *)v67;
      Dictionary.subscript.getter(&v154, v66, &type metadata for DNSRecords.PTR, v135);
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v60);
      sub_100020A04((uint64_t)&v159);
      sub_100020A04((uint64_t)&v157);
      os_log_t v70 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v69 - 8);
      if (v70[6](v68, 1LL, v69) == 1)
      {
        uint64_t v142 = (char *)v70;
        (*(void (**)(char *, uint64_t))(v133 + 8))(v68, v134);
        *(void *)&__int128 v154 = v57;
        sub_1000209DC((uint64_t)&v157);
        sub_1000209DC((uint64_t)&v159);
        uint64_t v71 = (uint64_t)v129;
        v125(v58, v124);
        uint64_t v72 = (char *)sub_100020E7C((uint64_t)&v151, v71);
        uint64_t v73 = (*((uint64_t (**)(uint64_t, char *))v59 + 4))(v58, v59);
        uint64_t v74 = *(void *)&v72[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
        *(void *)&v72[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate] = v73;
        swift_unknownObjectRelease(v74);
        uint64_t v75 = swift_allocObject(&unk_1003DCF38, 24LL, 7LL);
        swift_unknownObjectWeakInit(v75 + 16, v57);
        uint64_t v76 = swift_allocObject(&unk_1003DCF88, 74LL, 7LL);
        __int128 v77 = v151;
        *(_OWORD *)(v76 + 56) = v152;
        *(void *)(v76 + 16) = v58;
        *(void *)(v76 + 24) = v59;
        *(void *)(v76 + 32) = v75;
        *(_WORD *)(v76 + 72) = v153;
        *(_OWORD *)(v76 + 40) = v77;
        uint64_t v78 = (uint64_t (**)())&v72[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
        uint64_t v79 = *(void *)&v72[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
        uint64_t v80 = *(void *)&v72[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler
                            + 8];
        *uint64_t v78 = sub_10002115C;
        v78[1] = (uint64_t (*)())v76;
        sub_1000209DC((uint64_t)&v157);
        sub_1000209DC((uint64_t)&v159);
        sub_100021018(v79, v80);
        uint64_t v81 = v130;
        uint64_t v82 = *(void (**)(__int128 *, void *, char *, uint64_t, uint64_t))(v130 + 104);
        uint64_t v83 = v72;
        uint64_t v84 = v131;
        id v85 = v146;
        uint64_t v86 = v127;
        v82(&v151, v146, v83, v127, v81);
        uint64_t v119 = v126;
        __int16 v120 = v142;

        uint64_t v121 = v135;
        (*((void (**)(char *, void, uint64_t, uint64_t))v120 + 7))(v84, 0LL, 1LL, v135);
        __int128 v154 = v151;
        __int128 v155 = v152;
        __int16 v156 = v153;
        uint64_t v122 = (void (*)(__int128 *, void))(*((uint64_t (**)(__int128 *, uint64_t))v143 + 7))( &v148,  v128);
        uint64_t v123 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v121, v144);
        Dictionary.subscript.setter(v84, &v154, v123);
        v122(&v148, 0LL);

        return (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v141, v86);
      }

      sub_100020A04((uint64_t)&v159);
      sub_100020A04((uint64_t)&v157);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v68, v134);
    }

    else
    {
      *(void *)&__int128 v154 = v145;
      int v106 = v136;
      v125(v128, v124);
      __int128 v107 = v151;
      sub_1000209DC((uint64_t)&v157);
      swift_bridgeObjectRetain(*((void *)&v107 + 1));
      sub_1000209DC((uint64_t)&v157);
      swift_bridgeObjectRetain(*((void *)&v107 + 1));
      sub_1000209DC((uint64_t)&v157);
      uint64_t v108 = swift_bridgeObjectRetain(*((void *)&v107 + 1));
      uint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
      os_log_type_t v110 = static os_log_type_t.error.getter(v109);
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = swift_slowAlloc(22LL, -1LL);
        uint64_t v112 = swift_slowAlloc(64LL, -1LL);
        *(void *)&__int128 v148 = v112;
        *(_DWORD *)uint64_t v111 = 136315394;
        swift_bridgeObjectRetain(*((void *)&v107 + 1));
        *(void *)&__int128 v154 = sub_10000235C(v107, *((unint64_t *)&v107 + 1), (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8);
        swift_bridgeObjectRelease_n(*((void *)&v107 + 1), 2LL);
        sub_100020A04((uint64_t)&v157);
        swift_bridgeObjectRelease(*((void *)&v107 + 1));
        sub_100020A04((uint64_t)&v157);
        *(_WORD *)(v111 + 12) = 2080;
        *(void *)&__int128 v154 = v142;
        *((void *)&v154 + 1) = v42;
        sub_1000209DC((uint64_t)&v157);
        swift_bridgeObjectRetain(v42);
        v113._countAndFlagsBits = 24366LL;
        v113._object = (void *)0xE200000000000000LL;
        String.append(_:)(v113);
        if ((_BYTE)v158) {
          uint64_t v114 = 7365749LL;
        }
        else {
          uint64_t v114 = 7365492LL;
        }
        unint64_t v115 = 0xE300000000000000LL;
        String.append(_:)(*(Swift::String *)&v114);
        swift_bridgeObjectRelease(0xE300000000000000LL);
        v116._countAndFlagsBits = 46LL;
        v116._object = (void *)0xE100000000000000LL;
        String.append(_:)(v116);
        v117._countAndFlagsBits = 0x6C61636F6CLL;
        v117._object = (void *)0xE500000000000000LL;
        String.append(_:)(v117);
        sub_100020A04((uint64_t)&v157);
        uint64_t v118 = *((void *)&v154 + 1);
        *(void *)&__int128 v154 = sub_10000235C(v154, *((unint64_t *)&v154 + 1), (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8);
        swift_bridgeObjectRelease(*((void *)&v107 + 1));
        swift_bridgeObjectRelease(v118);
        sub_100020A04((uint64_t)&v157);
        swift_bridgeObjectRelease(*((void *)&v107 + 1));
        sub_100020A04((uint64_t)&v157);
        _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Cannot resolve %s because peer not discovered with %s",  (uint8_t *)v111,  0x16u);
        swift_arrayDestroy(v112, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v111, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease(*((void *)&v107 + 1));
        sub_100020A04((uint64_t)&v157);
        swift_bridgeObjectRelease(*((void *)&v107 + 1));
        sub_100020A04((uint64_t)&v157);
        swift_bridgeObjectRelease(*((void *)&v107 + 1));
        sub_100020A04((uint64_t)&v157);
        swift_bridgeObjectRelease(*((void *)&v107 + 1));
        sub_100020A04((uint64_t)&v157);
      }

      ((void (*)(char *, void *))v144)(v106, v146);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v141, v127);
  }

  else
  {
    *(void *)&__int128 v154 = v3;
    char v87 = v142;
    v125(v5, v124);
    sub_10002084C(v26, (uint64_t)&v154);
    uint64_t v88 = sub_10002084C(v26, (uint64_t)&v151);
    uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    os_log_type_t v90 = static os_log_type_t.error.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = swift_slowAlloc(22LL, -1LL);
      uint64_t v92 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v157 = v92;
      *(_DWORD *)uint64_t v91 = 136315394;
      sub_10002084C((uint64_t)&v154, (uint64_t)&v148);
      uint64_t v93 = String.init<A>(describing:)(&v148, v40);
      unint64_t v95 = v94;
      *(void *)&__int128 v148 = sub_10000235C(v93, v94, (uint64_t *)&v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8);
      swift_bridgeObjectRelease(v95);
      sub_100002AC4(&v154);
      *(_WORD *)(v91 + 12) = 2080;
      uint64_t v96 = *((void *)&v152 + 1);
      uint64_t v97 = v153;
      sub_100021104(&v151, *((uint64_t *)&v152 + 1));
      LOBYTE(v96) = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 24))(v96, v97);
      *(void *)&__int128 v148 = 39LL;
      *((void *)&v148 + 1) = 0xE100000000000000LL;
      v98._countAndFlagsBits = sub_1000F9330(v96);
      object = v98._object;
      String.append(_:)(v98);
      swift_bridgeObjectRelease(object);
      v100._countAndFlagsBits = 91LL;
      v100._object = (void *)0xE100000000000000LL;
      String.append(_:)(v100);
      LOWORD(v159) = word_100339862[(char)v96];
      v101._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
      uint64_t v102 = v101._object;
      String.append(_:)(v101);
      swift_bridgeObjectRelease(v102);
      v103._countAndFlagsBits = 10077LL;
      v103._object = (void *)0xE200000000000000LL;
      String.append(_:)(v103);
      uint64_t v104 = *((void *)&v148 + 1);
      *(void *)&__int128 v148 = sub_10000235C(v148, *((unint64_t *)&v148 + 1), (uint64_t *)&v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8);
      swift_bridgeObjectRelease(v104);
      sub_100002AC4(&v151);
      _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "Cannot start resolve for record: %s [%s]",  (uint8_t *)v91,  0x16u);
      swift_arrayDestroy(v92, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v92, -1LL, -1LL);
      swift_slowDealloc(v91, -1LL, -1LL);

      char v105 = v142;
    }

    else
    {
      sub_100002AC4(&v154);
      sub_100002AC4(&v151);

      char v105 = v87;
    }

    ((void (*)(char *, void *))v39)(v105, v146);
    return (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v141, v127);
  }

uint64_t sub_1000171B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v10 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v11 = type metadata accessor for Optional(0LL, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = &v22[-v13];
  a1 += 16LL;
  swift_beginAccess(a1, v25, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v16 = Strong;
    __int128 v17 = *(_OWORD *)(a2 + 16);
    v23[0] = *(_OWORD *)a2;
    v23[1] = v17;
    __int16 v24 = *(_WORD *)(a2 + 32);
    uint64_t v18 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 56))( v22,  a3,  a4);
    unint64_t v19 = sub_100004E30();
    uint64_t v20 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v10, v19);
    Dictionary.removeValue(forKey:)(v23, v20);
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
    v18(v22, 0LL);
    return swift_unknownObjectRelease(v16);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v14, 1LL, 1LL, v10);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  }

uint64_t BonjourOffload.stopResolving(record:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v115 = a1;
  sub_100002274(&qword_100404DB0);
  __chkstk_darwin();
  uint64_t v102 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a3,  a2,  &protocol requirements base descriptor for BonjourOffload);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffload,  &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  uint64_t v107 = type metadata accessor for Optional(0LL, v7);
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin();
  Swift::String v101 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v109 = (char *)&v96 - v9;
  uint64_t v111 = v7;
  uint64_t v110 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v108 = (char *)&v96 - v10;
  uint64_t v113 = type metadata accessor for Logger(0LL);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v114 = (char *)&v96 - v13;
  uint64_t v14 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  __int128 v17 = (char *)&v96 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v96 - v19;
  uint64_t v21 = *(void (**)(unint64_t, unint64_t))(a3 + 64);
  unint64_t v116 = a2;
  v21(a2, a3);
  uint64_t v99 = v12;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, AssociatedTypeWitness);
  uint64_t v126 = v117;
  unint64_t v23 = a3;
  __int16 v24 = *(void (**)(unint64_t, uint64_t))(*(void *)(a3 + 8) + 8LL);
  uint64_t v98 = *(void *)(a3 + 8);
  uint64_t v97 = v24;
  ((void (*)(unint64_t))v24)(v116);
  uint64_t v25 = sub_10002084C(v115, (uint64_t)&v126);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.info.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v104 = AssociatedTypeWitness;
  Swift::String v103 = v20;
  uint64_t v100 = v18;
  if (v28)
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v119 = v30;
    *(_DWORD *)os_log_type_t v29 = 136315138;
    sub_10002084C((uint64_t)&v126, (uint64_t)&v122);
    uint64_t v31 = sub_100002274(&qword_100404DB8);
    uint64_t v32 = String.init<A>(describing:)(&v122, v31);
    unint64_t v34 = v33;
    uint64_t v122 = sub_10000235C(v32, v33, &v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123);
    swift_bridgeObjectRelease(v34);
    sub_100002AC4(&v126);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Stopping resolve for %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    sub_100002AC4(&v126);
  }

  uint64_t v35 = *(void (**)(char *, uint64_t))(v112 + 8);
  uint64_t v36 = v113;
  v35(v114, v113);
  uint64_t v37 = v115;
  sub_10002084C(v115, (uint64_t)&v126);
  uint64_t v38 = sub_100002274(&qword_100404DB8);
  if (!swift_dynamicCast(&v122, &v126, v38, &type metadata for DNSRecords.PTR, 6LL))
  {
    uint64_t v126 = v117;
    uint64_t v61 = v99;
    v97(v116, v98);
    sub_10002084C(v37, (uint64_t)&v126);
    uint64_t v62 = sub_10002084C(v37, (uint64_t)&v122);
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc(22LL, -1LL);
      uint64_t v66 = swift_slowAlloc(64LL, -1LL);
      uint64_t v121 = v66;
      *(_DWORD *)uint64_t v65 = 136315394;
      sub_10002084C((uint64_t)&v126, (uint64_t)&v119);
      uint64_t v67 = String.init<A>(describing:)(&v119, v38);
      unint64_t v69 = v68;
      uint64_t v119 = sub_10000235C(v67, v68, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      swift_bridgeObjectRelease(v69);
      sub_100002AC4(&v126);
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v70 = v124;
      uint64_t v71 = v125;
      sub_100021104(&v122, v124);
      LOBYTE(v70) = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 24))(v70, v71);
      uint64_t v119 = 39LL;
      v120[0] = 0xE100000000000000LL;
      v72._countAndFlagsBits = sub_1000F9330(v70);
      object = v72._object;
      String.append(_:)(v72);
      swift_bridgeObjectRelease(object);
      v74._countAndFlagsBits = 91LL;
      v74._object = (void *)0xE100000000000000LL;
      String.append(_:)(v74);
      __int16 v118 = word_100339862[(char)v70];
      v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
      uint64_t v76 = v75._object;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(v76);
      v77._countAndFlagsBits = 10077LL;
      v77._object = (void *)0xE200000000000000LL;
      String.append(_:)(v77);
      unint64_t v78 = v120[0];
      uint64_t v119 = sub_10000235C(v119, v120[0], &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      swift_bridgeObjectRelease(v78);
      sub_100002AC4(&v122);
      _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Cannot stop resolve for record: %s [%s]",  (uint8_t *)v65,  0x16u);
      swift_arrayDestroy(v66, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);

      uint64_t v79 = v99;
      uint64_t v80 = v113;
    }

    else
    {

      sub_100002AC4(&v122);
      sub_100002AC4(&v126);
      uint64_t v79 = v61;
      uint64_t v80 = v36;
    }

    v35(v79, v80);
    goto LABEL_21;
  }

  uint64_t v40 = v122;
  uint64_t v39 = v123[0];
  uint64_t v41 = v123[1];
  uint64_t v42 = v124;
  int v43 = v125;
  int v44 = BYTE1(v125);
  uint64_t v45 = *(uint64_t (**)(unint64_t, unint64_t))(v23 + 40);
  swift_bridgeObjectRetain(v123[0]);
  swift_bridgeObjectRetain(v42);
  uint64_t v46 = v45(v116, v23);
  uint64_t v114 = v47;
  uint64_t v115 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v113 = v40;
  uint64_t v126 = v40;
  uint64_t v127 = v39;
  uint64_t v112 = v41;
  uint64_t v128 = v41;
  uint64_t v129 = v42;
  LODWORD(v99) = v43;
  char v130 = v43;
  int v52 = v44;
  char v131 = v44;
  unint64_t v53 = sub_100004E30();
  uint64_t v54 = v109;
  uint64_t v55 = v111;
  Dictionary.subscript.getter(&v126, v51, &type metadata for DNSRecords.PTR, v111);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v114);
  __n128 v56 = swift_bridgeObjectRelease(v115);
  uint64_t v57 = v110;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v110 + 48))(v54, 1LL, v55, v56) != 1)
  {
    uint64_t v114 = (char *)v53;
    LODWORD(v115) = v52;
    uint64_t v81 = v113;
    unint64_t v82 = v116;
    uint64_t v83 = v108;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v108, v54, v55);
    uint64_t v84 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 112))(v83, v104);
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = type metadata accessor for BonjourResolver(0LL);
      uint64_t v87 = swift_dynamicCastClass(v85, v86);
      if (v87)
      {
        uint64_t v88 = v87 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
        swift_beginAccess( v87 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv,  &v119,  0LL,  0LL);
        uint64_t v89 = v88;
        uint64_t v83 = v108;
        uint64_t v90 = v102;
        sub_1000226B0(v89, v102, &qword_100404DB0);
        uint64_t v91 = type metadata accessor for DNSRecords.SRV(0LL);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 48LL))(v90, 1LL, v91) == 1)
        {
          sub_1000225EC(v90, &qword_100404DB0);
          (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 120))(v83, v104);
          uint64_t v126 = v81;
          uint64_t v127 = v39;
          uint64_t v128 = v112;
          uint64_t v129 = v42;
          char v130 = (char)v99;
          char v131 = v115;
          unint64_t v92 = v82;
          uint64_t v93 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, unint64_t, unint64_t))(v23 + 56))( &v122,  v82,  v23);
          uint64_t v94 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v55, v114);
          unint64_t v95 = v101;
          Dictionary.removeValue(forKey:)(&v126, v94);
          (*(void (**)(char *, uint64_t))(v106 + 8))(v95, v107);
          v93(&v122, 0LL);
          swift_bridgeObjectRelease(v42);
          swift_bridgeObjectRelease(v39);
          sub_10000DB4C(v92, v23);
          swift_unknownObjectRelease(v85);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v108, v55);
LABEL_21:
          uint64_t v58 = *(uint64_t (**)(char *, void))(v100 + 8);
          uint64_t v59 = v103;
          uint64_t v60 = &v132;
          return v58(v59, *(v60 - 32));
        }

        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v39);
        swift_unknownObjectRelease(v85);
        sub_1000225EC(v90, &qword_100404DB0);
LABEL_20:
        (*(void (**)(char *, uint64_t))(v57 + 8))(v83, v55);
        goto LABEL_21;
      }

      swift_unknownObjectRelease(v85);
    }

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v39);
    goto LABEL_20;
  }

  (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v104);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v39);
  uint64_t v58 = *(uint64_t (**)(char *, void))(v106 + 8);
  uint64_t v59 = v54;
  uint64_t v60 = &v133;
  return v58(v59, *(v60 - 32));
}

Swift::Int sub_100017E2C()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v3, 0LL);
  NSObject.hash(into:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100017E88(uint64_t a1)
{
  Swift::UInt8 v2 = *(_BYTE *)(v1 + 8);
  NSObject.hash(into:)(a1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100017EC8(uint64_t a1)
{
  Swift::UInt8 v2 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v4, a1);
  NSObject.hash(into:)(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100017F20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((unsigned __int8 *)a1 + 8);
  uint64_t v4 = *a2;
  int v5 = *((unsigned __int8 *)a2 + 8);
  sub_100021774();
  return static NSObject.== infix(_:_:)(v2, v4) & ~(v3 ^ v5) & 1;
}

void *sub_100017F78(uint64_t a1)
{
  return &j__swift_endAccess;
}

void sub_100017FC0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v7 = *(_BYTE *)(a1 + 32);
  if (!sub_1000FAC64( v5,  v4,  v7 | (*(unsigned __int8 *)(a1 + 33) << 8),  *(void *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service),  *(void *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8),  *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16) | (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 17) << 8)))
  {
    __break(1u);
    return;
  }

  uint64_t v8 = *(void *)a1;
  uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess( v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers,  v57,  0LL,  0LL);
  uint64_t v10 = *v9;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v10);
  unint64_t v11 = sub_10001C214(a1);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
LABEL_10:
    swift_bridgeObjectRetain_n(v6, 2LL);
    uint64_t v28 = swift_bridgeObjectRetain_n(v4, 2LL);
    os_log_type_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      v56[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v4);
      uint64_t v33 = DNSRecords.PTR.description.getter();
      unint64_t v35 = v34;
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v6);
      uint64_t v54 = sub_10000235C(v33, v35, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55);
      swift_bridgeObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease_n(v6, 2LL);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to query the TXT record for %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease_n(v6, 2LL);
    }

    return;
  }

  uint64_t v13 = *(void *)(v10 + 56) + 16 * v11;
  char v14 = *(_BYTE *)(v13 + 8);
  id v53 = *(id *)v13;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  if ((v14 & 1) == 0)
  {
    id v15 = [v53 serviceSpecificInfo];
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = [v15 txtRecordData];

      if (v17)
      {
        uint64_t v50 = v8;
        uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
        unint64_t v20 = v19;

        swift_bridgeObjectRetain_n(v6, 3LL);
        swift_bridgeObjectRetain_n(v4, 3LL);
        uint64_t v51 = v18;
        unint64_t v52 = v20;
        uint64_t v21 = sub_100020AFC(v18, v20);
        uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v23 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t type = v23;
          __int16 v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v48 = swift_slowAlloc(32LL, -1LL);
          v56[0] = v48;
          *(_DWORD *)__int16 v24 = 136315138;
          buf = v24;
          swift_bridgeObjectRetain(v6);
          swift_bridgeObjectRetain(v4);
          uint64_t v25 = DNSRecords.PTR.description.getter();
          unint64_t v27 = v26;
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v6);
          uint64_t v54 = sub_10000235C(v25, v27, v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55);
          swift_bridgeObjectRelease_n(v4, 2LL);
          swift_bridgeObjectRelease_n(v6, 2LL);
          swift_bridgeObjectRelease(v27);
          _os_log_impl((void *)&_mh_execute_header, v22, type, "Providing TXT record for %s", buf, 0xCu);
          swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1LL, -1LL);
          swift_slowDealloc(buf, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v4, 2LL);
          swift_bridgeObjectRelease_n(v6, 2LL);
        }

        uint64_t v36 = *(void **)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
        if (v36)
        {
          *(_OWORD *)__n128 v56 = xmmword_1003398F0;
          swift_unknownObjectRetain(v36);
          sub_1000FB470(v50, v6);
          sub_1000F39BC(15LL, v5, v4, v7);
          uint64_t v38 = v37;
          unint64_t v40 = v39;
          sub_1000FA9C4(v37, v39);
          sub_1000208D8(v38, v40);
          __int128 v41 = *(_OWORD *)v56;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000208D8(v41, *((unint64_t *)&v41 + 1));
          sub_100020AFC(v51, v52);
          Class v43 = Data._bridgeToObjectiveC()().super.isa;
          sub_1000208D8(v51, v52);
          [v36 handleEventType:0 keyData:isa valueData:v43];
          sub_1000208D8(v51, v52);
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v6);
          swift_unknownObjectRelease(v36);
          sub_1000208D8(v51, v52);
        }

        else
        {
          sub_1000208D8(v51, v52);
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v6);
          sub_1000208D8(v51, v52);
        }
      }
    }
  }

  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v4);
  int v44 = (void (*)(uint64_t *, void))sub_100017F78((uint64_t)v56);
  uint64_t v46 = sub_1001360C0(&v54, a1);
  if (*(void *)v45) {
    *(_BYTE *)(v45 + 8) = 1;
  }
  ((void (*)(uint64_t *, void))v46)(&v54, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  v44(v56, 0LL);
}

BOOL sub_100018608(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service];
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8];
  int v7 = v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16];
  BOOL result = sub_1000FAC64( *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8),  v6,  v5,  v7 | (v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 17] << 8));
  if (result)
  {
    uint64_t v10 = *(void *)a1;
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v11 = &v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers];
    swift_beginAccess( &v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers],  v30,  0LL,  0LL);
    uint64_t v12 = *(void *)v11;
    if (*(void *)(v12 + 16))
    {
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v12);
      unint64_t v13 = sub_10001C214(a1);
      if ((v14 & 1) != 0)
      {
        id v15 = *(id *)(*(void *)(v12 + 56) + 16 * v13);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v12);
        return (BOOL)v15;
      }

      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v12);
    }

    swift_bridgeObjectRetain_n(v9, 2LL);
    swift_bridgeObjectRetain_n(v4, 2LL);
    uint64_t v16 = v2;
    id v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      uint64_t v29 = v26;
      *(_DWORD *)uint64_t v19 = 136315394;
      swift_bridgeObjectRetain(v9);
      uint64_t v27 = sub_10000235C(v10, v9, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease_n(v9, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v27 = v6;
      unint64_t v28 = v5;
      swift_bridgeObjectRetain_n(v5, 2LL);
      v20._countAndFlagsBits = 24366LL;
      v20._object = (void *)0xE200000000000000LL;
      String.append(_:)(v20);
      if (v7) {
        uint64_t v21 = 7365749LL;
      }
      else {
        uint64_t v21 = 7365492LL;
      }
      unint64_t v22 = 0xE300000000000000LL;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease(0xE300000000000000LL);
      v23._countAndFlagsBits = 46LL;
      v23._object = (void *)0xE100000000000000LL;
      String.append(_:)(v23);
      v24._countAndFlagsBits = 0x6C61636F6CLL;
      v24._object = (void *)0xE500000000000000LL;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(v5);
      unint64_t v25 = v28;
      uint64_t v27 = sub_10000235C(v27, v28, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);

      swift_bridgeObjectRelease(v25);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Failed to query the discovery result for %s from %s",  (uint8_t *)v19,  0x16u);
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease_n(v9, 2LL);
    }

    return 0LL;
  }

  __break(1u);
  return result;
}

void sub_100018960(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    sub_1000696D0(0, v1, 0);
    uint64_t v4 = sub_1000204CC(v2);
    uint64_t v5 = 0LL;
    uint64_t v6 = v2 + 64;
    uint64_t v21 = v2 + 80;
    int64_t v22 = v1;
    int v23 = v3;
    uint64_t v24 = v2 + 64;
    while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(v2 + 32))
    {
      unint64_t v9 = (unint64_t)v4 >> 6;
      if (*(_DWORD *)(v2 + 36) != v3) {
        goto LABEL_24;
      }
      id v10 = *(id *)(*(void *)(v2 + 56) + 16 * v4);
      unsigned __int8 v25 = [v10 publishID];
      id v11 = [v10 publisherAddress];

      uint64_t v12 = v2;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_1000696D0(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      id v15 = &_swiftEmptyArrayStorage[2 * v14];
      *((_BYTE *)v15 + 32) = v25;
      v15[5] = v11;
      int64_t v7 = 1LL << *(_BYTE *)(v12 + 32);
      if (v4 >= v7) {
        goto LABEL_25;
      }
      uint64_t v6 = v24;
      uint64_t v16 = *(void *)(v24 + 8 * v9);
      if ((v16 & (1LL << v4)) == 0) {
        goto LABEL_26;
      }
      uint64_t v2 = v12;
      int v3 = v23;
      if (*(_DWORD *)(v12 + 36) != v23) {
        goto LABEL_27;
      }
      unint64_t v17 = v16 & (-2LL << (v4 & 0x3F));
      if (v17)
      {
        int64_t v7 = __clz(__rbit64(v17)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
        int64_t v8 = v22;
      }

      else
      {
        unint64_t v18 = v9 + 1;
        unint64_t v19 = (unint64_t)(v7 + 63) >> 6;
        int64_t v8 = v22;
        if (v9 + 1 < v19)
        {
          unint64_t v20 = *(void *)(v24 + 8 * v18);
          if (v20)
          {
LABEL_20:
            int64_t v7 = __clz(__rbit64(v20)) + (v18 << 6);
          }

          else
          {
            while (v19 - 2 != v9)
            {
              unint64_t v20 = *(void *)(v21 + 8 * v9++);
              if (v20)
              {
                unint64_t v18 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }

      ++v5;
      uint64_t v4 = v7;
      if (v5 == v8) {
        return;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

void sub_100018BD8(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 serviceSpecificInfo];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 instanceName];

    if (v6)
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      unint64_t v9 = v8;

      uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service);
      unint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8);
      char v12 = *(_BYTE *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16);
      char v13 = *(_BYTE *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 17);
      v45[0] = v7;
      v45[1] = v9;
      v45[2] = v11;
      v45[3] = v10;
      char v41 = v12;
      char v46 = v12;
      char v47 = v13;
      unint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
      swift_beginAccess( v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers,  v44,  33LL,  0LL);
      id v15 = a1;
      swift_bridgeObjectRetain_n(v10, 2LL);
      id v16 = v15;
      swift_bridgeObjectRetain(v9);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      uint64_t v42 = v16;
      uint64_t v43 = *v14;
      uint64_t *v14 = 0x8000000000000000LL;
      sub_10001F05C((uint64_t)v16, 0, (uint64_t)v45, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = *v14;
      uint64_t *v14 = v43;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v18);
      swift_endAccess(v44);
      swift_bridgeObjectRetain_n(v10, 2LL);
      uint64_t v19 = swift_bridgeObjectRetain_n(v9, 2LL);
      unint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v40 = v11;
        int64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v23 = swift_slowAlloc(32LL, -1LL);
        v44[0] = v23;
        *(_DWORD *)int64_t v22 = 136315138;
        uint64_t v39 = v22 + 4;
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v9);
        uint64_t v24 = DNSRecords.PTR.description.getter();
        unint64_t v26 = v25;
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v9);
        uint64_t v43 = sub_10000235C(v24, v26, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
        swift_bridgeObjectRelease_n(v10, 2LL);
        swift_bridgeObjectRelease_n(v9, 2LL);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Providing PTR record for %s", v22, 0xCu);
        swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1LL, -1LL);
        uint64_t v27 = v22;
        uint64_t v11 = v40;
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v10, 2LL);
        swift_bridgeObjectRelease_n(v9, 2LL);
      }

      unint64_t v28 = *(void **)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
      if (v28)
      {
        swift_unknownObjectRetain(*(void *)(v2
                                            + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate));
        sub_1000F39BC(11LL, v11, v10, v41);
        uint64_t v30 = v29;
        unint64_t v32 = v31;
        v33.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1000208D8(v30, v32);
        sub_1000FB48C(v7, v9);
        if (v35 >> 60 == 15)
        {
          Class isa = 0LL;
        }

        else
        {
          uint64_t v37 = v34;
          unint64_t v38 = v35;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100020B40(v37, v38);
        }

        objc_msgSend(v28, "handleEventType:keyData:valueData:", 0, v33.super.isa, isa, v39);

        swift_unknownObjectRelease(v28);
      }

      sub_100017FC0((uint64_t)v45);

      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
    }
  }

void sub_100018FF8(unsigned __int8 a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess(v6, v84, 0LL, 0LL);
  uint64_t v7 = *v6;
  id v8 = a2;
  uint64_t v9 = swift_bridgeObjectRetain(v7);
  sub_1000217E0(v9, a1, (uint64_t)v8);
  unint64_t v11 = v10;
  uint64_t v13 = v12;
  unsigned __int8 v15 = v14;
  int v16 = ~v14;
  swift_bridgeObjectRelease(v7);

  if (v16)
  {
    unsigned __int8 v77 = v15;
    sub_100014178(&v82, v11, v13, *v6, (uint64_t)v85);
    unint64_t v17 = v85[1];
    unint64_t v18 = v85[3];
    uint64_t v73 = v85[2];
    uint64_t v74 = v85[0];
    char v72 = v86;

    sub_100014178(&v79, v11, v13, *v6, (uint64_t)&v82);
    uint64_t v19 = *((void *)&v82 + 1);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v19);
    id v78 = (id)v79;
    int v20 = v80[0];
    swift_beginAccess(v6, &v79, 33LL, 0LL);
    sub_100020390((uint64_t)&v81, v11, v13, (uint64_t)&v82);
    uint64_t v21 = *((void *)&v82 + 1);
    uint64_t v22 = v83;
    uint64_t v23 = v81;
    swift_endAccess(&v79);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);

    if (v20 == 1)
    {
      id v24 = [v78 serviceSpecificInfo];
      if (v24)
      {
        unint64_t v25 = v24;
        id v26 = [v24 txtRecordData];

        if (v26)
        {
          uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
          unint64_t v29 = v28;

          uint64_t v71 = v3;
          swift_bridgeObjectRetain_n(v17, 3LL);
          swift_bridgeObjectRetain_n(v18, 3LL);
          unint64_t v69 = v29;
          uint64_t v30 = sub_100020AFC(v27, v29);
          unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
          os_log_type_t v32 = static os_log_type_t.info.getter();
          uint64_t v70 = v27;
          if (os_log_type_enabled(v31, v32))
          {
            NSData v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v68 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v82 = v68;
            *(_DWORD *)NSData v33 = 136315138;
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v18);
            uint64_t v34 = DNSRecords.PTR.description.getter();
            unint64_t v35 = v11;
            unint64_t v37 = v36;
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            uint64_t v79 = sub_10000235C(v34, v37, (uint64_t *)&v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);
            swift_bridgeObjectRelease_n(v18, 2LL);
            swift_bridgeObjectRelease_n(v17, 2LL);
            unint64_t v38 = v37;
            unint64_t v11 = v35;
            swift_bridgeObjectRelease(v38);
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "Removing TXT for %s", v33, 0xCu);
            swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v68, -1LL, -1LL);
            swift_slowDealloc(v33, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v18, 2LL);
            swift_bridgeObjectRelease_n(v17, 2LL);
          }

          uint64_t v3 = v71;
          uint64_t v39 = *(void **)(v71 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
          if (v39)
          {
            __int128 v82 = xmmword_1003398F0;
            swift_unknownObjectRetain(v39);
            sub_1000FB470(v74, v17);
            sub_1000F39BC(15LL, v73, v18, v72);
            uint64_t v41 = v40;
            unint64_t v43 = v42;
            sub_1000FA9C4(v40, v42);
            sub_1000208D8(v41, v43);
            unint64_t v45 = *((void *)&v82 + 1);
            uint64_t v44 = v82;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            unint64_t v47 = v45;
            uint64_t v3 = v71;
            sub_1000208D8(v44, v47);
            sub_100020AFC(v70, v69);
            Class v48 = Data._bridgeToObjectiveC()().super.isa;
            sub_1000208D8(v70, v69);
            [v39 handleEventType:1 keyData:isa valueData:v48];
            sub_1000208D8(v70, v69);
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            swift_unknownObjectRelease(v39);
            sub_1000208D8(v70, v69);
          }

          else
          {
            sub_1000208D8(v70, v69);
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            sub_1000208D8(v70, v69);
          }
        }
      }
    }

    uint64_t v75 = v13;
    uint64_t v76 = v11;
    swift_bridgeObjectRetain_n(v17, 2LL);
    uint64_t v49 = swift_bridgeObjectRetain_n(v18, 2LL);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      unint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v82 = v53;
      *(_DWORD *)unint64_t v52 = 136315138;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      uint64_t v54 = DNSRecords.PTR.description.getter();
      unint64_t v56 = v55;
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v17);
      uint64_t v79 = sub_10000235C(v54, v56, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);
      swift_bridgeObjectRelease_n(v18, 2LL);
      swift_bridgeObjectRelease_n(v17, 2LL);
      swift_bridgeObjectRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Removing PTR for %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v18, 2LL);
      swift_bridgeObjectRelease_n(v17, 2LL);
    }

    uint64_t v57 = *(void **)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
    if (v57)
    {
      swift_unknownObjectRetain(*(void *)(v3
                                          + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate));
      sub_1000F39BC(11LL, v73, v18, v72);
      uint64_t v59 = v58;
      unint64_t v61 = v60;
      v62.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000208D8(v59, v61);
      sub_1000FB48C(v74, v17);
      uint64_t v64 = v63;
      unint64_t v66 = v65;
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v17);
      if (v66 >> 60 == 15)
      {
        Class v67 = 0LL;
      }

      else
      {
        Class v67 = Data._bridgeToObjectiveC()().super.isa;
        sub_100020B40(v64, v66);
      }

      [v57 handleEventType:1 keyData:v62.super.isa valueData:v67];
      sub_100022570(v76, v75, v77);

      swift_unknownObjectRelease(v57);
    }

    else
    {
      sub_100022570(v76, v75, v77);

      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v17);
    }
  }

void sub_1000197D0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
  if (v1)
  {
    swift_unknownObjectRetain(*(void *)(v0
                                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate));
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v3 = Data._bridgeToObjectiveC()().super.isa;
    [v1 handleEventType:0 keyData:isa valueData:v3];

    swift_unknownObjectRelease(v1);
  }

void sub_100019860(void *a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = v2;
    id v6 = [a1 instanceName];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      unint64_t v10 = v9;

      uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service);
      unint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8);
      char v13 = *(_BYTE *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16);
      char v14 = *(_BYTE *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 17);
      v94[0] = v8;
      v94[1] = v10;
      v94[2] = v12;
      v94[3] = v11;
      char v95 = v13;
      char v96 = v14;
      unsigned __int8 v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
      swift_beginAccess( v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers,  v98,  0LL,  0LL);
      uint64_t v16 = *v15;
      if (!*(void *)(*v15 + 16))
      {
        swift_bridgeObjectRelease(v10);
        return;
      }

      swift_bridgeObjectRetain_n(v11, 2LL);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v16);
      unint64_t v17 = sub_10001C214((uint64_t)v94);
      if ((v18 & 1) == 0)
      {
        swift_bridgeObjectRelease_n(v11, 2LL);
        swift_bridgeObjectRelease_n(v10, 2LL);
        swift_bridgeObjectRelease(v16);
        return;
      }

      char v81 = v13;
      uint64_t v82 = v8;
      uint64_t v83 = v12;
      uint64_t v84 = v15;
      uint64_t v85 = v3;
      unint64_t v87 = a2 >> 40;
      unint64_t v90 = HIWORD(a2);
      unint64_t v19 = HIDWORD(a2);
      unint64_t v20 = a2 >> 24;
      unint64_t v21 = a2 >> 16;
      unint64_t v22 = a2 >> 8;
      uint64_t v23 = *(void *)(v16 + 56) + 16 * v17;
      *(_DWORD *)os_log_type_t type = *(unsigned __int8 *)(v23 + 8);
      id v24 = *(id *)v23;
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v16);
      id v25 = v24;
      id v26 = [v25 publisherAddress];
      WiFiMACAddress.wifiAddress.getter();
      unint64_t v27 = v10;
      uint64_t v29 = v28;

      LODWORD(v97) = v29;
      BYTE4(v97) = BYTE4(v29);
      BYTE5(v97) = BYTE5(v29);
      LOBYTE(v93) = v22;
      BYTE1(v93) = v21;
      BYTE2(v93) = v20;
      BYTE3(v93) = v19;
      BYTE4(v93) = v87;
      BYTE5(v93) = v90;
      if ((_DWORD)v29 != (_DWORD)v93 || WORD2(v97) != WORD2(v93))
      {
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v27);

LABEL_17:
LABEL_18:

        return;
      }

      unint64_t v80 = v11;
      unint64_t v31 = v27;
      unsigned int v32 = [v25 publishID];

      unsigned int v33 = [v25 publishID];
      if (v32 != v33)
      {
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v27);
        goto LABEL_17;
      }

      id v34 = [v25 serviceSpecificInfo];

      if (v34 && (id v35 = [v34 txtRecordData], v34, v35))
      {
        uint64_t v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
        unint64_t v91 = v36;
      }

      else
      {
        uint64_t v88 = 0LL;
        unint64_t v91 = 0xF000000000000000LL;
      }

      id v37 = [a1 txtRecordData];
      if (v37)
      {
        unint64_t v38 = v37;
        uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
        unint64_t v41 = v40;

        if (v91 >> 60 == 15)
        {
          uint64_t v42 = v39;
          unint64_t v43 = v27;
          if (v41 >> 60 == 15) {
            goto LABEL_37;
          }
          goto LABEL_29;
        }

        if (v41 >> 60 == 15)
        {
          uint64_t v42 = v39;
          unint64_t v43 = v27;
          goto LABEL_29;
        }

        sub_10002255C(v88, v91);
        _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v88, v91);
        char loga = v58;
        sub_100020B40(v39, v41);
        sub_100020B40(v88, v91);
        sub_100020B40(v88, v91);
        unint64_t v43 = v27;
        if ((loga & 1) == 0) {
          goto LABEL_30;
        }
      }

      else
      {
        unint64_t v43 = v27;
        if (v91 >> 60 != 15)
        {
          uint64_t v42 = 0LL;
          unint64_t v41 = 0xF000000000000000LL;
LABEL_29:
          sub_100020B40(v88, v91);
          sub_100020B40(v42, v41);
LABEL_30:
          if (*(_DWORD *)type)
          {
            id v44 = [v25 serviceSpecificInfo];

            if (v44)
            {
              id v45 = [v44 txtRecordData];

              if (v45)
              {
                uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
                unint64_t v48 = v47;

                uint64_t v49 = v85;
                swift_bridgeObjectRetain_n(v80, 3LL);
                swift_bridgeObjectRetain_n(v27, 3LL);
                unint64_t v89 = v48;
                uint64_t v92 = v46;
                uint64_t v50 = sub_100020AFC(v46, v48);
                os_log_type_t v51 = (os_log_s *)Logger.logObject.getter(v50);
                os_log_type_t v52 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v51, v52))
                {
                  log = v51;
                  uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  uint64_t v77 = swift_slowAlloc(32LL, -1LL);
                  *(void *)&__int128 v97 = v77;
                  *(_DWORD *)uint64_t v53 = 136315138;
                  uint64_t v75 = v53 + 4;
                  buf = v53;
                  swift_bridgeObjectRetain(v80);
                  swift_bridgeObjectRetain(v27);
                  uint64_t v54 = DNSRecords.PTR.description.getter();
                  unint64_t v56 = v55;
                  swift_bridgeObjectRelease(v80);
                  swift_bridgeObjectRelease(v27);
                  uint64_t v93 = sub_10000235C(v54, v56, (uint64_t *)&v97);
                  uint64_t v49 = v85;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
                  swift_bridgeObjectRelease_n(v80, 2LL);
                  swift_bridgeObjectRelease_n(v27, 2LL);
                  swift_bridgeObjectRelease(v56);
                  _os_log_impl((void *)&_mh_execute_header, log, v52, "Removing TXT for %s", buf, 0xCu);
                  swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v77, -1LL, -1LL);
                  swift_slowDealloc(buf, -1LL, -1LL);
                }

                else
                {
                  swift_bridgeObjectRelease_n(v80, 2LL);
                  swift_bridgeObjectRelease_n(v27, 2LL);
                }

                uint64_t v59 = *(void **)(v49
                               + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
                if (v59)
                {
                  __int128 v97 = xmmword_1003398F0;
                  swift_unknownObjectRetain(v59);
                  unint64_t v43 = v27;
                  sub_1000FB470(v82, v27);
                  sub_1000F39BC(15LL, v83, v80, v81);
                  uint64_t v61 = v60;
                  unint64_t v63 = v62;
                  sub_1000FA9C4(v60, v62);
                  sub_1000208D8(v61, v63);
                  __int128 v64 = v97;
                  Class isa = Data._bridgeToObjectiveC()().super.isa;
                  sub_1000208D8(v64, *((unint64_t *)&v64 + 1));
                  sub_100020AFC(v92, v89);
                  Class v66 = Data._bridgeToObjectiveC()().super.isa;
                  sub_1000208D8(v92, v89);
                  [v59 handleEventType:1 keyData:isa valueData:v66];
                  sub_1000208D8(v92, v89);
                  swift_bridgeObjectRelease(v80);
                  swift_bridgeObjectRelease(v31);
                  swift_unknownObjectRelease(v59);
                  sub_1000208D8(v92, v89);
                }

                else
                {
                  sub_1000208D8(v92, v89);
                  swift_bridgeObjectRelease(v80);
                  unint64_t v43 = v27;
                  swift_bridgeObjectRelease(v27);
                  sub_1000208D8(v92, v89);
                }

                char v57 = 0;
              }

              else
              {
                char v57 = 1;
                unint64_t v43 = v31;
              }
            }

            else
            {
              char v57 = 1;
            }
          }

          else
          {

            char v57 = 0;
          }

          id v67 = objc_msgSend(v25, "serviceSpecificInfo", v75);

          if (v67)
          {
            uint64_t v68 = (objc_class *)[a1 txtRecordData];
            Class v69 = v68;
            if (v68)
            {
              uint64_t v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v68);
              unint64_t v72 = v71;

              Class v69 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v43 = v31;
              sub_1000208D8(v70, v72);
            }

            [v67 setTxtRecordData:v69];
          }

          swift_beginAccess(v84, &v97, 33LL, 0LL);
          swift_bridgeObjectRetain(v80);
          swift_bridgeObjectRetain(v43);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v84);
          uint64_t v93 = *v84;
          *uint64_t v84 = 0x8000000000000000LL;
          sub_10001F05C((uint64_t)v25, v57, (uint64_t)v94, isUniquelyReferenced_nonNull_native);
          uint64_t v74 = *v84;
          *uint64_t v84 = v93;
          swift_bridgeObjectRelease(v80);
          swift_bridgeObjectRelease(v43);
          swift_bridgeObjectRelease(v74);
          swift_endAccess(&v97);
          sub_100017FC0((uint64_t)v94);
          swift_bridgeObjectRelease(v80);
          swift_bridgeObjectRelease(v43);
          goto LABEL_18;
        }
      }

LABEL_37:
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v80);
    }
  }

  __break(1u);
  return result;
}

    sub_1000225EC((uint64_t)v127, &qword_100408B18);
    return 0LL;
  }

  uint64_t v84 = v121;
  sub_1000226B0((uint64_t)v76, (uint64_t)v121, qword_100410330);
  uint64_t v85 = v79(v77, 1LL, v80);
  uint64_t v83 = v124;
  if (v85 == 1)
  {
    sub_1000225EC((uint64_t)v125, qword_100410330);
    sub_1000225EC((uint64_t)v126, qword_100410330);
    (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v84, v80);
    goto LABEL_37;
  }

  char v86 = v84;
  unint64_t v87 = v120;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v78 + 32))(v120, v77, v80);
  uint64_t v88 = sub_10000AF70( &qword_1004050E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  unint64_t v89 = dispatch thunk of static Equatable.== infix(_:_:)(v86, v87, v80, v88);
  unint64_t v90 = *(void (**)(_BYTE *, uint64_t))(v78 + 8);
  v90(v87, v80);
  sub_1000225EC((uint64_t)v125, qword_100410330);
  sub_1000225EC((uint64_t)v126, qword_100410330);
  uint64_t v82 = (uint64_t)v110;
  v90(v86, v80);
  sub_1000225EC((uint64_t)v127, qword_100410330);
  if ((v89 & 1) == 0) {
    return 0LL;
  }
LABEL_39:
  unint64_t v91 = v114;
  if ((sub_10007D504(*(void *)&v114[v54[11]], *(void *)&v53[v54[11]]) & 1) == 0) {
    return 0LL;
  }
  sub_1000226B0((uint64_t)&v91[v54[12]], (uint64_t)v83, (uint64_t *)&unk_10040DCC0);
  sub_1000226B0((uint64_t)&v53[v54[12]], v62, (uint64_t *)&unk_10040DCC0);
  uint64_t v92 = v82 + *(int *)(v117 + 48);
  sub_1000226B0((uint64_t)v83, v82, (uint64_t *)&unk_10040DCC0);
  sub_1000226B0(v62, v92, (uint64_t *)&unk_10040DCC0);
  uint64_t v93 = v119;
  uint64_t v94 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  if (v94(v82, 1LL, v119) == 1)
  {
    sub_1000225EC(v62, (uint64_t *)&unk_10040DCC0);
    sub_1000225EC((uint64_t)v83, (uint64_t *)&unk_10040DCC0);
    if (v94(v92, 1LL, v93) == 1)
    {
      sub_1000225EC(v82, (uint64_t *)&unk_10040DCC0);
      goto LABEL_43;
    }

  if (v5 < 0) {
    unint64_t v22 = v5;
  }
  else {
    unint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  unint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  char *v3 = v5;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v5);
  swift_bridgeObjectRelease(*v3);
  char *v3 = v5;
  unint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  char v13 = sub_100002274(&qword_10040DCE8);
  char v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6) {
    return specialized Array._endMutation()(v14);
  }
  if (!((unint64_t)v5 >> 62))
  {
    unsigned __int8 v15 = *(void *)(v11 + 16);
    uint64_t v16 = v15 - v2;
    if (!__OFSUB__(v15, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v5 < 0) {
    id v24 = v5;
  }
  else {
    id v24 = v11;
  }
  swift_bridgeObjectRetain(v5);
  id v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v5);
  uint64_t v16 = v25 - v2;
  if (__OFSUB__(v25, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    unint64_t v17 = (const void *)(v11 + 32 + 8 * v2);
    if (!((unint64_t)v5 >> 62))
    {
      char v18 = *(void *)(v11 + 16);
      unint64_t v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(void *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }

      goto LABEL_58;
    }

      uint64_t v83 = v52;
      uint64_t v84 = v56;
      uint64_t v85 = &v57[qword_100410BD0];
      swift_beginAccess(&v57[qword_100410BD0], &v248, 33LL, 0LL);
      char v86 = (v53 << 48) | (v83 << 40) | (v54 << 32) | (v55 << 24) | (v240 << 16) | (v239 << 8) | BYTE1(v243);
      LOBYTE(v83) = sub_10032D140(&v253, v86);
      swift_endAccess(&v248);
      sub_1002BDB08();
      unint64_t v87 = BYTE6(v253);
      if ((v83 & 1) != 0)
      {
        uint64_t v228 = BYTE1(v253);
        uint64_t v231 = BYTE2(v253);
        unint64_t v232 = BYTE3(v253);
        uint64_t v237 = v253;
        uint64_t v238 = BYTE4(v253);
        uint64_t v239 = BYTE5(v253);
        unint64_t v240 = (uint64_t)v32;
        uint64_t v88 = v57;
        unint64_t v89 = v236;
        swift_bridgeObjectRetain_n(v236, 2LL);
        unint64_t v90 = v88;
        unint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
        uint64_t v92 = static os_log_type_t.default.getter(v91);
        if (os_log_type_enabled(v91, v92))
        {
          uint64_t v93 = swift_slowAlloc(32LL, -1LL);
          uint64_t v227 = v87;
          uint64_t v94 = v93;
          char v95 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v241 = swift_slowAlloc(64LL, -1LL);
          *(void *)&v248 = v241;
          *(_DWORD *)uint64_t v94 = 138412802;
          *(void *)&uint64_t v253 = v90;
          char v96 = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
          *char v95 = v90;

          *(_WORD *)(v94 + 12) = 2080;
          __int128 v97 = NANPeerServiceIdentifier.description.getter(v237 | (v228 << 8) | (v231 << 16) | (v232 << 24) | (v238 << 32) | (v239 << 40) | (v227 << 48));
          uint64_t v99 = v98;
          *(void *)&uint64_t v253 = sub_10000235C(v97, v98, (uint64_t *)&v248);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
          swift_bridgeObjectRelease(v99);
          *(_WORD *)(v94 + 22) = 2080;
          unint64_t v89 = v236;
          uint64_t v100 = RSSI.description.getter();
          uint64_t v102 = v101;
          *(void *)&uint64_t v253 = sub_10000235C(v100, v101, (uint64_t *)&v248);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
          swift_bridgeObjectRelease_n(v89, 2LL);
          swift_bridgeObjectRelease(v102);
          _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "%@ received a new discovery result %s at %s",  (uint8_t *)v94,  0x20u);
          Swift::String v103 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v95, 1LL, v103);
          swift_slowDealloc(v95, -1LL, -1LL);
          uint64_t v104 = v241;
          swift_arrayDestroy(v241, 2LL, &type metadata for Any[8]);
          swift_slowDealloc(v104, -1LL, -1LL);
          swift_slowDealloc(v94, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v89, 2LL);
        }

        uint64_t v123 = *(void **)&v90[qword_10040EFB8];
        if (v123)
        {
          sub_1002C8644();
          uint64_t v124 = *((void *)v234 + 1);
          uint64_t v125 = *((void *)v234 + 2);
          uint64_t v126 = *(_OWORD *)(v240 + 48);
          uint64_t v250 = *(_OWORD *)(v240 + 32);
          uint64_t v251 = v126;
          v252 = *(_OWORD *)(v240 + 64);
          uint64_t v127 = *(_OWORD *)(v240 + 16);
          v248 = *(_OWORD *)v240;
          uint64_t v249 = v127;
          sub_1000586C0(v240 + 80, (uint64_t)&v253, (uint64_t *)&unk_10040F110);
          swift_bridgeObjectRetain(v89);
          swift_unknownObjectRetain(v123);
          swift_bridgeObjectRetain(v125);
          sub_1001D332C((uint64_t)&v248);
          sub_1002C8680((uint64_t)&v253);
          uint64_t v128 = v243 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v242 << 48);
          uint64_t v129 = (uint64_t)v230;
          swift_bridgeObjectRetain(v230);
          char v130 = WiFiAwareDiscoveryResult.init(nanDiscoveryResultEvent:serviceName:serviceDescriptor:serviceDescriptorExtension:extraServiceSpecificInfo:pairSetupRequired:pairingConfiguration:)( v128,  v235,  v89,  v124,  v125,  (uint64_t)&v248,  (uint64_t)&v253,  v129,  0,  0LL);
          [v123 subscribeReceivedDiscoveryResult:v130];

          swift_unknownObjectRelease(v123);
        }

        char v131 = (uint64_t *)&v90[qword_100410BC8];
        swift_beginAccess(v131, &v246, 0LL, 0LL);
        uint64_t v132 = *v131;
        unsigned int v32 = (char *)v240;
        if (*(void *)(*v131 + 16))
        {
          swift_bridgeObjectRetain(*v131);
          uint64_t v133 = sub_10001C08C(v86);
          if ((v134 & 1) != 0)
          {
            uint64_t v135 = v133;
            uint64_t v136 = *(_DWORD *)(v132 + 36);
            swift_bridgeObjectRelease(v132);
            uint64_t v137 = v223;
            sub_10022D518((uint64_t)v244, v223, v135, v136, 0LL, *v131);
            uint64_t v138 = v222;
            sub_100057FE8(v137, v222, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            sub_10005802C(v137, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            LODWORD(v137) = swift_getEnumCaseMultiPayload(v138, v229);
            sub_10005802C(v138, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            if ((_DWORD)v137 == 4)
            {
              swift_beginAccess(v131, v244, 33LL, 0LL);
              uint64_t v139 = v221;
              sub_10032CAC0((uint64_t)v245, v221, v135, v136);
              swift_endAccess(v244);
              sub_10005802C(v139, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            }
          }

          else
          {
            swift_bridgeObjectRelease(v132);
          }
        }

        goto LABEL_80;
      }

      if (!v51)
      {
LABEL_80:
        v141 = v243 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v242 << 48);
        uint64_t v140 = (uint64_t)v233;
        goto LABEL_81;
      }

      uint64_t v228 = BYTE1(v253);
      uint64_t v231 = BYTE2(v253);
      unint64_t v232 = BYTE3(v253);
      uint64_t v237 = v253;
      uint64_t v238 = BYTE4(v253);
      uint64_t v239 = BYTE5(v253);
      uint64_t v227 = BYTE6(v253);
      char v105 = v234[*(int *)(v84 + 68)];
      uint64_t v106 = v233;
      uint64_t v107 = v106;
      if ((v105 & 1) == 0)
      {
        uint64_t v143 = v106;
        uint64_t v144 = (os_log_s *)Logger.logObject.getter(v143);
        uint64_t v145 = static os_log_type_t.default.getter(v144);
        uint64_t v146 = v145;
        if (os_log_type_enabled(v144, v145))
        {
          uint64_t v147 = swift_slowAlloc(22LL, -1LL);
          uint64_t v230 = (char **)swift_slowAlloc(8LL, -1LL);
          unint64_t v240 = swift_slowAlloc(32LL, -1LL);
          *(void *)&v248 = v240;
          *(_DWORD *)uint64_t v147 = 138412546;
          LODWORD(v234) = v146;
          *(void *)&uint64_t v253 = v143;
          __int128 v148 = v143;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
          __int128 v149 = v230;
          *uint64_t v230 = v143;

          *(_WORD *)(v147 + 12) = 2080;
          __int16 v150 = NANPeerServiceIdentifier.description.getter(v237 | (v228 << 8) | (v231 << 16) | (v232 << 24) | (v238 << 32) | (v239 << 40) | (v227 << 48));
          __int128 v152 = v151;
          *(void *)&uint64_t v253 = sub_10000235C(v150, v151, (uint64_t *)&v248);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
          swift_bridgeObjectRelease(v152);
          _os_log_impl( (void *)&_mh_execute_header,  v144,  (os_log_type_t)v234,  "%@ aging out discovery result %s because re-authentication is required",  (uint8_t *)v147,  0x16u);
          uint64_t v153 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v149, 1LL, v153);
          swift_slowDealloc(v149, -1LL, -1LL);
          __int128 v154 = v240;
          swift_arrayDestroy(v240, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v154, -1LL, -1LL);
          swift_slowDealloc(v147, -1LL, -1LL);
        }

        else
        {
        }

        uint64_t v198 = *(void **)&v143[qword_10040EFB8];
        if (v198)
        {
          swift_unknownObjectRetain(*(void *)&v143[qword_10040EFB8]);
          unint64_t v199 = WiFiAddress.apiAddress.getter(v225);
          [v198 subscribeLostDiscoveryResultForPublishID:v241 address:v199];

          swift_unknownObjectRelease(v198);
        }

        swift_beginAccess(v85, &v248, 33LL, 0LL);
        sub_100330F0C(v86, (uint64_t)&v253);
        swift_endAccess(&v248);
        sub_1002BDB08();
        goto LABEL_80;
      }

      unint64_t v240 = (uint64_t)v32;
      uint64_t v108 = v236;
      swift_bridgeObjectRetain_n(v236, 2LL);
      uint64_t v109 = v107;
      uint64_t v110 = (os_log_s *)Logger.logObject.getter(v109);
      uint64_t v111 = static os_log_type_t.default.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        uint64_t v112 = swift_slowAlloc(32LL, -1LL);
        uint64_t v113 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v229 = swift_slowAlloc(64LL, -1LL);
        *(void *)&v248 = v229;
        *(_DWORD *)uint64_t v112 = 138412802;
        *(void *)&uint64_t v253 = v109;
        uint64_t v114 = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
        *uint64_t v113 = v109;

        *(_WORD *)(v112 + 12) = 2080;
        uint64_t v115 = NANPeerServiceIdentifier.description.getter(v237 | (v228 << 8) | (v231 << 16) | (v232 << 24) | (v238 << 32) | (v239 << 40) | (v227 << 48));
        uint64_t v117 = v116;
        *(void *)&uint64_t v253 = sub_10000235C(v115, v116, (uint64_t *)&v248);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
        swift_bridgeObjectRelease(v117);
        *(_WORD *)(v112 + 22) = 2080;
        __int16 v118 = RSSI.description.getter();
        __int16 v120 = v119;
        *(void *)&uint64_t v253 = sub_10000235C(v118, v119, (uint64_t *)&v248);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, (char *)&v253 + 8);
        swift_bridgeObjectRelease_n(v108, 2LL);
        swift_bridgeObjectRelease(v120);
        _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "%@ received new service specific info for %s at %s",  (uint8_t *)v112,  0x20u);
        uint64_t v121 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v113, 1LL, v121);
        swift_slowDealloc(v113, -1LL, -1LL);
        uint64_t v122 = v229;
        swift_arrayDestroy(v229, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v122, -1LL, -1LL);
        swift_slowDealloc(v112, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v108, 2LL);
      }

      uint64_t v178 = qword_10040EFB8;
      uint64_t v179 = *(void *)&v109[qword_10040EFB8];
      unsigned int v32 = (char *)v240;
      if (v179
        && (uint64_t v246 = *(void *)&v109[qword_10040EFB8],
            swift_unknownObjectRetain(v179),
            uint64_t v180 = sub_100002274((uint64_t *)&unk_10040ECE0),
            uint64_t v181 = sub_100002274((uint64_t *)&unk_10040F120),
            (swift_dynamicCast(&v253, &v246, v180, v181, 6LL) & 1) != 0))
      {
        if (*((void *)&v254 + 1))
        {
          sub_1000589F8(&v253, (uint64_t)&v248);
          uint64_t v182 = v211;
          sub_100057FE8((uint64_t)v32, (uint64_t)v211, type metadata accessor for NANPeer.Service);
          uint64_t v183 = (uint64_t)v230;
          if (v230)
          {
            swift_bridgeObjectRetain(v230);
            sub_10005802C((uint64_t)v182, type metadata accessor for NANPeer.Service);
            uint64_t v184 = v242;
          }

          else
          {
            uint64_t v200 = v182[12];
            if ((v200 & 0xFE) == 4)
            {
              v201 = v210;
              sub_100057FE8((uint64_t)v182, v210, type metadata accessor for NANPeer.Service);
              uint64_t v184 = v242;
            }

            else
            {
              uint64_t v203 = v182[13];
              uint64_t v202 = v182[14];
              uint64_t v205 = v182[10];
              int v204 = v182[11];
              sub_1001062A0(v182[12], v203, v202);
              NANServiceInfo.genericServiceProtocol.getter(v200, v203, v202);
              __int128 v206 = v200;
              uint64_t v183 = v207;
              sub_100111F98(v205, v204, v206, v203, v202);
              v201 = v210;
              sub_100057FE8((uint64_t)v182, v210, type metadata accessor for NANPeer.Service);
              uint64_t v184 = v242;
              if (v183)
              {
                sub_10005802C((uint64_t)v211, type metadata accessor for NANPeer.Service);
                sub_10005802C(v201, type metadata accessor for NANPeer.Service);
                goto LABEL_70;
              }
            }

            v208 = *(unsigned __int8 *)(v201 + 56);
            if (v208 == 4)
            {
              sub_10005802C((uint64_t)v211, type metadata accessor for NANPeer.Service);
              sub_10005802C(v201, type metadata accessor for NANPeer.Service);
              __int16 v185 = 0LL;
              goto LABEL_71;
            }

            NANServiceInfo.genericServiceProtocol.getter(v208, *(void *)(v201 + 64), *(void *)(v201 + 72));
            uint64_t v183 = v209;
            sub_10005802C((uint64_t)v211, type metadata accessor for NANPeer.Service);
            sub_10005802C(v201, type metadata accessor for NANPeer.Service);
            if (!v183)
            {
              __int16 v185 = 0LL;
              goto LABEL_71;
            }
          }

            unint64_t v9 = 0;
            goto LABEL_38;
          }

id sub_10001A18C()
{
  return sub_10001A32C(type metadata accessor for BonjourBrowser);
}

void sub_10001A20C()
{
}

void sub_10001A22C(void *a1, uint64_t a2)
{
}

id sub_10001A320()
{
  return sub_10001A32C(type metadata accessor for BonjourAdvertiser);
}

id sub_10001A32C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0LL);
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_10001A3FC()
{
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
  if (v2)
  {
    uint64_t v4 = *v1;
    uint64_t v3 = v1[1];
    uint64_t v5 = v1[4];
    uint64_t v7 = v1[5];
    uint64_t v6 = v1[6];
    uint64_t v8 = v1[7];
    uint64_t v40 = v1[3];
    unint64_t v41 = v0;
    uint64_t v35 = v3;
    uint64_t v36 = v4;
    uint64_t v9 = v3;
    unint64_t v10 = v2;
    uint64_t v38 = v6;
    uint64_t v39 = v5;
    uint64_t v34 = v7;
    uint64_t v37 = v8;
    uint64_t v11 = sub_10002251C(v4, v9, v2, v40, v5, v7, v6, v8);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      char v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)char v14 = 136315138;
      v46[0] = v33;
      uint64_t v15 = *(void *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
      uint64_t v16 = *(void *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
      uint64_t v17 = *(void *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
      char v18 = v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
      char v19 = v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
      v43[0] = *(void *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
      v43[1] = v15;
      v43[2] = v16;
      v43[3] = v17;
      char v44 = v18;
      char v45 = v19;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v17);
      uint64_t v20 = DNSRecords.PTR.description.getter();
      unint64_t v22 = v21;
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v15);
      uint64_t v42 = sub_10000235C(v20, v22, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);

      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Providing AAAA record for %s", v14, 0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v23 = *(void **)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
    if (v23)
    {
      swift_unknownObjectRetain(*(void *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate]);
      DNSRecords.BrowseHost.keyData.getter(v36, v35, v10);
      uint64_t v25 = v24;
      unint64_t v27 = v26;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000208D8(v25, v27);
      v46[0] = v39;
      v46[1] = v34;
      uint64_t v29 = sub_1000EF854((uint64_t)v46, (uint64_t)&v47);
      unint64_t v31 = v30;
      sub_1000217B0(v36, v35, v10, v40, v39, v34, v38, v37);
      Class v32 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000208D8(v29, v31);
      [v23 handleEventType:0 keyData:isa valueData:v32];

      swift_unknownObjectRelease(v23);
    }

    else
    {
      sub_1000217B0(v36, v35, v10, v40, v39, v34, v38, v8);
    }

    v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] = 1;
  }

uint64_t sub_10001A768()
{
  uint64_t v1 = sub_100002274(&qword_100404DB0);
  __chkstk_darwin(v1);
  uint64_t v3 = &v28[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
  swift_beginAccess( v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv,  v28,  0LL,  0LL);
  sub_1000226B0(v8, (uint64_t)v3, &qword_100404DB0);
  sub_100022628((uint64_t)v3, (uint64_t)v7, type metadata accessor for DNSRecords.SRV);
  unint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
  if (v10)
  {
    uint64_t v11 = *(void *)v7;
    unint64_t v12 = *((void *)v7 + 1);
    uint64_t v13 = *((void *)v7 + 2);
    unint64_t v14 = *((void *)v7 + 3);
    char v15 = v7[32];
    __int128 v27 = xmmword_1003398F0;
    swift_unknownObjectRetain(v10);
    sub_1000FB470(v11, v12);
    sub_1000F39BC(32LL, v13, v14, v15);
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    sub_1000FA9C4(v16, v18);
    sub_1000208D8(v17, v19);
    __int128 v20 = v27;
    v21.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000208D8(v20, *((unint64_t *)&v20 + 1));
    DNSRecords.SRV.valueData.getter();
    if (v23 >> 60 == 15)
    {
      Class isa = 0LL;
    }

    else
    {
      uint64_t v25 = v22;
      unint64_t v26 = v23;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100020B40(v25, v26);
    }

    [v10 handleEventType:0 keyData:v21.super.isa valueData:isa];
    swift_unknownObjectRelease(v10);
  }

  return sub_100020A2C((uint64_t)v7);
}

id sub_10001AA18(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_100002274(&qword_100404DB0);
  __chkstk_darwin(v5);
  uint64_t v102 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v101 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100002274(&qword_1004050A0);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = (id)__chkstk_darwin(v15);
  Swift::String v103 = (char *)&v91 - v19;
  if (a2)
  {
    id result = [a2 hostname];
    if (result)
    {
      __int128 v20 = result;
      uint64_t v98 = a1;
      uint64_t v99 = (int *)v7;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      unint64_t v23 = v22;

      NWEndpoint.Port.init(rawValue:)([a2 servicePort]);
      uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
      uint64_t v100 = v13;
      if (v24(v12, 1LL, v13) == 1)
      {
        swift_bridgeObjectRelease(v23);
        return (id)sub_1000225EC((uint64_t)v12, &qword_1004050A0);
      }

      else
      {
        uint64_t v97 = v21;
        uint64_t v25 = v103;
        uint64_t v26 = v100;
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v103, v12, v100);
        char v96 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
        v96(v17, v25, v26);
        id v27 = v2;
        swift_bridgeObjectRetain_n(v23, 2LL);
        uint64_t v28 = v27;
        uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
        os_log_type_t v30 = static os_log_type_t.info.getter();
        int v31 = v30;
        BOOL v32 = os_log_type_enabled(v29, v30);
        p_base_meths = &WiFiP2PtvOSUIAgent.base_meths;
        unint64_t v95 = v23;
        if (v32)
        {
          uint64_t v34 = swift_slowAlloc(26LL, -1LL);
          int v92 = v31;
          uint64_t v35 = v34;
          uint64_t v93 = swift_slowAlloc(64LL, -1LL);
          v105[0] = v93;
          *(_DWORD *)uint64_t v35 = 136315650;
          uint64_t v94 = (void (*)(char *, uint64_t))(v35 + 4);
          uint64_t v36 = *(void *)&v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 8];
          uint64_t v37 = *(void *)&v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 16];
          uint64_t v38 = *(void *)&v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 24];
          char v39 = v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
          char v40 = v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
          uint64_t v106 = *(void *)&v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
          uint64_t v107 = v36;
          uint64_t v108 = v37;
          uint64_t v109 = v38;
          char v110 = v39;
          char v111 = v40;
          swift_bridgeObjectRetain(v36);
          swift_bridgeObjectRetain(v38);
          os_log_t v91 = v29;
          uint64_t v41 = DNSRecords.PTR.description.getter();
          unint64_t v43 = v42;
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v36);
          uint64_t v104 = sub_10000235C(v41, v43, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);

          swift_bridgeObjectRelease(v43);
          *(_WORD *)(v35 + 12) = 2080;
          swift_bridgeObjectRetain(v23);
          uint64_t v44 = v97;
          uint64_t v104 = sub_10000235C(v97, v23, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
          unint64_t v45 = v23;
          uint64_t v46 = v44;
          uint64_t v47 = swift_bridgeObjectRelease_n(v45, 3LL);
          *(_WORD *)(v35 + 22) = 512;
          LOWORD(v41) = NWEndpoint.Port.rawValue.getter(v47);
          uint64_t v94 = *(void (**)(char *, uint64_t))(v14 + 8);
          v94(v17, v100);
          LOWORD(v104) = v41;
          p_base_meths = (__objc2_meth_list **)(&WiFiP2PtvOSUIAgent + 32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, (char *)&v104 + 2);
          os_log_t v48 = v91;
          _os_log_impl( (void *)&_mh_execute_header,  v91,  (os_log_type_t)v92,  "Providing SRV record for %s %s:%hu",  (uint8_t *)v35,  0x1Au);
          uint64_t v49 = v93;
          swift_arrayDestroy(v93, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v49, -1LL, -1LL);
          swift_slowDealloc(v35, -1LL, -1LL);

          uint64_t v50 = v99;
        }

        else
        {
          uint64_t v94 = *(void (**)(char *, uint64_t))(v14 + 8);
          v94(v17, v100);
          swift_bridgeObjectRelease_n(v23, 2LL);

          uint64_t v50 = v99;
          uint64_t v46 = v97;
        }

        os_log_type_t v51 = (char *)p_base_meths[508] + (void)v28;
        uint64_t v53 = *(void *)v51;
        unint64_t v52 = *((void *)v51 + 1);
        uint64_t v55 = *((void *)v51 + 2);
        unint64_t v54 = *((void *)v51 + 3);
        char v56 = v51[32];
        uint64_t v57 = v51[33];
        v96(&v9[v50[5]], v103, v100);
        *(void *)uint64_t v9 = v53;
        *((void *)v9 + 1) = v52;
        *((void *)v9 + 2) = v55;
        *((void *)v9 + 3) = v54;
        v9[32] = v56;
        v9[33] = v57;
        char v58 = (uint64_t *)&v9[v50[6]];
        *char v58 = v46;
        unint64_t v59 = v95;
        v58[1] = v95;
        *(_WORD *)&v9[v50[7]] = 0;
        *(_WORD *)&v9[v50[8]] = 0;
        char v96 = (void (*)(char *, char *, uint64_t))v28;
        uint64_t v60 = *(void **)&v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
        if (v60)
        {
          *(_OWORD *)char v105 = xmmword_1003398F0;
          swift_unknownObjectRetain(v60);
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v52);
          swift_bridgeObjectRetain(v54);
          sub_1000FB470(v53, v52);
          sub_1000F39BC(32LL, v55, v54, v56);
          uint64_t v62 = v61;
          unint64_t v64 = v63;
          sub_1000FA9C4(v61, v63);
          sub_1000208D8(v62, v64);
          __int128 v65 = *(_OWORD *)v105;
          v66.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000208D8(v65, *((unint64_t *)&v65 + 1));
          DNSRecords.SRV.valueData.getter();
          if (v68 >> 60 == 15)
          {
            Class isa = 0LL;
          }

          else
          {
            uint64_t v73 = v67;
            unint64_t v74 = v68;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100020B40(v73, v74);
          }

          unint64_t v72 = (uint64_t (*)(char *, uint64_t))v94;
          [v60 handleEventType:0 keyData:v66.super.isa valueData:isa];

          swift_unknownObjectRelease(v60);
          uint64_t v70 = v101;
          uint64_t v71 = (uint64_t)v102;
        }

        else
        {
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v52);
          swift_bridgeObjectRetain(v54);
          uint64_t v70 = v101;
          uint64_t v71 = (uint64_t)v102;
          unint64_t v72 = (uint64_t (*)(char *, uint64_t))v94;
        }

        sub_1000210C0((uint64_t)v9, v71);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v70 + 56))(v71, 0LL, 1LL, v99);
        uint64_t v75 = v96;
        uint64_t v76 = (uint64_t)v96 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
        swift_beginAccess( (char *)v96 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv,  v105,  33LL,  0LL);
        sub_100020A68(v71, v76);
        swift_endAccess(v105);
        WiFiMACAddress.wifiAddress.getter();
        WiFiAddress.ipv6LinkLocalAddress.getter(v77 & 0xFFFFFFFFFFFFLL);
        id v78 = (char *)v75 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa;
        uint64_t v79 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa);
        uint64_t v80 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 8);
        uint64_t v81 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 16);
        uint64_t v82 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 24);
        uint64_t v83 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 32);
        uint64_t v84 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 40);
        uint64_t v85 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 48);
        uint64_t v86 = *(void *)((char *)v75
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 56);
        *(void *)id v78 = 27LL;
        *((void *)v78 + 1) = v97;
        *((void *)v78 + 2) = v59;
        *((void *)v78 + 3) = v57;
        *((void *)v78 + 4) = v87;
        *((void *)v78 + 5) = v88;
        *((void *)v78 + 6) = v89;
        *((void *)v78 + 7) = v90;
        sub_1000217B0(v79, v80, v81, v82, v83, v84, v85, v86);
        sub_10001A3FC();
        sub_100020A2C((uint64_t)v9);
        return (id)v72(v103, v100);
      }
    }
  }

  return result;
}

id sub_10001B178(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v140 = a1;
  uint64_t v3 = sub_100002274(&qword_1004050A0);
  __chkstk_darwin(v3);
  char v130 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v137 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v134 = *(void *)(v137 - 8);
  uint64_t v5 = __chkstk_darwin(v137);
  uint64_t v138 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v139 = (char *)&v126 - v7;
  uint64_t v8 = sub_100002274(&qword_100404DB0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v126 - v12;
  uint64_t v14 = (int *)type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v133 = (uint64_t)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  __int128 v20 = (char *)&v126 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v23 = (char *)&v126 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v126 - v24;
  uint64_t v26 = (uint64_t)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  swift_beginAccess( &v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv],  v143,  0LL,  0LL);
  uint64_t v135 = v26;
  sub_1000226B0(v26, (uint64_t)v13, &qword_100404DB0);
  uint64_t v136 = v15;
  int v27 = (*(uint64_t (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1LL, v14);
  uint64_t v129 = v2;
  if (v27 == 1)
  {
    id result = (id)sub_1000225EC((uint64_t)v13, &qword_100404DB0);
    uint64_t v29 = v138;
    os_log_type_t v30 = v139;
    int v31 = v140;
    if (!v140) {
      return result;
    }
    goto LABEL_13;
  }

  uint64_t v132 = v14;
  char v131 = v11;
  sub_100022628((uint64_t)v13, (uint64_t)v25, type metadata accessor for DNSRecords.SRV);
  sub_1000210C0((uint64_t)v25, (uint64_t)v23);
  sub_1000210C0((uint64_t)v25, (uint64_t)v20);
  BOOL v32 = v2;
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.info.getter();
  int v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v36 = swift_slowAlloc(26LL, -1LL);
    int v127 = v35;
    uint64_t v37 = v36;
    uint64_t v128 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v144 = v128;
    *(_DWORD *)uint64_t v37 = 136315650;
    uint64_t v38 = *(void *)&v32[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
    uint64_t v39 = *(void *)&v32[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
    uint64_t v40 = *(void *)&v32[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
    char v41 = v32[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
    char v42 = v32[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
    uint64_t v147 = *(void *)&v32[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
    uint64_t v148 = v38;
    uint64_t v149 = v39;
    uint64_t v150 = v40;
    char v151 = v41;
    char v152 = v42;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v40);
    os_log_t v126 = v33;
    uint64_t v43 = DNSRecords.PTR.description.getter();
    unint64_t v45 = v44;
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v38);
    *(void *)&__int128 v142 = sub_10000235C(v43, v45, (uint64_t *)&v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 8);

    swift_bridgeObjectRelease(v45);
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v46 = (uint64_t *)&v23[v132[6]];
    uint64_t v47 = *v46;
    unint64_t v48 = v46[1];
    swift_bridgeObjectRetain(v48);
    uint64_t v49 = v47;
    os_log_type_t v30 = v139;
    *(void *)&__int128 v142 = sub_10000235C(v49, v48, (uint64_t *)&v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 8);
    swift_bridgeObjectRelease(v48);
    uint64_t v50 = sub_100020A2C((uint64_t)v23);
    *(_WORD *)(v37 + 22) = 512;
    LOWORD(v43) = NWEndpoint.Port.rawValue.getter(v50);
    sub_100020A2C((uint64_t)v20);
    LOWORD(v142) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 2);
    os_log_t v51 = v126;
    _os_log_impl( (void *)&_mh_execute_header,  v126,  (os_log_type_t)v127,  "Removing SRV record for %s %s:%hu",  (uint8_t *)v37,  0x1Au);
    uint64_t v52 = v128;
    swift_arrayDestroy(v128, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);

    uint64_t v29 = v138;
  }

  else
  {
    sub_100020A2C((uint64_t)v20);

    sub_100020A2C((uint64_t)v23);
    uint64_t v29 = v138;
    os_log_type_t v30 = v139;
  }

  int v31 = v140;
  uint64_t v53 = *(void **)&v32[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
  if (v53)
  {
    uint64_t v54 = *(void *)v25;
    unint64_t v55 = *((void *)v25 + 1);
    uint64_t v56 = *((void *)v25 + 2);
    unint64_t v57 = *((void *)v25 + 3);
    char v58 = v25[32];
    __int128 v144 = xmmword_1003398F0;
    swift_unknownObjectRetain(v53);
    sub_1000FB470(v54, v55);
    sub_1000F39BC(32LL, v56, v57, v58);
    uint64_t v60 = v59;
    unint64_t v62 = v61;
    sub_1000FA9C4(v59, v61);
    sub_1000208D8(v60, v62);
    __int128 v63 = v144;
    v64.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000208D8(v63, *((unint64_t *)&v63 + 1));
    DNSRecords.SRV.valueData.getter();
    if (v66 >> 60 == 15)
    {
      Class isa = 0LL;
    }

    else
    {
      uint64_t v68 = v65;
      unint64_t v69 = v66;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100020B40(v68, v69);
    }

    [v53 handleEventType:1 keyData:v64.super.isa valueData:isa];

    swift_unknownObjectRelease(v53);
    int v31 = v140;
  }

  uint64_t v11 = v131;
  uint64_t v14 = v132;
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v136 + 56))(v131, 1LL, 1LL, v132);
  uint64_t v70 = v135;
  swift_beginAccess(v135, &v144, 33LL, 0LL);
  sub_100020A68((uint64_t)v11, v70);
  swift_endAccess(&v144);
  id result = (id)sub_100020A2C((uint64_t)v25);
  if (v31)
  {
LABEL_13:
    id result = [v31 hostname];
    if (result)
    {
      uint64_t v71 = result;
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      unint64_t v74 = v73;

      id v75 = [v31 servicePort];
      uint64_t v76 = (uint64_t)v130;
      NWEndpoint.Port.init(rawValue:)(v75);
      uint64_t v77 = v134;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v76, 1LL, v137) == 1)
      {
        swift_bridgeObjectRelease(v74);
        return (id)sub_1000225EC(v76, &qword_1004050A0);
      }

      else
      {
        id v78 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 32);
        uint64_t v140 = v74;
        uint64_t v79 = v29;
        uint64_t v80 = v72;
        uint64_t v81 = v137;
        v78(v30, v76, v137);
        uint64_t v82 = v129;
        __int16 v146 = *(_WORD *)&v129[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 32];
        __int128 v83 = *(_OWORD *)&v129[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 16];
        __int128 v144 = *(_OWORD *)&v129[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
        __int128 v145 = v83;
        __int128 v155 = v144;
        __int128 v153 = v83;
        __int16 v154 = v146;
        uint64_t v84 = v133;
        uint64_t v85 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 16);
        v85(v133 + v14[5], v30, v81);
        *(_WORD *)(v84 + 32) = v146;
        __int128 v86 = v145;
        *(_OWORD *)uint64_t v84 = v144;
        *(_OWORD *)(v84 + 16) = v86;
        uint64_t v87 = (uint64_t *)(v84 + v14[6]);
        uint64_t v132 = (int *)v80;
        *uint64_t v87 = v80;
        uint64_t v88 = v79;
        unint64_t v89 = (unint64_t)v140;
        v87[1] = (uint64_t)v140;
        *(_WORD *)(v84 + v14[7]) = 0;
        *(_WORD *)(v84 + v14[8]) = 0;
        v85((uint64_t)v88, v30, v81);
        id v90 = v82;
        swift_bridgeObjectRetain_n(v89, 2LL);
        os_log_t v91 = (char *)v90;
        sub_1000209DC((uint64_t)&v155);
        uint64_t v92 = sub_1000209DC((uint64_t)&v153);
        uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
        os_log_type_t v94 = static os_log_type_t.info.getter();
        BOOL v95 = os_log_type_enabled(v93, v94);
        char v131 = v11;
        if (v95)
        {
          uint64_t v96 = swift_slowAlloc(26LL, -1LL);
          char v130 = (char *)swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 v142 = v130;
          *(_DWORD *)uint64_t v96 = 136315650;
          sub_1000209DC((uint64_t)&v155);
          sub_1000209DC((uint64_t)&v153);
          uint64_t v97 = DNSRecords.PTR.description.getter();
          unint64_t v99 = v98;
          sub_100020A04((uint64_t)&v155);
          sub_100020A04((uint64_t)&v153);
          uint64_t v141 = sub_10000235C(v97, v99, (uint64_t *)&v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);

          unint64_t v100 = v99;
          uint64_t v101 = v137;
          swift_bridgeObjectRelease(v100);
          *(_WORD *)(v96 + 12) = 2080;
          swift_bridgeObjectRetain(v89);
          uint64_t v141 = sub_10000235C((uint64_t)v132, v89, (uint64_t *)&v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
          uint64_t v102 = swift_bridgeObjectRelease_n(v89, 3LL);
          *(_WORD *)(v96 + 22) = 512;
          Swift::String v103 = v138;
          LOWORD(v97) = NWEndpoint.Port.rawValue.getter(v102);
          uint64_t v104 = *(void (**)(char *, uint64_t))(v134 + 8);
          v104(v103, v101);
          LOWORD(v141) = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, (char *)&v141 + 2);
          _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Providing SRV record for %s %s:%hu",  (uint8_t *)v96,  0x1Au);
          char v105 = v130;
          swift_arrayDestroy(v130, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v105, -1LL, -1LL);
          uint64_t v106 = v96;
          uint64_t v11 = v131;
          swift_slowDealloc(v106, -1LL, -1LL);
        }

        else
        {
          uint64_t v104 = *(void (**)(char *, uint64_t))(v134 + 8);
          v104(v88, v137);
          swift_bridgeObjectRelease_n(v89, 2LL);
        }

        uint64_t v107 = *(void **)&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
        if (v107)
        {
          uint64_t v132 = v14;
          uint64_t v108 = *(void *)v133;
          unint64_t v109 = *(void *)(v133 + 8);
          uint64_t v110 = *(void *)(v133 + 16);
          unint64_t v111 = *(void *)(v133 + 24);
          char v112 = *(_BYTE *)(v133 + 32);
          __int128 v142 = xmmword_1003398F0;
          swift_unknownObjectRetain(v107);
          sub_1000FB470(v108, v109);
          sub_1000F39BC(32LL, v110, v111, v112);
          uint64_t v114 = v113;
          unint64_t v116 = v115;
          sub_1000FA9C4(v113, v115);
          sub_1000208D8(v114, v116);
          __int128 v117 = v142;
          v118.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000208D8(v117, *((unint64_t *)&v117 + 1));
          DNSRecords.SRV.valueData.getter();
          if (v120 >> 60 == 15)
          {
            Class v121 = 0LL;
          }

          else
          {
            uint64_t v122 = v119;
            unint64_t v123 = v120;
            Class v121 = Data._bridgeToObjectiveC()().super.isa;
            sub_100020B40(v122, v123);
          }

          [v107 handleEventType:0 keyData:v118.super.isa valueData:v121];

          swift_unknownObjectRelease(v107);
          uint64_t v11 = v131;
          uint64_t v14 = v132;
        }

        uint64_t v124 = v133;
        sub_1000210C0(v133, (uint64_t)v11);
        (*(void (**)(char *, void, uint64_t, int *))(v136 + 56))(v11, 0LL, 1LL, v14);
        uint64_t v125 = v135;
        swift_beginAccess(v135, &v142, 33LL, 0LL);
        sub_100020A68((uint64_t)v11, v125);
        swift_endAccess(&v142);
        sub_100020A2C(v124);
        return (id)((uint64_t (*)(char *, uint64_t))v104)(v139, v137);
      }
    }
  }

  return result;
}

id sub_10001BE68()
{
  return sub_10001A32C(type metadata accessor for BonjourResolver);
}

uint64_t sub_10001BF30@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void sub_10001BF58(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *a1 + 8;
  if (v6) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  uint64_t v9 = *a2;
  if (*a2)
  {
    *uint64_t v9 = v7;
    *a2 = v9 + 1;
  }

  else
  {
  }

uint64_t sub_10001C008(uint64_t a1, uint64_t a2)
{
  return sub_10001C958( a1,  a2,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
}

unint64_t sub_10001C01C(char a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_10001CAB0(a1, v3);
}

unint64_t sub_10001C08C(unint64_t a1)
{
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  Hasher.init(_seed:)(v10, *(void *)(v1 + 40));
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(BYTE6(a1));
  Swift::Int v8 = Hasher._finalize()();
  return sub_10001CB84(a1 & 0xFFFFFFFFFFFFFFLL, v8);
}

unint64_t sub_10001C15C(unint64_t a1)
{
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  Hasher.init(_seed:)(v9, *(void *)(v1 + 40));
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE5(a1));
  Swift::Int v7 = Hasher._finalize()();
  return sub_10001CC98(a1 & 0xFFFFFFFFFFFFLL, v7);
}

unint64_t sub_10001C214(uint64_t a1)
{
  Swift::String v3 = String.lowercased()();
  String.hash(into:)(v9, v3._countAndFlagsBits, v3._object);
  swift_bridgeObjectRelease(v3._object);
  __int128 v10 = *(_OWORD *)(a1 + 16);
  *(_WORD *)uint64_t v11 = *(_WORD *)(a1 + 32);
  uint64_t v4 = *((void *)&v10 + 1);
  Swift::String v5 = String.lowercased()();
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v9, v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease(v5._object);
  if (v11[0]) {
    uint64_t v6 = 7365749LL;
  }
  else {
    uint64_t v6 = 7365492LL;
  }
  String.hash(into:)(v9, v6, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Hasher._combine(_:)(v11[1]);
  sub_100020A04((uint64_t)&v10);
  Swift::Int v7 = Hasher._finalize()();
  return sub_10001CD98((__int128 *)a1, v7);
}

unint64_t sub_10001C320(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, &protocol witness table for CodingUserInfoKey);
  return sub_10001CF94(a1, v6);
}

void sub_10001C370(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10001C3D4()
{
  Swift::Int v1 = Hasher._finalize()();
  return sub_10001D0BC(v0, v1);
}

unint64_t sub_10001C470(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_10000AF70( &qword_1004050E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10033836C);
  _CFObject.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  return sub_10001D2F4(a1, v6);
}

unint64_t sub_10001C4F8(uint64_t a1, uint64_t a2)
{
  Swift::String v5 = String.lowercased()();
  String.hash(into:)(v8, v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease(v5._object);
  Swift::Int v6 = Hasher._finalize()();
  return sub_10001D434(a1, a2, v6);
}

unint64_t sub_10001C578(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001D5C4(a1, v7);
}

unint64_t sub_10001C5E4(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10001D704(a1, v3);
}

unint64_t sub_10001C614(char a1)
{
  uint64_t v2 = v1;
  Hasher.init(_seed:)(v9, *(void *)(v2 + 40));
  char v4 = a1 & 1;
  if ((a1 & 1) != 0) {
    uint64_t v5 = 0x64657463656A6572LL;
  }
  else {
    uint64_t v5 = 0x6553657669746361LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v6 = 0xEF65636976726553LL;
  }
  else {
    unint64_t v6 = 0xED00006563697672LL;
  }
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  Swift::Int v7 = Hasher._finalize()();
  return sub_10001D7A0(v4, v7);
}

uint64_t sub_10001C6C0(uint64_t a1)
{
  return sub_10001D8FC(a1, v3);
}

unint64_t sub_10001C6F0(unsigned __int8 a1)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x616974696E497369LL;
    }
    else {
      uint64_t v3 = 0x6E6F697461727564LL;
    }
    if (a1 == 1) {
      unint64_t v4 = 0xEB00000000726F74LL;
    }
    else {
      unint64_t v4 = 0xE800000000000000LL;
    }
  }

  else
  {
    unint64_t v4 = 0xE700000000000000LL;
    uint64_t v3 = 0x65636976726573LL;
  }

  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  Swift::Int v5 = Hasher._finalize()();
  return sub_10001DB7C(a1, v5);
}

unint64_t sub_10001C7AC(char a1)
{
  uint64_t v2 = v1;
  Hasher.init(_seed:)(v9, *(void *)(v2 + 40));
  char v4 = a1 & 1;
  if ((a1 & 1) != 0) {
    uint64_t v5 = 0x6E6F73616572LL;
  }
  else {
    uint64_t v5 = 0x65636976726573LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  Swift::Int v7 = Hasher._finalize()();
  return sub_10001DD2C(v4, v7);
}

uint64_t sub_10001C83C(uint64_t a1)
{
  uint64_t v3 = sub_10014E678(a1);
  uint64_t v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  Swift::Int v6 = Hasher._finalize()();
  return sub_10001DE68(a1, v6);
}

unint64_t sub_10001C8B0(uint64_t a1)
{
  return sub_10001C8BC(a1, (uint64_t (*)(uint64_t))sub_10018A6BC);
}

unint64_t sub_10001C8BC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = a2(a1);
  uint64_t v7 = v6;
  String.hash(into:)(v10, v5, v6);
  swift_bridgeObjectRelease(v7);
  Swift::Int v8 = Hasher._finalize()();
  return sub_10001E5A0(a1, v8, a2);
}

uint64_t sub_10001C944(uint64_t a1, uint64_t a2)
{
  return sub_10001C958( a1,  a2,  (void (*)(void *, uint64_t, uint64_t))&Character.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
}

uint64_t sub_10001C958( uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v8 = Hasher._finalize()();
  return a4(a1, a2, v8);
}

unint64_t sub_10001C9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    __int128 v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10001CAB0(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    int v7 = (0xDD06050403020100LL >> (8 * a1));
    uint64_t v8 = *(void *)(v2 + 48);
    if ((0xDD06050403020100LL >> (8 * *(_BYTE *)(v8 + result))) != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
      }
    }
  }

  return result;
}

unint64_t sub_10001CB84(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    int v6 = a1;
    uint64_t v7 = ~v4;
    unint64_t v8 = HIWORD(a1);
    unint64_t v9 = a1 >> 40;
    uint64_t v10 = *(void *)(v2 + 48);
    unint64_t v11 = HIDWORD(a1);
    unint64_t v12 = a1 >> 24;
    unint64_t v13 = a1 >> 16;
    unint64_t v14 = a1 >> 8;
    do
    {
      if (*(unsigned __int8 *)(v10 - result + 8 * result) == v6)
      {
        uint64_t v15 = v10 - result + 8 * result;
        LOBYTE(v17) = v14;
        BYTE1(v17) = v13;
        BYTE2(v17) = v12;
        HIBYTE(v17) = v11;
        LOBYTE(v18) = v9;
        HIBYTE(v18) = v8;
      }

      unint64_t result = (result + 1) & v7;
    }

    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0);
  }

  return result;
}

unint64_t sub_10001CC98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v6 = ~v4;
    do
    {
      LOWORD(v7) = a1;
      BYTE2(v7) = BYTE2(a1);
      HIBYTE(v7) = BYTE3(a1);
      LOBYTE(v8) = BYTE4(a1);
      HIBYTE(v8) = BYTE5(a1);
      if (!(*(_DWORD *)(*(void *)(v2 + 48) + 6 * result) ^ v7 | *(unsigned __int16 *)(*(void *)(v2 + 48)
                                                                                       + 6 * result
                                                                                       + 4) ^ v8))
        break;
      unint64_t result = (result + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0);
  }

  return result;
}

unint64_t sub_10001CD98(__int128 *a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = a1;
    uint64_t v21 = ~v3;
    __int128 v20 = a1 + 1;
    int v19 = *((unsigned __int8 *)a1 + 33);
    unint64_t v6 = sub_10000B08C();
    do
    {
      uint64_t v7 = *(void *)(v23 + 48) + 40 * v4;
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = *(void *)(v7 + 16);
      uint64_t v10 = *(void *)(v7 + 24);
      int v11 = *(unsigned __int8 *)(v7 + 32);
      int v12 = *(unsigned __int8 *)(v7 + 33);
      uint64_t v25 = *(void *)v7;
      uint64_t v26 = v8;
      unint64_t v13 = v5;
      __int128 v24 = *v5;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      if (StringProtocol.caseInsensitiveCompare<A>(_:)( &v24,  &type metadata for String,  &type metadata for String,  v6,  v6)
        || (__int128 v24 = *v20,
            char v14 = *((_BYTE *)v5 + 32),
            uint64_t v25 = v9,
            uint64_t v26 = v10,
            StringProtocol.caseInsensitiveCompare<A>(_:)( &v24,  &type metadata for String,  &type metadata for String,  v6,  v6)))
      {
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v8);
      }

      else
      {
        if (v11) {
          uint64_t v15 = 7365749LL;
        }
        else {
          uint64_t v15 = 7365492LL;
        }
        if ((v14 & 1) != 0) {
          uint64_t v16 = 7365749LL;
        }
        else {
          uint64_t v16 = 7365492LL;
        }
        if (v15 == v16)
        {
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
        }

        else
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, 0xE300000000000000LL, v16, 0xE300000000000000LL, 0LL);
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
          if ((v17 & 1) == 0) {
            goto LABEL_4;
          }
        }

        if (v12 == v19) {
          return v4;
        }
      }

LABEL_4:
      unint64_t v4 = (v4 + 1) & v21;
      uint64_t v5 = v13;
    }

    while (((*(void *)(v22 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

        goto LABEL_5;
      }

      unsigned __int16 v18 = (uint64_t)v210;
      int v19 = v211;
      __int128 v20 = *v203;
      if (*(void *)(*v203 + 16LL))
      {
        swift_bridgeObjectRetain(*v203);
        uint64_t v21 = v18;
        uint64_t v22 = sub_10001C008(v18, v19);
        if ((v23 & 1) != 0)
        {
          __int128 v24 = v22;
          uint64_t v25 = v11;
          uint64_t v26 = *(_DWORD *)(v20 + 36);
          swift_bridgeObjectRelease(v20);
          if (v24 < 0) {
            goto LABEL_123;
          }
          int v27 = *v203;
          if (v24 >= 1LL << *(_BYTE *)(*v203 + 32LL)) {
            goto LABEL_123;
          }
          if (v26 == *(_DWORD *)(v27 + 36))
          {
            uint64_t v28 = *(void *)(*(void *)(v27 + 56) + 8 * v24);
            uint64_t v29 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service;
            os_log_type_t v30 = *(_DWORD *)(v28
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service);
            *(_DWORD *)(v28
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service) = v25;
            swift_retain();
            IOObjectRelease(v30);
            IOObjectRetain(*(_DWORD *)(v28 + v29));
            swift_release(v28);
            int v31 = swift_bridgeObjectRetain(v19);
            BOOL v32 = (os_log_s *)Logger.logObject.getter(v31);
            uint64_t v33 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v32, v33))
            {
              os_log_type_t v34 = swift_slowAlloc(12LL, -1LL);
              int v35 = (void **)swift_slowAlloc(32LL, -1LL);
              int v210 = v35;
              *(_DWORD *)os_log_type_t v34 = v200.n128_u32[0];
              swift_bridgeObjectRetain(v19);
              *(void *)(v34 + 4) = sub_10000235C(v21, v19, (uint64_t *)&v210);
              swift_bridgeObjectRelease_n(v19, 3LL);
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Already discovered %s", (uint8_t *)v34, 0xCu);
              swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v35, -1LL, -1LL);
              uint64_t v36 = v34;
              uint64_t v2 = v199;
              swift_slowDealloc(v36, -1LL, -1LL);
            }

            else
            {
              swift_bridgeObjectRelease_n(v19, 2LL);
            }

            LODWORD(v11) = v25;
            goto LABEL_5;
          }

          goto LABEL_125;
        }

        swift_bridgeObjectRelease(v20);
      }

      uint64_t v202 = v11;
      memset(v219, 0, 44);
      KeyPath = swift_getKeyPath(&unk_10033A880);
      char v42 = __chkstk_darwin(KeyPath);
      uint64_t v164 = v219;
      uint64_t v165 = v42;
      uint64_t v166 = 16LL;
      v201 = v18;
      uint64_t v43 = v204;
      sub_10003B5A4( (void *(*)(uint64_t *__return_ptr, void *))sub_100054614,  (uint64_t)(&v167 - 6),  v18,  v19);
      int v204 = v43;
      swift_release(KeyPath);
      unint64_t v44 = *(unsigned int *)(*(void *)(v2 + 16) + 16LL);
      unint64_t v45 = sub_100333A04(0);
      if (ioctl(_:_:_:)(v44, v45, v219) || (v219[1] & 0xE0) != 0x80)
      {
        uint64_t v53 = swift_bridgeObjectRetain(v19);
        uint64_t v37 = (os_log_s *)Logger.logObject.getter(v53);
        uint64_t v54 = static os_log_type_t.info.getter();
        unint64_t v55 = os_log_type_enabled(v37, v54);
        LODWORD(v11) = v202;
        if (v55)
        {
          uint64_t v49 = swift_slowAlloc(12LL, -1LL);
          uint64_t v50 = (void **)swift_slowAlloc(32LL, -1LL);
          int v210 = v50;
          *(_DWORD *)uint64_t v49 = v200.n128_u32[0];
          swift_bridgeObjectRetain(v19);
          *(void *)(v49 + 4) = sub_10000235C(v201, v19, (uint64_t *)&v210);
          swift_bridgeObjectRelease_n(v19, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v54,  "Ignoring %s because its not a WiFi interface",  (uint8_t *)v49,  0xCu);
          uint64_t v52 = (char *)&type metadata for Any + 8;
          os_log_t v51 = v50;
LABEL_26:
          swift_arrayDestroy(v51, 1LL, v52);
          swift_slowDealloc(v50, -1LL, -1LL);
          uint64_t v40 = v49;
LABEL_27:
          swift_slowDealloc(v40, -1LL, -1LL);
          goto LABEL_4;
        }

  if (qword_1004040D0 == -1)
  {
    if ((v6 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  swift_once(&qword_1004040D0, sub_10005DB14);
  if ((v6 & 1) != 0)
  {
LABEL_6:
    uint64_t v8 = static WiFiDriverCapabilities.supportsAWDL;
    swift_beginAccess(&v16, v17, 33LL, 0LL);
    sub_10008F9D0(v8, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v17);
  }

  if (qword_1004040D0 == -1)
  {
    if ((v17 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  swift_once(&qword_1004040D0, sub_10005DB14);
  if ((v17 & 1) != 0)
  {
LABEL_6:
    int v19 = static WiFiDriverCapabilities.supportsAWDL;
    swift_beginAccess(&v28, v29, 33LL, 0LL);
    sub_10008F9D0(v19, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v29);
  }

    int v12 = (v12 + 1) & v36;
  }

  while (((*(void *)(v39 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
  swift_bridgeObjectRelease(v9);
  uint64_t v8 = v32;
LABEL_20:
  uint64_t v29 = v33;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v33);
  sub_100057FE8(a2, (uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
  uint64_t v46 = *v29;
  *uint64_t v29 = 0x8000000000000000LL;
  sub_1000D48E4((uint64_t)v8, v12, isUniquelyReferenced_nonNull_native);
  int v31 = *v29;
  *uint64_t v29 = v46;
  swift_bridgeObjectRelease(v31);
  sub_100022628(a2, v34, type metadata accessor for AWDLPeer.AdvertisedService);
  return 1LL;
}

      ++v7;
      unint64_t v4 = v12;
    }

    while (v7 != v6);
  }

  return _swiftEmptyArrayStorage;
}

    ++v3;
    if (v6 == v2) {
      return 0LL;
    }
  }

  uint64_t v7 = i[2];
  switch(BYTE5(a1))
  {
    case 2:
      if (v7 == 2) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 3:
      if (v7 == 3) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 4:
      if (v7 == 4) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 5:
      if (v7 == 5) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 6:
      if (v7 == 6) {
        goto LABEL_22;
      }
      goto LABEL_20;
    default:
      if (((((a1 & 0x10000000000LL) == 0) ^ v7) & 1) != 0) {
        goto LABEL_22;
      }
LABEL_20:
      if ((3u >> (BYTE4(a1) & 7)) & 1 | (a1 >> 40) & 1 | (BYTE5(a1) - 2 < 5) | ((v7 - 2) < 5)
        || (v7 & 1) == 0)
      {
        goto LABEL_4;
      }

    uint64_t v5 = v26 + 1;
    unint64_t v4 = v7;
    if (v26 + 1 == v8) {
      return;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

      v10 += 40;
      if (!--v16)
      {
        swift_bridgeObjectRelease_n(v43, 2LL);
        *unint64_t v44 = v57;
        uint64_t v16 = a2;
        uint64_t v61 = a1;
        if ((_BYTE)v49 == 0xFF)
        {
          LOBYTE(v8) = BYTE1(a3);
          LOBYTE(v9) = BYTE2(a3);
          LOBYTE(v10) = BYTE3(a3);
          LOBYTE(v11) = BYTE4(a3);
          LOBYTE(v12) = BYTE5(a3);
          LOBYTE(v13) = BYTE6(a3);
          char v14 = HIBYTE(a3);
          goto LABEL_21;
        }

        TimeBitmap.SlotsView.formUnion(_:)(a1, a2, a3);
        uint64_t v39 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
        unint64_t result = static TimeBitmap.SlotsView.== infix(_:_:)( v46,  v45,  v47 | ((unint64_t)BYTE1(v47) << 8) | ((unint64_t)BYTE2(v47) << 16) | ((unint64_t)BYTE3(v47) << 24) | ((unint64_t)BYTE4(v47) << 32) | ((unint64_t)BYTE5(v47) << 40) | ((unint64_t)BYTE6(v47) << 48) | ((unint64_t)HIBYTE(v47) << 56),  *v39,  v39[1],  v39[2]);
        if ((result & 1) == 0)
        {
          unint64_t result = swift_isUniquelyReferenced_nonNull_native(v57);
          if ((result & 1) == 0)
          {
            unint64_t result = (uint64_t)sub_1002CA6A0(0LL, v57[2] + 1LL, 1, v57);
            unint64_t v57 = (void *)result;
          }

          char v41 = v57[2];
          uint64_t v40 = v57[3];
          if (v41 >= v40 >> 1)
          {
            unint64_t result = (uint64_t)sub_1002CA6A0((void *)(v40 > 1), v41 + 1, 1, v57);
            unint64_t v57 = (void *)result;
          }

          uint64_t v37 = v57;
          v57[2] = v41 + 1;
          char v42 = &v57[5 * v41];
          v42[4] = v48;
          *((_WORD *)v42 + 20) = v49;
          v42[6] = v46;
          v42[7] = v45;
          v42[8] = v47;
          goto LABEL_32;
        }

        return result;
      }
    }

    uint64_t v56 = *(void *)(v10 - 39);
    uint64_t v53 = *(void *)(v10 - 23);
    uint64_t v54 = *(void *)(v10 - 15);
    TimeBitmap.SlotsView.subtract(_:)( v19,  v13,  v60 | (v9 << 8) | (v59 << 16) | (v20 << 24) | (v58 << 32) | (v11 << 40) | (v14 << 48) | (v61 << 56));
LABEL_13:
    uint64_t v25 = v12;
    uint64_t v26 = v14;
    int v27 = v20;
    if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0) {
      unint64_t v57 = sub_1002CA6A0(0LL, v57[2] + 1LL, 1, v57);
    }
    uint64_t v29 = v57[2];
    uint64_t v28 = v57[3];
    if (v29 >= v28 >> 1) {
      unint64_t v57 = sub_1002CA6A0((void *)(v28 > 1), v29 + 1, 1, v57);
    }
    v57[2] = v29 + 1;
    os_log_type_t v30 = &v57[5 * v29];
    v30[4] = v56;
    *((_BYTE *)v30 + 40) = v25;
    *((_BYTE *)v30 + 41) = v18;
    v30[6] = v53;
    v30[7] = v54;
    *((_BYTE *)v30 + 64) = v60;
    *((_BYTE *)v30 + 65) = v9;
    *((_BYTE *)v30 + 66) = v59;
    *((_BYTE *)v30 + 67) = v27;
    *((_BYTE *)v30 + 68) = v58;
    *((_BYTE *)v30 + 69) = v11;
    *((_BYTE *)v30 + 70) = v26;
    *((_BYTE *)v30 + 71) = v61;
    goto LABEL_4;
  }

  swift_bridgeObjectRelease(v15);
  unint64_t v57 = _swiftEmptyArrayStorage;
  *uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v16 = a2;
LABEL_21:
  LOBYTE(v18) = a3;
  BOOL v32 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
  unint64_t result = static TimeBitmap.SlotsView.== infix(_:_:)( v61,  v16,  a3 | (unint64_t)(unsigned __int16)(v8 << 8) | ((unint64_t)v9 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v10 << 24) | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48) | (v14 << 56),  *v32,  v32[1],  v32[2]);
  if ((result & 1) == 0)
  {
    unint64_t result = swift_isUniquelyReferenced_nonNull_native(v57);
    if ((result & 1) == 0)
    {
LABEL_35:
      unint64_t result = (uint64_t)sub_1002CA6A0(0LL, v57[2] + 1LL, 1, v57);
      unint64_t v57 = (void *)result;
    }

    int v35 = v57[2];
    os_log_type_t v34 = v57[3];
    uint64_t v36 = v35 + 1;
    if (v35 >= v34 >> 1)
    {
      unint64_t result = (uint64_t)sub_1002CA6A0((void *)(v34 > 1), v35 + 1, 1, v57);
      uint64_t v36 = v35 + 1;
      unint64_t v57 = (void *)result;
    }

    uint64_t v37 = v57;
    v57[2] = v36;
    uint64_t v38 = &v57[5 * v35];
    v38[4] = a4;
    *((_BYTE *)v38 + 40) = a5;
    *((_BYTE *)v38 + 41) = v52;
    void v38[6] = v61;
    v38[7] = v16;
    *((_BYTE *)v38 + 64) = v18;
    *((_BYTE *)v38 + 65) = v8;
    *((_BYTE *)v38 + 66) = v9;
    *((_BYTE *)v38 + 67) = (_BYTE)v10;
    *((_BYTE *)v38 + 68) = v11;
    *((_BYTE *)v38 + 69) = v12;
    *((_BYTE *)v38 + 70) = v13;
    *((_BYTE *)v38 + 71) = v14;
LABEL_32:
    *unint64_t v44 = v37;
  }

  return result;
}

    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

    uint64_t v9 = 0;
    ++v7;
    uint64_t v3 = v11;
    unint64_t v4 = v13;
    if (v7 == v6) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v8 = 0;
    unint64_t v6 = v30 + 1;
    unint64_t v4 = v27;
    uint64_t v5 = v10;
    if (v30 + 1 == v11) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

    uint64_t v9 = 0;
    uint64_t v7 = v30 + 1;
    unint64_t v6 = v11;
    uint64_t v5 = v27;
    if (v30 + 1 == v28) {
      return (uint64_t)v2;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

      unint64_t result = (result + 1) & v6;
      if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) == 0) {
        return result;
      }
    }

    uint64_t v8 = *(unsigned __int8 *)(v7 + 5);
    switch(v8)
    {
      case 2:
        if (BYTE5(a1) != 2) {
          goto LABEL_4;
        }
        break;
      case 3:
        if (BYTE5(a1) != 3) {
          goto LABEL_4;
        }
        break;
      case 4:
        if (BYTE5(a1) != 4) {
          goto LABEL_4;
        }
        break;
      case 5:
        if (BYTE5(a1) != 5) {
          goto LABEL_4;
        }
        break;
      case 6:
        if (BYTE5(a1) != 6) {
          goto LABEL_4;
        }
        break;
      default:
        break;
    }
  }

  return result;
}

unint64_t sub_10001CF94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a1;
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)( v8,  v17,  v5,  &protocol witness table for CodingUserInfoKey);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

uint64_t sub_10001D0BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
  if (((*(void *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v3) & 1) != 0) {
    __asm { BR              X9 }
  }

  return a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10001D2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    unint64_t v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_10000AF70( &qword_1004050E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10033836C);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10001D434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    Swift::String v7 = String.lowercased()();
    object = v7._object;
    Swift::String v9 = String.lowercased()();
    if (v7._countAndFlagsBits == v9._countAndFlagsBits && v7._object == v9._object)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(object, 2LL);
      return v6;
    }

    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)( v7._countAndFlagsBits,  v7._object,  v9._countAndFlagsBits,  v9._object,  0LL);
    swift_bridgeObjectRelease(v7._object);
    swift_bridgeObjectRelease(v9._object);
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
      {
        while (1)
        {
          Swift::String v13 = String.lowercased()();
          object = v13._object;
          Swift::String v14 = String.lowercased()();
          if (v13._countAndFlagsBits == v14._countAndFlagsBits && v13._object == v14._object) {
            break;
          }
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)( v13._countAndFlagsBits,  v13._object,  v14._countAndFlagsBits,  v14._object,  0LL);
          swift_bridgeObjectRelease(v13._object);
          swift_bridgeObjectRelease(v14._object);
          if ((v16 & 1) == 0)
          {
            unint64_t v6 = (v6 + 1) & v12;
            if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
              continue;
            }
          }

          return v6;
        }

        goto LABEL_16;
      }
    }
  }

  return v6;
}

unint64_t sub_10001D5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    Swift::String v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_10000AF70( &qword_1004050E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_10001D704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10001D7A0(char a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    if ((a1 & 1) != 0) {
      uint64_t v6 = 0x64657463656A6572LL;
    }
    else {
      uint64_t v6 = 0x6553657669746361LL;
    }
    if ((a1 & 1) != 0) {
      unint64_t v7 = 0xEF65636976726553LL;
    }
    else {
      unint64_t v7 = 0xED00006563697672LL;
    }
    while (1)
    {
      uint64_t v8 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0x64657463656A6572LL : 0x6553657669746361LL;
      unint64_t v9 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0xEF65636976726553LL : 0xED00006563697672LL;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0LL);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0) {
          continue;
        }
      }

      return v4;
    }

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  return v4;
}

uint64_t sub_10001D8FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
  if (((*(void *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v3) & 1) != 0) {
    __asm { BR              X9 }
  }

  return a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10001DB7C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(void *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v7 = 0x616974696E497369LL;
          unint64_t v8 = 0xEB00000000726F74LL;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }

        else
        {
          unint64_t v8 = 0xE800000000000000LL;
          uint64_t v7 = 0x6E6F697461727564LL;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE700000000000000LL;
            uint64_t v10 = 0x65636976726573LL;
            if (v7 != 0x65636976726573LL) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }

      else
      {
        unint64_t v8 = 0xE700000000000000LL;
        uint64_t v7 = 0x65636976726573LL;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }

      if (v9 == 1) {
        uint64_t v10 = 0x616974696E497369LL;
      }
      else {
        uint64_t v10 = 0x6E6F697461727564LL;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xEB00000000726F74LL;
      }
      else {
        unint64_t v11 = 0xE800000000000000LL;
      }
      if (v7 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n(v8, 2LL);
        return v4;
      }

LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v10, v11, 0LL);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0) {
          continue;
        }
      }

      return v4;
    }
  }

  return v4;
}

  if (v5 != v7) {
    goto LABEL_21;
  }
  unint64_t v8 = 1;
  uint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  if (v5 != v7) {
    goto LABEL_21;
  }
  unint64_t v8 = 1;
  uint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  if (v5 != v7) {
    goto LABEL_21;
  }
  unint64_t v8 = 1;
  uint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if (qword_100404100 != -1)
  {
    swift_once(&qword_100404100, sub_10005DDFC);
    if ((v6 & 0x800000000LL) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  if ((v6 & 0x800000000LL) != 0)
  {
LABEL_21:
    uint64_t v14 = static WiFiDriverCapabilities.supportsDFSProxy;
    swift_beginAccess(&v16, v17, 33LL, 0LL);
    sub_10008F9D0(v14, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v17);
  }

  if (qword_100404100 != -1)
  {
    swift_once(&qword_100404100, sub_10005DDFC);
    if ((v17 & 0x800000000LL) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  if ((v17 & 0x800000000LL) != 0)
  {
LABEL_21:
    uint64_t v25 = static WiFiDriverCapabilities.supportsDFSProxy;
    swift_beginAccess(&v28, v29, 33LL, 0LL);
    sub_10008F9D0(v25, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v29);
  }

      uint64_t v17 = 0;
LABEL_20:
      __int128 v24 = result;
      int v19 = result[2];
      uint64_t v18 = result[3];
      if (v19 >= v18 >> 1)
      {
        uint64_t v22 = *v6;
        sub_1000698F0(v18 > 1, v19 + 1, 1);
        uint64_t v10 = v22;
        uint64_t v5 = a2;
        unint64_t result = v24;
      }

      result[2] = v19 + 1;
      __int128 v20 = &result[v19];
      *((_DWORD *)v20 + 8) = v7;
      v6 += 8;
      *((_BYTE *)v20 + 36) = v8;
      *((_BYTE *)v20 + 37) = v9;
      *((_BYTE *)v20 + 38) = v10;
      *((_BYTE *)v20 + 39) = v17 & 1;
      --v3;
    }

    while (v3);
  }

  return result;
}

        __int128 v20 = v6 + 8;
        if (v7 < v6 || v7 >= v20 || v7 != v6) {
          *(void *)uint64_t v7 = *(void *)v6;
        }
LABEL_27:
        v7 += 8;
        if (v4 < v14)
        {
          uint64_t v6 = v20;
        }

        goto LABEL_93;
      }
    }

      unint64_t v11 = 1;
      return v11 & 1;
    }

    goto LABEL_12;
  }

  uint64_t v5 = v23[2];
  uint64_t v6 = v23[3];
  sub_100055C7C(a2, (uint64_t)&v18);
  if (v22 != 1)
  {
LABEL_12:
    unint64_t v11 = 0;
    return v11 & 1;
  }

  uint64_t v7 = v20;
  unint64_t v8 = v21;
  int v9 = v3 == v18 && v4 == v19;
  if (v9 || (uint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v18, v19, 0LL), v11 = 0, (v10 & 1) != 0))
  {
    if (v5 != v7 || v6 != v8)
    {
      char v12 = v5;
      Swift::String v13 = v6;
      uint64_t v14 = v7;
      char v15 = v8;
LABEL_18:
      unint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 0LL);
      return v11 & 1;
    }

    goto LABEL_19;
  }

  return v11 & 1;
}

  if (v17 == v16 && v18 == v15)
  {
    uint64_t v14 = 1;
    char v15 = v18;
  }

  else
  {
    uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v16, v15, 0LL);
  }

  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v15);
  return v14 & 1;
}

  __break(1u);
  return result;
}

      uint64_t v33 = (v9 - 1) & v9;
      os_log_type_t v34 = v10;
      uint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    }

    char v12 = *(void *)(*(void *)(a2 + 56) + 8 * v7);
    Swift::String v13 = *(_BYTE *)(*(void *)(a2 + 48) + v7);
    uint64_t v14 = *(void *)(a1 + 64);
    char v15 = *(_OWORD *)(a1 + 16);
    v40[0] = *(_OWORD *)a1;
    v40[1] = v15;
    char v16 = *(_OWORD *)(a1 + 48);
    v40[2] = *(_OWORD *)(a1 + 32);
    v40[3] = v16;
    char v41 = v14;
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(*(void *)(v12 + 16));
    uint64_t v37 = *(void *)(v12 + 16);
    if (v37) {
      break;
    }
LABEL_5:
    v5 ^= Hasher._finalize()();
    unint64_t v4 = v33;
  }

  BOOL v32 = v5;
  uint64_t v36 = v12 + 32;
  swift_bridgeObjectRetain(v12);
  uint64_t v17 = 0LL;
  int v35 = v12;
  while (v17 < *(void *)(v12 + 16))
  {
    int v19 = (uint64_t *)(v36 + 56 * v17);
    uint64_t v21 = *v19;
    __int128 v20 = v19[1];
    uint64_t v22 = v19[2];
    uint64_t v23 = v19[3];
    uint64_t v38 = *((unsigned __int8 *)v19 + 32);
    __int128 v24 = v19[6];
    uint64_t v39 = v19[5];
    Hasher._combine(_:)(*(void *)(*v19 + 16));
    uint64_t v25 = *(void *)(v21 + 16);
    if (v25)
    {
      uint64_t v26 = (char *)(v21 + 32);
      do
      {
        int v27 = *v26++;
        Hasher._combine(_:)(0x801004u >> (8 * v27));
        --v25;
      }

      while (v25);
    }

    if (v23 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain(v21);
      sub_100058430(v20, v22, v23);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v20);
      swift_bridgeObjectRetain(v21);
      sub_100058430(v20, v22, v23);
      sub_100058430(v20, v22, v23);
      Data.hash(into:)(v40, v22, v23);
    }

    char v12 = v35;
    ++v17;
    Hasher._combine(_:)(v38);
    Hasher._combine(_:)(v39);
    if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v18 = v24;
    }
    else {
      uint64_t v18 = 0LL;
    }
    Hasher._combine(_:)(v18);
    sub_100057CA0(v20, v22, v23);
    swift_bridgeObjectRelease(v21);
    sub_100057CA0(v20, v22, v23);
    if (v17 == v37)
    {
      swift_bridgeObjectRelease(v35);
      uint64_t v5 = v32;
      goto LABEL_5;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

      uint64_t v37 = (v9 - 1) & v9;
      uint64_t v7 = __clz(__rbit64(v9)) + (v6 << 6);
    }

    unint64_t v11 = *(void *)(*(void *)(a2 + 56) + 8 * v7);
    char v12 = *(_BYTE *)(*(void *)(a2 + 48) + v7);
    Swift::String v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(_OWORD *)(a1 + 16);
    v41[0] = *(_OWORD *)a1;
    v41[1] = v14;
    char v15 = *(_OWORD *)(a1 + 48);
    v41[2] = *(_OWORD *)(a1 + 32);
    v41[3] = v15;
    char v42 = v13;
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(*(void *)(v11 + 16));
    uint64_t v40 = *(void *)(v11 + 16);
    if (v40) {
      break;
    }
LABEL_5:
    v5 ^= Hasher._finalize()();
    unint64_t v4 = v37;
  }

  int v35 = v6;
  uint64_t v36 = v5;
  uint64_t v39 = v11 + 32;
  swift_bridgeObjectRetain(v11);
  char v16 = 0LL;
  uint64_t v38 = v11;
  while (v16 < *(void *)(v11 + 16))
  {
    uint64_t v18 = (uint64_t *)(v39 + 56 * v16);
    __int128 v20 = *v18;
    int v19 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = v18[3];
    uint64_t v23 = *((unsigned __int8 *)v18 + 32);
    uint64_t v25 = v18[5];
    __int128 v24 = v18[6];
    Hasher._combine(_:)(*(void *)(*v18 + 16));
    uint64_t v26 = *(void *)(v20 + 16);
    if (v26)
    {
      int v27 = (unsigned __int8 *)(v20 + 37);
      do
      {
        uint64_t v28 = *(unsigned int *)(v27 - 5);
        uint64_t v29 = *(v27 - 1);
        os_log_type_t v30 = *v27;
        v27 += 8;
        Channel.hash(into:)((int)v41, v28 | (v29 << 32) | ((unint64_t)v30 << 40));
        --v26;
      }

      while (v26);
    }

    if (v22 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain(v20);
      sub_100058430(v19, v21, v22);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v19);
      swift_bridgeObjectRetain(v20);
      sub_100058430(v19, v21, v22);
      sub_100058430(v19, v21, v22);
      Data.hash(into:)(v41, v21, v22);
    }

    unint64_t v11 = v38;
    ++v16;
    Hasher._combine(_:)(v23);
    Hasher._combine(_:)(v25);
    if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v17 = v24;
    }
    else {
      uint64_t v17 = 0LL;
    }
    Hasher._combine(_:)(v17);
    sub_100057CA0(v19, v21, v22);
    swift_bridgeObjectRelease(v20);
    sub_100057CA0(v19, v21, v22);
    if (v16 == v40)
    {
      swift_bridgeObjectRelease(v38);
      uint64_t v6 = v35;
      uint64_t v5 = v36;
      goto LABEL_5;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_20:
    char v12 = *(void *)(*(void *)(a2 + 56) + 8 * v8);
    Swift::String v13 = *(_BYTE *)(*(void *)(a2 + 48) + v8);
    uint64_t v14 = *(void *)(a1 + 64);
    char v15 = *(_OWORD *)(a1 + 16);
    v33[0] = *(_OWORD *)a1;
    v33[1] = v15;
    char v16 = *(_OWORD *)(a1 + 48);
    void v33[2] = *(_OWORD *)(a1 + 32);
    v33[3] = v16;
    os_log_type_t v34 = v14;
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(*(void *)(v12 + 16));
    uint64_t v17 = *(void *)(v12 + 16);
    if (v17)
    {
      os_log_type_t v30 = v4;
      int v31 = v6;
      BOOL v32 = v5;
      swift_bridgeObjectRetain(v12);
      uint64_t v18 = v12 + 40;
      do
      {
        __int128 v20 = *(void *)v18;
        uint64_t v21 = *(void *)(v18 + 8);
        uint64_t v22 = *(void *)(v18 + 16);
        uint64_t v23 = *(unsigned __int8 *)(v18 + 24);
        uint64_t v25 = *(void *)(v18 + 32);
        __int128 v24 = *(void *)(v18 + 40);
        Channel.hash(into:)( (int)v33,  *(unsigned int *)(v18 - 8) | ((unint64_t)*(unsigned __int8 *)(v18 - 4) << 32) | ((unint64_t)*(unsigned __int8 *)(v18 - 3) << 40));
        if (v22 >> 60 == 15)
        {
          Hasher._combine(_:)(0);
        }

        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v20);
          sub_100058430(v20, v21, v22);
          sub_100058430(v20, v21, v22);
          Data.hash(into:)(v33, v21, v22);
        }

        v18 += 56LL;
        Hasher._combine(_:)(v23);
        Hasher._combine(_:)(v25);
        if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          int v19 = v24;
        }
        else {
          int v19 = 0LL;
        }
        Hasher._combine(_:)(v19);
        sub_100057CA0(v20, v21, v22);
        sub_100057CA0(v20, v21, v22);
        --v17;
      }

      while (v17);
      swift_bridgeObjectRelease(v12);
      uint64_t v6 = v31;
      uint64_t v5 = v32;
      unint64_t v4 = v30;
    }

    v5 ^= Hasher._finalize()();
  }

  unint64_t v11 = v9 + 2;
  if (v11 >= v27)
  {
LABEL_29:
    swift_release(a2);
    Hasher._combine(_:)(v5);
    return;
  }

  uint64_t v10 = *(void *)(v26 + 8 * v11);
  if (v10)
  {
    uint64_t v6 = v11;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v6 >= v27) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v26 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }

  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_21:
  __break(1u);
  return result;
}

    sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
    if ((v3 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  sub_100240434(v102, isUniquelyReferenced_nonNull_native);
  Swift::String v103 = sub_100327838( v56,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
  if ((v3 & 1) == (v104 & 1))
  {
    unint64_t v99 = v103;
    if ((v3 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }

unint64_t sub_10001DD2C(char a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    if ((a1 & 1) != 0) {
      uint64_t v6 = 0x6E6F73616572LL;
    }
    else {
      uint64_t v6 = 0x65636976726573LL;
    }
    if ((a1 & 1) != 0) {
      unint64_t v7 = 0xE600000000000000LL;
    }
    else {
      unint64_t v7 = 0xE700000000000000LL;
    }
    while (1)
    {
      uint64_t v8 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0x6E6F73616572LL : 0x65636976726573LL;
      unint64_t v9 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0xE600000000000000LL : 0xE700000000000000LL;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0LL);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0) {
          continue;
        }
      }

      return v4;
    }

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  return v4;
}

uint64_t sub_10001DE68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
  if (((*(void *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v3) & 1) != 0) {
    __asm { BR              X9 }
  }

  return a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10001E5A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a2 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = a3(*(unsigned __int8 *)(*(void *)(v3 + 48) + v6));
    uint64_t v11 = v10;
    uint64_t v12 = a3(a1);
    if (v9 == v12 && v11 == v13)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v11, 2LL);
      return v6;
    }

    uint64_t v15 = v13;
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0LL);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v15);
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = ~v5;
      unint64_t v6 = (v6 + 1) & v17;
      if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
      {
        while (1)
        {
          uint64_t v18 = a3(*(unsigned __int8 *)(*(void *)(v3 + 48) + v6));
          uint64_t v11 = v19;
          uint64_t v20 = a3(a1);
          if (v18 == v20 && v11 == v21) {
            break;
          }
          uint64_t v23 = v21;
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v11, v20, v21, 0LL);
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v23);
          if ((v24 & 1) == 0)
          {
            unint64_t v6 = (v6 + 1) & v17;
            if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
              continue;
            }
          }

          return v6;
        }

        goto LABEL_16;
      }
    }
  }

  return v6;
}

double sub_10001E720@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10001C958( a1,  a2,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10013C320();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_100022594((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_10013A5EC(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_10001E820(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_10001C214(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10013C504();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48) + 40 * v5;
  uint64_t v10 = *(void *)(v9 + 8);
  swift_bridgeObjectRelease(*(void *)(v9 + 24));
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  sub_10013A7C0(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_10001E8F4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10001C320(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10013CAF4();
      uint64_t v10 = v15;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for CodingUserInfoKey(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    sub_100022594((_OWORD *)(*(void *)(v10 + 56) + 32 * v7), a2);
    sub_10013AD78(v7, v10);
    uint64_t v13 = *v3;
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_10001E9F0(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_10001C370(a1);
  unint64_t v6 = v5;
  char v8 = v7;
  swift_bridgeObjectRelease(v4);
  if ((v8 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v10 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10013CD30();
    uint64_t v10 = v14;
  }

  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 24 * v6);
  sub_10013AFFC(v6, v10);
  uint64_t v12 = *v2;
  *uint64_t v2 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10001EAC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10001C578(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v19 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10013D4AC();
      uint64_t v10 = v19;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v14 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    sub_100022628(v13 + *(void *)(v15 + 72) * v7, a2, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_10013B454(v7, v10);
    uint64_t v16 = *v3;
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a2,  1LL,  1LL,  v18);
  }

uint64_t sub_10001EC04(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_10001C5E4(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v7 = *v1;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10013D774();
    uint64_t v7 = v11;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v5);
  sub_10013B728(v5, v7);
  uint64_t v9 = *v2;
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_10001ECAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10001C4F8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v19 = *v4;
    *char v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10013D260();
      uint64_t v12 = v19;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    uint64_t v13 = *(void *)(v12 + 56);
    uint64_t v14 = sub_100002274((uint64_t *)&unk_1004050D0);
    uint64_t v15 = *(void *)(v14 - 8);
    sub_1000225A4(v13 + *(void *)(v15 + 72) * v9, a3);
    sub_10013BAB0(v9, v12);
    uint64_t v16 = *v4;
    *char v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = sub_100002274((uint64_t *)&unk_1004050D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a3,  1LL,  1LL,  v18);
  }

_OWORD *sub_10001EDDC(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = sub_10001C958( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_100002AC4(v19);
        return sub_100022594(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10013C320();
      goto LABEL_7;
    }

    sub_10013698C(v15, a4 & 1);
    uint64_t v21 = sub_10001C958( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10013DF74(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10001EF2C(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C214(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }

    goto LABEL_11;
  }

  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10013C504();
    goto LABEL_7;
  }

  sub_100136C88(v13, a3 & 1);
  unint64_t v18 = sub_10001C214(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.PTR);
    __break(1u);
    return;
  }

  unint64_t v10 = v18;
  char v16 = *v4;
  if ((v14 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  __int128 v20 = *(_OWORD *)(a2 + 16);
  __int128 v23 = *(_OWORD *)a2;
  __int128 v21 = v20;
  __int16 v22 = *(_WORD *)(a2 + 32);
  sub_10013DFDC(v10, a2, a1, v16);
  sub_1000209DC((uint64_t)&v23);
  sub_1000209DC((uint64_t)&v21);
}

void sub_10001F05C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10001C214(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;

      *(void *)uint64_t v19 = a1;
      *(_BYTE *)(v19 + 8) = a2 & 1;
      return;
    }

    goto LABEL_11;
  }

  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10013C6E0();
    goto LABEL_7;
  }

  sub_100136EC0(v15, a4 & 1);
  unint64_t v20 = sub_10001C214(a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.PTR);
    __break(1u);
    return;
  }

  unint64_t v12 = v20;
  unint64_t v18 = *v5;
  if ((v16 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  __int128 v22 = *(_OWORD *)(a3 + 16);
  __int128 v25 = *(_OWORD *)a3;
  __int128 v23 = v22;
  __int16 v24 = *(_WORD *)(a3 + 32);
  sub_10013E034(v12, a3, a1, a2 & 1, v18);
  sub_1000209DC((uint64_t)&v25);
  sub_1000209DC((uint64_t)&v23);
}

_OWORD *sub_10001F19C(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10001C320(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        char v21 = (void *)(v20[7] + 32 * v14);
        sub_100002AC4(v21);
        return sub_100022594(a1, v21);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10013CAF4();
      goto LABEL_7;
    }

    sub_10013746C(v17, a3 & 1);
    unint64_t v23 = sub_10001C320(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10013E094(v14, (uint64_t)v11, a1, v20);
    }
  }

  double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10001F318(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  sub_10001C370(a4);
  unint64_t v15 = v14;
  uint64_t v16 = v12[2];
  BOOL v17 = (v13 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }

  else
  {
    char v19 = v13;
    uint64_t v20 = v12[3];
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      char v21 = *v6;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        uint64_t v22 = v21[7] + 24 * v15;
        uint64_t v23 = *(void *)(v22 + 16);

        uint64_t result = swift_bridgeObjectRelease(v23);
        *(void *)uint64_t v22 = a1;
        *(void *)(v22 + 8) = a2;
        *(void *)(v22 + 16) = a3;
        return result;
      }

      return sub_10013E134(v15, a4, a1, a2, a3, v21);
    }

    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_10013CD30();
      goto LABEL_7;
    }

    sub_1001377F0(v18, a5 & 1);
    sub_10001C370(a4);
    if ((v19 & 1) == (v26 & 1))
    {
      unint64_t v15 = v25;
      char v21 = *v6;
      if ((v19 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E134(v15, a4, a1, a2, a3, v21);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiInterfaceRole);
  __break(1u);
  return result;
}

uint64_t sub_10001F45C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10001C958( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t result = swift_release(*(void *)(v19 + 8 * v12));
        *(void *)(v19 + 8 * v12) = a1;
        return result;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10013CEE8();
      goto LABEL_7;
    }

    sub_100137BC0(v15, a4 & 1);
    uint64_t v21 = sub_10001C958( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10013E184(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_10001F5A8(_OWORD *a1, void *a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10001C470((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        char v16 = (void *)(v15[7] + 32 * v9);
        sub_100002AC4(v16);
        return sub_100022594(a1, v16);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10013D09C();
      goto LABEL_7;
    }

    sub_100137ED4(v12, a3 & 1);
    unint64_t v18 = sub_10001C470((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10013E188(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  type metadata accessor for CFString(0LL);
  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_10001F6C8(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10001C578(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      return sub_10002266C( a1,  v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14,  type metadata accessor for LongTermPairingKeys.PublicIdentity);
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10013D4AC();
    goto LABEL_7;
  }

  sub_1001388B8(v17, a3 & 1);
  unint64_t v24 = sub_10001C578(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10013E288(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10001F838(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10001C5E4(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
        uint64_t result = swift_release(v19[1]);
        uint64_t *v19 = a1;
        v19[1] = a2;
        return result;
      }

      return sub_10013E340(v12, a3, a1, a2, v18);
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10013D774();
      goto LABEL_7;
    }

    sub_100138CD4(v15, a4 & 1);
    unint64_t v21 = sub_10001C5E4(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E340(v12, a3, a1, a2, v18);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_10001F954(uint64_t a1, char a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C01C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
        return sub_10002266C( a1,  v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v10,  type metadata accessor for NANGenericServiceProtocol.Attribute);
      }

      return sub_10013E388(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013C8CC();
      goto LABEL_7;
    }

    sub_100137118(v13, a3 & 1);
    unint64_t v20 = sub_10001C01C(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E388(v10, a2, a1, v16);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANGenericServiceProtocol.AttributeID);
  __break(1u);
  return result;
}

_OWORD *sub_10001FA7C(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  char v7 = a2 & 1;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C614(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100002AC4(v17);
        return sub_100022594(a1, v17);
      }

      return sub_10013E414(v10, v7, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013DD6C();
      goto LABEL_7;
    }

    sub_10013953C(v13, a3 & 1);
    unint64_t v19 = sub_10001C614(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E414(v10, v7, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.ServiceRejection.Key);
  __break(1u);
  return result;
}

_OWORD *sub_10001FB94(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C6C0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100002AC4(v17);
        return sub_100022594(a1, v17);
      }

      return sub_10013E418(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013DD78();
      goto LABEL_7;
    }

    sub_10013987C(v13, a3 & 1);
    uint64_t v19 = sub_10001C6C0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E418(v10, a2, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.TrafficRegistrationStart.Key);
  __break(1u);
  return result;
}

_OWORD *sub_10001FCAC(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C6F0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100002AC4(v17);
        return sub_100022594(a1, v17);
      }

      return sub_10013E418(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013DD84();
      goto LABEL_7;
    }

    sub_100139C3C(v13, a3 & 1);
    unint64_t v19 = sub_10001C6F0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E418(v10, a2, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.TrafficRegistrationStop.Key);
  __break(1u);
  return result;
}

_OWORD *sub_10001FDC4(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  char v7 = a2 & 1;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C7AC(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100002AC4(v17);
        return sub_100022594(a1, v17);
      }

      return sub_10013E414(v10, v7, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013DD90();
      goto LABEL_7;
    }

    sub_100139F88(v13, a3 & 1);
    unint64_t v19 = sub_10001C7AC(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E414(v10, v7, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.Failure.Key);
  __break(1u);
  return result;
}

_OWORD *sub_10001FEDC(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C8BC(a2, (uint64_t (*)(uint64_t))sub_10014D60C);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100002AC4(v17);
        return sub_100022594(a1, v17);
      }

      return sub_10013E418(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013DF50();
      goto LABEL_7;
    }

    sub_10013A2AC(v13, a3 & 1);
    unint64_t v19 = sub_10001C8BC(a2, (uint64_t (*)(uint64_t))sub_10014D60C);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E418(v10, a2, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.LowLatencyStatistics.Key);
  __break(1u);
  return result;
}

_OWORD *sub_100020004(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C83C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100002AC4(v17);
        return sub_100022594(a1, v17);
      }

      return sub_10013E418(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013DF5C();
      goto LABEL_7;
    }

    sub_10013A2C0(v13, a3 & 1);
    uint64_t v19 = sub_10001C83C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E418(v10, a2, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.AirPlayStatistics.Key);
  __break(1u);
  return result;
}

_OWORD *sub_10002011C(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10001C8BC(a2, (uint64_t (*)(uint64_t))sub_10018A6BC);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100002AC4(v17);
        return sub_100022594(a1, v17);
      }

      return sub_10013E418(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10013DF68();
      goto LABEL_7;
    }

    sub_10013A2D4(v13, a3 & 1);
    unint64_t v19 = sub_10001C8BC(a2, (uint64_t (*)(uint64_t))sub_10018A6BC);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10013E418(v10, a2, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANCoreAnalyticsMetrics.Key);
  __break(1u);
  return result;
}

void sub_100020244(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10001C958( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];

        *(void *)(v19 + 8 * v12) = a1;
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10013DBBC();
      goto LABEL_7;
    }

    sub_100139230(v15, a4 & 1);
    uint64_t v20 = sub_10001C958( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10013E184(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100020390@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v5 = v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v4);
  if ((result & 1) == 0)
  {
    uint64_t v22 = *v4;
    *char v4 = 0x8000000000000000LL;
    sub_10013C6E0();
    uint64_t v11 = *v4;
    *char v4 = v22;
    uint64_t result = swift_bridgeObjectRelease(v11);
  }

  if ((a2 & 0x8000000000000000LL) != 0 || (uint64_t v12 = *v4, 1LL << *(_BYTE *)(*v5 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (((*(void *)(v12 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (*(_DWORD *)(v12 + 36) == a3)
  {
    uint64_t *v5 = 0x8000000000000000LL;
    uint64_t v13 = *(void *)(v12 + 48) + 40 * a2;
    __int128 v21 = *(_OWORD *)v13;
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = *(void *)(v13 + 24);
    char v16 = *(_BYTE *)(v13 + 32);
    char v17 = *(_BYTE *)(v13 + 33);
    uint64_t v18 = *(void *)(v12 + 56) + 16 * a2;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    *(void *)a1 = v19;
    *(_BYTE *)(a1 + 8) = v18;
    sub_10013AA98(a2, v12);
    uint64_t v20 = *v5;
    uint64_t *v5 = v12;
    uint64_t result = swift_bridgeObjectRelease(v20);
    *(_OWORD *)a4 = v21;
    *(void *)(a4 + 16) = v14;
    *(void *)(a4 + 24) = v15;
    *(_BYTE *)(a4 + 32) = v16;
    *(_BYTE *)(a4 + 33) = v17;
    return result;
  }

uint64_t sub_1000204CC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  char v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

unint64_t sub_100020554(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_100405120);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_100002274(&qword_100405128);
    unint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
    uint64_t v8 = (uint64_t)&v5[*(int *)(v2 + 48)];
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1000226B0(v9, (uint64_t)v5, &qword_100405120);
      char v11 = *v5;
      unint64_t result = sub_10001C01C(*v5);
      if ((v13 & 1) != 0) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(_BYTE *)(v7[6] + result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      unint64_t result = sub_100022628( v8,  v15 + *(void *)(*(void *)(v16 - 8) + 72LL) * v14,  type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1LL);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }

  return result;
}

unint64_t sub_1000206C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100002274((uint64_t *)&unk_100405100);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  char v6 = *(_BYTE *)(a1 + 48);
  unint64_t result = sub_10001C958( v5,  v4,  (void (*)(void *, uint64_t, uint64_t))&Character.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v4);
    return (unint64_t)v3;
  }

  uint64_t v9 = (_BYTE *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v4;
    *(_BYTE *)(v3[7] + result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v14 = v9 + 24;
    uint64_t v5 = *((void *)v9 - 2);
    uint64_t v15 = *((void *)v9 - 1);
    char v6 = *v9;
    swift_bridgeObjectRetain(v4);
    unint64_t result = sub_10001C958( v5,  v15,  (void (*)(void *, uint64_t, uint64_t))&Character.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10001C9D0);
    uint64_t v9 = v14;
    uint64_t v4 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000207F8(uint64_t a1)
{
  return sub_10000EC18(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_100020814(uint64_t *a1)
{
  return sub_10000ED24(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100020830(uint64_t a1)
{
  return sub_100010264(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10002084C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for BonjourResolver(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_100405080, (uint64_t)&nominal type descriptor for BonjourResolver);
}

uint64_t sub_1000208A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000208D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10002091C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return sub_1000208D8(a6, a7);
  }

  return result;
}

uint64_t type metadata accessor for BonjourAdvertiser(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_100404FC0, (uint64_t)&nominal type descriptor for BonjourAdvertiser);
}

uint64_t sub_10002097C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t sub_1000209AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

uint64_t sub_1000209DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100020A04(uint64_t a1)
{
  return a1;
}

uint64_t sub_100020A2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DNSRecords.SRV(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100020A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100404DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020AB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return sub_100020AFC(a6, a7);
  }

  return result;
}

uint64_t sub_100020AFC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100020B40(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000208D8(result, a2);
  }
  return result;
}

void sub_100020B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v5);
  __asm { BR              X10 }

uint64_t sub_100020BE4()
{
  uint64_t v7 = sub_10000AF70( (unint64_t *)&qword_100405138,  (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator,  (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v2, v7);
  if ((*(_BYTE *)(v6 - 65) & 1) == 0)
  {
    *(_OWORD *)(v6 - 112) = xmmword_100339900;
    do
    {
      char v8 = *(_BYTE *)(v6 - 66);
      uint64_t v9 = sub_100002274((uint64_t *)&unk_100405140);
      uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v6 - 112);
      *(void *)(v10 + 56) = &type metadata for UInt8;
      *(void *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      uint64_t v11 = String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v10);
      uint64_t v13 = v12;
      *(void *)(v6 - 96) = v3;
      *(void *)(v6 - 88) = v1;
      swift_bridgeObjectRetain(v1);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v1);
      swift_bridgeObjectRelease(v13);
      uint64_t v3 = *(void *)(v6 - 96);
      uint64_t v1 = *(void *)(v6 - 88);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v2, v7);
    }

    while (*(_BYTE *)(v6 - 65) != 1);
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 128) + 8LL))(v4, v2);
  return v3;
}

uint64_t sub_100020D60(uint64_t a1)
{
  return sub_100014434( a1,  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(unsigned __int8 *)(v1 + 64),  *(void *)(v1 + 16),  *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100020D8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100014648(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100020DAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100020DE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain(*(void *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_100020E14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100014090(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t type metadata accessor for BonjourBrowser(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_100404F28, (uint64_t)&nominal type descriptor for BonjourBrowser);
}

uint64_t sub_100020E48(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

id sub_100020E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (objc_class *)type metadata accessor for BonjourResolver(0LL);
  uint64_t v5 = objc_allocWithZone(v4);
  uint64_t v6 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  uint64_t v7 = type metadata accessor for DNSRecords.SRV(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  char v8 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  *char v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate] = 0LL;
  uint64_t v9 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  uint64_t v10 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
  __int128 v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a1;
  *((_OWORD *)v10 + 1) = v11;
  *((_WORD *)v10 + 16) = *(_WORD *)(a1 + 32);
  BOOL v12 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_logger];
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a2, v13);
  v17.receiver = v5;
  v17.super_class = v4;
  id v15 = objc_msgSendSuper2(&v17, "init");
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
  return v15;
}

uint64_t sub_100020FB0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100020FD4()
{
  return swift_deallocObject(v0, 82LL, 7LL);
}

uint64_t sub_100021008()
{
  return sub_100014238(v0[4], (uint64_t)(v0 + 5), v0[2], v0[3]);
}

uint64_t sub_100021018(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

void *sub_100021028(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  unint64_t v4 = a1[6];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_100020AFC(v3, v4);
  return a1;
}

void *sub_100021074(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[5];
  unint64_t v4 = a1[6];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_1000208D8(v3, v4);
  return a1;
}

uint64_t sub_1000210C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DNSRecords.SRV(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_100021104(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100021128()
{
  return swift_deallocObject(v0, 74LL, 7LL);
}

uint64_t sub_10002115C()
{
  return sub_1000171B0(v0[4], (uint64_t)(v0 + 5), v0[2], v0[3]);
}

uint64_t sub_10002116C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

uint64_t destroy for AWDLStatistics.AirPlayStatistics.Histograms(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for AWDLStatistics.AirPlayStatistics.Histograms(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Histograms( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for OffloadedServices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OffloadedServices);
}

uint64_t sub_100021374()
{
  return type metadata accessor for BonjourBrowser(0LL);
}

uint64_t sub_10002137C(uint64_t a1)
{
  v4[0] = &unk_1003396E0;
  v4[1] = &unk_1003396F8;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100021408()
{
  return type metadata accessor for BonjourAdvertiser(0LL);
}

void sub_100021410(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = "";
    v6[2] = &unk_100339750;
    sub_1000214AC(319LL);
    if (v5 <= 0x3F)
    {
      v6[3] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 4LL, v6, a1 + 80);
    }
  }

void sub_1000214AC(uint64_t a1)
{
  if (!qword_100404FD0)
  {
    uint64_t v2 = type metadata accessor for DNSRecords.SRV(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100404FD0);
    }
  }

uint64_t sub_100021500()
{
  return type metadata accessor for BonjourResolver(0LL);
}

void sub_100021508(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = "";
    sub_1000214AC(319LL);
    if (v5 <= 0x3F)
    {
      v6[2] = *(void *)(v4 - 8) + 64LL;
      v6[3] = &unk_100339790;
      void v6[4] = &unk_1003397A8;
      v6[5] = &unk_1003396F8;
      v6[6] = &unk_1003397C0;
      swift_updateClassMetadata2(a1, 256LL, 7LL, v6, a1 + 80);
    }
  }

uint64_t initializeBufferWithCopyOfBuffer for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  id v4 = v3;
  return a1;
}

void destroy for BonjourBrowser.DiscoveredPeer(id *a1)
{
}

uint64_t assignWithCopy for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t initializeWithTake for NANAttribute.ServiceDescriptor.ServiceFilterControl( uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptor.ServiceFilterControl( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BonjourBrowser.DiscoveredPeer()
{
  return &type metadata for BonjourBrowser.DiscoveredPeer;
}

unint64_t sub_100021730()
{
  unint64_t result = qword_100405090;
  if (!qword_100405090)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003397E8, &type metadata for BonjourBrowser.DiscoveredPeer);
    atomic_store(result, (unint64_t *)&qword_100405090);
  }

  return result;
}

unint64_t sub_100021774()
{
  unint64_t result = qword_100405DF0;
  if (!qword_100405DF0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100405DF0);
  }

  return result;
}

uint64_t sub_1000217B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a8);
  }

  return result;
}

void sub_1000217E0(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = sub_10006C094(a1);
  if ((v7 & 1) != 0) {
    goto LABEL_34;
  }
  if (*(_DWORD *)(v4 + 36) != v6) {
    goto LABEL_33;
  }
  uint64_t v8 = v5;
  uint64_t v9 = 1LL << *(_BYTE *)(v4 + 32);
  if (v5 != v9)
  {
    uint64_t v10 = v4 + 64;
    int v30 = v6;
    int v31 = v6;
    uint64_t v27 = v4 + 88;
    int v11 = v6;
    unsigned __int8 v28 = a2;
    uint64_t v33 = v4;
    uint64_t v32 = v4 + 64;
    do
    {
      if (v8 < 0 || v8 >= v9)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return;
      }

      if (v6 != v11) {
        goto LABEL_29;
      }
      unint64_t v13 = (unint64_t)v8 >> 6;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v8;
      uint64_t v15 = *(void *)(v14 + 8);
      uint64_t v16 = *(void *)(v14 + 24);
      objc_super v17 = *(void **)(*(void *)(v4 + 56) + 16 * v8);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      id v18 = v17;
      if ([v18 publishID] == a2)
      {
        sub_100021774();
        id v19 = [v18 publisherAddress];
        char v20 = static NSObject.== infix(_:_:)(v19, a3);

        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v15);

        a2 = v28;
        if ((v20 & 1) != 0) {
          return;
        }
      }

      else
      {

        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v15);
      }

      uint64_t v4 = v33;
      char v21 = *(_BYTE *)(v33 + 32);
      unint64_t v12 = 1LL << v21;
      if (v8 >= 1LL << v21) {
        goto LABEL_30;
      }
      uint64_t v10 = v32;
      uint64_t v22 = *(void *)(v32 + 8 * v13);
      if ((v22 & (1LL << v8)) == 0) {
        goto LABEL_31;
      }
      int v6 = v31;
      if (*(_DWORD *)(v33 + 36) != v31) {
        goto LABEL_32;
      }
      unint64_t v23 = v22 & (-2LL << (v8 & 0x3F));
      if (v23)
      {
        unint64_t v12 = __clz(__rbit64(v23)) | v8 & 0xFFFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = v13 + 1;
        unint64_t v25 = (v12 + 63) >> 6;
        if (v13 + 1 < v25)
        {
          unint64_t v26 = *(void *)(v32 + 8 * v24);
          if (!v26)
          {
            unint64_t v24 = v13 + 2;
            if (v13 + 2 >= v25) {
              goto LABEL_7;
            }
            unint64_t v26 = *(void *)(v32 + 8 * v24);
            if (!v26)
            {
              while (v25 - 3 != v13)
              {
                unint64_t v26 = *(void *)(v27 + 8 * v13++);
                if (v26)
                {
                  unint64_t v24 = v13 + 2;
                  goto LABEL_22;
                }
              }

              goto LABEL_7;
            }
          }

LABEL_22:
          unint64_t v12 = __clz(__rbit64(v26)) + (v24 << 6);
        }
      }

    unint64_t v23 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
    uint64_t v14 = v104;
    v28(v104, v102, a3);
    unint64_t v44 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    unint64_t v45 = v101;
    v28(v101, (uint64_t)v14, a3);
    if ((v44 & 1) == 0)
    {
      v30(v45, a3);
      uint64_t v27 = v103;
      goto LABEL_28;
    }

    uint64_t v46 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v30(v45, a3);
    uint64_t v27 = v103;
    if (v46 <= 64) {
      goto LABEL_28;
    }
    uint64_t v47 = v96;
    v28(v96, (uint64_t)v14, a3);
    uint64_t v107 = 0x8000000000000000LL;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
      {
        uint64_t v76 = sub_100024970();
        uint64_t v77 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v76, a3, v6);
        id v78 = v47;
        char v20 = dispatch thunk of static Comparable.< infix(_:_:)(v47, v77, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v30(v77, a3);
        v30(v78, a3);
        if ((v20 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_62;
      }

      unint64_t v48 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      uint64_t v49 = v47;
      char v20 = v48;
      uint64_t v50 = v49;
      goto LABEL_61;
    }

    uint64_t v71 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v71 & 1) == 0) {
      break;
    }
    if (v72 <= 64)
    {
      uint64_t v84 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v94,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      __int128 v86 = v93;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v84,  AssociatedConformanceWitness);
      uint64_t v87 = v98;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v86, a3, v94);
      uint64_t v88 = v96;
      LODWORD(v105) = dispatch thunk of static Comparable.< infix(_:_:)( v96,  v87,  a3,  *(void *)(*(void *)(v6 + 32) + 8LL));
      v30(v87, a3);
      unint64_t v57 = (uint64_t)v91;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v91, v88, a3);
      unint64_t v89 = v107;
      char v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30((char *)v57, a3);
      if (v20 >= v89) {
        goto LABEL_28;
      }
    }

    else
    {
      uint64_t v73 = sub_100024970();
      unint64_t v74 = v98;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v73, a3, v6);
      char v20 = (uint64_t)v96;
      id v75 = dispatch thunk of static Comparable.< infix(_:_:)(v96, v74, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v30(v74, a3);
      v30((char *)v20, a3);
      if ((v75 & 1) == 0) {
        goto LABEL_28;
      }
    }

    uint64_t v36 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v44(v41, a3);
    char v20 = v118;
    v42(v118, v116, a3);
    char v58 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v59 = v115;
    v42(v115, (uint64_t)v20, a3);
    if ((v58 & 1) == 0)
    {
      v44(v59, a3);
      char v41 = v117;
      goto LABEL_28;
    }

    uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v44(v59, a3);
    char v41 = v117;
    if (v60 <= 64) {
      goto LABEL_28;
    }
    uint64_t v61 = v110;
    v42(v110, (uint64_t)v20, a3);
    Class v121 = 0x8000000000000000LL;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
      {
        id v90 = sub_100024970();
        os_log_t v91 = v112;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v121, &type metadata for Int, v90, a3, v6);
        uint64_t v92 = v61;
        int v31 = dispatch thunk of static Comparable.< infix(_:_:)(v61, v91, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v44(v91, a3);
        v44(v92, a3);
        if ((v31 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_62;
      }

      unint64_t v62 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      __int128 v63 = v61;
      int v31 = v62;
      NSData v64 = v63;
      goto LABEL_61;
    }

    uint64_t v85 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    __int128 v86 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v85 & 1) == 0) {
      break;
    }
    if (v86 <= 64)
    {
      unint64_t v98 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v108,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      unint64_t v100 = v107;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v98,  AssociatedConformanceWitness);
      uint64_t v101 = v112;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v100, a3, v108);
      uint64_t v102 = v110;
      LODWORD(v119) = dispatch thunk of static Comparable.< infix(_:_:)( v110,  v101,  a3,  *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v101, a3);
      uint64_t v71 = (uint64_t)v105;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v105, v102, a3);
      Swift::String v103 = v121;
      int v31 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v44((char *)v71, a3);
      if (v31 >= v103) {
        goto LABEL_28;
      }
    }

    else
    {
      uint64_t v87 = sub_100024970();
      uint64_t v88 = v112;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v121, &type metadata for Int, v87, a3, v6);
      int v31 = (uint64_t)v110;
      unint64_t v89 = dispatch thunk of static Comparable.< infix(_:_:)(v110, v88, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v88, a3);
      v44((char *)v31, a3);
      if ((v89 & 1) == 0) {
        goto LABEL_28;
      }
    }

    uint64_t v8 = (v25 - 1) & v25;
    unint64_t v12 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_5:
    unint64_t v13 = 16 * v12;
    uint64_t v14 = (uint64_t *)(*(void *)(a3 + 48) + v13);
    uint64_t v15 = *v14;
    uint64_t v16 = (void *)v14[1];
    objc_super v17 = (uint64_t *)(*(void *)(a3 + 56) + v13);
    id v19 = *v17;
    id v18 = (void *)v17[1];
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(a2);
    v20._countAndFlagsBits = v15;
    v20._object = v16;
    String.append(_:)(v20);
    swift_bridgeObjectRetain(a2);
    v21._countAndFlagsBits = 61LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRetain(a2);
    v22._countAndFlagsBits = v19;
    v22._object = v18;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRetain(a2);
    v23._countAndFlagsBits = 38LL;
    v23._object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v16);
    uint64_t result = swift_bridgeObjectRelease(a2);
  }

  unint64_t v26 = v24 + 4;
  if (v26 >= v28)
  {
LABEL_23:
    swift_release(a3);
    return a1;
  }

  unint64_t v25 = *(void *)(v27 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v27 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }

  swift_beginAccess(&v16, v17, 0LL, 0LL);
  return v16;
}

  swift_beginAccess(&v28, v29, 0LL, 0LL);
  return v28;
}

    int v11 = (v17 - 1) & v17;
    uint64_t v14 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_5:
    sub_100057FE8( *(void *)(a1 + 48) + *(void *)(v3 + 72) * v14,  (uint64_t)v7,  type metadata accessor for AWDLPeer.AdvertisedService);
    sub_100022628((uint64_t)v7, (uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    uint64_t v15 = *v5;
    type metadata accessor for AWDLPeer(0LL);
    sub_10013F868(v15);
    sub_10005802C((uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
  }

  id v18 = v16 + 4;
  if (v18 >= v21)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  objc_super v17 = *(void *)(v20 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v21) {
      goto LABEL_23;
    }
    objc_super v17 = *(void *)(v20 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }

    if (v95 == v92) {
      break;
    }
    uint64_t v92 = (__CFString *)((char *)v92 + 1);
  }

  swift_bridgeObjectRelease(countAndFlagsBits);
  uint64_t v147 = v458;
  uint64_t v148 = v472;
  uint64_t v149 = v477;
  uint64_t v150 = v476;
  if ((v414 & 1) != 0) {
    goto LABEL_56;
  }
LABEL_64:
  while (2)
  {
    v173 = v451;
    sub_1000226B0(v147, (uint64_t)v451, &qword_100408AE0);
    v445 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v481 + 48);
    if (v445(v173, 1LL, v471) != 1)
    {
      uint64_t v174 = (uint64_t)v173;
      uint64_t v175 = v455;
      sub_100022628(v174, (uint64_t)v455, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
      uint64_t v176 = (uint64_t)v453;
      v481 = *(void *)(v149 + 16);
      ((void (*)(CFStringRef, CFStringRef, uint64_t))v481)(v453, v175, v486);
      uint64_t v177 = v487[0];
      if (*(void *)(v487[0] + 16LL))
      {
        uint64_t v178 = sub_10001C578(v176);
        uint64_t v179 = v450;
        if ((v180 & 1) != 0)
        {
          uint64_t v181 = *(void *)(v177 + 56);
          uint64_t v182 = v478;
          uint64_t v183 = v452;
          sub_100057FE8( v181 + *(void *)(v478 + 72) * v178,  v452,  type metadata accessor for LongTermPairingKeys.PublicIdentity);
          uint64_t v184 = 0LL;
          goto LABEL_72;
        }

        uint64_t v184 = 1LL;
        uint64_t v182 = v478;
      }

      else
      {
        uint64_t v184 = 1LL;
        uint64_t v182 = v478;
        uint64_t v179 = v450;
      }

      uint64_t v183 = v452;
LABEL_72:
      __int16 v185 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v182 + 56);
      uint64_t v186 = v183;
      uint64_t v187 = v182;
      uint64_t v188 = v482;
      v185(v186, v184, 1LL, v482);
      uint64_t v189 = *(__CFString **)(v149 + 8);
      ((void (*)(CFStringRef, uint64_t))v189)(v453, v486);
      uint64_t v190 = *(uint64_t (**)(void, uint64_t, uint64_t))(v187 + 48);
      uint64_t v191 = v452;
      unint64_t v192 = v190(v452, 1LL, v188);
      v480 = v189;
      if (v192 == 1)
      {
        sub_1000225EC(v191, &qword_100408AA8);
        __int128 v193 = v459;
        uint64_t v194 = swift_bridgeObjectRetain_n(v459, 2LL);
        v195 = (os_log_s *)Logger.logObject.getter(v194);
        uint64_t v196 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v195, v196))
        {
          uint64_t v197 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v198 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)uint64_t v197 = 136315138;
          v495._countAndFlagsBits = v198;
          *(void *)&v488 = 39LL;
          *((void *)&v488 + 1) = 0xE100000000000000LL;
          swift_bridgeObjectRetain(v459);
          v199._countAndFlagsBits = v468;
          v199._object = v459;
          String.append(_:)(v199);
          v200._countAndFlagsBits = 39LL;
          v200._object = (void *)0xE100000000000000LL;
          String.append(_:)(v200);
          swift_bridgeObjectRelease(v459);
          v201 = *((void *)&v488 + 1);
          *(void *)&v488 = sub_10000235C(v488, *((unint64_t *)&v488 + 1), &v495._countAndFlagsBits);
          __int128 v193 = v459;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, (char *)&v488 + 8);
          swift_bridgeObjectRelease_n(v193, 2LL);
          swift_bridgeObjectRelease(v201);
          _os_log_impl( (void *)&_mh_execute_header,  v195,  v196,  "Detected public identity is missing from the keychain for %s attempting to re-insert",  v197,  0xCu);
          swift_arrayDestroy(v198, 1LL, &type metadata for Any[8]);
          uint64_t v202 = v198;
          uint64_t v149 = v477;
          swift_slowDealloc(v202, -1LL, -1LL);
          swift_slowDealloc(v197, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v193, 2LL);
        }

        uint64_t v207 = v455;
        v208 = (uint64_t)v447;
        uint64_t v209 = v486;
        ((void (*)(char *, CFStringRef, uint64_t))v481)(v447, v455, v486);
        int v210 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0LL) + 20);
        uint64_t v211 = (char *)v207 + v210;
        uint64_t v212 = v208 + v210;
        char v213 = type metadata accessor for SymmetricKey(0LL);
        uint64_t v214 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v213 - 8) + 16LL))(v212, v211, v213);
        int v215 = v471;
        uint64_t v216 = v482;
        P256.Signing.PrivateKey.publicKey.getter(v214);
        v217 = (void *)(v208 + *(int *)(v216 + 24));
        char *v217 = 0LL;
        v217[1] = 0LL;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v484 + 56))( v208 + *(int *)(v216 + 28),  1LL,  1LL,  v479);
        LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 16) = AppleKeychain.save(identity:for:publicly:)(v208, v468, (uint64_t)v193, 1);
        sub_10005802C(v208, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        if ((v216 & 1) == 0)
        {
          AppleKeychain.remove(identity:for:)((uint64_t)v207, v468, v193);
          uint64_t v218 = v458;
          sub_1000225EC(v458, &qword_100408AE0);
          v418(v218, 1LL, 1LL, v215);
        }

        unint64_t v98 = v484;
        uint64_t v150 = v476;
LABEL_81:
        v219 = (uint64_t)v449;
        uint64_t v220 = (uint64_t)v450;
LABEL_87:
        uint64_t v261 = v455;
        ((void (*)(uint64_t, CFStringRef, uint64_t))v481)(v219, v455, v209);
        sub_10001EAC8(v219, v220);
        ((void (*)(uint64_t, uint64_t))v480)(v219, v209);
        sub_1000225EC(v220, &qword_100408AA8);
        sub_10005802C((uint64_t)v261, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
        goto LABEL_88;
      }

      uint64_t v203 = v191;
      int v204 = v446;
      sub_100022628(v203, v446, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      uint64_t v205 = v204 + *(int *)(v188 + 28);
      __int128 v206 = v443;
      sub_1000226B0(v205, v443, &qword_100408A80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v206, 1LL, v479) == 1)
      {
        sub_10005802C(v204, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_1000225EC(v206, &qword_100408A80);
      }

      else
      {
        uint64_t v221 = v442;
        (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v442, v206, v479);
        if (Date.timeIntervalSince(_:)(v221) > 5356800.0)
        {
          v415 = v93;
          uint64_t v222 = (__CFString *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger);
          uint64_t v223 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
          v224 = v436;
          uint64_t v225 = v479;
          v223(v436, v148, v479);
          uint64_t v226 = v437;
          v223(v437, (uint64_t)v221, v225);
          uint64_t v227 = v459;
          uint64_t v228 = swift_bridgeObjectRetain_n(v459, 2LL);
          v467 = v222;
          uint64_t v229 = (os_log_s *)Logger.logObject.getter(v228);
          uint64_t v230 = static os_log_type_t.default.getter();
          uint64_t v231 = v230;
          if (os_log_type_enabled(v229, v230))
          {
            unint64_t v232 = swift_slowAlloc(22LL, -1LL);
            v457 = (char *)swift_slowAlloc(64LL, -1LL);
            v495._countAndFlagsBits = (uint64_t)v457;
            *(_DWORD *)unint64_t v232 = 136315394;
            *(void *)&v488 = 39LL;
            *((void *)&v488 + 1) = 0xE100000000000000LL;
            swift_bridgeObjectRetain(v227);
            LODWORD(v456) = v231;
            v233._countAndFlagsBits = v468;
            v233._object = v227;
            String.append(_:)(v233);
            v234._countAndFlagsBits = 39LL;
            v234._object = (void *)0xE100000000000000LL;
            String.append(_:)(v234);
            swift_bridgeObjectRelease(v227);
            uint64_t v235 = *((void *)&v488 + 1);
            *(void *)&v488 = sub_10000235C(v488, *((unint64_t *)&v488 + 1), &v495._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, (char *)&v488 + 8);
            swift_bridgeObjectRelease_n(v227, 2LL);
            swift_bridgeObjectRelease(v235);
            *(_WORD *)(v232 + 12) = 2080;
            v470 = (__CFString *)(v232 + 14);
            Date.timeIntervalSince(_:)(v226);
            v453 = (CFStringRef)static Duration.seconds(_:)(v236);
            *(void *)&v452 = v237;
            uint64_t v238 = sub_100002274(&qword_100408B00);
            uint64_t v239 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
            unint64_t v240 = *(void *)(v239 - 8);
            uint64_t v241 = *(void *)(v240 + 72);
            unint64_t v242 = *(unsigned __int8 *)(v240 + 80);
            v243 = (v242 + 32) & ~v242;
            uint64_t v244 = swift_allocObject(v238, v243 + 2 * v241, v242 | 7);
            *(_OWORD *)(v244 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10033B810;
            uint64_t v245 = v479;
            uint64_t v246 = static Duration.UnitsFormatStyle.Unit.days.getter();
            static Duration.UnitsFormatStyle.Unit.hours.getter(v246);
            uint64_t v247 = sub_100005098(v244);
            swift_setDeallocating(v244);
            swift_arrayDestroy(v244 + v243, 2LL, v239);
            v248 = swift_deallocClassInstance(v244, 32LL, 7LL);
            uint64_t v249 = v224;
            uint64_t v250 = v424;
            uint64_t v251 = static Duration.UnitsFormatStyle.UnitWidth.wide.getter(v248);
            v252 = v428;
            uint64_t v253 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v251);
            v254 = v433;
            static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v253);
            unint64_t v255 = v426;
            static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)( v247,  v250,  1LL,  0LL,  v252,  0LL,  1LL,  v254);
            swift_bridgeObjectRelease(v247);
            (*(void (**)(char *, uint64_t))(v434 + 8))(v254, v435);
            (*(void (**)(char *, uint64_t))(v430 + 8))(v252, v432);
            (*(void (**)(char *, uint64_t))(v425 + 8))(v250, v427);
            uint64_t v256 = sub_10000AF70( &qword_100408B08,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
            uint64_t v257 = v431;
            Duration.formatted<A>(_:)(&v488, v255, v453, v452, v431, v256);
            (*(void (**)(char *, uint64_t))(v429 + 8))(v255, v257);
            uint64_t v258 = *((void *)&v488 + 1);
            *(void *)&v488 = sub_10000235C(v488, *((unint64_t *)&v488 + 1), &v495._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, (char *)&v488 + 8);
            swift_bridgeObjectRelease(v258);
            uint64_t v259 = *(__CFString **)(v484 + 8);
            ((void (*)(char *, uint64_t))v259)(v249, v245);
            v470 = v259;
            ((void (*)(char *, uint64_t))v259)(v437, v245);
            _os_log_impl( (void *)&_mh_execute_header,  v229,  (os_log_type_t)v456,  "Last modified public identity for %s  %s ago in the keychain updating last modified timestamp",  (uint8_t *)v232,  0x16u);
            uint64_t v260 = v457;
            swift_arrayDestroy(v457, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v260, -1LL, -1LL);
            swift_slowDealloc(v232, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v227, 2LL);

            __int16 v367 = *(__CFString **)(v98 + 8);
            v368 = v479;
            ((void (*)(char *, uint64_t))v367)(v224, v479);
            v470 = v367;
            ((void (*)(char *, uint64_t))v367)(v226, v368);
          }

          __int16 v369 = v446;
          __int128 v370 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
          objc_super v372 = v371;
          __int128 v373 = *(void *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
          __int128 v374 = *(void *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
          __int128 v375 = *(void *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
          __int128 v376 = *(void *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
          v377 = UUID.uuidString.getter(v370);
          __int128 v379 = v378;
          __int16 v380 = v376;
          __int128 v381 = v459;
          __int128 v382 = sub_10012F750(v370, v372, v373, v374, v375, v380, v468, (uint64_t)v459, v377, v378, 1);
          sub_1000208D8(v370, v372);
          swift_bridgeObjectRelease(v379);
          __int16 v383 = swift_initStackObject(v463, &v491);
          *(_OWORD *)(v383 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
          *(void *)(v383 + 64) = v423;
          __int128 v384 = (__CFString *)v462;
          __int128 v385 = v454;
          *(void *)(v383 + 32) = v462;
          *(void *)(v383 + 40) = v385;
          swift_bridgeObjectRetain(v382);
          __int128 v386 = v384;
          __int128 v387 = v385;
          __int128 v388 = sub_10000D52C(v383);
          __int128 v389 = v415;
          __int16 v390 = sub_10012F6D4(v388, v382);
          v415 = v389;
          __int128 v391 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v390);
          __int16 v392 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v382);
          v393 = SecItemUpdate(v391, v392);

          if (v393)
          {
            v394 = swift_bridgeObjectRetain_n(v381, 2LL);
            v395 = (__CFString *)Logger.logObject.getter(v394);
            v396 = static os_log_type_t.error.getter();
            if (os_log_type_enabled((os_log_t)v395, (os_log_type_t)v396))
            {
              LODWORD(v457) = v396;
              v467 = v395;
              os_log_type_t v94 = (__CFString *)swift_slowAlloc(22LL, -1LL);
              v456 = (void *)swift_slowAlloc(64LL, -1LL);
              v495._countAndFlagsBits = (uint64_t)v456;
              LODWORD(v94->isa) = 136315394;
              *(void *)&v488 = 39LL;
              *((void *)&v488 + 1) = 0xE100000000000000LL;
              swift_bridgeObjectRetain(v381);
              v397._countAndFlagsBits = v468;
              v397._object = v381;
              String.append(_:)(v397);
              v398._countAndFlagsBits = 39LL;
              v398._object = (void *)0xE100000000000000LL;
              String.append(_:)(v398);
              swift_bridgeObjectRelease(v381);
              v399 = *((void *)&v488 + 1);
              *(void *)&v488 = sub_10000235C(v488, *((unint64_t *)&v488 + 1), &v495._countAndFlagsBits);
              uint64_t v87 = (char *)&v488 + 8;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, (char *)&v488 + 8);
              swift_bridgeObjectRelease_n(v381, 2LL);
              swift_bridgeObjectRelease(v399);
              WORD2(v94->info) = 2080;
              v400 = SecCopyErrorMessageString(v393, 0LL);
              uint64_t v93 = v415;
              if (v400)
              {
                v401 = (__CFString *)v400;
                v402 = static String._unconditionallyBridgeFromObjectiveC(_:)(v400);
                v404 = v403;

                uint64_t v149 = v477;
                uint64_t v150 = v476;
                uint64_t v220 = (uint64_t)v450;
              }

              else
              {
LABEL_167:
                v404 = 0xE700000000000000LL;
                uint64_t v149 = v477;
                uint64_t v150 = v476;
                uint64_t v220 = (uint64_t)v450;
                v402 = 0x6E776F6E6B6E75LL;
              }

              *(void *)&v488 = sub_10000235C(v402, v404, &v495._countAndFlagsBits);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v488, v87);
              swift_bridgeObjectRelease(v404);
              v406 = v467;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v467,  (os_log_type_t)v457,  "Failed to update the last modified timestamp of the public identity to the keychain for %s with error: %s",  (uint8_t *)v94,  0x16u);
              v407 = v456;
              swift_arrayDestroy(v456, 2LL, &type metadata for Any[8]);
              swift_slowDealloc(v407, -1LL, -1LL);
              swift_slowDealloc(v94, -1LL, -1LL);

              ((void (*)(char *, uint64_t))v470)(v442, v479);
              sub_10005802C(v446, type metadata accessor for LongTermPairingKeys.PublicIdentity);
              unint64_t v98 = v484;
              uint64_t v209 = v486;
              v219 = (uint64_t)v449;
              goto LABEL_87;
            }

            swift_bridgeObjectRelease_n(v381, 2LL);

            ((void (*)(char *, uint64_t))v470)(v442, v479);
            v405 = v446;
          }

          else
          {
            ((void (*)(char *, uint64_t))v470)(v442, v479);
            v405 = v369;
          }

          sub_10005802C(v405, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          unint64_t v98 = v484;
          uint64_t v209 = v486;
          uint64_t v149 = v477;
          uint64_t v150 = v476;
          uint64_t v93 = v415;
          goto LABEL_81;
        }

        (*(void (**)(char *, uint64_t))(v98 + 8))(v221, v479);
        sub_10005802C(v204, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      }

      uint64_t v209 = v486;
      v219 = (uint64_t)v449;
      uint64_t v220 = (uint64_t)v179;
      goto LABEL_87;
    }

    sub_1000225EC((uint64_t)v173, &qword_100408AE0);
LABEL_88:
    if (*(void *)(v487[0] + 16LL) < 0x65uLL) {
      goto LABEL_148;
    }
    v415 = v93;
    *(void *)&v488 = _swiftEmptyArrayStorage;
    v262 = *(void *)(v487[0] + 64LL);
    v450 = (char *)(v487[0] + 64LL);
    unint64_t v263 = 1LL << *(_BYTE *)(v487[0] + 32LL);
    uint64_t v264 = -1LL;
    if (v263 < 64) {
      uint64_t v264 = ~(-1LL << v263);
    }
    countAndFlagsBits = v264 & v262;
    v456 = (void *)(v465 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    unint64_t v265 = (unint64_t)(v263 + 63) >> 6;
    v455 = kSecAttrAccount;
    v453 = kSecAttrAccessGroup;
    v446 = v265 - 1;
    uint64_t v266 = (char *)swift_bridgeObjectRetain(v487[0]);
    uint64_t v93 = 0LL;
    v457 = (char *)v265;
    v449 = (char *)(v265 - 5);
    v467 = (__CFString *)v266;
    v447 = v266 + 104;
    uint64_t v96 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
    v452 = xmmword_10033E840;
    v451 = &type metadata for Any[8];
    os_log_type_t v94 = (__CFString *)&qword_100408A80;
    if (countAndFlagsBits)
    {
LABEL_92:
      unint64_t v267 = __clz(__rbit64(countAndFlagsBits));
      unint64_t v268 = (__CFString *)((countAndFlagsBits - 1) & countAndFlagsBits);
      __int128 v269 = v267 | (v93 << 6);
LABEL_93:
      uint64_t v270 = v467;
      (*(void (**)(char *, char *, uint64_t))(v149 + 16))( v150,  &v467[1].data[*(void *)(v149 + 72) * v269],  v486);
      uint64_t v271 = v270[1].length + *(void *)(v478 + 72) * v269;
      uint64_t v272 = sub_100002274(&qword_100408AF8);
      sub_100057FE8(v271, (uint64_t)&v150[*(int *)(v272 + 48)], v96);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v272 - 8) + 56LL))(v150, 0LL, 1LL, v272);
      unint64_t v98 = v484;
      goto LABEL_103;
    }

        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }

      uint64_t v16 = *(void *)(v5 + 48) + 40 * v12;
      id v18 = *(void *)v16;
      objc_super v17 = *(void *)(v16 + 8);
      id v19 = *(void *)(v16 + 16);
      char v20 = *(void *)(v16 + 24);
      char v21 = *(_BYTE *)(v16 + 32);
      uint64_t v22 = *(_BYTE *)(v16 + 33);
      unint64_t v23 = *(void **)(*(void *)(v5 + 56) + 8 * v12);
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRetain(*(void *)(v16 + 8));
        swift_bridgeObjectRetain(v20);
        unint64_t v24 = v23;
      }

      v31[0] = v18;
      v31[1] = v17;
      unint64_t v31[2] = v19;
      v31[3] = v20;
      uint64_t v32 = v21;
      uint64_t v33 = v22;
      sub_10013BEAC((uint64_t)v31, (uint64_t)v23, v30);
    }
  }

  swift_release(v5);
  void *v3 = v30;
}

        uint64_t v9 = (v14 - 1) & v14;
        uint64_t v36 = v15;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }

      objc_super v17 = *(void *)(v5 + 56);
      id v18 = v5;
      id v19 = *(void *)(v5 + 48) + 40 * v12;
      char v20 = *(void *)v19;
      char v21 = *(void *)(v19 + 8);
      unint64_t v23 = *(void *)(v19 + 16);
      uint64_t v22 = *(void *)(v19 + 24);
      unint64_t v24 = *(_BYTE *)(v19 + 32);
      unint64_t v25 = *(_BYTE *)(v19 + 33);
      unint64_t v26 = v17 + 16 * v12;
      uint64_t v27 = *(void **)v26;
      unsigned __int8 v28 = *(_BYTE *)(v26 + 8);
      if ((v34 & 1) == 0)
      {
        swift_bridgeObjectRetain(*(void *)(v19 + 8));
        swift_bridgeObjectRetain(v22);
        uint64_t v29 = v27;
      }

      v37[0] = v20;
      v37[1] = v21;
      void v37[2] = v23;
      v37[3] = v22;
      uint64_t v38 = v24;
      uint64_t v39 = v25;
      sub_10013C014((uint64_t)v37, (uint64_t)v27, v28, v35);
      uint64_t v5 = v18;
    }
  }

  swift_release(v5);
  void *v3 = v35;
}

        unint64_t v12 = (v18 - 1) & v18;
        uint64_t v15 = __clz(__rbit64(v18)) + (v13 << 6);
      }

      char v20 = *(void *)(v8 + 48) + 40 * v15;
      char v21 = *(void *)v20;
      uint64_t v22 = *(void *)(v20 + 8);
      unint64_t v24 = *(void *)(v20 + 16);
      unint64_t v23 = *(void *)(v20 + 24);
      unint64_t v25 = *(_BYTE *)(v20 + 32);
      unint64_t v26 = *(_BYTE *)(v20 + 33);
      uint64_t v27 = *(void *)(v8 + 56) + *(void *)(v33 + 72) * v15;
      if ((v34 & 1) != 0)
      {
        sub_1000586C0(v27, (uint64_t)v7, &qword_1004086B0);
      }

      else
      {
        sub_1000226B0(v27, (uint64_t)v7, &qword_1004086B0);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
      }

      v36[0] = v21;
      v36[1] = v22;
      v36[2] = v24;
      v36[3] = v23;
      uint64_t v37 = v25;
      uint64_t v38 = v26;
      sub_10013C190((uint64_t)v36, (uint64_t)v7, v35);
    }
  }

  swift_release(v8);
LABEL_32:
  void *v3 = v35;
}

    unint64_t v13 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 16 * v15;
    objc_super v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v15);
    id v19 = *v17;
    id v18 = v17[1];
    char v20 = *(void *)(v28 + 72) * v15;
    sub_1000226B0(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&unk_1004050D0);
    char v21 = (void *)(*(void *)(v7 + 48) + v16);
    *char v21 = v19;
    v21[1] = v18;
    sub_1000586C0((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t *)&unk_1004050D0);
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v25;
    goto LABEL_25;
  }

  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    uint64_t v10 = v24;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }

    uint64_t v14 = (v25 - 1) & v25;
    char v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    uint64_t v22 = *(void *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(void *)(v21 + 48) + v22, v15);
    unint64_t v23 = *(void *)(v36 + 72) * v20;
    sub_100057FE8(*(void *)(v21 + 56) + v23, v17, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(i + 48) + v22, v16, v15);
  }

  unint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v37);
    uint64_t v27 = v30;
    unsigned __int8 v28 = v38;
    goto LABEL_25;
  }

  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int v11 = v26;
    goto LABEL_22;
  }

  while (1)
  {
    int v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }

    uint64_t v40 = (v27 - 1) & v27;
    char v41 = v28;
    unint64_t v13 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    uint64_t v15 = 40 * v13;
    uint64_t v16 = *(void *)(v14 + 48) + 40 * v13;
    id v18 = *(void *)v16;
    objc_super v17 = *(void *)(v16 + 8);
    id v19 = *(void *)(v16 + 16);
    char v20 = *(void *)(v16 + 24);
    char v21 = *(_BYTE *)(v16 + 32);
    uint64_t v22 = *(_BYTE *)(v16 + 33);
    unint64_t v23 = *(void *)(v37 + 72) * v13;
    sub_1000226B0(*(void *)(v14 + 56) + v23, v12, &qword_1004086B0);
    unint64_t v24 = v39;
    unint64_t v25 = *(void *)(v39 + 48) + v15;
    *(void *)unint64_t v25 = v18;
    *(void *)(v25 + 8) = v17;
    *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
    *(void *)(v25 + 24) = v20;
    *(_BYTE *)(v25 + 32) = v21;
    *(_BYTE *)(v25 + 33) = v22;
    sub_1000586C0(v12, *(void *)(v24 + 56) + v23, &qword_1004086B0);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    int v11 = v40;
    uint64_t v8 = v41;
  }

  uint64_t v29 = v8 + 3;
  if (v8 + 3 >= v35)
  {
LABEL_23:
    swift_release(v38);
    int v30 = v33;
    int v31 = v39;
    goto LABEL_25;
  }

  uint64_t v27 = *(void *)(v34 + 8 * v29);
  if (v27)
  {
    unsigned __int8 v28 = v8 + 3;
    goto LABEL_22;
  }

  while (1)
  {
    unsigned __int8 v28 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v28 >= v35) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v34 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }

    uint64_t v4 = (v9 - 1) & v9;
    for (unint64_t i = __clz(__rbit64(v9)) + (v5 << 6); ; unint64_t i = v6 | (v5 << 6))
    {
      int v11 = *(_BYTE *)(*(void *)(a1 + 48) + i);
      sub_100002AE4(*(void *)(a1 + 56) + 32 * i, (uint64_t)v20 + 8);
      LOBYTE(v20[0]) = v11;
      v18[0] = v20[0];
      v18[1] = v20[1];
      id v19 = v21;
      v16[0] = v11;
      sub_100002AE4((uint64_t)v18 + 8, (uint64_t)v17);
      unint64_t v12 = sub_100021774();
      if (swift_dynamicCast(&v22, v17, &type metadata for Any[8], v12, 6LL)) {
        __asm { BR              X9 }
      }

      v16[0] = v18[0];
      sub_100002AE4((uint64_t)v18 + 8, (uint64_t)v17);
      sub_1000225EC((uint64_t)v16, &qword_1004095B0);
      sub_1000225EC((uint64_t)v18, &qword_1004095B0);
      if (!v4) {
        break;
      }
LABEL_6:
      int v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
    }
  }

  uint64_t v10 = v8 + 4;
  if (v10 < v15)
  {
    uint64_t v9 = *(void *)(v14 + 8 * v10);
    if (!v9)
    {
      while (1)
      {
        uint64_t v5 = v10 + 1;
        if (__OFADD__(v10, 1LL)) {
          break;
        }
        if (v5 >= v15) {
          goto LABEL_25;
        }
        uint64_t v9 = *(void *)(v14 + 8 * v5);
        ++v10;
        if (v9) {
          goto LABEL_22;
        }
      }

      uint64_t v8 = *i;
      uint64_t v9 = *((void *)i + 1);
      uint64_t v10 = qword_1004043C0;
      swift_bridgeObjectRetain(v9);
      if (v10 != -1) {
        swift_once(&qword_1004043C0, sub_100187C0C);
      }
      int v11 = *((void *)off_10040A1B8 + 2);
      if (!v11) {
        goto LABEL_65;
      }
      unint64_t v12 = 0LL;
      break;
  }

  while (1)
  {
    unint64_t v13 = (char *)off_10040A1B8 + 16 * v12 + 32;
LABEL_26:
    if (++v12 == v11)
    {
LABEL_65:
      uint64_t v33 = sub_100112D2C(a1, v9);
      int v35 = v34;
      swift_bridgeObjectRelease(v9);
      uint64_t result = 0LL;
      if ((v35 & 1) != 0 || v33 >= 16) {
        return result;
      }
      if (v8 < 0x83)
      {
        LOBYTE(v36) = 0;
        if (v33 >= 0) {
          uint64_t v22 = 1LL << v33;
        }
        else {
          LODWORD(v22) = 0;
        }
        return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
      }

      if (a1 < 0x100)
      {
        LOBYTE(v36) = 0;
        LODWORD(v22) = a1;
        return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
      }

  uint64_t v33 = sub_1000033FC();
  os_log_type_t v34 = swift_allocError(&type metadata for WiFiError, v33, 0LL, 0LL);
  *(_OWORD *)int v35 = xmmword_10033A9D0;
  *(_BYTE *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  return swift_willThrow(v34);
}

  uint64_t v80 = v151;
  uint64_t v81 = dispatch thunk of BinaryInteger._lowWord.getter(v59, v67);
  v61(v80, v59);
  uint64_t v82 = v152[3];
  __int128 v83 = v152[4];
  sub_100021104(v152, v82);
  uint64_t v84 = dispatch thunk of Decoder.userInfo.getter(v82, v83);
  if (qword_100404158 != -1) {
    swift_once(&qword_100404158, sub_1000BD360);
  }
  uint64_t v85 = v139;
  __int128 v86 = sub_1000032DC(v139, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  uint64_t v87 = v138;
  uint64_t v88 = (uint64_t)v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v137, v86, v85);
  unint64_t v89 = v149;
  if (*(void *)(v84 + 16) && (id v90 = sub_10001C320(v88), (v91 & 1) != 0))
  {
    sub_100002AE4(*(void *)(v84 + 56) + 32 * v90, (uint64_t)&v153);
  }

  else
  {
    __int128 v153 = 0u;
    __int16 v154 = 0u;
  }

  swift_bridgeObjectRelease(v84);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v85);
  if (*((void *)&v154 + 1))
  {
    if ((swift_dynamicCast(&v161, &v153, &type metadata for Any[8], &type metadata for Bool, 6LL) & 1) != 0
      && v161 == 1)
    {
      if (__OFADD__(v81, 3LL))
      {
        __break(1u);
        JUMPOUT(0x1002045D4LL);
      }

      uint64_t v92 = v156;
      uint64_t v93 = v157;
      sub_1000237C8((uint64_t)v155, v156);
      UnkeyedDecodingContainer.decodeData(with:)((v81 + 3) & 0xFFFFFFFFFFFFFFFCLL, v92, v93);
      BOOL v95 = v148;
      uint64_t v96 = v150;
      uint64_t v149 = v89;
      uint64_t v97 = v128;
      if (!v89) {
        __asm { BR              X11 }
      }

      goto LABEL_36;
    }
  }

  else
  {
    sub_1000B2F2C((uint64_t)&v153);
  }

  unint64_t v98 = v156;
  unint64_t v99 = v157;
  sub_1000237C8((uint64_t)v155, v156);
  unint64_t v100 = UnkeyedDecodingContainer.decodeData(with:)(v81, v98, v99);
  BOOL v95 = v148;
  uint64_t v96 = v150;
  uint64_t v149 = v89;
  uint64_t v97 = v128;
  if (v89)
  {
LABEL_36:
    sub_100002AC4(v155);
    sub_100002AC4(v152);
    return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v96, v95);
  }

  uint64_t v102 = v135;
  Swift::String v103 = v126;
  uint64_t v104 = v127;
  char v105 = v150;
  uint64_t v106 = (uint64_t *)&v150[*(int *)(v126 + 84)];
  *uint64_t v106 = v100;
  v106[1] = v101;
  sub_100002AC4(v155);
  (*(void (**)(uint64_t, char *, uint64_t))(v104 + 16))(v102, v105, v103);
  sub_100002AC4(v152);
  return (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v105, v103);
}

    unint64_t v12 = (v31 - 1) & v31;
    NSData v64 = v32;
  }

  uint64_t v33 = v14 + 5;
  if (v14 + 5 >= v58)
  {
LABEL_29:
    swift_release(v62);
    return (uint64_t)v56;
  }

  int v31 = *(void *)(v57 + 8 * v33);
  if (v31)
  {
    uint64_t v32 = v14 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v32 >= v58) {
      goto LABEL_29;
    }
    int v31 = *(void *)(v57 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }

    unint64_t v12 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_5:
    objc_super v17 = v30;
    id v18 = *(void *)(v30 + 48);
    id v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))( v8,  v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v16,  v19);
    sub_10002084C(*(void *)(v17 + 56) + 40 * v16, (uint64_t)&v8[*(int *)(v3 + 48)]);
    sub_1000586C0((uint64_t)v8, (uint64_t)v6, &qword_10040DA48);
    char v20 = &v6[*(int *)(v3 + 48)];
    uint64_t v22 = *((void *)v20 + 3);
    char v21 = *((void *)v20 + 4);
    sub_100021104(v20, v22);
    (*(void (**)(uint64_t, ValueMetadata *, char **, uint64_t, uint64_t))(v21 + 8))( v29,  &type metadata for RadioResourceSchedule,  &off_10040D9F0,  v22,  v21);
    uint64_t result = sub_1000225EC((uint64_t)v6, &qword_10040DA48);
  }

  unint64_t v25 = v23 + 4;
  if (v25 >= v28) {
    return swift_release(v30);
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    uint64_t v14 = v25;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v14 >= v28) {
      return swift_release(v30);
    }
    unint64_t v24 = *(void *)(v27 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }

    sub_10007030C(v26, v59[1], v27);
    return swift_errorRelease();
  }

  return result;
}

    uint64_t v33 = (v23 - 1) & v23;
    os_log_type_t v34 = v24;
    uint64_t v10 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_5:
    int v11 = *(void *)(v32 + 56);
    unint64_t v12 = (unsigned __int8 *)(*(void *)(v32 + 48) + 6 * v10);
    unint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    uint64_t v16 = v12[3];
    objc_super v17 = v12[4];
    id v18 = v12[5];
    id v19 = v11 + *(void *)(*(void *)(type metadata accessor for AWDLPeer(0LL) - 8) + 72LL) * v10;
    char v20 = v29;
    char v21 = (uint64_t)&v29[*(int *)(v30 + 48)];
    sub_100057FE8(v19, v21, type metadata accessor for AWDLPeer);
    *char v20 = v13;
    v20[1] = v14;
    v20[2] = v15;
    v20[3] = v16;
    v20[4] = v17;
    v20[5] = v18;
    v31(v13 | (v14 << 8) | (v15 << 16) | (v16 << 24) | (v17 << 32) | (v18 << 40), v21);
    uint64_t result = sub_1000225EC((uint64_t)v20, &qword_10040D7B0);
    uint64_t v9 = v34;
    char v7 = v33;
  }

  unint64_t v25 = v9 + 5;
  if (v9 + 5 >= v28) {
    return swift_release(v32);
  }
  unint64_t v23 = *(void *)(v27 + 8 * v25);
  if (v23)
  {
    unint64_t v24 = v9 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v24 >= v28) {
      return swift_release(v32);
    }
    unint64_t v23 = *(void *)(v27 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_22;
    }
  }

    char v42 = (v31 - 1) & v31;
    uint64_t v43 = v32;
    unint64_t v13 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(v41 + 56);
    uint64_t v15 = *(void *)(v41 + 48) - v13 + 8 * v13;
    uint64_t v16 = *(_WORD *)(v15 + 4);
    objc_super v17 = *(_BYTE *)(v15 + 6);
    id v18 = v14
        + *(void *)(*(void *)(type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL) - 8) + 72LL)
        * v13;
    id v19 = v40;
    char v20 = (uint64_t)v38;
    LODWORD(v15) = *(_DWORD *)v15;
    sub_100057FE8( v18,  (uint64_t)&v38[*(int *)(v40 + 48)],  type metadata accessor for NANPeer.Service.AuthenticationStatus);
    *(_DWORD *)char v20 = v15;
    *(_WORD *)(v20 + 4) = v16;
    *(_BYTE *)(v20 + 6) = v17;
    sub_1000586C0(v20, (uint64_t)v5, &qword_10040D488);
    char v21 = *(int *)(v19 + 48);
    uint64_t v22 = v39;
    unint64_t v23 = (uint64_t)&v39[v21];
    unint64_t v24 = v5[1];
    unint64_t v25 = v5[2];
    unint64_t v26 = v5[3];
    uint64_t v27 = v5[4];
    unsigned __int8 v28 = v5[5];
    uint64_t v29 = v5[6];
    *uint64_t v39 = *v5;
    v22[1] = v24;
    v22[2] = v25;
    v22[3] = v26;
    v22[4] = v27;
    v22[5] = v28;
    v22[6] = v29;
    sub_100057FE8((uint64_t)&v5[v21], v23, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    sub_10032CF5C((uint64_t)v44, v24 | (v25 << 8) | (v26 << 16) | (v27 << 24) | (v28 << 32) | (v29 << 40));
    sub_10005802C(v23, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t result = sub_1000225EC((uint64_t)v5, &qword_10040D488);
    uint64_t v10 = v42;
  }

  uint64_t v33 = i + 5;
  if (i + 5 >= v36) {
    return swift_release(v41);
  }
  int v31 = *(void *)(v35 + 8 * v33);
  if (v31)
  {
    uint64_t v32 = i + 5;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v32 >= v36) {
      return swift_release(v41);
    }
    int v31 = *(void *)(v35 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }

        char v58 = (v28 - 1) & v28;
        uint64_t v59 = v29;
        unint64_t v25 = __clz(__rbit64(v28)) + (v29 << 6);
      }

      int v31 = v55;
      uint64_t v32 = v52;
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      v33(v14, v55[6] + *(void *)(v52 + 72) * v25, v11);
      os_log_type_t v34 = v31[7];
      unint64_t v57 = v25;
      int v35 = *(void **)(v34 + 8 * v25);
      v33(v10, (unint64_t)v14, v11);
      uint64_t v36 = *(int *)(v26 + 48);
      *(void *)&v10[v36] = v35;
      v33(v8, (unint64_t)v10, v11);
      *(void *)&v8[v36] = v35;
      uint64_t v37 = v35;
      LODWORD(v36) = objc_msgSend(v37, "publishID", v45);
      uint64_t v60 = *(void (**)(char *, uint64_t))(v32 + 8);
      v60(v8, v11);
      uint64_t v38 = v8;
      uint64_t v39 = *(int *)(v26 + 48);
      uint64_t v40 = (uint64_t)v10;
      char v41 = (uint64_t)v53;
      v33(v53, v40, v11);
      *(void *)(v41 + v39) = v37;
      char v42 = *(int *)(v26 + 48);
      v33(v38, v41, v11);
      *(void *)&v38[v42] = v37;
      uint64_t v43 = [v37 publisherAddress];
      sub_100058CD0(0LL, &qword_10040CDA0, &OBJC_CLASS___WiFiMACAddress_ptr);
      LOBYTE(v42) = static NSObject.== infix(_:_:)(v43, v50);
      sub_1000225EC(v41, &qword_10040F8B8);
      sub_1000225EC(v40, &qword_10040F8B8);

      unint64_t v44 = (uint64_t (*)(char *, uint64_t))v60;
      v60(v38, v11);

      uint64_t v14 = v51;
      uint64_t result = v44(v51, v11);
      uint64_t v8 = v38;
      uint64_t v10 = (char *)v40;
      uint64_t v22 = v58;
      uint64_t v16 = v59;
      if ((v42 & 1) == 0) {
        goto LABEL_5;
      }
    }

    sub_1000225EC(v41, &qword_10040F8B8);
    sub_1000225EC(v40, &qword_10040F8B8);

    uint64_t v14 = v51;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v60)(v51, v11);
    uint64_t v8 = v38;
    uint64_t v10 = (char *)v40;
    uint64_t v22 = v58;
    uint64_t v16 = v59;
LABEL_5:
    unint64_t v23 = v47;
    *(unint64_t *)((char *)v46 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v57;
    unint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v15 = v23 + 1;
    if (!v24) {
      continue;
    }
    break;
  }

    unint64_t v12 = (v22 - 1) & v22;
    uint64_t v14 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_9:
    uint64_t v15 = 6 * v14;
    uint64_t v16 = *(void *)(v4 + 48) + 6 * v14;
    objc_super v17 = *(_WORD *)(v16 + 4);
    id v18 = *(void *)(v27 + 72) * v14;
    id v19 = *(_DWORD *)v16;
    sub_1000226B0(*(void *)(v4 + 56) + v18, (uint64_t)v3, (uint64_t *)&unk_10040CC50);
    char v20 = *(void *)(v6 + 48) + v15;
    *(_DWORD *)char v20 = v19;
    *(_WORD *)(v20 + 4) = v17;
    uint64_t result = (void *)sub_1000586C0((uint64_t)v3, *(void *)(v6 + 56) + v18, (uint64_t *)&unk_10040CC50);
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v4);
    uint64_t v1 = v24;
    goto LABEL_25;
  }

  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }

        int v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        uint64_t v15 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19, *(void *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }

  unint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  unint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *unint64_t v24 = v8;
  v24[1] = a2;
  unint64_t v25 = *(void *)(v23 + 16);
  unint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
  }
  return result;
}

        uint64_t v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        uint64_t v14 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17, *(void *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }

LABEL_7:
      uint64_t v9 = 1LL << v21;
      uint64_t v8 = v12;
      int v11 = v30;
    }

    while (v12 != v9);
  }

    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }

  if (!v13)
  {
    swift_release(*(void *)(a1 + 64));
    goto LABEL_7;
  }

  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  swift_retain(v14);
  swift_release(v15);
  return a1;
}

    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }

  if (!v7)
  {
    swift_release(*(void *)(a1 + 64));
    goto LABEL_7;
  }

  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v9;
  swift_release(v10);
  return a1;
}

    swift_bridgeObjectRelease_n(a3, 2LL);
    goto LABEL_8;
  }

  uint64_t v9 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v8, v9)) {
    goto LABEL_7;
  }
  uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  int v11 = swift_slowAlloc(32LL, -1LL);
  *(_DWORD *)uint64_t v10 = 136315138;
  id v19 = 0xE100000000000000LL;
  char v20 = v11;
  swift_bridgeObjectRetain(a3);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 39LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(a3);
  id v18 = sub_10000235C(39LL, 0xE100000000000000LL, &v20);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
  swift_bridgeObjectRelease_n(a3, 2LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  uint64_t v14 = "Installed new pairing keys for %s";
LABEL_6:
  _os_log_impl((void *)&_mh_execute_header, v8, v9, v14, v10, 0xCu);
  swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v11, -1LL, -1LL);
  swift_slowDealloc(v10, -1LL, -1LL);
LABEL_8:

  return v6 & 1;
}

  __break(1u);
  return result;
}

  if (qword_1004040D8 == -1)
  {
    uint64_t v9 = BYTE3(v6);
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  swift_once(&qword_1004040D8, sub_10005DB90);
  uint64_t v9 = BYTE3(v6);
  if ((v4 & 0x2000000000000000LL) != 0)
  {
LABEL_9:
    uint64_t v10 = static WiFiDriverCapabilities.supportsDualBand;
    swift_beginAccess(&v16, v17, 33LL, 0LL);
    sub_10008F9D0(v10, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v17);
  }

  if (qword_1004040D8 == -1)
  {
    char v20 = BYTE3(v17);
    if ((v15 & 0x2000000000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  swift_once(&qword_1004040D8, sub_10005DB90);
  char v20 = BYTE3(v17);
  if ((v15 & 0x2000000000000000LL) != 0)
  {
LABEL_9:
    char v21 = static WiFiDriverCapabilities.supportsDualBand;
    swift_beginAccess(&v28, v29, 33LL, 0LL);
    sub_10008F9D0(v21, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v29);
  }

  unint64_t v12 = sub_100071694(8LL, 4LL, v4, v10);
  unint64_t v13 = v12;
  if ((v12 & 0x8000000000000000LL) != 0)
  {
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_26:
    __break(1u);
    return result;
  }

  if (v12 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_26;
  }

  uint64_t v32 = v8;
  uint64_t v33 = a1;
  uint64_t v14 = *((void *)v1 + 1);
  uint64_t v15 = *((void *)v1 + 2);
  uint64_t v16 = *((void *)v1 + 3);
  if (v16 >> 60 == 15)
  {
    LOWORD(v17) = TimeBitmap.nanBitmap.getter(0LL, 0x400uLL, 0LL);
    id v19 = v18;
    char v21 = v20;
  }

  else
  {
    objc_super v17 = *((void *)v1 + 1);
    id v19 = *((void *)v1 + 2);
    char v21 = *((void *)v1 + 3);
  }

  sub_100058430(v14, v15, v16);
  sub_1000A36C4(v17, v19, v21);
  sub_1000208D8(v19, v21);
  char v42 = *((_OWORD *)v1 + 2);
  uint64_t v43 = *((_BYTE *)v1 + 48);
  sub_1000586C0((uint64_t)&v42 + 8, (uint64_t)v44, &qword_100406B28);
  uint64_t result = sub_1000586C0((uint64_t)v44, (uint64_t)&v45, &qword_100406B28);
  if (v46 == 1 && *(void *)(v45 + 16))
  {
    unint64_t v23 = *(_BYTE *)(v45 + 32);
    unint64_t v24 = *(_WORD *)(v45 + 34);
    unint64_t v25 = *(_BYTE *)(v45 + 36);
    if ((*(_BYTE *)(v45 + 40) & 1) != 0) {
      unint64_t v26 = 0;
    }
    else {
      unint64_t v26 = *(_WORD *)(v45 + 38);
    }
    *(_BYTE *)uint64_t v33 = v32;
    *(_BYTE *)(v33 + 1) = (int)v11;
    *(_BYTE *)(v33 + 2) = v13;
    *(_WORD *)(v33 + 4) = v34;
    *(_OWORD *)(v33 + 6) = v35;
    *(_OWORD *)(v33 + 22) = v36;
    *(_OWORD *)(v33 + 38) = v37;
    *(_OWORD *)(v33 + 54) = v38;
    *(_BYTE *)(v33 + 70) = v39;
    *(_BYTE *)(v33 + 71) = v40;
    *(_BYTE *)(v33 + 72) = v41;
    *(_BYTE *)(v33 + 74) = v23;
    *(_BYTE *)(v33 + 75) = v25;
    *(_WORD *)(v33 + 76) = v24;
    *(_WORD *)(v33 + 78) = v26;
  }

  else
  {
    uint64_t v27 = sub_1000033FC();
    unsigned __int8 v28 = swift_allocError(&type metadata for WiFiError, v27, 0LL, 0LL);
    *(_OWORD *)uint64_t v29 = xmmword_10033A9D0;
    *(_BYTE *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    return swift_willThrow(v28);
  }

  return result;
}

  uint64_t v10 = 1;
  return v10 & 1;
}

  uint64_t v43 = sub_100002274(&qword_100408AB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))( v170,  1LL,  1LL,  v43);
}

    uint64_t v39 = *a2;
    uint64_t v40 = a2[2];
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v40;
    *(_OWORD *)a1 = v39;
    char v41 = a2[3];
    char v42 = a2[4];
    uint64_t v43 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v43;
    *(_OWORD *)(a1 + 48) = v41;
    *(_OWORD *)(a1 + 64) = v42;
    unint64_t v44 = a2[7];
    unint64_t v45 = a2[8];
    uint64_t v46 = a2[9];
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    *(_OWORD *)(a1 + 128) = v45;
    *(_OWORD *)(a1 + 144) = v46;
    *(_OWORD *)(a1 + 112) = v44;
    return a1;
  }

  if (v6 > 0x80000000)
  {
    sub_100057AC0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  v4,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(_BYTE *)(a1 + 160));
    goto LABEL_7;
  }

  char v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v10 = *((void *)a2 + 3);
  int v11 = *((void *)a2 + 5);
  unint64_t v12 = *((void *)a2 + 6);
  unint64_t v13 = *((void *)a2 + 7);
  unint64_t v48 = *((void *)a2 + 8);
  uint64_t v50 = *((void *)a2 + 9);
  uint64_t v52 = *((void *)a2 + 10);
  uint64_t v54 = *((void *)a2 + 11);
  uint64_t v56 = *((void *)a2 + 12);
  char v58 = *((void *)a2 + 13);
  uint64_t v60 = *((void *)a2 + 14);
  unint64_t v62 = *((void *)a2 + 15);
  NSData v64 = *((void *)a2 + 16);
  unint64_t v66 = *((void *)a2 + 17);
  uint64_t v68 = *((void *)a2 + 18);
  uint64_t v70 = *((void *)a2 + 19);
  uint64_t v14 = *((_BYTE *)a2 + 160);
  sub_100058250( *(void *)a2,  v8,  v9,  v10,  v5,  v11,  v12,  v13,  v48,  v50,  v52,  v54,  v56,  v58,  v60,  v62,  v64,  v66,  v68,  v70,  v14);
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  objc_super v17 = *(void *)(a1 + 16);
  id v18 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  id v19 = *(void *)(a1 + 32);
  char v20 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v11;
  char v21 = *(void *)(a1 + 48);
  uint64_t v22 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  unint64_t v23 = *(_OWORD *)(a1 + 64);
  unint64_t v24 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v48;
  *(void *)(a1 + 72) = v50;
  *(void *)(a1 + 80) = v52;
  *(void *)(a1 + 88) = v54;
  unint64_t v25 = *(_OWORD *)(a1 + 96);
  unint64_t v26 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v56;
  *(void *)(a1 + 104) = v58;
  *(void *)(a1 + 112) = v60;
  *(void *)(a1 + 120) = v62;
  uint64_t v27 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = v64;
  *(void *)(a1 + 136) = v66;
  unsigned __int8 v28 = *(void *)(a1 + 144);
  uint64_t v29 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v68;
  *(void *)(a1 + 152) = v70;
  int v30 = *(_BYTE *)(a1 + 160);
  *(_BYTE *)(a1 + 160) = v14;
  sub_100057AC0( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  *((uint64_t *)&v23 + 1),  v24,  *((unint64_t *)&v24 + 1),  v25,  *((unint64_t *)&v25 + 1),  v26,  *((unint64_t *)&v26 + 1),  v27,  *((uint64_t *)&v27 + 1),  v28,  v29,  v30);
  return a1;
}

    sub_10002255C(a1[3], a1[4]);
    sub_10002255C(v7, v8);
    sub_100020B40(v5, v6);
    sub_100020B40(v7, v8);
    return 0LL;
  }

  if (v8 >> 60 != 15) {
    goto LABEL_7;
  }
LABEL_9:
  int v11 = a1[6];
  unint64_t v12 = a2[6];
  if (v11)
  {
    if (v12)
    {
      unint64_t v13 = a1[5];
      uint64_t v14 = a2[5];
      if (v13 == v14 && v11 == v12) {
        return 1LL;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v13, v11, v14, v12, 0LL) & 1) != 0) {
        return 1LL;
      }
    }
  }

  else if (!v12)
  {
    return 1LL;
  }

  return 0LL;
}

    uint64_t v5 = *a2;
    int v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    sub_100002AC4((void *)a1);
    goto LABEL_7;
  }

  sub_10017BB8C((void *)a1, a2);
  return a1;
}

    sub_100058430(*a1, v5, v6);
    sub_100058430(v7, v8, v9);
    sub_100057CA0(v4, v5, v6);
    sub_100057CA0(v7, v8, v9);
    return 0LL;
  }

  if (v9 >> 60 != 15) {
    goto LABEL_7;
  }
LABEL_3:
  sub_1000586C0((uint64_t)(a1 + 3), (uint64_t)&v20, &qword_1004096B0);
  sub_1000586C0((uint64_t)(a2 + 3), (uint64_t)&v19, &qword_1004096B0);
  sub_1000586C0((uint64_t)&v20, (uint64_t)&v21, &qword_1004096B0);
  if ((v21 & 1) != 0)
  {
    sub_1000586C0((uint64_t)&v19, (uint64_t)&v23, &qword_1004096B0);
    if (v23 != 1) {
      return 0LL;
    }
  }

  else
  {
    sub_1000586C0((uint64_t)&v19, (uint64_t)&v22, &qword_1004096B0);
    if ((v22 & 1) != 0) {
      return 0LL;
    }
  }

  unint64_t v13 = a1[4];
  unint64_t v12 = a1[5];
  uint64_t v15 = a2[4];
  uint64_t v14 = a2[5];
  if (v12 >> 60 == 15)
  {
    if (v14 >> 60 == 15) {
      return 1LL;
    }
    goto LABEL_16;
  }

  if (v14 >> 60 == 15)
  {
LABEL_16:
    sub_10002255C(v13, v12);
    sub_10002255C(v15, v14);
    sub_100020B40(v13, v12);
    sub_100020B40(v15, v14);
    return 0LL;
  }

  sub_10002255C(v13, v12);
  sub_10002255C(v15, v14);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v12);
  objc_super v17 = v16;
  sub_100020B40(v15, v14);
  sub_100020B40(v13, v12);
  return (v17 & 1) != 0;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  int v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

    int v30 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v30 >= v58) {
      goto LABEL_29;
    }
    int v31 = *(void *)(v57 + 8 * v30);
    uint64_t v32 = v14 + 1;
    if (!v31)
    {
      uint64_t v32 = v14 + 2;
      if (v14 + 2 >= v58) {
        goto LABEL_29;
      }
      int v31 = *(void *)(v57 + 8 * v32);
      if (!v31)
      {
        uint64_t v32 = v14 + 3;
        if (v14 + 3 >= v58) {
          goto LABEL_29;
        }
        int v31 = *(void *)(v57 + 8 * v32);
        if (!v31)
        {
          uint64_t v32 = v14 + 4;
          if (v14 + 4 >= v58) {
            goto LABEL_29;
          }
          int v31 = *(void *)(v57 + 8 * v32);
          if (!v31) {
            break;
          }
        }
      }
    }

  unint64_t v44 = BYTE1(a1);
  unint64_t v45 = BYTE3(a1);
  uint64_t v46 = BYTE4(a1);
  unint64_t v240 = BYTE6(a1);
  uint64_t v241 = BYTE5(a1);
  uint64_t v47 = a1 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v8 << 48);
  unint64_t v48 = (char **)NANFollowUpReceivedEvent.followUpMessage.getter(v47, a2, a3);
  if (v48)
  {
    uint64_t v226 = a2;
    uint64_t v238 = v46;
    uint64_t v236 = v45;
    uint64_t v229 = v44;
    char v213 = v48;
    uint64_t v49 = v4 + qword_100410BC0;
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_t v51 = static os_log_type_t.default.getter(v50);
    uint64_t v52 = os_log_type_enabled(v50, v51);
    v219 = v4;
    v201[1] = v49;
    if (v52)
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v54 = swift_slowAlloc(32LL, -1LL);
      uint64_t v244 = v54;
      *(_DWORD *)uint64_t v53 = 136315138;
      unint64_t v55 = NANPeerServiceIdentifier.description.getter((v239 << 48) | (v240 << 40) | (v241 << 32) | (v238 << 24) | (v236 << 16) | (v242 << 8) | v229);
      unint64_t v57 = v56;
      uint64_t v245 = sub_10000235C(v55, v56, &v244);
      uint64_t v4 = v219;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Received a follow up message from %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    char v58 = v237;
    v201[0] = type metadata accessor for NANSubscribe.Configuration(0LL);
    uint64_t v59 = v226;
    uint64_t v60 = *(void *)(v4 + qword_10040EFA0);
    swift_unownedRetainStrong(v60);
    uint64_t v61 = v234;
    sub_1002EA528((v239 << 40) | (v240 << 32) | (v241 << 24) | (v238 << 16) | (v236 << 8) | v242, v234);
    swift_release(v60);
    unint64_t v62 = *(void *)(v58 + 8);
    __int128 v63 = *(void *)(v58 + 16);
    swift_bridgeObjectRetain(v63);
    NSData v64 = v225;
    sub_1002529DC(v62, v63, v235, (uint64_t)v225);
    uint64_t v65 = v63;
    unint64_t v66 = v64;
    swift_bridgeObjectRelease(v65);
    sub_10005802C(v61, type metadata accessor for NANPeer);
    uint64_t v67 = type metadata accessor for NANPeer.Service(0LL);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48LL))(v64, 1LL, v67) == 1)
    {
      sub_1000225EC((uint64_t)v64, &qword_10040E460);
LABEL_13:
      char v58 = v237;
      goto LABEL_32;
    }

    uint64_t v82 = v64[10];
    __int128 v83 = v64[11];
    uint64_t v84 = v64[12];
    uint64_t v85 = v66[13];
    __int128 v86 = v66[14];
    sub_100254E90(v66[10], v66[11], v66[12], v85, v86);
    sub_10005802C((uint64_t)v66, type metadata accessor for NANPeer.Service);
    char v58 = v237;
    if (v84 == 5LL || (sub_100111F98(v82, v83, v84, v85, v86), (v82 & 0x30000) != 0x10000))
    {
LABEL_32:
      unint64_t v99 = v232;
      sub_1002C85FC(v4 + qword_10040EFC8, v232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v230 + 48))(v99, 1LL, v231) == 1)
      {
        sub_1000225EC(v99, &qword_10040D480);
        unint64_t v98 = v213;
        unint64_t v100 = v213;
LABEL_58:
        sub_1002C6054((uint64_t)v100);
        goto LABEL_59;
      }

      uint64_t v231 = a3;
      sub_100022628(v99, v233, type metadata accessor for LongTermPairingKeys);
      uint64_t v101 = *(void *)(v4 + qword_10040EFA0);
      swift_unownedRetainStrong(v101);
      uint64_t v102 = v239;
      Swift::String v103 = v236;
      uint64_t v104 = (v239 << 40) | (v240 << 32) | (v241 << 24) | (v238 << 16) | (v236 << 8) | v242;
      char v105 = v234;
      sub_1002EA528(v104, v234);
      swift_release(v101);
      uint64_t v106 = *(void *)(v58 + 8);
      uint64_t v107 = *(void *)(v58 + 16);
      swift_bridgeObjectRetain(v107);
      uint64_t v108 = v221;
      sub_1002529DC(v106, v107, v235, (uint64_t)v221);
      swift_bridgeObjectRelease(v107);
      sub_10005802C(v105, type metadata accessor for NANPeer);
      unint64_t v109 = type metadata accessor for NANPeer.Service(0LL);
      uint64_t v110 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v109 - 8) + 48LL))(v108, 1LL, v109);
      uint64_t v239 = v102 << 48;
      if (v110 == 1)
      {
        sub_1000225EC((uint64_t)v108, &qword_10040E460);
        unint64_t v111 = (uint64_t)v222;
LABEL_42:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v224 + 56))(v111, 1LL, 1LL, v223);
        goto LABEL_43;
      }

      char v112 = v108[10];
      uint64_t v113 = v108[11];
      uint64_t v114 = v108[12];
      uint64_t v115 = v108[13];
      unint64_t v116 = v108[14];
      sub_100254E90(v112, v113, v114, v115, v116);
      sub_10005802C((uint64_t)v108, type metadata accessor for NANPeer.Service);
      unint64_t v111 = (uint64_t)v222;
      if ((v114 & 0xFE) == 4) {
        goto LABEL_42;
      }
      NANServiceInfo.genericServiceProtocol.getter(v114, v115, v116);
      NSData v118 = v117;
      sub_100111F98(v112, v113, v114, v115, v116);
      if (!v118) {
        goto LABEL_42;
      }
      NANGenericServiceProtocol.publicKey.getter(v118, v111);
      uint64_t v119 = swift_bridgeObjectRelease(v118);
      unint64_t v120 = v224;
      Class v121 = v223;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v224 + 48))(v111, 1LL, v223, v119) == 1)
      {
LABEL_43:
        sub_1000225EC(v111, (uint64_t *)&unk_10040D470);
        uint64_t v122 = v219;
        uint64_t v125 = v240;
        char v131 = v241;
LABEL_44:
        uint64_t v132 = (uint64_t *)(v122 + qword_100410BC8);
        swift_beginAccess(v122 + qword_100410BC8, &v244, 32LL, 0LL);
        uint64_t v133 = *v132;
        uint64_t v134 = v242;
        uint64_t v135 = v228;
        if (*(void *)(*v132 + 16)
          && (uint64_t v136 = sub_10001C08C(v239 | (v125 << 40) | (v131 << 32) | (v238 << 24) | (v103 << 16) | (v242 << 8) | v229),
              (v137 & 1) != 0))
        {
          uint64_t v138 = *(void *)(v133 + 56) + *(void *)(v135 + 72) * v136;
          uint64_t v139 = v220;
          sub_100057FE8(v138, v220, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          uint64_t v140 = 0LL;
        }

        else
        {
          uint64_t v140 = 1LL;
          uint64_t v139 = v220;
        }

        uint64_t v141 = v227;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56))(v139, v140, 1LL, v227);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v139, 1LL, v141))
        {
          sub_1000225EC(v139, (uint64_t *)&unk_10040F0F0);
          __int128 v142 = swift_endAccess(&v244);
        }

        else
        {
          uint64_t v143 = v217;
          sub_100057FE8(v139, v217, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          sub_1000225EC(v139, (uint64_t *)&unk_10040F0F0);
          swift_endAccess(&v244);
          if (swift_getEnumCaseMultiPayload(v143, v218) == 2)
          {
            sub_10005802C(v233, type metadata accessor for LongTermPairingKeys);
            sub_1000208D8(*(void *)v143, *(void *)(v143 + 8));
LABEL_57:
            unint64_t v98 = v213;
            unint64_t v100 = v213;
            goto LABEL_58;
          }

          __int128 v142 = sub_10005802C(v143, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        }

        __int128 v144 = (os_log_s *)Logger.logObject.getter(v142);
        __int128 v145 = static os_log_type_t.error.getter(v144);
        if (os_log_type_enabled(v144, v145))
        {
          __int16 v146 = v125;
          uint64_t v147 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v237 = swift_slowAlloc(32LL, -1LL);
          uint64_t v244 = v237;
          *(_DWORD *)uint64_t v147 = 136315138;
          uint64_t v148 = NANPeerServiceIdentifier.description.getter(v239 | (v146 << 40) | (v131 << 32) | (v238 << 24) | (v103 << 16) | (v134 << 8) | v229);
          uint64_t v150 = v149;
          uint64_t v245 = sub_10000235C(v148, v149, &v244);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246);
          swift_bridgeObjectRelease(v150);
          _os_log_impl( (void *)&_mh_execute_header,  v144,  v145,  "Received an authentication response from %s but failed to verify the peer because missing peer's public OWE key or authentication state",  v147,  0xCu);
          char v151 = v237;
          swift_arrayDestroy(v237, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v151, -1LL, -1LL);
          swift_slowDealloc(v147, -1LL, -1LL);
        }

        sub_10005802C(v233, type metadata accessor for LongTermPairingKeys);
        goto LABEL_57;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 32))(v216, v111, v121);
      uint64_t v122 = v219;
      unint64_t v123 = (uint64_t *)(v219 + qword_100410BC8);
      swift_beginAccess(v219 + qword_100410BC8, &v244, 32LL, 0LL);
      uint64_t v124 = *v123;
      uint64_t v125 = v240;
      if (*(void *)(*v123 + 16))
      {
        os_log_t v126 = sub_10001C08C(v239 | (v240 << 40) | (v241 << 32) | (v238 << 24) | (v103 << 16) | (v242 << 8) | v229);
        int v127 = v214;
        uint64_t v128 = v123;
        if ((v129 & 1) != 0)
        {
          sub_100057FE8( *(void *)(v124 + 56) + *(void *)(v228 + 72) * v126,  v214,  type metadata accessor for NANPeer.Service.AuthenticationStatus);
          char v130 = 0LL;
        }

        else
        {
          char v130 = 1LL;
        }
      }

      else
      {
        uint64_t v128 = v123;
        char v130 = 1LL;
        int v127 = v214;
      }

      char v152 = v228;
      __int128 v153 = v227;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v228 + 56))(v127, v130, 1LL, v227);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v127, 1LL, v153))
      {
        sub_1000225EC(v127, (uint64_t *)&unk_10040F0F0);
        swift_endAccess(&v244);
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v216, v121);
LABEL_66:
        Swift::String v103 = v236;
        char v131 = v241;
        goto LABEL_44;
      }

      __int16 v154 = v211;
      sub_100057FE8(v127, v211, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_1000225EC(v127, (uint64_t *)&unk_10040F0F0);
      swift_endAccess(&v244);
      if (swift_getEnumCaseMultiPayload(v154, v218))
      {
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v216, v121);
        sub_10005802C(v154, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        goto LABEL_66;
      }

      __int128 v155 = v210;
      sub_100022628(v154, v210, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
      uint64_t v245 = 0LL;
      __int16 v156 = v201[0];
      __int128 v157 = v237;
      __int16 v158 = v209;
      sub_100057FE8(v237 + *(int *)(v201[0] + 64LL), v209, type metadata accessor for OWEKeys);
      LOBYTE(v155) = LongTermPairingKeys.verifyAuthenticationResponse(forPeer:with:publisherKeys:using:extraServiceSpecificInfo:)( v104,  (uint64_t)v213,  v155,  v158,  &v245);
      sub_10005802C(v158, type metadata accessor for OWEKeys);
      if ((v155 & 1) == 0)
      {
        swift_bridgeObjectRelease(v245);
        uint64_t v163 = (os_log_s *)Logger.logObject.getter(v172);
        uint64_t v164 = static os_log_type_t.error.getter(v163);
        if (os_log_type_enabled(v163, v164))
        {
          uint64_t v165 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v166 = swift_slowAlloc(32LL, -1LL);
          uint64_t v244 = v166;
          *(_DWORD *)uint64_t v165 = 136315138;
          unint64_t v167 = v121;
          v173 = NANPeerServiceIdentifier.description.getter(v239 | (v240 << 40) | (v241 << 32) | (v238 << 24) | (v236 << 16) | (v242 << 8) | v229);
          uint64_t v175 = v174;
          v243 = sub_10000235C(v173, v174, &v244);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v243, &v244);
          swift_bridgeObjectRelease(v175);
          uint64_t v171 = "Received an authentication response from %s but failed to verify because authentication failed";
          goto LABEL_73;
        }

          __int128 v142 = (v35 - 1) & v35;
          uint64_t v143 = v38;
        }
      }

      unint64_t v44 = v38 + 4;
      if (v38 + 4 < v124)
      {
        char v42 = *(void *)(v123 + 8 * v44);
        if (v42)
        {
          uint64_t v43 = v38 + 4;
          goto LABEL_21;
        }

        while (1)
        {
          uint64_t v43 = v44 + 1;
          if (__OFADD__(v44, 1LL)) {
            goto LABEL_36;
          }
          if (v43 >= v124) {
            break;
          }
          char v42 = *(void *)(v123 + 8 * v43);
          ++v44;
          if (v42) {
            goto LABEL_21;
          }
        }
      }
    }

  unint64_t v13 = sub_1002DC1DC(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13 & 0x1FFFF;
}

    swift_bridgeObjectRelease(v6);
LABEL_8:
    uint64_t v15 = (uint64x2_t)vdupq_n_s64(a2);
    uint64_t v16 = vuzp1q_s32( (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10033A8F0),  (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10033A8E0));
    *(int16x4_t *)v16.i8 = vmovn_s32(v16);
    char v20 = (int16x8_t)v16;
    int v6 = a2 >> 40;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v21[0] = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_10032EFFC(a2 & 0xFFFFFFFFFFFFLL, v9, isUniquelyReferenced_nonNull_native);
    id v18 = *v3;
    void *v3 = v21[0];
    swift_bridgeObjectRelease(v18);
    uint64_t v14 = v20;
    goto LABEL_9;
  }

          int v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
      }

      uint64_t v15 = v13 + 3;
      if (v15 < v30)
      {
        uint64_t v14 = *(void *)(v29 + 8 * v15);
        if (v14)
        {
          uint64_t v5 = v15;
          goto LABEL_21;
        }

        while (1)
        {
          uint64_t v5 = v15 + 1;
          if (__OFADD__(v15, 1LL)) {
            goto LABEL_31;
          }
          if (v5 >= v30) {
            break;
          }
          uint64_t v14 = *(void *)(v29 + 8 * v5);
          ++v15;
          if (v14) {
            goto LABEL_21;
          }
        }
      }
    }

uint64_t sub_100021A7C()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess( v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers,  v11,  0LL,  0LL);
  uint64_t v2 = *v1;
  uint64_t v3 = swift_bridgeObjectRetain(*v1);
  sub_100018960(v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v2);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(v5);
    char v7 = (id *)(v5 + 40);
    do
    {
      unsigned __int8 v8 = *((_BYTE *)v7 - 8);
      id v9 = *v7;
      sub_100018FF8(v8, v9);

      v7 += 2;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v5);
  }

  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100021B40()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002274(&qword_100404DB0);
  uint64_t v3 = __chkstk_darwin(v2);
  int v127 = (char *)v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v113 - v5;
  uint64_t v7 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  int v11 = (char *)v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v113 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v113 - v15;
  uint64_t v17 = (uint64_t)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  swift_beginAccess( &v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv],  v135,  0LL,  0LL);
  sub_1000226B0(v17, (uint64_t)v6, &qword_100404DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_1000225EC((uint64_t)v6, &qword_100404DB0);
  }

  else
  {
    uint64_t v124 = v8;
    sub_100022628((uint64_t)v6, (uint64_t)v16, type metadata accessor for DNSRecords.SRV);
    sub_1000210C0((uint64_t)v16, (uint64_t)v14);
    sub_1000210C0((uint64_t)v16, (uint64_t)v11);
    id v18 = v1;
    id v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    int v21 = v20;
    BOOL v22 = os_log_type_enabled(v19, v20);
    uint64_t v126 = v7;
    uint64_t v125 = v17;
    if (v22)
    {
      uint64_t v23 = swift_slowAlloc(26LL, -1LL);
      LODWORD(v122) = v21;
      uint64_t v24 = v23;
      uint64_t v123 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v136 = v123;
      *(_DWORD *)uint64_t v24 = 136315650;
      uint64_t v120 = v24 + 4;
      uint64_t v25 = *(void *)&v18[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
      uint64_t v26 = *(void *)&v18[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
      uint64_t v27 = *(void *)&v18[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
      char v28 = v18[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
      char v29 = v18[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
      v129[0] = *(void *)&v18[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
      v129[1] = v25;
      v129[2] = v26;
      v129[3] = v27;
      char v130 = v28;
      char v131 = v29;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v27);
      os_log_t v121 = v19;
      uint64_t v30 = DNSRecords.PTR.description.getter();
      unint64_t v32 = v31;
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v25);
      os_log_t v132 = (os_log_t)sub_10000235C(v30, v32, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);

      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v33 = (uint64_t *)&v14[*(int *)(v126 + 24)];
      uint64_t v34 = *v33;
      unint64_t v35 = v33[1];
      swift_bridgeObjectRetain(v35);
      uint64_t v36 = v34;
      uint64_t v7 = v126;
      os_log_t v132 = (os_log_t)sub_10000235C(v36, v35, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease(v35);
      uint64_t v37 = sub_100020A2C((uint64_t)v14);
      *(_WORD *)(v24 + 22) = 512;
      LOWORD(v30) = NWEndpoint.Port.rawValue.getter(v37);
      sub_100020A2C((uint64_t)v11);
      LOWORD(v132) = v30;
      uint64_t v17 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, (char *)&v132 + 2);
      os_log_t v38 = v121;
      _os_log_impl( (void *)&_mh_execute_header,  v121,  (os_log_type_t)v122,  "Removing SRV for %s %s:%hu",  (uint8_t *)v24,  0x1Au);
      uint64_t v39 = v123;
      swift_arrayDestroy(v123, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      sub_100020A2C((uint64_t)v11);

      sub_100020A2C((uint64_t)v14);
    }

    uint64_t v40 = *(void **)&v18[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
    if (v40)
    {
      uint64_t v41 = *(void *)v16;
      unint64_t v42 = *((void *)v16 + 1);
      uint64_t v43 = *((void *)v16 + 2);
      unint64_t v44 = *((void *)v16 + 3);
      char v45 = v16[32];
      __int128 v136 = xmmword_1003398F0;
      swift_unknownObjectRetain(v40);
      sub_1000FB470(v41, v42);
      sub_1000F39BC(32LL, v43, v44, v45);
      uint64_t v47 = v46;
      unint64_t v49 = v48;
      sub_1000FA9C4(v46, v48);
      sub_1000208D8(v47, v49);
      __int128 v50 = v136;
      v51.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000208D8(v50, *((unint64_t *)&v50 + 1));
      DNSRecords.SRV.valueData.getter();
      if (v53 >> 60 == 15)
      {
        Class isa = 0LL;
      }

      else
      {
        uint64_t v55 = v52;
        unint64_t v56 = v53;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100020B40(v55, v56);
      }

      [v40 handleEventType:1 keyData:v51.super.isa valueData:isa];
      swift_unknownObjectRelease(v40);

      uint64_t v7 = v126;
      uint64_t v17 = v125;
    }

    sub_100020A2C((uint64_t)v16);
    uint64_t v8 = v124;
  }

  if (v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] == 1)
  {
    unint64_t v57 = (uint64_t *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
    uint64_t v123 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
    if (v123)
    {
      uint64_t v124 = v8;
      uint64_t v59 = *v57;
      uint64_t v58 = v57[1];
      uint64_t v60 = v57[3];
      uint64_t v61 = (os_log_s *)v57[4];
      uint64_t v62 = v57[5];
      uint64_t v63 = v57[6];
      NSData v64 = v1;
      uint64_t v65 = v57[7];
      __int128 v117 = v64;
      Class v114 = v64;
      uint64_t v116 = v59;
      uint64_t v115 = v58;
      uint64_t v122 = v60;
      os_log_t v121 = v61;
      uint64_t v119 = v62;
      uint64_t v120 = v63;
      uint64_t v118 = v65;
      uint64_t v66 = sub_10002251C(v59, v58, v123, v60, (uint64_t)v61, v62, v63, v65);
      uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
      os_log_type_t v68 = static os_log_type_t.info.getter();
      BOOL v69 = os_log_type_enabled(v67, v68);
      uint64_t v126 = v7;
      uint64_t v125 = v17;
      if (v69)
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_t v71 = (os_log_t)swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v70 = 136315138;
        os_log_t v132 = v71;
        v113[1] = v70 + 4;
        Class v72 = v114;
        uint64_t v73 = *(uint64_t *)((char *)&v114[1].isa
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service);
        uint64_t v74 = *(uint64_t *)((char *)&v114[2].isa
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service);
        uint64_t v75 = *(uint64_t *)((char *)&v114[3].isa
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service);
        char v76 = *((_BYTE *)&v114[4].isa
              + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service);
        char v77 = *((_BYTE *)&v114[4].isa
              + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
              + 1);
        *(objc_class *)&__int128 v136 = *(Class)((char *)v114
                                      + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service);
        *((void *)&v136 + 1) = v73;
        uint64_t v137 = v74;
        uint64_t v138 = v75;
        char v139 = v76;
        char v140 = v77;
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v75);
        uint64_t v78 = DNSRecords.PTR.description.getter();
        unint64_t v80 = v79;
        swift_bridgeObjectRelease(v75);
        swift_bridgeObjectRelease(v73);
        uint64_t v128 = sub_10000235C(v78, v80, (uint64_t *)&v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);

        swift_bridgeObjectRelease(v80);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Removing AAAA for %s", v70, 0xCu);
        swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1LL, -1LL);
        swift_slowDealloc(v70, -1LL, -1LL);
      }

      else
      {
        Class v72 = v114;
      }

      uint64_t v81 = *(Class *)((char *)&v72->isa
                     + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
      uint64_t v8 = v124;
      uint64_t v1 = v117;
      if (v81)
      {
        swift_unknownObjectRetain(v81);
        uint64_t v82 = v116;
        uint64_t v83 = v115;
        uint64_t v84 = v122;
        DNSRecords.BrowseHost.keyData.getter(v116, v115, v123);
        uint64_t v86 = v85;
        unint64_t v88 = v87;
        Class v114 = Data._bridgeToObjectiveC()().super.isa;
        sub_1000208D8(v86, v88);
        uint64_t v89 = v119;
        os_log_t v90 = v121;
        os_log_t v132 = v121;
        uint64_t v133 = v119;
        uint64_t v91 = sub_1000EF854((uint64_t)&v132, (uint64_t)&v134);
        unint64_t v93 = v92;
        sub_1000217B0(v82, v83, v123, v84, (uint64_t)v90, v89, v120, v118);
        Class v94 = Data._bridgeToObjectiveC()().super.isa;
        sub_1000208D8(v91, v93);
        Class v95 = v114;
        [v81 handleEventType:1 keyData:v114 valueData:v94];

        swift_unknownObjectRelease(v81);
      }

      else
      {
        sub_1000217B0(v116, v115, v123, v122, (uint64_t)v121, v119, v120, v118);
      }

      uint64_t v7 = v126;
      uint64_t v17 = v125;
    }
  }

  uint64_t v96 = &v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  uint64_t v97 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  uint64_t v98 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 8];
  uint64_t v99 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
  uint64_t v100 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 24];
  uint64_t v101 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 32];
  uint64_t v102 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 40];
  uint64_t v103 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 48];
  uint64_t v104 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 56];
  *(_OWORD *)uint64_t v96 = 0u;
  *((_OWORD *)v96 + 1) = 0u;
  *((_OWORD *)v96 + 2) = 0u;
  *((_OWORD *)v96 + 3) = 0u;
  sub_1000217B0(v97, v98, v99, v100, v101, v102, v103, v104);
  uint64_t v105 = (uint64_t)v127;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v127, 1LL, 1LL, v7);
  swift_beginAccess(v17, &v132, 33LL, 0LL);
  sub_100020A68(v105, v17);
  swift_endAccess(&v132);
  uint64_t v106 = (uint64_t *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  uint64_t v107 = *(void (**)(uint64_t))&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  if (v107)
  {
    uint64_t v108 = v106[1];
    uint64_t v109 = swift_retain();
    v107(v109);
    sub_100021018((uint64_t)v107, v108);
    uint64_t v110 = *v106;
  }

  else
  {
    uint64_t v110 = 0LL;
  }

  uint64_t v111 = v106[1];
  *uint64_t v106 = 0LL;
  v106[1] = 0LL;
  return sub_100021018(v110, v111);
}

uint64_t sub_10002251C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t sub_10002254C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10002255C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100020AFC(result, a2);
  }
  return result;
}

uint64_t sub_100022570(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100022588(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_100022588(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

_OWORD *sub_100022594(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000225A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274((uint64_t *)&unk_1004050D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000225EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100002274(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100022628(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002266C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000226B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002274(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000226F4(uint64_t a1)
{
  return sub_10000E060(a1, v1[4], v1[2], v1[3]);
}

void sub_100022710(unsigned __int16 *a1)
{
}

uint64_t sub_10002272C()
{
  return swift_deallocObject(v0, 50LL, 7LL);
}

uint64_t sub_100022758()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void *sub_10002278C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_1000227C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000227F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100020E14(a1, a2);
}

void *OUI.size.unsafeMutableAddressor()
{
  return &static OUI.size;
}

uint64_t OUI.init(data:)(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return (unsigned __int16)(a2 << 8) | (a3 << 16) | a1;
}

void *OUI.wifiAlliance.unsafeMutableAddressor()
{
  return &static OUI.wifiAlliance;
}

uint64_t static OUI.wifiAlliance.getter()
{
  return 10121040LL;
}

void *OUI.apple.unsafeMutableAddressor()
{
  return &static OUI.apple;
}

uint64_t static OUI.apple.getter()
{
  return 15865600LL;
}

void *OUI.ieee80211.unsafeMutableAddressor()
{
  return &static OUI.ieee80211;
}

uint64_t static OUI.ieee80211.getter()
{
  return 11276032LL;
}

uint64_t OUI.hash(into:)(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v4 = a2 >> 8;
  unsigned int v5 = HIWORD(a2);
  uint64_t v6 = sub_100002274(&qword_1004040A8);
  uint64_t v7 = swift_allocObject(v6, 35LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_BYTE *)(v7 + 32) = v2;
  *(_BYTE *)(v7 + 33) = v4;
  *(_BYTE *)(v7 + 34) = v5;
  uint64_t v8 = sub_1000FB08C(v7);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease(v7);
  Data.hash(into:)(a1, v8, v10);
  return sub_1000208D8(v8, v10);
}

uint64_t static OUI.== infix(_:_:)(int a1, int a2)
{
  return sub_100023504(a1 & 0xFFFFFF, a2 & 0xFFFFFF);
}

uint64_t OUI.description.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  unsigned int v3 = HIWORD(a1);
  uint64_t v19 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v19);
  uint64_t v4 = sub_100002274(&qword_1004040A8);
  uint64_t v5 = swift_allocObject(v4, 35LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_BYTE *)(v5 + 32) = v1;
  *(_BYTE *)(v5 + 33) = v2;
  char v6 = v3;
  *(_BYTE *)(v5 + 34) = v3;
  uint64_t v7 = sub_1000FB08C(v5);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease(v5);
  uint64_t v10 = sub_1000FB08C((uint64_t)&off_1003D6AB0);
  unint64_t v12 = v11;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v9);
  char v14 = v13;
  sub_1000208D8(v10, v12);
  sub_1000208D8(v7, v9);
  if ((v14 & 1) == 0)
  {
    uint64_t v15 = swift_allocObject(v4, 35LL, 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
    *(_BYTE *)(v15 + 32) = v1;
    *(_BYTE *)(v15 + 33) = v2;
    *(_BYTE *)(v15 + 34) = v6;
    sub_1000FB08C(v15);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v15);
    __asm { BR              X10 }
  }

  return 0x696C6C4169466957LL;
}

Swift::Int OUI.hashValue.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  unsigned int v3 = HIWORD(a1);
  Hasher.init(_seed:)(v10, 0LL);
  uint64_t v4 = sub_100002274(&qword_1004040A8);
  uint64_t v5 = swift_allocObject(v4, 35LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_BYTE *)(v5 + 32) = v1;
  *(_BYTE *)(v5 + 33) = v2;
  *(_BYTE *)(v5 + 34) = v3;
  uint64_t v6 = sub_1000FB08C(v5);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease(v5);
  Data.hash(into:)(v10, v6, v8);
  sub_1000208D8(v6, v8);
  return Hasher._finalize()();
}

Swift::Int sub_100022CC0()
{
  __int16 v1 = *v0;
  char v2 = *((_BYTE *)v0 + 2);
  Hasher.init(_seed:)(v9, 0LL);
  uint64_t v3 = sub_100002274(&qword_1004040A8);
  uint64_t v4 = swift_allocObject(v3, 35LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_WORD *)(v4 + 32) = v1;
  *(_BYTE *)(v4 + 34) = v2;
  uint64_t v5 = sub_1000FB08C(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease(v4);
  Data.hash(into:)(v9, v5, v7);
  sub_1000208D8(v5, v7);
  return Hasher._finalize()();
}

uint64_t sub_100022D64(uint64_t a1)
{
  __int16 v3 = *v1;
  char v4 = *((_BYTE *)v1 + 2);
  uint64_t v5 = sub_100002274(&qword_1004040A8);
  uint64_t v6 = swift_allocObject(v5, 35LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_WORD *)(v6 + 32) = v3;
  *(_BYTE *)(v6 + 34) = v4;
  uint64_t v7 = sub_1000FB08C(v6);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease(v6);
  Data.hash(into:)(a1, v7, v9);
  return sub_1000208D8(v7, v9);
}

Swift::Int sub_100022DEC(uint64_t a1)
{
  __int16 v2 = *v1;
  char v3 = *((_BYTE *)v1 + 2);
  Hasher.init(_seed:)(v10, a1);
  uint64_t v4 = sub_100002274(&qword_1004040A8);
  uint64_t v5 = swift_allocObject(v4, 35LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_WORD *)(v5 + 32) = v2;
  *(_BYTE *)(v5 + 34) = v3;
  uint64_t v6 = sub_1000FB08C(v5);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease(v5);
  Data.hash(into:)(v10, v6, v8);
  sub_1000208D8(v6, v8);
  return Hasher._finalize()();
}

uint64_t sub_100022E8C()
{
  return OUI.description.getter(*v0 | (*((unsigned __int8 *)v0 + 2) << 16));
}

uint64_t sub_100022E9C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_100023504(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

uint64_t OUI.init(from:)(void *a1)
{
  return sub_10002365C(a1) & 0xFFFFFF;
}

uint64_t OUI.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100021104(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v13, v4, v5);
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  sub_1000237C8((uint64_t)v13, v14);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v6, v7);
  if (!v2)
  {
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    sub_1000237C8((uint64_t)v13, v14);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2 >> 8, v8, v9);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    sub_1000237C8((uint64_t)v13, v14);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(WORD1(a2), v10, v11);
  }

  return sub_100002AC4(v13);
}

uint64_t sub_100022FCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10002365C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
  }

  return result;
}

uint64_t sub_100023004(void *a1)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = *v1;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100021104(a1, v6);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v6, v7);
  uint64_t v8 = v16;
  uint64_t v9 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v5, v8, v9);
  if (!v2)
  {
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v3, v10, v11);
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    sub_1000237C8((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v4, v12, v13);
  }

  return sub_100002AC4(v15);
}

uint64_t sub_100023104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10007FE70((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1000231D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_10007FE70(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1000232D8()
{
  return ((uint64_t (*)(void))((char *)&loc_10002330C + dword_1000234E4[v0 >> 62]))();
}

uint64_t sub_10002331C@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_100023504(unsigned int a1, unsigned int a2)
{
  char v2 = a2;
  char v3 = a1;
  unsigned int v4 = a1 >> 8;
  unsigned int v5 = HIWORD(a1);
  unsigned int v6 = a2 >> 8;
  unsigned int v7 = HIWORD(a2);
  uint64_t v8 = sub_100002274(&qword_1004040A8);
  uint64_t v9 = swift_allocObject(v8, 35LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_BYTE *)(v9 + 32) = v3;
  *(_BYTE *)(v9 + 33) = v4;
  *(_BYTE *)(v9 + 34) = v5;
  uint64_t v10 = sub_1000FB08C(v9);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v9);
  uint64_t v13 = swift_allocObject(v8, 35LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339910;
  *(_BYTE *)(v13 + 32) = v2;
  *(_BYTE *)(v13 + 33) = v6;
  *(_BYTE *)(v13 + 34) = v7;
  uint64_t v14 = sub_1000FB08C(v13);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease(v13);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v10, v12);
  LOBYTE(v13) = v17;
  sub_1000208D8(v14, v16);
  sub_1000208D8(v10, v12);
  return v13 & 1;
}

unint64_t sub_100023614()
{
  unint64_t result = qword_100405138;
  if (!qword_100405138)
  {
    uint64_t v1 = type metadata accessor for Data.Iterator(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_100405138);
  }

  return result;
}

uint64_t sub_10002365C(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v15, v3, v4);
  if (v1) {
    return sub_100002AC4(a1);
  }
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  UnkeyedDecodingContainer.inferredDecode<A>()( v5,  (uint64_t)&type metadata for UInt8,  v6,  (uint64_t)&protocol witness table for UInt8);
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  UnkeyedDecodingContainer.inferredDecode<A>()( v7,  (uint64_t)&type metadata for UInt8,  v8,  (uint64_t)&protocol witness table for UInt8);
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  sub_1000237C8((uint64_t)v15, v16);
  UnkeyedDecodingContainer.inferredDecode<A>()( v9,  (uint64_t)&type metadata for UInt8,  v10,  (uint64_t)&protocol witness table for UInt8);
  sub_100002AC4(v15);
  sub_100002AC4(a1);
  return v14 | (v13 << 8) | (v12 << 16);
}

uint64_t sub_1000237C8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

unint64_t sub_1000237F4()
{
  unint64_t result = qword_100405160;
  if (!qword_100405160)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OUI, &type metadata for OUI);
    atomic_store(result, (unint64_t *)&qword_100405160);
  }

  return result;
}

ValueMetadata *type metadata accessor for OUI()
{
  return &type metadata for OUI;
}

uint64_t sub_100023848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v25[0] = a1;
  uint64_t v27 = a4;
  uint64_t v26 = *(void *)(a3 + 8);
  uint64_t v5 = *(void *)(v26 + 24);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  a2,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  unsigned __int8 v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v25 - v16;
  __chkstk_darwin(v15);
  char v19 = (char *)v25 - v18;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &qword_100339A30,  512LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v10, a2, v6);
  uint64_t v21 = *(void *)(v5 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v25[0], v17, a2, v21);
  BOOL v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v17, a2);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v25[1], v19, a2, v21);
  uint64_t v23 = v26;
  dispatch thunk of static BinaryInteger.~ prefix(_:)(v19, a2, v26);
  dispatch thunk of static BinaryInteger.& infix(_:_:)(v17, v14, a2, v23);
  v22(v14, a2);
  v22(v17, a2);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, a2);
}

uint64_t FixedWidthInteger.fourByteAligned.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(v9 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v10,  a1,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v10,  a1,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A28,  1024LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v13, a1, v10);
  sub_100023848((uint64_t)v8, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a1);
}

uint64_t static FixedWidthInteger.random.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, a1, a1, "lower upper ", 0LL);
  uint64_t v5 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v38 = *(void *)(a1 - 8);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a2 + 8) + 32LL) + 8LL);
  uint64_t v17 = type metadata accessor for ClosedRange(0LL, a1, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v39 = (char *)&v36 - v22;
  dispatch thunk of static FixedWidthInteger.min.getter(a1, a2);
  uint64_t v42 = a2;
  dispatch thunk of static FixedWidthInteger.max.getter(a1, a2);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)(v15, v13, a1, v16);
  if ((result & 1) != 0)
  {
    uint64_t v36 = v17;
    uint64_t v37 = v18;
    uint64_t v24 = TupleTypeMetadata2;
    uint64_t v25 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v26 = v21;
    uint64_t v27 = v38;
    char v28 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v28(v10, v15, a1);
    v28(v25, v13, a1);
    char v29 = &v7[*(int *)(v24 + 48)];
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v30(v7, v10, a1);
    v30(v29, v25, a1);
    v28(v26, v7, a1);
    unint64_t v31 = *(void (**)(char *, uint64_t))(v27 + 8);
    v31(v29, a1);
    unint64_t v32 = &v7[*(int *)(v24 + 48)];
    v28(v7, v10, a1);
    v28(v32, v25, a1);
    uint64_t v33 = v36;
    v28(&v26[*(int *)(v36 + 36)], v32, a1);
    v31(v7, a1);
    uint64_t v34 = v37;
    unint64_t v35 = v39;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v39, v26, v33);
    static FixedWidthInteger.random(in:)(v35, a1, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v35, v33);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t FixedWidthInteger.init(bitOffsets:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a1);
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      Swift::UInt v7 = *(void *)(a1 + 8 * i + 32);
      FixedWidthInteger.set(bitOffset:)(v7);
    }

    swift_bridgeObjectRelease(a1);
  }

  return swift_bridgeObjectRelease(a1);
}

Swift::Void __swiftcall FixedWidthInteger.set(bitOffset:)(Swift::UInt bitOffset)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(*(void *)(v6 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v7,  v1,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v9 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v21 - v15;
  int64_t v17 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v4, v3);
  if (v17 < 1 || v17 <= bitOffset)
  {
    __break(1u);
  }

  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v7,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &qword_100339A30,  512LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v11, v4, v7);
    Swift::UInt v24 = bitOffset;
    unint64_t v19 = sub_1000240C0();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v14, &v24, &type metadata for UInt, v19, v4, v6);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v22 + 8);
    v20(v14, v4);
    dispatch thunk of static BinaryInteger.|= infix(_:_:)(v23, v16, v4, v6);
    v20(v16, v4);
  }

unint64_t sub_1000240C0()
{
  unint64_t result = qword_100405168;
  if (!qword_100405168)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_100405168);
  }

  return result;
}

Swift::Void __swiftcall FixedWidthInteger.clear(bitOffset:)(Swift::UInt bitOffset)
{
  Swift::UInt v26 = bitOffset;
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(*(void *)(v5 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  v1,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)v25 - v9;
  v25[0] = *(void *)(v4 - 8);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v25 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v25 - v17;
  uint64_t v19 = v3;
  Swift::UInt v20 = v26;
  uint64_t v21 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v4, v19);
  if (v21 < 1 || v21 <= v20)
  {
    __break(1u);
  }

  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &qword_100339A30,  512LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v10, v4, v6);
    Swift::UInt v27 = v20;
    unint64_t v23 = sub_1000240C0();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v13, &v27, &type metadata for UInt, v23, v4, v5);
    Swift::UInt v24 = *(void (**)(char *, uint64_t))(v25[0] + 8LL);
    v24(v13, v4);
    dispatch thunk of static BinaryInteger.~ prefix(_:)(v16, v4, v5);
    v24(v16, v4);
    dispatch thunk of static BinaryInteger.&= infix(_:_:)(v25[1], v18, v4, v5);
    v24(v18, v4);
  }

unint64_t FixedWidthInteger.bytesRequiredToRepresentBitOffset.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v63 = *(void *)(*(void *)(v4 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v63,  a1,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v6 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v61 = (char *)&v59 - v7;
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  NSData v64 = (char *)&v59 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v66 = (char *)&v59 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v59 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v65 = (char *)&v59 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v59 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (uint64_t)&v59 - v24;
  __chkstk_darwin(v23);
  Swift::UInt v27 = (char *)&v59 - v26;
  char v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v28((char *)&v59 - v26, v2, a1);
  char v29 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4);
  v28((char *)v25, (uint64_t)v27, a1);
  if ((v29 & 1) == 0)
  {
    unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v31(v25, a1);
    uint64_t v32 = v8;
    goto LABEL_18;
  }

  uint64_t v30 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v60 = v8;
  v59(v25, a1);
  if (v30 <= 64)
  {
    unint64_t v31 = v59;
    uint64_t v32 = v60;
    goto LABEL_18;
  }

  v28(v22, (uint64_t)v27, a1);
  int64_t v68 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4) < 64)
    {
LABEL_14:
      uint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
      unint64_t v31 = v59;
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v22, a1);
      uint64_t v32 = v60;
      if (v38 < v68) {
        goto LABEL_37;
      }
      goto LABEL_18;
    }

LABEL_18:
  uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  v28(v17, (uint64_t)v27, a1);
  if (v45 < 65)
  {
    uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
    v31((uint64_t)v17, a1);
    if (v53 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4) & 1) != 0) {
      goto LABEL_30;
    }
  }

  else
  {
    v31((uint64_t)v17, a1);
  }

  uint64_t v46 = v66;
  v28(v66, (uint64_t)v27, a1);
  int64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
  char v47 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4);
  uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  if ((v47 & 1) != 0)
  {
    if (v48 > 64)
    {
      unint64_t v49 = sub_100024970();
      __int128 v50 = v65;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v68, &type metadata for Int, v49, a1, v4);
      char v51 = dispatch thunk of static Comparable.< infix(_:_:)(v50, v46, a1, *(void *)(*(void *)(v4 + 32) + 8LL));
      v31((uint64_t)v50, a1);
      uint64_t v52 = v46;
      goto LABEL_29;
    }

      uint64_t v41 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30(v32, a3);
      if (v107 >= v41) {
        goto LABEL_22;
      }
      goto LABEL_19;
    }

    if (v35 <= 63) {
      goto LABEL_18;
    }
    while (1)
    {
      uint64_t v106 = 0x7FFFFFFFFFFFFFFFLL;
      char v42 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v32, a3);
      int64_t v43 = sub_100024970();
      uint64_t v32 = v95;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v43, a3, v6);
      uint64_t v38 = dispatch thunk of static Comparable.< infix(_:_:)(v32, v42, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v30(v32, a3);
      uint64_t v39 = v42;
LABEL_21:
      v30(v39, a3);
      if ((v38 & 1) == 0) {
        break;
      }
LABEL_19:
      __break(1u);
    }

      unint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v44(v46, a3);
      if (v121 >= v55) {
        goto LABEL_22;
      }
      goto LABEL_19;
    }

    if (v49 <= 63) {
      goto LABEL_18;
    }
    while (1)
    {
      uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v56 = v112;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v112, v46, a3);
      uint64_t v57 = sub_100024970();
      uint64_t v46 = v109;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v120, &type metadata for Int, v57, a3, v6);
      uint64_t v52 = dispatch thunk of static Comparable.< infix(_:_:)(v46, v56, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v46, a3);
      uint64_t v53 = v56;
LABEL_21:
      v44(v53, a3);
      if ((v52 & 1) == 0) {
        break;
      }
LABEL_19:
      __break(1u);
    }

    v23._countAndFlagsBits = 0xD000000000000022LL;
    v23._object = (void *)0x8000000100364080LL;
    String.append(_:)(v23);
    if ((a1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  v17._countAndFlagsBits = 0x61736944206C6C41LL;
  v17._object = (void *)0xED00002964656C62LL;
  String.append(_:)(v17);
  return v24;
}

      Hasher._combine(_:)(v21);
      __asm { BR              X10 }
    }

    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v15 = *v7;
    uint64_t v16 = 1000LL;
  }

  uint64_t v17 = v15 * v16;
  uint64_t v18 = (unsigned __int128)(v15 * (__int128)v16) >> 64 != (v15 * v16) >> 63;
  uint64_t v19 = v15 <= 0;
  uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  if (v19) {
    uint64_t v20 = 0x8000000000000000LL;
  }
  if (v18) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = v17;
  }
  goto LABEL_18;
}

      sub_1000D31D0(&v17, v1);
      return v1;
    }

  sub_1000D3834(&v17, v1);
  uint64_t v15 = 0;
  return v1 | (v15 << 8);
}

  unint64_t v34 = (_OWORD *)(a1 + 104);
  unint64_t v35 = (_OWORD *)(a2 + 104);
  char v36 = *(void *)(a1 + 128);
  uint64_t v37 = *(void *)(a2 + 128);
  if (v36 == 1)
  {
    if (v37 >= 2) {
      goto LABEL_27;
    }
    goto LABEL_29;
  }

  if (v37 == 1)
  {
    sub_10017B1A0((void *)(a1 + 104));
    uint64_t v38 = *(void *)(a2 + 136);
    uint64_t v39 = *(_OWORD *)(a2 + 120);
    *unint64_t v34 = *v35;
    *(_OWORD *)(a1 + 120) = v39;
    *(void *)(a1 + 136) = v38;
  }

  else
  {
    if (!v36)
    {
      if (v37)
      {
LABEL_27:
        *(void *)(a1 + 128) = v37;
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        (**(void (***)(uint64_t, uint64_t, __n128))(v37 - 8))(a1 + 104, a2 + 104, v11);
        goto LABEL_30;
      }

    sub_100002AC4(v175);
    return v168(0LL);
  }

  __break(1u);
  return result;
}

    uint64_t v30 = (uint64_t)v174;
    return sub_10005802C(v30, type metadata accessor for DriverEvent);
  }

  sub_1000E77F4((uint64_t)v27, (uint64_t)v23);
  if (*v23 != 1) {
    goto LABEL_15;
  }
  unint64_t v31 = v193;
  swift_beginAccess(v193 + qword_10040E6B0, v201, 33LL, 0LL);
  uint64_t v33 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier(255LL, v188, v189, v32);
  unint64_t v34 = swift_getWitnessTable(&unk_10035F328, v33);
  type metadata accessor for Dictionary(0LL, v33, v184, v34);
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess(v201);
  swift_beginAccess(v31 + qword_10040E6B8, v201, 33LL, 0LL);
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess(v201);
  sub_1002A43F0();
  uint64_t v30 = (uint64_t)v27;
  return sub_10005802C(v30, type metadata accessor for DriverEvent);
}

        uint64_t v13 = __clz(__rbit64(v26)) + (v24 << 6);
      }
    }

  unint64_t v31 = *v38;
  *(void *)(*v38 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  uint64_t v32 = *(void *)(v31 + 48) + 24 * a4;
  *(void *)uint64_t v32 = v14;
  *(void *)(v32 + 8) = a2;
  *(_BYTE *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
  *(_BYTE *)(v32 + 17) = v37;
  uint64_t v33 = *(void *)(v31 + 16);
  unint64_t v34 = __OFADD__(v33, 1LL);
  unint64_t v35 = v33 + 1;
  if (v34) {
    __break(1u);
  }
  else {
    *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
  }
}

LABEL_27:
    dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
    v31((uint64_t)v46, a1);
    goto LABEL_30;
  }

  if (v48 <= 63) {
    goto LABEL_27;
  }
  uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v54 = v65;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v65, v46, a1);
  unint64_t v55 = sub_100024970();
  unint64_t v56 = v64;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v67, &type metadata for Int, v55, a1, v4);
  char v51 = dispatch thunk of static Comparable.< infix(_:_:)(v56, v54, a1, *(void *)(*(void *)(v4 + 32) + 8LL));
  v31((uint64_t)v56, a1);
  uint64_t v52 = v54;
LABEL_29:
  v31((uint64_t)v52, a1);
  if ((v51 & 1) != 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  __break(1u);
}

      uint64_t v18 = v23;
      if (v23 == v15)
      {
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v2);
        uint64_t v5 = v36;
        uint64_t v7 = v35;
        uint64_t v8 = v34;
        goto LABEL_5;
      }
    }

    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once(&qword_1004043B8, sub_100187378);
  }

      Swift::UInt v27 = _swiftEmptyArrayStorage[2];
      uint64_t v26 = _swiftEmptyArrayStorage[3];
      if (v27 >= v26 >> 1)
      {
        uint64_t v39 = v8;
        uint64_t v40 = v3;
        uint64_t v38 = v10;
        char v36 = v17;
        uint64_t v37 = *(_BYTE *)(*(void *)(v5 + 56) + v4);
        unint64_t v35 = v15;
        sub_1000698F0(v26 > 1, v27 + 1, 1);
        uint64_t v15 = v35;
        LOBYTE(v17) = v36;
        uint64_t v18 = v37;
        uint64_t v10 = v38;
        uint64_t v8 = v39;
        uint64_t v3 = v40;
        uint64_t v6 = v42;
        uint64_t v5 = a1;
        uint64_t v11 = a2;
      }

      _swiftEmptyArrayStorage[2] = v27 + 1;
      char v28 = &_swiftEmptyArrayStorage[v27];
      *((_DWORD *)v28 + 8) = v15;
      *((_BYTE *)v28 + 36) = v16;
      *((_BYTE *)v28 + 37) = v17;
      *((_BYTE *)v28 + 38) = v18;
      *((_BYTE *)v28 + 39) = v25 & 1;
      uint64_t v9 = *(_BYTE *)(v5 + 32);
      uint64_t v12 = 1LL << v9;
      if (v4 >= 1LL << v9) {
        goto LABEL_53;
      }
      char v29 = *(void *)(v8 + 8 * v13);
      if ((v29 & (1LL << v4)) == 0) {
        goto LABEL_54;
      }
      if (*(_DWORD *)(v5 + 36) != (_DWORD)v3) {
        goto LABEL_55;
      }
      uint64_t v30 = v29 & (-2LL << (v4 & 0x3F));
      if (v30)
      {
        uint64_t v12 = __clz(__rbit64(v30)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v31 = v13 + 1;
        uint64_t v32 = (v12 + 63) >> 6;
        if (v13 + 1 < v32)
        {
          uint64_t v33 = *(void *)(v8 + 8 * v31);
          if (!v33)
          {
            unint64_t v31 = v13 + 2;
            if (v13 + 2 >= v32) {
              goto LABEL_4;
            }
            uint64_t v33 = *(void *)(v8 + 8 * v31);
            if (!v33)
            {
              while (v32 - 3 != v13)
              {
                uint64_t v33 = *(void *)(v10 + 8 * v13++);
                if (v33)
                {
                  unint64_t v31 = v13 + 2;
                  goto LABEL_35;
                }
              }

              goto LABEL_4;
            }
          }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    unint64_t result = v17;
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    uint64_t v15 = (v21 - 1) & v21;
    uint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v2 + 72) * v18;
    sub_100057FE8(*(void *)(v5 + 48) + v19, (uint64_t)v4, type metadata accessor for AWDLPeer.AdvertisedService);
    unint64_t result = (void *)sub_100022628( (uint64_t)v4,  *(void *)(v7 + 48) + v19,  type metadata accessor for AWDLPeer.AdvertisedService);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v16)
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v24;
    goto LABEL_30;
  }

  uint64_t v21 = *(void *)(v9 + 8 * v22);
  if (v21)
  {
    uint64_t v12 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v9 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

      __break(1u);
      JUMPOUT(0x1001453B4LL);
    }

    uint64_t v5 = v10;
    goto LABEL_22;
  }

  __break(1u);
}

              uint64_t v16 = 1LL << *(_BYTE *)(v82 + 32);
              goto LABEL_28;
            }
          }

    uint64_t v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    uint64_t v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v19 = v18[1];
    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v40[0] = *v18;
    *((void *)&v40[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v32, v40, &type metadata for String, &type metadata for AnyHashable, 7LL);
    unint64_t v31 = v20;
    uint64_t v21 = sub_100002274((uint64_t *)&unk_100410510);
    swift_dynamicCast(v35, &v31, v21, &type metadata for Any[8], 7LL);
    char v36 = v32;
    uint64_t v37 = v33;
    uint64_t v38 = v34;
    sub_100022594(v35, v39);
    uint64_t v32 = v36;
    uint64_t v33 = v37;
    unint64_t v34 = v38;
    sub_100022594(v39, v40);
    sub_100022594(v40, &v36);
    unint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v22 = -1LL << *((_BYTE *)v3 + 32);
    uint64_t v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~v7[v23 >> 6]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v23) & ~v7[v23 >> 6])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        Swift::UInt v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        char v28 = v7[v24];
      }

      while (v28 == -1);
      uint64_t v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v32;
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
    *(void *)(v11 + 32) = v34;
    unint64_t result = (uint64_t)sub_100022594(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  uint64_t v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_100057324(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v30 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v30 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    uint64_t v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_100002AE4(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&uint64_t v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_100022594(v39, v33);
    unint64_t v34 = v30;
    unint64_t v35 = v31;
    char v36 = v32;
    sub_100022594(v33, v37);
    uint64_t v30 = v34;
    unint64_t v31 = v35;
    uint64_t v32 = v36;
    sub_100022594(v37, v38);
    sub_100022594(v38, &v34);
    unint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~v7[v22 >> 6]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        Swift::UInt v27 = v7[v23];
      }

      while (v27 == -1);
      uint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    unint64_t result = (uint64_t)sub_100022594(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  uint64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100057324(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      sub_10032B15C();
    }
  }

  sub_100241704(v15, a2 & 1);
  uint64_t v16 = sub_100327824(v10);
  if ((v3 & 1) == (v17 & 1))
  {
    uint64_t v12 = v16;
    goto LABEL_7;
  }

    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    char *v19 = *v17;
    v19[1] = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v17;
    *(_WORD *)(v19 + 4) = v18;
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 7 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = *(_BYTE *)(v17 + 6);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v17;
    *(_WORD *)(v20 + 4) = v18;
    *(_BYTE *)(v20 + 6) = v19;
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(_BYTE *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 17);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v21 = v19;
    *(void *)(v21 + 8) = v18;
    *(_BYTE *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    *(_BYTE *)(v21 + 17) = v17;
    unint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v5 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(*(void *)(v3 + 48) + v16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_30:
  uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
  v31((uint64_t)v27, a1);
  uint64_t v58 = v57 + 7;
  if (__OFADD__(v57, 7LL))
  {
    __break(1u);
    goto LABEL_35;
  }

  if (v58 < 0) {
    uint64_t v58 = v57 + 14;
  }
  return v58 & 0xFFFFFFFFFFFFFFF8LL;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    uint64_t v37 = sub_100002274(&qword_1004063D8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v11, 1LL, 1LL, v37);
    char v76 = 0LL;
LABEL_31:
    sub_1000586C0((uint64_t)v11, (uint64_t)v13, &qword_1004063D0);
    uint64_t v38 = sub_100002274(&qword_1004063D8);
    if ((*(unsigned int (**)(Swift::UInt8 *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48LL))(v13, 1LL, v38) == 1)
    {
      swift_release(v67);
      Hasher._combine(_:)(v78);
      return;
    }

    uint64_t v39 = (uint64_t)&v13[*(int *)(v38 + 48)];
    uint64_t v40 = *v13;
    uint64_t v41 = v3;
    char v42 = v13[1];
    int64_t v43 = v6;
    uint64_t v44 = v13[2];
    uint64_t v45 = v13[3];
    uint64_t v46 = v13[4];
    char v47 = v13[5];
    uint64_t v75 = v13[6];
    uint64_t v48 = v77;
    sub_100022628(v39, v77, type metadata accessor for NANInternetSharingStatistics.Requester);
    unint64_t v49 = *((void *)v73 + 8);
    __int128 v50 = v73[1];
    unint64_t v79 = *v73;
    unint64_t v80 = v50;
    char v51 = v73[3];
    uint64_t v81 = v73[2];
    uint64_t v82 = v51;
    uint64_t v83 = v49;
    Hasher._combine(_:)(v40);
    uint64_t v52 = v42;
    uint64_t v3 = v41;
    Hasher._combine(_:)(v52);
    uint64_t v53 = v44;
    uint64_t v6 = v43;
    Hasher._combine(_:)(v53);
    Hasher._combine(_:)(v45);
    Hasher._combine(_:)(v46);
    uint64_t v54 = v47;
    unint64_t v55 = v71;
    Hasher._combine(_:)(v54);
    Hasher._combine(_:)(v75);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v55 + 16))(v43, v48, v41);
    unint64_t v56 = (*(uint64_t (**)(uint64_t *, uint64_t))(v55 + 88))(v43, v41);
    if (v56 == v70)
    {
      (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v43, v41);
      uint64_t v19 = *v43;
      uint64_t v20 = 1000000000LL;
LABEL_5:
      uint64_t v21 = v19 * v20;
      uint64_t v22 = (unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63;
      uint64_t v23 = v19 <= 0;
      uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
      if (v23) {
        uint64_t v24 = 0x8000000000000000LL;
      }
      if (v22) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = v21;
      }
      uint64_t v13 = v68;
      uint64_t v11 = v69;
      goto LABEL_11;
    }

    if (v56 == v64)
    {
      (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v43, v41);
      uint64_t v19 = *v43;
      uint64_t v20 = 1000000LL;
      goto LABEL_5;
    }

    uint64_t v13 = v68;
    uint64_t v11 = v69;
    if (v56 == v62)
    {
      (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v43, v3);
      uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
      if (*v43 <= 0) {
        uint64_t v57 = 0x8000000000000000LL;
      }
      else {
        uint64_t v25 = v57;
      }
    }

    else if (v56 == v61)
    {
      (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v43, v3);
      uint64_t v25 = *v43;
    }

    else
    {
      if (v56 != v60) {
        (*(void (**)(uint64_t *, uint64_t))(v55 + 8))(v43, v3);
      }
      uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }

  if (v6 >= v7)
  {
    if (v5 >= 0xFE) {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
    }
    unint64_t v31 = *(unsigned __int8 *)(a1 + v9 + 1);
    if (v31 < 2) {
      return 0LL;
    }
    uint64_t v32 = (v31 + 2147483646) & 0x7FFFFFFF;
    return (v32 + 1);
  }

  a1 = (v18 + ((v17 + ((v14 + ((v12 + ((v12 + ((v12 + a1) & ~v11)) & ~v11)) & ~v11)) & ~v13)) & ~v16)) & ~v16;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  }
  char v29 = *(void *)(((a1 + v9) & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v29 >= 0xFFFFFFFF) {
    LODWORD(v29) = -1;
  }
  return (v29 + 1);
}

  unint64_t result = swift_release(v5);
  void *v3 = v7;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    swift_release(v1);
    return (uint64_t)v26;
  }

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

    swift_release(v4);
    return (uint64_t)v32;
  }

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

  char v42 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)(a2 + 147);
  *(_DWORD *)(a1 + 144) = v42;
  *(_BYTE *)(a1 + 151) = *(_BYTE *)(a2 + 151);
  return a1;
}

    swift_release(v1);
    return (uint64_t)v26;
  }

  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

    sub_10002255C(*((void *)a1 + 3), *((void *)a1 + 4));
    sub_10002255C(v15, v16);
    sub_100020B40(v13, v14);
    sub_100020B40(v15, v16);
    return 0LL;
  }

  if (v16 >> 60 != 15) {
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v19 = *((void *)a1 + 5);
  uint64_t v20 = *((void *)a1 + 6);
  uint64_t v21 = *((void *)a1 + 7);
  uint64_t v22 = *((void *)a2 + 5);
  uint64_t v23 = *((void *)a2 + 6);
  uint64_t v24 = *((void *)a2 + 7);
  if (v19 == 4LL)
  {
  }

  else if (v22 != 4LL)
  {
    sub_1001062A0(v19, v20, v21);
    sub_1001062A0(v22, v23, v24);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v20, v21);
    uint64_t v26 = v25;
    sub_1001062E0(v22, v23, v24);
    sub_1001062E0(v19, v20, v21);
    return (v26 & 1) != 0;
  }

  sub_1001062A0(v19, v20, v21);
  sub_1001062A0(v22, v23, v24);
  sub_1001062E0(v19, v20, v21);
  sub_1001062E0(v22, v23, v24);
  return 0LL;
}

                  uint64_t v37 = *(void *)(v3 + v31);
                  unint64_t v35 = v39;
                  uint64_t v54 = *(_DWORD *)(v37 + 36) == (_DWORD)v36;
                  char v36 = v38;
                  if (!v54)
                  {
LABEL_162:
                    __break(1u);
                    JUMPOUT(0x100250434LL);
                  }

                  continue;
                }

                goto LABEL_165;
              }
            }

            __break(1u);
LABEL_165:
            __break(1u);
            goto LABEL_166;
          }

          break;
        }

        swift_bridgeObjectRelease(v283);
        uint64_t v10 = v267;
        goto LABEL_4;
      case 3u:
        os_log_t v90 = *((_OWORD *)v281 + 3);
        uint64_t v297 = *((_OWORD *)v281 + 2);
        v298 = v90;
        uint64_t v299 = *((_OWORD *)v281 + 4);
        uint64_t v91 = *((_OWORD *)v281 + 1);
        uint64_t v295 = *(_OWORD *)v281;
        uint64_t v296 = v91;
        unint64_t v92 = NANAttribute.ServiceDescriptor.Control.type.getter(BYTE2(v91));
        unint64_t v93 = v296;
        if (v92 != 2)
        {
          __int16 v146 = (_OWORD *)swift_allocObject(&unk_1003F3A00, 96LL, 7LL);
          uint64_t v147 = v298;
          v146[3] = v297;
          v146[4] = v147;
          v146[5] = v299;
          uint64_t v148 = v296;
          v146[1] = v295;
          _OWORD v146[2] = v148;
          sub_1001D332C((uint64_t)&v295);
          sub_1001D332C((uint64_t)&v295);
          sub_100021018((uint64_t)v260, v261);
          uint64_t v149 = *(int *)(type metadata accessor for NANPeer(0LL) + 76);
          sub_1001D332C((uint64_t)&v295);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v149));
          __s1 = *(void **)(v3 + v149);
          char v151 = __s1;
          *(void *)(v3 + v149) = 0x8000000000000000LL;
          __int128 v153 = sub_100327958(v93);
          __int16 v154 = v151[2];
          __int128 v155 = (v152 & 1) == 0;
          __int16 v156 = v154 + v155;
          if (__OFADD__(v154, v155)) {
            goto LABEL_170;
          }
          __int128 v157 = v152;
          if (v151[3] >= v156)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10032ADA0();
              char v151 = __s1;
            }
          }

          else
          {
            sub_100241120(v156, isUniquelyReferenced_nonNull_native);
            char v151 = __s1;
            __int16 v158 = sub_100327958(v93);
            if ((v157 & 1) != (v159 & 1)) {
              goto LABEL_177;
            }
            __int128 v153 = v158;
          }

          uint64_t v174 = *(void *)(v3 + v149);
          *(void *)(v3 + v149) = v151;
          swift_bridgeObjectRelease(v174);
          uint64_t v175 = *(void **)(v3 + v149);
          char v293 = (unint64_t)v146;
          if ((v157 & 1) != 0)
          {
            sub_100111FB8((uint64_t)&v295);
            swift_bridgeObjectRetain(v175);
          }

          else
          {
            unint64_t v192 = v252;
            char *v252 = 0LL;
            v192[1] = 0LL;
            v192[2] = 0LL;
            __int128 v193 = (uint64_t)v254;
            v254[144] = -1;
            uint64_t v194 = v298;
            *(_OWORD *)(v193 + 32) = v297;
            *(_OWORD *)(v193 + 48) = v194;
            *(_OWORD *)(v193 + 64) = v299;
            v195 = v296;
            *(_OWORD *)__int128 v193 = v295;
            *(_OWORD *)(v193 + swift_unknownObjectWeakDestroy(v0 + 16) = v195;
            uint64_t v196 = v253;
            *uint64_t v253 = 0LL;
            v196[1] = 0LL;
            *(void *)(v193 + 96) = 5LL;
            type metadata accessor for P2PTimer(0LL);
            uint64_t v197 = v251;
            char *v251 = 0LL;
            v197[1] = 0LL;
            swift_bridgeObjectRetain(v175);
            variable initialization expression of AWDLPeer.lastUpdated();
            v175[(v153 >> 6) + 8] |= 1LL << v153;
            *(_BYTE *)(v175[6] + v153) = v93;
            sub_100022628(v193, v175[7] + *(void *)(v287 + 72) * v153, type metadata accessor for NANPeer.Service);
            uint64_t v198 = v175[2];
            uint64_t v143 = __OFADD__(v198, 1LL);
            unint64_t v199 = v198 + 1;
            if (v143) {
              goto LABEL_172;
            }
            v175[2] = v199;
          }

          uint64_t v200 = v175[7];
          swift_bridgeObjectRelease(v175);
          v201 = v200 + *(void *)(v287 + 72) * v153;
          uint64_t v202 = *(void *)v201;
          uint64_t v203 = *(void *)(v201 + 8);
          int v204 = *(void *)(v201 + 24);
          uint64_t v205 = *(void *)(v201 + 32);
          __int128 v206 = *(void *)(v201 + 40);
          uint64_t v207 = *(unsigned __int16 *)(v201 + 48) | (*(unsigned __int8 *)(v201 + 50) << 16);
          v208 = *(void *)(v201 + 56);
          uint64_t v209 = *(void *)(v201 + 64);
          int v210 = *(void *)(v201 + 72);
          sub_1001D332C((uint64_t)&v295);
          sub_1000208D8(v202, v203);
          swift_bridgeObjectRelease(v204);
          sub_1001062BC(v205, v206, v207);
          sub_1001062E0(v208, v209, v210);
          *(_OWORD *)v201 = v295;
          uint64_t v211 = v296;
          uint64_t v212 = v297;
          char v213 = v299;
          *(_OWORD *)(v201 + 48) = v298;
          *(_OWORD *)(v201 + 64) = v213;
          *(_OWORD *)(v201 + swift_unknownObjectWeakDestroy(v0 + 16) = v211;
          *(_OWORD *)(v201 + 32) = v212;
          type metadata accessor for P2PTimer(0LL);
          uint64_t v214 = v268;
          variable initialization expression of AWDLPeer.lastUpdated();
          (*(void (**)(uint64_t, char *, uint64_t))(v269 + 40))(v201 + *(int *)(v271 + 28), v214, v270);
          sub_100111FB8((uint64_t)&v295);
          sub_100111FB8((uint64_t)&v295);
          uint64_t v260 = sub_100255A6C;
          uint64_t v261 = v293;
LABEL_154:
          uint64_t v3 = v284;
          goto LABEL_155;
        }

        Class v94 = v262;
        Class v95 = swift_isUniquelyReferenced_nonNull_native(v262);
        __s1 = v94;
        uint64_t v97 = sub_100327958(v93);
        uint64_t v98 = v94[2];
        uint64_t v99 = (v96 & 1) == 0;
        uint64_t v100 = v98 + v99;
        if (__OFADD__(v98, v99)) {
          goto LABEL_169;
        }
        uint64_t v101 = v96;
        if (v94[3] >= v100)
        {
          if ((v95 & 1) == 0) {
            sub_10032AFD4();
          }
        }

        else
        {
          sub_100241454(v100, v95);
          uint64_t v102 = sub_100327958(v93);
          if ((v101 & 1) != (v103 & 1)) {
            goto LABEL_178;
          }
          uint64_t v97 = v102;
        }

        v173 = __s1;
        v262 = __s1;
        if ((v101 & 1) != 0)
        {
          *(_BYTE *)(__s1[7] + v97) = 1;
        }

        else
        {
          __s1[(v97 >> 6) + 8] |= 1LL << v97;
          *(_BYTE *)(v173[6] + v97) = v93;
          *(_BYTE *)(v173[7] + v97) = 1;
          uint64_t v176 = v173[2];
          uint64_t v143 = __OFADD__(v176, 1LL);
          uint64_t v177 = v176 + 1;
          if (v143) {
            goto LABEL_173;
          }
          v173[2] = v177;
        }

        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v178 = (_OWORD *)swift_allocObject(&unk_1003F3A28, 96LL, 7LL);
        uint64_t v179 = v298;
        v178[3] = v297;
        v178[4] = v179;
        v178[5] = v299;
        uint64_t v180 = v296;
        v178[1] = v295;
        v178[2] = v180;
        sub_1001D332C((uint64_t)&v295);
        sub_1001D332C((uint64_t)&v295);
        sub_100021018((uint64_t)v258, (uint64_t)v259);
        uint64_t v181 = *(int *)(type metadata accessor for NANPeer(0LL) + 76);
        uint64_t v182 = swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v181));
        __s1 = *(void **)(v3 + v181);
        uint64_t v183 = __s1;
        *(void *)(v3 + v181) = 0x8000000000000000LL;
        __int16 v185 = sub_100327958(v93);
        uint64_t v186 = v183[2];
        uint64_t v187 = (v184 & 1) == 0;
        uint64_t v188 = v186 + v187;
        if (__OFADD__(v186, v187)) {
          goto LABEL_171;
        }
        uint64_t v189 = v184;
        if (v183[3] >= v188)
        {
          if ((v182 & 1) == 0)
          {
            sub_10032ADA0();
            uint64_t v183 = __s1;
          }
        }

        else
        {
          sub_100241120(v188, v182);
          uint64_t v183 = __s1;
          uint64_t v190 = sub_100327958(v93);
          if ((v189 & 1) != (v191 & 1))
          {
LABEL_177:
            sub_100111FB8((uint64_t)&v295);
LABEL_178:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt8);
            __break(1u);
            JUMPOUT(0x100250520LL);
          }

          __int16 v185 = v190;
        }

        int v215 = *(void *)(v3 + v181);
        *(void *)(v3 + v181) = v183;
        swift_bridgeObjectRelease(v215);
        uint64_t v216 = *(void **)(v3 + v181);
        if ((v189 & 1) != 0)
        {
          sub_100111FB8((uint64_t)&v295);
          swift_bridgeObjectRetain(v216);
        }

        else
        {
          v217 = v252;
          char *v252 = 0LL;
          v217[1] = 0LL;
          v217[2] = 0LL;
          uint64_t v218 = (uint64_t)v254;
          v254[144] = -1;
          v219 = v298;
          *(_OWORD *)(v218 + 32) = v297;
          *(_OWORD *)(v218 + 48) = v219;
          *(_OWORD *)(v218 + 64) = v299;
          uint64_t v220 = v296;
          *(_OWORD *)uint64_t v218 = v295;
          *(_OWORD *)(v218 + swift_unknownObjectWeakDestroy(v0 + 16) = v220;
          uint64_t v221 = v253;
          *uint64_t v253 = 0LL;
          v221[1] = 0LL;
          *(void *)(v218 + 96) = 5LL;
          type metadata accessor for P2PTimer(0LL);
          uint64_t v222 = v251;
          char *v251 = 0LL;
          v222[1] = 0LL;
          swift_bridgeObjectRetain(v216);
          variable initialization expression of AWDLPeer.lastUpdated();
          v216[(v185 >> 6) + 8] |= 1LL << v185;
          *(_BYTE *)(v216[6] + v185) = v93;
          sub_100022628(v218, v216[7] + *(void *)(v287 + 72) * v185, type metadata accessor for NANPeer.Service);
          uint64_t v223 = v216[2];
          uint64_t v143 = __OFADD__(v223, 1LL);
          v224 = v223 + 1;
          if (v143) {
            goto LABEL_174;
          }
          v216[2] = v224;
        }

        uint64_t v12 = v279;
        uint64_t v225 = v216[7];
        swift_bridgeObjectRelease(v216);
        uint64_t v226 = v225 + *(void *)(v287 + 72) * v185;
        type metadata accessor for P2PTimer(0LL);
        uint64_t v227 = v268;
        variable initialization expression of AWDLPeer.lastUpdated();
        (*(void (**)(uint64_t, char *, uint64_t))(v269 + 40))(v226 + *(int *)(v271 + 28), v227, v270);
        sub_100111FB8((uint64_t)&v295);
        uint64_t v258 = sub_100254F1C;
        uint64_t v259 = v178;
        goto LABEL_4;
      case 4u:
        uint64_t v17 = *(_WORD *)v281;
        uint64_t v18 = *(int *)(type metadata accessor for NANPeer(0LL) + 48);
        goto LABEL_3;
      case 0xBu:
        uint64_t v17 = *(_WORD *)v281;
        uint64_t v18 = *(int *)(type metadata accessor for NANPeer(0LL) + 44);
LABEL_3:
        uint64_t v19 = v3 + v18;
        *(_WORD *)uint64_t v19 = v17;
        *(_BYTE *)(v19 + 2) = 0;
        goto LABEL_4;
      case 0xEu:
        uint64_t v67 = *v281;
        int64_t v68 = *((unsigned __int16 *)v281 + 1);
        BOOL v69 = *((unsigned int *)v281 + 1);
        uint64_t v70 = v281[8];
        os_log_t v71 = v281[9];
        Class v72 = v281[10];
        uint64_t v73 = *((void *)v281 + 2);
        uint64_t v74 = *((void *)v281 + 3);
        char v293 = *((void *)v281 + 4);
        uint64_t v75 = v262;
        if (!v262[2] || (char v76 = sub_100327958(v67), (v77 & 1) == 0) || (*(_BYTE *)(v75[7] + v76) & 1) == 0)
        {
          type metadata accessor for NANPeer(0LL);
          uint64_t v125 = sub_1002E9C38(&__s1, v67);
          int v127 = v126;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v287 + 48))(v126, 1LL, v271))
          {
            ((void (*)(void **, void))v125)(&__s1, 0LL);
            uint64_t v128 = v73;
            uint64_t v129 = v74;
            char v130 = v293;
LABEL_153:
            sub_1001062E0(v128, v129, v130);
            goto LABEL_154;
          }

          uint64_t v160 = v67 | (v68 << 16) | (v69 << 32);
          unint64_t v161 = 0x10000LL;
          if (!v72) {
            unint64_t v161 = 0LL;
          }
          uint64_t v162 = v70 | (v71 << 8) | v161;
          uint64_t v163 = *(void *)(v127 + 80);
          uint64_t v164 = *(void *)(v127 + 88);
          uint64_t v165 = *(void *)(v127 + 96);
          uint64_t v166 = *(void *)(v127 + 104);
          uint64_t v291 = *(void *)(v127 + 112);
          uint64_t v292 = v165;
          *(void *)(v127 + 80) = v160;
          *(void *)(v127 + 88) = v162;
          unint64_t v167 = v73;
          *(void *)(v127 + 96) = v73;
          *(void *)(v127 + 104) = v74;
          v168 = v293;
          *(void *)(v127 + 112) = v293;
          uint64_t v169 = v165;
          v290 = (uint64_t)v125;
          if (v165 == 5LL)
          {
LABEL_113:
            uint64_t v170 = *(void *)(v127 + 64);
            uint64_t v171 = *(void *)(v127 + 72);
            unint64_t v278 = *(unint64_t **)(v127 + 56);
            uint64_t v172 = v278;
            v289 = v163;
            uint64_t v288 = v164;
            v286 = v166;
            unint64_t v276 = v171;
            if (v278 == 4LL)
            {
              uint64_t v172 = 0LL;
              uint64_t v282 = 0LL;
              __int128 v277 = 0LL;
              LODWORD(v283) = 255;
            }

            else
            {
              LODWORD(v283) = 1;
              uint64_t v282 = v170;
              __int128 v277 = v171;
            }

            uint64_t v238 = *(void *)(v127 + 120);
            uint64_t v237 = *(void *)(v127 + 128);
            uint64_t v239 = *(void *)(v127 + 136);
            unint64_t v240 = *(_BYTE *)(v127 + 144);
            sub_1001062A0(v167, v74, v168);
            sub_1001062A0((uint64_t)v278, v170, v276);
            sub_100254B88(v238, v237, v239, v240);
            uint64_t v241 = v282;
            *(void *)(v127 + 120) = v172;
            *(void *)(v127 + 128) = v241;
            *(void *)(v127 + 136) = v277;
            *(_BYTE *)(v127 + 144) = v283;
            uint64_t v163 = v289;
            uint64_t v164 = v288;
            uint64_t v166 = v286;
LABEL_151:
            unint64_t v242 = v291;
          }

          else
          {
            if ((v164 & 0x10000) == 0)
            {
              uint64_t v283 = BYTE1(v164);
              uint64_t v230 = *(void *)(v127 + 120);
              uint64_t v231 = *(void *)(v127 + 128);
              unint64_t v232 = v166;
              v233 = *(void *)(v127 + 136);
              LODWORD(v282) = *(unsigned __int8 *)(v127 + 144);
              sub_1001062A0(v167, v74, v168);
              uint64_t v234 = v233;
              uint64_t v166 = v232;
              sub_100254B88(v230, v231, v234, v282);
              *(void *)(v127 + 128) = 0LL;
              *(void *)(v127 + 136) = 0LL;
              *(void *)(v127 + 120) = v283;
              *(_BYTE *)(v127 + 144) = 0;
              goto LABEL_151;
            }

            uint64_t v244 = *(void *)(v127 + 128);
            uint64_t v283 = *(void *)(v127 + 120);
            uint64_t v282 = *(void *)(v127 + 136);
            LODWORD(v278) = *(unsigned __int8 *)(v127 + 144);
            sub_1001062A0(v167, v74, v168);
            uint64_t v245 = v291;
            sub_100254E90(v163, v164, v292, v166, v291);
            sub_100254B88(v283, v244, v282, v278);
            *(void *)(v127 + 120) = v169;
            *(void *)(v127 + 128) = v166;
            unint64_t v242 = v245;
            *(void *)(v127 + 136) = v245;
            *(_BYTE *)(v127 + 144) = 1;
          }

          type metadata accessor for P2PTimer(0LL);
          v243 = v268;
          variable initialization expression of AWDLPeer.lastUpdated();
          (*(void (**)(uint64_t, char *, uint64_t))(v269 + 40))(v127 + *(int *)(v271 + 28), v243, v270);
          sub_100111F98(v163, v164, v292, v166, v242);
          ((void (*)(void **, void))v290)(&__s1, 0LL);
          uint64_t v128 = v167;
          uint64_t v129 = v74;
          char v130 = v168;
          goto LABEL_153;
        }

        type metadata accessor for NANPeer(0LL);
        uint64_t v3 = v284;
        uint64_t v78 = sub_1002E9C38(&__s1, v67);
        unint64_t v80 = v79;
        uint64_t v81 = v271;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v287 + 48))(v79, 1LL, v271))
        {
          type metadata accessor for P2PTimer(0LL);
          uint64_t v82 = v268;
          variable initialization expression of AWDLPeer.lastUpdated();
          (*(void (**)(uint64_t, char *, uint64_t))(v269 + 40))(v80 + *(int *)(v81 + 28), v82, v270);
        }

        ((void (*)(void **, void))v78)(&__s1, 0LL);
        sub_1001062E0(v73, v74, v293);
LABEL_155:
        uint64_t v10 = v267;
        uint64_t v12 = v279;
LABEL_4:
        uint64_t v16 = v280;
        break;
      case 0xFu:
        uint64_t v85 = *((_WORD *)v281 + 4);
        uint64_t v86 = v281[10];
        unint64_t v87 = 256LL;
        if (!v281[1]) {
          unint64_t v87 = 0LL;
        }
        unint64_t v88 = v87 | *v281 | ((unint64_t)*((unsigned __int16 *)v281 + 1) << 16) | ((unint64_t)v281[4] << 32) | ((unint64_t)v281[5] << 40) | ((unint64_t)v281[6] << 48);
        uint64_t v89 = v3 + *(int *)(type metadata accessor for NANPeer(0LL) + 52);
        *(void *)uint64_t v89 = v88;
        *(_BYTE *)(v89 + 10) = v86;
        *(_WORD *)(v89 + 8) = v85;
        *(_BYTE *)(v89 + 11) = 0;
        goto LABEL_4;
      case 0x11u:
        swift_bridgeObjectRelease(*((void *)v281 + 1));
        if ((swift_isUniquelyReferenced_nonNull_native(v263) & 1) == 0) {
          unint64_t v263 = sub_1000A66F4(0LL, v263[2] + 1LL, 1, v263);
        }
        uint64_t v57 = v263[2];
        unint64_t v56 = v263[3];
        if (v57 >= v56 >> 1) {
          unint64_t v263 = sub_1000A66F4((void *)(v56 > 1), v57 + 1, 1, v263);
        }
        uint64_t v58 = v263;
        v263[2] = v57 + 1;
        v58[v57 + 4] = v29;
        goto LABEL_4;
      case 0x14u:
        uint64_t v83 = *v281 | (*((unsigned __int16 *)v281 + 1) << 16);
        uint64_t v84 = v3 + *(int *)(type metadata accessor for NANPeer(0LL) + 56);
        *(_DWORD *)uint64_t v84 = v83;
        *(_BYTE *)(v84 + 4) = 0;
        goto LABEL_4;
      case 0x1Au:
        uint64_t v106 = *v281;
        uint64_t v107 = v281[1];
        char v293 = v281[2];
        uint64_t v108 = v281[3];
        uint64_t v109 = v281[4];
        uint64_t v110 = v281[5];
        uint64_t v292 = v281[6];
        uint64_t v291 = v281[7];
        uint64_t v111 = v281[8];
        char v112 = v281[9];
        v289 = v281[10];
        v286 = v281[11];
        LODWORD(v282) = v281[12];
        v290 = v281[13];
        uint64_t v288 = v281[14];
        uint64_t v283 = v281[15];
        uint64_t v113 = *((unsigned __int16 *)v281 + 8);
        Class v114 = *((unsigned __int16 *)v281 + 9);
        uint64_t v115 = v3 + *(int *)(type metadata accessor for NANPeer(0LL) + 68);
        uint64_t v116 = v106 | (v107 << 8);
        __int128 v117 = *(void *)(v115 + 8);
        uint64_t v118 = v111 | (v112 << 8);
        uint64_t v119 = v113 | (v114 << 16);
        uint64_t v120 = v108;
        if ((v117 & 0xFF00000000LL) != 0x200000000LL)
        {
          os_log_t v121 = &_mh_execute_header;
          if (!(_DWORD)v282) {
            os_log_t v121 = 0LL;
          }
          if ((static NANAttribute.ExtendedWLANInfrastructure.__derived_struct_equals(_:_:)( *(void *)v115,  v117 & 0xFFFFFF01FFFFFFFFLL,  *(_DWORD *)(v115 + 16),  v116 | (v293 << 16) | (v108 << 24) | (v109 << 32) | (v110 << 40) | (v292 << 48) | (v291 << 56),  v118 | (v289 << 16) | (v286 << 24) | (unint64_t)v121 | (v290 << 40) | (v288 << 48) | (v283 << 56),  v119) & 1) != 0)
          {
            uint64_t v12 = v279;
            uint64_t v10 = v267;
            goto LABEL_147;
          }
        }

        char v131 = v257;
        uint64_t v12 = v279;
        uint64_t v10 = v267;
        if (!*(void *)(v257 + 16)) {
          goto LABEL_147;
        }
        LODWORD(v278) = v119;
        os_log_t v132 = sub_100327790(30);
        if ((v133 & 1) == 0) {
          goto LABEL_146;
        }
        unint64_t v276 = v110;
        __int128 v277 = v120;
        uint64_t v134 = *(void *)(*(void *)(v131 + 56) + 8 * v132);
        uint64_t v135 = v134 + 64;
        __int128 v136 = 1LL << *(_BYTE *)(v134 + 32);
        if (v136 < 64) {
          uint64_t v137 = ~(-1LL << v136);
        }
        else {
          uint64_t v137 = -1LL;
        }
        uint64_t v138 = v137 & *(void *)(v134 + 64);
        char v139 = (unint64_t)(v136 + 63) >> 6;
        swift_bridgeObjectRetain_n(*(void *)(*(void *)(v131 + 56) + 8 * v132), 2LL);
        char v140 = 0LL;
        while (2)
        {
          if (v138)
          {
            uint64_t v141 = __clz(__rbit64(v138));
            v138 &= v138 - 1;
            __int128 v142 = v141 | (v140 << 6);
LABEL_84:
            (*(void (**)(void))(*(void *)(v134 + 56) + 16 * v142))();
            continue;
          }

          break;
        }

        uint64_t v143 = __OFADD__(v140++, 1LL);
        if (v143)
        {
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
          goto LABEL_175;
        }

        if (v140 < v139)
        {
          __int128 v144 = *(void *)(v135 + 8 * v140);
          uint64_t v10 = v267;
          if (!v144)
          {
            __int128 v145 = v140 + 1;
            if (v140 + 1 >= v139) {
              goto LABEL_145;
            }
            __int128 v144 = *(void *)(v135 + 8 * v145);
            if (!v144)
            {
              __int128 v145 = v140 + 2;
              if (v140 + 2 >= v139) {
                goto LABEL_145;
              }
              __int128 v144 = *(void *)(v135 + 8 * v145);
              if (!v144)
              {
                __int128 v145 = v140 + 3;
                if (v140 + 3 >= v139) {
                  goto LABEL_145;
                }
                __int128 v144 = *(void *)(v135 + 8 * v145);
                if (!v144)
                {
                  __int128 v145 = v140 + 4;
                  if (v140 + 4 >= v139) {
                    goto LABEL_145;
                  }
                  __int128 v144 = *(void *)(v135 + 8 * v145);
                  if (!v144)
                  {
                    __int128 v145 = v140 + 5;
                    if (v140 + 5 >= v139) {
                      goto LABEL_145;
                    }
                    __int128 v144 = *(void *)(v135 + 8 * v145);
                    if (!v144)
                    {
                      while (1)
                      {
                        char v140 = v145 + 1;
                        if (__OFADD__(v145, 1LL)) {
                          break;
                        }
                        if (v140 >= v139) {
                          goto LABEL_145;
                        }
                        __int128 v144 = *(void *)(v135 + 8 * v140);
                        ++v145;
                        if (v144) {
                          goto LABEL_100;
                        }
                      }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Channel);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

    __break(1u);
    return result;
  }

  sub_10001E720(0xD000000000000019LL, 0x800000010036AC90LL, &v65);
  sub_1000225EC((uint64_t)&v65, &qword_100405280);
  uint64_t v41 = v71;
LABEL_31:
  uint64_t v46 = *(void *)&v9[v3[20]];
  char v47 = swift_bridgeObjectRetain(v46);
  sub_10030318C(v47);
  unint64_t v49 = v48;
  swift_bridgeObjectRelease(v46);
  uint64_t v66 = (void *)sub_100002274((uint64_t *)&unk_100410510);
  *(void *)&uint64_t v65 = v49;
  sub_100022594(&v65, v64);
  __int128 v50 = swift_isUniquelyReferenced_nonNull_native(v41);
  uint64_t v63 = v41;
  sub_10001EDDC(v64, 0xD000000000000015LL, 0x800000010036ACB0LL, v50);
  char v51 = v63;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v52 = &v9[v3[16]];
  if ((v52[2] & 1) != 0) {
    LOBYTE(v53) = 0;
  }
  else {
    uint64_t v53 = 0x1008040201uLL >> (8 * AWDLActionFrame.Version.platformType.getter(*(_WORD *)v52));
  }
  uint64_t v66 = &type metadata for UInt8;
  LOBYTE(v65) = v53;
  sub_100022594(&v65, v64);
  uint64_t v54 = swift_isUniquelyReferenced_nonNull_native(v51);
  uint64_t v63 = v51;
  sub_10001EDDC(v64, 0xD000000000000015LL, 0x800000010036ACD0LL, v54);
  unint64_t v55 = v63;
  os_log_t v71 = v63;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if ((v52[2] & 1) != 0)
  {
    sub_10001E720(0xD000000000000014LL, 0x8000000100365C30LL, &v65);
    sub_1000225EC((uint64_t)&v65, &qword_100405280);
    unint64_t v56 = v71;
  }

  else
  {
    uint64_t v57 = *v52;
    uint64_t v66 = &type metadata for UInt8;
    LOBYTE(v65) = v57;
    sub_100022594(&v65, v64);
    uint64_t v58 = swift_isUniquelyReferenced_nonNull_native(v55);
    uint64_t v63 = v55;
    sub_10001EDDC(v64, 0xD000000000000014LL, 0x8000000100365C30LL, v58);
    unint64_t v56 = v63;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v59 = v62;
  unint64_t result = sub_10005802C((uint64_t)v9, type metadata accessor for AWDLPeer);
  *uint64_t v59 = v56;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

unint64_t sub_100024970()
{
  unint64_t result = qword_100405170;
  if (!qword_100405170)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100405170);
  }

  return result;
}

uint64_t FixedWidthInteger.retryText.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void *)(v5[3] + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  a1,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, a1, v5[1]);
  v15._countAndFlagsBits = 32LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a1, v5) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(a1, v5) >= 64)
    {
      uint64_t v32 = 1LL;
      unint64_t v24 = sub_100024970();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v32, &type metadata for Int, v24, a1, v5);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v2, v14, a1, *(void *)(v5[2] + 8LL));
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a1);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v2, a1);
    uint64_t v16 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a1);
    goto LABEL_11;
  }

  uint64_t v31 = v10;
  char v17 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v5);
  uint64_t v18 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v5);
  if ((v17 & 1) == 0)
  {
    if (v18 < 64)
    {
      uint64_t v25 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v14, v2, a1);
      uint64_t v16 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v5);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v14, a1);
LABEL_11:
      char v23 = v16 == 1;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v18 > 64)
  {
LABEL_12:
    uint64_t v32 = 1LL;
    unint64_t v26 = sub_100024970();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v32, &type metadata for Int, v26, a1, v5);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v2, v14, a1, *(void *)(v5[2] + 8LL));
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, a1);
    goto LABEL_13;
  }

  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  a1,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v9, a1, v6);
  char v20 = dispatch thunk of static Comparable.>= infix(_:_:)(v2, v14, a1, *(void *)(v5[4] + 8LL));
  uint64_t v21 = v31;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v31 + 8);
  v22(v14, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v3, a1);
  char v23 = (v20 & 1) != 0 && dispatch thunk of BinaryInteger._lowWord.getter(a1, v5) == 1;
  v22(v12, a1);
LABEL_13:
  if ((v23 & 1) != 0) {
    uint64_t v27 = 0x7972746572LL;
  }
  else {
    uint64_t v27 = 0x73656972746572LL;
  }
  if ((v23 & 1) != 0) {
    unint64_t v28 = 0xE500000000000000LL;
  }
  else {
    unint64_t v28 = 0xE700000000000000LL;
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease(v28);
  return v33;
}

uint64_t UnsafeMutablePointer<A>.set<A>(bit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v99 = a2;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t v94 = *(void *)(*(void *)(v6 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v94,  a3,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  unint64_t v93 = (char *)&v90 - v7;
  uint64_t v8 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v91 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v103 = (char *)&v90 - v10;
  __chkstk_darwin();
  uint64_t v100 = (char *)&v90 - v11;
  __chkstk_darwin();
  uint64_t v96 = (char *)&v90 - v12;
  __chkstk_darwin();
  uint64_t v14 = (char *)&v90 - v13;
  __chkstk_darwin();
  Class v95 = (char *)&v90 - v15;
  __chkstk_darwin();
  uint64_t v101 = (char *)&v90 - v16;
  __chkstk_darwin();
  uint64_t v104 = (char *)&v90 - v17;
  __chkstk_darwin();
  uint64_t v105 = (char *)&v90 - v18;
  __chkstk_darwin();
  uint64_t v20 = (uint64_t)&v90 - v19;
  __chkstk_darwin();
  uint64_t v98 = (char *)&v90 - v21;
  __chkstk_darwin();
  uint64_t v23 = (uint64_t)&v90 - v22;
  __chkstk_darwin();
  uint64_t v25 = (char *)&v90 - v24;
  __chkstk_darwin();
  uint64_t v27 = (char *)&v90 - v26;
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v102 = a1;
  v28((char *)&v90 - v26, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  v28(v25, (uint64_t)v27, a3);
  uint64_t v97 = v8;
  if ((a1 & 1) == 0)
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v31 = v25;
LABEL_7:
    v30(v31, a3);
    goto LABEL_8;
  }

  uint64_t v29 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v25, a3);
  if (v29 <= 64)
  {
LABEL_8:
    uint64_t v32 = v105;
    goto LABEL_9;
  }

  v28((char *)v23, (uint64_t)v27, a3);
  int64_t v107 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
    char v67 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v67 & 1) != 0)
    {
      if (v68 <= 64) {
        goto LABEL_63;
      }
LABEL_46:
      unint64_t v69 = sub_100024970();
      uint64_t v70 = v98;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v69, a3, v6);
      uint64_t v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v70, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v30(v70, a3);
      v30((char *)v23, a3);
      uint64_t v32 = v105;
      if ((v57 & 1) == 0) {
        goto LABEL_9;
      }
LABEL_71:
      __break(1u);
LABEL_72:
      v30((char *)v57, a3);
      __break(1u);
      goto LABEL_73;
    }

    if (v68 < 64) {
      goto LABEL_54;
    }
    uint64_t v31 = (char *)v23;
    goto LABEL_7;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64) {
    goto LABEL_46;
  }
LABEL_54:
  uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  v30((char *)v23, a3);
  uint64_t v32 = v105;
  if (v57 < v107) {
    goto LABEL_71;
  }
  while (1)
  {
LABEL_9:
    uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v28((char *)v20, (uint64_t)v27, a3);
    if (v33 < 65)
    {
      uint64_t v40 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
      v30((char *)v20, a3);
      if (v40 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0) {
        goto LABEL_22;
      }
    }

    else
    {
      v30((char *)v20, a3);
    }

    v28(v32, (uint64_t)v27, a3);
    int64_t v107 = 0x7FFFFFFFFFFFFFFFLL;
    char v34 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v35 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v34 & 1) != 0)
    {
      if (v35 > 64)
      {
        unint64_t v36 = sub_100024970();
        uint64_t v37 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v36, a3, v6);
        char v38 = dispatch thunk of static Comparable.< infix(_:_:)(v37, v32, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v30(v37, a3);
        uint64_t v39 = v32;
        goto LABEL_21;
      }

LABEL_62:
    __break(1u);
LABEL_63:
    uint64_t v80 = AssociatedTypeWitness;
    uint64_t v81 = swift_getAssociatedConformanceWitness( v94,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100339A38, 256LL, v80, v81);
    uint64_t v82 = v98;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v93, a3, v94);
    uint64_t v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v82, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
    v30(v82, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v14, v23, a3);
    if ((v57 & 1) != 0) {
      goto LABEL_70;
    }
    int64_t v83 = v107;
    uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v14, a3);
    uint64_t v32 = v105;
    if (v57 < v83) {
      goto LABEL_71;
    }
  }

  if (v72 < 64)
  {
    unint64_t v79 = v96;
    uint64_t v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    __int128 v50 = v79;
LABEL_61:
    v30(v50, a3);
    if (v20 >= v107) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }

  v30(v96, a3);
LABEL_28:
  uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  uint64_t v52 = v100;
  v28(v100, (uint64_t)v14, a3);
  if (v51 >= 65)
  {
    v30(v52, a3);
    goto LABEL_30;
  }

  uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v30(v52, a3);
  if (v60 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
LABEL_30:
    v28(v27, (uint64_t)v14, a3);
    int64_t v107 = 0x7FFFFFFFFFFFFFFFLL;
    char v53 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v53 & 1) != 0)
    {
      if (v54 > 64)
      {
        unint64_t v55 = sub_100024970();
        unint64_t v56 = v98;
        uint64_t v57 = a3;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v55, a3, v6);
        char v58 = dispatch thunk of static Comparable.< infix(_:_:)(v56, v27, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v30(v56, a3);
        uint64_t v59 = v27;
LABEL_39:
        v30(v59, a3);
        if ((v58 & 1) == 0) {
          goto LABEL_40;
        }
        __break(1u);
LABEL_70:
        v30(v14, a3);
        goto LABEL_71;
      }
    }

    else if (v54 > 63)
    {
      uint64_t v106 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v61 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v27, a3);
      unint64_t v62 = sub_100024970();
      uint64_t v63 = v95;
      uint64_t v57 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v62, a3, v6);
      char v58 = dispatch thunk of static Comparable.< infix(_:_:)(v63, v61, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v30(v63, a3);
      uint64_t v59 = v61;
      goto LABEL_39;
    }

    dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
  }

    __break(1u);
LABEL_63:
    uint64_t v94 = AssociatedTypeWitness;
    Class v95 = swift_getAssociatedConformanceWitness( v108,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100339A38, 256LL, v94, v95);
    uint64_t v96 = v112;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v107, a3, v108);
    char v71 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v96, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
    v44(v96, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v20, v36, a3);
    if ((v71 & 1) != 0) {
      goto LABEL_70;
    }
    uint64_t v97 = v121;
    char v71 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v44(v20, a3);
    uint64_t v46 = v119;
    if (v71 < v97) {
      goto LABEL_71;
    }
  }

  if (v86 < 64)
  {
    unint64_t v93 = v110;
    uint64_t v31 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    uint64_t v64 = v93;
LABEL_61:
    v44(v64, a3);
    if (v31 >= v121) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }

  v44(v110, a3);
LABEL_28:
  uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  uint64_t v66 = v114;
  v42(v114, (uint64_t)v20, a3);
  if (v65 >= 65)
  {
    v44(v66, a3);
    goto LABEL_30;
  }

  uint64_t v74 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v44(v66, a3);
  if (v74 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
LABEL_30:
    v42(v41, (uint64_t)v20, a3);
    os_log_t v121 = 0x7FFFFFFFFFFFFFFFLL;
    char v67 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v67 & 1) != 0)
    {
      if (v68 > 64)
      {
        unint64_t v69 = sub_100024970();
        uint64_t v70 = v112;
        char v71 = a3;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v121, &type metadata for Int, v69, a3, v6);
        uint64_t v72 = dispatch thunk of static Comparable.< infix(_:_:)(v70, v41, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v44(v70, a3);
        unint64_t v73 = v41;
LABEL_39:
        v44(v73, a3);
        if ((v72 & 1) == 0) {
          goto LABEL_40;
        }
        __break(1u);
LABEL_70:
        v44(v20, a3);
        goto LABEL_71;
      }
    }

    else if (v68 > 63)
    {
      uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
      char v75 = v112;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v112, v41, a3);
      unint64_t v76 = sub_100024970();
      char v77 = v109;
      char v71 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v120, &type metadata for Int, v76, a3, v6);
      uint64_t v72 = dispatch thunk of static Comparable.< infix(_:_:)(v77, v75, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v77, a3);
      unint64_t v73 = v75;
      goto LABEL_39;
    }

    dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v44(v41, a3);
  }

LABEL_40:
  uint64_t v64 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v14, a3);
  uint64_t v66 = v64 & 7;
  if (v64 <= 0) {
    uint64_t v66 = -(-v64 & 7);
  }
  if ((v66 & 0x8000000000000000LL) == 0)
  {
    *(_BYTE *)(v99 + v23 / 8) |= 1 << v66;
    return result;
  }

  uint64_t v78 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(v20, a3);
  uint64_t v80 = v78 & 7;
  if (v78 <= 0) {
    uint64_t v80 = -(-v78 & 7);
  }
  if ((v80 & 0x8000000000000000LL) == 0)
  {
    *(_BYTE *)(v113 + v36 / 8) &= (-1 << v80) - 1;
    return result;
  }

      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    uint64_t v32 = 0x300000000LL;
LABEL_41:
    unint64_t v36 = _swiftEmptyArrayStorage[2];
    uint64_t v35 = _swiftEmptyArrayStorage[3];
    if (v36 >= v35 >> 1) {
      sub_100069808(v35 > 1, v36 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v36 + 1;
    uint64_t v37 = &_swiftEmptyArrayStorage[v36];
    *((_DWORD *)v37 + 8) = v32;
    *((_WORD *)v37 + 18) = WORD2(v32);
    if (v41 < v5) {
      goto LABEL_50;
    }
    if (v6 == v39) {
      goto LABEL_51;
    }
    ++v6;
    uint64_t v3 = v38;
    if (v6 == v40) {
      return;
    }
  }

  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v27 = *(void *)(v7 + 16);
    if (v21 < v27) {
      sub_10019EB3C(v7, v7 + 32, v21, (2 * v27) | 1);
    }
LABEL_5:
    ++v4;
    swift_bridgeObjectRelease(v7);
    if (v4 == v3) {
      return (uint64_t)v29;
    }
  }

  uint64_t v23 = v5;
  uint64_t v24 = 0LL;
  uint64_t v25 = v21 - 1;
  while ((v22 & ~(v22 >> 63)) != v24)
  {
    if (v24 >= *(void *)(v7 + 16)) {
      goto LABEL_50;
    }
    uint64_t v26 = *(_BYTE *)(v7 + 32 + v24);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10019EA0C(v8);
      uint64_t v8 = (void *)result;
    }

    uint64_t v21 = v8[2];
    if (v24 >= v21) {
      goto LABEL_51;
    }
    *((_BYTE *)v8 + v24 + 32) |= v26;
    if (v25 != v24 && v22 != ++v24) {
      continue;
    }
    uint64_t v29 = v8;
    uint64_t v5 = v23;
    uint64_t v3 = v28;
    goto LABEL_40;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_73:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
      __break(1u);
      return;
    }

    unint64_t v76 = v182;
    swift_beginAccess(v182, &v190, 33LL, 0LL);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v76);
    uint64_t v189 = *v76;
    char v77 = v189;
    *unint64_t v76 = 0x8000000000000000LL;
    uint64_t v51 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
    unint64_t v79 = *(void *)(v77 + 16);
    uint64_t v80 = (v78 & 1) == 0;
    uint64_t v81 = v79 + v80;
    if (__OFADD__(v79, v80)) {
      goto LABEL_61;
    }
    uint64_t v82 = v78;
    if (*(void *)(v77 + 24) >= v81)
    {
      char v47 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10032BCD8(type metadata accessor for AWDLPeer, &qword_10040CCB8);
      }
    }

    else
    {
      sub_100240434(v81, isUniquelyReferenced_nonNull_native);
      int64_t v83 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
      if ((v82 & 1) != (v84 & 1)) {
        goto LABEL_73;
      }
      uint64_t v51 = v83;
      char v47 = v60;
    }

    int isUniquelyReferenced_nonNull_native = (uint64_t)v177;
    if ((v82 & 1) != 0)
    {
      uint64_t v86 = v160;
      sub_100022628(*(void *)(v189 + 56) + *(void *)(v175 + 72) * v51, v160, type metadata accessor for AWDLPeer);
      unint64_t v87 = v179;
      v176(v86, 0LL, 1LL, v179);
      *(_BYTE *)(v86 + *(int *)(v87 + 112)) = 1;
      sub_10029F08C(v86, 1, &v189, v51, v178);
      unint64_t v88 = v86;
      goto LABEL_33;
    }

uint64_t UnsafeMutablePointer<A>.clear<A>(bit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v113 = a2;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t v108 = *(void *)(*(void *)(v6 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v108,  a3,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v7 = __chkstk_darwin(AssociatedTypeWitness);
  int64_t v107 = (char *)&v104 - v8;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v105 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  __int128 v117 = (char *)&v104 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  Class v114 = (char *)&v104 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v110 = (char *)&v104 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v104 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v109 = (char *)&v104 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v115 = (char *)&v104 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v118 = (char *)&v104 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v119 = (char *)&v104 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (uint64_t)&v104 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  char v112 = (char *)&v104 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (uint64_t)&v104 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v104 - v38;
  __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v104 - v40;
  char v42 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v116 = a1;
  v42((char *)&v104 - v40, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  v42(v39, (uint64_t)v41, a3);
  uint64_t v111 = v9;
  if ((a1 & 1) == 0)
  {
    char v44 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v45 = v39;
LABEL_7:
    v44(v45, a3);
    goto LABEL_8;
  }

  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  char v44 = *(void (**)(char *, uint64_t))(v9 + 8);
  v44(v39, a3);
  if (v43 <= 64)
  {
LABEL_8:
    uint64_t v46 = v119;
    goto LABEL_9;
  }

  v42((char *)v36, (uint64_t)v41, a3);
  int64_t v121 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
    char v81 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v82 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v81 & 1) != 0)
    {
      if (v82 <= 64) {
        goto LABEL_63;
      }
LABEL_46:
      unint64_t v83 = sub_100024970();
      uint64_t v84 = v112;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v121, &type metadata for Int, v83, a3, v6);
      uint64_t v71 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v84, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v84, a3);
      v44((char *)v36, a3);
      uint64_t v46 = v119;
      if ((v71 & 1) == 0) {
        goto LABEL_9;
      }
LABEL_71:
      __break(1u);
LABEL_72:
      v44((char *)v71, a3);
      __break(1u);
      goto LABEL_73;
    }

    if (v82 < 64) {
      goto LABEL_54;
    }
    uint64_t v45 = (char *)v36;
    goto LABEL_7;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64) {
    goto LABEL_46;
  }
LABEL_54:
  uint64_t v71 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  v44((char *)v36, a3);
  uint64_t v46 = v119;
  if (v71 < v121) {
    goto LABEL_71;
  }
  while (1)
  {
LABEL_9:
    uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v42((char *)v31, (uint64_t)v41, a3);
    if (v47 < 65)
    {
      uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
      v44((char *)v31, a3);
      if (v54 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0) {
        goto LABEL_22;
      }
    }

    else
    {
      v44((char *)v31, a3);
    }

    v42(v46, (uint64_t)v41, a3);
    int64_t v121 = 0x7FFFFFFFFFFFFFFFLL;
    char v48 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v48 & 1) != 0)
    {
      if (v49 > 64)
      {
        unint64_t v50 = sub_100024970();
        uint64_t v51 = v112;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v121, &type metadata for Int, v50, a3, v6);
        char v52 = dispatch thunk of static Comparable.< infix(_:_:)(v51, v46, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v44(v51, a3);
        char v53 = v46;
        goto LABEL_21;
      }

uint64_t UnsafePointer<A>.contains<A>(bit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v114 = a2;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t v109 = *(void *)(*(void *)(v6 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v109,  a3,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  uint64_t v7 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v108 = (char *)&v105 - v8;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v106 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v118 = (char *)&v105 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v115 = (char *)&v105 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v111 = (char *)&v105 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v105 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v110 = (char *)&v105 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v116 = (char *)&v105 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v119 = (char *)&v105 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v120 = (char *)&v105 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (uint64_t)&v105 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v113 = (char *)&v105 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (uint64_t)&v105 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v105 - v38;
  __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v105 - v40;
  char v42 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v117 = a1;
  v42((char *)&v105 - v40, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  v42(v39, (uint64_t)v41, a3);
  uint64_t v112 = v9;
  if ((a1 & 1) == 0)
  {
    char v44 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v45 = v39;
LABEL_7:
    v44(v45, a3);
    goto LABEL_8;
  }

  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  char v44 = *(void (**)(char *, uint64_t))(v9 + 8);
  v44(v39, a3);
  if (v43 <= 64)
  {
LABEL_8:
    uint64_t v46 = v120;
    goto LABEL_9;
  }

  v42((char *)v36, (uint64_t)v41, a3);
  int64_t v122 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
    char v82 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v82 & 1) != 0)
    {
      if (v83 <= 64) {
        goto LABEL_64;
      }
LABEL_47:
      unint64_t v84 = sub_100024970();
      char v85 = v113;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v122, &type metadata for Int, v84, a3, v6);
      uint64_t v71 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v85, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v85, a3);
      v44((char *)v36, a3);
      uint64_t v46 = v120;
      if ((v71 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_72;
    }

    if (v83 < 64) {
      goto LABEL_55;
    }
    uint64_t v45 = (char *)v36;
    goto LABEL_7;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64) {
    goto LABEL_47;
  }
LABEL_55:
  uint64_t v71 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  v44((char *)v36, a3);
  uint64_t v46 = v120;
  if (v71 < v122) {
    goto LABEL_72;
  }
  while (1)
  {
LABEL_9:
    uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v42((char *)v31, (uint64_t)v41, a3);
    if (v47 < 65)
    {
      uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
      v44((char *)v31, a3);
      if (v48 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0) {
        goto LABEL_21;
      }
    }

    else
    {
      v44((char *)v31, a3);
    }

    v42(v46, (uint64_t)v41, a3);
    int64_t v122 = 0x7FFFFFFFFFFFFFFFLL;
    char v49 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v49 & 1) != 0)
    {
      if (v50 > 64)
      {
        unint64_t v51 = sub_100024970();
        char v52 = v113;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v122, &type metadata for Int, v51, a3, v6);
        char v53 = dispatch thunk of static Comparable.< infix(_:_:)(v52, v46, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v44(v52, a3);
        uint64_t v54 = v46;
        goto LABEL_20;
      }

LABEL_17:
      uint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v44(v46, a3);
      if (v122 >= v55) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }

    if (v50 <= 63) {
      goto LABEL_17;
    }
    while (1)
    {
      uint64_t v121 = 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v56 = v113;
      (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v113, v46, a3);
      unint64_t v57 = sub_100024970();
      uint64_t v46 = v110;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v121, &type metadata for Int, v57, a3, v6);
      char v53 = dispatch thunk of static Comparable.< infix(_:_:)(v46, v56, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v46, a3);
      uint64_t v54 = v56;
LABEL_20:
      v44(v54, a3);
      if ((v53 & 1) == 0) {
        break;
      }
LABEL_18:
      __break(1u);
    }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xE;
  uint64_t v8 = v6 - 14;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x36;
  uint64_t v8 = v6 - 54;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x22;
  uint64_t v8 = v6 - 34;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *((unsigned __int8 *)a1 + 1);
  uint64_t v7 = v6 >= 0x22;
  uint64_t v8 = v6 - 34;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 3;
  uint64_t v8 = v6 - 3;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 8;
  uint64_t v8 = v6 - 8;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 4;
  uint64_t v8 = v6 - 4;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

    v22._countAndFlagsBits = 0xD000000000000018LL;
    v22._object = (void *)0x80000001003640B0LL;
    String.append(_:)(v22);
    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x40) == 0)
      {
LABEL_10:
        uint64_t v5 = sub_1000B2AB8(2LL, v24, v25);
        uint64_t v7 = v6;
        uint64_t v9 = v8;
        uint64_t v11 = v10;
        swift_bridgeObjectRelease(v25);
        uint64_t v12 = static String._fromSubstring(_:)(v5, v7, v9, v11);
        uint64_t v14 = v13;
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRetain(v14);
        v15._countAndFlagsBits = 41LL;
        v15._object = (void *)0xE100000000000000LL;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v14);
        return v12;
      }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x16;
  uint64_t v8 = v6 - 22;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 6;
  uint64_t v8 = v6 - 6;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x2B;
  uint64_t v8 = v6 - 43;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 5;
  uint64_t v8 = v6 - 5;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *((unsigned __int8 *)a1 + 1);
  uint64_t v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x17;
  uint64_t v8 = v6 - 23;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 9;
  uint64_t v8 = v6 - 9;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xA;
  uint64_t v8 = v6 - 10;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x14;
  uint64_t v8 = v6 - 20;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 7;
  uint64_t v8 = v6 - 7;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *(unsigned __int8 *)a1;
  uint64_t v7 = v6 >= 5;
  uint64_t v8 = v6 - 5;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xD;
  uint64_t v8 = v6 - 13;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x41;
  uint64_t v8 = v6 - 65;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x43;
  uint64_t v8 = v6 - 67;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x1E;
  uint64_t v8 = v6 - 30;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *(unsigned __int8 *)a1;
  uint64_t v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x3F;
  uint64_t v8 = v6 - 63;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x19;
  uint64_t v8 = v6 - 25;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *(unsigned __int8 *)a1;
  uint64_t v7 = v6 >= 8;
  uint64_t v8 = v6 - 8;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x2E;
  uint64_t v8 = v6 - 46;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x1B;
  uint64_t v8 = v6 - 27;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

    dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
    v17(v20, v7);
    goto LABEL_20;
  }

  if (v22 <= 63) {
    goto LABEL_17;
  }
  *(void *)(v12 - 88) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v28 = *(void *)(v12 - 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 96) + 32LL))(v28, v20, v7);
  uint64_t v29 = sub_100024970();
  uint64_t v30 = *(void *)(v12 - 152);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 88, &type metadata for Int, v29, v7, v8);
  uint64_t v25 = dispatch thunk of static Comparable.< infix(_:_:)(v30, v28, v7, *(void *)(*(void *)(v8 + 32) + 8LL));
  v17(v30, v7);
  uint64_t v26 = v28;
LABEL_19:
  v17(v26, v7);
  if ((v25 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x100202EC0LL);
  }

    dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
    v17(v20, v10);
    goto LABEL_20;
  }

  if (v22 <= 63) {
    goto LABEL_17;
  }
  *(void *)(v12 - 72) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v28 = *(void *)(v12 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 168) + 32LL))(v28, v20, v10);
  uint64_t v29 = sub_100024970();
  uint64_t v30 = *(void *)(v12 - 288);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 72, &type metadata for Int, v29, v10, v8);
  uint64_t v25 = dispatch thunk of static Comparable.< infix(_:_:)(v30, v28, v10, *(void *)(*(void *)(v8 + 32) + 8LL));
  v17(v30, v10);
  uint64_t v26 = v28;
LABEL_19:
  v17(v26, v10);
  if ((v25 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x1002038C8LL);
  }

    dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    v23((char *)AssociatedTypeWitness, a2);
LABEL_20:
    uint64_t v35 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    v23(v20, a2);
    v23(v55, a2);
    return v35;
  }

  if (v27 <= 63) {
    goto LABEL_17;
  }
  unint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v33 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v53, AssociatedTypeWitness, a2);
  uint64_t v34 = sub_100024970();
  uint64_t AssociatedTypeWitness = (uint64_t)v51;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v56, &type metadata for Int, v34, a2, a3);
  uint64_t v30 = dispatch thunk of static Comparable.< infix(_:_:)( AssociatedTypeWitness,  v33,  a2,  *(void *)(*(void *)(a3 + 32) + 8LL));
  v23((char *)AssociatedTypeWitness, a2);
  uint64_t v31 = (uint64_t)v33;
LABEL_19:
  v23((char *)v31, a2);
  if ((v30 & 1) == 0) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_33:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v23)(AssociatedTypeWitness, a2);
  __break(1u);
  return result;
}

        uint64_t v7 = __clz(__rbit64(v22)) + (v20 << 6);
      }
    }

        uint64_t v8 = __clz(__rbit64(v18)) + (v16 << 6);
      }
    }

    uint64_t v59 = v8;
    uint64_t v17 = (v22 - 1) & v22;
  }

  __break(1u);
LABEL_29:
  __break(1u);
}

        uint64_t v10 = __clz(__rbit64(v24)) + (v22 << 6);
      }
    }

        uint64_t v11 = __clz(__rbit64(v24)) + (v22 << 6);
      }
    }

    uint64_t v9 = (v16 - 1) & v16;
  }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

LABEL_21:
    uint64_t v36 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v44(v41, a3);
    uint64_t v20 = v119;
    v42(v119, v117, a3);
    char v58 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v59 = v116;
    v42(v116, (uint64_t)v20, a3);
    if ((v58 & 1) == 0)
    {
      v44(v59, a3);
      uint64_t v41 = v118;
      goto LABEL_27;
    }

    uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v44(v59, a3);
    uint64_t v41 = v118;
    if (v60 <= 64) {
      goto LABEL_27;
    }
    uint64_t v61 = v111;
    v42(v111, (uint64_t)v20, a3);
    int64_t v122 = 0x8000000000000000LL;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
      {
        unint64_t v91 = sub_100024970();
        unint64_t v92 = v113;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v122, &type metadata for Int, v91, a3, v6);
        unint64_t v93 = v61;
        uint64_t v31 = dispatch thunk of static Comparable.< infix(_:_:)(v61, v92, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
        v44(v92, a3);
        v44(v93, a3);
        if ((v31 & 1) == 0) {
          goto LABEL_27;
        }
        goto LABEL_63;
      }

      uint64_t v62 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      uint64_t v63 = v61;
      uint64_t v31 = v62;
      uint64_t v64 = v63;
      goto LABEL_62;
    }

    char v86 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    uint64_t v87 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v86 & 1) == 0) {
      break;
    }
    if (v87 <= 64)
    {
      uint64_t v99 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v109,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v101 = v108;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v99,  AssociatedConformanceWitness);
      uint64_t v102 = v113;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v101, a3, v109);
      int64_t v103 = v111;
      LODWORD(v120) = dispatch thunk of static Comparable.< infix(_:_:)( v111,  v102,  a3,  *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v102, a3);
      uint64_t v71 = (uint64_t)v106;
      (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v106, v103, a3);
      int64_t v104 = v122;
      uint64_t v31 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v44((char *)v71, a3);
      if (v31 >= v104) {
        goto LABEL_27;
      }
    }

    else
    {
      unint64_t v88 = sub_100024970();
      char v89 = v113;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v122, &type metadata for Int, v88, a3, v6);
      uint64_t v31 = (uint64_t)v111;
      char v90 = dispatch thunk of static Comparable.< infix(_:_:)(v111, v89, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v89, a3);
      v44((char *)v31, a3);
      if ((v90 & 1) == 0) {
        goto LABEL_27;
      }
    }

    uint64_t v31 = sub_100002274(v18);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v10, 1LL, 1LL, v31);
    uint64_t v16 = 0LL;
  }

  uint64_t v28 = *(void *)(v39 + 8 * v30);
  if (v28)
  {
    v27 += 2LL;
    goto LABEL_9;
  }

  while (1)
  {
    uint64_t v27 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v27 >= v40)
    {
      uint64_t v43 = v38;
      goto LABEL_21;
    }

    uint64_t v28 = *(void *)(v39 + 8 * v27);
    ++v30;
    if (v28) {
      goto LABEL_9;
    }
  }

        sub_1000208D8(v26, v25);
        swift_bridgeObjectRelease(v31);
        uint64_t v32 = sub_1000225EC(v21, &qword_100409280);
        goto LABEL_28;
      }

      swift_errorRelease(v2);
      sub_1000208D8(v29, v30);
      uint64_t v25 = *(void *)(v5 - 208);
    }

    uint64_t v31 = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v20 + 56))(v21, 1LL, 1LL, *(void *)(v5 - 256));
    goto LABEL_21;
  }

  *(void *)(v5 - 136) = v4;
  *(void *)(v5 - 128) = sub_10000AF70( (unint64_t *)&qword_100405DE8,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder,  (uint64_t)&protocol conformance descriptor for BinaryDecoder);
  *(void *)(v5 - 160) = v1;
  swift_retain();
  uint64_t v6 = sub_1001364E4((void *)(v5 - 160));
  if (v2)
  {
    *(void *)(v5 - 168) = v2;
    swift_errorRetain(v2);
    uint64_t v8 = sub_100002274((uint64_t *)&unk_10040C5B0);
    if ((swift_dynamicCast(v5 - 160, v5 - 168, v8, &type metadata for WiFiError, 0LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v5 - 160);
      uint64_t v10 = *(unsigned __int8 *)(v5 - 144);
      if (v10 == 2)
      {
        if ((v9 & 1) != 0)
        {
          swift_errorRelease(v2);
          swift_errorRelease(*(void *)(v5 - 168));
          goto LABEL_44;
        }
      }

      else
      {
        sub_10007030C(v9, *(void *)(v5 - 152), v10);
      }
    }

    swift_bridgeObjectRelease(v3);
    swift_errorRelease(*(void *)(v5 - 168));
    swift_errorRelease(v2);
    uint64_t v33 = swift_release(v1);
    uint64_t v34 = *(void *)(v5 - 192);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v33);
    uint64_t v36 = static os_log_type_t.error.getter();
    uint64_t v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = *(void *)(v5 - 184);
    if (v37)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Failed to process authentication message because decoding failed",  v39,  2u);
      swift_slowDealloc(v39, -1LL, -1LL);

      sub_1000208D8(*(void *)(v5 - 280), *(void *)(v5 - 288));
    }

    else
    {
      sub_1000208D8(*(void *)(v5 - 280), *(void *)(v5 - 288));
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 200) + 8LL))(v34, v38);
LABEL_32:
    sub_100002274(&qword_100408AD0);
    JUMPOUT(0x10012A6B0LL);
  }

  uint64_t v11 = v6;
  uint64_t v12 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
    uint64_t v3 = sub_1000A74F8(0LL, v3[2] + 1LL, 1, v3);
  }
  uint64_t v14 = v3[2];
  uint64_t v13 = v3[3];
  uint64_t v15 = v14 + 1;
  if (v14 >= v13 >> 1)
  {
    *(void *)(v5 - 296) = v15;
    uint64_t v17 = v3;
    uint64_t v18 = v14;
    uint64_t v19 = sub_1000A74F8((void *)(v13 > 1), v14 + 1, 1, v17);
    uint64_t v15 = *(void *)(v5 - 296);
    uint64_t v14 = v18;
    uint64_t v3 = v19;
  }

  v3[2] = v15;
  uint64_t v16 = &v3[2 * v14];
  v16[4] = v11;
  v16[5] = v12;
LABEL_44:
  JUMPOUT(0x10012A7DCLL);
}

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  char *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    uint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1LL << result) - 1;
  }

  *uint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v28 = __OFSUB__(v27, 1LL);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *(_DWORD *)(a1 + 177) = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

        if (++v10 == v9) {
          goto LABEL_32;
        }
      }

      uint64_t v14 = 10LL;
      while (1)
      {
        uint64_t v15 = v14 - 7;
        if (__OFADD__(v14 - 8, 1LL)) {
          goto LABEL_68;
        }
        if (*(_DWORD *)(v12 + 4 * v14) == (_DWORD)a1) {
          goto LABEL_64;
        }
        ++v14;
        if (v15 == v13) {
          goto LABEL_21;
        }
      }
    }
  }

      return 0x300000000LL;
    default:
      goto LABEL_21;
  }

  if (*(void *)(*(void *)(*(void *)(v10 - 136) - 8LL) + 64LL) >= v17) {
    __asm { BR              X11 }
  }

    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    goto LABEL_22;
  }

  if (v38 < 0xFFFFFFFF)
  {
    swift_release(v36[1]);
    goto LABEL_21;
  }

  uint64_t v39 = v37[1];
  uint64_t v40 = v36[1];
  *uint64_t v36 = v38;
  v36[1] = v39;
  swift_retain(v39);
  swift_release(v40);
LABEL_22:
  char v42 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v43 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  char v44 = v43[1];
  uint64_t v45 = v42[1];
  *char v42 = *v43;
  v42[1] = v44;
  swift_retain(v44);
  swift_release(v45);
  return a1;
}

    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    goto LABEL_22;
  }

  if (v38 < 0xFFFFFFFF)
  {
    swift_release(v36[1]);
    goto LABEL_21;
  }

  uint64_t v39 = v37[1];
  uint64_t v40 = v36[1];
  *uint64_t v36 = v38;
  v36[1] = v39;
  swift_release(v40);
LABEL_22:
  char v42 = ((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v43 = *(void *)(v42 + 8);
  *(_OWORD *)char v42 = *(_OWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFF8LL);
  swift_release(v43);
  return a1;
}

    uint64_t v13 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_22:
    uint64_t v20 = *(void *)(v45 + 56);
    uint64_t v21 = *(void *)(v45 + 48) + 6 * v16;
    uint64_t v22 = *(_WORD *)(v21 + 4);
    uint64_t v23 = type metadata accessor for AWDLPeer(0LL);
    uint64_t v24 = v20 + *(void *)(*(void *)(v23 - 8) + 72LL) * v16;
    uint64_t v25 = v46;
    uint64_t v26 = *(_DWORD *)v21;
    sub_1002696BC(v24, (uint64_t)&v9[*(int *)(v46 + 48)]);
    *(_DWORD *)uint64_t v9 = v26;
    *((_WORD *)v9 + 2) = v22;
    sub_100269700((uint64_t)v9, (uint64_t)v7);
    uint64_t v27 = *(int *)(v25 + 48);
    uint64_t v28 = v44;
    uint64_t v29 = (uint64_t)v44 + v27;
    uint64_t v30 = (uint64_t)&v7[v27];
    LOWORD(v27) = *((_WORD *)v7 + 2);
    *char v44 = *(_DWORD *)v7;
    *((_WORD *)v28 + 2) = v27;
    sub_1002696BC(v30, v29);
    uint64_t v31 = v29 + *(int *)(v23 + 52);
    uint64_t v33 = *(void *)(v31 + 8);
    uint64_t v32 = *(void *)(v31 + 16);
    swift_bridgeObjectRetain(v32);
    sub_100269748(v29);
    if (v32)
    {
      if (v33 == v41 && v32 == v43)
      {
        swift_release(v45);
        swift_bridgeObjectRelease(v32);
LABEL_31:
        uint64_t v36 = v39;
        sub_100269700((uint64_t)v7, v39);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v36, 0LL, 1LL, v46);
LABEL_32:
        swift_bridgeObjectRelease(v43);
        return;
      }

      uint64_t v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v32, v41, v43, 0LL);
      swift_bridgeObjectRelease(v32);
      if ((v35 & 1) != 0)
      {
        swift_release(v45);
        goto LABEL_31;
      }
    }

    sub_1000225EC((uint64_t)v7, &qword_10040D7B0);
  }

  while (1)
  {
    uint64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v14 >= v42) {
      goto LABEL_29;
    }
    uint64_t v18 = *(void *)(v40 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }

          uint64_t v16 = __clz(__rbit64(v69)) + (v67 << 6);
        }

    char v75 = (void *)v153;
    unint64_t v76 = a1;
    char v77 = v152;
    sub_100057FE8(v76, v152, type metadata accessor for DriverEvent);
    uint64_t v78 = v75;
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    int v80 = static os_log_type_t.error.getter(v79);
    if (os_log_type_enabled(v79, v80))
    {
      char v81 = swift_slowAlloc(22LL, -1LL);
      uint64_t v134 = v33;
      char v82 = v81;
      char v151 = (void *)swift_slowAlloc(8LL, -1LL);
      __int128 v153 = swift_slowAlloc(32LL, -1LL);
      v160[0] = v153;
      *(_DWORD *)char v82 = 138412546;
      __int128 v157 = (uint64_t)v78;
      uint64_t v83 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
      unint64_t v84 = v151;
      *char v151 = v78;

      *(_WORD *)(v82 + 12) = 2080;
      DriverEvent.description.getter();
      char v86 = v85;
      __int128 v157 = sub_10000235C(v87, v85, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
      swift_bridgeObjectRelease(v86);
      sub_10005802C(v77, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "%@ received an unexpected %s", (uint8_t *)v82, 0x16u);
      unint64_t v88 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v84, 1LL, v88);
      swift_slowDealloc(v84, -1LL, -1LL);
      char v89 = v153;
      swift_arrayDestroy(v153, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v89, -1LL, -1LL);
      char v90 = v82;
      uint64_t v33 = v134;
      swift_slowDealloc(v90, -1LL, -1LL);
    }

    else
    {

      sub_10005802C(v77, type metadata accessor for DriverEvent);
    }

    return sub_10005802C(v33, type metadata accessor for DriverEvent);
  }

  if (EnumCaseMultiPayload) {
    goto LABEL_21;
  }
  sub_100057FE8((uint64_t)v24, (uint64_t)v22, type metadata accessor for DriverEvent);
  sub_100058090(v22, &v157);
  sub_100058090(&v157, v160);
  uint64_t v34 = sub_1001073D8((uint64_t)v160);
  if (v34 == 13)
  {
    uint64_t v41 = NANBitmap.Channel.operatingClass.getter(v160);
    if (*(_BYTE *)(v153 + qword_100410BB8) == 1) {
      sub_1002C32C4(*(void *)v41, *(void *)(v41 + 8), *(void *)(v41 + 16));
    }
    goto LABEL_14;
  }

  if (v34 != 11)
  {
    if (v34 == 2)
    {
      uint64_t v35 = (unint64_t *)NANBitmap.Channel.operatingClass.getter(v160);
      if (*(_BYTE *)(v153 + qword_100410BB8) == 1)
      {
        uint64_t v36 = v35[1];
        uint64_t v37 = *v35;
        sub_1002C0608(*v35, v36, v35[2], 0LL);
        uint64_t v38 = v36;
        uint64_t v33 = (uint64_t)v24;
        sub_1002C233C(v37, v38);
      }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
  __break(1u);
  return result;
}

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  char *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    uint64_t v28 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1LL << v4) - 1;
  }

  else
  {
    uint64_t v28 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1LL << result) - 1;
  }

  _BYTE *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    uint64_t v27 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v28 = *v27;
    uint64_t v29 = (-1LL << v4) - 1;
  }

  else
  {
    uint64_t v27 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v29 = *v27;
    uint64_t v28 = (-1LL << result) - 1;
  }

  *uint64_t v27 = v29 & v28;
  uint64_t v30 = *(void *)(a2 + 16);
  uint64_t v31 = __OFSUB__(v30, 1LL);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    uint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1LL << result) - 1;
  }

  char *v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  uint64_t v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

LABEL_63:
    __break(1u);
LABEL_64:
    uint64_t v95 = AssociatedTypeWitness;
    uint64_t v96 = swift_getAssociatedConformanceWitness( v109,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100339A38, 256LL, v95, v96);
    int64_t v97 = v113;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v108, a3, v109);
    uint64_t v71 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v97, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
    v44(v97, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v20, v36, a3);
    if ((v71 & 1) != 0) {
      goto LABEL_71;
    }
    int64_t v98 = v122;
    uint64_t v71 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v44(v20, a3);
    uint64_t v46 = v120;
    if (v71 < v98) {
      goto LABEL_72;
    }
  }

  if (v87 < 64)
  {
    uint64_t v94 = v111;
    uint64_t v31 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    uint64_t v64 = v94;
LABEL_62:
    v44(v64, a3);
    if (v31 >= v122) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }

  v44(v111, a3);
LABEL_27:
  uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  uint64_t v66 = v115;
  v42(v115, (uint64_t)v20, a3);
  if (v65 >= 65)
  {
    v44(v66, a3);
    goto LABEL_29;
  }

  uint64_t v74 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v44(v66, a3);
  if (v74 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
  {
LABEL_39:
    uint64_t v78 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v44(v20, a3);
    uint64_t v79 = v78 & 7;
    if (v78 <= 0) {
      uint64_t v79 = -(-v78 & 7);
    }
    if (v79 >= 0) {
      int v80 = 1LL << v79;
    }
    else {
      int v80 = 0;
    }
    return (v80 & (*(unsigned __int8 *)(v114 + v36 / 8) ^ 0xFF)) == 0;
  }

        __break(1u);
        return;
      }
    }

    else
    {
      uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain_n(*v39, 2LL);
      if (v47) {
        goto LABEL_48;
      }
    }

  __break(1u);
}

LABEL_29:
  v42(v41, (uint64_t)v20, a3);
  int64_t v122 = 0x7FFFFFFFFFFFFFFFLL;
  char v67 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  if ((v67 & 1) != 0)
  {
    if (v68 > 64)
    {
      unint64_t v69 = sub_100024970();
      uint64_t v70 = v113;
      uint64_t v71 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v122, &type metadata for Int, v69, a3, v6);
      char v72 = dispatch thunk of static Comparable.< infix(_:_:)(v70, v41, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
      v44(v70, a3);
      unint64_t v73 = v41;
      goto LABEL_38;
    }

    uint64_t v6 = __OFSUB__(v2--, 1LL);
    if (v6)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    *v4++ = v10;
  }

  while (v1 < 8);
  uint64_t v20 = *((void *)v3 + 3);
  if (v20 >= 2)
  {
    uint64_t v21 = v20 >> 1;
    uint64_t v6 = __OFSUB__(v21, v2);
    uint64_t v22 = v21 - v2;
    if (v6) {
      goto LABEL_42;
    }
    *((void *)v3 + 2) = v22;
  }

  return (uint64_t)v3;
}

  if (v8 >= v15)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v29 = a1;
    uint64_t v13 = v8;
    uint64_t v17 = v6;
    return v30(v29, v13, v17);
  }

  uint64_t v29 = (v20 + a1) & ~v19;
  if ((_DWORD)v10 == v15)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v13 = v10;
    uint64_t v17 = v5;
    return v30(v29, v13, v17);
  }

  uint64_t v29 = (v21 + v29) & ~v18;
  if ((_DWORD)v13 == v15)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v30(v29, v13, v17);
  }

  uint64_t v32 = *(unsigned __int8 *)(v29 + v22);
  if (v32 < 2) {
    return 0LL;
  }
  uint64_t v33 = (v32 + 2147483646) & 0x7FFFFFFF;
  return (v33 + 1);
}

    uint64_t v15 = v14 + 2;
    if (v14 + 2 < v129) {
      goto LABEL_30;
    }
LABEL_79:
    if (v25)
    {
LABEL_80:
      if (v15 < v14) {
        goto LABEL_232;
      }
      if (v14 < v15)
      {
LABEL_82:
        uint64_t v37 = 8 * v15;
        uint64_t v38 = 8 * v14;
        uint64_t v39 = v15;
        uint64_t v40 = v14;
        do
        {
          if (v40 != --v39)
          {
            if (!v11) {
              goto LABEL_235;
            }
            uint64_t v41 = v11 + v37;
            char v42 = *(_DWORD *)(v11 + v38);
            uint64_t v43 = *(_WORD *)(v11 + v38 + 4);
            char v44 = *(_BYTE *)(v11 + v38 + 6);
            uint64_t v45 = *(_BYTE *)(v11 + v38 + 7);
            *(void *)(v11 + v38) = *(void *)(v11 + v37 - 8);
            *(_DWORD *)(v41 - 8) = v42;
            *(_WORD *)(v41 - 4) = v43;
            *(_BYTE *)(v41 - 2) = v44;
            *(_BYTE *)(v41 - 1) = v45;
          }

          ++v40;
          v37 -= 8LL;
          v38 += 8LL;
        }

        while (v40 < v39);
      }
    }

    uint64_t v21 = (v27 - 1) & v27;
    uint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_10:
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(v17 + 56) + 16 * v25))();
  }

  uint64_t v28 = v26 + 5;
  if (v28 >= v22)
  {
LABEL_30:
    swift_release(v17);
    return swift_bridgeObjectRelease(v17);
  }

  uint64_t v27 = *(void *)(v18 + 8 * v28);
  if (v27)
  {
    uint64_t v23 = v28;
    goto LABEL_29;
  }

  while (1)
  {
    uint64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v23 >= v22) {
      goto LABEL_30;
    }
    uint64_t v27 = *(void *)(v18 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_29;
    }
  }

  type metadata accessor for CFString(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v44);
  __break(1u);
  return result;
}

      uint64_t v40 = *v35;
      uint64_t v41 = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *uint64_t v34 = v40;
      *(_OWORD *)(a1 + 120) = v41;
      goto LABEL_30;
    }

    if (!v37)
    {
      sub_100002AC4((void *)(a1 + 104));
      goto LABEL_29;
    }

    sub_10017BB8C((void *)(a1 + 104), (void *)(a2 + 104));
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    uint64_t result = swift_bridgeObjectRelease(v11);
    uint64_t v21 = v29[2];
    if (v21)
    {
      uint64_t v22 = *(void *)(v7 + 16);
      if (v22) {
        break;
      }
    }

    char v85 = v402;
    sub_100057FE8((uint64_t)v28, (uint64_t)v11, type metadata accessor for DriverEvent);
    sub_100057FE8((uint64_t)v11, (uint64_t)v31, type metadata accessor for DriverEvent);
    sub_100022628((uint64_t)v11, v32, type metadata accessor for DriverEvent);
    char v86 = v85;
    uint64_t v87 = (void *)Logger.logObject.getter(v86);
    unint64_t v88 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v87, v88))
    {

      sub_10005802C(v32, type metadata accessor for DriverEvent);
      sub_10005802C((uint64_t)v31, type metadata accessor for DriverEvent);
      return sub_10005802C(v30, type metadata accessor for DriverEvent);
    }

    char v89 = swift_slowAlloc(22LL, -1LL);
    v399 = swift_slowAlloc(8LL, -1LL);
    v402 = (char *)swift_slowAlloc(32LL, -1LL);
    v413[0] = (uint64_t)v402;
    *(_DWORD *)char v89 = 138412546;
    v400 = (uint64_t)v87;
    v411 = (uint64_t)v86;
    char v90 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v411, v412);
    unint64_t v91 = v399;
    *(void *)v399 = v86;

    *(_WORD *)(v89 + 12) = 2080;
    DriverEvent.description.getter();
    unint64_t v93 = v92;
    v411 = sub_10000235C(v94, v92, v413);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v411, v412);
    swift_bridgeObjectRelease(v93);
    sub_10005802C(v401, type metadata accessor for DriverEvent);
    sub_10005802C((uint64_t)v31, type metadata accessor for DriverEvent);
    uint64_t v95 = (os_log_t)v400;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v400,  v88,  "%@ received an unexpected %s",  (uint8_t *)v89,  0x16u);
    uint64_t v96 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v91, 1LL, v96);
    swift_slowDealloc(v91, -1LL, -1LL);
    int64_t v97 = &type metadata for Any[8];
    int64_t v98 = v402;
    uint64_t v99 = v402;
    uint64_t v100 = 1LL;
    goto LABEL_31;
  }

  sub_100057FE8((uint64_t)v19, (uint64_t)v14, type metadata accessor for DriverEvent);
  uint64_t v31 = (os_log_t)v400;
  uint64_t v32 = v401;
  if (*v14 != 1) {
    goto LABEL_29;
  }
  uint64_t v54 = *(void *)&v402[qword_10040C348 + 8];
  if (v54 >> 62 == 2 && v54 == 0x8000000000000000LL && *(void *)&v402[qword_10040C348] == 3LL)
  {
    uint64_t v55 = 0xD00000000000002ALL;
    unint64_t v56 = 0x8000000100367D40LL;
    unint64_t v57 = 2LL;
LABEL_50:
    sub_1002250D0(v57, v55, v56);
  }

  else
  {
    char v58 = (uint64_t)ObjectType;
    uint64_t v59 = swift_getWitnessTable(&unk_10035D5D8, ObjectType);
    if (sub_1002A2024(v58, v59))
    {
      uint64_t v60 = 2LL;
LABEL_25:
      uint64_t v61 = 0x8000000000000000LL;
LABEL_103:
      sub_10022B404((void *)v60, v61);
    }
  }

  return sub_10005802C(v30, type metadata accessor for DriverEvent);
}

  __break(1u);
}

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease_n(v31, 2LL);
    goto LABEL_30;
  }

  uint64_t v23 = v22;
  uint64_t v24 = NANGenericServiceProtocol.datapathSubscribeID.getter(v22);
  if ((v24 & 0x100) != 0)
  {
    swift_bridgeObjectRelease(v23);
    goto LABEL_9;
  }

  unint64_t v73 = v24;
  uint64_t v25 = v7 + qword_100410A28;
  swift_beginAccess(v7 + qword_100410A28, v86, 0LL, 0LL);
  uint64_t v26 = type metadata accessor for NANPublish.Configuration(0LL);
  if ((*(_BYTE *)(v25 + *(int *)(v26 + 96)) & 1) == 0)
  {
    swift_bridgeObjectRelease(v23);
    uint64_t v45 = (uint64_t *)(v7 + qword_100410A40);
    swift_beginAccess(v7 + qword_100410A40, &v83, 32LL, 0LL);
    uint64_t v46 = *v45;
    if (*(void *)(v46 + 16))
    {
      uint64_t v47 = v77;
      uint64_t v48 = sub_10001C08C((v78 << 48) | ((unint64_t)v79 << 40) | ((unint64_t)v80 << 32) | ((_DWORD)v81 << 24) | ((unint64_t)v77 << 16) | ((unint64_t)v11 << 8) | v73);
      if ((v49 & 1) != 0)
      {
        uint64_t v50 = v48;
        unint64_t v51 = *(void *)(v46 + 56);
        char v52 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
        char v53 = *(void *)(v52 - 8);
        sub_100057FE8( v51 + *(void *)(v53 + 72) * v50,  (uint64_t)v19,  type metadata accessor for NANPeer.Service.AuthenticationStatus);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v19, 0LL, 1LL, v52);
      }

      else
      {
        char v52 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v19, 1LL, 1LL, v52);
      }
    }

    else
    {
      char v52 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v19, 1LL, 1LL, v52);
      uint64_t v47 = v77;
    }

    type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48LL))(v19, 1LL, v52))
    {
      sub_1000225EC((uint64_t)v19, (uint64_t *)&unk_10040F0F0);
      swift_endAccess(&v83);
    }

    else
    {
      sub_100057FE8((uint64_t)v19, (uint64_t)v21, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_1000225EC((uint64_t)v19, (uint64_t *)&unk_10040F0F0);
      swift_endAccess(&v83);
      sub_10005802C((uint64_t)v21, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    }

    uint64_t v31 = v82;
    char v67 = swift_bridgeObjectRetain_n(v82, 2LL);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v67);
    uint64_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v83 = v36;
      uint64_t v68 = WiFiAddress.description.getter((v78 << 40) | ((unint64_t)v79 << 32) | ((_DWORD)v80 << 24) | ((unint64_t)v81 << 16) | ((unint64_t)v47 << 8) | v11);
      uint64_t v70 = v69;
      char v85 = sub_10000235C(v68, v69, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
      swift_bridgeObjectRelease_n(v31, 2LL);
      swift_bridgeObjectRelease(v70);
      uint64_t v40 = "Rejecting datapath request from %s because no authenticated PMK was found for the subscribe but authentication is required";
      goto LABEL_11;
    }

    goto LABEL_29;
  }

  uint64_t v27 = v26;
  NANGenericServiceProtocol.publicKey.getter(v23, (uint64_t)v15);
  uint64_t v28 = swift_bridgeObjectRelease(v23);
  uint64_t v29 = v76;
  uint64_t v30 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v76 + 48))(v15, 1LL, v16, v28) == 1)
  {
    sub_1000225EC((uint64_t)v15, (uint64_t *)&unk_10040D470);
    uint64_t v31 = v82;
    uint64_t v32 = swift_bridgeObjectRetain_n(v82, 2LL);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    uint64_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v83 = v36;
      uint64_t v37 = WiFiAddress.description.getter((v78 << 40) | ((unint64_t)v79 << 32) | ((_DWORD)v80 << 24) | ((unint64_t)v81 << 16) | ((unint64_t)v77 << 8) | v11);
      uint64_t v39 = v38;
      char v85 = sub_10000235C(v37, v38, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
      swift_bridgeObjectRelease_n(v31, 2LL);
      swift_bridgeObjectRelease(v39);
      uint64_t v40 = "Rejecting datapath request from %s because no OWE public key was found in the service specific info";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v33, v34, v40, v35, 0xCu);
      swift_arrayDestroy(v36, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
LABEL_30:

      return 0LL;
    }

    goto LABEL_29;
  }

  uint64_t v54 = (uint64_t)v75;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v75, v15, v30);
  sub_100057FE8(v25 + *(int *)(v27 + 92), (uint64_t)v13, type metadata accessor for OWEKeys);
  uint64_t v55 = OWEKeys.generatePMK(for:asClient:)(v54, 0);
  unint64_t v57 = v56;
  sub_10005802C((uint64_t)v13, type metadata accessor for OWEKeys);
  if (v57 >> 60 == 15)
  {
    char v58 = v82;
    uint64_t v59 = swift_bridgeObjectRetain_n(v82, 2LL);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    uint64_t v61 = static os_log_type_t.error.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v62 = 136315138;
      uint64_t v83 = v63;
      uint64_t v64 = WiFiAddress.description.getter((v78 << 40) | ((unint64_t)v79 << 32) | ((_DWORD)v80 << 24) | ((unint64_t)v81 << 16) | ((unint64_t)v77 << 8) | v11);
      uint64_t v66 = v65;
      char v85 = sub_10000235C(v64, v65, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
      swift_bridgeObjectRelease_n(v58, 2LL);
      swift_bridgeObjectRelease(v66);
      _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Rejecting datapath request from %s because of a failure to generate the PMK using the OWE keys",  v62,  0xCu);
      swift_arrayDestroy(v63, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v58, 2LL);
    }

    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v54, v30);
    return 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v54, v30);
  return v55;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

              if (v1 < 0) {
                uint64_t v108 = v1;
              }
              else {
                uint64_t v108 = v1 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain(v1);
              uint64_t v109 = _CocoaArrayWrapper.endIndex.getter(v108);
              uint64_t v36 = swift_bridgeObjectRelease(v1);
              if (v109) {
                goto LABEL_16;
              }
              goto LABEL_15;
            }
          }

  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

    sub_1002FA254(a1, a2, v28, v4);
    return;
  }

  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
}

LABEL_36:
    dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v44(v41, a3);
    goto LABEL_39;
  }

  if (v68 <= 63) {
    goto LABEL_36;
  }
  uint64_t v121 = 0x7FFFFFFFFFFFFFFFLL;
  char v75 = v113;
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v113, v41, a3);
  unint64_t v76 = sub_100024970();
  char v77 = v110;
  uint64_t v71 = a3;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v121, &type metadata for Int, v76, a3, v6);
  char v72 = dispatch thunk of static Comparable.< infix(_:_:)(v77, v75, a3, *(void *)(*(void *)(v6 + 32) + 8LL));
  v44(v77, a3);
  unint64_t v73 = v75;
LABEL_38:
  v44(v73, a3);
  if ((v72 & 1) == 0) {
    goto LABEL_39;
  }
  __break(1u);
LABEL_71:
  v44(v20, a3);
LABEL_72:
  __break(1u);
LABEL_73:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v44)(v71, a3);
  __break(1u);
  return result;
}

    swift_once(&qword_100404318, sub_1001740DC);
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    swift_release(v1);
    return (uint64_t)v8;
  }

  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

    swift_release(v1);
    return (uint64_t)v8;
  }

  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

        uint64_t v11 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v13 << 6);
      }

      uint64_t v31 = *(void *)(v5 + 56);
      uint64_t v32 = *(void *)(v5 + 48) + 24 * v23;
      uint64_t v34 = *(void *)v32;
      uint64_t v33 = *(void *)(v32 + 8);
      uint64_t v35 = *(unsigned __int8 *)(v32 + 16);
      uint64_t v36 = *(_BYTE *)(v32 + 17);
      uint64_t v37 = *(void *)(v31 + 8 * v23);
      if ((v43 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v32 + 8));
      }
      Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
      uint64_t v14 = String.lowercased()();
      String.hash(into:)(v44, v14._countAndFlagsBits, v14._object);
      swift_bridgeObjectRelease(v14._object);
      if (v35) {
        uint64_t v15 = 7365749LL;
      }
      else {
        uint64_t v15 = 7365492LL;
      }
      String.hash(into:)(v44, v15, 0xE300000000000000LL);
      swift_bridgeObjectRelease(0xE300000000000000LL);
      Hasher._combine(_:)(v36);
      uint64_t v16 = Hasher._finalize()();
      uint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v18 = v16 & ~v17;
      uint64_t v19 = v18 >> 6;
      if (((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
      {
        uint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          uint64_t v29 = v19 == v28;
          if (v19 == v28) {
            uint64_t v19 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v19);
        }

        while (v30 == -1);
        uint64_t v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }

      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      uint64_t v21 = *(void *)(v8 + 48) + 24 * v20;
      *(void *)uint64_t v21 = v34;
      *(void *)(v21 + 8) = v33;
      *(_BYTE *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
      *(_BYTE *)(v21 + 17) = v36;
      *(void *)(*(void *)(v8 + 56) + 8 * v20) = v37;
      ++*(void *)(v8 + 16);
    }
  }

  swift_release(v5);
  void *v3 = v8;
}

        uint64_t v18 = (v30 - 1) & v30;
        uint64_t v22 = __clz(__rbit64(v30)) + (v20 << 6);
      }

      uint64_t v23 = sub_100255F20( *(unsigned __int16 *)(*(void *)(a1 + 48) + 6 * v22) | ((unint64_t)*(unsigned int *)(*(void *)(a1 + 48) + 6 * v22 + 2) << 16),  v36,  a1,  a2,  v19 & 1);
      uint64_t v25 = v24;
      uint64_t v26 = HIDWORD(v23);
      uint64_t v27 = HIDWORD(v24);
      v37[0] = v23;
      uint64_t v28 = sub_100256410();
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v37, (uint64_t)v3, (uint64_t)&type metadata for UInt32, v28);
      v37[0] = v26;
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v37, (uint64_t)v3, (uint64_t)&type metadata for UInt32, v28);
      v37[0] = v25;
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v37, (uint64_t)v3, (uint64_t)&type metadata for UInt32, v28);
      v37[0] = v27;
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v37, (uint64_t)v3, (uint64_t)&type metadata for UInt32, v28);
    }
  }

  uint64_t v3 = static NANBloomFilter.Index.allCases.getter();
  uint64_t v13 = (unint64_t)v3[2];
  if (v13)
  {
    uint64_t v14 = sub_100256388(v13);
    if ((v14 & 0x8000000000000000LL) == 0)
    {
      if (v14 < (unint64_t)v3[2])
      {
        uint64_t v36 = *((_BYTE *)v3 + v14 + 32);
        swift_bridgeObjectRelease(v3);
        goto LABEL_14;
      }

      goto LABEL_44;
    }

  uint64_t v143 = [v98 uniqueIdentifier];
  swift_beginAccess((char *)v101 + *(void *)(*v101 + 528LL), v229, 33LL, 0LL);
  sub_1000D32C8(&v231, v143);
  swift_endAccess(v229);

  __int128 v144 = (void *)type metadata accessor for P2PTimer(0LL);
  __int128 v145 = v98;
  __int16 v146 = (uint64_t)v210;
  uint64_t v228 = v144;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v147 = (uint64_t)v211;
  uint64_t v221 = *(void *)(v103 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v221)(v211, 1LL, 1LL, v214);
  uint64_t v148 = type metadata accessor for UUID(0LL);
  uint64_t v149 = (uint64_t)v212;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v148 - 8) + 56LL))(v212, 1LL, 1LL, v148);
  uint64_t v150 = v209;
  sub_100312F78(v146, v147, v149, v216, v215, v209);
  char v151 = v224;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v150, 0LL, 1LL, v224);
  uint64_t v231 = v145;
  char v152 = (void *)((char *)v101 + *(void *)(*v101 + 536LL));
  swift_beginAccess(v152, v229, 33LL, 0LL);
  __int128 v153 = v208;
  __int16 v154 = type metadata accessor for Dictionary(0LL, v208, v151, v222);
  Dictionary.subscript.setter(v150, &v231, v154);
  swift_endAccess(v229);
  __int128 v155 = objc_msgSend(v145, "uniqueIdentifier", sub_100306904());
  LODWORD(v150) = AWDLTrafficRegistrationService.serviceType.getter((uint64_t)v155);

  if ((_DWORD)v150 == 2)
  {
    __int16 v156 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v221;
    swift_beginAccess(v152, v229, 32LL, 0LL);
    __int128 v157 = *v152;
    uint64_t v231 = v145;
    __int16 v158 = v145;
    __int128 v159 = v145;
    uint64_t v160 = v204;
    Dictionary.subscript.getter(&v231, v157, v153, v151);

    if (v226(v160, 1LL, v151))
    {
      v61(v160, v225);
      swift_endAccess(v229);
      unint64_t v161 = 1LL;
      uint64_t v162 = (uint64_t)v203;
      uint64_t v163 = v214;
    }

    else
    {
      uint64_t v162 = (uint64_t)v203;
      uint64_t v163 = v214;
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v203, v160, v214);
      v61(v160, v225);
      swift_endAccess(v229);
      unint64_t v161 = 0LL;
    }

    v156(v162, v161, 1LL, v163);
    uint64_t v164 = v227;
    uint64_t v165 = (uint64_t)v227 + *(void *)(*v227 + 512LL);
    swift_beginAccess(v165, v229, 33LL, 0LL);
    sub_100057104(v162, v165, &qword_100405D40);
    swift_endAccess(v229);
    *(void *)((char *)v164 + *(void *)(*v164 + 496LL)) = 0LL;
    *((_BYTE *)v164 + *(void *)(*v164 + 504LL)) = 2;
    __int128 v145 = v158;
  }

  uint64_t v166 = [v145 uniqueIdentifier];
  unint64_t v167 = AWDLTrafficRegistrationServiceAssistedDiscovery;
  v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
  uint64_t v170 = v169;
  uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
  v173 = v171;
  if (v168 == v172 && v170 == v171)
  {

    uint64_t v174 = swift_bridgeObjectRelease_n(v170, 2LL);
    p_os_log_type_t type = (char **)(&stru_100401FF0 + 16);
  }

  else
  {
    uint64_t v179 = _stringCompareWithSmolCheck(_:_:expecting:)(v168, v170, v172, v171, 0LL);

    swift_bridgeObjectRelease(v170);
    *(void *)&uint64_t v180 = swift_bridgeObjectRelease(v173).n128_u64[0];
    p_os_log_type_t type = &stru_100401FF0.type;
    if ((v179 & 1) == 0) {
      goto LABEL_46;
    }
  }

  uint64_t v181 = sub_100304074(v174, v175, v176, v177);
  sub_1002AAB78();
  swift_release(v181);
LABEL_46:
  uint64_t v182 = objc_msgSend(v145, p_type[472], v180);
  uint64_t v183 = AWDLTrafficRegistrationServiceMPRemoteCamera;
  uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
  uint64_t v186 = v185;
  uint64_t v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
  uint64_t v189 = v187;
  if (v184 == v188 && v186 == v187)
  {

    swift_bridgeObjectRelease_n(v186, 2LL);
  }

  else
  {
    uint64_t v190 = _stringCompareWithSmolCheck(_:_:expecting:)(v184, v186, v188, v187, 0LL);

    swift_bridgeObjectRelease(v186);
    swift_bridgeObjectRelease(v189);
    if ((v190 & 1) == 0) {
      return;
    }
  }

  uint64_t v191 = (uint64_t)v205;
  *uint64_t v205 = 5LL;
  unint64_t v192 = v206;
  __int128 v193 = v207;
  (*(void (**)(uint64_t, void, uint64_t))(v206 + 104))( v191,  enum case for DispatchTimeInterval.seconds(_:),  v207);
  uint64_t v194 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  v195 = swift_allocObject(&unk_1003FB908, 24LL, 7LL);
  swift_weakInit(v195 + 16, v227);
  uint64_t v196 = (void *)swift_allocObject(&unk_1003FB930, 48LL, 7LL);
  uint64_t v197 = v215;
  v196[2] = v216;
  v196[3] = v197;
  v196[4] = v195;
  v196[5] = v145;
  uint64_t v198 = v145;
  unint64_t v199 = v194;
  swift_retain();
  static P2PTimer.async(after:on:execute:)(v191, v199, (uint64_t)sub_1003327D8, (uint64_t)v196);

  swift_release(v196);
  (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v191, v193);
  swift_release(v195);
}

uint64_t NANServiceConfiguration.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a2,  a1,  &protocol requirements base descriptor for NANServiceConfiguration,  &associated type descriptor for NANServiceConfiguration.Identifier);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v17 = a1;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
  uint64_t v9 = String.init<A>(describing:)(&v17, MetatypeMetadata);
  unint64_t v11 = v10;
  uint64_t v17 = 0LL;
  unint64_t v18 = 0xE000000000000000LL;
  v12._countAndFlagsBits = 32LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v7, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  uint64_t v13 = v17;
  uint64_t v14 = (void *)v18;
  uint64_t v17 = v9;
  unint64_t v18 = v11;
  swift_bridgeObjectRetain(v11);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t NANDiscoveryServiceConfiguration.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 40LL))();
}

void NANService.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for NANService,  &associated type descriptor for NANService.Configuration);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(a2, v3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANService,  &associated conformance descriptor for NANService.NANService.Configuration: NANServiceConfiguration);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  Hasher._combine(_:)(v3);
}

BOOL static NANService.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v20 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for NANService,  &associated type descriptor for NANService.Configuration);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8);
  Swift::String v12 = &v18[-v11];
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
  v13(a3, v4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANService,  &associated conformance descriptor for NANService.NANService.Configuration: NANServiceConfiguration);
  Swift::String v15 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  LOBYTE(v19) = v15(AssociatedTypeWitness, AssociatedConformanceWitness);
  int v19 = v19;
  uint64_t v16 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v16(v12, AssociatedTypeWitness);
  v13(a3, v4);
  LOBYTE(v4) = v15(AssociatedTypeWitness, AssociatedConformanceWitness);
  v16(v10, AssociatedTypeWitness);
  return v19 == v4;
}

uint64_t NANBitmap.Channel.operatingClass.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t NANDataManagementFrameTransferCompleteEvent.initiatorDataAddress.getter(unint64_t a1)
{
  return (a1 >> 8) & 0xFFFFFFFFFFFFLL;
}

uint64_t NANPeerServiceIdentifier.peerAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 1) = result;
  *(_BYTE *)(v1 + 3) = BYTE2(result);
  *(_BYTE *)(v1 + 4) = BYTE3(result);
  *(_BYTE *)(v1 + 5) = BYTE4(result);
  *(_BYTE *)(v1 + 6) = BYTE5(result);
  return result;
}

uint64_t (*NonNANOperatingChannelInformation.channelNumber.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void __swiftcall NANPeerServiceIdentifier.init(instanceID:peerAddress:)( CoreP2P::NANPeerServiceIdentifier *__return_ptr retstr, Swift::UInt8 instanceID, CoreP2P::WiFiAddress *peerAddress)
{
}

uint64_t NANPeerServiceIdentifier.description.getter(unint64_t a1)
{
  uint64_t v6 = WiFiAddress.description.getter((a1 >> 8) & 0xFFFFFFFFFFFFLL);
  v1._countAndFlagsBits  = 91LL;
  v1._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object  = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits  = 93LL;
  v4._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return v6;
}

void NANPeerServiceIdentifier.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 8;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  unint64_t v7 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

BOOL static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  LOBYTE(v6)  = BYTE1(a1);
  BYTE1(v6)  = BYTE2(a1);
  BYTE2(v6)  = BYTE3(a1);
  HIBYTE(v6)  = BYTE4(a1);
  LOBYTE(v7)  = BYTE5(a1);
  HIBYTE(v7)  = BYTE6(a1);
  LOBYTE(v4)  = BYTE1(a2);
  BYTE1(v4)  = BYTE2(a2);
  BYTE2(v4)  = BYTE3(a2);
  HIBYTE(v4)  = BYTE4(a2);
  LOBYTE(v5)  = BYTE5(a2);
  HIBYTE(v5)  = BYTE6(a2);
  return v6 == v4 && v7 == v5;
}

BOOL sub_100027830(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100027848()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002788C()
{
}

Swift::Int sub_1000278B4(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000278F4()
{
  if (*v0) {
    return 0x7264644172656570LL;
  }
  else {
    return 0x65636E6174736E69LL;
  }
}

uint64_t sub_10002793C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100028FA0(a1, a2);
  *a3  = result;
  return result;
}

void sub_100027960(_BYTE *a1@<X8>)
{
  *a1  = 2;
}

uint64_t sub_10002796C(uint64_t a1)
{
  unint64_t v2 = sub_100028680();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100027994(uint64_t a1)
{
  unint64_t v2 = sub_100028680();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPeerServiceIdentifier.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100002274(&qword_100405178);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  unint64_t v11 = sub_100028680();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for NANPeerServiceIdentifier.CodingKeys,  &type metadata for NANPeerServiceIdentifier.CodingKeys,  v11,  v9,  v10);
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v5);
  if (!v2)
  {
    v16[0]  = BYTE1(a2);
    v16[1]  = BYTE2(a2);
    v16[2]  = BYTE3(a2);
    v16[3]  = BYTE4(a2);
    v16[4]  = BYTE5(a2);
    v16[5]  = BYTE6(a2);
    char v15 = 1;
    unint64_t v12 = sub_1000286C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v15, v5, &type metadata for WiFiAddress, v12);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANPeerServiceIdentifier.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  unint64_t v7 = HIWORD(a1);
  Hasher.init(_seed:)(v9, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t NANPeerServiceIdentifier.init(from:)(void *a1)
{
  return sub_100028708(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_100027BE4()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Hasher.init(_seed:)(v9, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_100027CA0()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Swift::UInt8 v6 = v0[6];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int sub_100027D28(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Swift::UInt8 v4 = v1[2];
  Swift::UInt8 v5 = v1[3];
  Swift::UInt8 v6 = v1[4];
  Swift::UInt8 v7 = v1[5];
  Swift::UInt8 v8 = v1[6];
  Hasher.init(_seed:)(v10, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

uint64_t sub_100027DE0()
{
  uint64_t v6 = WiFiAddress.description.getter(*(unsigned __int16 *)(v0 + 1) | ((unint64_t)*(unsigned int *)(v0 + 3) << 16));
  v1._countAndFlagsBits  = 91LL;
  v1._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object  = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits  = 93LL;
  v4._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return v6;
}

uint64_t sub_100027E6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100028708(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(_BYTE *)(a2 + 3)  = BYTE3(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
    *(_BYTE *)(a2 + 6)  = BYTE6(result);
  }

  return result;
}

uint64_t sub_100027EC4(void *a1)
{
  return NANPeerServiceIdentifier.encode(to:)( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

BOOL sub_100027EEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  return *(_DWORD *)(a1 + 1) == *(_DWORD *)(a2 + 1) && *(unsigned __int16 *)(a1 + 5) == *(unsigned __int16 *)(a2 + 5);
}

void InternetSharingActivity.Role.hash(into:)(uint64_t a1, __int16 a2)
{
  if ((a2 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Swift::UInt8 v2 = a2;
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v2);
  }

BOOL static InternetSharingActivity.Role.__derived_enum_equals(_:_:)(__int16 a1, __int16 a2)
{
  if ((a1 & 0x100) == 0)
  {
    if ((a2 & 0x100) == 0) {
      return a1 == a2;
    }
    return 0LL;
  }

  return (a2 & 0x100) != 0;
}

Swift::Int InternetSharingActivity.Role.hashValue.getter(__int16 a1)
{
  if ((a1 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(a1);
  }

  return Hasher._finalize()();
}

Swift::Int sub_100028038()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v1);
  }

  return Hasher._finalize()();
}

void sub_1000280A0()
{
  if ((v0[1] & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Swift::UInt8 v1 = *v0;
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v1);
  }

Swift::Int sub_1000280E8(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v2);
  }

  return Hasher._finalize()();
}

uint64_t sub_10002814C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = a1[1];
  uint64_t result = a2[1];
  if ((v3 & 1) == 0) {
    return (*a1 == *a2) & ~(_DWORD)result;
  }
  return result;
}

uint64_t InternetSharingActivity.role.getter(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t DeprecatedNANAvailability.repeats.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t InternetSharingActivity.init(role:active:)(__int16 a1, char a2)
{
  if ((a2 & 1) != 0) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  return v2 & 0xFFFFFE00 | a1 & 0x100 | a1;
}

void InternetSharingActivity.hash(into:)(uint64_t a1, int a2)
{
  if ((a2 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(a2);
  }

  Hasher._combine(_:)(BYTE2(a2) & 1);
}

uint64_t static InternetSharingActivity.__derived_struct_equals(_:_:)(int a1, int a2)
{
  if ((a1 & 0x100) != 0)
  {
    if ((a2 & 0x100) == 0) {
      return 0LL;
    }
    return ((a1 & 0x10000) == 0) ^ ((a2 & 0x10000u) >> 16);
  }

  uint64_t result = 0LL;
  return result;
}

Swift::Int InternetSharingActivity.hashValue.getter(int a1)
{
  if ((a1 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(a1);
  }

  Hasher._combine(_:)(BYTE2(a1) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1000282A4()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100028320()
{
  Swift::UInt8 v1 = v0[2];
  if ((v0[1] & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Swift::UInt8 v2 = *v0;
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v2);
  }

  Hasher._combine(_:)(v1);
}

Swift::Int sub_10002837C(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Swift::UInt8 v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v2);
  }

  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000283F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2 = a2[1];
  if ((a1[1] & 1) != 0)
  {
    if (!a2[1]) {
      return 0LL;
    }
  }

  else
  {
    if (*a1 != *a2) {
      char v2 = 1;
    }
    if ((v2 & 1) != 0) {
      return 0LL;
    }
  }

  return a1[2] ^ a2[2] ^ 1u;
}

unint64_t MulticastServiceType.rawValue.getter()
{
  return 0xD000000000000012LL;
}

BOOL MulticastServiceType.init(rawValue:)(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6BF0, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

Swift::Int sub_10002849C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000284F0(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000012LL, 0x80000001003618E0LL);
}

Swift::Int sub_10002850C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10002855C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits  = *a1;
  Swift::UInt8 v4 = (void *)a1[1];
  v3._object  = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6420, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2  = v5 != 0;
  return result;
}

void sub_1000285AC(void *a1@<X8>)
{
  *a1  = 0xD000000000000012LL;
  a1[1]  = 0x80000001003618E0LL;
}

uint64_t sub_1000285CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000290B4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100028628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000290B4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100028674(_BYTE *a1@<X8>)
{
  *a1  = *v1;
}

unint64_t sub_100028680()
{
  unint64_t result = qword_100405180;
  if (!qword_100405180)
  {
    unint64_t result = swift_getWitnessTable(&unk_100339F08, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405180);
  }

  return result;
}

unint64_t sub_1000286C4()
{
  unint64_t result = qword_100405188;
  if (!qword_100405188)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WiFiAddress, &type metadata for WiFiAddress);
    atomic_store(result, (unint64_t *)&qword_100405188);
  }

  return result;
}

uint64_t sub_100028708(void *a1)
{
  uint64_t v3 = sub_100002274(&qword_1004051D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100021104(a1, v7);
  unint64_t v9 = sub_100028680();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for NANPeerServiceIdentifier.CodingKeys,  &type metadata for NANPeerServiceIdentifier.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return sub_100002AC4(a1);
  }
  BYTE6(v18)  = 0;
  unsigned __int8 v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v18 + 6, v3);
  char v17 = 1;
  unint64_t v11 = sub_1000290F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v18,  &type metadata for WiFiAddress,  &v17,  v3,  &type metadata for WiFiAddress,  v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v12 = v18;
  uint64_t v13 = BYTE1(v18);
  uint64_t v14 = *(unsigned int *)((char *)&v18 + 2);
  sub_100002AC4(a1);
  return v10 | (unint64_t)(v12 << 8) | (v13 << 16) | (v14 << 24);
}

unint64_t sub_100028884()
{
  unint64_t result = qword_100405190;
  if (!qword_100405190)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANPeerServiceIdentifier,  &type metadata for NANPeerServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_100405190);
  }

  return result;
}

unint64_t sub_1000288CC()
{
  unint64_t result = qword_100405198;
  if (!qword_100405198)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InternetSharingActivity.Role,  &type metadata for InternetSharingActivity.Role);
    atomic_store(result, (unint64_t *)&qword_100405198);
  }

  return result;
}

unint64_t sub_100028914()
{
  unint64_t result = qword_1004051A0;
  if (!qword_1004051A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InternetSharingActivity,  &type metadata for InternetSharingActivity);
    atomic_store(result, (unint64_t *)&qword_1004051A0);
  }

  return result;
}

unint64_t sub_10002895C()
{
  unint64_t result = qword_1004051A8;
  if (!qword_1004051A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MulticastServiceType,  &type metadata for MulticastServiceType);
    atomic_store(result, (unint64_t *)&qword_1004051A8);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPeerServiceIdentifier()
{
  return &type metadata for NANPeerServiceIdentifier;
}

uint64_t getEnumTagSinglePayload for InternetSharingActivity(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for InternetSharingActivity( uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(_BYTE *)(result + 2)  = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3)  = v4;
      }
      else {
        *(_BYTE *)(result + 3)  = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3)  = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + 2)  = a2 + 1;
      return result;
    }

    *(_BYTE *)(result + 3)  = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InternetSharingActivity()
{
  return &type metadata for InternetSharingActivity;
}

uint64_t getEnumTagSinglePayload for InternetSharingActivity.Role(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 0xFFFF;
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_100028B14 + 4 * byte_100339A50[v4]))();
}

uint64_t sub_100028B2C(unsigned __int16 *a1)
{
  uint64_t v1 = a1[1];
  if (a1[1]) {
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  }
  return v1;
}

void sub_100028B38(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2)) {
    JUMPOUT(0x100028B40LL);
  }
  JUMPOUT(0x100028B50LL);
}

uint64_t storeEnumTagSinglePayload for InternetSharingActivity.Role(_WORD *a1, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    LODWORD(v5)  = v4;
  }
  else {
    LODWORD(v5)  = 0;
  }
  if (a3) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_100028BDC + 4 * byte_100339A5A[v5]))();
  }
  *a1  = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_100028BBC + 4 * byte_100339A55[v5]))();
}

uint64_t sub_100028BBC(uint64_t result)
{
  *(_BYTE *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100028BDC(uint64_t result)
{
  *(_BYTE *)(result + 2)  = 0;
  return result;
}

uint64_t sub_100028BE4(uint64_t result)
{
  *(_DWORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100028BEC(uint64_t result)
{
  *(_WORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_100028BF4(uint64_t result)
{
  *(_WORD *)(result + 2)  = 0;
  return result;
}

uint64_t sub_100028BFC(uint64_t result)
{
  *(_DWORD *)(result + 2)  = 0;
  return result;
}

uint64_t sub_100028C08(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_100028C28(_BYTE *result, int a2)
{
  if (a2)
  {
    *unint64_t result = a2 - 1;
    result[1]  = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }

  else
  {
    result[1]  = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for InternetSharingActivity.Role()
{
  return &type metadata for InternetSharingActivity.Role;
}

uint64_t getEnumTagSinglePayload for MulticastServiceType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MulticastServiceType(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100028CF0 + 4 * byte_100339A5F[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100028D10 + 4 * byte_100339A64[v4]))();
  }
}

_BYTE *sub_100028CF0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100028D10(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100028D18(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100028D20(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100028D28(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100028D30(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MulticastServiceType()
{
  return &type metadata for MulticastServiceType;
}

_BYTE *initializeBufferWithCopyOfBuffer for Bandwidth(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Layer3Protocol(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for NANPeerServiceIdentifier.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100028E34 + 4 * byte_100339A6E[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100028E68 + 4 * byte_100339A69[v4]))();
}

uint64_t sub_100028E68(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100028E70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100028E78LL);
  }
  return result;
}

uint64_t sub_100028E84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100028E8CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100028E90(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100028E98(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100028EA4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100028EAC(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NANPeerServiceIdentifier.CodingKeys()
{
  return &type metadata for NANPeerServiceIdentifier.CodingKeys;
}

unint64_t sub_100028ECC()
{
  unint64_t result = qword_1004051B0;
  if (!qword_1004051B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100339EE0, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004051B0);
  }

  return result;
}

unint64_t sub_100028F14()
{
  unint64_t result = qword_1004051B8;
  if (!qword_1004051B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100339E50, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004051B8);
  }

  return result;
}

unint64_t sub_100028F5C()
{
  unint64_t result = qword_1004051C0;
  if (!qword_1004051C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100339E78, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004051C0);
  }

  return result;
}

uint64_t sub_100028FA0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65636E6174736E69LL && a2 == 0xEA00000000004449LL)
  {
    unint64_t v5 = 0xEA00000000004449LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6174736E69LL, 0xEA00000000004449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7264644172656570LL && a2 == 0xEB00000000737365LL)
  {
    swift_bridgeObjectRelease(0xEB00000000737365LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7264644172656570LL, 0xEB00000000737365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_1000290B4()
{
  unint64_t result = qword_1004051C8;
  if (!qword_1004051C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MulticastServiceType,  &type metadata for MulticastServiceType);
    atomic_store(result, (unint64_t *)&qword_1004051C8);
  }

  return result;
}

unint64_t sub_1000290F8()
{
  unint64_t result = qword_1004051D8[0];
  if (!qword_1004051D8[0])
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WiFiAddress, &type metadata for WiFiAddress);
    atomic_store(result, qword_1004051D8);
  }

  return result;
}

uint64_t Either<>.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  unsigned __int8 v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v8);
  char v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  char v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v19, a1);
  if (swift_getEnumCaseMultiPayload(v17, a1) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v17, v6);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v6, a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v11, a2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }

  return v20;
}

uint64_t sub_1000292BC(uint64_t a1, uint64_t a2)
{
  return Either<>.description.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16));
}

uint64_t Either.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v4);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v14 + 16))(v13);
  if (swift_getEnumCaseMultiPayload(v13, a1) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v13, v2);
    uint64_t v19 = v2;
    char v15 = sub_10002278C(v18);
    (*(void (**)(void *, char *, uint64_t))(v3 + 16))(v15, v6, v2);
    Mirror.init(reflecting:)(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    uint64_t v19 = v7;
    char v17 = sub_10002278C(v18);
    (*(void (**)(void *, char *, uint64_t))(v8 + 16))(v17, v11, v7);
    Mirror.init(reflecting:)(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

uint64_t static Either<>.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v52 = *(void *)(a4 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v47 = (char *)&v44 - v11;
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v46 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v45 = (char *)&v44 - v15;
  uint64_t v18 = type metadata accessor for Either(0LL, v16, v17, v17);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v44 - v23;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2(0LL, v18, v18, 0LL, 0LL);
  uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v27 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v29 = (char *)&v44 - v28;
  uint64_t v30 = (char *)&v44 + *(int *)(v27 + 48) - v28;
  uint64_t v53 = v19;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v31((char *)&v44 - v28, v54, v18);
  v31(v30, v55, v18);
  if (swift_getEnumCaseMultiPayload(v29, v18) == 1)
  {
    v31(v22, (uint64_t)v29, v18);
    if (swift_getEnumCaseMultiPayload(v30, v18) == 1)
    {
      uint64_t v32 = v52;
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      uint64_t v34 = v47;
      v33(v47, v22, a4);
      uint64_t v35 = v48;
      v33(v48, v30, a4);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v34, v35, a4, v50);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
      v37(v35, a4);
      v37(v34, a4);
LABEL_9:
      uint64_t v26 = v53;
      goto LABEL_10;
    }

    (*(void (**)(char *, uint64_t))(v52 + 8))(v22, a4);
  }

  else
  {
    v31(v24, (uint64_t)v29, v18);
    if (swift_getEnumCaseMultiPayload(v30, v18) != 1)
    {
      uint64_t v38 = v51;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      uint64_t v40 = v45;
      v39(v45, v24, a3);
      uint64_t v41 = v46;
      v39(v46, v30, a3);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v41, a3, v49);
      char v42 = *(void (**)(char *, uint64_t))(v38 + 8);
      v42(v41, a3);
      v42(v40, a3);
      goto LABEL_9;
    }

    (*(void (**)(char *, uint64_t))(v51 + 8))(v24, a3);
  }

  char v36 = 0;
  uint64_t v18 = TupleTypeMetadata2;
LABEL_10:
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v18);
  return v36 & 1;
}

uint64_t sub_1000297A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Either<>.== infix(_:_:)( a1,  a2,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  *(void *)(a4 - 8),  *(void *)(a4 - 16));
}

uint64_t Either<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v9);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v21, a2);
  if (swift_getEnumCaseMultiPayload(v19, a2) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v19, v7);
    dispatch thunk of Hashable.hash(into:)(a1, v7, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v19, v13);
    dispatch thunk of Hashable.hash(into:)(a1, v13, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }

Swift::Int Either<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_100029980(uint64_t a1, uint64_t a2)
{
  return Either<>.hashValue.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16));
}

uint64_t sub_10002998C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Either<>.hash(into:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

Swift::Int sub_100029998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 16);
  uint64_t v4 = *(void *)(a3 - 8);
  Hasher.init(_seed:)(v7, a1);
  Either<>.hash(into:)((uint64_t)v7, a2, v4, v5);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Either(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Either);
}

uint64_t sub_1000299F8(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for <> Either<A, B>, a1);
}

uint64_t sub_100029A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_100029A3C(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0]  = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1]  = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 0LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100029AC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X15 }
    }

    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6)  = 1;
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6)  = 0;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }

  return v3;
}

uint64_t sub_100029BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v2 - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  unsigned int v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1) {
      uint64_t v3 = *(void *)(v2 - 8);
    }
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    else {
      uint64_t v7 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100029C3C + 4 * byte_100339F5D[v7]))();
  }

uint64_t sub_100029C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7)  = v10;
  return a1;
}

uint64_t sub_100029D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9)  = v16;
  }

  return a1;
}

uint64_t sub_100029EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7)  = v10;
  return a1;
}

uint64_t sub_100029FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9)  = v16;
  }

  return a1;
}

uint64_t sub_10002A130(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_10002A1F8 + 4 * byte_100339F80[(v4 - 1)]))();
}

void sub_10002A244(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = &dword_100000004;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1  = v10;
        *((_BYTE *)a1 + 2)  = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1  = v10;
      }

      else
      {
        *(_BYTE *)a1  = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1  = v8;
  }

  __asm { BR              X10 }

uint64_t sub_10002A3F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_10002A43C + 4 * byte_100339F8E[v3]))();
}

void sub_10002A484(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) <= *(void *)(*(void *)(*(void *)(a3 + 16)
                                                                                              - 8LL)
                                                                                  + 64LL))
      size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    else {
      size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    }
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5]  = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1  = v8;
        a1[2]  = BYTE2(v8);
      }

      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1  = v8;
      }

      else
      {
        *a1  = v8;
      }
    }

    else
    {
      a1[v5]  = 2;
      bzero(a1, v5);
      *(_DWORD *)a1  = v6;
    }
  }

  else
  {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    if (v4 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
      unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    }
    a1[v4]  = a2;
  }

uint64_t sub_10002A56C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v3 = 0x64656C6261736964LL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v5 = 0x64656C6261736964LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE700000000000000LL;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002A610(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 6710895LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x6775626564LL;
    }
    else {
      uint64_t v4 = 0x61427963696C6F70LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE500000000000000LL;
    }
    else {
      unint64_t v5 = 0xEB00000000646573LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 0x6775626564LL;
      }
      else {
        uint64_t v2 = 0x61427963696C6F70LL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE500000000000000LL;
      }
      else {
        unint64_t v7 = 0xEB00000000646573LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE300000000000000LL;
    uint64_t v4 = 6710895LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE300000000000000LL;
  if (v4 != 6710895)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

uint64_t sub_10002A728(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v3 = 0x526C617571457874LL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000078LL;
  }
  else {
    unint64_t v4 = 0xEC00000078526C61LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x757145746F4E7874LL;
  }
  else {
    uint64_t v5 = 0x526C617571457874LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEC00000078526C61LL;
  }
  else {
    unint64_t v6 = 0xE900000000000078LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10002A7DC(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10002A81C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10002A880 + 4 * byte_10033A0B5[a2]))(6647407LL);
}

uint64_t sub_10002A880(uint64_t a1)
{
  if (a1 == 6647407 && v1 == 0xE300000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6647407LL, 0xE300000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return v2 & 1;
}

uint64_t sub_10002A92C(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 7365749LL;
  }
  else {
    uint64_t v2 = 7365492LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 7365749LL;
  }
  else {
    uint64_t v3 = 7365492LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE300000000000000LL, v3, 0xE300000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_10002A994(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEC0000006F727465LL;
  unint64_t v3 = 0x526E496B63757473LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x536E496B63757473LL;
    }
    else {
      unint64_t v5 = 0xD000000000000014LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEB000000006E6163LL;
    }
    else {
      unint64_t v6 = 0x8000000100361570LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  unint64_t v5 = 0x526E496B63757473LL;
  unint64_t v6 = 0xEC0000006F727465LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x536E496B63757473LL;
    }
    else {
      unint64_t v3 = 0xD000000000000014LL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEB000000006E6163LL;
    }
    else {
      unint64_t v2 = 0x8000000100361570LL;
    }
  }

LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    char v8 = 1;
    unint64_t v2 = v6;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

  if (v5 == v3 && v6 == v2)
  {
    char v8 = 1;
    unint64_t v2 = v6;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

      __break(1u);
    }

      __break(1u);
    }

      __break(1u);
    }

    v20._countAndFlagsBits  = 0xD000000000000013LL;
    v20._object  = (void *)0x80000001003640F0LL;
    String.append(_:)(v20);
    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }

  sub_1000D32C8(&v4, AWDLTrafficRegistrationServiceRemoteCamera);

  if ((v2 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_11:
  if (v2 < 0) {
    goto LABEL_17;
  }
  return v5;
}

    __break(1u);
  }

  return result;
}

    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v55);
    __break(1u);
    return result;
  }

  uint64_t v21 = type metadata accessor for XPCSession(0LL);
  uint64_t result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    uint64_t v174 = v27;
    uint64_t v64 = sub_1000E77F4(a1, (uint64_t)v21);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    uint64_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      char v67 = swift_slowAlloc(22LL, -1LL);
      uint64_t v68 = swift_slowAlloc(64LL, -1LL);
      v201[0]  = v68;
      *(_DWORD *)char v67 = 136315394;
      unint64_t v69 = _typeName(_:qualified:)(v6, 0LL);
      uint64_t v71 = v70;
      unint64_t v199 = sub_10000235C(v69, v70, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200);
      swift_bridgeObjectRelease(v71);
      *(_WORD *)(v67 + 12)  = 2080;
      DriverEvent.shortDescription.getter();
      unint64_t v73 = v72;
      unint64_t v199 = sub_10000235C(v74, v72, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200);
      swift_bridgeObjectRelease(v73);
      sub_10005802C((uint64_t)v21, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "%s unable to handle event: %s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy(v68, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    else
    {

      sub_10005802C((uint64_t)v21, type metadata accessor for DriverEvent);
    }

                swift_beginAccess(v8, aBlock, 33LL, 0LL);
                uint64_t v37 = sub_1002F8238((uint64_t)v14);
                swift_endAccess(aBlock);
                char v36 = swift_bridgeObjectRelease(v37);
                goto LABEL_16;
              }

  int64_t v103 = v501;
  sub_1000226B0(v62 + v65[14], (uint64_t)v501, (uint64_t *)&unk_1004104A0);
  if (v83(v103, 1LL, v82) == 1)
  {
    sub_1000225EC((uint64_t)v103, (uint64_t *)&unk_1004104A0);
    int64_t v104 = (uint64_t)v500;
  }

  else
  {
    uint64_t v105 = *((unsigned __int8 *)v103 + 64);
    sub_10005802C((uint64_t)v103, type metadata accessor for AWDLActionFrame.DataPathState);
    int64_t v104 = (uint64_t)v500;
    if (v105 == 31)
    {
      uint64_t v106 = v65;
      int64_t v107 = swift_retain();
      uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
      uint64_t v109 = static os_log_type_t.default.getter(v108);
      if (os_log_type_enabled(v108, v109))
      {
        uint64_t v110 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v111 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock  = v111;
        *(_DWORD *)uint64_t v110 = 136315138;
        uint64_t v112 = WiFiAddress.description.getter(*(unsigned __int16 *)(v62 + v65[5]) | ((unint64_t)*(unsigned int *)(v62 + v65[5] + 2) << 16));
        uint64_t v114 = v113;
        v510  = (id)sub_10000235C(v112, v113, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v510, v511);
        swift_release(v502);
        uint64_t v115 = v114;
        unint64_t v56 = v502;
        swift_bridgeObjectRelease(v115);
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "Received a recovery UMI from %s", v110, 0xCu);
        swift_arrayDestroy(v111, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v111, -1LL, -1LL);
        swift_slowDealloc(v110, -1LL, -1LL);
      }

      else
      {
        swift_release(v56);
      }

      unint64_t v161 = v450;
      uint64_t v162 = (void *)((char *)v5 + *(void *)(*v5 + 536LL));
      swift_beginAccess(v162, &aBlock, 0LL, 0LL);
      uint64_t v163 = *v162;
      uint64_t v164 = sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      uint64_t v165 = sub_100245750();
      uint64_t v166 = (void *)NANBitmap.Channel.operatingClass.getter(v163);
      v510  = v166;
      __chkstk_darwin();
      unint64_t v167 = type metadata accessor for Dictionary.Keys(0LL, v164, v161, v165);
      swift_bridgeObjectRetain(v166);
      uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v167);
      uint64_t v169 = (void *)Sequence.filter(_:)(sub_10033307C, &v443[-32], v167, WitnessTable);
      v510  = v169;
      __chkstk_darwin();
      v441  = v5;
      v442  = v56;
      uint64_t v170 = sub_100002274(&qword_10040CC10);
      uint64_t v171 = swift_getWitnessTable(&protocol conformance descriptor for [A], v170);
      Sequence.forEach(_:)(sub_100333098, &v443[-32], v170, v171);
      swift_bridgeObjectRelease(v169);
      uint64_t v65 = v106;
      uint64_t v59 = v452;
      goto LABEL_105;
    }
  }

  sub_1000226B0(v62 + v65[14], v104, (uint64_t *)&unk_1004104A0);
  if (v83((_BYTE *)v104, 1LL, v82) == 1)
  {
    sub_1000225EC(v104, (uint64_t *)&unk_1004104A0);
LABEL_33:
    __int16 v158 = v497;
    sub_1000226B0(v62 + v65[14], (uint64_t)v497, (uint64_t *)&unk_1004104A0);
    v83(v158, 1LL, v82);
    __int128 v159 = (uint64_t)v158;
    uint64_t v160 = (uint64_t *)&unk_1004104A0;
LABEL_34:
    sub_1000225EC(v159, v160);
    goto LABEL_105;
  }

  uint64_t v116 = *(unsigned __int8 *)(v104 + 64);
  sub_10005802C(v104, type metadata accessor for AWDLActionFrame.DataPathState);
  if (v116 != 32) {
    goto LABEL_33;
  }
  v449  = v65;
  uint64_t v117 = (void **)((char *)v5 + *(void *)(*v5 + 536LL));
  swift_beginAccess(v117, &v510, 0LL, 0LL);
  v501  = v117;
  uint64_t v118 = (char *)*v117;
  v509  = v118;
  __chkstk_darwin();
  uint64_t v119 = v495;
  *(void *)&v443[-32]  = v499;
  *(void *)&v443[-24]  = v119;
  v444  = v62;
  v441  = (_BYTE *)v62;
  uint64_t v120 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v121 = sub_100245750();
  v500  = (_BYTE *)v120;
  int64_t v122 = v450;
  uint64_t v123 = type metadata accessor for Dictionary(0LL, v120, v450, v121);
  swift_bridgeObjectRetain(v118);
  uint64_t v124 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v123);
  Collection.firstIndex(where:)(&aBlock, sub_10033305C, &v443[-48], v123, v124);
  swift_bridgeObjectRelease(v509);
  if (v505 == 255)
  {
    swift_bridgeObjectRelease(v452);
    uint64_t v196 = v502;
    uint64_t v197 = swift_retain();
    uint64_t v198 = (os_log_s *)Logger.logObject.getter(v197);
    unint64_t v199 = static os_log_type_t.error.getter(v198);
    if (os_log_type_enabled(v198, v199))
    {
      uint64_t v200 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v201  = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock  = v201;
      *(_DWORD *)uint64_t v200 = 136315138;
      uint64_t v202 = WiFiAddress.description.getter(*(unsigned __int16 *)(v444 + v449[5]) | ((unint64_t)*(unsigned int *)(v444 + v449[5] + 2) << 16));
      int v204 = v203;
      v509  = (char *)sub_10000235C(v202, v203, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
      swift_release(v196);
      swift_bridgeObjectRelease(v204);
      _os_log_impl( (void *)&_mh_execute_header,  v198,  v199,  "Peer %s notified about infrastructure disconnect but no active traffic registration was found",  v200,  0xCu);
      swift_arrayDestroy(v201, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v201, -1LL, -1LL);
      swift_slowDealloc(v200, -1LL, -1LL);
      swift_release(v196);
    }

    else
    {
      swift_release_n(v196, 2LL);
    }
  }

  else
  {
    v445  = v5;
    uint64_t v126 = aBlock;
    uint64_t v125 = (_BYTE *)v504;
    LODWORD(v492)  = v505;
    int v127 = v505 & 1;
    uint64_t v128 = *v501;
    swift_bridgeObjectRetain(*v501);
    uint64_t v129 = v488;
    char v130 = v500;
    Dictionary.subscript.getter(&aBlock, v488, v126, v125, v127, v128, v500, v122, v121);
    char v131 = swift_bridgeObjectRelease(v128);
    v498  = *(void (**)(_BYTE *, uint64_t))(v447 + 8);
    ((void (*)(_BYTE *, uint64_t, __n128))v498)(v129, v122, v131);
    os_log_t v132 = aBlock;
    v496  = [aBlock uniqueIdentifier];

    uint64_t v133 = *v501;
    swift_bridgeObjectRetain(*v501);
    v495  = v121;
    uint64_t v134 = v485;
    v499  = (uint64_t)v126;
    v497  = v125;
    LODWORD(v491)  = v127;
    Dictionary.subscript.getter(&aBlock, v485, v126, v125, v127, v133, v130, v122, v121);
    swift_bridgeObjectRelease(v133);

    uint64_t v135 = v486;
    sub_1000226B0((uint64_t)&v134[*(int *)(v122 + 40)], (uint64_t)v486, qword_100410330);
    v498(v134, v122);
    __int128 v136 = v493;
    uint64_t v137 = v494;
    LODWORD(v134)  = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v493 + 48))(v135, 1LL, v494);
    uint64_t v138 = sub_1000225EC((uint64_t)v135, qword_100410330);
    unint64_t v56 = v502;
    if ((_DWORD)v134 == 1)
    {
      char v139 = v484;
      UUID.init()(v138);
      char v140 = (uint64_t)v478;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v136 + 16))(v478, v139, v137);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v136 + 56))(v140, 0LL, 1LL, v137);
      uint64_t v141 = v501;
      swift_beginAccess(v501, &aBlock, 33LL, 0LL);
      __int128 v142 = (char *)*v141;
      char *v141 = (id)0x8000000000000000LL;
      if ((swift_isUniquelyReferenced_nonNull_native(v142) & 1) == 0)
      {
        v509  = v142;
        type metadata accessor for _NativeDictionary(0LL, v500, v450, v495);
        _NativeDictionary.copy()();
        __int128 v142 = v509;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      if (v499 < 0 || v499 >= 1LL << v142[32])
      {
        __break(1u);
      }

      else if (((*(void *)&v142[(((unint64_t)v499 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64] >> v499) & 1) != 0)
      {
        if (*((_DWORD *)v142 + 9) == (_DWORD)v497)
        {
          sub_100057104( v140,  *((void *)v142 + 7) + *(void *)(v447 + 72) * v499 + *(int *)(v450 + 40),  qword_100410330);
          char *v141 = v142;
          swift_endAccess(&aBlock);
          sub_100306904();
          uint64_t v143 = v496;
          swift_retain();
          __int128 v144 = v143;
          __int128 v145 = (os_log_s *)Logger.logObject.getter(v144);
          __int16 v146 = static os_log_type_t.default.getter(v145);
          uint64_t v147 = os_log_type_enabled(v145, v146);
          v496  = v144;
          if (v147)
          {
            uint64_t v148 = swift_slowAlloc(22LL, -1LL);
            uint64_t v149 = (void **)swift_slowAlloc(64LL, -1LL);
            aBlock  = v149;
            *(_DWORD *)uint64_t v148 = 136315394;
            uint64_t v150 = WiFiAddress.description.getter(*(unsigned __int16 *)(v444 + v449[5]) | ((unint64_t)*(unsigned int *)(v444 + v449[5] + 2) << 16));
            char v152 = v151;
            v509  = (char *)sub_10000235C(v150, v151, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);
            swift_release(v502);
            swift_bridgeObjectRelease(v152);
            *(_WORD *)(v148 + 12)  = 2080;
            __int128 v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v496);
            __int128 v155 = v154;
            v509  = (char *)sub_10000235C(v153, v154, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v509, &v510);

            __int16 v156 = v155;
            unint64_t v56 = v502;
            swift_bridgeObjectRelease(v156);
            _os_log_impl( (void *)&_mh_execute_header,  v145,  v146,  "Peer %s disconnected infrastructure network to avoid retro mode while running %s",  (uint8_t *)v148,  0x16u);
            swift_arrayDestroy(v149, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v149, -1LL, -1LL);
            __int128 v157 = v148;
            __int128 v144 = v496;
            swift_slowDealloc(v157, -1LL, -1LL);
          }

          else
          {

            swift_release(v56);
          }

          uint64_t v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteCamera);
          v233  = v232;
          uint64_t v235 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
          uint64_t v236 = v234;
          if (v231 == v235 && v233 == v234)
          {
            swift_bridgeObjectRelease_n(v233, 2LL);
            uint64_t v237 = 1LL;
            uint64_t v62 = v444;
          }

          else
          {
            uint64_t v238 = _stringCompareWithSmolCheck(_:_:expecting:)(v231, v233, v235, v234, 0LL);
            swift_bridgeObjectRelease(v233);
            swift_bridgeObjectRelease(v236);
            uint64_t v62 = v444;
            if ((v238 & 1) == 0)
            {
              uint64_t v239 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteScreen);
              uint64_t v241 = v240;
              v243  = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
              uint64_t v244 = v242;
              if (v239 == v243 && v241 == v242)
              {
                swift_bridgeObjectRelease_n(v241, 2LL);
              }

              else
              {
                objc_super v364 = _stringCompareWithSmolCheck(_:_:expecting:)(v239, v241, v243, v242, 0LL);
                swift_bridgeObjectRelease(v241);
                swift_bridgeObjectRelease(v244);
                if ((v364 & 1) == 0)
                {
                  v417  = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceTVRemoteCamera);
                  v419  = v418;
                  v421  = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
                  v422  = v420;
                  if (v417 == v421 && v419 == v420)
                  {
                    swift_bridgeObjectRelease_n(v419, 2LL);
                    uint64_t v59 = v452;
                  }

                  else
                  {
                    v439  = _stringCompareWithSmolCheck(_:_:expecting:)(v417, v419, v421, v420, 0LL);
                    swift_bridgeObjectRelease(v419);
                    swift_bridgeObjectRelease(v422);
                    uint64_t v237 = 0LL;
                    uint64_t v59 = v452;
                    if ((v439 & 1) == 0) {
                      goto LABEL_91;
                    }
                  }

                  v440  = v454;
                  sub_1000226B0(v62 + v449[14], (uint64_t)v454, (uint64_t *)&unk_1004104A0);
                  if (v83(v440, 1LL, v82) == 1)
                  {
                    sub_1000225EC((uint64_t)v440, (uint64_t *)&unk_1004104A0);
                    uint64_t v237 = 0LL;
                  }

                  else
                  {
                    uint64_t v237 = v440[84];
                    sub_10005802C((uint64_t)v440, type metadata accessor for AWDLActionFrame.DataPathState);
                  }

                  goto LABEL_91;
                }
              }
            }

            uint64_t v237 = 1LL;
          }

          uint64_t v59 = v452;
LABEL_91:
          objc_super v365 = AssociatedConformanceWitness;
          __int128 v366 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
          __int16 v367 = swift_checkMetadataState(0LL, v473);
          v368  = v474;
          v366(v367, v365);
          __int16 v369 = v367;
          __int128 v370 = v477;
          __int16 v371 = swift_getAssociatedConformanceWitness( v365,  v369,  v477,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.ActivityCoordinator: ActivityCoordinatorControls);
          objc_super v372 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v371 + 8))(v370, v371);
          (*(void (**)(_BYTE *, uint64_t))(v476 + 8))(v368, v370);
          if (v372)
          {
            __int128 v373 = *v501;
            swift_bridgeObjectRetain(*v501);
            __int128 v374 = v467;
            __int128 v375 = v450;
            Dictionary.subscript.getter(&aBlock, v467, v499, v497, v491, v373, v500, v450, v495);
            __int128 v376 = swift_bridgeObjectRelease(v373);
            ((void (*)(_BYTE *, uint64_t, __n128))v498)(v374, v375, v376);
            v377  = aBlock;
            __int128 v378 = [aBlock localization];

            if (!v378)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
              __int16 v380 = v379;
              __int128 v378 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v380);
            }

            __int128 v381 = v484;
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            v507  = sub_100314CC8;
            v508  = 0LL;
            aBlock  = _NSConcreteStackBlock;
            v504  = 1107296256LL;
            v505  = sub_100300778;
            v506  = &unk_1003FBA10;
            __int16 v383 = _Block_copy(&aBlock);
            __int128 v384 = v496;
            [v372 showInfrastructureDisconnectOnRetroModeNotificationForService:v496 localization:v378 phoneDisconnected:v237 uuid:isa completionHandler:v383];
            _Block_release(v383);

            swift_unknownObjectRelease(v372);
            (*(void (**)(_BYTE *, uint64_t))(v493 + 8))(v381, v494);
          }

          else
          {
            (*(void (**)(_BYTE *, uint64_t))(v493 + 8))(v484, v494);
          }

          uint64_t v65 = v449;
LABEL_105:
          v430  = sub_1003094C4();
          v431  = AWDLPeer.countryCode.getter();
          sub_1002FCC14(v431);
          swift_release(v430);
          v436  = (unsigned __int16 *)(v62 + v65[11]);
          v437  = *((_BYTE *)v436 + 2);
          if ((v451 & 1) != 0)
          {
            if ((v436[1] & 1) != 0) {
              goto LABEL_112;
            }
          }

          else
          {
            if (v448 != *v436) {
              v437  = 1;
            }
            if ((v437 & 1) == 0) {
              goto LABEL_112;
            }
          }

          v438  = sub_100304074(v432, v433, v434, v435);
          sub_1002AACFC(v62, v59);
          swift_release(v56);
          unint64_t v56 = (uint64_t)v438;
LABEL_112:
          swift_release(v56);
          swift_bridgeObjectRelease(v59);
          return;
        }

uint64_t sub_10002AAC4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6E6F73616572LL;
  }
  else {
    uint64_t v3 = 0x65636976726573LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6E6F73616572LL;
  }
  else {
    uint64_t v5 = 0x65636976726573LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10002AB64(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10002ABB4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10002AC5C + 4 * byte_10033A0C1[a2]))(0x6172666E49796DLL);
}

uint64_t sub_10002AC5C(uint64_t a1)
{
  if (a1 == 0x6172666E49796DLL && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6172666E49796DLL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_10002AD5C(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 0x65636976726573LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x616974696E497369LL;
    }
    else {
      uint64_t v4 = 0x6E6F697461727564LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xEB00000000726F74LL;
    }
    else {
      unint64_t v5 = 0xE800000000000000LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 0x616974696E497369LL;
      }
      else {
        uint64_t v2 = 0x6E6F697461727564LL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xEB00000000726F74LL;
      }
      else {
        unint64_t v7 = 0xE800000000000000LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE700000000000000LL;
    uint64_t v4 = 0x65636976726573LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE700000000000000LL;
  if (v4 != 0x65636976726573LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

uint64_t sub_10002AE84(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x64657463656A6572LL;
  }
  else {
    uint64_t v3 = 0x6553657669746361LL;
  }
  if (v2) {
    unint64_t v4 = 0xED00006563697672LL;
  }
  else {
    unint64_t v4 = 0xEF65636976726553LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x64657463656A6572LL;
  }
  else {
    uint64_t v5 = 0x6553657669746361LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEF65636976726553LL;
  }
  else {
    unint64_t v6 = 0xED00006563697672LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002AF40(char a1, char a2)
{
  uint64_t v2 = qword_10033A8A0[a1];
  uint64_t v3 = qword_10033A8A0[a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE200000000000000LL, v3, 0xE200000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE200000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_10002AFA4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x636572726F636E69LL;
  }
  else {
    unint64_t v3 = 0xD000000000000011LL;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100360B60LL;
  }
  else {
    unint64_t v4 = 0xED00006570795474LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0x636572726F636E69LL;
  }
  else {
    unint64_t v5 = 0xD000000000000011LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xED00006570795474LL;
  }
  else {
    unint64_t v6 = 0x8000000100360B60LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002B058(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x657669746361LL;
  }
  else {
    uint64_t v3 = 0x65766973736170LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x657669746361LL;
  }
  else {
    uint64_t v5 = 0x65766973736170LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10002B0F8(char a1)
{
  __asm { BR              X12 }

uint64_t sub_10002B144(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10002B1EC + 4 * byte_10033A0CD[a2]))(0xD000000000000010LL);
}

uint64_t sub_10002B1EC(uint64_t a1)
{
  unint64_t v2 = 0x8000000100361820LL;
  if (a1 == 0xD000000000000010LL && v1 == 0x8000000100361820LL)
  {
    char v3 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000010LL, 0x8000000100361820LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_10002B2D8(char a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000012LL;
  unint64_t v3 = 0x8000000100360620LL;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xEE006C6477612E65LL;
    }
    else {
      unint64_t v4 = 0xED00006E616E2E65LL;
    }
    unint64_t v5 = 0x6C7070612E6D6F63LL;
    int v6 = a2;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }

  unint64_t v5 = 0xD000000000000012LL;
  unint64_t v4 = 0x8000000100360620LL;
  int v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1) {
      unint64_t v3 = 0xEE006C6477612E65LL;
    }
    else {
      unint64_t v3 = 0xED00006E616E2E65LL;
    }
    unint64_t v2 = 0x6C7070612E6D6F63LL;
  }

uint64_t sub_10002B3EC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 1735617902LL;
  }
  else {
    uint64_t v3 = 7365742LL;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000LL;
  }
  else {
    unint64_t v4 = 0xE400000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 1735617902LL;
  }
  else {
    uint64_t v5 = 7365742LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE400000000000000LL;
  }
  else {
    unint64_t v6 = 0xE300000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002B484(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 0x6576697470616461LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x656D69746C616572LL;
    }
    else {
      uint64_t v4 = 0x6E6574614C776F6CLL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE800000000000000LL;
    }
    else {
      unint64_t v5 = 0xEA00000000007963LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 0x656D69746C616572LL;
      }
      else {
        uint64_t v2 = 0x6E6574614C776F6CLL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE800000000000000LL;
      }
      else {
        unint64_t v7 = 0xEA00000000007963LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE800000000000000LL;
    uint64_t v4 = 0x6576697470616461LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE800000000000000LL;
  if (v4 != 0x6576697470616461LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

void sub_10002B5A4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10002B610(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10002B690 + 4 * byte_10033A0D7[a2]))(1818523489LL);
}

uint64_t sub_10002B690(uint64_t a1)
{
  if (a1 == 1818523489 && v1 == 0xE400000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1818523489LL, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return v2 & 1;
}

uint64_t sub_10002B75C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 7561575LL;
  }
  else {
    uint64_t v3 = 0x7055776F6C6C6F66LL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000LL;
  }
  else {
    unint64_t v4 = 0xE300000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 7561575LL;
  }
  else {
    uint64_t v5 = 0x7055776F6C6C6F66LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE300000000000000LL;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002B7F8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v3 = 0x74736163696E75LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE900000000000074LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v5 = 0x74736163696E75LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE900000000000074LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002B8A0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x614D6F54796E616DLL;
  }
  else {
    uint64_t v3 = 0x6E614D6F54656E6FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000079LL;
  }
  else {
    unint64_t v4 = 0xEA0000000000796ELL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x614D6F54796E616DLL;
  }
  else {
    uint64_t v5 = 0x6E614D6F54656E6FLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA0000000000796ELL;
  }
  else {
    unint64_t v6 = 0xE900000000000079LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002B94C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x65746963696C6F73LL;
  }
  else {
    uint64_t v3 = 1701736302LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xEB00000000785464LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x65746963696C6F73LL;
  }
  else {
    uint64_t v5 = 1701736302LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEB00000000785464LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10002B9F0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEB00000000646574LL;
  unint64_t v3 = 0x6963696C6F736E75LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x65746963696C6F73LL;
    }
    else {
      unint64_t v5 = 0xD000000000000017LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000064LL;
    }
    else {
      unint64_t v6 = 0x8000000100360960LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  unint64_t v5 = 0x6963696C6F736E75LL;
  unint64_t v6 = 0xEB00000000646574LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x65746963696C6F73LL;
    }
    else {
      unint64_t v3 = 0xD000000000000017LL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE900000000000064LL;
    }
    else {
      unint64_t v2 = 0x8000000100360960LL;
    }
  }

void *sub_10002BB18(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  sub_10001C370(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a2 + 56) + 24 * v3;
  unint64_t v6 = *(void **)v5;
  swift_bridgeObjectRetain(*(void *)(v5 + 16));
  id v7 = v6;
  return v6;
}

uint64_t sub_10002BB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v8);
  unsigned int v9 = (void *)(v5
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
  *unsigned int v9 = 0LL;
  v9[1]  = 0LL;
  int v10 = (void *)(v5
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  *int v10 = 0LL;
  v10[1]  = 0LL;
  uint64_t v11 = v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer;
  *(void *)uint64_t v11 = 0LL;
  *(void *)(v11 + 8)  = 0LL;
  *(_BYTE *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  uint64_t v21 = 0LL;
  unsigned int v12 = Apple80211Open(&v21);
  if (v12 || (uint64_t v18 = v21) == 0)
  {
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    unsigned int v12 = Apple80211BindToInterfaceWithService(v18, a4, v19, 0LL);

    if (!v12)
    {
      *(_DWORD *)(v5
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service)  = a4;
      *(_BYTE *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role)  = a5;
      __asm { BR              X10 }
    }

    Apple80211Close(v18);
  }

  unint64_t v13 = sub_1000033FC();
  uint64_t v14 = swift_allocError(&type metadata for WiFiError, v13, 0LL, 0LL);
  *(void *)uint64_t v15 = v12;
  *(void *)(v15 + 8)  = 0LL;
  *(_BYTE *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  swift_willThrow(v14);
  swift_bridgeObjectRelease(*(void *)(v5
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                                      + 8));
  sub_100021018( *(void *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler),  *(void *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler + 8));
  uint64_t v16 = type metadata accessor for AppleDevice.InterfaceHandle(0LL);
  swift_deallocPartialClassInstance( v5,  v16,  *(unsigned int *)(*(void *)v5 + 48LL),  *(unsigned __int16 *)(*(void *)v5 + 52LL));
  return v5;
}

uint64_t sub_10002BF14()
{
  uint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  if (v2)
  {
    uint64_t v7 = *(void *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                   + 8);
    uint64_t v8 = swift_allocObject(&unk_1003DDD50, 32LL, 7LL);
    *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    *(void *)(v8 + 24)  = v7;
    sub_10002254C(v2, v7);
    uint64_t result = sub_100021018((uint64_t)sub_100056B6C, v8);
    __break(1u);
  }

  else
  {
    sub_10002254C( 0LL,  *(void *)(v0 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler + 8));
    sub_100021018(0LL, 0LL);
    IOObjectRelease(*(_DWORD *)(v0
                              + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service));
    Apple80211Close(*(void *)(v0
                              + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference));
    uint64_t v3 = (void *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer);
    if ((*(_BYTE *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer
                   + 16) & 1) == 0)
    {
      if (*v3) {
        swift_slowDealloc(*v3, -1LL, -1LL);
      }
    }

    uint64_t v4 = v0 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_logger;
    uint64_t v5 = type metadata accessor for Logger(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
    swift_bridgeObjectRelease(*(void *)(v0
                                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                                        + 8));
    sub_100021018(*v1, v1[1]);
    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue));
    return v0;
  }

  return result;
}

uint64_t sub_10002C03C()
{
  return sub_100044CC8(sub_10002BF14);
}

uint64_t sub_10002C048(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *))
{
  uint64_t v5 = sub_10002C0C0(a1, a2, a3);
  uint64_t v6 = v5[2];
  if (v6)
  {
    uint64_t v7 = *(void *)(type metadata accessor for DriverEvent(0LL) - 8);
    uint64_t v8 = (char *)v5 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    do
    {
      a4(v8);
      v8 += v9;
      --v6;
    }

    while (v6);
  }

  return swift_bridgeObjectRelease(v5);
}

void *sub_10002C0C0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  v709  = a3;
  v710  = a2;
  uint64_t v4 = type metadata accessor for DNSRecords.SRV(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v660 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v660 - v8;
  uint64_t v10 = sub_100002274(&qword_100405DF8);
  __chkstk_darwin(v10);
  unsigned int v12 = (char *)&v660 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v660 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v17);
  v708  = (unint64_t)&v660 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = _swiftEmptyArrayStorage;
  v707  = a1;
  switch(a1)
  {
    case 1uLL:
      uint64_t v22 = sub_100002274(&qword_100405E00);
      uint64_t v23 = type metadata accessor for DriverEvent(0LL);
      uint64_t v24 = *(void *)(v23 - 8);
      uint64_t v25 = *(void *)(v24 + 72);
      uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
      uint64_t v27 = (v26 + 32) & ~v26;
      uint64_t v28 = swift_allocObject(v22, v27 + v25, v26 | 7);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v29 = v28 + v27;
      *(_OWORD *)uint64_t v29 = 0u;
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
      *(_OWORD *)(v29 + 25)  = 0u;
      goto LABEL_9;
    case 2uLL:
      uint64_t v30 = sub_100002274(&qword_100405E00);
      uint64_t v23 = type metadata accessor for DriverEvent(0LL);
      uint64_t v31 = *(void *)(v23 - 8);
      uint64_t v32 = *(void *)(v31 + 72);
      uint64_t v33 = *(unsigned __int8 *)(v31 + 80);
      uint64_t v34 = (v33 + 32) & ~v33;
      uint64_t v28 = swift_allocObject(v30, v34 + v32, v33 | 7);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v29 = v28 + v34;
      uint64_t v35 = 2LL;
      goto LABEL_8;
    case 3uLL:
      uint64_t v36 = sub_100002274(&qword_100405E00);
      uint64_t v23 = type metadata accessor for DriverEvent(0LL);
      uint64_t v37 = *(void *)(v23 - 8);
      uint64_t v38 = *(void *)(v37 + 72);
      uint64_t v39 = *(unsigned __int8 *)(v37 + 80);
      uint64_t v40 = (v39 + 32) & ~v39;
      uint64_t v28 = swift_allocObject(v36, v40 + v38, v39 | 7);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v29 = v28 + v40;
      uint64_t v35 = 3LL;
      goto LABEL_8;
    case 9uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000521BC(v42, v41);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E10);
      sub_1000586C0((uint64_t)&v984, (uint64_t)v988, &qword_100405E10);
      memcpy(v1112, v988, 0x1CCuLL);
      uint64_t v43 = sub_100002274(&qword_100405E00);
      uint64_t v44 = type metadata accessor for DriverEvent(0LL);
      uint64_t v45 = *(void *)(v44 - 8);
      uint64_t v46 = *(void *)(v45 + 72);
      uint64_t v47 = *(unsigned __int8 *)(v45 + 80);
      unint64_t v48 = v41;
      uint64_t v49 = (v47 + 32) & ~v47;
      uint64_t v50 = swift_allocObject(v43, v49 + v46, v47 | 7);
      *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v51 = v50 + v49;
      *(void *)uint64_t v51 = sub_1000A2168() & 0xFFFFFFFFFFFFLL;
      *(void *)(v51 + 8)  = v52;
      *(void *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v54;
      *(void *)(v51 + 24)  = v53;
      *(void *)(v51 + 32)  = 0LL;
      __int16 v55 = 1024;
      goto LABEL_81;
    case 0xBuLL:
      uint64_t v56 = sub_100002274(&qword_100405E00);
      uint64_t v23 = type metadata accessor for DriverEvent(0LL);
      uint64_t v57 = *(void *)(v23 - 8);
      uint64_t v58 = *(void *)(v57 + 72);
      uint64_t v59 = *(unsigned __int8 *)(v57 + 80);
      uint64_t v60 = (v59 + 32) & ~v59;
      uint64_t v28 = swift_allocObject(v56, v60 + v58, v59 | 7);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v29 = v28 + v60;
      uint64_t v35 = 1LL;
LABEL_8:
      *(void *)uint64_t v29 = v35;
      *(_OWORD *)(v29 + 24)  = 0u;
      *(_OWORD *)(v29 + 8)  = 0u;
      *(_BYTE *)(v29 + 40)  = 0;
LABEL_9:
      *(_BYTE *)(v29 + 41)  = 10;
      uint64_t v61 = v23;
      uint64_t v62 = 2LL;
      goto LABEL_10;
    case 0x2EuLL:
      uint64_t v63 = sub_100002274(&qword_100405E00);
      uint64_t v64 = type metadata accessor for DriverEvent(0LL);
      uint64_t v65 = *(void *)(v64 - 8);
      uint64_t v66 = *(void *)(v65 + 72);
      uint64_t v67 = *(unsigned __int8 *)(v65 + 80);
      uint64_t v68 = (v67 + 32) & ~v67;
      uint64_t v69 = swift_allocObject(v63, v68 + v66, v67 | 7);
      *(_OWORD *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v70 = v69 + v68;
      uint64_t v71 = type metadata accessor for DriverEvent.AWDL(0LL);
      uint64_t v72 = v69 + v68;
      uint64_t v73 = 10LL;
      goto LABEL_166;
    case 0x2FuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051DBC(v42, v41);
      if ((v988[4].i8[4] & 1) != 0) {
        goto LABEL_178;
      }
      if (v988[0].i32[2] != 1) {
        goto LABEL_181;
      }
      __int8 v74 = v988[0].i8[0];
      v708  = (unint64_t)v988[0].i64[0] >> 40;
      __int8 v75 = v988[0].i8[4];
      unint64_t v76 = (unint64_t)v988[0].i64[0] >> 24;
      unint64_t v77 = (unint64_t)v988[0].i64[0] >> 16;
      unint64_t v78 = (unint64_t)v988[0].i64[0] >> 8;
      uint64_t v79 = sub_100002274(&qword_100405E00);
      uint64_t v80 = type metadata accessor for DriverEvent(0LL);
      uint64_t v81 = *(void *)(v80 - 8);
      uint64_t v82 = *(void *)(v81 + 72);
      uint64_t v83 = *(unsigned __int8 *)(v81 + 80);
      uint64_t v84 = (v83 + 32) & ~v83;
      uint64_t v85 = swift_allocObject(v79, v84 + v82, v83 | 7);
      *(_OWORD *)(v85 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      char v86 = (__int8 *)(v85 + v84);
      *char v86 = v74;
      v86[1]  = v78;
      v86[2]  = v77;
      v86[3]  = v76;
      v86[4]  = v75;
      v86[5]  = v708;
      uint64_t v87 = type metadata accessor for DriverEvent.AWDL(0LL);
      swift_storeEnumTagMultiPayload(v85 + v84, v87, 7LL);
      uint64_t v88 = v85 + v84;
      uint64_t v89 = v80;
      uint64_t v90 = 1LL;
      goto LABEL_69;
    case 0x30uLL:
      unint64_t v91 = (char *)&loc_10002C66C + dword_1000311BC[v709 >> 62];
      v705  = v19;
      v706.i64[0]  = v18;
      __asm { BR              X9 }

      return result;
    case 0x31uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000520F8(v42, v41);
      if ((v92 & 0x100000000LL) != 0) {
        goto LABEL_178;
      }
      int v93 = v92;
      unint64_t v94 = v41;
      uint64_t v95 = sub_100002274(&qword_100405E00);
      uint64_t v96 = type metadata accessor for DriverEvent(0LL);
      uint64_t v97 = *(void *)(v96 - 8);
      uint64_t v98 = *(void *)(v97 + 72);
      uint64_t v99 = *(unsigned __int8 *)(v97 + 80);
      uint64_t v100 = (v99 + 32) & ~v99;
      uint64_t v101 = swift_allocObject(v95, v100 + v98, v99 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v102 = v101 + v100;
      *(_BYTE *)(v101 + v100)  = v93 == 1;
      uint64_t v103 = v96;
      uint64_t v104 = 4LL;
      goto LABEL_153;
    case 0x37uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_10005201C(v42, v41);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E18);
      sub_1000586C0((uint64_t)&v984, (uint64_t)v988, &qword_100405E18);
      uint64_t v105 = sub_100002274(&qword_100405E00);
      uint64_t v106 = type metadata accessor for DriverEvent(0LL);
      uint64_t v107 = *(void *)(v106 - 8);
      uint64_t v108 = *(void *)(v107 + 72);
      uint64_t v109 = *(unsigned __int8 *)(v107 + 80);
      unint64_t v110 = v41;
      uint64_t v111 = (v109 + 32) & ~v109;
      uint64_t v112 = swift_allocObject(v105, v111 + v108, v109 | 7);
      *(_OWORD *)(v112 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      *(_BYTE *)(v112 + v111)  = 4;
      swift_storeEnumTagMultiPayload(v112 + v111, v106, 4LL);
      sub_1000208D8(v42, v110);
      return (void *)v112;
    case 0x3BuLL:
      uint64_t v113 = sub_100002274(&qword_100405E00);
      uint64_t v114 = type metadata accessor for DriverEvent(0LL);
      uint64_t v115 = *(void *)(v114 - 8);
      uint64_t v116 = *(void *)(v115 + 72);
      uint64_t v117 = *(unsigned __int8 *)(v115 + 80);
      uint64_t v118 = (v117 + 32) & ~v117;
      uint64_t v28 = swift_allocObject(v113, v118 + v116, v117 | 7);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v29 = v28 + v118;
      uint64_t v61 = v114;
      uint64_t v62 = 5LL;
LABEL_10:
      swift_storeEnumTagMultiPayload(v29, v61, v62);
      return (void *)v28;
    case 0x41uLL:
      uint64_t v119 = sub_100002274(&qword_100405E00);
      uint64_t v64 = type metadata accessor for DriverEvent(0LL);
      uint64_t v120 = *(void *)(v64 - 8);
      uint64_t v121 = *(void *)(v120 + 72);
      uint64_t v122 = *(unsigned __int8 *)(v120 + 80);
      uint64_t v123 = (v122 + 32) & ~v122;
      uint64_t v69 = swift_allocObject(v119, v123 + v121, v122 | 7);
      *(_OWORD *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v70 = v69 + v123;
      uint64_t v71 = type metadata accessor for DriverEvent.AWDL(0LL);
      uint64_t v72 = v69 + v123;
      uint64_t v73 = 12LL;
      goto LABEL_166;
    case 0x42uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100052290(v42, v41);
      if ((v988[1].i8[8] & 1) != 0) {
        goto LABEL_178;
      }
      uint64_t v124 = v988[1].i64[0];
      uint64_t v125 = v988[0].i64[1];
      uint64_t v126 = v988[0].i64[0];
      unint64_t v127 = v41;
      uint64_t v128 = sub_100002274(&qword_100405E00);
      uint64_t v129 = type metadata accessor for DriverEvent(0LL);
      uint64_t v130 = *(void *)(v129 - 8);
      uint64_t v131 = *(void *)(v130 + 72);
      uint64_t v132 = *(unsigned __int8 *)(v130 + 80);
      uint64_t v133 = v42;
      unint64_t v134 = v127;
      uint64_t v135 = (v132 + 32) & ~v132;
      uint64_t v101 = swift_allocObject(v128, v135 + v131, v132 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v136 = v101 + v135;
      sub_1000A22C4(v126, v125, v124, (uint64_t)v988);
      __int8 v137 = v988[2].i8[8];
      *(void *)uint64_t v136 = v988[0].u16[0];
      *(int64x2_t *)(v136 + 8)  = *(int64x2_t *)((char *)v988 + 8);
      *(int64x2_t *)(v136 + 24)  = *(int64x2_t *)((char *)&v988[1] + 8);
      *(_BYTE *)(v136 + 40)  = v137;
      *(_BYTE *)(v136 + 41)  = 5;
      uint64_t v138 = v136;
      uint64_t v139 = v129;
      uint64_t v140 = 2LL;
      goto LABEL_90;
    case 0x43uLL:
      uint64_t v141 = sub_100002274(&qword_100405E00);
      uint64_t v64 = type metadata accessor for DriverEvent(0LL);
      uint64_t v142 = *(void *)(v64 - 8);
      uint64_t v143 = *(void *)(v142 + 72);
      uint64_t v144 = *(unsigned __int8 *)(v142 + 80);
      uint64_t v145 = (v144 + 32) & ~v144;
      uint64_t v69 = swift_allocObject(v141, v145 + v143, v144 | 7);
      *(_OWORD *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v70 = v69 + v145;
      *(_BYTE *)(v69 + v145)  = 1;
      goto LABEL_27;
    case 0x44uLL:
      uint64_t v146 = sub_100002274(&qword_100405E00);
      uint64_t v64 = type metadata accessor for DriverEvent(0LL);
      uint64_t v147 = *(void *)(v64 - 8);
      uint64_t v148 = *(void *)(v147 + 72);
      uint64_t v149 = *(unsigned __int8 *)(v147 + 80);
      uint64_t v150 = (v149 + 32) & ~v149;
      uint64_t v69 = swift_allocObject(v146, v150 + v148, v149 | 7);
      *(_OWORD *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v70 = v69 + v150;
      *(_BYTE *)(v69 + v150)  = 0;
LABEL_27:
      uint64_t v71 = type metadata accessor for DriverEvent.AWDL(0LL);
      uint64_t v72 = v70;
      uint64_t v73 = 0LL;
      goto LABEL_166;
    case 0x4AuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100052350(v42, v41);
      if ((v988[6].i8[8] & 1) != 0) {
        goto LABEL_178;
      }
      __int16 v151 = v988[0].i16[2];
      __int16 v152 = v988[0].i16[0];
      unint64_t v153 = v41;
      uint64_t v154 = sub_100002274(&qword_100405E00);
      uint64_t v155 = type metadata accessor for DriverEvent(0LL);
      uint64_t v156 = *(void *)(v155 - 8);
      uint64_t v157 = *(void *)(v156 + 72);
      uint64_t v158 = *(unsigned __int8 *)(v156 + 80);
      uint64_t v159 = (v158 + 32) & ~v158;
      uint64_t v101 = swift_allocObject(v154, v159 + v157, v158 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v160 = v101 + v159;
      LOBYTE(v152)  = sub_1000A9AA4(v152);
      *(void *)uint64_t v160 = v152 | ((unint64_t)sub_1000A9AC8(v151) << 8);
      *(_OWORD *)(v160 + 8)  = 0u;
      *(_OWORD *)(v160 + 24)  = 0u;
      __int16 v161 = 1792;
      goto LABEL_34;
    case 0x4EuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_10005241C(v42, v41);
      if ((v163 & 1) != 0) {
        goto LABEL_178;
      }
      __int16 v164 = v162;
      unint64_t v165 = HIDWORD(v162);
      unint64_t v153 = v41;
      uint64_t v166 = sub_100002274(&qword_100405E00);
      uint64_t v155 = type metadata accessor for DriverEvent(0LL);
      uint64_t v167 = *(void *)(v155 - 8);
      v168  = *(void *)(v167 + 72);
      uint64_t v169 = *(unsigned __int8 *)(v167 + 80);
      uint64_t v170 = (v169 + 32) & ~v169;
      uint64_t v101 = swift_allocObject(v166, v170 + v168, v169 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v160 = v101 + v170;
      LOBYTE(v164)  = sub_1000A9AA4(v164);
      *(void *)uint64_t v160 = v164 | ((unint64_t)sub_1000A9AC8(v165) << 8);
      *(_OWORD *)(v160 + 8)  = 0u;
      *(_OWORD *)(v160 + 24)  = 0u;
      __int16 v161 = 1536;
      goto LABEL_34;
    case 0x52uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100052664(v42, v41);
      if ((v172 & 0x100000000LL) != 0) {
        goto LABEL_178;
      }
      v173  = v172;
      unint64_t v174 = HIDWORD(v171);
      unint64_t v153 = v41;
      uint64_t v175 = sub_100002274(&qword_100405E00);
      uint64_t v155 = type metadata accessor for DriverEvent(0LL);
      uint64_t v176 = *(void *)(v155 - 8);
      uint64_t v177 = *(void *)(v176 + 72);
      uint64_t v178 = *(unsigned __int8 *)(v176 + 80);
      uint64_t v179 = (v178 + 32) & ~v178;
      uint64_t v101 = swift_allocObject(v175, v179 + v177, v178 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v160 = v101 + v179;
      *(void *)uint64_t v160 = sub_1000A810C(v174, v173) & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v160 + 8)  = 0u;
      *(_OWORD *)(v160 + 24)  = 0u;
      __int16 v161 = 2048;
LABEL_34:
      *(_WORD *)(v160 + 40)  = v161;
      uint64_t v180 = (_BYTE *)v160;
      uint64_t v181 = v155;
      uint64_t v182 = 2LL;
      goto LABEL_196;
    case 0x5FuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051344(v42, v41);
      if ((v184 & 0x100000000LL) != 0) {
        goto LABEL_178;
      }
      unint64_t v185 = v183;
      unsigned __int8 v186 = v184;
      unint64_t v153 = v41;
      uint64_t v187 = sub_100002274(&qword_100405E00);
      uint64_t v188 = type metadata accessor for DriverEvent(0LL);
      uint64_t v189 = *(void *)(v188 - 8);
      uint64_t v190 = *(void *)(v189 + 72);
      uint64_t v191 = *(unsigned __int8 *)(v189 + 80);
      uint64_t v192 = (v191 + 32) & ~v191;
      uint64_t v193 = swift_allocObject(v187, v192 + v190, v191 | 7);
      *(_OWORD *)(v193 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v194 = (void *)(v193 + v192);
      if ((_DWORD)v185 == 3)
      {
        uint64_t v101 = v193;
        v195  = HIDWORD(v185) == 1;
      }

      else
      {
        uint64_t v101 = v193;
        if ((_DWORD)v185 == 2)
        {
          v195  = 4;
        }

        else if ((_DWORD)v185 == 1)
        {
          v195  = 3;
        }

        else
        {
          v195  = 0;
        }
      }

      v988[0].i8[0]  = v195;
      v988[0].i64[1]  = v186;
      sub_100058768((uint64_t)v988);
      goto LABEL_195;
    case 0x61uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      __asm { BR              X10 }

      return result;
    case 0x62uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      KeyPath  = swift_getKeyPath(&unk_10033A6C0);
      uint64_t v197 = swift_getKeyPath(&unk_10033A6E0);
      uint64_t v198 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      uint64_t v199 = v198;
      sub_100050F04(v198, (uint64_t)v988);
      swift_release(KeyPath);
      swift_release(v197);
      sub_1000586C0((uint64_t)v988, (uint64_t)&v967, &qword_100405E68);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E68);
      uint64_t v200 = v984.i32[0];
      v201  = v984.u32[2];
      uint64_t v202 = v985.u8[0];
      unsigned int v203 = v984.u32[3];
      uint64_t v204 = v985.u32[1];
      v707  = v985.u32[2];
      uint64_t v205 = sub_100002274(&qword_100405E00);
      uint64_t v206 = type metadata accessor for DriverEvent(0LL);
      uint64_t v207 = *(void *)(v206 - 8);
      v208  = *(void *)(v207 + 72);
      uint64_t v209 = *(unsigned __int8 *)(v207 + 80);
      uint64_t v210 = (v209 + 32) & ~v209;
      uint64_t v211 = swift_allocObject(v205, v210 + v208, v209 | 7);
      *(_OWORD *)(v211 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v708  = v211;
      uint64_t v212 = (void *)(v211 + v210);
      sub_100058148((uint64_t)v986);
      unint64_t v213 = sub_1000A810C(v201, v203);
      if ((v213 & 0xFF00000000LL) == 0x300000000LL)
      {
        if (qword_1004043A0 != -1) {
          swift_once(&qword_1004043A0, sub_100186540);
        }
        LODWORD(v213)  = static Channel.nanPrimary;
        LOBYTE(v214)  = byte_1004108A4;
        LOBYTE(v215)  = byte_1004108A5;
        unint64_t v216 = v709;
      }

      else
      {
        unint64_t v214 = HIDWORD(v213);
        unint64_t v215 = v213 >> 40;
        unint64_t v216 = v709;
      }

      v988[8]  = v986[8];
      v988[9]  = v986[9];
      v988[10]  = v987[0];
      *(int64x2_t *)((char *)&v988[10] + 9)  = *(int64x2_t *)((char *)v987 + 9);
      v988[4]  = v986[4];
      v988[5]  = v986[5];
      v988[6]  = v986[6];
      v988[7]  = v986[7];
      v988[0]  = v986[0];
      v988[1]  = v986[1];
      v988[2]  = v986[2];
      v988[3]  = v986[3];
      v988[12].i64[0]  = v200;
      v988[12].i32[2]  = v213;
      v988[12].i8[12]  = v214;
      v988[12].i8[13]  = v215;
      v988[13].i64[0]  = v202;
      v988[13].i64[1]  = v707 | (v204 << 32);
      sub_10005854C((uint64_t)v988);
      sub_100058090(v988, v212);
      swift_storeEnumTagMultiPayload(v212, v206, 0LL);
      sub_100058558((uint64_t)&v967);
      v616  = v710;
      v617  = v216;
      goto LABEL_184;
    case 0x63uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_10005166C(v42, v41);
      if ((v985.i8[4] & 1) != 0) {
        goto LABEL_178;
      }
      v217  = v985.i32[0];
      unint64_t v218 = v984.u64[1];
      uint64_t v133 = v42;
      unint64_t v134 = v41;
      v219  = v984.i16[0];
      uint64_t v220 = sub_100002274(&qword_100405E00);
      uint64_t v221 = type metadata accessor for DriverEvent(0LL);
      uint64_t v222 = *(void *)(v221 - 8);
      uint64_t v223 = *(void *)(v222 + 72);
      v224  = *(unsigned __int8 *)(v222 + 80);
      uint64_t v225 = (v224 + 32) & ~v224;
      uint64_t v101 = swift_allocObject(v220, v225 + v223, v224 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v226 = (void *)(v101 + v225);
      v988[0].i64[0]  = sub_1000A17D4(v219, v218, v217);
      v988[0].i8[8]  = v227;
      sub_100058678((uint64_t)v988);
      sub_100058090(v988, v226);
      uint64_t v138 = (uint64_t)v226;
      goto LABEL_89;
    case 0x64uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      uint64_t v228 = swift_getKeyPath(&unk_10033A840);
      uint64_t v229 = swift_getKeyPath(&unk_10033A860);
      unint64_t v48 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100050A84(v48, (uint64_t)&v984);
      swift_release(v228);
      swift_release(v229);
      uint64_t v230 = v986[0].i64[0];
      if (!v986[0].i64[0]) {
        goto LABEL_98;
      }
      __int8 v231 = v984.i8[0];
      unint64_t v232 = (unint64_t)v984.i64[0] >> 8;
      v233  = (unint64_t)v984.i64[0] >> 16;
      v703  = (unint64_t)v984.i64[0] >> 24;
      v704  = HIDWORD(v984.i64[0]);
      v705  = (void *)((unint64_t)v984.i64[0] >> 40);
      v706.i64[0]  = HIWORD(v984.i64[0]);
      v707  = HIBYTE(v984.i64[0]);
      v708  = v984.i8[8];
      uint64_t v234 = sub_100002274(&qword_100405E00);
      uint64_t v235 = type metadata accessor for DriverEvent(0LL);
      uint64_t v236 = *(void *)(v235 - 8);
      uint64_t v237 = *(void *)(v236 + 72);
      uint64_t v238 = *(unsigned __int8 *)(v236 + 80);
      uint64_t v239 = (v238 + 32) & ~v238;
      uint64_t v240 = swift_allocObject(v234, v239 + v237, v238 | 7);
      *(_OWORD *)(v240 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v241 = (void *)(v240 + v239);
      v988[0].i8[0]  = v231;
      v988[0].i8[1]  = v232;
      v988[0].i8[2]  = v233;
      v988[0].i8[3]  = v703;
      v988[0].i8[4]  = v704;
      v988[0].i8[5]  = (char)v705;
      v988[0].i8[6]  = v706.i8[0];
      v988[0].i8[7]  = v707;
      v988[0].i64[1]  = v708;
      v988[1].i64[0]  = v230;
      sub_10005875C((uint64_t)v988);
      goto LABEL_58;
    case 0x66uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      uint64_t v242 = swift_getKeyPath(&unk_10033A800);
      v243  = swift_getKeyPath(&unk_10033A820);
      uint64_t v244 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_10004F790(v244, (uint64_t)&v984);
      swift_release(v242);
      swift_release(v243);
      uint64_t v245 = v986[0].i64[0];
      if (!v986[0].i64[0]) {
        goto LABEL_177;
      }
      __int8 v246 = v984.i8[0];
      unint64_t v247 = (unint64_t)v984.i64[0] >> 16;
      v703  = (unint64_t)v984.i64[0] >> 8;
      v704  = (unint64_t)v984.i64[0] >> 24;
      v705  = (void *)HIDWORD(v984.i64[0]);
      v706.i64[0]  = (unint64_t)v984.i64[0] >> 40;
      v707  = HIWORD(v984.i64[0]);
      v708  = v984.i8[8];
      v248  = HIBYTE(v984.i64[0]);
      uint64_t v249 = sub_100002274(&qword_100405E00);
      uint64_t v250 = type metadata accessor for DriverEvent(0LL);
      uint64_t v251 = *(void *)(v250 - 8);
      v252  = *(void *)(v251 + 72);
      uint64_t v253 = *(unsigned __int8 *)(v251 + 80);
      v254  = (v253 + 32) & ~v253;
      uint64_t v255 = swift_allocObject(v249, v254 + v252, v253 | 7);
      *(_OWORD *)(v255 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v988[0].i8[0]  = v246;
      v988[0].i8[1]  = v248;
      v988[0].i8[2]  = v703;
      v988[0].i8[3]  = v247;
      v988[0].i8[4]  = v704;
      v988[0].i8[5]  = (char)v705;
      v988[0].i8[6]  = v706.i8[0];
      v988[0].i8[7]  = v707;
      v988[0].i64[1]  = v708;
      v988[1].i64[0]  = v245;
      sub_100058750((uint64_t)v988);
      sub_100058090(v988, (void *)(v255 + v254));
      swift_storeEnumTagMultiPayload(v255 + v254, v250, 0LL);
      unint64_t v257 = v709;
      uint64_t v256 = v710;
      goto LABEL_188;
    case 0x68uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000525AC(v42, v41);
      if ((v258 & 0x10000) != 0) {
        goto LABEL_178;
      }
      unint64_t v153 = v41;
      uint64_t v259 = sub_100002274(&qword_100405E00);
      uint64_t v188 = type metadata accessor for DriverEvent(0LL);
      uint64_t v260 = *(void *)(v188 - 8);
      uint64_t v261 = *(void *)(v260 + 72);
      v262  = *(unsigned __int8 *)(v260 + 80);
      uint64_t v263 = (v262 + 32) & ~v262;
      uint64_t v101 = swift_allocObject(v259, v263 + v261, v262 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v194 = (void *)(v101 + v263);
      sub_1000A17A4();
      v988[0].i8[0]  = v264;
      v988[0].i64[1]  = v265;
      sub_100058690((uint64_t)v988);
      goto LABEL_195;
    case 0x69uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000525AC(v42, v41);
      if ((v266 & 0x10000) != 0) {
        goto LABEL_178;
      }
      unint64_t v153 = v41;
      uint64_t v267 = sub_100002274(&qword_100405E00);
      uint64_t v188 = type metadata accessor for DriverEvent(0LL);
      uint64_t v268 = *(void *)(v188 - 8);
      uint64_t v269 = *(void *)(v268 + 72);
      uint64_t v270 = *(unsigned __int8 *)(v268 + 80);
      uint64_t v271 = (v270 + 32) & ~v270;
      uint64_t v101 = swift_allocObject(v267, v271 + v269, v270 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v194 = (void *)(v101 + v271);
      sub_1000A17A4();
      v988[0].i8[0]  = v272;
      v988[0].i64[1]  = v273;
      sub_10005869C((uint64_t)v988);
LABEL_195:
      sub_100058090(v988, v194);
      uint64_t v180 = v194;
      uint64_t v181 = v188;
      uint64_t v182 = 0LL;
      goto LABEL_196;
    case 0x6AuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      uint64_t v274 = swift_getKeyPath(&unk_10033A700);
      uint64_t v275 = swift_getKeyPath(&unk_10033A720);
      unint64_t v48 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100050A84(v48, (uint64_t)&v984);
      swift_release(v274);
      swift_release(v275);
      uint64_t v276 = v986[0].i64[0];
      if (!v986[0].i64[0]) {
        goto LABEL_98;
      }
      __int8 v277 = v984.i8[0];
      unint64_t v278 = (unint64_t)v984.i64[0] >> 8;
      unint64_t v279 = (unint64_t)v984.i64[0] >> 16;
      unint64_t v280 = (unint64_t)v984.i64[0] >> 24;
      v704  = HIDWORD(v984.i64[0]);
      v705  = (void *)((unint64_t)v984.i64[0] >> 40);
      v706.i64[0]  = HIWORD(v984.i64[0]);
      v707  = HIBYTE(v984.i64[0]);
      v708  = v984.i8[8];
      uint64_t v281 = sub_100002274(&qword_100405E00);
      uint64_t v235 = type metadata accessor for DriverEvent(0LL);
      uint64_t v282 = *(void *)(v235 - 8);
      uint64_t v283 = *(void *)(v282 + 72);
      uint64_t v284 = *(unsigned __int8 *)(v282 + 80);
      uint64_t v285 = (v284 + 32) & ~v284;
      uint64_t v240 = swift_allocObject(v281, v285 + v283, v284 | 7);
      *(_OWORD *)(v240 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v241 = (void *)(v240 + v285);
      v988[0].i8[0]  = v277;
      v988[0].i8[1]  = v278;
      v988[0].i8[2]  = v279;
      v988[0].i8[3]  = v280;
      v988[0].i8[4]  = v704;
      v988[0].i8[5]  = (char)v705;
      v988[0].i8[6]  = v706.i8[0];
      v988[0].i8[7]  = v707;
      v988[0].i64[1]  = v708;
      v988[1].i64[0]  = v276;
      sub_100058684((uint64_t)v988);
LABEL_58:
      sub_100058090(v988, v241);
      v286  = (uint64_t)v241;
      uint64_t v287 = v235;
      uint64_t v288 = 0LL;
      goto LABEL_59;
    case 0x70uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      uint64_t v291 = swift_getKeyPath(&unk_10033A7C0);
      uint64_t v292 = swift_getKeyPath(&unk_10033A7E0);
      uint64_t v244 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_10004FC0C(v244, &v984);
      swift_release(v291);
      swift_release(v292);
      uint64_t v293 = v985.i64[1];
      if (!v985.i64[1])
      {
LABEL_177:
        unint64_t v41 = v244;
        goto LABEL_178;
      }

      __int8 v294 = v984.i8[8];
      __int8 v295 = v984.i8[0];
      unint64_t v296 = (unint64_t)v984.i64[0] >> 8;
      unint64_t v297 = (unint64_t)v984.i64[0] >> 24;
      v298  = HIDWORD(v984.i64[0]);
      v700  = (unint64_t)v984.i64[0] >> 40;
      v701  = HIWORD(v984.i64[0]);
      v702  = HIBYTE(v984.i64[0]);
      v703  = (unint64_t)v984.i64[1] >> 8;
      v704  = (unint64_t)v984.i64[1] >> 16;
      v705  = (void *)((unint64_t)v984.i64[1] >> 24);
      v706.i64[0]  = HIDWORD(v984.i64[1]);
      v707  = (unint64_t)v984.i64[1] >> 40;
      v708  = HIWORD(v984.i64[1]);
      uint64_t v299 = sub_100002274(&qword_100405E00);
      v300  = type metadata accessor for DriverEvent(0LL);
      uint64_t v301 = *(void *)(v300 - 8);
      uint64_t v302 = *(void *)(v301 + 72);
      v303  = *(unsigned __int8 *)(v301 + 80);
      v304  = (v303 + 32) & ~v303;
      uint64_t v101 = swift_allocObject(v299, v304 + v302, v303 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v305 = (void *)(v101 + v304);
      v988[0].i8[0]  = v295;
      v988[0].i8[1]  = v296;
      v988[0].i8[2]  = v297;
      v988[0].i8[3]  = v298;
      v988[0].i8[4]  = v700;
      v988[0].i8[5]  = v701;
      v988[0].i8[6]  = v702;
      v988[0].i8[7]  = v294;
      v988[0].i8[8]  = v703;
      v988[0].i8[9]  = v704;
      v988[0].i8[10]  = (char)v705;
      v988[0].i8[11]  = v706.i8[0];
      v988[0].i8[12]  = v707;
      v988[0].i8[13]  = v708;
      v988[1].i64[0]  = v293;
      sub_100058744((uint64_t)v988);
      sub_100058090(v988, v305);
      v306  = v305;
      uint64_t v307 = v300;
LABEL_189:
      swift_storeEnumTagMultiPayload(v306, v307, 0LL);
      v324  = v710;
LABEL_190:
      unint64_t v325 = v709;
      goto LABEL_197;
    case 0x71uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      v308  = swift_getKeyPath(&unk_10033A780);
      uint64_t v309 = swift_getKeyPath(&unk_10033A7A0);
      uint64_t v310 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000500C4(v310, &v984);
      swift_release(v308);
      swift_release(v309);
      uint64_t v311 = v985.i64[1];
      if (!v985.i64[1])
      {
        unint64_t v41 = v310;
        goto LABEL_178;
      }

      __int8 v312 = v985.i8[0];
      unint64_t v313 = (unint64_t)v985.i64[0] >> 8;
      v314  = (unint64_t)v985.i64[0] >> 16;
      unint64_t v315 = (unint64_t)v985.i64[0] >> 24;
      v316  = sub_100002274(&qword_100405E00);
      v317  = type metadata accessor for DriverEvent(0LL);
      uint64_t v318 = *(void *)(v317 - 8);
      v319  = *(void *)(v318 + 72);
      v320  = *(unsigned __int8 *)(v318 + 80);
      v321  = (v320 + 32) & ~v320;
      uint64_t v101 = swift_allocObject(v316, v321 + v319, v320 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v322 = (void *)(v101 + v321);
      uint64x2_t v323 = (uint64x2_t)vdupq_lane_s64(v984.i64[0], 0);
      v988[0].i8[0]  = v984.i8[0];
      *(int8x8_t *)&v988[0].i8[1]  = vmovn_s16( vuzp1q_s16( (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v323, (uint64x2_t)xmmword_10033A8F0),  (int32x4_t)vshlq_u64(v323, (uint64x2_t)xmmword_10033A8E0)),  (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v323, (uint64x2_t)xmmword_10033A920),  (int32x4_t)vshlq_u64(v984, (uint64x2_t)xmmword_10033A910))));
      v988[0].i8[9]  = v984.i8[15];
      v988[0].i8[10]  = v312;
      v988[0].i8[11]  = v313;
      v988[0].i8[12]  = v314;
      v988[0].i8[13]  = v315;
      *(__int32 *)((char *)&v988[0].i32[3] + 2)  = v984.i32[2];
      v988[1].i16[1]  = v984.i16[6];
      v988[1].i64[1]  = v311;
      sub_100058738((uint64_t)v988);
      sub_100058090(v988, v322);
      swift_storeEnumTagMultiPayload(v322, v317, 0LL);
      v324  = v710;
      unint64_t v325 = v310;
LABEL_197:
      sub_1000208D8(v324, v325);
      return (void *)v101;
    case 0x72uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      uint64_t v326 = swift_getKeyPath(&unk_10033A740);
      uint64_t v327 = swift_getKeyPath(&unk_10033A760);
      uint64_t v199 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000505DC(v199, v988);
      swift_release(v326);
      swift_release(v327);
      v328  = v988[1].i64[0];
      if (!v988[1].i64[0])
      {
LABEL_167:
        unint64_t v41 = v199;
        goto LABEL_178;
      }

      uint64_t v329 = type metadata accessor for DriverEvent(0LL);
      v706  = (int8x16_t)v988[0];
      uint64x2_t v330 = (uint64x2_t)vdupq_laneq_s64(v988[0], 1);
      v331  = v988[0].i32[0];
      __int8 v332 = v988[0].i8[1];
      v333  = (unint64_t)v988[0].i64[0] >> 40;
      __int8 v334 = v988[0].i8[6];
      v707  = v988[0].u8[7];
      v708  = (unint64_t)v988[0].u64 + 2;
      v335  = (uint64_t)vmovn_s16( vuzp1q_s16( (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v330, (uint64x2_t)xmmword_10033A8F0),  (int32x4_t)vshlq_u64(v330, (uint64x2_t)xmmword_10033A8E0)),  (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64( (uint64x2_t)vextq_s8(v706, v706, 8uLL),  (uint64x2_t)xmmword_10033A900),  (int32x4_t)vshlq_u64( (uint64x2_t)vdupq_lane_s64(v988[0].i64[0], 0),  (uint64x2_t)xmmword_10033A8E0))));
      uint64_t v336 = sub_100002274(&qword_100405E00);
      v337  = *(void *)(v329 - 8);
      uint64_t v338 = *(void *)(v337 + 72);
      uint64_t v339 = *(unsigned __int8 *)(v337 + 80);
      uint64_t v340 = (v339 + 32) & ~v339;
      uint64_t v85 = swift_allocObject(v336, v340 + v338, v339 | 7);
      *(_OWORD *)(v85 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v341  = (void *)(v85 + v340);
      v988[0].i8[0]  = v331;
      *(_BYTE *)v708  = v706.i8[8];
      if (((v331 >> 8) & 0xFE) != 0) {
        v342  = 2;
      }
      else {
        v342  = v332;
      }
      v988[0].i8[1]  = v342;
      *(uint64_t *)((char *)v988[0].i64 + 3)  = v335;
      v988[0].i8[11]  = v333;
      v988[0].i8[12]  = v334;
      v988[0].i8[13]  = v707;
      v988[1].i64[0]  = v328;
      sub_10005872C((uint64_t)v988);
      sub_100058090(v988, v341);
      uint64_t v88 = (uint64_t)v341;
      uint64_t v89 = v329;
      uint64_t v90 = 0LL;
LABEL_69:
      swift_storeEnumTagMultiPayload(v88, v89, v90);
      unint64_t v344 = v709;
      uint64_t v343 = v710;
LABEL_96:
      sub_1000208D8(v343, v344);
      return (void *)v85;
    case 0x75uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v48 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051414(v42, v48);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E70);
      sub_1000586C0((uint64_t)&v984, (uint64_t)v988, &qword_100405E70);
      v345  = sub_100002274(&qword_100405E00);
      v346  = type metadata accessor for DriverEvent(0LL);
      uint64_t v347 = *(void *)(v346 - 8);
      uint64_t v348 = *(void *)(v347 + 72);
      v349  = *(unsigned __int8 *)(v347 + 80);
      v350  = (v349 + 32) & ~v349;
      uint64_t v50 = swift_allocObject(v345, v350 + v348, v349 | 7);
      *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v351 = (void *)(v50 + v350);
      LOBYTE(v967)  = v988[0].i8[1];
      *(_DWORD *)((char *)&v967 + 1)  = *(__int32 *)((char *)v988[0].i32 + 3);
      *(_WORD *)((char *)&v967 + 5)  = *(__int16 *)((char *)&v988[0].i16[3] + 1);
      BYTE7(v967)  = v988[0].u8[0] == 1;
      DWORD2(v967)  = *(__int32 *)((char *)&v988[0].i32[2] + 1);
      WORD6(v967)  = *(__int16 *)((char *)&v988[0].i16[6] + 1);
      sub_100058720((uint64_t)&v967);
      uint64_t v352 = (int64x2_t *)&v967;
      goto LABEL_159;
    case 0x76uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000514E8(v42, v41);
      if ((v985.i8[12] & 1) != 0) {
        goto LABEL_178;
      }
      v353  = v984.i8[8];
      v354  = v984.i64[0];
      unint64_t v355 = (unint64_t)v984.i64[1] >> 8;
      unint64_t v356 = (unint64_t)v984.i64[1] >> 16;
      unint64_t v357 = (unint64_t)v984.i64[1] >> 24;
      v707  = HIDWORD(v984.i64[1]);
      v708  = (unint64_t)v984.i64[1] >> 40;
      uint64_t v358 = sub_100002274(&qword_100405E00);
      uint64_t v359 = type metadata accessor for DriverEvent(0LL);
      uint64_t v360 = *(void *)(v359 - 8);
      uint64_t v361 = *(void *)(v360 + 72);
      v362  = *(unsigned __int8 *)(v360 + 80);
      uint64_t v363 = (v362 + 32) & ~v362;
      uint64_t v101 = swift_allocObject(v358, v363 + v361, v362 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      objc_super v364 = (void *)(v101 + v363);
      uint64_t v365 = sub_1000A3D0C(HIDWORD(v354));
      v988[0].i8[0]  = v354;
      v988[0].i8[1]  = v353;
      v988[0].i8[2]  = v355;
      v988[0].i8[3]  = v356;
      v988[0].i8[4]  = v357;
      v988[0].i8[5]  = v707;
      v988[0].i16[3]  = v708;
      v988[0].i64[1]  = v365;
      sub_1000586B4((uint64_t)v988);
      sub_100058090(v988, v364);
      v306  = v364;
      uint64_t v307 = v359;
      goto LABEL_189;
    case 0x7AuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000518D8(v42, v41);
      if ((v988[4].i8[8] & 1) != 0) {
        goto LABEL_178;
      }
      __int32 v366 = v988[4].i32[0];
      uint64_t v367 = v988[3].i64[1];
      v368  = v988[3].i64[0];
      uint64_t v369 = sub_100002274(&qword_100405E00);
      uint64_t v370 = type metadata accessor for DriverEvent(0LL);
      uint64_t v371 = *(void *)(v370 - 8);
      uint64_t v372 = *(void *)(v371 + 72);
      uint64_t v373 = *(unsigned __int8 *)(v371 + 80);
      uint64_t v374 = (v373 + 32) & ~v373;
      uint64_t v375 = swift_allocObject(v369, v374 + v372, v373 | 7);
      uint64_t v376 = HIWORD(v366);
      *(_OWORD *)(v375 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v255 = v375;
      v377  = (void *)(v375 + v374);
      uint64_t v378 = __ROR8__(v368, 32);
      uint64_t v379 = __ROR8__(v367, 32);
      unint64_t v380 = sub_1001889D8((unsigned __int16)v366);
      if ((v380 & 0xFF00000000LL) == 0x300000000LL)
      {
        if (qword_1004043A0 != -1) {
          swift_once(&qword_1004043A0, sub_100186540);
        }
        LODWORD(v380)  = static Channel.nanPrimary;
        LOBYTE(v381)  = byte_1004108A4;
        LOBYTE(v382)  = byte_1004108A5;
        unint64_t v383 = v709;
      }

      else
      {
        unint64_t v381 = HIDWORD(v380);
        unint64_t v382 = v380 >> 40;
        unint64_t v383 = v709;
      }

      v988[0].i64[0]  = v376;
      v988[0].i64[1]  = v378;
      v988[1].i64[0]  = v379;
      v988[1].i32[2]  = v380;
      v988[1].i8[12]  = v381;
      v988[1].i8[13]  = v382;
      sub_1000580E4((uint64_t)v988);
      sub_100058090(v988, v377);
      v473  = (uint64_t)v377;
      v474  = v370;
      v475  = 0LL;
      goto LABEL_187;
    case 0x7DuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000524D8(v42, v41);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E08);
      sub_1000586C0((uint64_t)&v984, (uint64_t)v988, &qword_100405E08);
      memcpy(v1112, v988, 0x193uLL);
      uint64_t v384 = sub_100002274(&qword_100405E00);
      uint64_t v44 = type metadata accessor for DriverEvent(0LL);
      uint64_t v385 = *(void *)(v44 - 8);
      uint64_t v386 = *(void *)(v385 + 72);
      uint64_t v387 = *(unsigned __int8 *)(v385 + 80);
      unint64_t v48 = v41;
      uint64_t v388 = (v387 + 32) & ~v387;
      uint64_t v50 = swift_allocObject(v384, v388 + v386, v387 | 7);
      *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v51 = v50 + v388;
      *(void *)uint64_t v51 = sub_1000A24E8();
      *(_OWORD *)(v51 + 8)  = 0u;
      *(_OWORD *)(v51 + 24)  = 0u;
      __int16 v55 = 256;
LABEL_81:
      *(_WORD *)(v51 + 40)  = v55;
      uint64_t v389 = v51;
      uint64_t v390 = v44;
      uint64_t v391 = 2LL;
      goto LABEL_161;
    case 0x7EuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000525AC(v42, v41);
      if ((v392 & 0x10000) != 0) {
        goto LABEL_178;
      }
      v393  = v392;
      unint64_t v94 = v41;
      v394  = sub_100002274(&qword_100405E00);
      v395  = type metadata accessor for DriverEvent(0LL);
      v396  = *(void *)(v395 - 8);
      v397  = *(void *)(v396 + 72);
      v398  = *(unsigned __int8 *)(v396 + 80);
      v399  = (v398 + 32) & ~v398;
      uint64_t v101 = swift_allocObject(v394, v399 + v397, v398 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v102 = v101 + v399;
      *(void *)uint64_t v102 = v393;
      *(_OWORD *)(v102 + 24)  = 0u;
      *(_OWORD *)(v102 + 8)  = 0u;
      *(_BYTE *)(v102 + 40)  = 0;
      v400  = 2;
      goto LABEL_152;
    case 0x7FuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100052664(v42, v41);
      if ((v402 & 0x100000000LL) != 0) {
        goto LABEL_178;
      }
      v403  = sub_1000A810C(v401, v402);
      if ((v403 & 0xFF00000000LL) == 0x300000000LL) {
        goto LABEL_178;
      }
      v404  = v403;
      unint64_t v94 = v41;
      v405  = sub_100002274(&qword_100405E00);
      v395  = type metadata accessor for DriverEvent(0LL);
      v406  = *(void *)(v395 - 8);
      v407  = *(void *)(v406 + 72);
      v408  = *(unsigned __int8 *)(v406 + 80);
      v409  = (v408 + 32) & ~v408;
      uint64_t v101 = swift_allocObject(v405, v409 + v407, v408 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v102 = v101 + v409;
      *(void *)uint64_t v102 = v404 & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v102 + 24)  = 0u;
      *(_OWORD *)(v102 + 8)  = 0u;
      *(_BYTE *)(v102 + 40)  = 0;
      v400  = 3;
      goto LABEL_152;
    case 0x81uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000515AC(v42, v41);
      if ((v985.i8[4] & 1) != 0) {
        goto LABEL_178;
      }
      v410  = v984.i64[1];
      uint64_t v133 = v42;
      unint64_t v134 = v41;
      v411  = v984.i16[0];
      v412  = sub_100002274(&qword_100405E00);
      uint64_t v221 = type metadata accessor for DriverEvent(0LL);
      v413  = *(void *)(v221 - 8);
      v414  = *(void *)(v413 + 72);
      v415  = *(unsigned __int8 *)(v413 + 80);
      v416  = (v415 + 32) & ~v415;
      uint64_t v101 = swift_allocObject(v412, v416 + v414, v415 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v417  = (void *)(v101 + v416);
      v988[0].i64[0]  = sub_1000A171C(v411, v410);
      v988[0].i16[4]  = v418;
      v988[0].i8[10]  = v419;
      v988[0].i8[11]  = v420;
      v988[0].i8[12]  = v421;
      v988[0].i8[13]  = v422;
      v988[0].i8[14]  = v423;
      v988[0].i8[15]  = v424;
      sub_1000586A8((uint64_t)v988);
      sub_100058090(v988, v417);
      uint64_t v138 = (uint64_t)v417;
LABEL_89:
      uint64_t v139 = v221;
      uint64_t v140 = 0LL;
LABEL_90:
      swift_storeEnumTagMultiPayload(v138, v139, v140);
      v324  = v133;
      unint64_t v325 = v134;
      goto LABEL_197;
    case 0x8EuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      v425  = v709;
      v426  = v710;
      sub_100020AFC(v710, v709);
      sub_100051B38(v426, v425);
      sub_1000586C0((uint64_t)v1112, (uint64_t)&v967, &qword_100405E50);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E50);
      if (sub_100057FCC((uint64_t)&v984) == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1LL, 1LL, v13);
      }

      else
      {
        sub_1000586C0((uint64_t)&v967, (uint64_t)v1111, &qword_100405E50);
        memcpy(v988, v1111, 0x650uLL);
        sub_1000A1B34((uint64_t)v988, (uint64_t)v12);
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
      {
        sub_1000225EC((uint64_t)v12, &qword_100405DF8);
        unint64_t v41 = v709;
        uint64_t v42 = v710;
        goto LABEL_178;
      }

      sub_100022628((uint64_t)v12, (uint64_t)v16, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      v618  = sub_100002274(&qword_100405E00);
      v619  = type metadata accessor for DriverEvent(0LL);
      v620  = *(void *)(v619 - 8);
      v621  = *(void *)(v620 + 72);
      v622  = *(unsigned __int8 *)(v620 + 80);
      v623  = (v622 + 32) & ~v622;
      uint64_t v101 = swift_allocObject(v618, v623 + v621, v622 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v624  = v101 + v623;
      sub_100057FE8((uint64_t)v16, v624, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      v625  = type metadata accessor for DriverEvent.AWDL(0LL);
      swift_storeEnumTagMultiPayload(v624, v625, 3LL);
      swift_storeEnumTagMultiPayload(v624, v619, 1LL);
      sub_1000208D8(v710, v709);
      sub_10005802C((uint64_t)v16, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      return (void *)v101;
    case 0x95uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051C0C(v42, v41);
      sub_1000586C0((uint64_t)v1112, (uint64_t)&v967, &qword_100405E40);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E40);
      sub_1000586C0((uint64_t)&v967, (uint64_t)v1111, &qword_100405E40);
      v988[10]  = (int64x2_t)v1111[10];
      v988[11]  = (int64x2_t)v1111[11];
      v988[12]  = (int64x2_t)v1111[12];
      v988[6]  = (int64x2_t)v1111[6];
      v988[7]  = (int64x2_t)v1111[7];
      v988[8]  = (int64x2_t)v1111[8];
      v988[9]  = (int64x2_t)v1111[9];
      v988[2]  = (int64x2_t)v1111[2];
      v988[3]  = (int64x2_t)v1111[3];
      v988[4]  = (int64x2_t)v1111[4];
      v988[5]  = (int64x2_t)v1111[5];
      v988[0]  = (int64x2_t)v1111[0];
      v988[1]  = (int64x2_t)v1111[1];
      sub_1000A9378((uint64_t)v988, (uint64_t)v1113);
      sub_1000586C0((uint64_t)v1113, (uint64_t)&v1114, &qword_100405E48);
      if (!(void)v1118) {
        goto LABEL_178;
      }
      v427  = sub_100002274(&qword_100405E00);
      v428  = type metadata accessor for DriverEvent(0LL);
      v429  = *(void *)(v428 - 8);
      v430  = *(void *)(v429 + 72);
      v431  = *(unsigned __int8 *)(v429 + 80);
      v432  = v41;
      v433  = (v431 + 32) & ~v431;
      uint64_t v85 = swift_allocObject(v427, v433 + v430, v431 | 7);
      *(_OWORD *)(v85 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v434  = (_OWORD *)(v85 + v433);
      v435  = *(_OWORD *)v1115;
      *v434  = v1114;
      v434[1]  = v435;
      v436  = v1119;
      v437  = v1117;
      v434[5]  = v1118;
      v434[6]  = v436;
      v438  = v1116;
      v434[2]  = *(_OWORD *)&v1115[16];
      v434[3]  = v438;
      v434[4]  = v437;
      v439  = type metadata accessor for DriverEvent.AWDL(0LL);
      swift_storeEnumTagMultiPayload(v85 + v433, v439, 2LL);
      swift_storeEnumTagMultiPayload(v85 + v433, v428, 1LL);
      uint64_t v343 = v42;
      unint64_t v344 = v432;
      goto LABEL_96;
    case 0x9DuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v48 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051A64(v42, v48);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E58);
      sub_1000586C0((uint64_t)&v984, (uint64_t)v988, &qword_100405E58);
      if (sub_100058068((uint64_t)v988) == 1)
      {
LABEL_98:
        unint64_t v41 = v48;
        goto LABEL_178;
      }

      v705  = v1101;
      v673  = v1083;
      v666  = v1047;
      v667  = v1065;
      v665  = v1026;
      v662  = (__int128 *)v1030;
      v663  = v1008;
      v660  = v990;
      v591  = sub_100002274(&qword_100405E00);
      v707  = type metadata accessor for DriverEvent(0LL);
      v592  = *(void *)(v707 - 8);
      v593  = *(void *)(v592 + 72);
      v594  = *(unsigned __int8 *)(v592 + 80);
      v595  = (v594 + 32) & ~v594;
      v596  = swift_allocObject(v591, v595 + v593, v594 | 7);
      v708  = v596;
      *(_OWORD *)(v596 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v706.i64[0]  = v596 + v595;
      LODWORD(v696)  = v988[0].i32[0];
      LODWORD(v695)  = v988[0].u8[4];
      LODWORD(v694)  = v988[0].u8[5];
      LODWORD(v693)  = v988[0].u8[6];
      LODWORD(v692)  = v988[1].u8[0];
      LODWORD(v691)  = v988[1].u8[1];
      LODWORD(v690)  = v988[1].u8[2];
      v688  = v988[2].u8[5];
      LODWORD(v689)  = v988[2].u8[4];
      v686  = v988[3].i32[0];
      v687  = v988[2].u8[6];
      v684  = v988[4].i64[0];
      v685  = v988[3].i64[1];
      v682  = v988[5].i64[0];
      v683  = v988[4].i64[1];
      v680  = v988[6].i64[0];
      v681  = v988[5].i64[1];
      v703  = v988[7].u64[0];
      v704  = v988[6].u64[1];
      v701  = v988[8].u64[0];
      v702  = v988[7].u64[1];
      v699  = v988[9].i64[0];
      v700  = v988[8].u64[1];
      v697  = v988[10].u64[0];
      v698  = v988[9].u64[1];
      v948  = v988[18].i64[0];
      v950  = v988[19].i64[1];
      v952  = v988[21].i64[0];
      v954  = v988[22].i64[1];
      v956  = v988[24].i64[0];
      v958  = v988[25].i64[1];
      v960  = v988[27].i64[0];
      v962  = v988[28].i64[1];
      v678  = v988[10].i64[1];
      v679  = v988[11].i64[0];
      v949  = *(__int128 *)((char *)&v988[18] + 8);
      v951  = v988[20];
      v953  = *(__int128 *)((char *)&v988[21] + 8);
      v955  = v988[23];
      v957  = *(__int128 *)((char *)&v988[24] + 8);
      v959  = v988[26];
      v961  = *(__int128 *)((char *)&v988[27] + 8);
      v963  = v988[29];
      v965  = *(__int128 *)((char *)&v988[30] + 8);
      v964  = v988[30].i64[0];
      v966  = v988[31].i64[1];
      v597  = v988[12].i64[0];
      v947  = v988[17];
      v598  = v988[0].i64[1];
      v599  = *(uint64_t *)((char *)v988[1].i64 + 4);
      v600  = v988[2].i64[1];
      v676  = v988[16].i64[1];
      v677  = v988[11].i64[1];
      v672  = v988[12].i64[1];
      v674  = v988[16].i64[0];
      v675  = v988[13].i64[1];
      v669  = v988[2].i32[0];
      v670  = v988[1].i32[3];
      v671  = sub_1000A4F60((uint64_t)&v947);
      v927  = v988[47];
      v929  = *(__int128 *)((char *)&v988[48] + 8);
      v928  = v988[48].i64[0];
      v930  = v988[49].i64[1];
      v931  = v988[50];
      v933  = *(__int128 *)((char *)&v988[51] + 8);
      v932  = v988[51].i64[0];
      v934  = v988[52].i64[1];
      v935  = v988[53];
      v937  = *(__int128 *)((char *)&v988[54] + 8);
      v936  = v988[54].i64[0];
      v938  = v988[55].i64[1];
      v939  = v988[56];
      v941  = *(__int128 *)((char *)&v988[57] + 8);
      v940  = v988[57].i64[0];
      v942  = v988[58].i64[1];
      v943  = v988[59];
      v945  = *(__int128 *)((char *)&v988[60] + 8);
      v944  = v988[60].i64[0];
      v946  = v988[61].i64[1];
      v668  = sub_1000A4F60((uint64_t)&v927);
      v907  = v988[62];
      v909  = *(__int128 *)((char *)&v988[63] + 8);
      v908  = v988[63].i64[0];
      v910  = v988[64].i64[1];
      v911  = v988[65];
      v913  = *(__int128 *)((char *)&v988[66] + 8);
      v912  = v988[66].i64[0];
      v914  = v988[67].i64[1];
      v915  = v988[68];
      v917  = *(__int128 *)((char *)&v988[69] + 8);
      v916  = v988[69].i64[0];
      v918  = v988[70].i64[1];
      v919  = v988[71];
      v921  = *(__int128 *)((char *)&v988[72] + 8);
      v920  = v988[72].i64[0];
      v922  = v988[73].i64[1];
      v923  = v988[74];
      v925  = *(__int128 *)((char *)&v988[75] + 8);
      v924  = v988[75].i64[0];
      v926  = v988[76].i64[1];
      v601  = sub_1000A4F60((uint64_t)&v907);
      v887  = v988[77];
      v889  = *(__int128 *)((char *)&v988[78] + 8);
      v888  = v988[78].i64[0];
      v890  = v988[79].i64[1];
      v891  = v988[80];
      v893  = *(__int128 *)((char *)&v988[81] + 8);
      v892  = v988[81].i64[0];
      v894  = v988[82].i64[1];
      v895  = v988[83];
      v897  = *(__int128 *)((char *)&v988[84] + 8);
      v896  = v988[84].i64[0];
      v898  = v988[85].i64[1];
      v899  = v988[86];
      v901  = *(__int128 *)((char *)&v988[87] + 8);
      v900  = v988[87].i64[0];
      v902  = v988[88].i64[1];
      v903  = v988[89];
      v905  = *(__int128 *)((char *)&v988[90] + 8);
      v904  = v988[90].i64[0];
      v906  = v988[91].i64[1];
      v602  = sub_1000A4F60((uint64_t)&v887);
      v867  = v988[92];
      v869  = *(__int128 *)((char *)&v988[93] + 8);
      v868  = v988[93].i64[0];
      v870  = v988[94].i64[1];
      v871  = v988[95];
      v873  = *(__int128 *)((char *)&v988[96] + 8);
      v872  = v988[96].i64[0];
      v874  = v988[97].i64[1];
      v875  = v988[98];
      v877  = *(__int128 *)((char *)&v988[99] + 8);
      v876  = v988[99].i64[0];
      v878  = v988[100].i64[1];
      v879  = v988[101];
      v603  = v660;
      v881  = *(_OWORD *)v660;
      v880  = v989;
      v882  = v990[2];
      v883  = v991;
      v885  = *((_OWORD *)v660 + 3);
      v884  = v992;
      v886  = v993;
      v664  = sub_1000A4F60((uint64_t)&v867);
      v847  = *v662;
      v849  = v1031;
      v848  = v1030[2];
      v850  = v1032;
      v851  = v662[3];
      v853  = v1034;
      v852  = v1033;
      v854  = v1035;
      v855  = v662[6];
      v857  = v1037;
      v856  = v1036;
      v858  = v1038;
      v859  = v662[9];
      v861  = v1040;
      v860  = v1039;
      v862  = v1041;
      v863  = v662[12];
      v865  = v1043;
      v864  = v1042;
      v866  = v1044;
      v662  = (__int128 *)sub_1000A4F60((uint64_t)&v847);
      v835  = v994;
      v837  = v603[6];
      v836  = v995;
      v838  = v996;
      v839  = v997;
      v841  = v603[9];
      v840  = v998;
      v842  = v999;
      v843  = v1000;
      v845  = v603[12];
      v844  = v1001;
      v846  = v1002;
      v661  = sub_1000A50E4(&v835);
      v817  = v1003;
      v819  = v603[15];
      v818  = v1004;
      v820  = v1005;
      v821  = v1006;
      v823  = *v663;
      v822  = v1007;
      v824  = v1008[2];
      v825  = v1009;
      v827  = v663[3];
      v826  = v1010;
      v828  = v1011;
      v829  = v1012;
      v604  = v663;
      v831  = v663[6];
      v830  = v1013;
      v832  = v1014;
      v833  = v1015;
      v834  = v1016;
      v660  = sub_1000A5320((uint64_t)&v817);
      v799  = v604[9];
      v801  = v1018;
      v800  = v1017;
      v802  = v1019;
      v803  = v604[12];
      v805  = v1021;
      v804  = v1020;
      v806  = v1022;
      v807  = v604[15];
      v809  = v1024;
      v808  = v1023;
      v810  = v1025;
      v811  = *(_OWORD *)v665;
      v813  = v1027;
      v812  = v1026[2];
      v814  = v1028;
      v815  = *((_OWORD *)v665 + 3);
      v816  = v1029;
      v665  = sub_1000A5320((uint64_t)&v799);
      v779  = v1045;
      v781  = *v666;
      v780  = v1046;
      v782  = v1047[2];
      v783  = v1048;
      v785  = v666[3];
      v784  = v1049;
      v786  = v1050;
      v787  = v1051;
      v789  = v666[6];
      v788  = v1052;
      v790  = v1053;
      v791  = v1054;
      v793  = v666[9];
      v792  = v1055;
      v794  = v1056;
      v795  = v1057;
      v605  = v666;
      v797  = v666[12];
      v796  = v1058;
      v798  = v1059;
      v606  = sub_1000A4F60((uint64_t)&v779);
      v759  = v1060;
      v761  = v605[15];
      v760  = v1061;
      v762  = v1062;
      v763  = v1063;
      v765  = *v667;
      v764  = v1064;
      v766  = v1065[2];
      v767  = v1066;
      v769  = v667[3];
      v768  = v1067;
      v770  = v1068;
      v771  = v1069;
      v773  = v667[6];
      v772  = v1070;
      v774  = v1071;
      v775  = v1072;
      v607  = v667;
      v777  = v667[9];
      v776  = v1073;
      v778  = v1074;
      v608  = sub_1000A4F60((uint64_t)&v759);
      v739  = v1075;
      v741  = v607[12];
      v740  = v1076;
      v742  = v1077;
      v743  = v1078;
      v745  = v607[15];
      v744  = v1079;
      v746  = v1080;
      v747  = v1081;
      v749  = *v673;
      v748  = v1082;
      v750  = v1083[2];
      v751  = v1084;
      v753  = v673[3];
      v752  = v1085;
      v754  = v1086;
      v755  = v1087;
      v609  = v673;
      v757  = v673[6];
      v756  = v1088;
      v758  = v1089;
      v610  = sub_1000A4F60((uint64_t)&v739);
      v719  = v1090;
      v721  = v609[9];
      v720  = v1091;
      v722  = v1092;
      v723  = v1093;
      v725  = v609[12];
      v724  = v1094;
      v726  = v1095;
      v727  = v1096;
      v729  = v609[15];
      v728  = v1097;
      v730  = v1098;
      v731  = v1099;
      v733  = *(_OWORD *)v705;
      v732  = v1100;
      v734  = v1101[2];
      v735  = v1102;
      v611  = v705;
      v737  = *((_OWORD *)v705 + 3);
      v736  = v1103;
      v738  = v1104;
      v612  = sub_1000A4F60((uint64_t)&v719);
      v711  = v1105;
      v712  = v1106;
      v713  = *((_OWORD *)v611 + 6);
      v714  = v1107;
      v715  = v1108;
      v716  = v1109;
      v717  = *((_OWORD *)v611 + 9);
      v718  = v1110;
      v613  = sub_1000A5494(&v711);
      LODWORD(v1112[0])  = v696;
      BYTE4(v1112[0])  = v695;
      BYTE5(v1112[0])  = v694;
      BYTE6(v1112[0])  = v693;
      LOBYTE(v1112[2])  = v692;
      BYTE1(v1112[2])  = v691;
      WORD1(v1112[2])  = v690;
      HIDWORD(v1112[3])  = v670;
      LODWORD(v1112[4])  = v669;
      BYTE4(v1112[4])  = v689;
      BYTE5(v1112[4])  = v688;
      BYTE6(v1112[4])  = v687;
      LODWORD(v1112[6])  = v686;
      v1112[7]  = v685;
      v1112[8]  = v684;
      v1112[9]  = v683;
      v1112[10]  = v682;
      v1112[11]  = v681;
      v1112[12]  = v680;
      *(uint64_t *)((char *)&v1112[2] + 4)  = v599;
      v1112[1]  = v598;
      v1112[5]  = v600;
      v1112[13]  = v704;
      v1112[14]  = v703;
      v1112[15]  = v702;
      v1112[16]  = v701;
      v1112[17]  = v700;
      v1112[18]  = v699;
      v1112[19]  = v698;
      v1112[20]  = v697;
      v1112[21]  = v678;
      v1112[22]  = v679;
      v1112[23]  = v677;
      v1112[24]  = v597;
      v1112[25]  = v672;
      v1112[26]  = v674;
      v1112[27]  = v676;
      v1112[28]  = v675;
      v1112[29]  = (uint64_t)v671;
      v1112[30]  = (uint64_t)v668;
      v1112[31]  = (uint64_t)v601;
      v1112[32]  = (uint64_t)v602;
      v1112[33]  = (uint64_t)v664;
      v1112[34]  = (uint64_t)v662;
      v1112[35]  = (uint64_t)v661;
      v1112[36]  = (uint64_t)v660;
      v1112[37]  = (uint64_t)v665;
      v1112[38]  = (uint64_t)v606;
      v1112[39]  = (uint64_t)v608;
      v1112[40]  = (uint64_t)v610;
      v1112[41]  = (uint64_t)v612;
      v1112[42]  = (uint64_t)v613;
      memset(&v1112[43], 0, 17);
      sub_100058084((uint64_t)v1112);
      v614  = (int64x2_t *)v1112;
      goto LABEL_174;
    case 0x9EuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_10005172C(v42, v41);
      if ((v441 & 0x10000) != 0) {
        goto LABEL_178;
      }
      v442  = v440;
      v443  = v441;
      v444  = v440 >> 16;
      v445  = v42;
      v446  = HIWORD(v440) | (v441 << 16);
      v447  = sub_100002274(&qword_100405E00);
      v448  = type metadata accessor for DriverEvent(0LL);
      v449  = *(void *)(v448 - 8);
      v450  = *(void *)(v449 + 72);
      v451  = *(unsigned __int8 *)(v449 + 80);
      v452  = (v451 + 32) & ~v451;
      uint64_t v101 = swift_allocObject(v447, v452 + v450, v451 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v453  = (void *)(v101 + v452);
      v988[0].i16[0]  = v442;
      *(uint64_t *)((char *)v988[0].i64 + 2)  = __PAIR64__(v446, v444);
      v988[0].i32[0]  = sub_1000A1804(v988[0].u64[0], v443);
      sub_100058118((uint64_t)v988);
      sub_100058090(v988, v453);
      swift_storeEnumTagMultiPayload(v453, v448, 0LL);
      v324  = v445;
      goto LABEL_190;
    case 0x9FuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051804(v42, v41);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E60);
      sub_1000586C0((uint64_t)&v984, (uint64_t)v988, &qword_100405E60);
      memcpy(v1112, v988, 0x3E1uLL);
      v454  = sub_100002274(&qword_100405E00);
      v346  = type metadata accessor for DriverEvent(0LL);
      v455  = *(void *)(v346 - 8);
      v456  = *(void *)(v455 + 72);
      v457  = *(unsigned __int8 *)(v455 + 80);
      unint64_t v48 = v41;
      v458  = (v457 + 32) & ~v457;
      uint64_t v50 = swift_allocObject(v454, v458 + v456, v457 | 7);
      *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      sub_1000A184C();
      *(void *)&v1111[0]  = v1114;
      DWORD2(v1111[0])  = DWORD2(v1114);
      LOBYTE(v1111[1])  = v1115[0];
      *(_OWORD *)((char *)&v1111[1] + 8)  = *(_OWORD *)&v1115[8];
      *((void *)&v1111[2] + 1)  = *(void *)&v1115[24];
      sub_10005810C((uint64_t)v1111);
      sub_100058090(v1111, (void *)(v50 + v458));
      uint64_t v389 = v50 + v458;
      goto LABEL_160;
    case 0xACuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051CE8(v42, v41);
      if ((v461 & 1) != 0) {
        goto LABEL_178;
      }
      v462  = v459;
      v463  = v460;
      unint64_t v383 = v41;
      v464  = sub_100002274(&qword_100405E00);
      v465  = type metadata accessor for DriverEvent(0LL);
      v466  = *(void *)(v465 - 8);
      v467  = *(void *)(v466 + 72);
      v468  = *(unsigned __int8 *)(v466 + 80);
      v469  = (v468 + 32) & ~v468;
      uint64_t v255 = swift_allocObject(v464, v469 + v467, v468 | 7);
      *(_OWORD *)(v255 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v470  = v255 + v469;
      v471  = sub_1001889D8(v463);
      *(_BYTE *)v470  = HIDWORD(v462) != 0;
      *(_DWORD *)(v470 + 4)  = v471;
      *(_WORD *)(v470 + 8)  = WORD2(v471);
      v472  = type metadata accessor for DriverEvent.AWDL(0LL);
      swift_storeEnumTagMultiPayload(v470, v472, 5LL);
      v473  = v470;
      v474  = v465;
      v475  = 1LL;
LABEL_187:
      swift_storeEnumTagMultiPayload(v473, v474, v475);
      uint64_t v256 = v42;
      unint64_t v257 = v383;
LABEL_188:
      sub_1000208D8(v256, v257);
      return (void *)v255;
    case 0xB3uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      v476  = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      v477  = v476;
      sub_100051E84(v42, v476);
      sub_1000586C0((uint64_t)&v967, (uint64_t)&v984, &qword_100405E20);
      sub_1000586C0((uint64_t)&v984, (uint64_t)v988, &qword_100405E20);
      if (sub_100057F28((uint64_t)v988) == 1 || (v478  = v988[0].u32[1], v988[0].i32[1] >= 0x100u))
      {
        unint64_t v41 = v477;
      }

      else
      {
        v979  = *(__int128 *)((char *)&v988[12] + 8);
        v980  = *(__int128 *)((char *)&v988[13] + 8);
        v981  = *(__int128 *)((char *)&v988[14] + 8);
        v982  = *(__int128 *)((char *)&v988[15] + 8);
        v975  = *(__int128 *)((char *)&v988[8] + 8);
        v976  = *(__int128 *)((char *)&v988[9] + 8);
        v977  = *(__int128 *)((char *)&v988[10] + 8);
        v978  = *(__int128 *)((char *)&v988[11] + 8);
        v971  = *(__int128 *)((char *)&v988[4] + 8);
        v972  = *(__int128 *)((char *)&v988[5] + 8);
        v973  = *(__int128 *)((char *)&v988[6] + 8);
        v974  = *(__int128 *)((char *)&v988[7] + 8);
        v967  = *(__int128 *)((char *)v988 + 8);
        v968  = *(__int128 *)((char *)&v988[1] + 8);
        v969  = *(__int128 *)((char *)&v988[2] + 8);
        v970  = *(__int128 *)((char *)&v988[3] + 8);
        v479  = sub_100002274(&qword_100405E28);
        *((void *)&v1111[1] + 1)  = v479;
        *(void *)&v1111[2]  = sub_100057F44();
        v480  = (void *)swift_allocObject(&unk_1003DE6B0, 48LL, 7LL);
        *(void *)&v1111[0]  = v480;
        v480[2]  = 0LL;
        v480[3]  = v478;
        v480[4]  = &v967;
        v480[5]  = &v983;
        v481  = (__int128 *)sub_100021104(v1111, v479);
        v482  = v481[1];
        v1114  = *v481;
        *(_OWORD *)v1115  = v482;
        Slice<>.withUnsafeBytes<A>(_:)( v1113,  sub_1000FA8EC,  0LL,  v479,  &type metadata for Data._Representation,  &protocol witness table for UnsafeRawBufferPointer);
        v483  = v1113[0];
        v484  = v1113[1];
        sub_100002AC4(v1111);
        static DNSRecords.createRecord(with:value:)(v483, v484, 0LL, 0xF000000000000000LL);
        sub_1000208D8(v483, v484);
        v638  = sub_100002274(&qword_100404DB8);
        v639  = swift_dynamicCast(&v967, v1112, v638, &type metadata for DNSRecords.Identifier, 0LL);
        if ((v639 & 1) != 0)
        {
          v640  = *((void *)&v967 + 1);
          v641  = v967;
          v642  = v968;
LABEL_207:
          sub_100002AC4(v1112);
          v645  = sub_100002274(&qword_100405E00);
          v646  = type metadata accessor for DriverEvent(0LL);
          v647  = *(void *)(v646 - 8);
          v648  = *(void *)(v647 + 72);
          v649  = *(unsigned __int8 *)(v647 + 80);
          v650  = (v649 + 32) & ~v649;
          uint64_t v240 = swift_allocObject(v645, v650 + v648, v649 | 7);
          *(_OWORD *)(v240 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
          v651  = v240 + v650;
          *(void *)&v967  = 0LL;
          *((void *)&v967 + 1)  = 0xE000000000000000LL;
          _StringGuts.grow(_:)(35LL);
          swift_bridgeObjectRelease(*((void *)&v967 + 1));
          *(void *)&v967  = 0xD000000000000015LL;
          *((void *)&v967 + 1)  = 0x8000000100363110LL;
          v652._countAndFlagsBits  = v641;
          DNSRecords.Identifier.description.getter(v641, v640, v642);
          object  = v652._object;
          String.append(_:)(v652);
          swift_bridgeObjectRelease(v640);
          swift_bridgeObjectRelease(object);
          v654._countAndFlagsBits  = 0x2064656B61654C20LL;
          v654._object  = (void *)0xE90000000000005BLL;
          String.append(_:)(v654);
          LODWORD(v1112[0])  = v988[0].i32[0];
          v655._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
          v656  = v655._object;
          String.append(_:)(v655);
          swift_bridgeObjectRelease(v656);
          v657._countAndFlagsBits  = 93LL;
          v657._object  = (void *)0xE100000000000000LL;
          String.append(_:)(v657);
          v658  = *((void *)&v967 + 1);
          *(void *)v651  = v967;
          *(void *)(v651 + 8)  = v658;
          *(void *)(v651 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xD000000000000096LL;
          *(void *)(v651 + 24)  = 0x8000000100363130LL;
          *(_BYTE *)(v651 + 32)  = 1;
          v659  = type metadata accessor for DriverEvent.AWDL(0LL);
          swift_storeEnumTagMultiPayload(v240 + v650, v659, 6LL);
          v286  = v240 + v650;
          uint64_t v287 = v646;
          uint64_t v288 = 1LL;
LABEL_59:
          swift_storeEnumTagMultiPayload(v286, v287, v288);
          v290  = v709;
          v289  = v710;
LABEL_164:
          sub_1000208D8(v289, v290);
          return (void *)v240;
        }

        if ((swift_dynamicCast(&v967, v1112, v638, &type metadata for DNSRecords.PTR, 0LL) & 1) != 0)
        {
          v640  = *((void *)&v968 + 1);
          v641  = v968;
          v642  = v969;
          swift_bridgeObjectRelease(*((void *)&v967 + 1));
          goto LABEL_207;
        }

        if (swift_dynamicCast(v9, v1112, v638, v4, 0LL))
        {
          sub_100022628((uint64_t)v9, (uint64_t)v7, type metadata accessor for DNSRecords.SRV);
          v641  = *((void *)v7 + 2);
          v640  = *((void *)v7 + 3);
          v642  = v7[32];
          swift_bridgeObjectRetain(v640);
          sub_10005802C((uint64_t)v7, type metadata accessor for DNSRecords.SRV);
          goto LABEL_207;
        }

        if (swift_dynamicCast(&v967, v1112, v638, &type metadata for DNSRecords.TXT, 0LL))
        {
          v640  = *((void *)&v968 + 1);
          v641  = v968;
          v642  = v969;
          v643  = *((void *)&v969 + 1);
          v644  = v970;
          swift_bridgeObjectRelease(*((void *)&v967 + 1));
          sub_1000208D8(v643, v644);
          goto LABEL_207;
        }

        sub_100002AC4(v1112);
        unint64_t v41 = v709;
      }

LABEL_178:
      v626  = v708;
      Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x726576697264LL,  0xE600000000000000LL);
      sub_100020AFC(v42, v41);
      v627  = sub_100020AFC(v42, v41);
      v628  = (os_log_s *)Logger.logObject.getter(v627);
      v629  = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v628, v629))
      {
        v630  = swift_slowAlloc(22LL, -1LL);
        v631  = swift_slowAlloc(32LL, -1LL);
        v1112[0]  = v631;
        *(_DWORD *)v630  = 134218242;
        *(void *)&v1111[0]  = v707;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1111, (char *)v1111 + 8);
        *(_WORD *)(v630 + 12)  = 2080;
        sub_100020AFC(v710, v41);
        v632  = v41;
        sub_100020B54(0LL, 0xE000000000000000LL, v710, v41);
        v634  = v633;
        v636  = v635;
        sub_1000208D8(v710, v632);
        v637  = v634;
        unint64_t v41 = v632;
        *(void *)&v1111[0]  = sub_10000235C(v637, v636, v1112);
        uint64_t v42 = v710;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1111, (char *)v1111 + 8);
        swift_bridgeObjectRelease(v636);
        sub_1000208D8(v42, v632);
        sub_1000208D8(v42, v632);
        _os_log_impl((void *)&_mh_execute_header, v628, v629, "Failed to parse event[%ld]: %s", (uint8_t *)v630, 0x16u);
        swift_arrayDestroy(v631, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v631, -1LL, -1LL);
        swift_slowDealloc(v630, -1LL, -1LL);

        ((void (*)(unint64_t, uint64_t))v705[1])(v708, v706.i64[0]);
      }

      else
      {
        sub_1000208D8(v42, v41);
        sub_1000208D8(v42, v41);

        ((void (*)(unint64_t, uint64_t))v705[1])(v626, v706.i64[0]);
      }

LABEL_181:
      sub_1000208D8(v42, v41);
      return _swiftEmptyArrayStorage;
    case 0xB6uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000525AC(v42, v41);
      if ((v485 & 0x10000) != 0) {
        goto LABEL_178;
      }
      v486  = v485;
      v487  = v485 >> 8;
      unint64_t v153 = v41;
      v488  = sub_100002274(&qword_100405E00);
      v489  = type metadata accessor for DriverEvent(0LL);
      v490  = *(void *)(v489 - 8);
      v491  = *(void *)(v490 + 72);
      v492  = *(unsigned __int8 *)(v490 + 80);
      v493  = (v492 + 32) & ~v492;
      uint64_t v101 = swift_allocObject(v488, v493 + v491, v492 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v494  = (_BYTE *)(v101 + v493);
      *v494  = v486;
      v494[1]  = v487;
      v495  = type metadata accessor for DriverEvent.AWDL(0LL);
      swift_storeEnumTagMultiPayload(v494, v495, 4LL);
      uint64_t v180 = v494;
      uint64_t v181 = v489;
      goto LABEL_149;
    case 0xC3uLL:
      v496  = sub_100002274(&qword_100405E00);
      uint64_t v64 = type metadata accessor for DriverEvent(0LL);
      v497  = *(void *)(v64 - 8);
      v498  = *(void *)(v497 + 72);
      v499  = *(unsigned __int8 *)(v497 + 80);
      v500  = (v499 + 32) & ~v499;
      uint64_t v69 = swift_allocObject(v496, v500 + v498, v499 | 7);
      *(_OWORD *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v70 = v69 + v500;
      uint64_t v71 = type metadata accessor for DriverEvent.AWDL(0LL);
      uint64_t v72 = v69 + v500;
      uint64_t v73 = 11LL;
      goto LABEL_166;
    case 0xC5uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000519A0(v42, v41);
      if ((v988[1].i8[12] & 1) != 0) {
        goto LABEL_178;
      }
      v501  = v988[0].i8[8];
      v502  = v988[0].i8[4];
      v503  = (unint64_t)v988[0].i64[0] >> 40;
      v504  = v988[1].i8[8];
      v505  = v988[0].i8[6];
      v506  = v988[1].i8[0];
      v507  = v988[0].i8[7];
      v689  = (unint64_t)v988[0].i64[1] >> 8;
      v690  = (unint64_t)v988[0].i64[1] >> 16;
      v691  = (unint64_t)v988[0].i64[1] >> 24;
      v692  = v988[0].u32[3];
      v693  = (unint64_t)v988[0].i64[1] >> 40;
      v694  = v988[0].u16[7];
      v695  = v988[0].u8[15];
      v696  = (unint64_t)v988[1].i64[0] >> 8;
      v697  = (unint64_t)v988[1].i64[0] >> 16;
      v698  = (unint64_t)v988[1].i64[0] >> 24;
      v699  = v988[1].u32[1];
      v700  = (unint64_t)v988[1].i64[0] >> 40;
      v701  = v988[1].u16[3];
      v702  = v988[1].u8[7];
      LODWORD(v705)  = (unsigned __int32)v988[1].i32[2] >> 8;
      LODWORD(v704)  = HIWORD(v988[1].i32[2]);
      LODWORD(v703)  = HIBYTE(v988[1].i32[2]);
      v508  = sub_100002274(&qword_100405E00);
      v707  = type metadata accessor for DriverEvent(0LL);
      v509  = *(void *)(v707 - 8);
      v510  = *(void *)(v509 + 72);
      v511  = *(unsigned __int8 *)(v509 + 80);
      v512  = (v511 + 32) & ~v511;
      v513  = swift_allocObject(v508, v512 + v510, v511 | 7);
      v708  = v513;
      *(_OWORD *)(v513 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v706.i64[0]  = v513 + v512;
      v984.i8[0]  = v502;
      v984.i8[1]  = v503;
      v984.i8[2]  = v505;
      v984.i8[3]  = v507;
      v984.i8[4]  = v501;
      v984.i8[5]  = v689;
      v984.i8[6]  = v690;
      v984.i8[7]  = v691;
      v984.i8[8]  = v692;
      v984.i8[9]  = v693;
      v984.i8[10]  = v694;
      v984.i8[11]  = v695;
      v984.i8[12]  = v506;
      v984.i8[13]  = v696;
      v984.i8[14]  = v697;
      v984.i8[15]  = v698;
      v985.i8[0]  = v699;
      v985.i8[1]  = v700;
      v985.i8[2]  = v701;
      v985.i8[3]  = v702;
      v985.i8[4]  = v504;
      v985.i8[5]  = (char)v705;
      v985.i8[6]  = v704;
      v985.i8[7]  = v703;
      if (qword_100404370 != -1) {
        swift_once(&qword_100404370, sub_10018635C);
      }
      v514  = 0LL;
      v515  = _swiftEmptyArrayStorage;
      break;
    case 0xC8uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100051F58(v42, v41);
      if ((v988[2].i8[8] & 1) != 0) {
        goto LABEL_178;
      }
      v985  = v988[1];
      v986[0].i64[0]  = v988[2].i64[0];
      v984  = (uint64x2_t)v988[0];
      v543  = sub_1000A99DC((uint64_t)&v984);
      if (!v543) {
        goto LABEL_178;
      }
      v545  = v543;
      v546  = v544;
      unint64_t v153 = v41;
      v547  = sub_100002274(&qword_100405E00);
      v548  = type metadata accessor for DriverEvent(0LL);
      v549  = *(void *)(v548 - 8);
      v550  = *(void *)(v549 + 72);
      v551  = *(unsigned __int8 *)(v549 + 80);
      v552  = (v551 + 32) & ~v551;
      uint64_t v101 = swift_allocObject(v547, v552 + v550, v551 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v553  = v101 + v552;
      *(void *)v553  = v545;
      *(_BYTE *)(v553 + 8)  = v546;
      v554  = type metadata accessor for DriverEvent.AWDL(0LL);
      swift_storeEnumTagMultiPayload(v553, v554, 8LL);
      uint64_t v180 = (_BYTE *)v553;
      uint64_t v181 = v548;
LABEL_149:
      uint64_t v182 = 1LL;
LABEL_196:
      swift_storeEnumTagMultiPayload(v180, v181, v182);
      v324  = v42;
      unint64_t v325 = v153;
      goto LABEL_197;
    case 0xD7uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_100052734(v42, v41);
      if ((v555 & 0x1000000000000LL) != 0) {
        goto LABEL_178;
      }
      v556  = v555;
      unint64_t v94 = v41;
      v557  = sub_100002274(&qword_100405E00);
      v395  = type metadata accessor for DriverEvent(0LL);
      v558  = *(void *)(v395 - 8);
      v559  = *(void *)(v558 + 72);
      v560  = *(unsigned __int8 *)(v558 + 80);
      v561  = (v560 + 32) & ~v560;
      uint64_t v101 = swift_allocObject(v557, v561 + v559, v560 | 7);
      *(_OWORD *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v102 = v101 + v561;
      *(void *)uint64_t v102 = v556 & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v102 + 24)  = 0u;
      *(_OWORD *)(v102 + 8)  = 0u;
      *(_BYTE *)(v102 + 40)  = 0;
      v400  = 9;
LABEL_152:
      *(_BYTE *)(v102 + 41)  = v400;
      uint64_t v103 = v395;
      uint64_t v104 = 2LL;
LABEL_153:
      swift_storeEnumTagMultiPayload(v102, v103, v104);
      v324  = v42;
      unint64_t v325 = v94;
      goto LABEL_197;
    case 0xE1uLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_1000520F8(v42, v41);
      if ((v562 & 0x100000000LL) != 0) {
        goto LABEL_178;
      }
      unint64_t v48 = v41;
      else {
        v563  = 0x2010001u >> (8 * v562);
      }
      v564  = sub_100002274(&qword_100405E00);
      v346  = type metadata accessor for DriverEvent(0LL);
      v565  = *(void *)(v346 - 8);
      v566  = *(void *)(v565 + 72);
      v567  = *(unsigned __int8 *)(v565 + 80);
      v568  = (v567 + 32) & ~v567;
      uint64_t v50 = swift_allocObject(v564, v568 + v566, v567 | 7);
      *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v351 = (void *)(v50 + v568);
      v988[0].i8[0]  = v563;
      sub_1000580CC((uint64_t)v988);
      uint64_t v352 = v988;
LABEL_159:
      sub_100058090(v352, v351);
      uint64_t v389 = (uint64_t)v351;
LABEL_160:
      uint64_t v390 = v346;
      uint64_t v391 = 0LL;
LABEL_161:
      swift_storeEnumTagMultiPayload(v389, v390, v391);
      sub_1000208D8(v42, v48);
      return (void *)v50;
    case 0xEAuLL:
      v705  = v19;
      v706.i64[0]  = v18;
      unint64_t v41 = v709;
      uint64_t v42 = v710;
      sub_100020AFC(v710, v709);
      sub_10005241C(v42, v41);
      if ((v570 & 1) != 0) {
        goto LABEL_178;
      }
      v571  = v569;
      v572  = v42;
      v573  = v41;
      v574  = HIDWORD(v569);
      v575  = sub_100002274(&qword_100405E00);
      v576  = type metadata accessor for DriverEvent(0LL);
      v577  = *(void *)(v576 - 8);
      v578  = *(void *)(v577 + 72);
      v579  = *(unsigned __int8 *)(v577 + 80);
      v580  = (v579 + 32) & ~v579;
      uint64_t v240 = swift_allocObject(v575, v580 + v578, v579 | 7);
      *(_OWORD *)(v240 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      v581  = (void *)(v240 + v580);
      *v581  = v571;
      v582  = enum case for DispatchTimeInterval.milliseconds(_:);
      v583  = type metadata accessor for DispatchTimeInterval(0LL);
      v584  = *(void (**)(void))(*(void *)(v583 - 8) + 104LL);
      ((void (*)(void *, uint64_t, uint64_t))v584)(v581, v582, v583);
      *(void *)((char *)v581 + *(int *)(type metadata accessor for AWDLIdleActivity(0LL) + 20))  = v574;
      v584();
      v585  = type metadata accessor for DriverEvent.AWDL(0LL);
      swift_storeEnumTagMultiPayload(v581, v585, 9LL);
      swift_storeEnumTagMultiPayload(v581, v576, 1LL);
      v289  = v572;
      v290  = v573;
      goto LABEL_164;
    case 0xEBuLL:
      v586  = sub_100002274(&qword_100405E00);
      uint64_t v64 = type metadata accessor for DriverEvent(0LL);
      v587  = *(void *)(v64 - 8);
      v588  = *(void *)(v587 + 72);
      v589  = *(unsigned __int8 *)(v587 + 80);
      v590  = (v589 + 32) & ~v589;
      uint64_t v69 = swift_allocObject(v586, v590 + v588, v589 | 7);
      *(_OWORD *)(v69 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100339900;
      uint64_t v70 = v69 + v590;
      uint64_t v71 = type metadata accessor for DriverEvent.AWDL(0LL);
      uint64_t v72 = v69 + v590;
      uint64_t v73 = 13LL;
LABEL_166:
      swift_storeEnumTagMultiPayload(v72, v71, v73);
      swift_storeEnumTagMultiPayload(v70, v64, 1LL);
      return (void *)v69;
    default:
      return result;
  }

  do
  {
    v517  = v984.u32[v514];
    v518  = off_10040A198;
    if (*((void *)off_10040A198 + 2))
    {
      v519  = static Hasher._hash(seed:bytes:count:)(*((void *)off_10040A198 + 5), v984.u32[v514], 4LL);
      v520  = -1LL << v518[32];
      v521  = v519 & ~v520;
      if (((*(void *)&v518[((v521 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v521) & 1) != 0)
      {
        v522  = *((void *)v518 + 6);
        if (*(_DWORD *)(v522 + 4 * v521) == (_DWORD)v517)
        {
LABEL_123:
          v524  = 0;
          v525  = 3;
LABEL_142:
          v988[0].i32[0]  = v517;
          v988[0].i8[4]  = v524;
          v988[0].i8[5]  = v525;
          sub_100185C58();
          v538  = v988[0].i32[0];
          v539  = v988[0].i8[4];
          v540  = v988[0].i8[5];
          if ((swift_isUniquelyReferenced_nonNull_native(v515) & 1) == 0) {
            v515  = sub_1000A65E8(0LL, v515[2] + 1LL, 1, v515);
          }
          v542  = v515[2];
          v541  = v515[3];
          if (v542 >= v541 >> 1) {
            v515  = sub_1000A65E8((void *)(v541 > 1), v542 + 1, 1, v515);
          }
          v515[2]  = v542 + 1;
          v516  = &v515[v542];
          *((_DWORD *)v516 + 8)  = v538;
          *((_BYTE *)v516 + 36)  = v539;
          *((_BYTE *)v516 + 37)  = v540;
          goto LABEL_116;
        }

        v523  = ~v520;
        while (1)
        {
          v521  = (v521 + 1) & v523;
          if (((*(void *)&v518[((v521 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v521) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v522 + 4 * v521) == (_DWORD)v517) {
            goto LABEL_123;
          }
        }
      }
    }

    if (qword_100404378 != -1) {
      swift_once(&qword_100404378, sub_100186380);
    }
    v526  = off_10040A1A0;
    if (!*((void *)off_10040A1A0 + 2)) {
      goto LABEL_133;
    }
    v527  = static Hasher._hash(seed:bytes:count:)(*((void *)off_10040A1A0 + 5), v517, 4LL);
    v528  = -1LL << v526[32];
    v529  = v527 & ~v528;
    if (((*(void *)&v526[((v529 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v529) & 1) == 0) {
      goto LABEL_133;
    }
    v530  = *((void *)v526 + 6);
    if (*(_DWORD *)(v530 + 4 * v529) == (_DWORD)v517)
    {
LABEL_132:
      v524  = 1;
      v525  = 4;
      goto LABEL_142;
    }

    v531  = ~v528;
    while (1)
    {
      v529  = (v529 + 1) & v531;
      if (((*(void *)&v526[((v529 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v529) & 1) == 0) {
        break;
      }
      if (*(_DWORD *)(v530 + 4 * v529) == (_DWORD)v517) {
        goto LABEL_132;
      }
    }

LABEL_133:
    if (qword_100404380 != -1) {
      swift_once(&qword_100404380, sub_1001863A4);
    }
    v532  = off_10040A1A8;
    if (*((void *)off_10040A1A8 + 2))
    {
      v533  = static Hasher._hash(seed:bytes:count:)(*((void *)off_10040A1A8 + 5), v517, 4LL);
      v534  = -1LL << v532[32];
      v535  = v533 & ~v534;
      if (((*(void *)&v532[((v535 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v535) & 1) != 0)
      {
        v536  = *((void *)v532 + 6);
        if (*(_DWORD *)(v536 + 4 * v535) == (_DWORD)v517)
        {
LABEL_141:
          v524  = 2;
          v525  = 5;
          goto LABEL_142;
        }

        v537  = ~v534;
        while (1)
        {
          v535  = (v535 + 1) & v537;
          if (((*(void *)&v532[((v535 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v535) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v536 + 4 * v535) == (_DWORD)v517) {
            goto LABEL_141;
          }
        }
      }
    }

      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }

  while (1)
  {
    uint64_t v47 = v14 - 1;
    if (v14 >= 4)
    {
      uint64_t v52 = &v45[16 * v14];
      unsigned int v53 = *((void *)v52 - 8);
      uint64_t v54 = *((void *)v52 - 7);
      uint64_t v58 = __OFSUB__(v54, v53);
      __int16 v55 = v54 - v53;
      if (v58) {
        goto LABEL_121;
      }
      uint64_t v57 = *((void *)v52 - 6);
      uint64_t v56 = *((void *)v52 - 5);
      uint64_t v58 = __OFSUB__(v56, v57);
      uint64_t v50 = v56 - v57;
      uint64_t v51 = v58;
      if (v58) {
        goto LABEL_122;
      }
      uint64_t v59 = v14 - 2;
      uint64_t v60 = &v45[16 * v14 - 32];
      uint64_t v62 = *(void *)v60;
      uint64_t v61 = *((void *)v60 + 1);
      uint64_t v58 = __OFSUB__(v61, v62);
      uint64_t v63 = v61 - v62;
      if (v58) {
        goto LABEL_124;
      }
      uint64_t v58 = __OFADD__(v50, v63);
      uint64_t v64 = v50 + v63;
      if (v58) {
        goto LABEL_127;
      }
      if (v64 >= v55)
      {
        uint64_t v82 = &v45[16 * v47];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        uint64_t v58 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v58) {
          goto LABEL_131;
        }
        __int8 v75 = v50 < v85;
        goto LABEL_83;
      }
    }

    else
    {
      if (v14 != 3)
      {
        unint64_t v76 = *((void *)v13 + 4);
        unint64_t v77 = *((void *)v13 + 5);
        uint64_t v58 = __OFSUB__(v77, v76);
        uint64_t v69 = v77 - v76;
        uint64_t v70 = v58;
        goto LABEL_77;
      }

      uint64_t v49 = *((void *)v13 + 4);
      unint64_t v48 = *((void *)v13 + 5);
      uint64_t v58 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      uint64_t v51 = v58;
    }

    if ((v51 & 1) != 0) {
      goto LABEL_123;
    }
    uint64_t v59 = v14 - 2;
    uint64_t v65 = &v45[16 * v14 - 32];
    uint64_t v67 = *(void *)v65;
    uint64_t v66 = *((void *)v65 + 1);
    uint64_t v68 = __OFSUB__(v66, v67);
    uint64_t v69 = v66 - v67;
    uint64_t v70 = v68;
    if (v68) {
      goto LABEL_126;
    }
    uint64_t v71 = &v45[16 * v47];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    uint64_t v58 = __OFSUB__(v72, v73);
    __int8 v74 = v72 - v73;
    if (v58) {
      goto LABEL_129;
    }
    if (__OFADD__(v69, v74)) {
      goto LABEL_130;
    }
    if (v69 + v74 >= v50)
    {
      __int8 v75 = v50 < v74;
LABEL_83:
      if (v75) {
        uint64_t v47 = v59;
      }
      goto LABEL_85;
    }

      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }

  while (1)
  {
    uint64_t v31 = v12 - 1;
    if (v12 >= 4)
    {
      uint64_t v36 = &v29[16 * v12];
      uint64_t v37 = *((void *)v36 - 8);
      uint64_t v38 = *((void *)v36 - 7);
      uint64_t v42 = __OFSUB__(v38, v37);
      uint64_t v39 = v38 - v37;
      if (v42) {
        goto LABEL_121;
      }
      unint64_t v41 = *((void *)v36 - 6);
      uint64_t v40 = *((void *)v36 - 5);
      uint64_t v42 = __OFSUB__(v40, v41);
      uint64_t v34 = v40 - v41;
      uint64_t v35 = v42;
      if (v42) {
        goto LABEL_122;
      }
      uint64_t v43 = v12 - 2;
      uint64_t v44 = &v29[16 * v12 - 32];
      uint64_t v46 = *(void *)v44;
      uint64_t v45 = *((void *)v44 + 1);
      uint64_t v42 = __OFSUB__(v45, v46);
      uint64_t v47 = v45 - v46;
      if (v42) {
        goto LABEL_124;
      }
      uint64_t v42 = __OFADD__(v34, v47);
      unint64_t v48 = v34 + v47;
      if (v42) {
        goto LABEL_127;
      }
      if (v48 >= v39)
      {
        uint64_t v66 = &v29[16 * v31];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        uint64_t v42 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v42) {
          goto LABEL_131;
        }
        uint64_t v59 = v34 < v69;
        goto LABEL_83;
      }
    }

    else
    {
      if (v12 != 3)
      {
        uint64_t v60 = *((void *)v11 + 4);
        uint64_t v61 = *((void *)v11 + 5);
        uint64_t v42 = __OFSUB__(v61, v60);
        unsigned int v53 = v61 - v60;
        uint64_t v54 = v42;
        goto LABEL_77;
      }

      uint64_t v33 = *((void *)v11 + 4);
      uint64_t v32 = *((void *)v11 + 5);
      uint64_t v42 = __OFSUB__(v32, v33);
      uint64_t v34 = v32 - v33;
      uint64_t v35 = v42;
    }

    if ((v35 & 1) != 0) {
      goto LABEL_123;
    }
    uint64_t v43 = v12 - 2;
    uint64_t v49 = &v29[16 * v12 - 32];
    uint64_t v51 = *(void *)v49;
    uint64_t v50 = *((void *)v49 + 1);
    uint64_t v52 = __OFSUB__(v50, v51);
    unsigned int v53 = v50 - v51;
    uint64_t v54 = v52;
    if (v52) {
      goto LABEL_126;
    }
    __int16 v55 = &v29[16 * v31];
    uint64_t v57 = *(void *)v55;
    uint64_t v56 = *((void *)v55 + 1);
    uint64_t v42 = __OFSUB__(v56, v57);
    uint64_t v58 = v56 - v57;
    if (v42) {
      goto LABEL_129;
    }
    if (__OFADD__(v53, v58)) {
      goto LABEL_130;
    }
    if (v53 + v58 >= v34)
    {
      uint64_t v59 = v34 < v58;
LABEL_83:
      if (v59) {
        uint64_t v31 = v43;
      }
      goto LABEL_85;
    }

LABEL_116:
    ++v514;
  }

  while (v514 != 8);
  v988[0].i64[0]  = (uint64_t)v515;
  sub_1000580D8((uint64_t)v988);
  v614  = v988;
LABEL_174:
  v615  = v706.i64[0];
  sub_100058090(v614, (void *)v706.i64[0]);
  swift_storeEnumTagMultiPayload(v615, v707, 0LL);
  v617  = v709;
  v616  = v710;
LABEL_184:
  sub_1000208D8(v616, v617);
  return (void *)v708;
}

                uint64_t v158 = v187;
                uint64_t v159 = swift_bridgeObjectRetain(v187);
                uint64_t v160 = (os_log_s *)Logger.logObject.getter(v159);
                __int16 v161 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v160, v161))
                {
                  unint64_t v162 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  char v163 = (void **)swift_slowAlloc(32LL, -1LL);
                  uint64_t v210 = v163;
                  *(_DWORD *)unint64_t v162 = v200.n128_u32[0];
                  swift_bridgeObjectRetain(v158);
                  v217  = (void *)sub_10000235C(v201, v158, (uint64_t *)&v210);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v183);
                  swift_bridgeObjectRelease_n(v158, 3LL);
                  _os_log_impl( (void *)&_mh_execute_header,  v160,  v161,  "Unable to find role for interface: %s",  v162,  0xCu);
                  swift_arrayDestroy(v163, 1LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v163, -1LL, -1LL);
                  swift_slowDealloc(v162, -1LL, -1LL);
                }

                else
                {
                  swift_bridgeObjectRelease_n(v158, 2LL);
                }

                uint64_t v2 = v199;
                goto LABEL_5;
              }

              uint64_t v172 = 3;
              uint64_t v65 = 0xE700000000000000LL;
            }
          }

          goto LABEL_59;
        }

        uint64_t v172 = 0;
        uint64_t v64 = 0x7274736172666E69LL;
      }

      uint64_t v65 = 0xEE00657275746375LL;
LABEL_59:
      swift_bridgeObjectRelease(v60);
      uint64_t v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, v182, 0xEA00000000007963LL, 0LL);
      swift_bridgeObjectRelease(v65);
      if ((v66 & 1) != 0) {
        goto LABEL_60;
      }
      uint64_t v68 = type metadata accessor for AppleDevice.InterfaceHandle(0LL);
      swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
      uint64_t v69 = v187;
      swift_bridgeObjectRetain(v187);
      uint64_t v70 = v204;
      uint64_t v71 = sub_10002BB88(v201, v69, v56, v11, v172);
      if (v70)
      {
        swift_bridgeObjectRetain(v69);
        swift_errorRetain(v70);
        swift_bridgeObjectRetain(v69);
        uint64_t v72 = swift_errorRetain(v70);
        uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
        __int8 v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v73, v74))
        {
          v173  = v73;
          __int8 v75 = swift_slowAlloc(32LL, -1LL);
          uint64_t v170 = swift_slowAlloc(8LL, -1LL);
          unint64_t v171 = (void **)swift_slowAlloc(64LL, -1LL);
          uint64_t v210 = v171;
          *(_DWORD *)__int8 v75 = v180.n128_u32[0];
          swift_bridgeObjectRetain(v69);
          v217  = (void *)sub_10000235C(v201, v69, (uint64_t *)&v210);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v183);
          swift_bridgeObjectRelease_n(v69, 3LL);
          *(_WORD *)(v75 + 12)  = 2080;
          __asm { BR              X9 }
        }

        swift_errorRelease(v70);
        swift_bridgeObjectRelease_n(v69, 2LL);

        swift_errorRelease(v70);
        swift_errorRelease(v70);
        uint64_t v2 = v199;
        sub_100036258(v199, v172, v201, v69);
        swift_bridgeObjectRelease(v69);
        uint64_t v204 = 0LL;
        goto LABEL_5;
      }

      unint64_t v76 = v71;
      swift_bridgeObjectRetain_n(v69, 2LL);
      unint64_t v77 = swift_retain();
      unint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
      uint64_t v79 = static os_log_type_t.default.getter();
      uint64_t v80 = os_log_type_enabled(v78, v79);
      uint64_t v81 = v69;
      uint64_t v167 = v76;
      uint64_t v204 = 0LL;
      if (v80)
      {
        uint64_t v82 = swift_slowAlloc(22LL, -1LL);
        uint64_t v210 = (void **)swift_slowAlloc(64LL, -1LL);
        *(_DWORD *)uint64_t v82 = v179.n128_u32[0];
        swift_bridgeObjectRetain(v69);
        v217  = (void *)sub_10000235C(v201, v69, (uint64_t *)&v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v183);
        swift_bridgeObjectRelease_n(v69, 3LL);
        *(_WORD *)(v82 + 12)  = 2080;
        __asm { BR              X9 }
      }

      swift_bridgeObjectRelease_n(v69, 2LL);

      unint64_t v214 = 0LL;
      uint64_t v211 = 0LL;
      uint64_t v212 = 0LL;
      uint64_t v210 = 0LL;
      LODWORD(v213)  = 0;
      uint64_t v83 = swift_slowAlloc(16LL, -1LL);
      uint64_t v84 = v201;
      sub_100053310((uint64_t)&v210, 0x61uLL, v83, v83 + 16, 0, v201, v81);
      if (!Apple80211RawGet( *(void *)(v76 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference),  &v210))
      {
        uint64_t v85 = String.init(cString:)(v83);
        char v86 = (uint64_t *)(v76
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        uint64_t v87 = *(void *)(v76
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        *char v86 = v85;
        v86[1]  = v88;
        swift_bridgeObjectRelease(v87);
      }

      swift_slowDealloc(v83, -1LL, -1LL);
      uint64_t v89 = v203;
      swift_beginAccess(v203, &v210, 33LL, 0LL);
      swift_bridgeObjectRetain(v81);
      swift_retain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v89);
      v217  = (void *)*v89;
      *uint64_t v89 = 0x8000000000000000LL;
      sub_10001F45C(v76, v84, v81, isUniquelyReferenced_nonNull_native);
      unint64_t v91 = *v89;
      *uint64_t v89 = v217;
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v91);
      swift_endAccess(&v210);
      uint64_t v92 = *(void ***)(*v12 + 16LL);
      if (!v92)
      {
        swift_release(v76);
LABEL_90:
        __asm { BR              X9 }
      }

      int v93 = 0LL;
      unint64_t v94 = 0LL;
      LODWORD(v173)  = 1;
      uint64_t v95 = 32LL;
      uint64_t v96 = _swiftEmptyArrayStorage;
      uint64_t v97 = v201;
      v168  = v92;
      do
      {
        uint64_t v98 = *v12 + v95;
        uint64_t v228 = *(_OWORD *)v98;
        uint64_t v99 = *(_OWORD *)(v98 + 16);
        uint64_t v100 = *(_OWORD *)(v98 + 32);
        uint64_t v101 = *(_OWORD *)(v98 + 48);
        __int8 v231 = *(void *)(v98 + 64);
        *(_OWORD *)&v229[16]  = v100;
        uint64_t v230 = v101;
        *(_OWORD *)uint64_t v229 = v99;
        if (v228 == __PAIR128__(v81, v97)
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v228, *((void *)&v228 + 1), v97, v81, 0LL) & 1) != 0)
        {
          sub_100058ACC(&v228);
          LODWORD(v173)  = 0;
          int v93 = v94;
LABEL_75:
          if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0) {
            uint64_t v96 = sub_1000A66F4(0LL, v96[2] + 1LL, 1, v96);
          }
          uint64_t v103 = v96[2];
          uint64_t v102 = v96[3];
          if (v103 >= v102 >> 1) {
            uint64_t v96 = sub_1000A66F4((void *)(v102 > 1), v103 + 1, 1, v96);
          }
          v96[2]  = v103 + 1;
          v96[v103 + 4]  = v94;
          sub_100058B28((uint64_t)&v228);
LABEL_80:
          uint64_t v97 = v201;
          goto LABEL_81;
        }

        if (!*(void *)&v229[16]) {
          goto LABEL_80;
        }
        if (*(_OWORD *)&v229[8] == __PAIR128__(v81, v201)
          || (v104 = _stringCompareWithSmolCheck(_:_:expecting:)( *(void *)&v229[8],  *(void *)&v229[16],  v201,  v81,  0LL),  uint64_t v97 = v201,  (v104 & 1) != 0))
        {
          uint64_t v170 = *(void *)&v229[24];
          unint64_t v171 = v93;
          uint64_t v105 = v188;
          uint64_t v106 = v189;
          (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v196, v206, v189);
          uint64_t v107 = *(unsigned __int8 *)(v105 + 80);
          uint64_t v108 = (v107 + 88) & ~v107;
          uint64_t v109 = (v181 + v108) & 0xFFFFFFFFFFFFFFF8LL;
          unint64_t v110 = (v109 + 23) & 0xFFFFFFFFFFFFFFF8LL;
          uint64_t v111 = swift_allocObject(&unk_1003DE778, v110 + 8, v107 | 7);
          uint64_t v112 = v230;
          *(_OWORD *)(v111 + 48)  = *(_OWORD *)&v229[16];
          *(_OWORD *)(v111 + 64)  = v112;
          *(void *)(v111 + 80)  = v231;
          uint64_t v113 = *(_OWORD *)v229;
          *(_OWORD *)(v111 + swift_unknownObjectWeakDestroy(v0 + 16) = v228;
          *(_OWORD *)(v111 + 32)  = v113;
          uint64_t v114 = *(void (**)(uint64_t, char *, uint64_t))(v105 + 32);
          uint64_t v92 = v168;
          v114(v111 + v108, v196, v106);
          uint64_t v115 = (unint64_t *)(v111 + v109);
          uint64_t v116 = v187;
          char *v115 = v201;
          v115[1]  = v116;
          *(void *)(v111 + v110)  = v199;
          unint64_t v214 = sub_100058C48;
          unint64_t v215 = v111;
          uint64_t v210 = _NSConcreteStackBlock;
          uint64_t v211 = 1107296256LL;
          uint64_t v212 = sub_1000021F0;
          unint64_t v213 = &unk_1003DE790;
          uint64_t v169 = _Block_copy(&v210);
          sub_100058ACC(&v228);
          swift_bridgeObjectRetain(v187);
          sub_100058ACC(&v228);
          uint64_t v117 = swift_retain();
          uint64_t v118 = v190;
          static DispatchQoS.unspecified.getter(v117);
          v217  = _swiftEmptyArrayStorage;
          uint64_t v119 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v120 = sub_100002274((uint64_t *)&unk_1004052A0);
          uint64_t v121 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
          uint64_t v122 = v193;
          uint64_t v123 = v195;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v217, v120, v121, v195, v119);
          uint64_t v124 = v169;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v118, v122, v169);
          _Block_release(v124);
          uint64_t v125 = v122;
          int v93 = v171;
          uint64_t v126 = v123;
          uint64_t v81 = v187;
          (*(void (**)(char *, uint64_t))(v194 + 8))(v125, v126);
          unint64_t v127 = v118;
          unsigned int v12 = v209;
          (*(void (**)(char *, uint64_t))(v191 + 8))(v127, v192);
          swift_release(v215);
          goto LABEL_75;
        }

void sub_1000311EC(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue;
  if (a1)
  {
    id v11 = *(id *)(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    id v12 = a1;
  }

  else
  {
    id v11 = objc_retain(*(id *)(v3
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue));
    id v12 = v11;
  }

  *(void *)(v3 + v10)  = v12;
  id v13 = a1;

  uint64_t v14 = *(void **)(v3 + v10);
  *uint64_t v9 = v14;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v14 & 1) != 0)
  {
    v18[3]  = a2;
    uint64_t v16 = v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer;
    if ((*(_BYTE *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer
                   + 16) & 1) == 0)
    {
      if (*(void *)v16) {
        swift_slowDealloc(*(void *)v16, -1LL, -1LL);
      }
    }

    uint64_t v17 = swift_slowAlloc(2048LL, -1LL);
    *(void *)uint64_t v16 = v17;
    *(void *)(v16 + 8)  = v17 + 2048;
    *(_BYTE *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100031788LL);
}

uint64_t sub_100031874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000318F4( a1,  a2,  a3,  a4,  (uint64_t)&unk_1003DE650,  (uint64_t (*)(uint64_t, uint64_t, void *))&Apple80211RawEventMonitoringInit);
}

uint64_t sub_100031888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  v8(a2, a3, a4);
  return swift_release(v7);
}

uint64_t sub_1000318E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000318F4( a1,  a2,  a3,  a4,  (uint64_t)&unk_1003DE678,  (uint64_t (*)(uint64_t, uint64_t, void *))&Apple80211RawP2PEventMonitoringInit);
}

uint64_t sub_1000318F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    v13[4]  = a3;
    uint64_t v14 = a4;
    v13[0]  = _NSConcreteStackBlock;
    v13[1]  = 1107296256LL;
    v13[2]  = sub_100031888;
    void v13[3] = a5;
    uint64_t v9 = _Block_copy(v13);
    uint64_t v10 = v14;
    swift_retain();
    swift_release(v10);
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  uint64_t v11 = a6(a1, a2, v9);
  _Block_release(v9);
  return v11;
}

uint64_t sub_1000319A8( unsigned int a1, _BYTE *a2, unsigned int a3, uint64_t (*a4)(void, uint64_t, unint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3 || !a2) {
    return a4(a1, 0LL, 0xC000000000000000LL);
  }
  if (a6)
  {
    uint64_t v17 = a7 - (void)a6;
    uint64_t v18 = a3;
    if (v17 >= a3)
    {
      memcpy(a6, a2, a3);
      uint64_t v19 = (*(uint64_t (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for Data.Deallocator.none(_:),  v13);
      uint64_t v32 = Data.Deallocator._deallocator.getter(v19);
      uint64_t v21 = v20;
      uint64_t v22 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      swift_retain();
      uint64_t v23 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a6, v18, 0LL, v32, v21, 0LL);
      uint64_t v24 = sub_1001FF400(v23, v18);
      unint64_t v26 = v25;
      swift_release(v21);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      a4(a1, v24, v26);
      return sub_1000208D8(v24, v26);
    }
  }

  else
  {
    uint64_t v18 = a3;
  }

  uint64_t v28 = sub_100211E68(a2, v18);
  unint64_t v30 = v29;
  a4(a1, v28, v29);
  return sub_1000208D8(v28, v30);
}

uint64_t sub_100031B8C(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a1)
  {
    uint64_t v14 = *(void **)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    *uint64_t v13 = v14;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))( v13,  enum case for DispatchPredicate.onQueue(_:),  v9);
    sub_10002254C((uint64_t)a1, a2);
    id v15 = v14;
    LOBYTE(v14)  = _dispatchPreconditionTest(_:)(v13);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    if ((v14 & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x100031F34LL);
    }

    uint64_t v16 = swift_allocObject(&unk_1003DDD28, 32LL, 7LL);
    *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v16 + 24)  = a2;
    swift_retain();
    sub_1000311EC(0LL, (uint64_t)sub_100058E34);
    swift_release(v16);
    uint64_t v17 = (void *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v18 = *(void *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v19 = *(void *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                    + 8);
    void *v17 = a1;
    v17[1]  = a2;
    swift_retain();
    sub_100021018(v18, v19);
    *uint64_t v8 = 3;
    swift_storeEnumTagMultiPayload(v8, v6, 4LL);
    a1(v8);
    sub_100021018((uint64_t)a1, a2);
    return sub_10005802C((uint64_t)v8, type metadata accessor for DriverEvent);
  }

  return result;
}

void sub_100031F48()
{
  __asm { BR              X10 }

Swift::Int sub_100031FB0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v1);
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void sub_10003208C()
{
}

void sub_1000320CC(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 16);
  String.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8));
  __asm { BR              X9 }

void sub_10003212C()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v0);
    String.hash(into:)(v2, v1, v0);
    swift_bridgeObjectRelease(v0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

void sub_100032204(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = *((unsigned __int8 *)v1 + 16);
  Hasher.init(_seed:)(v5, a1);
  String.hash(into:)(v5, v2, v3);
  __asm { BR              X9 }

Swift::Int sub_100032278()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v0);
    String.hash(into:)(v3, v1, v0);
    swift_bridgeObjectRelease(v0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

uint64_t sub_10003234C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  v7[2]  = *(_OWORD *)(a1 + 32);
  v7[3]  = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0]  = *(_OWORD *)a1;
  v7[1]  = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  v9[2]  = *(_OWORD *)(a2 + 32);
  v9[3]  = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0]  = *(_OWORD *)a2;
  v9[1]  = v5;
  return sub_100053038((uint64_t *)v7, v9) & 1;
}

id sub_1000323A4()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    id v3 = objc_allocWithZone(&OBJC_CLASS___WiFiSoftError);
    NSString v4 = String._bridgeToObjectiveC()();
    id v2 = [v3 initWithName:v4];

    __int128 v5 = *(void **)(v0 + 64);
    *(void *)(v0 + 64)  = v2;
    id v6 = v2;
    sub_100052E78(v5);
  }

  sub_10005732C(v1);
  return v2;
}

unint64_t AppleDevice.machServiceName.getter()
{
  return 0xD000000000000012LL;
}

uint64_t AppleDevice.keychain.getter()
{
  return swift_retain(*(void *)(v0 + 184));
}

uint64_t AppleDevice.preferencesStorage.getter()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  id v3 = (void *)v0[26];
  swift_retain(v1);
  swift_retain(v2);
  id v4 = v3;
  return v1;
}

IONotificationPortRef AppleDevice.__allocating_init()()
{
  return AppleDevice.init()();
}

IONotificationPortRef AppleDevice.init()()
{
  kern_return_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void *v95;
  void **aBlock;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v1 = v0;
  uint64_t v89 = *(void *)v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v83 = *(void *)(v2 - 8);
  uint64_t v84 = v2;
  __chkstk_darwin(v2);
  uint64_t v82 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v90 = *(void *)(v4 - 8);
  unint64_t v91 = v4;
  __chkstk_darwin(v4);
  unint64_t v78 = v5;
  uint64_t v79 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274(&qword_100405268);
  __chkstk_darwin(v6);
  uint64_t v88 = (uint64_t)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RoutingSocket(0LL);
  char v86 = *(void *)(v8 - 8);
  uint64_t v87 = v8;
  __chkstk_darwin(v8);
  uint64_t v85 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  int v93 = *(void *)(v10 - 8);
  unint64_t v94 = (char *)v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v13);
  id v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = type metadata accessor for Lock();
  uint64_t v18 = swift_allocObject(v92, 24LL, 7LL);
  uint64_t v19 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  _DWORD *v19 = 0;
  *((void *)v1 + 3)  = v18;
  *((void *)v1 + 4)  = &_swiftEmptyDictionarySingleton;
  *((void *)v1 + 5)  = _swiftEmptyArrayStorage;
  *((void *)v1 + 6)  = [objc_allocWithZone(CWFInterface) initWithServiceType:1];
  uint64_t v20 = sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  aBlock  = (void **)_swiftEmptyArrayStorage;
  uint64_t v21 = sub_10000AF70( (unint64_t *)&unk_100410200,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = sub_100002274((uint64_t *)&unk_1004044E0);
  uint64_t v23 = sub_1000572E4(qword_100410210, (uint64_t *)&unk_1004044E0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v22, v23, v13, v21);
  (*(void (**)(char *, void, char *))(v93 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v94);
  unint64_t v94 = v17;
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100362180LL,  v17,  v15,  v12,  0LL);
  *((void *)v1 + 19)  = 0LL;
  *((void *)v1 + 7)  = v24;
  *((void *)v1 + 8)  = 1LL;
  *(_OWORD *)(v1 + 18)  = 0u;
  *(_OWORD *)(v1 + 22)  = 0u;
  *(_OWORD *)(v1 + 26)  = 0u;
  *(_OWORD *)(v1 + 30)  = 0u;
  *((void *)v1 + 17)  = 0LL;
  *((void *)v1 + 20)  = 0LL;
  *((void *)v1 + 21)  = 0LL;
  *((void *)v1 + 22)  = &_swiftEmptyDictionarySingleton;
  IONotificationPortRef result = (IONotificationPortRef)kSecAttrViewHintHome;
  if (kSecAttrViewHintHome)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrViewHintHome);
    uint64_t v28 = v27;
    uint64_t v29 = type metadata accessor for AppleKeychain(0LL);
    uint64_t v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
    *(_DWORD *)(v30 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken)  = -1;
    uint64_t v31 = (void *)(v30 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
    *uint64_t v31 = &_swiftEmptySetSingleton;
    v31[1]  = 0LL;
    *(void *)(v30 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors)  = &_swiftEmptyDictionarySingleton;
    uint64_t v32 = (void *)(v30 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    *uint64_t v32 = 0xD000000000000012LL;
    v32[1]  = 0x8000000100360620LL;
    uint64_t v33 = (uint64_t *)(v30 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
    uint64_t *v33 = v26;
    v33[1]  = v28;
    *((void *)v1 + 23)  = v30;
    if (qword_100404148 != -1) {
      swift_once(&qword_100404148, sub_1000B0ED8);
    }
    uint64_t v34 = (void *)static SCPreferencesRef.p2pPreferences;
    uint64_t v35 = type metadata accessor for InMemoryPreferenceStorage();
    uint64_t v36 = swift_allocObject(v35, 24LL, 7LL);
    *(void *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
    uint64_t v37 = swift_allocObject(v92, 24LL, 7LL);
    id v38 = v34;
    uint64_t v39 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
    *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
    *uint64_t v39 = 0;
    *((void *)v1 + 24)  = v37;
    *((void *)v1 + 25)  = v36;
    *((void *)v1 + 26)  = v38;
    uint64_t v40 = (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
    *(void *)(v40 + 32)  = 0LL;
    *(_OWORD *)uint64_t v40 = 0u;
    *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    unint64_t v41 = (char *)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 0x656369766564LL, 0xE600000000000000LL);
    uint64_t v42 = type metadata accessor for Socket();
    swift_allocObject(v42, 20LL, 7LL);
    uint64_t v43 = Socket.init(domain:type:proto:)(2, 2, 0);
    if (!v43) {
      goto LABEL_7;
    }
    uint64_t v44 = v43;
    uint64_t v45 = v88;
    RoutingSocket.init()(v88);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v45, 1LL, v87) == 1)
    {
      swift_release(v44);
      sub_1000225EC(v45, &qword_100405268);
LABEL_7:
      swift_release(*((void *)v1 + 3));
      swift_bridgeObjectRelease(*((void *)v1 + 4));
      swift_bridgeObjectRelease(*((void *)v1 + 5));

      sub_100052E78(*((id *)v1 + 8));
      sub_1000225EC((uint64_t)(v1 + 18), &qword_100405280);

      swift_release(*((void *)v1 + 15));
      swift_release(*((void *)v1 + 16));

      swift_bridgeObjectRelease(*((void *)v1 + 22));
      swift_release(*((void *)v1 + 23));
      uint64_t v46 = *((void *)v1 + 24);
      uint64_t v47 = *((void *)v1 + 25);

      swift_release(v47);
      swift_release(v46);
      sub_1000225EC(v40, &qword_100405288);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v41, v91);
      swift_deallocPartialClassInstance( v1,  v89,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
      return 0LL;
    }

    uint64_t v48 = v85;
    sub_100022628(v45, v85, type metadata accessor for RoutingSocket);
    *((void *)v1 + 2)  = v44;
    sub_100057FE8( v48,  (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket,  type metadata accessor for RoutingSocket);
    swift_retain();
    IONotificationPortRef result = IONotificationPortCreate(kIOMainPortDefault);
    if (result)
    {
      uint64_t v49 = result;
      *((void *)v1 + 18)  = result;
      if (qword_100404328 != -1) {
        swift_once(&qword_100404328, sub_10017437C);
      }
      IONotificationPortSetDispatchQueue(v49, (dispatch_queue_t)static OS_dispatch_queue.p2p);
      unint64_t v50 = sub_10000D3E8((uint64_t)&off_1003D6CC0);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v50);
      uint64_t v52 = (IONotificationPort *)*((void *)v1 + 18);
      swift_beginAccess(v1 + 38, &aBlock, 33LL, 0LL);
      unsigned int v53 = isa;
      LODWORD(isa)  = IOServiceAddMatchingNotification( v52,  "IOServiceMatched",  v53,  (IOServiceMatchingCallback)sub_100034BF8,  v1,  v1 + 38);
      swift_endAccess(&aBlock);
      if (!(_DWORD)isa)
      {
        swift_beginAccess(v1 + 39, &aBlock, 33LL, 0LL);
        uint64_t v54 = v53;
        __int16 v55 = IOServiceAddMatchingNotification( v52,  "IOServiceTerminate",  v54,  (IOServiceMatchingCallback)sub_1000355B8,  v1,  v1 + 39);
        swift_endAccess(&aBlock);
        if (!v55)
        {
          uint64_t v56 = (void *)*((void *)v1 + 6);
          [v56 setTargetQueue:*((void *)v1 + 7)];
          uint64_t v57 = swift_allocObject(&unk_1003DD670, 24LL, 7LL);
          swift_weakInit(v57 + 16, v1);
          uint64_t v100 = sub_100052EAC;
          uint64_t v101 = v57;
          aBlock  = _NSConcreteStackBlock;
          uint64_t v97 = 1107296256LL;
          uint64_t v98 = sub_100035C34;
          uint64_t v99 = &unk_1003DD688;
          uint64_t v58 = _Block_copy(&aBlock);
          uint64_t v59 = v101;
          uint64_t v60 = v56;
          swift_release(v59);
          [v60 setEventHandler:v58];
          _Block_release(v58);

          uint64_t v61 = (void *)*((void *)v1 + 6);
          [v61 activate];
          int v93 = *((void *)v1 + 7);
          uint64_t v63 = v90;
          uint64_t v62 = v91;
          uint64_t v64 = v79;
          (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))( v79,  (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger,  v91);
          uint64_t v65 = *(unsigned __int8 *)(v63 + 80);
          uint64_t v66 = (v65 + 24) & ~v65;
          uint64_t v67 = swift_allocObject(&unk_1003DD6C0, v66 + v78, v65 | 7);
          *(void *)(v67 + swift_unknownObjectWeakDestroy(v0 + 16) = v61;
          (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v67 + v66, v64, v62);
          uint64_t v100 = sub_100052F40;
          uint64_t v101 = v67;
          aBlock  = _NSConcreteStackBlock;
          uint64_t v97 = 1107296256LL;
          uint64_t v98 = sub_1000021F0;
          uint64_t v99 = &unk_1003DD6D8;
          uint64_t v68 = _Block_copy(&aBlock);
          uint64_t v69 = v61;
          uint64_t v70 = v94;
          static DispatchQoS.unspecified.getter(v69);
          uint64_t v95 = _swiftEmptyArrayStorage;
          uint64_t v71 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v72 = sub_100002274((uint64_t *)&unk_1004052A0);
          uint64_t v73 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
          __int8 v74 = v82;
          __int8 v75 = v72;
          unint64_t v76 = v84;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v75, v73, v84, v71);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v70, v74, v68);
          _Block_release(v68);
          swift_release(v44);

          (*(void (**)(char *, uint64_t))(v83 + 8))(v74, v76);
          (*(void (**)(char *, uint64_t))(v80 + 8))(v70, v81);
          sub_10005802C(v85, type metadata accessor for RoutingSocket);
          swift_release(v101);
          return (IONotificationPortRef)v1;
        }
      }

      sub_10005802C(v48, type metadata accessor for RoutingSocket);
      swift_release(v1);

      swift_release(v44);
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100032F88(io_iterator_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v197 = *v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v194 = *(void *)(v4 - 8);
  v195  = v4;
  __chkstk_darwin(v4);
  uint64_t v193 = (char *)&v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v191 = *(void *)(v6 - 8);
  uint64_t v192 = v6;
  __chkstk_darwin(v6);
  uint64_t v190 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v188 = *(void *)(v8 - 8);
  uint64_t v189 = v8;
  uint64_t v9 = *(void *)(v188 + 64);
  __chkstk_darwin(v8);
  uint64_t v196 = (char *)&v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = *(void *)(v2 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v198 + 16));
  io_iterator_t v207 = a1;
  io_object_t v10 = IOIteratorNext(a1);
  if (v10)
  {
    LODWORD(v11)  = v10;
    uint64_t v206 = v2 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    uint64_t v12 = (void *)(v2 + 40);
    uint64_t v13 = v2 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
    unsigned int v203 = (void *)(v2 + 32);
    swift_beginAccess(v2 + 32, &v222, 0LL, 0LL);
    swift_beginAccess(v2 + 40, &v221, 0LL, 0LL);
    uint64_t v177 = v13;
    __n128 v14 = swift_beginAccess(v13, &v220, 0LL, 0LL);
    uint64_t v204 = 0LL;
    unint64_t v183 = &v218;
    v208  = kCFAllocatorDefault;
    uint64_t v181 = v9 + 7;
    uint64_t v205 = (char *)&type metadata for Swift.AnyObject + 8;
    v14.n128_u64[0]  = 136315138LL;
    __n128 v200 = v14;
    unint64_t v186 = 0x80000001003631D0LL;
    uint64_t v184 = (char *)&type metadata for Any + 8;
    unint64_t v185 = 0x80000001003631F0LL;
    uint64_t v182 = 0x6E6574614C776F6CLL;
    v14.n128_u64[0]  = 136315394LL;
    __n128 v179 = v14;
    v14.n128_u64[0]  = 136315650LL;
    __n128 v180 = v14;
    unint64_t v176 = (unint64_t)"WiFi-Aware Discovery+Data";
    unint64_t v178 = 0x8000000100363230LL;
    unint64_t v174 = (unint64_t)"IO80211InterfaceRole";
    unint64_t v175 = 0x8000000100363210LL;
    uint64_t v199 = v2;
    uint64_t v209 = (void *)(v2 + 40);
    do
    {
      id v15 = (__CFString *)String._bridgeToObjectiveC()();
      CFProperty  = IORegistryEntryCreateCFProperty(v11, v15, v208, 0);

      if (!CFProperty
        || (*(void *)&v219[0]  = CFProperty,
            uint64_t v17 = swift_dynamicCast(&v210, v219, v205, &type metadata for String, 6LL),
            (v17 & 1) == 0))
      {
        uint64_t v37 = (os_log_s *)Logger.logObject.getter(v17);
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          int v39 = v11;
          uint64_t v11 = swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Matched a service but unable to query its interface name",  (uint8_t *)v11,  2u);
          uint64_t v40 = v11;
          LODWORD(v11)  = v39;
          goto LABEL_27;
        }

LABEL_3:
        swift_bridgeObjectRelease_n(v19, 2LL);
        goto LABEL_4;
      }

      sub_10000AF70( &qword_1004052E8,  type metadata accessor for AppleDevice,  (uint64_t)&protocol conformance descriptor for AppleDevice);
      uint64_t v46 = v204;
      static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for UInt32, (uint64_t)&v210);
      uint64_t v204 = v46;
      uint64_t v11 = v202;
      if ((BYTE4(v210) & 1) != 0)
      {
        uint64_t v47 = swift_bridgeObjectRetain(v19);
        uint64_t v37 = (os_log_s *)Logger.logObject.getter(v47);
        os_log_type_t v48 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v48))
        {
          uint64_t v49 = swift_slowAlloc(12LL, -1LL);
          unint64_t v50 = (void **)swift_slowAlloc(32LL, -1LL);
          uint64_t v210 = v50;
          *(_DWORD *)uint64_t v49 = v200.n128_u32[0];
          swift_bridgeObjectRetain(v19);
          *(void *)(v49 + 4)  = sub_10000235C(v201, v19, (uint64_t *)&v210);
          swift_bridgeObjectRelease_n(v19, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v48,  "Ignoring %s because no interface index found",  (uint8_t *)v49,  0xCu);
          uint64_t v51 = v50;
          uint64_t v52 = v184;
          goto LABEL_26;
        }

        goto LABEL_3;
      }

      uint64_t v187 = v19;
      uint64_t v56 = v210;
      uint64_t v57 = (__CFString *)String._bridgeToObjectiveC()();
      CFTypeRef v58 = IORegistryEntryCreateCFProperty(v11, v57, v208, 0);

      if (v58
        && (v216[0]  = v58,
            (swift_dynamicCast( &v217,  v216,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for String,  6LL) & 1) != 0))
      {
        uint64_t v59 = (uint64_t)v217;
        uint64_t v60 = v218;
        if (!v218) {
          goto LABEL_116;
        }
      }

      else
      {
        uint64_t v61 = (__CFString *)String._bridgeToObjectiveC()();
        uint64_t v62 = IORegistryEntryCreateCFProperty(v11, v61, v208, 0);

        if (!v62) {
          goto LABEL_116;
        }
        v217  = v62;
        int v63 = swift_dynamicCast( &v210,  &v217,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for String,  6LL);
        uint64_t v60 = v63 ? v211 : 0LL;
        uint64_t v59 = v63 ? (uint64_t)v210 : 0LL;
        if (!v60) {
          goto LABEL_116;
        }
      }

      if (v59 == 0x7274736172666E49LL && v60 == 0xEE00657275746375LL)
      {
        int v172 = 0;
        uint64_t v64 = 0x7274736172666E69LL;
      }

      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7274736172666E49LL, 0xEE00657275746375LL, v59, v60, 0LL) & 1) == 0)
        {
          if (v59 == 0x6B6E694C726941LL && v60 == 0xE700000000000000LL
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6E694C726941LL, 0xE700000000000000LL, v59, v60, 0LL) & 1) != 0)
          {
            int v172 = 1;
            unint64_t v65 = 0xE400000000000000LL;
            uint64_t v64 = 1818523489LL;
          }

          else
          {
            unint64_t v65 = 0xED0000746E656D65LL;
            uint64_t v64 = 0x67616E614D6E616ELL;
            if (v59 == 0xD000000000000014LL && v60 == v178
              || (_stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000014LL,  v176 | 0x8000000000000000LL,  v59,  v60,  0LL) & 1) != 0 || v59 == 0xD000000000000019LL && v60 == v175 || (_stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000019LL,  v174 | 0x8000000000000000LL,  v59,  v60,  0LL) & 1) != 0)
            {
              int v172 = 2;
            }

            else
            {
              uint64_t v64 = 0x617461446E616ELL;
              if ((v59 != 0x6177412D69466957LL || v60 != 0xEF61746144206572LL)
                && (_stringCompareWithSmolCheck(_:_:expecting:)( 0x6177412D69466957LL,  0xEF61746144206572LL,  v59,  v60,  0LL) & 1) == 0)
              {
                if (v59 == 0x6E6574614C776F4CLL && v60 == 0xEA00000000007963LL
                  || (_stringCompareWithSmolCheck(_:_:expecting:)( 0x6E6574614C776F4CLL,  0xEA00000000007963LL,  v59,  v60,  0LL) & 1) != 0)
                {
                  swift_bridgeObjectRelease(v60);
                  swift_bridgeObjectRelease(0xEA00000000007963LL);
                  int v172 = 4;
LABEL_60:
                  uint64_t v2 = v199;
                  uint64_t v67 = v187;
                  sub_100036258(v199, v172, v201, v187);
                  swift_bridgeObjectRelease(v67);
                  goto LABEL_5;
                }

                if (v59 == 0x504174666F53LL && v60 == 0xE600000000000000LL)
                {
                  swift_bridgeObjectRelease(v187);
                  swift_bridgeObjectRelease(0xE600000000000000LL);
                  uint64_t v2 = v199;
                  LODWORD(v11)  = v202;
                  uint64_t v12 = v209;
                  goto LABEL_5;
                }

                char v157 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x504174666F53LL,  0xE600000000000000LL,  v59,  v60,  0LL);
                swift_bridgeObjectRelease(v60);
                LODWORD(v11)  = v202;
                uint64_t v12 = v209;
                if ((v157 & 1) != 0)
                {
                  swift_bridgeObjectRelease(v187);
                  uint64_t v2 = v199;
                  goto LABEL_5;
                }

  __n128 v14 = sub_1000FB08C((uint64_t)v13);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v13);
  sub_100208D6C(v14, v16);
  IONotificationPortRef result = sub_1000208D8(v14, v16);
  if (!v37)
  {
    uint64_t v18 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v19 = type metadata accessor for BinaryEncoder();
    uint64_t v20 = (uint64_t *)swift_allocObject(v19, 40LL, 7LL);
    *((_OWORD *)v20 + 1)  = xmmword_1003398F0;
    v20[4]  = v18;
    v45[3]  = v19;
    void v45[4] = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
    v45[0]  = v20;
    sub_10005852C(a2, a3, a4);
    swift_retain();
    IEEE80211Frame.Management.ActionFrame.encode(to:)(v45, a1, a2, a3, a4);
    sub_100002AC4(v45);
    sub_100057AA0(a2, a3, a4);
    swift_beginAccess(v20 + 2, &v46, 0LL, 0LL);
    uint64_t v32 = v20[3];
    sub_100020AFC(v20[2], v32);
    swift_release(v20);
    __asm { BR              X9 }
  }

  return result;
}

  __n128 v14 = sub_1000FB08C((uint64_t)v13);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease(v13);
  sub_100208D6C(v14, v16);
  IONotificationPortRef result = sub_1000208D8(v14, v16);
  if (!v37)
  {
    uint64_t v18 = sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v19 = type metadata accessor for BinaryEncoder();
    uint64_t v20 = (uint64_t *)swift_allocObject(v19, 40LL, 7LL);
    *((_OWORD *)v20 + 1)  = xmmword_1003398F0;
    v20[4]  = v18;
    v45[3]  = v19;
    void v45[4] = sub_10000AF70( (unint64_t *)&qword_1004064B0,  (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder,  (uint64_t)&protocol conformance descriptor for BinaryEncoder);
    v45[0]  = v20;
    sub_10005852C(a2, a3, a4);
    swift_retain();
    IEEE80211Frame.Management.ActionFrame.encode(to:)(v45, a1, a2, a3, a4);
    sub_100002AC4(v45);
    sub_100057AA0(a2, a3, a4);
    swift_beginAccess(v20 + 2, &v46, 0LL, 0LL);
    uint64_t v32 = v20[3];
    sub_100020AFC(v20[2], v32);
    swift_release(v20);
    __asm { BR              X9 }
  }

  return result;
}

      ++v9;
      io_object_t v10 = (_OWORD *)((char *)v10 + 1284);
      if (v9 == v6) {
        return swift_bridgeObjectRelease(v31);
      }
    }

    swift_bridgeObjectRetain_n(v11, 2LL);
    id v15 = 32LL;
    uint64_t v16 = v10;
    while (1)
    {
      uint64_t v18 = *(_OWORD *)(v11 + v15 + 16);
      uint64_t v17 = *(_OWORD *)(v11 + v15 + 32);
      uint64_t v19 = *(_OWORD *)(v11 + v15);
      io_object_t v30 = *(_BYTE *)(v11 + v15 + 48);
      v29[1]  = v18;
      v29[2]  = v17;
      v29[0]  = v19;
      uint64_t v20 = v19 & 7;
      sub_1000AAE04(v29);
      if (v20 != 1)
      {
        swift_bridgeObjectRelease(v11);
        char v23 = sub_1000033FC();
        uint64_t v5 = swift_allocError(&type metadata for WiFiError, v23, 0LL, 0LL);
        *(_OWORD *)uint64_t v24 = xmmword_10033A9D0;
        *(_BYTE *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
        swift_willThrow(v5);
        goto LABEL_14;
      }

      sub_1000A32E4((unint64_t)v28);
      if (v5) {
        break;
      }
      uint64_t v21 = v28[3];
      v16[2]  = v28[2];
      v16[3]  = v21;
      v16[4]  = v28[4];
      uint64_t v22 = v28[1];
      *uint64_t v16 = v28[0];
      v16[1]  = v22;
      v16 += 5;
      sub_1000AAE3C(v29);
      v15 += 56LL;
      if (!--v14)
      {
        swift_bridgeObjectRelease_n(v11, 2LL);
        uint64_t v8 = v25;
        uint64_t v7 = v26;
        goto LABEL_3;
      }
    }

    swift_bridgeObjectRelease(v11);
LABEL_14:
    sub_1000AAE3C(v29);
    swift_bridgeObjectRelease(v11);
    IONotificationPortRef result = swift_bridgeObjectRelease(v31);
    *a4  = v5;
  }

  return result;
}

          uint64_t v5 = (uint64_t)v10;
LABEL_4:
          swift_bridgeObjectRelease(v5);
          goto LABEL_5;
        }
      }
    }

      uint64_t v6 = (uint64_t)v11;
LABEL_4:
      swift_bridgeObjectRelease(v6);
      goto LABEL_5;
    }

    a6();
    goto LABEL_4;
  }

  unint64_t v50 = a6;
  uint64_t v13 = (void *)*a4;
  uint64_t v7 = swift_allocObject(&unk_1003F3588, 32LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v7 + 24)  = a5;
  __n128 v14 = (void *)((char *)a4 + qword_100410A10);
  swift_beginAccess((char *)a4 + qword_100410A10, v57, 33LL, 0LL);
  uint64_t v9 = (void *)swift_allocObject(&unk_1003F35B0, 72LL, 7LL);
  id v15 = v13[10];
  v9[2]  = v15;
  uint64_t v16 = v13[11];
  v9[3]  = v16;
  uint64_t v17 = v13[12];
  v9[4]  = v17;
  uint64_t v18 = v13[13];
  v9[5]  = v18;
  uint64_t v19 = v13[14];
  v9[6]  = v19;
  v9[7]  = sub_100246D04;
  v9[8]  = v7;
  uint64_t v20 = a5;
  swift_retain();
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v14);
  uint64_t v56 = (void *)*v14;
  uint64_t v21 = v56;
  void *v14 = 0x8000000000000000LL;
  os_log_type_t v48 = v20;
  uint64_t v47 = sub_1003277F4((uint64_t)v20);
  uint64_t v22 = v21[2];
  uint64_t v45 = v23;
  uint64_t v24 = (v23 & 1) == 0;
  int v25 = v22 + v24;
  if (__OFADD__(v22, v24))
  {
    __break(1u);
  }

  else
  {
    uint64_t v51 = v15;
    uint64_t v52 = v16;
    uint64_t v53 = v17;
    os_log_type_t v54 = v18;
    int v26 = type metadata accessor for XPCSession(255LL);
    BOOL v55 = v19;
    uint64_t v27 = _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa(255LL, (uint64_t)&v51);
    uint64_t v28 = sub_10000AF70( &qword_10040CD98,  type metadata accessor for XPCSession,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v44 = v26;
    type metadata accessor for _NativeDictionary(0LL, v26, v27, v28);
    uint64_t v29 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v25);
    io_object_t v30 = v56;
    uint64_t v31 = v47;
    if (!v29) {
      goto LABEL_9;
    }
    uint64_t v32 = sub_1003277F4((uint64_t)v48);
    if ((v45 & 1) == (v33 & 1))
    {
      uint64_t v31 = v32;
LABEL_9:
      uint64_t v34 = *v14;
      void *v14 = v30;
      swift_bridgeObjectRelease(v34);
      uint64_t v35 = *v14;
      uint64_t v36 = *v14;
      if ((v45 & 1) != 0)
      {
        swift_bridgeObjectRetain(v36);
      }

      else
      {
        uint64_t v37 = swift_bridgeObjectRetain(v36);
        uint64_t v51 = ((uint64_t (*)(uint64_t))v9[7])(v37);
        uint64_t v52 = v38;
        LOBYTE(v53)  = v39 & 1;
        os_log_type_t v54 = v40;
        uint64_t v56 = v48;
        unint64_t v41 = v48;
        _NativeDictionary._insert(at:key:value:)(v31, &v56, &v51, v35, v44, v27, v28);
      }

      uint64_t v42 = *(void *)(v35 + 56);
      uint64_t v43 = swift_bridgeObjectRelease(v35);
      a2(v42 + 32 * v31, v43);
      swift_endAccess(v57);

      uint64_t v8 = sub_100246D5C;
      uint64_t v6 = sub_100246D04;
      a6  = v50;
      if (!v50) {
        goto LABEL_4;
      }
      goto LABEL_3;
    }
  }

  IONotificationPortRef result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v44);
  __break(1u);
  return result;
}

  uint64_t v12 = swift_bridgeObjectRelease(v6);
  uint64_t v13 = *(void *)(*v3 + 48LL) + 6 * v9;
  LOBYTE(a2)  = *(_BYTE *)v13;
  v12.n128_u32[0]  = *(_DWORD *)(v13 + 1);
  __n128 v14 = (int16x8_t)vmovl_u8((uint8x8_t)v12.n128_u64[0]);
  LOBYTE(v6)  = *(_BYTE *)(v13 + 5);
LABEL_9:
  *(_BYTE *)a1  = a2;
  IONotificationPortRef result = vmovn_s16(v14);
  *(_DWORD *)(a1 + 1)  = result.i32[0];
  *(_BYTE *)(a1 + 5)  = v6;
  return result;
}

  swift_bridgeObjectRelease(v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v12 = *v2;
  v21[0]  = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002B1ACC();
    uint64_t v12 = v21[0];
  }

  uint64_t v13 = (unsigned int *)(*(void *)(v12 + 48) + 6 * v8);
  __n128 v14 = *v13;
  id v15 = *((unsigned __int8 *)v13 + 4);
  uint64_t v16 = *((unsigned __int8 *)v13 + 5);
  sub_1002B2324(v8);
  uint64_t v17 = *v2;
  *uint64_t v2 = v21[0];
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = 0;
  uint64_t v19 = v14 | (v15 << 32) | (v16 << 40);
  return v19 | ((unint64_t)v18 << 48);
}

LABEL_81:
        unint64_t v94 = (void **)((char *)v94 + 1);
        v95 += 72LL;
      }

      while (v92 != v94);
      if ((v173 & 1) != 0)
      {
        swift_release(v167);
        goto LABEL_90;
      }

      uint64_t v128 = *v12 + 72LL * (void)v93;
      __int128 v129 = *(_OWORD *)(v128 + 80);
      uint64_t v130 = *(void *)(v128 + 96);
      __int128 v131 = *(_OWORD *)(v128 + 48);
      __int128 v225 = *(_OWORD *)(v128 + 64);
      __int128 v132 = *(_OWORD *)(v128 + 32);
      uint64_t v227 = v130;
      __int128 v226 = v129;
      __int128 v223 = v132;
      v224  = v131;
      uint64_t v133 = swift_allocObject(&unk_1003DE728, 96LL, 7LL);
      __int128 v134 = v223;
      *(_OWORD *)(v133 + 40)  = v224;
      __int128 v135 = v226;
      *(_OWORD *)(v133 + 56)  = v225;
      *(_OWORD *)(v133 + 72)  = v135;
      *(void *)(v133 + swift_unknownObjectWeakDestroy(v0 + 16) = v167;
      *(void *)(v133 + 88)  = v227;
      *(_OWORD *)(v133 + 24)  = v134;
      unint64_t v214 = sub_100058AA4;
      uint64_t v215 = v133;
      uint64_t v210 = _NSConcreteStackBlock;
      uint64_t v211 = 1107296256LL;
      uint64_t v212 = sub_1000021F0;
      unint64_t v213 = &unk_1003DE740;
      uint64_t v136 = _Block_copy(&v210);
      sub_100058ACC(&v223);
      __int8 v137 = sub_100058ACC(&v223);
      uint64_t v138 = v190;
      static DispatchQoS.unspecified.getter(v137);
      v217  = _swiftEmptyArrayStorage;
      uint64_t v139 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v140 = sub_100002274((uint64_t *)&unk_1004052A0);
      uint64_t v141 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v142 = v193;
      uint64_t v143 = v195;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v217, v140, v141, v195, v139);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v138, v142, v136);
      _Block_release(v136);
      sub_100058B28((uint64_t)&v223);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v142, v143);
      (*(void (**)(char *, uint64_t))(v191 + 8))(v138, v192);
      swift_release(v215);
      uint64_t v144 = v96[2];
      if (!v144) {
        goto LABEL_102;
      }
      swift_bridgeObjectRetain(v96);
      while (2)
      {
        if (v144 > v96[2])
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
        }

        unint64_t v145 = v96[v144 + 3];
        swift_beginAccess(v12, &v210, 33LL, 0LL);
        uint64_t v146 = (void *)*v12;
        if ((swift_isUniquelyReferenced_nonNull_native(*v12) & 1) == 0) {
          uint64_t v146 = sub_10019E9F8(v146);
        }
        unint64_t v147 = v146[2];
        if (v145 >= v147) {
          goto LABEL_122;
        }
        unint64_t v148 = v147 - 1;
        uint64_t v149 = v147 - 1 - v145;
        if (v149 < 0)
        {
          LOBYTE(v164)  = 2;
          _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  (_DWORD)v164,  1046LL,  0);
          __break(1u);
          JUMPOUT(0x100034BC8LL);
        }

        --v144;
        uint64_t v150 = &v146[9 * v145];
        uint64_t v152 = v150[11];
        uint64_t v151 = v150[12];
        uint64_t v153 = v150[8];
        uint64_t v154 = (void *)v150[9];
        uint64_t v155 = v150[5];
        memmove(v150 + 4, v150 + 13, 72 * v149);
        _OWORD v146[2] = v148;
        uint64_t v12 = v209;
        *uint64_t v209 = v146;
        swift_endAccess(&v210);

        swift_bridgeObjectRelease(v155);
        swift_bridgeObjectRelease(v153);
        sub_100021018(v152, v151);
        if (v144) {
          continue;
        }
        break;
      }

      swift_bridgeObjectRelease(v96);
LABEL_102:
      swift_release(v167);
      swift_bridgeObjectRelease(v96);
      uint64_t v2 = v199;
      uint64_t v156 = v187;
      sub_100036258(v199, v172, v201, v187);
      swift_bridgeObjectRelease(v156);
      LODWORD(v11)  = v202;
LABEL_5:
      IOObjectRelease(v11);
      LODWORD(v11)  = IOIteratorNext(v207);
    }

    while ((_DWORD)v11);
  }

  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v198 + 16));
}

  swift_bridgeObjectRelease_n(v79, 2LL);
LABEL_82:

  uint64_t v77 = v143;
LABEL_83:
  swift_slowDealloc(v151, -1LL, -1LL);
  nwi_state_release(v77);
  uint64_t v75 = v160;
LABEL_84:
  uint64_t v72 = v164;
  uint64_t v51 = v153;
LABEL_85:
  swift_bridgeObjectRelease(v170);
  _NETRBClientDestroy(v155);
  sub_10003FAF0(0xD00000000000004ALL, 0x8000000100363030LL);
  swift_slowDealloc(v149, -1LL, -1LL);

  swift_unknownObjectRelease(v154);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v163, v162);
  __int128 v134 = v75;
LABEL_86:
  swift_release(v134);
}

    if ((v63 & 1) != 0) {
      goto LABEL_130;
    }
    uint64_t v71 = &v38[16 * v40];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    uint64_t v51 = __OFSUB__(v72, v73);
    os_log_type_t v74 = v72 - v73;
    if (v51) {
      goto LABEL_133;
    }
    if (v74 < v62) {
      goto LABEL_15;
    }
LABEL_89:
    os_log_type_t v79 = v40 - 1;
    if (v40 - 1 >= v14)
    {
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }

    if (!v12) {
      goto LABEL_149;
    }
    BOOL v80 = v13;
    uint64_t v81 = &v38[16 * v79];
    uint64_t v82 = *(void *)v81;
    uint64_t v83 = &v38[16 * v40];
    uint64_t v84 = *((void *)v83 + 1);
    sub_1000820E4((char *)(v12 + 8LL * *(void *)v81), (char *)(v12 + 8LL * *(void *)v83), v12 + 8 * v84, __dst);
    if (v111) {
      break;
    }
    if (v84 < v82) {
      goto LABEL_123;
    }
    if (v40 > *((void *)v80 + 2)) {
      goto LABEL_124;
    }
    *(void *)uint64_t v81 = v82;
    *(void *)&v38[16 * v79 + 8]  = v84;
    uint64_t v85 = *((void *)v80 + 2);
    if (v40 >= v85) {
      goto LABEL_125;
    }
    uint64_t v13 = v80;
    __n128 v14 = v85 - 1;
    memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
    *((void *)v80 + 2)  = v85 - 1;
    uint64_t v12 = v109;
    if (v85 <= 2) {
      goto LABEL_15;
    }
  }

  char v86 = v80;
LABEL_98:
  uint64_t v87 = v86;
LABEL_99:
  swift_bridgeObjectRelease(v87);
  v106[2]  = 0LL;
  return swift_bridgeObjectRelease(v106);
}

    if ((v60 & 1) != 0) {
      goto LABEL_130;
    }
    uint64_t v68 = &v35[16 * v37];
    uint64_t v70 = *(void *)v68;
    uint64_t v69 = *((void *)v68 + 1);
    os_log_type_t v48 = __OFSUB__(v69, v70);
    uint64_t v71 = v69 - v70;
    if (v48) {
      goto LABEL_133;
    }
    if (v71 < v59) {
      goto LABEL_15;
    }
LABEL_89:
    uint64_t v76 = v37 - 1;
    if (v37 - 1 >= v13)
    {
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }

    if (!v11) {
      goto LABEL_149;
    }
    uint64_t v77 = v12;
    unint64_t v78 = &v35[16 * v76];
    os_log_type_t v79 = *(void *)v78;
    BOOL v80 = &v35[16 * v37];
    uint64_t v81 = *((void *)v80 + 1);
    sub_1000820E4((char *)(v11 + 8LL * *(void *)v78), (char *)(v11 + 8LL * *(void *)v80), v11 + 8 * v81, __dst);
    if (v1) {
      break;
    }
    if (v81 < v79) {
      goto LABEL_123;
    }
    if (v37 > *((void *)v77 + 2)) {
      goto LABEL_124;
    }
    *(void *)unint64_t v78 = v79;
    *(void *)&v35[16 * v76 + 8]  = v81;
    uint64_t v82 = *((void *)v77 + 2);
    if (v37 >= v82) {
      goto LABEL_125;
    }
    uint64_t v12 = v77;
    uint64_t v13 = v82 - 1;
    memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
    *((void *)v77 + 2)  = v82 - 1;
    uint64_t v11 = v106;
    if (v82 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v84 = v77;
LABEL_98:
  uint64_t v85 = v84;
LABEL_99:
  swift_bridgeObjectRelease(v85);
  v103[2]  = 0LL;
  return swift_bridgeObjectRelease(v103);
}

        sub_100058090(&v525, &v521);
        uint64_t v370 = (uint64_t *)NANBitmap.Channel.operatingClass.getter(&v521);
        uint64_t v371 = sub_10005852C(v370[3], v370[4], v370[5]);
        uint64_t v372 = (os_log_s *)Logger.logObject.getter(v371);
        uint64_t v373 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v372, v373))
        {
          uint64_t v374 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v375 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)uint64_t v374 = 136315138;
          v531  = (void *)v375;
          uint64_t v376 = WiFiAddress.description.getter(v118 & 0xFFFFFFFF000000FFLL | (unsigned __int16)(v518 << 8) | ((unint64_t)BYTE1(v518) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)BYTE2(v518) << 24) | ((unint64_t)BYTE3(v518) << 32) | ((unint64_t)BYTE4(v518) << 40));
          uint64_t v378 = v377;
          v519  = sub_10000235C(v376, v377, (uint64_t *)&v531);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v519, v520);
          swift_bridgeObjectRelease(v378);
          sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          _os_log_impl( (void *)&_mh_execute_header,  v372,  v373,  "Failed to parse the action frame from %s as a vendor specific NAN action frame",  v374,  0xCu);
          swift_arrayDestroy(v375, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v375, -1LL, -1LL);
          swift_slowDealloc(v374, -1LL, -1LL);
        }

        else
        {

          sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
        }

        return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
      }

      uint64_t v130 = *((unsigned __int8 *)v127 + 2);
      __int128 v131 = *((void *)v127 + 1);
      __int128 v132 = *((void *)v127 + 2);
      uint64_t v133 = *v127;
      sub_100058090(&v525, &v521);
      __int128 v134 = (uint64_t *)NANBitmap.Channel.operatingClass.getter(&v521);
      sub_10005852C(v134[3], v134[4], v134[5]);
      __int128 v135 = (unsigned __int16 *)OUI.apple.unsafeMutableAddressor();
      if ((static OUI.== infix(_:_:)(v133 | (v130 << 16), *v135 | (*((unsigned __int8 *)v135 + 2) << 16)) & 1) == 0)
      {
        unint64_t v357 = sub_1000208D8(v131, v132);
        uint64_t v128 = v499;
        os_log_type_t v38 = v500;
        goto LABEL_71;
      }

      v513  = v132;
      sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
      uint64_t v136 = *(uint64_t *)((char *)v517 + *(void *)(*v517 + 280));
      swift_unownedRetainStrong(v136);
      __int8 v137 = v488;
      v506  = v118 & 0xFFFFFFFF000000FFLL | (unsigned __int16)(v518 << 8) | ((unint64_t)BYTE1(v518) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)BYTE2(v518) << 24) | ((unint64_t)BYTE3(v518) << 32) | ((unint64_t)BYTE4(v518) << 40);
      sub_1002EA528(v506, v488);
      swift_release(v136);
      uint64_t v138 = sub_10024D9E0();
      sub_10005802C(v137, type metadata accessor for NANPeer);
      if (!v138) {
        goto LABEL_16;
      }
      swift_unownedRetainStrong(v136);
      uint64_t v139 = v511;
      uint64_t v140 = v512;
      uint64_t v141 = v484;
      (*(void (**)(char *, uint64_t, uint64_t))(v512 + 16))( v484,  v136 + *(void *)(*(void *)v136 + 96LL),  v511);
      swift_release(v136);
      uint64_t v142 = swift_getAssociatedConformanceWitness( v516,  v515,  v139,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      uint64_t v143 = v136;
      uint64_t v144 = v131;
      unint64_t v145 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v142 + 32))(v139, v142);
      (*(void (**)(char *, uint64_t))(v140 + 8))(v141, v139);
      uint64_t v146 = v145 >= 5;
      __int128 v131 = v144;
      uint64_t v136 = v143;
      if (v146)
      {
        type metadata accessor for BinaryDecoder();
        uint64_t v388 = v513;
        sub_100020AFC(v131, v513);
        sub_10000AF70( &qword_10040E550,  type metadata accessor for NANAttribute.CustomDeviceInformation,  (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation);
        uint64_t v389 = (uint64_t)v481;
        uint64_t v156 = 0LL;
        static BinaryDecoder.decode<A>(_:data:)(v514, v131, v388);
        sub_1000208D8(v131, v388);
        sub_1000208D8(v131, v388);
        os_log_type_t v38 = v500;
        sub_100022628(v389, v500, type metadata accessor for NANAttribute.CustomDeviceInformation);
      }

      else
      {
LABEL_16:
        type metadata accessor for BinaryDecoder();
        unint64_t v147 = v513;
        sub_100020AFC(v131, v513);
        sub_10000AF70( &qword_1004064A0,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes,  (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        unint64_t v148 = v489;
        static BinaryDecoder.decode<A>(_:data:)((uint64_t)v494, v131, v147);
        sub_1000208D8(v131, v147);
        LODWORD(v506)  = *v148;
        *unint64_t v148 = 0;
        swift_unownedRetainStrong(v136);
        uint64_t v149 = v136 + *(void *)(*(void *)v136 + 96LL);
        v507  = 0LL;
        uint64_t v151 = v511;
        uint64_t v150 = v512;
        uint64_t v152 = v510;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v512 + 16))(v510, v149, v511);
        swift_release(v136);
        uint64_t v153 = swift_getAssociatedConformanceWitness( v516,  v515,  v151,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
        uint64_t v154 = (*(uint64_t (**)(uint64_t, uint64_t))(v153 + 32))(v151, v153);
        sub_1000208D8(v131, v147);
        uint64_t v155 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
        uint64_t v156 = (char *)v507;
        v155(v152, v151);
        os_log_type_t v38 = v500;
        sub_100022628( (uint64_t)v489,  v500 + *(int *)(v514 + 28),  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        *(_BYTE *)os_log_type_t v38 = v154;
        *(_BYTE *)(v38 + 1)  = 0;
        *(_DWORD *)(v38 + 4)  = v506;
      }

  v317((uint64_t)v338, v339);
  *(void *)&IONotificationPortRef result = swift_bridgeObjectRelease(v546[1]).n128_u64[0];
  return result;
}

uint64_t sub_100034BF8(uint64_t a1, uint64_t a2)
{
  return sub_1000355C4(a1, a2, (void (*)(uint64_t))sub_100032F88);
}

void sub_100034C04(io_iterator_t a1)
{
  uint64_t v73 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v71 = (char *)v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v68 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v67[0]  = v1[3];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v67[0] + 16LL));
  io_object_t v5 = IOIteratorNext(a1);
  if (v5)
  {
    io_registry_entry_t v7 = v5;
    v67[1]  = 0LL;
    uint64_t v8 = v1 + 4;
    unint64_t v78 = v1 + 5;
    uint64_t v9 = (char *)&type metadata for Swift.AnyObject + 8;
    CFAllocatorRef v88 = kCFAllocatorDefault;
    *(void *)&__int128 v6 = 136315138LL;
    __int128 v80 = v6;
    os_log_type_t v74 = (char *)&type metadata for Any + 8;
    io_iterator_t v77 = a1;
    uint64_t v76 = (char *)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    uint64_t v75 = v1 + 4;
    uint64_t v87 = (char *)&type metadata for Swift.AnyObject + 8;
    do
    {
      io_object_t v10 = (__CFString *)String._bridgeToObjectiveC()();
      CFProperty  = IORegistryEntryCreateCFProperty(v7, v10, v88, 0);

      if (CFProperty
        && (v95 = CFProperty, uint64_t v12 = swift_dynamicCast(&aBlock, &v95, v9, &type metadata for String, 6LL), (v12 & 1) != 0))
      {
        __n128 v14 = aBlock;
        unint64_t v13 = v90;
        uint64_t v15 = swift_bridgeObjectRetain_n(v90, 2LL);
        uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = swift_slowAlloc(12LL, -1LL);
          uint64_t v19 = (void **)swift_slowAlloc(32LL, -1LL);
          aBlock  = v19;
          *(_DWORD *)uint64_t v18 = v80;
          swift_bridgeObjectRetain(v13);
          *(void *)(v18 + 4)  = sub_10000235C((uint64_t)v14, v13, (uint64_t *)&aBlock);
          swift_bridgeObjectRelease_n(v13, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removed interface %s", (uint8_t *)v18, 0xCu);
          swift_arrayDestroy(v19, 1LL, v74);
          swift_slowDealloc(v19, -1LL, -1LL);
          swift_slowDealloc(v18, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v13, 2LL);
        }

        swift_beginAccess(v8, &aBlock, 33LL, 0LL);
        uint64_t v23 = *v8;
        swift_bridgeObjectRetain(*v8);
        unint64_t v24 = sub_10001C008((uint64_t)v14, v13);
        char v26 = v25;
        swift_bridgeObjectRelease(v23);
        if ((v26 & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
          uint64_t v28 = *v8;
          uint64_t v95 = (void *)*v8;
          *uint64_t v8 = 0x8000000000000000LL;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10013CEE8();
            uint64_t v28 = (uint64_t)v95;
          }

          swift_bridgeObjectRelease(*(void *)(*(void *)(v28 + 48) + 16 * v24 + 8));
          uint64_t v29 = *(void *)(*(void *)(v28 + 56) + 8 * v24);
          sub_10013B280(v24, v28);
          uint64_t v30 = *v8;
          *uint64_t v8 = v28;
          swift_bridgeObjectRelease(v30);
          swift_endAccess(&aBlock);
          uint64_t v31 = (__CFString *)String._bridgeToObjectiveC()();
          uint64_t v32 = IORegistryEntryCreateCFProperty(v7, v31, v88, 0);

          char v86 = v14;
          if (v32)
          {
            uint64_t v95 = v32;
            if ((swift_dynamicCast( &aBlock,  &v95,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for Data,  6LL) & 1) != 0)
            {
              os_log_type_t v33 = aBlock;
              unint64_t v34 = v90;
              sub_100020AFC((uint64_t)aBlock, v90);
              sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
              uint64_t v35 = type metadata accessor for BinaryDecoder();
              uint64_t v36 = (void *)swift_allocObject(v35, 48LL, 7LL);
              v36[5]  = &_swiftEmptyDictionarySingleton;
              v36[2]  = v33;
              v36[3]  = v34;
              __asm { BR              X9 }
            }
          }

          uint64_t v82 = 0LL;
          int v81 = 1;
          int v84 = *(unsigned __int8 *)(v29
                                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role);
          uint64_t v42 = *(void *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                          + 8);
          uint64_t v83 = *(void *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
          uint64_t v79 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue;
          uint64_t v43 = *(void **)(v29
                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
          uint64_t v85 = v29;
          uint64_t v44 = (void *)(v29
                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
          uint64_t v45 = *(void *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
          uint64_t v46 = *(void *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                          + 8);
          uint64_t v47 = (void **)v78;
          swift_beginAccess(v78, &aBlock, 33LL, 0LL);
          os_log_type_t v48 = *v47;
          swift_bridgeObjectRetain(v42);
          id v49 = v43;
          sub_10002254C(v45, v46);
          char v50 = swift_isUniquelyReferenced_nonNull_native(v48);
          *uint64_t v47 = v48;
          if ((v50 & 1) == 0)
          {
            os_log_type_t v48 = sub_1000A6800(0LL, v48[2] + 1LL, 1, v48);
            *unint64_t v78 = v48;
          }

          unint64_t v52 = v48[2];
          unint64_t v51 = v48[3];
          if (v52 >= v51 >> 1)
          {
            os_log_type_t v48 = sub_1000A6800((void *)(v51 > 1), v52 + 1, 1, v48);
            *unint64_t v78 = v48;
          }

          v48[2]  = v52 + 1;
          uint64_t v53 = &v48[9 * v52];
          v53[4]  = v86;
          v53[5]  = v13;
          *((_BYTE *)v53 + 48)  = v84;
          uint64_t v54 = v82;
          v53[7]  = v83;
          v53[8]  = v42;
          v53[9]  = v49;
          *((_WORD *)v53 + 42)  = WORD2(v54);
          *((_DWORD *)v53 + 20)  = v54;
          *((_BYTE *)v53 + 86)  = v81;
          v53[11]  = v45;
          v53[12]  = v46;
          swift_endAccess(&aBlock);
          if (*v44)
          {
            uint64_t v55 = v85;
            uint64_t v56 = *(void **)(v85 + v79);
            int v93 = sub_100057E9C;
            uint64_t v94 = v85;
            aBlock  = _NSConcreteStackBlock;
            unint64_t v90 = 1107296256LL;
            uint64_t v91 = sub_1000021F0;
            uint64_t v92 = &unk_1003DE600;
            uint64_t v57 = _Block_copy(&aBlock);
            id v58 = v56;
            uint64_t v59 = swift_retain();
            uint64_t v60 = v68;
            static DispatchQoS.unspecified.getter(v59);
            uint64_t v95 = _swiftEmptyArrayStorage;
            uint64_t v61 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v62 = sub_100002274((uint64_t *)&unk_1004052A0);
            uint64_t v63 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
            uint64_t v64 = v71;
            uint64_t v65 = v73;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v62, v63, v73, v61);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v60, v64, v57);
            _Block_release(v57);
            swift_release(v55);

            (*(void (**)(char *, uint64_t))(v72 + 8))(v64, v65);
            (*(void (**)(char *, uint64_t))(v69 + 8))(v60, v70);
            uint64_t v66 = v94;
          }

          else
          {
            uint64_t v66 = v85;
          }

          swift_release(v66);
          a1  = v77;
          uint64_t v8 = v75;
        }

        else
        {
          swift_endAccess(&aBlock);
          uint64_t v37 = swift_bridgeObjectRetain(v13);
          os_log_type_t v38 = (os_log_s *)Logger.logObject.getter(v37);
          os_log_type_t v39 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v40 = swift_slowAlloc(12LL, -1LL);
            unint64_t v41 = (void **)swift_slowAlloc(32LL, -1LL);
            aBlock  = v41;
            *(_DWORD *)uint64_t v40 = v80;
            swift_bridgeObjectRetain(v13);
            *(void *)(v40 + 4)  = sub_10000235C((uint64_t)v14, v13, (uint64_t *)&aBlock);
            swift_bridgeObjectRelease_n(v13, 3LL);
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "No handle found for %s", (uint8_t *)v40, 0xCu);
            swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v41, -1LL, -1LL);
            swift_slowDealloc(v40, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v13, 2LL);
          }
        }

        uint64_t v9 = v87;
      }

      else
      {
        uint64_t v20 = (os_log_s *)Logger.logObject.getter(v12);
        os_log_type_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Unable to query interface name from service that was removed",  v22,  2u);
          swift_slowDealloc(v22, -1LL, -1LL);
        }
      }

      IOObjectRelease(v7);
      io_registry_entry_t v7 = IOIteratorNext(a1);
    }

    while (v7);
  }

  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v67[0] + 16LL));
}

uint64_t sub_1000355B8(uint64_t a1, uint64_t a2)
{
  return sub_1000355C4(a1, a2, (void (*)(uint64_t))sub_100034C04);
}

uint64_t sub_1000355C4(uint64_t result, uint64_t a2, void (*a3)(uint64_t))
{
  if (result)
  {
    uint64_t v5 = result;
    swift_retain(result);
    a3(a2);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100035608(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  io_registry_entry_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100404328 != -1) {
    swift_once(&qword_100404328, sub_10017437C);
  }
  uint64_t v18 = static OS_dispatch_queue.p2p;
  uint64_t v12 = swift_allocObject(&unk_1003DE7C8, 32LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v12 + 24)  = a1;
  aBlock[4]  = sub_100058CC8;
  uint64_t v21 = v12;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003DE7E0;
  unint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(a1);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v16 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v21);
}

uint64_t sub_100035828(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_100035884(a2);
    return swift_release(v5);
  }

  return result;
}

void sub_100035884(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_100404328 != -1) {
    swift_once(&qword_100404328, sub_10017437C);
  }
  uint64_t v11 = static OS_dispatch_queue.p2p;
  *uint64_t v10 = static OS_dispatch_queue.p2p;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = (id)v11;
  LOBYTE(v11)  = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    return;
  }

  if ([a1 type] == (id)12)
  {
    id v13 = [a1 info];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(CWFEventAutoJoinStatusKey);
      uint64_t v18 = v17;
      if (*(void *)(v15 + 16) && (uint64_t v19 = sub_10001C008(v16, v17), (v20 & 1) != 0))
      {
        sub_100002AE4(*(void *)(v15 + 56) + 32 * v19, (uint64_t)&v37);
      }

      else
      {
        __int128 v37 = 0u;
        __int128 v38 = 0u;
      }

      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v18);
      if (*((void *)&v38 + 1))
      {
        uint64_t v21 = sub_100058CD0(0LL, (unint64_t *)&unk_100405E90, &OBJC_CLASS___CWFAutoJoinStatus_ptr);
        id v22 = v36;
        id v23 = [v36 interfaceName];
        if (!v23) {
          goto LABEL_22;
        }
        unint64_t v24 = v23;
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        uint64_t v27 = v26;

        uint64_t v28 = *(void *)(v2 + 24);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 16));
        swift_beginAccess(v2 + 32, &v37, 32LL, 0LL);
        uint64_t v29 = *(void *)(v2 + 32);
        if (*(void *)(v29 + 16))
        {
          swift_bridgeObjectRetain(v27);
          uint64_t v30 = sub_10001C008(v25, v27);
          if ((v31 & 1) != 0)
          {
            uint64_t v32 = *(void *)(*(void *)(v29 + 56) + 8 * v30);
            swift_endAccess(&v37);
            swift_retain();
            swift_bridgeObjectRelease_n(v27, 2LL);
            unint64_t v34 = *(void (**)(char *))(v32
                                                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
            uint64_t v33 = *(void *)(v32
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                            + 8);
            sub_10002254C((uint64_t)v34, v33);
            swift_release(v32);
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 16));
            if (v34)
            {
              swift_retain();
              *(void *)uint64_t v6 = [v22 state] == 0;
              *(_OWORD *)(v6 + 8)  = 0u;
              *(_OWORD *)(v6 + 24)  = 0u;
              *((_WORD *)v6 + 20)  = 0;
              swift_storeEnumTagMultiPayload(v6, v4, 2LL);
              v34(v6);

              sub_100021018((uint64_t)v34, v33);
              sub_100021018((uint64_t)v34, v33);
              sub_10005802C((uint64_t)v6, type metadata accessor for DriverEvent);
              return;
            }

            goto LABEL_22;
          }

          swift_endAccess(&v37);
          swift_bridgeObjectRelease(v27);
        }

        else
        {
          swift_endAccess(&v37);
        }

        swift_bridgeObjectRelease(v27);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 16));
LABEL_22:

        return;
      }
    }

    else
    {
      __int128 v37 = 0u;
      __int128 v38 = 0u;
    }

    sub_1000225EC((uint64_t)&v37, &qword_100405280);
  }

void sub_100035C34(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_100035C84(void *a1)
{
  id v13 = 0LL;
  if ([a1 startMonitoringEventType:12 error:&v13])
  {
    id v1 = v13;
  }

  else
  {
    id v12 = v13;
    id v2 = v13;
    uint64_t v3 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v4);
    swift_errorRetain(v3);
    uint64_t v5 = swift_errorRetain(v3);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v9 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain(v3);
      uint64_t v10 = (void *)_swift_stdlib_bridgeErrorToNSError(v3);
      id v13 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      *uint64_t v9 = v10;
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Failed to monitor for autjoin status changed event: %@",  v8,  0xCu);
      uint64_t v11 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v9, 1LL, v11);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_errorRelease(v3);
    }

    else
    {
      swift_errorRelease(v3);

      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }
  }

uint64_t AppleDevice.deinit()
{
  id v1 = *(void **)(v0 + 48);
  [v1 stopMonitoringEventType:12];
  [v1 invalidate];
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));

  sub_100052E78(*(id *)(v0 + 64));
  sub_1000225EC(v0 + 72, &qword_100405280);

  swift_release(*(void *)(v0 + 120));
  swift_release(*(void *)(v0 + 128));

  swift_bridgeObjectRelease(*(void *)(v0 + 176));
  swift_release(*(void *)(v0 + 184));
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);

  swift_release(v3);
  swift_release(v2);
  sub_10005802C( v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket,  type metadata accessor for RoutingSocket);
  sub_1000225EC(v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer, &qword_100405288);
  uint64_t v4 = v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return v0;
}

uint64_t AppleDevice.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void AppleDevice.send(request:data:)(unsigned int a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(os_unfair_lock_s **)(v5 + 16);
  os_unfair_lock_lock(v6);
  uint64_t v7 = *(unsigned int *)(*(void *)(v2 + 16) + 16LL);
  uint64_t v8 = sub_100333A04(a1);
  uint64_t v9 = ioctl(_:_:_:)(v7, v8, a2);
  if ((_DWORD)v9 == -1)
  {
    LODWORD(v9)  = errno.getter(v9, v10);
    goto LABEL_5;
  }

  if ((_DWORD)v9)
  {
LABEL_5:
    uint64_t v12 = v9;
    unint64_t v13 = sub_1000033FC();
    uint64_t v14 = swift_allocError(&type metadata for WiFiError, v13, 0LL, 0LL);
    *(void *)uint64_t v15 = v12;
    *(void *)(v15 + 8)  = 0LL;
    *(_BYTE *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v14);
    uint64_t v11 = *(os_unfair_lock_s **)(v5 + 16);
    goto LABEL_6;
  }

  uint64_t v11 = v6;
LABEL_6:
  os_unfair_lock_unlock(v11);
}

uint64_t sub_100036108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000586C0((uint64_t)v4, (uint64_t)&v5, &qword_100405DD0);
  if (v5)
  {
    *(_DWORD *)a2  = *(unsigned __int16 *)(v5 + 2);
    *(_BYTE *)(a2 + 4)  = 0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void static ApplePlatform.withInterface<A>(_:matchingFamily:_:)(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  if (v5)
  {
    uint64_t v4 = type metadata accessor for Optional(0LL, a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a2, v4);
  }

void sub_100036258(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a1 + 176);
  swift_beginAccess(a1 + 176, v21, 32LL, 0LL);
  uint64_t v9 = *(void *)(a1 + 176);
  if (*(void *)(v9 + 16) && (sub_10001C370(a2), (v11 & 1) != 0))
  {
    uint64_t v12 = *(void *)(v9 + 56) + 24 * v10;
    unint64_t v13 = *(void **)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v15 = *(void *)(v12 + 16);
    swift_endAccess(v21);
    swift_bridgeObjectRetain(v15);
    id v16 = v13;
    sub_1000532B0(v13, v14, v15);
    swift_beginAccess(v8, v21, 33LL, 0LL);
    id v17 = v16;
    swift_bridgeObjectRetain(a4);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    uint64_t v20 = *v8;
    *uint64_t v8 = 0x8000000000000000LL;
    sub_10001F318((uint64_t)v17, a3, a4, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = *v8;
    *uint64_t v8 = v20;
    swift_bridgeObjectRelease(v19);
    swift_endAccess(v21);
    while (OS_dispatch_semaphore.signal()())
      ;
  }

  else
  {
    swift_endAccess(v21);
  }

void sub_10003639C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if ((*(_BYTE *)(a1 + 54) & 1) != 0)
  {
    unint64_t v10 = sub_1002136D8();
    unint64_t v11 = HIDWORD(v10);
    LOBYTE(v12)  = v10 & 0xFC | 2;
    unint64_t v31 = v10 >> 16;
    unint64_t v32 = v10 >> 8;
    unint64_t v30 = v10 >> 24;
    unint64_t v13 = v10 >> 40;
  }

  else
  {
    LODWORD(v11)  = *(unsigned __int16 *)(a1 + 52);
    uint64_t v12 = *(unsigned int *)(a1 + 48);
    unint64_t v14 = v12 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)*(unsigned __int16 *)(a1 + 52) << 32);
    LODWORD(v13)  = v11 >> 8;
    unint64_t v31 = v14 >> 16;
    unint64_t v32 = v14 >> 8;
    unint64_t v30 = v14 >> 24;
  }

  sub_100058ACC((void *)a1);
  sub_100058ACC((void *)a1);
  sub_100058ACC((void *)a1);
  swift_bridgeObjectRetain(a4);
  sub_100058ACC((void *)a1);
  uint64_t v15 = swift_bridgeObjectRetain(a4);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(42LL, -1LL);
    v34[0]  = swift_slowAlloc(128LL, -1LL);
    *(_DWORD *)uint64_t v18 = 136315906;
    uint64_t v20 = *(void *)a1;
    unint64_t v19 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain(v19);
    uint64_t v33 = sub_10000235C(v20, v19, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
    swift_bridgeObjectRelease(v19);
    sub_100058B28(a1);
    sub_100058B28(a1);
    *(_WORD *)(v18 + 12)  = 2080;
    __asm { BR              X10 }
  }

  sub_100058B28(a1);
  sub_100058B28(a1);
  sub_100058B28(a1);
  sub_100058B28(a1);
  swift_bridgeObjectRelease_n(a4, 2LL);
  v21._countAndFlagsBits  = a3;
  v21._object  = a4;
  Swift::String_optional v22 = AppleDevice.findOrCreateInterface(for:on:with:)( (CoreP2P::WiFiInterfaceRole)*(_BYTE *)(a1 + 16),  v21,  (CoreP2P::WiFiAddress *)(((unint64_t)v11 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v30 << 24) | ((unint64_t)v31 << 16) | ((unint64_t)v32 << 8) | v12));
  if (v22.value._object)
  {
    uint64_t v23 = *(void *)(a5 + 24);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 16));
    swift_beginAccess(a5 + 32, v34, 32LL, 0LL);
    uint64_t v24 = *(void *)(a5 + 32);
    if (*(void *)(v24 + 16))
    {
      swift_bridgeObjectRetain(v22.value._object);
      uint64_t v25 = sub_10001C008(v22.value._countAndFlagsBits, (uint64_t)v22.value._object);
      if ((v26 & 1) != 0)
      {
        uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
        swift_endAccess(v34);
        swift_retain();
        swift_bridgeObjectRelease_n(v22.value._object, 2LL);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 16));
        sub_100031B8C(*(void (**)(_BYTE *))(a1 + 56), *(void *)(a1 + 64));
        swift_release(v27);
        return;
      }

      swift_bridgeObjectRelease(v22.value._object);
    }

    swift_endAccess(v34);
    swift_bridgeObjectRelease(v22.value._object);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 16));
    uint64_t v29 = 0x8000000100363250LL;
    uint64_t v28 = 0xD000000000000010LL;
  }

  else
  {
    uint64_t v28 = 0x6E6F697461657263LL;
    uint64_t v29 = 0xEF64656C69616620LL;
  }

  sub_1000368B4(v28, v29, a2, a1, a5);
}

void sub_1000368B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = swift_bridgeObjectRetain(a2);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v25[0]  = swift_slowAlloc(96LL, -1LL);
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v13 = *(void *)a4;
    unint64_t v12 = *(void *)(a4 + 8);
    swift_bridgeObjectRetain(v12);
    uint64_t v24 = sub_10000235C(v13, v12, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
    swift_bridgeObjectRelease(v12);
    sub_100058B28(a4);
    sub_100058B28(a4);
    *(_WORD *)(v11 + 12)  = 2080;
    __asm { BR              X10 }
  }

  sub_100058B28(a4);
  sub_100058B28(a4);
  sub_100058B28(a4);
  sub_100058B28(a4);
  swift_bridgeObjectRelease_n(a2, 2LL);
  unint64_t v14 = *(os_unfair_lock_s **)(*(void *)(a5 + 24) + 16LL);
  os_unfair_lock_lock(v14);
  uint64_t v15 = (void *)(a5 + 40);
  swift_beginAccess(a5 + 40, v25, 33LL, 0LL);
  id v16 = *(void **)(a5 + 40);
  sub_100058ACC((void *)a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *(void *)(a5 + 40)  = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v16 = sub_1000A6800(0LL, v16[2] + 1LL, 1, v16);
    *uint64_t v15 = v16;
  }

  unint64_t v19 = v16[2];
  unint64_t v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    id v16 = sub_1000A6800((void *)(v18 > 1), v19 + 1, 1, v16);
    *uint64_t v15 = v16;
  }

  v16[2]  = v19 + 1;
  uint64_t v20 = &v16[9 * v19];
  *((_OWORD *)v20 + 2)  = *(_OWORD *)a4;
  __int128 v21 = *(_OWORD *)(a4 + 16);
  __int128 v22 = *(_OWORD *)(a4 + 32);
  __int128 v23 = *(_OWORD *)(a4 + 48);
  v20[12]  = *(void *)(a4 + 64);
  *((_OWORD *)v20 + 4)  = v22;
  *((_OWORD *)v20 + 5)  = v23;
  *((_OWORD *)v20 + 3)  = v21;
  swift_endAccess(v25);
  os_unfair_lock_unlock(v14);
}

Swift::String_optional __swiftcall AppleDevice.findOrCreateInterface(for:on:with:)( CoreP2P::WiFiInterfaceRole a1, Swift::String on, CoreP2P::WiFiAddress *with)
{
  v48[1]  = with;
  Swift::String v62 = on;
  uint64_t v4 = a1;
  uint64_t v58 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v55 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = type metadata accessor for DispatchTime(0LL);
  uint64_t v54 = *(void *)(v59 - 8);
  uint64_t v6 = __chkstk_darwin(v59);
  uint64_t v53 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v57 = (char *)v48 - v8;
  uint64_t v51 = *(void *)(v3 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v51 + 16));
  uint64_t v49 = v3 + 32;
  swift_beginAccess(v3 + 32, v65, 0LL, 0LL);
  uint64_t v52 = v3;
  uint64_t v9 = *(void *)(v3 + 32);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v60 = (void *)(v9 + 64);
  uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v61 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain_n(v9, 2LL);
  uint64_t v50 = v4;
  if (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    goto LABEL_22;
  }

  if (v61 > 1)
  {
    unint64_t v15 = v60[1];
    uint64_t v16 = 1LL;
    if (v15) {
      goto LABEL_21;
    }
    uint64_t v16 = 2LL;
    if (v61 <= 2) {
      goto LABEL_23;
    }
    unint64_t v15 = v60[2];
    if (v15) {
      goto LABEL_21;
    }
    uint64_t v16 = 3LL;
    if (v61 <= 3) {
      goto LABEL_23;
    }
    unint64_t v15 = v60[3];
    if (v15) {
      goto LABEL_21;
    }
    uint64_t v16 = 4LL;
    if (v61 <= 4) {
      goto LABEL_23;
    }
    unint64_t v15 = v60[4];
    if (v15) {
      goto LABEL_21;
    }
    uint64_t v16 = 5LL;
    if (v61 <= 5) {
      goto LABEL_23;
    }
    unint64_t v15 = v60[5];
    if (v15)
    {
LABEL_21:
      unint64_t v14 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_22:
      __asm { BR              X9 }
    }

    uint64_t v17 = 6LL;
    if (v61 > 6)
    {
      unint64_t v15 = v60[6];
      if (v15)
      {
        uint64_t v16 = 6LL;
        goto LABEL_21;
      }

      while (1)
      {
        uint64_t v16 = v17 + 1;
        if (__OFADD__(v17, 1LL))
        {
          __break(1u);
          JUMPOUT(0x1000389ACLL);
        }

        if (v16 >= v61) {
          break;
        }
        unint64_t v15 = v60[v16];
        ++v17;
        if (v15) {
          goto LABEL_21;
        }
      }
    }
  }

LABEL_23:
  swift_release(v9);
  swift_bridgeObjectRelease(v9);
  char v18 = v50;
  uint64_t v19 = v51;
  if (v50 == 4)
  {
    uint64_t v20 = v52;
    __int128 v21 = (uint64_t *)(v52 + 176);
    swift_beginAccess(v52 + 176, v63, 32LL, 0LL);
    uint64_t v22 = *(void *)(v20 + 176);
    if (*(void *)(v22 + 16))
    {
      uint64_t v23 = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v24 = v55;
      do
      {
        sub_10001C370(4);
        if ((v26 & 1) == 0) {
          break;
        }
        uint64_t v27 = *(void *)(v22 + 56) + 24 * v25;
        uint64_t v28 = *(void **)v27;
        uint64_t v29 = *(void *)(v27 + 8);
        uint64_t v30 = *(void *)(v27 + 16);
        swift_endAccess(v63);
        swift_bridgeObjectRetain(v30);
        id v31 = v28;
        sub_1000532B0(v28, v29, v30);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 16));
        uint64_t v32 = v19;
        uint64_t v33 = v53;
        static DispatchTime.now()();
        *uint64_t v24 = 30LL;
        uint64_t v34 = v56;
        uint64_t v35 = v58;
        (*(void (**)(void *, uint64_t, uint64_t))(v56 + 104))(v24, v23, v58);
        id v36 = v57;
        + infix(_:_:)(v33, v24);
        (*(void (**)(void *, uint64_t))(v34 + 8))(v24, v35);
        __int128 v37 = *(void (**)(char *, uint64_t))(v54 + 8);
        __int128 v38 = v33;
        uint64_t v19 = v32;
        uint64_t v39 = v59;
        v37(v38, v59);
        OS_dispatch_semaphore.wait(timeout:)(v36);
        v37(v36, v39);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 16));

        swift_beginAccess(v21, v63, 32LL, 0LL);
        uint64_t v22 = *v21;
      }

      while (*(void *)(*v21 + 16));
    }

    swift_endAccess(v63);
    char v18 = v50;
  }

  dispatch_semaphore_t v40 = dispatch_semaphore_create(0LL);
  uint64_t v41 = v52;
  swift_beginAccess(v52 + 176, v63, 33LL, 0LL);
  uint64_t v42 = v40;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v41 + 176));
  uint64_t v64 = *(void *)(v41 + 176);
  *(void *)(v41 + 176)  = 0x8000000000000000LL;
  sub_10001F318((uint64_t)v42, 0LL, 0LL, v18, isUniquelyReferenced_nonNull_native);
  uint64_t v44 = *(void *)(v41 + 176);
  *(void *)(v41 + 176)  = v64;
  swift_bridgeObjectRelease(v44);
  swift_endAccess(v63);
  swift_beginAccess(v49, v63, 32LL, 0LL);
  if (*(void *)(*(void *)(v41 + 32) + 16LL))
  {
    object  = v62._object;
    swift_bridgeObjectRetain(v62._object);
    sub_10001C008(v62._countAndFlagsBits, (uint64_t)object);
    if ((v46 & 1) != 0) {
      swift_retain();
    }
    swift_bridgeObjectRelease(object);
  }

  swift_endAccess(v63);
  __asm { BR              X10 }

  return result;
}

    uint64_t v8 = (v24 - 1) & v24;
    uint64_t v11 = __clz(__rbit64(v24)) + (v25 << 6);
    uint64_t v47 = v25;
  }

  char v26 = v47 + 5;
  if (v47 + 5 >= v43)
  {
LABEL_38:
    sub_100057324(a1);
    return (Swift::Int)v42;
  }

  uint64_t v24 = *(void *)(v44 + 8 * v26);
  if (v24)
  {
    uint64_t v25 = v47 + 5;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v25 >= v43) {
      goto LABEL_38;
    }
    uint64_t v24 = *(void *)(v44 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_23;
    }
  }

        __break(1u);
        swift_errorRelease(0LL);
        __break(1u);
        swift_errorRelease(0LL);
        __break(1u);
        Swift::String_optional result = swift_errorRelease(0LL);
        __break(1u);
        return result;
      }

      if (v5 <= 0xF)
      {
        uint64_t v7 = 0;
        goto LABEL_18;
      }

      goto LABEL_21;
    }
  }

  return result;
}

  uint64_t v33 = *(void *)(v17 + 40);
  if (v33) {
    LOBYTE(v33)  = *(_BYTE *)(v17 + 28);
  }
  uint64_t v34 = a1 + v7[9];
  if (*(_BYTE *)(v34 + 48) == 1)
  {
    LOBYTE(v35)  = 0;
    LOBYTE(v36)  = 0;
    LOBYTE(v37)  = 0;
    LOBYTE(v38)  = 0;
    LOBYTE(v39)  = 0;
    LOBYTE(v40)  = 0;
    LOBYTE(v41)  = 0;
    uint64_t v42 = 0;
    LODWORD(v43)  = 0;
    uint64_t v44 = a1 + v7[22];
    uint64_t v45 = *(unsigned __int8 *)(v44 + 4);
    char v46 = *(_DWORD *)v44;
    if (v45) {
      char v46 = 0;
    }
    goto LABEL_36;
  }

  uint64_t v35 = *(void *)(v34 + 16);
  if (v35 >= 0x100)
  {
LABEL_43:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    JUMPOUT(0x100094FA4LL);
  }

  id v36 = *(void *)v34;
  os_log_type_t v48 = *(void *)(v34 + 24);
  uint64_t v47 = *(void *)(v34 + 32);
  uint64_t v49 = a1 + v7[22];
  if (*(_BYTE *)(v49 + 4)) {
    char v46 = 0;
  }
  else {
    char v46 = *(_DWORD *)v49;
  }
  if ((v47 & 1) != 0) {
    __asm { BR              X17 }
  }

  uint64_t v42 = HIDWORD(v48);
  if ((v48 & 1) != 0) {
    __asm { BR              X16 }
  }

  uint64_t v43 = HIDWORD(v35);
  uint64_t v41 = v36 >> 40;
  dispatch_semaphore_t v40 = HIDWORD(v36);
  uint64_t v39 = v36 >> 24;
  __int128 v38 = v36 >> 16;
  __int128 v37 = v36 >> 8;
LABEL_36:
  uint64_t v50 = WORD1(v19);
  uint64_t v51 = a1 + v7[5];
  uint64_t v52 = *(_WORD *)(v51 + 4);
  if (!v20) {
    uint64_t v50 = 0;
  }
  v69[0]  = v66;
  v69[1]  = v50;
  v69[2]  = v65;
  v69[3]  = v63;
  v69[4]  = v62;
  v69[5]  = v61;
  v69[6]  = v64;
  uint64_t v70 = v29;
  uint64_t v71 = 0;
  uint64_t v72 = v33;
  uint64_t v73 = 0;
  os_log_type_t v74 = v35;
  uint64_t v75 = v46;
  uint64_t v76 = v42;
  io_iterator_t v77 = v43;
  unint64_t v78 = v36;
  uint64_t v79 = v37;
  __int128 v80 = v38;
  int v81 = v39;
  uint64_t v82 = v40;
  uint64_t v83 = v41;
  int v84 = *(_DWORD *)v51;
  uint64_t v85 = v52;
  type metadata accessor for awdl_peer_advert_add(0LL);
  uint64_t v54 = v53;
  uint64_t v55 = v68;
  uint64_t v56 = *(void *)(v68 + 8);
  uint64_t v57 = *(void *)(v67 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v56,  a2,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v55,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for IO80211Driver,  &associated conformance descriptor for IO80211Driver.DeviceDriver.Device: IO80211Device);
  return sub_1000A0728(229LL, (uint64_t)v69, a2, v54, v56, v57, AssociatedConformanceWitness);
}

    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (v2 < v26 || v2 >= v27)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = __DataStorage._bytes.getter();
  if (!v7)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v8 = v7;
  uint64_t v9 = __DataStorage._offset.getter();
  uint64_t v10 = v2 - v9;
  if (__OFSUB__(v2, v9)) {
    goto LABEL_24;
  }
LABEL_17:
  if (*(unsigned __int8 *)(v8 + v10) != v3) {
LABEL_30:
  }
    JUMPOUT(0x1001137CCLL);
  return v2;
}

        uint64_t v16 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }

      uint64_t v24 = *(_BYTE *)(*(void *)(v9 + 48) + v20);
      uint64_t v25 = *(void *)(v38 + 72);
      char v26 = *(void *)(v9 + 56) + v25 * v20;
      if ((v39 & 1) != 0) {
        sub_100022628(v26, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
      }
      else {
        sub_100057FE8(v26, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
      }
      Hasher.init(_seed:)(v40, *(void *)(v11 + 40));
      Hasher._combine(_:)(0xDD06050403020100LL >> (8 * v24));
      Swift::String_optional result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v11 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        char v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v30 = 0;
        id v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }

        while (v33 == -1);
        char v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(_BYTE *)(*(void *)(v11 + 48) + v18)  = v24;
      Swift::String_optional result = sub_100022628( (uint64_t)v8,  *(void *)(v11 + 56) + v25 * v18,  type metadata accessor for NANGenericServiceProtocol.Attribute);
      ++*(void *)(v11 + 16);
    }
  }

  Swift::String_optional result = swift_release(v9);
LABEL_43:
  void *v3 = v11;
  return result;
}

    uint64_t v16 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_100022594((_OWORD *)(*(void *)(v10 + 56) + 32 * v22), v41);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_100002AE4(*(void *)(v10 + 56) + 32 * v22, (uint64_t)v41);
    }

    Swift::String_optional result = dispatch thunk of Hashable._rawHashValue(seed:)( *(void *)(v12 + 40),  v6,  &protocol witness table for CodingUserInfoKey);
    uint64_t v29 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v30 = result & ~v29;
    id v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          id v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v17 + 8 * v31);
      }

      while (v35 == -1);
      uint64_t v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v27 * v20, v9, v6);
    Swift::String_optional result = (uint64_t)sub_100022594(v41, (_OWORD *)(*(void *)(v12 + 56) + 32 * v20));
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v37;
  uint64_t v24 = v39;
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v36 = 1LL << *(_BYTE *)(v10 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  Swift::String_optional result = swift_release(v10);
  void *v3 = v12;
  return result;
}

    unint64_t v15 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    uint64_t v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = *(void *)(v44 + 72);
    id v31 = *(void *)(v9 + 56) + v30 * v22;
    if ((v45 & 1) != 0)
    {
      sub_1000586C0(v31, (uint64_t)v8, (uint64_t *)&unk_1004050D0);
    }

    else
    {
      sub_1000226B0(v31, (uint64_t)v8, (uint64_t *)&unk_1004050D0);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v46, *(void *)(v11 + 40));
    uint64_t v32 = String.lowercased()();
    String.hash(into:)(v46, v32._countAndFlagsBits, v32._object);
    swift_bridgeObjectRelease(v32._object);
    Swift::String_optional result = Hasher._finalize()();
    uint64_t v33 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v36 = 0;
      __int128 v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0LL;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }

      while (v39 == -1);
      uint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    *uint64_t v20 = v29;
    v20[1]  = v28;
    Swift::String_optional result = sub_1000586C0((uint64_t)v8, *(void *)(v11 + 56) + v30 * v19, (uint64_t *)&unk_1004050D0);
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  uint64_t v3 = v41;
  uint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  dispatch_semaphore_t v40 = 1LL << *(_BYTE *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v40;
  }
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  Swift::String_optional result = swift_release(v9);
  void *v3 = v11;
  return result;
}

        char v18 = (v28 - 1) & v28;
        uint64_t v25 = __clz(__rbit64(v28)) + (v21 << 6);
      }

      uint64_t v30 = *(void *)(v9 + 72);
      id v31 = *(void *)(v22 + 48) + v30 * v25;
      if ((v52 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v31, v8);
        uint64_t v32 = *(void *)(v22 + 56);
        uint64_t v33 = *(void *)(v50 + 72);
        sub_100022628(v32 + v33 * v25, v53, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      }

      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
        uint64_t v34 = *(void *)(v22 + 56);
        uint64_t v33 = *(void *)(v50 + 72);
        sub_100057FE8(v34 + v33 * v25, v53, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      }

      uint64_t v35 = *(void *)(v14 + 40);
      id v36 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      Swift::String_optional result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
      __int128 v37 = -1LL << *(_BYTE *)(v14 + 32);
      __int128 v38 = result & ~v37;
      uint64_t v39 = v38 >> 6;
      if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
      {
        uint64_t v23 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        dispatch_semaphore_t v40 = 0;
        uint64_t v41 = (unint64_t)(63 - v37) >> 6;
        do
        {
          if (++v39 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          uint64_t v42 = v39 == v41;
          if (v39 == v41) {
            uint64_t v39 = 0LL;
          }
          v40 |= v42;
          uint64_t v43 = *(void *)(v19 + 8 * v39);
        }

        while (v43 == -1);
        uint64_t v23 = __clz(__rbit64(~v43)) + (v39 << 6);
      }

      *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(void *)(v14 + 48) + v30 * v23, v11, v8);
      Swift::String_optional result = sub_100022628( v53,  *(void *)(v14 + 56) + v33 * v23,  type metadata accessor for LongTermPairingKeys.PublicIdentity);
      ++*(void *)(v14 + 16);
    }
  }

  uint64_t v44 = v12;
LABEL_44:
  Swift::String_optional result = swift_release(v44);
  void *v3 = v14;
  return result;
}

    __break(1u);
    goto LABEL_24;
  }

  sub_100139230(v15, a2 & 1);
  uint64_t v17 = sub_10001C008(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    uint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v20 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v20);
    uint64_t v50 = v20;
    swift_errorRetain(v20);
    __int128 v21 = sub_100002274((uint64_t *)&unk_10040C5B0);
    if ((swift_dynamicCast(v21, &v50, v21, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease(v6);

      swift_bridgeObjectRelease_n(a1, 2LL);
      return swift_errorRelease(v50);
    }

    goto LABEL_26;
  }

    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100057324(a1);
    return swift_release(a3);
  }

  sub_100139230(v19, a4 & 1);
  __int128 v21 = sub_10001C008(v12, v13);
  if ((v20 & 1) == (v22 & 1))
  {
    uint64_t v16 = v21;
    uint64_t v23 = (void *)*a5;
    if ((v20 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v24 = 8 * v16;
    uint64_t v25 = *(id *)(v23[7] + 8 * v16);
    swift_bridgeObjectRelease(v13);

    char v26 = v23[7];
    *(void *)(v26 + v24)  = v25;
    goto LABEL_13;
  }

    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }

  uint64_t v19 = *(int *)(v9 + 20);
  while (a1[5] != *(_DWORD *)(a3 + v19))
  {
    Swift::String_optional result = read(*(_DWORD *)(*(void *)(a3 + v10) + 16LL), a1, v11);
    if (result < 1) {
      goto LABEL_11;
    }
  }

  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  Swift::String_optional result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  Swift::String_optional result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  Swift::String_optional result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  Swift::String_optional result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  if (a2 <= 0xFFFFFFFFFFFFFFC0LL) {
    return 0LL;
  }
  else {
    return v3 >> -(char)a2;
  }
}

  __break(1u);
LABEL_24:
  if (a2 <= 0xFFFFFFFFFFFFFFC0LL) {
    return 0LL;
  }
  else {
    return v3 >> -(char)a2;
  }
}

        uint64_t v16 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }

      uint64_t v24 = *(char *)(*(void *)(v9 + 48) + v20);
      uint64_t v25 = *(void *)(v38 + 72);
      char v26 = *(void *)(v9 + 56) + v25 * v20;
      if ((v39 & 1) != 0) {
        sub_100022628(v26, (uint64_t)v8, type metadata accessor for NANAttribute);
      }
      else {
        sub_100057FE8(v26, (uint64_t)v8, type metadata accessor for NANAttribute);
      }
      Hasher.init(_seed:)(v40, *(void *)(v11 + 40));
      Hasher._combine(_:)(byte_10035DB9A[v24]);
      Swift::String_optional result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v11 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        char v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v30 = 0;
        id v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }

        while (v33 == -1);
        char v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(_BYTE *)(*(void *)(v11 + 48) + v18)  = v24;
      Swift::String_optional result = sub_100022628((uint64_t)v8, *(void *)(v11 + 56) + v25 * v18, type metadata accessor for NANAttribute);
      ++*(void *)(v11 + 16);
    }
  }

  Swift::String_optional result = swift_release(v9);
LABEL_43:
  void *v3 = v11;
  return result;
}

    char v18 = (v27 - 1) & v27;
    uint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v9 + 72);
    uint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      uint64_t v45 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v24);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      uint64_t v45 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v24);
      swift_retain();
    }

    id v31 = *(void *)(v14 + 40);
    uint64_t v32 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    Swift::String_optional result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v8, v32);
    uint64_t v33 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v19 + 8 * (v34 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v19 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v36 = 0;
      __int128 v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0LL;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v19 + 8 * v35);
      }

      while (v39 == -1);
      uint64_t v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    Swift::String_optional result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))( *(void *)(v14 + 48) + v29 * v22,  v11,  v8);
    *(_OWORD *)(*(void *)(v14 + 56) + 16 * v22)  = v45;
    ++*(void *)(v14 + 16);
  }

  swift_release(v12);
  uint64_t v5 = v41;
  char v26 = v43;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  dispatch_semaphore_t v40 = 1LL << *(_BYTE *)(v12 + 32);
  if (v40 >= 64) {
    bzero(v26, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *char v26 = -1LL << v40;
  }
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  Swift::String_optional result = swift_release(v12);
  void *v5 = v14;
  return result;
}

        unint64_t v15 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }

      uint64_t v23 = *(unsigned __int8 *)(*(void *)(v8 + 48) + v19);
      uint64_t v24 = *(void *)(v38 + 72);
      uint64_t v25 = *(void *)(v8 + 56) + v24 * v19;
      if ((v39 & 1) != 0) {
        sub_100022628(v25, (uint64_t)v7, type metadata accessor for NANPeer.Service);
      }
      else {
        sub_100057FE8(v25, (uint64_t)v7, type metadata accessor for NANPeer.Service);
      }
      Swift::String_optional result = static Hasher._hash(seed:bytes:count:)(*(void *)(v10 + 40), v23, 1LL);
      char v26 = -1LL << *(_BYTE *)(v10 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          id v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v16 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_BYTE *)(*(void *)(v10 + 48) + v17)  = v23;
      Swift::String_optional result = sub_100022628((uint64_t)v7, *(void *)(v10 + 56) + v24 * v17, type metadata accessor for NANPeer.Service);
      ++*(void *)(v10 + 16);
    }
  }

  Swift::String_optional result = swift_release(v8);
LABEL_43:
  void *v3 = v10;
  return result;
}

        uint64_t v50 = (v23 - 1) & v23;
        __int128 v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }

      uint64_t v25 = *(void *)(v10 + 56);
      char v26 = (Swift::UInt8 *)(*(void *)(v10 + 48) - v21 + 8 * v21);
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      uint64_t v29 = v26[2];
      uint64_t v30 = v26[3];
      id v31 = v26[4];
      uint64_t v32 = v26[5];
      uint64_t v33 = v26[6];
      uint64_t v34 = v25 + *(void *)(v48 + 72) * v21;
      uint64_t v51 = *(void *)(v48 + 72);
      uint64_t v52 = v13;
      if ((v49 & 1) != 0) {
        sub_100022628(v34, v53, v54);
      }
      else {
        sub_100057FE8(v34, v53, v54);
      }
      Hasher.init(_seed:)(v55, *(void *)(v12 + 40));
      Hasher._combine(_:)(v27);
      NANClusterChangeEvent.hash(into:)( (int)v55,  (v32 << 32) | (v33 << 40) | (v31 << 24) | (v30 << 16) | (v29 << 8) | v28);
      Swift::String_optional result = Hasher._finalize()();
      uint64_t v35 = -1LL << *(_BYTE *)(v12 + 32);
      id v36 = result & ~v35;
      __int128 v37 = v36 >> 6;
      if (((-1LL << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v38 = 0;
        uint64_t v39 = (unint64_t)(63 - v35) >> 6;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          dispatch_semaphore_t v40 = v37 == v39;
          if (v37 == v39) {
            __int128 v37 = 0LL;
          }
          v38 |= v40;
          uint64_t v41 = *(void *)(v18 + 8 * v37);
        }

        while (v41 == -1);
        uint64_t v19 = __clz(__rbit64(~v41)) + (v37 << 6);
      }

      *(void *)(v18 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      uint64_t v20 = (Swift::UInt8 *)(*(void *)(v12 + 48) - v19 + 8 * v19);
      *uint64_t v20 = v27;
      v20[1]  = v28;
      v20[2]  = v29;
      v20[3]  = v30;
      v20[4]  = v31;
      v20[5]  = v32;
      v20[6]  = v33;
      Swift::String_optional result = sub_100022628(v53, *(void *)(v12 + 56) + v51 * v19, v54);
      ++*(void *)(v12 + 16);
      uint64_t v10 = v47;
      unint64_t v13 = v52;
      uint64_t v17 = v50;
    }
  }

  Swift::String_optional result = swift_release(v10);
LABEL_43:
  *uint64_t v6 = v12;
  return result;
}

    uint64_t v16 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_1000589F8((__int128 *)(*(void *)(v10 + 56) + 40 * v22), (uint64_t)v44);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_10002084C(*(void *)(v10 + 56) + 40 * v22, (uint64_t)v44);
    }

    uint64_t v29 = *(void *)(v12 + 40);
    uint64_t v30 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    Swift::String_optional result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    id v31 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        __int128 v37 = *(void *)(v17 + 8 * v33);
      }

      while (v37 == -1);
      uint64_t v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v27 * v20, v9, v6);
    Swift::String_optional result = sub_1000589F8(v44, *(void *)(v12 + 56) + 40 * v20);
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v40;
  uint64_t v24 = v42;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int128 v38 = 1LL << *(_BYTE *)(v10 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v38;
  }
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  Swift::String_optional result = swift_release(v10);
  void *v3 = v12;
  return result;
}

        uint64_t v51 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }

      char v26 = *(void *)(v11 + 56);
      uint64_t v27 = (unsigned __int8 *)(*(void *)(v11 + 48) + 6 * v22);
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      uint64_t v30 = v27[2];
      id v31 = v27[3];
      uint64_t v32 = v27[4];
      uint64_t v33 = v27[5];
      uint64_t v34 = *(void *)(v49 + 72);
      uint64_t v35 = v26 + v34 * v22;
      uint64_t v52 = v14;
      if ((v50 & 1) != 0) {
        sub_100022628(v35, v53, v6);
      }
      else {
        sub_100057FE8(v35, v53, v6);
      }
      Hasher.init(_seed:)(v54, *(void *)(v13 + 40));
      NANClusterChangeEvent.hash(into:)( (int)v54,  (v32 << 32) | (v33 << 40) | (v31 << 24) | (v30 << 16) | (v29 << 8) | v28);
      Swift::String_optional result = Hasher._finalize()();
      id v36 = -1LL << *(_BYTE *)(v13 + 32);
      __int128 v37 = result & ~v36;
      __int128 v38 = v37 >> 6;
      if (((-1LL << v37) & ~*(void *)(v19 + 8 * (v37 >> 6))) != 0)
      {
        uint64_t v20 = __clz(__rbit64((-1LL << v37) & ~*(void *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0LL;
        uint64_t v6 = v48;
      }

      else
      {
        uint64_t v39 = 0;
        dispatch_semaphore_t v40 = (unint64_t)(63 - v36) >> 6;
        uint64_t v6 = v48;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v41 = v38 == v40;
          if (v38 == v40) {
            __int128 v38 = 0LL;
          }
          v39 |= v41;
          uint64_t v42 = *(void *)(v19 + 8 * v38);
        }

        while (v42 == -1);
        uint64_t v20 = __clz(__rbit64(~v42)) + (v38 << 6);
      }

      *(void *)(v19 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      __int128 v21 = (_BYTE *)(*(void *)(v13 + 48) + 6 * v20);
      *__int128 v21 = v28;
      v21[1]  = v29;
      v21[2]  = v30;
      v21[3]  = v31;
      v21[4]  = v32;
      v21[5]  = v33;
      Swift::String_optional result = sub_100022628(v53, *(void *)(v13 + 56) + v34 * v20, v6);
      ++*(void *)(v13 + 16);
      uint64_t v11 = v47;
      char v18 = v51;
      unint64_t v14 = v52;
    }
  }

  Swift::String_optional result = swift_release(v11);
LABEL_43:
  *uint64_t v7 = v13;
  return result;
}

        os_log_type_t v48 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }

      uint64_t v23 = *(void *)(v8 + 56);
      uint64_t v24 = (unsigned __int8 *)(*(void *)(v8 + 48) + 6 * v19);
      uint64_t v25 = *v24;
      char v26 = v24[1];
      uint64_t v27 = v24[2];
      uint64_t v28 = v24[3];
      uint64_t v29 = v24[4];
      uint64_t v30 = v24[5];
      id v31 = *(void *)(v46 + 72);
      uint64_t v32 = v23 + v31 * v19;
      uint64_t v49 = v11;
      if ((v47 & 1) != 0) {
        sub_100245CDC(v32, (uint64_t)v7);
      }
      else {
        sub_1000226B0(v32, (uint64_t)v7, (uint64_t *)&unk_10040CC50);
      }
      Hasher.init(_seed:)(v50, *(void *)(v10 + 40));
      NANClusterChangeEvent.hash(into:)( (int)v50,  (v29 << 32) | (v30 << 40) | (v28 << 24) | (v27 << 16) | (v26 << 8) | v25);
      Swift::String_optional result = Hasher._finalize()();
      uint64_t v33 = -1LL << *(_BYTE *)(v10 + 32);
      uint64_t v34 = result & ~v33;
      uint64_t v35 = v34 >> 6;
      if (((-1LL << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
        uint64_t v7 = v45;
      }

      else
      {
        id v36 = 0;
        __int128 v37 = (unint64_t)(63 - v33) >> 6;
        uint64_t v7 = v45;
        do
        {
          if (++v35 == v37 && (v36 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          __int128 v38 = v35 == v37;
          if (v35 == v37) {
            uint64_t v35 = 0LL;
          }
          v36 |= v38;
          uint64_t v39 = *(void *)(v16 + 8 * v35);
        }

        while (v39 == -1);
        uint64_t v17 = __clz(__rbit64(~v39)) + (v35 << 6);
      }

      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      char v18 = (_BYTE *)(*(void *)(v10 + 48) + 6 * v17);
      *char v18 = v25;
      v18[1]  = v26;
      v18[2]  = v27;
      v18[3]  = v28;
      void v18[4] = v29;
      v18[5]  = v30;
      Swift::String_optional result = sub_100245CDC((uint64_t)v7, *(void *)(v10 + 56) + v31 * v17);
      ++*(void *)(v10 + 16);
      uint64_t v8 = v44;
      unint64_t v15 = v48;
      uint64_t v11 = v49;
    }
  }

  Swift::String_optional result = swift_release(v8);
LABEL_43:
  void *v3 = v10;
  return result;
}

    uint64_t v16 = (v24 - 1) & v24;
    __int128 v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    char v26 = *(void *)(v7 + 72);
    uint64_t v27 = *(void *)(v10 + 48) + v26 * v21;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v27, v6);
      uint64_t v28 = *(id *)(*(void *)(v10 + 56) + 8 * v21);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v27, v6);
      uint64_t v28 = *(id *)(*(void *)(v10 + 56) + 8 * v21);
    }

    uint64_t v29 = *(void *)(v12 + 40);
    uint64_t v30 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = v31 & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        __int128 v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v26 * v19, v9, v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v19)  = v28;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  uint64_t v23 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v39;
  }
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  swift_release(v10);
  void *v3 = v12;
}

    uint64_t v16 = (v24 - 1) & v24;
    __int128 v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    char v26 = *(void *)(v7 + 72);
    uint64_t v27 = *(void *)(v10 + 48) + v26 * v21;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v27, v6);
      uint64_t v28 = *(void *)(*(void *)(v10 + 56) + 8 * v21);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v27, v6);
      uint64_t v28 = *(void *)(*(void *)(v10 + 56) + 8 * v21);
      swift_bridgeObjectRetain(v28);
    }

    uint64_t v29 = *(void *)(v12 + 40);
    uint64_t v30 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = v31 & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __int128 v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        __int128 v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v26 * v19, v9, v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v19)  = v28;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  uint64_t v23 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v39;
  }
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  swift_release(v10);
  void *v3 = v12;
}

    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    char v18 = sub_100327738(*(_BYTE *)(*(void *)(a1 + 48) + v13));
    if ((v19 & 1) != 0)
    {
      uint64_t v20 = *(void *)(*(void *)(a2 + 56) + 8 * v18);
      swift_bridgeObjectRetain(v17);
      __int128 v21 = swift_bridgeObjectRetain(v20);
      uint64_t v22 = a3(v21, v17);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      if ((v22 & 1) != 0) {
        continue;
      }
    }

    return;
  }

  uint64_t v16 = v14 + 4;
  if (v16 >= v11) {
    return;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      return;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    unint64_t v15 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v11);
    Swift::String_optional result = sub_100327824(*(unsigned int *)(*(void *)(v3 + 48) + 8 * v11) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v3 + 48) + 8 * v11 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v3 + 48) + 8 * v11 + 5) << 40));
  }

  unint64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1LL;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }

    uint64_t v51 = (id)v342;
    sub_1000E77F4((uint64_t)v28, (uint64_t)v15);
    uint64_t v52 = v340;
    sub_1000E77F4((uint64_t)v15, v340);
    uint64_t v53 = (os_log_t)v339;
    sub_100022628((uint64_t)v15, v339, type metadata accessor for DriverEvent);
    uint64_t v54 = v51;
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    uint64_t v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc(22LL, -1LL);
      uint64_t v58 = (void *)swift_slowAlloc(8LL, -1LL);
      v342  = swift_slowAlloc(32LL, -1LL);
      v353[0]  = v342;
      *(_DWORD *)uint64_t v57 = 138412546;
      v341  = v55;
      uint64_t v351 = (uint64_t)v54;
      uint64_t v59 = v30;
      uint64_t v60 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v351, v352);
      *uint64_t v58 = v54;
      int64_t v61 = v58;

      uint64_t v30 = v59;
      *(_WORD *)(v57 + 12)  = 2080;
      Swift::String v62 = v340;
      DriverEvent.description.getter();
      uint64_t v64 = v63;
      uint64_t v351 = sub_10000235C(v65, v63, v353);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v351, v352);
      swift_bridgeObjectRelease(v64);
      sub_10005802C(v339, type metadata accessor for DriverEvent);
      sub_10005802C(v62, type metadata accessor for DriverEvent);
      uint64_t v66 = v341;
      _os_log_impl((void *)&_mh_execute_header, v341, v56, "%@ received an unexpected %s", (uint8_t *)v57, 0x16u);
      uint64_t v67 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v61, 1LL, v67);
      swift_slowDealloc(v61, -1LL, -1LL);
      uint64_t v68 = v342;
      swift_arrayDestroy(v342, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {

      sub_10005802C((uint64_t)v53, type metadata accessor for DriverEvent);
      sub_10005802C(v52, type metadata accessor for DriverEvent);
    }

    return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
  }

  sub_1000E77F4((uint64_t)v21, (uint64_t)v17);
  if (*v17 != 1) {
    goto LABEL_23;
  }
  char v46 = v342;
  uint64_t v47 = (void *)(v342 + qword_10040DAA8);
  if (*(_BYTE *)(v342 + qword_10040DAA8 + 16) == 4 && !v47[1] && *v47 == 2LL)
  {
    sub_100271C88(2LL, 0xD00000000000002ALL, 0x8000000100367D40LL);
  }

  else
  {
    os_log_type_t v48 = ObjectType;
    uint64_t v49 = swift_getWitnessTable(&unk_10035EA58, ObjectType);
    if (sub_1002A2024(v48, v49))
    {
      sub_10027D13C(0LL, 0LL, 4);
      uint64_t v50 = v46 + qword_10040DA68;
      swift_beginAccess(v46 + qword_10040DA68, &v351, 0LL, 0LL);
      sub_1000226B0(v50 + 104, (uint64_t)v353, (uint64_t *)&unk_10040DCB0);
      if (v354)
      {
        if (v354 == 1) {
          sub_1000225EC((uint64_t)v353, (uint64_t *)&unk_10040DCB0);
        }
        else {
          sub_10017B1A0(v353);
        }
      }

      else
      {
        sub_10017B1A0(v353);
        unint64_t v145 = qword_10040DAB8;
        if (*(_BYTE *)(v46 + qword_10040DAB8) == 1)
        {
          sub_10027741C();
          *(_BYTE *)(v46 + v145)  = 0;
        }
      }
    }
  }

  return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
}

    uint64_t v6 = (v13 - 1) & v13;
    uint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (unsigned __int16 *)(*(void *)(a1 + 48) - v10 + 8 * v10);
    sub_100330F0C( *v11 | ((unint64_t)*((unsigned __int8 *)v11 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v11 + 3) << 24),  (uint64_t)v15);
  }

  unint64_t v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }

  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    uint64_t v8 = v14;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_24:
  unint64_t v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v15,  1092LL,  0);
  __break(1u);
}

  __break(1u);
LABEL_24:
  unint64_t v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v15,  1092LL,  0);
  __break(1u);
}

uint64_t sub_100038A64(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100021104(a1, v9);
  uint64_t v11 = type metadata accessor for AppleIO80211Driver(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  swift_retain();
  swift_bridgeObjectRetain(a5);
  AppleIO80211Driver.init(device:role:name:)(a2, a3, a4, a5);
  uint64_t v13 = v12;
  uint64_t v17 = v12;
  unint64_t v14 = *(void (**)(uint64_t *, uint64_t, _UNKNOWN **, uint64_t, _UNKNOWN **, _UNKNOWN **, uint64_t, uint64_t))(v10 + 8);
  uint64_t v15 = sub_10000AF70( (unint64_t *)&unk_100405E80,  type metadata accessor for AppleIO80211Driver,  (uint64_t)&protocol conformance descriptor for AppleIO80211Driver);
  v14( &v17,  v11,  &protocol witness table for AppleIO80211Driver,  v15,  &protocol witness table for AppleIO80211Driver,  &protocol witness table for AppleIO80211Driver,  v9,  v10);
  return swift_release(v13);
}

uint64_t sub_100038B70(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v16 = 0;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  unint64_t v5 = sub_10005347C(a1, a2, &v16);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease(a2);
  swift_release(v2);
  if (v7)
  {
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v8 = swift_bridgeObjectRetain(v7);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v12 = swift_slowAlloc(64LL, -1LL);
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315394;
      swift_bridgeObjectRetain(v7);
      uint64_t v14 = sub_10000235C(v5, v7, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease_n(v7, 3LL);
      *(_WORD *)(v11 + 12)  = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v14 = sub_10000235C(a1, a2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "%s when removing %s from legacy preferences",  (uint8_t *)v11,  0x16u);
      swift_arrayDestroy(v12, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease_n(v7, 2LL);
    }
  }

  return v16;
}

void sub_100038D7C(void *a1, unint64_t a2)
{
  unint64_t v4 = sub_100053718(a1, a2);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease(a2);
  if (v6)
  {
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v7 = swift_bridgeObjectRetain(v6);
    oslog  = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v10 = swift_slowAlloc(64LL, -1LL);
      uint64_t v13 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_bridgeObjectRetain(v6);
      uint64_t v12 = sub_10000235C(v4, v6, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
      swift_bridgeObjectRelease_n(v6, 3LL);
      *(_WORD *)(v9 + 12)  = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v12 = sub_10000235C((uint64_t)a1, a2, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v8,  "%s when configuring DHCP networking for %s",  (uint8_t *)v9,  0x16u);
      swift_arrayDestroy(v10, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease_n(v6, 2LL);
    }
  }

uint64_t sub_100038F80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  uint64_t v11 = *(void (**)(_BYTE *))(a1
                                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  if (v11)
  {
    uint64_t v12 = v10[1];
    *uint64_t v9 = 2;
    swift_storeEnumTagMultiPayload(v9, v7, 4LL);
    swift_retain();
    v11(v9);
    sub_100021018((uint64_t)v11, v12);
    sub_10005802C((uint64_t)v9, type metadata accessor for DriverEvent);
  }

  uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
  void *v5 = v13;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v14 = v13;
  LOBYTE(v13)  = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v13 & 1) != 0)
  {
    Apple80211EventMonitoringHalt(*(void *)(a1
                                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference));
    uint64_t v16 = *v10;
    uint64_t v17 = v10[1];
    *uint64_t v10 = 0LL;
    v10[1]  = 0LL;
    return sub_100021018(v16, v17);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void AppleDevice.startMonitoringEvents(on:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v11 = *(void *)(v4 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  swift_beginAccess(v4 + 32, v24, 32LL, 0LL);
  uint64_t v12 = *(void *)(v4 + 32);
  if (!*(void *)(v12 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v13 = sub_10001C008(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_6:
    swift_endAccess(v24);
    unint64_t v18 = sub_1000033FC();
    uint64_t v19 = swift_allocError(&type metadata for WiFiError, v18, 0LL, 0LL);
    *(_OWORD *)uint64_t v20 = xmmword_10033A930;
    *(_BYTE *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v19);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
    return;
  }

  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_endAccess(v24);
  swift_retain();
  swift_bridgeObjectRelease(a2);
  uint64_t v16 = *(os_unfair_lock_s **)(v11 + 16);
  swift_retain();
  os_unfair_lock_unlock(v16);
  uint64_t v17 = swift_allocObject(&unk_1003DD710, 32LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v17 + 24)  = a4;
  swift_retain();
  sub_1000311EC(0LL, (uint64_t)sub_1000532DC);
  if (v6)
  {
    swift_release_n(v15, 2LL);
    swift_release(v17);
  }

  else
  {
    swift_release(v17);
    __int128 v21 = (void *)(v15
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v22 = *(void *)(v15
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v23 = *(void *)(v15
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                    + 8);
    *__int128 v21 = a3;
    v21[1]  = a4;
    swift_retain();
    sub_100021018(v22, v23);
    swift_release_n(v15, 2LL);
  }

void AppleDevice.startMonitoringEvents(on:customQueue:eventHandler:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v4 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 16));
  swift_beginAccess(v4 + 32, v18, 32LL, 0LL);
  uint64_t v10 = *(void *)(v4 + 32);
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = sub_10001C008(a1, a2);
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
      swift_endAccess(v18);
      swift_retain();
      swift_bridgeObjectRelease(a2);
      char v14 = *(os_unfair_lock_s **)(v9 + 16);
      swift_retain();
      os_unfair_lock_unlock(v14);
      sub_1000311EC(a3, a4);
      swift_release_n(v13, 2LL);
      return;
    }

    swift_bridgeObjectRelease(a2);
  }

  swift_endAccess(v18);
  unint64_t v15 = sub_1000033FC();
  uint64_t v16 = swift_allocError(&type metadata for WiFiError, v15, 0LL, 0LL);
  *(_OWORD *)uint64_t v17 = xmmword_10033A930;
  *(_BYTE *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  swift_willThrow(v16);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 16));
}

Swift::Void __swiftcall AppleDevice.stopMonitoringEvents(on:)(Swift::String on)
{
  object  = on._object;
  countAndFlagsBits  = on._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v1 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  swift_beginAccess(v1 + 32, aBlock, 32LL, 0LL);
  uint64_t v13 = *(void *)(v1 + 32);
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain(object);
    uint64_t v14 = sub_10001C008(countAndFlagsBits, (uint64_t)object);
    if ((v15 & 1) != 0)
    {
      uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
      swift_retain();
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    swift_bridgeObjectRelease(object);
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  swift_endAccess(aBlock);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
  if (v16)
  {
    uint64_t v17 = *(void **)(v16
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    uint64_t v18 = swift_allocObject(&unk_1003DD738, 24LL, 7LL);
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
    aBlock[4]  = sub_100053308;
    uint64_t v33 = v18;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = sub_1000021F0;
    aBlock[3]  = &unk_1003DD750;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v17;
    uint64_t v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    id v31 = _swiftEmptyArrayStorage;
    uint64_t v22 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v30 = v8;
    uint64_t v23 = v5;
    uint64_t v24 = v22;
    uint64_t v25 = sub_100002274((uint64_t *)&unk_1004052A0);
    uint64_t v29 = v9;
    uint64_t v26 = v25;
    uint64_t v27 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v26, v27, v4, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v19);
    _Block_release(v19);
    swift_release(v16);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    swift_release(v33);
  }

uint64_t sub_100039678(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a1)
  {
    uint64_t v7 = *(void **)(a1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    *uint64_t v6 = v7;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
    id v8 = v7;
    LOBYTE(v7)  = _dispatchPreconditionTest(_:)(v6);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
    if ((v7 & 1) != 0)
    {
      Apple80211EventMonitoringHalt(*(void *)(a1
                                              + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference));
      uint64_t v9 = (void *)(a1
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      uint64_t v10 = *(void *)(a1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      uint64_t v11 = *(void *)(a1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                      + 8);
      *uint64_t v9 = 0LL;
      v9[1]  = 0LL;
      return sub_100021018(v10, v11);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

void AppleDevice.getRequest(requestType:data:on:)( unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

void AppleDevice.setRequest(requestType:data:on:)( unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

void sub_100039808( unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, uint64_t (*a8)(void, void *))
{
  uint64_t v31 = 0LL;
  v28[1]  = 0LL;
  uint64_t v29 = 0LL;
  v28[0]  = 0LL;
  int v30 = 0;
  sub_100053310((uint64_t)v28, a1, a2, a3, a4 & 1, a5, a6);
  if (a1 == 0xFFFFFFFF) {
    HIDWORD(v29)  = a7;
  }
  uint64_t v14 = *(void *)(v8 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
  swift_beginAccess(v8 + 32, v32, 32LL, 0LL);
  uint64_t v15 = *(void *)(v8 + 32);
  if (!*(void *)(v15 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(a6);
  uint64_t v16 = sub_10001C008(a5, a6);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease(a6);
LABEL_9:
    swift_endAccess(v32);
    unint64_t v25 = sub_1000033FC();
    uint64_t v26 = swift_allocError(&type metadata for WiFiError, v25, 0LL, 0LL);
    *(_OWORD *)uint64_t v27 = xmmword_10033A940;
    *(_BYTE *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    swift_willThrow(v26);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 16));
    return;
  }

  uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  swift_endAccess(v32);
  swift_retain();
  swift_bridgeObjectRelease(a6);
  uint64_t v19 = *(os_unfair_lock_s **)(v14 + 16);
  swift_retain();
  os_unfair_lock_unlock(v19);
  unsigned int v20 = a8( *(void *)(v18 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference),  v28);
  if (v20)
  {
    uint64_t v21 = v20;
    unint64_t v22 = sub_1000033FC();
    uint64_t v23 = swift_allocError(&type metadata for WiFiError, v22, 0LL, 0LL);
    *(void *)uint64_t v24 = v21;
    *(void *)(v24 + 8)  = 0LL;
    *(_BYTE *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v23);
  }

  swift_release_n(v18, 2LL);
}

uint64_t AppleDevice.loadCapabilities(on:)(uint64_t a1, uint64_t a2)
{
  return *(void *)v3;
}

void AppleDevice.attachForDriverDiscovery<A>(_:)( uint64_t a1, void (__cdecl *a2)(const void *), CFStringRef (__cdecl *a3)(const void *))
{
  uint64_t v4 = v3;
  context.release  = a2;
  context.copyDescription  = a3;
  uint64_t v7 = sub_10002278C(&context);
  (*(void (**)(void *, uint64_t, void (__cdecl *)(const void *)))(*((void *)a2 - 1) + 16LL))(v7, a1, a2);
  uint64_t v8 = v4 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
  swift_beginAccess(v4 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer, v19, 33LL, 0LL);
  sub_100057104((uint64_t)&context, v8, &qword_100405288);
  swift_endAccess(v19);
  uint64_t v9 = *(void *)(v4 + 192);
  uint64_t v10 = *(void *)(v4 + 200);
  uint64_t v11 = *(void **)(v4 + 208);
  uint64_t v12 = *(os_unfair_lock_s **)(v9 + 16);
  swift_retain();
  swift_retain();
  uint64_t v13 = v11;
  os_unfair_lock_lock(v12);
  context.version  = 0LL;
  context.info  = (void *)v4;
  context.retain  = (const void *(__cdecl *)(const void *))j__swift_unknownObjectRetain;
  context.release  = (void (__cdecl *)(const void *))j__swift_unknownObjectRelease;
  context.copyDescription  = (CFStringRef (__cdecl *)(const void *))sub_100039F50;
  SCPreferencesSetCallback(v13, (SCPreferencesCallBack)sub_100039FD4, &context);
  if (qword_100404328 != -1) {
    swift_once(&qword_100404328, sub_10017437C);
  }
  SCPreferencesSetDispatchQueue(v13, (dispatch_queue_t)static OS_dispatch_queue.p2p);
  os_unfair_lock_unlock(v12);

  swift_release(v10);
  swift_release(v9);
  if (!*(_DWORD *)(v4 + 172))
  {
    swift_beginAccess(v4 + 160, &context, 33LL, 0LL);
    swift_beginAccess(v4 + 168, v19, 33LL, 0LL);
    io_connect_t v14 = IORegisterForSystemPower( (void *)v4,  (IONotificationPortRef *)(v4 + 160),  (IOServiceInterestCallback)sub_10003A304,  (io_object_t *)(v4 + 168));
    swift_endAccess(v19);
    swift_endAccess(&context);
    *(_DWORD *)(v4 + 172)  = v14;
    uint64_t v15 = *(IONotificationPort **)(v4 + 160);
    if (v15)
    {
      IONotificationPortSetDispatchQueue(v15, (dispatch_queue_t)static OS_dispatch_queue.p2p);
    }

    else
    {
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(0LL);
      os_log_type_t v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to monitor for system power notifications", v18, 2u);
        swift_slowDealloc(v18, -1LL, -1LL);
      }
    }
  }

  swift_beginAccess(v4 + 152, &context, 0LL, 0LL);
  sub_100032F88(*(_DWORD *)(v4 + 152));
  swift_beginAccess(v4 + 156, v19, 0LL, 0LL);
  sub_100034C04(*(_DWORD *)(v4 + 156));
}

NSString sub_100039F50(uint64_t a1)
{
  uint64_t v7 = 0LL;
  unint64_t v8 = 0xE000000000000000LL;
  uint64_t v6 = swift_retain();
  uint64_t v2 = type metadata accessor for AppleDevice(0LL);
  _print_unlocked<A, B>(_:_:)( &v6,  &v7,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  swift_release(a1);
  unint64_t v3 = v8;
  NSString v4 = String._bridgeToObjectiveC()();

  swift_bridgeObjectRelease(v3);
  return v4;
}

void sub_100039FD4(void *a1, uint64_t a2, void *a3)
{
  NSString v4 = a1;
  sub_10005399C(v4, a3);
}

uint64_t sub_10003A00C( void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v28 = a8;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v17 - 8);
  uint64_t v30 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1(a3);
  if (qword_100404328 != -1) {
    swift_once(&qword_100404328, sub_10017437C);
  }
  uint64_t v20 = swift_allocObject(&unk_1003DE5C0, 48LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v20 + 24)  = a5;
  *(_DWORD *)(v20 + 32)  = a6;
  *(_DWORD *)(v20 + 36)  = a7;
  *(void *)(v20 + 40)  = v28;
  aBlock[4]  = sub_100057E8C;
  uint64_t v34 = v20;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003DE5D8;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v25 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v14, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v16, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v30);
  return swift_release(v34);
}

uint64_t sub_10003A264(uint64_t a1, uint64_t a2, int a3, io_connect_t a4, intptr_t a5)
{
  uint64_t v10 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess(a1 + 16, v16, 1LL, 0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
  }

  else
  {
    *uint64_t v10 = v13;
    uint64_t result = swift_beginAccess(a2 + 16, &v15, 0LL, 0LL);
    if (*(void *)(a2 + 16) == v13 && a3 == 2) {
      return IOAllowPowerChange(a4, a5);
    }
  }

  return result;
}

uint64_t sub_10003A304(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  return sub_100053A60(a1, a3, a4);
}

Swift::Void __swiftcall AppleDevice.detachDriverDiscovery()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(v0 + 168, v25, 1LL, 0LL);
  if (*(_DWORD *)(v0 + 168))
  {
    swift_beginAccess(v0 + 168, aBlock, 33LL, 0LL);
    IODeregisterForSystemPower((io_object_t *)(v0 + 168));
    swift_endAccess(aBlock);
  }

  io_object_t v8 = *(_DWORD *)(v0 + 172);
  if (v8) {
    IOObjectRelease(v8);
  }
  swift_beginAccess(v0 + 160, v24, 1LL, 0LL);
  uint64_t v9 = *(IONotificationPort **)(v0 + 160);
  if (v9) {
    IONotificationPortDestroy(v9);
  }
  *(void *)(v0 + 160)  = 0LL;
  *(void *)(v0 + 168)  = 0LL;
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void **)(v0 + 208);
  uint64_t v13 = *(os_unfair_lock_s **)(v10 + 16);
  swift_retain();
  swift_retain();
  uint64_t v14 = v12;
  os_unfair_lock_lock(v13);
  SCPreferencesSetDispatchQueue(v14, 0LL);
  SCPreferencesSetCallback(v14, 0LL, 0LL);
  os_unfair_lock_unlock(v13);

  swift_release(v11);
  swift_release(v10);
  if (qword_100404328 != -1) {
    swift_once(&qword_100404328, sub_10017437C);
  }
  aBlock[4]  = sub_100053460;
  uint64_t v23 = v0;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003DD778;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v19 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v18, v19, v1, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release(v23);
}

uint64_t sub_10003A5EC(uint64_t a1)
{
  uint64_t v5 = 0LL;
  memset(v4, 0, sizeof(v4));
  uint64_t v1 = a1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
  swift_beginAccess(a1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer, v3, 33LL, 0LL);
  sub_100057104((uint64_t)v4, v1, &qword_100405288);
  return swift_endAccess(v3);
}

uint64_t sub_10003A654(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  if (!a1)
  {
    uint64_t v20 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      v39[0]  = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v35 = sub_10000235C((uint64_t)a2, a3, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Failed to create low latency interface because parent %s was not found",  v23,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    unint64_t v29 = sub_1000033FC();
    uint64_t v30 = swift_allocError(&type metadata for WiFiError, v29, 0LL, 0LL);
    *(_OWORD *)uint64_t v31 = xmmword_10033A970;
    *(_BYTE *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v30);
    return (uint64_t)a2;
  }

  uint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  if ((a4 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }

  else
  {
    if (!HIDWORD(a4))
    {
      uint64_t v35 = a4 | 0x100000000LL;
      uint64_t v41 = 0LL;
      memset(v39, 0, sizeof(v39));
      int v40 = 0;
      swift_retain();
      sub_100053310((uint64_t)v39, 0x125uLL, (uint64_t)&v35, (uint64_t)v38, 0, (uint64_t)a2, a3);
      unsigned int v7 = Apple80211RawSet( *(void *)(a1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference),  v39);
      if (v7)
      {
        uint64_t v8 = v7;
        unint64_t v9 = sub_1000033FC();
        uint64_t v10 = swift_allocError(&type metadata for WiFiError, v9, 0LL, 0LL);
        *(void *)uint64_t v11 = v8;
        *(void *)(v11 + 8)  = 0LL;
        *(_BYTE *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
        swift_willThrow(v10);
        swift_bridgeObjectRetain(a3);
        swift_errorRetain(v10);
        swift_bridgeObjectRetain(a3);
        uint64_t v12 = swift_errorRetain(v10);
        uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = swift_slowAlloc(22LL, -1LL);
          uint64_t v16 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          uint64_t v33 = swift_slowAlloc(32LL, -1LL);
          *(void *)__int128 v38 = v33;
          *(_DWORD *)uint64_t v15 = 136315394;
          swift_bridgeObjectRetain(a3);
          uint64_t v34 = sub_10000235C((uint64_t)a2, a3, (uint64_t *)v38);
          a2  = &v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
          swift_bridgeObjectRelease_n(a3, 3LL);
          *(_WORD *)(v15 + 12)  = 2112;
          swift_errorRetain(v10);
          uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v10);
          uint64_t v34 = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
          *uint64_t v16 = v17;
          swift_errorRelease(v10);
          swift_errorRelease(v10);
          _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Failed to create low latency interface for %s because %@",  (uint8_t *)v15,  0x16u);
          uint64_t v18 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v16, 1LL, v18);
          swift_slowDealloc(v16, -1LL, -1LL);
          swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1LL, -1LL);
          swift_slowDealloc(v15, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(a3, 2LL);

          swift_errorRelease(v10);
          uint64_t v19 = swift_errorRelease(v10);
        }

        swift_willThrow(v19);
        swift_release(a1);
      }

      else
      {
        HIBYTE(v37)  = 0;
        uint64_t v25 = String.init(cString:)(&v36);
        unint64_t v27 = v26;
        uint64_t v28 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000LL) == 0) {
          uint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
        }
        if (!v28
          || (a2  = (uint64_t *)v25,
              sub_10000AF70( &qword_1004052E8,  type metadata accessor for AppleDevice,  (uint64_t)&protocol conformance descriptor for AppleDevice),  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for Bool, (uint64_t)v38),  v38[0] == 2)
          || (v38[0] & 1) == 0)
        {
          swift_bridgeObjectRelease(v27);
          __asm { BR              X10 }
        }

        swift_release(a1);
      }

      return (uint64_t)a2;
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10003AE24( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, unint64_t a8)
{
  if (a2)
  {
    memset(v51, 0, sizeof(v51));
    uint64_t v56 = 0LL;
    uint64_t v54 = 0LL;
    __int128 v53 = 0uLL;
    int v55 = 0;
    swift_retain();
    sub_100053310((uint64_t)&v53, 0xCuLL, (uint64_t)&v51[4], (uint64_t)&v52, 0, a3, a4);
    uint64_t v15 = *(void *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference);
    unsigned int v16 = Apple80211RawGet(v15, &v53);
    if (v16)
    {
      uint64_t v17 = v16;
      unint64_t v18 = sub_1000033FC();
      uint64_t v19 = swift_allocError(&type metadata for WiFiError, v18, 0LL, 0LL);
      *(void *)uint64_t v20 = v17;
      *(void *)(v20 + 8)  = 0LL;
      *(_BYTE *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
      swift_willThrow(v19);
      uint64_t v21 = a2;
      return swift_release(v21);
    }

    __int128 v53 = *(_OWORD *)&v51[4];
    LOWORD(v54)  = *(_WORD *)&v51[20];
    BYTE2(v54)  = v51[22];
    BOOL v26 = sub_100089F34(a7, (uint64_t)&v53);
    if (!v26)
    {
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
        *(void *)&__int128 v53 = swift_slowAlloc(32LL, -1LL);
        *uint64_t v34 = 136315138;
        __asm { BR              X10 }
      }

      unint64_t v39 = sub_1000033FC();
      uint64_t v30 = swift_allocError(&type metadata for WiFiError, v39, 0LL, 0LL);
      *(_OWORD *)uint64_t v31 = xmmword_10033A970;
      goto LABEL_15;
    }

    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    if ((a8 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }

    else
    {
      if (!HIDWORD(a8))
      {
        int v42 = a8;
        int v48 = a6;
        __int16 v43 = a5;
        char v44 = BYTE2(a5);
        char v45 = BYTE3(a5);
        char v46 = BYTE4(a5);
        char v47 = BYTE5(a5);
        uint64_t v56 = 0LL;
        uint64_t v54 = 0LL;
        __int128 v53 = 0uLL;
        int v55 = 0;
        sub_100053310((uint64_t)&v53, 0x5EuLL, (uint64_t)&v42, (uint64_t)v51, 0, a3, a4);
        unsigned int v27 = Apple80211RawSet(v15, &v53);
        if (!v27)
        {
LABEL_16:
          uint64_t v21 = a2;
          return swift_release(v21);
        }

        uint64_t v28 = v27;
        unint64_t v29 = sub_1000033FC();
        uint64_t v30 = swift_allocError(&type metadata for WiFiError, v29, 0LL, 0LL);
        *(void *)uint64_t v31 = v28;
        *(void *)(v31 + 8)  = 0LL;
LABEL_15:
        *(_BYTE *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
        swift_willThrow(v30);
        goto LABEL_16;
      }

      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    }

    __break(1u);
  }

  else
  {
    uint64_t v22 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      *(void *)&__int128 v53 = swift_slowAlloc(64LL, -1LL);
      _DWORD *v25 = 136315394;
      __asm { BR              X10 }
    }

    swift_bridgeObjectRelease_n(a4, 2LL);

    unint64_t v35 = sub_1000033FC();
    uint64_t v36 = swift_allocError(&type metadata for WiFiError, v35, 0LL, 0LL);
    *(_OWORD *)uint64_t v37 = xmmword_10033A970;
    *(_BYTE *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    return swift_willThrow(v36);
  }

  return result;
}

BOOL sub_10003B4C4(uint64_t a1)
{
  if (!v7) {
    __break(1u);
  }
  uint64_t v4 = *(void *)(v7 + 8);
  int v5 = *(_DWORD *)(v7 + 16);
  uint64_t v1 = sub_100211E68((_BYTE *)&v4 + *(unsigned __int8 *)(v7 + 5), *(unsigned __int8 *)(v7 + 6));
  return (sub_100212134(v1, v2) & 0x1000000000000LL) == 0;
}

BOOL sub_10003B574@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10003B4C4(a1);
  *a2  = result;
  return result;
}

void *sub_10003B5A4( void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL))
  {
    BOOL result = _StringGuts._slowWithCString<A>(_:)(&v10, a1, a2);
    if (!v4) {
      return (void *)v10;
    }
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    v9[0]  = a3;
    v9[1]  = a4 & 0xFFFFFFFFFFFFFFLL;
    BOOL result = a1(&v8, v9);
    if (!v4) {
      return (void *)v8;
    }
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = _StringObject.sharedUTF8.getter(a3, a4);
    }
    BOOL result = a1(v9, (void *)v6);
    if (!v4) {
      return (void *)v9[0];
    }
  }

  return result;
}

void *sub_10003B67C( void *(*a1)(unsigned int *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL))
  {
    BOOL result = _StringGuts._slowWithCString<A>(_:)(&v10, a1, a2);
    if (!v4) {
      return (void *)v10;
    }
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    v9[0]  = a3;
    v9[1]  = a4 & 0xFFFFFFFFFFFFFFLL;
    BOOL result = a1(&v8, v9);
    if (!v4) {
      return (void *)v8;
    }
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = _StringObject.sharedUTF8.getter(a3, a4);
    }
    BOOL result = a1((unsigned int *)v9, (void *)v6);
    if (!v4) {
      return (void *)LODWORD(v9[0]);
    }
  }

  return result;
}

uint64_t sub_10003B754@<X0>( char *__dst@<X2>, uint64_t result@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v7 = result;
  v9[2]  = __dst;
  v9[3]  = a4;
  if ((a3 & 0x1000000000000000LL) != 0 || !(a3 & 0x2000000000000000LL | result & 0x1000000000000000LL)) {
    return (uint64_t)_StringGuts._slowWithCString<A>(_:)(a5, sub_1000573D4, v9);
  }
  if ((a3 & 0x2000000000000000LL) != 0) {
    goto LABEL_8;
  }
  if ((result & 0x1000000000000000LL) != 0)
  {
    unsigned int v8 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_6:
    if (__dst) {
      return strlcpy(__dst, v8, 0x10uLL);
    }
    __break(1u);
LABEL_8:
    *(void *)__source  = v7;
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFFFLL;
    if (__dst)
    {
      unsigned int v8 = __source;
      return strlcpy(__dst, v8, 0x10uLL);
    }

    goto LABEL_14;
  }

  BOOL result = _StringObject.sharedUTF8.getter(result, a3);
  unsigned int v8 = (char *)result;
  if (result) {
    goto LABEL_6;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

void *sub_10003B82C@<X0>( uint64_t (*a1)(void *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL)) {
    return _StringGuts._slowWithCString<A>(_:)(a5, a1, a2);
  }
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v8[0]  = a3;
    v8[1]  = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v6 = v8;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v6 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
  }

  return (void *)a1(v6);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDevice.neighborDiscoveryTableClear(on:)( Swift::String on)
{
  uint64_t v2 = v1;
  object  = (uint64_t)on._object;
  countAndFlagsBits  = on._countAndFlagsBits;
  uint64_t v5 = *(void *)(v1 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
  sub_10000AF70( &qword_1004052E8,  type metadata accessor for AppleDevice,  (uint64_t)&protocol conformance descriptor for AppleDevice);
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiAddress, (uint64_t)&v17);
  unint64_t v6 = v17 | ((unint64_t)v18 << 32);
  unsigned __int8 v7 = v19;
  swift_beginAccess(v1 + 32, v15, 32LL, 0LL);
  uint64_t v8 = *(void *)(v1 + 32);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain(object);
    uint64_t v9 = sub_10001C008(countAndFlagsBits, object);
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_endAccess(v15);
      swift_retain();
      swift_bridgeObjectRelease(object);
      unsigned int v12 = *(_DWORD *)(v11
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_interfaceIndex);
      swift_release(v11);
      goto LABEL_12;
    }

    swift_bridgeObjectRelease(object);
  }

  swift_endAccess(v15);
  if ((object & 0x1000000000000000LL) != 0
    || !(object & 0x2000000000000000LL | countAndFlagsBits & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v14, sub_10003BB6C, 0LL);
    unsigned int v12 = v14;
  }

  else if ((object & 0x2000000000000000LL) != 0)
  {
    *(void *)uint64_t v15 = countAndFlagsBits;
    uint64_t v16 = object & 0xFFFFFFFFFFFFFFLL;
    unsigned int v12 = if_nametoindex(v15);
  }

  else
  {
    if ((countAndFlagsBits & 0x1000000000000000LL) != 0) {
      uint64_t v13 = (const char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v13 = (const char *)_StringObject.sharedUTF8.getter(countAndFlagsBits, object);
    }
    sub_10003BB6C(v13, v15);
    unsigned int v12 = *(_DWORD *)v15;
  }

LABEL_12:
  swift_beginAccess(v2 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, v15, 33LL, 0LL);
  LOBYTE(v14)  = v7;
  sub_1001711C0(v6 & 0xFFFFFFFFFFFFLL | ((unint64_t)v7 << 48), v12);
  swift_endAccess(v15);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 16));
}

  swift_beginAccess(v7 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, v21, 33LL, 0LL);
  sub_100171B58(a1 & 0xFFFFFFFFFFFFLL, a2, a3, v19, a6);
  swift_endAccess(v21);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 16));
}

    v31[(v24 >> 6) + 8] |= 1LL << v24;
    *(_BYTE *)(v31[6] + v24)  = v20;
    sub_100022628( (uint64_t)v11,  v31[7] + *(void *)(v64 + 72) * v24,  type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v34 = v31[2];
    unint64_t v35 = __OFADD__(v34, 1LL);
    uint64_t v36 = v34 + 1;
    if (v35)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    unint64_t v31[2] = v36;
    os_log_type_t v33 = v17 - 1;
    if (v17 == 1) {
      return swift_bridgeObjectRelease(v59);
    }
    goto LABEL_16;
  }

  return result;
}

  if ((v26 & 4) != 0)
  {
    uint64_t v49 = v103;
    uint64_t v50 = v104;
    sub_1000237C8((uint64_t)v102, v103);
    uint64_t v51 = sub_1000290F8();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for WiFiAddress,  &type metadata for WiFiAddress,  v51,  v49,  v50);
    char v52 = ((unint64_t)v107 << 40) | ((unint64_t)v106 << 32);
    *(_DWORD *)(v27 + 56)  = v105;
    *(_WORD *)(v27 + 60)  = WORD2(v52);
    *(_BYTE *)(v27 + 62)  = 0;
  }

  if ((v26 & 8) == 0)
  {
    if ((v26 & 0x1000) == 0) {
      goto LABEL_16;
    }
LABEL_20:
    uint64_t v66 = v103;
    uint64_t v67 = v104;
    sub_1000237C8((uint64_t)v102, v103);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v66, v67);
    uint64_t v68 = v103;
    uint64_t v69 = v104;
    sub_1000237C8((uint64_t)v102, v103);
    uint64_t v70 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v68, v69);
    *(_BYTE *)(v27 + 65)  = v70 & 1;
    *(_BYTE *)(v27 + 64)  = _s7CoreP2P15AWDLActionFrameV13DataPathStateV30UnicastMasterIndicationOptionsO8rawValueAGSgs6UInt32V_tcfC_0(v70 & 0xFFFFFFFE);
    *(_BYTE *)(v27 + 63)  = 1;
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v71 = v103;
    uint64_t v72 = v104;
    sub_1000237C8((uint64_t)v102, v103);
    uint64_t v73 = sub_1000DB9BC();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)( &type metadata for AWDLActionFrame.DataPathState.ExtensionFlags,  &type metadata for AWDLActionFrame.DataPathState.ExtensionFlags,  v73,  v71,  v72);
    uint64_t v76 = (unsigned __int16)v105;
    if ((v105 & 1) != 0)
    {
      io_iterator_t v77 = v103;
      unint64_t v78 = v104;
      sub_1000237C8((uint64_t)v102, v103);
      *(_WORD *)(v27 + 66)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v77, v78);
      *(_BYTE *)(v27 + 68)  = 0;
    }

    if ((v76 & 4) != 0)
    {
      uint64_t v79 = v103;
      __int128 v80 = v104;
      sub_1000237C8((uint64_t)v102, v103);
      *(_DWORD *)(v27 + 72)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v79, v80);
      *(_BYTE *)(v27 + 76)  = 0;
    }

    if ((v76 & 0x20) != 0)
    {
      LODWORD(v96)  = v76;
      int v81 = v103;
      uint64_t v82 = v104;
      sub_1000237C8((uint64_t)v102, v103);
      uint64_t v83 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v81, v82);
      int v84 = v98;
      sub_1000225EC((uint64_t)v98, &qword_100407450);
      *int v84 = v83;
      (*(void (**)(void *, void, uint64_t))(v100 + 104))( v84,  enum case for DispatchTimeInterval.milliseconds(_:),  v10);
      v12((uint64_t)v84, 0LL, 1LL, v10);
      uint64_t v85 = v103;
      char v86 = v104;
      sub_1000237C8((uint64_t)v102, v103);
      uint64_t v87 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v85, v86);
      CFAllocatorRef v88 = v95;
      *(_DWORD *)uint64_t v95 = v87;
      v88[4]  = 0;
      uint64_t v89 = v103;
      unint64_t v90 = v104;
      sub_1000237C8((uint64_t)v102, v103);
      uint64_t v91 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v89, v90);
      uint64_t v92 = v94;
      *(_DWORD *)uint64_t v94 = v91;
      v92[4]  = 0;
      unsigned int v27 = (uint64_t)v101;
      uint64_t v76 = v96;
    }

    *(int16x4_t *)v74.i8  = vdup_n_s16(v76);
    *(uint16x4_t *)v75.i8  = vshl_u16(*(uint16x4_t *)v74.i8, (uint16x4_t)0xFFF4FFF5FFF7FFF8LL);
    v74.i64[0]  = *(void *)&vshl_u16((uint16x4_t)(v74.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFFFFFAFFFCLL) & 0xFF01FF01FF01FF01LL;
    *(_DWORD *)(v27 + 84)  = vmovn_s16(v74).u32[0];
    *(_BYTE *)(v27 + 88)  = (v76 & 0x80) != 0;
    v75.i64[0] &= 0xFF01FF01FF01FF01LL;
    *(_DWORD *)(v27 + 89)  = vmovn_s16(v75).u32[0];
    *(_BYTE *)(v27 + 93)  = (v76 & 0x2000) != 0;
    goto LABEL_18;
  }

  uint64_t v54 = v103;
  int v55 = v104;
  sub_1000237C8((uint64_t)v102, v103);
  uint64_t v56 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v54, v55);
  uint64_t v57 = v103;
  uint64_t v58 = v104;
  sub_1000237C8((uint64_t)v102, v103);
  uint64_t v59 = UnkeyedDecodingContainer.decodeData(with:)(v56, v57, v58);
  int64_t v61 = v60;
  Swift::String v62 = v96;
  static String.Encoding.utf8.getter(v59);
  uint64_t v63 = String.init(data:encoding:)(v59, v61, v62);
  uint64_t v96 = v64;
  sub_1000208D8(v59, v61);
  uint64_t v65 = v96;
  *(void *)(v27 + 40)  = v63;
  *(void *)(v27 + 48)  = v65;
  if ((v26 & 0x1000) != 0) {
    goto LABEL_20;
  }
LABEL_16:
  *(_BYTE *)(v27 + 63)  = 0;
  *(_BYTE *)(v27 + 65)  = 0;
  if ((v26 & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_17:
  *(_WORD *)(v27 + 92)  = 0;
  *(void *)(v27 + 84)  = 0LL;
LABEL_18:
  __int128 v53 = v99;
  sub_100002AC4(v102);
  sub_100057FE8(v27, v19, type metadata accessor for AWDLActionFrame.DataPathState);
  sub_100002AC4(v53);
  return sub_10005802C(v27, type metadata accessor for AWDLActionFrame.DataPathState);
}

  if (v9 > 0x1DCD64FFFFFFFFFFLL) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v9 <= -2147483649000000000LL) {
    return 0x8000000000000000LL;
  }
  return v9 / 1000000000;
}

  Hasher._combine(_:)(v12);
}

  Hasher._combine(_:)(v12);
  uint64_t v13 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v13 + 20)));
}

  unsigned int v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0)
  {
LABEL_27:
    BOOL result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_28;
  }

  uint64_t v15 = (char *)v7 + v14 + 32;
  if (a2 + a3 >= (unint64_t)&v15[v6] || (unint64_t)v15 >= a2 + a3 + v6)
  {
    BOOL result = memcpy(v15, (const void *)(a2 + a3), v6);
    if (!v6)
    {
LABEL_22:
      *uint64_t v4 = v7;
      return result;
    }

    unsigned int v17 = v7[2];
    unsigned __int16 v18 = __OFADD__(v17, v6);
    unsigned __int8 v19 = v17 + v6;
    if (!v18)
    {
      v7[2]  = v19;
      goto LABEL_22;
    }

    goto LABEL_26;
  }

  BOOL result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_28:
  __break(1u);
  return result;
}

    sub_100002AC4(v24);
    sub_100002AC4(a1);
    return v5;
  }

  sub_10002084C((uint64_t)v24, (uint64_t)v23);
  _StringGuts.grow(_:)(50LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v21 = 0xD000000000000030LL;
  uint64_t v22 = 0x80000001003674D0LL;
LABEL_14:
  v17._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  unsigned __int16 v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v5 = v21;
  unsigned __int8 v19 = type metadata accessor for DecodingError(0LL);
  swift_allocError(v19, &protocol witness table for DecodingError, 0LL, 0LL);
  static DecodingError.dataCorruptedError(in:debugDescription:)(v23, v21, v22);
  swift_bridgeObjectRelease(v22);
  uint64_t v20 = sub_100002AC4(v23);
  swift_willThrow(v20);
  sub_100002AC4(v24);
LABEL_4:
  sub_100002AC4(a1);
  return v5;
}

    uint64_t v28 = (void *)*a3;
    *(void *)(*a3 + 8 * (v21 >> 6) + 64) |= 1LL << v21;
    unint64_t v29 = (_BYTE *)(v28[6] + 6 * v21);
    *unint64_t v29 = v42;
    v29[1]  = v8;
    v29[2]  = v9;
    v29[3]  = v18;
    v29[4]  = BYTE4(v17);
    v29[5]  = BYTE5(v17);
    uint64_t v30 = (void *)(v28[7] + 16 * v21);
    *uint64_t v30 = v43;
    v30[1]  = v44;
    uint64_t v31 = v28[2];
    uint64_t v32 = __OFADD__(v31, 1LL);
    os_log_type_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_22;
    }
    uint64_t v5 = v41 + 1;
    v28[2]  = v33;
    a2  = 1;
    if (v39 == v41 + 1) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
  }

  sub_100241DC4(v24, v16 & 1);
  BOOL v26 = sub_10001C15C(v17);
  if ((v25 & 1) != (v27 & 1)) {
    goto LABEL_23;
  }
  uint64_t v21 = v26;
  if ((v25 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v34 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v34);
  int v48 = v34;
  swift_errorRetain(v34);
  unint64_t v35 = sub_100002274((uint64_t *)&unk_10040C5B0);
  if ((swift_dynamicCast(v35, &v48, v35, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease_n(a1, 2LL);
    return swift_errorRelease(v48);
  }

    uint64_t v60 = v47;
    int64_t v61 = (uint64_t *)((char *)v184 + *(void *)(*v184 + 552));
    swift_beginAccess(v61, v191, 0LL, 0LL);
    uint64_t v54 = (uint64_t)&v156;
    Swift::String v62 = *v61;
    __chkstk_darwin();
    uint64_t v63 = v162;
    *(&v156 - 4)  = v163;
    *(&v156 - 3)  = v63;
    *(&v156 - 2)  = (uint64_t)v183;
    char v47 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    uint64_t v64 = sub_100245750();
    swift_bridgeObjectRetain(v62);
    uint64_t v65 = v62;
    uint64_t v66 = v181;
    uint64_t v67 = Dictionary.filter(_:)(sub_1003330D0, &v156 - 6, v65, v47, v181, v64);
    v173  = 0LL;
    uint64_t v50 = v67;
    unint64_t v162 = v47;
    char v163 = v64;
    if ((Dictionary.isEmpty.getter(v67, v47, v66, v64) & 1) != 0)
    {
      char v47 = v60;
      if (!v30) {
        goto LABEL_34;
      }
      uint64_t v68 = v182;
      swift_beginAccess(v182, &v190, 33LL, 0LL);
      char v45 = swift_isUniquelyReferenced_nonNull_native(*v68);
      uint64_t v189 = *v68;
      uint64_t v69 = v189;
      *uint64_t v68 = 0x8000000000000000LL;
      uint64_t v51 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
      uint64_t v71 = *(void *)(v69 + 16);
      uint64_t v72 = (v70 & 1) == 0;
      uint64_t v73 = v71 + v72;
      if (__OFADD__(v71, v72)) {
        goto LABEL_65;
      }
      LOBYTE(v54)  = v70;
      if (*(void *)(v69 + 24) >= v73)
      {
        if ((v45 & 1) == 0) {
          goto LABEL_69;
        }
        if ((v70 & 1) != 0) {
          goto LABEL_32;
        }
        goto LABEL_70;
      }

      sub_100240434(v73, v45);
      os_log_type_t v74 = sub_100327838( v178,  (void (*)(void *, uint64_t))NANClusterChangeEvent.hash(into:),  (uint64_t (*)(uint64_t, Swift::Int))sub_10001CC98);
      if ((v54 & 1) == (v75 & 1))
      {
        uint64_t v51 = v74;
        if ((v54 & 1) != 0) {
          goto LABEL_32;
        }
LABEL_70:
        v176(v157, 1LL, 1LL, v179);
        __break(1u);
LABEL_71:
        v176(v159, 1LL, 1LL, v179);
        __break(1u);
        goto LABEL_72;
      }

uint64_t sub_10003BB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100046220(a1, a2);
}

uint64_t sub_10003BB6C@<X0>(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = if_nametoindex(a1);
  *a2  = result;
  return result;
}

void AppleDevice.neighborDiscoveryTableUpdate(macAddress:ipv6Address:on:command:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
}

CFArrayRef sub_10003BBBC(const __SCPreferences *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  CFArrayRef result = SCNetworkSetCopyAll(a1);
  if (result)
  {
    CFArrayRef v7 = result;
    unint64_t v49 = 0LL;
    type metadata accessor for SCNetworkSet(0LL);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v49, v8);

    uint64_t v9 = v49;
    if (v49)
    {
      uint64_t v10 = v49 & 0xFFFFFFFFFFFFFF8LL;
      if (v49 >> 62) {
        goto LABEL_44;
      }
      uint64_t v11 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      while (v11)
      {
        unint64_t v12 = a3;
        a3  = 0LL;
        unint64_t v13 = v9 & 0xC000000000000001LL;
        uint64_t v43 = v9 + 32;
        char v45 = a4;
        uint64_t v41 = v10;
        uint64_t v42 = v9;
        unint64_t v39 = v9 & 0xC000000000000001LL;
        uint64_t v40 = v11;
        while (1)
        {
          if (v13)
          {
            unsigned int v14 = (const __SCNetworkSet *)specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v9);
          }

          else
          {
            if (a3 >= *(void *)(v10 + 16)) {
              goto LABEL_42;
            }
            unsigned int v14 = (const __SCNetworkSet *)*(id *)(v43 + 8 * a3);
          }

          uint64_t v15 = v14;
          if (__OFADD__(a3++, 1LL))
          {
            __break(1u);
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }

          CFArrayRef v17 = SCNetworkSetCopyServices(v14);
          if (!v17
            || (CFArrayRef v18 = v17,
                unint64_t v49 = 0LL,
                type metadata accessor for SCNetworkService(0LL),
                static Array._conditionallyBridgeFromObjectiveC(_:result:)(v18, &v49, v19),
                v18,
                (unint64_t v20 = v49) == 0))
          {

            goto LABEL_7;
          }

          set  = v15;
          if (!(v49 >> 62))
          {
            uint64_t v21 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            if (v21) {
              break;
            }
            goto LABEL_39;
          }

          uint64_t v37 = (v49 & 0x8000000000000000LL) == 0LL ? v49 & 0xFFFFFFFFFFFFFF8LL : v49;
          swift_bridgeObjectRetain(v49);
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease(v20);
          if (v21) {
            break;
          }
LABEL_39:

          swift_bridgeObjectRelease(v20);
LABEL_7:
          if (a3 == v11) {
            goto LABEL_48;
          }
        }

        if (v21 >= 1)
        {
          unint64_t v44 = a3;
          uint64_t v22 = 0LL;
          while (1)
          {
            if ((v20 & 0xC000000000000001LL) != 0) {
              uint64_t v23 = (const __SCNetworkService *)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
            }
            else {
              uint64_t v23 = (const __SCNetworkService *)*(id *)(v20 + 8 * v22 + 32);
            }
            os_log_type_t v24 = v23;
            uint64_t v25 = SCNetworkServiceGetInterface(v23);
            if (v25)
            {
              BOOL v26 = v25;
              unsigned int v27 = (id)SCNetworkInterfaceGetBSDName(v25);

              if (v27)
              {
                NSString v28 = String._bridgeToObjectiveC()();
                int v29 = CFEqual(v28, v27);

                if (v29)
                {
                  if ((*a4 & 1) == 0)
                  {
                    uint64_t v30 = swift_bridgeObjectRetain_n(v12, 2LL);
                    unint64_t v31 = v12;
                    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v30);
                    os_log_type_t v33 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v32, v33))
                    {
                      uint64_t v34 = swift_slowAlloc(12LL, -1LL);
                      log  = v32;
                      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
                      unint64_t v49 = v35;
                      *(_DWORD *)uint64_t v34 = 136315138;
                      swift_bridgeObjectRetain(v31);
                      *(void *)(v34 + 4)  = sub_10000235C(a2, v31, (uint64_t *)&v49);
                      swift_bridgeObjectRelease_n(v31, 3LL);
                      _os_log_impl( (void *)&_mh_execute_header,  log,  v33,  "Removing %s from legacy preferences",  (uint8_t *)v34,  0xCu);
                      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v35, -1LL, -1LL);
                      uint64_t v36 = v34;
                      a4  = v45;
                      swift_slowDealloc(v36, -1LL, -1LL);
                    }

                    else
                    {
                      swift_bridgeObjectRelease_n(v31, 2LL);
                    }

                    unint64_t v12 = v31;
                  }

                  SCNetworkSetRemoveService(set, v24);

                  *a4  = 1;
                  goto LABEL_21;
                }
              }
            }

LABEL_21:
            if (v21 == ++v22)
            {

              swift_bridgeObjectRelease(v20);
              uint64_t v10 = v41;
              uint64_t v9 = v42;
              unint64_t v13 = v39;
              uint64_t v11 = v40;
              a3  = v44;
              goto LABEL_7;
            }
          }
        }

LABEL_43:
        __break(1u);
LABEL_44:
        if (v9 >= 0) {
          uint64_t v38 = v10;
        }
        else {
          uint64_t v38 = v9;
        }
        swift_bridgeObjectRetain(v9);
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v38);
        swift_bridgeObjectRelease(v9);
      }

            if (++v28 == v3)
            {
              swift_bridgeObjectRelease_n(v26, 2LL);
              uint64_t v19 = v40;
              uint64_t v2 = v39;
              goto LABEL_27;
            }
          }

          unint64_t v31 = 11LL;
          while (1)
          {
            uint64_t v32 = v31 - 7;
            if (__OFADD__(v31 - 8, 1LL)) {
              break;
            }
            if (*(_DWORD *)(v29 + 4 * v31) == v6) {
              goto LABEL_57;
            }
            ++v31;
            if (v32 == v30) {
              goto LABEL_43;
            }
          }

          __break(1u);
          break;
        }
      }

    if (++v17 == v16) {
      goto LABEL_26;
    }
  }

  if (*(_DWORD *)(v9 + 36) == (_DWORD)v22)
  {
    swift_bridgeObjectRelease(v9);
    if (v8 < 0x83)
    {
      uint64_t v37 = 1;
      goto LABEL_79;
    }

        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v6);
        goto LABEL_4;
      }

      goto LABEL_3;
    }

    uint64_t v25 = *(void *)(v6 + 16);
    if (v20 < v25) {
      sub_10019EB3C(v6, v6 + 32, v20, (2 * v25) | 1);
    }
LABEL_5:
    ++v4;
    swift_bridgeObjectRelease(v6);
    if (v4 == v3) {
      return (uint64_t)v28;
    }
  }

  unint64_t v12 = 0LL;
  unint64_t v13 = v9 - 1;
  unsigned int v14 = v8 - 1;
  uint64_t v15 = v9 & ~(v9 >> 63);
  while (v15 != v12)
  {
    if (v12 >= *(void *)(v6 + 16)) {
      goto LABEL_49;
    }
    uint64_t v16 = *(_BYTE *)(v6 + 32 + v12);
    CFArrayRef result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      CFArrayRef result = (uint64_t)sub_10019EA0C(v10);
      uint64_t v10 = (void *)result;
    }

    uint64_t v8 = v10[2];
    if (v12 >= v8) {
      goto LABEL_50;
    }
    *((_BYTE *)v10 + v12 + 32) &= v16;
    if (v14 != v12)
    {
      uint64_t v11 = v13 == v12++;
      if (!v11) {
        continue;
      }
    }

    uint64_t v9 = *(void *)(v6 + 16);
    unint64_t v3 = v26;
    goto LABEL_23;
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
  __break(1u);
LABEL_44:
  LOBYTE(v47)  = 2;
  CFArrayRef result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Must take zero or more splits",  29LL,  2LL,  "Swift/Collection.swift",  22LL,  v47,  1552LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_44:
    __break(1u);
  }

  swift_bridgeObjectRelease(v3);
  __break(1u);
}

  __break(1u);
  return result;
}

LABEL_48:
      swift_bridgeObjectRelease(v9);
      return (CFArrayRef)*a4;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

  __break(1u);
}

    sub_1000225EC(v82, &qword_10040B728);
    return 0LL;
  }

  __int128 v99 = v116;
  sub_1000226B0(v82, (uint64_t)v116, (uint64_t *)&unk_10040DCC0);
  if (v94(v92, 1LL, v93) == 1)
  {
    sub_1000225EC(v62, (uint64_t *)&unk_10040DCC0);
    sub_1000225EC((uint64_t)v124, (uint64_t *)&unk_10040DCC0);
    sub_10005802C((uint64_t)v99, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_48;
  }

  __int128 v100 = v115;
  sub_100022628(v92, (uint64_t)v115, type metadata accessor for NANInternetSharingStatistics.Requester);
  if ((static DispatchTimeInterval.== infix(_:_:)(v99, v100) & 1) == 0)
  {
    sub_10005802C((uint64_t)v100, type metadata accessor for NANInternetSharingStatistics.Requester);
    sub_1000225EC(v62, (uint64_t *)&unk_10040DCC0);
    sub_1000225EC((uint64_t)v124, (uint64_t *)&unk_10040DCC0);
    sub_10005802C((uint64_t)v99, type metadata accessor for NANInternetSharingStatistics.Requester);
    sub_1000225EC(v82, (uint64_t *)&unk_10040DCC0);
    return 0LL;
  }

  __int128 v101 = *(int *)(v93 + 20);
  unint64_t v102 = (uint64_t)v99;
  unint64_t v103 = (uint64_t)v100;
  char v104 = v99[v101];
  uint64_t v105 = v82;
  uint64_t v106 = *(unsigned __int8 *)(v103 + v101);
  sub_10005802C(v103, type metadata accessor for NANInternetSharingStatistics.Requester);
  sub_1000225EC(v62, (uint64_t *)&unk_10040DCC0);
  sub_1000225EC((uint64_t)v124, (uint64_t *)&unk_10040DCC0);
  sub_10005802C(v102, type metadata accessor for NANInternetSharingStatistics.Requester);
  sub_1000225EC(v105, (uint64_t *)&unk_10040DCC0);
  if (v104 != v106) {
    return 0LL;
  }
LABEL_43:
  uint64_t v95 = v54[13];
  uint64_t v96 = (double *)&v114[v95];
  unint64_t v97 = v114[v95 + 24];
  uint64_t v98 = &v53[v95];
  if ((v97 & 1) != 0)
  {
    if ((v98[24] & 1) == 0) {
      return 0LL;
    }
  }

  else if ((v98[24] & 1) != 0 {
         || *v96 != *(double *)v98
  }
         || v96[1] != *((double *)v98 + 1)
         || v96[2] != *((double *)v98 + 2))
  {
    return 0LL;
  }

  return 1LL;
}

  _StringGuts.grow(_:)(20LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v27._countAndFlagsBits  = v18;
  v27._object  = v22;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v22);
  v28._countAndFlagsBits  = 62LL;
  v28._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v28);
  return 0xD000000000000011LL;
}

      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v106)(v96, 1LL, 1LL, v108);
      sub_10005802C((uint64_t)v103, type metadata accessor for NANAttribute.CustomDeviceInformation);
      __break(1u);
LABEL_49:
      sub_10032BF08();
LABEL_29:
      int v48 = v88;
      if ((v37 & 1) == 0) {
        goto LABEL_51;
      }
      sub_1000586C0(v110[7] + v33 * v107, v88, (uint64_t *)&unk_10040CC50);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v48, 0LL, 1LL, v108);
      sub_10029FF60(v97, v48 + *(int *)(v105 + 28) + (uint64_t)*(int *)(v87 + 40));
      sub_10029EE00(v48, 1, (uint64_t *)&v110, v33, v28);
      sub_1000225EC(v48, &qword_10040E420);
      *a2  = (uint64_t)v110;
      swift_endAccess(v109);
    }

    swift_release(v76);
    return;
  }

uint64_t sub_10003BFD0(const __SCPreferences *a1, id a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  CFArrayRef v7 = (void *)_SCNetworkInterfaceCreateWithBSDName(kCFAllocatorDefault, v6, 0xFFFFFFFFLL);

  if (!v7)
  {
    _StringGuts.grow(_:)(42LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    *(void *)&__int128 v95 = 0xD000000000000028LL;
    *((void *)&v95 + 1)  = 0x8000000100362E20LL;
    v24._countAndFlagsBits  = (uint64_t)a2;
    v24._object  = (void *)a3;
    String.append(_:)(v24);
    return 0LL;
  }

  SCNetworkSetRef v8 = SCNetworkSetCopyCurrent(a1);
  if (!v8)
  {

    return 0LL;
  }

  uint64_t v9 = v8;
  if (!SCNetworkSetEstablishDefaultInterfaceConfiguration(v8, v7) && SCError())
  {

    return 0LL;
  }

  CFArrayRef v10 = SCNetworkServiceCopyAll(a1);
  if (!v10
    || (CFArrayRef v11 = v10,
        *(void *)&__int128 v95 = 0LL,
        type metadata accessor for SCNetworkService(0LL),
        uint64_t v13 = v12,
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v11, &v95, v12),
        v11,
        (unsigned int v14 = (id *)v95) == 0LL))
  {

    return 0LL;
  }

  unint64_t v90 = (void *)a3;
  uint64_t v15 = v95 & 0xFFFFFFFFFFFFFF8LL;
  if ((unint64_t)v95 >> 62)
  {
    else {
      a3  = v95;
    }
    swift_bridgeObjectRetain(v95);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(a3);
    swift_bridgeObjectRelease(v14);
    if (v16) {
      goto LABEL_8;
    }
LABEL_108:
    swift_bridgeObjectRelease(v14);
LABEL_109:
    *(void *)&__int128 v95 = 0LL;
    *((void *)&v95 + 1)  = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(*((void *)&v95 + 1));
    *(void *)&__int128 v95 = 0xD000000000000023LL;
    *((void *)&v95 + 1)  = 0x8000000100362E80LL;
    v79._countAndFlagsBits  = (uint64_t)a2;
    v79._object  = v90;
    String.append(_:)(v79);

    return 0LL;
  }

  uint64_t v16 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (!v16) {
    goto LABEL_108;
  }
LABEL_8:
  prefs  = a1;
  uint64_t v89 = v13;
  uint64_t v92 = v9;
  id v17 = 0LL;
  unint64_t v18 = 0LL;
  uint64_t v9 = (void *)((unint64_t)v14 & 0xC000000000000001LL);
  while (1)
  {
    if (v9)
    {
      uint64_t v19 = (const __SCNetworkService *)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v14);
    }

    else
    {
      uint64_t v19 = (const __SCNetworkService *)v14[v18 + 4];
    }

    a3  = (uint64_t)v19;
    BOOL v20 = __OFADD__(v18++, 1LL);
    if (v20)
    {
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:

      swift_bridgeObjectRelease(v15);
      return 0LL;
    }

    if (v17) {
      goto LABEL_10;
    }
    uint64_t v21 = SCNetworkServiceGetInterface(v19);
    if (v21) {
      break;
    }
LABEL_9:
    id v17 = 0LL;
LABEL_10:

    if (v18 == v16)
    {
      swift_bridgeObjectRelease(v14);
      uint64_t v9 = v92;
      if (v17)
      {
        a2  = v17;
        BOOL v26 = v17;
        goto LABEL_31;
      }

      goto LABEL_109;
    }
  }

  uint64_t v22 = v21;
  if (!CFEqual(v21, v7))
  {
    while (1)
    {
      uint64_t v23 = v22;
      uint64_t v22 = SCNetworkInterfaceGetInterface(v22);

      if (!v22) {
        goto LABEL_9;
      }
      if (CFEqual(v22, v7))
      {
        id v17 = (id)a3;
        a3  = (uint64_t)v22;
        goto LABEL_10;
      }
    }
  }

  swift_bridgeObjectRelease(v14);

  a2  = (id)a3;
  BOOL v26 = 0LL;
  id v17 = (id)a3;
  uint64_t v9 = v92;
LABEL_31:
  id v27 = v26;
  SCNetworkProtocolRef v28 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv4);
  int v29 = v28;
  if (v28)
  {
LABEL_34:
    int v93 = v17;
    unint64_t v31 = v28;
    uint64_t v32 = SCNetworkProtocolGetConfiguration(v29);
    if (!v32) {
      goto LABEL_36;
    }
    os_log_type_t v33 = v32;
    *(void *)&__int128 v95 = 0LL;
    type metadata accessor for CFString(0LL);
    uint64_t v35 = v34;
    uint64_t v36 = sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v33,  &v95,  v35,  (char *)&type metadata for Any + 8,  v36);

    unint64_t v37 = v95;
    if (!(void)v95) {
LABEL_36:
    }
      unint64_t v37 = sub_10000D52C((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for CFString(0LL);
    uint64_t v39 = v38;
    uint64_t v96 = v38;
    *(void *)&__int128 v95 = kSCValNetIPv4ConfigMethodDHCP;
    sub_100022594(&v95, v94);
    uint64_t v40 = (id)kSCPropNetIPv4ConfigMethod;
    uint64_t v41 = (id)kSCValNetIPv4ConfigMethodDHCP;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
    sub_10001F5A8(v94, v40, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v43 = sub_10000AF70( &qword_1004049F0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_100338658);
    Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v37);
    int v45 = SCNetworkProtocolSetConfiguration(v29, isa);

    if (v45)
    {
      SCNetworkProtocolRef v46 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv6);
      char v47 = v46;
      if (v46) {
        goto LABEL_41;
      }
      SCNetworkServiceAddProtocolType((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv6);
      SCNetworkProtocolRef v48 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv6);
      if (v48)
      {
        char v47 = v48;
LABEL_41:
        protocol  = v47;
        unint64_t v49 = v46;
        uint64_t v50 = SCNetworkProtocolGetConfiguration(v47);
        if (!v50
          || (uint64_t v51 = v50,
              *(void *)&__int128 v95 = 0LL,
              static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v50,  &v95,  v39,  (char *)&type metadata for Any + 8,  v43),  v51,  (unint64_t v52 = v95) == 0))
        {
          unint64_t v52 = sub_10000D52C((uint64_t)_swiftEmptyArrayStorage);
        }

        uint64_t v96 = v39;
        *(void *)&__int128 v95 = kSCValNetIPv6ConfigMethodAutomatic;
        sub_100022594(&v95, v94);
        __int128 v53 = (id)kSCPropNetIPv6ConfigMethod;
        uint64_t v54 = (id)kSCValNetIPv6ConfigMethodAutomatic;
        char v55 = swift_isUniquelyReferenced_nonNull_native(v52);
        sub_10001F5A8(v94, v53, v55);

        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v56 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v52);
        a3  = (uint64_t)v47;
        int v57 = SCNetworkProtocolSetConfiguration(v47, v56);

        if (!v57) {
          goto LABEL_99;
        }
        id v17 = v93;
        if (!SCNetworkServiceSetEnabled((SCNetworkServiceRef)a2, 0)
          || (CFArrayRef v58 = SCNetworkSetCopyAll(prefs)) == 0LL
          || (CFArrayRef v59 = v58,
              *(void *)&__int128 v95 = 0LL,
              type metadata accessor for SCNetworkSet(0LL),
              static Array._conditionallyBridgeFromObjectiveC(_:result:)(v59, &v95, v60),
              v59,
              (uint64_t v15 = v95) == 0))
        {
LABEL_99:

          return 0LL;
        }

        uint64_t v61 = v95 & 0xFFFFFFFFFFFFFF8LL;
        int v81 = v29;
        uint64_t v62 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        if (!v62)
        {
LABEL_118:

          swift_bridgeObjectRelease(v15);
          return 1LL;
        }

LABEL_50:
        unint64_t v63 = 0LL;
        unint64_t v91 = v15 & 0xC000000000000001LL;
        uint64_t v82 = v15;
        uint64_t v83 = v15 + 32;
        uint64_t v84 = v61;
        prefsa  = (SCPreferencesRef)v62;
        while (1)
        {
          if (v91)
          {
            uint64_t v64 = (const __SCNetworkSet *)specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v15);
          }

          else
          {
            if (v63 >= *(void *)(v61 + 16)) {
              goto LABEL_111;
            }
            uint64_t v64 = (const __SCNetworkSet *)*(id *)(v83 + 8 * v63);
          }

          uint64_t v9 = v64;
          BOOL v20 = __OFADD__(v63++, 1LL);
          if (v20)
          {
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
            goto LABEL_113;
          }

          CFArrayRef v65 = SCNetworkSetCopyServices(v64);
          if (v65)
          {
            CFArrayRef v66 = v65;
            *(void *)&__int128 v95 = 0LL;
            static Array._conditionallyBridgeFromObjectiveC(_:result:)(v65, &v95, v89);

            uint64_t v67 = v95;
            if (!(void)v95)
            {

              goto LABEL_94;
            }

            if ((unint64_t)v95 >> 62)
            {
              else {
                uint64_t v78 = v95;
              }
              swift_bridgeObjectRetain(v95);
              uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v78);
              if (!v61)
              {
LABEL_92:

                swift_bridgeObjectRelease_n(v67, 2LL);
LABEL_93:
                uint64_t v61 = v84;
LABEL_94:
                uint64_t v62 = (uint64_t)prefsa;
                goto LABEL_52;
              }
            }

            else
            {
              uint64_t v61 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              swift_bridgeObjectRetain(v95);
              if (!v61) {
                goto LABEL_92;
              }
            }

            if ((v67 & 0xC000000000000001LL) != 0) {
              id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v67);
            }
            else {
              id v68 = *(id *)(v67 + 32);
            }
            uint64_t v69 = v68;
            uint64_t v85 = sub_10000AF70( &qword_100405DC8,  (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService,  (uint64_t)&unk_100339220);
            char v70 = static _CFObject.== infix(_:_:)(v69, a2, v89, v85);

            if ((v70 & 1) == 0)
            {
              if (v61 == 1) {
                goto LABEL_71;
              }
              if ((v67 & 0xC000000000000001LL) != 0)
              {
                uint64_t v72 = specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v67);
                char v73 = static _CFObject.== infix(_:_:)(v72, a2, v89, v85);
                swift_unknownObjectRelease(v72);
                if ((v73 & 1) == 0)
                {
                  if (v61 != 2)
                  {
                    a3  = 2LL;
                    do
                    {
                      uint64_t v74 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v67);
                      id v17 = (id)(a3 + 1);
                      if (__OFADD__(a3, 1LL)) {
                        goto LABEL_112;
                      }
                      uint64_t v15 = v74;
                      char v75 = static _CFObject.== infix(_:_:)(v74, a2, v89, v85);
                      swift_unknownObjectRelease(v15);
                      if ((v75 & 1) != 0) {
                        goto LABEL_65;
                      }
                      ++a3;
                    }

                    while (v17 != (id)v61);
                  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

            __break(1u);
            return;
          }

LABEL_71:
                  swift_bridgeObjectRelease_n(v67, 2LL);
                  id v17 = v93;
                  a3  = (uint64_t)protocol;
                  uint64_t v15 = v82;
                  goto LABEL_93;
                }
              }

              else
              {
                id v17 = *(id *)(v67 + 40);
                char v76 = static _CFObject.== infix(_:_:)(v17, a2, v89, v85);

                if ((v76 & 1) == 0)
                {
                  if (v61 != 2)
                  {
                    a3  = 6LL;
                    while (1)
                    {
                      uint64_t v15 = a3 - 3;
                      if (__OFADD__(a3 - 4, 1LL)) {
                        break;
                      }
                      id v17 = *(id *)(v67 + 8 * a3);
                      char v77 = static _CFObject.== infix(_:_:)(v17, a2, v89, v85);

                      if ((v77 & 1) != 0) {
                        goto LABEL_65;
                      }
                      ++a3;
                      if (v15 == v61) {
                        goto LABEL_71;
                      }
                    }

        uint64_t v12 = 0;
        uint64_t v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  CFArrayRef result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v226);
  __break(1u);
  return result;
}

LABEL_113:
                    __break(1u);
LABEL_114:
                    if (v15 >= 0) {
                      uint64_t v80 = v61;
                    }
                    else {
                      uint64_t v80 = v15;
                    }
                    swift_bridgeObjectRetain(v15);
                    uint64_t v62 = _CocoaArrayWrapper.endIndex.getter(v80);
                    swift_bridgeObjectRelease(v15);
                    if (!v62) {
                      goto LABEL_118;
                    }
                    goto LABEL_50;
                  }

                  goto LABEL_71;
                }
              }
            }

LABEL_65:
            swift_bridgeObjectRelease_n(v67, 2LL);
            uint64_t v71 = SCNetworkServiceGetInterface((SCNetworkServiceRef)a2);
            uint64_t v61 = v84;
            if (!v71)
            {

              id v17 = v93;
              a3  = (uint64_t)protocol;
              uint64_t v15 = v82;
              goto LABEL_94;
            }

            unsigned int v14 = (id *)v71;
            id v17 = v93;
            a3  = (uint64_t)protocol;
            uint64_t v62 = (uint64_t)prefsa;
            uint64_t v15 = v82;
            if (!SCNetworkSetContainsInterface((SCNetworkSetRef)v9, v71)
              && !SCNetworkSetAddService((SCNetworkSetRef)v9, (SCNetworkServiceRef)a2))
            {
              goto LABEL_103;
            }
          }

          else
          {
          }

                  uint64_t v160 = v300 | (v319 << 8);
                  os_log_type_t v161 = v153[7];
                  unint64_t v344 = v153;
                  swift_bridgeObjectRelease(v153);
                  unint64_t v162 = (void *)(v161 + *(void *)(v332 + 72) * v3);
                  char v163 = v162[5];
                  __int16 v164 = v162[6];
                  uint64_t v165 = v162[7];
                  uint64_t v166 = v162[8];
                  uint64_t v167 = v162[9];
                  v168  = v162[10];
                  uint64_t v169 = v162[11];
                  uint64_t v170 = v303;
                  v162[5]  = v302;
                  v162[6]  = v170;
                  unint64_t v171 = v305;
                  v162[7]  = v304;
                  v162[8]  = v171;
                  int v172 = v336;
                  v162[9]  = v160;
                  v162[10]  = v172;
                  v162[11]  = v301;
                  sub_10002091C(v163, v164, v165, v166, v167, v168, v169);
                  sub_100021074(v367);
                  sub_100020A04((uint64_t)&v380);
                  sub_100020A04((uint64_t)&v378);
                  __int8 v312 = sub_10011D848;
                  unint64_t v313 = v299;
                  uint64_t v318 = sub_10011D8C0;
                  v319  = v356;
                  LOBYTE(v3)  = v354;
                  uint64_t v38 = v358;
                  goto LABEL_79;
                }

                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
                goto LABEL_165;
              }

              __int128 v134 = v326;
              sub_100022628((uint64_t)v335, v326, type metadata accessor for DNSRecords.SRV);
              uint64_t v371 = *(_WORD *)(v134 + 32);
              __int128 v135 = *(_OWORD *)(v134 + 16);
              uint64_t v369 = *(_OWORD *)v134;
              uint64_t v370 = v135;
              uint64_t v372 = v369;
              uint64_t v136 = (uint64_t)v309;
              uint64_t v373 = *v308;
              uint64_t v374 = *((_WORD *)v308 + 8);
              sub_100057FE8(v134, (uint64_t)v309, type metadata accessor for DNSRecords.SRV);
              __int8 v137 = *(unsigned __int8 *)(v342 + 80);
              uint64_t v138 = (v137 + 16) & ~v137;
              uint64_t v139 = swift_allocObject(&unk_1003E66B8, (char *)v311 + v138, v137 | 7);
              sub_100022628(v136, v139 + v138, type metadata accessor for DNSRecords.SRV);
              sub_1000209DC((uint64_t)&v372);
              sub_1000209DC((uint64_t)&v373);
              sub_100021018((uint64_t)v316, v317);
              uint64_t v140 = v333;
              sub_100057FE8(v134, v333, type metadata accessor for DNSRecords.SRV);
              (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v342 + 56))(v140, 0LL, 1LL, v341);
              uint64_t v141 = swift_allocObject(&unk_1003E66E0, 32LL, 7LL);
              *(void *)(v141 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10011D7B0;
              *(void *)(v141 + 24)  = v139;
              uint64_t v336 = v139;
              unint64_t v356 = v141;
              sub_100021018((uint64_t)v322, v323);
              uint64_t v142 = v344;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v344);
              uint64_t v360 = v142;
              unint64_t v145 = sub_10001C214((uint64_t)&v369);
              uint64_t v146 = v142[2];
              unint64_t v147 = (v144 & 1) == 0;
              unint64_t v148 = v146 + v147;
              if (__OFADD__(v146, v147)) {
                goto LABEL_162;
              }
              uint64_t v149 = v144;
              uint64_t v150 = v142[3];
              LODWORD(v323)  = v144;
              if (v150 >= v148)
              {
                uint64_t v36 = v355;
                unint64_t v185 = isUniquelyReferenced_nonNull_native;
                uint64_t v38 = v358;
                *(void *)&v350  = v145;
                if ((v185 & 1) == 0) {
                  sub_10013D91C();
                }
              }

              else
              {
                sub_100138F84(v148, isUniquelyReferenced_nonNull_native);
                uint64_t v151 = sub_10001C214((uint64_t)&v369);
                uint64_t v36 = v355;
                uint64_t v38 = v358;
                if ((v149 & 1) != (v152 & 1)) {
                  goto LABEL_167;
                }
                *(void *)&v350  = v151;
              }

              unint64_t v186 = v360;
              swift_bridgeObjectRelease(0x8000000000000000LL);
              swift_bridgeObjectRetain(v186);
              if ((v323 & 1) == 0)
              {
                uint64_t v187 = (uint64_t)v325;
                sub_100119E18(*(void (**)(__int128 *__return_ptr, uint64_t))(v356 + 16), (uint64_t)v325);
                uint64_t v188 = v350;
                v186[((unint64_t)v350 >> 6) + 8] |= 1LL << v350;
                uint64_t v189 = v186[6] + 40 * v188;
                uint64_t v190 = v370;
                *(_OWORD *)uint64_t v189 = v369;
                *(_OWORD *)(v189 + swift_unknownObjectWeakDestroy(v0 + 16) = v190;
                *(_WORD *)(v189 + 32)  = v371;
                sub_1000586C0(v187, v186[7] + *(void *)(v332 + 72) * v188, &qword_1004086B0);
                uint64_t v191 = v186[2];
                unint64_t v158 = __OFADD__(v191, 1LL);
                uint64_t v192 = v191 + 1;
                if (v158) {
                  goto LABEL_164;
                }
                v186[2]  = v192;
                sub_1000209DC((uint64_t)&v372);
                sub_1000209DC((uint64_t)&v373);
              }

              uint64_t v193 = v186[7];
              unint64_t v344 = v186;
              swift_bridgeObjectRelease(v186);
              sub_100057104(v333, v193 + *(void *)(v332 + 72) * v350 + *(int *)(v340 + 64), &qword_100404DB0);
              sub_100020A04((uint64_t)&v372);
              sub_100020A04((uint64_t)&v373);
              sub_10005802C(v326, type metadata accessor for DNSRecords.SRV);
              v316  = sub_10011D7B0;
              v317  = v336;
              uint64_t v322 = sub_10011D80C;
              uint64x2_t v323 = v356;
              goto LABEL_79;
            }

            uint64_t v118 = (uint64_t)v335;
            uint64_t v363 = *((_WORD *)v335 + 16);
            uint64_t v119 = *((_OWORD *)v335 + 1);
            uint64_t v361 = *(_OWORD *)v335;
            v362  = v119;
            uint64_t v120 = *v306;
            unint64_t v381 = v361;
            unint64_t v382 = v120;
            unint64_t v383 = *((_WORD *)v306 + 8);
            uint64_t v121 = swift_allocObject(&unk_1003E6758, 50LL, 7LL);
            uint64_t v122 = *(_OWORD *)(v118 + 16);
            *(_OWORD *)(v121 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v118;
            *(_OWORD *)(v121 + 32)  = v122;
            *(_WORD *)(v121 + 48)  = *(_WORD *)(v118 + 32);
            sub_1000209DC((uint64_t)&v381);
            sub_1000209DC((uint64_t)&v382);
            sub_1000209DC((uint64_t)&v381);
            sub_1000209DC((uint64_t)&v382);
            sub_100021018((uint64_t)v314, v315);
            uint64_t v123 = swift_allocObject(&unk_1003E6780, 32LL, 7LL);
            *(void *)(v123 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10011D88C;
            *(void *)(v123 + 24)  = v121;
            unint64_t v356 = v123;
            sub_100021018((uint64_t)v320, v321);
            uint64_t v124 = v344;
            LODWORD(v321)  = swift_isUniquelyReferenced_nonNull_native(v344);
            uint64_t v360 = v124;
            uint64_t v125 = sub_10001C214((uint64_t)&v361);
            uint64_t v126 = v124[2];
            LODWORD(v336)  = v127;
            uint64_t v128 = (v127 & 1) == 0;
            __int128 v129 = v126 + v128;
            if (__OFADD__(v126, v128)) {
              goto LABEL_163;
            }
            uint64_t v130 = v124[3];
            uint64_t v305 = v121;
            if (v130 >= v129)
            {
              *(void *)&v350  = v125;
              if ((v321 & 1) == 0) {
                sub_10013D91C();
              }
              uint64_t v133 = v336;
            }

            else
            {
              sub_100138F84(v129, v321);
              __int128 v131 = sub_10001C214((uint64_t)&v361);
              uint64_t v133 = v336;
              if ((v336 & 1) != (v132 & 1)) {
                goto LABEL_167;
              }
              *(void *)&v350  = v131;
            }

            v173  = v360;
            swift_bridgeObjectRelease(0x8000000000000000LL);
            swift_bridgeObjectRetain(v173);
            if ((v133 & 1) == 0)
            {
              unint64_t v174 = (uint64_t)v325;
              sub_100119E18(*(void (**)(__int128 *__return_ptr, uint64_t))(v356 + 16), (uint64_t)v325);
              unint64_t v175 = v350;
              v173[((unint64_t)v350 >> 6) + 8] |= 1LL << v350;
              unint64_t v176 = v173[6] + 40 * v175;
              uint64_t v177 = v362;
              *(_OWORD *)unint64_t v176 = v361;
              *(_OWORD *)(v176 + swift_unknownObjectWeakDestroy(v0 + 16) = v177;
              *(_WORD *)(v176 + 32)  = v363;
              sub_1000586C0(v174, v173[7] + *(void *)(v332 + 72) * v175, &qword_1004086B0);
              unint64_t v178 = v173[2];
              unint64_t v158 = __OFADD__(v178, 1LL);
              __n128 v179 = v178 + 1;
              if (v158) {
                goto LABEL_166;
              }
              v173[2]  = v179;
              sub_1000209DC((uint64_t)&v381);
              sub_1000209DC((uint64_t)&v382);
            }

            __n128 v180 = v173[7];
            unint64_t v344 = v173;
            swift_bridgeObjectRelease(v173);
            uint64_t v181 = v180 + *(void *)(v332 + 72) * v350;
            uint64_t v182 = *(void *)(v181 + 8);
            unint64_t v183 = *(void *)(v181 + 24);
            *(_WORD *)(v181 + 32)  = v363;
            uint64_t v184 = v362;
            *(_OWORD *)uint64_t v181 = v361;
            *(_OWORD *)(v181 + swift_unknownObjectWeakDestroy(v0 + 16) = v184;
            swift_bridgeObjectRelease(v183);
            swift_bridgeObjectRelease(v182);
            sub_100020A04((uint64_t)&v381);
            sub_100020A04((uint64_t)&v382);
            v314  = sub_10011D88C;
            unint64_t v315 = v305;
            v320  = sub_10011D8C0;
            v321  = v356;
LABEL_79:
            sub_10005802C(v349, type metadata accessor for AWDLActionFrame.ServiceResponse);
            uint64_t v34 = 1;
            LODWORD(v336)  = 1;
            if (v37 == v35) {
              goto LABEL_157;
            }
            break;
          case 2u:
LABEL_25:
            CFArrayRef v58 = *v30;
            CFArrayRef v59 = *((unsigned __int16 *)v30 + 1);
            uint64_t v60 = v30[4];
            uint64_t v61 = v30[5];
            v350  = *(_OWORD *)(v30 + 8);
            uint64_t v62 = *((unsigned __int16 *)v30 + 16);
            unint64_t v63 = *((void *)v30 + 5);
            unint64_t v3 = v58 | (v59 << 16) | (v60 << 32) | (v61 << 40) | ((unint64_t)*((unsigned __int16 *)v30 + 3) << 48);
            uint64_t v64 = *((void *)v30 + 3);
            CFArrayRef v65 = v359 + v357[12];
            swift_bridgeObjectRelease(*(void *)(v65 + 40));
            *(void *)CFArrayRef v65 = v3;
            LOBYTE(v3)  = v354;
            *(_OWORD *)(v65 + 8)  = v350;
            *(void *)(v65 + 24)  = v64;
            *(void *)(v65 + 32)  = v62;
            uint64_t v38 = v358;
            *(void *)(v65 + 40)  = v63;
            goto LABEL_32;
          case 3u:
LABEL_29:
            uint64_t v67 = v30[24];
            id v68 = *((void *)v30 + 1);
            uint64_t v69 = v30[16] | ((unint64_t)*((unsigned int *)v30 + 5) << 32);
            char v70 = v359 + v357[8];
            *(void *)char v70 = *v30 | ((unint64_t)*((unsigned __int16 *)v30 + 1) << 16) | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40) | ((unint64_t)v30[6] << 48) | ((unint64_t)v30[7] << 56);
            *(void *)(v70 + 8)  = v68;
            *(void *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = v69;
            *(_WORD *)(v70 + 24)  = v67;
            goto LABEL_7;
          case 5u:
LABEL_36:
            uint64_t v78 = *((unsigned __int16 *)v30 + 2);
            Swift::String v79 = (v353[1] & 1) == 0 && v78 == *v353;
            uint64_t v80 = *v30;
            int v81 = *((unsigned __int16 *)v30 + 1);
            uint64_t v82 = *((unsigned int *)v30 + 2);
            uint64_t v83 = *((void *)v30 + 2);
            uint64_t v84 = *((void *)v30 + 3);
            LODWORD(v356)  = !v79;
            uint64_t v85 = v80 | (v81 << 16) | (v78 << 32);
            unint64_t v3 = v359 + v357[10];
            sub_10011D8A4(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24));
            *(void *)unint64_t v3 = v85;
            *(void *)(v3 + 8)  = v82;
            *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v83;
            *(void *)(v3 + 24)  = v84;
            LOBYTE(v3)  = v354;
            uint64_t v36 = v355;
            uint64_t v38 = v358;
            goto LABEL_7;
          case 6u:
LABEL_6:
            uint64_t v40 = v359 + v357[14];
            sub_1000225EC(v40, (uint64_t *)&unk_1004104A0);
            sub_100022628((uint64_t)v30, v40, type metadata accessor for AWDLActionFrame.DataPathState);
            uint64_t v41 = type metadata accessor for AWDLActionFrame.DataPathState(0LL);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))( v40,  0LL,  1LL,  v41);
            goto LABEL_7;
          case 7u:
LABEL_31:
            uint64_t v71 = *v30;
            uint64_t v72 = *((void *)v30 + 1);
            char v73 = *((void *)v30 + 2);
            uint64_t v74 = (void *)(v359 + v357[13]);
            swift_bridgeObjectRelease(v74[2]);
            *uint64_t v74 = v71;
            v74[1]  = v72;
            v74[2]  = v73;
            uint64_t v38 = v358;
LABEL_32:
            uint64_t v36 = v355;
            goto LABEL_7;
          case 9u:
LABEL_27:
            CFArrayRef v66 = v359 + v357[16];
            *(_WORD *)CFArrayRef v66 = *(_WORD *)v30;
            *(_BYTE *)(v66 + 2)  = 0;
            goto LABEL_7;
          case 0xBu:
LABEL_43:
            unint64_t v91 = *((unsigned int *)v30 + 2) | ((unint64_t)v30[12] << 32) | ((unint64_t)v30[13] << 40);
            uint64_t v92 = *((void *)v30 + 4);
            int v93 = v359 + v357[15];
            *(void *)int v93 = *(void *)v30;
            *(void *)(v93 + 8)  = v91;
            *(_OWORD *)(v93 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_OWORD *)v30 + 1);
            *(void *)(v93 + 32)  = v92;
            *(_BYTE *)(v93 + 40)  = 0;
            goto LABEL_7;
          case 0xCu:
LABEL_41:
            char v86 = *((void *)v30 + 2);
            uint64_t v87 = *((void *)v30 + 5);
            CFAllocatorRef v88 = v30[24] | ((unint64_t)*((unsigned int *)v30 + 7) << 32);
            uint64_t v89 = v30[32] | ((unint64_t)*((unsigned int *)v30 + 9) << 32);
            unint64_t v90 = v359 + v357[9];
            *(_OWORD *)unint64_t v90 = *(_OWORD *)v30;
            *(void *)(v90 + swift_unknownObjectWeakDestroy(v0 + 16) = v86;
            *(void *)(v90 + 24)  = v88;
            *(void *)(v90 + 32)  = v89;
            *(void *)(v90 + 40)  = v87;
            *(_BYTE *)(v90 + 48)  = 0;
            goto LABEL_7;
          case 0x11u:
            unint64_t v44 = *((unsigned int *)v30 + 2) | ((unint64_t)*((unsigned __int16 *)v30 + 6) << 32);
            int v45 = *((void *)v30 + 2);
            SCNetworkProtocolRef v46 = v30[24] | ((unint64_t)*((unsigned int *)v30 + 7) << 32);
            char v47 = *((unsigned __int16 *)v30 + 16) | ((unint64_t)v30[34] << 16) | ((unint64_t)v30[35] << 24) | ((unint64_t)v30[36] << 32) | ((unint64_t)v30[37] << 40) | ((unint64_t)v30[38] << 48);
            SCNetworkProtocolRef v48 = v30[39];
            unint64_t v49 = (unint64_t *)(v359 + v357[17]);
            const __SCNetworkProtocol *v49 = *(unsigned int *)v30 | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40) | ((unint64_t)v30[6] << 48);
            v49[1]  = v44;
            v49[2]  = v45;
            void v49[3] = v46;
            v49[4]  = v47 | (v48 << 56);
            if (v37 == v35) {
              goto LABEL_89;
            }
            uint64_t v50 = v36 + v38 * v37;
            do
            {
              if (v39 == v37) {
                goto LABEL_155;
              }
              sub_100057FE8(v50, (uint64_t)v30, type metadata accessor for AWDLActionFrame.AWDLAttribute);
              uint64_t v51 = swift_getEnumCaseMultiPayload(v30, v27);
              if (v51 != 17)
              {
                switch(v51)
                {
                  case 1:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_13;
                  case 2:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_25;
                  case 3:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_29;
                  case 5:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_36;
                  case 6:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_6;
                  case 7:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_31;
                  case 9:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_27;
                  case 11:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_43;
                  case 12:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_41;
                  case 18:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_34;
                  default:
                    ++v37;
                    uint64_t v348 = 1;
                    goto LABEL_45;
                }
              }

              ++v37;
              unint64_t v52 = *((unsigned int *)v30 + 2) | ((unint64_t)*((unsigned __int16 *)v30 + 6) << 32);
              __int128 v53 = *((void *)v30 + 2);
              uint64_t v54 = v30[24] | ((unint64_t)*((unsigned int *)v30 + 7) << 32);
              char v55 = *((unsigned __int16 *)v30 + 16) | ((unint64_t)v30[34] << 16) | ((unint64_t)v30[35] << 24) | ((unint64_t)v30[36] << 32) | ((unint64_t)v30[37] << 40) | ((unint64_t)v30[38] << 48);
              uint64_t v56 = v30[39];
              int v57 = (unint64_t *)(v359 + v357[17]);
              *int v57 = *(unsigned int *)v30 | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40) | ((unint64_t)v30[6] << 48);
              v57[1]  = v52;
              v57[2]  = v53;
              v57[3]  = v54;
              v57[4]  = v55 | (v56 << 56);
              v50 += v38;
            }

            while (v35 != v37);
LABEL_89:
            swift_bridgeObjectRelease(v347);
LABEL_90:
            v195  = v344;
            uint64_t v194 = v345;
            uint64_t v32 = v353;
            if ((v356 & 1) != 0) {
              goto LABEL_91;
            }
            goto LABEL_153;
          case 0x12u:
LABEL_34:
            char v75 = *((void *)v30 + 1);
            char v76 = *(unsigned int *)v30 | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40);
            char v77 = (unint64_t *)(v359 + v357[18]);
            swift_bridgeObjectRelease(v77[1]);
            *char v77 = v76;
            v77[1]  = v75;
            uint64_t v38 = v358;
            goto LABEL_7;
          default:
LABEL_45:
            sub_10005802C((uint64_t)v30, type metadata accessor for AWDLActionFrame.AWDLAttribute);
LABEL_7:
            if (v37 != v35) {
              goto LABEL_8;
            }
            swift_bridgeObjectRelease(v347);
            if (v348 & 1 | ((v3 & 1) == 0)) {
              goto LABEL_90;
            }
            v195  = v344;
            uint64_t v194 = v345;
            uint64_t v32 = v353;
            LOBYTE(v34)  = v356;
            goto LABEL_87;
        }

        break;
      }
    }
  }

  uint64_t v194 = v13;
  if ((v3 & 1) != 0)
  {
    v314  = 0LL;
    unint64_t v315 = 0LL;
    v320  = 0LL;
    v321  = 0LL;
    __int8 v312 = 0LL;
    unint64_t v313 = 0LL;
    uint64_t v318 = 0LL;
    v319  = 0LL;
    v316  = 0LL;
    v317  = 0LL;
    uint64_t v322 = 0LL;
    uint64x2_t v323 = 0LL;
    LODWORD(v336)  = 0;
    v195  = _swiftEmptyDictionarySingleton;
LABEL_87:
    uint64_t v196 = v359 + v357[17];
    *(_OWORD *)uint64_t v196 = xmmword_100337010;
    *(void *)(v196 + 24)  = 0LL;
    *(void *)(v196 + 32)  = 0LL;
    *(void *)(v196 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    if ((v34 & 1) == 0) {
      goto LABEL_153;
    }
LABEL_91:
    if ((v336 & 1) != 0) {
      goto LABEL_92;
    }
  }

  else
  {
    v314  = 0LL;
    unint64_t v315 = 0LL;
    v320  = 0LL;
    v321  = 0LL;
    __int8 v312 = 0LL;
    unint64_t v313 = 0LL;
    uint64_t v318 = 0LL;
    v319  = 0LL;
    v316  = 0LL;
    v317  = 0LL;
    uint64_t v322 = 0LL;
    uint64x2_t v323 = 0LL;
    v195  = _swiftEmptyDictionarySingleton;
    if ((v34 & 1) == 0) {
      goto LABEL_153;
    }
  }

  __n128 v200 = v194;
  v201  = v359 + v357[10];
  unsigned int v202 = *(void *)(v201 + 24);
  if (v202 >> 60 == 15)
  {
    unsigned int v203 = 0LL;
    uint64_t v204 = 0LL;
    unsigned int v202 = 0xF000000000000000LL;
  }

  else
  {
    unsigned int v203 = *(unsigned int *)(v201 + 8);
    uint64_t v204 = *(void *)(v201 + 16);
    sub_100020AFC(v204, *(void *)(v201 + 24));
  }

  if (qword_100404168 != -1) {
    swift_once(&qword_100404168, sub_1000C34DC);
  }
  uint64_t v205 = static AWDLActionFrame.ServiceParameter.SSTH.zero;
  uint64_t v206 = qword_100410740;
  io_iterator_t v207 = qword_100410748;
  if (v202 >> 60 == 15)
  {
    sub_100020AFC(qword_100410740, qword_100410748);
    sub_100057CA0(v203, v204, v202);
    sub_100057CA0(v205, v206, v207);
LABEL_153:
    swift_bridgeObjectRelease(v195);
    goto LABEL_154;
  }

  if (static AWDLActionFrame.ServiceParameter.SSTH.zero != (_DWORD)v203)
  {
    sub_100057CA0(v203, v204, v202);
    goto LABEL_153;
  }

  sub_100020AFC(qword_100410740, qword_100410748);
  sub_100058430(v203, v204, v202);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v204, v202);
  uint64_t v209 = v208;
  sub_1000208D8(v206, v207);
  sub_100057CA0(v203, v204, v202);
  sub_100057CA0(v203, v204, v202);
  uint64_t v32 = v353;
  uint64_t v194 = v200;
  if ((v209 & 1) == 0) {
    goto LABEL_153;
  }
  while (1)
  {
LABEL_92:
    uint64_t v197 = v359 + v357[10];
    uint64_t v198 = *(void *)(v197 + 24) >> 60;
    if (v198 == 15) {
      uint64_t v199 = 0;
    }
    else {
      uint64_t v199 = *(_WORD *)(v197 + 4);
    }
    *uint64_t v32 = v199;
    *((_BYTE *)v32 + 2)  = v198 > 0xE;
    uint64_t v210 = (void *)(v359 + v357[20]);
    uint64_t v211 = (void *)*v210;
    unint64_t v325 = v210;
    *uint64_t v210 = &_swiftEmptySetSingleton;
    uint64_t v212 = v195[8];
    uint64_t v311 = v195 + 8;
    uint64_t v360 = v211;
    unint64_t v213 = 1LL << *((_BYTE *)v195 + 32);
    unint64_t v214 = -1LL;
    if (v213 < 64) {
      unint64_t v214 = ~(-1LL << v213);
    }
    unint64_t v3 = v214 & v212;
    uint64_t v215 = (unint64_t)(v213 + 63) >> 6;
    uint64_t v307 = (__int128 *)(v215 - 1);
    swift_bridgeObjectRetain(v195);
    unint64_t v216 = 0LL;
    uint64_t v326 = v215;
    v217  = (uint64_t *)&unk_1004086B8;
    v308  = (__int128 *)(v215 - 5);
    uint64_t v309 = v195 + 13;
    unint64_t v344 = v195;
    if (v3) {
      break;
    }
LABEL_112:
    uint64_t v234 = v216 + 1;
    if (!__OFADD__(v216, 1LL))
    {
      if (v234 >= v326)
      {
        uint64_t v222 = v195;
      }

      else
      {
        uint64_t v235 = v311[v234];
        if (v235)
        {
LABEL_115:
          v219  = (v235 - 1) & v235;
          uint64_t v220 = __clz(__rbit64(v235)) + (v234 << 6);
          unint64_t v216 = v234;
          goto LABEL_111;
        }

        if (v216 + 2 >= v326)
        {
          uint64_t v222 = v195;
          ++v216;
        }

        else
        {
          uint64_t v235 = v311[v216 + 2];
          if (v235)
          {
            uint64_t v234 = v216 + 2;
            goto LABEL_115;
          }

          if (v216 + 3 >= v326)
          {
            uint64_t v222 = v195;
            v216 += 2LL;
          }

          else
          {
            uint64_t v235 = v311[v216 + 3];
            if (v235)
            {
              uint64_t v234 = v216 + 3;
              goto LABEL_115;
            }

            uint64_t v234 = v216 + 4;
            if (v216 + 4 >= v326)
            {
              uint64_t v222 = v195;
              v216 += 3LL;
            }

            else
            {
              uint64_t v235 = v311[v234];
              if (v235) {
                goto LABEL_115;
              }
              while (v308 != (__int128 *)v216)
              {
                uint64_t v235 = v309[v216++];
                if (v235)
                {
                  uint64_t v234 = v216 + 4;
                  goto LABEL_115;
                }
              }

              uint64_t v222 = v195;
              unint64_t v216 = (uint64_t)v307;
            }
          }
        }
      }

      uint64_t v236 = sub_100002274(v217);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v236 - 8) + 56LL))(v194, 1LL, 1LL, v236);
      v219  = 0LL;
      goto LABEL_118;
    }

LABEL_52:
          uint64_t v9 = v92;
          if (v63 == v62) {
            goto LABEL_118;
          }
        }
      }
    }

    return 0LL;
  }

  SCNetworkServiceAddProtocolType((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv4);
  SCNetworkProtocolRef v30 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv4);
  if (v30)
  {
    int v29 = v30;
    goto LABEL_34;
  }

  return 0LL;
}

    sub_10005802C((uint64_t)v103, type metadata accessor for NANAttribute.CustomDeviceInformation);
    goto LABEL_53;
  }

  __break(1u);
LABEL_40:
  SCNetworkProtocolRef v30 = sub_1002CA7C0(0LL, v30[2] + 1LL, 1, v30);
  *(void *)(v33 + v22)  = v30;
  while (1)
  {
    SCNetworkProtocolRef v46 = v30[2];
    int v45 = v30[3];
    unint64_t v37 = v46 + 1;
    if (v46 >= v45 >> 1)
    {
      SCNetworkProtocolRef v30 = sub_1002CA7C0((void *)(v45 > 1), v46 + 1, 1, v30);
      *(void *)(v33 + v22)  = v30;
    }

    v30[2]  = v37;
    char v47 = (uint64_t)&v30[v46] - v46;
    *(_WORD *)(v47 + 32)  = v28;
    *(_BYTE *)(v47 + 34)  = BYTE2(v28);
    *(_BYTE *)(v47 + 35)  = BYTE3(v28);
    *(_BYTE *)(v47 + 36)  = BYTE4(v28);
    *(_BYTE *)(v47 + 37)  = BYTE5(v28);
    *(_BYTE *)(v47 + 38)  = BYTE6(v28);
    SCNetworkProtocolRef v48 = *a2;
    swift_endAccess(v109);
    if (!*(void *)(v48 + 16)
      || (SCNetworkProtocolRef v28 = v102 & 0xFFFFFFFFFFFFLL, v49 = sub_10001C15C(v102 & 0xFFFFFFFFFFFFLL), (v50 & 1) == 0))
    {
      sub_10005802C((uint64_t)v103, type metadata accessor for NANAttribute.CustomDeviceInformation);
      __break(1u);
LABEL_51:
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v106)(v48, 1LL, 1LL, v108);
      sub_10005802C((uint64_t)v103, type metadata accessor for NANAttribute.CustomDeviceInformation);
      __break(1u);
      goto LABEL_52;
    }

    sub_1000226B0(*(void *)(v48 + 56) + v49 * v107, (uint64_t)v20, (uint64_t *)&unk_10040CC50);
    unint64_t v31 = v20[*(int *)(v108 + 48)];
    sub_1000225EC((uint64_t)v20, (uint64_t *)&unk_10040CC50);
    swift_beginAccess(a2, v109, 33LL, 0LL);
    uint64_t v22 = swift_isUniquelyReferenced_nonNull_native(*a2);
    unint64_t v110 = (void *)*a2;
    uint64_t v51 = (uint64_t)v110;
    *a2  = 0x8000000000000000LL;
    os_log_type_t v33 = sub_10001C15C(v28);
    __int128 v53 = *(void *)(v51 + 16);
    uint64_t v54 = (v52 & 1) == 0;
    char v55 = v53 + v54;
    if (__OFADD__(v53, v54))
    {
      __break(1u);
      goto LABEL_42;
    }

    LOBYTE(v37)  = v52;
    if (*(void *)(v51 + 24) >= v55)
    {
      BOOL v20 = v100;
      if ((v22 & 1) != 0)
      {
        CFArrayRef v58 = (uint64_t)v101;
        if ((v52 & 1) == 0) {
          goto LABEL_45;
        }
      }

      else
      {
        sub_10032BF08();
        CFArrayRef v58 = (uint64_t)v101;
        if ((v37 & 1) == 0) {
          goto LABEL_45;
        }
      }
    }

    else
    {
      sub_100242E54(v55, v22);
      uint64_t v56 = sub_10001C15C(v28);
      BOOL v20 = v100;
      if ((v37 & 1) != (v57 & 1)) {
        goto LABEL_53;
      }
      os_log_type_t v33 = v56;
      CFArrayRef v58 = (uint64_t)v101;
      if ((v37 & 1) == 0)
      {
LABEL_45:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v99, 1LL, 1LL, v108);
        sub_10005802C((uint64_t)v103, type metadata accessor for NANAttribute.CustomDeviceInformation);
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        sub_10032BF08();
        if ((v37 & 1) == 0) {
          goto LABEL_48;
        }
LABEL_38:
        uint64_t v84 = v96;
        sub_1000586C0(v110[7] + v33 * v107, v96, (uint64_t *)&unk_10040CC50);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v84, 0LL, 1LL, v108);
        (*(void (**)(uint64_t, uint64_t))(v95 + 80))(v84, v94);
        sub_10029EE00(v84, 1, (uint64_t *)&v110, v33, v28);
        sub_1000225EC(v84, &qword_10040E420);
        *a2  = (uint64_t)v110;
        swift_endAccess(v109);
        return sub_10005802C((uint64_t)v103, type metadata accessor for NANAttribute.CustomDeviceInformation);
      }
    }

    CFArrayRef v59 = v104;
    uint64_t v60 = v31 | v104;
    unint64_t v31 = v99;
    sub_1000586C0(v110[7] + v33 * v107, v99, (uint64_t *)&unk_10040CC50);
    unint64_t v37 = v108;
    uint64_t v106 = *(void *)(v106 + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v31, 0LL, 1LL, v108);
    *(_BYTE *)(v31 + *(int *)(v37 + 48))  = v60 & 1;
    sub_10029EE00(v31, 1, (uint64_t *)&v110, v33, v28);
    sub_1000225EC(v31, &qword_10040E420);
    *a2  = (uint64_t)v110;
    swift_endAccess(v109);
    if (v59) {
      break;
    }
    while (1)
    {
      swift_beginAccess(a2, v109, 33LL, 0LL);
      uint64_t v22 = swift_isUniquelyReferenced_nonNull_native(*a2);
      unint64_t v110 = (void *)*a2;
      char v77 = (uint64_t)v110;
      *a2  = 0x8000000000000000LL;
      os_log_type_t v33 = sub_10001C15C(v28);
      Swift::String v79 = *(void *)(v77 + 16);
      uint64_t v80 = (v78 & 1) == 0;
      int v81 = v79 + v80;
      if (__OFADD__(v79, v80)) {
        break;
      }
      LOBYTE(v37)  = v78;
      if (*(void *)(v77 + 24) >= v81)
      {
        if ((v22 & 1) == 0) {
          goto LABEL_47;
        }
        if ((v78 & 1) != 0) {
          goto LABEL_38;
        }
      }

      else
      {
        sub_100242E54(v81, v22);
        uint64_t v82 = sub_10001C15C(v28);
        if ((v37 & 1) != (v83 & 1)) {
          goto LABEL_53;
        }
        os_log_type_t v33 = v82;
        if ((v37 & 1) != 0) {
          goto LABEL_38;
        }
      }

  uint64_t v265 = v508 ^ 1;
LABEL_53:
  v545  = v265;
  int v266 = sub_100304074(v232, v233, v234, v235);
  uint64_t v267 = v498;
  sub_1002A980C(v498);
  uint64_t v268 = v266;
  uint64_t v269 = v267;
  uint64_t v270 = swift_release(v268);
  uint64_t v271 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v65 + 48);
  if (v271(v269, 1LL, v237, v270) == 1)
  {
    __int8 v272 = sub_1000225EC(v269, &qword_100407450);
  }

  else
  {
    uint64_t v276 = v491;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v491, v269, v237);
    __int8 v272 = (*(uint64_t (**)(os_log_s **, char *, uint64_t))(v65 + 40))(v519, v276, v237);
  }

  __int8 v277 = sub_100304074(v272, v273, v274, v275);
  sub_1002A9828(v238);
  unint64_t v278 = swift_release(v277);
  if (v271(v238, 1LL, v237, v278) == 1)
  {
    sub_1000225EC(v238, &qword_100407450);
  }

  else
  {
    unint64_t v279 = v492;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v492, v238, v237);
    (*(void (**)(os_log_s **, char *, uint64_t))(v65 + 40))(v513, v279, v237);
  }

  if (v545)
  {
    unint64_t v280 = v237;
    uint64_t v281 = swift_retain_n(v48, 2LL);
    uint64_t v282 = (os_log_s *)Logger.logObject.getter(v281);
    uint64_t v283 = static os_log_type_t.error.getter(v282);
    if (os_log_type_enabled(v282, v283))
    {
      uint64_t v284 = swift_slowAlloc(44LL, -1LL);
      uint64_t v285 = swift_slowAlloc(96LL, -1LL);
      v539  = v285;
      *(_DWORD *)uint64_t v284 = 136316162;
      swift_beginAccess(v513, &v529, 0LL, 0LL);
      v286  = DispatchTimeInterval.description.getter();
      uint64_t v288 = v287;
      v537  = (void *)sub_10000235C(v286, v287, &v539);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v537, v538);
      swift_bridgeObjectRelease(v288);
      *(_WORD *)(v284 + 12)  = 2080;
      swift_beginAccess(v519, &v528, 0LL, 0LL);
      v289  = DispatchTimeInterval.description.getter();
      uint64_t v291 = v290;
      v537  = (void *)sub_10000235C(v289, v290, &v539);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v537, v538);
      swift_bridgeObjectRelease(v291);
      *(_WORD *)(v284 + 22)  = 2080;
      swift_beginAccess(v546, &v527, 0LL, 0LL);
      uint64_t v292 = v546[0];
      uint64_t v293 = v546[1];
      swift_bridgeObjectRetain(v546[1]);
      v537  = (void *)sub_10000235C(v292, v293, &v539);
      uint64_t v236 = (uint64_t)v520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v537, v538);
      swift_bridgeObjectRelease(v293);
      *(_WORD *)(v284 + 32)  = 1024;
      swift_beginAccess(&v545, &v526, 0LL, 0LL);
      LODWORD(v537)  = v545;
      __int8 v294 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v537, (char *)&v537 + 4);
      *(_WORD *)(v284 + 38)  = 1024;
      v298  = sub_100304074(v294, v295, v296, v297);
      LOBYTE(v293)  = sub_1002A9C04();
      swift_release(v523);
      swift_release(v298);
      LODWORD(v537)  = v293 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v537, (char *)&v537 + 4);
      swift_release(v523);
      _os_log_impl( (void *)&_mh_execute_header,  v282,  v283,  "Time since oldest service added: %s and last service added: %s leakReason: %s triggerTTR: %{BOOL}d Service activ e on sleep/wake:%{BOOL}d",  (uint8_t *)v284,  0x2Cu);
      swift_arrayDestroy(v285, 3LL, &type metadata for Any[8]);
      uint64_t v299 = v285;
      CFArrayRef v65 = v522;
      SCNetworkProtocolRef v48 = v523;
      swift_slowDealloc(v299, -1LL, -1LL);
      v300  = v284;
      uint64_t v189 = (uint64_t)v516;
      swift_slowDealloc(v300, -1LL, -1LL);
    }

    else
    {

      uint64_t v301 = swift_release_n(v48, 2LL);
    }

    uint64_t v305 = sub_100304074(v301, v302, v303, v304);
    v306  = sub_1002A9C04();
    uint64_t v307 = swift_release(v305);
    uint64_t v237 = v280;
    if ((v306 & 1) != 0)
    {
      v308  = v515;
      (*(void (**)(char *, uint64_t, __n128))(v65 + 8))(v515, v280, v307);
      *(void *)v308  = 300LL;
      ((void (*)(char *, void, uint64_t))v506)(v308, v507, v280);
      swift_beginAccess(v546, &v530, 1LL, 0LL);
      v539  = v546[0];
      v540  = v546[1];
      swift_bridgeObjectRetain(v546[1]);
      v309._countAndFlagsBits  = 0xD00000000000001BLL;
      v309._object  = (void *)0x800000010036ABF0LL;
      String.append(_:)(v309);
      uint64_t v310 = v546[1];
      v546[0]  = v539;
      v546[1]  = v540;
      swift_bridgeObjectRelease(v310);
    }
  }

  uint64_t v311 = v48;
  __int8 v312 = v499;
  unint64_t v313 = v311;
  WiFiInterface.preferences.getter();
  v314  = v501;
  LOBYTE(v311)  = Preferences.disableAWDLLinkWhenInactive.getter(v501);
  (*(void (**)(char *, uint64_t))(v500 + 8))(v312, v314);
  sub_100057FE8(v514, v518, type metadata accessor for AWDLIdleActivity);
  unint64_t v315 = *(void (**)(uint64_t, void *, uint64_t))(v65 + 16);
  v315(v517, v521, v237);
  v316  = 0;
  v317  = *(void (**)(uint64_t, uint64_t))(v65 + 8);
  v317(v517, v237);
  sub_10005802C(v518, type metadata accessor for AWDLIdleActivity);
  sub_100057FE8(v514, v189, type metadata accessor for AWDLIdleActivity);
  uint64_t v318 = (uint64_t)v502;
  v315((uint64_t)v502, v521, v237);
  if (v316)
  {
    v319  = static DispatchTimeInterval.< infix(_:_:)(v189 + *(int *)(v494 + 20), v318);
    v320  = v318;
    v321  = v319;
    v317(v320, v237);
    uint64_t v322 = sub_10005802C(v189, type metadata accessor for AWDLIdleActivity);
    uint64x2_t v323 = (uint64_t)v515;
    v324  = v237;
    unint64_t v325 = (uint64_t)v503;
    if (!v321)
    {
      uint64_t v326 = (os_log_s *)Logger.logObject.getter(v322);
      uint64_t v327 = static os_log_type_t.error.getter(v326);
      if (os_log_type_enabled(v326, v327))
      {
        v328  = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v328  = 0;
        _os_log_impl((void *)&_mh_execute_header, v326, v327, "Disabling AWDL due to inactivity", v328, 2u);
        uint64_t v329 = v328;
        uint64x2_t v323 = (uint64_t)v515;
        swift_slowDealloc(v329, -1LL, -1LL);
      }

      WiFiInterface.linkState.setter(0);
      uint64_t v236 = (uint64_t)v520;
    }
  }

  else
  {
    v317(v318, v237);
    sub_10005802C(v189, type metadata accessor for AWDLIdleActivity);
    uint64x2_t v323 = (uint64_t)v515;
    v324  = v237;
    unint64_t v325 = (uint64_t)v503;
  }

  uint64x2_t v330 = (uint64_t)v519;
  swift_beginAccess(v519, &v537, 0LL, 0LL);
  LOBYTE(v330)  = static DispatchTimeInterval.< infix(_:_:)(v330, (uint64_t)v512);
  v315(v325, v511, v324);
  if ((v330 & 1) != 0)
  {
    v317(v325, v324);
LABEL_80:
    v337  = swift_bridgeObjectRelease(v497);
    ((void (*)(void *, uint64_t, __n128))v317)(v511, v324, v337);
    v317((uint64_t)v512, v324);
    v317((uint64_t)v521, v324);
    v317(v323, v324);
    v317((uint64_t)v513, v324);
    uint64_t v338 = v519;
    uint64_t v339 = v324;
    goto LABEL_81;
  }

  v331  = (uint64_t)v513;
  swift_beginAccess(v513, &v536, 0LL, 0LL);
  LOBYTE(v331)  = static DispatchTimeInterval.< infix(_:_:)(v325, v331);
  v317(v325, v324);
  if ((v331 & 1) != 0) {
    goto LABEL_80;
  }
  __int8 v332 = v514;
  v333  = static DispatchTimeInterval.< infix(_:_:)(v514, v323);
  __int8 v334 = v332;
  v335  = v489;
  sub_100057FE8(v334, v489, type metadata accessor for AWDLIdleActivity);
  if (v333)
  {
    sub_10005802C(v335, type metadata accessor for AWDLIdleActivity);
    goto LABEL_80;
  }

  uint64_t v336 = static DispatchTimeInterval.< infix(_:_:)(v335 + *(int *)(v494 + 20), v323);
  sub_10005802C(v335, type metadata accessor for AWDLIdleActivity);
  if (v336) {
    goto LABEL_80;
  }
  v341  = v313;
  uint64_t v343 = v546[0];
  v342  = v546[1];
  swift_retain_n(v341, 2LL);
  unint64_t v344 = v514;
  sub_100057FE8(v514, v236, type metadata accessor for AWDLIdleActivity);
  v345  = v344;
  v346  = v488;
  sub_100057FE8(v345, v488, type metadata accessor for AWDLIdleActivity);
  swift_retain_n(v341, 6LL);
  uint64_t v347 = swift_bridgeObjectRetain_n(v342, 2LL);
  uint64_t v348 = (os_log_s *)Logger.logObject.getter(v347);
  v349  = static os_log_type_t.error.getter(v348);
  if (os_log_type_enabled(v348, (os_log_type_t)v349))
  {
    LODWORD(v522)  = v349;
    v525  = v348;
    v350  = swift_slowAlloc(72LL, -1LL);
    v518  = swift_slowAlloc(192LL, -1LL);
    v539  = v518;
    *(_DWORD *)v350  = 136316674;
    uint64_t v351 = v485;
    sub_1003074D0(v485);
    swift_release(v341);
    uint64_t v352 = DispatchTimeInterval.description.getter();
    v354  = v353;
    v317(v351, v510);
    v534  = (void *)sub_10000235C(v352, v354, &v539);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v534, v535);
    swift_release(v341);
    swift_bridgeObjectRelease(v354);
    *(_WORD *)(v350 + 12)  = 2080;
    swift_bridgeObjectRetain(v342);
    v534  = (void *)sub_10000235C(v343, v342, &v539);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v534, v535);
    unint64_t v355 = swift_bridgeObjectRelease_n(v342, 3LL);
    *(_WORD *)(v350 + 22)  = 2080;
    uint64_t v359 = sub_100304074(v355, v356, v357, v358);
    sub_1002A8174(&v534);
    swift_release(v359);
    uint64_t v360 = (uint64_t)v534;
    v533  = v534;
    uint64_t v361 = v486;
    v362  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v486);
    uint64_t v363 = v361;
    objc_super v364 = v487;
    __int32 v366 = sub_100302E9C( (void (*)(char *, char *))sub_1003333C8,  0LL,  v363,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Never,  v362,  (uint64_t)&protocol witness table for Never,  v365);
    v487  = v364;
    swift_bridgeObjectRelease(v360);
    v534  = (void *)v366;
    uint64_t v367 = sub_100002274((uint64_t *)&unk_100410510);
    v516  = (char *)sub_1000572E4( &qword_10040FEE0,  (uint64_t *)&unk_100410510,  (uint64_t)&protocol conformance descriptor for [A]);
    v517  = v367;
    v368  = BidirectionalCollection<>.joined(separator:)(45LL, 0xE100000000000000LL, v367, v516);
    uint64_t v370 = v369;
    swift_bridgeObjectRelease(v366);
    v534  = (void *)sub_10000235C(v368, v370, &v539);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v534, v535);
    swift_release_n(v341, 2LL);
    swift_bridgeObjectRelease(v370);
    v524  = v350;
    *(_WORD *)(v350 + 32)  = 2080;
    uint64_t v375 = sub_100304074(v371, v372, v373, v374);
    sub_1002A81E4((uint64_t *)&v534);
    swift_release(v375);
    uint64_t v376 = (uint64_t)v534;
    v377  = v534[2];
    if (v377)
    {
      v533  = _swiftEmptyArrayStorage;
      sub_1000696B4(0, v377, 0);
      uint64_t v378 = v533;
      v509  = (char *)v376;
      uint64_t v379 = (uint64_t *)(v376 + 40);
      do
      {
        unint64_t v380 = *(v379 - 1);
        unint64_t v381 = *v379;
        v533  = v378;
        unint64_t v383 = v378[2];
        unint64_t v382 = v378[3];
        swift_bridgeObjectRetain(v381);
        if (v383 >= v382 >> 1)
        {
          sub_1000696B4(v382 > 1, v383 + 1, 1);
          uint64_t v378 = v533;
        }

        v379 += 3;
        v378[2]  = v383 + 1;
        uint64_t v384 = &v378[2 * v383];
        v384[4]  = v380;
        v384[5]  = v381;
        --v377;
      }

      while (v377);
      swift_bridgeObjectRelease(v509);
    }

    else
    {
      swift_bridgeObjectRelease(v534);
      uint64_t v378 = _swiftEmptyArrayStorage;
    }

    v394  = v524;
    v534  = v378;
    v395  = BidirectionalCollection<>.joined(separator:)(45LL, 0xE100000000000000LL, v517, v516);
    v397  = v396;
    swift_bridgeObjectRelease(v378);
    v534  = (void *)sub_10000235C(v395, v397, &v539);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v534, v535);
    v398  = v523;
    swift_release_n(v523, 2LL);
    swift_bridgeObjectRelease(v397);
    *(_WORD *)(v394 + 42)  = 2048;
    v403  = sub_100304074(v399, v400, v401, v402);
    sub_1002A7FEC();
    v405  = v404;
    swift_release(v398);
    swift_release(v403);
    v534  = (void *)v405;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v534, v535);
    swift_release(v398);
    *(_WORD *)(v394 + 52)  = 2080;
    v406  = (uint64_t)v520;
    v407  = DispatchTimeInterval.description.getter();
    v409  = v408;
    v534  = (void *)sub_10000235C(v407, v408, &v539);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v534, v535);
    swift_bridgeObjectRelease(v409);
    sub_10005802C(v406, type metadata accessor for AWDLIdleActivity);
    *(_WORD *)(v394 + 62)  = 2080;
    v410  = v488;
    v411  = DispatchTimeInterval.description.getter();
    v413  = v412;
    v534  = (void *)sub_10000235C(v411, v412, &v539);
    uint64_t v386 = v398;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v534, v535);
    swift_bridgeObjectRelease(v413);
    sub_10005802C(v410, type metadata accessor for AWDLIdleActivity);
    v414  = v525;
    _os_log_impl( (void *)&_mh_execute_header,  v525,  (os_log_type_t)v522,  "Last TTR %s leak %s, browses: %s, advertises: %s and services count: %ld no Tx/Rx for %s/%s",  (uint8_t *)v394,  0x48u);
    v415  = v518;
    swift_arrayDestroy(v518, 6LL, &type metadata for Any[8]);
    swift_slowDealloc(v415, -1LL, -1LL);
    swift_slowDealloc(v394, -1LL, -1LL);

    uint64_t v385 = v510;
  }

  else
  {
    swift_bridgeObjectRelease_n(v342, 2LL);

    swift_release_n(v341, 8LL);
    sub_10005802C(v236, type metadata accessor for AWDLIdleActivity);
    sub_10005802C(v346, type metadata accessor for AWDLIdleActivity);
    uint64_t v385 = v510;
    uint64_t v386 = v341;
  }

  if ((sub_100307828((void (*)(uint64_t))sub_1003074D0, 43200LL) & 1) != 0
    || (swift_beginAccess(&v545, &v534, 0LL, 0LL), !v545))
  {
    v476  = swift_bridgeObjectRelease(v497);
    ((void (*)(void *, uint64_t, __n128))v317)(v511, v385, v476);
    v317((uint64_t)v512, v385);
    v317((uint64_t)v521, v385);
    v317((uint64_t)v515, v385);
    v317((uint64_t)v513, v385);
    uint64_t v338 = v519;
    uint64_t v339 = v385;
  }

  else
  {
    v420  = sub_100304074(v416, v417, v418, v419);
    sub_1002A9E08();
    swift_release(v420);
    v539  = 0LL;
    v540  = 0xE000000000000000LL;
    _StringGuts.grow(_:)(65LL);
    v421._countAndFlagsBits  = 0x20676E696B61654CLL;
    v421._object  = (void *)0xE800000000000000LL;
    String.append(_:)(v421);
    swift_beginAccess(v546, &v533, 0LL, 0LL);
    v422  = v546[0];
    v423  = (void *)v546[1];
    swift_bridgeObjectRetain(v546[1]);
    v424._countAndFlagsBits  = v422;
    v424._object  = v423;
    String.append(_:)(v424);
    swift_bridgeObjectRelease(v423);
    v425._countAndFlagsBits  = 0xD000000000000022LL;
    v425._object  = (void *)0x800000010036AAE0LL;
    String.append(_:)(v425);
    v426._countAndFlagsBits  = DispatchTimeInterval.description.getter();
    object  = v426._object;
    String.append(_:)(v426);
    swift_bridgeObjectRelease(object);
    v428._countAndFlagsBits  = 0xD000000000000013LL;
    v428._object  = (void *)0x800000010036AB10LL;
    String.append(_:)(v428);
    v525  = (os_log_t)v539;
    v429  = v540;
    v539  = 0LL;
    v540  = 0xE000000000000000LL;
    _StringGuts.grow(_:)(163LL);
    v430._countAndFlagsBits  = 0xD000000000000020LL;
    v430._object  = (void *)0x800000010036AB30LL;
    String.append(_:)(v430);
    v431  = v429;
    v432._countAndFlagsBits  = DispatchTimeInterval.description.getter();
    v433  = v432._object;
    String.append(_:)(v432);
    swift_bridgeObjectRelease(v433);
    v434._countAndFlagsBits  = 0x6E696B61654C0A0ALL;
    v434._object  = (void *)0xEA00000000002067LL;
    String.append(_:)(v434);
    swift_bridgeObjectRetain(v423);
    v435._countAndFlagsBits  = v422;
    v435._object  = v423;
    String.append(_:)(v435);
    swift_bridgeObjectRelease(v423);
    v436._object  = (void *)0x800000010036AB60LL;
    v436._countAndFlagsBits  = 0xD000000000000011LL;
    String.append(_:)(v436);
    v437  = *(void **)(v386 + *(void *)(*(void *)v386 + 624LL));
    v438  = v481;
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v482 + 8))(v438, v483);
    v440  = [v437 stringFromDate:isa];

    v441  = static String._unconditionallyBridgeFromObjectiveC(_:)(v440);
    v443  = v442;

    v444._countAndFlagsBits  = v441;
    v444._object  = v443;
    String.append(_:)(v444);
    swift_bridgeObjectRelease(v443);
    v445._countAndFlagsBits  = 0xD00000000000001BLL;
    v445._object  = (void *)0x800000010036AB80LL;
    String.append(_:)(v445);
    v450  = sub_100304074(v446, v447, v448, v449);
    sub_1002A8174(&v532);
    swift_release(v450);
    v451  = v532;
    v531  = v532;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v531, v486);
    swift_bridgeObjectRelease(v451);
    v452._object  = (void *)0x800000010036ABA0LL;
    v452._countAndFlagsBits  = 0xD000000000000011LL;
    String.append(_:)(v452);
    v457  = sub_100304074(v453, v454, v455, v456);
    sub_1002A81E4(&v532);
    swift_release(v457);
    v458  = v532;
    v531  = v532;
    v459  = sub_100002274((uint64_t *)&unk_10040ED10);
    _print_unlocked<A, B>(_:_:)( &v531,  &v539,  v459,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    swift_bridgeObjectRelease(v458);
    v460._countAndFlagsBits  = 0xD00000000000002FLL;
    v460._object  = (void *)0x800000010036ABC0LL;
    String.append(_:)(v460);
    v461._countAndFlagsBits  = v480;
    v462  = v497;
    v461._object  = v497;
    String.append(_:)(v461);
    swift_bridgeObjectRelease(v462);
    v463._countAndFlagsBits  = 34LL;
    v463._object  = (void *)0xE100000000000000LL;
    String.append(_:)(v463);
    v464  = v539;
    v465  = v540;
    type metadata accessor for P2PTimer(0LL);
    v466  = (uint64_t)v495;
    variable initialization expression of AWDLPeer.lastUpdated();
    v467  = type metadata accessor for DispatchTime(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v467 - 8) + 56LL))(v466, 0LL, 1LL, v467);
    v468  = v386 + *(void *)(*(void *)v386 + 608LL);
    swift_beginAccess(v468, &v539, 33LL, 0LL);
    sub_100057104(v466, v468, &qword_100405D40);
    swift_endAccess(&v539);
    v539  = (uint64_t)v525;
    v540  = v431;
    v541  = v464;
    v542  = v465;
    v543  = 1;
    v469  = v504;
    v470  = swift_getAssociatedTypeWitness(255LL, v484, v504, &protocol requirements base descriptor for P2PControls);
    v471  = swift_getAssociatedConformanceWitness( v505,  v469,  v470,  &protocol requirements base descriptor for AWDLController,  &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    v472  = *(void (**)(uint64_t *, uint64_t, uint64_t))(v471 + 144);
    v473  = swift_checkMetadataState(0LL, v470);
    v474  = v487;
    v472(&v539, v473, v471);
    swift_bridgeObjectRelease(v465);
    if (v474)
    {
      swift_bridgeObjectRelease(v431);
      swift_errorRelease();
    }

    else
    {
      v475  = swift_bridgeObjectRelease(v431);
    }

    v477  = v510;
    ((void (*)(void *, uint64_t, __n128))v317)(v511, v510, v475);
    v317((uint64_t)v512, v477);
    v317((uint64_t)v521, v477);
    v317((uint64_t)v515, v477);
    v317((uint64_t)v513, v477);
    uint64_t v338 = v519;
    uint64_t v339 = v477;
  }

void sub_10003CB90(unsigned int a1, uint64_t a2)
{
}

void sub_10003CBB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
}

void sub_10003CBE0(uint64_t a1, uint64_t a2)
{
}

void sub_10003CC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_10003CC20(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10003CC40(uint64_t a1, uint64_t a2)
{
  return AppleDevice.loadCapabilities(on:)(a1, a2);
}

void sub_10003CC6C(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

void sub_10003CC90(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

id sub_10003CCB4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 200LL);
  id v5 = *(id *)(*(void *)v1 + 208LL);
  *a1  = v2;
  a1[1]  = v3;
  a1[2]  = v5;
  swift_retain(v2);
  swift_retain(v3);
  return v5;
}

uint64_t sub_10003CCFC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *a1  = v2;
  return swift_retain(v2);
}

uint64_t sub_10003CD0C(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AppleDevice.findOrCreateInterface(for:on:with:)( a1,  *(Swift::String *)&a2,  (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL)).value._countAndFlagsBits;
}

uint64_t sub_10003CD30(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *v1;
  unsigned int v14 = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  swift_retain();
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  uint64_t v12 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v9, v6, a1, v11, v12);
}

void static ApplePlatform.enumerateInterfaceAddresses(_:)(uint64_t (*a1)(__int128 *))
{
  uint64_t v8 = 0LL;
  if (!getifaddrs(&v8))
  {
    uint64_t v3 = v8;
    if (v8)
    {
      uint64_t v4 = v8;
      do
      {
        ifa_flags  = v4->ifa_flags;
        __int128 v7 = *(_OWORD *)&v4->ifa_next;
        __int128 v9 = *(_OWORD *)&v4->ifa_next;
        unsigned int v10 = ifa_flags;
        __int128 v11 = *(_OWORD *)&v4->ifa_addr;
        __int128 v12 = *(_OWORD *)&v4->ifa_dstaddr;
        unsigned __int8 v6 = a1(&v9);
        if (v1) {
          break;
        }
        uint64_t v4 = (ifaddrs *)v7;
      }

      while ((v6 & ((void)v7 != 0LL)) == 1);
    }

    freeifaddrs(v3);
  }

uint64_t sub_10003CF68( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(uint64_t), BOOL a7, uint64_t a8, uint64_t a9)
{
  BOOL v30 = a7;
  unint64_t v31 = a6;
  int v32 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a9;
  uint64_t v13 = type metadata accessor for Optional(0LL, a9);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v28 - v18;
  sub_1000586C0(a1 + 8, (uint64_t)v34, &qword_100405DD8);
  sub_1000586C0((uint64_t)v34, (uint64_t)&v35, &qword_100405DD8);
  uint64_t result = v35;
  if (v35)
  {
    uint64_t v21 = String.init(cString:)(v35);
    if (v21 == a2 && v22 == a3)
    {
      swift_bridgeObjectRelease(a3);
    }

    else
    {
      uint64_t v24 = v22;
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, a2, a3, 0LL);
      swift_bridgeObjectRelease(v24);
      if ((v25 & 1) == 0) {
        return 1;
      }
    }

    sub_1000586C0(a1 + 24, (uint64_t)v33, &qword_100405DD0);
    uint64_t result = sub_1000586C0((uint64_t)v33, (uint64_t)&v36, &qword_100405DD0);
    if (v36)
    {
      if (*(unsigned __int8 *)(v36 + 1) == v32)
      {
        BOOL v26 = v30;
        v31(a1);
        if (!v9)
        {
          uint64_t v27 = v28;
          (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(v28, v19, v13);
          (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v27, v13);
          BOOL v26 = (*(unsigned int (**)(char *, uint64_t))(*(void *)(v29 - 8) + 48LL))(v17, 1LL) == 1;
          (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
        }

        return v26;
      }

      return 1;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static ApplePlatform.withInterface<A>(_:matchingAllInFamily:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = Array.init()(a7);
  static ApplePlatform.enumerateInterfaceAddresses(_:)((uint64_t (*)(__int128 *))sub_1000545D0);
  if (v7) {
    swift_bridgeObjectRelease(v9);
  }
  return v9;
}

uint64_t sub_10003D21C( uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a7;
  uint64_t v32 = a6;
  os_log_type_t v33 = a5;
  int v34 = a4;
  uint64_t v30 = type metadata accessor for Optional(0LL, a9);
  uint64_t v28 = *(void *)(v30 - 8);
  uint64_t v13 = __chkstk_darwin(v30);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = *(void *)(a9 - 8);
  uint64_t v17 = __chkstk_darwin(v13);
  uint64_t v29 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  BOOL v20 = (char *)&v28 - v19;
  sub_1000586C0(a1 + 8, (uint64_t)v36, &qword_100405DD8);
  sub_1000586C0((uint64_t)v36, (uint64_t)&v37, &qword_100405DD8);
  uint64_t result = v37;
  if (v37)
  {
    uint64_t v22 = String.init(cString:)(v37);
    uint64_t v24 = v23;
    if (v22 == a2 && v23 == a3)
    {
      swift_bridgeObjectRelease(a3);
    }

    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, a2, a3, 0LL);
      swift_bridgeObjectRelease(v24);
      if ((v25 & 1) == 0) {
        return 1LL;
      }
    }

    sub_1000586C0(a1 + 24, (uint64_t)v35, &qword_100405DD0);
    uint64_t result = sub_1000586C0((uint64_t)v35, (uint64_t)&v38, &qword_100405DD0);
    if (v38)
    {
      if (*(unsigned __int8 *)(v38 + 1) == v34)
      {
        v33(a1);
        if (!v9)
        {
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, a9) == 1)
          {
            (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v30);
          }

          else
          {
            (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, a9);
            BOOL v26 = v29;
            (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v20, a9);
            uint64_t v27 = type metadata accessor for Array(0LL, a9);
            Array.append(_:)(v26, v27);
            (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a9);
          }
        }
      }

      return 1LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t AppleDevice.NetworkPathMonitor.__allocating_init(evaluator:queue:updatedHandler:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, 24LL, 7LL);
  AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(a1, a2, a3, a4);
  return v9;
}

uint64_t AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v9 = swift_allocObject(&unk_1003DD7B0, 32LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v9 + 24)  = a4;
  v16[4]  = sub_10005460C;
  uint64_t v17 = v9;
  v16[0]  = _NSConcreteStackBlock;
  v16[1]  = 1107296256LL;
  v16[2]  = sub_10003D630;
  v16[3]  = &unk_1003DD7C8;
  unsigned int v10 = _Block_copy(v16);
  uint64_t v11 = v17;
  swift_unknownObjectRetain_n(a1, 2LL);
  id v12 = a2;
  swift_retain();
  swift_release(v11);
  nw_path_evaluator_set_update_handler(a1, v12, v10);
  _Block_release(v10);
  swift_unknownObjectRelease(a1);

  uint64_t v13 = *(void *)(v4 + 16);
  uint64_t v14 = swift_unknownObjectRetain(v13);
  nw_path_evaluator_start(v14);
  swift_unknownObjectRelease(v13);
  swift_unknownObjectRelease(a1);

  swift_release(a4);
  return v4;
}

uint64_t sub_10003D5F0(uint64_t result, void (*a2)(uint64_t))
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = swift_unknownObjectRetain(result);
    a2(v4);
    return swift_unknownObjectRelease(v3);
  }

  return result;
}

uint64_t sub_10003D630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t AppleDevice.NetworkPathMonitor.deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  nw_path_evaluator_cancel(v1);
  swift_unknownObjectRelease(v1);
  return v0;
}

uint64_t AppleDevice.NetworkPathMonitor.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  nw_path_evaluator_cancel(v1);
  swift_unknownObjectRelease(v1);
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t AppleDevice.NetworkPathMonitor.path.getter()
{
  uint64_t result = nw_path_evaluator_copy_path(*(void *)(v0 + 16));
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t static AppleDevice.NetworkPathMonitor.statusDescription(from:)(int a1)
{
  uint64_t result = 0x64696C61766E69LL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x6569667369746173LL;
      break;
    case 2:
      uint64_t result = 0x6673697461736E75LL;
      break;
    case 3:
      uint64_t result = 0x6169667369746173LL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E75LL;
      break;
  }

  return result;
}

uint64_t sub_10003D7B0()
{
  if (!*(_BYTE *)(v0 + 16)) {
    return 0x6E696469766F7250LL;
  }
  if (*(_BYTE *)(v0 + 16) == 1) {
    return 0x676E696764697242LL;
  }
  if (*(_OWORD *)v0 == 0LL) {
    return 1701602377LL;
  }
  return 0x74616E696D726554LL;
}

uint64_t sub_10003D83C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_100056548(a1, a2, a3);
  swift_retain();
  sub_100056548(a1, a2, a3);
  uint64_t v8 = swift_retain();
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  p_superclass  = (__objc2_class **)(&OBJC_METACLASS____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver
                                  + 8);
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v36 = v10;
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t type = swift_slowAlloc(64LL, -1LL);
    uint64_t v39 = type;
    *(_DWORD *)uint64_t v12 = 136315394;
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v13 = 0x676E696764697242LL;
        unint64_t v14 = 0xEF64656C69614620LL;
      }

      else
      {
        if (a1 | a2) {
          uint64_t v13 = 0x74616E696D726554LL;
        }
        else {
          uint64_t v13 = 1701602377LL;
        }
        if (a1 | a2) {
          unint64_t v14 = 0xEA00000000006465LL;
        }
        else {
          unint64_t v14 = 0xE400000000000000LL;
        }
      }
    }

    else
    {
      uint64_t v13 = 0x6E696469766F7250LL;
      unint64_t v14 = 0xE900000000000067LL;
    }

    uint64_t v38 = sub_10000235C(v13, v14, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease(v14);
    sub_100056570(a1, a2, a3);
    sub_100056570(a1, a2, a3);
    *(_WORD *)(v12 + 12)  = 2080;
    p_superclass  = &OBJC_METACLASS____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver.superclass;
    uint64_t v15 = (_OWORD *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
    if (*(_BYTE *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
    {
      if (*(_BYTE *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                    + 16) == 1)
      {
        uint64_t v16 = 0x676E696764697242LL;
        unint64_t v17 = 0xEF64656C69614620LL;
      }

      else
      {
        if (*v15 == 0LL) {
          uint64_t v16 = 1701602377LL;
        }
        else {
          uint64_t v16 = 0x74616E696D726554LL;
        }
        if (*v15 == 0LL) {
          unint64_t v17 = 0xE400000000000000LL;
        }
        else {
          unint64_t v17 = 0xEA00000000006465LL;
        }
      }
    }

    else
    {
      unint64_t v17 = 0xE900000000000067LL;
      uint64_t v16 = 0x6E696469766F7250LL;
    }

    uint64_t v38 = sub_10000235C(v16, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_release_n(v3, 2LL);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v36, "Provider state changed: %s -> %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(type, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(type, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    sub_100056570(a1, a2, a3);
    sub_100056570(a1, a2, a3);
    swift_release_n(v3, 2LL);
  }

  uint64_t v18 = (char *)p_superclass[108] + v3;
  if (v18[16] == 1)
  {
    uint64_t v20 = *(void *)v18;
    unint64_t v19 = *((void *)v18 + 1);
    swift_retain_n(v3, 3LL);
    sub_100056548(v20, v19, 1);
    swift_retain();
    uint64_t v21 = sub_100056548(v20, v19, 1);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      typea  = v23;
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = swift_slowAlloc(96LL, -1LL);
      uint64_t v39 = v37;
      *(_DWORD *)uint64_t v24 = 136315650;
      uint64_t v25 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
      unint64_t v26 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                      + 8);
      swift_bridgeObjectRetain(v26);
      uint64_t v38 = sub_10000235C(v25, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_release_n(v4, 2LL);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v24 + 12)  = 2080;
      uint64_t v28 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
      unint64_t v27 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                      + 8);
      swift_bridgeObjectRetain(v27);
      uint64_t v38 = sub_10000235C(v28, v27, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_release_n(v4, 2LL);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v24 + 22)  = 2080;
      swift_bridgeObjectRetain(v19);
      uint64_t v38 = sub_10000235C(v20, v19, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      sub_100056570(v20, v19, 1);
      sub_100056570(v20, v19, 1);
      swift_bridgeObjectRelease(v19);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  typea,  "Provider bridging failed from %s to %s because %s",  (uint8_t *)v24,  0x20u);
      swift_arrayDestroy(v37, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v4, 4LL);

      sub_100056570(v20, v19, 1);
      sub_100056570(v20, v19, 1);
    }
  }

  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4
                                                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler);
  uint64_t v30 = *(void *)v18;
  uint64_t v31 = *((void *)v18 + 1);
  uint64_t v32 = v18[16];
  sub_100056548(*(void *)v18, v31, v18[16]);
  v29(v30, v31, v32);
  return sub_100056570(v30, v31, v32);
}

uint64_t sub_10003DE08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  int v41 = a5;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v42 = a9;
  uint64_t v43 = a6;
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x74656E7265746E69LL,  0xEF676E6972616853LL);
  uint64_t v20 = v10
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  *(void *)uint64_t v20 = 0LL;
  *(void *)(v20 + 8)  = 0LL;
  *(_BYTE *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
  uint64_t v35 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue;
  uint64_t v21 = sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v21);
  SCNetworkProtocolRef v46 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_10000AF70( (unint64_t *)&unk_100410200,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v23 = sub_100002274((uint64_t *)&unk_1004044E0);
  uint64_t v24 = sub_1000572E4(qword_100410210, (uint64_t *)&unk_1004044E0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v23, v24, v14, v22);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v36);
  uint64_t v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000019LL,  0x8000000100363080LL,  v19,  v16,  v13,  0LL);
  *(void *)(v10 + v35)  = v25;
  unint64_t v26 = (void *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
  uint64_t v27 = v38;
  *unint64_t v26 = v37;
  v26[1]  = v27;
  uint64_t v28 = (void *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
  uint64_t v29 = v40;
  void *v28 = v39;
  v28[1]  = v29;
  *(_BYTE *)(v10
           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode)  = v41;
  uint64_t v30 = (void *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName);
  uint64_t v31 = v44;
  *uint64_t v30 = v43;
  v30[1]  = v31;
  uint64_t v32 = (void *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler);
  uint64_t v33 = v42;
  *uint64_t v32 = v45;
  v32[1]  = v33;
  return v10;
}

uint64_t sub_10003E0E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  if (!*(_BYTE *)(v1
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                 + 16))
  {
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(a1);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unsigned __int8 v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unsigned __int8 v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Internet sharing provider session will automatically terminate because it was released",  v6,  2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    sub_10003E234();
  }

  uint64_t v7 = v2
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_logger;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease(*(void *)(v2
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                                      + 8));
  swift_bridgeObjectRelease(*(void *)(v2
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                                      + 8));
  swift_release(*(void *)(v2
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler
                          + 8));
  swift_bridgeObjectRelease(*(void *)(v2
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName
                                      + 8));
  sub_100056570(*(void *)v3, *(void *)(v3 + 8), *(_BYTE *)(v3 + 16));
  objc_release(*(id *)(v2
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue));
  return v2;
}

void sub_10003E234()
{
  uint64_t v1 = (void *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
  if (!*(_BYTE *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                 + 16))
  {
    uint64_t v2 = *v1;
    uint64_t v3 = _NETRBClientStopService(*v1);
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        unsigned __int8 v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unsigned __int8 v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to stop netrb client service", v6, 2u);
        swift_slowDealloc(v6, -1LL, -1LL);
      }
    }

    uint64_t v7 = _NETRBClientDestroy(v2);
    if ((_DWORD)v7)
    {
      uint64_t v8 = *v1;
      uint64_t v9 = v1[1];
      *(_OWORD *)uint64_t v1 = xmmword_100337020;
      char v10 = *((_BYTE *)v1 + 16);
      *((_BYTE *)v1 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
      sub_100056548(v8, v9, v10);
      sub_100056570(v8, v9, v10);
      sub_10003D83C(v8, v9, v10);
      sub_100056570(v8, v9, v10);
    }

    else
    {
      oslog  = (os_log_s *)Logger.logObject.getter(v7);
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Failed to destroy netrb client", v12, 2u);
        swift_slowDealloc(v12, -1LL, -1LL);
      }
    }
  }

uint64_t sub_10003E414()
{
  return sub_100044CC8((uint64_t (*)(void))sub_10003E0E0);
}

void sub_10003E420()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v139 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v139 - v9;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v18 = v0
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                + 16) != 2
    || *(_OWORD *)v18 != 0LL)
  {
    return;
  }

  char v157 = v8;
  unint64_t v158 = v10;
  uint64_t v159 = v4;
  char v163 = (char *)&v139 - v16;
  uint64_t v164 = v17;
  uint64_t v162 = v15;
  uint64_t v19 = swift_allocObject(&unk_1003DE408, 17LL, 7LL);
  *(_BYTE *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v156 = (_BYTE *)(v19 + 16);
  dispatch_semaphore_t v20 = dispatch_semaphore_create(0LL);
  uint64_t v21 = *(void *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue);
  uint64_t v22 = swift_allocObject(&unk_1003DE430, 24LL, 7LL);
  swift_weakInit(v22 + 16, v0);
  uint64_t v23 = (void *)swift_allocObject(&unk_1003DE458, 40LL, 7LL);
  _OWORD v23[2] = v22;
  v23[3]  = v19;
  v23[4]  = v20;
  v172[1]  = sub_1000573C8;
  v173  = v23;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = (uint64_t)sub_10003FA8C;
  v172[0]  = &unk_1003DE470;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v173;
  swift_retain();
  unint64_t v26 = v20;
  swift_release(v25);
  uint64_t v27 = _NETRBClientCreate(v21, v24, 0LL);
  _Block_release(v24);
  if (!v27)
  {
    sub_10003FAF0(0xD00000000000001DLL, 0x8000000100362FB0LL);
    uint64_t v59 = v19;
LABEL_15:
    swift_release(v59);

    return;
  }

  uint64_t v160 = v19;
  uint64_t v161 = v0;
  if (!_NETRBClientSetGlobalServiceState(v27, 1023LL))
  {
    _NETRBClientDestroy(v27);
    sub_10003FAF0(0xD000000000000025LL, 0x8000000100362FD0LL);
    uint64_t v59 = v160;
    goto LABEL_15;
  }

  uint64_t v155 = v27;
  uint64_t v153 = v26;
  uint64_t v29 = v162;
  uint64_t v28 = v163;
  *(void *)char v163 = 2LL;
  (*(void (**)(char *, void, uint64_t))(v164 + 104))( v28,  enum case for DispatchTimeInterval.seconds(_:),  v29);
  empty  = xpc_dictionary_create_empty();
  uint64_t v31 = (const char *)netrbClientInterfaceName;
  uint64_t v32 = v161;
  if (!netrbClientInterfaceName)
  {
    __break(1u);
    goto LABEL_89;
  }

  uint64_t v33 = empty;
  unint64_t v34 = *(void *)(v161
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                  + 8);
  uint64_t v147 = *(void *)(v161
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
  unint64_t v148 = v34;
  uint64_t v35 = String.utf8CString.getter();
  xpc_object_t v154 = v33;
  xpc_dictionary_set_string(v33, v31, (const char *)(v35 + 32));
  uint64_t v36 = swift_release(v35);
  os_log_t v169 = 0LL;
  uint64_t v170 = 0LL;
  int v37 = *(unsigned __int8 *)(v32
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode);
  uint64_t v152 = v32
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_logger;
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  if (v37 != 1)
  {
    if (v40)
    {
      int v60 = v37;
      uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting in internet sharing mode", v61, 2u);
      uint64_t v62 = v61;
      int v37 = v60;
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    if (netrbClientDeviceType)
    {
      xpc_object_t v63 = v154;
      xpc_dictionary_set_uint64(v154, netrbClientDeviceType, 6uLL);
      LODWORD(v63)  = _NETRBClientStartService(v155, 0LL, 201LL, 302LL, v63);
      uint64_t v64 = v164;
      uint64_t v65 = (*(uint64_t (**)(char *, char *, uint64_t))(v164 + 16))(v14, v28, v29);
      if ((_DWORD)v63)
      {
        int v145 = v37;
        CFArrayRef v66 = v157;
        static DispatchTime.now()(v65);
        uint64_t v67 = v158;
        + infix(_:_:)(v66, v14);
        id v68 = *(void (**)(char *, uint64_t))(v5 + 8);
        uint64_t v69 = v159;
        v68(v66, v159);
        uint64_t v70 = OS_dispatch_semaphore.wait(timeout:)(v67) & 1;
        v68(v67, v69);
        LOBYTE(v70)  = static DispatchTimeoutResult.== infix(_:_:)(v70, 1LL);
        uint64_t v71 = *(void (**)(char *, uint64_t))(v64 + 8);
        v71(v14, v29);
        if ((v70 & 1) != 0)
        {
          uint64_t v28 = v163;
        }

        else
        {
          uint64_t v85 = v156;
          swift_beginAccess(v156, aBlock, 0LL, 0LL);
          uint64_t v28 = v163;
          if ((*v85 & 1) != 0)
          {
LABEL_62:
            os_log_t v113 = v169;
            unint64_t v112 = (unint64_t)v170;
            swift_bridgeObjectRetain_n(v170, 2LL);
            uint64_t v114 = swift_retain_n(v32, 4LL);
            uint64_t v115 = (os_log_s *)Logger.logObject.getter(v114);
            os_log_type_t v116 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v115, v116))
            {
              uint64_t v117 = (uint64_t)v113;
              uint64_t v118 = swift_slowAlloc(22LL, -1LL);
              uint64_t v161 = swift_slowAlloc(64LL, -1LL);
              uint64_t v167 = v161;
              *(_DWORD *)uint64_t v118 = 136315394;
              unint64_t v119 = v148;
              swift_bridgeObjectRetain(v148);
              uint64_t v166 = sub_10000235C(v147, v119, &v167);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
              swift_release_n(v32, 2LL);
              swift_bridgeObjectRelease(v119);
              *(_WORD *)(v118 + 12)  = 2080;
              if (v112)
              {
                unint64_t v120 = v112;
              }

              else
              {
                uint64_t v117 = *(void *)(v32
                                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
                unint64_t v120 = *(void *)(v32
                                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                                 + 8);
                swift_bridgeObjectRetain(v120);
              }

              swift_bridgeObjectRetain(v112);
              uint64_t v166 = sub_10000235C(v117, v120, &v167);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
              swift_release_n(v32, 2LL);
              swift_bridgeObjectRelease_n(v112, 2LL);
              swift_bridgeObjectRelease(v120);
              _os_log_impl( (void *)&_mh_execute_header,  v115,  v116,  "Configured infra relay bridge with internal interface %s external interface %s",  (uint8_t *)v118,  0x16u);
              uint64_t v121 = v161;
              swift_arrayDestroy(v161, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v121, -1LL, -1LL);
              swift_slowDealloc(v118, -1LL, -1LL);

              uint64_t v29 = v162;
            }

            else
            {
              swift_bridgeObjectRelease_n(v112, 2LL);
              swift_release_n(v32, 4LL);
            }

            uint64_t v123 = *(os_log_s **)(v32
                                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName);
            uint64_t v122 = *(os_log_s **)(v32
                                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName
                                + 8);
            swift_beginAccess(&v169, &v167, 0LL, 0LL);
            uint64_t v124 = v170;
            int v125 = v145;
            if (v170)
            {
              os_log_t v126 = v169;
            }

            else
            {
              os_log_t v126 = *(os_log_t *)(v32
                                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
              uint64_t v124 = *(os_log_s **)(v32
                                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                                  + 8);
              swift_bridgeObjectRetain(v124);
            }

            uint64_t v127 = v125 ^ 1u;
            if (v123 == v126 && v122 == v124)
            {
              swift_bridgeObjectRelease(v122);
              uint64_t v128 = 0LL;
            }

            else
            {
              char v129 = _stringCompareWithSmolCheck(_:_:expecting:)(v123, v122, v126, v124, 0LL);
              swift_bridgeObjectRelease(v124);
              uint64_t v128 = 256LL;
              if ((v129 & 1) != 0) {
                uint64_t v128 = 0LL;
              }
            }

            uint64_t v130 = v128 | v127;
            uint64_t v131 = *(void *)v18;
            uint64_t v132 = *(void *)(v18 + 8);
            *(void *)uint64_t v18 = v155;
            *(void *)(v18 + 8)  = v130;
            char v133 = *(_BYTE *)(v18 + 16);
            *(_BYTE *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
            sub_100056548(v131, v132, v133);
            sub_100056570(v131, v132, v133);
            sub_10003D83C(v131, v132, v133);
            sub_100056570(v131, v132, v133);

            swift_unknownObjectRelease(v154);
            (*(void (**)(char *, uint64_t))(v164 + 8))(v163, v29);
            goto LABEL_77;
          }
        }
      }

      else
      {
        uint64_t v71 = *(void (**)(char *, uint64_t))(v64 + 8);
        v71(v14, v29);
      }

      swift_bridgeObjectRelease(v170);
      _NETRBClientDestroy(v155);
      uint64_t v167 = 0LL;
      v168  = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease(v168);
      uint64_t v167 = 0xD000000000000026LL;
      v168  = 0x8000000100363000LL;
      uint64_t v86 = *(void *)(v32
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
      uint64_t v87 = *(void **)(v32
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                     + 8);
      swift_bridgeObjectRetain(v87);
      v88._countAndFlagsBits  = v86;
      v88._object  = v87;
      String.append(_:)(v88);
      swift_bridgeObjectRelease(v87);
      unint64_t v89 = v168;
      sub_10003FAF0(v167, v168);

      swift_unknownObjectRelease(v154);
      swift_bridgeObjectRelease(v89);
      v71(v28, v29);
LABEL_77:
      uint64_t v134 = v160;
      goto LABEL_86;
    }

LABEL_90:
    __break(1u);
    return;
  }

  if (v40)
  {
    int v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting in bridged mode", v41, 2u);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  if (!netrbClientDeviceType)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  xpc_object_t v42 = v154;
  xpc_dictionary_set_uint64(v154, netrbClientDeviceType, 2uLL);
  uint64_t v43 = (char *)swift_slowAlloc(16LL, -1LL);
  uint64_t v44 = *(void *)(v32
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                  + 8);
  uint64_t v150 = *(os_log_s **)(v32
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
  unint64_t v146 = v44;
  sub_10003B754(v43, (uint64_t)v150, v44, 16LL, v172);
  uint64_t v149 = v43;
  started  = _NETRBClientStartService(v155, v43, 204LL, 300LL, v42);
  int v46 = started;
  char v47 = v157;
  static DispatchTime.now()(started);
  SCNetworkProtocolRef v48 = v158;
  + infix(_:_:)(v47, v28);
  unint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v50 = v159;
  v49(v47, v159);
  uint64_t v51 = v153;
  uint64_t v52 = OS_dispatch_semaphore.wait(timeout:)(v48) & 1;
  v49(v48, v50);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v52, 1LL) & 1) != 0)
  {
    uint64_t v53 = swift_retain_n(v32, 2LL);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v57 = swift_slowAlloc(32LL, -1LL);
      aBlock[0]  = v57;
      *(_DWORD *)uint64_t v56 = 136315138;
      unint64_t v58 = v146;
      swift_bridgeObjectRetain(v146);
      uint64_t v167 = sub_10000235C((uint64_t)v150, v58, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
      swift_release_n(v32, 2LL);
      swift_bridgeObjectRelease(v58);
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Timed out while waiting to start the netrb service for %s",  v56,  0xCu);
      swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v32, 2LL);
    }

    uint64_t v75 = v160;
    goto LABEL_84;
  }

  int v145 = 1;
  uint64_t v72 = v164;
  if (v46)
  {
    char v73 = v156;
    swift_beginAccess(v156, v165, 0LL, 0LL);
    if ((*v73 & 1) != 0)
    {
LABEL_61:
      swift_slowDealloc(v149, -1LL, -1LL);
      uint64_t v32 = v161;
      uint64_t v29 = v162;
      goto LABEL_62;
    }
  }

  uint64_t v74 = nwi_state_copy();
  uint64_t v75 = v160;
  uint64_t v76 = v161;
  if (!v74) {
    goto LABEL_85;
  }
  uint64_t v77 = v74;
  uint64_t v78 = swift_retain_n(v161, 2LL);
  Swift::String v79 = (os_log_s *)Logger.logObject.getter(v78);
  os_log_type_t v80 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v81 = swift_slowAlloc(12LL, -1LL);
    os_log_t v144 = v79;
    Swift::String v79 = (os_log_s *)v81;
    uint64_t v151 = swift_slowAlloc(32LL, -1LL);
    aBlock[0]  = v151;
    *(_DWORD *)Swift::String v79 = 136315138;
    unint64_t v82 = v146;
    swift_bridgeObjectRetain(v146);
    uint64_t v167 = sub_10000235C((uint64_t)v150, v82, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
    swift_release_n(v76, 2LL);
    swift_bridgeObjectRelease(v82);
    os_log_t v83 = v144;
    _os_log_impl( (void *)&_mh_execute_header,  v144,  v80,  "Failed to start the netrb service for %s",  (uint8_t *)v79,  0xCu);
    uint64_t v84 = v151;
    swift_arrayDestroy(v151, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v79, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v76, 2LL);

    unint64_t v82 = v146;
  }

  interface_names  = nwi_state_get_interface_names(v77, 0LL, 0LL);
  uint64_t v151 = swift_slowAlloc(8LL * interface_names, -1LL);
  unsigned int v91 = nwi_state_get_interface_names(v77, v151, interface_names);
  if (!v91) {
    goto LABEL_83;
  }
  uint64_t v92 = v91;
  __n128 v94 = swift_beginAccess(v156, aBlock, 0LL, 0LL);
  uint64_t v95 = 0LL;
  char v96 = 0;
  uint64_t v97 = 8 * v92;
  uint64_t v98 = 8 * v92 - 8;
  v94.n128_u64[0]  = 136315138LL;
  __n128 v141 = v94;
  uint64_t v140 = (char *)&type metadata for Any + 8;
  uint64_t v143 = v77;
  while (1)
  {
    if ((v96 & 1) != 0)
    {
      if (v98 == v95) {
        goto LABEL_60;
      }
LABEL_40:
      char v96 = 1;
      goto LABEL_37;
    }

    uint64_t v92 = *(void *)(v151 + v95);
    if (v92)
    {
      static String.Encoding.utf8.getter(v93);
      int v93 = (os_log_s *)String.init(cString:encoding:)(v92, v3);
      if (v99) {
        break;
      }
    }

    if (v98 == v95) {
      goto LABEL_83;
    }
LABEL_36:
    char v96 = 0;
LABEL_37:
    v95 += 8LL;
    if (v97 == v95)
    {
      __break(1u);
      goto LABEL_81;
    }
  }

  Swift::String v79 = v99;
  BOOL v100 = v93 == v150 && v99 == (os_log_s *)v82;
  if (v100 || (os_log_t v144 = v93, (_stringCompareWithSmolCheck(_:_:expecting:)(v93, v99, v150, v82, 0LL) & 1) != 0))
  {
    int v93 = (os_log_s *)swift_bridgeObjectRelease(v79);
    if (v98 == v95) {
      goto LABEL_83;
    }
    goto LABEL_36;
  }

  __int128 v101 = v149;
  strlcpy(v149, (const char *)v92, 0x10uLL);
  uint64_t v102 = _NETRBClientStartService(v155, v101, 204LL, 300LL, v154);
  if (!(_DWORD)v102)
  {
LABEL_55:
    uint64_t v106 = swift_bridgeObjectRetain(v79);
    uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    os_log_type_t v108 = static os_log_type_t.error.getter();
    uint64_t v92 = v108;
    uint64_t v142 = v107;
    BOOL v109 = os_log_type_enabled(v107, v108);
    uint64_t v77 = v143;
    if (v109)
    {
      uint64_t v110 = swift_slowAlloc(12LL, -1LL);
      uint64_t v139 = swift_slowAlloc(32LL, -1LL);
      uint64_t v167 = v139;
      *(_DWORD *)uint64_t v110 = v141.n128_u32[0];
      swift_bridgeObjectRetain(v79);
      *(void *)(v110 + 4)  = sub_10000235C((uint64_t)v144, (unint64_t)v79, &v167);
      swift_bridgeObjectRelease_n(v79, 3LL);
      Swift::String v79 = v142;
      _os_log_impl( (void *)&_mh_execute_header,  v142,  (os_log_type_t)v92,  "Failed to start the netrb service for %s",  (uint8_t *)v110,  0xCu);
      uint64_t v92 = v139;
      swift_arrayDestroy(v139, 1LL, v140);
      swift_slowDealloc(v92, -1LL, -1LL);
      uint64_t v111 = v110;
      uint64_t v77 = v143;
      swift_slowDealloc(v111, -1LL, -1LL);

      if (v98 == v95) {
        goto LABEL_83;
      }
    }

    else
    {
      swift_bridgeObjectRelease_n(v79, 2LL);

      if (v98 == v95) {
        goto LABEL_83;
      }
    }

    goto LABEL_36;
  }

  unint64_t v103 = v157;
  static DispatchTime.now()(v102);
  char v104 = v158;
  + infix(_:_:)(v103, v163);
  uint64_t v105 = v159;
  v49(v103, v159);
  uint64_t v92 = OS_dispatch_semaphore.wait(timeout:)(v104) & 1;
  v49(v104, v105);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v92, 1LL) & 1) == 0)
  {
    unint64_t v82 = v146;
    if ((*v156 & 1) != 0)
    {
      int v93 = (os_log_s *)swift_bridgeObjectRelease(v170);
      os_log_t v169 = v144;
      uint64_t v170 = v79;
      uint64_t v77 = v143;
      if (v98 == v95)
      {
LABEL_60:
        swift_slowDealloc(v151, -1LL, -1LL);
        nwi_state_release(v77);
        goto LABEL_61;
      }

      goto LABEL_40;
    }

    goto LABEL_55;
  }

  uint64_t v135 = swift_bridgeObjectRetain(v79);
  uint64_t v92 = Logger.logObject.getter(v135);
  os_log_type_t v136 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v92, v136))
  {
    __int8 v137 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v138 = swift_slowAlloc(32LL, -1LL);
    uint64_t v167 = v138;
    *(_DWORD *)__int8 v137 = v141.n128_u32[0];
    swift_bridgeObjectRetain(v79);
    uint64_t v166 = sub_10000235C((uint64_t)v144, (unint64_t)v79, &v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
    swift_bridgeObjectRelease_n(v79, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v92,  v136,  "Timed out while waiting to start the netrb service for %s",  v137,  0xCu);
    swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v138, -1LL, -1LL);
    swift_slowDealloc(v137, -1LL, -1LL);
    goto LABEL_82;
  }

uint64_t sub_10003F6DC(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v38, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v7);
  if (!Strong) {
    return 0LL;
  }
  uint64_t v9 = Strong;
  if (!a2) {
    goto LABEL_10;
  }
  char v10 = (void *)swift_unknownObjectRetain(a2);
  xpc_type_t type = xpc_get_type(v10);
  uint64_t result = XPC_TYPE_DICTIONARY.getter();
  if (type != (xpc_type_t)result || a1 != 1001)
  {
    swift_unknownObjectRelease(a2);
LABEL_10:
    swift_release(v9);
    return 0LL;
  }

  if (netrbClientNotificationKey)
  {
    uint64_t v13 = (BOOL *)(a4 + 16);
    xpc_object_t v14 = xpc_dictionary_get_value(a2, netrbClientNotificationKey);
    if (!v14)
    {
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(0LL);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to get value from NETRB client", v19, 2u);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      swift_beginAccess(v13, v37, 1LL, 0LL);
      *uint64_t v13 = 0;
      OS_dispatch_semaphore.signal()();
      swift_release(v9);
      dispatch_semaphore_t v20 = a2;
      goto LABEL_23;
    }

    uint64_t v15 = v14;
    xpc_type_t v16 = xpc_get_type(v14);
    if (v16 == (xpc_type_t)XPC_TYPE_UINT64.getter())
    {
      value  = xpc_uint64_get_value(v15);
      swift_beginAccess(v13, v37, 1LL, 0LL);
      *uint64_t v13 = value == 5002;
      if (value == 5002)
      {
        uint64_t v23 = (void *)Logger.logObject.getter(v22);
        os_log_type_t v24 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled((os_log_t)v23, v24))
        {
LABEL_22:

          OS_dispatch_semaphore.signal()();
          swift_release(v9);
          swift_unknownObjectRelease(a2);
          dispatch_semaphore_t v20 = v15;
LABEL_23:
          swift_unknownObjectRelease(v20);
          return 0LL;
        }

        uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  v24,  "Successfully configured infra relay bridge service",  v25,  2u);
        unint64_t v26 = v25;
LABEL_20:
        swift_slowDealloc(v26, -1LL, -1LL);
        goto LABEL_22;
      }
    }

    else
    {
      swift_beginAccess(v13, v37, 1LL, 0LL);
      *uint64_t v13 = 0;
    }

    uint64_t v27 = swift_unknownObjectRetain_n(v15, 2LL);
    uint64_t v23 = (void *)Logger.logObject.getter(v27);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v23, v28))
    {
      swift_unknownObjectRelease_n(v15, 2LL);
      goto LABEL_22;
    }

    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v31 = xpc_copy_description(v15);
    uint64_t v32 = String.init(cString:)(v31);
    unint64_t v34 = v33;
    uint64_t v35 = sub_10000235C(v32, v33, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_unknownObjectRelease_n(v15, 2LL);
    swift_bridgeObjectRelease(v34);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  v28,  "Failed to start infra relay bridge service with error %s",  v29,  0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    unint64_t v26 = v29;
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

uint64_t sub_10003FA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a3);
  uint64_t v7 = v6(a2, a3);
  swift_release(v5);
  swift_unknownObjectRelease(a3);
  return v7;
}

uint64_t sub_10003FAF0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v16 = sub_10000235C(a1, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Tearing down infra relay bridge because: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  sub_10003E234();
  uint64_t v11 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  uint64_t v12 = *(void *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
  uint64_t v13 = *(void *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 8);
  *(void *)uint64_t v11 = a1;
  *(void *)(v11 + 8)  = a2;
  char v14 = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  swift_bridgeObjectRetain(a2);
  sub_100056548(v12, v13, v14);
  sub_100056570(v12, v13, v14);
  sub_10003D83C(v12, v13, v14);
  return sub_100056570(v12, v13, v14);
}

uint64_t sub_10003FCD0()
{
  uint64_t v1 = v0;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v2 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16[1]  = sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  if (qword_100404318 != -1) {
    swift_once(&qword_100404318, sub_1001740DC);
  }
  uint64_t v11 = static OS_dispatch_queue.nan;
  static DispatchQoS.unspecified.getter((id)static OS_dispatch_queue.nan);
  os_log_type_t v18 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_10000AF70( (unint64_t *)&unk_100410200,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100002274((uint64_t *)&unk_1004044E0);
  uint64_t v14 = sub_1000572E4(qword_100410210, (uint64_t *)&unk_1004044E0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v13, v14, v5, v12);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v17);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000023LL,  0x8000000100362F60LL,  v10,  v7,  v4,  v11);
  *(void *)(v1 + 24)  = 0LL;
  *(_DWORD *)(v1 + 32)  = 2;
  *(void *)(v1 + 40)  = NANBitmap.Channel.operatingClass.getter;
  *(void *)(v1 + 48)  = 0LL;
  Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x74656E7265746E69LL,  0xEF676E6972616853LL);
  return v1;
}

uint64_t sub_10003FF3C()
{
  if (*(void *)(v0 + 24)) {
    sub_100040F74();
  }

  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 48));
  uint64_t v1 = v0
     + OBJC_IVAR____TtCCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession26NetworkConnectivityMonitor_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void sub_10003FFB0(nw_interface *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 24);
  oslog  = (os_log_s *)Logger.logObject.getter(a1);
  if (v6)
  {
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Already monitoring network path status", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    return;
  }

  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Start monitoring network path status", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = nw_parameters_create();
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | (unint64_t)a1 & 0x1000000000000000LL))
  {
    sub_100002274(&qword_100405D48);
    _StringGuts._slowWithCString<A>(_:)(interface, sub_1000402D4, 0LL);
    uint64_t v12 = interface[0];
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    interface[0]  = a1;
    interface[1]  = (nw_interface_t)(a2 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v12 = (nw_interface *)nw_interface_create_with_name(interface);
  }

  else
  {
    sub_1000402D4((uint64_t *)interface);
    uint64_t v12 = interface[0];
  }

  nw_parameters_require_interface(v11, v12);
  swift_unknownObjectRelease(v12);
  evaluator_for_endpoint  = nw_path_create_evaluator_for_endpoint(0LL, v11);
  if (!evaluator_for_endpoint)
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v14 = evaluator_for_endpoint;
  uint64_t v15 = *(void **)(v3 + 16);
  uint64_t v16 = swift_allocObject(&unk_1003DDCD8, 24LL, 7LL);
  swift_weakInit(v16 + 16, v3);
  uint64_t v17 = (void *)swift_allocObject(&unk_1003DDD00, 40LL, 7LL);
  v17[2]  = v16;
  v17[3]  = a1;
  v17[4]  = a2;
  uint64_t v18 = type metadata accessor for AppleDevice.NetworkPathMonitor();
  uint64_t v19 = swift_allocObject(v18, 24LL, 7LL);
  id v20 = v15;
  swift_bridgeObjectRetain(a2);
  AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v14, v20, (uint64_t)sub_100056B60, (uint64_t)v17);
  uint64_t v21 = *(void *)(v3 + 24);
  *(void *)(v3 + 24)  = v19;
  swift_release(v21);
  uint64_t v22 = *(void *)(v3 + 24);
  if (!v22)
  {
    status  = nw_path_status_invalid;
    goto LABEL_19;
  }

  uint64_t v23 = (nw_path *)nw_path_evaluator_copy_path(*(void *)(v22 + 16));
  if (!v23)
  {
LABEL_24:
    __break(1u);
    return;
  }

  os_log_type_t v24 = v23;
  status  = nw_path_get_status(v23);
  swift_unknownObjectRelease(v24);
LABEL_19:
  if (status != *(_DWORD *)(v3 + 32))
  {
    *(_DWORD *)(v3 + 32)  = status;
    uint64_t v27 = *(void (**)(BOOL))(v3 + 40);
    uint64_t v26 = *(void *)(v3 + 48);
    swift_retain();
    v27(status == nw_path_status_satisfied);
    swift_release(v26);
  }

  swift_unknownObjectRelease(v11);
}

uint64_t sub_1000402D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nw_interface_create_with_name();
  *a1  = result;
  return result;
}

void sub_100040300(nw_path *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v96, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v7);
  if (!Strong) {
    return;
  }
  uint64_t v9 = Strong;
  status  = nw_path_get_status(a1);
  v95[0]  = 0LL;
  swift_bridgeObjectRetain(a4);
  if (getifaddrs(v95))
  {
    int v88 = 1;
    int v89 = 0;
    goto LABEL_20;
  }

  uint64_t v10 = v95[0];
  if (v95[0])
  {
    uint64_t v11 = v95[0];
    do
    {
      ifa_name  = v11->ifa_name;
      if (!ifa_name) {
        goto LABEL_103;
      }
      ifa_addr  = v11->ifa_addr;
      uint64_t v11 = v11->ifa_next;
      uint64_t v14 = String.init(cString:)(ifa_name);
      if (v14 == a3 && v15 == a4)
      {
        swift_bridgeObjectRelease(a4);
      }

      else
      {
        uint64_t v17 = v15;
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a3, a4, 0LL);
        swift_bridgeObjectRelease(v17);
        if ((v18 & 1) == 0) {
          continue;
        }
      }

      if (!ifa_addr) {
        goto LABEL_104;
      }
      if (ifa_addr->sa_family == 2)
      {
        int v88 = 0;
        int v89 = *(_DWORD *)&ifa_addr->sa_data[2];
        goto LABEL_19;
      }
    }

    while (v11);
  }

  int v88 = 1;
  int v89 = 0;
LABEL_19:
  freeifaddrs(v10);
LABEL_20:
  swift_bridgeObjectRelease(a4);
  v95[0]  = 0LL;
  swift_bridgeObjectRetain(a4);
  if (getifaddrs(v95))
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_42;
  }

  id v20 = v95[0];
  if (v95[0])
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v21 = v95[0];
    while (1)
    {
      uint64_t v23 = v21->ifa_name;
      if (!v23)
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
      }

      os_log_type_t v24 = v21->ifa_addr;
      uint64_t v21 = v21->ifa_next;
      uint64_t v25 = String.init(cString:)(v23);
      if (v25 == a3 && v26 == a4)
      {
        swift_bridgeObjectRelease(a4);
      }

      else
      {
        uint64_t v28 = v26;
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, a3, a4, 0LL);
        swift_bridgeObjectRelease(v28);
        if ((v29 & 1) == 0) {
          goto LABEL_25;
        }
      }

      if (!v24) {
        goto LABEL_102;
      }
      if (v24->sa_family == 30)
      {
        uint64_t v32 = &v24->sa_data[6];
        uint64_t v31 = *(void *)&v24->sa_data[6];
        uint64_t v30 = *((void *)v32 + 1);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0) {
          uint64_t v19 = sub_1000A6A34(0LL, v19[2] + 1LL, 1, v19);
        }
        unint64_t v34 = v19[2];
        unint64_t v33 = v19[3];
        if (v34 >= v33 >> 1) {
          uint64_t v19 = sub_1000A6A34((void *)(v33 > 1), v34 + 1, 1, v19);
        }
        v19[2]  = v34 + 1;
        uint64_t v22 = &v19[4 * v34];
        v22[4]  = v31;
        v22[5]  = v30;
        v22[6]  = 0LL;
        v22[7]  = 0LL;
      }

LABEL_25:
      if (!v21) {
        goto LABEL_41;
      }
    }
  }

  uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_41:
  freeifaddrs(v20);
LABEL_42:
  swift_bridgeObjectRelease(a4);
  uint64_t v35 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v86 = (ifaddrs *)swift_slowAlloc(96LL, -1LL);
    v95[0]  = v86;
    *(_DWORD *)uint64_t v38 = 136315650;
    swift_beginAccess(&status, v93, 0LL, 0LL);
    uint64_t v87 = v9;
    unint64_t v39 = 0xE700000000000000LL;
    uint64_t v40 = 0x64696C61766E69LL;
    switch(status)
    {
      case nw_path_status_invalid:
        break;
      case nw_path_status_satisfied:
        uint64_t v40 = 0x6569667369746173LL;
        unint64_t v39 = 0xE900000000000064LL;
        break;
      case nw_path_status_unsatisfied:
        uint64_t v40 = 0x6673697461736E75LL;
        uint64_t v41 = 6579561LL;
        goto LABEL_49;
      case nw_path_status_satisfiable:
        uint64_t v40 = 0x6169667369746173LL;
        uint64_t v41 = 6646882LL;
LABEL_49:
        unint64_t v39 = v41 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000LL;
        break;
      default:
        uint64_t v40 = 0x6E776F6E6B6E75LL;
        break;
    }

    uint64_t v94 = sub_10000235C(v40, v39, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v38 + 12)  = 2080;
    if (v88) {
      int v42 = 0;
    }
    else {
      int v42 = v89;
    }
    uint64_t v43 = (char *)swift_slowAlloc(16LL, -1LL);
    LODWORD(v94)  = v42;
    inet_ntop(2, &v94, v43, 0x10u);
    uint64_t v44 = String.init(cString:)(v43);
    unint64_t v46 = v45;
    swift_slowDealloc(v43, -1LL, -1LL);
    uint64_t v94 = sub_10000235C(v44, v46, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v38 + 22)  = 2080;
    uint64_t v47 = swift_bridgeObjectRetain(v19);
    uint64_t v48 = Array.description.getter(v47, &type metadata for IPv6Address);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease(v19);
    uint64_t v94 = sub_10000235C(v48, v50, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_bridgeObjectRelease_n(v19, 2LL);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Path became %s with ipv4: %s, ipv6: %s", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy(v86, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);

    uint64_t v9 = v87;
  }

  else
  {
    swift_bridgeObjectRelease_n(v19, 2LL);
  }

  swift_beginAccess(&status, v95, 1LL, 0LL);
  int v51 = status;
  if (status == nw_path_status_satisfied)
  {
    char v52 = v88;
    if ((v52 & 1) != 0)
    {
      uint64_t v53 = v19[2];
      if (!v53)
      {
LABEL_63:
        swift_bridgeObjectRelease(v19);
        int v51 = 2;
        status  = nw_path_status_unsatisfied;
        goto LABEL_66;
      }

      uint64_t v54 = 4LL;
      while (1)
      {
        uint64_t v55 = v19[v54];
        v54 += 4LL;
        if (!--v53) {
          goto LABEL_63;
        }
      }
    }

    swift_bridgeObjectRelease(v19);
    int v51 = 1;
  }

  else
  {
    swift_bridgeObjectRelease(v19);
  }

  __break(1u);
  return result;
}

  if (v5 == v8) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  id v20 = (a1 + v9 + v10 + 1) & ~v10;
  if (v7 == v8) {
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(v20);
  }
  uint64_t v21 = *(unsigned __int8 *)(v20 + v11);
  if (v21 < 2) {
    return 0LL;
  }
  return ((v21 + 2147483646) & 0x7FFFFFFF) + 1;
}

    unint64_t v45 = v19;
    unint64_t v46 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_26:
    uint64_t v21 = *(void *)(v6 + 48);
    uint64_t v44 = *(void *)(v43 + 72);
    sub_100022628(v21 + v44 * v16, (uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    Hasher.init(_seed:)(v47, *(void *)(v8 + 40));
    uint64_t v22 = *((void *)v5 + 2);
    uint64_t v23 = *((void *)v5 + 4);
    os_log_type_t v24 = v5[40];
    uint64_t v25 = v5[41];
    uint64_t v26 = String.lowercased()();
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v47, v26._countAndFlagsBits, v26._object);
    swift_bridgeObjectRelease(v26._object);
    uint64_t v27 = String.lowercased()();
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v47, v27._countAndFlagsBits, v27._object);
    swift_bridgeObjectRelease(v27._object);
    if (v24) {
      uint64_t v28 = 7365749LL;
    }
    else {
      uint64_t v28 = 7365492LL;
    }
    String.hash(into:)(v47, v28, 0xE300000000000000LL);
    swift_bridgeObjectRelease(0xE300000000000000LL);
    Hasher._combine(_:)(v25);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease_n(v23, 2LL);
    char v29 = Hasher._finalize()();
    uint64_t v30 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v31 = v29 & ~v30;
    uint64_t v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v12 = v46;
    }

    else
    {
      unint64_t v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      uint64_t v12 = v46;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }

        uint64_t v35 = v32 == v34;
        if (v32 == v34) {
          uint64_t v32 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v13 + 8 * v32);
      }

      while (v36 == -1);
      uint64_t v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    sub_100022628((uint64_t)v5, *(void *)(v8 + 48) + v15 * v44, type metadata accessor for AWDLPeer.AdvertisedService);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v42;
    uint64_t v14 = v45;
  }

  id v20 = v14 + 4;
  if (v14 + 4 < v40)
  {
    char v18 = v41[v20];
    if (!v18)
    {
      while (1)
      {
        uint64_t v19 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_44;
        }
        if (v19 >= v40) {
          goto LABEL_38;
        }
        char v18 = v41[v19];
        ++v20;
        if (v18) {
          goto LABEL_25;
        }
      }
    }

    uint64_t v19 = v14 + 4;
    goto LABEL_25;
  }

  uint64_t v31 = *v39;
  *(void *)(*v39 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_100022628( a1,  *(void *)(v31 + 48) + *(void *)(v38 + 72) * a2,  type metadata accessor for AWDLPeer.AdvertisedService);
  unint64_t v33 = *(void *)(v31 + 16);
  unint64_t v34 = __OFADD__(v33, 1LL);
  uint64_t v35 = v33 + 1;
  if (v34) {
    __break(1u);
  }
  else {
    *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
  }
  return result;
}

    uint64_t v44 = v19;
    unint64_t v45 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_26:
    uint64_t v21 = *(void *)(v6 + 48);
    uint64_t v43 = *(void *)(v42 + 72);
    sub_100057FE8(v21 + v43 * v16, (uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    Hasher.init(_seed:)(v46, *(void *)(v8 + 40));
    uint64_t v22 = *((void *)v5 + 2);
    uint64_t v23 = *((void *)v5 + 4);
    os_log_type_t v24 = v5[40];
    uint64_t v25 = v5[41];
    uint64_t v26 = String.lowercased()();
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v46, v26._countAndFlagsBits, v26._object);
    swift_bridgeObjectRelease(v26._object);
    uint64_t v27 = String.lowercased()();
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v46, v27._countAndFlagsBits, v27._object);
    swift_bridgeObjectRelease(v27._object);
    if (v24) {
      uint64_t v28 = 7365749LL;
    }
    else {
      uint64_t v28 = 7365492LL;
    }
    String.hash(into:)(v46, v28, 0xE300000000000000LL);
    swift_bridgeObjectRelease(0xE300000000000000LL);
    Hasher._combine(_:)(v25);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease_n(v23, 2LL);
    char v29 = Hasher._finalize()();
    uint64_t v30 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v31 = v29 & ~v30;
    uint64_t v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v6 = v41;
      uint64_t v12 = v45;
    }

    else
    {
      unint64_t v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      uint64_t v6 = v41;
      uint64_t v12 = v45;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v35 = v32 == v34;
        if (v32 == v34) {
          uint64_t v32 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v13 + 8 * v32);
      }

      while (v36 == -1);
      uint64_t v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    sub_100022628((uint64_t)v5, *(void *)(v8 + 48) + v15 * v43, type metadata accessor for AWDLPeer.AdvertisedService);
    ++*(void *)(v8 + 16);
    uint64_t v14 = v44;
  }

  id v20 = v14 + 4;
  if (v14 + 4 >= v40)
  {
LABEL_38:
    swift_release_n(v6, 2LL);
    uint64_t v2 = v38;
    goto LABEL_40;
  }

  char v18 = *(void *)(v39 + 8 * v20);
  if (v18)
  {
    uint64_t v19 = v14 + 4;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v19 >= v40) {
      goto LABEL_38;
    }
    char v18 = *(void *)(v39 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

  swift_release(v5);
  uint64_t v3 = v20;
  if ((a2 & 1) != 0)
  {
    char v18 = 1LL << *(_BYTE *)(v5 + 32);
    if (v18 >= 64) {
      bzero(v21, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *uint64_t v21 = -1LL << v18;
    }
    *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    char v18 = v17[1];
    id v20 = 32 * v15;
    sub_100002AE4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1]  = v18;
    sub_100022594(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  os_log_type_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v27 - 1) & v27;
    uint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v19 = *(void *)v17;
    char v18 = *(void *)(v17 + 8);
    id v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(_BYTE *)(v17 + 32);
    uint64_t v23 = 8 * v15;
    os_log_type_t v24 = *(void **)(*(void *)(v2 + 56) + v23);
    LOBYTE(v17)  = *(_BYTE *)(v17 + 33);
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v25 = v19;
    *(void *)(v25 + 8)  = v18;
    *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    *(void *)(v25 + 24)  = v21;
    *(_BYTE *)(v25 + 32)  = v22;
    *(_BYTE *)(v25 + 33)  = v17;
    *(void *)(*(void *)(v4 + 56) + v23)  = v24;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    uint64_t result = v24;
  }

  uint64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    uint64_t v9 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v29 - 1) & v29;
    uint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v19 = *(void *)v17;
    char v18 = *(void *)(v17 + 8);
    id v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(_BYTE *)(v17 + 32);
    LOBYTE(v17)  = *(_BYTE *)(v17 + 33);
    uint64_t v23 = 16 * v15;
    os_log_type_t v24 = *(void *)(v2 + 56) + v23;
    uint64_t v25 = *(void **)v24;
    LOBYTE(v24)  = *(_BYTE *)(v24 + 8);
    uint64_t v26 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v26 = v19;
    *(void *)(v26 + 8)  = v18;
    *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    *(void *)(v26 + 24)  = v21;
    *(_BYTE *)(v26 + 32)  = v22;
    *(_BYTE *)(v26 + 33)  = v17;
    uint64_t v27 = *(void *)(v4 + 56) + v23;
    *(void *)uint64_t v27 = v25;
    *(_BYTE *)(v27 + 8)  = v24;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    uint64_t result = v25;
  }

  uint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  char v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    uint64_t v9 = v30;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    char v18 = *(_BYTE *)(*(void *)(v5 + 48) + v17);
    uint64_t v19 = *(void *)(v26 + 72) * v17;
    sub_100057FE8( *(void *)(v5 + 56) + v19,  (uint64_t)v4,  type metadata accessor for NANGenericServiceProtocol.Attribute);
    *(_BYTE *)(*(void *)(v7 + 48) + v17)  = v18;
    uint64_t result = (void *)sub_100022628( (uint64_t)v4,  *(void *)(v7 + 56) + v19,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v15)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v24;
    goto LABEL_28;
  }

  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v22 - 1) & v22;
    char v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v19, v2);
    id v20 = 32 * v18;
    sub_100002AE4(*(void *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v19, v5, v2);
    uint64_t result = sub_100022594(v26, (_OWORD *)(*(void *)(v8 + 56) + v20));
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v24;
    goto LABEL_28;
  }

  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    char v18 = *(void **)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    *(_BYTE *)(*(void *)(v4 + 48) + v15)  = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    id v20 = (void *)(*(void *)(v4 + 56) + 24 * v15);
    *id v20 = v18;
    v20[1]  = v17;
    v20[2]  = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t result = v18;
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    char v18 = v17[1];
    uint64_t v19 = 8 * v15;
    id v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1]  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_retain();
  }

  os_log_type_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    char v18 = 32 * v15;
    sub_100002AE4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    sub_100022594(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    uint64_t result = v17;
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  id v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    char v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18)  = v19;
    uint64_t result = (void *)swift_retain();
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    char v18 = v17[1];
    uint64_t v19 = 8 * v15;
    id v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1]  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = v20;
  }

  os_log_type_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = *(_BYTE *)(*(void *)(v3 + 48) + v16);
    sub_100002AE4(*(void *)(v3 + 56) + 32 * v16, (uint64_t)v21);
    *(_BYTE *)(*(void *)(v5 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    uint64_t result = sub_100022594(v21, (_OWORD *)(*(void *)(v5 + 56) + 32 * v16));
  }

  id v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    uint64_t v10 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

  swift_release(a1);
  return _swiftEmptyArrayStorage;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  unint64_t v46 = 0LL;
  uint64_t v47 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v43._object  = (void *)0x8000000100366D80LL;
  v43._countAndFlagsBits  = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)( &v48,  &v46,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits  = 39LL;
  v44._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v44);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v46,  v47,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  uint64_t v44 = (__int128 *)(a1 + 136);
  unint64_t v45 = (__int128 *)(a2 + 136);
  unint64_t v46 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
    if (v46 == 255)
    {
      unint64_t v49 = *v45;
      unint64_t v50 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 161)  = *(_OWORD *)(a2 + 161);
      *uint64_t v44 = v49;
      *(_OWORD *)(a1 + 152)  = v50;
      goto LABEL_35;
    }

    if ((v46 & 1) != 0)
    {
LABEL_32:
      int v51 = *(void *)(a2 + 160);
      *(void *)(a1 + 160)  = v51;
      *(void *)(a1 + 168)  = *(void *)(a2 + 168);
      (**(void (***)(uint64_t, uint64_t))(v51 - 8))(a1 + 136, a2 + 136);
      *(_BYTE *)(a1 + 176)  = 1;
      goto LABEL_35;
    }

  uint64_t v15 = sub_100002274((uint64_t *)&unk_100410510);
  uint64_t v16 = sub_1000572E4(&qword_10040FEE0, (uint64_t *)&unk_100410510, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v15, v16);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease(v2);
  v20._countAndFlagsBits  = v17;
  v20._object  = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits  = 93LL;
  v21._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  return 91LL;
}

        swift_bridgeObjectRelease(v10);
      }

      else
      {
LABEL_31:
        swift_bridgeObjectRelease(v10);
        id v20 = v30[2];
        uint64_t v21 = *(void *)(v6 + 16);
        if (v20)
        {
          if (v21)
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v30);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_10019EA0C(v30);
              uint64_t v7 = (void *)result;
            }

            uint64_t v22 = 0LL;
            uint64_t v23 = *(void *)(v6 + 16);
            while ((v21 & ~(v21 >> 63)) != v22)
            {
              if (v22 == v23) {
                goto LABEL_54;
              }
              os_log_type_t v24 = v7[2];
              if (v22 >= v24) {
                goto LABEL_55;
              }
              *((_BYTE *)v7 + v22 + 32) |= *(_BYTE *)(v6 + 32 + v22);
              uint64_t v25 = v22 + 1;
              if (v25 != v20)
              {
                uint64_t v26 = v25 - 1;
                if (v26 == v20 - 1) {
                  goto LABEL_56;
                }
                uint64_t v22 = v26 + 1;
                if (v22 != v21) {
                  continue;
                }
              }

              uint64_t v30 = v7;
              uint64_t v21 = v23;
              if (v24 >= v23) {
                goto LABEL_44;
              }
              goto LABEL_43;
            }

            goto LABEL_53;
          }
        }

        else
        {
          os_log_type_t v24 = 0LL;
          if (v21 > 0) {
LABEL_43:
          }
            sub_10019EB3C(v6, v6 + 32, v24, (2 * v21) | 1);
        }
      }

  uint64_t v38 = sub_100024970();
  unint64_t v39 = *(void *)(v12 - 144);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 72, &type metadata for Int, v38, v7, v8);
  uint64_t v40 = dispatch thunk of static Comparable.< infix(_:_:)(v5, v39, v7, *(void *)(*(void *)(v8 + 32) + 8LL));
  v17(v39, v7);
  v17(v5, v7);
  if ((v40 & 1) == 0) {
    goto LABEL_8;
  }
  do
  {
LABEL_30:
    __break(1u);
LABEL_31:
    int v42 = *(void *)(v12 - 184);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( *(void *)(v12 - 160),  v7,  v42,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v42,  AssociatedConformanceWitness);
    uint64_t v44 = *(void *)(v12 - 144);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)( *(void *)(v12 - 168),  v7,  *(void *)(v12 - 160));
    LOBYTE(v42)  = dispatch thunk of static Comparable.< infix(_:_:)( v5,  v44,  v7,  *(void *)(*(void *)(v8 + 32) + 8LL));
    v17(v44, v7);
    unint64_t v45 = *(void *)(v12 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 96) + 32LL))(v45, v5, v7);
    if ((v42 & 1) != 0)
    {
      v17(v45, v7);
      __break(1u);
      JUMPOUT(0x100202ED8LL);
    }

    uint64_t v5 = *(void *)(v12 - 72);
    unint64_t v46 = dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
    uint64_t v47 = v45;
    uint64_t v48 = v46;
    v17(v47, v7);
  }

  while (v48 < v5);
LABEL_8:
  uint64_t v19 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
  v15(v6, v9, v7);
  if (v19 < 65)
  {
    uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
    v17(v6, v7);
    if (v27 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8) & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v17(v6, v7);
  }

  id v20 = *(void *)(v12 - 128);
  v15(v20, v9, v7);
  *(void *)(v12 - 72)  = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v21 = dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8);
  uint64_t v22 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
  if ((v21 & 1) != 0)
  {
    if (v22 > 64)
    {
      uint64_t v23 = sub_100024970();
      os_log_type_t v24 = *(void *)(v12 - 144);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 72, &type metadata for Int, v23, v7, v8);
      uint64_t v25 = dispatch thunk of static Comparable.< infix(_:_:)(v24, v20, v7, *(void *)(*(void *)(v8 + 32) + 8LL));
      v17(v24, v7);
      uint64_t v26 = v20;
      goto LABEL_19;
    }

  unint64_t v45 = sub_100024970();
  unint64_t v46 = *(void *)(v12 - 280);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 152, &type metadata for Int, v45, v10, v8);
  uint64_t v47 = dispatch thunk of static Comparable.< infix(_:_:)(v7, v46, v10, *(void *)(*(void *)(v8 + 32) + 8LL));
  v17(v46, v10);
  v17(v7, v10);
  if ((v47 & 1) == 0) {
    goto LABEL_8;
  }
  do
  {
LABEL_30:
    __break(1u);
LABEL_31:
    unint64_t v49 = *(void *)(v12 - 320);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( *(void *)(v12 - 296),  v10,  v49,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v49,  AssociatedConformanceWitness);
    int v51 = *(void *)(v12 - 280);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)( *(void *)(v12 - 304),  v10,  *(void *)(v12 - 296));
    LOBYTE(v49)  = dispatch thunk of static Comparable.< infix(_:_:)( v7,  v51,  v10,  *(void *)(*(void *)(v8 + 32) + 8LL));
    v17(v51, v10);
    char v52 = *(void *)(v12 - 312);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 168) + 32LL))(v52, v7, v10);
    if ((v49 & 1) != 0)
    {
      v17(v52, v10);
      __break(1u);
      JUMPOUT(0x1002038E0LL);
    }

    uint64_t v7 = *(void *)(v12 - 152);
    uint64_t v53 = dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
    uint64_t v54 = v52;
    uint64_t v55 = v53;
    v17(v54, v10);
  }

  while (v55 < v7);
LABEL_8:
  uint64_t v19 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
  v15(v5, v9, v10);
  if (v19 < 65)
  {
    uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
    v17(v5, v10);
    if (v27 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8) & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v17(v5, v10);
  }

  id v20 = *(void *)(v12 - 216);
  v15(v20, v9, v10);
  *(void *)(v12 - 152)  = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v21 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8);
  uint64_t v22 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
  if ((v21 & 1) != 0)
  {
    if (v22 > 64)
    {
      uint64_t v23 = sub_100024970();
      os_log_type_t v24 = *(void *)(v12 - 280);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 152, &type metadata for Int, v23, v10, v8);
      uint64_t v25 = dispatch thunk of static Comparable.< infix(_:_:)(v24, v20, v10, *(void *)(*(void *)(v8 + 32) + 8LL));
      v17(v24, v10);
      uint64_t v26 = v20;
      goto LABEL_19;
    }

      uint64_t v97 = 2LL;
      return a3(v97);
    default:
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v26);
      unint64_t v45 = static os_log_type_t.error.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        unint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)unint64_t v46 = 134217984;
        uint64_t v117 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unhandled XPC responder type: %lu", v46, 0xCu);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      goto LABEL_25;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(void *)(v4 + 48) + v15)  = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15)  = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain(v16);
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  char v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    char v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 8 * v15;
    id v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v17;
    *(_WORD *)(v21 + 4)  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain(v20);
  }

  os_log_type_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    char v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 8 * v15;
    id v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v17;
    *(_WORD *)(v21 + 4)  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
    swift_retain();
  }

  os_log_type_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v28 - 1) & v28;
    uint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 3 * v15;
    uint64_t v17 = 2 * v16;
    char v18 = *(void *)(v2 + 48) + 2 * v16;
    uint64_t v19 = *(_WORD *)(v18 + 4);
    v16 *= 8LL;
    id v20 = *(void *)(v2 + 56) + v16;
    uint64_t v21 = *(_WORD *)(v20 + 4);
    uint64_t v22 = *(_BYTE *)(v20 + 6);
    uint64_t v23 = *(void *)(v20 + 8);
    os_log_type_t v24 = *(void *)(v20 + 16);
    uint64_t v25 = *(void *)(v4 + 48) + v17;
    LODWORD(v20)  = *(_DWORD *)v20;
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v18;
    *(_WORD *)(v25 + 4)  = v19;
    uint64_t v26 = *(void *)(v4 + 56) + v16;
    *(_DWORD *)uint64_t v26 = v20;
    *(_WORD *)(v26 + 4)  = v21;
    *(_BYTE *)(v26 + 6)  = v22;
    *(void *)(v26 + 8)  = v23;
    *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v24;
    sub_10002255C(v23, v24);
  }

  char v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  uint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    uint64_t v9 = v29;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    char v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    *(void *)(*(void *)(v4 + 56) + vswift_unknownObjectWeakDestroy(v0 + 16) = v18;
    uint64_t result = v17;
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  id v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v17 = (v26 - 1) & v26;
    id v20 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = *(void *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v21, v4);
    uint64_t v22 = 16 * v20;
    uint64_t v23 = *(void *)(v10 + 48) + v21;
    os_log_type_t v24 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    uint64_t v30 = *(_OWORD *)(*(void *)(v8 + 56) + v22);
    v24(v23, v7, v4);
    *(_OWORD *)(*(void *)(v10 + 56) + v22)  = v30;
    uint64_t result = (void *)swift_retain();
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v18)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v8);
    uint64_t v3 = v28;
    goto LABEL_28;
  }

  uint64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    uint64_t v14 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v14 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v29 + 8 * v14);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v25 = __clz(__rbit64(v23));
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    char v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 8 * v15;
    id v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v17;
    *(_WORD *)(v21 + 4)  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
  }

  os_log_type_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    char v18 = v17[1];
    uint64_t v19 = 8 * v15;
    id v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1]  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_bridgeObjectRetain(v20);
  }

  os_log_type_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(void *)(v5 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(*(void *)(v3 + 48) + v16);
    *(void *)(*(void *)(v5 + 56) + 8 * vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v17);
  }

  id v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    uint64_t v10 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    char v18 = (v25 - 1) & v25;
    uint64_t v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = *(_BYTE *)(*(void *)(v9 + 48) + v21);
    uint64_t v23 = *(void *)(v30 + 72) * v21;
    sub_100057FE8(*(void *)(v9 + 56) + v23, (uint64_t)v8, a1);
    *(_BYTE *)(*(void *)(v11 + 48) + v21)  = v22;
    uint64_t result = (void *)sub_100022628((uint64_t)v8, *(void *)(v11 + 56) + v23, a1);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v19)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v9);
    uint64_t v5 = v28;
    goto LABEL_28;
  }

  uint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v15 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v15 >= v19) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v29 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    id v20 = __clz(__rbit64(v18));
    uint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    *(_BYTE *)(*(void *)(v4 + 48) + v15)  = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(_BYTE *)(*(void *)(v4 + 56) + v15)  = v16;
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  char v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 48) + 8 * v15;
    uint64_t v17 = *(_DWORD *)v16;
    LOWORD(vswift_unknownObjectWeakDestroy(v0 + 16) = *(_WORD *)(v16 + 4);
    char v18 = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = *(void *)(v4 + 48) + 8 * v15;
    *(_DWORD *)uint64_t v19 = v17;
    *(_WORD *)(v19 + 4)  = v16;
    *(_BYTE *)(*(void *)(v4 + 56) + v15)  = v18;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v29 - 1) & v29;
    uint64_t v19 = __clz(__rbit64(v29)) + (v13 << 6);
LABEL_12:
    id v20 = 7 * v19;
    uint64_t v21 = *(void *)(v6 + 48) + 7 * v19;
    uint64_t v22 = *(_WORD *)(v21 + 4);
    uint64_t v23 = *(_BYTE *)(v21 + 6);
    os_log_type_t v24 = *(void *)(v36 + 72) * v19;
    uint64_t v25 = *(_DWORD *)v21;
    sub_100057FE8(*(void *)(v6 + 56) + v24, (uint64_t)v5, i);
    uint64_t v26 = v38;
    uint64_t v27 = *(void *)(v38 + 48) + v20;
    *(_DWORD *)uint64_t v27 = v25;
    *(_WORD *)(v27 + 4)  = v22;
    *(_BYTE *)(v27 + 6)  = v23;
  }

  uint64_t v30 = v28 + 2;
  if (v30 >= v35)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v31 = v33;
    uint64_t v32 = v38;
    goto LABEL_28;
  }

  char v29 = *(void *)(v34 + 8 * v30);
  if (v29)
  {
    uint64_t v13 = v30;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v13 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v13 >= v35) {
      goto LABEL_26;
    }
    char v29 = *(void *)(v34 + 8 * v13);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    char v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 16 * v15;
    id v20 = (uint64_t *)(*(void *)(v2 + 56) + v19);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v17;
    *(_WORD *)(v23 + 4)  = v18;
    os_log_type_t v24 = (void *)(*(void *)(v4 + 56) + v19);
    *os_log_type_t v24 = v22;
    v24[1]  = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v28 = __clz(__rbit64(v26));
    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = v28 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 8 * v15;
    char v18 = *(_DWORD *)v17;
    LOWORD(v17)  = *(_WORD *)(v17 + 4);
    uint64_t v19 = 24 * v15;
    id v20 = *(void *)(v2 + 56) + v19;
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    uint64_t v22 = *(void *)(v20 + 16);
    uint64_t v23 = *(_OWORD *)v20;
    *(_DWORD *)uint64_t v21 = v18;
    *(_WORD *)(v21 + 4)  = v17;
    os_log_type_t v24 = *(void *)(v4 + 56) + v19;
    *(_OWORD *)os_log_type_t v24 = v23;
    *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(void *)(v4 + 48) + v15)  = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15)  = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain(v16);
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  char v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v22 - 1) & v22;
    char v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v19, v2);
    id v20 = 40 * v18;
    sub_10002084C(*(void *)(v6 + 56) + v20, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v19, v5, v2);
    uint64_t result = (void *)sub_1000589F8(v27, *(void *)(v8 + 56) + v20);
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v26 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v26 - 1) & v26;
    char v18 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_12:
    uint64_t v19 = 6 * v18;
    id v20 = *(void *)(v7 + 48) + 6 * v18;
    uint64_t v21 = *(_WORD *)(v20 + 4);
    uint64_t v22 = *(void *)(v31 + 72) * v18;
    uint64_t v23 = *(_DWORD *)v20;
    sub_100057FE8(*(void *)(v7 + 56) + v22, (uint64_t)v6, a1);
    os_log_type_t v24 = *(void *)(v9 + 48) + v19;
    *(_DWORD *)os_log_type_t v24 = v23;
    *(_WORD *)(v24 + 4)  = v21;
    uint64_t result = (void *)sub_100022628((uint64_t)v6, *(void *)(v9 + 56) + v22, a1);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v30) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    uint64_t v13 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v13 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v13 >= v30) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v29 + 8 * v13);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    char v18 = 8 * v16;
    uint64_t v19 = *(void **)(*(void *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18)  = v19;
    id v20 = v19;
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v27) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v27) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v26 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    char v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18)  = v19;
    swift_bridgeObjectRetain(v19);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v19 = *(void *)v17;
    char v18 = *(void *)(v17 + 8);
    id v20 = *(_BYTE *)(v17 + 16);
    LOBYTE(v17)  = *(_BYTE *)(v17 + 17);
    uint64_t v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    uint64_t v23 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8)  = v18;
    *(_BYTE *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    *(_BYTE *)(v23 + 17)  = v17;
    *(void *)(*(void *)(v4 + 56) + v21)  = v22;
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    uint64_t v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

LABEL_66:
  if (*(_DWORD *)(v9 + 32) == v51)
  {
    uint64_t v56 = swift_retain_n(v9, 2LL);
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v60 = swift_slowAlloc(32LL, -1LL);
      uint64_t v94 = v60;
      *(_DWORD *)uint64_t v59 = 136315138;
      unint64_t v61 = 0xE700000000000000LL;
      uint64_t v62 = 0x64696C61766E69LL;
      switch(*(_DWORD *)(v9 + 32))
      {
        case 0:
          break;
        case 1:
          uint64_t v62 = 0x6569667369746173LL;
          unint64_t v61 = 0xE900000000000064LL;
          break;
        case 2:
          uint64_t v62 = 0x6673697461736E75LL;
          uint64_t v70 = 6579561LL;
          goto LABEL_78;
        case 3:
          uint64_t v62 = 0x6169667369746173LL;
          uint64_t v70 = 6646882LL;
LABEL_78:
          unint64_t v61 = v70 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000LL;
          break;
        default:
          uint64_t v62 = 0x6E776F6E6B6E75LL;
          break;
      }

      uint64_t v90 = sub_10000235C(v62, v61, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_release_n(v9, 2LL);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Ignoring path status update when %s", v59, 0xCu);
      swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_release(v9);
    }

    else
    {
      swift_release_n(v9, 3LL);
    }
  }

  else
  {
    swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v63 = swift_retain_n(v9, 2LL);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      uint64_t v67 = swift_slowAlloc(96LL, -1LL);
      uint64_t v94 = v67;
      *(_DWORD *)uint64_t v66 = 136315650;
      swift_bridgeObjectRetain(a4);
      uint64_t v90 = sub_10000235C(a3, a4, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v66 + 12)  = 2080;
      unint64_t v68 = 0xE700000000000000LL;
      uint64_t v69 = 0x64696C61766E69LL;
      switch(*(_DWORD *)(v9 + 32))
      {
        case 0:
          break;
        case 1:
          uint64_t v69 = 0x6569667369746173LL;
          unint64_t v68 = 0xE900000000000064LL;
          break;
        case 2:
          uint64_t v69 = 0x6673697461736E75LL;
          uint64_t v71 = 6579561LL;
          goto LABEL_84;
        case 3:
          uint64_t v69 = 0x6169667369746173LL;
          uint64_t v71 = 6646882LL;
LABEL_84:
          unint64_t v68 = v71 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000LL;
          break;
        default:
          uint64_t v69 = 0x6E776F6E6B6E75LL;
          break;
      }

      uint64_t v90 = sub_10000235C(v69, v68, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_release_n(v9, 2LL);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v66 + 22)  = 2080;
      unint64_t v72 = 0xE700000000000000LL;
      uint64_t v73 = 0x64696C61766E69LL;
      switch(v51)
      {
        case 0:
          break;
        case 1:
          uint64_t v73 = 0x6569667369746173LL;
          unint64_t v72 = 0xE900000000000064LL;
          break;
        case 2:
          uint64_t v73 = 0x6673697461736E75LL;
          uint64_t v74 = 6579561LL;
          goto LABEL_90;
        case 3:
          uint64_t v73 = 0x6169667369746173LL;
          uint64_t v74 = 6646882LL;
LABEL_90:
          unint64_t v72 = v74 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000LL;
          break;
        default:
          uint64_t v73 = 0x6E776F6E6B6E75LL;
          break;
      }

      uint64_t v90 = sub_10000235C(v73, v72, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_bridgeObjectRelease(v72);
      _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "Network path status on %s changed from %s to %s",  (uint8_t *)v66,  0x20u);
      swift_arrayDestroy(v67, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v9, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    nw_path_status_t v75 = status;
    *(_DWORD *)(v9 + 32)  = status;
    uint64_t v77 = *(void (**)(BOOL))(v9 + 40);
    uint64_t v76 = *(void *)(v9 + 48);
    BOOL v78 = v75 == nw_path_status_satisfied;
    swift_retain();
    v77(v78);
    swift_release(v76);
    if (*(_DWORD *)(v9 + 32) == 1)
    {
      if (qword_1004040B8 != -1) {
        swift_once(&qword_1004040B8, sub_1000411C4);
      }
      Swift::String v79 = (void *)qword_100405260;
      NSString v80 = String._bridgeToObjectiveC()();
      [v79 setLinkEvent:1 isInvoluntary:1 linkChangeReason:0 linkChangeSubreason:0 withNetworkDetails:0 forInterface:v80];

      uint64_t v81 = (void *)qword_100405260;
      NSString v82 = String._bridgeToObjectiveC()();
      [v81 notifyInterfaceRankingState:1 forInterface:v82];
    }

    else
    {
      if (qword_1004040B8 != -1) {
        swift_once(&qword_1004040B8, sub_1000411C4);
      }
      os_log_t v83 = (void *)qword_100405260;
      NSString v84 = String._bridgeToObjectiveC()();
      [v83 notifyInterfaceRankingState:0 forInterface:v84];

      uint64_t v85 = (void *)qword_100405260;
      NSString v82 = String._bridgeToObjectiveC()();
      [v85 setLinkEvent:0 isInvoluntary:1 linkChangeReason:0 linkChangeSubreason:0 withNetworkDetails:0 forInterface:v82];
    }

    swift_release(v9);
  }

void sub_100040F74()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 24);
  oslog  = (os_log_s *)Logger.logObject.getter();
  if (v2)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Stop monitoring network path status", v4, 2u);
      swift_slowDealloc(v4, -1LL, -1LL);
    }

    *(_DWORD *)(v1 + 32)  = 2;
    uint64_t v5 = *(void *)(v1 + 24);
    *(void *)(v1 + 24)  = 0LL;
    swift_release(v5);
  }

  else
  {
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Already stopped monitoring network path status", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }
  }

uint64_t sub_1000410AC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      return 0x6961462050434844LL;
    }

    else if (a1 | a2)
    {
      return 0x74616E696D726554LL;
    }

    else
    {
      return 0x72756769666E6F43LL;
    }
  }

  else
  {
    uint64_t v4 = 0x6569667369746153LL;
    if ((a1 & 1) != 0)
    {
      unint64_t v5 = 0xE900000000000064LL;
    }

    else
    {
      uint64_t v4 = 0x6673697461736E55LL;
      unint64_t v5 = 0xEB00000000646569LL;
    }

    uint64_t v7 = v4;
    swift_bridgeObjectRetain(v5);
    v6._object  = (void *)0xEA00000000007265LL;
    v6._countAndFlagsBits  = 0x7473657571655220LL;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v5);
    return v7;
  }

uint64_t sub_1000411B8()
{
  return sub_1000410AC(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

id sub_1000411C4()
{
  id result = [(id)objc_opt_self(WiFiUsageMonitor) sharedInstance];
  qword_100405260  = (uint64_t)result;
  return result;
}

uint64_t sub_1000411FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_100056548(a1, a2, a3);
  swift_retain();
  sub_100056548(a1, a2, a3);
  uint64_t v8 = swift_retain();
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  p_superclass  = (__objc2_class **)(&OBJC_METACLASS____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver
                                  + 8);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v47 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    if (a3)
    {
      if (a3 == 1)
      {
        unint64_t v14 = 0xEB0000000064656CLL;
        uint64_t v15 = 0x6961462050434844LL;
      }

      else
      {
        if (a1 | a2) {
          uint64_t v15 = 0x74616E696D726554LL;
        }
        else {
          uint64_t v15 = 0x72756769666E6F43LL;
        }
        if (a1 | a2) {
          unint64_t v14 = 0xEA00000000006465LL;
        }
        else {
          unint64_t v14 = 0xEB00000000676E69LL;
        }
      }
    }

    else
    {
      uint64_t v16 = 0x6569667369746153LL;
      if ((a1 & 1) != 0)
      {
        unint64_t v17 = 0xE900000000000064LL;
      }

      else
      {
        uint64_t v16 = 0x6673697461736E55LL;
        unint64_t v17 = 0xEB00000000646569LL;
      }

      uint64_t v45 = v16;
      unint64_t v46 = v17;
      swift_bridgeObjectRetain(v17);
      v18._object  = (void *)0xEA00000000007265LL;
      v18._countAndFlagsBits  = 0x7473657571655220LL;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v17);
      uint64_t v15 = v45;
      unint64_t v14 = v17;
    }

    uint64_t v45 = sub_10000235C(v15, v14, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_bridgeObjectRelease(v14);
    sub_100056570(a1, a2, a3);
    sub_100056570(a1, a2, a3);
    *(_WORD *)(v12 + 12)  = 2080;
    if (*(_BYTE *)(v4
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                  + 16))
    {
      if (*(_BYTE *)(v4
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                    + 16) == 1)
      {
        unint64_t v19 = 0xEB0000000064656CLL;
        uint64_t v20 = 0x6961462050434844LL;
      }

      else
      {
        if (*(_OWORD *)(v4
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) == 0LL)
          uint64_t v20 = 0x72756769666E6F43LL;
        else {
          uint64_t v20 = 0x74616E696D726554LL;
        }
        if (*(_OWORD *)(v4
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) == 0LL)
          unint64_t v19 = 0xEB00000000676E69LL;
        else {
          unint64_t v19 = 0xEA00000000006465LL;
        }
      }
    }

    else
    {
      uint64_t v21 = 0x6569667369746153LL;
      if ((*(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) & 1LL) != 0)
      {
        unint64_t v22 = 0xE900000000000064LL;
      }

      else
      {
        uint64_t v21 = 0x6673697461736E55LL;
        unint64_t v22 = 0xEB00000000646569LL;
      }

      uint64_t v45 = v21;
      unint64_t v46 = v22;
      swift_bridgeObjectRetain(v22);
      v23._object  = (void *)0xEA00000000007265LL;
      v23._countAndFlagsBits  = 0x7473657571655220LL;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v22);
      uint64_t v20 = v45;
      unint64_t v19 = v46;
    }

    uint64_t v45 = sub_10000235C(v20, v19, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_release_n(v4, 2LL);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Requester state changed: %s -> %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    p_superclass  = &OBJC_METACLASS____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver.superclass;
  }

  else
  {

    sub_100056570(a1, a2, a3);
    sub_100056570(a1, a2, a3);
    swift_release_n(v3, 2LL);
  }

  os_log_type_t v24 = (char *)p_superclass[112] + v4;
  if (v24[16] == 1)
  {
    uint64_t v26 = *(void *)v24;
    unint64_t v25 = *((void *)v24 + 1);
    swift_retain();
    sub_100056548(v26, v25, 1);
    swift_retain();
    uint64_t v27 = sub_100056548(v26, v25, 1);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    uint64_t v30 = &OBJC_METACLASS____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver.superclass;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v44 = swift_slowAlloc(64LL, -1LL);
      uint64_t v45 = v44;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v32 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
      unint64_t v33 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                      + 8);
      swift_bridgeObjectRetain(v33);
      uint64_t v47 = sub_10000235C(v32, v33, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_release_n(v4, 2LL);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v31 + 12)  = 2080;
      swift_bridgeObjectRetain(v25);
      uint64_t v47 = sub_10000235C(v26, v25, &v45);
      uint64_t v30 = (__objc2_class **)(&OBJC_METACLASS____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver + 8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      sub_100056570(v26, v25, 1);
      sub_100056570(v26, v25, 1);
      swift_bridgeObjectRelease(v25);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Requester DHCP failed on %s because %s",  (uint8_t *)v31,  0x16u);
      swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v4, 2LL);

      sub_100056570(v26, v25, 1);
      sub_100056570(v26, v25, 1);
    }

    unint64_t v34 = (unint64_t *)((char *)v30[113] + v4);
    unint64_t v35 = *v34;
    unint64_t v36 = v34[1];
    swift_bridgeObjectRetain(v36);
    sub_10005468C(v35, v36, 0);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(v36);
    if (v38) {
      swift_bridgeObjectRelease(v38);
    }
  }

  unint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4
                                                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
  uint64_t v40 = *(void *)v24;
  uint64_t v41 = *((void *)v24 + 1);
  uint64_t v42 = v24[16];
  sub_100056548(*(void *)v24, v41, v24[16]);
  v39(v40, v41, v42);
  return sub_100056570(v40, v41, v42);
}

uint64_t sub_100041888()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
  if (!*(_BYTE *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                 + 16))
  {
    sub_100040F74();
    unint64_t v3 = *(void *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    unint64_t v4 = *(void *)(v1
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                   + 8);
    swift_bridgeObjectRetain(v4);
    sub_10005468C(v3, v4, 0);
    uint64_t v6 = v5;
    swift_bridgeObjectRelease(v4);
    if (v6) {
      swift_bridgeObjectRelease(v6);
    }
    uint64_t v7 = *(void *)v2;
    uint64_t v8 = *(void *)(v2 + 8);
    *(_OWORD *)uint64_t v2 = xmmword_100337020;
    char v9 = *(_BYTE *)(v2 + 16);
    *(_BYTE *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
    sub_100056548(v7, v8, v9);
    sub_100056570(v7, v8, v9);
    sub_1000411FC(v7, v8, v9);
    sub_100056570(v7, v8, v9);
  }

  uint64_t v10 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_logger;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease(*(void *)(v1
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                                      + 8));
  swift_release(*(void *)(v1
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler
                          + 8));
  swift_release(*(void *)(v1
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor));
  sub_100056570(*(void *)v2, *(void *)(v2 + 8), *(_BYTE *)(v2 + 16));
  return v1;
}

uint64_t sub_1000419E8()
{
  return sub_100044CC8(sub_100041888);
}

uint64_t sub_1000419F4(const __SCPreferences *a1, unint64_t a2, unint64_t a3, char a4)
{
  LOBYTE(v5)  = a4;
  NSString v9 = String._bridgeToObjectiveC()();
  uint64_t v10 = (void *)_SCNetworkInterfaceCreateWithBSDName(kCFAllocatorDefault, v9, 0xFFFFFFFFLL);

  if (!v10)
  {
    _StringGuts.grow(_:)(42LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v60 = 0xD000000000000028LL;
    unint64_t v61 = 0x8000000100362E20LL;
    v23._countAndFlagsBits  = a2;
    v23._object  = (void *)a3;
    String.append(_:)(v23);
    return 0LL;
  }

  CFArrayRef v11 = SCNetworkServiceCopyAll(a1);
  if (!v11
    || (uint64_t v12 = v11,
        unint64_t v60 = 0LL,
        type metadata accessor for SCNetworkService(0LL),
        uint64_t v14 = v13,
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v12, &v60, v13),
        v12,
        (uint64_t v15 = v60) == 0))
  {

    return 0LL;
  }

  prefs  = a1;
  uint64_t v16 = v60 & 0xFFFFFFFFFFFFFF8LL;
  if (v60 >> 62)
  {
LABEL_88:
    if (v15 >= 0) {
      uint64_t v12 = (void *)v16;
    }
    else {
      uint64_t v12 = (void *)v15;
    }
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v15);
    if (v17) {
      goto LABEL_6;
    }
LABEL_92:
    swift_bridgeObjectRelease(v15);
LABEL_93:
    unint64_t v60 = 0LL;
    unint64_t v61 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(v61);
    unint64_t v60 = 0xD000000000000023LL;
    unint64_t v61 = 0x8000000100362E80LL;
    v48._countAndFlagsBits  = a2;
    v48._object  = (void *)a3;
    String.append(_:)(v48);

    return 0LL;
  }

  uint64_t v17 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (!v17) {
    goto LABEL_92;
  }
LABEL_6:
  unint64_t v55 = a2;
  char v53 = v5;
  uint64_t v59 = v14;
  uint64_t v14 = 0LL;
  a2  = 0LL;
  while (1)
  {
    if ((v15 & 0xC000000000000001LL) != 0)
    {
      Swift::String v18 = (const __SCNetworkService *)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, v15);
    }

    else
    {
      if (a2 >= *(void *)(v16 + 16)) {
        goto LABEL_85;
      }
      Swift::String v18 = (const __SCNetworkService *)*(id *)(v15 + 32 + 8 * a2);
    }

    uint64_t v12 = v18;
    BOOL v19 = __OFADD__(a2++, 1LL);
    if (v19)
    {
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:

      swift_bridgeObjectRelease(v16);
      return 0LL;
    }

    if (v14) {
      goto LABEL_8;
    }
    uint64_t v20 = SCNetworkServiceGetInterface(v18);
    if (v20) {
      break;
    }
LABEL_7:
    uint64_t v14 = 0LL;
LABEL_8:

    if (a2 == v17)
    {
      swift_bridgeObjectRelease(v15);
      a2  = v55;
      if (v14)
      {
        a2  = v14;
        os_log_type_t v24 = (void *)v14;
        goto LABEL_25;
      }

      goto LABEL_93;
    }
  }

  SCNetworkInterfaceRef v4 = v20;
  if (!CFEqual(v20, v10))
  {
    while (1)
    {
      SCNetworkInterfaceRef v21 = v4;
      SCNetworkInterfaceRef v4 = SCNetworkInterfaceGetInterface(v4);

      if (!v4) {
        goto LABEL_7;
      }
      if (CFEqual(v4, v10))
      {
        uint64_t v14 = (uint64_t)v12;
        uint64_t v12 = v4;
        goto LABEL_8;
      }
    }
  }

  swift_bridgeObjectRelease(v15);

  a2  = v12;
  os_log_type_t v24 = 0LL;
  uint64_t v14 = (uint64_t)v12;
LABEL_25:
  id v25 = v24;
  uint64_t v5 = v59;
  if (!SCNetworkServiceSetEnabled((SCNetworkServiceRef)a2, v53 & 1))
  {
    unint64_t v60 = 0LL;
    unint64_t v61 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(24LL);
    swift_bridgeObjectRelease(v61);
    unint64_t v60 = 0x742064656C696146LL;
    unint64_t v61 = 0xEA0000000000206FLL;
    if ((v53 & 1) != 0) {
      uint64_t v44 = 0x656C62616E65LL;
    }
    else {
      uint64_t v44 = 0x656C6261736964LL;
    }
    if ((v53 & 1) != 0) {
      unint64_t v45 = 0xE600000000000000LL;
    }
    else {
      unint64_t v45 = 0xE700000000000000LL;
    }
    unint64_t v46 = v45;
    String.append(_:)(*(Swift::String *)&v44);
    swift_bridgeObjectRelease(v45);
    v47._countAndFlagsBits  = 0x6563697672657320LL;
    v47._object  = (void *)0xEC00000074657320LL;
    String.append(_:)(v47);

    return 0LL;
  }

  CFArrayRef v26 = SCNetworkSetCopyAll(prefs);
  if (!v26
    || (CFArrayRef v27 = v26,
        unint64_t v60 = 0LL,
        type metadata accessor for SCNetworkSet(0LL),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v27, &v60, v28),
        v27,
        (uint64_t v16 = v60) == 0))
  {

    return 0LL;
  }

  uint64_t v29 = v60 & 0xFFFFFFFFFFFFFF8LL;
  if (v60 >> 62) {
    goto LABEL_98;
  }
  uint64_t v15 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v15)
  {
LABEL_30:
    a3  = 0LL;
    service  = (const __SCNetworkService *)a2;
    prefs  = (const __SCPreferences *)(v16 & 0xC000000000000001LL);
    uint64_t v50 = v14;
    uint64_t v51 = v16 + 32;
    uint64_t v52 = v29;
    uint64_t v54 = v16;
    uint64_t v56 = v15;
    do
    {
      if (prefs)
      {
        uint64_t v30 = (const __SCNetworkSet *)specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v16);
      }

      else
      {
        if (a3 >= *(void *)(v29 + 16))
        {
          __break(1u);
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }

        uint64_t v30 = (const __SCNetworkSet *)*(id *)(v51 + 8 * a3);
      }

      SCNetworkInterfaceRef v4 = v30;
      BOOL v19 = __OFADD__(a3++, 1LL);
      if (v19)
      {
        __break(1u);
        goto LABEL_88;
      }

      CFArrayRef v31 = SCNetworkSetCopyServices(v30);
      if (v31)
      {
        CFArrayRef v32 = v31;
        unint64_t v60 = 0LL;
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v31, &v60, v5);

        unint64_t v33 = v60;
        if (!v60)
        {

          goto LABEL_74;
        }

        if (v60 >> 62)
        {
          if ((v60 & 0x8000000000000000LL) == 0LL) {
            uint64_t v43 = v60 & 0xFFFFFFFFFFFFFF8LL;
          }
          else {
            uint64_t v43 = v60;
          }
          swift_bridgeObjectRetain(v60);
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v43);
          if (!v29)
          {
LABEL_72:

            swift_bridgeObjectRelease_n(v33, 2LL);
LABEL_73:
            uint64_t v29 = v52;
            uint64_t v16 = v54;
LABEL_74:
            uint64_t v15 = v56;
            continue;
          }
        }

        else
        {
          uint64_t v29 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          swift_bridgeObjectRetain(v60);
          if (!v29) {
            goto LABEL_72;
          }
        }

        if ((v33 & 0xC000000000000001LL) != 0) {
          id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v33);
        }
        else {
          id v34 = *(id *)(v33 + 32);
        }
        unint64_t v35 = v34;
        a2  = sub_10000AF70( &qword_100405DC8,  (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService,  (uint64_t)&unk_100339220);
        char v36 = static _CFObject.== infix(_:_:)(v35, service, v5, a2);

        if ((v36 & 1) == 0)
        {
          if (v29 == 1) {
            goto LABEL_51;
          }
          if ((v33 & 0xC000000000000001LL) != 0)
          {
            uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v33);
            char v38 = static _CFObject.== infix(_:_:)(v16, service, v59, a2);
            swift_unknownObjectRelease(v16);
            if ((v38 & 1) == 0)
            {
              if (v29 != 2)
              {
                uint64_t v14 = 2LL;
                do
                {
                  uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v33);
                  uint64_t v5 = v14 + 1;
                  if (__OFADD__(v14, 1LL)) {
                    goto LABEL_96;
                  }
                  uint64_t v16 = v39;
                  char v40 = static _CFObject.== infix(_:_:)(v39, service, v59, a2);
                  swift_unknownObjectRelease(v16);
                  if ((v40 & 1) != 0) {
                    goto LABEL_45;
                  }
                  ++v14;
                }

                while (v5 != v29);
              }

LABEL_51:
              swift_bridgeObjectRelease_n(v33, 2LL);
              uint64_t v5 = v59;
              uint64_t v14 = v50;
              a2  = (unint64_t)service;
              goto LABEL_73;
            }
          }

          else
          {
            uint64_t v16 = (uint64_t)*(id *)(v33 + 40);
            char v41 = static _CFObject.== infix(_:_:)(v16, service, v59, a2);

            if ((v41 & 1) == 0)
            {
              if (v29 != 2)
              {
                uint64_t v14 = 6LL;
                while (1)
                {
                  uint64_t v5 = v14 - 3;
                  if (__OFADD__(v14 - 4, 1LL)) {
                    break;
                  }
                  uint64_t v16 = (uint64_t)*(id *)(v33 + 8 * v14);
                  char v42 = static _CFObject.== infix(_:_:)(v16, service, v59, a2);

                  if ((v42 & 1) != 0) {
                    goto LABEL_45;
                  }
                  ++v14;
                  if (v5 == v29) {
                    goto LABEL_51;
                  }
                }

  __break(1u);
LABEL_52:
  __break(1u);
}

LABEL_97:
                __break(1u);
LABEL_98:
                if (v16 >= 0) {
                  uint64_t v49 = v29;
                }
                else {
                  uint64_t v49 = v16;
                }
                swift_bridgeObjectRetain(v16);
                uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v49);
                swift_bridgeObjectRelease(v16);
                if (!v15) {
                  break;
                }
                goto LABEL_30;
              }

              goto LABEL_51;
            }
          }
        }

    if ((v2[41] & 1) == 0) {
      goto LABEL_99;
    }
    goto LABEL_98;
  }

  if (!v10)
  {
    if (v11)
    {
      if (v12)
      {
        if ((v13 & 1) == 0)
        {
          if ((v2[41] & 1) != 0)
          {
            uint64_t v16 = 1248;
            goto LABEL_98;
          }

          uint64_t v16 = 1248;
          if ((*((_BYTE *)v2 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }

        uint64_t v16 = 3296;
      }

      else
      {
        if ((v13 & 1) == 0)
        {
          if ((v2[41] & 1) != 0)
          {
            uint64_t v16 = 224;
            goto LABEL_98;
          }

          uint64_t v16 = 224;
          if ((*((_BYTE *)v2 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }

        uint64_t v16 = 2272;
      }
    }

    else if (v12)
    {
      if ((v13 & 1) == 0)
      {
        if ((v2[41] & 1) != 0)
        {
          uint64_t v16 = 1120;
          goto LABEL_98;
        }

        uint64_t v16 = 1120;
        if ((*((_BYTE *)v2 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }

      uint64_t v16 = 3168;
    }

    else
    {
      if ((v13 & 1) == 0)
      {
        if ((v2[41] & 1) != 0)
        {
          uint64_t v16 = 96;
          goto LABEL_98;
        }

        uint64_t v16 = 96;
        if ((*((_BYTE *)v2 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }

      uint64_t v16 = 2144;
    }

    goto LABEL_97;
  }

  if (!v11)
  {
    if (v12)
    {
      if ((v13 & 1) == 0)
      {
        if ((v2[41] & 1) != 0)
        {
          uint64_t v16 = 1136;
          goto LABEL_98;
        }

        uint64_t v16 = 1136;
        if ((*((_BYTE *)v2 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }

      uint64_t v16 = 3184;
    }

    else
    {
      if ((v13 & 1) == 0)
      {
        if ((v2[41] & 1) != 0)
        {
          uint64_t v16 = 112;
          goto LABEL_98;
        }

        uint64_t v16 = 112;
        if ((*((_BYTE *)v2 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }

      uint64_t v16 = 2160;
    }

    goto LABEL_97;
  }

  if (!v12)
  {
    if ((v13 & 1) == 0)
    {
      if ((v2[41] & 1) != 0)
      {
        uint64_t v16 = 240;
        goto LABEL_98;
      }

      uint64_t v16 = 240;
      if ((*((_BYTE *)v2 + 83) & 1) == 0) {
        goto LABEL_101;
      }
      goto LABEL_100;
    }

    uint64_t v16 = 2288;
    goto LABEL_97;
  }

  if ((v13 & 1) != 0)
  {
    uint64_t v16 = 3312;
    goto LABEL_97;
  }

  if ((v2[41] & 1) != 0)
  {
    uint64_t v16 = 1264;
LABEL_98:
    v16 |= 0x2000u;
LABEL_99:
    if (*((_BYTE *)v2 + 83) != 1) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }

  uint64_t v16 = 1264;
  if ((*((_BYTE *)v2 + 83) & 1) != 0) {
    goto LABEL_100;
  }
LABEL_101:
  *(_DWORD *)uint64_t v152 = v16;
  uint64_t v17 = sub_1000A7CA8(0LL);
  Swift::String v18 = sub_10000D9B0(v17);
  BOOL v19 = type metadata accessor for BinaryEncoder();
  uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
  uint64_t v150 = xmmword_1003398F0;
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1003398F0;
  uint64_t v151 = (_OWORD *)(v20 + 16);
  *(void *)(v20 + 32)  = v18;
  char v163 = &type metadata for BinaryEncoder.UnkeyedContainer;
  SCNetworkInterfaceRef v21 = sub_10006E360();
  unint64_t v22 = v21;
  uint64_t v164 = v21;
  uint64_t v162 = v20;
  if ((v2[1] & 1) != 0)
  {
    swift_retain();
  }

  else
  {
    Swift::String v79 = v7;
    NSString v80 = a1;
    uint64_t v81 = *v2;
    NSString v82 = v21;
    sub_1000237C8((uint64_t)&v162, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
    swift_retain();
    os_log_t v83 = *(void *)&v152[4];
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v81, &type metadata for BinaryEncoder.UnkeyedContainer, v82);
    *(void *)&v152[4]  = v83;
    if (v83) {
      goto LABEL_121;
    }
    NSString v84 = v81 >> 8;
    uint64_t v85 = v163;
    uint64_t v86 = v164;
    sub_1000237C8((uint64_t)&v162, (uint64_t)v163);
    uint64_t v87 = *(void *)&v152[4];
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v84, v85, v86);
    *(void *)&v152[4]  = v87;
    if (v87) {
      goto LABEL_121;
    }
    int v88 = v163;
    int v89 = v164;
    sub_1000237C8((uint64_t)&v162, (uint64_t)v163);
    uint64_t v90 = *(void *)&v152[4];
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(0LL, v88, v89);
    *(void *)&v152[4]  = v90;
    if (v90) {
      goto LABEL_121;
    }
    *(void *)uint64_t v152 = *(_DWORD *)v152 | 0x100u;
    unint64_t v22 = v82;
    a1  = v80;
    uint64_t v7 = v79;
  }

  Swift::String v23 = *((unsigned int *)v2 + 1) | ((unint64_t)v2[4] << 32);
  if ((v23 & 0xFF00000000LL) == 0x300000000LL) {
    goto LABEL_107;
  }
  int v145 = v2;
  if ((v23 & 0xFFFF0000) != 0) {
    goto LABEL_645;
  }
  os_log_type_t v24 = v7;
  id v25 = a1;
  CFArrayRef v26 = v22;
  CFArrayRef v27 = v163;
  uint64_t v28 = v164;
  sub_1000237C8((uint64_t)&v162, (uint64_t)v163);
  uint64_t v29 = *(void *)&v152[4];
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v23, v27, v28);
  *(void *)&v152[4]  = v29;
  if (!v29)
  {
    *(void *)uint64_t v152 = *(_DWORD *)v152 | 0x200u;
    unint64_t v22 = v26;
    a1  = v25;
    uint64_t v7 = v24;
    uint64_t v2 = v145;
LABEL_107:
    uint64_t v30 = *((_BYTE *)v2 + 16);
    int v145 = a1;
    unint64_t v146 = v22;
    if ((v30 & 1) != 0
      || (CFArrayRef v31 = *((unsigned int *)v2 + 5) | ((unint64_t)v2[12] << 32), (v31 & 0xFF00000000LL) == 0x300000000LL))
    {
LABEL_112:
      if ((v2[16] & 1) == 0)
      {
        uint64_t v44 = v2[15];
        unint64_t v45 = *(unsigned int *)(v2 + 13);
        unint64_t v46 = v45 | (v44 << 32);
        uint64_t v160 = &type metadata for BinaryEncoder.UnkeyedContainer;
        uint64_t v161 = v22;
        Swift::String v47 = v44 >> 8;
        *(_DWORD *)v152 |= 2u;
        v159[0]  = v20;
        Swift::String v48 = sub_100002274(&qword_1004040A8);
        uint64_t v49 = swift_allocObject(v48, 38LL, 7LL);
        uint64_t v50 = sub_100211E58(v49, 6LL);
        *(_BYTE *)uint64_t v51 = v45;
        v52.i64[0]  = 0xFFFFFFFFFFFFLL;
        v52.i64[1]  = 0xFFFFFFFFFFFFLL;
        char v53 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v46), v52);
        uint64_t v54 = (int16x8_t)vshlq_u64(v53, (uint64x2_t)xmmword_10033A8F0);
        *(int32x2_t *)v53.i8  = vmovn_s64((int64x2_t)vshlq_u64(v53, (uint64x2_t)xmmword_10033A8E0));
        *(int32x2_t *)v54.i8  = vmovn_s64((int64x2_t)v54);
        v54.i16[1]  = v54.i16[2];
        v54.i16[2]  = v53.i16[0];
        v54.i16[3]  = v53.i16[2];
        *(_DWORD *)(v51 + 1)  = vmovn_s16(v54).u32[0];
        *(_BYTE *)(v51 + 5)  = v47;
        unint64_t v55 = NANBitmap.Channel.operatingClass.getter(v50);
        swift_retain_n(v20, 2LL);
        uint64_t v56 = sub_1000FB08C(v55);
        os_log_type_t v58 = v57;
        swift_bridgeObjectRelease(v55);
        uint64_t v59 = (void *)sub_1000237C8((uint64_t)v159, (uint64_t)v160);
        swift_beginAccess(*v59 + 16LL, v156, 33LL, 0LL);
        sub_1000FA9C4(v56, v58);
        swift_endAccess(v156);
        sub_1000208D8(v56, v58);
        sub_100002AC4(v159);
        swift_release(v20);
      }

      if ((v2[31] & 1) == 0)
      {
        unint64_t v60 = v2[30];
        unint64_t v61 = *((unsigned int *)v2 + 14);
        uint64_t v62 = v61 | (v60 << 32);
        uint64_t v160 = &type metadata for BinaryEncoder.UnkeyedContainer;
        uint64_t v161 = v146;
        uint64_t v63 = v60 >> 8;
        *(_DWORD *)v152 |= 4u;
        v159[0]  = v20;
        uint64_t v64 = sub_100002274(&qword_1004040A8);
        os_log_type_t v65 = swift_allocObject(v64, 38LL, 7LL);
        uint64_t v66 = sub_100211E58(v65, 6LL);
        *(_BYTE *)uint64_t v67 = v61;
        v68.i64[0]  = 0xFFFFFFFFFFFFLL;
        v68.i64[1]  = 0xFFFFFFFFFFFFLL;
        uint64_t v69 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v62), v68);
        uint64_t v70 = (int16x8_t)vshlq_u64(v69, (uint64x2_t)xmmword_10033A8F0);
        *(int32x2_t *)v69.i8  = vmovn_s64((int64x2_t)vshlq_u64(v69, (uint64x2_t)xmmword_10033A8E0));
        *(int32x2_t *)v70.i8  = vmovn_s64((int64x2_t)v70);
        v70.i16[1]  = v70.i16[2];
        v70.i16[2]  = v69.i16[0];
        v70.i16[3]  = v69.i16[2];
        *(_DWORD *)(v67 + 1)  = vmovn_s16(v70).u32[0];
        *(_BYTE *)(v67 + 5)  = v63;
        uint64_t v71 = NANBitmap.Channel.operatingClass.getter(v66);
        swift_retain_n(v20, 2LL);
        unint64_t v72 = sub_1000FB08C(v71);
        uint64_t v74 = v73;
        swift_bridgeObjectRelease(v71);
        nw_path_status_t v75 = (void *)sub_1000237C8((uint64_t)v159, (uint64_t)v160);
        swift_beginAccess(*v75 + 16LL, v156, 33LL, 0LL);
        sub_1000FA9C4(v72, v74);
        swift_endAccess(v156);
        sub_1000208D8(v72, v74);
        sub_100002AC4(v159);
        swift_release(v20);
      }

      uint64_t v76 = *((void *)v2 + 6);
      os_log_t v144 = v7;
      if (v76)
      {
        uint64_t v77 = *((void *)v2 + 5);
        swift_bridgeObjectRetain(v76);
        sub_1000EF90C(v77, v76);
        *(_DWORD *)v152 |= 8u;
        __asm { BR              X11 }
      }

      if (*((_BYTE *)v2 + 63) == 1)
      {
        *(_DWORD *)v152 |= 0x1000u;
        __asm { BR              X10 }
      }

      unsigned int v91 = v146;
      uint64_t v92 = sub_1000A7CA8(0LL);
      int v93 = sub_10000D9B0(v92);
      uint64_t v94 = swift_allocObject(v19, 40LL, 7LL);
      *(_OWORD *)(v94 + swift_unknownObjectWeakDestroy(v0 + 16) = v150;
      *(void *)(v94 + 32)  = v93;
      uint64_t v160 = &type metadata for BinaryEncoder.UnkeyedContainer;
      uint64_t v161 = v91;
      v159[0]  = v94;
      if (*((_BYTE *)v2 + 84) == 1)
      {
        if ((*((_BYTE *)v2 + 85) & 1) != 0)
        {
          if (*((_BYTE *)v2 + 87))
          {
            if (*((_BYTE *)v2 + 89))
            {
              if (*((_BYTE *)v2 + 86))
              {
                if ((v2[44] & 1) != 0)
                {
                  uint64_t v95 = 474;
                  goto LABEL_348;
                }

                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 346;
LABEL_349:
                  v95 |= 0x200u;
LABEL_350:
                  if (*((_BYTE *)v2 + 91) != 1) {
                    goto LABEL_352;
                  }
                  goto LABEL_351;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 346;
LABEL_351:
                  v95 |= 0x800u;
LABEL_352:
                  if (*((_BYTE *)v2 + 92) != 1) {
                    goto LABEL_354;
                  }
                  goto LABEL_353;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 346;
LABEL_353:
                  v95 |= 0x1000u;
LABEL_354:
                  if (*((_BYTE *)v2 + 93) != 1) {
                    goto LABEL_356;
                  }
                  goto LABEL_355;
                }

                uint64_t v95 = 346;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 344;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 344;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 344;
                  goto LABEL_353;
                }

                uint64_t v95 = 344;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              uint64_t v95 = 472;
            }

            else if (*((_BYTE *)v2 + 86))
            {
              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 90;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 90;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 90;
                  goto LABEL_353;
                }

                uint64_t v95 = 90;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              uint64_t v95 = 218;
            }

            else
            {
              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 88;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 88;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 88;
                  goto LABEL_353;
                }

                uint64_t v95 = 88;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              uint64_t v95 = 216;
            }
          }

          else if (*((_BYTE *)v2 + 89))
          {
            if (*((_BYTE *)v2 + 86))
            {
              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 338;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 338;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 338;
                  goto LABEL_353;
                }

                uint64_t v95 = 338;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              uint64_t v95 = 466;
            }

            else
            {
              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 336;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 336;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 336;
                  goto LABEL_353;
                }

                uint64_t v95 = 336;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              uint64_t v95 = 464;
            }
          }

          else if (*((_BYTE *)v2 + 86))
          {
            if ((v2[44] & 1) == 0)
            {
              if ((v2[45] & 1) != 0)
              {
                uint64_t v95 = 82;
                goto LABEL_349;
              }

              if ((*((_BYTE *)v2 + 91) & 1) != 0)
              {
                uint64_t v95 = 82;
                goto LABEL_351;
              }

              if ((v2[46] & 1) != 0)
              {
                uint64_t v95 = 82;
                goto LABEL_353;
              }

              uint64_t v95 = 82;
              if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                goto LABEL_356;
              }
              goto LABEL_355;
            }

            uint64_t v95 = 210;
          }

          else
          {
            if ((v2[44] & 1) == 0)
            {
              if ((v2[45] & 1) != 0)
              {
                uint64_t v95 = 80;
                goto LABEL_349;
              }

              if ((*((_BYTE *)v2 + 91) & 1) != 0)
              {
                uint64_t v95 = 80;
                goto LABEL_351;
              }

              if ((v2[46] & 1) != 0)
              {
                uint64_t v95 = 80;
                goto LABEL_353;
              }

              uint64_t v95 = 80;
              if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                goto LABEL_356;
              }
              goto LABEL_355;
            }

            uint64_t v95 = 208;
          }
        }

        else if ((*((_BYTE *)v2 + 87) & 1) != 0)
        {
          if ((*((_BYTE *)v2 + 89) & 1) != 0)
          {
            if (*((_BYTE *)v2 + 86))
            {
              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 282;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 282;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 282;
                  goto LABEL_353;
                }

                uint64_t v95 = 282;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              uint64_t v95 = 410;
            }

            else
            {
              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 280;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 280;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 280;
                  goto LABEL_353;
                }

                uint64_t v95 = 280;
                if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                  goto LABEL_356;
                }
                goto LABEL_355;
              }

              uint64_t v95 = 408;
            }
          }

          else if (*((_BYTE *)v2 + 86))
          {
            if ((v2[44] & 1) == 0)
            {
              if ((v2[45] & 1) != 0)
              {
                uint64_t v95 = 26;
                goto LABEL_349;
              }

              if ((*((_BYTE *)v2 + 91) & 1) != 0)
              {
                uint64_t v95 = 26;
                goto LABEL_351;
              }

              if ((v2[46] & 1) != 0)
              {
                uint64_t v95 = 26;
                goto LABEL_353;
              }

              uint64_t v95 = 26;
              if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                goto LABEL_356;
              }
              goto LABEL_355;
            }

            uint64_t v95 = 154;
          }

          else
          {
            if ((v2[44] & 1) == 0)
            {
              if ((v2[45] & 1) != 0)
              {
                uint64_t v95 = 24;
                goto LABEL_349;
              }

              if ((*((_BYTE *)v2 + 91) & 1) != 0)
              {
                uint64_t v95 = 24;
                goto LABEL_351;
              }

              if ((v2[46] & 1) != 0)
              {
                uint64_t v95 = 24;
                goto LABEL_353;
              }

              uint64_t v95 = 24;
              if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                goto LABEL_356;
              }
              goto LABEL_355;
            }

            uint64_t v95 = 152;
          }
        }

        else if (*((_BYTE *)v2 + 89))
        {
          if (*((_BYTE *)v2 + 86))
          {
            if ((v2[44] & 1) == 0)
            {
              if ((v2[45] & 1) != 0)
              {
                uint64_t v95 = 274;
                goto LABEL_349;
              }

              if ((*((_BYTE *)v2 + 91) & 1) != 0)
              {
                uint64_t v95 = 274;
                goto LABEL_351;
              }

              if ((v2[46] & 1) != 0)
              {
                uint64_t v95 = 274;
                goto LABEL_353;
              }

              uint64_t v95 = 274;
              if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                goto LABEL_356;
              }
              goto LABEL_355;
            }

            uint64_t v95 = 402;
          }

          else
          {
            if ((v2[44] & 1) == 0)
            {
              if ((v2[45] & 1) != 0)
              {
                uint64_t v95 = 272;
                goto LABEL_349;
              }

              if ((*((_BYTE *)v2 + 91) & 1) != 0)
              {
                uint64_t v95 = 272;
                goto LABEL_351;
              }

              if ((v2[46] & 1) != 0)
              {
                uint64_t v95 = 272;
                goto LABEL_353;
              }

              uint64_t v95 = 272;
              if ((*((_BYTE *)v2 + 93) & 1) == 0) {
                goto LABEL_356;
              }
              goto LABEL_355;
            }

            uint64_t v95 = 400;
          }
        }

        else if (*((_BYTE *)v2 + 86))
        {
          if ((v2[44] & 1) == 0)
          {
            if ((v2[45] & 1) != 0)
            {
              uint64_t v95 = 18;
              goto LABEL_349;
            }

            if ((*((_BYTE *)v2 + 91) & 1) != 0)
            {
              uint64_t v95 = 18;
              goto LABEL_351;
            }

            if ((v2[46] & 1) != 0)
            {
              uint64_t v95 = 18;
              goto LABEL_353;
            }

            uint64_t v95 = 18;
            if ((*((_BYTE *)v2 + 93) & 1) == 0) {
              goto LABEL_356;
            }
            goto LABEL_355;
          }

          uint64_t v95 = 146;
        }

        else
        {
          if ((v2[44] & 1) == 0)
          {
            if ((v2[45] & 1) != 0)
            {
              uint64_t v95 = 16;
              goto LABEL_349;
            }

            if ((*((_BYTE *)v2 + 91) & 1) != 0)
            {
              uint64_t v95 = 16;
              goto LABEL_351;
            }

            if ((v2[46] & 1) != 0)
            {
              uint64_t v95 = 16;
              goto LABEL_353;
            }

            uint64_t v95 = 16;
            if ((*((_BYTE *)v2 + 93) & 1) == 0) {
              goto LABEL_356;
            }
            goto LABEL_355;
          }

          uint64_t v95 = 144;
        }
      }

      else if ((*((_BYTE *)v2 + 85) & 1) != 0)
      {
        if ((*((_BYTE *)v2 + 87) & 1) != 0)
        {
          if (*((_BYTE *)v2 + 89))
          {
            if (*((_BYTE *)v2 + 86))
            {
              if ((v2[44] & 1) == 0)
              {
                if ((v2[45] & 1) != 0)
                {
                  uint64_t v95 = 330;
                  goto LABEL_349;
                }

                if ((*((_BYTE *)v2 + 91) & 1) != 0)
                {
                  uint64_t v95 = 330;
                  goto LABEL_351;
                }

                if ((v2[46] & 1) != 0)
                {
                  uint64_t v95 = 330;
                  goto LABEL_353;
                }

                uint64_t v95 = 330;
                if ((*((_BYTE *)v2 + 93) & 1) == 0)
                {
LABEL_356:
                  if (*((_BYTE *)v2 + 68) == 1)
                  {
                    swift_retain();
                    if ((v2[38] & 1) != 0)
                    {
LABEL_358:
                      *(void *)&uint64_t v150 = v94;
LABEL_363:
                      uint64_t v102 = v145;
                      unint64_t v146 = v94 + 16;
                      unint64_t v103 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0LL);
                      char v104 = (uint64_t)v148;
                      sub_1000DB8E8((uint64_t)v2 + v103[34], (uint64_t)v148);
                      uint64_t v105 = v149;
                      uint64_t v106 = v144;
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v104, 1LL, v144) == 1)
                      {
                        sub_1000225EC(v104, &qword_100407450);
LABEL_367:
                        uint64_t v94 = v150;
                        BOOL v109 = v95;
LABEL_368:
                        if (v109) {
                          uint64_t v110 = *(_WORD *)v152 | 0x8000;
                        }
                        else {
                          uint64_t v110 = *(_WORD *)v152;
                        }
                        uint64_t v111 = v102;
                        unint64_t v112 = v102[3];
                        os_log_t v113 = v111[4];
                        sub_100021104(v111, v112);
                        dispatch thunk of Encoder.unkeyedContainer()(v156, v112, v113);
                        v155[0]  = v110;
                        uint64_t v114 = v157;
                        uint64_t v115 = v158;
                        sub_1000237C8((uint64_t)v156, v157);
                        os_log_type_t v116 = sub_1000DBA00();
                        uint64_t v117 = *(void *)&v152[4];
                        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v155,  &type metadata for AWDLActionFrame.DataPathState.Flags,  v116,  v114,  v115);
                        *(void *)&v152[4]  = v117;
                        if (v117) {
                          goto LABEL_375;
                        }
                        uint64_t v118 = v151;
                        swift_beginAccess(v151, v155, 0LL, 0LL);
                        v154[0]  = *v118;
                        unint64_t v119 = v157;
                        unint64_t v120 = v158;
                        sub_1000237C8((uint64_t)v156, v157);
                        uint64_t v121 = sub_10005CD78();
                        uint64_t v122 = *(void *)&v152[4];
                        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v154,  &type metadata for Data,  v121,  v119,  v120);
                        *(void *)&v152[4]  = v122;
                        if (v122) {
                          goto LABEL_375;
                        }
                        if ((v110 & 0x8000) == 0) {
                          goto LABEL_375;
                        }
                        LOWORD(v154[0])  = v109;
                        uint64_t v123 = v157;
                        uint64_t v124 = v158;
                        sub_1000237C8((uint64_t)v156, v157);
                        int v125 = sub_1000DBA44();
                        os_log_t v126 = *(void *)&v152[4];
                        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( v154,  &type metadata for AWDLActionFrame.DataPathState.ExtensionFlags,  v125,  v123,  v124);
                        *(void *)&v152[4]  = v126;
                        if (v126)
                        {
LABEL_375:
                          swift_release(v20);
                          swift_release(v94);
                        }

                        else
                        {
                          swift_beginAccess(v146, v154, 0LL, 0LL);
                          uint64_t v153 = *(_OWORD *)(v94 + 16);
                          __n128 v141 = v157;
                          uint64_t v142 = v158;
                          sub_1000237C8((uint64_t)v156, v157);
                          uint64_t v143 = *(void *)&v152[4];
                          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)( &v153,  &type metadata for Data,  v121,  v141,  v142);
                          swift_release(v20);
                          swift_release(v94);
                          *(void *)&v152[4]  = v143;
                        }

                        sub_100002AC4(v156);
                        goto LABEL_385;
                      }

                      uint64_t v107 = v147;
                      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v147, v104, v106);
                      os_log_type_t v108 = (char *)v2 + v103[35];
                      if (v108[4] == 1)
                      {
                        (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v106);
                        goto LABEL_367;
                      }

                      uint64_t v127 = (unsigned int *)((char *)v2 + v103[36]);
                      BOOL v109 = v95;
                      if (*((_BYTE *)v127 + 4) == 1)
                      {
                        (*(void (**)(char *, uint64_t))(v105 + 8))(v147, v144);
                        uint64_t v94 = v150;
                        goto LABEL_368;
                      }

                      LODWORD(v148)  = *(_DWORD *)v108;
                      uint64_t v128 = *v127;
                      char v129 = v147;
                      uint64_t v130 = ((int)sub_100172848() / 1000000);
                      uint64_t v131 = v160;
                      uint64_t v132 = v161;
                      sub_1000237C8((uint64_t)v159, (uint64_t)v160);
                      char v133 = *(void *)&v152[4];
                      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v130, v131, v132);
                      uint64_t v94 = v150;
                      *(void *)&v152[4]  = v133;
                      if (v133)
                      {
                        (*(void (**)(char *, uint64_t))(v105 + 8))(v129, v144);
                      }

                      else
                      {
                        uint64_t v134 = v160;
                        uint64_t v135 = v161;
                        sub_1000237C8((uint64_t)v159, (uint64_t)v160);
                        os_log_type_t v136 = *(void *)&v152[4];
                        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v148, v134, v135);
                        *(void *)&v152[4]  = v136;
                        if (!v136)
                        {
                          __int8 v137 = v160;
                          uint64_t v138 = v161;
                          sub_1000237C8((uint64_t)v159, (uint64_t)v160);
                          uint64_t v139 = *(void *)&v152[4];
                          dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v128, v137, v138);
                          *(void *)&v152[4]  = v139;
                          if (!v139)
                          {
                            v109 |= 0x20u;
                            (*(void (**)(char *, uint64_t))(v105 + 8))(v147, v144);
                            uint64_t v102 = v145;
                            goto LABEL_368;
                          }
                        }

                        (*(void (**)(char *, uint64_t))(v105 + 8))(v147, v144);
                      }

LABEL_45:
        swift_bridgeObjectRelease_n(v33, 2LL);
        a2  = (unint64_t)service;
        uint64_t v37 = SCNetworkServiceGetInterface(service);
        uint64_t v14 = v50;
        uint64_t v29 = v52;
        uint64_t v16 = v54;
        if (!v37)
        {

          uint64_t v5 = v59;
          goto LABEL_74;
        }

        uint64_t v12 = v37;
        uint64_t v5 = v59;
        uint64_t v15 = v56;
        if (!SCNetworkSetContainsInterface(v4, v37) && !SCNetworkSetAddService(v4, service)) {
          goto LABEL_86;
        }
      }

      else
      {
      }
    }

    while (a3 != v15);
  }

  swift_bridgeObjectRelease(v16);
  return 1LL;
}

          if (v14 < 0) {
            Swift::String v47 = v14;
          }
          else {
            Swift::String v47 = v14 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v14);
          Swift::String v48 = _CocoaArrayWrapper.endIndex.getter(v47);
          swift_bridgeObjectRelease(v14);
          uint64_t v17 = v48 - 1;
          if (!__OFSUB__(v48, 1LL)) {
            goto LABEL_15;
          }
          goto LABEL_50;
        }
      }

      else if (*(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        goto LABEL_12;
      }

      __break(1u);
      goto LABEL_45;
    }
  }

  else
  {
    swift_beginAccess(v12, &v53, 33LL, 0LL);
    swift_unknownObjectRetain(a1);
    uint64_t v6 = sub_10027DB98(v12, a1);
    swift_unknownObjectRelease(a1);
    NSString v9 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      if (v9 < 0) {
        BOOL v19 = *v12;
      }
      else {
        BOOL v19 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v12);
      uint64_t v2 = (char *)_CocoaArrayWrapper.endIndex.getter(v19);
      swift_bridgeObjectRelease(v9);
    }

    else
    {
      uint64_t v2 = *(char **)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if ((uint64_t)v2 >= v6)
      {
LABEL_7:
        sub_10027DEB4(v6, (uint64_t)v2);
        swift_endAccess(&v53);
        return;
      }
    }

    __break(1u);
  }

  if (a1 < 0) {
    uint64_t v20 = a1;
  }
  else {
    uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  SCNetworkInterfaceRef v21 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(a1);
  if (v21) {
    goto LABEL_10;
  }
LABEL_26:
  unint64_t v22 = *(void *)&v2[v10];
  *(void *)&v2[v10]  = 0LL;
  swift_unknownObjectRelease(v22);
  Swift::String v23 = &v2[qword_10040DA68];
  swift_beginAccess(&v2[qword_10040DA68], v56, 0LL, 0LL);
  sub_1000226B0((uint64_t)(v23 + 104), (uint64_t)&v53, (uint64_t *)&unk_10040DCB0);
  if (v55)
  {
    if (v55 == 1) {
      sub_1000225EC((uint64_t)&v53, (uint64_t *)&unk_10040DCB0);
    }
    else {
      sub_10017B1A0(&v53);
    }
LABEL_33:
    id v34 = v2;
    unint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    char v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      char v38 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v37 = 138412290;
      char v53 = v34;
      uint64_t v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
      os_log_s *v38 = v34;

      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Terminating %@ because it's client was invalidated",  v37,  0xCu);
      char v40 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v38, 1LL, v40);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
    }

    sub_1002730CC();
    return;
  }

  sub_10017B1A0(&v53);
  if (v2[qword_10040DAA8 + 16] != 3) {
    goto LABEL_33;
  }
  os_log_type_t v24 = v5 & v4;
  id v25 = v2;
  CFArrayRef v26 = (os_log_s *)Logger.logObject.getter(v25);
  CFArrayRef v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v51 = v28;
    *(_DWORD *)uint64_t v28 = 138412290;
    char v53 = v25;
    uint64_t v29 = v25;
    uint64_t v52 = v24;
    uint64_t v30 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
    CFArrayRef v31 = v50;
    *uint64_t v50 = v25;

    CFArrayRef v32 = v51;
    os_log_type_t v24 = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Delaying termination of %@ after client invalidation because it is an internet sharing requester",  v51,  0xCu);
    unint64_t v33 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v31, 1LL, v33);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
  }

  type metadata accessor for P2PTimer(0LL);
  *(void *)NSString v9 = 10LL;
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.seconds(_:), v6);
  char v41 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  char v42 = swift_allocObject(&unk_1003F4E80, 24LL, 7LL);
  swift_unknownObjectWeakInit(v42 + 16, v25);
  uint64_t v43 = (void *)swift_allocObject(&unk_1003F4F48, 40LL, 7LL);
  v43[2]  = *(void *)(v24 + 80);
  v43[3]  = *(void *)(v24 + 88);
  void v43[4] = v42;
  uint64_t v44 = v41;
  swift_retain();
  static P2PTimer.async(after:on:execute:)(v9, v44, (uint64_t)sub_10027E184, (uint64_t)v43);

  swift_release(v43);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_release(v42);
}

uint64_t sub_1000421AC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = result
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    uint64_t v5 = *(void *)(result
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state);
    if (*(_BYTE *)(result
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                  + 16))
      BOOL v6 = 0;
    else {
      BOOL v6 = (*(void *)(result
    }
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) & 1LL) == 0;
    if (v6)
    {
      uint64_t v7 = *(void *)(v4 + 8);
      *(void *)uint64_t v4 = 0xD00000000000002DLL;
      *(void *)(v4 + 8)  = 0x8000000100362F30LL;
      *(_BYTE *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
      sub_100056570(v5, v7, 0);
      sub_1000411FC(v5, v7, 0);
    }

    return swift_release(v3);
  }

  return result;
}

uint64_t sub_100042270(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = result
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    if (!*(_BYTE *)(result
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                   + 16))
    {
      uint64_t v7 = *(void *)v6;
      if ((*(void *)v6 & 1) != 0)
      {
        if ((a1 & 1) == 0)
        {
          sub_100040F74();
          unint64_t v9 = *(void *)(v5
                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
          unint64_t v10 = *(void *)(v5
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                          + 8);
          swift_bridgeObjectRetain(v10);
          sub_10005468C(v9, v10, 0);
          uint64_t v12 = v11;
          swift_bridgeObjectRelease(v10);
          if (v12) {
            swift_bridgeObjectRelease(v12);
          }
          uint64_t v13 = *(void *)v6;
          uint64_t v14 = *(void *)(v6 + 8);
          *(_OWORD *)uint64_t v6 = xmmword_100337020;
          char v15 = *(_BYTE *)(v6 + 16);
          *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
          sub_100056548(v13, v14, v15);
          sub_100056570(v13, v14, v15);
          sub_1000411FC(v13, v14, v15);
          sub_100056570(v13, v14, v15);
          uint64_t v16 = *(void *)v6;
          uint64_t v17 = *(void *)(v6 + 8);
          *(void *)uint64_t v6 = 0xD000000000000018LL;
          *(void *)(v6 + 8)  = 0x8000000100362F10LL;
          char v18 = *(_BYTE *)(v6 + 16);
          *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
          sub_100056548(v16, v17, v18);
          sub_100056570(v16, v17, v18);
          sub_1000411FC(v16, v17, v18);
          sub_100056570(v16, v17, v18);
        }
      }

      else if ((a1 & 1) != 0)
      {
        uint64_t v8 = *(void *)(v6 + 8);
        *(_OWORD *)uint64_t v6 = xmmword_100337020;
        *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
        sub_100056570(v7, v8, 0);
        sub_1000411FC(v7, v8, 0);
      }
    }

    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100042454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x4D79617765746167LL,  0xEE00726F74696E6FLL);
  uint64_t v8 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor;
  *(void *)(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor)  = 0LL;
  RoutingSocket.init()(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket);
  uint64_t v9 = v3
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  *(_BYTE *)(v9 + 32)  = -1;
  uint64_t v10 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v10 + 4)  = 0;
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 6)  = 1;
  uint64_t v11 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = nw_parameters_create();
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v30 = a3;
  if ((v15 & 0x1000000000000000LL) != 0 || !(v15 & 0x2000000000000000LL | v14 & 0x1000000000000000LL))
  {
    swift_bridgeObjectRetain(v15);
    sub_100002274(&qword_100405D48);
    _StringGuts._slowWithCString<A>(_:)(v31, sub_1000402D4, 0LL);
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = (nw_interface *)v31[0];
  }

  else if ((v15 & 0x2000000000000000LL) != 0)
  {
    v31[0]  = *(void *)(a1 + 16);
    v31[1]  = v15 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(v15);
    uint64_t v16 = (nw_interface *)nw_interface_create_with_name(v31);
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    if ((v14 & 0x1000000000000000LL) == 0) {
      _StringObject.sharedUTF8.getter(v14, v15);
    }
    swift_bridgeObjectRetain(v15);
    sub_1000402D4(v31);
    uint64_t v16 = (nw_interface *)v31[0];
    swift_bridgeObjectRelease(v15);
  }

  nw_parameters_require_interface(v13, v16);
  uint64_t v17 = swift_unknownObjectRelease(v16);
  char v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Start monitoring network path for gateway address updates",  v20,  2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t result = nw_path_create_evaluator_for_endpoint(0LL, v13);
  if (result)
  {
    uint64_t v22 = result;
    if (qword_100404328 != -1) {
      swift_once(&qword_100404328, sub_10017437C);
    }
    Swift::String v23 = (void *)static OS_dispatch_queue.p2p;
    uint64_t v24 = swift_allocObject(&unk_1003DDDF0, 24LL, 7LL);
    swift_weakInit(v24 + 16, v6);
    uint64_t v25 = swift_allocObject(a2, 32LL, 7LL);
    *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v24;
    *(void *)(v25 + 24)  = a1;
    uint64_t v26 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v27 = swift_allocObject(v26, 24LL, 7LL);
    swift_retain();
    id v28 = v23;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v22, v28, v30, v25);
    swift_release(v24);
    swift_release(a1);
    swift_unknownObjectRelease(v13);
    uint64_t v29 = *(void *)(v6 + v8);
    *(void *)(v6 + v8)  = v27;
    swift_release(v29);
    return v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000427EC(nw_path *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = swift_retain_n(a3, 2LL);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = a1;
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      aBlock[0]  = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = *(void *)(a3 + 16);
      unint64_t v13 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain(v13);
      uint64_t v21 = sub_10000235C(v14, v13, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock);
      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Network path for interface %s was updated", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v15 = v12;
      a1  = v20;
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      swift_release_n(a3, 2LL);
    }

    uint64_t v16 = swift_allocObject(&unk_1003DE138, 32LL, 7LL);
    *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    *(void *)(v16 + 24)  = a3;
    uint64_t v17 = swift_allocObject(&unk_1003DE160, 32LL, 7LL);
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000571BC;
    *(void *)(v17 + 24)  = v16;
    aBlock[4]  = (uint64_t)sub_100058EEC;
    uint64_t v23 = v17;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = (uint64_t)sub_100044B54;
    aBlock[3]  = (uint64_t)&unk_1003DE178;
    char v18 = _Block_copy(aBlock);
    uint64_t v19 = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v19);
    nw_path_enumerate_gateways(a1, v18);
    swift_release(v7);
    _Block_release(v18);
    LOBYTE(v18)  = swift_isEscapingClosureAtFileLocation(v17, "", 78LL, 1710LL, 38LL, 1LL);
    swift_release(v16);
    uint64_t result = swift_release(v17);
  }

  return result;
}

uint64_t sub_100042A94(nw_path *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = swift_retain_n(a3, 2LL);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = a1;
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      aBlock[0]  = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = *(void *)(a3 + 16);
      unint64_t v13 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain(v13);
      uint64_t v21 = sub_10000235C(v14, v13, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock);
      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Network path for interface %s was updated", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v15 = v12;
      a1  = v20;
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      swift_release_n(a3, 2LL);
    }

    uint64_t v16 = swift_allocObject(&unk_1003DDE40, 32LL, 7LL);
    *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    *(void *)(v16 + 24)  = a3;
    uint64_t v17 = swift_allocObject(&unk_1003DDE68, 32LL, 7LL);
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100058E30;
    *(void *)(v17 + 24)  = v16;
    aBlock[4]  = (uint64_t)sub_1000570E0;
    uint64_t v23 = v17;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = (uint64_t)sub_100044B54;
    aBlock[3]  = (uint64_t)&unk_1003DDE80;
    char v18 = _Block_copy(aBlock);
    uint64_t v19 = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v19);
    nw_path_enumerate_gateways(a1, v18);
    swift_release(v7);
    _Block_release(v18);
    LOBYTE(v18)  = swift_isEscapingClosureAtFileLocation(v17, "", 78LL, 1710LL, 38LL, 1LL);
    swift_release(v16);
    uint64_t result = swift_release(v17);
  }

  return result;
}

uint64_t sub_100042D3C(nw_path *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(a1);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v40 - v12;
  uint64_t v15 = v14 + 16;
  swift_beginAccess(v14 + 16, v51, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v15);
  if (result)
  {
    uint64_t v17 = result;
    unint64_t v46 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v47 = a5;
    char v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v45 = a3;
    uint64_t v19 = v18(v13, a3, a4);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = v8;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      aBlock[0]  = v42;
      uint64_t v43 = v18;
      *(_DWORD *)uint64_t v23 = 136315138;
      char v40 = v23 + 4;
      char v41 = v23;
      uint64_t v24 = v47;
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)(v47 + 16) + 40LL))(a4);
      unint64_t v27 = v26;
      uint64_t v48 = sub_10000235C(v25, v26, aBlock);
      char v18 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, aBlock);
      swift_bridgeObjectRelease(v27);
      id v28 = v13;
      uint64_t v29 = v24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v28, a4);
      uint64_t v30 = v41;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Network path for interface %s was updated", v41, 0xCu);
      uint64_t v31 = v42;
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      uint64_t v8 = v44;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a4);
      uint64_t v29 = v47;
    }

    CFArrayRef v32 = v46;
    v18(v46, v45, a4);
    uint64_t v33 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v34 = (v33 + 40) & ~v33;
    unint64_t v35 = (char *)swift_allocObject(&unk_1003DE4D0, v34 + v10, v33 | 7);
    *((void *)v35 + 2)  = a4;
    *((void *)v35 + 3)  = v29;
    *((void *)v35 + 4)  = v17;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v35[v34], v32, a4);
    uint64_t v36 = swift_allocObject(&unk_1003DE4F8, 32LL, 7LL);
    *(void *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000574A0;
    *(void *)(v36 + 24)  = v35;
    aBlock[4]  = (uint64_t)sub_100058EEC;
    uint64_t v50 = v36;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = (uint64_t)sub_100044B54;
    aBlock[3]  = (uint64_t)&unk_1003DE510;
    uint64_t v37 = _Block_copy(aBlock);
    uint64_t v38 = v50;
    swift_retain();
    swift_retain();
    swift_release(v38);
    nw_path_enumerate_gateways(v8, v37);
    swift_release(v17);
    _Block_release(v37);
    isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation(v36, "", 78LL, 1710LL, 38LL, 1LL);
    swift_release(v35);
    uint64_t result = swift_release(v36);
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1000430A0(nw_endpoint *a1, uint64_t a2, void *a3)
{
  uint64_t v115 = a3;
  uint64_t v5 = sub_100002274(&qword_100405268);
  __chkstk_darwin(v5);
  uint64_t v121 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RoutingSocket(0LL);
  uint64_t v119 = *(void *)(v7 - 8);
  unint64_t v120 = v7;
  __chkstk_darwin(v7);
  uint64_t v117 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v103 - v15;
  __chkstk_darwin(v14);
  os_log_type_t v116 = (char *)&v103 - v17;
  uint64_t v18 = sub_100002274(&qword_100405D40);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v114 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v103 - v21;
  uint64_t v23 = type metadata accessor for DispatchTime(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v118 = (char *)&v103 - v28;
  address  = nw_endpoint_get_address(a1);
  if (address->sa_family != 2)
  {
    CFArrayRef v32 = (os_log_s *)Logger.logObject.getter(address);
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Currently support gateway IP address translation for IPv4 only",  v34,  2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v111 = *(unsigned int *)&address->sa_data[2];
  v133[0]  = v111;
  memset(&v133[1], 0, 24);
  char v134 = 0;
  uint64_t v30 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess( a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate,  v132,  0LL,  0LL);
  uint64_t v110 = v30;
  sub_1000226B0(v30, (uint64_t)v22, &qword_100405D40);
  int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23);
  uint64_t v112 = v24;
  if (v31 != 1)
  {
    unint64_t v35 = v118;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v118, v22, v23);
    uint64_t v36 = (uint64_t *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
    int v37 = *(unsigned __int8 *)(a2
                             + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                             + 32);
    if (v37 == 255)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v35, v23);
      goto LABEL_16;
    }

    uint64_t v113 = v23;
    uint64_t v38 = *v36;
    uint64_t v39 = v36[1];
    uint64_t v40 = v36[2];
    uint64_t v41 = v36[3];
    LODWORD(v109)  = v37;
    unint64_t v107 = v38;
    uint64_t v106 = v39;
    uint64_t v105 = v40;
    uint64_t v104 = v41;
    sub_100057070(v38, v39, v40, v41, v37 & 1);
    if (qword_1004041A0 != -1) {
      swift_once(&qword_1004041A0, sub_1001207BC);
    }
    (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
    uint64_t v42 = v116;
    DispatchTime.distance(to:)(v27);
    os_log_type_t v108 = *(void (**)(char *, uint64_t))(v112 + 8);
    v108(v27, v113);
    *(void *)uint64_t v16 = 300LL;
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v43(v16, enum case for DispatchTimeInterval.seconds(_:), v9);
    uint64_t v44 = enum case for DispatchTimeInterval.never(_:);
    v43(v13, enum case for DispatchTimeInterval.never(_:), v9);
    char v45 = static DispatchTimeInterval.== infix(_:_:)(v42, v13);
    unint64_t v46 = *(void (**)(char *, uint64_t))(v10 + 8);
    v46(v13, v9);
    if ((v45 & 1) != 0)
    {
      v46(v16, v9);
      v46(v42, v9);
      uint64_t v23 = v113;
      unsigned __int8 v47 = v109;
LABEL_12:
      sub_100056B0C(v107, v106, v105, v104, v47);
      uint64_t v48 = (uint64_t)v121;
LABEL_13:
      v108(v35, v23);
      goto LABEL_17;
    }

    v43(v13, v44, v9);
    char v86 = static DispatchTimeInterval.== infix(_:_:)(v16, v13);
    v46(v13, v9);
    if ((v86 & 1) != 0)
    {
      v46(v16, v9);
      uint64_t v87 = ((uint64_t (*)(char *, uint64_t))v46)(v42, v9);
      uint64_t v23 = v113;
      unsigned __int8 v47 = v109;
      if ((v109 & 1) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v88 = sub_100172848();
      uint64_t v89 = sub_100172848();
      v46(v16, v9);
      uint64_t v87 = ((uint64_t (*)(char *, uint64_t))v46)(v42, v9);
      BOOL v90 = v88 < v89;
      uint64_t v23 = v113;
      unsigned __int8 v47 = v109;
      if (!v90 || (v109 & 1) != 0) {
        goto LABEL_12;
      }
    }

    uint64_t v48 = (uint64_t)v121;
    if ((_DWORD)v111 == (_DWORD)v107)
    {
      unsigned int v91 = (os_log_s *)Logger.logObject.getter(v87);
      os_log_type_t v92 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v91, v92))
      {
        int v93 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)int v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Skip updating gateway IP address", v93, 2u);
        uint64_t v94 = v93;
        unint64_t v35 = v118;
        swift_slowDealloc(v94, -1LL, -1LL);
      }

      v108(v35, v113);
      return 0LL;
    }

    goto LABEL_13;
  }

  sub_1000225EC((uint64_t)v22, &qword_100405D40);
LABEL_16:
  uint64_t v48 = (uint64_t)v121;
LABEL_17:
  sub_1000226B0( a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket,  v48,  &qword_100405268);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v119 + 48))(v48, 1LL, v120) == 1)
  {
    sub_1000225EC(v48, &qword_100405268);
    return 0LL;
  }

  uint64_t v113 = v23;
  uint64_t v49 = a2;
  uint64_t v50 = v117;
  sub_100022628(v48, v117, type metadata accessor for RoutingSocket);
  unint64_t v51 = RoutingSocket.macAddress(for:)((uint64_t)v133);
  uint64_t v52 = sub_10005802C(v50, type metadata accessor for RoutingSocket);
  if ((v51 & 0x1000000000000LL) != 0) {
    return 0LL;
  }
  uint64_t v53 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  unint64_t v54 = v51 >> 40;
  unint64_t v55 = HIDWORD(v51);
  int v56 = *(unsigned __int8 *)(a2
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                           + 32);
  unint64_t v57 = v51 >> 24;
  uint64_t v58 = v112;
  if (v56 == 255) {
    goto LABEL_28;
  }
  if ((v56 & 1) != 0) {
    goto LABEL_28;
  }
  if ((_DWORD)v111 != *(_DWORD *)v53) {
    goto LABEL_28;
  }
  uint64_t v59 = (unsigned int *)(v49
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress);
  if ((*(_BYTE *)(v49
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress
                 + 6) & 1) != 0)
    goto LABEL_28;
  uint64_t v60 = *((unsigned __int16 *)v59 + 2);
  uint64_t v61 = *v59;
  LOWORD(v124)  = v51;
  BYTE2(v124)  = BYTE2(v51);
  BYTE3(v124)  = BYTE3(v51);
  BYTE4(v124)  = BYTE4(v51);
  BYTE5(v124)  = BYTE5(v51);
  LOBYTE(v122)  = v61;
  v62.i64[0]  = 0xFFFFFFFFFFFFLL;
  v62.i64[1]  = 0xFFFFFFFFFFFFLL;
  uint64x2_t v63 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v61 | (unint64_t)(v60 << 32)), v62);
  int16x8_t v64 = (int16x8_t)vshlq_u64(v63, (uint64x2_t)xmmword_10033A8F0);
  *(int32x2_t *)v63.i8  = vmovn_s64((int64x2_t)vshlq_u64(v63, (uint64x2_t)xmmword_10033A8E0));
  *(int32x2_t *)v64.i8  = vmovn_s64((int64x2_t)v64);
  v64.i16[1]  = v64.i16[2];
  v64.i16[2]  = v63.i16[0];
  v64.i16[3]  = v63.i16[2];
  *(_DWORD *)((char *)&v122 + 1)  = vmovn_s16(v64).u32[0];
  BYTE5(v122)  = BYTE1(v60);
  if ((_DWORD)v124 != (_DWORD)v122 || WORD2(v124) != WORD2(v122))
  {
LABEL_28:
    unint64_t v120 = v51 >> 8;
    uint64_t v121 = (char *)(v51 >> 16);
    uint64_t v119 = v49 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc(22LL, -1LL);
      unint64_t v109 = v51 >> 24;
      unint64_t v57 = v68;
      os_log_type_t v108 = (void (*)(char *, uint64_t))swift_slowAlloc(64LL, -1LL);
      uint64_t v124 = v108;
      *(_DWORD *)unint64_t v57 = 136315394;
      unint64_t v107 = v57 + 4;
      uint64_t v69 = (char *)swift_slowAlloc(16LL, -1LL);
      uint64_t v117 = v53;
      uint64_t v70 = v69;
      LODWORD(v122)  = v111;
      inet_ntop(2, &v122, v69, 0x10u);
      uint64_t v71 = String.init(cString:)(v70);
      uint64_t v118 = (char *)HIDWORD(v51);
      uint64_t v72 = v58;
      uint64_t v73 = v71;
      os_log_type_t v116 = (char *)(v51 >> 40);
      unint64_t v54 = v74;
      swift_slowDealloc(v70, -1LL, -1LL);
      uint64_t v75 = v73;
      uint64_t v58 = v72;
      uint64_t v122 = sub_10000235C(v75, v54, (uint64_t *)&v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
      swift_bridgeObjectRelease(v54);
      *(_WORD *)(v57 + 12)  = 2080;
      uint64_t v76 = WiFiAddress.description.getter(v51 & 0xFFFFFFFFFFFFLL);
      unint64_t v55 = v77;
      uint64_t v122 = sub_10000235C(v76, v77, (uint64_t *)&v124);
      uint64_t v53 = v117;
      LOBYTE(v54)  = (_BYTE)v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
      unint64_t v78 = v55;
      LOWORD(v55)  = (_WORD)v118;
      swift_bridgeObjectRelease(v78);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Gateway (%s) has MAC address %s", (uint8_t *)v57, 0x16u);
      Swift::String v79 = v108;
      swift_arrayDestroy(v108, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1LL, -1LL);
      unint64_t v80 = v57;
      LOBYTE(v57)  = v109;
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    LODWORD(v124)  = 1;
    BYTE4(v124)  = v51;
    BYTE5(v124)  = v120;
    BYTE6(v124)  = (_BYTE)v121;
    HIBYTE(v124)  = v57;
    char v125 = v55;
    char v126 = v54;
    int v127 = 528;
    int v128 = v111;
    __int128 v129 = 0u;
    __int128 v130 = 0u;
    int v131 = 0;
    uint64_t v81 = v115[5];
    uint64_t v82 = v115[2];
    uint64_t v83 = v115[3];
    swift_retain();
    swift_bridgeObjectRetain(v83);
    AppleDevice.setRequest(requestType:data:on:)(0x1C2uLL, (uint64_t)&v124, (uint64_t)v132, 0, v82, v83);
    swift_bridgeObjectRelease(v83);
    swift_release(v81);
  }

  if (qword_1004041A0 != -1) {
    swift_once(&qword_1004041A0, sub_1001207BC);
  }
  uint64_t v95 = (uint64_t)v114;
  (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
  uint64_t v84 = 1LL;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v95, 0LL, 1LL, v113);
  uint64_t v96 = v110;
  swift_beginAccess(v110, &v124, 33LL, 0LL);
  sub_100057104(v95, v96, &qword_100405D40);
  swift_endAccess(&v124);
  uint64_t v97 = *(void *)v53;
  uint64_t v98 = *(void *)(v53 + 8);
  uint64_t v99 = *(void *)(v53 + 16);
  uint64_t v100 = *(void *)(v53 + 24);
  *(void *)uint64_t v53 = v111;
  *(void *)(v53 + 8)  = 0LL;
  *(void *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v53 + 24)  = 0LL;
  unsigned __int8 v101 = *(_BYTE *)(v53 + 32);
  *(_BYTE *)(v53 + 32)  = 0;
  sub_100056B0C(v97, v98, v99, v100, v101);
  uint64_t v102 = v49
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v102 + 4)  = v55;
  *(_DWORD *)uint64_t v102 = v51;
  *(_BYTE *)(v102 + 6)  = 0;
  return v84;
}

uint64_t sub_100043E54(nw_endpoint *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v113 = a5;
  uint64_t v112 = a4;
  uint64_t v111 = a3;
  uint64_t v7 = sub_100002274(&qword_100405268);
  __chkstk_darwin(v7);
  uint64_t v119 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RoutingSocket(0LL);
  uint64_t v117 = *(void *)(v9 - 8);
  uint64_t v118 = v9;
  __chkstk_darwin(v9);
  uint64_t v115 = (uint64_t)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v99 - v17;
  __chkstk_darwin(v16);
  uint64_t v114 = (char *)&v99 - v19;
  uint64_t v20 = sub_100002274(&qword_100405D40);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v110 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v99 - v23;
  uint64_t v25 = type metadata accessor for DispatchTime(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  os_log_type_t v116 = (char *)&v99 - v30;
  address  = nw_endpoint_get_address(a1);
  if (address->sa_family != 2)
  {
    os_log_type_t v33 = (os_log_s *)Logger.logObject.getter(address);
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v35 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Currently support gateway IP address translation for IPv4 only",  v35,  2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v108 = *(unsigned int *)&address->sa_data[2];
  v124[0]  = v108;
  memset(&v124[1], 0, 24);
  char v125 = 0;
  uint64_t v32 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess( a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate,  v123,  0LL,  0LL);
  uint64_t v107 = v32;
  sub_1000226B0(v32, (uint64_t)v24, &qword_100405D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25) != 1)
  {
    uint64_t v36 = v116;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v116, v24, v25);
    int v37 = (uint64_t *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
    int v38 = *(unsigned __int8 *)(a2
                             + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                             + 32);
    if (v38 == 255)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v25);
      goto LABEL_14;
    }

    uint64_t v106 = v26;
    uint64_t v109 = v25;
    uint64_t v39 = *v37;
    uint64_t v40 = v37[1];
    uint64_t v41 = v37[2];
    uint64_t v42 = v37[3];
    int v105 = v38;
    uint64_t v103 = v39;
    uint64_t v102 = v40;
    uint64_t v101 = v41;
    uint64_t v100 = v42;
    sub_100057070(v39, v40, v41, v42, v38 & 1);
    if (qword_1004041A0 != -1) {
      swift_once(&qword_1004041A0, sub_1001207BC);
    }
    (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
    uint64_t v43 = v114;
    DispatchTime.distance(to:)(v29);
    uint64_t v104 = *(void (**)(char *, uint64_t))(v106 + 8);
    v104(v29, v109);
    *(void *)uint64_t v18 = 300LL;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
    v44(v18, enum case for DispatchTimeInterval.seconds(_:), v11);
    uint64_t v45 = enum case for DispatchTimeInterval.never(_:);
    v44(v15, enum case for DispatchTimeInterval.never(_:), v11);
    char v46 = static DispatchTimeInterval.== infix(_:_:)(v43, v15);
    unsigned __int8 v47 = *(void (**)(char *, uint64_t))(v12 + 8);
    v47(v15, v11);
    if ((v46 & 1) != 0)
    {
      v47(v18, v11);
      v47(v43, v11);
      uint64_t v25 = v109;
      unsigned __int8 v48 = v105;
LABEL_11:
      sub_100056B0C(v103, v102, v101, v100, v48);
      uint64_t v26 = v106;
      uint64_t v49 = (uint64_t)v119;
LABEL_12:
      v104(v36, v25);
      goto LABEL_15;
    }

    v44(v15, v45, v11);
    char v82 = static DispatchTimeInterval.== infix(_:_:)(v18, v15);
    v47(v15, v11);
    if ((v82 & 1) != 0)
    {
      v47(v18, v11);
      uint64_t v83 = ((uint64_t (*)(char *, uint64_t))v47)(v43, v11);
      uint64_t v25 = v109;
      unsigned __int8 v48 = v105;
      if ((v105 & 1) != 0) {
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v84 = sub_100172848();
      uint64_t v85 = sub_100172848();
      v47(v18, v11);
      uint64_t v83 = ((uint64_t (*)(char *, uint64_t))v47)(v43, v11);
      BOOL v86 = v84 < v85;
      uint64_t v25 = v109;
      unsigned __int8 v48 = v105;
      if (!v86 || (v105 & 1) != 0) {
        goto LABEL_11;
      }
    }

    uint64_t v26 = v106;
    uint64_t v49 = (uint64_t)v119;
    if ((_DWORD)v108 == (_DWORD)v103)
    {
      uint64_t v87 = (os_log_s *)Logger.logObject.getter(v83);
      os_log_type_t v88 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Skip updating gateway IP address", v89, 2u);
        BOOL v90 = v89;
        uint64_t v36 = v116;
        swift_slowDealloc(v90, -1LL, -1LL);
      }

      v104(v36, v109);
      return 0LL;
    }

    goto LABEL_12;
  }

  sub_1000225EC((uint64_t)v24, &qword_100405D40);
LABEL_14:
  uint64_t v49 = (uint64_t)v119;
LABEL_15:
  sub_1000226B0( a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket,  v49,  &qword_100405268);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v49, 1LL, v118) == 1)
  {
    sub_1000225EC(v49, &qword_100405268);
    return 0LL;
  }

  uint64_t v109 = v25;
  uint64_t v50 = a2;
  uint64_t v51 = v115;
  sub_100022628(v49, v115, type metadata accessor for RoutingSocket);
  uint64_t v54 = RoutingSocket.macAddress(for:)((uint64_t)v124);
  uint64_t v55 = sub_10005802C(v51, type metadata accessor for RoutingSocket);
  if ((v54 & 0x1000000000000LL) != 0) {
    return 0LL;
  }
  int v56 = (char *)(a2
               + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
  int v57 = *(unsigned __int8 *)(a2
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                           + 32);
  if (v57 == 255) {
    goto LABEL_30;
  }
  if ((v57 & 1) != 0) {
    goto LABEL_30;
  }
  if ((_DWORD)v108 != *(_DWORD *)v56) {
    goto LABEL_30;
  }
  uint64_t v58 = (unsigned int *)(a2
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress);
  if ((*(_BYTE *)(a2
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress
                 + 6) & 1) != 0)
    goto LABEL_30;
  uint64_t v59 = *((unsigned __int16 *)v58 + 2);
  uint64_t v60 = *v58;
  LOWORD(v122[0])  = v54;
  BYTE2(v122[0])  = BYTE2(v54);
  BYTE3(v122[0])  = BYTE3(v54);
  BYTE4(v122[0])  = BYTE4(v54);
  BYTE5(v122[0])  = BYTE5(v54);
  LOBYTE(v120)  = v60;
  v61.i64[0]  = 0xFFFFFFFFFFFFLL;
  v61.i64[1]  = 0xFFFFFFFFFFFFLL;
  uint64x2_t v62 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v60 | (unint64_t)(v59 << 32)), v61);
  int16x8_t v63 = (int16x8_t)vshlq_u64(v62, (uint64x2_t)xmmword_10033A8F0);
  *(int32x2_t *)v62.i8  = vmovn_s64((int64x2_t)vshlq_u64(v62, (uint64x2_t)xmmword_10033A8E0));
  *(int32x2_t *)v63.i8  = vmovn_s64((int64x2_t)v63);
  v63.i16[1]  = v63.i16[2];
  v63.i16[2]  = v62.i16[0];
  v63.i16[3]  = v62.i16[2];
  *(_DWORD *)((char *)&v120 + 1)  = vmovn_s16(v63).u32[0];
  BYTE5(v120)  = BYTE1(v59);
  if (LODWORD(v122[0]) != (_DWORD)v120 || WORD2(v122[0]) != WORD2(v120))
  {
LABEL_30:
    uint64_t v65 = a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc(22LL, -1LL);
      uint64_t v117 = swift_slowAlloc(64LL, -1LL);
      v122[0]  = v117;
      *(_DWORD *)uint64_t v68 = 136315394;
      uint64_t v69 = (char *)swift_slowAlloc(16LL, -1LL);
      uint64_t v106 = v26;
      uint64_t v70 = v69;
      LODWORD(v120)  = v108;
      inet_ntop(2, &v120, v69, 0x10u);
      uint64_t v71 = String.init(cString:)(v70);
      uint64_t v118 = v65;
      uint64_t v119 = v56;
      uint64_t v72 = v54;
      uint64_t v73 = v71;
      unint64_t v75 = v74;
      swift_slowDealloc(v70, -1LL, -1LL);
      uint64_t v120 = sub_10000235C(v73, v75, v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);
      swift_bridgeObjectRelease(v75);
      *(_WORD *)(v68 + 12)  = 2080;
      uint64_t v76 = v72 & 0xFFFFFFFFFFFFLL;
      uint64_t v77 = WiFiAddress.description.getter(v72 & 0xFFFFFFFFFFFFLL);
      unint64_t v79 = v78;
      uint64_t v120 = sub_10000235C(v77, v78, v122);
      uint64_t v26 = v106;
      uint64_t v54 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);
      unint64_t v80 = v79;
      int v56 = v119;
      swift_bridgeObjectRelease(v80);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Gateway (%s) has MAC address %s", (uint8_t *)v68, 0x16u);
      uint64_t v81 = v117;
      swift_arrayDestroy(v117, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    else
    {

      uint64_t v76 = v54 & 0xFFFFFFFFFFFFLL;
    }

    (*(void (**)(uint64_t, void *, uint64_t))(v113 + 120))(v76, v124, v112);
  }

  if (qword_1004041A0 != -1) {
    swift_once(&qword_1004041A0, sub_1001207BC);
  }
  uint64_t v91 = (uint64_t)v110;
  (*(void (**)(void))(*(void *)algn_1004107A8 + 8LL))();
  uint64_t v52 = 1LL;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v91, 0LL, 1LL, v109);
  uint64_t v92 = v107;
  swift_beginAccess(v107, v122, 33LL, 0LL);
  sub_100057104(v91, v92, &qword_100405D40);
  swift_endAccess(v122);
  uint64_t v93 = *(void *)v56;
  uint64_t v94 = *((void *)v56 + 1);
  uint64_t v95 = *((void *)v56 + 2);
  uint64_t v96 = *((void *)v56 + 3);
  *(void *)int v56 = v108;
  *((void *)v56 + 1)  = 0LL;
  *((void *)v56 + 2)  = 0LL;
  *((void *)v56 + 3)  = 0LL;
  unsigned __int8 v97 = v56[32];
  v56[32]  = 0;
  sub_100056B0C(v93, v94, v95, v96, v97);
  uint64_t v98 = v50
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v98 + 4)  = WORD2(v54);
  *(_DWORD *)uint64_t v98 = v54;
  *(_BYTE *)(v98 + 6)  = 0;
  return v52;
}

uint64_t sub_100044B54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  char v4 = v3(a2);
  swift_unknownObjectRelease(a2);
  return v4 & 1;
}

uint64_t sub_100044B9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
  char v4 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Stop monitoring network path for gateway address updates",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v3, v7);
  swift_release(*(void *)(v2
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor));
  sub_1000225EC( v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket,  &qword_100405268);
  sub_100056B0C( *(void *)(v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress),  *(void *)(v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress + 8),  *(void *)(v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress + 16),  *(void *)(v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress + 24),  *(_BYTE *)(v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress + 32));
  sub_1000225EC( v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate,  &qword_100405D40);
  return v2;
}

uint64_t sub_100044CBC()
{
  return sub_100044CC8((uint64_t (*)(void))sub_100044B9C);
}

uint64_t sub_100044CC8(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_100044CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002274(&qword_100405D40);
  uint64_t v3 = __chkstk_darwin(v2);
  os_log_type_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Resetting gateway IP address", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess( v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate,  v20,  33LL,  0LL);
  sub_100057104((uint64_t)v5, v10, &qword_100405D40);
  swift_endAccess(v20);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  uint64_t v12 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
  uint64_t v13 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 8);
  uint64_t v14 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 16);
  uint64_t v15 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 24);
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  unsigned __int8 v16 = *(_BYTE *)(v11 + 32);
  *(_BYTE *)(v11 + 32)  = -1;
  uint64_t result = sub_100056B0C(v12, v13, v14, v15, v16);
  uint64_t v18 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v18 + 4)  = 0;
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 6)  = 1;
  return result;
}

uint64_t sub_100044E74(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100002274(&qword_100405268);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RoutingSocket(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000226B0( v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket,  (uint64_t)v8,  &qword_100405268);
  sub_100022628((uint64_t)v8, (uint64_t)v12, type metadata accessor for RoutingSocket);
  RoutingSocket.ipAddress(for:)(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v61);
  uint64_t v45 = v61[0];
  unint64_t v44 = v61[1];
  uint64_t v43 = v61[2];
  uint64_t v42 = (void *)v61[3];
  sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100057070);
  uint64_t v14 = sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100057070);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  int v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    int v40 = v16;
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    uint64_t v46 = v39;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v41 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v18 = WiFiAddress.description.getter(a1 & 0xFFFFFFFFFFFFLL);
    unint64_t v20 = v19;
    uint64_t v65 = sub_10000235C(v18, v19, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v17 + 12)  = 2080;
    sub_1000586C0((uint64_t)v61, (uint64_t)&v65, &qword_100405D50);
    if (v66[24] == 1)
    {
      uint64_t v21 = v42;
      swift_bridgeObjectRetain(v42);
      uint64_t v22 = IPv6Address.description.getter(v45, v44, v43, v21);
      unint64_t v24 = v23;
      sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100056B24);
    }

    else
    {
      uint64_t v25 = (char *)swift_slowAlloc(16LL, -1LL);
      LODWORD(v62)  = v45;
      inet_ntop(2, &v62, v25, 0x10u);
      uint64_t v22 = String.init(cString:)(v25);
      unint64_t v24 = v26;
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    uint64_t v62 = sub_10000235C(v22, v24, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63);
    swift_bridgeObjectRelease(v24);
    sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100056B24);
    sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100056B24);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  (os_log_type_t)v40,  "Infra peer (%s) has IP address %s",  (uint8_t *)v17,  0x16u);
    uint64_t v27 = v39;
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100056B24);
    sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100056B24);
  }

  sub_1000586C0((uint64_t)v61, (uint64_t)&v62, &qword_100405D50);
  if ((v64 & 1) != 0)
  {
    int v28 = 0;
    char v29 = 0;
    char v30 = 0;
    uint64_t v32 = v62;
    uint64_t v31 = v63[0];
    char v33 = 28;
    char v34 = 30;
  }

  else
  {
    uint64_t v32 = 0LL;
    uint64_t v31 = 0LL;
    char v34 = 0;
    char v33 = 0;
    char v30 = 16;
    int v28 = v62;
    char v29 = 2;
  }

  LODWORD(v46)  = 1;
  WORD2(v46)  = a1;
  BYTE6(v46)  = BYTE2(a1);
  HIBYTE(v46)  = BYTE3(a1);
  char v47 = BYTE4(a1);
  char v48 = BYTE5(a1);
  char v49 = v30;
  char v50 = v29;
  __int16 v51 = 0;
  int v52 = v28;
  uint64_t v53 = 0LL;
  char v54 = v33;
  char v55 = v34;
  __int16 v56 = 0;
  int v57 = 0;
  uint64_t v58 = v32;
  uint64_t v59 = v31;
  int v60 = 0;
  uint64_t v35 = a2[5];
  uint64_t v37 = a2[2];
  uint64_t v36 = a2[3];
  swift_retain();
  swift_bridgeObjectRetain(v36);
  AppleDevice.setRequest(requestType:data:on:)(0x1C3uLL, (uint64_t)&v46, (uint64_t)v61, 0, v37, v36);
  swift_bridgeObjectRelease(v36);
  swift_release(v35);
  sub_10005802C((uint64_t)v12, type metadata accessor for RoutingSocket);
  return sub_100057080((uint64_t)v61, (void (*)(void, void, void, void, void))sub_100056B24);
}

uint64_t sub_1000455DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = sub_100002274(&qword_100405268);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingSocket(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000226B0( v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket,  (uint64_t)v11,  &qword_100405268);
  sub_100022628((uint64_t)v11, (uint64_t)v15, type metadata accessor for RoutingSocket);
  unint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  RoutingSocket.ipAddress(for:)(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v45);
  unint64_t v40 = v45[1];
  uint64_t v41 = v45[0];
  uint64_t v38 = (void *)v45[3];
  uint64_t v39 = v45[2];
  sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100057070);
  uint64_t v18 = sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100057070);
  unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  int v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    int v35 = v20;
    os_log_t v36 = v19;
    uint64_t v37 = a3;
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v34 = swift_slowAlloc(64LL, -1LL);
    uint64_t v44 = v34;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v22 = WiFiAddress.description.getter(v17);
    unint64_t v24 = v23;
    uint64_t v46 = sub_10000235C(v22, v23, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v21 + 12)  = 2080;
    sub_1000586C0((uint64_t)v45, (uint64_t)&v46, &qword_100405D50);
    if (v47[24] == 1)
    {
      uint64_t v25 = v38;
      swift_bridgeObjectRetain(v38);
      uint64_t v26 = IPv6Address.description.getter(v41, v40, v39, v25);
      unint64_t v28 = v27;
      sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100056B24);
    }

    else
    {
      char v29 = (char *)swift_slowAlloc(16LL, -1LL);
      LODWORD(v42)  = v41;
      inet_ntop(2, &v42, v29, 0x10u);
      uint64_t v26 = String.init(cString:)(v29);
      unint64_t v28 = v30;
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    uint64_t v42 = sub_10000235C(v26, v28, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    swift_bridgeObjectRelease(v28);
    sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100056B24);
    sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100056B24);
    os_log_t v31 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v35,  "Infra peer (%s) has IP address %s",  (uint8_t *)v21,  0x16u);
    uint64_t v32 = v34;
    swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    a3  = v37;
  }

  else
  {

    sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100056B24);
    sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100056B24);
  }

  (*(void (**)(unint64_t, void *, uint64_t, uint64_t))(a4 + 128))(v17, v45, a3, a4);
  sub_10005802C((uint64_t)v15, type metadata accessor for RoutingSocket);
  return sub_100057080((uint64_t)v45, (void (*)(void, void, void, void, void))sub_100056B24);
}

uint64_t static DeviceDriver<>.interfaceName(for:)(unsigned int a1)
{
  uint64_t v2 = (char *)swift_slowAlloc(16LL, -1LL);
  if (if_indextoname(a1, v2)) {
    uint64_t v3 = String.init(cString:)(v2);
  }
  else {
    uint64_t v3 = 0LL;
  }
  swift_slowDealloc(v2, -1LL, -1LL);
  return v3;
}

uint64_t DeviceDriver<>.linkState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)( (uint64_t)&type metadata for WiFiInterfaceLinkState,  (uint64_t)&v8);
  swift_bridgeObjectRelease(v6);
  return v8;
}

uint64_t sub_100045D08@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2  = (~*(_DWORD *)(result + 16) & 0x41) == 0;
  return result;
}

uint64_t sub_100045D20(__int16 a1, void *(*a2)(uint64_t *__return_ptr, void *))
{
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  uint64_t v6 = v2[2];
  uint64_t v5 = v2[3];
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  unint64_t v24 = &v28;
  uint64_t v25 = KeyPath;
  uint64_t v26 = 16LL;
  swift_bridgeObjectRetain(v5);
  sub_10003B5A4(a2, (uint64_t)v23, v6, v5);
  swift_bridgeObjectRelease(v5);
  swift_release(KeyPath);
  unint64_t v27 = 0LL;
  swift_bridgeObjectRetain(v5);
  if (getifaddrs(&v27))
  {
    swift_bridgeObjectRelease(v5);
    __int16 v8 = 0;
    goto LABEL_22;
  }

  __int16 v22 = a1;
  uint64_t v9 = v27;
  if (!v27)
  {
    LOWORD(ifa_flags)  = 0;
    int v19 = 1;
    goto LABEL_19;
  }

  uint64_t v10 = v27;
  do
  {
    ifa_name  = v10->ifa_name;
    if (!ifa_name)
    {
      __break(1u);
LABEL_24:
      __break(1u);
    }

    ifa_addr  = v10->ifa_addr;
    ifa_flags  = v10->ifa_flags;
    uint64_t v10 = v10->ifa_next;
    uint64_t v14 = String.init(cString:)(ifa_name);
    if (v14 == v6 && v15 == v5)
    {
      swift_bridgeObjectRelease(v5);
    }

    else
    {
      uint64_t v17 = v15;
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v6, v5, 0LL);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) == 0) {
        continue;
      }
    }

    if (!ifa_addr) {
      goto LABEL_24;
    }
    if (ifa_addr->sa_family == 18)
    {
      int v19 = 0;
      goto LABEL_19;
    }
  }

  while (v10);
  LOWORD(ifa_flags)  = 0;
  int v19 = 1;
LABEL_19:
  freeifaddrs(v9);
  swift_bridgeObjectRelease(v5);
  __int16 v8 = ifa_flags & 0xFFBE;
  if (v19) {
    __int16 v8 = 0;
  }
  a1  = v22;
LABEL_22:
  LOWORD(v29)  = v8 | ((__int16)(a1 << 15) >> 15) & 0x41;
  uint64_t v20 = v2[5];
  swift_retain();
  AppleDevice.send(request:data:)(1u, (uint64_t)&v28);
  return swift_release(v20);
}

uint64_t DeviceDriver<>.update(linkState:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v22 = a3;
  int v23 = a1 << 31 >> 31;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v20 - v8;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v11 = v10(a2, a4);
  uint64_t v13 = v12;
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  __int128 v28 = &v31;
  uint64_t v29 = KeyPath;
  uint64_t v30 = 16LL;
  sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_100054614, (uint64_t)v27, v11, v13);
  swift_bridgeObjectRelease(v13);
  swift_release(KeyPath);
  v10(a2, a4);
  uint64_t v16 = v15;
  uint64_t v17 = v21;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for UInt32, (uint64_t)&v25);
  swift_bridgeObjectRelease(v16);
  __int16 v18 = v25 & 0xFFBE;
  if (v26) {
    __int16 v18 = 0;
  }
  LOWORD(v32)  = v18 | v23 & 0x41;
  (*(void (**)(uint64_t))(v22 + 56))(a2);
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v17 + 16))(1LL, &v31, AssociatedTypeWitness, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_10004614C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2  = *(_DWORD *)(result + 16);
  *(_BYTE *)(a2 + 4)  = 0;
  return result;
}

unint64_t DeviceDriver<>.macAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiAddress, (uint64_t)&v8);
  swift_bridgeObjectRelease(v6);
  return v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 48);
}

uint64_t sub_100046220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!v11) {
    __break(1u);
  }
  uint64_t v3 = *(unsigned __int8 *)(v11 + 5);
  uint64_t v4 = *(unsigned __int8 *)(v11 + 6);
  uint64_t v8 = *(void *)(v11 + 8);
  int v9 = *(_DWORD *)(v11 + 16);
  uint64_t v5 = sub_100211E68((_BYTE *)&v8 + v3, v4);
  uint64_t result = sub_100212134(v5, v6);
  *(_DWORD *)a2  = result;
  *(_WORD *)(a2 + 4)  = WORD2(result);
  *(_BYTE *)(a2 + 6)  = BYTE6(result) & 1;
  return result;
}

uint64_t sub_1000462F0(unint64_t a1, void *(*a2)(uint64_t *__return_ptr, void *))
{
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v22 = a1 >> 16;
  unint64_t v23 = a1 >> 24;
  unint64_t v24 = HIDWORD(a1);
  unint64_t v25 = a1 >> 40;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  __int128 v28 = &v31;
  uint64_t v29 = KeyPath;
  uint64_t v30 = 16LL;
  swift_bridgeObjectRetain(v7);
  sub_10003B5A4(a2, (uint64_t)v27, v6, v7);
  swift_bridgeObjectRelease(v7);
  swift_release(KeyPath);
  __int128 v26 = v32;
  uint64_t v9 = sub_100002274(&qword_1004040A8);
  uint64_t v10 = swift_allocObject(v9, 38LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10033A980;
  *(_BYTE *)(v10 + 32)  = v4;
  *(_BYTE *)(v10 + 33)  = v5;
  *(_BYTE *)(v10 + 34)  = v22;
  *(_BYTE *)(v10 + 35)  = v23;
  *(_BYTE *)(v10 + 36)  = v24;
  *(_BYTE *)(v10 + 37)  = v25;
  uint64_t v11 = sub_1000FB08C(v10);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v10);
  sub_100046974(v11, v13, (uint64_t)&v26 + 2);
  sub_1000208D8(v11, v13);
  v33.val[0].i64[1]  = *((void *)&v26 + 1);
  BYTE1(v32)  = BYTE1(v26);
  v33.val[1]  = (int8x16_t)vdupq_laneq_s64((int64x2_t)v26, 1);
  HIWORD(v32)  = HIWORD(v26);
  LOBYTE(v32)  = 6;
  LODWORD(v14)  = *(_DWORD *)((char *)&v26 + 2);
  WORD2(v14)  = WORD3(v26);
  BYTE6(v14)  = v33.val[1].i8[0];
  HIBYTE(v14)  = BYTE9(v26);
  *(void *)((char *)&v32 + 2)  = v14;
  v33.val[3].i64[0]  = *((void *)&v26 + 1) >> 40;
  v33.val[2].i64[0]  = HIDWORD(*((void *)&v26 + 1));
  v33.val[1].i64[0]  = *((void *)&v26 + 1) >> 24;
  v33.val[0].i64[0]  = *((void *)&v26 + 1) >> 16;
  v33.val[0]  = vqtbl4q_s8(v33, (int8x16_t)xmmword_10033A990);
  *(_DWORD *)((char *)&v32 + 10)  = vmovn_s16((int16x8_t)v33.val[0]).u32[0];
  unint64_t v15 = *((void *)&v32 + 1);
  uint64_t v16 = HIWORD(*((void *)&v32 + 1));
  uint64_t v17 = HIBYTE(*((void *)&v32 + 1));
  uint64_t v18 = v32 >> 48;
  uint64_t v19 = v32 >> 40;
  BYTE1(v32)  = 18;
  v33.val[0].i16[0]  = WORD1(v32);
  v33.val[0].i8[2]  = BYTE4(v32);
  v33.val[0].i8[3]  = v19;
  v33.val[0].i8[4]  = v18;
  *(__int16 *)((char *)&v33.val[0].i16[2] + 1)  = *(_WORD *)((char *)&v32 + 7);
  v33.val[0].i8[7]  = BYTE9(v32);
  *(void *)((char *)&v32 + 2)  = v33.val[0].i64[0];
  v33.val[3].i64[0]  = v15 >> 40;
  v33.val[2].i64[0]  = HIDWORD(v15);
  v33.val[1].i64[0]  = v15 >> 24;
  v33.val[0].i64[0]  = v15 >> 16;
  *(_DWORD *)((char *)&v32 + 10)  = vmovn_s16((int16x8_t)vqtbl4q_s8(v33, (int8x16_t)xmmword_10033A990)).u32[0];
  BYTE14(v32)  = v16;
  HIBYTE(v32)  = v17;
  uint64_t v20 = v2[5];
  swift_retain();
  AppleDevice.send(request:data:)(2u, (uint64_t)&v31);
  return swift_release(v20);
}

uint64_t DeviceDriver<>.update(macAddress:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v33 = a3;
  char v8 = a1;
  unint64_t v26 = a1 >> 8;
  unint64_t v27 = a1 >> 16;
  unint64_t v28 = a1 >> 24;
  unint64_t v29 = HIDWORD(a1);
  unint64_t v30 = a1 >> 40;
  uint64_t v32 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v26 - v10;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
  uint64_t v14 = v13;
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  uint64_t v38 = &v41;
  uint64_t v39 = KeyPath;
  uint64_t v40 = 16LL;
  sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_100054614, (uint64_t)v37, v12, v14);
  uint64_t v31 = v5;
  swift_bridgeObjectRelease(v14);
  swift_release(KeyPath);
  __int128 v36 = v42;
  uint64_t v16 = sub_100002274(&qword_1004040A8);
  uint64_t v17 = swift_allocObject(v16, 38LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10033A980;
  *(_BYTE *)(v17 + 32)  = v8;
  *(_BYTE *)(v17 + 33)  = v26;
  *(_BYTE *)(v17 + 34)  = v27;
  *(_BYTE *)(v17 + 35)  = v28;
  *(_BYTE *)(v17 + 36)  = v29;
  *(_BYTE *)(v17 + 37)  = v30;
  uint64_t v18 = sub_1000FB08C(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  sub_100046974(v18, v20, (uint64_t)&v36 + 2);
  sub_1000208D8(v18, v20);
  v43.val[0].i64[1]  = *((void *)&v36 + 1);
  BYTE1(v42)  = BYTE1(v36);
  v43.val[1]  = (int8x16_t)vdupq_laneq_s64((int64x2_t)v36, 1);
  HIWORD(v42)  = HIWORD(v36);
  LOBYTE(v42)  = 6;
  LODWORD(v21)  = *(_DWORD *)((char *)&v36 + 2);
  WORD2(v21)  = WORD3(v36);
  BYTE6(v21)  = v43.val[1].i8[0];
  HIBYTE(v21)  = BYTE9(v36);
  *(void *)((char *)&v42 + 2)  = v21;
  v43.val[3].i64[0]  = *((void *)&v36 + 1) >> 40;
  v43.val[2].i64[0]  = HIDWORD(*((void *)&v36 + 1));
  v43.val[1].i64[0]  = *((void *)&v36 + 1) >> 24;
  v43.val[0].i64[0]  = *((void *)&v36 + 1) >> 16;
  v43.val[0]  = vqtbl4q_s8(v43, (int8x16_t)xmmword_10033A990);
  *(_DWORD *)((char *)&v42 + 10)  = vmovn_s16((int16x8_t)v43.val[0]).u32[0];
  uint64_t v22 = v42 >> 48;
  uint64_t v23 = v42 >> 40;
  __int128 v24 = v42;
  BYTE1(v42)  = 18;
  v43.val[0].i16[0]  = WORD1(v24);
  v43.val[0].i8[2]  = BYTE4(v24);
  v43.val[0].i8[3]  = v23;
  v43.val[0].i8[4]  = v22;
  v43.val[0].i8[5]  = BYTE7(v24);
  v43.val[0].i16[3]  = WORD4(v42);
  *(void *)((char *)&v42 + 2)  = v43.val[0].i64[0];
  v43.val[3].i64[0]  = *((void *)&v24 + 1) >> 40;
  v43.val[2].i64[0]  = HIDWORD(*((void *)&v24 + 1));
  v43.val[1].i64[0]  = *((void *)&v24 + 1) >> 24;
  v43.val[0].i64[0]  = *((void *)&v24 + 1) >> 16;
  *(_DWORD *)((char *)&v42 + 10)  = vmovn_s16((int16x8_t)vqtbl4q_s8(v43, (int8x16_t)xmmword_10033A990)).u32[0];
  HIWORD(v42)  = HIWORD(v24);
  (*(void (**)(uint64_t))(v33 + 56))(v32);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v35 + 16))(2LL, &v41, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v11, AssociatedTypeWitness);
}

void sub_100046974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    __asm { BR              X10 }
  }

unint64_t DeviceDriver<>.ipv4Address.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for IPv4Address, (uint64_t)&v8);
  swift_bridgeObjectRelease(v6);
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_100046C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000586C0((uint64_t)v4, (uint64_t)&v5, &qword_100405DD0);
  if (v5)
  {
    *(_DWORD *)a2  = *(_DWORD *)(v5 + 4);
    *(_BYTE *)(a2 + 4)  = 0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100046CE4(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, void *))
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  _OWORD v11[2] = &v12;
  v11[3]  = KeyPath;
  v11[4]  = 16LL;
  swift_bridgeObjectRetain(v6);
  sub_10003B5A4(a2, (uint64_t)v11, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_release(KeyPath);
  if ((a1 & 0x100000000LL) != 0)
  {
    unsigned int v8 = 4;
  }

  else
  {
    LODWORD(v13)  = 528;
    WORD2(v13)  = a1;
    BYTE6(v13)  = BYTE2(a1);
    BYTE7(v13)  = BYTE3(a1);
    *((void *)&v13 + 1)  = 0LL;
    unsigned int v8 = 3;
  }

  uint64_t v9 = v2[5];
  swift_retain();
  AppleDevice.send(request:data:)(v8, (uint64_t)&v12);
  return swift_release(v9);
}

uint64_t DeviceDriver<>.update(ipv4Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v18 - v10;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
  uint64_t v14 = v13;
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  uint64_t v22 = &v25;
  uint64_t v23 = KeyPath;
  uint64_t v24 = 16LL;
  sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_100054614, (uint64_t)v21, v12, v14);
  swift_bridgeObjectRelease(v14);
  swift_release(KeyPath);
  if ((a1 & 0x100000000LL) != 0)
  {
    uint64_t v16 = 4LL;
  }

  else
  {
    LODWORD(v26)  = 528;
    WORD2(v26)  = a1;
    BYTE6(v26)  = BYTE2(a1);
    BYTE7(v26)  = BYTE3(a1);
    *((void *)&v26 + 1)  = 0LL;
    uint64_t v16 = 3LL;
  }

  (*(void (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v20 + 16))(v16, &v25, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v11, AssociatedTypeWitness);
}

uint64_t DeviceDriver<>.ipv6Addresses.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a2,  a1,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  uint64_t v8 = v7;
  uint64_t v9 = static ApplePlatform.withInterface<A>(_:matchingAllInFamily:_:)( v6,  v7,  30LL,  (uint64_t)sub_100047094,  0LL,  AssociatedTypeWitness,  (uint64_t)&type metadata for IPv6Address);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_100047094@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000586C0((uint64_t)v5, (uint64_t)&v6, &qword_100405DD0);
  if (v6)
  {
    uint64_t v4 = *(void *)(v6 + 16);
    *a2  = *(void *)(v6 + 8);
    a2[1]  = v4;
    a2[2]  = 0LL;
    a2[3]  = 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100047108( unint64_t a1, unsigned int a2, void *(*a3)(uint64_t *__return_ptr, void *))
{
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v18 = a1 >> 24;
  unint64_t v19 = HIDWORD(a1);
  unint64_t v20 = a1 >> 40;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v8 = v3[2];
  uint64_t v9 = v3[3];
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  uint64_t v24 = &v27;
  uint64_t v25 = KeyPath;
  uint64_t v26 = 16LL;
  swift_bridgeObjectRetain(v9);
  sub_10003B5A4(a3, (uint64_t)v23, v8, v9);
  swift_bridgeObjectRelease(v9);
  swift_release(KeyPath);
  WORD1(v22)  = WORD1(v28);
  BYTE5(v22)  = BYTE5(v28);
  *(void *)((char *)&v22 + 7)  = *(void *)((char *)&v28 + 7);
  HIBYTE(v22)  = HIBYTE(v28);
  LOWORD(v22)  = 4628;
  BYTE4(v22)  = 6;
  BYTE6(v22)  = 6;
  uint64_t v11 = sub_100002274(&qword_1004040A8);
  uint64_t v12 = swift_allocObject(v11, 38LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10033A980;
  *(_BYTE *)(v12 + 32)  = v5;
  *(_BYTE *)(v12 + 33)  = v6;
  *(_BYTE *)(v12 + 34)  = v7;
  *(_BYTE *)(v12 + 35)  = v18;
  *(_BYTE *)(v12 + 36)  = v19;
  *(_BYTE *)(v12 + 37)  = v20;
  uint64_t v13 = sub_1000FB08C(v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease(v12);
  sub_100046974(v13, v15, (uint64_t)&v22 + 8);
  sub_1000208D8(v13, v15);
  __int128 v28 = v22;
  uint64_t v16 = v3[5];
  swift_retain();
  AppleDevice.send(request:data:)(a2, (uint64_t)&v27);
  return swift_release(v16);
}

uint64_t sub_100047338(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  unsigned int v35 = a2;
  char v10 = a1;
  unint64_t v27 = a1 >> 8;
  unint64_t v28 = a1 >> 16;
  unint64_t v29 = a1 >> 24;
  unint64_t v30 = HIDWORD(a1);
  unint64_t v31 = a1 >> 40;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v33 = v12;
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v14 = (char *)&v26 - v13;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  uint64_t v17 = v16;
  KeyPath  = swift_getKeyPath(&unk_10033A160);
  uint64_t v38 = &v41;
  uint64_t v39 = KeyPath;
  uint64_t v40 = 16LL;
  sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_100054614, (uint64_t)v37, v15, v17);
  uint64_t v26 = v6;
  swift_bridgeObjectRelease(v17);
  swift_release(KeyPath);
  WORD1(v36)  = WORD1(v42);
  BYTE5(v36)  = BYTE5(v42);
  *(void *)((char *)&v36 + 7)  = *(void *)((char *)&v42 + 7);
  HIBYTE(v36)  = HIBYTE(v42);
  LOWORD(v36)  = 4628;
  BYTE4(v36)  = 6;
  BYTE6(v36)  = 6;
  uint64_t v19 = sub_100002274(&qword_1004040A8);
  uint64_t v20 = swift_allocObject(v19, 38LL, 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10033A980;
  *(_BYTE *)(v20 + 32)  = v10;
  *(_BYTE *)(v20 + 33)  = v27;
  *(_BYTE *)(v20 + 34)  = v28;
  *(_BYTE *)(v20 + 35)  = v29;
  *(_BYTE *)(v20 + 36)  = v30;
  *(_BYTE *)(v20 + 37)  = v31;
  uint64_t v21 = sub_1000FB08C(v20);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease(v20);
  uint64_t v24 = v32;
  sub_100046974(v21, v23, (uint64_t)&v36 + 8);
  sub_1000208D8(v21, v23);
  __int128 v42 = v36;
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  (*(void (**)(void, __int128 *, uint64_t))(v34 + 16))(v35, &v41, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v14, v24);
}

uint64_t DeviceDriver<>.addMulticastAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100047640(a1, a2, a3, a4, a5, 7u);
}

uint64_t DeviceDriver<>.removeMulticastAddress(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100047640(a1, a2, a3, a4, a5, 8u);
}

uint64_t sub_100047640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return sub_100047338(a1 & 0xFFFFFFFFFFFFLL, a6, a2, a3, a4, a5);
}

uint64_t DeviceDriver<>.postPeerPresence(macAddress:ipv6Address:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000476C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1u);
}

uint64_t DeviceDriver<>.postPeerAbsence(macAddress:ipv6Address:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000476C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, 2u);
}

uint64_t sub_1000476C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  unsigned int v25 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a7,  a6,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v17 = (char *)&v22 - v16;
  (*(void (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a6, a8);
  uint64_t v20 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(a9 + 24))( a1 & 0xFFFFFFFFFFFFLL,  v23,  v24,  v26,  v27,  v18,  v19,  v25,  AssociatedTypeWitness,  a9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  return swift_bridgeObjectRelease(v20);
}

uint64_t DeviceDriver<>.clearAllPeerPresence()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a2,  a1,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v16 - v10;
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  uint64_t v14 = v13;
  (*(void (**)(uint64_t))(a4 + 32))(v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_1000478EC( void *a1, void *(*a2)(uint64_t *__return_ptr, void *), void *(*a3)(uint64_t *__return_ptr, void *))
{
  void *(*v40)(uint64_t *__return_ptr, void *);
  void *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[296];
  uint64_t v6 = v3;
  uint64_t v8 = type metadata accessor for Socket();
  swift_initStackObject(v8, &v42);
  uint64_t v9 = Socket.init(domain:type:proto:)(30, 2, 0);
  if (!v9)
  {
    uint64_t v26 = errno.getter(0LL, v10);
    unint64_t v27 = sub_1000033FC();
    uint64_t v28 = swift_allocError(&type metadata for WiFiError, v27, 0LL, 0LL);
    *(void *)uint64_t v29 = v26;
    *(void *)(v29 + 8)  = 0LL;
    *(_BYTE *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    return swift_willThrow(v28);
  }

  uint64_t v11 = v9;
  uint64_t v40 = a3;
  __int128 v41 = a1;
  memset(v51, 0, 288);
  uint64_t v13 = *(void *)(v6 + 16);
  uint64_t v12 = *(void *)(v6 + 24);
  KeyPath  = swift_getKeyPath(&unk_10033A180);
  __int128 v36 = (__int128 *)v51;
  uint64_t v37 = __chkstk_darwin(KeyPath);
  uint64_t v38 = 16LL;
  swift_bridgeObjectRetain(v12);
  uint64_t v39 = v13;
  sub_10003B5A4(a2, (uint64_t)v35, v13, v12);
  swift_bridgeObjectRelease(v12);
  swift_release(KeyPath);
  uint64_t v15 = *((unsigned int *)v11 + 4);
  uint64_t v16 = sub_100333A04(6u);
  uint64_t v17 = ioctl(_:_:_:)(v15, v16, v51);
  if ((_DWORD)v17 == -1) {
    goto LABEL_9;
  }
  if ((_DWORD)v17)
  {
LABEL_10:
    uint64_t v31 = v17;
    unint64_t v32 = sub_1000033FC();
    uint64_t v33 = swift_allocError(&type metadata for WiFiError, v32, 0LL, 0LL);
    *(void *)uint64_t v34 = v31;
    *(void *)(v34 + 8)  = 0LL;
    *(_BYTE *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v33);
    return swift_release(v11);
  }

  if (!v41[2]) {
    return swift_release(v11);
  }
  uint64_t v19 = v41[4];
  uint64_t v20 = v41[5];
  uint64_t v21 = v41[7];
  char v50 = 0u;
  char v48 = 0u;
  char v49 = 0u;
  uint64_t v46 = 0u;
  char v47 = 0u;
  uint64_t v44 = 0u;
  uint64_t v45 = 0u;
  int8x16x4_t v43 = 0u;
  uint64_t v22 = swift_getKeyPath(&unk_10033A1A0);
  uint64_t v23 = __chkstk_darwin(v22);
  __int128 v36 = &v43;
  uint64_t v37 = v23;
  uint64_t v38 = 16LL;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v12);
  sub_10003B5A4(v40, (uint64_t)v35, v39, v12);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v12);
  swift_release(v22);
  LOWORD(v44)  = 7708;
  *((void *)&v44 + 1)  = v19;
  *(void *)&uint64_t v45 = v20;
  uint64_t v24 = *((unsigned int *)v11 + 4);
  uint64_t v25 = sub_100333A04(5u);
  uint64_t v17 = ioctl(_:_:_:)(v24, v25, &v43);
  if ((_DWORD)v17 == -1)
  {
LABEL_9:
    LODWORD(v17)  = errno.getter(v17, v18);
    goto LABEL_10;
  }

  if ((_DWORD)v17) {
    goto LABEL_10;
  }
  return swift_release(v11);
}

uint64_t DeviceDriver<>.update(ipv6Addresses:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Socket();
  swift_initStackObject(v8, &v48);
  uint64_t v9 = Socket.init(domain:type:proto:)(30, 2, 0);
  if (!v9)
  {
    uint64_t v30 = errno.getter(0LL, v10);
    unint64_t v31 = sub_1000033FC();
    uint64_t v32 = swift_allocError(&type metadata for WiFiError, v31, 0LL, 0LL);
    *(void *)uint64_t v33 = v30;
    *(void *)(v33 + 8)  = 0LL;
    *(_BYTE *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    return swift_willThrow(v32);
  }

  uint64_t v11 = v9;
  char v47 = a1;
  memset(v57, 0, 288);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v45 = a2;
  uint64_t v46 = v4;
  uint64_t v44 = v12;
  uint64_t v13 = v12(a2, a4);
  uint64_t v15 = v14;
  KeyPath  = swift_getKeyPath(&unk_10033A180);
  uint64_t v40 = (__int128 *)v57;
  uint64_t v41 = __chkstk_darwin(KeyPath);
  uint64_t v42 = 16LL;
  sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_100054614, (uint64_t)v39, v13, v15);
  swift_bridgeObjectRelease(v15);
  swift_release(KeyPath);
  uint64_t v17 = *((unsigned int *)v11 + 4);
  uint64_t v18 = sub_100333A04(6u);
  uint64_t v19 = ioctl(_:_:_:)(v17, v18, v57);
  if ((_DWORD)v19 == -1) {
    goto LABEL_9;
  }
  if ((_DWORD)v19)
  {
LABEL_10:
    uint64_t v35 = v19;
    unint64_t v36 = sub_1000033FC();
    uint64_t v37 = swift_allocError(&type metadata for WiFiError, v36, 0LL, 0LL);
    *(void *)uint64_t v38 = v35;
    *(void *)(v38 + 8)  = 0LL;
    *(_BYTE *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v37);
    return swift_release(v11);
  }

  if (!v47[2]) {
    return swift_release(v11);
  }
  uint64_t v21 = v47[5];
  uint64_t v43 = v47[4];
  uint64_t v22 = v47[7];
  __int128 v56 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v49 = 0u;
  swift_bridgeObjectRetain(v22);
  uint64_t v23 = v44(v45, a4);
  uint64_t v25 = v24;
  uint64_t v26 = swift_getKeyPath(&unk_10033A1A0);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v40 = &v49;
  uint64_t v41 = v27;
  uint64_t v42 = 16LL;
  sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_100054614, (uint64_t)v39, v23, v25);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v25);
  swift_release(v26);
  LOWORD(v50)  = 7708;
  *((void *)&v50 + 1)  = v43;
  *(void *)&__int128 v51 = v21;
  uint64_t v28 = *((unsigned int *)v11 + 4);
  uint64_t v29 = sub_100333A04(5u);
  uint64_t v19 = ioctl(_:_:_:)(v28, v29, &v49);
  if ((_DWORD)v19 == -1)
  {
LABEL_9:
    LODWORD(v19)  = errno.getter(v19, v20);
    goto LABEL_10;
  }

  if ((_DWORD)v19) {
    goto LABEL_10;
  }
  return swift_release(v11);
}

BOOL sub_100047EFC()
{
  uint64_t v10 = 0LL;
  v11[0]  = 0LL;
  v11[1]  = 0LL;
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  swift_retain();
  swift_bridgeObjectRetain(v3);
  AppleDevice.getRequest(requestType:data:on:)(0x13uLL, (uint64_t)&v10, (uint64_t)&v12, 0, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  if (HIDWORD(v10) >= 4) {
    uint64_t v5 = 4LL;
  }
  else {
    uint64_t v5 = HIDWORD(v10);
  }
  if (!(_DWORD)v5) {
    return 0LL;
  }
  if (LODWORD(v11[0])) {
    return 1LL;
  }
  if ((_DWORD)v5 == 1) {
    return 0LL;
  }
  uint64_t v6 = v5 - 2;
  unint64_t v7 = (int *)v11 + 1;
  do
  {
    int v8 = *v7++;
    BOOL result = v8 != 0;
    if (v8) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v6 == 0;
    }
    --v6;
  }

  while (!v9);
  return result;
}

BOOL DeviceDriver<>.powerOn.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0LL;
  v13[0]  = 0LL;
  v13[1]  = 0LL;
  sub_100048804((uint64_t)&v12, (uint64_t)&v14, v4, a1, a2, a3, a4, &v11, 19LL);
  if (HIDWORD(v12) >= 4) {
    uint64_t v6 = 4LL;
  }
  else {
    uint64_t v6 = HIDWORD(v12);
  }
  if (!(_DWORD)v6) {
    return 0LL;
  }
  if (LODWORD(v13[0])) {
    return 1LL;
  }
  if ((_DWORD)v6 == 1) {
    return 0LL;
  }
  uint64_t v7 = v6 - 2;
  int v8 = (int *)v13 + 1;
  do
  {
    int v9 = *v8++;
    BOOL result = v9 != 0;
    if (v9) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v7 == 0;
    }
    --v7;
  }

  while (!v10);
  return result;
}

uint64_t sub_10004810C()
{
  uint64_t v1 = v0;
  __int16 v16 = 0;
  int v15 = 0;
  uint64_t v2 = v0[5];
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  swift_retain();
  swift_bridgeObjectRetain(v3);
  AppleDevice.getRequest(requestType:data:on:)(9uLL, (uint64_t)&v15, (uint64_t)&v17, 0, v4, v3);
  swift_bridgeObjectRelease(v3);
  uint64_t v5 = swift_release(v2);
  __chkstk_darwin(v5);
  uint64_t v7 = sub_1000484C4(&v10, (uint64_t)&v11, v1);
  uint64_t v9 = v8;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  swift_retain();
  swift_bridgeObjectRetain(v3);
  AppleDevice.getRequest(requestType:data:on:)(4uLL, (uint64_t)&v12, (uint64_t)&v14, 0, v4, v3);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  if ((sub_1000A810C(v13, HIDWORD(v13)) & 0xFF00000000LL) == 0x300000000LL)
  {
    swift_bridgeObjectRelease(v9);
    return 0LL;
  }

  return v7;
}

uint64_t DeviceDriver<>.wifiNetwork.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  __int16 v20 = 0;
  int v19 = 0;
  uint64_t v10 = sub_100048804((uint64_t)&v19, (uint64_t)&v21, v4, a1, a2, a3, a4, &v16, v14[2]);
  __chkstk_darwin(v10);
  sub_100048600(v14, (uint64_t)&v15, a1, a2, a3, a4, &v16);
  uint64_t v12 = v16;
  uint64_t v11 = v17;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  sub_100048804((uint64_t)&v16, (uint64_t)&v18, v5, a1, a2, a3, a4, &v15, 4LL);
  if ((sub_1000A810C(v17, HIDWORD(v17)) & 0xFF00000000LL) == 0x300000000LL)
  {
    swift_bridgeObjectRelease(v11);
    return 0LL;
  }

  return v12;
}

uint64_t sub_1000484C4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    goto LABEL_11;
  }
  uint64_t v12 = a2 - (void)a1;
  bzero(a1, a2 - (void)a1);
  uint64_t v13 = a3[5];
  uint64_t v14 = a3[2];
  uint64_t v15 = a3[3];
  swift_retain();
  swift_bridgeObjectRetain(v15);
  AppleDevice.getRequest(requestType:data:on:)(1uLL, (uint64_t)a1, a2, 0, v14, v15);
  swift_bridgeObjectRelease(v15);
  uint64_t result = swift_release(v13);
  if (v4) {
    return result;
  }
  uint64_t v16 = v12 - 1;
  if (__OFSUB__(v12, 1LL))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

  if (v16 < 0 || v16 >= v12) {
    goto LABEL_10;
  }
  uint64_t v17 = UnsafeMutableRawBufferPointer.subscript.setter(0LL);
  static String.Encoding.utf8.getter(v17);
  uint64_t result = String.init(cString:encoding:)(a1, v11);
  if (!v18) {
    return 0LL;
  }
  return result;
}

uint64_t sub_100048600@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v33 = a6;
  unint64_t v31 = a7;
  uint64_t v12 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v12);
  uint64_t v30 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v17 = (char *)&v30 - v16;
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v18 = a2 - (void)a1;
  bzero(a1, a2 - (void)a1);
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(a5 + 16) + 40LL))(a3);
  uint64_t v21 = v20;
  uint64_t v22 = v34;
  (*(void (**)(uint64_t, void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v33 + 8) + 24LL))( 1LL,  a1,  a2,  0LL,  v19,  v20,  AssociatedTypeWitness);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v17, AssociatedTypeWitness);
    return swift_bridgeObjectRelease(v21);
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease(v21);
  uint64_t v23 = v18 - 1;
  if (__OFSUB__(v18, 1LL))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }

  if (v23 < 0 || v23 >= v18) {
    goto LABEL_15;
  }
  uint64_t v24 = UnsafeMutableRawBufferPointer.subscript.setter(0LL);
  uint64_t v25 = v30;
  static String.Encoding.utf8.getter(v24);
  uint64_t result = String.init(cString:encoding:)(a1, v25);
  if (v26) {
    uint64_t v27 = result;
  }
  else {
    uint64_t v27 = 0LL;
  }
  unint64_t v28 = 0xE000000000000000LL;
  if (v26) {
    unint64_t v28 = v26;
  }
  uint64_t v29 = v31;
  *unint64_t v31 = v27;
  v29[1]  = v28;
  return result;
}

uint64_t sub_100048804( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v23 = a8;
  uint64_t v24 = a7;
  uint64_t v25 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a5,  a4,  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v16 = (char *)&v22 - v15;
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(a6 + 16) + 40LL))(a4);
  uint64_t v19 = v18;
  uint64_t v20 = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 8) + 24LL))( a9,  a1,  v25,  0LL,  v17,  v18,  AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease(v19);
  if (v20) {
    *uint64_t v23 = v20;
  }
  return result;
}

uint64_t DeviceDriver<>.disassociate(with:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A630(a1, a2, a3, a4, (uint64_t)&unk_1003DD800, (uint64_t)sub_100054628, (uint64_t)&unk_1003DD818);
}

uint64_t DeviceDriver<>.disableAutoJoin()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100048DCC(a1, a2, a3, (uint64_t)sub_10005464C, (uint64_t)&unk_1003DD840);
}

void sub_100048988(uint64_t a1)
{
  if (!*(void *)(a1 + 104))
  {
    id v2 = [(id)objc_opt_self(CWFActivity) activityWithType:6 reason:0];
    uint64_t v3 = *(void **)(a1 + 48);
    id v18 = 0LL;
    unsigned int v4 = [v3 beginActivity:v2 error:&v18];
    id v5 = v18;
    if (v4)
    {
      uint64_t v6 = *(void **)(a1 + 104);
      *(void *)(a1 + 104)  = v2;
      id v7 = v5;
    }

    else
    {
      id v8 = v18;
      uint64_t v9 = _convertNSErrorToError(_:)(v5);

      swift_willThrow(v10);
      swift_errorRetain(v9);
      uint64_t v11 = swift_errorRetain(v9);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v15 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v14 = 138412290;
        swift_errorRetain(v9);
        uint64_t v16 = (void *)_swift_stdlib_bridgeErrorToNSError(v9);
        id v18 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
        *uint64_t v15 = v16;
        swift_errorRelease(v9);
        swift_errorRelease(v9);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to disable auto join: %@", v14, 0xCu);
        uint64_t v17 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v15, 1LL, v17);
        swift_slowDealloc(v15, -1LL, -1LL);
        swift_slowDealloc(v14, -1LL, -1LL);

        swift_errorRelease(v9);
      }

      else
      {

        swift_errorRelease(v9);
        swift_errorRelease(v9);
        swift_errorRelease(v9);
      }
    }
  }

uint64_t sub_100048BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v12 = *(void **)(v11 + 56);
  aBlock[4]  = a1;
  uint64_t v24 = v11;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = a2;
  os_log_type_t v13 = _Block_copy(aBlock);
  swift_retain_n(v11, 2LL);
  id v14 = v12;
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v17 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v13);
  _Block_release(v13);
  swift_release(v11);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
  return swift_release(v24);
}

uint64_t DeviceDriver<>.reenableAutoJoin()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100048DCC(a1, a2, a3, (uint64_t)sub_100054654, (uint64_t)&unk_1003DD868);
}

uint64_t sub_100048DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void aBlock[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v24 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  __chkstk_darwin(v11);
  os_log_type_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  v14(&v31, a1, a2);
  uint64_t v15 = v31;
  uint64_t v16 = *(id *)(v31 + 56);
  swift_release(v15);
  v14(aBlock, a1, a2);
  uint64_t v17 = aBlock[0];
  aBlock[4]  = a4;
  uint64_t v30 = aBlock[0];
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = v24;
  id v18 = _Block_copy(aBlock);
  uint64_t v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  unint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v22 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v18);
  _Block_release(v18);
  swift_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  return swift_release(v30);
}

void sub_100048FE8(uint64_t a1)
{
  if (*(void *)(a1 + 104))
  {
    objc_msgSend(*(id *)(a1 + 48), "endActivity:");
    uint64_t v2 = *(void **)(a1 + 104);
    *(void *)(a1 + 104)  = 0LL;
  }

Swift::Int sub_100049030(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  Swift::Int result = __chkstk_darwin(v4);
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)(&aBlock, *(void *)(a2 + 40));
    String.hash(into:)(&aBlock, 0x617461446E616ELL, 0xE700000000000000LL);
    Swift::Int result = Hasher._finalize()();
    unint64_t v6 = result & ~(-1LL << *(_BYTE *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
      __asm { BR              X9 }
    }

    if (*(void *)(a2 + 16))
    {
      Hasher.init(_seed:)(&aBlock, *(void *)(a2 + 40));
      String.hash(into:)(&aBlock, 0x7274736172666E69LL, 0xEE00657275746375LL);
      Swift::Int result = Hasher._finalize()();
      unint64_t v7 = result & ~(-1LL << *(_BYTE *)(a2 + 32));
      if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
        __asm { BR              X9 }
      }
    }
  }

  return result;
}

Swift::Int DeviceDriver<>.updateLinkRecoveryDisabled(_:interfaces:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  Swift::Int result = __chkstk_darwin(v4);
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)(&aBlock, *(void *)(a2 + 40));
    String.hash(into:)(&aBlock, 0x617461446E616ELL, 0xE700000000000000LL);
    Swift::Int result = Hasher._finalize()();
    unint64_t v6 = result & ~(-1LL << *(_BYTE *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
      __asm { BR              X9 }
    }

    if (*(void *)(a2 + 16))
    {
      Hasher.init(_seed:)(&aBlock, *(void *)(a2 + 40));
      String.hash(into:)(&aBlock, 0x7274736172666E69LL, 0xEE00657275746375LL);
      Swift::Int result = Hasher._finalize()();
      unint64_t v7 = result & ~(-1LL << *(_BYTE *)(a2 + 32));
      if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
        __asm { BR              X9 }
      }
    }
  }

  return result;
}

void sub_100049A78(char a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 136);
  if ((a1 & 1) != 0)
  {
    if (!v3)
    {
      id v4 = [(id)objc_opt_self(CWFActivity) activityWithType:12 reason:0];
      uint64_t v5 = *(void **)(a2 + 48);
      id v21 = 0LL;
      unsigned int v6 = [v5 beginActivity:v4 error:&v21];
      id v7 = v21;
      if (v6)
      {
        uint64_t v8 = *(void **)(a2 + 136);
        *(void *)(a2 + 136)  = v4;
        id v9 = v7;
      }

      else
      {
        id v11 = v21;
        uint64_t v12 = _convertNSErrorToError(_:)(v7);

        swift_willThrow(v13);
        swift_errorRetain(v12);
        uint64_t v14 = swift_errorRetain(v12);
        uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v18 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v17 = 138412290;
          swift_errorRetain(v12);
          uint64_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError(v12);
          id v21 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
          *id v18 = v19;
          swift_errorRelease(v12);
          swift_errorRelease(v12);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to update link recovery disabled: %@", v17, 0xCu);
          uint64_t v20 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v18, 1LL, v20);
          swift_slowDealloc(v18, -1LL, -1LL);
          swift_slowDealloc(v17, -1LL, -1LL);

          swift_errorRelease(v12);
        }

        else
        {

          swift_errorRelease(v12);
          swift_errorRelease(v12);
          swift_errorRelease(v12);
        }
      }
    }
  }

  else if (v3)
  {
    objc_msgSend(*(id *)(a2 + 48), "endActivity:");
    uint64_t v10 = *(void **)(a2 + 136);
    *(void *)(a2 + 136)  = 0LL;
  }

uint64_t sub_100049D18(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v4 + 40);
  os_log_type_t v16 = *(void **)(v15 + 56);
  uint64_t v17 = swift_allocObject(a2, 32LL, 7LL);
  *(_BYTE *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v17 + 24)  = v15;
  aBlock[4]  = a3;
  uint64_t v29 = v17;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = a4;
  id v18 = _Block_copy(aBlock);
  swift_retain_n(v15, 2LL);
  id v19 = v16;
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v22 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v18);
  _Block_release(v18);
  swift_release(v15);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  return swift_release(v29);
}

uint64_t DeviceDriver<>.update(isAirPlayingOverInfrastructure:)(char a1, uint64_t a2, uint64_t a3)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void aBlock[5];
  uint64_t v29;
  uint64_t v30;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  __chkstk_darwin(v9);
  id v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56);
  v12(&v30, a2, a3);
  uint64_t v13 = v30;
  uint64_t v14 = *(id *)(v30 + 56);
  swift_release(v13);
  v12(aBlock, a2, a3);
  uint64_t v15 = aBlock[0];
  os_log_type_t v16 = swift_allocObject(&unk_1003DD8F0, 32LL, 7LL);
  *(_BYTE *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v16 + 24)  = v15;
  aBlock[4]  = sub_100054668;
  uint64_t v29 = v16;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003DD908;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v27 = _swiftEmptyArrayStorage;
  id v19 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v21 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v17);
  _Block_release(v17);
  swift_release(v15);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
  return swift_release(v29);
}

void sub_10004A15C(char a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  if ((a1 & 1) != 0)
  {
    if (!v3)
    {
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [(id)objc_opt_self(CWFActivity) activityWithType:8 reason:v4];

      uint64_t v6 = *(void **)(a2 + 48);
      id v22 = 0LL;
      unsigned int v7 = [v6 beginActivity:v5 error:&v22];
      id v8 = v22;
      if (v7)
      {
        uint64_t v9 = *(void **)(a2 + 112);
        *(void *)(a2 + 112)  = v5;
        id v10 = v8;
      }

      else
      {
        id v12 = v22;
        uint64_t v13 = _convertNSErrorToError(_:)(v8);

        swift_willThrow(v14);
        swift_errorRetain(v13);
        uint64_t v15 = swift_errorRetain(v13);
        os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v19 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)id v18 = 138412290;
          swift_errorRetain(v13);
          uint64_t v20 = (void *)_swift_stdlib_bridgeErrorToNSError(v13);
          id v22 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
          void *v19 = v20;
          swift_errorRelease(v13);
          swift_errorRelease(v13);
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Failed to begin AirPlay over Infrastructure CWFActivity: %@",  v18,  0xCu);
          uint64_t v21 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v19, 1LL, v21);
          swift_slowDealloc(v19, -1LL, -1LL);
          swift_slowDealloc(v18, -1LL, -1LL);
          swift_errorRelease(v13);
        }

        else
        {
          swift_errorRelease(v13);

          swift_errorRelease(v13);
          swift_errorRelease(v13);
        }
      }
    }
  }

  else if (v3)
  {
    objc_msgSend(*(id *)(a2 + 48), "endActivity:");
    id v11 = *(void **)(a2 + 112);
    *(void *)(a2 + 112)  = 0LL;
  }

uint64_t sub_10004A410(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v4 + 40);
  os_log_type_t v16 = *(void **)(v15 + 56);
  uint64_t v17 = swift_allocObject(a2, 25LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(_BYTE *)(v17 + 24)  = a1;
  aBlock[4]  = a3;
  uint64_t v29 = v17;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = a4;
  id v18 = _Block_copy(aBlock);
  swift_retain_n(v15, 2LL);
  id v19 = v16;
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v22 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v18);
  _Block_release(v18);
  swift_release(v15);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  return swift_release(v29);
}

uint64_t DeviceDriver<>.updateSoftAPBand(_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A630(a1, a2, a3, a4, (uint64_t)&unk_1003DD940, (uint64_t)sub_100054674, (uint64_t)&unk_1003DD958);
}

uint64_t sub_10004A630(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void aBlock[5];
  uint64_t v36;
  uint64_t v37;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  unint64_t v28 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v33 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  unint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  os_log_type_t v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56);
  v16(&v37, a2, a3);
  uint64_t v17 = v37;
  id v18 = *(id *)(v37 + 56);
  swift_release(v17);
  v16(aBlock, a2, a3);
  id v19 = aBlock[0];
  uint64_t v20 = swift_allocObject(a5, 25LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  *(_BYTE *)(v20 + 24)  = v28;
  aBlock[4]  = v29;
  unint64_t v36 = v20;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = v30;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v25 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v21);
  _Block_release(v21);
  swift_release(v19);

  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v12, v10);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v15, v32);
  return swift_release(v36);
}

uint64_t sub_10004A870(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v3 + 128);
  if (v4)
  {
    swift_retain();
    uint64_t v5 = v4;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v9 = type metadata accessor for AppleDevice.GatewayMonitor(0LL);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    swift_retain();
    uint64_t v10 = swift_retain();
    uint64_t v6 = sub_100042454(v10, a1, a2);
    uint64_t v5 = *(void *)(v3 + 128);
  }

  *(void *)(v3 + 128)  = v6;
  swift_retain();
  swift_release(v3);
  return swift_release(v5);
}

uint64_t DeviceDriver<>.startGatewayMonitor()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v8)(uint64_t *__return_ptr);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v4 = v3;
  id v8 = *(void (**)(uint64_t *__return_ptr))(a2 + 56);
  v8(&v17);
  uint64_t v9 = v17;
  uint64_t v15 = v3;
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v8)(&v16, a1, a2);
  uint64_t v10 = v16;
  uint64_t v11 = *(void *)(v16 + 128);
  swift_retain();
  swift_release(v10);
  if (!v11)
  {
    uint64_t v12 = type metadata accessor for AppleDevice.GatewayMonitor(0LL);
    uint64_t v15 = v4;
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v11 = sub_100055808((uint64_t)&v15, a1, a3);
  }

  uint64_t v13 = *(void *)(v9 + 128);
  *(void *)(v9 + 128)  = v11;
  swift_release(v9);
  return swift_release(v13);
}

uint64_t DeviceDriver<>.stopGatewayMonitor()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v5);
  uint64_t v2 = v5;
  uint64_t v3 = *(void *)(v5 + 128);
  *(void *)(v5 + 128)  = 0LL;
  swift_release(v2);
  return swift_release(v3);
}

uint64_t DeviceDriver<>.resolveIPForPeer(macAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v14, a2, a3);
  uint64_t v9 = v14;
  uint64_t v10 = *(void *)(v14 + 128);
  if (v10)
  {
    swift_retain();
    swift_release(v9);
    uint64_t v13 = v5;
    sub_1000455DC(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)&v13, a2, a4);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v11 = v14;
  }

  return swift_release(v11);
}

uint64_t DeviceDriver<>.resetGatewayIPAddress()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v5);
  uint64_t v2 = v5;
  uint64_t v3 = *(void *)(v5 + 128);
  if (v3)
  {
    swift_retain();
    swift_release(v2);
    sub_100044CE8();
    uint64_t v2 = v3;
  }

  return swift_release(v2);
}

uint64_t sub_10004AB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v5 + 120);
  if (!v6)
  {
    uint64_t v11 = swift_retain();
    uint64_t result = nw_path_create_default_evaluator(v11);
    if (!result) {
      goto LABEL_14;
    }
    uint64_t v13 = result;
    if (qword_100404328 != -1) {
      swift_once(&qword_100404328, sub_10017437C);
    }
    uint64_t v14 = (void *)static OS_dispatch_queue.p2p;
    uint64_t v15 = swift_allocObject(a3, 32LL, 7LL);
    *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v15 + 24)  = a2;
    uint64_t v16 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v17 = swift_allocObject(v16, 24LL, 7LL);
    id v18 = v14;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v13, v18, a4, v15);
    uint64_t v19 = *(void *)(v5 + 120);
    *(void *)(v5 + 120)  = v17;
    swift_release(v5);
    swift_release(v19);
    uint64_t v6 = *(void *)(v5 + 120);
    if (!v6) {
      return 0LL;
    }
  }

  uint64_t v20 = *(void *)(v6 + 16);
  swift_retain();
  uint64_t result = nw_path_evaluator_copy_path(v20);
  if (result)
  {
    uint64_t v21 = (nw_path *)result;
    swift_release(v6);
    if (nw_path_get_status(v21) == nw_path_status_satisfied)
    {
      uint64_t v22 = (nw_interface *)nw_path_copy_interface(v21);
      if (v22)
      {
        uint64_t v23 = v22;
        name  = nw_interface_get_name(v22);
        uint64_t v25 = String.init(cString:)(name);
        swift_unknownObjectRelease(v21);
        swift_unknownObjectRelease(v23);
        return v25;
      }
    }

    swift_unknownObjectRelease(v21);
    return 0LL;
  }

  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t DeviceDriver<>.monitorSystemDefaultPath(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  nw_path *v22;
  nw_interface *v23;
  nw_interface *v24;
  const char *name;
  uint64_t v26;
  id v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 56);
  v8(&v26, a3, a4);
  uint64_t v9 = *(void *)(v26 + 120);
  swift_release(v26);
  if (!v9)
  {
    uint64_t v10 = ((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v8)(&v26, a3, a4);
    uint64_t v11 = v26;
    uint64_t result = nw_path_create_default_evaluator(v10);
    if (!result) {
      goto LABEL_15;
    }
    uint64_t v13 = result;
    if (qword_100404328 != -1) {
      swift_once(&qword_100404328, sub_10017437C);
    }
    uint64_t v14 = (void *)static OS_dispatch_queue.p2p;
    uint64_t v15 = swift_allocObject(&unk_1003DD990, 32LL, 7LL);
    *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v15 + 24)  = a2;
    uint64_t v16 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v17 = swift_allocObject(v16, 24LL, 7LL);
    id v18 = v14;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v13, v18, (uint64_t)sub_100055BF8, v15);
    uint64_t v19 = *(void *)(v11 + 120);
    *(void *)(v11 + 120)  = v17;
    swift_release(v11);
    swift_release(v19);
  }

  v8(&v26, a3, a4);
  uint64_t v20 = v26;
  uint64_t v21 = *(void *)(v26 + 120);
  if (!v21)
  {
    swift_release(v26);
    return v21;
  }

  swift_retain();
  swift_release(v20);
  uint64_t result = nw_path_evaluator_copy_path(*(void *)(v21 + 16));
  if (result)
  {
    uint64_t v22 = (nw_path *)result;
    swift_release(v21);
    if (nw_path_get_status(v22) == nw_path_status_satisfied
      && (uint64_t v23 = (nw_interface *)nw_path_copy_interface(v22)) != 0LL)
    {
      uint64_t v24 = v23;
      name  = nw_interface_get_name(v23);
      uint64_t v21 = String.init(cString:)(name);
      swift_unknownObjectRelease(v22);
      swift_unknownObjectRelease(v24);
    }

    else
    {
      swift_unknownObjectRelease(v22);
      return 0LL;
    }

    return v21;
  }

  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10004AED8(nw_path *a1, void (*a2)(void))
{
  if (nw_path_get_status(a1) != nw_path_status_satisfied) {
    return ((uint64_t (*)(void, void))a2)(0LL, 0LL);
  }
  uint64_t v4 = (nw_interface *)nw_path_copy_interface(a1);
  if (!v4) {
    return ((uint64_t (*)(void, void))a2)(0LL, 0LL);
  }
  uint64_t v5 = v4;
  name  = nw_interface_get_name(v4);
  uint64_t v7 = String.init(cString:)(name);
  uint64_t v9 = v8;
  a2(v7);
  swift_unknownObjectRelease(v5);
  return swift_bridgeObjectRelease(v9);
}

uint64_t DeviceDriver<>.stopMonitoringSystemDefaultPath()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v5);
  uint64_t v2 = v5;
  uint64_t v3 = *(void *)(v5 + 120);
  *(void *)(v5 + 120)  = 0LL;
  swift_release(v2);
  return swift_release(v3);
}

uint64_t sub_10004AFA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = v11[5];
  swift_beginAccess(v17 + 72, v49, 0LL, 0LL);
  sub_1000226B0(v17 + 72, (uint64_t)v47, &qword_100405280);
  uint64_t v18 = v48;
  sub_1000225EC((uint64_t)v47, &qword_100405280);
  if (v18)
  {
    unint64_t v19 = sub_1000033FC();
    uint64_t v20 = swift_allocError(&type metadata for WiFiError, v19, 0LL, 0LL);
    *(_OWORD *)uint64_t v21 = xmmword_10033A9A0;
    *(_BYTE *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    a6();
    return swift_errorRelease(v20);
  }

  else
  {
    uint64_t v40 = a1;
    uint64_t v41 = a3;
    uint64_t v42 = a4;
    uint64_t v23 = v11[2];
    uint64_t v24 = v11[3];
    uint64_t v25 = *(void *)(v17 + 24);
    uint64_t v26 = *(os_unfair_lock_s **)(v25 + 16);
    swift_retain();
    swift_bridgeObjectRetain(v24);
    os_unfair_lock_lock(v26);
    swift_beginAccess(v17 + 32, v47, 32LL, 0LL);
    uint64_t v27 = *(void *)(v17 + 32);
    if (*(void *)(v27 + 16))
    {
      swift_bridgeObjectRetain(v24);
      uint64_t v28 = sub_10001C008(v23, v24);
      uint64_t v29 = a7;
      uint64_t v30 = v17 + 72;
      unint64_t v31 = a6;
      if ((v32 & 1) != 0)
      {
        uint64_t v33 = *(void *)(*(void *)(v27 + 56) + 8 * v28);
        swift_endAccess(v47);
        swift_retain();
        swift_bridgeObjectRelease(v24);
        uint64_t v34 = *(void *)(v33
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        uint64_t v35 = *(void *)(v33
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        swift_bridgeObjectRetain(v35);
        swift_release(v33);
      }

      else
      {
        swift_endAccess(v47);
        swift_bridgeObjectRelease(v24);
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
      }
    }

    else
    {
      swift_endAccess(v47);
      uint64_t v34 = 0LL;
      uint64_t v35 = 0LL;
      uint64_t v29 = a7;
      uint64_t v30 = v17 + 72;
      unint64_t v31 = a6;
    }

    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 16));
    swift_release(v17);
    swift_bridgeObjectRelease(v24);
    if (v35) {
      uint64_t v36 = v34;
    }
    else {
      uint64_t v36 = 0LL;
    }
    if (!v35) {
      uint64_t v35 = 0xE000000000000000LL;
    }
    uint64_t v37 = (void *)swift_allocObject(a10, 48LL, 7LL);
    void v37[2] = v31;
    v37[3]  = v29;
    v37[4]  = a8;
    v37[5]  = a9;
    uint64_t v38 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0LL);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(a2);
    uint64_t v39 = sub_10003DE08(v40, a2, v41, v42, a5 & 1, v36, v35, a11, (uint64_t)v37);
    uint64_t v48 = v38;
    v47[0]  = v39;
    swift_beginAccess(v30, v46, 33LL, 0LL);
    swift_retain();
    swift_retain();
    sub_100057104((uint64_t)v47, v30, &qword_100405280);
    swift_endAccess(v46);
    swift_release(v17);
    sub_10003E420();
    return swift_release(v39);
  }

uint64_t DeviceDriver<>.startSharingInternet(from:to:useBridging:errorHandler:completionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void v51[3];
  uint64_t v52;
  void v53[3];
  uint64_t v54;
  char v55[32];
  uint64_t v13 = v12;
  uint64_t v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a11 + 56);
  v17(v51, a10, a11);
  uint64_t v18 = v51[0];
  unint64_t v19 = v51[0] + 72LL;
  swift_beginAccess(v51[0] + 72LL, v55, 0LL, 0LL);
  sub_1000226B0(v19, (uint64_t)v53, &qword_100405280);
  swift_release(v18);
  uint64_t v20 = v54;
  sub_1000225EC((uint64_t)v53, &qword_100405280);
  if (v20)
  {
    uint64_t v21 = sub_1000033FC();
    uint64_t v22 = swift_allocError(&type metadata for WiFiError, v21, 0LL, 0LL);
    *(_OWORD *)uint64_t v23 = xmmword_10033A9A0;
    *(_BYTE *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    a6();
    return swift_errorRelease(v22);
  }

  else
  {
    uint64_t v44 = a1;
    uint64_t v45 = a7;
    v53[0]  = v13;
    v17(v51, a10, a11);
    uint64_t v25 = v51[0];
    v53[0]  = v13;
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)(a12 + 16) + 40LL))(a10);
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)(v25 + 24);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 16));
    swift_beginAccess(v25 + 32, v53, 32LL, 0LL);
    uint64_t v30 = *(void *)(v25 + 32);
    if (*(void *)(v30 + 16))
    {
      swift_bridgeObjectRetain(v28);
      unint64_t v31 = sub_10001C008(v26, v28);
      char v32 = a11;
      if ((v33 & 1) != 0)
      {
        uint64_t v34 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
        swift_endAccess(v53);
        swift_retain();
        swift_bridgeObjectRelease(v28);
        uint64_t v35 = *(void *)(v34
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        uint64_t v36 = *(void *)(v34
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        swift_bridgeObjectRetain(v36);
        swift_release(v34);
      }

      else
      {
        swift_endAccess(v53);
        swift_bridgeObjectRelease(v28);
        uint64_t v35 = 0LL;
        uint64_t v36 = 0LL;
      }
    }

    else
    {
      swift_endAccess(v53);
      uint64_t v35 = 0LL;
      uint64_t v36 = 0LL;
      char v32 = a11;
    }

    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v29 + 16));
    swift_release(v25);
    swift_bridgeObjectRelease(v28);
    if (v36) {
      uint64_t v37 = v35;
    }
    else {
      uint64_t v37 = 0LL;
    }
    if (v36) {
      uint64_t v38 = v36;
    }
    else {
      uint64_t v38 = 0xE000000000000000LL;
    }
    uint64_t v39 = (void *)swift_allocObject(&unk_1003DD9B8, 48LL, 7LL);
    v39[2]  = a6;
    v39[3]  = v45;
    v39[4]  = a8;
    v39[5]  = a9;
    uint64_t v40 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0LL);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a2);
    uint64_t v41 = sub_10003DE08(v44, a2, a3, a4, a5 & 1, v37, v38, (uint64_t)sub_100055C24, (uint64_t)v39);
    v53[0]  = v13;
    v17(&v52, a10, v32);
    uint64_t v42 = v52;
    __int128 v54 = v40;
    v53[0]  = v41;
    uint64_t v43 = v52 + 72;
    swift_beginAccess(v52 + 72, v51, 33LL, 0LL);
    swift_retain();
    sub_100057104((uint64_t)v53, v43, &qword_100405280);
    swift_endAccess(v51);
    swift_release(v42);
    sub_10003E420();
    return swift_release(v41);
  }

void sub_10004B630( uint64_t a1, __int16 a2, char a3, void (*a4)(void), uint64_t a5, void (*a6)(void))
{
  if (a3)
  {
    if (a3 == 1)
    {
      unint64_t v7 = sub_1000033FC();
      uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
      *(_OWORD *)uint64_t v9 = xmmword_10033A930;
      *(_BYTE *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
      a4();
      swift_errorRelease(v8);
    }
  }

  else
  {
    a6(a2 & 0x101);
  }

uint64_t sub_10004B6C0(unint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40) + 72LL;
  swift_beginAccess(v3, v9, 0LL, 0LL);
  sub_1000226B0(v3, (uint64_t)v10, &qword_100405280);
  if (!v11) {
    return sub_1000225EC((uint64_t)v10, &qword_100405280);
  }
  uint64_t v4 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0LL);
  uint64_t result = swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6LL);
  if ((result & 1) != 0)
  {
    uint64_t v6 = v8;
    if (*(_BYTE *)(v8
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
      return swift_release(v6);
    if (*(_BYTE *)(v8
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode))
      uint64_t v7 = 2LL;
    else {
      uint64_t v7 = 6LL;
    }
    if ((a1 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }

    else
    {
      if (!HIDWORD(a1))
      {
        _NETRBClientSetHostCount( *(void *)(v8 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state),  v7,  a1);
        return swift_release(v6);
      }

      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    }

    __break(1u);
  }

  return result;
}

uint64_t DeviceDriver<>.updateInternetSharingRequesterCount(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v12, a2, a3);
  uint64_t v4 = v12;
  uint64_t v5 = v12 + 72;
  swift_beginAccess(v12 + 72, v11, 0LL, 0LL);
  sub_1000226B0(v5, (uint64_t)v13, &qword_100405280);
  swift_release(v4);
  if (!v14) {
    return sub_1000225EC((uint64_t)v13, &qword_100405280);
  }
  uint64_t v6 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0LL);
  uint64_t result = swift_dynamicCast(&v10, v13, (char *)&type metadata for Any + 8, v6, 6LL);
  if ((result & 1) != 0)
  {
    uint64_t v8 = v10;
    if (*(_BYTE *)(v10
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
      return swift_release(v8);
    if (*(_BYTE *)(v10
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode))
      uint64_t v9 = 2LL;
    else {
      uint64_t v9 = 6LL;
    }
    if ((a1 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }

    else
    {
      if (!HIDWORD(a1))
      {
        _NETRBClientSetHostCount( *(void *)(v10 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state),  v9,  a1);
        return swift_release(v8);
      }

      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10004B9CC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_beginAccess(v1 + 72, v6, 0LL, 0LL);
  sub_1000226B0(v1 + 72, (uint64_t)&v7, &qword_100405280);
  if (*((void *)&v8 + 1))
  {
    uint64_t v2 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0LL);
    if ((swift_dynamicCast(v5, &v7, (char *)&type metadata for Any + 8, v2, 6LL) & 1) != 0)
    {
      uint64_t v3 = v5[0];
      sub_10003E234();
      swift_release(v3);
    }
  }

  else
  {
    sub_1000225EC((uint64_t)&v7, &qword_100405280);
  }

  __int128 v7 = 0u;
  __int128 v8 = 0u;
  swift_beginAccess(v1 + 72, v5, 33LL, 0LL);
  swift_retain();
  sub_100057104((uint64_t)&v7, v1 + 72, &qword_100405280);
  swift_endAccess(v5);
  return swift_release(v1);
}

uint64_t DeviceDriver<>.stopSharingInternet()(uint64_t a1, uint64_t a2)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void v14[3];
  uint64_t v15;
  void v16[3];
  __int128 v17;
  __int128 v18;
  uint64_t v3 = v2;
  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  ((void (*)(void *__return_ptr))v6)(v14);
  __int128 v7 = v14[0];
  __int128 v8 = v14[0] + 72LL;
  swift_beginAccess(v14[0] + 72LL, v16, 0LL, 0LL);
  sub_1000226B0(v8, (uint64_t)&v17, &qword_100405280);
  swift_release(v7);
  if (*((void *)&v18 + 1))
  {
    uint64_t v9 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0LL);
    if ((swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, v9, 6LL) & 1) != 0)
    {
      uint64_t v10 = v15;
      sub_10003E234();
      swift_release(v10);
    }
  }

  else
  {
    sub_1000225EC((uint64_t)&v17, &qword_100405280);
  }

  *(void *)&uint64_t v17 = v3;
  v6(&v15, a1, a2);
  uint64_t v11 = v15;
  uint64_t v12 = v15 + 72;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  swift_beginAccess(v15 + 72, v14, 33LL, 0LL);
  sub_100057104((uint64_t)&v17, v12, &qword_100405280);
  swift_endAccess(v14);
  return swift_release(v11);
}

uint64_t sub_10004BEB0( uint64_t result, uint64_t a2, char a3, void (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    if (a3 == 1)
    {
      unint64_t v7 = sub_1000033FC();
      uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
      *(_OWORD *)uint64_t v9 = xmmword_10033A930;
      *(_BYTE *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
      a4();
      return swift_errorRelease(v8);
    }
  }

  else if ((result & 1) != 0)
  {
    return a6();
  }

  return result;
}

uint64_t sub_10004BF3C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_beginAccess(v1 + 72, v14, 0LL, 0LL);
  sub_1000226B0(v1 + 72, (uint64_t)&v15, &qword_100405280);
  if (*((void *)&v16 + 1))
  {
    uint64_t v2 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
    if ((swift_dynamicCast(v13, &v15, (char *)&type metadata for Any + 8, v2, 6LL) & 1) != 0)
    {
      uint64_t v3 = v13[0];
      uint64_t v4 = v13[0]
         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
      if (!*(_BYTE *)(v13[0]
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                     + 16))
      {
        sub_100040F74();
        unint64_t v5 = *(void *)(v3
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
        unint64_t v6 = *(void *)(v3
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                       + 8);
        swift_bridgeObjectRetain(v6);
        sub_10005468C(v5, v6, 0);
        uint64_t v8 = v7;
        swift_bridgeObjectRelease(v6);
        if (v8) {
          swift_bridgeObjectRelease(v8);
        }
        uint64_t v9 = *(void *)v4;
        uint64_t v10 = *(void *)(v4 + 8);
        *(_OWORD *)uint64_t v4 = xmmword_100337020;
        char v11 = *(_BYTE *)(v4 + 16);
        *(_BYTE *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
        sub_100056548(v9, v10, v11);
        sub_100056570(v9, v10, v11);
        sub_1000411FC(v9, v10, v11);
        sub_100056570(v9, v10, v11);
      }

      swift_release(v3);
    }
  }

  else
  {
    sub_1000225EC((uint64_t)&v15, &qword_100405280);
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  swift_beginAccess(v1 + 72, v13, 33LL, 0LL);
  swift_retain();
  sub_100057104((uint64_t)&v15, v1 + 72, &qword_100405280);
  swift_endAccess(v13);
  return swift_release(v1);
}

uint64_t DeviceDriver<>.stopRequestingInternet()(uint64_t a1, uint64_t a2)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void v22[3];
  uint64_t v23;
  void v24[3];
  __int128 v25;
  __int128 v26;
  uint64_t v3 = v2;
  unint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  ((void (*)(void *__return_ptr))v6)(v22);
  uint64_t v7 = v22[0];
  uint64_t v8 = v22[0] + 72LL;
  swift_beginAccess(v22[0] + 72LL, v24, 0LL, 0LL);
  sub_1000226B0(v8, (uint64_t)&v25, &qword_100405280);
  swift_release(v7);
  if (*((void *)&v26 + 1))
  {
    uint64_t v9 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
    if ((swift_dynamicCast(&v23, &v25, (char *)&type metadata for Any + 8, v9, 6LL) & 1) != 0)
    {
      uint64_t v10 = v23;
      char v11 = v23
          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
      if (!*(_BYTE *)(v23
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                     + 16))
      {
        sub_100040F74();
        uint64_t v12 = *(void *)(v10
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
        uint64_t v13 = *(void *)(v10
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                        + 8);
        swift_bridgeObjectRetain(v13);
        sub_10005468C(v12, v13, 0);
        __int128 v15 = v14;
        swift_bridgeObjectRelease(v13);
        if (v15) {
          swift_bridgeObjectRelease(v15);
        }
        __int128 v16 = *(void *)v11;
        uint64_t v17 = *(void *)(v11 + 8);
        *(_OWORD *)char v11 = xmmword_100337020;
        uint64_t v18 = *(_BYTE *)(v11 + 16);
        *(_BYTE *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
        sub_100056548(v16, v17, v18);
        sub_100056570(v16, v17, v18);
        sub_1000411FC(v16, v17, v18);
        sub_100056570(v16, v17, v18);
      }

      swift_release(v10);
    }
  }

  else
  {
    sub_1000225EC((uint64_t)&v25, &qword_100405280);
  }

  *(void *)&uint64_t v25 = v3;
  v6(&v23, a1, a2);
  unint64_t v19 = v23;
  uint64_t v20 = v23 + 72;
  uint64_t v25 = 0u;
  uint64_t v26 = 0u;
  swift_beginAccess(v23 + 72, v22, 33LL, 0LL);
  sub_100057104((uint64_t)&v25, v20, &qword_100405280);
  swift_endAccess(v22);
  return swift_release(v19);
}

void sub_10004C314()
{
  uint64_t v1 = *(void *)(v0 + 40) + 72LL;
  swift_beginAccess(v1, v8, 0LL, 0LL);
  sub_1000226B0(v1, (uint64_t)v9, &qword_100405280);
  if (v10)
  {
    uint64_t v2 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
    if ((swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, v2, 6LL) & 1) != 0)
    {
      uint64_t v3 = v7;
      if (qword_1004040B8 != -1) {
        swift_once(&qword_1004040B8, sub_1000411C4);
      }
      uint64_t v4 = (void *)qword_100405260;
      id v5 = [objc_allocWithZone(WiFiUsageLQMUserSample) init];
      NSString v6 = String._bridgeToObjectiveC()();
      [v4 updateLinkQuality:v5 forInterface:v6 supportsLinkRecommendations:0];
      swift_release(v3);
    }
  }

  else
  {
    sub_1000225EC((uint64_t)v9, &qword_100405280);
  }

void DeviceDriver<>.performLinkTest()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v11);
  uint64_t v2 = v11;
  uint64_t v3 = v11 + 72;
  swift_beginAccess(v11 + 72, v10, 0LL, 0LL);
  sub_1000226B0(v3, (uint64_t)v12, &qword_100405280);
  swift_release(v2);
  if (v13)
  {
    uint64_t v4 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
    if ((swift_dynamicCast(&v9, v12, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
    {
      uint64_t v5 = v9;
      if (qword_1004040B8 != -1) {
        swift_once(&qword_1004040B8, sub_1000411C4);
      }
      NSString v6 = (void *)qword_100405260;
      id v7 = [objc_allocWithZone(WiFiUsageLQMUserSample) init];
      NSString v8 = String._bridgeToObjectiveC()();
      [v6 updateLinkQuality:v7 forInterface:v8 supportsLinkRecommendations:0];
      swift_release(v5);
    }
  }

  else
  {
    sub_1000225EC((uint64_t)v12, &qword_100405280);
  }

uint64_t sub_10004C598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v98 = a3;
  uint64_t v99 = a4;
  uint64_t v97 = a2;
  sub_100055C7C(a1, (uint64_t)v114);
  uint64_t v7 = v115;
  uint64_t v8 = sub_100002274(&qword_100405398);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v102 = *(void *)(v11 - 8);
  uint64_t v103 = v11;
  __chkstk_darwin(v11);
  uint64_t v100 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v96 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v16 = *(void *)(v4 + 40);
  uint64_t v105 = v18;
  uint64_t v106 = (char *)&v90 - v17;
  unint64_t v19 = *(void (**)(void))(v18 + 16);
  v19();
  swift_retain();
  id v20 = sub_1000323A4();
  uint64_t v21 = v16;
  uint64_t v22 = v20;
  swift_release(v21);
  if (!v22)
  {
    unint64_t v62 = sub_1000033FC();
    uint64_t v63 = swift_allocError(&type metadata for WiFiError, v62, 0LL, 0LL);
    *(_OWORD *)uint64_t v64 = xmmword_10033A970;
    *(_BYTE *)(v64 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v63);
LABEL_14:
    uint64_t v58 = v105;
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v106, v13);
  }

  sub_100055C7C(a1, (uint64_t)&v116);
  uint64_t v104 = v5;
  uint64_t v101 = v117;
  uint64_t v95 = v116;
  if ((v120 & 1) == 0)
  {
    id v94 = v22;
    uint64_t v65 = swift_bridgeObjectRetain_n(v7, 2LL);
    uint64_t v66 = v106;
    os_log_type_t v67 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v68 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v70 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t v107 = v70;
      uint64_t v92 = v13;
      *(_DWORD *)uint64_t v69 = 136315138;
      swift_bridgeObjectRetain(v7);
      uint64_t v121 = sub_10000235C(v95, (unint64_t)v101, (uint64_t *)&v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);
      sub_100057080(a1, (void (*)(void, void, void, void, void))sub_100055CE4);
      sub_100057080(a1, (void (*)(void, void, void, void, void))sub_100055CE4);
      swift_bridgeObjectRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Would have displayed %s on HUD", v69, 0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v106, v92);
    }

    else
    {

      sub_100057080(a1, (void (*)(void, void, void, void, void))sub_100055CE4);
      sub_100057080(a1, (void (*)(void, void, void, void, void))sub_100055CE4);

      return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v66, v13);
    }
  }

  uint64_t v23 = v119;
  BOOL v90 = v19;
  uint64_t v91 = v118;
  uint64_t v107 = 0LL;
  unint64_t v108 = 0xE000000000000000LL;
  uint64_t v24 = v117;
  uint64_t v25 = v116;
  swift_bridgeObjectRetain(v117);
  uint64_t v93 = v23;
  swift_bridgeObjectRetain(v23);
  uint64_t v26 = v22;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(v108);
  uint64_t v107 = (void **)0xD000000000000017LL;
  unint64_t v108 = 0x8000000100362540LL;
  v27._countAndFlagsBits  = v25;
  v27._object  = v24;
  String.append(_:)(v27);
  unint64_t v28 = v108;
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  LOBYTE(v28)  = [v26 askToLaunchTapToRadarWithMessage:v29];

  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v101);
    unint64_t v72 = sub_1000033FC();
    uint64_t v73 = swift_allocError(&type metadata for WiFiError, v72, 0LL, 0LL);
    *(_OWORD *)uint64_t v74 = xmmword_10033A9B0;
    *(_BYTE *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v73);

    goto LABEL_14;
  }

  id v94 = v26;
  uint64_t v30 = sub_100002274(&qword_1004053A0);
  uint64_t inited = swift_initStackObject(v30, &v113);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10033A9C0;
  uint64_t v92 = v13;
  *(void *)(inited + 32)  = 0x656C746954LL;
  *(void *)(inited + 40)  = 0xE500000000000000LL;
  uint64_t v107 = 0LL;
  unint64_t v108 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(v108);
  uint64_t v107 = (void **)0xD000000000000014LL;
  unint64_t v108 = 0x8000000100362560LL;
  v32._countAndFlagsBits  = v95;
  v32._object  = v101;
  String.append(_:)(v32);
  unint64_t v33 = v108;
  *(void *)(inited + 48)  = v107;
  *(void *)(inited + 56)  = v33;
  *(void *)(inited + 64)  = 0x676169446F747541LL;
  *(void *)(inited + 72)  = 0xEF73636974736F6ELL;
  *(void *)(inited + 80)  = 0x656E6F6870LL;
  *(void *)(inited + 88)  = 0xE500000000000000LL;
  *(void *)(inited + 96)  = 0x7470697263736544LL;
  *(void *)(inited + 104)  = 0xEB000000006E6F69LL;
  uint64_t v34 = v93;
  *(void *)(inited + 112)  = v91;
  *(void *)(inited + 120)  = v34;
  *(void *)(inited + 128)  = 0x6E656E6F706D6F43LL;
  *(void *)(inited + 136)  = 0xEB00000000444974LL;
  *(void *)(inited + 144)  = 0x313433373535LL;
  *(void *)(inited + 152)  = 0xE600000000000000LL;
  strcpy((char *)(inited + 160), "ComponentName");
  *(_WORD *)(inited + 174)  = -4864;
  *(void *)(inited + 176)  = 0x5032502069466957LL;
  *(void *)(inited + 184)  = 0xE800000000000000LL;
  *(void *)(inited + 192)  = 0xD000000000000010LL;
  *(void *)(inited + 200)  = 0x8000000100362580LL;
  *(void *)(inited + 208)  = 5459817LL;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE300000000000000LL;
  strcpy((char *)(inited + 224), "Classification");
  *(_BYTE *)(inited + 239)  = -18;
  *(void *)(inited + 240)  = 0x2073756F69726553LL;
  *(void *)(inited + 248)  = 0xEB00000000677542LL;
  *(void *)(inited + 256)  = 0xD000000000000014LL;
  *(void *)(inited + 264)  = 0x80000001003625A0LL;
  *(void *)(inited + 272)  = 0xD000000000000023LL;
  *(void *)(inited + 280)  = 0x80000001003625C0LL;
  unint64_t v35 = sub_10000D3E8(inited);
  uint64_t v36 = v104;
  Swift::Int v37 = sub_10004D7E0(v35);
  swift_bridgeObjectRelease(v35);
  uint64_t v38 = sub_10004DB9C(0xD000000000000013LL, 0x80000001003625F0LL, v37);
  unint64_t v40 = v39;
  uint64_t v104 = v36;
  swift_bridgeObjectRelease(v37);
  uint64_t v41 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000LL) == 0) {
    uint64_t v41 = v38;
  }
  uint64_t v42 = 7LL;
  if (((v40 >> 60) & ((v38 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v42 = 11LL;
  }
  uint64_t v43 = String.index(before:)(v42 | (v41 << 16), v38, v40);
  uint64_t v44 = String.subscript.getter(15LL, v43, v38, v40);
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  swift_bridgeObjectRelease(v40);
  uint64_t v51 = static String._fromSubstring(_:)(v44, v46, v48, v50);
  uint64_t v53 = v52;
  uint64_t v54 = v50;
  uint64_t v13 = v92;
  swift_bridgeObjectRelease(v54);
  URL.init(string:)(v51, v53);
  swift_bridgeObjectRelease(v53);
  uint64_t v56 = v102;
  uint64_t v55 = v103;
  int v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 48))(v10, 1LL, v103);
  uint64_t v58 = v105;
  if (v57 == 1)
  {
    swift_bridgeObjectRelease(v101);
    sub_1000225EC((uint64_t)v10, &qword_100405398);
    unint64_t v59 = sub_1000033FC();
    uint64_t v60 = swift_allocError(&type metadata for WiFiError, v59, 0LL, 0LL);
    *(_OWORD *)uint64_t v61 = xmmword_10033A9D0;
    *(_BYTE *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v60);

    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v106, v13);
  }

  unint64_t v75 = v100;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v100, v10, v55);
  URL._bridgeToObjectiveC()(v76);
  unint64_t v78 = v77;
  unint64_t v79 = v96;
  ((void (*)(char *, char *, uint64_t))v90)(v96, v106, v13);
  uint64_t v80 = *(unsigned __int8 *)(v58 + 80);
  uint64_t v81 = (v80 + 16) & ~v80;
  unint64_t v82 = (v14 + v81 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v83 = v13;
  uint64_t v84 = swift_allocObject(v97, v82 + 16, v80 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v84 + v81, v79, v83);
  uint64_t v85 = (void *)(v84 + v82);
  BOOL v86 = v101;
  *uint64_t v85 = v95;
  v85[1]  = v86;
  uint64_t v111 = v98;
  uint64_t v112 = v84;
  uint64_t v107 = _NSConcreteStackBlock;
  unint64_t v108 = 1107296256LL;
  uint64_t v109 = sub_10004E1A4;
  uint64_t v110 = v99;
  uint64_t v87 = _Block_copy(&v107);
  swift_release(v112);
  id v88 = v94;
  id v89 = [v94 tapToRadarWithURL:v78 completionHandler:v87];
  _Block_release(v87);

  (*(void (**)(char *, uint64_t))(v102 + 8))(v75, v103);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v106, v83);
}

uint64_t DeviceDriver<>.report(softError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v16)(void ***__return_ptr, uint64_t, uint64_t);
  void **v17;
  void (*v18)(char *, char *, uint64_t);
  void **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  Swift::String v25;
  unint64_t v26;
  NSString v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t inited;
  Swift::String v32;
  unint64_t v33;
  unint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  os_log_s *v65;
  char *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint8_t *v69;
  void **v70;
  void **v71;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(void);
  NSURL *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  unint64_t v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  unint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, void *);
  void *v107;
  uint64_t (*v108)();
  uint64_t v109;
  uint64_t v110;
  char v111[8];
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v101 = (void *)a1;
  sub_100055C7C(a1, (uint64_t)v111);
  uint64_t v100 = v112;
  uint64_t v6 = sub_100002274(&qword_100405398);
  __chkstk_darwin(v6);
  uint64_t v96 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v98 = *(void *)(v8 - 8);
  uint64_t v99 = v8;
  __chkstk_darwin(v8);
  uint64_t v97 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v94 = v13;
  uint64_t v95 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v90 - v14;
  uint64_t v16 = *(void (**)(void ***__return_ptr, uint64_t, uint64_t))(a4 + 56);
  v16(&v104, a2, a4);
  uint64_t v17 = v104;
  uint64_t v102 = v11;
  uint64_t v103 = v10;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v18(v15, (char *)v104 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger, v10);
  swift_release(v17);
  v16(&v104, a2, a4);
  unint64_t v19 = v104;
  id v20 = (char *)sub_1000323A4();
  swift_release(v19);
  if (!v20)
  {
    uint64_t v60 = sub_1000033FC();
    uint64_t v61 = swift_allocError(&type metadata for WiFiError, v60, 0LL, 0LL);
    *(_OWORD *)unint64_t v62 = xmmword_10033A970;
    *(_BYTE *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v61);
LABEL_14:
    uint64_t v56 = v102;
    uint64_t v55 = v103;
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v15, v55);
  }

  uint64_t v21 = (uint64_t)v101;
  sub_100055C7C((uint64_t)v101, (uint64_t)&v113);
  uint64_t v22 = v113;
  uint64_t v23 = (void *)v114;
  if (v117 != 1)
  {
    uint64_t v92 = v114;
    sub_100057080(v21, (void (*)(void, void, void, void, void))sub_100055CB8);
    uint64_t v63 = v100;
    uint64_t v64 = swift_bridgeObjectRetain(v100);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    uint64_t v66 = v15;
    os_log_type_t v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v65, v67))
    {
      uint64_t v96 = v20;
      os_log_type_t v68 = swift_slowAlloc(12LL, -1LL);
      uint64_t v93 = v22;
      uint64_t v69 = (uint8_t *)v68;
      uint64_t v70 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t v91 = v66;
      uint64_t v71 = v70;
      uint64_t v104 = v70;
      *(_DWORD *)uint64_t v69 = 136315138;
      swift_bridgeObjectRetain(v63);
      uint64_t v118 = sub_10000235C(v93, v92, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119);
      sub_100057080(v21, (void (*)(void, void, void, void, void))sub_100055CE4);
      sub_100057080(v21, (void (*)(void, void, void, void, void))sub_100055CE4);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v65, v67, "Would have displayed %s on HUD", v69, 0xCu);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v91, v103);
    }

    else
    {

      sub_100057080(v21, (void (*)(void, void, void, void, void))sub_100055CE4);
      sub_100057080(v21, (void (*)(void, void, void, void, void))sub_100055CE4);

      return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v66, v103);
    }
  }

  uint64_t v100 = v18;
  uint64_t v24 = v116;
  uint64_t v101 = (void *)v115;
  uint64_t v104 = 0LL;
  uint64_t v105 = 0xE000000000000000LL;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v24);
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(v105);
  uint64_t v104 = (void **)0xD000000000000017LL;
  uint64_t v105 = 0x8000000100362540LL;
  v25._countAndFlagsBits  = v22;
  v25._object  = v23;
  String.append(_:)(v25);
  uint64_t v26 = v105;
  Swift::String v27 = String._bridgeToObjectiveC()();
  uint64_t v93 = v22;
  unint64_t v28 = v27;
  swift_bridgeObjectRelease(v26);
  LODWORD(v26)  = [v20 askToLaunchTapToRadarWithMessage:v28];

  if (!(_DWORD)v26)
  {
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v23);
    uint64_t v73 = sub_1000033FC();
    uint64_t v74 = swift_allocError(&type metadata for WiFiError, v73, 0LL, 0LL);
    *(_OWORD *)unint64_t v75 = xmmword_10033A9B0;
    *(_BYTE *)(v75 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v74);

    goto LABEL_14;
  }

  NSString v29 = sub_100002274(&qword_1004053A0);
  uint64_t v30 = v23;
  uint64_t inited = swift_initStackObject(v29, &v110);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10033A9C0;
  *(void *)(inited + 32)  = 0x656C746954LL;
  *(void *)(inited + 40)  = 0xE500000000000000LL;
  uint64_t v104 = 0LL;
  uint64_t v105 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(v105);
  uint64_t v104 = (void **)0xD000000000000014LL;
  uint64_t v105 = 0x8000000100362560LL;
  v32._countAndFlagsBits  = v93;
  uint64_t v92 = (unint64_t)v30;
  v32._object  = v30;
  String.append(_:)(v32);
  unint64_t v33 = v105;
  *(void *)(inited + 48)  = v104;
  *(void *)(inited + 56)  = v33;
  *(void *)(inited + 64)  = 0x676169446F747541LL;
  *(void *)(inited + 72)  = 0xEF73636974736F6ELL;
  *(void *)(inited + 80)  = 0x656E6F6870LL;
  *(void *)(inited + 88)  = 0xE500000000000000LL;
  *(void *)(inited + 96)  = 0x7470697263736544LL;
  *(void *)(inited + 104)  = 0xEB000000006E6F69LL;
  *(void *)(inited + 112)  = v101;
  *(void *)(inited + 120)  = v24;
  *(void *)(inited + 128)  = 0x6E656E6F706D6F43LL;
  *(void *)(inited + 136)  = 0xEB00000000444974LL;
  *(void *)(inited + 144)  = 0x313433373535LL;
  *(void *)(inited + 152)  = 0xE600000000000000LL;
  strcpy((char *)(inited + 160), "ComponentName");
  *(_WORD *)(inited + 174)  = -4864;
  *(void *)(inited + 176)  = 0x5032502069466957LL;
  *(void *)(inited + 184)  = 0xE800000000000000LL;
  *(void *)(inited + 192)  = 0xD000000000000010LL;
  *(void *)(inited + 200)  = 0x8000000100362580LL;
  *(void *)(inited + 208)  = 5459817LL;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE300000000000000LL;
  strcpy((char *)(inited + 224), "Classification");
  *(_BYTE *)(inited + 239)  = -18;
  *(void *)(inited + 240)  = 0x2073756F69726553LL;
  *(void *)(inited + 248)  = 0xEB00000000677542LL;
  *(void *)(inited + 256)  = 0xD000000000000014LL;
  *(void *)(inited + 264)  = 0x80000001003625A0LL;
  *(void *)(inited + 272)  = 0xD000000000000023LL;
  *(void *)(inited + 280)  = 0x80000001003625C0LL;
  uint64_t v34 = sub_10000D3E8(inited);
  unint64_t v35 = sub_10004D7E0(v34);
  swift_bridgeObjectRelease(v34);
  uint64_t v36 = sub_10004DB9C(0xD000000000000013LL, 0x80000001003625F0LL, v35);
  uint64_t v38 = v37;
  swift_bridgeObjectRelease(v35);
  unint64_t v39 = HIBYTE(v38) & 0xF;
  if ((v38 & 0x2000000000000000LL) == 0) {
    unint64_t v39 = v36;
  }
  unint64_t v40 = 7LL;
  if (((v38 >> 60) & ((v36 & 0x800000000000000LL) == 0)) != 0) {
    unint64_t v40 = 11LL;
  }
  uint64_t v41 = String.index(before:)(v40 | (v39 << 16), v36, v38);
  uint64_t v42 = String.subscript.getter(15LL, v41, v36, v38);
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  swift_bridgeObjectRelease(v38);
  uint64_t v49 = static String._fromSubstring(_:)(v42, v44, v46, v48);
  uint64_t v51 = v50;
  swift_bridgeObjectRelease(v48);
  uint64_t v52 = v96;
  URL.init(string:)(v49, v51);
  swift_bridgeObjectRelease(v51);
  uint64_t v53 = v98;
  uint64_t v54 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v98 + 48))(v52, 1LL, v99);
  uint64_t v56 = v102;
  uint64_t v55 = v103;
  if (v54 == 1)
  {
    swift_bridgeObjectRelease(v92);
    sub_1000225EC((uint64_t)v52, &qword_100405398);
    int v57 = sub_1000033FC();
    uint64_t v58 = swift_allocError(&type metadata for WiFiError, v57, 0LL, 0LL);
    *(_OWORD *)unint64_t v59 = xmmword_10033A9D0;
    *(_BYTE *)(v59 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    swift_willThrow(v58);

    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v15, v55);
  }

  uint64_t v76 = *(void (**)(void))(v53 + 32);
  uint64_t v91 = v15;
  v76();
  URL._bridgeToObjectiveC()(v77);
  uint64_t v101 = (void *)v78;
  unint64_t v79 = v95;
  v100(v95, v91, v55);
  uint64_t v80 = *(unsigned __int8 *)(v56 + 80);
  uint64_t v81 = (v80 + 16) & ~v80;
  uint64_t v96 = v20;
  unint64_t v82 = (v94 + v81 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v83 = swift_allocObject(&unk_1003DDA08, v82 + 16, v80 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v83 + v81, v79, v55);
  uint64_t v84 = (void *)(v83 + v82);
  uint64_t v85 = v92;
  *uint64_t v84 = v93;
  v84[1]  = v85;
  unint64_t v108 = sub_100055D24;
  uint64_t v109 = v83;
  uint64_t v104 = _NSConcreteStackBlock;
  uint64_t v105 = 1107296256LL;
  uint64_t v106 = sub_10004E1A4;
  uint64_t v107 = &unk_1003DDA20;
  BOOL v86 = _Block_copy(&v104);
  swift_release(v109);
  uint64_t v87 = v96;
  id v88 = v101;
  id v89 = [v96 tapToRadarWithURL:v101 completionHandler:v86];
  _Block_release(v86);

  (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v91, v55);
}

Swift::Int sub_10004D7E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CharacterSet(0LL);
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v44 = a1 + 64;
  uint64_t v42 = &_swiftEmptyDictionarySingleton;
  uint64_t v49 = &_swiftEmptyDictionarySingleton;
  uint64_t v6 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1LL << -(char)v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & v5;
  v41[1]  = -1LL << *(_BYTE *)(a1 + 32);
  int64_t v43 = (unint64_t)(63 - v6) >> 6;
  Swift::Int result = swift_bridgeObjectRetain(a1);
  int64_t v47 = 0LL;
  if (!v8) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v47 << 6);
  while (1)
  {
    uint64_t v12 = 16 * v11;
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v16 = (void *)(*(void *)(a1 + 56) + v12);
    uint64_t v17 = v16[1];
    v48[0]  = *v16;
    v48[1]  = v17;
    swift_bridgeObjectRetain(v14);
    uint64_t v18 = swift_bridgeObjectRetain(v17);
    static CharacterSet.urlQueryAllowed.getter(v18);
    unint64_t v19 = sub_10000B08C();
    uint64_t v20 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v4, &type metadata for String, v19);
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v46);
    if (v22)
    {
      unint64_t v27 = v42[2];
      if (v42[3] <= v27) {
        sub_1001381F4(v27 + 1, 1LL);
      }
      uint64_t v42 = v49;
      Hasher.init(_seed:)(v48, v49[5]);
      String.hash(into:)(v48, v15, v14);
      Swift::Int result = Hasher._finalize()();
      unint64_t v28 = (char *)(v42 + 8);
      uint64_t v29 = -1LL << *((_BYTE *)v42 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1LL << v30) & ~v42[(v30 >> 6) + 8]) == 0)
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v29) >> 6;
        while (++v31 != v34 || (v33 & 1) == 0)
        {
          BOOL v35 = v31 == v34;
          if (v31 == v34) {
            unint64_t v31 = 0LL;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)&v28[8 * v31];
          if (v36 != -1)
          {
            unint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
            goto LABEL_36;
          }
        }

        goto LABEL_40;
      }

      unint64_t v32 = __clz(__rbit64((-1LL << v30) & ~*(void *)&v28[8 * (v30 >> 6)])) | v30 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_36:
      *(void *)&v28[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v32;
      Swift::Int v37 = v42;
      uint64_t v38 = 16 * v32;
      unint64_t v39 = (void *)(v42[6] + v38);
      *unint64_t v39 = v15;
      v39[1]  = v14;
      unint64_t v40 = (uint64_t *)(v37[7] + v38);
      *unint64_t v40 = v20;
      v40[1]  = v22;
      ++v37[2];
      Swift::Int result = swift_bridgeObjectRelease(v17);
      if (v8) {
        goto LABEL_5;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v17);
      Swift::Int result = swift_bridgeObjectRelease(v14);
      if (v8) {
        goto LABEL_5;
      }
    }

uint64_t sub_10004DB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v28 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v10 = 0LL;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }

    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v24 >= v28) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v27 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v28) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v27 + 8 * v10);
      if (!v25)
      {
        int64_t v10 = v24 + 2;
        if (v24 + 2 >= v28) {
          goto LABEL_23;
        }
        unint64_t v25 = *(void *)(v27 + 8 * v10);
        if (!v25)
        {
          int64_t v10 = v24 + 3;
          if (v24 + 3 >= v28) {
            goto LABEL_23;
          }
          unint64_t v25 = *(void *)(v27 + 8 * v10);
          if (!v25) {
            break;
          }
        }
      }
    }

void sub_10004DE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    uint64_t v8 = swift_errorRetain(a2);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      unint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v13;
      *(_DWORD *)uint64_t v11 = 136315394;
      swift_bridgeObjectRetain(a5);
      uint64_t v21 = sub_10000235C(a4, a5, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a5, 3LL);
      *(_WORD *)(v11 + 12)  = 2112;
      swift_errorRetain(a2);
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v21 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *unint64_t v12 = v14;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Failed to create tap to radar %s because %@",  (uint8_t *)v11,  0x16u);
      uint64_t v15 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v12, 1LL, v15);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_errorRelease(a2);
    }

    else
    {
      swift_errorRelease(a2);
      swift_bridgeObjectRelease_n(a5, 2LL);

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

  else
  {
    uint64_t v16 = swift_bridgeObjectRetain_n(a5, 2LL);
    oslog  = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain(a5);
      uint64_t v21 = sub_10000235C(a4, a5, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a5, 3LL);
      _os_log_impl((void *)&_mh_execute_header, oslog, v17, "Created tap to radar: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a5, 2LL);
    }
  }

uint64_t sub_10004E1A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }
  else {
    uint64_t v6 = 0LL;
  }
  swift_retain(v4);
  id v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t AppleDevice.EventSource.init(driver:eventHandler:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 56))(v25, a4, a5);
  uint64_t v14 = v25[0];
  swift_unknownObjectUnownedInit(a8, v25[0]);
  swift_unknownObjectRelease(v14);
  uint64_t v21 = a6;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
  uint64_t v17 = v16;
  *(void *)(a8 + 8)  = v15;
  *(void *)(a8 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  uint64_t Strong = swift_unknownObjectUnownedLoadStrong(a8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 40);
  swift_getAssociatedTypeWitness(0LL, a5, a4, &protocol requirements base descriptor for DeviceDriver);
  swift_bridgeObjectRetain(v17);
  v18(v15, v17, a2);
  swift_release(a3);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a1, a4);
  if (!v24) {
    return swift_unknownObjectRelease(Strong);
  }
  swift_unknownObjectRelease(Strong);
  v25[0]  = a4;
  v25[1]  = a5;
  void v25[2] = v21;
  v25[3]  = a7;
  uint64_t v19 = type metadata accessor for AppleDevice.EventSource(0LL, (uint64_t)v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a8, v19);
}

Swift::Void __swiftcall AppleDevice.EventSource.stop()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(v0 - 1);
  (*(void (**)(_BYTE *))(v3 + 16))(v10);
  uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v10);
  (*(void (**)(_BYTE *, void *))(v3 + 8))(v10, v2);
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v2[5];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v2[3],  v2[2],  &protocol requirements base descriptor for DeviceDriver,  &associated type descriptor for DeviceDriver.Device);
  v8(v5, v6, AssociatedTypeWitness, v7);
  swift_unknownObjectRelease(Strong);
}

uint64_t sub_10004E498@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  return AppleDevice.EventSource.init(driver:eventHandler:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t sub_10004E4BC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AppleDevice.EventSource<A>, a1);
  return Device.customMirror.getter(a1, WitnessTable);
}

uint64_t sub_10004E500(char a1)
{
  return sub_10004A410(a1, (uint64_t)&unk_1003DE340, (uint64_t)sub_100054628, (uint64_t)&unk_1003DE358);
}

uint64_t sub_10004E538()
{
  return sub_100048BD0((uint64_t)sub_10005464C, (uint64_t)&unk_1003DE308);
}

uint64_t sub_10004E568()
{
  return sub_100048BD0((uint64_t)sub_100054654, (uint64_t)&unk_1003DE2E0);
}

Swift::Int sub_10004E598(uint64_t a1, uint64_t a2)
{
  return sub_100049030(a1, a2);
}

BOOL sub_10004E5D0()
{
  return sub_100047EFC();
}

uint64_t sub_10004E5F8(char a1)
{
  return sub_100049D18(a1, (uint64_t)&unk_1003DE250, (uint64_t)sub_100058D1C, (uint64_t)&unk_1003DE268);
}

uint64_t sub_10004E630(char a1)
{
  return sub_10004A410(a1, (uint64_t)&unk_1003DE200, (uint64_t)sub_100054674, (uint64_t)&unk_1003DE218);
}

uint64_t sub_10004E668(uint64_t a1)
{
  return sub_10004C598(a1, (uint64_t)&unk_1003DE1B0, (uint64_t)sub_100055D24, (uint64_t)&unk_1003DE1C8);
}

uint64_t sub_10004E6A4(char a1)
{
  return sub_100045D20(a1 & 1, (void *(*)(uint64_t *__return_ptr, void *))sub_100054614);
}

uint64_t sub_10004E6D4(uint64_t a1)
{
  return sub_1000462F0(a1 & 0xFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, void *))sub_100054614);
}

uint64_t sub_10004E704(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052B10(a1, a2, a3, (void *(*)(uint64_t *__return_ptr, void *))sub_100054614);
}

uint64_t sub_10004E724(void *a1)
{
  return sub_1000478EC( a1,  (void *(*)(uint64_t *__return_ptr, void *))sub_100054614,  (void *(*)(uint64_t *__return_ptr, void *))sub_100054614);
}

uint64_t sub_10004E754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052BD0(a1, a2, a3, 7u, (void *(*)(uint64_t *__return_ptr, void *))sub_100054614);
}

uint64_t sub_10004E774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052BD0(a1, a2, a3, 8u, (void *(*)(uint64_t *__return_ptr, void *))sub_100054614);
}

uint64_t sub_10004E794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100052C14(a1, a2, a3, a4, a5, a6, a7, 2u);
}

uint64_t sub_10004E7AC()
{
  return sub_100052CA4();
}

uint64_t sub_10004E7C4()
{
  return sub_10004A870((uint64_t)&unk_1003DE110, (uint64_t)sub_1000571AC);
}

uint64_t sub_10004E7F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  uint64_t v2 = *(void *)(v1 + 128);
  *(void *)(v1 + 128)  = 0LL;
  return swift_release(v2);
}

uint64_t sub_10004E810(uint64_t a1, uint64_t a2)
{
  return sub_10004AB3C(a1, a2, (uint64_t)&unk_1003DE0E8, (uint64_t)sub_100058EE8);
}

uint64_t sub_10004E840()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  uint64_t v2 = *(void *)(v1 + 120);
  *(void *)(v1 + 120)  = 0LL;
  return swift_release(v2);
}

uint64_t sub_10004E854( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10004AFA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1003DE0C0, (uint64_t)sub_100058D18);
}

uint64_t sub_10004E898(unint64_t a1)
{
  return sub_10004B6C0(a1);
}

uint64_t sub_10004E8B8()
{
  return sub_10004B9CC();
}

uint64_t sub_10004E8D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100056B8C(a1, a2, a3, a6, a7, a8, a9);
}

uint64_t sub_10004E908()
{
  return sub_10004BF3C();
}

void sub_10004E928()
{
}

uint64_t sub_10004E948(unint64_t a1, uint64_t a2)
{
  return sub_10004E990(a1, a2);
}

uint64_t sub_10004E990(unint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  v9[0]  = *(_OWORD *)a2;
  v9[1]  = v4;
  v9[2]  = *(_OWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v9, (uint64_t)&v11, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10004EA60(unint64_t a1, uint64_t a2)
{
  return sub_10004F530(a1, a2);
}

uint64_t sub_10004EAA8(unint64_t a1, int a2, uint64_t a3)
{
  return sub_10004F604(a1, a2, a3);
}

uint64_t sub_10004EAF0(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_10004F6C4(a1, a2, a3, a4);
}

uint64_t sub_10004EB38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2;
  __int16 v10 = a3;
  char v11 = BYTE2(a3);
  char v12 = BYTE3(a3);
  char v13 = BYTE4(a3);
  char v14 = BYTE5(a3);
  uint64_t v5 = v3[5];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v15, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10004EC24(unint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10004ECE0(unint64_t a1, uint64_t a2)
{
  int v8 = a2;
  char v9 = BYTE4(a2);
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v10, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10004EDA4(unint64_t a1, char a2)
{
  return sub_10004F000(a1, a2);
}

uint64_t sub_10004EDEC(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = a2;
  int v10 = a3;
  uint64_t v5 = v3[5];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v11, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10004EEFC(unint64_t a1, __int16 a2)
{
  return sub_10004EF44(a1, a2);
}

uint64_t sub_10004EF44(unint64_t a1, __int16 a2)
{
  __int16 v8 = a2;
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10004F000(unint64_t a1, char a2)
{
  char v8 = a2;
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10004F0BC(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int16 v10 = a2;
  int v11 = HIDWORD(a2);
  uint64_t v12 = a3;
  int v13 = a4;
  uint64_t v6 = v4[5];
  uint64_t v7 = v4[2];
  uint64_t v8 = v4[3];
  swift_retain();
  swift_bridgeObjectRetain(v8);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v10, (uint64_t)&v14, 0, v7, v8);
  swift_bridgeObjectRelease(v8);
  return swift_release(v6);
}

uint64_t sub_10004F1E0(unint64_t a1, const void *a2)
{
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)__dst, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10004F2B4(unint64_t a1, uint64_t a2, int a3)
{
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  char v14 = BYTE6(a2);
  int v15 = a3;
  uint64_t v5 = v3[5];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v16, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10004F3A4(unint64_t a1, uint64_t a2)
{
  v8[0]  = a2;
  int v9 = HIDWORD(a2);
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v8, (uint64_t)&v10, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10004F468(unint64_t a1, uint64_t a2, char a3)
{
  v9[0]  = a2;
  int v10 = HIDWORD(a2);
  char v11 = a3;
  uint64_t v5 = v3[5];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v9, (uint64_t)&v12, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10004F530(unint64_t a1, uint64_t a2)
{
  int v8 = a2;
  char v9 = BYTE4(a2);
  char v10 = BYTE5(a2);
  char v11 = BYTE6(a2);
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v12, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10004F604(unint64_t a1, int a2, uint64_t a3)
{
  int v9 = a2;
  uint64_t v10 = a3;
  uint64_t v5 = v3[5];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v11, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10004F6C4(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v10[0]  = a2;
  v10[1]  = a3;
  int v11 = a4;
  uint64_t v6 = v4[5];
  uint64_t v7 = v4[2];
  uint64_t v8 = v4[3];
  swift_retain();
  swift_bridgeObjectRetain(v8);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v10, (uint64_t)&v12, 0, v7, v8);
  swift_bridgeObjectRelease(v8);
  return swift_release(v6);
}

double sub_10004F790@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  if ((v4 & 1) == 0) {
    __asm { BR              X9 }
  }

  *(void *)(a2 + 32)  = 0LL;
  double result = 0.0;
  *(_OWORD *)a2  = 0u;
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  return result;
}

uint64_t sub_10004F9E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v22 = type metadata accessor for BinaryDecoder();
  Swift::String v23 = (void *)swift_allocObject(v22, 48LL, 7LL);
  v23[5]  = &_swiftEmptyDictionarySingleton;
  _OWORD v23[2] = v19;
  v23[3]  = v18;
  return ((uint64_t (*)(void *))((char *)&loc_10004FA88 + dword_10004FBFC[v20]))(v23 + 5);
}

double sub_10004FC0C@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  if ((v4 & 1) == 0) {
    __asm { BR              X9 }
  }

  double result = 0.0;
  *a2  = 0u;
  a2[1]  = 0u;
  return result;
}

uint64_t sub_10004FE80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = type metadata accessor for BinaryDecoder();
  int64_t v28 = (void *)swift_allocObject(v27, 48LL, 7LL);
  v28[5]  = &_swiftEmptyDictionarySingleton;
  v28[2]  = v24;
  v28[3]  = v23;
  return ((uint64_t (*)(void *))((char *)&loc_10004FF24 + dword_1000500B4[v25]))(v28 + 5);
}

double sub_1000500C4@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  if ((v4 & 1) == 0) {
    __asm { BR              X9 }
  }

  double result = 0.0;
  *a2  = 0u;
  a2[1]  = 0u;
  return result;
}

uint64_t sub_100050370( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  uint64_t v33 = type metadata accessor for BinaryDecoder();
  unint64_t v34 = (void *)swift_allocObject(v33, 48LL, 7LL);
  v34[5]  = &_swiftEmptyDictionarySingleton;
  v34[2]  = v30;
  v34[3]  = v29;
  return ((uint64_t (*)(void *))((char *)&loc_100050414 + dword_1000505CC[v31]))(v34 + 5);
}

uint64_t sub_1000505DC@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v5 & 1) == 0) {
    __asm { BR              X9 }
  }

  *a2  = 0LL;
  a2[1]  = 0LL;
  a2[2]  = 0LL;
  return result;
}

uint64_t sub_100050848( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v26 = type metadata accessor for BinaryDecoder();
  uint64_t v27 = (void *)swift_allocObject(v26, 48LL, 7LL);
  v27[5]  = &_swiftEmptyDictionarySingleton;
  v27[2]  = v23;
  v27[3]  = v22;
  return ((uint64_t (*)(void *))((char *)&loc_1000508EC + dword_100050A74[v24]))(v27 + 5);
}

double sub_100050A84@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  if ((v4 & 1) == 0) {
    __asm { BR              X9 }
  }

  *(void *)(a2 + 32)  = 0LL;
  double result = 0.0;
  *(_OWORD *)a2  = 0u;
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  return result;
}

uint64_t sub_100050CDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v22 = type metadata accessor for BinaryDecoder();
  uint64_t v23 = (void *)swift_allocObject(v22, 48LL, 7LL);
  v23[5]  = &_swiftEmptyDictionarySingleton;
  _OWORD v23[2] = v19;
  v23[3]  = v18;
  return ((uint64_t (*)(void *))((char *)&loc_100050D80 + dword_100050EF4[v20]))(v23 + 5);
}

uint64_t sub_100050F04@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  if ((v4 & 1) == 0) {
    __asm { BR              X9 }
  }

  sub_1000587B0((uint64_t)v6);
  return sub_1000586C0((uint64_t)v6, a2, &qword_100405E68);
}

uint64_t sub_10005113C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  uint64_t v30 = type metadata accessor for BinaryDecoder();
  int v31 = (void *)swift_allocObject(v30, 48LL, 7LL);
  v31[5]  = &_swiftEmptyDictionarySingleton;
  unint64_t v31[2] = v28;
  v31[3]  = v26;
  return ((uint64_t (*)(void *))((char *)&loc_1000511E8 + dword_100051334[v29]))(v31 + 5);
}

void sub_100051344(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_10005137C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a2) == 12LL)
  {
    sub_10020C14C(a1, a2);
    if (!a3) {
      return v4;
    }
    swift_errorRelease(a3);
  }

  return 0LL;
}

void sub_100051414(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000514E8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10005151C(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 28LL)
  {
    sub_10020B6D0(a1, a2);
    *(_BYTE *)(v2 + 28)  = 0;
  }

  else
  {
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + 8)  = 0LL;
    *(_DWORD *)(v2 + 24)  = 0;
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v2 + 28)  = 1;
  }

void sub_1000515AC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000515E0(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 20LL)
  {
    sub_10020B578(a1, a2);
    *(_BYTE *)(v2 + 20)  = 0;
  }

  else
  {
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + 8)  = 0LL;
    *(_DWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(_BYTE *)(v2 + 20)  = 1;
  }

void sub_10005166C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000516A0(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 20LL)
  {
    sub_10020B3C8(a1, a2);
    *(_BYTE *)(v2 + 20)  = 0;
  }

  else
  {
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + 8)  = 0LL;
    *(_DWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(_BYTE *)(v2 + 20)  = 1;
  }

void sub_10005172C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X13 }

unint64_t sub_100051764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (BYTE6(a2) == 10LL)
  {
    sub_10020B108(a1, a2);
    if (!a3) {
      return v4 & 0xFFFFFFFFFFFFLL | ((unint64_t)HIWORD(v4) << 48);
    }
    swift_errorRelease(a3);
  }

  return 0LL;
}

void sub_100051804(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000518D8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10005190C(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 72LL)
  {
    sub_10020AE2C(a1, a2);
    *(_BYTE *)(v2 + 72)  = 0;
  }

  else
  {
    *(void *)(v2 + 64)  = 0LL;
    *(_OWORD *)(v2 + 32)  = 0u;
    *(_OWORD *)(v2 + 48)  = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_BYTE *)(v2 + 72)  = 1;
  }

void sub_1000519A0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000519D4(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 28LL)
  {
    sub_10020ACCC(a1, a2);
    *(_BYTE *)(v2 + 28)  = 0;
  }

  else
  {
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + 8)  = 0LL;
    *(_DWORD *)(v2 + 24)  = 0;
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v2 + 28)  = 1;
  }

void sub_100051A64(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100051B38(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100051C0C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100051C40(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 208LL)
  {
    sub_10020A71C(a1, a2);
    return NANBitmap.Channel.operatingClass.getter(v2);
  }

  else
  {
    sub_100058838((uint64_t)v4);
    return sub_1000586C0((uint64_t)v4, v2, &qword_100405E40);
  }

void sub_100051CE8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100051D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a2) != 16LL) {
    return 0LL;
  }
  sub_10020A4B8(a1, a2);
  if (!a4) {
    return v5;
  }
  swift_errorRelease(a4);
  return 0LL;
}

void sub_100051DBC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100051DF0(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 68LL)
  {
    sub_10020A340(a1, a2);
    *(_BYTE *)(v2 + 68)  = 0;
  }

  else
  {
    *(_DWORD *)(v2 + 64)  = 0;
    *(_OWORD *)(v2 + 32)  = 0u;
    *(_OWORD *)(v2 + 48)  = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_BYTE *)(v2 + 68)  = 1;
  }

void sub_100051E84(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100051F58(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100051F8C(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 40LL)
  {
    sub_100209F4C(a1, a2);
    *(_BYTE *)(v2 + 40)  = 0;
  }

  else
  {
    *(void *)(v2 + 32)  = 0LL;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_BYTE *)(v2 + 40)  = 1;
  }

void sub_10005201C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100052050(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 184LL)
  {
    sub_100209DCC(a1, a2);
    return sub_1000588CC(v2);
  }

  else
  {
    sub_1000588A0((uint64_t)v4);
    return sub_1000586C0((uint64_t)v4, v2, &qword_100405E18);
  }

void sub_1000520F8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

unint64_t sub_10005212C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (BYTE6(a2) == 4LL)
  {
    unsigned int v4 = a3();
    unsigned __int8 v5 = 0;
  }

  else
  {
    unsigned int v4 = 0;
    unsigned __int8 v5 = 1;
  }

  return v4 | ((unint64_t)v5 << 32);
}

void sub_1000521BC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100052290(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000522C4(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 24LL)
  {
    sub_1002099E0(a1, a2);
    *(_BYTE *)(v2 + 24)  = 0;
  }

  else
  {
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + 8)  = 0LL;
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v2 + 24)  = 1;
  }

void sub_100052350(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100052384(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 104LL)
  {
    sub_100209848(a1, a2);
    *(_BYTE *)(v2 + 104)  = 0;
  }

  else
  {
    *(void *)(v2 + 96)  = 0LL;
    *(_OWORD *)(v2 + 64)  = 0u;
    *(_OWORD *)(v2 + 80)  = 0u;
    *(_OWORD *)(v2 + 32)  = 0u;
    *(_OWORD *)(v2 + 48)  = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_BYTE *)(v2 + 104)  = 1;
  }

void sub_10005241C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100052450(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (BYTE6(a2) == 8LL)
  {
    uint64_t v5 = a3();
    if (!a4) {
      return v5;
    }
    ((void (*)(uint64_t))swift_errorRelease)(a4);
  }

  return 0LL;
}

void sub_1000524D8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1000525AC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

uint64_t sub_1000525E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (BYTE6(a2) == 2LL)
  {
    unsigned __int16 v3 = a3();
    int v5 = 0;
    int v6 = v3;
  }

  else
  {
    int v6 = 0;
    int v5 = 1;
  }

  return v6 | (v5 << 16);
}

void sub_100052664(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_10005269C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (BYTE6(a2) == 12LL)
  {
    uint64_t v5 = a3();
    if (!a4) {
      return v5;
    }
    ((void (*)(uint64_t))swift_errorRelease)(a4);
  }

  return 0LL;
}

void sub_100052734(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

unint64_t sub_100052768(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 6LL)
  {
    sub_1002095CC(a1, a2);
    if (!v2)
    {
      unsigned __int8 v5 = 0;
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFLL;
      return v4 | ((unint64_t)v5 << 48);
    }

    swift_errorRelease(v2);
  }

  uint64_t v4 = 0LL;
  unsigned __int8 v5 = 1;
  return v4 | ((unint64_t)v5 << 48);
}

uint64_t sub_1000527F0(char a1)
{
  return sub_10004A410(a1, (uint64_t)&unk_1003DE048, (uint64_t)sub_100054628, (uint64_t)&unk_1003DE060);
}

uint64_t sub_100052828()
{
  return sub_100048BD0((uint64_t)sub_10005464C, (uint64_t)&unk_1003DE010);
}

uint64_t sub_100052858()
{
  return sub_100048BD0((uint64_t)sub_100054654, (uint64_t)&unk_1003DDFE8);
}

Swift::Int sub_100052888(uint64_t a1, uint64_t a2)
{
  return sub_100049030(a1, a2);
}

uint64_t sub_1000528C0()
{
  return sub_10004810C();
}

uint64_t sub_1000528E4(char a1)
{
  return sub_100049D18(a1, (uint64_t)&unk_1003DDF58, (uint64_t)sub_100058D1C, (uint64_t)&unk_1003DDF70);
}

uint64_t sub_10005291C(char a1)
{
  return sub_10004A410(a1, (uint64_t)&unk_1003DDF08, (uint64_t)sub_100054674, (uint64_t)&unk_1003DDF20);
}

uint64_t sub_100052954(uint64_t a1)
{
  return sub_10004C598(a1, (uint64_t)&unk_1003DDEB8, (uint64_t)sub_100055D24, (uint64_t)&unk_1003DDED0);
}

uint64_t sub_10005298C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 24LL);
  unsigned __int8 v4 = 2;
  swift_bridgeObjectRetain(v2);
  sub_100054D0C(v1, v2, 0x12u, &v4, (void (*)(unsigned __int8 *__return_ptr, ifaddrs **))sub_100045D08);
  swift_bridgeObjectRelease(v2);
  return v4;
}

unint64_t sub_1000529FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 24LL);
  unsigned __int16 v5 = 0;
  unsigned int v4 = 0;
  unsigned __int8 v6 = 1;
  swift_bridgeObjectRetain(v2);
  sub_100054EA8(v1, v2, 0x12u, (uint64_t)&v4, (void (*)(uint64_t *__return_ptr, ifaddrs **))sub_10003BB24);
  swift_bridgeObjectRelease(v2);
  return v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 48);
}

unint64_t sub_100052A8C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 24LL);
  unsigned int v4 = 0;
  unsigned __int8 v5 = 1;
  swift_bridgeObjectRetain(v2);
  sub_100054918(v1, v2, 2u, (uint64_t)&v4, (void (*)(uint64_t *__return_ptr, ifaddrs **))sub_100046C70);
  swift_bridgeObjectRelease(v2);
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t sub_100052B10( unint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *))
{
  return sub_100046CE4(a1 | ((HIDWORD(a1) & 1) << 32), a4);
}

void *sub_100052B40()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *(void *)(*v0 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  unsigned __int8 v5 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n(v2, 2LL);
  sub_100054ABC(v3, v2, 0x1Eu, (void (*)(void *__return_ptr, ifaddrs **))sub_100047094, 0LL, &v5);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_100052BD0( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *(*a5)(uint64_t *__return_ptr, void *))
{
  return sub_100047108(a1 & 0xFFFFFFFFFFFFLL, a4, a5);
}

uint64_t sub_100052BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100052C14(a1, a2, a3, a4, a5, a6, a7, 1u);
}

uint64_t sub_100052C14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v12 = *v8;
  uint64_t v13 = *(void *)(*v8 + 40);
  uint64_t v14 = *(void *)(v12 + 16);
  uint64_t v15 = *(void *)(v12 + 24);
  uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
  swift_retain();
  swift_bridgeObjectRetain(v15);
  sub_1000543AC(v16, a2, a3, v14, v15, a8);
  swift_bridgeObjectRelease(v15);
  return swift_release(v13);
}

uint64_t sub_100052CA4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *(void *)(v1 + 16);
  unsigned int v4 = *(void **)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits  = v3;
  v5._object  = v4;
  AppleDevice.neighborDiscoveryTableClear(on:)(v5);
  swift_bridgeObjectRelease(v4);
  return swift_release(v2);
}

uint64_t sub_100052D04()
{
  return sub_10004A870((uint64_t)&unk_1003DDE18, (uint64_t)sub_1000570C0);
}

uint64_t sub_100052D34(uint64_t result)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)(*(void *)v1 + 40LL) + 128LL);
  if (v3)
  {
    uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
    swift_retain();
    sub_100044E74(v4, v2);
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_100052D90()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)v0 + 40LL) + 128LL);
  if (v1)
  {
    swift_retain();
    sub_100044CE8();
    return swift_release(v1);
  }

  return result;
}

uint64_t sub_100052DD4(uint64_t a1, uint64_t a2)
{
  return sub_10004AB3C(a1, a2, (uint64_t)&unk_1003DDDC8, (uint64_t)sub_100058EE8);
}

uint64_t sub_100052E04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10004AFA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1003DDDA0, (uint64_t)sub_100058D18);
}

uint64_t sub_100052E48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100056DE8(a1, a2, a3, a6, a7, a8, a9);
}

void sub_100052E78(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_100052E88()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100052EAC(void *a1)
{
  return sub_100035608(a1, v1);
}

uint64_t sub_100052EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_100052EC4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100052ECC()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100052F40()
{
}

uint64_t sub_100052F70(uint64_t a1)
{
  return sub_10003CF68( a1,  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unsigned __int8 *)(v1 + 56),  *(void *)(v1 + 64),  *(void (**)(uint64_t))(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 16),  *(void *)(v1 + 24)) & 1;
}

void *sub_100052FAC(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    uint64_t result = a3(&v5);
    if (!v3) {
      return (void *)v5;
    }
  }

  else
  {
    uint64_t result = ((void *(*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&v5 + 4), 0LL, 0LL);
    if (!v3) {
      return (void *)HIDWORD(v5);
    }
  }

  return result;
}

void *sub_100052FFC@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, _DWORD *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2  = v5;
  }
  return result;
}

uint64_t sub_100053038(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL), result = 0LL, (v8 & 1) != 0))
  {
    sub_10002B5A4(*((_BYTE *)a1 + 16));
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = a1[4];
      uint64_t v12 = a2[4];
      uint64_t result = (v11 | v12) == 0;
      if (v11 && v12)
      {
        uint64_t v13 = a1[3];
        uint64_t v14 = a2[3];
        if (v13 == v14 && v11 == v12) {
          return 1LL;
        }
        else {
          return _stringCompareWithSmolCheck(_:_:expecting:)(v13, v11, v14, v12, 0LL);
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000530E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a1 != a2)
  {
    if (a2 >= a1)
    {
      if (a1 < a2) {
        __asm { BR              X8 }
      }

      __break(1u);
    }

    __break(1u);
    JUMPOUT(0x10005329CLL);
  }

  return 0LL;
}

void *sub_1000532B0(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_1000532DC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10002C048(a1, a2, a3, *(void (**)(char *))(v3 + 16));
}

uint64_t sub_1000532E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100053308()
{
  return sub_100039678(*(void *)(v0 + 16));
}

uint64_t sub_100053310( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  KeyPath  = swift_getKeyPath(&unk_10033A6A0);
  uint64_t v19 = a1;
  uint64_t v20 = KeyPath;
  uint64_t v21 = 16LL;
  sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_100054614, (uint64_t)v18, a6, a7);
  uint64_t result = swift_release(KeyPath);
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }

  else
  {
    unint64_t v16 = HIDWORD(a2);
    if (!HIDWORD(a2))
    {
      uint64_t v17 = 0LL;
      *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2;
      if ((a5 & 1) != 0 || !a3) {
        goto LABEL_7;
      }
      LODWORD(vswift_weakDestroy(v0 + 16) = a4 - a3;
      if (a4 - a3 < (uint64_t)&_mh_execute_header)
      {
        uint64_t v17 = a3;
LABEL_7:
        *(_DWORD *)(a1 + 24)  = v16;
        *(void *)(a1 + 32)  = v17;
        return result;
      }
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100053460()
{
  return sub_10003A5EC(v0);
}

uint64_t type metadata accessor for AppleDevice(uint64_t a1)
{
  return sub_100020E48(a1, qword_100405468, (uint64_t)&nominal type descriptor for AppleDevice);
}

unint64_t sub_10005347C(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = (__CFString *)String._bridgeToObjectiveC()();
  SCPreferencesRef v7 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v6, 0LL, 0LL);

  if (!v7)
  {
    unint64_t v32 = 0LL;
    _StringGuts.grow(_:)(70LL);
    v19._countAndFlagsBits  = 0xD000000000000044LL;
    v19._object  = (void *)0x8000000100362D20LL;
    String.append(_:)(v19);
    int v20 = SCError();
    uint64_t v21 = SCErrorString(v20);
    v22._countAndFlagsBits  = String.init(cString:)(v21);
    object  = v22._object;
    String.append(_:)(v22);
    int v24 = object;
LABEL_8:
    swift_bridgeObjectRelease(v24);
    return v32;
  }

  if (!SCPreferencesLock(v7, 1u))
  {
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v32 = 0xD00000000000002FLL;
    int v25 = SCError();
    unint64_t v26 = SCErrorString(v25);
    v27._countAndFlagsBits  = String.init(cString:)(v26);
    uint64_t v28 = v27._object;
    String.append(_:)(v27);

    int v24 = v28;
    goto LABEL_8;
  }

  unsigned __int8 v8 = sub_10003BBBC(v7, a1, a2, a3);
  if (!v10)
  {
    if ((v8 & 1) != 0)
    {
      if (SCPreferencesCommitChanges(v7))
      {
        if (SCPreferencesApplyChanges(v7)) {
          goto LABEL_13;
        }
        uint64_t v31 = 0LL;
        _StringGuts.grow(_:)(51LL);
        unint64_t v12 = 0xD000000000000031LL;
        uint64_t v30 = "Failed to apply SCPreferences changes with error ";
      }

      else
      {
        uint64_t v31 = 0LL;
        _StringGuts.grow(_:)(52LL);
        unint64_t v12 = 0xD000000000000032LL;
        uint64_t v30 = "Failed to commit SCPreferences changes with error ";
      }

      unint64_t v13 = (unint64_t)(v30 - 32) | 0x8000000000000000LL;
      goto LABEL_5;
    }

LABEL_13:
    SCPreferencesUnlock(v7);
    return 0LL;
  }

  uint64_t v11 = v9;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v31 = v11;
  unint64_t v12 = 0x7265206874697720LL;
  unint64_t v13 = 0xEC00000020726F72LL;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v12);
  int v14 = SCError();
  uint64_t v15 = SCErrorString(v14);
  v16._countAndFlagsBits  = String.init(cString:)(v15);
  uint64_t v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = v31;
  SCPreferencesUnlock(v7);

  return v18;
}

    SCPreferencesUnlock(v5);

    return 0LL;
  }

  uint64_t v9 = v7;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  int v29 = v9;
  uint64_t v10 = 0x7265206874697720LL;
  uint64_t v11 = 0xEC00000020726F72LL;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v10);
  unint64_t v12 = SCError();
  unint64_t v13 = SCErrorString(v12);
  v14._countAndFlagsBits  = String.init(cString:)(v13);
  uint64_t v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  Swift::String v16 = v29;
  SCPreferencesUnlock(v5);

  return v16;
}

    SCPreferencesUnlock(v7);

    return 0LL;
  }

  uint64_t v11 = v9;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v31 = v11;
  unint64_t v12 = 0x7265206874697720LL;
  unint64_t v13 = 0xEC00000020726F72LL;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v12);
  int v14 = SCError();
  uint64_t v15 = SCErrorString(v14);
  v16._countAndFlagsBits  = String.init(cString:)(v15);
  uint64_t v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = v31;
  SCPreferencesUnlock(v7);

  return v18;
}

  __break(1u);
  return result;
}

  if (qword_1004040E8 == -1)
  {
    if ((v6 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  swift_once(&qword_1004040E8, sub_10005DC88);
  if ((v6 & 0x80000) != 0)
  {
LABEL_15:
    unint64_t v12 = static WiFiDriverCapabilities.supportsAWDLSoloMode;
    swift_beginAccess(&v16, v17, 33LL, 0LL);
    sub_10008F9D0(v12, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v17);
  }

  if (qword_1004040E8 == -1)
  {
    if ((v17 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  swift_once(&qword_1004040E8, sub_10005DC88);
  if ((v17 & 0x80000) != 0)
  {
LABEL_15:
    uint64_t v23 = static WiFiDriverCapabilities.supportsAWDLSoloMode;
    swift_beginAccess(&v28, v29, 33LL, 0LL);
    sub_10008F9D0(v23, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v29);
  }

    uint64_t v10 = 1;
    Swift::String v16 = v4;
    goto LABEL_14;
  }

    Swift::String v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
    uint64_t v23 = (uint64_t *)(v22[6] + 16 * v12);
    *uint64_t v23 = v7;
    v23[1]  = v6;
    *(void *)(v22[7] + 8 * v12)  = v10;
    int v24 = v22[2];
    int v25 = __OFADD__(v24, 1LL);
    unint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v22[2]  = v26;
    Swift::String v27 = v45 - 1;
    if (v45 == 1) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    for (uint64_t i = (void **)(a1 + 9); ; i += 3)
    {
      uint64_t v6 = (uint64_t)*(i - 1);
      uint64_t v30 = *i;
      uint64_t v48 = (uint64_t)*(i - 2);
      int v29 = v48;
      uint64_t v49 = v6;
      uint64_t v31 = (void *)*a3;
      swift_bridgeObjectRetain(v6);
      uint64_t v10 = v30;
      unint64_t v32 = sub_10001C008(v48, v6);
      unint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      int v25 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v25) {
        break;
      }
      Swift::Int v37 = v33;
      if (v31[3] < v36)
      {
        sub_100139230(v36, 1LL);
        unint64_t v32 = sub_10001C008(v48, v6);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }

      if ((v37 & 1) != 0) {
        goto LABEL_10;
      }
      unint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1LL << v32;
      unint64_t v40 = (uint64_t *)(v39[6] + 16 * v32);
      *unint64_t v40 = v29;
      v40[1]  = v6;
      *(void *)(v39[7] + 8 * v32)  = v10;
      uint64_t v41 = v39[2];
      int v25 = __OFADD__(v41, 1LL);
      uint64_t v42 = v41 + 1;
      if (v25) {
        goto LABEL_24;
      }
      v39[2]  = v42;
      if (!--v27) {
        return swift_bridgeObjectRelease_n(a1, 2LL);
      }
    }

    ++v9;
  }

  while (v9 != v8);
  int v20 = 0LL;
  while (1)
  {
    uint64_t v21 = &v11[16 * v20];
    Swift::String v22 = v21[2];
    uint64_t v23 = *((void *)v21 + 1);
    int v24 = v21[1];
    if (v24) {
      break;
    }
    if (v10 == 4) {
      goto LABEL_38;
    }
LABEL_32:
    if (++v20 == v8) {
      goto LABEL_79;
    }
  }

  if (v24 != 1 || v10 != 16) {
    goto LABEL_32;
  }
LABEL_38:
  unint64_t v32 = (v22 - 2) >= 5;
  int v25 = v22 & 1;
  if (!v32 || (v1 & 1) == v25) {
    goto LABEL_32;
  }
  Swift::String v27 = *(void *)(v23 + 16);
  if (!v27) {
    goto LABEL_32;
  }
  uint64_t v28 = *(_DWORD *)v2;
  if (*(_DWORD *)(v23 + 32) == *(_DWORD *)v2) {
    goto LABEL_73;
  }
  if (v27 == 1) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(v23 + 36) == v28) {
    goto LABEL_73;
  }
  if (v27 == 2) {
    goto LABEL_32;
  }
  int v29 = 10LL;
  while (1)
  {
    uint64_t v30 = v29 - 7;
    if (__OFADD__(v29 - 8, 1LL)) {
      break;
    }
    if (*(_DWORD *)(v23 + 4 * v29) == v28) {
      goto LABEL_73;
    }
    ++v29;
    if (v30 == v27) {
      goto LABEL_32;
    }
  }

  while (2)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_once(&qword_1004043C0, sub_100187C0C);
LABEL_4:
    uint64_t v5 = *((void *)off_10040A1B8 + 2);
    if (!v5) {
      goto LABEL_100;
    }
    uint64_t v6 = (char *)off_10040A1B8 + 32;
    uint64_t v64 = off_10040A1B8;
    swift_bridgeObjectRetain_n(off_10040A1B8, 2LL);
    SCPreferencesRef v7 = 0LL;
    while (1)
    {
      uint64_t v31 = &v6[16 * v7];
      uint64_t v3 = v31[1];
      unint64_t v32 = *v31 >= 2u && (v3 - 2) >= 5u;
      if (v32)
      {
        uint64_t v33 = *((void *)v31 + 1);
        unint64_t v34 = *(void *)(v33 + 16);
        if (v34) {
          break;
        }
      }

    sub_1000225EC((uint64_t)v27, &qword_10040B730);
    return 0LL;
  }

  sub_1000226B0((uint64_t)v27, (uint64_t)v31, (uint64_t *)&unk_10040D470);
  if (v43(v42, 1LL, v44) == 1)
  {
    sub_1000225EC((uint64_t)v34, (uint64_t *)&unk_10040D470);
    sub_1000225EC((uint64_t)v37, (uint64_t *)&unk_10040D470);
    (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v31, v44);
    goto LABEL_13;
  }

  uint64_t v45 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v22 + 32))(v24, v42, v44);
  uint64_t v109 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v45);
  int64_t v47 = v46;
  uint64_t v48 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v109);
  uint64_t v50 = v49;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v109, v47);
  unint64_t v108 = v51;
  sub_1000208D8(v48, v50);
  sub_1000208D8(v109, v47);
  uint64_t v52 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
  v52(v24, v44);
  sub_1000225EC((uint64_t)v34, (uint64_t *)&unk_10040D470);
  sub_1000225EC((uint64_t)v37, (uint64_t *)&unk_10040D470);
  v52(v31, v44);
  sub_1000225EC((uint64_t)v27, (uint64_t *)&unk_10040D470);
  if ((v108 & 1) == 0) {
    return 0LL;
  }
LABEL_15:
  uint64_t v54 = v112;
  uint64_t v53 = v113;
  uint64_t v55 = v112[7];
  uint64_t v56 = v114;
  int v57 = *(void *)&v114[v55];
  uint64_t v58 = *(void *)&v114[v55 + 8];
  unint64_t v59 = (uint64_t *)&v113[v55];
  uint64_t v60 = *v59;
  uint64_t v61 = v59[1];
  if (v58 >> 60 == 15)
  {
    unint64_t v62 = (uint64_t)v128;
    if (v61 >> 60 != 15) {
      goto LABEL_29;
    }
  }

  else
  {
    unint64_t v62 = (uint64_t)v128;
    if (v61 >> 60 == 15) {
      goto LABEL_29;
    }
    sub_10002255C(v57, v58);
    sub_10002255C(v60, v61);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v57, v58);
    uint64_t v64 = v63;
    sub_100020B40(v60, v61);
    sub_100020B40(v57, v58);
    uint64_t v56 = v114;
    if ((v64 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v65 = v54[8];
  int v57 = *(void *)&v56[v65];
  uint64_t v58 = *(void *)&v56[v65 + 8];
  uint64_t v66 = (uint64_t *)&v53[v65];
  uint64_t v60 = *v66;
  uint64_t v61 = v66[1];
  if (v58 >> 60 == 15)
  {
    if (v61 >> 60 != 15) {
      goto LABEL_29;
    }
  }

  else
  {
    if (v61 >> 60 == 15) {
      goto LABEL_29;
    }
    sub_10002255C(v57, v58);
    sub_10002255C(v60, v61);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v57, v58);
    os_log_type_t v68 = v67;
    sub_100020B40(v60, v61);
    sub_100020B40(v57, v58);
    uint64_t v56 = v114;
    if ((v68 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v69 = v54[9];
  int v57 = *(void *)&v56[v69];
  uint64_t v58 = *(void *)&v56[v69 + 8];
  uint64_t v70 = (uint64_t *)&v53[v69];
  uint64_t v60 = *v70;
  uint64_t v61 = v70[1];
  if (v58 >> 60 == 15)
  {
    if (v61 >> 60 == 15) {
      goto LABEL_32;
    }
LABEL_29:
    sub_10002255C(v57, v58);
    sub_10002255C(v60, v61);
    sub_100020B40(v57, v58);
    sub_100020B40(v60, v61);
    return 0LL;
  }

  if (v61 >> 60 == 15) {
    goto LABEL_29;
  }
  sub_10002255C(v57, v58);
  sub_10002255C(v60, v61);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v57, v58);
  uint64_t v73 = v72;
  sub_100020B40(v60, v61);
  sub_100020B40(v57, v58);
  uint64_t v56 = v114;
  if ((v73 & 1) == 0) {
    return 0LL;
  }
LABEL_32:
  uint64_t v74 = v126;
  sub_1000226B0((uint64_t)&v56[v54[10]], (uint64_t)v126, qword_100410330);
  unint64_t v75 = v125;
  sub_1000226B0((uint64_t)&v53[v54[10]], (uint64_t)v125, qword_100410330);
  uint64_t v76 = v127;
  uint64_t v77 = (uint64_t)&v127[*(int *)(v122 + 48)];
  sub_1000226B0((uint64_t)v74, (uint64_t)v127, qword_100410330);
  sub_1000226B0((uint64_t)v75, v77, qword_100410330);
  unint64_t v78 = v123;
  unint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v123 + 48);
  uint64_t v80 = v111;
  if (v79((uint64_t)v76, 1LL, v111) == 1)
  {
    sub_1000225EC((uint64_t)v75, qword_100410330);
    sub_1000225EC((uint64_t)v74, qword_100410330);
    uint64_t v81 = v79(v77, 1LL, v80);
    unint64_t v82 = (uint64_t)v110;
    uint64_t v83 = v124;
    if (v81 == 1)
    {
      sub_1000225EC((uint64_t)v127, qword_100410330);
      goto LABEL_39;
    }

      sub_100226544();
      return;
    }

    uint64_t v23 = static os_log_type_t.default.getter();
    int v24 = v23;
    if (os_log_type_enabled(v11, v23))
    {
      int v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v38 = v24;
      Swift::Int v37 = v25;
      *(_DWORD *)int v25 = 138412290;
      BOOL v35 = v25 + 4;
      unint64_t v39 = v10;
      unint64_t v34 = v40;
      unint64_t v26 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v34);
      Swift::String v27 = v36;
      *uint64_t v36 = v10;

      uint64_t v28 = v37;
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v38, "%@ is being retried", v37, 0xCu);
      int v29 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v27, 1LL, v29);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v30 = *(void *)((char *)v10 + qword_10040C328);
    swift_unownedRetainStrong(v30);
    sub_1002E8C08();
    swift_release(v30);
    swift_unownedRetainStrong(v30);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( v6,  v30 + *(void *)(*(void *)v30 + 96LL),  AssociatedTypeWitness);
    swift_release(v30);
    uint64_t v31 = (uint64_t)v10 + qword_10040C330;
    swift_beginAccess((char *)v10 + qword_10040C330, v41, 0LL, 0LL);
    sub_10022B484(v31, (uint64_t)&v39);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(void **, uint64_t, uint64_t))(AssociatedConformanceWitness + 264))( &v39,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    sub_10022B4C0((uint64_t)&v39);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
    sub_10022B404((void *)(v7 + 1), 0LL);
  }

  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v11);
  Swift::Int v37 = *(void *)(*v42 + 48LL) + v18;
  unint64_t v39 = *(void *)v37;
  uint64_t v38 = *(void *)(v37 + 8);
  unint64_t v40 = *(_BYTE *)(v37 + 16);
  LOBYTE(v37)  = *(_BYTE *)(v37 + 17);
  *(void *)int64_t v43 = v39;
  *(void *)(v43 + 8)  = v38;
  *(_BYTE *)(v43 + swift_weakDestroy(v0 + 16) = v40;
  *(_BYTE *)(v43 + 17)  = v37;
  swift_bridgeObjectRetain(v38);
  return 0LL;
}

  int v14 = *v4;
  *(void *)(*v4 + 8 * (i >> 6) + 56) |= 1LL << i;
  uint64_t v15 = *(void *)(v14 + 48) + 6 * i;
  *(_WORD *)uint64_t v15 = v6;
  *(_BYTE *)(v15 + 2)  = BYTE2(v6);
  *(_BYTE *)(v15 + 3)  = BYTE3(v6);
  *(_BYTE *)(v15 + 4)  = BYTE4(v6);
  *(_BYTE *)(v15 + 5)  = BYTE5(v6);
  Swift::String v16 = *(void *)(v14 + 16);
  uint64_t v17 = __OFADD__(v16, 1LL);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v18;
    return result;
  }

  __break(1u);
LABEL_16:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
  __break(1u);
  return result;
}

unint64_t sub_100053718(void *a1, uint64_t a2)
{
  uint64_t v4 = (__CFString *)String._bridgeToObjectiveC()();
  SCPreferencesRef v5 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v4, 0LL, 0LL);

  if (!v5)
  {
    unint64_t v30 = 0LL;
    _StringGuts.grow(_:)(70LL);
    v17._countAndFlagsBits  = 0xD000000000000044LL;
    v17._object  = (void *)0x8000000100362D20LL;
    String.append(_:)(v17);
    int v18 = SCError();
    Swift::String v19 = SCErrorString(v18);
    v20._countAndFlagsBits  = String.init(cString:)(v19);
    object  = v20._object;
    String.append(_:)(v20);
    Swift::String v22 = object;
LABEL_8:
    swift_bridgeObjectRelease(v22);
    return v30;
  }

  if (!SCPreferencesLock(v5, 1u))
  {
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v30 = 0xD00000000000002FLL;
    int v23 = SCError();
    int v24 = SCErrorString(v23);
    v25._countAndFlagsBits  = String.init(cString:)(v24);
    unint64_t v26 = v25._object;
    String.append(_:)(v25);

    Swift::String v22 = v26;
    goto LABEL_8;
  }

  char v6 = sub_10003BFD0(v5, a1, a2);
  if (!v8)
  {
    if ((v6 & 1) != 0)
    {
      if (SCPreferencesCommitChanges(v5))
      {
        if (SCPreferencesApplyChanges(v5)) {
          goto LABEL_13;
        }
        uint64_t v29 = 0LL;
        _StringGuts.grow(_:)(51LL);
        unint64_t v10 = 0xD000000000000031LL;
        uint64_t v28 = "Failed to apply SCPreferences changes with error ";
      }

      else
      {
        uint64_t v29 = 0LL;
        _StringGuts.grow(_:)(52LL);
        unint64_t v10 = 0xD000000000000032LL;
        uint64_t v28 = "Failed to commit SCPreferences changes with error ";
      }

      unint64_t v11 = (unint64_t)(v28 - 32) | 0x8000000000000000LL;
      goto LABEL_5;
    }

uint64_t sub_10005399C(const __SCPreferences *a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = a2[24];
    uint64_t v5 = a2[25];
    char v6 = (void *)a2[26];
    uint64_t v7 = *(os_unfair_lock_s **)(v4 + 16);
    swift_retain(v4);
    swift_retain(v5);
    id v8 = v6;
    os_unfair_lock_lock(v7);
    swift_beginAccess(v5 + 16, v11, 1LL, 0LL);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v9);
    os_unfair_lock_unlock(v7);

    swift_release(v5);
    swift_release(v4);
  }

  return SCPreferencesUnlock(a1);
}

uint64_t sub_100053A60(uint64_t a1, int a2, intptr_t a3)
{
  intptr_t v83 = a3;
  LODWORD(v3)  = a2;
  uint64_t v82 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v77 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DriverEvent(0LL);
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v76 + 64);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v75 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t)&v65 - v11;
  __chkstk_darwin(v10);
  uint64_t v84 = (char *)&v65 - v13;
  Swift::String v14 = (_BYTE *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = (char *)*((void *)v14 - 1);
  uint64_t result = __chkstk_darwin(a1);
  int v18 = (uint64_t *)((char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (result)
  {
    uint64_t v19 = qword_100404328;
    uint64_t v66 = result;
    swift_retain();
    if (v19 != -1) {
LABEL_40:
    }
      swift_once(&qword_100404328, sub_10017437C);
    uint64_t v20 = static OS_dispatch_queue.p2p;
    *int v18 = static OS_dispatch_queue.p2p;
    (*((void (**)(void *, void, _BYTE *))v15 + 13))( v18,  enum case for DispatchPredicate.onQueue(_:),  v14);
    id v21 = (id)v20;
    LOBYTE(v20)  = _dispatchPreconditionTest(_:)(v18);
    (*((void (**)(void *, _BYTE *))v15 + 1))(v18, v14);
    if ((v20 & 1) == 0)
    {
      __break(1u);
      goto LABEL_42;
    }

    int v18 = (void *)sub_100333A24(v3);
    char v22 = 0;
    uint64_t v23 = v66;
    io_connect_t v74 = *(_DWORD *)(v66 + 172);
    switch((int)v66)
    {
      case 0:
        return swift_release(v23);
      case 1:
        uint64_t v24 = v66;
        IOAllowPowerChange(v74, v83);
        uint64_t v23 = v24;
        return swift_release(v23);
      case 2:
        goto LABEL_9;
      case 3:
        char v22 = 1;
LABEL_9:
        Swift::String v14 = v84;
        *uint64_t v84 = v22;
        swift_storeEnumTagMultiPayload(v14, v7, 3LL);
        uint64_t v25 = sub_100057FE8((uint64_t)v14, v12, type metadata accessor for DriverEvent);
        unint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.default.getter();
        BOOL v28 = os_log_type_enabled(v26, v27);
        int v69 = (int)v18;
        if (v28)
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          Swift::String v14 = (_BYTE *)swift_slowAlloc(32LL, -1LL);
          aBlock[0]  = (uint64_t)v14;
          *(_DWORD *)uint64_t v29 = 136315138;
          int v18 = v29 + 12;
          DriverEvent.description.getter();
          unint64_t v31 = v30;
          uint64_t v95 = sub_10000235C(v32, v30, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
          swift_bridgeObjectRelease(v31);
          sub_10005802C(v12, type metadata accessor for DriverEvent);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s", v29, 0xCu);
          swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v14, -1LL, -1LL);
          swift_slowDealloc(v29, -1LL, -1LL);
        }

        else
        {

          sub_10005802C(v12, type metadata accessor for DriverEvent);
        }

        uint64_t v33 = v66;
        os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v66 + 24) + 16LL));
        uint64_t v34 = swift_allocObject(&unk_1003DE548, 24LL, 7LL);
        uint64_t v73 = v34;
        *(void *)(v34 + swift_weakDestroy(v0 + 16) = 0LL;
        uint64_t v7 = v34 + 16;
        uint64_t v72 = swift_allocObject(&unk_1003DE548, 24LL, 7LL);
        *(void *)(v72 + swift_weakDestroy(v0 + 16) = 0LL;
        swift_beginAccess(v33 + 32, &v95, 0LL, 0LL);
        uint64_t v35 = *(void *)(v33 + 32);
        uint64_t v36 = *(void *)(v35 + 64);
        uint64_t v67 = v35 + 64;
        uint64_t v3 = 1LL << *(_BYTE *)(v35 + 32);
        uint64_t v37 = -1LL;
        if (v3 < 64) {
          uint64_t v37 = ~(-1LL << v3);
        }
        uint64_t v12 = v37 & v36;
        uint64_t v85 = v35;
        swift_bridgeObjectRetain(v35);
        uint64_t v70 = (void *)v7;
        swift_beginAccess(v7, v94, 1LL, 0LL);
        int64_t v38 = 0LL;
        int64_t v71 = (unint64_t)(v3 + 63) >> 6;
        uint64_t v68 = v8 + 7;
        uint64_t v39 = v73;
        break;
      default:
        uint64_t v23 = v66;
        return swift_release(v23);
    }

    while (1)
    {
      if (v12)
      {
        unint64_t v40 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v41 = v40 | (v38 << 6);
      }

      else
      {
        int64_t v42 = v38 + 1;
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_39;
        }
        if (v42 >= v71)
        {
LABEL_36:
          swift_release(v72);
          swift_release(v85);
          swift_release(v73);
          uint64_t v64 = v66;
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v66 + 24) + 16LL));
          swift_release(v64);
          return sub_10005802C((uint64_t)v84, type metadata accessor for DriverEvent);
        }

        unint64_t v43 = *(void *)(v67 + 8 * v42);
        ++v38;
        if (!v43)
        {
          int64_t v38 = v42 + 1;
          if (v42 + 1 >= v71) {
            goto LABEL_36;
          }
          unint64_t v43 = *(void *)(v67 + 8 * v38);
          if (!v43)
          {
            int64_t v38 = v42 + 2;
            if (v42 + 2 >= v71) {
              goto LABEL_36;
            }
            unint64_t v43 = *(void *)(v67 + 8 * v38);
            if (!v43)
            {
              int64_t v38 = v42 + 3;
              if (v42 + 3 >= v71) {
                goto LABEL_36;
              }
              unint64_t v43 = *(void *)(v67 + 8 * v38);
              if (!v43)
              {
                int64_t v44 = v42 + 4;
                if (v44 >= v71) {
                  goto LABEL_36;
                }
                unint64_t v43 = *(void *)(v67 + 8 * v44);
                if (!v43)
                {
                  while (1)
                  {
                    int64_t v38 = v44 + 1;
                    if (__OFADD__(v44, 1LL)) {
                      break;
                    }
                    if (v38 >= v71) {
                      goto LABEL_36;
                    }
                    unint64_t v43 = *(void *)(v67 + 8 * v38);
                    ++v44;
                    if (v43) {
                      goto LABEL_32;
                    }
                  }

LABEL_42:
                  __break(1u);
                  JUMPOUT(0x10005439CLL);
                }

                int64_t v38 = v44;
              }
            }
          }
        }

  __break(1u);
  return result;
}

    sub_1000EA818((void **)&v26, (const void **)&v25, &v24);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    sub_1000EA8BC((void **)&v28, (const void **)&v27, &v26);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

          id v87 = v10 >> 63;
LABEL_43:
          uint64_t v89 = v124;
          uint64_t v88 = v125;
LABEL_53:
          __int8 v137 = v87;
          uint64_t v96 = *(void *)(v88 + 8);
          uint64_t v97 = sub_100024970();
          uint64_t v98 = v126;
          dispatch thunk of BinaryInteger.init<A>(_:)(&v137, &type metadata for Int, v97, v89, v96);
          return dispatch thunk of OptionSet.init(rawValue:)(v98, v128, v129);
        }

        uint64_t v82 = v134;
        v115(v134, v52, a5);
        intptr_t v83 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
        v57(v82, a5);
        if (v10 != v83) {
          goto LABEL_3;
        }
        goto LABEL_41;
      }
    }

    else
    {
      v57(v65, a5);
    }

    v54(v133, (uint64_t)v43, a5);
    __int8 v137 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v66 = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
    uint64_t v67 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
    if ((v66 & 1) != 0)
    {
      if (v67 > 64)
      {
        uint64_t v68 = sub_100024970();
        uint64_t v10 = (uint64_t)v134;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v137, &type metadata for Int, v68, a5, v19);
        int v69 = v133;
        uint64_t v70 = dispatch thunk of static Comparable.< infix(_:_:)(v10, v133, a5, *(void *)(v19[4] + 8LL));
        v57((char *)v10, a5);
        int64_t v71 = (uint64_t)v69;
        goto LABEL_31;
      }
    }

    else if (v67 > 63)
    {
      os_log_type_t v136 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v10 = (uint64_t)v134;
      (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v134, v133, a5);
      io_connect_t v74 = sub_100024970();
      uint64_t v75 = v120;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v136, &type metadata for Int, v74, a5, v19);
      uint64_t v70 = dispatch thunk of static Comparable.< infix(_:_:)(v75, v10, a5, *(void *)(v19[4] + 8LL));
      v57(v75, a5);
      int64_t v71 = v10;
LABEL_31:
      v57((char *)v71, a5);
      unint64_t v52 = v135;
      if ((v70 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }

    uint64_t v73 = v133;
    dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
    v57(v73, a5);
    unint64_t v52 = v135;
    goto LABEL_32;
  }

  int64_t v90 = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
  uint64_t v91 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
  if ((v90 & 1) == 0)
  {
    if (v91 < 64)
    {
      uint64_t v104 = v122;
      uint64_t v61 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
      uint64_t v62 = v104;
      goto LABEL_60;
    }

    uint64_t v63 = v122;
LABEL_19:
    v57(v63, a5);
    goto LABEL_20;
  }

  if (v91 <= 64) {
    goto LABEL_62;
  }
  uint64_t v92 = sub_100024970();
  uint64_t v93 = v134;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v137, &type metadata for Int, v92, a5, v19);
  id v94 = v122;
  uint64_t v95 = dispatch thunk of static Comparable.< infix(_:_:)(v122, v93, a5, *(void *)(v19[4] + 8LL));
  v57(v93, a5);
  v57(v94, a5);
  unint64_t v54 = v115;
  if ((v95 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_61:
  while (1)
  {
    __break(1u);
LABEL_62:
    uint64_t v105 = v117;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v119,  a5,  v117,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v107 = v116;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v105,  AssociatedConformanceWitness);
    unint64_t v108 = v134;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v107, a5, v119);
    uint64_t v109 = v122;
    LODWORD(v119)  = dispatch thunk of static Comparable.< infix(_:_:)(v122, v108, a5, *(void *)(v19[4] + 8LL));
    v57(v108, a5);
    uint64_t v110 = v118;
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v118, v109, a5);
    if ((v119 & 1) != 0) {
      break;
    }
    uint64_t v111 = v137;
    uint64_t v112 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
    v57(v110, a5);
    uint64_t v113 = v112 < v111;
    unint64_t v54 = v115;
    if (!v113) {
      goto LABEL_20;
    }
  }

  uint64_t result = ((uint64_t (*)(char *, uint64_t))v57)(v110, a5);
  __break(1u);
  return result;
}

        *(v47 - 32)  = (uint64_t)sub_10005D56C;
        uint64_t v39 = v354;
        uint64_t v37 = v372;
        unint64_t v41 = v360;
LABEL_43:
        unint64_t v40 = v42 + 1;
        if (v40 == v353)
        {
          uint64_t v16 = v41;
          swift_bridgeObjectRelease(v39);
          uint64_t v25 = v357;
          unint64_t v26 = (uint64_t)v356;
          os_log_type_t v27 = v366;
          goto LABEL_255;
        }
      }
    }

    swift_bridgeObjectRelease(v39);
LABEL_255:
    uint64_t v35 = v338;
LABEL_256:
    ++v35;
    uint64_t v36 = v358;
  }

  while (v35 != v37);
  swift_bridgeObjectRelease(v371);
  uint64_t v16 = (uint64_t)v342;
  uint64_t v12 = v350;
  if (!*(void *)(v25 + 16) || (uint64_t v311 = sub_100327790(18), (v312 & 1) == 0))
  {
LABEL_290:
    v331  = v336;
    sub_100254F34(*v336, v336[1], v336[2], v336[3], v336[4]);
    sub_100021018(v349, 0LL);
    sub_100021018(v348, 0LL);
    sub_100021018((uint64_t)v347, 0LL);
    sub_100021018(v340, 0LL);
    sub_100021018(v341, 0LL);
    __int8 v332 = v358;
    *v331  = v370;
    v331[1]  = (uint64_t)v332;
    v333  = v339;
    v331[2]  = (uint64_t)v351;
    v331[3]  = (uint64_t)v333;
    v331[4]  = (uint64_t)v352;
    goto LABEL_287;
  }

  uint64_t v9 = *(unsigned __int8 **)(*(void *)(v25 + 56) + 8 * v311);
  unint64_t v313 = v9 + 64;
  v314  = 1LL << v9[32];
  unint64_t v315 = -1LL;
  if (v314 < 64) {
    unint64_t v315 = ~(-1LL << v314);
  }
  v316  = v315 & *((void *)v9 + 8);
  v317  = (unint64_t)(v314 + 63) >> 6;
  swift_bridgeObjectRetain_n(*(void *)(*(void *)(v25 + 56) + 8 * v311), 2LL);
  uint64_t v318 = 0LL;
  while (2)
  {
    if (v316)
    {
      v319  = __clz(__rbit64(v316));
      v316 &= v316 - 1;
      v320  = v319 | (v318 << 6);
LABEL_263:
      (*(void (**)(void))(*((void *)v9 + 7) + 16 * v320))();
      continue;
    }

    break;
  }

  v321  = v318 + 1;
  if (__OFADD__(v318, 1LL)) {
    goto LABEL_312;
  }
  if (v321 >= v317) {
    goto LABEL_289;
  }
  uint64_t v322 = *(void *)&v313[8 * v321];
  ++v318;
  if (v322) {
    goto LABEL_282;
  }
  uint64_t v318 = v321 + 1;
  if (v321 + 1 >= v317) {
    goto LABEL_289;
  }
  uint64_t v322 = *(void *)&v313[8 * v318];
  if (v322) {
    goto LABEL_282;
  }
  uint64_t v318 = v321 + 2;
  if (v321 + 2 >= v317) {
    goto LABEL_289;
  }
  uint64_t v322 = *(void *)&v313[8 * v318];
  if (v322) {
    goto LABEL_282;
  }
  uint64_t v318 = v321 + 3;
  if (v321 + 3 >= v317) {
    goto LABEL_289;
  }
  uint64_t v322 = *(void *)&v313[8 * v318];
  if (v322) {
    goto LABEL_282;
  }
  uint64_t v318 = v321 + 4;
  if (v321 + 4 >= v317) {
    goto LABEL_289;
  }
  uint64_t v322 = *(void *)&v313[8 * v318];
  if (v322)
  {
LABEL_282:
    v316  = (v322 - 1) & v322;
    v320  = __clz(__rbit64(v322)) + (v318 << 6);
    goto LABEL_263;
  }

  uint64x2_t v323 = v321 + 5;
  if (v323 >= v317) {
    goto LABEL_289;
  }
  uint64_t v322 = *(void *)&v313[8 * v323];
  if (v322)
  {
    uint64_t v318 = v323;
    goto LABEL_282;
  }

  while (1)
  {
    uint64_t v318 = v323 + 1;
    if (__OFADD__(v323, 1LL)) {
      break;
    }
    if (v318 >= v317) {
      goto LABEL_289;
    }
    uint64_t v322 = *(void *)&v313[8 * v318];
    ++v323;
    if (v322) {
      goto LABEL_282;
    }
  }

    __break(1u);
LABEL_43:
    sub_10032BF08();
    unint64_t v30 = v110;
LABEL_6:
    unint64_t v40 = *a2;
    *a2  = (uint64_t)v30;
    swift_bridgeObjectRelease(v40);
    unint64_t v41 = (void *)*a2;
    if ((v37 & 1) == 0)
    {
      int64_t v42 = *(int *)(v108 + 48);
      sub_100057FE8((uint64_t)v103, v22, type metadata accessor for NANAttribute.CustomDeviceInformation);
      *(_BYTE *)(v22 + v42)  = v104;
      sub_100244F60(v33, v31, v22, v41);
    }

    unint64_t v43 = v41[7];
    uint64_t v107 = *(void *)(v106 + 72);
    uint64_t v33 = v43 + v107 * v33 + *(int *)(v105 + 28);
    id v87 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    char v22 = *(int *)(v87 + 44);
    unint64_t v30 = *(void **)(v33 + v22);
    int64_t v44 = swift_isUniquelyReferenced_nonNull_native(v30);
    *(void *)(v33 + v22)  = v30;
    if ((v44 & 1) == 0) {
      goto LABEL_40;
    }
  }

  uint64_t v61 = *(void *)(v90 + *(void *)(*(void *)v90 + 280LL));
  uint64_t v62 = swift_unownedRetainStrong(v61);
  swift_unownedRetainStrong(v62);
  uint64_t v63 = v89;
  sub_1002EA528(v28, v89);
  swift_release(v61);
  sub_1000226B0(v63 + *(int *)(v98 + 80), (uint64_t)v20, qword_100410330);
  sub_10005802C(v63, type metadata accessor for NANPeer);
  uint64_t v64 = type metadata accessor for UUID(0LL);
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48))(v20, 1LL, v64);
  if ((_DWORD)v66 == 1)
  {
    UUID.init()(v66);
    sub_1000225EC((uint64_t)v20, qword_100410330);
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v58, v20, v64);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v58, 0LL, 1LL, v64);
  uint64_t v67 = v91;
  sub_1002EA528(v28, v91);
  uint64_t v68 = v98;
  sub_10029FF60(v58, v67 + *(int *)(v98 + 80));
  sub_1002EA6EC(v67, v28);
  swift_release(v61);
  swift_unownedRetainStrong(v61);
  uint64_t v37 = v92;
  sub_1002EA528(v28, v92);
  swift_release(v61);
  sub_1000226B0(v37 + *(int *)(v68 + 80), v97, qword_100410330);
  sub_10005802C(v37, type metadata accessor for NANPeer);
  swift_beginAccess(a2, v109, 33LL, 0LL);
  int v69 = swift_isUniquelyReferenced_nonNull_native(*a2);
  uint64_t v110 = (void *)*a2;
  uint64_t v70 = (uint64_t)v110;
  *a2  = 0x8000000000000000LL;
  uint64_t v33 = sub_10001C15C(v28);
  uint64_t v72 = *(void *)(v70 + 16);
  uint64_t v73 = (v71 & 1) == 0;
  io_connect_t v74 = v72 + v73;
  if (__OFADD__(v72, v73)) {
    goto LABEL_46;
  }
  LOBYTE(v37)  = v71;
  if (*(void *)(v70 + 24) >= v74)
  {
    if ((v69 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_29;
  }

  sub_100242E54(v74, v69);
  uint64_t v75 = sub_10001C15C(v28);
  if ((v37 & 1) == (v76 & 1))
  {
    uint64_t v33 = v75;
    goto LABEL_29;
  }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

LABEL_32:
        uint64_t v12 = (v43 - 1) & v43;
        unint64_t v41 = __clz(__rbit64(v43)) + (v38 << 6);
      }

      uint64_t v45 = *(void *)(*(void *)(v85 + 56) + 8 * v41);
      uint64_t v8 = *(void *)(v45
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      if (v8)
      {
        if (__OFADD__(*v70, 1LL))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v46 = *(void *)(v45
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                        + 8);
        *(void *)(v39 + swift_weakDestroy(v0 + 16) = *v70 + 1LL;
        int64_t v47 = *(void **)(v45
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
        uint64_t v86 = v45;
        id v87 = v47;
        uint64_t v89 = v12;
        uint64_t v48 = v75;
        int64_t v90 = v38;
        sub_100057FE8((uint64_t)v84, v75, type metadata accessor for DriverEvent);
        uint64_t v49 = *(unsigned __int8 *)(v76 + 80);
        uint64_t v50 = (v49 + 32) & ~v49;
        unint64_t v51 = (v68 + v50) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v53 = (v52 + 11) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v55 = swift_allocObject(&unk_1003DE570, v54 + 8, v49 | 7);
        *(void *)(v55 + swift_weakDestroy(v0 + 16) = v8;
        *(void *)(v55 + 24)  = v46;
        sub_100022628(v48, v55 + v50, type metadata accessor for DriverEvent);
        *(void *)(v55 + v51)  = v72;
        *(void *)(v55 + v52)  = v39;
        uint64_t v56 = (_DWORD *)(v55 + v53);
        io_connect_t v57 = v74;
        *uint64_t v56 = v69;
        v56[1]  = v57;
        *(void *)(v55 + v54)  = v83;
        aBlock[4]  = (uint64_t)sub_100057DE0;
        uint64_t v93 = v55;
        aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
        aBlock[1]  = 1107296256LL;
        aBlock[2]  = (uint64_t)sub_1000021F0;
        aBlock[3]  = (uint64_t)&unk_1003DE588;
        Swift::String v14 = _Block_copy(aBlock);
        uint64_t v88 = v46;
        sub_10002254C(v8, v46);
        sub_10002254C(v8, v46);
        uint64_t v58 = v86;
        swift_retain();
        int v18 = v87;
        swift_retain();
        uint64_t v59 = swift_retain();
        uint64_t v60 = v77;
        static DispatchQoS.unspecified.getter(v59);
        uint64_t v91 = _swiftEmptyArrayStorage;
        uint64_t v61 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v3 = sub_100002274((uint64_t *)&unk_1004052A0);
        uint64_t v62 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v15 = v80;
        uint64_t v7 = v82;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v91, v3, v62, v82, v61);
        LODWORD(v3)  = (_DWORD)v18;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v60, v15, v14);
        _Block_release(v14);
        swift_release(v58);

        sub_100021018(v8, v88);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v15, v7);
        uint64_t v63 = v60;
        uint64_t v12 = v89;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v63, v79);
        swift_release(v93);
        int64_t v38 = v90;
      }
    }
  }

  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(*(void *)(v2 + v17[21]));
  Hasher._combine(_:)(*(void *)(v2 + v17[22]));
  Hasher._combine(_:)(*(void *)(v2 + v17[23]));
  Hasher._combine(_:)(*(void *)(v2 + v17[24]));
  Hasher._combine(_:)(*(void *)(v2 + v17[25]));
  Hasher._combine(_:)(*(void *)(v2 + v17[26]));
  Hasher._combine(_:)(*(void *)(v2 + v17[27]));
  Hasher._combine(_:)(*(void *)(v2 + v17[28]));
  Hasher._combine(_:)(*(_WORD *)(v2 + v17[29]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[30]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[31]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[32]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[33]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[34]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[35]));
  unint64_t v26 = (uint64_t *)(v2 + v17[36]);
  os_log_type_t v27 = *v26;
  BOOL v28 = v26[1];
  swift_bridgeObjectRetain(v28);
  String.hash(into:)(a1, v27, v28);
  swift_bridgeObjectRelease(v28);
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[37]));
  Hasher._combine(_:)(*(void *)(v2 + v17[38]));
  Hasher._combine(_:)(*(void *)(v2 + v17[39]));
  Hasher._combine(_:)(*(void *)(v2 + v17[40]));
  Hasher._combine(_:)(*(void *)(v2 + v17[41]));
  Hasher._combine(_:)(*(void *)(v2 + v17[42]));
  if ((*(void *)(v2 + v17[43]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v29 = *(void *)(v2 + v17[43]);
  }
  else {
    uint64_t v29 = 0LL;
  }
  Hasher._combine(_:)(v29);
}

    uint64_t result = swift_bridgeObjectRelease(v10);
    uint64_t v20 = v28[2];
    if (v20)
    {
      id v21 = *(void *)(v6 + 16);
      if (v21)
      {
        char v22 = 0LL;
        uint64_t v23 = v20 - 1;
        while ((v21 & ~(v21 >> 63)) != v22)
        {
          if (v22 >= *(void *)(v6 + 16)) {
            goto LABEL_52;
          }
          uint64_t v24 = *(_BYTE *)(v6 + 32 + v22);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_10019EA0C(v7);
            uint64_t v7 = (void *)result;
          }

          uint64_t v20 = v7[2];
          if (v22 >= v20) {
            goto LABEL_53;
          }
          *((_BYTE *)v7 + v22 + 32) |= v24;
          if (v23 != v22 && v21 != ++v22) {
            continue;
          }
          BOOL v28 = v7;
          goto LABEL_43;
        }

        goto LABEL_51;
      }
    }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease_n(v55, 2LL);
  uint64_t v66 = *(void *)&v10[v52];
  *(void *)&v10[v52]  = 0LL;
  swift_unknownObjectRelease(v66);
  uint64_t v67 = *v54;
  *unint64_t v54 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v67);
  if (a1 != -1)
  {
    uint64_t v68 = *(void *)&v10[qword_10040DA60];
    int v69 = swift_unownedRetainStrong(v68);
    uint64_t v73 = sub_1002E8D68(v69, v70, v71, v72);
    swift_release(v68);
    sub_10027F7D0((uint64_t)v10);
    swift_release(v73);
  }

  io_connect_t v74 = qword_10040DAB8;
  if (v10[qword_10040DAB8] == 1)
  {
    uint64_t v75 = &v10[qword_10040DA68];
    swift_beginAccess(&v10[qword_10040DA68], v89, 0LL, 0LL);
    sub_1000226B0((uint64_t)(v75 + 104), (uint64_t)&v87, (uint64_t *)&unk_10040DCB0);
    if (v88 == 1)
    {
      sub_1000225EC((uint64_t)&v87, (uint64_t *)&unk_10040DCB0);
    }

    else
    {
      sub_1000589F8(&v87, (uint64_t)v90);
      sub_10017B140(v90, (uint64_t)&v87);
      if (v88)
      {
        sub_1000589F8(&v87, (uint64_t)v84);
        uint64_t v76 = v85;
        uint64_t v77 = v86;
        sub_100021104(v84, v85);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v77 + 16))( *(unsigned __int16 *)(v75 + 25) | ((unint64_t)*(unsigned int *)(v75 + 27) << 16),  v76,  v77);
        sub_10017B1A0(v90);
        sub_100002AC4(v84);
      }

      else
      {
        sub_10027741C();
        sub_10017B1A0(v90);
      }

      v10[v74]  = 0;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

void sub_1000543AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *(void *)(v6 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
  swift_beginAccess(v6 + 32, v21, 32LL, 0LL);
  uint64_t v15 = *(void *)(v6 + 32);
  if (*(void *)(v15 + 16))
  {
    swift_bridgeObjectRetain(a5);
    uint64_t v16 = sub_10001C008(a4, a5);
    if ((v17 & 1) != 0)
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      swift_endAccess(v21);
      swift_retain();
      swift_bridgeObjectRelease(a5);
      unsigned int v19 = *(_DWORD *)(v18
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_interfaceIndex);
      swift_release(v18);
      goto LABEL_12;
    }

    swift_bridgeObjectRelease(a5);
  }

  swift_endAccess(v21);
  if ((a5 & 0x1000000000000000LL) != 0 || !(a5 & 0x2000000000000000LL | a4 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v23, sub_100058D38, 0LL);
    unsigned int v19 = v23;
  }

  else if ((a5 & 0x2000000000000000LL) != 0)
  {
    *(void *)id v21 = a4;
    uint64_t v22 = a5 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v19 = if_nametoindex(v21);
  }

  else
  {
    if ((a4 & 0x1000000000000000LL) != 0) {
      uint64_t v20 = (const char *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v20 = (const char *)_StringObject.sharedUTF8.getter(a4, a5);
    }
    sub_10003BB6C(v20, v21);
    unsigned int v19 = *(_DWORD *)v21;
  }

uint64_t sub_1000545D0(uint64_t a1)
{
  return sub_10003D21C( a1,  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unsigned __int8 *)(v1 + 56),  *(void (**)(uint64_t))(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 16),  *(void *)(v1 + 24)) & 1;
}

uint64_t sub_10005460C(uint64_t a1)
{
  return sub_10003D5F0(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100054614@<X0>(const char *a1@<X0>, size_t *a2@<X8>)
{
  return sub_100058980(a1, a2);
}

id sub_100054628()
{
  return [*(id *)(*(void *)(v0 + 16) + 48) disassociateWithReason:qword_10033A8C0[*(char *)(v0 + 24)]];
}

void sub_10005464C()
{
}

void sub_100054654()
{
}

void sub_10005465C()
{
}

void sub_100054668()
{
}

uint64_t type metadata accessor for AppleDevice.GatewayMonitor(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_100405BF8, (uint64_t)&nominal type descriptor for AppleDevice.GatewayMonitor);
}

unint64_t sub_10005468C(unint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = (__CFString *)String._bridgeToObjectiveC()();
  SCPreferencesRef v7 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v6, 0LL, 0LL);

  if (!v7)
  {
    unint64_t v32 = 0LL;
    _StringGuts.grow(_:)(70LL);
    v19._countAndFlagsBits  = 0xD000000000000044LL;
    v19._object  = (void *)0x8000000100362D20LL;
    String.append(_:)(v19);
    int v20 = SCError();
    id v21 = SCErrorString(v20);
    v22._countAndFlagsBits  = String.init(cString:)(v21);
    object  = v22._object;
    String.append(_:)(v22);
    uint64_t v24 = object;
LABEL_8:
    swift_bridgeObjectRelease(v24);
    return v32;
  }

  if (!SCPreferencesLock(v7, 1u))
  {
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v32 = 0xD00000000000002FLL;
    int v25 = SCError();
    unint64_t v26 = SCErrorString(v25);
    v27._countAndFlagsBits  = String.init(cString:)(v26);
    BOOL v28 = v27._object;
    String.append(_:)(v27);

    uint64_t v24 = v28;
    goto LABEL_8;
  }

  char v8 = sub_1000419F4(v7, a1, a2, a3 & 1);
  if (!v10)
  {
    if ((v8 & 1) != 0)
    {
      if (SCPreferencesCommitChanges(v7))
      {
        if (SCPreferencesApplyChanges(v7)) {
          goto LABEL_13;
        }
        uint64_t v31 = 0LL;
        _StringGuts.grow(_:)(51LL);
        unint64_t v12 = 0xD000000000000031LL;
        unint64_t v30 = "Failed to apply SCPreferences changes with error ";
      }

      else
      {
        uint64_t v31 = 0LL;
        _StringGuts.grow(_:)(52LL);
        unint64_t v12 = 0xD000000000000032LL;
        unint64_t v30 = "Failed to commit SCPreferences changes with error ";
      }

      unint64_t v13 = (unint64_t)(v30 - 32) | 0x8000000000000000LL;
      goto LABEL_5;
    }

void sub_100054918( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, ifaddrs **))
{
  void (*v28)(uint64_t *__return_ptr, ifaddrs **);
  uint64_t v29;
  ifaddrs *v30;
  ifaddrs *v31;
  char *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v30 = 0LL;
  if (!getifaddrs(&v30))
  {
    unint64_t v26 = v30;
    if (v30)
    {
      uint64_t v27 = a4;
      BOOL v28 = a5;
      ifa_flags  = v30->ifa_flags;
      ifa_next  = v30->ifa_next;
      ifa_name  = v30->ifa_name;
      uint64_t v31 = v30->ifa_next;
      unint64_t v32 = ifa_name;
      uint64_t v33 = ifa_flags;
      __int128 v14 = *(_OWORD *)&v30->ifa_addr;
      uint64_t v34 = v14;
      uint64_t v35 = *(_OWORD *)&v30->ifa_dstaddr;
      if (ifa_name)
      {
        int v15 = a3;
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = String.init(cString:)(ifa_name);
          uint64_t v19 = v18;
          if (v17 == a1 && v18 == a2) {
            break;
          }
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a1, a2, 0LL);
          swift_bridgeObjectRelease(v19);
          if ((v20 & 1) != 0) {
            goto LABEL_9;
          }
LABEL_13:
          if (!ifa_next) {
            goto LABEL_16;
          }
          unsigned int v22 = ifa_next->ifa_flags;
          __int128 v23 = *(_OWORD *)&ifa_next->ifa_addr;
          __int128 v24 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          int v25 = ifa_next;
          ifa_next  = ifa_next->ifa_next;
          ifa_name  = v25->ifa_name;
          uint64_t v31 = ifa_next;
          unint64_t v32 = ifa_name;
          uint64_t v33 = v22;
          uint64_t v34 = v23;
          uint64_t v35 = v24;
          uint64_t v16 = v23;
          if (!ifa_name) {
            goto LABEL_15;
          }
        }

        swift_bridgeObjectRelease(a2);
LABEL_9:
        if (!v16) {
          __break(1u);
        }
        if (*(unsigned __int8 *)(v16 + 1) == v15)
        {
          v28(&v29, &v31);
          if (v5) {
            goto LABEL_16;
          }
          int v21 = BYTE4(v29);
          *(_DWORD *)uint64_t v27 = v29;
          *(_BYTE *)(v27 + 4)  = v21;
          if (v21 != 1) {
            goto LABEL_16;
          }
        }

        goto LABEL_13;
      }

LABEL_16:
    freeifaddrs(v26);
  }

    freeifaddrs(v26);
  }

    freeifaddrs(v26);
  }

  SCPreferencesRef v7 = v1 - 9;
  char v8 = 1 << v1;
  else {
    uint64_t v9 = 8LL;
  }
  else {
    uint64_t v10 = v1;
  }
  if (v1 >= 0)
  {
    uint64_t v11 = v8;
  }

  else
  {
    uint64_t v9 = v10;
    uint64_t v11 = 0;
  }

  if (v7 <= 0xFFFFFFFFFFFFFFEELL) {
    unint64_t v12 = v1;
  }
  else {
    unint64_t v12 = v9;
  }
  if (v7 <= 0xFFFFFFFFFFFFFFEELL) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v11;
  }
  uint64_t v1 = v12 + 1;
  if (!__OFADD__(v12, 1LL)) {
    goto LABEL_34;
  }
LABEL_49:
  __break(1u);
  return result;
}

  if (qword_1004040F0 == -1)
  {
    if ((v9 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  swift_once(&qword_1004040F0, sub_10005DD04);
  if (v9 < 0)
  {
LABEL_18:
    unint64_t v13 = static WiFiDriverCapabilities.isClmRestricted;
    swift_beginAccess(&v16, v17, 33LL, 0LL);
    sub_10008F9D0(v13, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v17);
  }

  if (qword_1004040F0 == -1)
  {
    if ((v20 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  swift_once(&qword_1004040F0, sub_10005DD04);
  if (v20 < 0)
  {
LABEL_18:
    __int128 v24 = static WiFiDriverCapabilities.isClmRestricted;
    swift_beginAccess(&v28, v29, 33LL, 0LL);
    sub_10008F9D0(v24, (uint64_t (*)(uint64_t, uint64_t))sub_1000ABC68);
    swift_endAccess(v29);
  }

    v21._countAndFlagsBits  = 0xD00000000000001ELL;
    v21._object  = (void *)0x80000001003640D0LL;
    String.append(_:)(v21);
    if ((a1 & 0x10) == 0)
    {
LABEL_7:
      if ((a1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }

  Hasher._combine(_:)(v13);
  char v20 = type metadata accessor for AWDLIdleActivity(0LL);
  v8((char *)v5, v0 + *(int *)(v20 + 20), v1);
  int v21 = v9(v5, v1);
  if (v21 == v11)
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v5, v1);
    unsigned int v22 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v5 <= 0) {
      unsigned int v22 = 0x8000000000000000LL;
    }
    else {
      __int128 v23 = v22;
    }
    goto LABEL_31;
  }

  if (v21 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v5, v1);
    __int128 v24 = *v5;
    int v25 = 1000000LL;
LABEL_26:
    unint64_t v26 = v24 * v25;
    uint64_t v27 = (unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63;
    uint64_t v18 = v24 <= 0;
    BOOL v28 = 0x7FFFFFFFFFFFFFFFLL;
    if (v18) {
      BOOL v28 = 0x8000000000000000LL;
    }
    if (v27) {
      __int128 v23 = v28;
    }
    else {
      __int128 v23 = v26;
    }
    goto LABEL_31;
  }

  if (v21 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v5, v1);
    __int128 v24 = *v5;
    int v25 = 1000LL;
    goto LABEL_26;
  }

  if (v21 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v5, v1);
    __int128 v23 = *v5;
  }

  else
  {
    if (v21 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v5, v1);
    }
    __int128 v23 = 0x7FFFFFFFFFFFFFFFLL;
  }

void sub_100054ABC( uint64_t a1, uint64_t a2, unsigned __int8 a3, void (*a4)(void *__return_ptr, ifaddrs **), uint64_t a5, void *a6)
{
  void (*v38)(void *__return_ptr, ifaddrs **);
  int v39;
  void v40[3];
  uint64_t v41;
  ifaddrs *v42;
  ifaddrs *v43;
  char *v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  int64_t v42 = 0LL;
  if (getifaddrs(&v42)) {
    return;
  }
  unint64_t v12 = v42;
  if (!v42)
  {
LABEL_22:
    unint64_t v32 = v12;
    goto LABEL_23;
  }

  int64_t v38 = a4;
  ifa_flags  = v42->ifa_flags;
  ifa_next  = v42->ifa_next;
  ifa_name  = v42->ifa_name;
  unint64_t v43 = v42->ifa_next;
  int64_t v44 = ifa_name;
  uint64_t v45 = ifa_flags;
  __int128 v16 = *(_OWORD *)&v42->ifa_addr;
  uint64_t v46 = v16;
  uint64_t v33 = v42;
  int64_t v47 = *(_OWORD *)&v42->ifa_dstaddr;
  if (!ifa_name)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  uint64_t v39 = a3;
  uint64_t v17 = v16;
  uint64_t v34 = a6;
  while (1)
  {
    uint64_t v18 = String.init(cString:)(ifa_name);
    uint64_t v20 = v19;
    if (v18 == a1 && v19 == a2)
    {
      swift_bridgeObjectRelease(a2);
    }

    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, a1, a2, 0LL);
      swift_bridgeObjectRelease(v20);
      if ((v21 & 1) == 0) {
        goto LABEL_18;
      }
    }

    if (!v17) {
      goto LABEL_27;
    }
LABEL_18:
    if (!ifa_next)
    {
      unint64_t v12 = v33;
      goto LABEL_22;
    }

    unsigned int v28 = ifa_next->ifa_flags;
    __int128 v29 = *(_OWORD *)&ifa_next->ifa_addr;
    __int128 v30 = *(_OWORD *)&ifa_next->ifa_dstaddr;
    uint64_t v31 = ifa_next;
    ifa_next  = ifa_next->ifa_next;
    ifa_name  = v31->ifa_name;
    unint64_t v43 = ifa_next;
    int64_t v44 = ifa_name;
    uint64_t v45 = v28;
    uint64_t v46 = v29;
    int64_t v47 = v30;
    uint64_t v17 = v29;
    if (!ifa_name) {
      goto LABEL_26;
    }
  }

  v38(v40, &v43);
  if (!v6)
  {
    uint64_t v22 = v41;
    if (v41 != 1)
    {
      uint64_t v36 = v40[0];
      uint64_t v37 = v40[2];
      uint64_t v35 = v40[1];
      __int128 v23 = (void *)*a6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
      *a6  = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        __int128 v23 = sub_1000A6A34(0LL, v23[2] + 1LL, 1, v23);
        *a6  = v23;
      }

      unint64_t v26 = v23[2];
      unint64_t v25 = v23[3];
      if (v26 >= v25 >> 1)
      {
        __int128 v23 = sub_1000A6A34((void *)(v25 > 1), v26 + 1, 1, v23);
        *uint64_t v34 = v23;
      }

      _OWORD v23[2] = v26 + 1;
      uint64_t v27 = &v23[4 * v26];
      a6  = v34;
      v27[4]  = v36;
      v27[5]  = v35;
      v27[6]  = v37;
      v27[7]  = v22;
    }

    goto LABEL_18;
  }

  unint64_t v32 = v33;
LABEL_23:
  freeifaddrs(v32);
}

void sub_100054D0C( uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 *a4, void (*a5)(unsigned __int8 *__return_ptr, ifaddrs **))
{
  void (*v28)(unsigned __int8 *__return_ptr, ifaddrs **);
  unsigned __int8 v29;
  ifaddrs *v30;
  ifaddrs *v31;
  char *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  __int128 v30 = 0LL;
  if (!getifaddrs(&v30))
  {
    unint64_t v26 = v30;
    if (v30)
    {
      uint64_t v27 = a4;
      unsigned int v28 = a5;
      ifa_flags  = v30->ifa_flags;
      ifa_next  = v30->ifa_next;
      ifa_name  = v30->ifa_name;
      uint64_t v31 = v30->ifa_next;
      unint64_t v32 = ifa_name;
      uint64_t v33 = ifa_flags;
      __int128 v14 = *(_OWORD *)&v30->ifa_addr;
      uint64_t v34 = v14;
      uint64_t v35 = *(_OWORD *)&v30->ifa_dstaddr;
      if (ifa_name)
      {
        int v15 = a3;
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = String.init(cString:)(ifa_name);
          uint64_t v19 = v18;
          if (v17 == a1 && v18 == a2) {
            break;
          }
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a1, a2, 0LL);
          swift_bridgeObjectRelease(v19);
          if ((v20 & 1) != 0) {
            goto LABEL_9;
          }
LABEL_13:
          if (!ifa_next) {
            goto LABEL_16;
          }
          unsigned int v22 = ifa_next->ifa_flags;
          __int128 v23 = *(_OWORD *)&ifa_next->ifa_addr;
          __int128 v24 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          unint64_t v25 = ifa_next;
          ifa_next  = ifa_next->ifa_next;
          ifa_name  = v25->ifa_name;
          uint64_t v31 = ifa_next;
          unint64_t v32 = ifa_name;
          uint64_t v33 = v22;
          uint64_t v34 = v23;
          uint64_t v35 = v24;
          uint64_t v16 = v23;
          if (!ifa_name) {
            goto LABEL_15;
          }
        }

        swift_bridgeObjectRelease(a2);
LABEL_9:
        if (!v16) {
          __break(1u);
        }
        if (*(unsigned __int8 *)(v16 + 1) == v15)
        {
          v28(&v29, &v31);
          if (v5) {
            goto LABEL_16;
          }
          int v21 = v29;
          *uint64_t v27 = v29;
          if (v21 != 2) {
            goto LABEL_16;
          }
        }

        goto LABEL_13;
      }

void sub_100054EA8( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, ifaddrs **))
{
  void (*v27)(uint64_t *__return_ptr, ifaddrs **);
  int v28;
  uint64_t v29;
  ifaddrs *v30;
  ifaddrs *v31;
  char *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  __int128 v30 = 0LL;
  if (!getifaddrs(&v30))
  {
    unint64_t v26 = v30;
    if (v30)
    {
      uint64_t v27 = a5;
      ifa_flags  = v30->ifa_flags;
      ifa_next  = v30->ifa_next;
      ifa_name  = v30->ifa_name;
      uint64_t v31 = v30->ifa_next;
      unint64_t v32 = ifa_name;
      uint64_t v33 = ifa_flags;
      __int128 v14 = *(_OWORD *)&v30->ifa_addr;
      uint64_t v34 = v14;
      uint64_t v35 = *(_OWORD *)&v30->ifa_dstaddr;
      if (ifa_name)
      {
        unsigned int v28 = a3;
        uint64_t v15 = v14;
        while (1)
        {
          uint64_t v16 = String.init(cString:)(ifa_name);
          uint64_t v18 = v17;
          if (v16 == a1 && v17 == a2) {
            break;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0LL);
          swift_bridgeObjectRelease(v18);
          if ((v19 & 1) != 0) {
            goto LABEL_9;
          }
LABEL_13:
          if (!ifa_next) {
            goto LABEL_16;
          }
          unsigned int v22 = ifa_next->ifa_flags;
          __int128 v23 = *(_OWORD *)&ifa_next->ifa_addr;
          __int128 v24 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          unint64_t v25 = ifa_next;
          ifa_next  = ifa_next->ifa_next;
          ifa_name  = v25->ifa_name;
          uint64_t v31 = ifa_next;
          unint64_t v32 = ifa_name;
          uint64_t v33 = v22;
          uint64_t v34 = v23;
          uint64_t v35 = v24;
          uint64_t v15 = v23;
          if (!ifa_name) {
            goto LABEL_15;
          }
        }

        swift_bridgeObjectRelease(a2);
LABEL_9:
        if (!v15) {
          __break(1u);
        }
        if (*(unsigned __int8 *)(v15 + 1) == v28)
        {
          v27(&v29, &v31);
          if (v5) {
            goto LABEL_16;
          }
          int v20 = v29;
          int v21 = BYTE6(v29);
          *(_WORD *)(a4 + 4)  = WORD2(v29);
          *(_DWORD *)a4  = v20;
          *(_BYTE *)(a4 + 6)  = v21;
          if (v21 != 1) {
            goto LABEL_16;
          }
        }

        goto LABEL_13;
      }

void sub_100055058()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v12 = (unint64_t *)(v0
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state);
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                + 16) != 2
    || *(_OWORD *)v12 != 0LL)
  {
    uint64_t v13 = swift_retain_n(v0, 2LL);
    v63[0]  = (os_log_t)Logger.logObject.getter(v13);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63[0], v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      v64[0]  = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      if (*((_BYTE *)v12 + 16))
      {
        if (*((_BYTE *)v12 + 16) == 1)
        {
          unint64_t v17 = 0xEB0000000064656CLL;
          uint64_t v18 = 0x6961462050434844LL;
        }

        else
        {
          if (*(_OWORD *)v12 == 0LL) {
            uint64_t v18 = 0x72756769666E6F43LL;
          }
          else {
            uint64_t v18 = 0x74616E696D726554LL;
          }
          if (*(_OWORD *)v12 == 0LL) {
            unint64_t v17 = 0xEB00000000676E69LL;
          }
          else {
            unint64_t v17 = 0xEA00000000006465LL;
          }
        }
      }

      else
      {
        uint64_t v37 = 0x6569667369746153LL;
        if ((*v12 & 1) != 0)
        {
          unint64_t v38 = 0xE900000000000064LL;
        }

        else
        {
          uint64_t v37 = 0x6673697461736E55LL;
          unint64_t v38 = 0xEB00000000646569LL;
        }

        uint64_t v65 = v37;
        unint64_t v66 = v38;
        swift_bridgeObjectRetain(v38);
        v39._object  = (void *)0xEA00000000007265LL;
        v39._countAndFlagsBits  = 0x7473657571655220LL;
        String.append(_:)(v39);
        swift_bridgeObjectRelease(v38);
        uint64_t v18 = v65;
        unint64_t v17 = v38;
      }

      uint64_t v65 = sub_10000235C(v18, v17, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_release_n(v1, 2LL);
      swift_bridgeObjectRelease(v17);
      _os_log_impl( (void *)&_mh_execute_header,  v63[0],  v14,  "Unable to start internet sharing requester because in %s",  v15,  0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v0, 2LL);
    }

    return;
  }

  io_connect_t v57 = v10;
  uint64_t v58 = v7;
  uint64_t v56 = v11;
  uint64_t v59 = (unint64_t *)((char *)&v55 - v8);
  uint64_t v60 = v9;
  unint64_t v61 = v6;
  uint64_t v67 = 0LL;
  unint64_t v20 = *(void *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
  unint64_t v19 = *(void *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                  + 8);
  swift_bridgeObjectRetain(v19);
  unint64_t v21 = sub_10005468C(v20, v19, 1);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease(v19);
  uint64_t v24 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_logger;
  __n128 v25 = swift_beginAccess(&v67, &v65, 1LL, 0LL);
  if (v23)
  {
    unint64_t v26 = (void (*)(unint64_t *, void, unint64_t))(v1 + v24);
    v25.n128_u64[0]  = 136315394LL;
    *(__n128 *)uint64_t v63 = v25;
    id v62 = (char *)&type metadata for Any + 8;
    while (1)
    {
      sub_100056570(v21, v23, 1);
      uint64_t v27 = v67 + 1;
      if (__OFADD__(v67, 1LL)) {
        break;
      }
      ++v67;
      uint64_t v28 = swift_retain_n(v1, 2LL);
      __int128 v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = v20;
        uint64_t v32 = swift_slowAlloc(22LL, -1LL);
        uint64_t v33 = swift_slowAlloc(32LL, -1LL);
        v64[0]  = v33;
        *(_DWORD *)uint64_t v32 = v63[0];
        swift_bridgeObjectRetain(v19);
        *(void *)(v32 + 4)  = sub_10000235C(v31, v19, v64);
        swift_release_n(v1, 2LL);
        swift_bridgeObjectRelease(v19);
        *(_WORD *)(v32 + 12)  = 2048;
        uint64_t v27 = v67;
        *(void *)(v32 + 14)  = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Failed to start DHCP on %s, retry %ld",  (uint8_t *)v32,  0x16u);
        swift_arrayDestroy(v33, 1LL, v62);
        swift_slowDealloc(v33, -1LL, -1LL);
        uint64_t v34 = v32;
        unint64_t v20 = v31;
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      else
      {
        swift_release_n(v1, 2LL);
      }

      swift_bridgeObjectRetain(v19);
      unint64_t v21 = sub_10005468C(v20, v19, 1);
      uint64_t v23 = v35;
      swift_bridgeObjectRelease(v19);
      BOOL v36 = v23 != 0;
      if (!v23) {
        unint64_t v21 = 0LL;
      }
      if (v27 > 4 || !v23) {
        goto LABEL_31;
      }
    }

    __break(1u);
    goto LABEL_36;
  }

  unint64_t v21 = 0LL;
  BOOL v36 = 0;
LABEL_31:
  uint64_t v40 = *v12;
  uint64_t v41 = v12[1];
  *unint64_t v12 = v21;
  v12[1]  = v23;
  char v42 = *((_BYTE *)v12 + 16);
  *((_BYTE *)v12 + swift_weakDestroy(v0 + 16) = v36;
  sub_100056548(v40, v41, v42);
  sub_100056570(v40, v41, v42);
  sub_1000411FC(v40, v41, v42);
  sub_100056570(v40, v41, v42);
  if (!*((_BYTE *)v12 + 16))
  {
    v63[0]  = (os_log_t)v20;
    unint64_t v12 = v59;
    uint64_t v23 = v60;
    *uint64_t v59 = 15LL;
    unint64_t v26 = *(void (**)(unint64_t *, void, unint64_t))(v23 + 104);
    unint64_t v21 = v61;
    v26(v12, enum case for DispatchTimeInterval.seconds(_:), v61);
    if (qword_100404318 == -1)
    {
LABEL_33:
      id v62 = (id)static OS_dispatch_queue.nan;
      uint64_t v43 = swift_allocObject(&unk_1003DE390, 24LL, 7LL);
      swift_weakInit(v43 + 16, v1);
      uint64_t v44 = swift_allocObject(&unk_1003DE3B8, 24LL, 7LL);
      *(void *)(v44 + swift_weakDestroy(v0 + 16) = 0LL;
      (*(void (**)(uint64_t, unint64_t *, unint64_t))(v23 + 16))(v58, v12, v21);
      uint64_t v45 = (void *)swift_allocObject(&unk_1003DE3E0, 40LL, 7LL);
      v45[2]  = sub_10005733C;
      v45[3]  = v43;
      void v45[4] = v44;
      uint64_t v46 = v56;
      v26((unint64_t *)v56, enum case for DispatchTimeInterval.never(_:), v21);
      uint64_t v47 = (uint64_t)v57;
      *io_connect_t v57 = 100LL;
      v26((unint64_t *)v47, enum case for DispatchTimeInterval.milliseconds(_:), v21);
      uint64_t v48 = type metadata accessor for P2PTimer(0LL);
      swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
      swift_retain_n(v43, 2LL);
      id v49 = v62;
      swift_retain();
      uint64_t v50 = sub_100120F78(v58, v49, v46, v47, (uint64_t)sub_100057370, (uint64_t)v45);

      swift_release(v45);
      swift_beginAccess(v44 + 16, v64, 1LL, 0LL);
      uint64_t v51 = *(void *)(v44 + 16);
      *(void *)(v44 + swift_weakDestroy(v0 + 16) = v50;
      swift_release(v43);
      swift_release(v44);
      swift_release(v51);
      (*(void (**)(unint64_t *, unint64_t))(v60 + 8))(v59, v61);
      swift_release(v43);
      uint64_t v52 = *(void *)(v1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor);
      uint64_t v53 = swift_allocObject(&unk_1003DE390, 24LL, 7LL);
      swift_weakInit(v53 + 16, v1);
      uint64_t v54 = *(void *)(v52 + 48);
      *(void *)(v52 + 40)  = sub_10005737C;
      *(void *)(v52 + 48)  = v53;
      swift_release(v54);
      sub_10003FFB0(v63[0], v19);
      return;
    }

uint64_t sub_100055808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v39 = v9;
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x4D79617765746167LL,  0xEE00726F74696E6FLL);
  uint64_t v11 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor;
  *(void *)(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor)  = 0LL;
  RoutingSocket.init()(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket);
  uint64_t v12 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = 0u;
  *(_BYTE *)(v12 + 32)  = -1;
  uint64_t v13 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v13 + 4)  = 0;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 6)  = 1;
  uint64_t v14 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  uint64_t v15 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  uint64_t v16 = nw_parameters_create();
  uint64_t v40 = a3;
  unint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)(a3 + 16) + 40LL);
  uint64_t v38 = a1;
  uint64_t v18 = v17(a2);
  uint64_t v20 = v19;
  uint64_t v41 = v11;
  if ((v19 & 0x1000000000000000LL) != 0 || !(v19 & 0x2000000000000000LL | v18 & 0x1000000000000000LL))
  {
    sub_100002274(&qword_100405D48);
    _StringGuts._slowWithCString<A>(_:)(&v43, sub_1000402D4, 0LL);
LABEL_7:
    swift_bridgeObjectRelease(v20);
    goto LABEL_9;
  }

  if ((v19 & 0x2000000000000000LL) == 0)
  {
    if ((v18 & 0x1000000000000000LL) == 0) {
      _StringObject.sharedUTF8.getter(v18, v19);
    }
    sub_1000402D4(v42);
    nw_interface_t v43 = (nw_interface_t)v42[0];
    goto LABEL_7;
  }

  v42[0]  = v18;
  v42[1]  = v19 & 0xFFFFFFFFFFFFFFLL;
  nw_interface_t v43 = (nw_interface_t)nw_interface_create_with_name(v42);
  swift_bridgeObjectRelease(v20);
LABEL_9:
  nw_interface_t v21 = v43;
  nw_parameters_require_interface(v16, v43);
  uint64_t v22 = swift_unknownObjectRelease(v21);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    __n128 v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__n128 v25 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Start monitoring network path for gateway address updates",  v25,  2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  uint64_t result = nw_path_create_evaluator_for_endpoint(0LL, v16);
  if (result)
  {
    uint64_t v27 = result;
    if (qword_100404328 != -1) {
      swift_once(&qword_100404328, sub_10017437C);
    }
    uint64_t v28 = (void *)static OS_dispatch_queue.p2p;
    uint64_t v29 = swift_allocObject(&unk_1003DDDF0, 24LL, 7LL);
    swift_weakInit(v29 + 16, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v38, a2);
    uint64_t v30 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v31 = (v30 + 40) & ~v30;
    uint64_t v32 = (char *)swift_allocObject(&unk_1003DE4A8, v31 + v39, v30 | 7);
    uint64_t v33 = v40;
    *((void *)v32 + 2)  = a2;
    *((void *)v32 + 3)  = v33;
    *((void *)v32 + 4)  = v29;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v32[v31], v10, a2);
    uint64_t v34 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v35 = swift_allocObject(v34, 24LL, 7LL);
    id v36 = v28;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v27, v36, (uint64_t)sub_100057410, (uint64_t)v32);
    swift_release(v29);
    swift_unknownObjectRelease(v16);
    uint64_t v37 = *(void *)(v4 + v41);
    *(void *)(v4 + v41)  = v35;
    swift_release(v37);
    return v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100055BF8(nw_path *a1)
{
  return sub_10004AED8(a1, *(void (**)(void))(v1 + 16));
}

uint64_t type metadata accessor for AppleDevice.NetworkPathMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtCC7CoreP2P11AppleDevice18NetworkPathMonitor);
}

void sub_100055C24(uint64_t a1, __int16 a2, char a3)
{
}

uint64_t type metadata accessor for AppleDevice.InternetSharingProviderSession(uint64_t a1)
{
  return sub_100020E48( a1,  qword_1004058D8,  (uint64_t)&nominal type descriptor for AppleDevice.InternetSharingProviderSession);
}

uint64_t sub_100055C48(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10004BEB0(a1, a2, a3, *(void (**)(void))(v3 + 16), *(void *)(v3 + 24), *(uint64_t (**)(void))(v3 + 32));
}

uint64_t type metadata accessor for AppleDevice.InternetSharingRequesterSession(uint64_t a1)
{
  return sub_100020E48( a1,  qword_1004059C0,  (uint64_t)&nominal type descriptor for AppleDevice.InternetSharingRequesterSession);
}

uint64_t type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor( uint64_t a1)
{
  return sub_100020E48( a1,  qword_100405A98,  (uint64_t)&nominal type descriptor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor);
}

uint64_t sub_100055C7C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100055CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = a2;
  if ((a5 & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = a4;
  }

  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_100055CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease(a2);
  if ((a5 & 1) != 0) {
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t type metadata accessor for AppleDevice.EventSource(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AppleDevice.EventSource);
}

uint64_t sub_100055D34(uint64_t a1)
{
  uint64_t result = sub_10000AF70( &qword_1004053A8,  type metadata accessor for AppleDevice,  (uint64_t)&protocol conformance descriptor for AppleDevice);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_100055D70(uint64_t a1)
{
  uint64_t result = sub_10000AF70( &qword_1004053B0,  type metadata accessor for AppleDevice,  (uint64_t)&protocol conformance descriptor for AppleDevice);
  *(void *)(a1 + 8)  = result;
  return result;
}

_UNKNOWN **sub_100055DAC()
{
  return &protocol witness table for AppleKeychain;
}

_UNKNOWN **sub_100055DB8()
{
  return &protocol witness table for LockedPreferencesStorage<A>;
}

uint64_t sub_100055DC4(uint64_t a1)
{
  uint64_t result = sub_10000AF70( &qword_100405408,  type metadata accessor for AppleDevice,  (uint64_t)&protocol conformance descriptor for AppleDevice);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_100055E00(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_100055E08(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AppleDevice.EventSource<A>, a2);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_100055E34()
{
  return type metadata accessor for AppleDevice(0LL);
}

uint64_t sub_100055E3C(uint64_t a1)
{
  v5[0]  = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1]  = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[4]  = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[5]  = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[2]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[3]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[6]  = "\b";
  v5[7]  = &unk_10033A390;
  v5[8]  = &unk_10033A3A8;
  void v5[9] = &unk_10033A3A8;
  v5[10]  = &unk_10033A3A8;
  v5[11]  = &unk_10033A3A8;
  v5[12]  = &unk_10033A3A8;
  v5[13]  = (char *)&value witness table for Builtin.RawPointer + 64;
  v5[14]  = (char *)&value witness table for Builtin.Int32 + 64;
  v5[15]  = (char *)&value witness table for Builtin.Int32 + 64;
  v5[16]  = (char *)&value witness table for Builtin.Int64 + 64;
  v5[17]  = (char *)&value witness table for Builtin.Int32 + 64;
  v5[18]  = (char *)&value witness table for Builtin.Int32 + 64;
  v5[19]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[20]  = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[21]  = &unk_10033A3C0;
  uint64_t result = type metadata accessor for RoutingSocket(319LL);
  if (v3 <= 0x3F)
  {
    v5[22]  = *(void *)(result - 8) + 64LL;
    v5[23]  = &unk_10033A3D8;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      v5[24]  = *(void *)(result - 8) + 64LL;
      return swift_updateClassMetadata2(a1, 256LL, 25LL, v5, a1 + 80);
    }
  }

  return result;
}

uint64_t sub_100055F5C()
{
  return type metadata accessor for AppleDevice.InterfaceHandle(0LL);
}

uint64_t type metadata accessor for AppleDevice.InterfaceHandle(uint64_t a1)
{
  return sub_100020E48(a1, qword_1004055F0, (uint64_t)&nominal type descriptor for AppleDevice.InterfaceHandle);
}

uint64_t sub_100055F78(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = (char *)&value witness table for Builtin.RawPointer + 64;
    v4[2]  = (char *)&value witness table for Builtin.Int32 + 64;
    v4[3]  = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[4] = &unk_10033A400;
    v4[5]  = &unk_10033A418;
    v4[6]  = &unk_10033A418;
    v4[7]  = &unk_10033A430;
    v4[8]  = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100056030()
{
  return type metadata accessor for AppleDevice.InternetSharingProviderSession(0LL);
}

uint64_t sub_100056038(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = &unk_10033A490;
    v4[2]  = &unk_10033A490;
    v4[3]  = (char *)&value witness table for () + 64;
    void v4[4] = &unk_10033A490;
    v4[5]  = &unk_10033A4A8;
    v4[6]  = &unk_10033A4C0;
    v4[7]  = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000560E0()
{
  return type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
}

uint64_t sub_1000560E8(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = &unk_10033A490;
    v4[2]  = (char *)&value witness table for () + 64;
    v4[3]  = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[4] = &unk_10033A4C0;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100056184()
{
  return type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0LL);
}

uint64_t sub_10005618C(uint64_t a1)
{
  v4[0]  = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1]  = &unk_10033A3A8;
  v4[2]  = (char *)&value witness table for Builtin.Int32 + 64;
  v4[3]  = (char *)&value witness table for () + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10005622C()
{
  return type metadata accessor for AppleDevice.GatewayMonitor(0LL);
}

void sub_100056234(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v8[0]  = *(void *)(v2 - 8) + 64LL;
    v8[1]  = &unk_10033A3A8;
    sub_100056310(319LL, &qword_100405C08, type metadata accessor for RoutingSocket);
    if (v5 <= 0x3F)
    {
      v8[2]  = *(void *)(v4 - 8) + 64LL;
      v8[3]  = "!";
      v8[4]  = L"\a";
      sub_100056310( 319LL,  (unint64_t *)&qword_100405C10,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
      if (v7 <= 0x3F)
      {
        v8[5]  = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 6LL, v8, a1 + 80);
      }
    }
  }

void sub_100056310(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_10005635C(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t sub_100056380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1000563B4(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_unknownObjectUnownedCopyAssign() + 8)  = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

__n128 sub_1000563FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_unknownObjectUnownedTakeInit();
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8)  = result;
  return result;
}

uint64_t sub_100056424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectUnownedTakeAssign();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v4 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.RangingSetup(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.RangingSetup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDevice.InternetSharingRequesterSession.State( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100056588(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_100058D08);
}

uint64_t *assignWithCopy for AppleDevice.InternetSharingRequesterSession.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000565E4( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_100058D08,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100058D0C);
}

__n128 initializeWithTake for NANAvailabilityEntry.BandChannelEntries(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0]  = a2[1].n128_u8[0];
  *a1  = result;
  return result;
}

uint64_t *assignWithTake for AppleDevice.InternetSharingRequesterSession.State( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100056650(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100058D0C);
}

ValueMetadata *type metadata accessor for AppleDevice.InternetSharingRequesterSession.State()
{
  return &type metadata for AppleDevice.InternetSharingRequesterSession.State;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDevice.InternetSharingProviderSession.State( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100056588(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_100056548);
}

uint64_t sub_100056548(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for AppleDevice.InternetSharingProviderSession.State(uint64_t a1)
{
  return sub_100056570(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100056570(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100056588(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1  = v5;
  *(void *)(a1 + 8)  = v6;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for AppleDevice.InternetSharingProviderSession.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000565E4( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_100056548,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100056570);
}

uint64_t *sub_1000565E4( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1  = v7;
  a1[1]  = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for AppleDevice.InternetSharingProviderSession.State( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100056650(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100056570);
}

uint64_t *sub_100056650( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1  = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t _s7CoreP2P11AppleDeviceC30InternetSharingProviderSessionC5StateOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s7CoreP2P11AppleDeviceC30InternetSharingProviderSessionC5StateOwst_0( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100056720(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100056738(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8)  = 0LL;
    LOBYTE(a2)  = 2;
  }

  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.InternetSharingProviderSession.State()
{
  return &type metadata for AppleDevice.InternetSharingProviderSession.State;
}

void destroy for AppleDevice.RemovedInterfaceHandle(uint64_t a1)
{
  if (*(void *)(a1 + 56)) {
    swift_release(*(void *)(a1 + 64));
  }
}

uint64_t initializeWithCopy for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v5;
  uint64_t v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 40)  = v6;
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51)  = *(_DWORD *)(a2 + 51);
  uint64_t v8 = (_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  id v9 = v6;
  if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    *(void *)(a1 + 56)  = v7;
    *(void *)(a1 + 64)  = v10;
    swift_retain(v10);
  }

  else
  {
    *(_OWORD *)(a1 + 56)  = *v8;
  }

  return a1;
}

uint64_t assignWithCopy for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void **)(a2 + 40);
  id v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40)  = v8;
  id v10 = v8;

  int v11 = *(_DWORD *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  *(_DWORD *)(a1 + 51)  = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(a1 + 48)  = v11;
  uint64_t v13 = *(void *)(a2 + 56);
  if (!v12)
  {
    if (v13)
    {
      uint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a1 + 56)  = v13;
      *(void *)(a1 + 64)  = v16;
      swift_retain(v16);
      return a1;
    }

__n128 initializeWithTake for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)(a1 + 48)  = v4;
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t assignWithTake for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  uint64_t v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);

  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51)  = *(_DWORD *)(a2 + 51);
  if (!v8)
  {
    if (v7)
    {
      uint64_t v11 = *(void *)(a2 + 64);
      *(void *)(a1 + 56)  = v7;
      *(void *)(a1 + 64)  = v11;
      return a1;
    }

uint64_t getEnumTagSinglePayload for AppleDevice.RemovedInterfaceHandle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDevice.RemovedInterfaceHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.RemovedInterfaceHandle()
{
  return &type metadata for AppleDevice.RemovedInterfaceHandle;
}

unint64_t sub_100056AC8()
{
  unint64_t result = qword_100405D38;
  if (!qword_100405D38)
  {
    unint64_t result = swift_getWitnessTable("qB\n", &type metadata for AppleDevice.RemovedInterfaceHandle);
    atomic_store(result, (unint64_t *)&qword_100405D38);
  }

  return result;
}

uint64_t sub_100056B0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_100056B24(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_100056B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100056B34()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100056B60(nw_path *a1)
{
}

uint64_t sub_100056B6C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100056B8C( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(v7 + 40);
  swift_beginAccess(v14 + 72, v31, 0LL, 0LL);
  sub_1000226B0(v14 + 72, (uint64_t)v29, &qword_100405280);
  uint64_t v15 = v30;
  sub_1000225EC((uint64_t)v29, &qword_100405280);
  if (v15)
  {
    unint64_t v16 = sub_1000033FC();
    uint64_t v17 = swift_allocError(&type metadata for WiFiError, v16, 0LL, 0LL);
    *(_OWORD *)uint64_t v18 = xmmword_10033A9A0;
    *(_BYTE *)(v18 + swift_weakDestroy(v0 + 16) = 0;
    a4();
    return swift_errorRelease(v17);
  }

  else
  {
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject(&unk_1003DE098, 48LL, 7LL);
    *((void *)v20 + 2)  = a4;
    *((void *)v20 + 3)  = a5;
    *((void *)v20 + 4)  = a6;
    *((void *)v20 + 5)  = a7;
    uint64_t v21 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
    uint64_t v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x74656E7265746E69LL,  0xEF676E6972616853LL);
    uint64_t v23 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    uint64_t v24 = type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0LL);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    *(void *)(v22 + v23)  = sub_10003FCD0();
    uint64_t v25 = v22
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(void *)uint64_t v25 = 0LL;
    *(void *)(v25 + 8)  = 0LL;
    *(_BYTE *)(v25 + swift_weakDestroy(v0 + 16) = 2;
    unint64_t v26 = (void *)(v22
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *unint64_t v26 = a1;
    v26[1]  = a2;
    uint64_t v27 = (uint64_t (**)(uint64_t, uint64_t, char))(v22
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *uint64_t v27 = sub_100058D14;
    v27[1]  = v20;
    uint64_t v30 = v21;
    v29[0]  = v22;
    swift_beginAccess(v14 + 72, v28, 33LL, 0LL);
    swift_retain();
    swift_retain();
    sub_100057104((uint64_t)v29, v14 + 72, &qword_100405280);
    swift_endAccess(v28);
    swift_release(v14);
    sub_100055058();
    return swift_release(v22);
  }

uint64_t sub_100056DE8( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(v7 + 40);
  swift_beginAccess(v14 + 72, v31, 0LL, 0LL);
  sub_1000226B0(v14 + 72, (uint64_t)v29, &qword_100405280);
  uint64_t v15 = v30;
  sub_1000225EC((uint64_t)v29, &qword_100405280);
  if (v15)
  {
    unint64_t v16 = sub_1000033FC();
    uint64_t v17 = swift_allocError(&type metadata for WiFiError, v16, 0LL, 0LL);
    *(_OWORD *)uint64_t v18 = xmmword_10033A9A0;
    *(_BYTE *)(v18 + swift_weakDestroy(v0 + 16) = 0;
    a4();
    return swift_errorRelease(v17);
  }

  else
  {
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject(&unk_1003DDD78, 48LL, 7LL);
    *((void *)v20 + 2)  = a4;
    *((void *)v20 + 3)  = a5;
    *((void *)v20 + 4)  = a6;
    *((void *)v20 + 5)  = a7;
    uint64_t v21 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0LL);
    uint64_t v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0x74656E7265746E69LL,  0xEF676E6972616853LL);
    uint64_t v23 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    uint64_t v24 = type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0LL);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    *(void *)(v22 + v23)  = sub_10003FCD0();
    uint64_t v25 = v22
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(void *)uint64_t v25 = 0LL;
    *(void *)(v25 + 8)  = 0LL;
    *(_BYTE *)(v25 + swift_weakDestroy(v0 + 16) = 2;
    unint64_t v26 = (void *)(v22
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *unint64_t v26 = a1;
    v26[1]  = a2;
    uint64_t v27 = (uint64_t (**)(uint64_t, uint64_t, char))(v22
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *uint64_t v27 = sub_100058D14;
    v27[1]  = v20;
    uint64_t v30 = v21;
    v29[0]  = v22;
    swift_beginAccess(v14 + 72, v28, 33LL, 0LL);
    swift_retain();
    swift_retain();
    sub_100057104((uint64_t)v29, v14 + 72, &qword_100405280);
    swift_endAccess(v28);
    swift_release(v14);
    sub_100055058();
    return swift_release(v22);
  }

uint64_t sub_10005704C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100057070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100057080(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000570B8()
{
  return sub_100057E54(32LL);
}

uint64_t sub_1000570C0(nw_path *a1)
{
  return sub_100042A94(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000570C8()
{
  return sub_100057E54(32LL);
}

uint64_t sub_1000570D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000570E0()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100057104(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002274(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005714C()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_100057178()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000571A4()
{
  return sub_100057E54(32LL);
}

uint64_t sub_1000571AC(nw_path *a1)
{
  return sub_1000427EC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000571B4()
{
  return sub_100057E54(32LL);
}

uint64_t sub_1000571BC(nw_endpoint *a1)
{
  return sub_1000430A0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24)) & 1;
}

uint64_t sub_1000571D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000571EC()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100057264(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  sub_10004DE1C(a1, a2, v2 + v6, *(void *)v7, *(void *)(v7 + 8));
}

id sub_1000572C8()
{
  return [*(id *)(*(void *)(v0 + 16) + 48) updateSoftAPBand:*(unsigned __int8 *)(v0 + 24) + 1];
}

uint64_t sub_1000572E4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000022F8(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100057324(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

id sub_10005732C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_10005733C()
{
  return sub_1000421AC(v0);
}

uint64_t sub_100057344()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100057370()
{
  return sub_100120ADC(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10005737C(char a1)
{
  return sub_100042270(a1, v1);
}

uint64_t sub_100057384()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100057394()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000573C8(int a1, void *a2)
{
  return sub_10003F6DC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

char *sub_1000573D4(char *__source)
{
  uint64_t result = *(char **)(v1 + 16);
  if (result) {
    return (char *)strlcpy(result, __source, 0x10uLL);
  }
  __break(1u);
  return result;
}

uint64_t sub_100057410(nw_path *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL);
  return sub_100042D3C(a1, v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3), v2, v1[3]);
}

uint64_t sub_100057434()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000574A0(nw_endpoint *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL);
  return sub_100043E54(a1, v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3), v2, v1[3]);
}

uint64_t sub_1000574C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_1000574D0(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000LL) != 0)
    {
      __src  = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.copyMemory with negative count",  54LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1549LL,  0);
      __break(1u);
    }

    else
    {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }

  return __src;
}

uint64_t sub_100057550()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100057560()
{
  uint64_t v1 = type metadata accessor for DriverEvent(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release(*(void *)(v0 + 24));
  uint64_t v6 = v0 + v4;
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_100057D9C( *(void *)v6,  *(void *)(v6 + 8),  *(void *)(v6 + 16),  *(void *)(v6 + 24),  *(void *)(v6 + 32),  *(_BYTE *)(v6 + 40),  *(_BYTE *)(v6 + 41));
      break;
    case 1:
      uint64_t v11 = type metadata accessor for DriverEvent.AWDL(0LL);
      switch(swift_getEnumCaseMultiPayload(v0 + v4, v11))
      {
        case 1u:
          sub_100057AA0(*(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24));
          uint64_t v12 = v6 + *(int *)(sub_100002274(&qword_100405DE0) + 48);
          uint64_t v13 = (int *)type metadata accessor for AWDLActionFrame.Header(0LL);
          uint64_t v14 = v12 + v13[8];
          uint64_t v15 = type metadata accessor for DispatchTimeInterval(0LL);
          unint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL);
          v16(v14, v15);
          v16(v12 + v13[9], v15);
          swift_bridgeObjectRelease(*(void *)(v12 + v13[16]));
          break;
        case 2u:
          swift_bridgeObjectRelease(*(void *)(v6 + 80));
          swift_bridgeObjectRelease(*(void *)(v6 + 88));
          swift_bridgeObjectRelease(*(void *)(v6 + 96));
          swift_bridgeObjectRelease(*(void *)(v6 + 104));
          break;
        case 3u:
          uint64_t v17 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL);
          uint64_t v18 = v6 + *(int *)(v17 + 80);
          uint64_t v19 = type metadata accessor for DispatchTimeInterval(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(v18, v19);
          swift_bridgeObjectRelease(*(void *)(v6 + *(int *)(v17 + 144) + 8));
          uint64_t v20 = (void *)(v6 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL) + 20));
          swift_bridgeObjectRelease(v20[27]);
          swift_bridgeObjectRelease(v20[28]);
          swift_bridgeObjectRelease(v20[29]);
          swift_bridgeObjectRelease(v20[30]);
          swift_bridgeObjectRelease(v20[31]);
          swift_bridgeObjectRelease(v20[32]);
          swift_bridgeObjectRelease(v20[33]);
          swift_bridgeObjectRelease(v20[34]);
          swift_bridgeObjectRelease(v20[35]);
          swift_bridgeObjectRelease(v20[36]);
          swift_bridgeObjectRelease(v20[37]);
          swift_bridgeObjectRelease(v20[38]);
          swift_bridgeObjectRelease(v20[39]);
          swift_bridgeObjectRelease(v20[40]);
          swift_bridgeObjectRelease(v20[41]);
          swift_bridgeObjectRelease(v20[42]);
          swift_bridgeObjectRelease(v20[43]);
          swift_bridgeObjectRelease(v20[44]);
          break;
        case 6u:
          sub_100055CE4( *(void *)v6,  *(void *)(v6 + 8),  *(void *)(v6 + 16),  *(void *)(v6 + 24),  *(_BYTE *)(v6 + 32));
          break;
        case 8u:

          break;
        case 9u:
          uint64_t v21 = type metadata accessor for DispatchTimeInterval(0LL);
          uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL);
          v22(v0 + v4, v21);
          uint64_t v23 = type metadata accessor for AWDLIdleActivity(0LL);
          v22(v6 + *(int *)(v23 + 20), v21);
          break;
        default:
          goto LABEL_6;
      }

      break;
    case 0:
      __int16 v32 = *(_WORD *)(v6 + 360);
      __int128 v30 = *(_OWORD *)(v6 + 320);
      __int128 v31 = *(_OWORD *)(v6 + 336);
      __int128 v28 = *(_OWORD *)(v6 + 288);
      __int128 v29 = *(_OWORD *)(v6 + 304);
      __int128 v26 = *(_OWORD *)(v6 + 256);
      __int128 v27 = *(_OWORD *)(v6 + 272);
      __int128 v24 = *(_OWORD *)(v6 + 224);
      __int128 v25 = *(_OWORD *)(v6 + 240);
      sub_1000578CC( *(void *)v6,  *(void *)(v6 + 8),  *(void *)(v6 + 16),  *(void *)(v6 + 24),  *(void *)(v6 + 32),  *(void *)(v6 + 40),  *(void *)(v6 + 48),  *(void *)(v6 + 56),  *(void *)(v6 + 64),  *(void *)(v6 + 72),  *(void *)(v6 + 80),  *(void *)(v6 + 88),  *(void *)(v6 + 96),  *(void *)(v6 + 104),  *(void *)(v6 + 112),  *(void *)(v6 + 120),  *(void *)(v6 + 128),  *(void *)(v6 + 136),  *(void *)(v6 + 144),  *(void *)(v6 + 152),  *(void *)(v6 + 160),  *(void *)(v6 + 168),  *(void *)(v6 + 176),  *(void *)(v6 + 184),  *(void *)(v6 + 192),  *(void *)(v6 + 200),  *(void *)(v6 + 208),  *(void *)(v6 + 216),  v24,  *((uint64_t *)&v24 + 1),  v25,  *((uint64_t *)&v25 + 1),  v26,  *((uint64_t *)&v26 + 1),  v27,  *((uint64_t *)&v27 + 1),  v28,  *((uint64_t *)&v28 + 1),  v29,  *((uint64_t *)&v29 + 1),  v30,  *((uint64_t *)&v30 + 1),  v31,  *((uint64_t *)&v31 + 1),  *(void *)(v6 + 352),  v32,  SHIBYTE(v32));
      break;
  }

LABEL_6:
  unint64_t v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + v8));
  swift_release(*(void *)(v0 + v9));
  return swift_deallocObject(v0, ((((v9 + 11) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

      if ((v7 & ~v5) == 0) {
        goto LABEL_14;
      }
      unint64_t v8 = v1 + 1;
      if (__OFADD__(v1, 1LL))
      {
        __break(1u);
        goto LABEL_40;
      }

      ++v1;
      if ((unint64_t)(v8 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        uint64_t v1 = v8;
        goto LABEL_14;
      }
    }

    uint64_t v6 = __OFSUB__(v1, 8LL);
    if ((unint64_t)v1 < 8)
    {
      uint64_t v7 = 1 << v1;
      goto LABEL_6;
    }

    uint64_t v10 = 0;
    uint64_t v1 = 9LL;
    if (v6) {
      goto LABEL_34;
    }
LABEL_18:
    if (!v2)
    {
      uint64_t v11 = *((void *)v3 + 3);
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000LL) >= 0)
      {
        uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1LL;
        }
        else {
          uint64_t v13 = v12;
        }
        uint64_t v14 = sub_100002274(&qword_100406458);
        uint64_t v15 = (char *)swift_allocObject(v14, v13 + 32, 7LL);
        unint64_t v16 = 2 * j__malloc_size(v15) - 64;
        *((void *)v15 + 2)  = v13;
        *((void *)v15 + 3)  = v16;
        uint64_t v17 = v15 + 32;
        uint64_t v18 = *((void *)v3 + 3) >> 1;
        if (*((void *)v3 + 2))
        {
          uint64_t v19 = v3 + 32;
          if (v15 != v3 || v17 >= &v19[v18]) {
            memmove(v15 + 32, v19, v18);
          }
          *((void *)v3 + 2)  = 0LL;
        }

        uint64_t v4 = &v17[v18];
        uint64_t v2 = (v16 >> 1) - v18;
        uint64_t result = swift_release(v3);
        uint64_t v3 = v15;
        goto LABEL_29;
      }

    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    unint64_t v9 = -1;
    goto LABEL_7;
  }

  if (v6 == 1) {
    goto LABEL_6;
  }
  unint64_t v9 = 1;
  uint64_t result = swift_bridgeObjectRetain(v6);
LABEL_7:
  *(void *)a2  = v4;
  *(void *)(a2 + 8)  = v5;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a2 + 24)  = v6;
  *(_BYTE *)(a2 + 32)  = v9;
  return result;
}

      if (++v9 == v5)
      {
        swift_bridgeObjectRelease(v4);
        return 0x300000000LL;
      }
    }

    uint64_t v40 = v12[2];
    uint64_t v14 = p_base_meths[120];
    swift_bridgeObjectRetain(v3);
    if (v14 != (__objc2_meth_list *)-1LL) {
      swift_once(&qword_1004043C0, sub_100187C0C);
    }
    uint64_t v2 = (void *)v11[55];
    uint64_t v15 = v2[2];
    if (!v15)
    {
      uint64_t v2 = (void *)v3;
LABEL_5:
      swift_bridgeObjectRelease(v2);
      p_base_meths  = &WiFiP2PtvOSUIAgent.base_meths;
      uint64_t v11 = &unk_10040A000;
      goto LABEL_6;
    }

    uint64_t v34 = v8;
    uint64_t v35 = v7;
    uint64_t v37 = v13;
    uint64_t v38 = v3;
    id v36 = v5;
    unint64_t v16 = 0x801004u >> (8 * v13);
    uint64_t v17 = v2 + 4;
    swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v18 = 0LL;
    uint64_t v19 = v40;
    uint64_t v39 = v2;
    while (1)
    {
      uint64_t v23 = v18 + 1;
      if (__OFADD__(v18, 1LL)) {
        break;
      }
      if ((0x801004u >> (8 * LOBYTE(v17[2 * v18]))) == v16)
      {
        __int128 v24 = &v17[2 * v18];
        __int128 v25 = *((unsigned __int8 *)v24 + 1);
        __int128 v26 = (void *)v24[1];
        if (v25 == 6)
        {
          if (v19 != 6) {
            goto LABEL_27;
          }
        }

        else if (v25 == 5)
        {
          if (v19 != 5) {
            goto LABEL_27;
          }
        }

        else if (v25 != 4 || v19 != 4)
        {
          goto LABEL_27;
        }

        uint64_t v3 = v26[2];
        if (v3)
        {
          uint64_t v2 = v26 + 4;
          swift_bridgeObjectRetain_n(v24[1], 2LL);
          __int128 v28 = 0LL;
          while (1)
          {
            __int128 v29 = v2[2 * v28 + 1];
            __int128 v30 = *(void *)(v29 + 16);
            if (v30)
            {
              if (*(_DWORD *)(v29 + 32) == v6) {
                goto LABEL_57;
              }
              if (v30 != 1)
              {
                if (*(_DWORD *)(v29 + 36) == v6) {
                  goto LABEL_57;
                }
                if (v30 != 2)
                {
                  if (*(_DWORD *)(v29 + 40) == v6)
                  {
LABEL_57:
                    swift_bridgeObjectRelease(v26);
                    uint64_t v13 = v37;
                    uint64_t v3 = v38;
                    LOBYTE(v2)  = v40;
                    swift_bridgeObjectRelease(v4);
                    swift_bridgeObjectRelease_n(v39, 2LL);
                    uint64_t v4 = v26;
                    goto LABEL_58;
                  }

                  if (v30 != 3) {
                    break;
                  }
                }
              }
            }

  uint64_t v10 = 1;
  return v10 & 1;
}

          uint64_t v10 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }

      uint64_t v14 = v12 + 4;
      if (v14 < v27)
      {
        uint64_t v13 = *(void *)(v26 + 8 * v14);
        if (v13)
        {
          uint64_t v7 = v14;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v7 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_38;
          }
          if (v7 >= v27) {
            break;
          }
          uint64_t v13 = *(void *)(v26 + 8 * v7);
          ++v14;
          if (v13) {
            goto LABEL_22;
          }
        }
      }
    }

          unint64_t v9 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }

      uint64_t v13 = v11 + 4;
      if (v13 < v24)
      {
        uint64_t v12 = *(void *)(v23 + 8 * v13);
        if (v12)
        {
          uint64_t v6 = v13;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v6 = v13 + 1;
          if (__OFADD__(v13, 1LL)) {
            goto LABEL_37;
          }
          if (v6 >= v24) {
            break;
          }
          uint64_t v12 = *(void *)(v23 + 8 * v6);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }

          uint64_t v10 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }

      uint64_t v14 = v12 + 4;
      if (v14 < v27)
      {
        uint64_t v13 = *(void *)(v26 + 8 * v14);
        if (v13)
        {
          uint64_t v7 = v14;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v7 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_38;
          }
          if (v7 >= v27) {
            break;
          }
          uint64_t v13 = *(void *)(v26 + 8 * v7);
          ++v14;
          if (v13) {
            goto LABEL_22;
          }
        }
      }
    }

          unint64_t v9 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }

      uint64_t v13 = v11 + 4;
      if (v13 < v25)
      {
        uint64_t v12 = *(void *)(v24 + 8 * v13);
        if (v12)
        {
          uint64_t v6 = v13;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v6 = v13 + 1;
          if (__OFADD__(v13, 1LL)) {
            goto LABEL_32;
          }
          if (v6 >= v25) {
            break;
          }
          uint64_t v12 = *(void *)(v24 + 8 * v6);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }

          uint64_t v12 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }

      unint64_t v16 = v14 + 4;
      if (v16 < v31)
      {
        uint64_t v15 = *(void *)(v30 + 8 * v16);
        if (v15)
        {
          uint64_t v10 = v16;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v10 = v16 + 1;
          if (__OFADD__(v16, 1LL)) {
            goto LABEL_32;
          }
          if (v10 >= v31) {
            break;
          }
          uint64_t v15 = *(void *)(v30 + 8 * v10);
          ++v16;
          if (v15) {
            goto LABEL_22;
          }
        }
      }
    }

          unint64_t v8 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }

      uint64_t v12 = v10 + 4;
      if (v12 < v25)
      {
        uint64_t v11 = *(void *)(v24 + 8 * v12);
        if (v11)
        {
          uint64_t v6 = v12;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v6 = v12 + 1;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_32;
          }
          if (v6 >= v25) {
            break;
          }
          uint64_t v11 = *(void *)(v24 + 8 * v6);
          ++v12;
          if (v11) {
            goto LABEL_22;
          }
        }
      }
    }

          unint64_t v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }

      uint64_t v13 = v11 + 4;
      if (v13 < v7)
      {
        uint64_t v12 = *(void *)(v3 + 8 * v13);
        if (v12)
        {
          unint64_t v8 = v13;
          goto LABEL_22;
        }

        while (1)
        {
          unint64_t v8 = v13 + 1;
          if (__OFADD__(v13, 1LL)) {
            goto LABEL_28;
          }
          if (v8 >= v7) {
            break;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v8);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }

uint64_t sub_1000578CC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, char a47)
{
  switch(a47)
  {
    case 2:
    case 3:
    case 5:
    case 7:
    case 13:
      uint64_t result = a3;
      goto LABEL_3;
    case 6:
      uint64_t result = a4;
      goto LABEL_3;
    case 16:
      return sub_100057AA0(a4, a5, a6);
    case 18:
      LOBYTE(v47)  = a24;
      return sub_1000581C4( a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  v47,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
    case 19:
      swift_bridgeObjectRelease(a30);
      swift_bridgeObjectRelease(a31);
      swift_bridgeObjectRelease(a32);
      swift_bridgeObjectRelease(a33);
      swift_bridgeObjectRelease(a34);
      swift_bridgeObjectRelease(a35);
      swift_bridgeObjectRelease(a36);
      swift_bridgeObjectRelease(a37);
      swift_bridgeObjectRelease(a38);
      swift_bridgeObjectRelease(a39);
      swift_bridgeObjectRelease(a40);
      swift_bridgeObjectRelease(a41);
      swift_bridgeObjectRelease(a42);
      swift_bridgeObjectRelease(a43);
      uint64_t result = a45;
      goto LABEL_3;
    case 20:
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100057AA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >> 30)
  {
    a2  = a3;
  }

  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100057AC0( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20, char a21)
{
  uint64_t v21 = (a12 >> 60) & 3;
  switch((_DWORD)v21)
  {
    case 2:
      return sub_100057AA0(a2, a3, a4);
    case 1:
      return sub_100057B64( result,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12 & 0xCFFFFFFFFFFFFFFFLL,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21);
    case 0:
      return swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_100057B64( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20, char a21)
{
  if (a12 >> 62 == 2)
  {
    sub_100057CA0(a2, a3, a4);
    return sub_100020B40(a6, a7);
  }

  else if ((a12 >> 62) <= 1)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    sub_100057CA0(a9, a10, a11);
    sub_100020B40(a13, a14);
    return sub_100057CBC(a15, a16, a17, a18, a19, a20, a21);
  }

  return result;
}

uint64_t sub_100057CA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_1000208D8(a2, a3);
  }
  return result;
}

uint64_t sub_100057CBC( uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  if (a7 != -1) {
    return sub_100057CD0(result, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_100057CD0( uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a3);
      uint64_t result = a5;
      return swift_bridgeObjectRelease(result);
    case 1:
    case 7:
      return swift_bridgeObjectRelease(result);
    case 2:
    case 8:
      uint64_t result = a2;
      a2  = a3;
      goto LABEL_6;
    case 3:
      sub_1000208D8(a2, a3);
      uint64_t result = a4;
      a2  = a5;
      goto LABEL_6;
    case 5:
      sub_100057CA0(result, a2, a3);
      return sub_100020B40(a5, a6);
    case 6:
LABEL_6:
      uint64_t result = sub_1000208D8(result, a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100057D9C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, char a7)
{
  switch(a7)
  {
    case 5:
      return sub_100056B0C(a2, a3, a4, a5, a6);
    case 4:
      return swift_bridgeObjectRelease(a3);
    case 1:
      return swift_bridgeObjectRelease(result);
  }

  return result;
}

uint64_t sub_100057DE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for DriverEvent(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10003A00C( *(void (**)(uint64_t))(v0 + 16),  *(void *)(v0 + 24),  v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + v4),  *(_DWORD *)(v0 + ((v4 + 11) & 0xFFFFFFFFFFFFFFF8LL)),  *(_DWORD *)(v0 + ((v4 + 11) & 0xFFFFFFFFFFFFFFF8LL) + 4),  *(void *)(v0 + ((((v4 + 11) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100057E4C()
{
  return sub_100057E54(48LL);
}

uint64_t sub_100057E54(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_100057E8C()
{
  return sub_10003A264( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(_DWORD *)(v0 + 32),  *(_DWORD *)(v0 + 36),  *(void *)(v0 + 40));
}

uint64_t sub_100057E9C()
{
  return sub_100038F80(v0);
}

uint64_t sub_100057EA4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100057EC8(unsigned int a1, _BYTE *a2, unsigned int a3)
{
  return sub_1000319A8( a1,  a2,  a3,  *(uint64_t (**)(void, uint64_t, unint64_t))(v3 + 16),  *(void *)(v3 + 24),  *(void **)(v3 + 32),  *(void *)(v3 + 40));
}

uint64_t sub_100057ED4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 403)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100057EF0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 460)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100057F0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100057F28(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 264)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

unint64_t sub_100057F44()
{
  unint64_t result = qword_100405E30;
  if (!qword_100405E30)
  {
    uint64_t v1 = sub_1000022F8(&qword_100405E28);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> Slice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100405E30);
  }

  return result;
}

uint64_t sub_100057FA0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100057FB0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 62);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100057FCC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100057FE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005802C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100058068(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 4);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100058084(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 19;
  return result;
}

void *sub_100058090(const void *a1, void *a2)
{
  return a2;
}

uint64_t sub_1000580CC(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 21;
  return result;
}

uint64_t sub_1000580D8(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 20;
  return result;
}

uint64_t sub_1000580E4(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 17;
  return result;
}

uint64_t sub_1000580F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 993)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10005810C(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 16;
  return result;
}

uint64_t sub_100058118(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 15;
  return result;
}

uint64_t sub_100058124(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 90);
  int v2 = -4 - v1;
  if (v1 > 0x80000000) {
    return (v2 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100058148(uint64_t a1)
{
  LOBYTE(v3)  = *(_BYTE *)(a1 + 184);
  sub_1000581C4( *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  v3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100058250);
  return a1;
}

uint64_t sub_1000581C4( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v22 = a5 >> 16 == 4294967293 || a5 >> 17 == 0x7FFFFFFF;
  if (!v22 || (a12 & 0x3FFFFFFFFFFFFFFELL) != 0) {
    return a22(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t sub_100058250( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20, char a21)
{
  uint64_t v21 = (a12 >> 60) & 3;
  switch((_DWORD)v21)
  {
    case 2:
      return sub_10005852C(a2, a3, a4);
    case 1:
      return sub_1000582F4( result,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12 & 0xCFFFFFFFFFFFFFFFLL,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21);
    case 0:
      return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t sub_1000582F4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20, char a21)
{
  if (a12 >> 62 == 2)
  {
    sub_100058430(a2, a3, a4);
    return sub_10002255C(a6, a7);
  }

  else if ((a12 >> 62) <= 1)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    sub_100058430(a9, a10, a11);
    sub_10002255C(a13, a14);
    return sub_10005844C(a15, a16, a17, a18, a19, a20, a21);
  }

  return result;
}

uint64_t sub_100058430(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_100020AFC(a2, a3);
  }
  return result;
}

uint64_t sub_10005844C( uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  if (a7 != -1) {
    return sub_100058460(result, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_100058460( uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a3);
      uint64_t result = a5;
      return swift_bridgeObjectRetain(result);
    case 1:
    case 7:
      return swift_bridgeObjectRetain(result);
    case 2:
    case 8:
      uint64_t result = a2;
      a2  = a3;
      goto LABEL_6;
    case 3:
      sub_100020AFC(a2, a3);
      uint64_t result = a4;
      a2  = a5;
      goto LABEL_6;
    case 5:
      sub_100058430(result, a2, a3);
      return sub_10002255C(a5, a6);
    case 6:
LABEL_6:
      uint64_t result = sub_100020AFC(result, a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10005852C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >> 30)
  {
    a2  = a3;
  }

  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10005854C(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 18;
  return result;
}

uint64_t sub_100058558(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000585D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  if (a12 >> 16 != 4294967292 || (a19 & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    LOBYTE(v29)  = a28;
    return sub_1000581C4( a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  v29,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100057AC0);
  }

  return result;
}

uint64_t sub_100058678(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 14;
  return result;
}

uint64_t sub_100058684(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 13;
  return result;
}

uint64_t sub_100058690(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 12;
  return result;
}

uint64_t sub_10005869C(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 11;
  return result;
}

uint64_t sub_1000586A8(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 10;
  return result;
}

uint64_t sub_1000586B4(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 9;
  return result;
}

uint64_t sub_1000586C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002274(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100058704(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 2080)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100058720(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 8;
  return result;
}

uint64_t sub_10005872C(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 7;
  return result;
}

uint64_t sub_100058738(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 6;
  return result;
}

uint64_t sub_100058744(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 5;
  return result;
}

uint64_t sub_100058750(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 3;
  return result;
}

uint64_t sub_10005875C(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 2;
  return result;
}

uint64_t sub_100058768(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 1;
  return result;
}

uint64_t sub_100058774(uint64_t result)
{
  *(_BYTE *)(result + 361)  = 0;
  return result;
}

void sub_10005877C(_BYTE *a1)
{
  a1[2080]  = 1;
}

uint64_t sub_1000587A8(uint64_t result)
{
  *(_BYTE *)(result + 2080)  = 0;
  return result;
}

double sub_1000587B0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(void *)(a1 + 80)  = 0LL;
  *(void *)(a1 + 88)  = 0xFFFFFFFC0000LL;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 201)  = 0u;
  return result;
}

void sub_1000587E0(_BYTE *a1)
{
  a1[993]  = 1;
}

uint64_t sub_10005880C(uint64_t result)
{
  *(_BYTE *)(result + 993)  = 0;
  return result;
}

void sub_100058814(void *a1)
{
  *a1  = 0x200000000LL;
  bzero(a1 + 1, 0xF18uLL);
}

void sub_100058824(_OWORD *a1)
{
  *a1  = xmmword_10033A9E0;
  bzero(a1 + 1, 0x640uLL);
}

double sub_100058838(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(void *)(a1 + 48)  = 0LL;
  *(void *)(a1 + 56)  = 0x2000000000000LL;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  return result;
}

double sub_100058864(uint64_t a1)
{
  *(void *)(a1 + 256)  = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 224)  = 0u;
  *(_OWORD *)(a1 + 240)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 208)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  *(_BYTE *)(a1 + 264)  = 1;
  return result;
}

uint64_t sub_100058898(uint64_t result)
{
  *(_BYTE *)(result + 264)  = 0;
  return result;
}

double sub_1000588A0(uint64_t a1)
{
  *(void *)(a1 + 176)  = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(_BYTE *)(a1 + 184)  = 1;
  return result;
}

uint64_t sub_1000588CC(uint64_t result)
{
  *(_BYTE *)(result + 184)  = 0;
  return result;
}

double sub_1000588D4(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 4swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(a1 + 432)  = 0u;
  *(_OWORD *)(a1 + 384)  = 0u;
  *(_OWORD *)(a1 + 400)  = 0u;
  *(_OWORD *)(a1 + 352)  = 0u;
  *(_OWORD *)(a1 + 368)  = 0u;
  *(_OWORD *)(a1 + 320)  = 0u;
  *(_OWORD *)(a1 + 336)  = 0u;
  *(_OWORD *)(a1 + 288)  = 0u;
  *(_OWORD *)(a1 + 304)  = 0u;
  *(_OWORD *)(a1 + 256)  = 0u;
  *(_OWORD *)(a1 + 272)  = 0u;
  *(_OWORD *)(a1 + 224)  = 0u;
  *(_OWORD *)(a1 + 240)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 208)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(a1 + 444)  = 0u;
  *(_BYTE *)(a1 + 460)  = 1;
  return result;
}

uint64_t sub_100058924(uint64_t result)
{
  *(_BYTE *)(result + 460)  = 0;
  return result;
}

double sub_10005892C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 368)  = 0u;
  *(_OWORD *)(a1 + 384)  = 0u;
  *(_OWORD *)(a1 + 336)  = 0u;
  *(_OWORD *)(a1 + 352)  = 0u;
  *(_OWORD *)(a1 + 304)  = 0u;
  *(_OWORD *)(a1 + 320)  = 0u;
  *(_OWORD *)(a1 + 272)  = 0u;
  *(_OWORD *)(a1 + 288)  = 0u;
  *(_OWORD *)(a1 + 240)  = 0u;
  *(_OWORD *)(a1 + 256)  = 0u;
  *(_OWORD *)(a1 + 208)  = 0u;
  *(_OWORD *)(a1 + 224)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(_DWORD *)(a1 + 399)  = 0;
  *(_BYTE *)(a1 + 403)  = 1;
  return result;
}

uint64_t sub_100058978(uint64_t result)
{
  *(_BYTE *)(result + 403)  = 0;
  return result;
}

uint64_t sub_100058980@<X0>(const char *a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  size_t v7 = v2[4];
  unint64_t v8 = (uint64_t (*)(_BYTE *, void))swift_modifyAtWritableKeyPath(v12, v5, v6);
  size_t v10 = strlcpy(v9, a1, v7);
  uint64_t result = v8(v12, 0LL);
  *a2  = v10;
  return result;
}

uint64_t sub_1000589F8(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32)  = *((void *)a1 + 4);
  *(_OWORD *)a2  = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_100058A10()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100058A44()
{
  return sub_100038A64( (void *)(v0 + 16),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80));
}

uint64_t sub_100058A58()
{
  if (*(void *)(v0 + 80)) {
    swift_release(*(void *)(v0 + 88));
  }
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100058AA4()
{
  return sub_100031B8C(*(void (**)(_BYTE *))(v0 + 80), *(void *)(v0 + 88));
}

void *sub_100058ACC(void *a1)
{
  uint64_t v2 = a1[1];
  __int128 v3 = (void *)a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  swift_bridgeObjectRetain(a1[4]);
  id v6 = v3;
  swift_bridgeObjectRetain(v2);
  sub_10002254C(v4, v5);
  return a1;
}

uint64_t sub_100058B28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_100021018(v4, v5);
  return a1;
}

uint64_t sub_100058B84()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  if (*(void *)(v0 + 72)) {
    swift_release(*(void *)(v0 + 80));
  }
  uint64_t v5 = (v3 + 88) & ~v3;
  unint64_t v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  swift_release(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v3 | 7);
}

void sub_100058C48()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 88LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10003639C( v0 + 16,  v0 + v2,  *(void *)(v0 + v3),  *(void **)(v0 + v3 + 8),  *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100058C9C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100058CC8()
{
  return sub_100035828(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100058CD0(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100058D38@<X0>(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_10003BB6C(a1, a2);
}

uint64_t IDPool.init()(uint64_t a1, uint64_t a2)
{
  return Set.init()(a1, *(void *)(*(void *)(a2 + 8) + 16LL));
}

uint64_t IDPool.init(ignoring:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Set.init()(a2, *(void *)(*(void *)(a3 + 8) + 16LL));
}

uint64_t IDPool.availableID()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v95 = *(void *)(v3 + 8);
  uint64_t v4 = *(void *)(v95 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v2,  &protocol requirements base descriptor for Strideable,  &associated type descriptor for Strideable.Stride);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for FixedWidthInteger,  &associated conformance descriptor for FixedWidthInteger.Strideable.Stride: SignedInteger);
  uint64_t v7 = type metadata accessor for ClosedRange<>.Index(0LL, v2, v4, AssociatedConformanceWitness);
  uint64_t v98 = *(void *)(v7 - 8);
  uint64_t v99 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v96 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v80 - v10;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2(0LL, v2, v2, "lower upper ", 0LL);
  uint64_t v12 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v84 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v91 = (char *)&v80 - v15;
  uint64_t v101 = *(void *)(v2 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  id v94 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v93 = (char *)&v80 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v92 = (char *)&v80 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  __int128 v24 = (char *)&v80 - v23;
  __chkstk_darwin(v22);
  __int128 v26 = (char *)&v80 - v25;
  uint64_t v27 = *(void *)(v4 + 8);
  uint64_t v28 = type metadata accessor for ClosedRange(0LL, v2, v27);
  uint64_t v90 = *(void *)(v28 - 8);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v85 = (char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29);
  uint64_t i = (char *)&v80 - v31;
  uint64_t v100 = v4;
  uint64_t v107 = v4;
  uint64_t v108 = AssociatedConformanceWitness;
  uint64_t v104 = AssociatedConformanceWitness;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v28);
  uint64_t v105 = v28;
  uint64_t v88 = type metadata accessor for IndexingIterator(0LL, v28, WitnessTable);
  uint64_t v87 = *(void *)(v88 - 8);
  uint64_t v33 = __chkstk_darwin(v88);
  uint64_t v86 = (char *)&v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33);
  uint64_t v106 = (char *)&v80 - v35;
  dispatch thunk of static FixedWidthInteger.min.getter(v2, v3);
  dispatch thunk of static FixedWidthInteger.max.getter(v2, v3);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)(v26, v24, v2, v27);
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v37 = TupleTypeMetadata2;
  uint64_t v38 = v91;
  uint64_t v39 = &v91[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v40 = v101;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
  uint64_t v81 = v26;
  v41(v91, v26, v2);
  uint64_t v82 = v24;
  v41(v39, v24, v2);
  char v42 = v84;
  nw_interface_t v43 = &v84[*(int *)(v37 + 48)];
  uint64_t v44 = v105;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v45(v84, v38, v2);
  uint64_t v80 = v45;
  v45(v43, v39, v2);
  uint64_t v46 = v85;
  v41(v85, v42, v2);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v40 + 8);
  v47(v43, v2);
  uint64_t v48 = &v42[*(int *)(TupleTypeMetadata2 + 48)];
  v41(v42, v38, v2);
  v41(v48, v39, v2);
  id v49 = &v46[*(int *)(v44 + 36)];
  TupleTypeMetadata2  = (uint64_t)v41;
  v41(v49, v48, v2);
  uint64_t v91 = (char *)v47;
  v47(v42, v2);
  uint64_t v50 = i;
  uint64_t v51 = v90;
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(i, v46, v44);
  uint64_t v52 = v86;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v86, v50, v44);
  uint64_t v53 = v104;
  ClosedRange<>.startIndex.getter(v44, v100, v104);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v44);
  uint64_t v54 = v88;
  uint64_t v55 = &v52[*(int *)(v88 + 36)];
  uint64_t v56 = v98;
  uint64_t v90 = *(void *)(v98 + 32);
  ((void (*)(char *, char *, uint64_t))v90)(v55, v11, v99);
  io_connect_t v57 = v106;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v106, v52, v54);
  uint64_t v58 = &v57[*(int *)(v54 + 36)];
  uint64_t v59 = v44;
  uint64_t v60 = v53;
  uint64_t v103 = v11;
  for (i = v58; ; uint64_t v58 = i)
  {
    uint64_t v62 = v100;
    ClosedRange<>.endIndex.getter(v59, v100, v60);
    char v63 = static ClosedRange<>.Index.== infix(_:_:)(v58, v11, v2, v62, v60);
    uint64_t v64 = *(void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v65 = v99;
    v64(v11, v99);
    if ((v63 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v87 + 8))(v106, v88);
      uint64_t v75 = 1LL;
      uint64_t v76 = v83;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v76, v75, 1LL, v2);
    }

    unint64_t v66 = v96;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v96, v58, v65);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 48))(v66, 1LL, v2);
    if ((_DWORD)result == 1) {
      goto LABEL_15;
    }
    uint64_t v67 = v65;
    uint64_t v68 = v93;
    int v69 = (void (*)(char *, char *, uint64_t))TupleTypeMetadata2;
    ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v93, v66, v2);
    uint64_t v70 = v92;
    v69(v92, v68, v2);
    int64_t v71 = v103;
    ClosedRange<>.index(after:)(v58, v105, v62, v104);
    v64(v58, v67);
    ((void (*)(char *, char *, uint64_t))v90)(v58, v71, v67);
    uint64_t v72 = v94;
    v69(v94, v70, v2);
    uint64_t v73 = v102[1];
    if (!v73) {
      break;
    }
    swift_bridgeObjectRetain(v102[1]);
    uint64_t v61 = *(void *)(v95 + 16);
    char v74 = Set.contains(_:)(v72, v73, v2, v61);
    swift_bridgeObjectRelease(v73);
    uint64_t v56 = v98;
    if ((v74 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_5:
    ((void (*)(char *, uint64_t))v91)(v72, v2);
    uint64_t v11 = v103;
    uint64_t v60 = v104;
    uint64_t v59 = v105;
  }

  uint64_t v61 = *(void *)(v95 + 16);
  uint64_t v56 = v98;
LABEL_4:
  if ((Set.contains(_:)(v72, *v102, v2, v61) & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v77 = v82;
  v80(v82, v72, v2);
  uint64_t v78 = type metadata accessor for Set(0LL, v2, v61);
  uint64_t v79 = v81;
  Set.insert(_:)(v81, v77, v78);
  ((void (*)(char *, uint64_t))v91)(v79, v2);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v106, v88);
  uint64_t v76 = v83;
  ((void (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2)(v83, v72, v2);
  uint64_t v75 = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v76, v75, 1LL, v2);
}

uint64_t IDPool.giveBack(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Optional(0LL, v4);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = type metadata accessor for Set(0LL, v4, *(void *)(*(void *)(*(void *)(a2 + 24) + 8LL) + 16LL));
  Set.remove(_:)(a1, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t IDPool.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a1;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2(0LL, a3, a3, "lower upper ", 0LL);
  uint64_t v7 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v55 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v52 - v10;
  uint64_t v12 = *(void **)(a3 - 8);
  uint64_t v13 = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v62 = a4;
  uint64_t v18 = *(void *)(a4 + 8);
  uint64_t v58 = *(void *)(v18 + 32);
  uint64_t v19 = *(void *)(v58 + 8);
  uint64_t v20 = type metadata accessor for ClosedRange(0LL, a3, v19);
  uint64_t v59 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  io_connect_t v57 = (char *)&v52 - v24;
  uint64_t v60 = v18;
  if (a2) {
    uint64_t v54 = Set.count.getter(a2, a3, *(void *)(v18 + 16));
  }
  else {
    uint64_t v54 = 0LL;
  }
  uint64_t v25 = v62;
  dispatch thunk of static FixedWidthInteger.min.getter(a3, v62);
  dispatch thunk of static FixedWidthInteger.max.getter(a3, v25);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)(v17, v15, a3, v19);
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v53 = v20;
  uint64_t v27 = v55;
  uint64_t v28 = TupleTypeMetadata2;
  uint64_t v29 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v30 = (void (*)(char *, char *, uint64_t))v12[4];
  v30(v11, v17, a3);
  v30(v29, v15, a3);
  uint64_t v31 = &v27[*(int *)(v28 + 48)];
  __int16 v32 = (void (*)(char *, char *, uint64_t))v12[2];
  v32(v27, v11, a3);
  v32(v31, v29, a3);
  v30(v23, v27, a3);
  uint64_t v33 = (void (*)(char *, uint64_t))v12[1];
  v33(v31, a3);
  uint64_t v34 = &v27[*(int *)(v28 + 48)];
  v30(v27, v11, a3);
  v30(v34, v29, a3);
  uint64_t v35 = v53;
  v30(&v23[*(int *)(v53 + 36)], v34, a3);
  v33(v27, a3);
  uint64_t v36 = v59;
  uint64_t v37 = v57;
  uint64_t v38 = v23;
  uint64_t v39 = v35;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v57, v38, v35);
  uint64_t v40 = v58;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v58,  a3,  &protocol requirements base descriptor for Strideable,  &associated type descriptor for Strideable.Stride);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v62,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for FixedWidthInteger,  &associated conformance descriptor for FixedWidthInteger.Strideable.Stride: SignedInteger);
  uint64_t v66 = v40;
  uint64_t v67 = AssociatedConformanceWitness;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v39);
  uint64_t v44 = Collection.count.getter(v39, WitnessTable);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v39);
  uint64_t result = Set.count.getter(v61, a3, *(void *)(v60 + 16));
  uint64_t v45 = v44 - result;
  if (__OFSUB__(v44, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v46 = v45 - v54;
  if (!__OFSUB__(v45, v54))
  {
    uint64_t v64 = 0LL;
    unint64_t v65 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    unint64_t v47 = v65;
    uint64_t v63 = v46;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease(v47);
    uint64_t v64 = v48;
    unint64_t v65 = v50;
    v51._countAndFlagsBits  = 0x62616C6961766120LL;
    v51._object  = (void *)0xEE0073444920656CLL;
    String.append(_:)(v51);
    return v64;
  }

uint64_t IDPool.customMirror.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v26[0]  = a5;
  uint64_t v9 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v29[0]  = a1;
  v29[1]  = a2;
  uint64_t v16 = sub_100002274(qword_100405EA0);
  uint64_t v17 = swift_allocObject(v16, 80LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_100339900;
  *(void *)(v17 + 32)  = 1684370293LL;
  *(void *)(v17 + 40)  = 0xE400000000000000LL;
  uint64_t v18 = *(void *)(*(void *)(a4 + 8) + 16LL);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (Set.count.getter(a1, a3, v18) <= 10)
  {
    uint64_t v21 = (void *)type metadata accessor for Set(0LL, a3, v18);
    swift_bridgeObjectRetain(a1);
  }

  else
  {
    v26[1]  = Set.count.getter(a1, a3, v18);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v28 = v19;
    v20._countAndFlagsBits  = 0x657375206E6920LL;
    v20._object  = (void *)0xE700000000000000LL;
    String.append(_:)(v20);
    a1  = v27;
    *(void *)(v17 + 56)  = v28;
    uint64_t v21 = &type metadata for String;
  }

  *(void *)(v17 + 72)  = v21;
  *(void *)(v17 + 48)  = a1;
  uint64_t v22 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v15, 1LL, 1LL, v22);
  uint64_t v24 = type metadata accessor for IDPool(0LL, a3, a4, v23);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for Mirror.AncestorRepresentation.generated(_:),  v9);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v29, v17, v15, v12, v24);
}

uint64_t sub_100059D98(uint64_t a1)
{
  return IDPool.description.getter(*v1, v1[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_100059DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IDPool.customMirror.getter(*v2, v2[1], *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t type metadata accessor for IDPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IDPool);
}

uint64_t sub_100059DC8(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *sub_100059DF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *sub_100059E24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[1];
  a1[1]  = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void *sub_100059E80(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1  = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.ServiceRejection(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.ServiceRejection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t LongTermPairingKeyStore.__allocating_init(keychain:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v4 = *(void *)v3;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + 80) - 8LL) + 32LL))( v3 + *(void *)(*(void *)v3 + 104LL),  a1);
  return v3;
}

uint64_t *LongTermPairingKeyStore.init(keychain:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 32LL))( (uint64_t)v1 + *(void *)(*v1 + 104),  a1);
  return v1;
}

uint64_t sub_10005A07C(uint64_t a1, uint64_t a2, void *a3)
{
  char v6 = sub_1001266B8( v3 + *(void *)(*(void *)v3 + 104LL),  a2,  (uint64_t)a3,  *(void *)(*(void *)v3 + 80LL),  *(void *)(*(void *)v3 + 88LL));
  uint64_t v7 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  if ((v6 & 1) == 0)
  {
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v10 = 136315138;
      unint64_t v19 = 0xE100000000000000LL;
      uint64_t v20 = v11;
      swift_bridgeObjectRetain(a3);
      v15._countAndFlagsBits  = a2;
      v15._object  = a3;
      String.append(_:)(v15);
      v16._countAndFlagsBits  = 39LL;
      v16._object  = (void *)0xE100000000000000LL;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(a3);
      uint64_t v18 = sub_10000235C(39LL, 0xE100000000000000LL, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_bridgeObjectRelease(0xE100000000000000LL);
      uint64_t v14 = "Failed to install new pairing keys for %s";
      goto LABEL_6;
    }

Swift::Void __swiftcall LongTermPairingKeyStore.installNewKeysToKeychainIfNecessary(for:)(CoreP2P::NANServiceName a1)
{
  object  = (uint64_t *)a1.string._object;
  countAndFlagsBits  = (void (*)(uint64_t, uint64_t, uint64_t))a1.string._countAndFlagsBits;
  uint64_t v3 = sub_100002274(&qword_10040D480);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)(countAndFlagsBits, object, 1, (uint64_t)v5);
  sub_10005ABA4((uint64_t)v5);
}

uint64_t LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)@<X0>( void (*a1)(uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  int v56 = a3;
  io_connect_t v57 = a1;
  uint64_t v8 = (void *)*v4;
  uint64_t v49 = type metadata accessor for SymmetricKeySize(0LL);
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  Swift::String v51 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for UUID(0LL);
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v46 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  __chkstk_darwin(v45);
  uint64_t v54 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v53 = (uint64_t)&v44 - v17;
  uint64_t v18 = v8[10];
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100002274(&qword_10040D480);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = v8[13];
  uint64_t v55 = v5;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, (char *)v5 + v25, v18);
  uint64_t v26 = v8[11];
  swift_bridgeObjectRetain(a2);
  uint64_t v27 = (uint64_t)v21;
  uint64_t v28 = a2;
  uint64_t v29 = v57;
  sub_10012691C(v27, v57, v28, v18, v26, (uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v24, 1LL, v12) == 1)
  {
    uint64_t v30 = sub_10005ABA4((uint64_t)v24);
    if ((v56 & 1) != 0)
    {
      uint64_t v31 = v46;
      UUID.init()(v30);
      uint64_t v32 = a4;
      if (qword_1004042F0 != -1) {
        swift_once(&qword_1004042F0, sub_100127590);
      }
      uint64_t v33 = v49;
      uint64_t v34 = sub_1000032DC(v49, (uint64_t)qword_1004089F8);
      uint64_t v35 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v51, v34, v33);
      type metadata accessor for LongTermPairingKeys.Identity(0LL);
      uint64_t v36 = (uint64_t)v54;
      SymmetricKey.init(size:)(v35);
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v36, v31, v50);
      P256.Signing.PrivateKey.init(compactRepresentable:)(1LL);
      uint64_t v37 = (uint64_t)v52;
      Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360AA0LL);
      sub_10005ABE4(v36, v37 + *(int *)(v12 + 20));
      uint64_t v38 = type metadata accessor for LongTermPairingKeys.PairedDevices();
      memset(v58, 0, sizeof(v58));
      uint64_t v59 = 0LL;
      swift_allocObject(v38, 112LL, 7LL);
      uint64_t v39 = sub_10012B730(0LL, 0LL, (uint64_t)v58);
      sub_10005802C(v36, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
      *(void *)(v37 + *(int *)(v12 + swift_release(*(void *)(v0 + 24)) = v39;
      uint64_t v40 = v53;
      sub_10005AC28(v37, v53);
      LOBYTE(v39)  = sub_10005A07C(v40, (uint64_t)v29, v28);
      sub_10005802C(v40, type metadata accessor for LongTermPairingKeys);
      if ((v39 & 1) != 0) {
        return LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)(v29, v28, 0LL);
      }
      char v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      uint64_t v43 = v32;
    }

    else
    {
      char v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      uint64_t v43 = a4;
    }

    return v42(v43, 1LL, 1LL, v12);
  }

  else
  {
    sub_10005AC28((uint64_t)v24, a4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a4, 0LL, 1LL, v12);
  }

uint64_t LongTermPairingKeyStore.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v0;
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v10 = type metadata accessor for LongTermPairingKeyStore(0LL, *(void *)(v1 + 80), *(void *)(v1 + 88), v9);
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  uint64_t v12 = sub_10005AC9C((unint64_t *)&qword_10040C630, &qword_100405DC0);
  sub_1000E6DCC((uint64_t)v4);
  swift_retain();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v7, v4, v10, v11, v12);
}

uint64_t *LongTermPairingKeyStore.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + qword_100410658;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 104));
  return v0;
}

uint64_t LongTermPairingKeyStore.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10005A9D0()
{
  return LongTermPairingKeyStore.customMirror.getter();
}

BOOL LongTermPairingKeys.AuthenticationType.init(apiAuthenticationType:)(uint64_t a1)
{
  return a1 != 1;
}

BOOL LongTermPairingKeys.AuthenticationType.init(rawValue:)(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6D68, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

_UNKNOWN **static LongTermPairingKeys.AuthenticationType.allCases.getter()
{
  return &off_1003D6DA0;
}

uint64_t LongTermPairingKeys.AuthenticationType.rawValue.getter()
{
  return 0x6E6961686379656BLL;
}

uint64_t sub_10005AA64@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits  = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object  = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D63E8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2  = v5 != 0;
  return result;
}

void sub_10005AAB4(void *a1@<X8>)
{
  *a1  = 0x6E6961686379656BLL;
  a1[1]  = 0xE800000000000000LL;
}

void sub_10005AAD0(void *a1@<X8>)
{
  *a1  = &off_1003D6DC8;
}

Swift::Int sub_10005AAE0()
{
  return Hasher._finalize()();
}

uint64_t sub_10005AB30(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6E6961686379656BLL, 0xE800000000000000LL);
}

Swift::Int sub_10005AB48(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t Optional<A>.attributeFilter.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 3LL;
  }
  else {
    return 2LL;
  }
}

uint64_t sub_10005ABA4(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_10040D480);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10005ABE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005AC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LongTermPairingKeyStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LongTermPairingKeyStore);
}

uint64_t sub_10005AC78()
{
  return sub_10005AC9C(&qword_100405F28, &qword_100405F30);
}

uint64_t sub_10005AC9C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000022F8(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10005ACE0()
{
  unint64_t result = qword_100405F38[0];
  if (!qword_100405F38[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LongTermPairingKeys.AuthenticationType,  &type metadata for LongTermPairingKeys.AuthenticationType);
    atomic_store(result, qword_100405F38);
  }

  return result;
}

uint64_t sub_10005AD28(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[0]  = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
    if (v4 <= 0x3F)
    {
      v5[1]  = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v5, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t _s18AuthenticationTypeOwst(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10005ADF4 + 4 * byte_10033AA90[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10005AE14 + 4 * byte_10033AA95[v4]))();
  }
}

_BYTE *sub_10005ADF4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10005AE14(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10005AE1C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10005AE24(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10005AE2C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10005AE34(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LongTermPairingKeys.AuthenticationType()
{
  return &type metadata for LongTermPairingKeys.AuthenticationType;
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  uint64_t v2 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = 0;
  return v1;
}

Swift::Void __swiftcall Lock.lock()()
{
}

Swift::Void __swiftcall Lock.unlock()()
{
}

uint64_t Lock.init()()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = 0;
  return v0;
}

uint64_t Lock.deinit()
{
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

Swift::Bool __swiftcall Lock.tryLock()()
{
  return os_unfair_lock_trylock(*(os_unfair_lock_t *)(v0 + 16));
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreP2P4Lock);
}

BOOL sub_10005AF58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10005AF6C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P13NANReasonCodeO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

Swift::Int sub_10005AF94()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10005AFD8()
{
}

Swift::Int sub_10005B000(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10005B040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10005B44C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10005B09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10005B44C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANReasonCode.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005B11C + 4 * aY_6[a1]))( 0x6465767265736572LL,  0xE800000000000000LL);
}

uint64_t sub_10005B11C()
{
  return 0x6669636570736E75LL;
}

unint64_t sub_10005B13C()
{
  return 0xD000000000000013LL;
}

uint64_t sub_10005B284()
{
  return NANReasonCode.description.getter(*v0);
}

uint64_t _s7CoreP2P13NANReasonCodeO8rawValueACSgs5UInt8V_tcfC_0(uint64_t result)
{
  else {
    return result;
  }
}

unint64_t sub_10005B2A4()
{
  unint64_t result = qword_100406060;
  if (!qword_100406060)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_100406060);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for NANReasonCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for NANReasonCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_10005B3C4 + 4 * byte_10033AC1B[v4]))();
  }
  *a1  = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10005B3F8 + 4 * byte_10033AC16[v4]))();
}

uint64_t sub_10005B3F8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10005B400(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10005B408LL);
  }
  return result;
}

uint64_t sub_10005B414(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10005B41CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_10005B420(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10005B428(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

_BYTE *sub_10005B434(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NANReasonCode()
{
  return &type metadata for NANReasonCode;
}

unint64_t sub_10005B44C()
{
  unint64_t result = qword_100406068;
  if (!qword_100406068)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_100406068);
  }

  return result;
}

void *NANPMK.length.unsafeMutableAddressor()
{
  return &static NANPMK.length;
}

uint64_t static NANBitmap.Band.ghz_60.getter()
{
  return 32LL;
}

uint64_t NANPMK.init(pmk:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t NANPMK.init(from:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (uint64_t)sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    sub_1000237C8((uint64_t)v9, v10);
    uint64_t v5 = UnkeyedDecodingContainer.decodeData(with:)(32LL, v6, v7);
    sub_100002AC4(v9);
  }

  sub_100002AC4(a1);
  return v5;
}

uint64_t static NANPMK.zero.getter()
{
  uint64_t v0 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  __DataStorage.init(length:)(32LL);
  return 0x2000000000LL;
}

void sub_10005B644()
{
}

uint64_t sub_10005B66C()
{
  return 1635017060LL;
}

void sub_10005B680(_BYTE *a1@<X8>)
{
  *a1  = 1;
}

uint64_t sub_10005B68C(uint64_t a1)
{
  unint64_t v2 = sub_10005CD34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005B6B4(uint64_t a1)
{
  unint64_t v2 = sub_10005CD34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPMK.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10005CA68( a1,  a2,  a3,  &qword_100406080,  (uint64_t (*)(void))sub_10005CD34,  (uint64_t)&type metadata for NANPMK.CodingKeys);
}

uint64_t sub_10005B718@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v5, v6);
  if (v2) {
    return sub_100002AC4(a1);
  }
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  sub_1000237C8((uint64_t)v13, v14);
  uint64_t v9 = UnkeyedDecodingContainer.decodeData(with:)(32LL, v7, v8);
  uint64_t v11 = v10;
  sub_100002AC4(v13);
  uint64_t result = sub_100002AC4(a1);
  *a2  = v9;
  a2[1]  = v11;
  return result;
}

uint64_t sub_10005B7E8(void *a1)
{
  return NANPMK.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10005B800()
{
  uint64_t result = sub_1000EF90C(0x204B4D50204E414ELL, 0xEC000000656D614ELL);
  qword_100406070  = result;
  *(void *)algn_100406078  = v1;
  return result;
}

uint64_t NANPMK.pmkid(for:initiatorAddress:responderAddress:serviceName:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v7 = 1 << a1;
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x55) != 0) {
    return sub_10005B874(v8, v9, a4, a5, a6, a7);
  }
  else {
    return sub_10005BD90(v8, v9, a4, a5, a6, a7);
  }
}

uint64_t sub_10005B874( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v63 = a5;
  unint64_t v64 = a6;
  uint64_t v54 = a4;
  uint64_t v52 = a3;
  uint64_t v8 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v66 = *(void *)(v8 - 8);
  uint64_t v67 = v8;
  __chkstk_darwin(v8);
  unint64_t v65 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  __chkstk_darwin(v10);
  int v56 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = type metadata accessor for SHA256(0LL);
  uint64_t v55 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v53 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100002274(&qword_1004060E8);
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  __chkstk_darwin(v13);
  uint64_t v60 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1004040C0 != -1) {
    swift_once(&qword_1004040C0, sub_10005B800);
  }
  unint64_t v51 = a2 >> 40;
  unint64_t v50 = HIDWORD(a2);
  unint64_t v49 = a2 >> 24;
  unint64_t v48 = a2 >> 16;
  unint64_t v47 = a2 >> 8;
  unint64_t v45 = a1 >> 40;
  uint64_t v15 = qword_100406070;
  unint64_t v16 = *(void *)algn_100406078;
  uint64_t v17 = sub_100002274(&qword_1004040A8);
  uint64_t v18 = swift_allocObject(v17, 38LL, 7LL);
  __int128 v46 = xmmword_10033A980;
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_10033A980;
  *(_WORD *)(v18 + 32)  = a1;
  *(_BYTE *)(v18 + 34)  = BYTE2(a1);
  *(_BYTE *)(v18 + 35)  = BYTE3(a1);
  *(_BYTE *)(v18 + 36)  = BYTE4(a1);
  *(_BYTE *)(v18 + 37)  = v45;
  sub_100020AFC(v15, v16);
  uint64_t v19 = sub_1000FB08C(v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease(v18);
  *(void *)&__int128 v70 = v15;
  *((void *)&v70 + 1)  = v16;
  sub_100020AFC(v15, v16);
  sub_1000FA9C4(v19, v21);
  sub_1000208D8(v19, v21);
  sub_1000208D8(v15, v16);
  __int128 v22 = v70;
  uint64_t v23 = swift_allocObject(v17, 38LL, 7LL);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = v46;
  *(_BYTE *)(v23 + 32)  = a2;
  *(_BYTE *)(v23 + 33)  = v47;
  *(_BYTE *)(v23 + 34)  = v48;
  *(_BYTE *)(v23 + 35)  = v49;
  *(_BYTE *)(v23 + 36)  = v50;
  *(_BYTE *)(v23 + 37)  = v51;
  uint64_t v24 = sub_1000FB08C(v23);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease(v23);
  __int128 v69 = v22;
  sub_100020AFC(v22, *((unint64_t *)&v22 + 1));
  sub_1000FA9C4(v24, v26);
  sub_1000208D8(v24, v26);
  sub_1000208D8(v22, *((unint64_t *)&v22 + 1));
  __int128 v27 = v69;
  uint64_t v28 = v54;
  uint64_t v29 = swift_bridgeObjectRetain(v54);
  uint64_t v30 = (uint64_t)v53;
  SHA256.init()(v29);
  Swift::String v31 = String.lowercased()();
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRetain(v31._object);
  sub_10016B208(v31._countAndFlagsBits, (uint64_t)v31._object, v30, v31._countAndFlagsBits, (uint64_t)v31._object, v32);
  uint64_t v33 = swift_bridgeObjectRelease(v31._object);
  uint64_t v34 = v56;
  SHA256.finalize()(v33);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v70, sub_10016BB10, 0LL, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v58);
  __int128 v35 = v70;
  uint64_t v36 = v30;
  uint64_t v37 = v59;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v36, v59);
  __int128 v70 = v27;
  sub_100020AFC(v27, *((unint64_t *)&v27 + 1));
  sub_1000FA9C4(v35, *((uint64_t *)&v35 + 1));
  sub_1000208D8(v35, *((unint64_t *)&v35 + 1));
  sub_1000208D8(v27, *((unint64_t *)&v27 + 1));
  __int128 v69 = v70;
  v68[0]  = v63;
  v68[1]  = v64;
  sub_100020AFC(v63, v64);
  uint64_t v38 = v65;
  SymmetricKey.init<A>(data:)(v68, &type metadata for Data, &protocol witness table for Data);
  uint64_t v39 = sub_10000AF70( &qword_1004060F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  unint64_t v40 = sub_10005D508();
  uint64_t v41 = v60;
  static HMAC.authenticationCode<A>(for:using:)(&v69, v38, v37, &type metadata for Data, v39, v40);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v38, v67);
  sub_1000208D8(v69, *((unint64_t *)&v69 + 1));
  uint64_t v42 = v62;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v70, sub_10005C2B8, 0LL, v62, &type metadata for NANPMK.ID);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v42);
  return v70;
}

uint64_t sub_10005BD90( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v60 = a5;
  unint64_t v61 = a6;
  uint64_t v52 = a4;
  uint64_t v50 = a3;
  uint64_t v8 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v64 = *(void *)(v8 - 8);
  uint64_t v65 = v8;
  __chkstk_darwin(v8);
  uint64_t v63 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  __chkstk_darwin(v10);
  uint64_t v54 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for SHA256(0LL);
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  unint64_t v51 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = sub_100002274(&qword_100406100);
  uint64_t v59 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v58 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1004040C0 != -1) {
    swift_once(&qword_1004040C0, sub_10005B800);
  }
  unint64_t v49 = a2 >> 40;
  unint64_t v48 = HIDWORD(a2);
  unint64_t v47 = a2 >> 24;
  unint64_t v46 = a2 >> 16;
  unint64_t v45 = a2 >> 8;
  unint64_t v43 = a1 >> 40;
  uint64_t v14 = qword_100406070;
  unint64_t v15 = *(void *)algn_100406078;
  uint64_t v16 = sub_100002274(&qword_1004040A8);
  uint64_t v17 = swift_allocObject(v16, 38LL, 7LL);
  __int128 v44 = xmmword_10033A980;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_10033A980;
  *(_WORD *)(v17 + 32)  = a1;
  *(_BYTE *)(v17 + 34)  = BYTE2(a1);
  *(_BYTE *)(v17 + 35)  = BYTE3(a1);
  *(_BYTE *)(v17 + 36)  = BYTE4(a1);
  *(_BYTE *)(v17 + 37)  = v43;
  sub_100020AFC(v14, v15);
  uint64_t v18 = sub_1000FB08C(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  *(void *)&__int128 v68 = v14;
  *((void *)&v68 + 1)  = v15;
  sub_100020AFC(v14, v15);
  sub_1000FA9C4(v18, v20);
  sub_1000208D8(v18, v20);
  sub_1000208D8(v14, v15);
  __int128 v21 = v68;
  uint64_t v22 = swift_allocObject(v16, 38LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = v44;
  *(_BYTE *)(v22 + 32)  = a2;
  *(_BYTE *)(v22 + 33)  = v45;
  *(_BYTE *)(v22 + 34)  = v46;
  *(_BYTE *)(v22 + 35)  = v47;
  *(_BYTE *)(v22 + 36)  = v48;
  *(_BYTE *)(v22 + 37)  = v49;
  uint64_t v23 = sub_1000FB08C(v22);
  unint64_t v25 = v24;
  swift_bridgeObjectRelease(v22);
  __int128 v67 = v21;
  sub_100020AFC(v21, *((unint64_t *)&v21 + 1));
  sub_1000FA9C4(v23, v25);
  sub_1000208D8(v23, v25);
  sub_1000208D8(v21, *((unint64_t *)&v21 + 1));
  __int128 v26 = v67;
  uint64_t v27 = v52;
  uint64_t v28 = swift_bridgeObjectRetain(v52);
  uint64_t v29 = (uint64_t)v51;
  SHA256.init()(v28);
  Swift::String v30 = String.lowercased()();
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRetain(v30._object);
  sub_10016B208(v30._countAndFlagsBits, (uint64_t)v30._object, v29, v30._countAndFlagsBits, (uint64_t)v30._object, v31);
  uint64_t v32 = swift_bridgeObjectRelease(v30._object);
  uint64_t v33 = v54;
  SHA256.finalize()(v32);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v68, sub_10016BB10, 0LL, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v33, v57);
  __int128 v34 = v68;
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v29, v55);
  __int128 v68 = v26;
  sub_100020AFC(v26, *((unint64_t *)&v26 + 1));
  sub_1000FA9C4(v34, *((uint64_t *)&v34 + 1));
  sub_1000208D8(v34, *((unint64_t *)&v34 + 1));
  sub_1000208D8(v26, *((unint64_t *)&v26 + 1));
  __int128 v67 = v68;
  v66[0]  = v60;
  v66[1]  = v61;
  sub_100020AFC(v60, v61);
  __int128 v35 = v63;
  SymmetricKey.init<A>(data:)(v66, &type metadata for Data, &protocol witness table for Data);
  uint64_t v36 = type metadata accessor for SHA384(0LL);
  uint64_t v37 = sub_10000AF70( &qword_100406108,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA384,  (uint64_t)&protocol conformance descriptor for SHA384);
  unint64_t v38 = sub_10005D508();
  uint64_t v39 = v58;
  static HMAC.authenticationCode<A>(for:using:)(&v67, v35, v36, &type metadata for Data, v37, v38);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v35, v65);
  sub_1000208D8(v67, *((unint64_t *)&v67 + 1));
  uint64_t v40 = v62;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v68, sub_10005C2B8, 0LL, v62, &type metadata for NANPMK.ID);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v40);
  return v68;
}

void sub_10005C2B8(_BYTE *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    uint64_t v3 = sub_100211E68(a1, 16LL);
    _s7CoreP2P6NANPMKV2IDVyAESg10Foundation4DataVcfC_0(v3, v4);
    if (v6 >> 60 != 15)
    {
      *a2  = v5;
      a2[1]  = v6;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void *NANPMK.ID.length.unsafeMutableAddressor()
{
  return &static NANPMK.ID.length;
}

void NANPMK.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_10005C3AC()
{
  uint64_t v5 = sub_10000AF70( (unint64_t *)&qword_100405138,  (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator,  (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 97) & 1) != 0)
  {
    uint64_t v6 = 0LL;
    int v7 = (void *)0xE000000000000000LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    int v7 = (void *)0xE000000000000000LL;
    *(_OWORD *)(v4 - 144)  = xmmword_100339900;
    do
    {
      char v8 = *(_BYTE *)(v4 - 98);
      uint64_t v9 = sub_100002274((uint64_t *)&unk_100405140);
      uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
      *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v4 - 144);
      *(void *)(v10 + 56)  = &type metadata for UInt8;
      *(void *)(v10 + 64)  = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32)  = v8;
      uint64_t v11 = String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v10);
      uint64_t v13 = v12;
      *(void *)(v4 - 120)  = v6;
      *(void *)(v4 - 112)  = v7;
      swift_bridgeObjectRetain(v7);
      v14._countAndFlagsBits  = v11;
      v14._object  = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v13);
      uint64_t v6 = *(void *)(v4 - 120);
      int v7 = *(void **)(v4 - 112);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
    }

    while (*(_BYTE *)(v4 - 97) != 1);
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 152) + 8LL))(v2, v0);
  v15._countAndFlagsBits  = v6;
  v15._object  = v7;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v7);
  v16._countAndFlagsBits  = 34LL;
  v16._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  return *(void *)(v4 - 96);
}

uint64_t NANPMK.customMirror.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[0]  = a1;
  v17[1]  = a2;
  Swift::String v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for Mirror.AncestorRepresentation.generated(_:),  v4);
  sub_100020AFC(a1, a2);
  uint64_t v12 = sub_100002274(&qword_100405DC0);
  unint64_t v13 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( v17,  &v16,  v10,  v7,  &type metadata for NANPMK,  v12,  v13);
}

void sub_10005C69C()
{
}

uint64_t sub_10005C6A4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v1;
  unint64_t v10 = v1[1];
  v18[0]  = v11;
  v18[1]  = v10;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v9, 1LL, 1LL, v12);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  sub_100020AFC(v11, v10);
  uint64_t v13 = sub_100002274(&qword_100405DC0);
  unint64_t v14 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v18, &v17, v9, v6, a1, v13, v14);
}

uint64_t static NANBitmap.Band.ghz_4_9_to_5_0.getter()
{
  return 16LL;
}

uint64_t NANPMK.ID.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t NANPMK.ID.init(from:)(void *a1)
{
  return sub_10005CDBC(a1);
}

uint64_t NANPMK.ID.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v4;
  sub_1000208D8(a1, a2);
  return v5;
}

uint64_t IEEE80211InformationElement.MessageIntegrityCode.hash(into:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1000208D8(a2, a3);
}

Swift::Int sub_10005C8EC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005C92C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10005C968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE400000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3  = v8 & 1;
  return result;
}

uint64_t sub_10005C9EC(uint64_t a1)
{
  unint64_t v2 = sub_10005D040();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005CA14(uint64_t a1)
{
  unint64_t v2 = sub_10005D040();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPMK.ID.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10005CA68( a1,  a2,  a3,  &qword_100406098,  (uint64_t (*)(void))sub_10005D040,  (uint64_t)&type metadata for NANPMK.ID.CodingKeys);
}

uint64_t sub_10005CA68(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v21 = a3;
  uint64_t v10 = sub_100002274(a4);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100021104(a1, v15);
  uint64_t v16 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v16, v15, v14);
  v22[0]  = a2;
  v22[1]  = v21;
  unint64_t v17 = sub_10005CD78();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v18, v10, &type metadata for Data, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

Swift::Int IEEE80211InformationElement.MessageIntegrityCode.hashValue.getter( uint64_t a1, unint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10005CBD8()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_1000208D8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10005CC38(uint64_t a1)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  sub_100020AFC(v4, v3);
  Data.hash(into:)(a1, v4, v3);
  return sub_1000208D8(v4, v3);
}

Swift::Int sub_10005CC84(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_1000208D8(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10005CCE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10005CDBC(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
  }

  return result;
}

uint64_t sub_10005CD08(void *a1)
{
  return NANPMK.ID.encode(to:)(a1, *v1, v1[1]);
}

void sub_10005CD20(uint64_t *a1)
{
}

unint64_t sub_10005CD34()
{
  unint64_t result = qword_100406088;
  if (!qword_100406088)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033B10C, &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100406088);
  }

  return result;
}

unint64_t sub_10005CD78()
{
  unint64_t result = qword_100406090;
  if (!qword_100406090)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100406090);
  }

  return result;
}

uint64_t sub_10005CDBC(void *a1)
{
  uint64_t v3 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v13 = 0x1000000000LL;
  uint64_t v14 = __DataStorage.init(length:)(16LL);
  sub_100004EFC((int *)&v13, 0);
  uint64_t v4 = v14;
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (uint64_t)sub_100021104(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(&v13, v5, v6);
  if (v1)
  {
    sub_100002AC4(a1);
    swift_release(v4);
  }

  else
  {
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    sub_1000237C8((uint64_t)&v13, v15);
    uint64_t v7 = UnkeyedDecodingContainer.decodeData(with:)(16LL, v8, v9);
    unint64_t v12 = v11;
    sub_100020AFC(v7, v11);
    swift_release(v4);
    sub_100002AC4(&v13);
    sub_100002AC4(a1);
    sub_1000208D8(v7, v12);
  }

  return v7;
}

void _s7CoreP2P6NANPMKV2IDVyAESg10Foundation4DataVcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4[0]  = 0x1000000000LL;
  v4[1]  = __DataStorage.init(length:)(16LL);
  sub_100004EFC((int *)v4, 0);
  __asm { BR              X10 }

uint64_t sub_10005CF74()
{
  if (BYTE6(v0) != 16LL)
  {
    sub_1000208D8(v2, v0);
    uint64_t v2 = 0LL;
  }

  swift_release(v1);
  return v2;
}

unint64_t sub_10005CFF4()
{
  unint64_t result = qword_10040C630;
  if (!qword_10040C630)
  {
    uint64_t v1 = sub_1000022F8(&qword_100405DC0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10040C630);
  }

  return result;
}

unint64_t sub_10005D040()
{
  unint64_t result = qword_1004060A0;
  if (!qword_1004060A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033B0BC, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004060A0);
  }

  return result;
}

unint64_t sub_10005D088()
{
  unint64_t result = qword_1004060A8;
  if (!qword_1004060A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANPMK, &type metadata for NANPMK);
    atomic_store(result, (unint64_t *)&qword_1004060A8);
  }

  return result;
}

unint64_t sub_10005D0D0()
{
  unint64_t result = qword_1004060B0;
  if (!qword_1004060B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANPMK.ID, &type metadata for NANPMK.ID);
    atomic_store(result, (unint64_t *)&qword_1004060B0);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPMK()
{
  return &type metadata for NANPMK;
}

uint64_t *initializeBufferWithCopyOfBuffer for NANServiceName.Hash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100020AFC(*a2, v4);
  *a1  = v3;
  a1[1]  = v4;
  return a1;
}

uint64_t destroy for NANServiceName.Hash(uint64_t a1)
{
  return sub_1000208D8(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for NANServiceName.Hash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100020AFC(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1  = v3;
  a1[1]  = v4;
  sub_1000208D8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for NANServiceName.Hash(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1  = *a2;
  sub_1000208D8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANServiceName.Hash(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANServiceName.Hash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8)  = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPMK.ID()
{
  return &type metadata for NANPMK.ID;
}

ValueMetadata *type metadata accessor for NANPMK.ID.CodingKeys()
{
  return &type metadata for NANPMK.ID.CodingKeys;
}

uint64_t _s7CoreP2P6NANPMKV2IDV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10005D2FC + 4 * byte_10033AD54[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10005D31C + 4 * byte_10033AD59[v4]))();
  }
}

_BYTE *sub_10005D2FC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10005D31C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10005D324(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10005D32C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10005D334(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10005D33C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANPMK.CodingKeys()
{
  return &type metadata for NANPMK.CodingKeys;
}

unint64_t sub_10005D35C()
{
  unint64_t result = qword_1004060B8;
  if (!qword_1004060B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033AFDC, &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004060B8);
  }

  return result;
}

unint64_t sub_10005D3A4()
{
  unint64_t result = qword_1004060C0;
  if (!qword_1004060C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033B094, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004060C0);
  }

  return result;
}

unint64_t sub_10005D3EC()
{
  unint64_t result = qword_1004060C8;
  if (!qword_1004060C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033B004, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004060C8);
  }

  return result;
}

unint64_t sub_10005D434()
{
  unint64_t result = qword_1004060D0;
  if (!qword_1004060D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033B02C, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004060D0);
  }

  return result;
}

unint64_t sub_10005D47C()
{
  unint64_t result = qword_1004060D8;
  if (!qword_1004060D8)
  {
    unint64_t result = swift_getWitnessTable("u?\n", &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004060D8);
  }

  return result;
}

unint64_t sub_10005D4C4()
{
  unint64_t result = qword_1004060E0;
  if (!qword_1004060E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033AF74, &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004060E0);
  }

  return result;
}

unint64_t sub_10005D508()
{
  unint64_t result = qword_1004060F8;
  if (!qword_1004060F8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1004060F8);
  }

  return result;
}

void sub_10005D56C(void *a1@<X8>)
{
  *a1  = &_swiftEmptyArrayStorage;
}

uint64_t sub_10005D580@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10005D5F4(a1, (void (*)(uint64_t))sub_10008F9B8, a2);
}

uint64_t sub_10005D58C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A035C(v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a2  = v7;
  return result;
}

uint64_t sub_10005D5E8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10005D5F4(a1, (void (*)(uint64_t))sub_1001A0408, a2);
}

uint64_t sub_10005D5F4@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t)@<X3>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  uint64_t v9 = *v3;
  swift_bridgeObjectRetain(*v3);
  a2(v6);
  swift_bridgeObjectRelease(v6);
  uint64_t result = swift_bridgeObjectRelease(v7);
  *a3  = v9;
  return result;
}

BOOL sub_10005D664(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v9 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A035C(v4);
  uint64_t v5 = v9;
  char v6 = sub_10007990C(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    uint64_t v7 = swift_bridgeObjectRetain(v4);
    sub_10008F9B8(v7);
    uint64_t v5 = v4;
  }

  *a1  = v5;
  swift_bridgeObjectRelease(v4);
  return (v6 & 1) == 0;
}

uint64_t sub_10005D700@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001A0268(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_10005D728@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A035C(v4);
  uint64_t v5 = v8;
  sub_10008F9B8(v4);
  char v6 = sub_10007990C(v8, _swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if ((v6 & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease(v8);
    uint64_t v5 = 0LL;
  }

  *a2  = v5;
  return result;
}

uint64_t sub_10005D7BC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_10008F9B8(*a1);
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10005D7E4(uint64_t *a1)
{
  return sub_1001A035C(*a1);
}

uint64_t sub_10005D7EC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_1001A0408(*a1);
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10005D814@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain_n(*v2, 2LL);
  sub_1001A0408(v4);
  sub_1001A035C(v7);
  swift_bridgeObjectRelease(v5);
  uint64_t result = swift_bridgeObjectRelease(v7);
  *a2  = v5;
  return result;
}

uint64_t sub_10005D890(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v6 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A035C(v2);
  char v4 = sub_10007990C(v6, v3);
  swift_bridgeObjectRelease(v6);
  return v4 & 1;
}

uint64_t sub_10005D8F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A035C(v2);
  char v3 = sub_10007990C(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v5);
  return v3 & 1;
}

uint64_t sub_10005D958(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  sub_1001A035C(v3);
  LOBYTE(v2)  = sub_10007990C(v5, v2);
  swift_bridgeObjectRelease(v5);
  return v2 & 1;
}

uint64_t sub_10005D9C0()
{
  return sub_10007990C(*v0, &_swiftEmptyArrayStorage);
}

uint64_t sub_10005D9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10005D9E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001A0408(v2);
  sub_1001A035C(v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10005DA44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1  = *v1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10005DA50(void *a1, void *a2)
{
  return sub_10007990C(*a1, *a2);
}

uint64_t sub_10005DA5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1001E0BF4(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2  = v4;
  return result;
}

uint64_t sub_10005DA98()
{
  uint64_t result = sub_1001A0414(0LL);
  static WiFiDriverCapabilities.supportsNAN  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsNAN.unsafeMutableAddressor()
{
  if (qword_1004040C8 != -1) {
    swift_once(&qword_1004040C8, sub_10005DA98);
  }
  return &static WiFiDriverCapabilities.supportsNAN;
}

uint64_t static WiFiDriverCapabilities.supportsNAN.getter()
{
  return sub_10005E194(&qword_1004040C8, &static WiFiDriverCapabilities.supportsNAN);
}

uint64_t sub_10005DB14()
{
  uint64_t result = sub_1001A0414(1LL);
  static WiFiDriverCapabilities.supportsAWDL  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsAWDL.unsafeMutableAddressor()
{
  if (qword_1004040D0 != -1) {
    swift_once(&qword_1004040D0, sub_10005DB14);
  }
  return &static WiFiDriverCapabilities.supportsAWDL;
}

uint64_t static WiFiDriverCapabilities.supportsAWDL.getter()
{
  return sub_10005E194(&qword_1004040D0, &static WiFiDriverCapabilities.supportsAWDL);
}

uint64_t sub_10005DB90()
{
  uint64_t result = sub_1001A0414(2LL);
  static WiFiDriverCapabilities.supportsDualBand  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor()
{
  if (qword_1004040D8 != -1) {
    swift_once(&qword_1004040D8, sub_10005DB90);
  }
  return &static WiFiDriverCapabilities.supportsDualBand;
}

uint64_t static WiFiDriverCapabilities.supportsDualBand.getter()
{
  return sub_10005E194(&qword_1004040D8, &static WiFiDriverCapabilities.supportsDualBand);
}

uint64_t sub_10005DC0C()
{
  uint64_t result = sub_1001A0414(3LL);
  static WiFiDriverCapabilities.supportsSimultaneousDualBand  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor()
{
  if (qword_1004040E0 != -1) {
    swift_once(&qword_1004040E0, sub_10005DC0C);
  }
  return &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
}

uint64_t static WiFiDriverCapabilities.supportsSimultaneousDualBand.getter()
{
  return sub_10005E194(&qword_1004040E0, &static WiFiDriverCapabilities.supportsSimultaneousDualBand);
}

uint64_t sub_10005DC88()
{
  uint64_t result = sub_1001A0414(4LL);
  static WiFiDriverCapabilities.supportsAWDLSoloMode  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsAWDLSoloMode.unsafeMutableAddressor()
{
  if (qword_1004040E8 != -1) {
    swift_once(&qword_1004040E8, sub_10005DC88);
  }
  return &static WiFiDriverCapabilities.supportsAWDLSoloMode;
}

uint64_t static WiFiDriverCapabilities.supportsAWDLSoloMode.getter()
{
  return sub_10005E194(&qword_1004040E8, &static WiFiDriverCapabilities.supportsAWDLSoloMode);
}

uint64_t sub_10005DD04()
{
  uint64_t result = sub_1001A0414(5LL);
  static WiFiDriverCapabilities.isClmRestricted  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.isClmRestricted.unsafeMutableAddressor()
{
  if (qword_1004040F0 != -1) {
    swift_once(&qword_1004040F0, sub_10005DD04);
  }
  return &static WiFiDriverCapabilities.isClmRestricted;
}

uint64_t static WiFiDriverCapabilities.isClmRestricted.getter()
{
  return sub_10005E194(&qword_1004040F0, &static WiFiDriverCapabilities.isClmRestricted);
}

uint64_t sub_10005DD80()
{
  uint64_t result = sub_1001A0414(6LL);
  static WiFiDriverCapabilities.peerCountryCodeLearningCapable  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.peerCountryCodeLearningCapable.unsafeMutableAddressor()
{
  if (qword_1004040F8 != -1) {
    swift_once(&qword_1004040F8, sub_10005DD80);
  }
  return &static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
}

uint64_t static WiFiDriverCapabilities.peerCountryCodeLearningCapable.getter()
{
  return sub_10005E194(&qword_1004040F8, &static WiFiDriverCapabilities.peerCountryCodeLearningCapable);
}

uint64_t sub_10005DDFC()
{
  uint64_t result = sub_1001A0414(7LL);
  static WiFiDriverCapabilities.supportsDFSProxy  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsDFSProxy.unsafeMutableAddressor()
{
  if (qword_100404100 != -1) {
    swift_once(&qword_100404100, sub_10005DDFC);
  }
  return &static WiFiDriverCapabilities.supportsDFSProxy;
}

uint64_t static WiFiDriverCapabilities.supportsDFSProxy.getter()
{
  return sub_10005E194(&qword_100404100, &static WiFiDriverCapabilities.supportsDFSProxy);
}

uint64_t sub_10005DE78()
{
  uint64_t v0 = sub_100002274(&qword_100406138);
  uint64_t inited = swift_initStackObject(v0, &v19);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10033A9C0;
  if (qword_1004040C8 != -1) {
    swift_once(&qword_1004040C8, sub_10005DA98);
  }
  uint64_t v2 = static WiFiDriverCapabilities.supportsNAN;
  *(void *)(inited + 32)  = static WiFiDriverCapabilities.supportsNAN;
  uint64_t v3 = qword_1004040D0;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1) {
    swift_once(&qword_1004040D0, sub_10005DB14);
  }
  uint64_t v4 = static WiFiDriverCapabilities.supportsAWDL;
  *(void *)(inited + 40)  = static WiFiDriverCapabilities.supportsAWDL;
  uint64_t v5 = qword_1004040D8;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1) {
    swift_once(&qword_1004040D8, sub_10005DB90);
  }
  uint64_t v6 = static WiFiDriverCapabilities.supportsDualBand;
  *(void *)(inited + 48)  = static WiFiDriverCapabilities.supportsDualBand;
  uint64_t v7 = qword_1004040E0;
  swift_bridgeObjectRetain(v6);
  if (v7 != -1) {
    swift_once(&qword_1004040E0, sub_10005DC0C);
  }
  uint64_t v8 = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
  *(void *)(inited + 56)  = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
  uint64_t v9 = qword_1004040E8;
  swift_bridgeObjectRetain(v8);
  if (v9 != -1) {
    swift_once(&qword_1004040E8, sub_10005DC88);
  }
  uint64_t v10 = static WiFiDriverCapabilities.supportsAWDLSoloMode;
  *(void *)(inited + 64)  = static WiFiDriverCapabilities.supportsAWDLSoloMode;
  uint64_t v11 = qword_1004040F0;
  swift_bridgeObjectRetain(v10);
  if (v11 != -1) {
    swift_once(&qword_1004040F0, sub_10005DD04);
  }
  uint64_t v12 = static WiFiDriverCapabilities.isClmRestricted;
  *(void *)(inited + 72)  = static WiFiDriverCapabilities.isClmRestricted;
  uint64_t v13 = qword_1004040F8;
  swift_bridgeObjectRetain(v12);
  if (v13 != -1) {
    swift_once(&qword_1004040F8, sub_10005DD80);
  }
  uint64_t v14 = static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
  *(void *)(inited + 80)  = static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
  uint64_t v15 = qword_100404100;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1) {
    swift_once(&qword_100404100, sub_10005DDFC);
  }
  uint64_t v16 = static WiFiDriverCapabilities.supportsDFSProxy;
  *(void *)(inited + 88)  = static WiFiDriverCapabilities.supportsDFSProxy;
  swift_bridgeObjectRetain(v16);
  uint64_t v17 = sub_1001E0ED4(inited);
  swift_setDeallocating(inited);
  uint64_t result = swift_arrayDestroy(inited + 32, 8LL, &type metadata for WiFiDriverCapabilities);
  static WiFiDriverCapabilities.all  = v17;
  return result;
}

uint64_t *WiFiDriverCapabilities.all.unsafeMutableAddressor()
{
  if (qword_100404108 != -1) {
    swift_once(&qword_100404108, sub_10005DE78);
  }
  return &static WiFiDriverCapabilities.all;
}

uint64_t static WiFiDriverCapabilities.all.getter()
{
  return sub_10005E194(&qword_100404108, &static WiFiDriverCapabilities.all);
}

uint64_t sub_10005E114()
{
  uint64_t result = sub_1001E0ED4((uint64_t)_swiftEmptyArrayStorage);
  static WiFiDriverCapabilities.none  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.none.unsafeMutableAddressor()
{
  if (qword_100404110 != -1) {
    swift_once(&qword_100404110, sub_10005E114);
  }
  return &static WiFiDriverCapabilities.none;
}

uint64_t static WiFiDriverCapabilities.none.getter()
{
  return sub_10005E194(&qword_100404110, &static WiFiDriverCapabilities.none);
}

uint64_t sub_10005E194(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_bridgeObjectRetain(*a2);
}

unint64_t sub_10005E1CC(uint64_t a1)
{
  unint64_t result = sub_10005E1F0();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_10005E1F0()
{
  unint64_t result = qword_100406110;
  if (!qword_100406110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiDriverCapabilities,  &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100406110);
  }

  return result;
}

unint64_t sub_10005E238()
{
  unint64_t result = qword_100406118;
  if (!qword_100406118)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiDriverCapabilities,  &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100406118);
  }

  return result;
}

unint64_t sub_10005E280()
{
  unint64_t result = qword_100406120;
  if (!qword_100406120)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiDriverCapabilities,  &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100406120);
  }

  return result;
}

unint64_t sub_10005E2C8()
{
  unint64_t result = qword_100406128;
  if (!qword_100406128)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiDriverCapabilities,  &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100406128);
  }

  return result;
}

unint64_t sub_10005E310()
{
  unint64_t result = qword_100406130;
  if (!qword_100406130)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiDriverCapabilities,  &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100406130);
  }

  return result;
}

ValueMetadata *type metadata accessor for WiFiDriverCapabilities()
{
  return &type metadata for WiFiDriverCapabilities;
}

uint64_t IEEE80211Status.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005E3A0 + 4 * word_10033B330[a1]))( 0x6673736563637553LL,  0xEA00000000006C75LL);
}

unint64_t sub_10005E3A0()
{
  return 0xD000000000000013LL;
}

uint64_t sub_10005E81C()
{
  return 0x697420656E696F4ALL;
}

uint64_t sub_10005E840()
{
  return 0x6F72726520564349LL;
}

uint64_t sub_10005E85C()
{
  return 0x6F6261206E696F4ALL;
}

uint64_t sub_10005E87C()
{
  return 0x736572206E696F4ALL;
}

uint64_t sub_10005E894()
{
  return 0x616C696176616E55LL;
}

uint64_t IEEE80211Status.rawValue.getter(char a1)
{
  return word_10033B72C[a1];
}

BOOL sub_10005E8CC(char *a1, char *a2)
{
  return word_10033B72C[*a1] == word_10033B72C[*a2];
}

uint64_t sub_10005E8F0@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10005E918(_WORD *a1@<X8>)
{
  *a1  = word_10033B72C[*v1];
}

uint64_t sub_10005E930()
{
  return IEEE80211Status.description.getter(*v0);
}

Swift::Int sub_10005E938()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(word_10033B72C[v1]);
  return Hasher._finalize()();
}

void sub_10005E984()
{
}

Swift::Int sub_10005E9B8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(word_10033B72C[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10005EA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10005FA34();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10005EA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10005FA34();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t IEEE80211Reason.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005EAE0 + 4 * byte_10033B39C[a1]))( 0x6673736563637553LL,  0xEA00000000006C75LL);
}

uint64_t sub_10005EAE0()
{
  return 0x6669636570736E55LL;
}

unint64_t sub_10005EB04()
{
  return 0xD00000000000001ELL;
}

uint64_t IEEE80211Reason.rawValue.getter(char a1)
{
  return word_10033B798[a1];
}

BOOL sub_10005EE54(char *a1, char *a2)
{
  return word_10033B798[*a1] == word_10033B798[*a2];
}

uint64_t sub_10005EE78@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10005EEA0(_WORD *a1@<X8>)
{
  *a1  = word_10033B798[*v1];
}

uint64_t sub_10005EEB8()
{
  return IEEE80211Reason.description.getter(*v0);
}

Swift::Int sub_10005EEC0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(word_10033B798[v1]);
  return Hasher._finalize()();
}

void sub_10005EF0C()
{
}

Swift::Int sub_10005EF40(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(word_10033B798[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10005EF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10005F9F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10005EFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10005F9F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t AWDLThreadCoexistenceEvent.realTimeTrafficStarted.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t NonNANOperatingChannelInformation.channelNumber.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 1)  = result;
  return result;
}

CoreP2P::AWDLThreadCoexistenceEvent __swiftcall AWDLThreadCoexistenceEvent.init(channelSequenceWith2GHz:realTimeTrafficStarted:)( Swift::UInt8 channelSequenceWith2GHz, Swift::UInt8 realTimeTrafficStarted)
{
  return (CoreP2P::AWDLThreadCoexistenceEvent)(channelSequenceWith2GHz | (realTimeTrafficStarted << 8));
}

void IEEE80211StatusAndReason.hash(into:)(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 >> 8;
  Hasher._combine(_:)(word_10033B72C[(char)a2]);
  Hasher._combine(_:)(word_10033B798[(char)v2]);
}

BOOL static IEEE80211StatusAndReason.__derived_struct_equals(_:_:)(unsigned int a1, unsigned int a2)
{
  return word_10033B72C[(char)a1] == word_10033B72C[(char)a2]
      && *(unsigned __int16 *)((char *)word_10033B798 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 55)) == *(unsigned __int16 *)((char *)word_10033B798 + ((uint64_t)((unint64_t)(a2 >> 8) << 56) >> 55));
}

Swift::Int IEEE80211StatusAndReason.hashValue.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(word_10033B72C[v1]);
  Hasher._combine(_:)(word_10033B798[(char)v2]);
  return Hasher._finalize()();
}

Swift::Int sub_10005F158()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(word_10033B72C[v1]);
  Hasher._combine(_:)(word_10033B798[v2]);
  return Hasher._finalize()();
}

void sub_10005F1C4()
{
  uint64_t v1 = v0[1];
  Hasher._combine(_:)(word_10033B72C[*v0]);
  Hasher._combine(_:)(word_10033B798[v1]);
}

Swift::Int sub_10005F214(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(word_10033B72C[v2]);
  Hasher._combine(_:)(word_10033B798[v3]);
  return Hasher._finalize()();
}

BOOL sub_10005F27C(char *a1, char *a2)
{
  return word_10033B72C[*a1] == word_10033B72C[*a2] && word_10033B798[a1[1]] == word_10033B798[a2[1]];
}

uint64_t _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  if (a1 > 0x2Du) {
    return 34LL;
  }
  else {
    return byte_10033B7DC[(__int16)a1];
  }
}

uint64_t _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 0:
      uint64_t result = 0LL;
      break;
    case 1:
      return result;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 29:
    case 31:
    case 32:
    case 36:
    case 38:
    case 39:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
LABEL_7:
      uint64_t result = 54LL;
      break;
    case 10:
      uint64_t result = 2LL;
      break;
    case 11:
      uint64_t result = 3LL;
      break;
    case 12:
      uint64_t result = 4LL;
      break;
    case 13:
      uint64_t result = 5LL;
      break;
    case 14:
      uint64_t result = 6LL;
      break;
    case 15:
      uint64_t result = 7LL;
      break;
    case 16:
      uint64_t result = 8LL;
      break;
    case 17:
      uint64_t result = 9LL;
      break;
    case 18:
      uint64_t result = 10LL;
      break;
    case 25:
      uint64_t result = 11LL;
      break;
    case 26:
      uint64_t result = 12LL;
      break;
    case 27:
      uint64_t result = 13LL;
      break;
    case 28:
      uint64_t result = 14LL;
      break;
    case 30:
      uint64_t result = 15LL;
      break;
    case 33:
      uint64_t result = 16LL;
      break;
    case 34:
      uint64_t result = 17LL;
      break;
    case 35:
      uint64_t result = 18LL;
      break;
    case 37:
      uint64_t result = 19LL;
      break;
    case 40:
      uint64_t result = 20LL;
      break;
    case 41:
      uint64_t result = 21LL;
      break;
    case 42:
      uint64_t result = 22LL;
      break;
    case 43:
      uint64_t result = 23LL;
      break;
    case 44:
      uint64_t result = 24LL;
      break;
    case 45:
      uint64_t result = 25LL;
      break;
    case 46:
      uint64_t result = 26LL;
      break;
    case 59:
      uint64_t result = 27LL;
      break;
    case 60:
      uint64_t result = 28LL;
      break;
    case 61:
      uint64_t result = 29LL;
      break;
    case 62:
      uint64_t result = 30LL;
      break;
    case 63:
      uint64_t result = 31LL;
      break;
    case 64:
      uint64_t result = 32LL;
      break;
    case 65:
      uint64_t result = 33LL;
      break;
    case 66:
      uint64_t result = 34LL;
      break;
    case 67:
      uint64_t result = 35LL;
      break;
    case 68:
      uint64_t result = 36LL;
      break;
    case 82:
      uint64_t result = 37LL;
      break;
    case 83:
      uint64_t result = 38LL;
      break;
    case 92:
      uint64_t result = 39LL;
      break;
    case 93:
      uint64_t result = 40LL;
      break;
    case 99:
      uint64_t result = 41LL;
      break;
    default:
      switch(v1)
      {
        case 1000:
          uint64_t result = 42LL;
          break;
        case 1001:
          uint64_t result = 43LL;
          break;
        case 1002:
          uint64_t result = 44LL;
          break;
        case 1003:
          uint64_t result = 45LL;
          break;
        case 1004:
          uint64_t result = 46LL;
          break;
        case 1005:
          uint64_t result = 47LL;
          break;
        case 1006:
          uint64_t result = 48LL;
          break;
        case 1007:
          uint64_t result = 49LL;
          break;
        case 1008:
          uint64_t result = 50LL;
          break;
        case 1009:
          uint64_t result = 51LL;
          break;
        case 1010:
          uint64_t result = 52LL;
          break;
        default:
          if (v1 != 0xFFFF) {
            goto LABEL_7;
          }
          uint64_t result = 53LL;
          break;
      }

      break;
  }

  return result;
}

unint64_t sub_10005F504()
{
  unint64_t result = qword_100406140;
  if (!qword_100406140)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Status,  &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_100406140);
  }

  return result;
}

unint64_t sub_10005F54C()
{
  unint64_t result = qword_100406148;
  if (!qword_100406148)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Reason,  &type metadata for IEEE80211Reason);
    atomic_store(result, (unint64_t *)&qword_100406148);
  }

  return result;
}

unint64_t sub_10005F594()
{
  unint64_t result = qword_100406150;
  if (!qword_100406150)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211StatusAndReason,  &type metadata for IEEE80211StatusAndReason);
    atomic_store(result, (unint64_t *)&qword_100406150);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for IEEE80211Status(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xCB) {
    goto LABEL_17;
  }
  if (a2 + 53 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 53) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 53;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 53;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 53;
    }
  }

uint64_t storeEnumTagSinglePayload for IEEE80211Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 53 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 53) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xCB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xCA) {
    return ((uint64_t (*)(void))((char *)&loc_10005F6B4 + 4 * byte_10033B432[v4]))();
  }
  *a1  = a2 + 53;
  return ((uint64_t (*)(void))((char *)sub_10005F6E8 + 4 * byte_10033B42D[v4]))();
}

uint64_t sub_10005F6E8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10005F6F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10005F6F8LL);
  }
  return result;
}

uint64_t sub_10005F704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10005F70CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 53;
  return result;
}

uint64_t sub_10005F710(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10005F718(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Status()
{
  return &type metadata for IEEE80211Status;
}

uint64_t getEnumTagSinglePayload for IEEE80211Reason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xDF) {
    goto LABEL_17;
  }
  if (a2 + 33 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 33) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 33;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }

uint64_t storeEnumTagSinglePayload for IEEE80211Reason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 33 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 33) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDE) {
    return ((uint64_t (*)(void))((char *)&loc_10005F810 + 4 * byte_10033B43C[v4]))();
  }
  *a1  = a2 + 33;
  return ((uint64_t (*)(void))((char *)sub_10005F844 + 4 * byte_10033B437[v4]))();
}

uint64_t sub_10005F844(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10005F84C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x10005F854LL);
  }
  return result;
}

uint64_t sub_10005F860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x10005F868LL);
  }
  *(_BYTE *)unint64_t result = a2 + 33;
  return result;
}

uint64_t sub_10005F86C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10005F874(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Reason()
{
  return &type metadata for IEEE80211Reason;
}

uint64_t getEnumTagSinglePayload for IEEE80211StatusAndReason(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xDF) {
    goto LABEL_17;
  }
  if (a2 + 65313 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65313 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65313;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65313;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65313;
    }
  }

uint64_t storeEnumTagSinglePayload for IEEE80211StatusAndReason(_WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65313 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65313 < 0xFF0000) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDE) {
    return ((uint64_t (*)(void))((char *)&loc_10005F970 + 4 * byte_10033B446[v4]))();
  }
  *a1  = a2 - 223;
  return ((uint64_t (*)(void))((char *)sub_10005F9A4 + 4 * byte_10033B441[v4]))();
}

uint64_t sub_10005F9A4(uint64_t result)
{
  *(_BYTE *)(result + 2)  = v1;
  return result;
}

uint64_t sub_10005F9AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 2)  = 0;
  if (a2) {
    JUMPOUT(0x10005F9B4LL);
  }
  return result;
}

uint64_t sub_10005F9C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2)  = 0;
  if (!a2) {
    JUMPOUT(0x10005F9C8LL);
  }
  *(_BYTE *)(result + 1)  = a2 + 33;
  return result;
}

uint64_t sub_10005F9CC(uint64_t result)
{
  *(_DWORD *)(result + 2)  = v1;
  return result;
}

uint64_t sub_10005F9D4(uint64_t result)
{
  *(_WORD *)(result + 2)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211StatusAndReason()
{
  return &type metadata for IEEE80211StatusAndReason;
}

unint64_t sub_10005F9F0()
{
  unint64_t result = qword_100406158;
  if (!qword_100406158)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Reason,  &type metadata for IEEE80211Reason);
    atomic_store(result, (unint64_t *)&qword_100406158);
  }

  return result;
}

unint64_t sub_10005FA34()
{
  unint64_t result = qword_100406160;
  if (!qword_100406160)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IEEE80211Status,  &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_100406160);
  }

  return result;
}

uint64_t sub_10005FA80@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v12[2]  = a3;
  void v12[3] = a4;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    type metadata accessor for SymmetricKey(0LL);
    _StringGuts._slowWithCString<A>(_:)(a5, sub_1000612C0, v12);
    return swift_bridgeObjectRelease(a4);
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      int v8 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      int v8 = (_BYTE *)_StringObject.sharedUTF8.getter(a1, a2);
    }
    sub_100060FF4(v8, a3, a4);
    return swift_bridgeObjectRelease(a4);
  }

  __src[0]  = a1;
  __src[1]  = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = String.count.getter(a3, a4);
  v13[0]  = sub_100211E68(__src, v10);
  v13[1]  = v11;
  SymmetricKey.init<A>(data:)(v13, &type metadata for Data, &protocol witness table for Data);
  return swift_bridgeObjectRelease(a4);
}

uint64_t NANServiceName.string.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

CoreP2P::NANPassphrase __swiftcall NANPassphrase.init(_:)(CoreP2P::NANPassphrase result)
{
  uint64_t v1 = HIBYTE(result.string._object) & 0xF;
  if (!v1) {
    __break(1u);
  }
  return result;
}

uint64_t NANPassphrase.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(a3);
}

uint64_t static NANPassphrase.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
}

Swift::Int NANPassphrase.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10005FCC8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10005FD20(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10005FD64(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10005FDB8(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL);
  }
}

uint64_t NANPassphrase.description.getter(uint64_t a1, void *a2)
{
  v4._countAndFlagsBits  = a1;
  v4._object  = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(a2);
  v5._countAndFlagsBits  = 34LL;
  v5._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t NANPassphrase.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[0]  = a1;
  v17[1]  = a2;
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for Mirror.AncestorRepresentation.generated(_:),  v4);
  swift_bridgeObjectRetain(a2);
  uint64_t v12 = sub_100002274(&qword_100405DC0);
  unint64_t v13 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( v17,  &v16,  v10,  v7,  &type metadata for NANPassphrase,  v12,  v13);
}

uint64_t sub_10005FFD4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)v6, "Passphrase: ");
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits  = v1;
  v3._object  = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits  = 34LL;
  v4._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t sub_100060074(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  v18[0]  = v10;
  v18[1]  = v11;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v9, 1LL, 1LL, v12);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  swift_bridgeObjectRetain(v11);
  uint64_t v13 = sub_100002274(&qword_100405DC0);
  unint64_t v14 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v18, &v17, v9, v6, a1, v13, v14);
}

uint64_t NANPassphrase.pmk(for:serviceName:publisherAddress:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v25 = a4;
  uint64_t v8 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = swift_bridgeObjectRetain(a3);
  SHA256.init()(v16);
  Swift::String v17 = String.lowercased()();
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRetain(v17._object);
  sub_10016B208( v17._countAndFlagsBits,  (uint64_t)v17._object,  (uint64_t)v15,  v17._countAndFlagsBits,  (uint64_t)v17._object,  v18);
  swift_bridgeObjectRelease(v17._object);
  SHA256.finalize()(v19);
  SHA256Digest.withUnsafeBytes<A>(_:)(v28, sub_10016BB10, 0LL, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v20 = v28[0];
  unint64_t v21 = v28[1];
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (((1 << a1) & 0x55) != 0) {
    sub_1000604A8( v26,  v27,  a1,  v20,  v21,  v25 & 0xFFFFFFFFFFFFLL,  &qword_1004060E8,  (uint64_t)&off_1003D6DF0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  &qword_1004060F0,  (uint64_t)&protocol conformance descriptor for SHA256);
  }
  else {
    sub_1000604A8( v26,  v27,  a1,  v20,  v21,  v25 & 0xFFFFFFFFFFFFLL,  &qword_100406100,  (uint64_t)&off_1003D6E18,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA384,  &qword_100406108,  (uint64_t)&protocol conformance descriptor for SHA384);
  }
  uint64_t v23 = v22;
  sub_1000208D8(v20, v21);
  return v23;
}

void NANPassphrase.pmk(for:serviceNameHash:publisherAddress:)( char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = a4 & 0xFFFFFFFFFFFFLL;
  if (((1 << a1) & 0x55) != 0) {
    sub_1000604A8( a5,  a6,  a1,  a2,  a3,  v7,  &qword_1004060E8,  (uint64_t)&off_1003D6DF0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  &qword_1004060F0,  (uint64_t)&protocol conformance descriptor for SHA256);
  }
  else {
    sub_1000604A8( a5,  a6,  a1,  a2,  a3,  v7,  &qword_100406100,  (uint64_t)&off_1003D6E18,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA384,  &qword_100406108,  (uint64_t)&protocol conformance descriptor for SHA384);
  }
}

void sub_1000604A8( uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t *a7, uint64_t a8, uint64_t (*a9)(uint64_t), unint64_t *a10, uint64_t a11)
{
  *(void *)&__int128 v63 = a8;
  char v11 = a6;
  uint64_t v65 = a10;
  uint64_t v66 = a11;
  uint64_t v64 = a9;
  unint64_t v58 = a6 >> 8;
  unint64_t v59 = a6 >> 16;
  unint64_t v60 = a6 >> 24;
  unint64_t v61 = HIDWORD(a6);
  unint64_t v62 = a6 >> 40;
  uint64_t v56 = sub_100002274(a7);
  uint64_t v67 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = type metadata accessor for SymmetricKey(0LL);
  v48[1]  = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v19 = (void *)((char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  swift_bridgeObjectRetain(a2);
  sub_10005FA80(a1, a2, a1, a2, v19);
  uint64_t v20 = sub_100002274(&qword_1004040A8);
  uint64_t v21 = swift_allocObject(v20, 34LL, 7LL);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_10033B810;
  *(_BYTE *)(v21 + 32)  = 0;
  *(_BYTE *)(v21 + 33)  = a3 + 1;
  uint64_t v22 = sub_1000FB08C(v21);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease(v21);
  uint64_t v70 = v22;
  unint64_t v71 = v24;
  sub_100020AFC(a4, a5);
  sub_100020AFC(v22, v24);
  sub_1000FA9C4(a4, a5);
  sub_1000208D8(a4, a5);
  sub_1000208D8(v22, v24);
  uint64_t v25 = v70;
  unint64_t v26 = v71;
  uint64_t v27 = swift_allocObject(v20, 38LL, 7LL);
  *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_10033A980;
  *(_BYTE *)(v27 + 32)  = v11;
  *(_BYTE *)(v27 + 33)  = v58;
  *(_BYTE *)(v27 + 34)  = v59;
  *(_BYTE *)(v27 + 35)  = v60;
  *(_BYTE *)(v27 + 36)  = v61;
  *(_BYTE *)(v27 + 37)  = v62;
  uint64_t v28 = sub_1000FB08C(v27);
  unint64_t v30 = v29;
  swift_bridgeObjectRelease(v27);
  uint64_t v68 = v25;
  unint64_t v69 = v26;
  sub_100020AFC(v25, v26);
  sub_1000FA9C4(v28, v30);
  sub_1000208D8(v28, v30);
  sub_1000208D8(v25, v26);
  uint64_t v31 = v68;
  unint64_t v32 = v69;
  uint64_t v33 = sub_1000FB08C(v63);
  unint64_t v35 = v34;
  uint64_t v70 = v31;
  unint64_t v71 = v32;
  sub_100020AFC(v31, v32);
  sub_1000FA9C4(v33, v35);
  sub_1000208D8(v33, v35);
  sub_1000208D8(v31, v32);
  uint64_t v36 = v70;
  unint64_t v37 = v71;
  uint64_t v68 = v70;
  unint64_t v69 = v71;
  unint64_t v38 = v64;
  uint64_t v39 = v64(0LL);
  uint64_t v40 = sub_10000AF70(v65, v38, v66);
  unint64_t v41 = sub_10005D508();
  uint64_t v42 = v55;
  uint64_t v54 = v19;
  uint64_t v53 = v39;
  uint64_t v52 = v40;
  unint64_t v51 = v41;
  static HMAC.authenticationCode<A>(for:using:)(&v68, v19, v39, &type metadata for Data, v40, v41);
  sub_1000208D8(v36, v37);
  uint64_t v43 = v56;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v70, sub_100061064, 0LL, v56, &type metadata for Data);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v67 + 8);
  v50(v42, v43);
  uint64_t v44 = v70;
  unint64_t v62 = v71;
  sub_100020AFC(v70, v71);
  __int128 v63 = xmmword_1003398F0;
  uint64_t v57 = 2LL;
  unint64_t v45 = v62;
  uint64_t v68 = v44;
  unint64_t v69 = v62;
  unint64_t v46 = v55;
  static HMAC.authenticationCode<A>(for:using:)(&v68, v54, v53, &type metadata for Data, v52, v51);
  uint64_t v47 = v56;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v68, sub_100061064, 0LL, v56, &type metadata for Data);
  unint64_t v58 = 0LL;
  v50(v46, v47);
  sub_1000208D8(v44, v45);
  unint64_t v62 = v69;
  __asm { BR              X8 }

uint64_t sub_1000608FC()
{
  uint64_t v3 = *(void *)(v2 - 200);
  uint64_t v4 = BYTE6(v3);
  if (!BYTE6(v3)) {
    JUMPOUT(0x100060834LL);
  }
  uint64_t v5 = *(void *)(v2 - 200);
  *(void *)(v2 - 152)  = v4;
  *(void *)(v2 - 144)  = v5 & 0x3FFFFFFFFFFFFFFFLL;
  *(void *)(v2 - 224)  = v1 >> 32;
  *(void *)(v2 - 2swift_weakDestroy(v0 + 16) = BYTE6(v5);
  *(void *)(v2 - 208)  = (int)v1;
  *(void *)(v2 - 168)  = v0;
  *(void *)(v2 - 160)  = v1;
  if (v4 <= 0)
  {
    __break(1u);
    JUMPOUT(0x100060F34LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_10006098C + dword_100060FD4[*(void *)(v2 - 104) >> 62]))();
}

uint64_t sub_100060E80()
{
  if (BYTE6(v1) != 32LL)
  {
    sub_1000208D8(v0, v1);
    __break(1u);
  }

  (*(void (**)(void, void))(*(void *)(v3 - 312) + 8LL))(*(void *)(v3 - 264), *(void *)(v3 - 304));
  sub_1000208D8(v2, *(void *)(v3 - 200));
  sub_1000208D8(*(void *)(v3 - 112), *(void *)(v3 - 104));
  return v0;
}

uint64_t sub_100060FF4(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = String.count.getter(a2, a3);
  v7[0]  = sub_100211E68(a1, v4);
  v7[1]  = v5;
  return SymmetricKey.init<A>(data:)(v7, &type metadata for Data, &protocol witness table for Data);
}

uint64_t sub_100061064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100061078(a1, a2, a3);
}

uint64_t sub_100061078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3]  = &type metadata for UnsafeRawBufferPointer;
  v14[4]  = &protocol witness table for UnsafeRawBufferPointer;
  v14[0]  = a1;
  v14[1]  = a2;
  uint64_t v4 = sub_100021104(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v5 = (_BYTE *)*v4;
  if (*v4 && (uint64_t v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_1000FAED4(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_1000FAF94((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v8 = sub_1000FB00C((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  uint64_t result = sub_100002AC4(v14);
  *a3  = v8;
  a3[1]  = v9;
  return result;
}

unint64_t sub_100061144()
{
  unint64_t result = qword_100406168;
  if (!qword_100406168)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANPassphrase, &type metadata for NANPassphrase);
    atomic_store(result, (unint64_t *)&qword_100406168);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for NANServiceName(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for NANServiceName(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for NANServiceName(void *a1, void *a2)
{
  *a1  = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1]  = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for NANServiceName(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANServiceName(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANServiceName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPassphrase()
{
  return &type metadata for NANPassphrase;
}

uint64_t sub_1000612C0(_BYTE *a1)
{
  return sub_100060FF4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

  ;
}

uint64_t RadioResources.SymbolicChannel.Resolver.infraChannel.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 & 0xFFFFFFFFFFFFLL;
}

uint64_t NANDiscoveryWindowStartEvent.channel.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4 & 0xFFFFFFFFFFFFLL;
}

uint64_t WiFiNetwork.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4._countAndFlagsBits  = Channel.description.getter(a4 & 0xFFFFFFFFFFFFLL);
  object  = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits  = 93LL;
  v6._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return v8[0];
}

void WiFiNetwork.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  Swift::UInt8 v6 = a4;
  unint64_t v10 = a4 >> 8;
  unint64_t v11 = a4 >> 16;
  unint64_t v12 = a4 >> 24;
  unint64_t v13 = HIDWORD(a4);
  unint64_t v14 = a4 >> 40;
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(a1, a2, a3);
  swift_bridgeObjectRelease(a3);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(a5);
  Hasher._combine(_:)(0x801004u >> ((a5 >> 29) & 0xF8));
  switch(BYTE5(a5))
  {
    case 2:
      Swift::UInt v15 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v15 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v15 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v15 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v15 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v15);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a5) & 1);
      break;
  }

uint64_t static WiFiNetwork.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100061EC4( a1,  a2,  a3 & 0xFFFFFFFFFFFFLL,  a4 & 0xFFFFFFFFFFFFLL,  a5,  a6,  a7 & 0xFFFFFFFFFFFFLL,  a8 & 0xFFFFFFFFFFFFLL);
}

Swift::Int WiFiNetwork.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt8 v5 = a3;
  unint64_t v8 = a3 >> 8;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = a3 >> 24;
  unint64_t v11 = HIDWORD(a3);
  unint64_t v12 = a3 >> 40;
  Hasher.init(_seed:)(v15, 0LL);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v15, a1, a2);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(0x801004u >> ((a4 >> 29) & 0xF8));
  switch(BYTE5(a4))
  {
    case 2:
      Swift::UInt v13 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v13 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v13 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v13 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v13 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v13);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a4) & 1);
      break;
  }

  return Hasher._finalize()();
}

Swift::Int sub_100061638()
{
  return WiFiNetwork.hashValue.getter( *(void *)v0,  *(void *)(v0 + 8),  *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 21) << 40),  *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40));
}

void sub_100061668(uint64_t a1)
{
}

Swift::Int sub_100061698(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Swift::UInt32 v4 = *((_DWORD *)v1 + 6);
  char v13 = *((_BYTE *)v1 + 28);
  int v14 = *((unsigned __int8 *)v1 + 29);
  Swift::UInt8 v5 = *((_BYTE *)v1 + 16);
  Swift::UInt8 v6 = *((_BYTE *)v1 + 17);
  Swift::UInt8 v7 = *((_BYTE *)v1 + 18);
  Swift::UInt8 v8 = *((_BYTE *)v1 + 19);
  Swift::UInt8 v9 = *((_BYTE *)v1 + 20);
  Swift::UInt8 v10 = *((_BYTE *)v1 + 21);
  Hasher.init(_seed:)(v15, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v15, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(0x801004u >> (8 * v13));
  switch(v14)
  {
    case 2:
      Swift::UInt v11 = 0LL;
      goto LABEL_8;
    case 3:
      Swift::UInt v11 = 1LL;
      goto LABEL_8;
    case 4:
      Swift::UInt v11 = 3LL;
      goto LABEL_8;
    case 5:
      Swift::UInt v11 = 4LL;
      goto LABEL_8;
    case 6:
      Swift::UInt v11 = 5LL;
LABEL_8:
      Hasher._combine(_:)(v11);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v14 & 1);
      break;
  }

  return Hasher._finalize()();
}

uint64_t sub_10006182C()
{
  uint64_t v1 = *(unsigned int *)(v0 + 24);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 28);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 29);
  strcpy((char *)v8, "WiFiNetwork[");
  v4._countAndFlagsBits  = Channel.description.getter(v1 | (v2 << 32) | (v3 << 40));
  object  = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits  = 93LL;
  v6._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return v8[0];
}

uint64_t sub_1000618AC(uint64_t a1, uint64_t a2)
{
  return sub_100061EC4( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 40),  *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 29) << 40),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 21) << 40),  *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 40));
}

BOOL static NANInternetSharingStatistics.Status.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NANInternetSharingStatistics.Status.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int NANInternetSharingStatistics.Status.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AWDLPeer.Reachability.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

unint64_t sub_1000619C4()
{
  unint64_t v1 = 0xD000000000000012LL;
  if (*v0 != 1) {
    unint64_t v1 = 0x6669636570736E75LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD00000000000001ALL;
  }
}

uint64_t sub_100061A2C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100062D34(a1, a2);
  *a3  = result;
  return result;
}

void sub_100061A50(_BYTE *a1@<X8>)
{
  *a1  = 3;
}

uint64_t sub_100061A5C(uint64_t a1)
{
  unint64_t v2 = sub_100062094();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061A84(uint64_t a1)
{
  unint64_t v2 = sub_100062094();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100061AAC@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2  = 1;
  return result;
}

uint64_t sub_100061AD8(uint64_t a1)
{
  unint64_t v2 = sub_100062160();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061B00(uint64_t a1)
{
  unint64_t v2 = sub_100062160();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100061B28(uint64_t a1)
{
  unint64_t v2 = sub_10006211C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061B50(uint64_t a1)
{
  unint64_t v2 = sub_10006211C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100061B78(uint64_t a1)
{
  unint64_t v2 = sub_1000620D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061BA0(uint64_t a1)
{
  unint64_t v2 = sub_1000620D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InfrastructureDisableReason.encode(to:)(void *a1, int a2)
{
  int v30 = a2;
  uint64_t v3 = sub_100002274(&qword_100406170);
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  __chkstk_darwin(v3);
  unint64_t v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100002274(&qword_100406178);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  __chkstk_darwin(v5);
  Swift::UInt8 v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100002274(&qword_100406180);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::UInt v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100002274(&qword_100406188);
  uint64_t v29 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  sub_100021104(a1, v16);
  unint64_t v17 = sub_100062094();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for InfrastructureDisableReason.CodingKeys,  &type metadata for InfrastructureDisableReason.CodingKeys,  v17,  v16,  v15);
  if ((_BYTE)v30)
  {
    if (v30 == 1)
    {
      char v32 = 1;
      unint64_t v18 = sub_10006211C();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys,  &v32,  v12,  &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys,  v18);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    }

    else
    {
      char v33 = 2;
      unint64_t v20 = sub_1000620D8();
      uint64_t v21 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys,  &v33,  v12,  &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys,  v20);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
    }
  }

  else
  {
    char v31 = 0;
    unint64_t v19 = sub_100062160();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys,  &v31,  v12,  &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys,  v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v12);
}

Swift::Int AWDLPeer.Reachability.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void *InfrastructureDisableReason.init(from:)(void *a1)
{
  return sub_1000621A4(a1);
}

void *sub_100061E84@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000621A4(a1);
  if (!v2) {
    *a2  = (_BYTE)result;
  }
  return result;
}

uint64_t sub_100061EAC(void *a1)
{
  return InfrastructureDisableReason.encode(to:)(a1, *v1);
}

uint64_t sub_100061EC4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a1 == a5 && a2 == a6
    || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0LL), result = 0LL, (v12 & 1) != 0))
  {
    LOWORD(v17)  = a3;
    BYTE2(v17)  = BYTE2(a3);
    HIBYTE(v17)  = BYTE3(a3);
    LOBYTE(v18)  = BYTE4(a3);
    HIBYTE(v18)  = BYTE5(a3);
    LOWORD(v15)  = a7;
    BYTE2(v15)  = BYTE2(a7);
    HIBYTE(v15)  = BYTE3(a7);
    LOBYTE(vswift_weakDestroy(v0 + 16) = BYTE4(a7);
    HIBYTE(vswift_weakDestroy(v0 + 16) = BYTE5(a7);
    BOOL v14 = v17 == v15 && v18 == v16;
    if (v14
      && (_DWORD)a4 == (_DWORD)a8
      && ((0x801004u >> ((a4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a8 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a4))
      {
        case 2:
          if (BYTE5(a8) != 2) {
            return 0LL;
          }
          break;
        case 3:
          if (BYTE5(a8) != 3) {
            return 0LL;
          }
          break;
        case 4:
          if (BYTE5(a8) != 4) {
            return 0LL;
          }
          break;
        case 5:
          if (BYTE5(a8) != 5) {
            return 0LL;
          }
          break;
        case 6:
          if (BYTE5(a8) != 6) {
            return 0LL;
          }
          break;
        default:
          break;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100062094()
{
  unint64_t result = qword_100406190;
  if (!qword_100406190)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033BE80, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100406190);
  }

  return result;
}

unint64_t sub_1000620D8()
{
  unint64_t result = qword_100406198;
  if (!qword_100406198)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033BE30, &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100406198);
  }

  return result;
}

unint64_t sub_10006211C()
{
  unint64_t result = qword_1004061A0;
  if (!qword_1004061A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10033BDE0,  &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061A0);
  }

  return result;
}

unint64_t sub_100062160()
{
  unint64_t result = qword_1004061A8;
  if (!qword_1004061A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10033BD90,  &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061A8);
  }

  return result;
}

void *sub_1000621A4(void *a1)
{
  uint64_t v37 = sub_100002274(&qword_100406210);
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_100002274(&qword_100406218);
  uint64_t v33 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_100002274(&qword_100406220);
  uint64_t v4 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274(&qword_100406228);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100021104(a1, v11);
  unint64_t v13 = sub_100062094();
  BOOL v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for InfrastructureDisableReason.CodingKeys,  &type metadata for InfrastructureDisableReason.CodingKeys,  v13,  v11,  v12);
  if (v14) {
    goto LABEL_7;
  }
  uint64_t v31 = v4;
  uint64_t v32 = v8;
  int v15 = v39;
  uint64_t v40 = a1;
  __int16 v16 = v10;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter(v7);
  uint64_t v18 = v17;
  uint64_t v19 = v7;
  if (*(void *)(v17 + 16) != 1LL)
  {
    uint64_t v23 = v17;
    uint64_t v24 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v24, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v10 = v25;
    sub_100002274(&qword_100406230);
    *uint64_t v10 = &type metadata for InfrastructureDisableReason;
    uint64_t v26 = KeyedDecodingContainer.codingPath.getter(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v26,  0xD00000000000002BLL,  0x8000000100363D90LL,  0LL);
    uint64_t v27 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v10,  enum case for DecodingError.typeMismatch(_:),  v24);
    swift_willThrow(v27);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(void *, uint64_t))(v32 + 8))(v16, v19);
    a1  = v40;
LABEL_7:
    sub_100002AC4(a1);
    return v10;
  }

  uint64_t v10 = (void *)*(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if ((_DWORD)v10 == 1)
    {
      char v42 = 1;
      unint64_t v20 = sub_10006211C();
      uint64_t v21 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys,  &v42,  v7,  &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys,  v20);
      uint64_t v22 = v32;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v36);
    }

    else
    {
      char v43 = 2;
      unint64_t v30 = sub_1000620D8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys,  &v43,  v7,  &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys,  v30);
      uint64_t v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v37);
    }

    swift_bridgeObjectRelease(v18);
    (*(void (**)(void *, uint64_t))(v22 + 8))(v16, v19);
  }

  else
  {
    char v41 = 0;
    unint64_t v29 = sub_100062160();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys,  &v41,  v7,  &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys,  v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v34);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(void *, uint64_t))(v32 + 8))(v16, v7);
  }

  sub_100002AC4(v40);
  return v10;
}

unint64_t sub_100062580()
{
  unint64_t result = qword_1004061B0;
  if (!qword_1004061B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WiFiNetwork, &type metadata for WiFiNetwork);
    atomic_store(result, (unint64_t *)&qword_1004061B0);
  }

  return result;
}

unint64_t sub_1000625C8()
{
  unint64_t result = qword_1004061B8;
  if (!qword_1004061B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AutoJoinState, &type metadata for AutoJoinState);
    atomic_store(result, (unint64_t *)&qword_1004061B8);
  }

  return result;
}

unint64_t sub_100062610()
{
  unint64_t result = qword_1004061C0;
  if (!qword_1004061C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InfrastructureDisableReason,  &type metadata for InfrastructureDisableReason);
    atomic_store(result, (unint64_t *)&qword_1004061C0);
  }

  return result;
}

uint64_t initializeWithCopy for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v3;
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28)  = *(_WORD *)(a2 + 28);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19)  = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20)  = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21)  = *(_BYTE *)(a2 + 21);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28)  = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29)  = *(_BYTE *)(a2 + 29);
  return a1;
}

__n128 initializeWithCopy for NANDiscoveryWindowStartEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14)  = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t assignWithTake for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28)  = *(_WORD *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiNetwork(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 30)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WiFiNetwork(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_WORD *)(result + 28)  = 0;
    *(_DWORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 30)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 30)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for WiFiNetwork()
{
  return &type metadata for WiFiNetwork;
}

uint64_t storeEnumTagSinglePayload for AutoJoinState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100062888 + 4 * byte_10033B909[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000628BC + 4 * byte_10033B904[v4]))();
}

uint64_t sub_1000628BC(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1000628C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1000628CCLL);
  }
  return result;
}

uint64_t sub_1000628D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1000628E0LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_1000628E4(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1000628EC(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoJoinState()
{
  return &type metadata for AutoJoinState;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason()
{
  return &type metadata for InfrastructureDisableReason;
}

uint64_t getEnumTagSinglePayload for NonNANOperatingChannelInformation.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t _s7CoreP2P27InfrastructureDisableReasonOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000629FC + 4 * byte_10033B913[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100062A30 + 4 * byte_10033B90E[v4]))();
}

uint64_t sub_100062A30(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100062A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100062A40LL);
  }
  return result;
}

uint64_t sub_100062A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100062A54LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_100062A58(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100062A60(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.CodingKeys()
{
  return &type metadata for InfrastructureDisableReason.CodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.LowLatencyRequiredCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.UnspecifiedCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys;
}

unint64_t sub_100062AB0()
{
  unint64_t result = qword_1004061C8;
  if (!qword_1004061C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033BD68, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061C8);
  }

  return result;
}

unint64_t sub_100062AF8()
{
  unint64_t result = qword_1004061D0;
  if (!qword_1004061D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10033BC88,  &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061D0);
  }

  return result;
}

unint64_t sub_100062B40()
{
  unint64_t result = qword_1004061D8;
  if (!qword_1004061D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10033BCB0,  &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061D8);
  }

  return result;
}

unint64_t sub_100062B88()
{
  unint64_t result = qword_1004061E0;
  if (!qword_1004061E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10033BC38,  &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061E0);
  }

  return result;
}

unint64_t sub_100062BD0()
{
  unint64_t result = qword_1004061E8;
  if (!qword_1004061E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10033BC60,  &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061E8);
  }

  return result;
}

unint64_t sub_100062C18()
{
  unint64_t result = qword_1004061F0;
  if (!qword_1004061F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033BBE8, &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061F0);
  }

  return result;
}

unint64_t sub_100062C60()
{
  unint64_t result = qword_1004061F8;
  if (!qword_1004061F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033BC10, &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004061F8);
  }

  return result;
}

unint64_t sub_100062CA8()
{
  unint64_t result = qword_100406200;
  if (!qword_100406200)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033BCD8, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100406200);
  }

  return result;
}

unint64_t sub_100062CF0()
{
  unint64_t result = qword_100406208;
  if (!qword_100406208)
  {
    unint64_t result = swift_getWitnessTable(&unk_10033BD00, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100406208);
  }

  return result;
}

uint64_t sub_100062D34(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v4 = 0x8000000100363D50LL;
    if (a2 == 0x8000000100363D50LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100363D50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v6 = 0x8000000100363D70LL;
    if (a2 == 0x8000000100363D70LL) {
      goto LABEL_10;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100363D70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0x6669636570736E75LL && a2 == 0xEB00000000646569LL)
  {
    swift_bridgeObjectRelease(0xEB00000000646569LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669636570736E75LL, 0xEB00000000646569LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100062EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v27 = a2;
  uint64_t v26 = sub_100002274(&qword_100406238);
  uint64_t v5 = __chkstk_darwin(v26);
  char v7 = (unsigned __int8 *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v15 = 0LL;
  while (v13)
  {
    unint64_t v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v17 = v16 | (v15 << 6);
LABEL_5:
    uint64_t v18 = *(void *)(a1 + 56);
    char v19 = *(_BYTE *)(*(void *)(a1 + 48) + v17);
    uint64_t v20 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    sub_100057FE8( v18 + *(void *)(*(void *)(v20 - 8) + 72LL) * v17,  (uint64_t)&v9[*(int *)(v26 + 48)],  type metadata accessor for NANGenericServiceProtocol.Attribute);
    *uint64_t v9 = v19;
    sub_1000586C0((uint64_t)v9, (uint64_t)v7, &qword_100406238);
    sub_100068D4C(v7, v27, v28);
    uint64_t result = sub_1000225EC((uint64_t)v7, &qword_100406238);
    if (v3) {
      return swift_release(a1);
    }
  }

  if (__OFADD__(v15++, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v15 >= v25) {
    return swift_release(a1);
  }
  unint64_t v22 = *(void *)(v24 + 8 * v15);
  if (v22)
  {
LABEL_19:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v15 << 6);
    goto LABEL_5;
  }

  int64_t v23 = v15 + 1;
  if (v15 + 1 >= v25) {
    return swift_release(a1);
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v15 + 2;
  if (v15 + 2 >= v25) {
    return swift_release(a1);
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v15 + 3;
  if (v15 + 3 >= v25) {
    return swift_release(a1);
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v15 + 4;
  if (v15 + 4 >= v25) {
    return swift_release(a1);
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
LABEL_18:
    int64_t v15 = v23;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v15 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v15 >= v25) {
      return swift_release(a1);
    }
    unint64_t v22 = *(void *)(v24 + 8 * v15);
    ++v23;
    if (v22) {
      goto LABEL_19;
    }
  }

LABEL_26:
  __break(1u);
  return result;
}

    uint64_t v31 = sub_100002274(&qword_100406238);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v13, 1LL, 1LL, v31);
    unint64_t v22 = 0LL;
LABEL_27:
    sub_1000586C0((uint64_t)v13, (uint64_t)v16, &qword_1004064B8);
    uint64_t v32 = sub_100002274(&qword_100406238);
    uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48LL))(v16, 1LL, v32);
    uint64_t v34 = v33 == 1;
    if (v33 == 1) {
      return v34;
    }
    uint64_t v35 = (uint64_t)&v16[*(int *)(v32 + 48)];
    uint64_t v36 = *v16;
    sub_100022628(v35, (uint64_t)v9, type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v37 = sub_10001C01C(v36);
    if ((v38 & 1) == 0)
    {
      sub_10005802C((uint64_t)v9, type metadata accessor for NANGenericServiceProtocol.Attribute);
      return 0LL;
    }

    sub_100057FE8( *(void *)(a2 + 56) + *(void *)(v46 + 72) * v37,  (uint64_t)v7,  type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_10006CA4C((uint64_t)v7, (uint64_t)v9);
    uint64_t v40 = v39;
    sub_10005802C((uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t result = sub_10005802C((uint64_t)v9, type metadata accessor for NANGenericServiceProtocol.Attribute);
    if ((v40 & 1) == 0) {
      return v34;
    }
  }

  unint64_t v29 = *(void *)(v42 + 8 * v30);
  if (v29)
  {
LABEL_15:
    uint64_t v28 = v30;
LABEL_12:
    unint64_t v22 = (v29 - 1) & v29;
    uint64_t v24 = __clz(__rbit64(v29)) + (v28 << 6);
    unint64_t v45 = v28;
    goto LABEL_8;
  }

  while (1)
  {
    uint64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v28 >= v43)
    {
      unint64_t v45 = v41;
      goto LABEL_26;
    }

    unint64_t v29 = *(void *)(v42 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_12;
    }
  }

    uint64_t v35 = sub_100002274(&qword_1004063D8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v13, 1LL, 1LL, v35);
    uint64_t v21 = 0LL;
LABEL_27:
    sub_1000586C0((uint64_t)v13, (uint64_t)v24, &qword_1004063D0);
    uint64_t v36 = sub_100002274(&qword_1004063D8);
    uint64_t v37 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48LL))(v24, 1LL, v36);
    unint64_t v38 = v37 == 1;
    if (v37 == 1) {
      return v38;
    }
    unint64_t v22 = v31;
    uint64_t v39 = (uint64_t)v24 + *(int *)(v36 + 48);
    uint64_t v40 = *((unsigned __int8 *)v24 + 2);
    char v41 = *(unsigned int *)((char *)v24 + 3);
    char v42 = *v24;
    char v43 = (uint64_t)v55;
    sub_100022628(v39, (uint64_t)v55, type metadata accessor for NANInternetSharingStatistics.Requester);
    uint64_t v44 = sub_10001C08C(v42 | (v40 << 16) | (v41 << 24));
    if ((v45 & 1) == 0) {
      goto LABEL_34;
    }
    unint64_t v4 = v54;
    sub_100057FE8( *(void *)(a2 + 56) + *(void *)(v54 + 72) * v44,  v22,  type metadata accessor for NANInternetSharingStatistics.Requester);
    if ((static DispatchTimeInterval.== infix(_:_:)(v22, v43) & 1) == 0)
    {
      sub_10005802C(v22, type metadata accessor for NANInternetSharingStatistics.Requester);
LABEL_34:
      sub_10005802C(v43, type metadata accessor for NANInternetSharingStatistics.Requester);
      return 0LL;
    }

    unint64_t v46 = *(int *)(v56 + 20);
    uint64_t v47 = *(unsigned __int8 *)(v22 + v46);
    unint64_t v48 = *(unsigned __int8 *)(v43 + v46);
    sub_10005802C(v22, type metadata accessor for NANInternetSharingStatistics.Requester);
    uint64_t result = sub_10005802C(v43, type metadata accessor for NANInternetSharingStatistics.Requester);
    if (v47 != v48) {
      return v38;
    }
  }

  uint64_t v33 = *(void *)(v50 + 8 * v34);
  if (v33)
  {
LABEL_15:
    uint64_t v32 = v34;
LABEL_12:
    uint64_t v21 = (v33 - 1) & v33;
    int64_t v25 = __clz(__rbit64(v33)) + (v32 << 6);
    uint64_t v57 = v32;
    goto LABEL_8;
  }

  while (1)
  {
    uint64_t v32 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v32 >= v51)
    {
      uint64_t v57 = v49;
      goto LABEL_26;
    }

    uint64_t v33 = *(void *)(v50 + 8 * v32);
    ++v34;
    if (v33) {
      goto LABEL_12;
    }
  }

        uint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      int64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        BOOL v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        int64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            int64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        BOOL v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14)  = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *int v2 = v6;
  return result;
}

        uint64_t v9 = (v16 - 1) & v16;
        BOOL v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }

      uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * v14);
      char v19 = *(void *)(v6 + 40);
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v22 = v21;
      Hasher.init(_seed:)(v35, v19);
      String.hash(into:)(v35, v20, v22);
      int64_t v23 = Hasher._finalize()();
      swift_bridgeObjectRelease(v22);
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v25 = v23 & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unint64_t v30 = *(void *)(v10 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v12 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      *(void *)(*(void *)(v6 + 48) + 8 * v12)  = v18;
      ++*(void *)(v6 + 16);
    }
  }

  swift_release(v3);
  *int v2 = v6;
}

        uint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(_BYTE *)(*(void *)(v3 + 48) + v16);
      uint64_t v21 = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v20, 1LL);
      unint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v23 = v21 & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        BOOL v14 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }

        while (v28 == -1);
        BOOL v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14)  = v20;
      ++*(void *)(v6 + 16);
    }
  }

  swift_release(v3);
  *int v2 = v6;
}

  type metadata accessor for AWDLTrafficRegistrationService(0LL);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
  __break(1u);
}

    uint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    int64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      BOOL v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      int64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          int64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      BOOL v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14)  = v20;
    ++*(void *)(v6 + 16);
  }

  char v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    int v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    char v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    char v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v16 - 1) & v16;
    BOOL v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + 8 * v14);
    char v19 = *(void *)(v6 + 40);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    unint64_t v22 = v21;
    Hasher.init(_seed:)(v35, v19);
    int64_t v23 = v18;
    String.hash(into:)(v35, v20, v22);
    uint64_t v24 = Hasher._finalize()();
    swift_bridgeObjectRelease(v22);
    int64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v26 = v24 & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v10 + 8 * v27);
      }

      while (v31 == -1);
      uint64_t v12 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    *(void *)(*(void *)(v6 + 48) + 8 * v12)  = v23;
    ++*(void *)(v6 + 16);
  }

  unint64_t v17 = v15 + 3;
  if (v17 >= v34)
  {
LABEL_36:
    swift_release_n(v3, 2LL);
    int v2 = v32;
    goto LABEL_38;
  }

  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= v34) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(_BYTE *)(*(void *)(v3 + 48) + v16);
    uint64_t v21 = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), v20, 1LL);
    unint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v23 = v21 & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      BOOL v14 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v24);
      }

      while (v28 == -1);
      BOOL v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14)  = v20;
    ++*(void *)(v6 + 16);
  }

  char v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    int v2 = v29;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    char v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    char v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100057324(v50);
    return swift_release(v56);
  }

  sub_100137ED4(v20, a4 & 1);
  unint64_t v22 = sub_10001C470((uint64_t)v14);
  if ((v21 & 1) == (v23 & 1))
  {
    unint64_t v17 = v22;
    if ((v21 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_100002AE4(*(void *)(*(void *)a5 + 56LL) + 32 * v17, (uint64_t)v45);
    sub_100002AE4((uint64_t)v45, (uint64_t)v46);
    sub_100002AC4(v45);
    sub_100002AC4(v47);

    uint64_t v24 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v17);
    sub_100002AC4(v24);
    sub_100022594(v46, v24);
    goto LABEL_16;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v40 = *v39;
    swift_bridgeObjectRetain(*v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0) {
      uint64_t v35 = sub_1000A796C(0LL, v35[2] + 1LL, 1, v35);
    }
    char v42 = v35[2];
    char v41 = v35[3];
    if (v42 >= v41 >> 1) {
      uint64_t v35 = sub_1000A796C((void *)(v41 > 1), v42 + 1, 1, v35);
    }
    v35[2]  = v42 + 1;
    v35[v42 + 4]  = v40;
    goto LABEL_31;
  }

  uint64_t v35 = _swiftEmptyArrayStorage;
LABEL_46:
  swift_bridgeObjectRelease(v32);
  v62[0]  = _swiftEmptyArrayStorage;
  uint64_t v44 = v35[2];
  if (!v44)
  {
    swift_bridgeObjectRelease(v35);
LABEL_69:
    uint64_t v56 = v62[0];
    sub_1000208D8(v63, v64);
    return v56;
  }

  swift_bridgeObjectRetain(v35);
  unint64_t v45 = 0LL;
  while (1)
  {
    unint64_t v46 = v35[v45 + 4];
    uint64_t v47 = (void *)v62[0];
    unint64_t v48 = *(void *)(v62[0] + 16LL);
    uint64_t v49 = *(void *)(v46 + 16);
    if (v48)
    {
      swift_bridgeObjectRetain(v46);
      if (!v49) {
        goto LABEL_49;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v47);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10019EA0C(v47);
        uint64_t v47 = (void *)result;
      }

      unint64_t v51 = 0LL;
      uint64_t v52 = *(void *)(v46 + 16);
      do
      {
        if (v49 == v51)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }

        if (v51 == v52) {
          goto LABEL_71;
        }
        uint64_t v53 = v47[2];
        if (v51 >= v53) {
          goto LABEL_72;
        }
        *((_BYTE *)v47 + v51 + 32) |= *(_BYTE *)(v46 + 32 + v51);
        uint64_t v54 = v51 + 1;
        if (v54 == v48) {
          break;
        }
        uint64_t v55 = v54 - 1;
        if (v55 == v48 - 1) {
          goto LABEL_73;
        }
        unint64_t v51 = v55 + 1;
      }

      while (v51 != v49);
      v62[0]  = v47;
      if (v53 >= v52) {
        goto LABEL_49;
      }
    }

    else
    {
      uint64_t result = swift_bridgeObjectRetain(v46);
      uint64_t v53 = 0LL;
      uint64_t v52 = v49;
      if (!v49) {
        goto LABEL_49;
      }
    }

    if (v49 < v53) {
      break;
    }
    if (v52 < v49) {
      goto LABEL_75;
    }
    sub_10019EB3C(v46, v46 + 32, v53, (2 * v49) | 1);
LABEL_49:
    ++v45;
    swift_bridgeObjectRelease(v46);
    if (v45 == v44)
    {
      swift_bridgeObjectRelease_n(v35, 2LL);
      goto LABEL_69;
    }
  }

    unint64_t v45 = *v44;
    swift_bridgeObjectRetain(*v44);
    if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0) {
      uint64_t v40 = sub_1000A796C(0LL, v40[2] + 1LL, 1, v40);
    }
    uint64_t v47 = v40[2];
    unint64_t v46 = v40[3];
    if (v47 >= v46 >> 1) {
      uint64_t v40 = sub_1000A796C((void *)(v46 > 1), v47 + 1, 1, v40);
    }
    v40[2]  = v47 + 1;
    v40[v47 + 4]  = v45;
    goto LABEL_31;
  }

  uint64_t v40 = _swiftEmptyArrayStorage;
LABEL_46:
  swift_bridgeObjectRelease(v71);
  v76[0]  = _swiftEmptyArrayStorage;
  uint64_t v49 = v40[2];
  if (!v49)
  {
    swift_bridgeObjectRelease(v40);
LABEL_69:
    unint64_t v61 = v76[0];
    sub_1000208D8(v77, v78);
    return v61;
  }

  swift_bridgeObjectRetain(v40);
  uint64_t v50 = 0LL;
  while (1)
  {
    unint64_t v51 = v40[v50 + 4];
    uint64_t v52 = (void *)v76[0];
    uint64_t v53 = *(void *)(v76[0] + 16LL);
    uint64_t v54 = *(void *)(v51 + 16);
    if (v53)
    {
      swift_bridgeObjectRetain(v51);
      if (!v54) {
        goto LABEL_49;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v52);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10019EA0C(v52);
        uint64_t v52 = (void *)result;
      }

      uint64_t v56 = 0LL;
      uint64_t v57 = *(void *)(v51 + 16);
      do
      {
        if (v54 == v56)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }

        if (v56 == v57) {
          goto LABEL_71;
        }
        unint64_t v58 = v52[2];
        if (v56 >= v58) {
          goto LABEL_72;
        }
        *((_BYTE *)v52 + v56 + 32) |= *(_BYTE *)(v51 + 32 + v56);
        unint64_t v59 = v56 + 1;
        if (v59 == v53) {
          break;
        }
        unint64_t v60 = v59 - 1;
        if (v60 == v53 - 1) {
          goto LABEL_73;
        }
        uint64_t v56 = v60 + 1;
      }

      while (v56 != v54);
      v76[0]  = v52;
      if (v58 >= v57) {
        goto LABEL_49;
      }
    }

    else
    {
      uint64_t result = swift_bridgeObjectRetain(v51);
      unint64_t v58 = 0LL;
      uint64_t v57 = v54;
      if (!v54) {
        goto LABEL_49;
      }
    }

    if (v54 < v58) {
      break;
    }
    if (v57 < v54) {
      goto LABEL_75;
    }
    sub_10019EB3C(v51, v51 + 32, v58, (2 * v54) | 1);
LABEL_49:
    ++v50;
    swift_bridgeObjectRelease(v51);
    if (v50 == v49)
    {
      swift_bridgeObjectRelease_n(v40, 2LL);
      goto LABEL_69;
    }
  }

    swift_release(a1);
    return;
  }

  __break(1u);
LABEL_28:
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Channel);
  __break(1u);
}

      uint64_t v44 = v46;
      char v43 = v47;
      swift_release(v57);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v43, 1LL, 1LL, v58);
LABEL_27:
      swift_bridgeObjectRelease(v54);

      swift_bridgeObjectRelease(v56);
      return;
    }

  __break(1u);
}

  __break(1u);
  return result;
}

      char v19 = a3;
      return swift_release(v19);
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      int64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        BOOL v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        int64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            int64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        BOOL v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14)  = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *int v2 = v6;
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      unint64_t v22 = *v21;
      int64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        BOOL v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        BOOL v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      int64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *int64_t v15 = v22;
      v15[1]  = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *int v2 = v6;
  return result;
}

        uint64_t v10 = (v17 - 1) & v17;
        uint64_t v39 = v18;
        int64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }

      uint64_t v20 = (unsigned __int8 *)(*(void *)(v3 + 48) + 6 * v15);
      uint64_t v21 = *v20;
      unint64_t v22 = v20[1];
      int64_t v23 = v20[2];
      uint64_t v24 = v20[3];
      int64_t v25 = v20[4];
      uint64_t v26 = v20[5];
      Hasher.init(_seed:)(v40, *(void *)(v6 + 40));
      NANClusterChangeEvent.hash(into:)( (int)v40,  v21 | (v22 << 8) | (v23 << 16) | (v24 << 24) | (v25 << 32) | (v26 << 40));
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }

        while (v33 == -1);
        uint64_t v12 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      unint64_t v13 = (_BYTE *)(*(void *)(v6 + 48) + 6 * v12);
      *unint64_t v13 = v21;
      v13[1]  = v22;
      v13[2]  = v23;
      void v13[3] = v24;
      v13[4]  = v25;
      v13[5]  = v26;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v38;
      char v7 = v39;
    }
  }

  uint64_t result = swift_release(v3);
  *int v2 = v6;
  return result;
}

        uint64_t v39 = (v16 - 1) & v16;
        uint64_t v40 = v17;
        BOOL v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }

      char v19 = (Swift::UInt8 *)(*(void *)(v3 + 48) - v14 + 8 * v14);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      unint64_t v22 = v19[2];
      int64_t v23 = v19[3];
      uint64_t v24 = v19[4];
      int64_t v25 = v19[5];
      uint64_t v26 = v19[6];
      Hasher.init(_seed:)(v41, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      NANClusterChangeEvent.hash(into:)( (int)v41,  v21 | (v22 << 8) | (v23 << 16) | (v24 << 24) | (v25 << 32) | (v26 << 40));
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }

        while (v33 == -1);
        uint64_t v12 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      unint64_t v13 = (Swift::UInt8 *)(*(void *)(v6 + 48) - v12 + 8 * v12);
      *unint64_t v13 = v20;
      v13[1]  = v21;
      v13[2]  = v22;
      void v13[3] = v23;
      v13[4]  = v24;
      v13[5]  = v25;
      v13[6]  = v26;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v38;
      uint64_t v10 = v39;
      char v7 = v40;
    }
  }

  uint64_t result = swift_release(v3);
  *int v2 = v6;
  return result;
}

        uint64_t v9 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }

      uint64_t v20 = v3;
      uint64_t v21 = *(void *)(v3 + 48) + 24 * v16;
      unint64_t v22 = *(void *)v21;
      int64_t v23 = *(void *)(v21 + 8);
      uint64_t v24 = *(unsigned __int8 *)(v21 + 16);
      int64_t v25 = *(_BYTE *)(v21 + 17);
      Hasher.init(_seed:)(v39, *(void *)(v6 + 40));
      uint64_t v26 = String.lowercased()();
      String.hash(into:)(v39, v26._countAndFlagsBits, v26._object);
      swift_bridgeObjectRelease(v26._object);
      if (v24) {
        uint64_t v27 = 7365749LL;
      }
      else {
        uint64_t v27 = 7365492LL;
      }
      String.hash(into:)(v39, v27, 0xE300000000000000LL);
      swift_bridgeObjectRelease(0xE300000000000000LL);
      Hasher._combine(_:)(v25);
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v10 + 8 * v30);
        }

        while (v34 == -1);
        unint64_t v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      BOOL v14 = *(void *)(v6 + 48) + 24 * v13;
      *(void *)BOOL v14 = v22;
      *(void *)(v14 + 8)  = v23;
      *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = v24;
      *(_BYTE *)(v14 + 17)  = v25;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v20;
    }
  }

  uint64_t result = swift_release(v3);
  *int v2 = v6;
  return result;
}

    uint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    int64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      BOOL v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      int64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          int64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      BOOL v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14)  = v20;
    ++*(void *)(v6 + 16);
  }

  char v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    int v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    char v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    char v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    unint64_t v22 = *v21;
    int64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      BOOL v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        unint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      BOOL v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    int64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *int64_t v15 = v22;
    v15[1]  = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    int v2 = v31;
    goto LABEL_38;
  }

  char v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    unint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    char v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v17 - 1) & v17;
    unint64_t v38 = v18;
    int64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_27:
    uint64_t v20 = (unsigned __int8 *)(*(void *)(v3 + 48) + 6 * v15);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    int64_t v23 = v20[2];
    uint64_t v24 = v20[3];
    int64_t v25 = v20[4];
    uint64_t v26 = v20[5];
    Hasher.init(_seed:)(v39, *(void *)(v6 + 40));
    NANClusterChangeEvent.hash(into:)( (int)v39,  v21 | (v22 << 8) | (v23 << 16) | (v24 << 24) | (v25 << 32) | (v26 << 40));
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v12 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    unint64_t v13 = (_BYTE *)(*(void *)(v6 + 48) + 6 * v12);
    *unint64_t v13 = v21;
    v13[1]  = v22;
    v13[2]  = v23;
    void v13[3] = v24;
    v13[4]  = v25;
    v13[5]  = v26;
    ++*(void *)(v6 + 16);
    uint64_t v3 = v37;
    char v7 = v38;
  }

  char v19 = v16 + 3;
  if (v19 >= v36)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    int v2 = v34;
    goto LABEL_38;
  }

  unint64_t v17 = *(void *)(v35 + 8 * v19);
  if (v17)
  {
    uint64_t v18 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v18 >= v36) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v35 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_26;
    }
  }

    unint64_t v38 = (v16 - 1) & v16;
    uint64_t v39 = v17;
    BOOL v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_27:
    char v19 = (Swift::UInt8 *)(*(void *)(v3 + 48) - v14 + 8 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    unint64_t v22 = v19[2];
    int64_t v23 = v19[3];
    uint64_t v24 = v19[4];
    int64_t v25 = v19[5];
    uint64_t v26 = v19[6];
    Hasher.init(_seed:)(v40, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    NANClusterChangeEvent.hash(into:)( (int)v40,  v21 | (v22 << 8) | (v23 << 16) | (v24 << 24) | (v25 << 32) | (v26 << 40));
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v12 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    unint64_t v13 = (Swift::UInt8 *)(*(void *)(v6 + 48) - v12 + 8 * v12);
    *unint64_t v13 = v20;
    v13[1]  = v21;
    v13[2]  = v22;
    void v13[3] = v23;
    v13[4]  = v24;
    v13[5]  = v25;
    v13[6]  = v26;
    ++*(void *)(v6 + 16);
    uint64_t v3 = v37;
    uint64_t v10 = v38;
    char v7 = v39;
  }

  uint64_t v18 = v7 + 4;
  if (v7 + 4 >= v36)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    int v2 = v34;
    goto LABEL_38;
  }

  unint64_t v16 = *(void *)(v35 + 8 * v18);
  if (v16)
  {
    unint64_t v17 = v7 + 4;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v17 >= v36) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    uint64_t v20 = *(void *)(v3 + 48) + 24 * v16;
    uint64_t v21 = *(void *)v20;
    unint64_t v22 = *(void *)(v20 + 8);
    int64_t v23 = *(unsigned __int8 *)(v20 + 16);
    uint64_t v24 = *(_BYTE *)(v20 + 17);
    Hasher.init(_seed:)(v38, *(void *)(v6 + 40));
    int64_t v25 = String.lowercased()();
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v38, v25._countAndFlagsBits, v25._object);
    swift_bridgeObjectRelease(v25._object);
    if (v23) {
      uint64_t v26 = 7365749LL;
    }
    else {
      uint64_t v26 = 7365492LL;
    }
    String.hash(into:)(v38, v26, 0xE300000000000000LL);
    swift_bridgeObjectRelease(0xE300000000000000LL);
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v10 + 8 * v29);
      }

      while (v33 == -1);
      unint64_t v13 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    BOOL v14 = *(void *)(v6 + 48) + 24 * v13;
    *(void *)BOOL v14 = v21;
    *(void *)(v14 + 8)  = v22;
    *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = v23;
    *(_BYTE *)(v14 + 17)  = v24;
    ++*(void *)(v6 + 16);
  }

  char v19 = v17 + 3;
  if (v19 >= v36)
  {
LABEL_39:
    uint64_t result = swift_release_n(v3, 2LL);
    int v2 = v34;
    goto LABEL_41;
  }

  uint64_t v18 = *(void *)(v35 + 8 * v19);
  if (v18)
  {
    uint64_t v12 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v12 >= v36) {
      goto LABEL_39;
    }
    uint64_t v18 = *(void *)(v35 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

void *NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.all;
}

void *NANGenericServiceProtocol.AttributeFilter.customAttributes.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.customAttributes;
}

void sub_100063120(uint64_t a1)
{
  uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v2 = __chkstk_darwin(v7);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100002274(&qword_1004050A0);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for NWEndpoint.Port(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = (char *)&loc_10006325C + *((int *)qword_1000638F0 + sub_10006D314(a1));
  __asm { BR              X10 }

uint64_t sub_10006326C()
{
  uint64_t v6 = *(void *)(v5 - 72);
  uint64_t v7 = *(void *)(v5 - 168);
  sub_100208CDC(v6, v0);
  if (v7)
  {
    uint64_t v9 = v6;
  }

  else
  {
    NWEndpoint.Port.init(rawValue:)(v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) != 1)
    {
      sub_1000208D8(*(void *)(v5 - 72), v0);
      unint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
      v13(v4, v3, v1);
      uint64_t v14 = *(void *)(v5 - 176);
      v13(v14, v4, v1);
      return swift_storeEnumTagMultiPayload(v14, *(void *)(v5 - 184), 0LL);
    }

    sub_1000225EC(v3, &qword_1004050A0);
    unint64_t v10 = sub_1000033FC();
    uint64_t v11 = swift_allocError(&type metadata for WiFiError, v10, 0LL, 0LL);
    *(_OWORD *)uint64_t v12 = xmmword_100337020;
    *(_BYTE *)(v12 + swift_weakDestroy(v0 + 16) = 2;
    swift_willThrow(v11);
    uint64_t v9 = *(void *)(v5 - 72);
  }

  return sub_1000208D8(v9, v0);
}

void sub_100063944()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_1000639D0 + 4 * byte_10033BEE0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_1000639D0()
{
  uint64_t v2 = type metadata accessor for NWEndpoint.Port(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v0, 1LL, 1LL, v2);
}

void sub_100063A30()
{
  uint64_t v2 = type metadata accessor for NWEndpoint.Port(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(v0, v1, v2);
  JUMPOUT(0x100063A18LL);
}

void sub_100063A6C()
{
  uint64_t v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v3, v4);
  uint64_t v5 = (char *)sub_100063AF0 + 4 * byte_10033BEE9[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_100063AF0()
{
  return 2LL;
}

void sub_100063B30()
{
}

void sub_100063B38()
{
  uint64_t v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v3, v4);
  uint64_t v5 = (char *)sub_100063BC8 + 4 * byte_10033BEF2[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_100063BC8()
{
  return 0LL;
}

void sub_100063C14()
{
  uint64_t v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v3, v4);
  uint64_t v5 = (char *)sub_100063CA4 + 4 * byte_10033BEFB[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_100063CA4()
{
  return 0LL;
}

void sub_100063CE8()
{
}

void sub_100063CF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_100063D88 + 4 * byte_10033BF04[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

void sub_100063D88()
{
  *uint64_t v0 = *v1;
}

void sub_100063DD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_100063E5C + 4 * byte_10033BF0D[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_100063E5C()
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v0, 1LL, 1LL, v2);
}

void sub_100063EBC()
{
}

void sub_100063EF0()
{
  uint64_t v1 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for NWEndpoint.Port(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v5, v6);
  uint64_t v7 = (char *)sub_100063FFC + 4 * byte_10033BF16[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }

uint64_t sub_100063FFC()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  sub_100020AFC(*v0, v3);
  sub_100020B54(0LL, 0xE000000000000000LL, v2, v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1000208D8(v2, v3);
  *(void *)(v1 - 88)  = &type metadata for String;
  *(void *)(v1 - 112)  = v5;
  *(void *)(v1 - 104)  = v7;
  Mirror.init(reflecting:)(v1 - 112);
  return sub_1000208D8(v2, v3);
}

void sub_1000641D0()
{
  uint64_t v1 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for NWEndpoint.Port(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v0, (uint64_t)v5, v6);
  uint64_t v7 = (char *)sub_1000642D0 + 4 * byte_10033BF1F[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }

uint64_t sub_1000642D0()
{
  uint64_t v5 = sub_10000AF70( &qword_100406338,  (uint64_t (*)(uint64_t))&type metadata accessor for NWEndpoint.Port,  (uint64_t)&protocol conformance descriptor for NWEndpoint.Port);
  dispatch thunk of Hashable.hash(into:)(v1, v0, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
}

Swift::Int sub_1000644F0()
{
  return Hasher._finalize()();
}

Swift::Int sub_100064530(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100064570(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006459C + 4 * byte_10033BF28[a1]))( 1953656656LL,  0xE400000000000000LL);
}

unint64_t sub_10006459C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000645B8()
{
  return 0x2065636976726553LL;
}

uint64_t sub_1000645D8()
{
  return 0x65636E6174736E49LL;
}

uint64_t sub_1000645FC()
{
  return 0x666E492074786554LL;
}

uint64_t sub_100064618()
{
  return 1145656661LL;
}

uint64_t sub_100064624()
{
  return 1651469378LL;
}

uint64_t sub_100064630()
{
  return 0x5320726F646E6556LL;
}

BOOL sub_100064654(_BYTE *a1, _BYTE *a2)
{
  return (0xDD06050403020100LL >> (8 * *a1)) == (0xDD06050403020100LL >> (8 * *a2));
}

uint64_t sub_100064690@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10006D314(*a1);
  *a2  = result;
  return result;
}

void sub_1000646B8(_BYTE *a1@<X8>)
{
  *a1  = 0xDD06050403020100LL >> (8 * *v1);
}

Swift::Int sub_1000646DC()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(0xDD06050403020100LL >> (8 * v1));
  return Hasher._finalize()();
}

void sub_100064734()
{
}

Swift::Int sub_100064774(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(0xDD06050403020100LL >> (8 * v2));
  return Hasher._finalize()();
}

uint64_t sub_1000647C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10007013C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100064824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10007013C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100064870(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v15 = *v1;
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  uint64_t v12 = sub_1000572E4( (unint64_t *)&qword_10040C630,  &qword_100405DC0,  (uint64_t)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v9, v6, a1, v11, v12);
}

uint64_t sub_1000649C4()
{
  return sub_100064570(*v0);
}

BOOL NANGenericServiceProtocol.isEmpty.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0LL;
}

CoreP2P::NANGenericServiceProtocol __swiftcall NANGenericServiceProtocol.init()()
{
  return (CoreP2P::NANGenericServiceProtocol)sub_100020554((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t NANGenericServiceProtocol.port.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  if (*(void *)(a1 + 16) && (unint64_t v11 = sub_10001C01C(0), (v12 & 1) != 0))
  {
    sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v5 + 72) * v11,  (uint64_t)v8,  type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_100022628((uint64_t)v8, (uint64_t)v10, type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_100063944();
    return sub_10005802C((uint64_t)v10, type metadata accessor for NANGenericServiceProtocol.Attribute);
  }

  else
  {
    uint64_t v14 = type metadata accessor for NWEndpoint.Port(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

uint64_t NANGenericServiceProtocol.port.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100002274(&qword_1004050A0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100002274(&qword_100405118);
  uint64_t v10 = __chkstk_darwin(v9);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v18 - v13;
  sub_1000226B0(a1, (uint64_t)v8, &qword_1004050A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) == 1)
  {
    uint64_t v15 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v14, v5, v2);
    uint64_t v16 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v14, v16, 0LL);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v14, 0LL, 1LL, v16);
  }

  sub_1000226B0((uint64_t)v14, (uint64_t)v12, &qword_100405118);
  sub_100013D20((uint64_t)v12, 0);
  sub_1000225EC(a1, &qword_1004050A0);
  return sub_1000225EC((uint64_t)v14, &qword_100405118);
}

void (*NANGenericServiceProtocol.port.modify(uint64_t **a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  size_t v3 = *(void *)(*(void *)(sub_100002274(&qword_1004050A0) - 8) + 64LL);
  a1[1]  = (uint64_t *)malloc(v3);
  uint64_t v4 = (uint64_t *)malloc(v3);
  a1[2]  = v4;
  NANGenericServiceProtocol.port.getter(*v1, (uint64_t)v4);
  return sub_100064D78;
}

void sub_100064D78(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_1000226B0(*(void *)(a1 + 16), (uint64_t)v2, &qword_1004050A0);
    NANGenericServiceProtocol.port.setter((uint64_t)v2);
    sub_1000225EC((uint64_t)v3, &qword_1004050A0);
  }

  else
  {
    NANGenericServiceProtocol.port.setter(*(void *)(a1 + 16));
  }

  free(v3);
  free(v2);
}

uint64_t NANGenericServiceProtocol.transportProtocol.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  if (!*(void *)(a1 + 16)) {
    return 2LL;
  }
  unint64_t v9 = sub_10001C01C(1);
  if ((v10 & 1) == 0) {
    return 2LL;
  }
  sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v3 + 72) * v9,  (uint64_t)v6,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100022628((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100063A6C();
  uint64_t v12 = v11;
  sub_10005802C((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v12;
}

uint64_t NANGenericServiceProtocol.transportProtocol.setter(unsigned __int8 a1)
{
  int v2 = a1;
  uint64_t v3 = sub_100002274(&qword_100405118);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  if (v2 == 2)
  {
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  }

  else
  {
    *uint64_t v8 = a1 & 1;
    uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v8, v10, 1LL);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 0LL, 1LL, v10);
  }

  sub_1000226B0((uint64_t)v8, (uint64_t)v6, &qword_100405118);
  sub_100013D20((uint64_t)v6, 1);
  return sub_1000225EC((uint64_t)v8, &qword_100405118);
}

void (*NANGenericServiceProtocol.transportProtocol.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1  = v3;
  void *v3 = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[1]  = malloc(v4);
  v3[2]  = malloc(v4);
  v3[3]  = malloc(v4);
  *((_BYTE *)v3 + 32)  = NANGenericServiceProtocol.transportProtocol.getter(*v1);
  return sub_100065074;
}

void sub_100065074(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  int v3 = *(unsigned __int8 *)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    size_t v4 = (_BYTE *)v2[1];
    if (v3 == 2)
    {
      uint64_t v5 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
    }

    else
    {
      *size_t v4 = v3 & 1;
      uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v4, v8, 1LL);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v4, 0LL, 1LL, v8);
    }

    uint64_t v9 = (void *)v2[2];
    uint64_t v10 = (void *)v2[3];
    uint64_t v11 = v2[1];
    sub_1000226B0(v11, (uint64_t)v9, &qword_100405118);
    sub_100013D20((uint64_t)v9, 1);
    uint64_t v12 = (void *)v11;
  }

  else
  {
    uint64_t v6 = (_BYTE *)v2[3];
    if (v3 == 2)
    {
      uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
    }

    else
    {
      *uint64_t v6 = v3 & 1;
      uint64_t v13 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v6, v13, 1LL);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v6, 0LL, 1LL, v13);
    }

    uint64_t v9 = (void *)v2[2];
    uint64_t v11 = v2[3];
    uint64_t v12 = (void *)v2[1];
    sub_1000226B0(v11, (uint64_t)v9, &qword_100405118);
    sub_100013D20((uint64_t)v9, 1);
    uint64_t v10 = (void *)v11;
  }

  sub_1000225EC(v11, &qword_100405118);
  free(v10);
  free(v9);
  free(v12);
  free(v2);
}

uint64_t NANGenericServiceProtocol.serviceName.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v9 = sub_10001C01C(2);
  if ((v10 & 1) == 0) {
    return 0LL;
  }
  sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v3 + 72) * v9,  (uint64_t)v6,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100022628((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100063B38();
  uint64_t v12 = v11;
  sub_10005802C((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v12;
}

uint64_t NANGenericServiceProtocol.serviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100405118);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v9 = (uint64_t *)((char *)&v13 - v8);
  if (a2)
  {
    *unint64_t v9 = a1;
    v9[1]  = a2;
    uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v9, v10, 2LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 0LL, 1LL, v10);
  }

  else
  {
    uint64_t v11 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v9, 1LL, 1LL, v11);
  }

  sub_1000226B0((uint64_t)v9, (uint64_t)v7, &qword_100405118);
  sub_100013D20((uint64_t)v7, 2);
  return sub_1000225EC((uint64_t)v9, &qword_100405118);
}

void (*NANGenericServiceProtocol.serviceName.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  void *v3 = NANGenericServiceProtocol.serviceName.getter(*v1);
  v3[1]  = v5;
  return sub_1000654A4;
}

void sub_1000654A4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8LL);
  if ((a2 & 1) != 0)
  {
    size_t v4 = (void *)v2[3];
    if (v3)
    {
      *size_t v4 = *v2;
      v4[1]  = v3;
      uint64_t v5 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v4, v5, 2LL);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 0LL, 1LL, v5);
    }

    else
    {
      uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v4, 1LL, 1LL, v8);
    }

    uint64_t v10 = (void *)v2[4];
    unint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000226B0((uint64_t)v11, (uint64_t)v10, &qword_100405118);
    swift_bridgeObjectRetain(v3);
    sub_100013D20((uint64_t)v10, 2);
    sub_1000225EC((uint64_t)v11, &qword_100405118);
    swift_bridgeObjectRelease(v2[1]);
  }

  else
  {
    uint64_t v6 = (void *)v2[5];
    if (v3)
    {
      *uint64_t v6 = *v2;
      v6[1]  = v3;
      uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v6, v7, 2LL);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 0LL, 1LL, v7);
    }

    else
    {
      uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
    }

    uint64_t v10 = (void *)v2[4];
    unint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000226B0((uint64_t)v9, (uint64_t)v10, &qword_100405118);
    sub_100013D20((uint64_t)v10, 2);
    sub_1000225EC((uint64_t)v9, &qword_100405118);
  }

  free(v9);
  free(v10);
  free(v11);
  free(v2);
}

uint64_t NANGenericServiceProtocol.instanceName.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v9 = sub_10001C01C(3);
  if ((v10 & 1) == 0) {
    return 0LL;
  }
  sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v3 + 72) * v9,  (uint64_t)v6,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100022628((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100063C14();
  uint64_t v12 = v11;
  sub_10005802C((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v12;
}

uint64_t NANGenericServiceProtocol.instanceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2)
  {
    *uint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v7, v8, 3LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 0LL, 1LL, v8);
  }

  else
  {
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v7, 1LL, 1LL, v9);
  }

  sub_1000226B0((uint64_t)v7, (uint64_t)v5, &qword_100405118);
  sub_100013D20((uint64_t)v5, 3);
  return sub_1000225EC((uint64_t)v7, &qword_100405118);
}

void (*NANGenericServiceProtocol.instanceName.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  void *v3 = NANGenericServiceProtocol.instanceName.getter(*v1);
  v3[1]  = v5;
  return sub_1000658E8;
}

void sub_1000658E8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8LL);
  if ((a2 & 1) != 0)
  {
    size_t v4 = (void *)v2[3];
    if (v3)
    {
      *size_t v4 = *v2;
      v4[1]  = v3;
      uint64_t v5 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v4, v5, 3LL);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 0LL, 1LL, v5);
    }

    else
    {
      uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v4, 1LL, 1LL, v8);
    }

    char v10 = (void *)v2[4];
    uint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000226B0((uint64_t)v11, (uint64_t)v10, &qword_100405118);
    swift_bridgeObjectRetain(v3);
    sub_100013D20((uint64_t)v10, 3);
    sub_1000225EC((uint64_t)v11, &qword_100405118);
    swift_bridgeObjectRelease(v2[1]);
  }

  else
  {
    uint64_t v6 = (void *)v2[5];
    if (v3)
    {
      *uint64_t v6 = *v2;
      v6[1]  = v3;
      uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v6, v7, 3LL);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 0LL, 1LL, v7);
    }

    else
    {
      uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
    }

    char v10 = (void *)v2[4];
    uint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000226B0((uint64_t)v9, (uint64_t)v10, &qword_100405118);
    sub_100013D20((uint64_t)v10, 3);
    sub_1000225EC((uint64_t)v9, &qword_100405118);
  }

  free(v9);
  free(v10);
  free(v11);
  free(v2);
}

uint64_t NANGenericServiceProtocol.textInfo.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v9 = sub_10001C01C(4);
  if ((v10 & 1) == 0) {
    return 0LL;
  }
  sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v3 + 72) * v9,  (uint64_t)v6,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100022628((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100063CF0();
  sub_10005802C((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v12;
}

uint64_t NANGenericServiceProtocol.textInfo.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  }

  else
  {
    *uint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v7, v9, 4LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v7, 0LL, 1LL, v9);
  }

  sub_1000226B0((uint64_t)v7, (uint64_t)v5, &qword_100405118);
  sub_100013D20((uint64_t)v5, 4);
  return sub_1000225EC((uint64_t)v7, &qword_100405118);
}

void (*NANGenericServiceProtocol.textInfo.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  void *v3 = NANGenericServiceProtocol.textInfo.getter(*v1);
  v3[1]  = v5;
  return sub_100065D30;
}

void sub_100065D30(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    uint64_t v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      uint64_t v6 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
    }

    else
    {
      uint64_t *v5 = v3;
      v5[1]  = v4;
      uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v5, v10, 4LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v5, 0LL, 1LL, v10);
    }

    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000226B0((uint64_t)v13, (uint64_t)v12, &qword_100405118);
    sub_10002255C(v3, v4);
    sub_100013D20((uint64_t)v12, 4);
    sub_1000225EC((uint64_t)v13, &qword_100405118);
    sub_100020B40(*v2, v2[1]);
  }

  else
  {
    unint64_t v7 = v2[1];
    uint64_t v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
    }

    else
    {
      *uint64_t v8 = *v2;
      v8[1]  = v7;
      uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v8, v14, 4LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v8, 0LL, 1LL, v14);
    }

    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000226B0((uint64_t)v11, (uint64_t)v12, &qword_100405118);
    sub_100013D20((uint64_t)v12, 4);
    sub_1000225EC((uint64_t)v11, &qword_100405118);
  }

  free(v11);
  free(v12);
  free(v13);
  free(v2);
}

uint64_t NANGenericServiceProtocol.blob.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v9 = sub_10001C01C(6);
  if ((v10 & 1) == 0) {
    return 0LL;
  }
  sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v3 + 72) * v9,  (uint64_t)v6,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100022628((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100063CF0();
  sub_10005802C((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v12;
}

uint64_t NANGenericServiceProtocol.blob.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  }

  else
  {
    *uint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v7, v9, 6LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v7, 0LL, 1LL, v9);
  }

  sub_1000226B0((uint64_t)v7, (uint64_t)v5, &qword_100405118);
  sub_100013D20((uint64_t)v5, 6);
  return sub_1000225EC((uint64_t)v7, &qword_100405118);
}

void (*NANGenericServiceProtocol.blob.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  void *v3 = NANGenericServiceProtocol.blob.getter(*v1);
  v3[1]  = v5;
  return sub_10006618C;
}

void sub_10006618C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    uint64_t v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      uint64_t v6 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
    }

    else
    {
      uint64_t *v5 = v3;
      v5[1]  = v4;
      uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v5, v10, 6LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v5, 0LL, 1LL, v10);
    }

    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000226B0((uint64_t)v13, (uint64_t)v12, &qword_100405118);
    sub_10002255C(v3, v4);
    sub_100013D20((uint64_t)v12, 6);
    sub_1000225EC((uint64_t)v13, &qword_100405118);
    sub_100020B40(*v2, v2[1]);
  }

  else
  {
    unint64_t v7 = v2[1];
    uint64_t v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
    }

    else
    {
      *uint64_t v8 = *v2;
      v8[1]  = v7;
      uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v8, v14, 6LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v8, 0LL, 1LL, v14);
    }

    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000226B0((uint64_t)v11, (uint64_t)v12, &qword_100405118);
    sub_100013D20((uint64_t)v12, 6);
    sub_1000225EC((uint64_t)v11, &qword_100405118);
  }

  free(v11);
  free(v12);
  free(v13);
  free(v2);
}

uint64_t NANGenericServiceProtocol.uuid.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  unint64_t v9 = sub_10001C01C(5);
  if ((v10 & 1) == 0) {
    return 0LL;
  }
  sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v3 + 72) * v9,  (uint64_t)v6,  type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100022628((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100063CF0();
  sub_10005802C((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v12;
}

uint64_t NANGenericServiceProtocol.uuid.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100405118);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v9 = (uint64_t *)((char *)&v13 - v8);
  if (a2 >> 60 == 15)
  {
    uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  }

  else
  {
    *unint64_t v9 = a1;
    v9[1]  = a2;
    uint64_t v11 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v9, v11, 5LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v9, 0LL, 1LL, v11);
  }

  sub_1000226B0((uint64_t)v9, (uint64_t)v7, &qword_100405118);
  sub_100013D20((uint64_t)v7, 5);
  return sub_1000225EC((uint64_t)v9, &qword_100405118);
}

void (*NANGenericServiceProtocol.uuid.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  void *v3 = NANGenericServiceProtocol.uuid.getter(*v1);
  v3[1]  = v5;
  return sub_1000665E8;
}

void sub_1000665E8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    uint64_t v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      uint64_t v6 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
    }

    else
    {
      uint64_t *v5 = v3;
      v5[1]  = v4;
      uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v5, v10, 5LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v5, 0LL, 1LL, v10);
    }

    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000226B0((uint64_t)v13, (uint64_t)v12, &qword_100405118);
    sub_10002255C(v3, v4);
    sub_100013D20((uint64_t)v12, 5);
    sub_1000225EC((uint64_t)v13, &qword_100405118);
    sub_100020B40(*v2, v2[1]);
  }

  else
  {
    unint64_t v7 = v2[1];
    uint64_t v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
    }

    else
    {
      *uint64_t v8 = *v2;
      v8[1]  = v7;
      uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
      swift_storeEnumTagMultiPayload(v8, v14, 5LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v8, 0LL, 1LL, v14);
    }

    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000226B0((uint64_t)v11, (uint64_t)v12, &qword_100405118);
    sub_100013D20((uint64_t)v12, 5);
    sub_1000225EC((uint64_t)v11, &qword_100405118);
  }

  free(v11);
  free(v12);
  free(v13);
  free(v2);
}

uint64_t sub_1000667B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = sub_100002274(&qword_1004064C0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a1 + 16) && (unint64_t v14 = sub_10001C01C(7), (v15 & 1) != 0))
  {
    sub_100057FE8( *(void *)(a1 + 56) + *(void *)(v5 + 72) * v14,  (uint64_t)v8,  type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_100022628((uint64_t)v8, (uint64_t)v10, type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_100063DD0();
    sub_10005802C((uint64_t)v10, type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v16 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v16 - 1) + 48LL))(v13, 1LL, v16) != 1) {
      return sub_100022628( (uint64_t)v13,  a2,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    }
  }

  else
  {
    uint64_t v16 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, int *))(*((void *)v16 - 1) + 56LL))(v13, 1LL, 1LL, v16);
  }

  *(_WORD *)a2  = 0;
  *(_BYTE *)(a2 + 2)  = 1;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v18 = a2 + v16[6];
  uint64_t v19 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  *(_OWORD *)(a2 + v16[7])  = xmmword_10033BED0;
  *(_OWORD *)(a2 + v16[8])  = xmmword_10033BED0;
  *(_OWORD *)(a2 + v16[9])  = xmmword_10033BED0;
  uint64_t v20 = a2 + v16[10];
  uint64_t v21 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  *(void *)(a2 + v16[11])  = _swiftEmptyArrayStorage;
  uint64_t v22 = a2 + v16[12];
  uint64_t v23 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  uint64_t v24 = a2 + v16[13];
  *(void *)uint64_t v24 = 0LL;
  *(void *)(v24 + 8)  = 0LL;
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v24 + 24)  = 1;
  return sub_1000225EC((uint64_t)v13, &qword_1004064C0);
}

uint64_t sub_100066A20(char a1)
{
  uint64_t v3 = sub_100002274(&qword_100405118);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(*v1, (uint64_t)v11);
  *uint64_t v11 = a1;
  sub_100057FE8( (uint64_t)v11,  (uint64_t)v8,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  swift_storeEnumTagMultiPayload(v8, v12, 7LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 0LL, 1LL, v12);
  sub_1000226B0((uint64_t)v8, (uint64_t)v6, &qword_100405118);
  sub_100013D20((uint64_t)v6, 7);
  sub_10005802C((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_1000225EC((uint64_t)v8, &qword_100405118);
}

uint64_t sub_100066B78(int a1, char a2)
{
  uint64_t v5 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (unsigned __int8 *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(*v2, (uint64_t)v7);
  int v8 = *v7;
  sub_10005802C((uint64_t)v7, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((v8 & a1) != 0) {
    char v9 = ~(_BYTE)a1;
  }
  else {
    char v9 = -1;
  }
  char v10 = v9 & v8;
  if ((v8 & a1) == a1) {
    char v11 = 0;
  }
  else {
    char v11 = a1;
  }
  char v12 = v11 | v8;
  if ((a2 & 1) != 0) {
    char v13 = v12;
  }
  else {
    char v13 = v10;
  }
  return sub_100066A20(v13);
}

uint64_t NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.getter(uint64_t a1)
{
  uint64_t v3 = (unsigned __int8 *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(a1, (uint64_t)v3);
  LODWORD(a1)  = *v3;
  sub_10005802C((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return (a1 >> 2) & 1;
}

uint64_t NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.setter(char a1)
{
  return sub_100066B78(4, a1);
}

void (*NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1  = v1;
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v4 = (char *)malloc(*(void *)(*(void *)(v3 - 8) + 64LL));
  *(void *)(a1 + 8)  = v4;
  sub_1000667B0(*v1, (uint64_t)v4);
  char v5 = *v4;
  sub_10005802C((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = (v5 & 4) != 0;
  return sub_100066D3C;
}

void sub_100066D3C(uint64_t a1)
{
  char v1 = *(void **)(a1 + 8);
  sub_100066B78(4, *(_BYTE *)(a1 + 16));
  free(v1);
}

uint64_t NANGenericServiceProtocol.datapathSubscribeID.getter(uint64_t a1)
{
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(a1, (uint64_t)v3);
  LODWORD(a1)  = v3[1];
  int v4 = v3[2];
  sub_10005802C((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return a1 | (v4 << 8);
}

uint64_t NANGenericServiceProtocol.datapathSubscribeID.setter(__int16 a1)
{
  uint64_t v3 = sub_100002274(&qword_100405118);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  int v8 = (char *)&v14 - v7;
  uint64_t v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v9);
  char v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(*v1, (uint64_t)v11);
  v11[1]  = a1;
  void v11[2] = HIBYTE(a1) & 1;
  sub_100057FE8( (uint64_t)v11,  (uint64_t)v8,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  swift_storeEnumTagMultiPayload(v8, v12, 7LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 0LL, 1LL, v12);
  sub_1000226B0((uint64_t)v8, (uint64_t)v6, &qword_100405118);
  sub_100013D20((uint64_t)v6, 7);
  sub_10005802C((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_1000225EC((uint64_t)v8, &qword_100405118);
}

void (*NANGenericServiceProtocol.datapathSubscribeID.modify(void *a1))(uint64_t ***a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1  = v3;
  void *v3 = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[1]  = malloc(v4);
  v3[2]  = malloc(v4);
  uint64_t v5 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  v3[3]  = v6;
  sub_1000667B0(*v1, (uint64_t)v6);
  char v7 = v6[1];
  char v8 = v6[2];
  sub_10005802C((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *((_BYTE *)v3 + 32)  = v7;
  *((_BYTE *)v3 + 33)  = v8;
  return sub_100067018;
}

void sub_100067018(uint64_t ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (*a1)[2];
  uint64_t v3 = (*a1)[3];
  size_t v4 = (*a1)[1];
  char v5 = *((_BYTE *)*a1 + 32);
  char v6 = *((_BYTE *)*a1 + 33);
  sub_1000667B0(***a1, (uint64_t)v3);
  *((_BYTE *)v3 + 1)  = v5;
  *((_BYTE *)v3 + 2)  = v6;
  sub_100057FE8( (uint64_t)v3,  (uint64_t)v2,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  swift_storeEnumTagMultiPayload(v2, v7, 7LL);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v2, 0LL, 1LL, v7);
  sub_1000226B0((uint64_t)v2, (uint64_t)v4, &qword_100405118);
  sub_100013D20((uint64_t)v4, 7);
  sub_10005802C((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000225EC((uint64_t)v2, &qword_100405118);
  free(v3);
  free(v2);
  free(v4);
  free(v1);
}

uint64_t NANGenericServiceProtocol.publicKey.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  char v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(a1, (uint64_t)v6);
  sub_1000226B0((uint64_t)&v6[*(int *)(v4 + 24)], a2, (uint64_t *)&unk_10040D470);
  return sub_10005802C((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

uint64_t NANGenericServiceProtocol.publicKey.setter(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_100405118);
  uint64_t v4 = __chkstk_darwin(v3);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v9);
  char v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(*v1, (uint64_t)v11);
  sub_10006D2CC(a1, (uint64_t)&v11[*(int *)(v9 + 24)]);
  sub_100057FE8( (uint64_t)v11,  (uint64_t)v8,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
  swift_storeEnumTagMultiPayload(v8, v12, 7LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 0LL, 1LL, v12);
  sub_1000226B0((uint64_t)v8, (uint64_t)v6, &qword_100405118);
  sub_100013D20((uint64_t)v6, 7);
  sub_10005802C((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000225EC((uint64_t)v8, &qword_100405118);
  return sub_1000225EC(a1, (uint64_t *)&unk_10040D470);
}

void (*NANGenericServiceProtocol.publicKey.modify(void *a1))(uint64_t ***a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  void *v3 = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_100405118) - 8) + 64LL);
  v3[1]  = malloc(v4);
  v3[2]  = malloc(v4);
  uint64_t v5 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  v3[3]  = v5;
  char v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  v3[4]  = v6;
  size_t v7 = *(void *)(*(void *)(sub_100002274((uint64_t *)&unk_10040D470) - 8) + 64LL);
  v3[5]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[6]  = v8;
  sub_1000667B0(*v1, (uint64_t)v6);
  sub_1000226B0((uint64_t)v6 + *(int *)(v5 + 24), (uint64_t)v8, (uint64_t *)&unk_10040D470);
  sub_10005802C((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100067440;
}

void sub_100067440(uint64_t ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[5];
  size_t v4 = (*a1)[6];
  char v6 = (*a1)[3];
  uint64_t v5 = (*a1)[4];
  size_t v7 = (*a1)[1];
  uint64_t v8 = (*a1)[2];
  uint64_t v9 = **a1;
  if ((a2 & 1) != 0)
  {
    sub_1000226B0((uint64_t)(*a1)[6], (uint64_t)v3, (uint64_t *)&unk_10040D470);
    sub_1000667B0(*v9, (uint64_t)v5);
    sub_10006D2CC((uint64_t)v3, (uint64_t)v5 + *((int *)v6 + 6));
    sub_100057FE8( (uint64_t)v5,  (uint64_t)v8,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v8, v10, 7LL);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 0LL, 1LL, v10);
    sub_1000226B0((uint64_t)v8, (uint64_t)v7, &qword_100405118);
    sub_100013D20((uint64_t)v7, 7);
    sub_10005802C((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_1000225EC((uint64_t)v8, &qword_100405118);
    uint64_t v11 = (uint64_t)v3;
    uint64_t v12 = (uint64_t *)&unk_10040D470;
  }

  else
  {
    sub_1000667B0(*v9, (uint64_t)v5);
    sub_10006D2CC((uint64_t)v4, (uint64_t)v5 + *((int *)v6 + 6));
    sub_100057FE8( (uint64_t)v5,  (uint64_t)v8,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    uint64_t v13 = type metadata accessor for NANGenericServiceProtocol.Attribute(0LL);
    swift_storeEnumTagMultiPayload(v8, v13, 7LL);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v8, 0LL, 1LL, v13);
    sub_1000226B0((uint64_t)v8, (uint64_t)v7, &qword_100405118);
    sub_100013D20((uint64_t)v7, 7);
    sub_10005802C((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    uint64_t v11 = (uint64_t)v8;
    uint64_t v12 = &qword_100405118;
  }

  sub_1000225EC(v11, v12);
  sub_1000225EC((uint64_t)v4, (uint64_t *)&unk_10040D470);
  free(v4);
  free(v3);
  free(v5);
  free(v8);
  free(v7);
  free(v2);
}

uint64_t NANGenericServiceProtocol.publisherAuthenticationToken.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v2);
  size_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(a1, (uint64_t)v4);
  uint64_t v5 = &v4[*(int *)(v2 + 28)];
  uint64_t v6 = *(void *)v5;
  sub_10002255C(*(void *)v5, *((void *)v5 + 1));
  sub_10005802C((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}

uint64_t NANGenericServiceProtocol.publisherAuthenticationToken.setter(uint64_t a1, unint64_t a2)
{
  return sub_100020B40(a1, a2);
}

void (*NANGenericServiceProtocol.publisherAuthenticationToken.modify( uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2]  = (uint64_t)v1;
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  size_t v4 = (char *)malloc(*(void *)(*(void *)(v3 - 8) + 64LL));
  a1[3]  = (uint64_t)v4;
  sub_1000667B0(*v1, (uint64_t)v4);
  uint64_t v5 = (uint64_t *)&v4[*(int *)(v3 + 28)];
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_10002255C(*v5, v7);
  sub_10005802C((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *a1  = v6;
  a1[1]  = v7;
  return sub_1000677AC;
}

void sub_1000677AC(uint64_t *a1, char a2)
{
}

uint64_t NANGenericServiceProtocol.encryptedSignature.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin(v2);
  size_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000667B0(a1, (uint64_t)v4);
  uint64_t v5 = &v4[*(int *)(v2 + 32)];
  uint64_t v6 = *(void *)v5;
  sub_10002255C(*(void *)v5, *((void *)v5 + 1));
  sub_10005802C((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}