void sub_1001FFE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

void sub_100200020( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = *a2;
  uint64_t v17 = sub_1001F9C44(a2);
  if ((v18 & 1) != 0) {
    __break(1u);
  }
  else {
    sub_1001FF798( a1,  (uint64_t)a2,  v17,  a3,  a4,  a5,  *(void *)(v16 + class metadata base offset for WritableKeyPath),  *(void *)(v16 + class metadata base offset for WritableKeyPath + 8),  a6,  a7,  a8);
  }
}

uint64_t sub_1002000D0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

unint64_t sub_1002000F4()
{
  unint64_t result = qword_10040BA20;
  if (!qword_10040BA20)
  {
    unint64_t result = swift_getWitnessTable("AJ\t", &type metadata for BroadcomEventMessage);
    atomic_store(result, (unint64_t *)&qword_10040BA20);
  }

  return result;
}

void sub_100200138( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X10 }

uint64_t sub_10020039C(int a1)
{
  else {
    return byte_10035BE78[a1 - 1];
  }
}

uint64_t sub_1002003C0(uint64_t result)
{
  *(_BYTE *)(result + 361) = 4;
  return result;
}

unint64_t sub_1002003D0()
{
  unint64_t result = qword_10040BA38;
  if (!qword_10040BA38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BroadcomCapabilities,  &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040BA38);
  }

  return result;
}

unint64_t sub_100200418()
{
  unint64_t result = qword_10040BA40;
  if (!qword_10040BA40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BroadcomCapabilities,  &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040BA40);
  }

  return result;
}

unint64_t sub_100200460()
{
  unint64_t result = qword_10040BA48;
  if (!qword_10040BA48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BroadcomCapabilities,  &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040BA48);
  }

  return result;
}

unint64_t sub_1002004A8()
{
  unint64_t result = qword_10040BA50;
  if (!qword_10040BA50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BroadcomCapabilities,  &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040BA50);
  }

  return result;
}

uint64_t sub_1002004EC()
{
  return sub_10000AF70( &qword_10040BA58,  type metadata accessor for AppleDevice,  (uint64_t)&protocol conformance descriptor for AppleDevice);
}

uint64_t sub_100200518(uint64_t a1)
{
  uint64_t result = sub_10000AF70( &qword_10040BA90,  type metadata accessor for AppleBroadcomDriver,  (uint64_t)&protocol conformance descriptor for AppleBroadcomDriver);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AppleBroadcomDriver(uint64_t a1)
{
  uint64_t result = qword_10040BB28;
  if (!qword_10040BB28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleBroadcomDriver);
  }
  return result;
}

uint64_t sub_100200590()
{
  return sub_1000572E4( &qword_10040BA98,  &qword_10040BAA0,  (uint64_t)&protocol conformance descriptor for AppleDevice.EventSource<A>);
}

uint64_t sub_1002005BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppleBroadcomDriver.capabilities.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002005E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a2 + 72LL);
  *(void *)(*(void *)a2 + 72LL) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

ValueMetadata *type metadata accessor for BroadcomCapabilities()
{
  return &type metadata for BroadcomCapabilities;
}

uint64_t sub_100200624()
{
  return type metadata accessor for AppleBroadcomDriver(0LL);
}

uint64_t sub_10020062C(uint64_t a1)
{
  v4[0] = &unk_10035BD58;
  v4[1] = &unk_10035BD70;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_10035BD88;
  v4[4] = &unk_10035BDA0;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BroadcomEventMessage()
{
  return &type metadata for BroadcomEventMessage;
}

char *sub_1002006EC(char *result)
{
  uint64_t v2 = (char *)v1[2];
  if (v2)
  {
    unint64_t v3 = result;
    size_t v4 = String.count.getter(v1[4], v1[5]);
    return strncpy(v2, v3, v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10020073C(uint64_t a1, uint64_t a2)
{
}

void sub_10020075C(uint64_t a1, uint64_t a2)
{
}

void sub_10020078C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2[2];
  uint64_t v3 = v2[3];
  uint64_t v5 = v2[4];
  uint64_t v6 = v2[5];
  __int128 v7 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v7;
  __int16 v9 = *(_WORD *)(v4 + 32);
  sub_1001FBC5C(a1, a2, (uint64_t)v8, v3, v5, v6);
}

uint64_t sub_1002007C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10020080C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100200848(uint64_t a1, void *a2)
{
  return sub_1001FB188( a1,  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(_DWORD *)(v2 + 64),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  a2);
}

uint64_t sub_10020087C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1001FBAD0( a1,  a2,  *(void *)(v3 + 48),  *(unsigned int *)(v3 + 56),  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  a3);
}

uint64_t sub_1002008B0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002008D4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002008E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1001F61AC(a1, a2, **(void ***)(v3 + 16));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }

  return result;
}

uint64_t sub_100200914(uint64_t *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v3[1];
  if (v4 == *v3 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0LL) & 1;
  }
}

uint64_t sub_100200968(void *a1)
{
  return sub_1001FF31C(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t BroadcomDriver<>.elect(peer:)(uint64_t a1)
{
  return NANBitmap.Channel.operatingClass.getter(a1);
}

uint64_t String.init<A>(cStyleString:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (*(uint64_t *)(*(void *)(a2 - 8) + 64LL) >= 2)
  {
    __chkstk_darwin(0LL);
    v9[2] = v5;
    uint64_t v6 = sub_100002274(&qword_10040AB68);
    sub_10016D190( a1,  (uint64_t)sub_10020141C,  (uint64_t)v9,  a2,  (uint64_t)&type metadata for Never,  v6,  (uint64_t)&protocol witness table for Never,  v7);
    if (v11)
    {
      uint64_t result = v10;
      uint64_t v8 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000LL) == 0) {
        uint64_t v8 = v10 & 0xFFFFFFFFFFFFLL;
      }
      if (!v8)
      {
        swift_bridgeObjectRelease(v11);
        return 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t String.copy<A, B, C>(to:destinationField:lengthField:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(class metadata base offset for WritableKeyPath + *a3 + 8LL);
  uint64_t v10 = __chkstk_darwin(a1);
  v12 = (char *)&v19 - v11;
  v20 = _sSS7CoreP2PE4copy2to16destinationFieldyxz_s15WritableKeyPathCyxq_Gtr0_lF_0(v10, v13, v14, v15);
  uint64_t v16 = *(void *)(a6 + 8);
  unint64_t v17 = sub_100024970();
  dispatch thunk of BinaryInteger.init<A>(_:)(&v20, &type metadata for Int, v17, v9, v16);
  return swift_setAtWritableKeyPath(a1, a3, v12);
}

uint64_t String.hexData.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    v5._countAndFlagsBits = 30768LL;
    v5._object = (void *)0xE200000000000000LL;
    if (String.hasPrefix(_:)(v5))
    {
      swift_bridgeObjectRetain(a2);
      unint64_t v6 = String.count.getter(30768LL, 0xE200000000000000LL);
      unint64_t v7 = sub_100201844(v6, a1, a2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      swift_bridgeObjectRelease(a2);
      uint64_t v14 = static String._fromSubstring(_:)(v7, v9, v11, v13);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease(v13);
      uint64_t v17 = String.hexData.getter(v14, v16);
      char v18 = v16;
LABEL_15:
      swift_bridgeObjectRelease(v18);
      return v17;
    }

    v37._countAndFlagsBits = a1;
    v37._object = (void *)a2;
    uint64_t v35 = 58LL;
    unint64_t v36 = 0xE100000000000000LL;
    unint64_t v19 = sub_10000B08C();
    if ((StringProtocol.contains<A>(_:)(&v35, &type metadata for String, &type metadata for String, v19, v19) & 1) != 0)
    {
      Swift::String v20 = String.lowercased()();
      Swift::String v37 = v20;
      uint64_t v35 = 58LL;
      unint64_t v36 = 0xE100000000000000LL;
      uint64_t v21 = StringProtocol.components<A>(separatedBy:)( &v35,  &type metadata for String,  &type metadata for String,  v19,  v19);
      swift_bridgeObjectRelease(v20._object);
      uint64_t v22 = *(void *)(v21 + 16);
      if (!v22)
      {
        countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_14:
        swift_bridgeObjectRelease(v21);
        uint64_t v17 = sub_1000FB08C((uint64_t)countAndFlagsBits);
        char v18 = countAndFlagsBits;
        goto LABEL_15;
      }

      swift_bridgeObjectRetain(v21);
      uint64_t v34 = v21;
      v23 = (unint64_t *)(v21 + 40);
      countAndFlagsBits = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v25 = *(v23 - 1);
        unint64_t v26 = *v23;
        swift_bridgeObjectRetain(*v23);
        v27 = sub_100201504(v25, v26);
        uint64_t v28 = (uint64_t)v27;
        if (v27[2] != 1LL) {
          break;
        }
        v23 += 2;
        v37._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        swift_bridgeObjectRetain(countAndFlagsBits);
        sub_10019D8A0(v28);
        swift_bridgeObjectRelease(countAndFlagsBits);
        swift_bridgeObjectRelease(v26);
        countAndFlagsBits = (void *)v37._countAndFlagsBits;
        if (!--v22)
        {
          uint64_t v21 = v34;
          swift_bridgeObjectRelease(v34);
          goto LABEL_14;
        }
      }

      swift_bridgeObjectRelease(v27);
      unint64_t v29 = sub_1000033FC();
      uint64_t v30 = swift_allocError(&type metadata for WiFiError, v29, 0LL, 0LL);
      *(_OWORD *)uint64_t v31 = xmmword_100337020;
      *(_BYTE *)(v31 + 16) = 2;
      swift_willThrow(v30);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease_n(v34, 2LL);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_errorRelease(v30);
    }

    String.nonSeparatedHexData.getter();
    return v32;
  }

  return 0LL;
}

uint64_t sub_100200E18()
{
  uint64_t v0 = (void *)sub_1000206C0((uint64_t)&off_1003D4B28);
  uint64_t v1 = sub_100002274(&qword_10040BC08);
  uint64_t result = swift_arrayDestroy(&unk_1003D4B48, 16LL, v1);
  off_10040BC00 = v0;
  return result;
}

uint64_t String.colonSeparatedHexData.getter()
{
  Swift::String v0 = String.lowercased()();
  Swift::String v16 = v0;
  v15[0] = 58LL;
  v15[1] = 0xE100000000000000LL;
  unint64_t v1 = sub_10000B08C();
  uint64_t v2 = StringProtocol.components<A>(separatedBy:)(v15, &type metadata for String, &type metadata for String, v1, v1);
  swift_bridgeObjectRelease(v0._object);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = (unint64_t *)(v2 + 40);
    countAndFlagsBits = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v6 = *(v4 - 1);
      unint64_t v7 = *v4;
      swift_bridgeObjectRetain(*v4);
      uint64_t v8 = sub_100201504(v6, v7);
      uint64_t v9 = (uint64_t)v8;
      if (v8[2] != 1LL) {
        break;
      }
      v4 += 2;
      v16._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      swift_bridgeObjectRetain(countAndFlagsBits);
      sub_10019D8A0(v9);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v7);
      countAndFlagsBits = (void *)v16._countAndFlagsBits;
      if (!--v3)
      {
        swift_bridgeObjectRelease(v2);
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease(v8);
    unint64_t v11 = sub_1000033FC();
    uint64_t v12 = swift_allocError(&type metadata for WiFiError, v11, 0LL, 0LL);
    *(_OWORD *)uint64_t v13 = xmmword_100337020;
    *(_BYTE *)(v13 + 16) = 2;
    swift_willThrow(v12);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v2, 2LL);
    swift_bridgeObjectRelease(countAndFlagsBits);
    swift_errorRelease(v12);
    return 0LL;
  }

  else
  {
    countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_8:
    swift_bridgeObjectRelease(v2);
    uint64_t v10 = sub_1000FB08C((uint64_t)countAndFlagsBits);
    swift_bridgeObjectRelease(countAndFlagsBits);
  }

  return v10;
}

void String.nonSeparatedHexData.getter()
{
  Swift::String v0 = String.lowercased()();
  Swift::String v12 = v0;
  v11[0] = 0LL;
  v11[1] = 0xE000000000000000LL;
  unint64_t v1 = sub_10000B08C();
  uint64_t v2 = StringProtocol.components<A>(separatedBy:)(v11, &type metadata for String, &type metadata for String, v1, v1);
  swift_bridgeObjectRelease(v0._object);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = (unint64_t *)(v2 + 40);
    countAndFlagsBits = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v6 = *(v4 - 1);
      unint64_t v7 = *v4;
      swift_bridgeObjectRetain(*v4);
      uint64_t v8 = sub_100201504(v6, v7);
      v4 += 2;
      v12._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      swift_bridgeObjectRetain(countAndFlagsBits);
      sub_10019D8A0((uint64_t)v8);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v7);
      countAndFlagsBits = (void *)v12._countAndFlagsBits;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    countAndFlagsBits = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v2);
  sub_1000FB08C((uint64_t)countAndFlagsBits);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(countAndFlagsBits);
  __asm { BR              X10 }

uint64_t String.interfaceIdentifierData.getter()
{
  Swift::String v0 = String.lowercased()();
  Swift::String v16 = v0;
  v15[0] = 58LL;
  v15[1] = 0xE100000000000000LL;
  unint64_t v1 = sub_10000B08C();
  uint64_t v2 = StringProtocol.components<A>(separatedBy:)(v15, &type metadata for String, &type metadata for String, v1, v1);
  swift_bridgeObjectRelease(v0._object);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = (unint64_t *)(v2 + 40);
    countAndFlagsBits = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v6 = *(v4 - 1);
      unint64_t v7 = *v4;
      swift_bridgeObjectRetain(*v4);
      uint64_t v8 = sub_100201504(v6, v7);
      uint64_t v9 = (uint64_t)v8;
      if (v8[2] != 2LL) {
        break;
      }
      v4 += 2;
      v16._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      swift_bridgeObjectRetain(countAndFlagsBits);
      sub_10019D8A0(v9);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v7);
      countAndFlagsBits = (void *)v16._countAndFlagsBits;
      if (!--v3)
      {
        swift_bridgeObjectRelease(v2);
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease(v8);
    unint64_t v11 = sub_1000033FC();
    uint64_t v12 = swift_allocError(&type metadata for WiFiError, v11, 0LL, 0LL);
    *(_OWORD *)uint64_t v13 = xmmword_100337020;
    *(_BYTE *)(v13 + 16) = 2;
    swift_willThrow(v12);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v2, 2LL);
    swift_bridgeObjectRelease(countAndFlagsBits);
    swift_errorRelease(v12);
    return 0LL;
  }

  else
  {
    countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_8:
    swift_bridgeObjectRelease(v2);
    uint64_t v10 = sub_1000FB08C((uint64_t)countAndFlagsBits);
    swift_bridgeObjectRelease(countAndFlagsBits);
  }

  return v10;
}

void *_sSS7CoreP2PE4copy2to16destinationFieldyxz_s15WritableKeyPathCyxq_Gtr0_lF_0( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(class metadata base offset for WritableKeyPath + *a2 + 8LL) - 8LL) + 64LL);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v4;
  uint64_t result = sub_10003B5A4((void *(*)(uint64_t *__return_ptr, void *))sub_1002018E0, (uint64_t)v6, a3, a4);
  if ((uint64_t)result >= v4)
  {
    uint64_t result = (void *)(v4 - 1);
    if (__OFSUB__(v4, 1LL)) {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10020141C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    BOOL v5 = __OFSUB__(v4, 1LL);
    uint64_t v6 = v4 - 1;
    if (!v5)
    {
      *(_BYTE *)(result + v6) = 0;
      uint64_t result = String.init(cString:)(result);
      *a2 = result;
      a2[1] = v7;
      return result;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100201464(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  v9[2] = a1;
  v9[3] = a4;
  BOOL v5 = (uint64_t (*)(_BYTE *, void))swift_modifyAtWritableKeyPath(v10, a2, a3);
  sub_10016D190( v6,  (uint64_t)sub_1002018FC,  (uint64_t)v9,  *(void *)(class metadata base offset for WritableKeyPath + v4 + 8),  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for Int,  (uint64_t)&protocol witness table for Never,  v7);
  return v5(v10, 0LL);
}

void *sub_100201504(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = 4 * v2;
  uint64_t v6 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v6 = 11LL;
  }
  uint64_t v40 = v6 | (v2 << 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = String.index(_:offsetBy:limitedBy:)(v8, 1LL, v40, a1, a2);
    if ((v10 & 1) != 0) {
      break;
    }
    unint64_t v11 = v9;
    if (v9 >> 14 == v5) {
      break;
    }
    if (qword_100404458 != -1) {
      swift_once(&qword_100404458, sub_100200E18);
    }
    uint64_t v12 = off_10040BC00;
    uint64_t v13 = String.subscript.getter(v8, a1, a2);
    uint64_t v15 = v14;
    if (!v12[2]
      || (uint64_t v16 = sub_10001C944(v13, v14), (v17 & 1) == 0)
      || (char v18 = *(_BYTE *)(v12[7] + v16),
          swift_bridgeObjectRelease(v15),
          unint64_t v19 = off_10040BC00,
          uint64_t v20 = String.subscript.getter(v11, a1, a2),
          uint64_t v15 = v21,
          !v19[2])
      || (uint64_t v22 = sub_10001C944(v20, v21), (v23 & 1) == 0))
    {
      swift_bridgeObjectRelease(v7);
      v27 = (void *)v15;
LABEL_22:
      swift_bridgeObjectRelease(v27);
      unint64_t v28 = sub_1000033FC();
      uint64_t v29 = swift_allocError(&type metadata for WiFiError, v28, 0LL, 0LL);
      *(_OWORD *)uint64_t v30 = xmmword_100337020;
      *(_BYTE *)(v30 + 16) = 2;
      swift_willThrow(v29);
      return v7;
    }

    char v24 = *(_BYTE *)(v19[7] + v22);
    swift_bridgeObjectRelease(v15);
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
      uint64_t v7 = sub_1000A6094(0LL, v7[2] + 1LL, 1, v7);
    }
    unint64_t v26 = v7[2];
    unint64_t v25 = v7[3];
    if (v26 >= v25 >> 1) {
      uint64_t v7 = sub_1000A6094((void *)(v25 > 1), v26 + 1, 1, v7);
    }
    v7[2] = v26 + 1;
    *((_BYTE *)v7 + v26 + 32) = v24 | (16 * v18);
    unint64_t v8 = String.index(_:offsetBy:)(v8, 2LL, a1, a2);
    if (v5 == v8 >> 14) {
      return v7;
    }
  }

  if (String.count.getter(a1, a2) != 1)
  {
    v27 = v7;
    goto LABEL_22;
  }

  if (qword_100404458 != -1) {
    swift_once(&qword_100404458, sub_100200E18);
  }
  uint64_t v31 = off_10040BC00;
  swift_bridgeObjectRetain(a2);
  uint64_t v32 = sub_1000F01B8(a1, a2);
  uint64_t v34 = v33;
  uint64_t result = (void *)swift_bridgeObjectRelease(a2);
  if (v34)
  {
    swift_bridgeObjectRelease(v7);
    if (!v31[2] || (uint64_t v36 = sub_10001C944(v32, v34), (v37 & 1) == 0))
    {
      v27 = (void *)v34;
      goto LABEL_22;
    }

    char v38 = *(_BYTE *)(v31[7] + v36);
    swift_bridgeObjectRelease(v34);
    uint64_t v39 = sub_100002274(&qword_1004040A8);
    uint64_t v7 = (void *)swift_allocObject(v39, 33LL, 7LL);
    *((_OWORD *)v7 + 1) = xmmword_100339900;
    *((_BYTE *)v7 + 32) = v38;
    return v7;
  }

  __break(1u);
  return result;
}

unint64_t sub_100201844(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v5 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    unint64_t v7 = v6 | (v5 << 16);
    uint64_t result = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v8 & 1) != 0) {
      uint64_t result = v7;
    }
    if (4 * v5 >= result >> 14) {
      return String.subscript.getter(result, v7, a2, a3);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1002018E0(uint64_t a1)
{
  return sub_100201464(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void *)(v1 + 32));
}

size_t sub_1002018FC@<X0>(char *a1@<X0>, size_t *a2@<X8>)
{
  size_t result = strlcpy(a1, *(const char **)(v2 + 16), *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t Logger.init(subsystem:category:)(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    unint64_t v2 = 0x6C7070612E6D6F63LL;
    if (a1 == 1) {
      unint64_t v3 = 0xEE006C6477612E65LL;
    }
    else {
      unint64_t v3 = 0xED00006E616E2E65LL;
    }
  }

  else
  {
    unint64_t v3 = 0x8000000100360620LL;
    unint64_t v2 = 0xD000000000000012LL;
  }

  uint64_t v4 = LogCategory.rawValue.getter(a2);
  return Logger.init(subsystem:category:)(v2, v3, v4, v5);
}

uint64_t LogSubsystem.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6C7070612E6D6F63LL;
  }
  else {
    return 0xD000000000000012LL;
  }
}

uint64_t sub_100201A54(char *a1, unsigned __int8 *a2)
{
  return sub_10002B2D8(*a1, *a2);
}

Swift::Int sub_100201A60()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  unint64_t v2 = 0xEE006C6477612E65LL;
  if (v1 != 1) {
    unint64_t v2 = 0xED00006E616E2E65LL;
  }
  if (v1) {
    unint64_t v3 = 0x6C7070612E6D6F63LL;
  }
  else {
    unint64_t v3 = 0xD000000000000012LL;
  }
  if (v1) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = 0x8000000100360620LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100201B1C(uint64_t a1)
{
  unint64_t v2 = 0xEE006C6477612E65LL;
  if (*v1 != 1) {
    unint64_t v2 = 0xED00006E616E2E65LL;
  }
  if (*v1) {
    unint64_t v3 = 0x6C7070612E6D6F63LL;
  }
  else {
    unint64_t v3 = 0xD000000000000012LL;
  }
  if (*v1) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = 0x8000000100360620LL;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100201BB4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  unint64_t v3 = 0xEE006C6477612E65LL;
  if (v2 != 1) {
    unint64_t v3 = 0xED00006E616E2E65LL;
  }
  if (v2) {
    unint64_t v4 = 0x6C7070612E6D6F63LL;
  }
  else {
    unint64_t v4 = 0xD000000000000012LL;
  }
  if (v2) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = 0x8000000100360620LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100201C6C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreP2P12LogSubsystemO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100201C98(unint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0x8000000100360620LL;
  unint64_t v4 = 0xEE006C6477612E65LL;
  if (v2 != 1) {
    unint64_t v4 = 0xED00006E616E2E65LL;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    unint64_t v6 = 0x6C7070612E6D6F63LL;
  }
  else {
    unint64_t v6 = 0xD000000000000012LL;
  }
  if (!v5) {
    unint64_t v3 = v4;
  }
  *a1 = v6;
  a1[1] = v3;
}

_UNKNOWN **static LogCategory.allCases.getter()
{
  return &off_1003D7580;
}

uint64_t LogCategory.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100201D50 + 4 * byte_10035BEE0[a1]))( 1953066601LL,  0xE400000000000000LL);
}

uint64_t sub_100201D50()
{
  return 1886221668LL;
}

uint64_t sub_100201D5C()
{
  return 0x65696C4372657375LL;
}

uint64_t sub_100201D7C()
{
  return 0x726576697264LL;
}

uint64_t sub_100201D90()
{
  return 0x656369766564LL;
}

uint64_t sub_100201DA4()
{
  return 0x6361667265746E69LL;
}

uint64_t sub_100201E88()
{
  return 0x6873696C627570LL;
}

unint64_t sub_100201EA0()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100201F70()
{
  return 0x74656E7265746E69LL;
}

uint64_t sub_100201F94()
{
  return 0x4D79617765746167LL;
}

uint64_t sub_100201FB8()
{
  return 0x676E6974756F72LL;
}

unint64_t sub_100201FD0()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100201FF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = LogCategory.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = LogCategory.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100202078@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s7CoreP2P11LogCategoryO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1002020A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LogCategory.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1002020CC(void *a1@<X8>)
{
  *a1 = &off_1003D7580;
}

Swift::Int sub_1002020DC()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = LogCategory.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10020213C(uint64_t a1)
{
  uint64_t v3 = LogCategory.rawValue.getter(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10020217C(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = LogCategory.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002021D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100202620();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100202234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100202620();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t _s7CoreP2P11LogCategoryO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D4E20, a1, a2, &unk_100404468);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1B) {
    return 27LL;
  }
  else {
    return v3;
  }
}

unint64_t _s7CoreP2P12LogSubsystemO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5220, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10020231C()
{
  unint64_t result = qword_10040BC10;
  if (!qword_10040BC10)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LogSubsystem, &type metadata for LogSubsystem);
    atomic_store(result, (unint64_t *)&qword_10040BC10);
  }

  return result;
}

unint64_t sub_100202364()
{
  unint64_t result = qword_10040BC18;
  if (!qword_10040BC18)
  {
    uint64_t v1 = sub_1000022F8(&qword_10040BC20);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10040BC18);
  }

  return result;
}

unint64_t sub_1002023B4()
{
  unint64_t result = qword_10040BC28;
  if (!qword_10040BC28)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LogCategory, &type metadata for LogCategory);
    atomic_store(result, (unint64_t *)&qword_10040BC28);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LogSubsystem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100202444 + 4 * byte_10035BF00[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100202478 + 4 * byte_10035BEFB[v4]))();
}

uint64_t sub_100202478(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100202480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100202488LL);
  }
  return result;
}

uint64_t sub_100202494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10020249CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1002024A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002024A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogSubsystem()
{
  return &type metadata for LogSubsystem;
}

uint64_t getEnumTagSinglePayload for LogCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

uint64_t storeEnumTagSinglePayload for LogCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE5) {
    return ((uint64_t (*)(void))((char *)&loc_1002025A0 + 4 * byte_10035BF0A[v4]))();
  }
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_1002025D4 + 4 * byte_10035BF05[v4]))();
}

uint64_t sub_1002025D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002025DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002025E4LL);
  }
  return result;
}

uint64_t sub_1002025F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002025F8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 26;
  return result;
}

uint64_t sub_1002025FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100202604(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogCategory()
{
  return &type metadata for LogCategory;
}

unint64_t sub_100202620()
{
  unint64_t result = qword_10040BC30;
  if (!qword_10040BC30)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LogCategory, &type metadata for LogCategory);
    atomic_store(result, (unint64_t *)&qword_10040BC30);
  }

  return result;
}

uint64_t LengthValueHelper.inferredLoad<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a1, a3);
  unint64_t v6 = v5;
  Data.load<A>(as:)(a2);
  return sub_1000208D8(v4, v6);
}

void TypeLengthValue.length.getter(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_100202720(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v6 = BYTE6(v1);
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8LL);
  unint64_t v4 = sub_100024970();
  return dispatch thunk of BinaryInteger.init<A>(_:)(&v6, &type metadata for Int, v4, v2, v3);
}

uint64_t TypeLengthValue.valueData()(uint64_t a1)
{
  uint64_t v1 = sub_100205480(a1);
  sub_100020AFC(v1, v2);
  return v1;
}

uint64_t LengthValue.valueData()(uint64_t a1)
{
  uint64_t v1 = NANBitmap.Channel.operatingClass.getter(a1);
  sub_100020AFC(v1, v2);
  return v1;
}

void LengthValue.init(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = *(void *)(*(void *)(*(void *)(a6 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v21,  a3,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v9 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  v20[2] = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  char v23 = (char *)v20 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v22 = (char *)v20 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  __asm { BR              X10 }

uint64_t sub_1002029AC(uint64_t a1)
{
  *(void *)(v12 - 168) = v2;
  *(void *)(v12 - 184) = a1;
  *(void *)(v12 - 152) = v1;
  *(void *)(v12 - 120) = BYTE6(v4);
  *(void *)(v12 - 112) = v11;
  *(void *)(v12 - 104) = v4;
  dispatch thunk of static FixedWidthInteger.max.getter(v7, v10);
  char v13 = dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8);
  uint64_t v14 = *(void *)(v12 - 96);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v15(v3, v9, v7);
  if ((v13 & 1) == 0)
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v18 = v3;
    goto LABEL_7;
  }

  uint64_t v16 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v17(v3, v7);
  if (v16 <= 64) {
    goto LABEL_8;
  }
  v15(v5, v9, v7);
  *(void *)(v12 - 72) = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8) & 1) == 0)
  {
    char v36 = dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8);
    uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
    if ((v36 & 1) != 0)
    {
      if (v37 <= 64) {
        goto LABEL_31;
      }
      goto LABEL_25;
    }

    if (v37 < 64) {
      goto LABEL_29;
    }
    uint64_t v18 = v5;
LABEL_7:
    v17(v18, v7);
    goto LABEL_8;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8) < 64)
  {
LABEL_29:
    uint64_t v41 = dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
    v17(v5, v7);
    if (v41 >= *(void *)(v12 - 72)) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

void LengthValueHelper.parseForOptional<A>()(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  uint64_t v5 = v4;
  sub_10000D9B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = type metadata accessor for BinaryDecoder();
  uint64_t v7 = (void *)swift_allocObject(v6, 48LL, 7LL);
  v7[5] = &_swiftEmptyDictionarySingleton;
  v7[2] = v3;
  v7[3] = v5;
  __asm { BR              X11 }

uint64_t sub_100202FB0(uint64_t a1)
{
  *(void *)(v7 + 32) = v8;
  swift_beginAccess(a1, v9 - 104, 1LL, 0LL);
  uint64_t v10 = *(void *)(v7 + 40);
  *(void *)(v7 + 40) = v2;
  swift_bridgeObjectRelease(v10);
  *(void *)(v9 - 120) = &type metadata for BinaryDecoder.UnkeyedContainer;
  *(void *)(v9 - 112) = sub_100070240();
  *(void *)(v9 - 144) = v7;
  sub_1000237C8(v9 - 144, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  sub_1000BE120(v1, (uint64_t)v1, v5, v6);
  if (!v4)
  {
    uint64_t v11 = *(void *)(v9 - 72);
    (*(void (**)(uint64_t, uint64_t, void *))(v3 + 32))(v11, v6, v1);
    (*(void (**)(uint64_t, void, uint64_t, void *))(v3 + 56))(v11, 0LL, 1LL, v1);
  }

  return sub_100002AC4((void *)(v9 - 144));
}

uint64_t LengthValueHelper.parse<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a1, a3);
  unint64_t v8 = v7;
  static BinaryDecoder.decode<A>(_:data:)(a2, v6, v7);
  return sub_1000208D8(v6, v8);
}

void TypeLengthValue.init(type:data:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v35 = a1;
  uint64_t v36 = a3;
  uint64_t v33 = a8;
  uint64_t v29 = a10;
  uint64_t v30 = a5;
  uint64_t v28 = a9;
  uint64_t v38 = a11;
  uint64_t v26 = *(void *)(*(void *)(*(void *)(a11 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v26,  a4,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v14 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v37 = *(void *)(a4 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  v25[1] = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v34 = (char *)v25 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v27 = (char *)v25 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v24 = __chkstk_darwin(v23);
  __chkstk_darwin(v24);
  __asm { BR              X10 }

uint64_t sub_1002032F8(uint64_t a1)
{
  *(void *)(v12 - 304) = v2;
  *(void *)(v12 - 320) = a1;
  *(void *)(v12 - 288) = v1;
  *(void *)(v12 - 208) = BYTE6(v6);
  *(void *)(v12 - 200) = v11;
  *(void *)(v12 - 192) = v6;
  *(void *)(v12 - 272) = v4;
  dispatch thunk of static FixedWidthInteger.max.getter(v10, *(void *)(v12 - 160));
  char v13 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8);
  uint64_t v14 = *(void *)(v12 - 168);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v15(v3, v9, v10);
  if ((v13 & 1) == 0)
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v18 = v3;
    goto LABEL_7;
  }

  uint64_t v16 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v17(v3, v10);
  if (v16 <= 64) {
    goto LABEL_8;
  }
  v15(v7, v9, v10);
  *(void *)(v12 - 152) = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8) & 1) == 0)
  {
    char v43 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8);
    uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
    if ((v43 & 1) != 0)
    {
      if (v44 <= 64) {
        goto LABEL_31;
      }
      goto LABEL_25;
    }

    if (v44 < 64) {
      goto LABEL_29;
    }
    uint64_t v18 = v7;
LABEL_7:
    v17(v18, v10);
    goto LABEL_8;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8) < 64)
  {
LABEL_29:
    uint64_t v48 = dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
    v17(v7, v10);
    if (v48 >= *(void *)(v12 - 152)) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

uint64_t LengthValueHelper.load<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  unint64_t v7 = v6;
  Data.load<A>(as:)(a3);
  return sub_1000208D8(v5, v7);
}

uint64_t TypeLengthValue.type.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t TypeLengthValue.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  v150 = a8;
  uint64_t v149 = a6;
  v152 = a1;
  uint64_t v135 = a9;
  v144 = *(char **)(a10 + 8);
  uint64_t v132 = *(void *)(*((void *)v144 + 3) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v132,  a3,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin(AssociatedTypeWitness);
  v129 = (char *)&v125 - v15;
  uint64_t v139 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v138 = *(void *)(v139 - 8);
  uint64_t v16 = __chkstk_darwin(v139);
  v137 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = *(void *)(a3 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  v131 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  v133 = (char *)&v125 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v142 = (char *)&v125 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v140 = (char *)&v125 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v136 = (char *)&v125 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v134 = (char *)&v125 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v141 = (char *)&v125 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v125 - v33;
  uint64_t v35 = *(void *)(a2 - 8);
  __chkstk_darwin(v32);
  uint64_t v145 = a3;
  v146 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = a4;
  uint64_t v148 = a2;
  v155[0] = a2;
  v155[1] = a3;
  v155[2] = a4;
  uint64_t v156 = a5;
  uint64_t v157 = v149;
  uint64_t v158 = a7;
  uint64_t v149 = a7;
  v159 = v150;
  uint64_t v160 = a10;
  uint64_t v37 = v152;
  uint64_t v38 = type metadata accessor for TypeLengthValue(0LL, (uint64_t)v155);
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v125 - v40;
  uint64_t v42 = v37[3];
  uint64_t v43 = v37[4];
  sub_100021104(v37, v42);
  uint64_t v44 = v151;
  dispatch thunk of Decoder.unkeyedContainer()(v155, v42, v43);
  if (v44) {
    return sub_100002AC4(v37);
  }
  v150 = v41;
  v151 = v34;
  uint64_t v128 = v35;
  uint64_t v127 = v39;
  uint64_t v126 = v38;
  uint64_t v45 = v156;
  uint64_t v46 = v157;
  sub_1000237C8((uint64_t)v155, v156);
  char v47 = v146;
  uint64_t v48 = v148;
  UnkeyedDecodingContainer.inferredDecode<A>()(v45, v148, v46, v147);
  (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v150, v47, v48);
  uint64_t v50 = v156;
  uint64_t v51 = v157;
  sub_1000237C8((uint64_t)v155, v156);
  uint64_t v52 = v151;
  uint64_t v53 = v145;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v145, v145, v149, v50, v51);
  uint64_t v149 = 0LL;
  uint64_t v54 = v144;
  uint64_t v55 = dispatch thunk of static BinaryInteger.isSigned.getter(v53, v144);
  uint64_t v56 = v143;
  v57 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
  v58 = v141;
  v57(v141, v52, v53);
  uint64_t v59 = v53;
  if ((v55 & 1) == 0)
  {
    v61 = *(void (**)(char *, uint64_t))(v56 + 8);
    v61(v58, v53);
    v62 = v142;
    goto LABEL_10;
  }

  uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter(v53, v54);
  v61 = *(void (**)(char *, uint64_t))(v56 + 8);
  v61(v58, v53);
  v62 = v142;
  if (v60 <= 64) {
    goto LABEL_10;
  }
  v63 = v134;
  v57(v134, v151, v53);
  *(void *)&__int128 v153 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v53, v54) & 1) == 0)
  {
    char v107 = dispatch thunk of static BinaryInteger.isSigned.getter(v53, v54);
    uint64_t v108 = dispatch thunk of BinaryInteger.bitWidth.getter(v53, v54);
    if ((v107 & 1) != 0)
    {
      if (v108 <= 64) {
        goto LABEL_49;
      }
      unint64_t v109 = sub_100024970();
      v110 = v136;
      uint64_t v59 = v145;
      v111 = v144;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v153, &type metadata for Int, v109, v145, v144);
      LOBYTE(v111) = dispatch thunk of static Comparable.< infix(_:_:)( v63,  v110,  v59,  *(void *)(*((void *)v111 + 4) + 8LL));
      v61(v110, v59);
      v61(v63, v59);
      goto LABEL_48;
    }

    if (v108 >= 64)
    {
      uint64_t v59 = v145;
      v61(v63, v145);
      goto LABEL_10;
    }

    uint64_t v59 = v145;
    uint64_t v64 = v145;
    v65 = v144;
    goto LABEL_47;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(v53, v54) < 64)
  {
    uint64_t v64 = v53;
    v65 = v54;
LABEL_47:
    uint64_t v115 = dispatch thunk of BinaryInteger._lowWord.getter(v64, v65);
    v61(v63, v59);
    goto LABEL_48;
  }

  unint64_t v112 = sub_100024970();
  v113 = v136;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v153, &type metadata for Int, v112, v53, v54);
  char v114 = dispatch thunk of static Comparable.< infix(_:_:)(v63, v113, v53, *(void *)(*((void *)v54 + 4) + 8LL));
  v61(v113, v53);
  v61(v63, v53);
  if ((v114 & 1) == 0) {
    goto LABEL_10;
  }
  do
  {
LABEL_48:
    __break(1u);
LABEL_49:
    uint64_t v116 = v132;
    uint64_t v59 = v145;
    uint64_t v117 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v132,  v145,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v119 = v129;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v117,  AssociatedConformanceWitness);
    v120 = v136;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v119, v59, v116);
    v121 = v144;
    LOBYTE(v119) = dispatch thunk of static Comparable.< infix(_:_:)( v63,  v120,  v59,  *(void *)(*((void *)v144 + 4) + 8LL));
    v61(v120, v59);
    v122 = v131;
    (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v131, v63, v59);
    if ((v119 & 1) != 0)
    {
      v61(v122, v59);
      __break(1u);
      JUMPOUT(0x1002045E8LL);
    }

    uint64_t v123 = v153;
    uint64_t v124 = dispatch thunk of BinaryInteger._lowWord.getter(v59, v121);
    v61(v122, v59);
  }

  while (v124 < v123);
LABEL_10:
  v66 = v151;
  v67 = v144;
  uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter(v59, v144);
  v69 = v140;
  v57(v140, v66, v59);
  if (v68 < 65)
  {
    uint64_t v70 = dispatch thunk of BinaryInteger.bitWidth.getter(v59, v67);
    v61(v69, v59);
    if (v70 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v59, v67) & 1) != 0) {
      goto LABEL_22;
    }
  }

  else
  {
    v61(v69, v59);
  }

  v57(v62, v151, v59);
  *(void *)&__int128 v153 = 0x7FFFFFFFFFFFFFFFLL;
  char v71 = dispatch thunk of static BinaryInteger.isSigned.getter(v59, v67);
  uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter(v59, v67);
  v73 = v67;
  if ((v71 & 1) == 0)
  {
    v67 = v136;
    if (v72 > 63) {
      goto LABEL_20;
    }
LABEL_18:
    uint64_t v59 = v145;
    uint64_t v78 = dispatch thunk of BinaryInteger._lowWord.getter(v145, v73);
    v61(v62, v59);
    v67 = v73;
    goto LABEL_22;
  }

  v74 = v136;
  if (v72 <= 64) {
    goto LABEL_18;
  }
  unint64_t v75 = sub_100024970();
  uint64_t v59 = v145;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v153, &type metadata for Int, v75, v145, v73);
  char v76 = dispatch thunk of static Comparable.< infix(_:_:)(v74, v62, v59, *(void *)(*((void *)v73 + 4) + 8LL));
  v61(v74, v59);
  for (i = v62; ; i = v67)
  {
    v61(i, v59);
    v67 = v73;
    if ((v76 & 1) == 0) {
      break;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t v161 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v59 = v145;
    (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v67, v62, v145);
    unint64_t v79 = sub_100024970();
    v62 = v133;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v161, &type metadata for Int, v79, v59, v73);
    char v76 = dispatch thunk of static Comparable.< infix(_:_:)(v62, v67, v59, *(void *)(*((void *)v73 + 4) + 8LL));
    v61(v62, v59);
  }

uint64_t TypeLengthValue.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (void *)__chkstk_darwin(a1);
  uint64_t v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v7[3];
  uint64_t v11 = v7[4];
  sub_100021104(v7, v10);
  dispatch thunk of Encoder.unkeyedContainer()(v21, v10, v11);
  uint64_t v12 = v22;
  uint64_t v13 = v23;
  sub_1000237C8((uint64_t)v21, v22);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v2, *(void *)(a2 + 16), *(void *)(a2 + 40), v12, v13);
  if (!v3)
  {
    TypeLengthValue.length.getter(a2);
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    sub_1000237C8((uint64_t)v21, v22);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v9, v5, *(void *)(a2 + 64), v14, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    __int128 v20 = *(_OWORD *)(v2 + *(int *)(a2 + 84));
    uint64_t v16 = v22;
    uint64_t v17 = v23;
    sub_1000237C8((uint64_t)v21, v22);
    unint64_t v18 = sub_10005CD78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v20, &type metadata for Data, v18, v16, v17);
  }

  return sub_100002AC4(v21);
}

uint64_t sub_100204780@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TypeLengthValue.init(from:)( a1,  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(void *)(a2 + 48),  *(void *)(a2 + 56),  *(char **)(a2 + 64),  a3,  *(void *)(a2 + 72));
}

uint64_t sub_1002047B4(uint64_t a1, uint64_t a2)
{
  return TypeLengthValue.encode(to:)(a1, a2);
}

void LengthValue.length.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100204808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = BYTE6(a2);
  uint64_t v7 = *(void *)(a6 + 8);
  unint64_t v8 = sub_100024970();
  return dispatch thunk of BinaryInteger.init<A>(_:)(&v10, &type metadata for Int, v8, v6, v7);
}

void *LengthValue.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v111 = *(void *)(a5 + 8);
  uint64_t v112 = a3;
  uint64_t v104 = *(void *)(*(void *)(v111 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v104,  a2,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v101 = (char *)&v97 - v7;
  uint64_t v106 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v108 = *(void *)(v106 - 8);
  uint64_t v8 = __chkstk_darwin(v106);
  char v107 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = a2;
  uint64_t v109 = *(void *)(a2 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v103 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  v105 = (char *)&v97 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v97 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v97 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v97 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v97 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v97 - v27;
  __chkstk_darwin(v26);
  v110 = (char *)&v97 - v29;
  uint64_t v31 = a1[3];
  uint64_t v30 = a1[4];
  sub_100021104(a1, v31);
  uint64_t v32 = v114;
  dispatch thunk of Decoder.unkeyedContainer()(v117, v31, v30);
  if (v32) {
    goto LABEL_35;
  }
  uint64_t v100 = v28;
  uint64_t v97 = v25;
  uint64_t v99 = v19;
  uint64_t v98 = v22;
  char v114 = v16;
  uint64_t v33 = v111;
  uint64_t v34 = a1;
  uint64_t v35 = v118;
  uint64_t v36 = v119;
  sub_1000237C8((uint64_t)v117, v118);
  uint64_t v37 = v110;
  uint64_t v38 = v113;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v113, v113, v112, v35, v36);
  uint64_t v112 = 0LL;
  uint64_t v39 = v33;
  LOBYTE(v35) = dispatch thunk of static BinaryInteger.isSigned.getter(v38, v33);
  uint64_t v40 = v109;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  uint64_t v42 = v100;
  v41(v100, v37, v38);
  uint64_t v43 = v37;
  if ((v35 & 1) == 0)
  {
    uint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v42, v38);
    uint64_t v46 = v114;
    goto LABEL_8;
  }

  uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter(v38, v39);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
  v45(v42, v38);
  uint64_t v46 = v114;
  if (v44 <= 64) {
    goto LABEL_8;
  }
  char v47 = v97;
  v41(v97, v43, v38);
  *(void *)&__int128 v115 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v38, v39) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(v38, v39) < 64)
    {
      uint64_t v48 = dispatch thunk of BinaryInteger._lowWord.getter(v38, v39);
      uint64_t v49 = v47;
      uint64_t v50 = v48;
      uint64_t v51 = v49;
      goto LABEL_45;
    }
  }

  else
  {
    char v81 = dispatch thunk of static BinaryInteger.isSigned.getter(v38, v39);
    uint64_t v82 = dispatch thunk of BinaryInteger.bitWidth.getter(v38, v39);
    if ((v81 & 1) == 0)
    {
      if (v82 >= 64)
      {
        v45(v97, v38);
        goto LABEL_8;
      }

      uint64_t v86 = v97;
      uint64_t v50 = dispatch thunk of BinaryInteger._lowWord.getter(v38, v39);
      uint64_t v51 = v86;
LABEL_45:
      v45(v51, v38);
      goto LABEL_46;
    }

    if (v82 <= 64) {
      goto LABEL_47;
    }
  }

  unint64_t v83 = sub_100024970();
  uint64_t v84 = v98;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v115, &type metadata for Int, v83, v38, v39);
  char v85 = dispatch thunk of static Comparable.< infix(_:_:)(v97, v84, v38, *(void *)(*(void *)(v39 + 32) + 8LL));
  v45(v84, v38);
  v45(v97, v38);
  if ((v85 & 1) == 0) {
    goto LABEL_8;
  }
  do
  {
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t v87 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v104,  v38,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v89 = v101;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  v87,  AssociatedConformanceWitness);
    unint64_t v90 = v98;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v89, v38, v104);
    char v91 = v97;
    LODWORD(v104) = dispatch thunk of static Comparable.< infix(_:_:)( v97,  v90,  v38,  *(void *)(*(void *)(v39 + 32) + 8LL));
    v45(v90, v38);
    uint64_t v92 = v103;
    (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v103, v91, v38);
    if ((v104 & 1) != 0)
    {
      v45(v92, v38);
      __break(1u);
      JUMPOUT(0x100205260LL);
    }

    uint64_t v93 = v39;
    uint64_t v94 = v115;
    uint64_t v95 = dispatch thunk of BinaryInteger._lowWord.getter(v38, v93);
    v45(v92, v38);
    BOOL v96 = v95 < v94;
    uint64_t v39 = v93;
    uint64_t v46 = v114;
  }

  while (v96);
LABEL_8:
  uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter(v38, v39);
  uint64_t v53 = v99;
  v41(v99, v43, v38);
  if (v52 < 65)
  {
    uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter(v38, v39);
    v45(v53, v38);
    if (v54 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v38, v39) & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v45(v53, v38);
  }

  v41(v46, v43, v38);
  *(void *)&__int128 v115 = 0x7FFFFFFFFFFFFFFFLL;
  char v55 = dispatch thunk of static BinaryInteger.isSigned.getter(v38, v39);
  uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter(v38, v39);
  if ((v55 & 1) == 0)
  {
    v57 = v98;
    if (v56 > 63) {
      goto LABEL_18;
    }
LABEL_16:
    uint64_t v61 = dispatch thunk of BinaryInteger._lowWord.getter(v38, v39);
    v45(v46, v38);
    goto LABEL_20;
  }

  v57 = v98;
  if (v56 <= 64) {
    goto LABEL_16;
  }
  unint64_t v58 = sub_100024970();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v115, &type metadata for Int, v58, v38, v39);
  char v59 = dispatch thunk of static Comparable.< infix(_:_:)(v57, v46, v38, *(void *)(*(void *)(v39 + 32) + 8LL));
  v45(v57, v38);
  for (i = v46; ; i = v57)
  {
    v45(i, v38);
    if ((v59 & 1) == 0) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
    (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v57, v46, v38);
    unint64_t v62 = sub_100024970();
    uint64_t v46 = v105;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v120, &type metadata for Int, v62, v38, v39);
    char v59 = dispatch thunk of static Comparable.< infix(_:_:)(v46, v57, v38, *(void *)(*(void *)(v39 + 32) + 8LL));
    v45(v46, v38);
  }

uint64_t LengthValue.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = (void *)__chkstk_darwin(a1);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = v10[3];
  uint64_t v13 = v10[4];
  sub_100021104(v10, v14);
  dispatch thunk of Encoder.unkeyedContainer()(v26, v14, v13);
  uint64_t v23 = a2;
  LengthValue.length.getter(a2, a3);
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  sub_1000237C8((uint64_t)v26, v27);
  uint64_t v17 = v29;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v12, a4, v24, v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
  if (!v17)
  {
    v25[0] = v23;
    v25[1] = a3;
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    sub_1000237C8((uint64_t)v26, v27);
    unint64_t v20 = sub_10005CD78();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v25, &type metadata for Data, v20, v18, v19);
  }

  return sub_100002AC4(v26);
}

void *sub_1002053D4@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t result = LengthValue.init(from:)(a1, a2[2], a2[3], a3, a2[5]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }

  return result;
}

uint64_t sub_100205408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LengthValue.encode(to:)(a1, *v5, v5[1], *(void *)(a2 + 16), a5, *(void *)(a2 + 32));
}

void sub_10020542C()
{
}

uint64_t sub_100205440()
{
  uint64_t v1 = NANBitmap.Channel.operatingClass.getter(*v0);
  sub_100020AFC(v1, v2);
  return v1;
}

uint64_t sub_100205480(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 84));
}

uint64_t type metadata accessor for TypeLengthValue(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for TypeLengthValue);
}

uint64_t sub_10020549C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 72);
}

uint64_t sub_1002054A4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t sub_1002054AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 72LL);
}

uint64_t sub_1002054B4(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10035C218;
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 80);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100205528(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v11 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    sub_100020AFC(*v11, v13);
    *uint64_t v10 = v12;
    v10[1] = v13;
  }

  return v4;
}

uint64_t sub_1002055E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  unint64_t v4 = (a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1000208D8(*(void *)v4, *(void *)(v4 + 8));
}

uint64_t sub_100205624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_100020AFC(*v8, v10);
  *int v7 = v9;
  v7[1] = v10;
  return a1;
}

uint64_t sub_10020568C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_100020AFC(*v8, v10);
  uint64_t v11 = *v7;
  unint64_t v12 = v7[1];
  *int v7 = v9;
  v7[1] = v10;
  sub_1000208D8(v11, v12);
  return a1;
}

uint64_t sub_1002056FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_100205758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  *(_OWORD *)int v7 = *(_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8LL);
  sub_1000208D8(v8, v9);
  return a1;
}

uint64_t sub_1002057BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xC) {
    unsigned int v6 = 12;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xC)
    {
      uint64_t v12 = *(void *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL) + 8) >> 60;
      if (((4 * (_DWORD)v12) & 0xC) != 0) {
        return 16 - ((4 * (_DWORD)v12) & 0xC | (v12 >> 2));
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100205838 + 4 * byte_10035C114[v10]))();
  }

void sub_1002058C8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0xCu) {
    unsigned int v6 = 12;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_1002059BC()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100205A40LL);
}

void sub_1002059C4(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x1002059CCLL);
  }
  JUMPOUT(0x100205A40LL);
}

void sub_100205A1C()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100205A40LL);
}

void sub_100205A24()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100205A40LL);
}

uint64_t sub_100205A2C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_WORD *)(v7 + v8) = 0;
  if (!a2) {
    goto LABEL_6;
  }
  if (a3 < 0xC)
  {
    uint64_t v4 = (void *)((v7 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    if (a2 > 0xC) {
      JUMPOUT(0x100205A38LL);
    }
    *uint64_t v4 = 0LL;
    v4[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
LABEL_6:
    JUMPOUT(0x100205A40LL);
  }

  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v7);
}

uint64_t type metadata accessor for LengthValue(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for LengthValue);
}

uint64_t RSSI.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = *(void *)(*(void *)(a3 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v50,  a2,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  uint64_t v49 = (char *)&v48 - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v48 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v51 = (char *)&v48 - v10;
  __chkstk_darwin();
  uint64_t v54 = (char *)&v48 - v11;
  __chkstk_darwin();
  unint64_t v13 = (char *)&v48 - v12;
  __chkstk_darwin();
  uint64_t v53 = (char *)&v48 - v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v48 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v48 - v17;
  __chkstk_darwin();
  unint64_t v20 = (char *)&v48 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  char v55 = (char *)a1;
  v21((char *)&v48 - v19, a1, a2);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
  v21(v18, (uint64_t)v20, a2);
  uint64_t v52 = v8;
  if ((a1 & 1) == 0)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v24 = v18;
    goto LABEL_7;
  }

  uint64_t v22 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v18, a2);
  if (v22 <= 64) {
    goto LABEL_8;
  }
  v21(v16, (uint64_t)v20, a2);
  int64_t v57 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3) & 1) == 0)
  {
    char v37 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
    uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
    if ((v37 & 1) != 0)
    {
      if (v38 <= 64) {
        goto LABEL_29;
      }
LABEL_23:
      unint64_t v39 = sub_100024970();
      uint64_t v40 = v53;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v57, &type metadata for Int, v39, a2, a3);
      char v41 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v40, a2, *(void *)(*(void *)(a3 + 32) + 8LL));
      v23(v40, a2);
      v23(v16, a2);
      if ((v41 & 1) != 0) {
        goto LABEL_28;
      }
      goto LABEL_8;
    }

    if (v38 < 64) {
      goto LABEL_27;
    }
    uint64_t v24 = v16;
LABEL_7:
    v23(v24, a2);
    goto LABEL_8;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3) >= 64) {
    goto LABEL_23;
  }
LABEL_27:
  uint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
  v23(v16, a2);
  if (v42 < v57)
  {
LABEL_28:
    do
    {
      __break(1u);
LABEL_29:
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v50,  a2,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100339A38,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      uint64_t v44 = v53;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v49, a2, v50);
      char v45 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v44, a2, *(void *)(*(void *)(a3 + 32) + 8LL));
      v23(v44, a2);
      uint64_t AssociatedTypeWitness = (uint64_t)v48;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v16, a2);
      if ((v45 & 1) != 0) {
        goto LABEL_33;
      }
      int64_t v46 = v57;
      uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
      v23((char *)AssociatedTypeWitness, a2);
    }

    while (v47 < v46);
  }

void *RSSI.invalid.unsafeMutableAddressor()
{
  return &static RSSI.invalid;
}

BOOL static RSSI.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

void *RSSI.minimumDiscoveryThreshold.unsafeMutableAddressor()
{
  return &static RSSI.minimumDiscoveryThreshold;
}

uint64_t static RSSI.minimumDiscoveryThreshold.getter()
{
  return -75LL;
}

uint64_t RSSI.description.getter()
{
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v0._countAndFlagsBits = 1833067552LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
  return v2;
}

void RSSI.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int RSSI.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

unint64_t sub_100206174()
{
  unint64_t result = qword_10040BD88;
  if (!qword_10040BD88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RSSI, &type metadata for RSSI);
    atomic_store(result, (unint64_t *)&qword_10040BD88);
  }

  return result;
}

BOOL sub_1002061B8(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1002061CC(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1002061E0(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1002061F4(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_100206208()
{
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v0._countAndFlagsBits = 1833067552LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
  return v2;
}

ValueMetadata *type metadata accessor for RSSI()
{
  return &type metadata for RSSI;
}

  ;
}

_UNKNOWN **static NANBloomFilter.Index.allCases.getter()
{
  return &off_1003D75C0;
}

uint64_t sub_100206298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100206CD8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002062F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100206CD8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100206340(void *a1@<X8>)
{
  *a1 = &off_1003D75E8;
}

uint64_t NANBloomFilter.include.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

void NANBloomFilter.description.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v5 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v5);
  _StringGuts.grow(_:)(32LL);
  v6._countAndFlagsBits = 0x6946206D6F6F6C42LL;
  v6._object = (void *)0xEE00283C7265746CLL;
  String.append(_:)(v6);
  if ((a3 & 0x100) != 0) {
    uint64_t v7 = 2125385LL;
  }
  else {
    uint64_t v7 = 0x206E4920746F4ELL;
  }
  if ((a3 & 0x100) != 0) {
    unint64_t v8 = 0xE300000000000000LL;
  }
  else {
    unint64_t v8 = 0xE700000000000000LL;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 8250LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  __asm { BR              X10 }

uint64_t sub_100206470()
{
  unint64_t v5 = sub_100023614();
  ((void (*)(uint64_t, unint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 97) & 1) != 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = (void *)0xE000000000000000LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = (void *)0xE000000000000000LL;
    *(_OWORD *)(v4 - 144) = xmmword_100339900;
    do
    {
      char v8 = *(_BYTE *)(v4 - 98);
      uint64_t v9 = sub_100002274((uint64_t *)&unk_100405140);
      uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 144);
      *(void *)(v10 + 56) = &type metadata for UInt8;
      *(void *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      uint64_t v11 = String.init(format:_:)(1479684133LL, 0xE400000000000000LL, v10);
      unint64_t v13 = v12;
      *(void *)(v4 - 120) = v6;
      *(void *)(v4 - 112) = v7;
      swift_bridgeObjectRetain(v7);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v13);
      uint64_t v6 = *(void *)(v4 - 120);
      uint64_t v7 = *(void **)(v4 - 112);
      ((void (*)(uint64_t, unint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
    }

    while (*(_BYTE *)(v4 - 97) != 1);
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 160) + 8LL))(v1, v0);
  v15._countAndFlagsBits = v6;
  v15._object = v7;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v7);
  v16._countAndFlagsBits = 0x3A7865646E69202CLL;
  v16._object = (void *)0xE900000000000020LL;
  String.append(_:)(v16);
  *(_BYTE *)(v4 - 120) = *(_DWORD *)(v4 - 148);
  _print_unlocked<A, B>(_:_:)( v4 - 120,  v4 - 96,  &type metadata for NANBloomFilter.Index,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v17._countAndFlagsBits = 62LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  return *(void *)(v4 - 96);
}

void NANBloomFilter.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, __int16 a4)
{
}

uint64_t static NANBloomFilter.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  unsigned __int8 v6 = a6;
  int v7 = a3;
  BOOL v8 = (a3 & 0x100) == 0;
  unsigned int v9 = a6 & 0x100;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  return v10 & (v7 == v6) & (v8 ^ (v9 >> 8));
}

Swift::Int NANBloomFilter.hashValue.getter(uint64_t a1, unint64_t a2, __int16 a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10020678C()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 17);
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v6, 0LL);
  sub_100020AFC(v1, v2);
  Data.hash(into:)(v6, v1, v2);
  sub_1000208D8(v1, v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10020681C(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 17);
  Swift::UInt8 v6 = *(_BYTE *)(v1 + 16);
  sub_100020AFC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  sub_1000208D8(v3, v4);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_100206890(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 17);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v7, a1);
  sub_100020AFC(v2, v3);
  Data.hash(into:)(v7, v2, v3);
  sub_1000208D8(v2, v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_10020691C()
{
  if (*(_BYTE *)(v0 + 17)) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  NANBloomFilter.description.getter(*(void *)v0, *(void *)(v0 + 8), v1 | *(unsigned __int8 *)(v0 + 16));
}

uint64_t sub_10020693C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 17);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 17);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8));
  return v6 & (v2 == v4) & (v3 ^ v5 ^ 1u);
}

unint64_t sub_10020699C()
{
  unint64_t result = qword_10040BD90;
  if (!qword_10040BD90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANBloomFilter.Index,  &type metadata for NANBloomFilter.Index);
    atomic_store(result, (unint64_t *)&qword_10040BD90);
  }

  return result;
}

unint64_t sub_1002069E4()
{
  unint64_t result = qword_10040BD98;
  if (!qword_10040BD98)
  {
    uint64_t v1 = sub_1000022F8(&qword_10040BDA0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10040BD98);
  }

  return result;
}

unint64_t sub_100206A34()
{
  unint64_t result = qword_10040BDA8;
  if (!qword_10040BDA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANBloomFilter,  &type metadata for NANBloomFilter);
    atomic_store(result, (unint64_t *)&qword_10040BDA8);
  }

  return result;
}

uint64_t sub_100206A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100020AFC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for NANBloomFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100020AFC(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_1000208D8(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for NANBloomFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000208D8(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANBloomFilter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANBloomFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 18) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 18) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 17) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANBloomFilter()
{
  return &type metadata for NANBloomFilter;
}

uint64_t storeEnumTagSinglePayload for NANBloomFilter.Index(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100206C58 + 4 * byte_10035C38D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100206C8C + 4 * byte_10035C388[v4]))();
}

uint64_t sub_100206C8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100206C94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100206C9CLL);
  }
  return result;
}

uint64_t sub_100206CA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100206CB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100206CB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100206CBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANBloomFilter.Index()
{
  return &type metadata for NANBloomFilter.Index;
}

unint64_t sub_100206CD8()
{
  unint64_t result = qword_10040BDB0;
  if (!qword_10040BDB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANBloomFilter.Index,  &type metadata for NANBloomFilter.Index);
    atomic_store(result, (unint64_t *)&qword_10040BDB0);
  }

  return result;
}

uint64_t WiFiError.init(ioctlReturn:)(uint64_t result, uint64_t a2)
{
  if ((_DWORD)result == -1) {
    LODWORD(result) = errno.getter(result, a2);
  }
  return result;
}

uint64_t static WiFiError.securityErrorMessage(from:)(OSStatus a1)
{
  CFStringRef v1 = SecCopyErrorMessageString(a1, 0LL);
  if (!v1) {
    return 0x6E776F6E6B6E75LL;
  }
  int v2 = (__CFString *)v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

char *static WiFiError.systemErrorMessage.getter(uint64_t a1, uint64_t a2)
{
  int v2 = errno.getter(a1, a2);
  unint64_t result = strerror(v2);
  if (result) {
    return (char *)String.init(cString:)(result);
  }
  __break(1u);
  return result;
}

uint64_t WiFiError.apiError.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)())((char *)sub_100206DF4 + 4 * byte_10035C568[a3]))();
}

void WiFiError.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_100206E7C( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!(_DWORD)v18)
  {
    uint64_t v22 = (void *)0xE700000000000000LL;
    unint64_t v18 = 0x73736563637553LL;
    goto LABEL_48;
  }

  if ((int)v18 >= 1)
  {
    uint64_t v19 = strerror(v18);
    if (!v19)
    {
      __break(1u);
      JUMPOUT(0x10020737CLL);
    }

    goto LABEL_4;
  }

  if ((int)v18 > -103)
  {
    if ((int)v18 > -101)
    {
      if ((_DWORD)v18 == -100)
      {
        unint64_t v18 = 0xD000000000000021LL;
        char v26 = "Invalid Authentication Parameters";
      }

      else
      {
        if ((_DWORD)v18 != -1)
        {
LABEL_55:
          unint64_t v20 = _s7CoreP2P9WiFiErrorO06kernelE7Message4fromSSs5Int32V_tFZ_0(v18);
          goto LABEL_5;
        }

        int v25 = errno.getter(a1, a2);
        uint64_t v19 = strerror(v25);
        if (v19)
        {
LABEL_4:
          unint64_t v20 = (char *)String.init(cString:)(v19);
LABEL_5:
          unint64_t v18 = (unint64_t)v20;
          uint64_t v22 = v21;
          goto LABEL_48;
        }

        __break(1u);
LABEL_17:
        unint64_t v18 = 0xD000000000000015LL;
        char v26 = "Cipher Suite Rejected";
      }
    }

    else
    {
      if ((_DWORD)v18 != -102)
      {
        uint64_t v24 = "Invalid Open Parameters";
LABEL_53:
        uint64_t v22 = (void *)((unint64_t)(v24 - 32) | 0x8000000000000000LL);
        unint64_t v18 = 0xD000000000000017LL;
        goto LABEL_48;
      }

      unint64_t v18 = 0xD00000000000001CLL;
      char v26 = "Fatal Authentication Failure";
    }

void sub_100207418()
{
}

uint64_t Error.apiError.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (swift_dynamicCast(&v7, v4, a1, &type metadata for WiFiError, 0LL)) {
    __asm { BR              X10 }
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return 7LL;
}

CoreP2P::ParsingError_optional __swiftcall ParsingError.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D52D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value = CoreP2P_ParsingError_incorrectType;
  }
  else {
    v4.value = CoreP2P_ParsingError_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t ParsingError.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x636572726F636E69LL;
  }
  else {
    return 0xD000000000000011LL;
  }
}

uint64_t sub_1002075D8(char *a1, char *a2)
{
  return sub_10002AFA4(*a1, *a2);
}

Swift::Int sub_1002075E4()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    unint64_t v2 = 0x636572726F636E69LL;
  }
  else {
    unint64_t v2 = 0xD000000000000011LL;
  }
  if (v1) {
    unint64_t v3 = 0xED00006570795474LL;
  }
  else {
    unint64_t v3 = 0x8000000100360B60LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100207674(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0x636572726F636E69LL;
  }
  else {
    unint64_t v2 = 0xD000000000000011LL;
  }
  if (*v1) {
    unint64_t v3 = 0xED00006570795474LL;
  }
  else {
    unint64_t v3 = 0x8000000100360B60LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1002076E0(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    unint64_t v3 = 0x636572726F636E69LL;
  }
  else {
    unint64_t v3 = 0xD000000000000011LL;
  }
  if (v2) {
    unint64_t v4 = 0xED00006570795474LL;
  }
  else {
    unint64_t v4 = 0x8000000100360B60LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10020776C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D52D8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_1002077C8(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000011LL;
  if (*v1) {
    unint64_t v2 = 0x636572726F636E69LL;
  }
  unint64_t v3 = 0x8000000100360B60LL;
  if (*v1) {
    unint64_t v3 = 0xED00006570795474LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

char *_s7CoreP2P9WiFiErrorO06kernelE7Message4fromSSs5Int32V_tFZ_0(mach_error_t a1)
{
  uint64_t result = mach_error_string(a1);
  if (result)
  {
    uint64_t v2 = String.init(cString:)(result);
    uint64_t v4 = v3;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v7._countAndFlagsBits = 93LL;
    v7._object = (void *)0xE100000000000000LL;
    String.append(_:)(v7);
    swift_bridgeObjectRetain(v4);
    v8._countAndFlagsBits = 91LL;
    v8._object = (void *)0xE100000000000000LL;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(0xE100000000000000LL);
    return (char *)v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_1002078E4(int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x100207A30LL);
  }

  unint64_t result = 0x73736563637553LL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      unint64_t result = 0x2064696C61766E49LL;
      break;
    case 7:
      unint64_t result = 0x6874754120746F4ELL;
      break;
    case 8:
      unint64_t result = 0x44206E6F6974704FLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000010LL;
      break;
    case 10:
      unint64_t result = 0x706E49206C6C754ELL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E55LL;
      break;
  }

  return result;
}

unint64_t sub_100207A60()
{
  unint64_t result = qword_10040BDB8;
  if (!qword_10040BDB8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ParsingError, &type metadata for ParsingError);
    atomic_store(result, (unint64_t *)&qword_10040BDB8);
  }

  return result;
}

uint64_t sub_100207AA8(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return sub_100207ABC(a1, a2);
  }
  return a1;
}

uint64_t sub_100207ABC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for WiFiError(uint64_t a1)
{
  return sub_10007030C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7CoreP2P9WiFiErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100207AA8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for WiFiError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100207AA8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10007030C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WiFiError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10007030C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WiFiError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100207C4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100207C54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WiFiError()
{
  return &type metadata for WiFiError;
}

uint64_t storeEnumTagSinglePayload for ParsingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100207CB8 + 4 * byte_10035C5A7[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100207CEC + 4 * byte_10035C5A2[v4]))();
}

uint64_t sub_100207CEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100207CF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100207CFCLL);
  }
  return result;
}

uint64_t sub_100207D08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100207D10LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100207D14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100207D1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParsingError()
{
  return &type metadata for ParsingError;
}

unint64_t destroy for TestingError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t _s7CoreP2P12TestingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for TestingError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for TestingError(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TestingError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for TestingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }

  return result;
}

uint64_t sub_100207F4C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100207F64(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for TestingError()
{
  return &type metadata for TestingError;
}

uint64_t AWDLWiFiDriver.version.getter()
{
  return 2194LL;
}

uint64_t AWDLWiFiDriver.peerPreferredChannels.getter()
{
  return 0x300000000LL;
}

uint64_t AWDLWiFiDriver.statistics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000586C0((uint64_t)v3, a1, &qword_100406950);
}

uint64_t AWDLWiFiDriver.lowLatencyStatistics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000586C0((uint64_t)v3, a1, &qword_100406958);
}

void WiFiMACAddress.wifiAddress.getter()
{
  id v1 = [v0 data];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  __asm { BR              X10 }

unint64_t sub_100208090()
{
  if (BYTE6(v0) == 6LL)
  {
    id v4 = [v1 *(SEL *)(v3 + 3504)];
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v7 = v6;

    LOBYTE(v4) = Data.subscript.getter(0LL, v5, v7);
    sub_1000208D8(v5, v7);
    id v8 = [v1 *(SEL *)(v3 + 3504)];
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    LOBYTE(v8) = Data.subscript.getter(1LL, v9, v11);
    sub_1000208D8(v9, v11);
    id v12 = [v1 *(SEL *)(v3 + 3504)];
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v15 = v14;

    LOBYTE(v12) = Data.subscript.getter(2LL, v13, v15);
    sub_1000208D8(v13, v15);
    id v16 = [v1 *(SEL *)(v3 + 3504)];
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;

    LOBYTE(v16) = Data.subscript.getter(3LL, v17, v19);
    sub_1000208D8(v17, v19);
    id v20 = [v1 *(SEL *)(v3 + 3504)];
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v23 = v22;

    LOBYTE(v20) = Data.subscript.getter(4LL, v21, v23);
    sub_1000208D8(v21, v23);
    id v24 = [v1 *(SEL *)(v3 + 3504)];
    uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
    unint64_t v27 = v26;

    LOBYTE(v24) = Data.subscript.getter(5LL, v25, v27);
    sub_1000208D8(v25, v27);
    unint64_t v28 = (unint64_t)v24 << 40;
    unint64_t v29 = (unint64_t)v20 << 32;
    unint64_t v30 = (unint64_t)v16 << 24;
    unint64_t v31 = (unint64_t)v12 << 16;
    unint64_t v32 = (unint64_t)v8 << 8;
    uint64_t v33 = v4;
  }

  else
  {
    uint64_t v33 = 0LL;
    unint64_t v32 = 0LL;
    unint64_t v31 = 0LL;
    unint64_t v30 = 0LL;
    unint64_t v29 = 0LL;
    unint64_t v28 = 0LL;
  }

  return v32 | v33 | v31 | v30 | v29 | v28;
}

void WiFiAddress.ipv6LinkLocalAddress.getter(unint64_t a1)
{
  unint64_t v1 = a1 >> 8;
  unint64_t v2 = a1 >> 16;
  unint64_t v3 = a1 >> 24;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = a1 >> 40;
  char v6 = a1;
  uint64_t v7 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v39 = __DataStorage.init(length:)(16LL) | 0x4000000000000000LL;
  Data._Representation.subscript.setter(254LL, 0LL);
  Data._Representation.subscript.setter(128LL, 1LL);
  uint64_t v38 = sub_100002274(&qword_1004040A8);
  uint64_t v8 = swift_allocObject(v38, 38LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_10033A980;
  *(_BYTE *)(v8 + 32) = v6;
  *(_BYTE *)(v8 + 33) = v1;
  *(_BYTE *)(v8 + 34) = v2;
  *(_BYTE *)(v8 + 35) = v3;
  *(_BYTE *)(v8 + 36) = v4;
  *(_BYTE *)(v8 + 37) = v5;
  uint64_t v9 = sub_1000FB08C(v8);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease(v8);
  LODWORD(v8) = Data.subscript.getter(0LL, v9, v11);
  sub_1000208D8(v9, v11);
  Data._Representation.subscript.setter(v8 ^ 2, 8LL);
  uint64_t v12 = swift_allocObject(v38, 38LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_10033A980;
  *(_BYTE *)(v12 + 32) = v6;
  *(_BYTE *)(v12 + 33) = v1;
  char v37 = v1;
  *(_BYTE *)(v12 + 34) = v2;
  *(_BYTE *)(v12 + 35) = v3;
  *(_BYTE *)(v12 + 36) = v4;
  *(_BYTE *)(v12 + 37) = v5;
  uint64_t v13 = sub_1000FB08C(v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease(v12);
  uint64_t v16 = Data.subscript.getter(1LL, v13, v15);
  sub_1000208D8(v13, v15);
  Data._Representation.subscript.setter(v16, 9LL);
  uint64_t v17 = swift_allocObject(v38, 38LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_10033A980;
  *(_BYTE *)(v17 + 32) = v6;
  *(_BYTE *)(v17 + 33) = v1;
  *(_BYTE *)(v17 + 34) = v2;
  *(_BYTE *)(v17 + 35) = v3;
  LOBYTE(v1) = v3;
  *(_BYTE *)(v17 + 36) = v4;
  LOBYTE(v3) = v4;
  *(_BYTE *)(v17 + 37) = v5;
  LOBYTE(v4) = v5;
  uint64_t v18 = sub_1000FB08C(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  uint64_t v21 = Data.subscript.getter(2LL, v18, v20);
  sub_1000208D8(v18, v20);
  Data._Representation.subscript.setter(v21, 10LL);
  Data._Representation.subscript.setter(255LL, 11LL);
  Data._Representation.subscript.setter(254LL, 12LL);
  uint64_t v22 = swift_allocObject(v38, 38LL, 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_10033A980;
  *(_BYTE *)(v22 + 32) = v6;
  *(_BYTE *)(v22 + 33) = v37;
  *(_BYTE *)(v22 + 34) = v2;
  *(_BYTE *)(v22 + 35) = v1;
  *(_BYTE *)(v22 + 36) = v3;
  *(_BYTE *)(v22 + 37) = v4;
  uint64_t v23 = sub_1000FB08C(v22);
  unint64_t v25 = v24;
  swift_bridgeObjectRelease(v22);
  uint64_t v26 = Data.subscript.getter(3LL, v23, v25);
  sub_1000208D8(v23, v25);
  Data._Representation.subscript.setter(v26, 13LL);
  uint64_t v27 = swift_allocObject(v38, 38LL, 7LL);
  *(_OWORD *)(v27 + 16) = xmmword_10033A980;
  *(_BYTE *)(v27 + 32) = v6;
  *(_BYTE *)(v27 + 33) = v37;
  *(_BYTE *)(v27 + 34) = v2;
  *(_BYTE *)(v27 + 35) = v1;
  *(_BYTE *)(v27 + 36) = v3;
  *(_BYTE *)(v27 + 37) = v4;
  uint64_t v28 = sub_1000FB08C(v27);
  unint64_t v30 = v29;
  swift_bridgeObjectRelease(v27);
  uint64_t v31 = Data.subscript.getter(4LL, v28, v30);
  sub_1000208D8(v28, v30);
  Data._Representation.subscript.setter(v31, 14LL);
  uint64_t v32 = swift_allocObject(v38, 38LL, 7LL);
  *(_OWORD *)(v32 + 16) = xmmword_10033A980;
  *(_BYTE *)(v32 + 32) = v6;
  *(_BYTE *)(v32 + 33) = v37;
  *(_BYTE *)(v32 + 34) = v2;
  *(_BYTE *)(v32 + 35) = v1;
  *(_BYTE *)(v32 + 36) = v3;
  *(_BYTE *)(v32 + 37) = v4;
  uint64_t v33 = sub_1000FB08C(v32);
  unint64_t v35 = v34;
  swift_bridgeObjectRelease(v32);
  uint64_t v36 = Data.subscript.getter(5LL, v33, v35);
  sub_1000208D8(v33, v35);
  Data._Representation.subscript.setter(v36, 15LL);
  __asm { BR              X9 }

unint64_t sub_100208714()
{
  if (BYTE6(v2) < 0x10uLL)
  {
LABEL_16:
    sub_1000208D8(v0, v2);
    __break(1u);
  }

  if (!v1)
  {
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(v0);
    int32x4_t v16 = vuzp1q_s32( (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10033A8F0),  (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10033A8E0));
    *(int16x4_t *)v16.i8 = vmovn_s32(v16);
    int32x4_t v36 = v16;
    unint64_t v12 = v0 >> 40;
    unint64_t v13 = HIWORD(v0);
    unint64_t v14 = HIBYTE(v0);
    uint64x2_t v17 = (uint64x2_t)vdupq_n_s64(v2);
    int32x4_t v18 = vuzp1q_s32( (int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_10033A8F0),  (int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_10033A8E0));
    *(int16x4_t *)v18.i8 = vmovn_s32(v18);
    uint16x8_t v35 = (uint16x8_t)v18;
    unsigned __int8 v10 = v0;
    goto LABEL_12;
  }

  v34[3] = v34;
  if (v1 != 1)
  {
    uint64_t v19 = *(void *)(v0 + 16);
    swift_retain();
    uint64_t v20 = swift_retain();
    uint64_t v21 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v20);
    if (!v21)
    {
LABEL_18:
      __DataStorage._length.getter();
      __break(1u);
      JUMPOUT(0x1002089E8LL);
    }

    uint64_t v22 = v21;
    uint64_t v23 = __DataStorage._offset.getter();
    BOOL v24 = __OFSUB__(v19, v23);
    uint64_t v25 = v19 - v23;
    if (!v24)
    {
      __n128 v26 = ((__n128 (*)(void))__DataStorage._length.getter)();
      uint64_t v27 = v22 + v25;
      unsigned __int8 v10 = *(_BYTE *)(v22 + v25);
      v26.n128_u32[0] = *(_DWORD *)(v27 + 1);
      uint16x8_t v28 = vmovl_u8((uint8x8_t)v26.n128_u64[0]);
      int32x4_t v36 = (int32x4_t)v28;
      LOBYTE(v12) = *(_BYTE *)(v27 + 5);
      LOBYTE(v13) = *(_BYTE *)(v27 + 6);
      unint64_t v14 = *(unsigned __int8 *)(v27 + 7);
      v28.i32[0] = *(_DWORD *)(v27 + 9);
      uint16x8_t v35 = vmovl_u8(*(uint8x8_t *)v28.i8);
      swift_release(v2 & 0x3FFFFFFFFFFFFFFFLL);
      swift_release(v0);
      goto LABEL_12;
    }

unint64_t static WiFiAddress.randomLinkLocalAddress()()
{
  return sub_1002136D8() & 0xFFFFFFFFFFFCLL | 2;
}

uint64_t WiFiAddress.init(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_100212134(a1, a2);
  return v2 & 0xFFFFFFFFFFFFLL | ((HIWORD(v2) & 1) << 48);
}

void __swiftcall WiFiAddress.init(_:)(CoreP2P::WiFiAddress_optional *__return_ptr retstr, sockaddr_dl *a2)
{
  uint64_t v6 = v2;
  int v7 = v3;
  uint64_t v4 = sub_100211E68((_BYTE *)&v6 + BYTE5(a2), BYTE6(a2));
  sub_100212134(v4, v5);
}

uint64_t WiFiAddress.data.getter(unint64_t a1)
{
  char v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  uint64_t v7 = sub_100002274(&qword_1004040A8);
  uint64_t v8 = swift_allocObject(v7, 38LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_10033A980;
  *(_BYTE *)(v8 + 32) = v1;
  *(_BYTE *)(v8 + 33) = v2;
  *(_BYTE *)(v8 + 34) = v3;
  *(_BYTE *)(v8 + 35) = v4;
  *(_BYTE *)(v8 + 36) = v5;
  *(_BYTE *)(v8 + 37) = v6;
  uint64_t v9 = sub_1000FB08C(v8);
  swift_bridgeObjectRelease(v8);
  return v9;
}

void *WiFiAddress.size.unsafeMutableAddressor()
{
  return &static WiFiAddress.size;
}

void sub_100208BAC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100208BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 0x10uLL)
  {
    __chkstk_darwin(a1);
    sub_100211F14((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100208CCCLL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_100208CDC(uint64_t a1, uint64_t a2)
{
}

void sub_100208D24(uint64_t a1, uint64_t a2)
{
}

void sub_100208D6C(uint64_t a1, uint64_t a2)
{
}

void sub_100208DB4(uint64_t a1, uint64_t a2)
{
}

void sub_100208DFC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100208E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3))
  {
    __chkstk_darwin(a1);
    sub_1002125F4((uint64_t)&v10, v4, v5);
    if (!v3) {
      return;
    }
    swift_willThrow(v6);
    __break(1u);
  }

  unint64_t v7 = sub_1000033FC();
  uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
  *(void *)uint64_t v9 = 0LL;
  *(void *)(v9 + 8) = 0LL;
  *(_BYTE *)(v9 + 16) = 2;
  swift_willThrow(v8);
}

void sub_100208F28(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100208F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 4uLL)
  {
    __chkstk_darwin(a1);
    sub_10021306C((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100209048LL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_100209058(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1002090A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x30uLL)
  {
    __chkstk_darwin(a1);
    sub_10020CD70((uint64_t)&v17, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x1002091B8LL);
    }

    int v13 = *(_DWORD *)(v6 - 68);
    __int128 v14 = *(_OWORD *)(v6 - 64);
    uint64_t v15 = *(void *)(v6 - 48);
    __int128 v16 = *(_OWORD *)(v6 - 84);
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(v6 - 88);
    *(_OWORD *)(v4 + 4) = v16;
    *(_DWORD *)(v4 + 20) = v13;
    *(_OWORD *)(v4 + 24) = v14;
    *(void *)(v4 + 40) = v15;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_1002091C8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x10uLL)
  {
    __chkstk_darwin(a1);
    sub_10020CFC0((uint64_t)&v13, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100209308LL);
    }

    *uint64_t v4 = *(_OWORD *)(v6 - 64);
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_100209318(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x48uLL)
  {
    __chkstk_darwin(a1);
    sub_10020D1F0((uint64_t)&v20, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100209488LL);
    }

    uint64_t v13 = *(void *)(v6 - 56);
    __int128 v14 = *(_OWORD *)(v6 - 100);
    __int128 v15 = *(_OWORD *)(v6 - 84);
    uint64_t v16 = *(void *)(v6 - 68);
    int v17 = *(_DWORD *)(v6 - 104);
    int v18 = *(_DWORD *)(v6 - 48);
    int v19 = *(_DWORD *)(v6 - 44);
    *(void *)uint64_t v4 = *(void *)(v6 - 112);
    *(_DWORD *)(v4 + 8) = v17;
    *(_OWORD *)(v4 + 12) = v14;
    *(_OWORD *)(v4 + 28) = v15;
    *(void *)(v4 + 44) = v16;
    *(void *)(v4 + 56) = v13;
    *(_DWORD *)(v4 + 64) = v18;
    *(_DWORD *)(v4 + 68) = v19;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_100209498(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1002094DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 3uLL)
  {
    __chkstk_darwin(a1);
    sub_1002123CC((uint64_t)&v11, v8, v9);
    if (v3)
    {
      swift_willThrow(v10);
      __break(1u);
      JUMPOUT(0x1002095BCLL);
    }

    return v10 & 0xFFFFFF;
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    return swift_willThrow(v5);
  }

void sub_1002095CC(uint64_t a1, uint64_t a2)
{
}

void sub_100209614(uint64_t a1, uint64_t a2)
{
}

void sub_10020965C(uint64_t a1, uint64_t a2)
{
}

void sub_1002096A4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209800(uint64_t a1, uint64_t a2)
{
}

void sub_100209848(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x68uLL)
  {
    __chkstk_darwin(a1);
    sub_10020D67C((uint64_t)&v22, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x1002099D0LL);
    }

    __int16 v13 = *(_WORD *)(v6 - 132);
    int v14 = *(_DWORD *)(v6 - 128);
    int v15 = *(_DWORD *)(v6 - 60);
    __int128 v16 = *(_OWORD *)(v6 - 124);
    __int128 v17 = *(_OWORD *)(v6 - 108);
    __int128 v18 = *(_OWORD *)(v6 - 92);
    __int128 v19 = *(_OWORD *)(v6 - 76);
    __int128 v20 = *(_OWORD *)(v6 - 56);
    int v21 = *(_DWORD *)(v6 - 136);
    *(void *)uint64_t v4 = *(void *)(v6 - 144);
    *(_DWORD *)(v4 + 8) = v21;
    *(_WORD *)(v4 + 12) = v13;
    *(_DWORD *)(v4 + 16) = v14;
    *(_OWORD *)(v4 + 20) = v16;
    *(_OWORD *)(v4 + 36) = v17;
    *(_OWORD *)(v4 + 52) = v18;
    *(_OWORD *)(v4 + 68) = v19;
    *(_DWORD *)(v4 + 84) = v15;
    *(_OWORD *)(v4 + 88) = v20;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_1002099E0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x18uLL)
  {
    __chkstk_darwin(a1);
    sub_10020D8F4((uint64_t)&v15, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100209B30LL);
    }

    __int128 v13 = *(_OWORD *)(v6 - 60);
    int v14 = *(_DWORD *)(v6 - 44);
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(v6 - 64);
    *(_OWORD *)(v4 + 4) = v13;
    *(_DWORD *)(v4 + 20) = v14;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_100209B40(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209C9C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 0xCuLL)
  {
    __chkstk_darwin(a1);
    sub_10021328C((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100209DBCLL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_100209DCC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0xB8uLL)
  {
    __chkstk_darwin(a1);
    sub_10020DD58((uint64_t)&v18, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100209F3CLL);
    }

    __int128 v13 = *(_OWORD *)(v6 - 80);
    *(_OWORD *)(v4 + 128) = *(_OWORD *)(v6 - 96);
    *(_OWORD *)(v4 + 144) = v13;
    *(_OWORD *)(v4 + 160) = *(_OWORD *)(v6 - 64);
    *(void *)(v4 + 176) = *(void *)(v6 - 48);
    __int128 v14 = *(_OWORD *)(v6 - 144);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v6 - 160);
    *(_OWORD *)(v4 + 80) = v14;
    __int128 v15 = *(_OWORD *)(v6 - 112);
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(v6 - 128);
    *(_OWORD *)(v4 + 112) = v15;
    __int128 v16 = *(_OWORD *)(v6 - 208);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v6 - 224);
    *(_OWORD *)(v4 + 16) = v16;
    __int128 v17 = *(_OWORD *)(v6 - 176);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 - 192);
    *(_OWORD *)(v4 + 48) = v17;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_100209F4C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100209F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x28uLL)
  {
    __chkstk_darwin(a1);
    sub_10020DFB8((uint64_t)&v16, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020A0A4LL);
    }

    int v13 = *(_DWORD *)(v6 - 44);
    __int128 v14 = *(_OWORD *)(v6 - 76);
    __int128 v15 = *(_OWORD *)(v6 - 60);
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(v6 - 80);
    *(_OWORD *)(v4 + 4) = v14;
    *(_OWORD *)(v4 + 20) = v15;
    *(_DWORD *)(v4 + 36) = v13;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020A0B4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020A0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 8uLL)
  {
    __chkstk_darwin(a1);
    sub_100214070((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020A1D4LL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020A1E4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020A340(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020A38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x44uLL)
  {
    __chkstk_darwin(a1);
    sub_10020E424((uint64_t)&v19, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020A4A8LL);
    }

    int v13 = *(_DWORD *)(v6 - 92);
    uint64_t v14 = *(void *)(v6 - 100);
    __int128 v15 = *(_OWORD *)(v6 - 88);
    __int128 v16 = *(_OWORD *)(v6 - 72);
    __int128 v17 = *(_OWORD *)(v6 - 56);
    int v18 = *(_DWORD *)(v6 - 104);
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(v6 - 108);
    *(_DWORD *)(v4 + 4) = v18;
    *(void *)(v4 + 8) = v14;
    *(_DWORD *)(v4 + 16) = v13;
    *(_OWORD *)(v4 + 20) = v15;
    *(_OWORD *)(v4 + 36) = v16;
    *(_OWORD *)(v4 + 52) = v17;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020A4B8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020A4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 0x10uLL)
  {
    __chkstk_darwin(a1);
    sub_100212E38((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020A5DCLL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020A5EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020A630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 2uLL)
  {
    __chkstk_darwin(a1);
    sub_100213E50((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020A70CLL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020A71C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020A768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0xD0uLL)
  {
    __chkstk_darwin(a1);
    sub_10020E67C((uint64_t)&v19, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020A8A4LL);
    }

    __int128 v13 = *(_OWORD *)(v6 - 72);
    v4[10] = *(_OWORD *)(v6 - 88);
    v4[11] = v13;
    v4[12] = *(_OWORD *)(v6 - 56);
    __int128 v14 = *(_OWORD *)(v6 - 136);
    v4[6] = *(_OWORD *)(v6 - 152);
    void v4[7] = v14;
    __int128 v15 = *(_OWORD *)(v6 - 104);
    v4[8] = *(_OWORD *)(v6 - 120);
    v4[9] = v15;
    __int128 v16 = *(_OWORD *)(v6 - 200);
    void v4[2] = *(_OWORD *)(v6 - 216);
    v4[3] = v16;
    __int128 v17 = *(_OWORD *)(v6 - 168);
    v4[4] = *(_OWORD *)(v6 - 184);
    v4[5] = v17;
    __int128 v18 = *(_OWORD *)(v6 - 232);
    *unint64_t v4 = *(_OWORD *)(v6 - 248);
    v4[1] = v18;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020A8B4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020AAC0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020ACCC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020AD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x1CuLL)
  {
    __chkstk_darwin(a1);
    sub_10020ED24((uint64_t)&v15, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020AE1CLL);
    }

    __int128 v13 = *(_OWORD *)(v6 - 64);
    uint64_t v14 = *(void *)(v6 - 48);
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(v6 - 68);
    *(_OWORD *)(v4 + 4) = v13;
    *(void *)(v4 + 20) = v14;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020AE2C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020AE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x48uLL)
  {
    __chkstk_darwin(a1);
    sub_10020EF64((uint64_t)&v21, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020AF9CLL);
    }

    __int16 v13 = *(_WORD *)(v6 - 80);
    char v14 = *(_BYTE *)(v6 - 78);
    int v15 = *(_DWORD *)(v6 - 52);
    int v16 = *(_DWORD *)(v6 - 48);
    __int16 v17 = *(_WORD *)(v6 - 44);
    __int128 v18 = *(_OWORD *)(v6 - 76);
    uint64_t v19 = *(void *)(v6 - 60);
    __int128 v20 = *(_OWORD *)(v6 - 96);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v6 - 112);
    *(_OWORD *)(v4 + 16) = v20;
    *(_WORD *)(v4 + 32) = v13;
    *(_BYTE *)(v4 + 34) = v14;
    *(_OWORD *)(v4 + 36) = v18;
    *(void *)(v4 + 52) = v19;
    *(_DWORD *)(v4 + 60) = v15;
    *(_DWORD *)(v4 + 64) = v16;
    *(_WORD *)(v4 + 68) = v17;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020AFAC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020B108(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10020B14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 0xAuLL)
  {
    __chkstk_darwin(a1);
    sub_100212BFC((uint64_t)&v14, v9, v10);
    *(void *)(v4 - 40) = v11;
    *(_WORD *)(v4 - 32) = v12;
    if (v3)
    {
      swift_willThrow(v11);
      __break(1u);
      JUMPOUT(0x10020B250LL);
    }

    int v13 = *(_DWORD *)(v4 - 34);
    *(_WORD *)(v4 - 40) = v11;
    *(_DWORD *)(v4 - 38) = v11 >> 16;
    *(_DWORD *)(v4 - 34) = v13;
    return *(void *)(v4 - 40);
  }

  else
  {
    unint64_t v5 = sub_1000033FC();
    uint64_t v6 = swift_allocError(&type metadata for WiFiError, v5, 0LL, 0LL);
    *(void *)uint64_t v7 = 0LL;
    *(void *)(v7 + 8) = 0LL;
    *(_BYTE *)(v7 + 16) = 2;
    return swift_willThrow(v6);
  }

void sub_10020B260(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020B2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x20uLL)
  {
    __chkstk_darwin(a1);
    sub_10020F3E8((uint64_t)&v16, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020B3B8LL);
    }

    char v13 = *(_BYTE *)(v6 - 64);
    __int16 v14 = *(_WORD *)(v6 - 52);
    uint64_t v15 = *(void *)(v6 - 60);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v6 - 80);
    *(_BYTE *)(v4 + 16) = v13;
    *(void *)(v4 + 20) = v15;
    *(_WORD *)(v4 + 28) = v14;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020B3C8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020B414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x14uLL)
  {
    __chkstk_darwin(a1);
    sub_10020F630((uint64_t)&v16, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020B520LL);
    }

    __int16 v13 = *(_WORD *)(v6 - 44);
    uint64_t v14 = *(void *)(v6 - 56);
    int v15 = *(_DWORD *)(v6 - 48);
    *(_WORD *)uint64_t v4 = *(_WORD *)(v6 - 60);
    *(void *)(v4 + 4) = v14;
    *(_DWORD *)(v4 + 12) = v15;
    *(_WORD *)(v4 + 16) = v13;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020B530(uint64_t a1, uint64_t a2)
{
}

void sub_10020B578(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020B5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x14uLL)
  {
    __chkstk_darwin(a1);
    sub_10020F878((uint64_t)&v14, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020B6C0LL);
    }

    int v13 = *(_DWORD *)(v6 - 48);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v6 - 64);
    *(_DWORD *)(v4 + 16) = v13;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020B6D0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020B71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x1CuLL)
  {
    __chkstk_darwin(a1);
    sub_10020FAB0((uint64_t)&v16, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020B828LL);
    }

    int v13 = *(_DWORD *)(v6 - 64);
    __int16 v14 = *(_WORD *)(v6 - 44);
    __int128 v15 = *(_OWORD *)(v6 - 60);
    *(_WORD *)uint64_t v4 = *(_WORD *)(v6 - 68);
    *(_DWORD *)(v4 + 4) = v13;
    *(_OWORD *)(v4 + 8) = v15;
    *(_WORD *)(v4 + 24) = v14;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020B838(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020BA44(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020BA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x10uLL)
  {
    __chkstk_darwin(a1);
    sub_10020FF1C((uint64_t)&v15, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020BB8CLL);
    }

    int v14 = *(_DWORD *)(v6 - 48);
    int v13 = *(_DWORD *)(v6 - 44);
    *(void *)uint64_t v4 = *(void *)(v6 - 56);
    *(_DWORD *)(v4 + 8) = v14;
    *(_DWORD *)(v4 + 12) = v13;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020BB9C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020BBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x16uLL)
  {
    __chkstk_darwin(a1);
    sub_100210154((uint64_t)&v15, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020BCECLL);
    }

    __int16 v13 = *(_WORD *)(v6 - 44);
    int v14 = *(_DWORD *)(v6 - 48);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v6 - 64);
    *(_DWORD *)(v4 + 16) = v14;
    *(_WORD *)(v4 + 20) = v13;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020BCFC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020BD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x12uLL)
  {
    __chkstk_darwin(a1);
    sub_100210394((uint64_t)&v17, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020BE5CLL);
    }

    __int16 v13 = *(_WORD *)(v6 - 52);
    char v14 = *(_BYTE *)(v6 - 50);
    __int16 v15 = *(_WORD *)(v6 - 48);
    int v16 = *(_DWORD *)(v6 - 56);
    *(void *)uint64_t v4 = *(void *)(v6 - 64);
    *(_DWORD *)(v4 + 8) = v16;
    *(_WORD *)(v4 + 12) = v13;
    *(_BYTE *)(v4 + 14) = v14;
    *(_WORD *)(v4 + 16) = v15;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020BE6C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020BEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x1CuLL)
  {
    __chkstk_darwin(a1);
    sub_1002105E4((uint64_t)&v17, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020BFCCLL);
    }

    char v13 = *(_BYTE *)(v6 - 64);
    int v14 = *(_DWORD *)(v6 - 52);
    __int16 v15 = *(_WORD *)(v6 - 48);
    uint64_t v16 = *(void *)(v6 - 60);
    *(void *)uint64_t v4 = *(void *)(v6 - 72);
    *(_BYTE *)(v4 + 8) = v13;
    *(void *)(v4 + 12) = v16;
    *(_DWORD *)(v4 + 20) = v14;
    *(_WORD *)(v4 + 24) = v15;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020BFDC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020C028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x1CuLL)
  {
    __chkstk_darwin(a1);
    sub_100210834((uint64_t)&v17, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020C13CLL);
    }

    char v13 = *(_BYTE *)(v6 - 64);
    int v14 = *(_DWORD *)(v6 - 52);
    __int16 v15 = *(_WORD *)(v6 - 48);
    uint64_t v16 = *(void *)(v6 - 60);
    *(void *)uint64_t v4 = *(void *)(v6 - 72);
    *(_BYTE *)(v4 + 8) = v13;
    *(void *)(v4 + 12) = v16;
    *(_DWORD *)(v4 + 20) = v14;
    *(_WORD *)(v4 + 24) = v15;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020C14C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020C190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 0xCuLL)
  {
    __chkstk_darwin(a1);
    sub_1002129D8((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020C26CLL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020C27C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10020C2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 6uLL)
  {
    __chkstk_darwin(a1);
    sub_1002134B0((uint64_t)&v11, v8, v9);
    if (v3)
    {
      swift_willThrow(v10);
      __break(1u);
      JUMPOUT(0x10020C3A0LL);
    }

    return v10 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    return swift_willThrow(v5);
  }

void sub_10020C3B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020C3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 8uLL)
  {
    __chkstk_darwin(a1);
    sub_100213A10((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020C4D0LL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020C4E0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020C524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 2uLL)
  {
    __chkstk_darwin(a1);
    sub_1002137F0((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020C600LL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020C610(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020C65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 0x18uLL)
  {
    __chkstk_darwin(a1);
    sub_100210A84((uint64_t)&v16, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020C758LL);
    }

    uint64_t v13 = *(void *)(v6 - 56);
    int v14 = *(_DWORD *)(v6 - 48);
    int v15 = *(_DWORD *)(v6 - 44);
    *(void *)uint64_t v4 = *(void *)(v6 - 64);
    *(void *)(v4 + 8) = v13;
    *(_DWORD *)(v4 + 16) = v14;
    *(_DWORD *)(v4 + 20) = v15;
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020C768(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020C7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 0x10uLL)
  {
    __chkstk_darwin(a1);
    sub_100213C30((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020C888LL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020C898(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020C8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) >= 8uLL)
  {
    __chkstk_darwin(a1);
    sub_100210CC4((uint64_t)&v13, 1LL, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10020C9D8LL);
    }

    *unint64_t v4 = *(void *)(v6 - 48);
  }

  else
  {
    unint64_t v7 = sub_1000033FC();
    uint64_t v8 = swift_allocError(&type metadata for WiFiError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }

void sub_10020C9E8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020CA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 4uLL)
  {
    __chkstk_darwin(a1);
    sub_100214290((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020CB08LL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

void sub_10020CB18(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_10020CB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (BYTE6(a3) >= 4uLL)
  {
    __chkstk_darwin(a1);
    sub_1002144B0((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10020CC38LL);
    }
  }

  else
  {
    unint64_t v4 = sub_1000033FC();
    uint64_t v5 = swift_allocError(&type metadata for WiFiError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + 8) = 0LL;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }

id WiFiAddress.apiAddress.getter(uint64_t a1)
{
  return [objc_allocWithZone(WiFiMACAddress) initWithAddress:a1 & 0xFFFFFFFFFFFFLL];
}

uint64_t WiFiAddress.description.getter(unint64_t a1)
{
  char v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100405140);
  uint64_t v8 = swift_allocObject(v7, 272LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_10033A980;
  *(void *)(v8 + 56) = &type metadata for UInt8;
  *(void *)(v8 + 64) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 32) = v1;
  *(void *)(v8 + 96) = &type metadata for UInt8;
  *(void *)(v8 + 104) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 72) = v2;
  *(void *)(v8 + 136) = &type metadata for UInt8;
  *(void *)(v8 + 144) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 112) = v3;
  *(void *)(v8 + 176) = &type metadata for UInt8;
  *(void *)(v8 + 184) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 152) = v4;
  *(void *)(v8 + 216) = &type metadata for UInt8;
  *(void *)(v8 + 224) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 192) = v5;
  *(void *)(v8 + 256) = &type metadata for UInt8;
  *(void *)(v8 + 264) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 232) = v6;
  return String.init(format:_:)(0xD00000000000001DLL, 0x8000000100367A20LL, v8);
}

void *WiFiAddress.zero.unsafeMutableAddressor()
{
  return &static WiFiAddress.zero;
}

void __swiftcall WiFiAddress.init(_:_:_:_:_:_:)( CoreP2P::WiFiAddress *__return_ptr retstr, Swift::UInt8 a2, Swift::UInt8 a3, Swift::UInt8 a4, Swift::UInt8 a5, Swift::UInt8 a6, Swift::UInt8 a7)
{
}

void sub_10020CD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020CDD4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v31 = v27;
  __int16 v32 = v28;
  char v33 = BYTE2(v28);
  char v34 = BYTE3(v28);
  char v35 = BYTE4(v28);
  char v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020CE44LL);
  }

  unint64_t result = memcpy(v24, &v31, v26);
  int v30 = v24[5];
  *(_DWORD *)uint64_t v25 = *v24;
  *(_OWORD *)(v25 + 4)  = *(_OWORD *)(v24 + 1);
  *(_DWORD *)(v25 + 20)  = v30;
  *(_OWORD *)(v25 + 24)  = *(_OWORD *)(v24 + 6);
  *(void *)(v25 + 40)  = *((void *)v24 + 5);
  return result;
}

void sub_10020CFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020D024( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v27;
  __int16 v31 = v28;
  char v32 = BYTE2(v28);
  char v33 = BYTE3(v28);
  char v34 = BYTE4(v28);
  char v35 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020D094LL);
  }

  unint64_t result = memcpy(v24, &v30, v26);
  *uint64_t v25 = *v24;
  return result;
}

void sub_10020D1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020D254( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v32 = v27;
  __int16 v33 = v28;
  char v34 = BYTE2(v28);
  char v35 = BYTE3(v28);
  char v36 = BYTE4(v28);
  char v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020D2C4LL);
  }

  unint64_t result = memcpy(v24, &v32, v26);
  uint64_t v30 = v24[7];
  int v31 = *((_DWORD *)v24 + 16);
  *(void *)uint64_t v25 = *v24;
  *(_DWORD *)(v25 + 8)  = *((_DWORD *)v24 + 2);
  *(_OWORD *)(v25 + 12)  = *(_OWORD *)((char *)v24 + 12);
  *(_OWORD *)(v25 + 28)  = *(_OWORD *)((char *)v24 + 28);
  *(void *)(v25 + 44)  = *(void *)((char *)v24 + 44);
  *(void *)(v25 + 56)  = v30;
  *(_DWORD *)(v25 + 64)  = v31;
  *(_DWORD *)(v25 + 68)  = *((_DWORD *)v24 + 17);
  return result;
}

void sub_10020D458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020D4B4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v28 = v25;
  __int16 v29 = v26;
  char v30 = BYTE2(v26);
  char v31 = BYTE3(v26);
  char v32 = BYTE4(v26);
  char v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10020D524LL);
  }

  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x193uLL);
}

void sub_10020D67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020D6E0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v38 = v27;
  __int16 v39 = v28;
  char v40 = BYTE2(v28);
  char v41 = BYTE3(v28);
  char v42 = BYTE4(v28);
  char v43 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020D750LL);
  }

  unint64_t result = memcpy(v24, &v38, v26);
  __int16 v30 = *((_WORD *)v24 + 6);
  int v31 = *((_DWORD *)v24 + 4);
  int v32 = *((_DWORD *)v24 + 21);
  __int128 v33 = *(_OWORD *)((char *)v24 + 20);
  __int128 v34 = *(_OWORD *)((char *)v24 + 36);
  __int128 v35 = *(_OWORD *)((char *)v24 + 52);
  __int128 v36 = *(_OWORD *)((char *)v24 + 68);
  __int128 v37 = *(_OWORD *)(v24 + 11);
  *(void *)uint64_t v25 = *v24;
  *(_DWORD *)(v25 + 8)  = *((_DWORD *)v24 + 2);
  *(_WORD *)(v25 + 12)  = v30;
  *(_DWORD *)(v25 + 16)  = v31;
  *(_OWORD *)(v25 + 20)  = v33;
  *(_OWORD *)(v25 + 36)  = v34;
  *(_OWORD *)(v25 + 52)  = v35;
  *(_OWORD *)(v25 + 68)  = v36;
  *(_DWORD *)(v25 + 84)  = v32;
  *(_OWORD *)(v25 + 88)  = v37;
  return result;
}

void sub_10020D8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020D958( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v27;
  __int16 v31 = v28;
  char v32 = BYTE2(v28);
  char v33 = BYTE3(v28);
  char v34 = BYTE4(v28);
  char v35 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020D9C8LL);
  }

  unint64_t result = memcpy(v24, &v30, v26);
  *(_DWORD *)uint64_t v25 = *v24;
  *(_OWORD *)(v25 + 4)  = *(_OWORD *)(v24 + 1);
  *(_DWORD *)(v25 + 20)  = v24[5];
  return result;
}

void sub_10020DB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020DB90( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v28 = v25;
  __int16 v29 = v26;
  char v30 = BYTE2(v26);
  char v31 = BYTE3(v26);
  char v32 = BYTE4(v26);
  char v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10020DC00LL);
  }

  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x1CCuLL);
}

void sub_10020DD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020DDBC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v35 = v27;
  __int16 v36 = v28;
  char v37 = BYTE2(v28);
  char v38 = BYTE3(v28);
  char v39 = BYTE4(v28);
  char v40 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020DE2CLL);
  }

  unint64_t result = memcpy(v24, &v35, v26);
  __int128 v30 = v24[9];
  *(_OWORD *)(v25 + 128)  = v24[8];
  *(_OWORD *)(v25 + 144)  = v30;
  *(_OWORD *)(v25 + 160)  = v24[10];
  *(void *)(v25 + 176)  = *((void *)v24 + 22);
  __int128 v31 = v24[5];
  *(_OWORD *)(v25 + 64)  = v24[4];
  *(_OWORD *)(v25 + 80)  = v31;
  __int128 v32 = v24[7];
  *(_OWORD *)(v25 + 96)  = v24[6];
  *(_OWORD *)(v25 + 112)  = v32;
  __int128 v33 = v24[1];
  *(_OWORD *)uint64_t v25 = *v24;
  *(_OWORD *)(v25 + 16)  = v33;
  __int128 v34 = v24[3];
  *(_OWORD *)(v25 + 32)  = v24[2];
  *(_OWORD *)(v25 + 48)  = v34;
  return result;
}

void sub_10020DFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020E01C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v31 = v27;
  __int16 v32 = v28;
  char v33 = BYTE2(v28);
  char v34 = BYTE3(v28);
  char v35 = BYTE4(v28);
  char v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020E08CLL);
  }

  unint64_t result = memcpy(v24, &v31, v26);
  int v30 = v24[9];
  *(_DWORD *)uint64_t v25 = *v24;
  *(_OWORD *)(v25 + 4)  = *(_OWORD *)(v24 + 1);
  *(_OWORD *)(v25 + 20)  = *(_OWORD *)(v24 + 5);
  *(_DWORD *)(v25 + 36)  = v30;
  return result;
}

void sub_10020E200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020E25C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v28 = v25;
  __int16 v29 = v26;
  char v30 = BYTE2(v26);
  char v31 = BYTE3(v26);
  char v32 = BYTE4(v26);
  char v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10020E2CCLL);
  }

  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x108uLL);
}

void sub_10020E424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020E488( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v36 = v27;
  __int16 v37 = v28;
  char v38 = BYTE2(v28);
  char v39 = BYTE3(v28);
  char v40 = BYTE4(v28);
  char v41 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020E4F8LL);
  }

  unint64_t result = memcpy(v24, &v36, v26);
  int v30 = v24[4];
  uint64_t v31 = *((void *)v24 + 1);
  __int128 v32 = *(_OWORD *)(v24 + 5);
  __int128 v33 = *(_OWORD *)(v24 + 9);
  __int128 v34 = *(_OWORD *)(v24 + 13);
  int v35 = v24[1];
  *(_DWORD *)uint64_t v25 = *v24;
  *(_DWORD *)(v25 + 4)  = v35;
  *(void *)(v25 + 8)  = v31;
  *(_DWORD *)(v25 + 16)  = v30;
  *(_OWORD *)(v25 + 20)  = v32;
  *(_OWORD *)(v25 + 36)  = v33;
  *(_OWORD *)(v25 + 52)  = v34;
  return result;
}

void sub_10020E67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020E6E0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v36 = v27;
  __int16 v37 = v28;
  char v38 = BYTE2(v28);
  char v39 = BYTE3(v28);
  char v40 = BYTE4(v28);
  char v41 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020E750LL);
  }

  unint64_t result = memcpy(v24, &v36, v26);
  __int128 v30 = v24[11];
  v25[10]  = v24[10];
  v25[11]  = v30;
  v25[12]  = v24[12];
  __int128 v31 = v24[7];
  v25[6]  = v24[6];
  v25[7]  = v31;
  __int128 v32 = v24[9];
  v25[8]  = v24[8];
  v25[9]  = v32;
  __int128 v33 = v24[3];
  void v25[2] = v24[2];
  void v25[3] = v33;
  __int128 v34 = v24[5];
  v25[4]  = v24[4];
  v25[5]  = v34;
  __int128 v35 = v24[1];
  *uint64_t v25 = *v24;
  v25[1]  = v35;
  return result;
}

void sub_10020E8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020E938( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v28 = v25;
  __int16 v29 = v26;
  char v30 = BYTE2(v26);
  char v31 = BYTE3(v26);
  char v32 = BYTE4(v26);
  char v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10020E9A8LL);
  }

  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x650uLL);
}

void sub_10020EB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020EB5C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v28 = v25;
  __int16 v29 = v26;
  char v30 = BYTE2(v26);
  char v31 = BYTE3(v26);
  char v32 = BYTE4(v26);
  char v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10020EBCCLL);
  }

  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0xF20uLL);
}

void sub_10020ED24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020ED88( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v27;
  __int16 v31 = v28;
  char v32 = BYTE2(v28);
  char v33 = BYTE3(v28);
  char v34 = BYTE4(v28);
  char v35 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020EDF8LL);
  }

  unint64_t result = memcpy(v24, &v30, v26);
  *(_DWORD *)uint64_t v25 = *v24;
  *(_OWORD *)(v25 + 4)  = *(_OWORD *)(v24 + 1);
  *(void *)(v25 + 20)  = *(void *)(v24 + 5);
  return result;
}

void sub_10020EF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020EFC8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v36 = v27;
  __int16 v37 = v28;
  char v38 = BYTE2(v28);
  char v39 = BYTE3(v28);
  char v40 = BYTE4(v28);
  char v41 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020F038LL);
  }

  unint64_t result = memcpy(v24, &v36, v26);
  __int16 v30 = *((_WORD *)v24 + 16);
  char v31 = *((_BYTE *)v24 + 34);
  int v32 = *((_DWORD *)v24 + 15);
  int v33 = *((_DWORD *)v24 + 16);
  __int16 v34 = *((_WORD *)v24 + 34);
  __int128 v35 = v24[1];
  *(_OWORD *)uint64_t v25 = *v24;
  *(_OWORD *)(v25 + 16)  = v35;
  *(_WORD *)(v25 + 32)  = v30;
  *(_BYTE *)(v25 + 34)  = v31;
  *(_OWORD *)(v25 + 36)  = *(_OWORD *)((char *)v24 + 36);
  *(void *)(v25 + 52)  = *(void *)((char *)v24 + 52);
  *(_DWORD *)(v25 + 60)  = v32;
  *(_DWORD *)(v25 + 64)  = v33;
  *(_WORD *)(v25 + 68)  = v34;
  return result;
}

void sub_10020F1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020F220( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v28 = v25;
  __int16 v29 = v26;
  char v30 = BYTE2(v26);
  char v31 = BYTE3(v26);
  char v32 = BYTE4(v26);
  char v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10020F290LL);
  }

  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x3E1uLL);
}

void sub_10020F3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020F44C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v32 = v27;
  __int16 v33 = v28;
  char v34 = BYTE2(v28);
  char v35 = BYTE3(v28);
  char v36 = BYTE4(v28);
  char v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020F4BCLL);
  }

  unint64_t result = memcpy(v24, &v32, v26);
  char v30 = *((_BYTE *)v24 + 16);
  __int16 v31 = *((_WORD *)v24 + 14);
  *(_OWORD *)uint64_t v25 = *v24;
  *(_BYTE *)(v25 + 16)  = v30;
  *(void *)(v25 + 20)  = *(void *)((char *)v24 + 20);
  *(_WORD *)(v25 + 28)  = v31;
  return result;
}

void sub_10020F630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020F694( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v31 = v27;
  __int16 v32 = v28;
  char v33 = BYTE2(v28);
  char v34 = BYTE3(v28);
  char v35 = BYTE4(v28);
  char v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020F704LL);
  }

  unint64_t result = memcpy(v24, &v31, v26);
  __int16 v30 = v24[8];
  *(_WORD *)uint64_t v25 = *v24;
  *(void *)(v25 + 4)  = *(void *)(v24 + 2);
  *(_DWORD *)(v25 + 12)  = *((_DWORD *)v24 + 3);
  *(_WORD *)(v25 + 16)  = v30;
  return result;
}

void sub_10020F878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020F8DC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v31 = v27;
  __int16 v32 = v28;
  char v33 = BYTE2(v28);
  char v34 = BYTE3(v28);
  char v35 = BYTE4(v28);
  char v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020F94CLL);
  }

  unint64_t result = memcpy(v24, &v31, v26);
  int v30 = v24[4];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v24;
  *(_DWORD *)(v25 + 16)  = v30;
  return result;
}

void sub_10020FAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020FB14( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v32 = v27;
  __int16 v33 = v28;
  char v34 = BYTE2(v28);
  char v35 = BYTE3(v28);
  char v36 = BYTE4(v28);
  char v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020FB84LL);
  }

  unint64_t result = memcpy(v24, &v32, v26);
  int v30 = *((_DWORD *)v24 + 1);
  __int16 v31 = v24[12];
  *(_WORD *)uint64_t v25 = *v24;
  *(_DWORD *)(v25 + 4)  = v30;
  *(_OWORD *)(v25 + 8)  = *(_OWORD *)(v24 + 4);
  *(_WORD *)(v25 + 24)  = v31;
  return result;
}

void sub_10020FCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020FD54( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v28 = v25;
  __int16 v29 = v26;
  char v30 = BYTE2(v26);
  char v31 = BYTE3(v26);
  char v32 = BYTE4(v26);
  char v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10020FDC4LL);
  }

  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x820uLL);
}

void sub_10020FF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_10020FF80( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v31 = v27;
  __int16 v32 = v28;
  char v33 = BYTE2(v28);
  char v34 = BYTE3(v28);
  char v35 = BYTE4(v28);
  char v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10020FFF0LL);
  }

  unint64_t result = memcpy(v24, &v31, v26);
  *(void *)uint64_t v25 = *(void *)v24;
  int v30 = v24[3];
  *(_DWORD *)(v25 + 8)  = v24[2];
  *(_DWORD *)(v25 + 12)  = v30;
  return result;
}

void sub_100210154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_1002101B8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v31 = v27;
  __int16 v32 = v28;
  char v33 = BYTE2(v28);
  char v34 = BYTE3(v28);
  char v35 = BYTE4(v28);
  char v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100210228LL);
  }

  unint64_t result = memcpy(v24, &v31, v26);
  __int16 v30 = *((_WORD *)v24 + 10);
  *(_OWORD *)uint64_t v25 = *v24;
  *(_DWORD *)(v25 + 16)  = *((_DWORD *)v24 + 4);
  *(_WORD *)(v25 + 20)  = v30;
  return result;
}

void sub_100210394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_1002103F8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v33 = v27;
  __int16 v34 = v28;
  char v35 = BYTE2(v28);
  char v36 = BYTE3(v28);
  char v37 = BYTE4(v28);
  char v38 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100210468LL);
  }

  unint64_t result = memcpy(v24, &v33, v26);
  __int16 v30 = *((_WORD *)v24 + 6);
  char v31 = *((_BYTE *)v24 + 14);
  __int16 v32 = *((_WORD *)v24 + 8);
  *(void *)uint64_t v25 = *v24;
  *(_DWORD *)(v25 + 8)  = *((_DWORD *)v24 + 2);
  *(_WORD *)(v25 + 12)  = v30;
  *(_BYTE *)(v25 + 14)  = v31;
  *(_WORD *)(v25 + 16)  = v32;
  return result;
}

void sub_1002105E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_100210648( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v33 = v27;
  __int16 v34 = v28;
  char v35 = BYTE2(v28);
  char v36 = BYTE3(v28);
  char v37 = BYTE4(v28);
  char v38 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x1002106B8LL);
  }

  unint64_t result = memcpy(v24, &v33, v26);
  char v30 = *((_BYTE *)v24 + 8);
  int v31 = *((_DWORD *)v24 + 5);
  __int16 v32 = *((_WORD *)v24 + 12);
  *(void *)uint64_t v25 = *v24;
  *(_BYTE *)(v25 + 8)  = v30;
  *(void *)(v25 + 12)  = *(void *)((char *)v24 + 12);
  *(_DWORD *)(v25 + 20)  = v31;
  *(_WORD *)(v25 + 24)  = v32;
  return result;
}

void sub_100210834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_100210898( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v33 = v27;
  __int16 v34 = v28;
  char v35 = BYTE2(v28);
  char v36 = BYTE3(v28);
  char v37 = BYTE4(v28);
  char v38 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100210908LL);
  }

  unint64_t result = memcpy(v24, &v33, v26);
  char v30 = *((_BYTE *)v24 + 8);
  int v31 = *((_DWORD *)v24 + 5);
  __int16 v32 = *((_WORD *)v24 + 12);
  *(void *)uint64_t v25 = *v24;
  *(_BYTE *)(v25 + 8)  = v30;
  *(void *)(v25 + 12)  = *(void *)((char *)v24 + 12);
  *(_DWORD *)(v25 + 20)  = v31;
  *(_WORD *)(v25 + 24)  = v32;
  return result;
}

void sub_100210A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_100210AE8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v32 = v27;
  __int16 v33 = v28;
  char v34 = BYTE2(v28);
  char v35 = BYTE3(v28);
  char v36 = BYTE4(v28);
  char v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100210B58LL);
  }

  unint64_t result = memcpy(v24, &v32, v26);
  int v30 = *((_DWORD *)v24 + 4);
  uint64_t v31 = v24[1];
  *(void *)uint64_t v25 = *v24;
  *(void *)(v25 + 8)  = v31;
  *(_DWORD *)(v25 + 16)  = v30;
  *(_DWORD *)(v25 + 20)  = *((_DWORD *)v24 + 5);
  return result;
}

void sub_100210CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void *sub_100210D28( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v27;
  __int16 v31 = v28;
  char v32 = BYTE2(v28);
  char v33 = BYTE3(v28);
  char v34 = BYTE4(v28);
  char v35 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100210D98LL);
  }

  unint64_t result = memcpy(v24, &v30, v26);
  *uint64_t v25 = *v24;
  return result;
}

uint64_t sub_100210EF4()
{
  return WiFiAddress.description.getter(*v0 | ((unint64_t)*(unsigned int *)(v0 + 1) << 16));
}

uint64_t WiFiAddress.customMirror.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = a1;
  v19[1]  = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v12);
  int v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[0]  = v2;
  v21[1]  = v3;
  v21[2]  = v4;
  void v21[3] = v5;
  v21[4]  = v6;
  v21[5]  = v7;
  __int128 v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for Mirror.AncestorRepresentation.generated(_:),  v8);
  uint64_t v16 = sub_100002274(&qword_100405DC0);
  unint64_t v17 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)( v21,  &v20,  v14,  v11,  &type metadata for WiFiAddress,  v16,  v17);
}

uint64_t sub_100211070(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LOWORD(v8)  = *((_WORD *)v1 + 2);
  int v15 = *v1;
  __int16 v16 = v8;
  int v14 = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  unint64_t v12 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v9, v6, a1, v11, v12);
}

BOOL static WiFiAddress.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOBYTE(v5)  = BYTE4(a1);
  HIBYTE(v5)  = BYTE5(a1);
  LOBYTE(v4)  = BYTE4(a2);
  HIBYTE(v4)  = BYTE5(a2);
  return (_DWORD)a1 != (_DWORD)a2 || v5 != v4;
}

uint64_t static WiFiAddress.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (unsigned int v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    unsigned int v4 = 0;
  }

  else if (v2 < v3)
  {
    unsigned int v4 = -1;
  }

  else
  {
    unsigned int v4 = 1;
  }

  return v4 >> 31;
}

BOOL static WiFiAddress.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (unsigned int v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    int v4 = 0;
  }

  else if (v2 < v3)
  {
    int v4 = -1;
  }

  else
  {
    int v4 = 1;
  }

  return v4 > 0;
}

BOOL static WiFiAddress.<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (unsigned int v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    int v4 = 0;
  }

  else if (v2 < v3)
  {
    int v4 = -1;
  }

  else
  {
    int v4 = 1;
  }

  return v4 < 1;
}

BOOL static WiFiAddress.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (unsigned int v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    int v4 = 0;
  }

  else if (v2 < v3)
  {
    int v4 = -1;
  }

  else
  {
    int v4 = 1;
  }

  return v4 >= 0;
}

uint64_t sub_1002115F8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (unsigned int v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    unsigned int v4 = 0;
  }

  else if (v2 < v3)
  {
    unsigned int v4 = -1;
  }

  else
  {
    unsigned int v4 = 1;
  }

  return v4 >> 31;
}

BOOL sub_1002116AC(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (unsigned int v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    int v4 = 0;
  }

  else if (v2 < v3)
  {
    int v4 = -1;
  }

  else
  {
    int v4 = 1;
  }

  return v4 < 1;
}

BOOL sub_100211764(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (unsigned int v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    int v4 = 0;
  }

  else if (v2 < v3)
  {
    int v4 = -1;
  }

  else
  {
    int v4 = 1;
  }

  return v4 >= 0;
}

BOOL sub_10021181C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (unsigned int v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    int v4 = 0;
  }

  else if (v2 < v3)
  {
    int v4 = -1;
  }

  else
  {
    int v4 = 1;
  }

  return v4 > 0;
}

uint64_t WiFiAddress.init(from:)(void *a1)
{
  return sub_100212814(a1) & 0xFFFFFFFFFFFFLL;
}

uint64_t WiFiAddress.encode(to:)(void *a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = a2 >> 40;
  sub_100021104(a1, v7);
  dispatch thunk of Encoder.unkeyedContainer()(v20, v7, v8);
  uint64_t v10 = sub_100002274(&qword_1004040A8);
  uint64_t v11 = swift_allocObject(v10, 38LL, 7LL);
  *(_OWORD *)(v11 + 16)  = xmmword_10033A980;
  *(_BYTE *)(v11 + 32)  = v2;
  *(_BYTE *)(v11 + 33)  = v3;
  *(_BYTE *)(v11 + 34)  = v4;
  *(_BYTE *)(v11 + 35)  = v5;
  *(_BYTE *)(v11 + 36)  = v6;
  *(_BYTE *)(v11 + 37)  = v9;
  uint64_t v12 = sub_1000FB08C(v11);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease(v11);
  v19[0]  = v12;
  v19[1]  = v14;
  uint64_t v15 = v21;
  uint64_t v16 = v22;
  sub_1000237C8((uint64_t)v20, v21);
  unint64_t v17 = sub_10005CD78();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v19, &type metadata for Data, v17, v15, v16);
  sub_1000208D8(v12, v14);
  return sub_100002AC4(v20);
}

uint64_t sub_100211A10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100212814(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_BYTE *)(a2 + 2)  = BYTE2(result);
    *(_BYTE *)(a2 + 3)  = BYTE3(result);
    *(_BYTE *)(a2 + 4)  = BYTE4(result);
    *(_BYTE *)(a2 + 5)  = BYTE5(result);
  }

  return result;
}

uint64_t sub_100211A60(void *a1)
{
  return WiFiAddress.encode(to:)(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

  ;
}

  ;
}

Swift::Void __swiftcall WiFiAddress.makeLinkLocal()()
{
  *unint64_t v0 = *v0 & 0xFC | 2;
}

unint64_t static WiFiAddress.random()()
{
  return sub_1002136D8() & 0xFFFFFFFFFFFFLL;
}

id WiFiAddress.apiAddress(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = objc_allocWithZone(&OBJC_CLASS___WiFiMACAddress);
  uint64_t v8 = a5 & 0xFFFFFFFFFFFFLL;
  if (a4 == 1) {
    return [v7 initWithAddress:v8];
  }
  else {
    return objc_msgSend(v7, "initWithAddress:ipv6Address:", v8);
  }
}

id static WiFiMACAddress.randomLinkLocalAddress()()
{
  return [objc_allocWithZone(WiFiMACAddress) initWithAddress:sub_1002136D8() & 0xFFFFFFFFFFFCLL | 2];
}

uint64_t WiFiMACAddress.ipv6LinkLocalAddressString.getter()
{
  id v1 = [v0 ipv6LinkLocalAddress];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  unint64_t v4 = v3;

  sub_100208BAC(v2, v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_1000208D8(v2, v4);
  unint64_t v9 = (char *)swift_slowAlloc(46LL, -1LL);
  v15[0]  = v6;
  v15[1]  = v8;
  inet_ntop(30, v15, v9, 0x2Eu);
  uint64_t v10 = String.init(cString:)(v9);
  uint64_t v12 = v11;
  swift_slowDealloc(v9, -1LL, -1LL);
  v13._countAndFlagsBits  = v10;
  v13._object  = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  return 0LL;
}

uint64_t sub_100211CB0()
{
  uint64_t v0 = sub_1000FB08C((uint64_t)&off_1003D7610);
  unint64_t v2 = v1;
  uint64_t v3 = sub_1000FB08C((uint64_t)&off_1003D7638);
  unint64_t v5 = v4;
  sub_100020AFC(v0, v2);
  sub_100020AFC(v3, v5);
  sub_1000FA9C4(v3, v5);
  sub_1000208D8(v3, v5);
  sub_1000208D8(v3, v5);
  sub_1000208D8(v0, v2);
  uint64_t result = sub_100212134(v0, v2);
  if ((result & 0x1000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    static WiFiAddress.defaultClusterID  = result;
    byte_1004109BA  = BYTE2(result);
    byte_1004109BB  = BYTE3(result);
    byte_1004109BC  = BYTE4(result);
    byte_1004109BD  = BYTE5(result);
  }

  return result;
}

__int16 *WiFiAddress.defaultClusterID.unsafeMutableAddressor()
{
  if (qword_100404460 != -1) {
    swift_once(&qword_100404460, sub_100211CB0);
  }
  return &static WiFiAddress.defaultClusterID;
}

unint64_t static WiFiAddress.defaultClusterID.getter()
{
  if (qword_100404460 != -1) {
    swift_once(&qword_100404460, sub_100211CB0);
  }
  return (unsigned __int16)static WiFiAddress.defaultClusterID | ((unint64_t)*(unsigned int *)&byte_1004109BA << 16);
}

void *WiFiAddress.bonjourMulticastAddress.unsafeMutableAddressor()
{
  return &static WiFiAddress.bonjourMulticastAddress;
}

uint64_t static WiFiAddress.bonjourMulticastAddress.getter()
{
  return 0xFB0000803333LL;
}

void *WiFiAddress.multicastAddress.unsafeMutableAddressor()
{
  return &static WiFiAddress.multicastAddress;
}

uint64_t static WiFiAddress.multicastAddress.getter()
{
  return 0xFFFFFFFFFFFFLL;
}

uint64_t sub_100211E58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16)  = a2;
  *(void *)(result + 24)  = 2 * a2;
  return result;
}

uint64_t sub_100211E68(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_1000FAED4(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + 16)  = 0LL;
  *(void *)(result + 24)  = a2;
  return result;
}

void sub_100211F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100211F70( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100211FE0LL);
  }

  memcpy(v22, &v27, v23);
  return *(void *)v22;
}

uint64_t sub_100212134(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    __asm { BR              X9 }
  }

  return 0x1000000000000LL;
}

void sub_1002123CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100212428( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100212498LL);
  }

  memcpy(v22, &v27, v23);
  return *(unsigned __int16 *)v22 | (v22[2] << 16);
}

void sub_1002125F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100212650( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x1002126C0LL);
  }

  memcpy(v22, &v27, v23);
  return *v22;
}

uint64_t sub_100212814(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100021104(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v20, v3, v4);
  if (!v1)
  {
    uint64_t v5 = v21;
    uint64_t v6 = v22;
    sub_1000237C8((uint64_t)v20, v21);
    uint64_t v7 = UnkeyedDecodingContainer.decodeData(with:)(6LL, v5, v6);
    unint64_t v9 = v8;
    sub_100020AFC(v7, v8);
    uint64_t v10 = sub_100212134(v7, v9);
    if ((v10 & 0x1000000000000LL) == 0)
    {
      uint64_t v11 = v10;
      sub_1000208D8(v7, v9);
      sub_100002AC4(v20);
      sub_100002AC4(a1);
      return v11 & 0xFFFFFFFFFFFFLL;
    }

    uint64_t v13 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v13, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v15 = v14;
    size_t v23 = (char *)v14 + *(int *)(sub_100002274(&qword_100406230) + 48);
    *uint64_t v15 = &type metadata for WiFiAddress;
    uint64_t v17 = a1[3];
    uint64_t v16 = a1[4];
    sub_100021104(a1, v17);
    uint64_t v18 = dispatch thunk of Decoder.codingPath.getter(v17, v16);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v18,  0xD000000000000030LL,  0x8000000100367470LL,  0LL);
    uint64_t v19 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  enum case for DecodingError.valueNotFound(_:),  v13);
    swift_willThrow(v19);
    sub_1000208D8(v7, v9);
    sub_100002AC4(v20);
  }

  return sub_100002AC4(a1);
}

void sub_1002129D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100212A34( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100212AA4LL);
  }

  memcpy(v22, &v27, v23);
  return *(void *)v22;
}

void sub_100212BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100212C58( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  *(void *)char v33 = v28;
  *(_WORD *)&v33[8]  = v29;
  char v34 = BYTE2(v29);
  char v35 = BYTE3(v29);
  char v36 = BYTE4(v29);
  char v37 = BYTE5(v29);
  if (!v26)
  {
    __break(1u);
    JUMPOUT(0x100212CC8LL);
  }

  memcpy(v26, v33, v27);
  unsigned int v30 = *(_DWORD *)(v26 + 1);
  unsigned int v31 = *(_DWORD *)(v26 + 3);
  *(_WORD *)char v33 = *v26;
  *(void *)&v33[2]  = __PAIR64__(v31, v30);
  return *(void *)v33;
}

void sub_100212E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100212E94( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100212F04LL);
  }

  memcpy(v22, &v27, v23);
  return *(void *)v22;
}

void sub_10021306C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_1002130C8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100213138LL);
  }

  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_10021328C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_1002132E8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100213358LL);
  }

  memcpy(v22, &v27, v23);
  return *(void *)v22;
}

void sub_1002134B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

unint64_t sub_10021350C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021357CLL);
  }

  memcpy(v22, &v27, v23);
  return *v22 | ((unint64_t)*(unsigned int *)(v22 + 1) << 16);
}

unint64_t sub_1002136D8()
{
  uint64_t v6 = 0LL;
  swift_stdlib_random(&v6, 8LL);
  uint64_t v0 = v6;
  uint64_t v6 = 0LL;
  swift_stdlib_random(&v6, 8LL);
  unsigned __int8 v1 = v6;
  uint64_t v6 = 0LL;
  swift_stdlib_random(&v6, 8LL);
  unsigned __int8 v2 = v6;
  uint64_t v6 = 0LL;
  swift_stdlib_random(&v6, 8LL);
  int v3 = v6;
  uint64_t v6 = 0LL;
  swift_stdlib_random(&v6, 8LL);
  unsigned __int8 v4 = v6;
  uint64_t v6 = 0LL;
  swift_stdlib_random(&v6, 8LL);
  return v0 & 0xFFFF0000FF0000FFLL | (unsigned __int16)(v1 << 8) | ((unint64_t)v2 << 16) & 0xFFFF0000FFFFFFFFLL | (v3 << 24) | ((unint64_t)v4 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v6 << 40);
}

unint64_t sub_10021379C()
{
  unint64_t result = qword_10040FCF0;
  if (!qword_10040FCF0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for WiFiAddress, &type metadata for WiFiAddress);
    atomic_store(result, (unint64_t *)&qword_10040FCF0);
  }

  return result;
}

ValueMetadata *type metadata accessor for WiFiAddress()
{
  return &type metadata for WiFiAddress;
}

void sub_1002137F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_10021384C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x1002138BCLL);
  }

  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_100213A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100213A6C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100213ADCLL);
  }

  memcpy(v22, &v27, v23);
  return *(void *)v22;
}

void sub_100213C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100213C8C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100213CFCLL);
  }

  memcpy(v22, &v27, v23);
  return *(void *)v22;
}

void sub_100213E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100213EAC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100213F1CLL);
  }

  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_100214070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_1002140CC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021413CLL);
  }

  memcpy(v22, &v27, v23);
  return *(void *)v22;
}

void sub_100214290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_1002142EC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021435CLL);
  }

  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_1002144B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_10021450C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v27 = v24;
  __int16 v28 = v25;
  char v29 = BYTE2(v25);
  char v30 = BYTE3(v25);
  char v31 = BYTE4(v25);
  char v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021457CLL);
  }

  memcpy(v22, &v27, v23);
  return *v22;
}

unint64_t WiFiInterfaceRole.logSubsystem.getter(char a1)
{
  return 0x2020100uLL >> (8 * a1);
}

id WiFiInterfaceRole.queue.getter(unsigned __int8 a1)
{
  if (a1 - 2 >= 2)
  {
    if (a1 == 1)
    {
      if (qword_100404320 != -1) {
        swift_once(&qword_100404320, sub_100174124);
      }
      unsigned __int8 v1 = &static OS_dispatch_queue.awdl;
    }

    else
    {
      if (qword_100404328 != -1) {
        swift_once(&qword_100404328, sub_10017437C);
      }
      unsigned __int8 v1 = &static OS_dispatch_queue.p2p;
    }
  }

  else
  {
    if (qword_100404318 != -1) {
      swift_once(&qword_100404318, sub_1001740DC);
    }
    unsigned __int8 v1 = &static OS_dispatch_queue.nan;
  }

  return (id)*v1;
}

uint64_t WiFiInterfaceRole.bsdNamePrefix.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002147D4
                                                            + 4 * asc_10035C920[a1]))( 28261LL,  0xE200000000000000LL);
}

uint64_t sub_1002147D4()
{
  return 1818523489LL;
}

uint64_t sub_1002147E4()
{
  return 7233902LL;
}

uint64_t sub_1002147F4()
{
  return 29289LL;
}

uint64_t sub_1002147FC()
{
  return 7826540LL;
}

uint64_t WiFiInterface.driver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  *(void *)(v3 + 80),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a1,  v5,  AssociatedTypeWitness);
}

uint64_t WiFiInterface.interfaceName.getter()
{
  unsigned __int8 v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 104LL));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t WiFiInterface.components.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 88),  *(void *)(v3 + 80),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Components);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a1,  v4,  AssociatedTypeWitness);
}

uint64_t WiFiInterface.preferences.getter()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v1,  v2,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Components);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  uint64_t v6 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v5(v6, AssociatedConformanceWitness);
}

uint64_t WiFiInterface.capabilities.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 80LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v1,  v2,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  uint64_t v6 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v5(v6, AssociatedConformanceWitness);
}

uint64_t WiFiInterface.linkState.getter()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_10040FEC0);
  __chkstk_darwin(v1);
  uint64_t v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 120LL);
  swift_beginAccess(v4, v8, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, (uint64_t *)&unk_10040FEC0);
  uint64_t v5 = v3[*(int *)(v1 + 40)];
  sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_10040FEC0);
  return v5;
}

uint64_t MutableDriverProperty.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 40));
}

uint64_t WiFiInterface.linkState.setter(char a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120LL);
  swift_beginAccess(v3, v11, 33LL, 0LL);
  char v4 = a1 & 1;
  char v10 = a1 & 1;
  uint64_t v5 = sub_100002274((uint64_t *)&unk_10040FEC0);
  uint64_t v6 = *(int *)(v5 + 40);
  if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v3 + v6)) & 1) == 0)
  {
    uint64_t v7 = v5;
    (*(void (**)(char *))(v3 + *(int *)(v5 + 48)))(&v10);
    (*(void (**)(char *))(v3 + *(int *)(v7 + 44)))(&v10);
    *(_BYTE *)(v3 + v6)  = v4;
    unint64_t v8 = *(void (**)(char *))(v3 + *(int *)(v7 + 56));
    if (v8) {
      v8(&v10);
    }
    sub_10021B770(0LL, v4);
  }

  return swift_endAccess(v11);
}

uint64_t sub_100214C40(char a1)
{
  uint64_t v2 = v1;
  char v3 = a1 & 1;
  char v10 = a1 & 1;
  BOOL v4 = (a1 & 1) == 0;
  uint64_t result = sub_100002274((uint64_t *)&unk_10040FEC0);
  uint64_t v6 = *(int *)(result + 40);
  if (((v4 ^ *(unsigned __int8 *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = result;
    unint64_t v8 = (void (**)(char *))(v2 + *(int *)(result + 48));
    if (*v8) {
      (*v8)(&v10);
    }
    (*(void (**)(char *))(v2 + *(int *)(v7 + 44)))(&v10);
    *(_BYTE *)(v2 + v6)  = v3;
    unint64_t v9 = *(void (**)(char *))(v2 + *(int *)(v7 + 56));
    if (v9) {
      v9(&v10);
    }
    return sub_10021B770(0LL, v3);
  }

  return result;
}

uint64_t sub_100214D78(unint64_t a1)
{
  uint64_t v2 = v1;
  __int16 v16 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  char v17 = BYTE2(a1);
  char v18 = BYTE3(a1);
  unint64_t v8 = a1 >> 40;
  char v19 = BYTE4(a1);
  char v20 = BYTE5(a1);
  uint64_t result = sub_100002274((uint64_t *)&unk_10040FE60);
  char v10 = (_BYTE *)(v2 + *(int *)(result + 40));
  LOBYTE(v15)  = v7;
  HIBYTE(v15)  = v8;
  if (*(_DWORD *)v10 != (_DWORD)a1 || *((unsigned __int16 *)v10 + 2) != v15)
  {
    uint64_t v12 = result;
    uint64_t v13 = (void (**)(__int16 *))(v2 + *(int *)(result + 48));
    if (*v13) {
      (*v13)(&v16);
    }
    (*(void (**)(__int16 *))(v2 + *(int *)(v12 + 44)))(&v16);
    *char v10 = a1;
    v10[1]  = v4;
    v10[2]  = v5;
    v10[3]  = v6;
    v10[4]  = v7;
    v10[5]  = v8;
    unint64_t v14 = (void (**)(__int16 *))(v2 + *(int *)(v12 + 56));
    if (*v14) {
      (*v14)(&v16);
    }
    return sub_10021BDD8(0LL, a1 & 0xFFFFFFFFFFFFLL);
  }

  return result;
}

uint64_t sub_100214F90(unint64_t a1)
{
  int v9 = a1;
  uint64_t v3 = HIDWORD(a1) & 1;
  char v10 = BYTE4(a1) & 1;
  uint64_t result = sub_100002274(&qword_10040BDC0);
  uint64_t v5 = result;
  uint64_t v6 = v1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v6 + 4) & 1) != 0)
  {
    if ((a1 & 0x100000000LL) != 0) {
      return result;
    }
  }

  else if ((a1 & 0x100000000LL) == 0 && *(_DWORD *)v6 == (_DWORD)a1)
  {
    return result;
  }

  unint64_t v7 = (void (**)(int *))(v1 + *(int *)(result + 48));
  if (*v7) {
    (*v7)(&v9);
  }
  (*(void (**)(int *))(v1 + *(int *)(v5 + 44)))(&v9);
  *(_DWORD *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + 4)  = v3;
  unint64_t v8 = (void (**)(int *))(v1 + *(int *)(v5 + 56));
  if (*v8) {
    (*v8)(&v9);
  }
  return sub_10021C4C8(0LL, a1 | (unint64_t)(v3 << 32));
}

uint64_t MutableDriverProperty.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))(a1);
}

void (*WiFiInterface.linkState.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  v3[3]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 120LL);
  v3[4]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_10040FEC0);
  v3[5]  = v6;
  uint64_t v7 = *(int *)(v6 + 40);
  *((_BYTE *)v3 + 52)  = *(_BYTE *)(v5 + v7);
  *((_DWORD *)v3 + 12)  = v7;
  return sub_1002151C0;
}

void sub_1002151C0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = *(unsigned __int8 *)(*a1 + 52);
  if ((a2 & 1) != 0)
  {
    sub_100214C40(*(_BYTE *)(*a1 + 52));
  }

  else
  {
    uint64_t v4 = *(int *)(v2 + 48);
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v5 = *(void *)(v2 + 32);
    v12[0]  = *(_BYTE *)(*a1 + 52);
    if (v3 != *(unsigned __int8 *)(v6 + v5 + v4))
    {
      uint64_t v7 = *(void *)(v2 + 40);
      unint64_t v8 = (void (**)(_BYTE *))(v6 + v5 + *(int *)(v7 + 48));
      if (*v8)
      {
        (*v8)(v12);
        uint64_t v5 = *(void *)(v2 + 32);
        uint64_t v7 = *(void *)(v2 + 40);
        uint64_t v6 = *(void *)(v2 + 24);
      }

      (*(void (**)(_BYTE *))(v6 + v5 + *(int *)(v7 + 44)))(v12);
      uint64_t v9 = *(void *)(v2 + 40);
      uint64_t v10 = *(void *)(v2 + 24) + *(void *)(v2 + 32);
      *(_BYTE *)(v10 + *(int *)(v2 + 48))  = v3;
      uint64_t v11 = (void (**)(_BYTE *))(v10 + *(int *)(v9 + 56));
      if (*v11) {
        (*v11)(v12);
      }
      sub_10021B770(0LL, v3);
    }
  }

  swift_endAccess(v2);
  free((void *)v2);
}

uint64_t WiFiInterface.$linkState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, (uint64_t *)&unk_10040FEC0);
}

uint64_t WiFiInterface.$linkState.setter(uint64_t a1)
{
  uint64_t v3 = sub_100002274((uint64_t *)&unk_10040FEC0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000226B0(a1, (uint64_t)v5, (uint64_t *)&unk_10040FEC0);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 120LL);
  swift_beginAccess(v6, v9, 33LL, 0LL);
  sub_1000225EC(v6, (uint64_t *)&unk_10040FEC0);
  sub_1000586C0((uint64_t)v5, v6, (uint64_t *)&unk_10040FEC0);
  swift_endAccess(v9);
  return sub_1000225EC(a1, (uint64_t *)&unk_10040FEC0);
}

void (*WiFiInterface.$linkState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[3]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274((uint64_t *)&unk_10040FEC0) - 8) + 64LL);
  v3[4]  = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5]  = v5;
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 120LL);
  swift_beginAccess(v6, v3, 0LL, 0LL);
  sub_1000226B0(v6, (uint64_t)v5, (uint64_t *)&unk_10040FEC0);
  return sub_1002154E8;
}

void sub_1002154E8(uint64_t a1, char a2)
{
}

uint64_t WiFiInterface.macAddress.getter()
{
  uint64_t v1 = sub_100002274((uint64_t *)&unk_10040FE60);
  __chkstk_darwin(v1);
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 128LL);
  swift_beginAccess(v4, v10, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, (uint64_t *)&unk_10040FE60);
  uint64_t v5 = &v3[*(int *)(v1 + 40)];
  uint64_t v6 = *(unsigned int *)(v5 + 2);
  uint64_t v7 = *(unsigned __int16 *)v5;
  sub_1000225EC((uint64_t)v3, (uint64_t *)&unk_10040FE60);
  return v7 | (v6 << 16);
}

uint64_t WiFiInterface.macAddress.setter(uint64_t a1)
{
  return swift_endAccess(v4);
}

void (*WiFiInterface.macAddress.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[3]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 128LL);
  v3[4]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t v6 = v5 + *(int *)(sub_100002274((uint64_t *)&unk_10040FE60) + 40);
  *((_DWORD *)v3 + 10)  = *(_DWORD *)v6;
  *((_WORD *)v3 + 22)  = *(_WORD *)(v6 + 4);
  return sub_100215694;
}

void sub_100215694(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  sub_100214D78(*(unsigned __int16 *)(*(void *)a1 + 40LL) | ((unint64_t)*(unsigned int *)(*(void *)a1 + 42LL) << 16));
  swift_endAccess(v1);
  free(v1);
}

uint64_t WiFiInterface.$macAddress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 128LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, (uint64_t *)&unk_10040FE60);
}

uint64_t WiFiInterface.$macAddress.setter(uint64_t a1)
{
  uint64_t v3 = sub_100002274((uint64_t *)&unk_10040FE60);
  __chkstk_darwin(v3);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000226B0(a1, (uint64_t)v5, (uint64_t *)&unk_10040FE60);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 128LL);
  swift_beginAccess(v6, v9, 33LL, 0LL);
  sub_1000225EC(v6, (uint64_t *)&unk_10040FE60);
  sub_1000586C0((uint64_t)v5, v6, (uint64_t *)&unk_10040FE60);
  swift_endAccess(v9);
  return sub_1000225EC(a1, (uint64_t *)&unk_10040FE60);
}

void (*WiFiInterface.$macAddress.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[3]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274((uint64_t *)&unk_10040FE60) - 8) + 64LL);
  v3[4]  = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5]  = v5;
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 128LL);
  swift_beginAccess(v6, v3, 0LL, 0LL);
  sub_1000226B0(v6, (uint64_t)v5, (uint64_t *)&unk_10040FE60);
  return sub_1002158A8;
}

void sub_1002158A8(uint64_t a1, char a2)
{
}

void sub_1002158BC(uint64_t a1, char a2, void (*a3)(void *), uint64_t *a4)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v7 = *(void **)(*(void *)a1 + 40LL);
  if ((a2 & 1) != 0)
  {
    sub_1000226B0(*(void *)(*(void *)a1 + 40LL), (uint64_t)v6, a4);
    a3(v6);
    sub_1000225EC((uint64_t)v7, a4);
  }

  else
  {
    a3(*(void **)(*(void *)a1 + 40LL));
  }

  free(v7);
  free(v6);
  free(v5);
}

unint64_t WiFiInterface.ipv4Address.getter()
{
  uint64_t v1 = sub_100002274(&qword_10040BDC0);
  __chkstk_darwin(v1);
  uint64_t v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 136LL);
  swift_beginAccess(v4, v9, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, &qword_10040BDC0);
  uint64_t v5 = &v3[*(int *)(v1 + 40)];
  uint64_t v6 = *(unsigned int *)v5;
  LOBYTE(v1)  = v5[4];
  sub_1000225EC((uint64_t)v3, &qword_10040BDC0);
  return v6 | ((unint64_t)v1 << 32);
}

uint64_t WiFiInterface.ipv4Address.setter(unint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 136LL);
  swift_beginAccess(v3, v11, 33LL, 0LL);
  int v9 = a1;
  char v10 = BYTE4(a1) & 1;
  uint64_t v4 = sub_100002274(&qword_10040BDC0);
  uint64_t v5 = v4;
  uint64_t v6 = v3 + *(int *)(v4 + 40);
  if ((*(_BYTE *)(v6 + 4) & 1) != 0)
  {
    if ((a1 & 0x100000000LL) != 0) {
      return swift_endAccess(v11);
    }
  }

  else if ((a1 & 0x100000000LL) == 0 && *(_DWORD *)v6 == (_DWORD)a1)
  {
    return swift_endAccess(v11);
  }

  (*(void (**)(int *))(v3 + *(int *)(v4 + 48)))(&v9);
  (*(void (**)(int *))(v3 + *(int *)(v5 + 44)))(&v9);
  *(_DWORD *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + 4)  = BYTE4(a1) & 1;
  uint64_t v7 = (void (**)(int *))(v3 + *(int *)(v5 + 56));
  if (*v7) {
    (*v7)(&v9);
  }
  sub_10021C4C8(0LL, a1 | ((HIDWORD(a1) & 1) << 32));
  return swift_endAccess(v11);
}

void (*WiFiInterface.ipv4Address.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1  = v3;
  v3[3]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 136LL);
  v3[4]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t v6 = sub_100002274(&qword_10040BDC0);
  v3[5]  = v6;
  uint64_t v7 = *(int *)(v6 + 40);
  *((_DWORD *)v3 + 12)  = *(_DWORD *)(v5 + v7);
  v3 += 6;
  *((_DWORD *)v3 + 2)  = v7;
  *((_BYTE *)v3 + 4)  = *(_BYTE *)(v5 + v7 + 4);
  return sub_100215C04;
}

void sub_100215C04(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(unsigned int *)(*a1 + 48);
  int v4 = *(unsigned __int8 *)(*a1 + 52);
  if ((a2 & 1) != 0)
  {
    LOBYTE(v15)  = *(_BYTE *)(*a1 + 52);
    sub_100214F90(v3 | ((unint64_t)v4 << 32));
    goto LABEL_15;
  }

  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v7 = v6 + v5 + *(int *)(v2 + 56);
  int v15 = *(_DWORD *)(*a1 + 48);
  char v16 = v4;
  if ((*(_BYTE *)(v7 + 4) & 1) != 0)
  {
    if (v4) {
      goto LABEL_15;
    }
  }

  else
  {
    if (*(_DWORD *)v7 == (_DWORD)v3) {
      char v8 = v4;
    }
    else {
      char v8 = 1;
    }
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
  }

  uint64_t v9 = *(void *)(v2 + 40);
  char v10 = (void (**)(int *))(v6 + v5 + *(int *)(v9 + 48));
  if (*v10)
  {
    (*v10)(&v15);
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v9 = *(void *)(v2 + 40);
    uint64_t v6 = *(void *)(v2 + 24);
  }

  (*(void (**)(int *))(v6 + v5 + *(int *)(v9 + 44)))(&v15);
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 24) + *(void *)(v2 + 32);
  uint64_t v13 = v12 + *(int *)(v2 + 56);
  *(_DWORD *)uint64_t v13 = v3;
  *(_BYTE *)(v13 + 4)  = v4;
  unint64_t v14 = (void (**)(int *))(v12 + *(int *)(v11 + 56));
  if (*v14) {
    (*v14)(&v15);
  }
  char v17 = v4;
  sub_10021C4C8(0LL, v3 | ((unint64_t)v4 << 32));
LABEL_15:
  swift_endAccess(v2);
  free((void *)v2);
}

uint64_t WiFiInterface.$ipv4Address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 136LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, &qword_10040BDC0);
}

uint64_t WiFiInterface.$ipv4Address.setter(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040BDC0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000226B0(a1, (uint64_t)v5, &qword_10040BDC0);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 136LL);
  swift_beginAccess(v6, v9, 33LL, 0LL);
  sub_1000225EC(v6, &qword_10040BDC0);
  sub_1000586C0((uint64_t)v5, v6, &qword_10040BDC0);
  swift_endAccess(v9);
  return sub_1000225EC(a1, &qword_10040BDC0);
}

void (*WiFiInterface.$ipv4Address.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[3]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_10040BDC0) - 8) + 64LL);
  v3[4]  = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5]  = v5;
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 136LL);
  swift_beginAccess(v6, v3, 0LL, 0LL);
  sub_1000226B0(v6, (uint64_t)v5, &qword_10040BDC0);
  return sub_100215F74;
}

void sub_100215F74(uint64_t a1, char a2)
{
}

uint64_t WiFiInterface.ipv6Addresses.getter()
{
  uint64_t v1 = sub_100002274(&qword_10040BDC8);
  __chkstk_darwin();
  uint64_t v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 144LL);
  swift_beginAccess(v4, v8, 0LL, 0LL);
  sub_1000226B0(v4, (uint64_t)v3, &qword_10040BDC8);
  uint64_t v5 = *(void *)&v3[*(int *)(v1 + 40)];
  swift_bridgeObjectRetain(v5);
  sub_1000225EC((uint64_t)v3, &qword_10040BDC8);
  return v5;
}

uint64_t WiFiInterface.ipv6Addresses.setter(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void (*WiFiInterface.ipv6Addresses.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[4]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 144LL);
  v3[5]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t v6 = *(void *)(v5 + *(int *)(sub_100002274(&qword_10040BDC8) + 40));
  v3[3]  = v6;
  swift_bridgeObjectRetain(v6);
  return sub_100216124;
}

void sub_100216124(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v4 = swift_bridgeObjectRetain(v3);
    sub_100220898(v4);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2[3]);
    swift_endAccess(v2);
  }

  else
  {
    sub_100220898(v3);
    swift_endAccess(v2);
    swift_bridgeObjectRelease(v3);
  }

  free(v2);
}

uint64_t WiFiInterface.$ipv6Addresses.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 144LL);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, &qword_10040BDC8);
}

uint64_t WiFiInterface.$ipv6Addresses.setter(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040BDC8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000226B0(a1, (uint64_t)v5, &qword_10040BDC8);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 144LL);
  swift_beginAccess(v6, v9, 33LL, 0LL);
  sub_1000225EC(v6, &qword_10040BDC8);
  sub_1000586C0((uint64_t)v5, v6, &qword_10040BDC8);
  swift_endAccess(v9);
  return sub_1000225EC(a1, &qword_10040BDC8);
}

void (*WiFiInterface.$ipv6Addresses.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[3]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100002274(&qword_10040BDC8) - 8) + 64LL);
  v3[4]  = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5]  = v5;
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 144LL);
  swift_beginAccess(v6, v3, 0LL, 0LL);
  sub_1000226B0(v6, (uint64_t)v5, &qword_10040BDC8);
  return sub_100216364;
}

void sub_100216364(uint64_t a1, char a2)
{
}

uint64_t WiFiInterface.neighborDiscoveryTable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess(v4, v8, 0LL, 0LL);
  uint64_t v6 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable( 0LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, v4, v6);
}

uint64_t WiFiInterface.neighborDiscoveryTable.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess(v4, v8, 33LL, 0LL);
  uint64_t v6 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable( 0LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(v4, a1, v6);
  return swift_endAccess(v8);
}

uint64_t (*WiFiInterface.neighborDiscoveryTable.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t WiFiInterface.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 160LL);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t *WiFiInterface.__allocating_init(driver:components:logger:)(char *a1, uint64_t a2, uint64_t a3)
{
  return WiFiInterface.init(driver:components:logger:)(a1, a2, a3, v7);
}

uint64_t *WiFiInterface.init(driver:components:logger:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v167  = a3;
  v165  = a2;
  uint64_t v7 = *(void *)(*v4 + 80);
  uint64_t v8 = *(void *)(*v4 + 88);
  uint64_t v9 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v7, v8, a4);
  uint64_t v158 = *(void *)(v9 - 8);
  v159  = v9;
  __chkstk_darwin(v9);
  uint64_t v157 = (uint64_t)&v137 - v10;
  uint64_t v11 = sub_100002274(&qword_10040BDC8);
  __chkstk_darwin(v11);
  uint64_t v156 = (uint64_t *)((char *)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = sub_100002274(&qword_10040BDC0);
  __chkstk_darwin(v13);
  __int128 v154 = (uint64_t *)((char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = sub_100002274((uint64_t *)&unk_10040FE60);
  __chkstk_darwin(v15);
  v152  = (uint64_t *)((char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = sub_100002274((uint64_t *)&unk_10040FEC0);
  __chkstk_darwin(v17);
  v150  = (uint64_t *)((char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  v163  = v19;
  v164  = v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v155  = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  v151  = (char *)&v137 - v24;
  __chkstk_darwin(v23);
  size_t v26 = (char *)&v137 - v25;
  uint64_t v27 = v8;
  uint64_t v28 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v8,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v30 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  char v34 = (char *)&v137 - v33;
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v36 = __chkstk_darwin(v32);
  __int128 v153 = (char *)&v137 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v36);
  uint64_t v160 = (char *)&v137 - v38;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v34, a1, v30);
  uint64_t v161 = v35;
  int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1LL, AssociatedTypeWitness);
  v162  = a1;
  if (v39 == 1)
  {
    uint64_t v40 = v164;
    char v41 = *(void (**)(char *, uint64_t))(v31 + 8);
    v41(v34, v30);
    uint64_t v42 = Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x6361667265746E69LL,  0xE900000000000065LL);
    char v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = v27;
      uint64_t v46 = v28;
      uint64_t v47 = v30;
      uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Unable to create WiFiInterface because no Driver was provided",  v48,  2u);
      uint64_t v49 = v48;
      uint64_t v30 = v47;
      uint64_t v28 = v46;
      uint64_t v27 = v45;
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    uint64_t v51 = v163;
    v50(v167, v163);
    uint64_t v52 = swift_getAssociatedTypeWitness(0LL, v27, v28, &protocol requirements base descriptor for P2PControls);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8LL))(v165, v52);
    v41(v162, v30);
    v50((uint64_t)v26, v51);
    uint64_t v54 = type metadata accessor for WiFiInterface(0LL, v28, v27, v53);
    swift_deallocPartialClassInstance(v5, v54, *(unsigned int *)(*v5 + 48), *(unsigned __int16 *)(*v5 + 52));
    return 0LL;
  }

  else
  {
    uint64_t v143 = v31;
    v144  = v30;
    int64_t v57 = v160;
    uint64_t v56 = v161;
    (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v160, v34, AssociatedTypeWitness);
    unint64_t v58 = (char *)v5 + *(void *)(*v5 + 96);
    v140  = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v140(v58, v57, AssociatedTypeWitness);
    uint64_t v59 = v27;
    uint64_t v60 = v28;
    uint64_t AssociatedConformanceWitness = (uint64_t (**)(void, void))swift_getAssociatedConformanceWitness( v27,  v28,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v62 = AssociatedConformanceWitness[5](AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v63 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 104));
    uint64_t *v63 = v62;
    v63[1]  = v64;
    uint64_t v65 = v163;
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 16);
    v66((char *)v5 + *(void *)(*v5 + 160), v167, v163);
    uint64_t v67 = v66;
    uint64_t v148 = (void (*)(uint64_t, uint64_t, uint64_t))v66;
    uint64_t v68 = (char *)v5 + *(void *)(*v5 + 112);
    uint64_t v69 = swift_getAssociatedTypeWitness(0LL, v59, v60, &protocol requirements base descriptor for P2PControls);
    v141  = *(void *)(v69 - 8);
    uint64_t v70 = *(void (**)(char *, uint64_t))(v141 + 16);
    v142  = v69;
    v70(v68, v165);
    uint64_t v71 = (char *)v5 + *(void *)(*v5 + 104);
    unint64_t v72 = (uint64_t *)*((void *)v71 + 1);
    v170  = *(uint64_t **)v71;
    v171  = v72;
    swift_bridgeObjectRetain(v72);
    v73._countAndFlagsBits  = 0x7473206B6E696C20LL;
    v73._object  = (void *)0xEB00000000657461LL;
    String.append(_:)(v73);
    uint64_t v138 = v170;
    v137  = v171;
    uint64_t v74 = (uint64_t)v151;
    v67(v151, v167, v65);
    uint64_t v75 = (uint64_t)v5 + *(void *)(*v5 + 96);
    LOBYTE(v68)  = AssociatedConformanceWitness[6](AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v76 = v60;
    uint64_t v145 = v59;
    uint64_t v77 = sub_10021721C(v75, v60, v59);
    v166  = AssociatedTypeWitness;
    uint64_t v79 = v78;
    v80  = swift_allocObject(&unk_1003F10A8, 32LL, 7LL);
    *(void *)(v80 + 16)  = v77;
    *(void *)(v80 + 24)  = v79;
    char v81 = v150;
    sub_1002173B8( (uint64_t)v138,  (unint64_t)v137,  v74,  v68,  0,  (void (*)(char *))sub_100220BC8,  (void (*)(char *))v80,  sub_100220800,  v150,  0LL);
    sub_1000586C0((uint64_t)v81, (uint64_t)v5 + *(void *)(*v5 + 120), (uint64_t *)&unk_10040FEC0);
    uint64_t v82 = (uint64_t *)*((void *)v71 + 1);
    v170  = *(uint64_t **)v71;
    v171  = v82;
    swift_bridgeObjectRetain(v82);
    v83._countAndFlagsBits  = 7234013692659060000LL;
    v83._object  = (void *)0xEC00000073736572LL;
    String.append(_:)(v83);
    v150  = v170;
    uint64_t v138 = v171;
    uint64_t v84 = v163;
    v148(v74, v167, v163);
    uint64_t v147 = AssociatedConformanceWitness;
    unint64_t v85 = AssociatedConformanceWitness[8](v166, AssociatedConformanceWitness);
    unint64_t v86 = sub_1002136D8();
    uint64_t v87 = v76;
    uint64_t v149 = v76;
    uint64_t v88 = sub_100219E00(v75, v76, v59);
    uint64_t v90 = v89;
    uint64_t v91 = swift_allocObject(&unk_1003F10D0, 32LL, 7LL);
    *(void *)(v91 + 16)  = v88;
    *(void *)(v91 + 24)  = v90;
    uint64_t v92 = v85 & 0xFFFFFFFFFFFFLL | ((HIWORD(v85) & 1) << 48);
    uint64_t v93 = v152;
    sub_100217B44( (uint64_t)v150,  (unint64_t)v138,  v74,  v92,  v86 & 0xFFFFFFFFFFFCLL | 2,  (void (*)(__int16 *))sub_100220BEC,  (void (*)(__int16 *))v91,  (uint64_t (*)(__int16 *))sub_1002207A8,  v152,  0LL);
    sub_1000586C0((uint64_t)v93, (uint64_t)v5 + *(void *)(*v5 + 128), (uint64_t *)&unk_10040FE60);
    uint64_t v139 = (uint64_t **)v71;
    uint64_t v94 = (uint64_t *)*((void *)v71 + 1);
    v170  = *(uint64_t **)v71;
    v171  = v94;
    swift_bridgeObjectRetain(v94);
    v95._countAndFlagsBits  = 0x6461203476504920LL;
    v95._object  = (void *)0xED00007373657264LL;
    String.append(_:)(v95);
    v150  = v170;
    uint64_t v138 = v171;
    v152  = v5;
    BOOL v96 = (void (*)(char *, uint64_t, uint64_t))v148;
    v148(v74, v167, v84);
    uint64_t v97 = (uint64_t (*)(uint64_t))v147[10];
    v146  = v75;
    unint64_t v98 = v97(v166);
    uint64_t v99 = v75;
    uint64_t v100 = v145;
    uint64_t v101 = sub_100219F9C(v99, v87, v145);
    uint64_t v103 = v102;
    uint64_t v104 = swift_allocObject(&unk_1003F10F8, 32LL, 7LL);
    *(void *)(v104 + 16)  = v101;
    *(void *)(v104 + 24)  = v103;
    v105  = (uint64_t)v155;
    char v55 = v152;
    v96(v155, v74, v84);
    LOBYTE(v170)  = 0;
    unint64_t v106 = v98 & (unint64_t)&_mh_execute_header & 0xFFFFFFFF00000000LL | v98;
    unint64_t v107 = v98 | ((HIDWORD(v98) & 1) << 32);
    uint64_t v108 = v154;
    sub_100218BF8( (uint64_t)v150,  (unint64_t)v138,  v105,  v106,  v107,  (void (*)(int *))sub_100220C18,  (void (*)(int *))v104,  sub_10021A140,  v154,  0LL);
    v164  = *(void *)(v164 + 8);
    ((void (*)(uint64_t, uint64_t))v164)(v74, v84);
    sub_1000586C0((uint64_t)v108, (uint64_t)v55 + *(void *)(*v55 + 136), &qword_10040BDC0);
    uint64_t v109 = v139[1];
    v170  = *v139;
    v171  = v109;
    swift_bridgeObjectRetain(v109);
    v110._countAndFlagsBits  = 0x6461203676504920LL;
    v110._object  = (void *)0xED00007373657264LL;
    String.append(_:)(v110);
    __int128 v154 = v170;
    v150  = v171;
    v96((char *)v74, v167, v84);
    uint64_t v111 = (void (*)(uint64_t, uint64_t, uint64_t))v96;
    uint64_t v112 = v146;
    uint64_t v113 = ((uint64_t (*)(uint64_t))v147[12])(v166);
    char v114 = sub_10021A3BC(v112, v149, v100);
    uint64_t v116 = v115;
    uint64_t v117 = swift_allocObject(&unk_1003F1120, 32LL, 7LL);
    *(void *)(v117 + 16)  = v114;
    *(void *)(v117 + 24)  = v116;
    uint64_t v118 = v84;
    uint64_t v119 = v84;
    uint64_t v120 = v111;
    v111(v105, v74, v119);
    swift_bridgeObjectRetain(v113);
    v121  = v156;
    v122  = (void (*)(uint64_t *))v117;
    uint64_t v123 = v166;
    uint64_t v124 = v167;
    sub_100218390( (uint64_t)v154,  (unint64_t)v150,  v105,  v113,  v113,  (void (*)(uint64_t *))sub_100220C4C,  v122,  sub_100220750,  v156,  0LL);
    ((void (*)(uint64_t, uint64_t))v164)(v74, v118);
    sub_1000586C0((uint64_t)v121, (uint64_t)v55 + *(void *)(*v55 + 144), &qword_10040BDC8);
    uint64_t v125 = (uint64_t)v153;
    v140(v153, (char *)v146, v123);
    uint64_t v126 = v118;
    v120(v74, v124, v118);
    uint64_t v127 = v157;
    sub_10021A558(v125, v74, v149, v145, v157);
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 32))((char *)v55 + *(void *)(*v55 + 152), v127, v159);
    uint64_t v128 = swift_retain();
    v129  = (os_log_s *)Logger.logObject.getter(v128);
    v130  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v129, v130))
    {
      v131  = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v132 = (uint64_t *)swift_slowAlloc(32LL, -1LL);
      v170  = v132;
      *(_DWORD *)v131  = 136315138;
      v133  = WiFiInterface.description.getter();
      unint64_t v135 = v134;
      v168  = sub_10000235C(v133, v134, (uint64_t *)&v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, v169);
      swift_release(v55);
      swift_bridgeObjectRelease(v135);
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Created %s", v131, 0xCu);
      swift_arrayDestroy(v132, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v132, -1LL, -1LL);
      swift_slowDealloc(v131, -1LL, -1LL);

      ((void (*)(uint64_t, uint64_t))v164)(v124, v126);
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v165, v142);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v162, v144);
      (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v166);
    }

    else
    {
      swift_release(v55);

      ((void (*)(uint64_t, uint64_t))v164)(v124, v126);
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v165, v142);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v162, v144);
      (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v123);
    }
  }

  return v55;
}

uint64_t (*sub_10021721C(uint64_t a1, uint64_t a2, uint64_t a3))(char a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003F17B0, v12 + v8, v11 | 7);
  *(void *)(v13 + 16)  = a2;
  *(void *)(v13 + 24)  = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_100224044;
}

uint64_t sub_100217308(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(v6, v10, AssociatedConformanceWitness);
}

uint64_t sub_1002173B8@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, void (*a6)(char *)@<X5>, void (*a7)(char *)@<X6>, uint64_t (*a8)(_BYTE *)@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  int v47 = a4;
  char v17 = a5 & 1;
  char v52 = a5 & 1;
  uint64_t v18 = (int *)sub_100002274((uint64_t *)&unk_10040FEC0);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0LL;
  v19[1]  = 0LL;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  void *v20 = 0LL;
  v20[1]  = 0LL;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0LL;
  v21[1]  = 0LL;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v45 = a2;
  uint64_t v22 = (char *)a9 + v18[9];
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v46 = *(void *)(v23 - 8);
  uint64_t v44 = v23;
  (*(void (**)(char *, uint64_t))(v46 + 16))(v22, a3);
  uint64_t v24 = (uint64_t *)((char *)a9 + v18[15]);
  char v43 = a8;
  *uint64_t v24 = a8;
  v24[1]  = a10;
  uint64_t v25 = (void (**)(char *))((char *)a9 + v18[11]);
  *uint64_t v25 = a6;
  v25[1]  = a7;
  if (v47 == 2)
  {
    *((_BYTE *)a9 + v18[10])  = v17;
    swift_retain();
    swift_bridgeObjectRetain(v45);
    swift_retain();
    a6(&v52);
    v51[0]  = v17;
    swift_retain_n(a10, 2LL);
    uint64_t v35 = swift_bridgeObjectRetain(v45);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      swift_bridgeObjectRetain(v45);
      uint64_t v49 = sub_10000235C(a1, v45, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v45, 3LL);
      *(_WORD *)(v38 + 12)  = 2080;
      uint64_t v40 = v43(v51);
      unint64_t v42 = v41;
      uint64_t v49 = sub_10000235C(v40, v41, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_release_n(a10, 2LL);
      swift_bridgeObjectRelease(v42);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "No initial value for %s set default to %s",  (uint8_t *)v38,  0x16u);
      swift_arrayDestroy(v39, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);

      swift_release(a7);
      swift_release(a10);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }

    else
    {
      swift_bridgeObjectRelease_n(v45, 2LL);

      swift_release(a7);
      swift_release_n(a10, 3LL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }
  }

  else
  {
    *((_BYTE *)a9 + v18[10])  = a4 & 1;
    v51[0]  = a4 & 1;
    swift_retain_n(a10, 3LL);
    swift_bridgeObjectRetain_n(v45, 2LL);
    uint64_t v26 = swift_retain();
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain(v45);
      uint64_t v49 = sub_10000235C(a1, v45, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v45, 3LL);
      *(_WORD *)(v29 + 12)  = 2080;
      uint64_t v31 = v43(v51);
      unint64_t v33 = v32;
      uint64_t v49 = sub_10000235C(v31, v32, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_release_n(a10, 2LL);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Initialized value for %s to %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      swift_release(a7);
      swift_release(a10);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }

    else
    {
      swift_bridgeObjectRelease_n(v45, 2LL);

      swift_release(a7);
      swift_release_n(a10, 3LL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }
  }

uint64_t sub_100217B44@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(__int16 *)@<X5>, void (*a7)(__int16 *)@<X6>, uint64_t (*a8)(__int16 *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(__int16 *))
{
  char v12 = a5;
  __int16 v65 = a5;
  *(void *)type  = a5 >> 8;
  unint64_t v53 = a5 >> 16;
  char v66 = BYTE2(a5);
  unint64_t v49 = a5 >> 24;
  char v67 = BYTE3(a5);
  unint64_t v48 = HIDWORD(a5);
  char v68 = BYTE4(a5);
  unint64_t v50 = a5 >> 40;
  char v69 = BYTE5(a5);
  uint64_t v18 = (int *)sub_100002274((uint64_t *)&unk_10040FE60);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0LL;
  v19[1]  = 0LL;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  void *v20 = 0LL;
  v20[1]  = 0LL;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0LL;
  v21[1]  = 0LL;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v57 = a2;
  uint64_t v22 = (char *)a9 + v18[9];
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v55 = *(void *)(v23 - 8);
  uint64_t v56 = v23;
  (*(void (**)(char *, uint64_t))(v55 + 16))(v22, a3);
  uint64_t v24 = (uint64_t (**)(__int16 *))((char *)a9 + v18[15]);
  uint64_t v51 = a8;
  *uint64_t v24 = a8;
  v24[1]  = a10;
  uint64_t v25 = (void (**)(__int16 *))((char *)a9 + v18[11]);
  *uint64_t v25 = a6;
  v25[1]  = a7;
  if ((a4 & 0x1000000000000LL) == 0)
  {
    uint64_t v26 = (char *)a9 + v18[10];
    *(_WORD *)uint64_t v26 = a4;
    v26[2]  = BYTE2(a4);
    void v26[3] = BYTE3(a4);
    v26[4]  = BYTE4(a4);
    v26[5]  = BYTE5(a4);
    __int16 v60 = a4;
    char v61 = BYTE2(a4);
    char v62 = BYTE3(a4);
    char v63 = BYTE4(a4);
    char v64 = BYTE5(a4);
    swift_retain_n(a10, 3LL);
    swift_bridgeObjectRetain_n(v57, 2LL);
    uint64_t v27 = swift_retain();
    os_log_type_t v28 = (void *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    uint64_t v30 = a3;
    if (!os_log_type_enabled((os_log_t)v28, v29))
    {
      swift_bridgeObjectRelease_n(v57, 2LL);

      swift_release(a7);
      swift_release_n(a10, 3LL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a3, v56);
    }

    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v59 = v32;
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain(v57);
    uint64_t v58 = sub_10000235C(a1, v57, &v59);
    unint64_t v33 = a10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(v57, 3LL);
    *(_WORD *)(v31 + 12)  = 2080;
    uint64_t v34 = v51(&v60);
    unint64_t v36 = v35;
    uint64_t v58 = sub_10000235C(v34, v35, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_release_n(a10, 2LL);
    swift_bridgeObjectRelease(v36);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v28,  v29,  "Initialized value for %s to %s",  (uint8_t *)v31,  0x16u);
    swift_arrayDestroy(v32, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);

    os_log_type_t v37 = a7;
    goto LABEL_8;
  }

  uint64_t v38 = (char *)a9 + v18[10];
  *uint64_t v38 = v12;
  v38[1]  = type[0];
  v38[2]  = v53;
  v38[3]  = v49;
  v38[4]  = v48;
  v38[5]  = v50;
  swift_retain();
  swift_bridgeObjectRetain(v57);
  swift_retain();
  a6(&v65);
  LOBYTE(v60)  = v12;
  HIBYTE(v60)  = type[0];
  char v61 = v53;
  char v62 = v49;
  char v63 = v48;
  char v64 = v50;
  swift_retain_n(a10, 2LL);
  uint64_t v39 = swift_bridgeObjectRetain(v57);
  uint64_t v30 = a3;
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = swift_slowAlloc(64LL, -1LL);
    uint64_t v59 = v43;
    *(_DWORD *)uint64_t v42 = 136315394;
    swift_bridgeObjectRetain(v57);
    uint64_t v58 = sub_10000235C(a1, v57, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(v57, 3LL);
    *(_WORD *)(v42 + 12)  = 2080;
    unint64_t v33 = a10;
    uint64_t v44 = v51(&v60);
    unint64_t v46 = v45;
    uint64_t v58 = sub_10000235C(v44, v45, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_release_n(a10, 2LL);
    swift_bridgeObjectRelease(v46);
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "No initial value for %s set default to %s",  (uint8_t *)v42,  0x16u);
    swift_arrayDestroy(v43, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    os_log_type_t v37 = a7;
LABEL_8:
    swift_release(v37);
    swift_release(v33);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v30, v56);
  }

  swift_bridgeObjectRelease_n(v57, 2LL);

  swift_release(a7);
  swift_release_n(a10, 3LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a3, v56);
}

uint64_t sub_100218390@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t *)@<X5>, void (*a7)(uint64_t *)@<X6>, uint64_t (*a8)(void *)@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v52 = a5;
  uint64_t v18 = (int *)sub_100002274(&qword_10040BDC8);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0LL;
  v19[1]  = 0LL;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  void *v20 = 0LL;
  v20[1]  = 0LL;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0LL;
  v21[1]  = 0LL;
  uint64_t v44 = a1;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v22 = a2;
  uint64_t v23 = (char *)a9 + v18[9];
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v23, a3, v46);
  uint64_t v24 = (uint64_t *)((char *)a9 + v18[15]);
  unint64_t v45 = a8;
  *uint64_t v24 = a8;
  v24[1]  = a10;
  uint64_t v25 = (void (**)(uint64_t *))((char *)a9 + v18[11]);
  *uint64_t v25 = a6;
  v25[1]  = a7;
  if (a4)
  {
    *(uint64_t *)((char *)a9 + v18[10])  = a4;
    v51[0]  = a4;
    swift_bridgeObjectRetain_n(a4, 4LL);
    swift_retain_n(a10, 3LL);
    swift_bridgeObjectRetain_n(v22, 2LL);
    uint64_t v26 = swift_retain();
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain(v22);
      uint64_t v49 = sub_10000235C(v44, v22, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v22, 3LL);
      *(_WORD *)(v29 + 12)  = 2080;
      uint64_t v31 = v45(v51);
      unint64_t v33 = v32;
      uint64_t v49 = sub_10000235C(v31, v32, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(a4);
      swift_release_n(a10, 2LL);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v51[0]);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Initialized value for %s to %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      swift_release(a7);
      swift_release(a10);
      uint64_t v34 = v52;
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v34);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
      return swift_bridgeObjectRelease(a4);
    }

    else
    {
      swift_bridgeObjectRelease(a5);
      swift_bridgeObjectRelease_n(v22, 2LL);
      swift_bridgeObjectRelease_n(a4, 3LL);

      swift_release(a7);
      swift_release_n(a10, 3LL);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
      return swift_bridgeObjectRelease(a4);
    }
  }

  else
  {
    *(uint64_t *)((char *)a9 + v18[10])  = a5;
    swift_retain();
    swift_bridgeObjectRetain(v22);
    swift_retain();
    swift_bridgeObjectRetain(a5);
    a6(&v52);
    v51[0]  = a5;
    swift_retain_n(a10, 2LL);
    swift_bridgeObjectRetain_n(a5, 2LL);
    uint64_t v36 = swift_bridgeObjectRetain(v22);
    os_log_type_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v40;
      *(_DWORD *)uint64_t v39 = 136315394;
      swift_bridgeObjectRetain(v22);
      uint64_t v49 = sub_10000235C(v44, v22, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v22, 3LL);
      *(_WORD *)(v39 + 12)  = 2080;
      uint64_t v41 = a8(v51);
      unint64_t v43 = v42;
      uint64_t v49 = sub_10000235C(v41, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(a5);
      swift_release_n(a10, 2LL);
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v51[0]);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "No initial value for %s set default to %s",  (uint8_t *)v39,  0x16u);
      swift_arrayDestroy(v40, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);

      swift_release(a7);
      swift_release(a10);
      swift_bridgeObjectRelease(v52);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
    }

    else
    {
      swift_bridgeObjectRelease_n(v22, 2LL);
      swift_bridgeObjectRelease_n(a5, 3LL);

      swift_release(a7);
      swift_release_n(a10, 3LL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
    }
  }

uint64_t sub_100218BF8@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(int *)@<X5>, void (*a7)(int *)@<X6>, uint64_t (*a8)(int *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(int *))
{
  int v13 = a5;
  int v58 = a5;
  uint64_t v48 = HIDWORD(a5) & 1;
  char v59 = BYTE4(a5) & 1;
  uint64_t v18 = (int *)sub_100002274(&qword_10040BDC0);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0LL;
  v19[1]  = 0LL;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  void *v20 = 0LL;
  v20[1]  = 0LL;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0LL;
  v21[1]  = 0LL;
  type  = a1;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v22 = a7;
  unint64_t v51 = a2;
  uint64_t v23 = (char *)a9 + v18[9];
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v52 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v23, a3, v24);
  uint64_t v25 = (uint64_t (**)(int *))((char *)a9 + v18[15]);
  uint64_t v50 = a8;
  *uint64_t v25 = a8;
  v25[1]  = a10;
  uint64_t v26 = (void (**)(int *))((char *)a9 + v18[11]);
  *uint64_t v26 = a6;
  v26[1]  = v22;
  if ((a4 & 0x10000000000LL) == 0)
  {
    uint64_t v27 = (char *)a9 + v18[10];
    *(_DWORD *)uint64_t v27 = a4;
    v27[4]  = BYTE4(a4) & 1;
    int v56 = a4;
    char v57 = BYTE4(a4) & 1;
    swift_retain_n(a10, 3LL);
    swift_bridgeObjectRetain_n(v51, 2LL);
    uint64_t v28 = swift_retain();
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v55 = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_bridgeObjectRetain(v51);
      uint64_t v54 = sub_10000235C(type, v51, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_bridgeObjectRelease_n(v51, 3LL);
      *(_WORD *)(v31 + 12)  = 2080;
      uint64_t v33 = v50(&v56);
      unint64_t v35 = v34;
      uint64_t v54 = sub_10000235C(v33, v34, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_release_n(a10, 2LL);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Initialized value for %s to %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);

      swift_release(v22);
      swift_release(a10);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(a3, v24);
    }

    swift_bridgeObjectRelease_n(v51, 2LL);

    swift_release(v22);
    uint64_t v39 = a10;
    goto LABEL_10;
  }

  os_log_type_t v37 = (char *)a9 + v18[10];
  *(_DWORD *)os_log_type_t v37 = v13;
  v37[4]  = v48;
  swift_retain();
  swift_bridgeObjectRetain(v51);
  swift_retain();
  a6(&v58);
  os_log_type_t v38 = v22;
  int v56 = v13;
  char v57 = v48;
  swift_retain_n(a10, 2LL);
  uint64_t v40 = swift_bridgeObjectRetain(v51);
  uint64_t v41 = (void *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v41, v42))
  {
    swift_bridgeObjectRelease_n(v51, 2LL);

    swift_release(v38);
    uint64_t v39 = a10;
LABEL_10:
    swift_release_n(v39, 3LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(a3, v24);
  }

  uint64_t v43 = swift_slowAlloc(22LL, -1LL);
  uint64_t v44 = swift_slowAlloc(64LL, -1LL);
  uint64_t v55 = v44;
  *(_DWORD *)uint64_t v43 = 136315394;
  swift_bridgeObjectRetain(v51);
  uint64_t v54 = sub_10000235C(type, v51, &v55);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
  swift_bridgeObjectRelease_n(v51, 3LL);
  *(_WORD *)(v43 + 12)  = 2080;
  uint64_t v45 = a8(&v56);
  unint64_t v47 = v46;
  uint64_t v54 = sub_10000235C(v45, v46, &v55);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
  swift_release_n(a10, 2LL);
  swift_bridgeObjectRelease(v47);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v41,  v42,  "No initial value for %s set default to %s",  (uint8_t *)v43,  0x16u);
  swift_arrayDestroy(v44, 2LL, &type metadata for Any[8]);
  swift_slowDealloc(v44, -1LL, -1LL);
  swift_slowDealloc(v43, -1LL, -1LL);

  swift_release(v38);
  swift_release(a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(a3, v24);
}

uint64_t MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(char *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(char *), uint64_t a11, uint64_t a12)
{
  v105  = a6;
  unint64_t v106 = a8;
  uint64_t v101 = a5;
  uint64_t v102 = a3;
  uint64_t v107 = a4;
  uint64_t v109 = a10;
  uint64_t v16 = type metadata accessor for Optional(0LL, a11);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v92 - v19;
  uint64_t v21 = *(void *)(a11 - 8);
  uint64_t v22 = __chkstk_darwin(v18);
  Swift::String v95 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v94 = (char *)&v92 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v97 = (char *)&v92 - v27;
  __chkstk_darwin(v26);
  unint64_t v98 = (char *)&v92 - v28;
  os_log_type_t v30 = (int *)type metadata accessor for MutableDriverProperty(0LL, a11, a12, v29);
  uint64_t v31 = (uint64_t *)((char *)a9 + v30[12]);
  *uint64_t v31 = 0LL;
  v31[1]  = 0LL;
  uint64_t v32 = (uint64_t *)((char *)a9 + v30[13]);
  *uint64_t v32 = 0LL;
  v32[1]  = 0LL;
  uint64_t v33 = (uint64_t *)((char *)a9 + v30[14]);
  *uint64_t v33 = 0LL;
  v33[1]  = 0LL;
  uint64_t v96 = a1;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v103 = a2;
  unint64_t v34 = (char *)a9 + v30[9];
  uint64_t v35 = type metadata accessor for Logger(0LL);
  uint64_t v99 = *(void *)(v35 - 8);
  uint64_t v100 = v35;
  uint64_t v36 = v34;
  uint64_t v37 = v102;
  uint64_t v38 = a7;
  (*(void (**)(char *, uint64_t))(v99 + 16))(v36, v102);
  uint64_t v39 = (uint64_t (**)(char *))((char *)a9 + v30[15]);
  uint64_t v40 = v107;
  uint64_t v41 = v109;
  *uint64_t v39 = v106;
  v39[1]  = v41;
  os_log_type_t v42 = (uint64_t *)((char *)a9 + v30[11]);
  *os_log_type_t v42 = v105;
  v42[1]  = a7;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v104 = v16;
  v43(v20, v40, v16);
  uint64_t v44 = v21;
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v108 = a11;
  if (v45(v20, 1LL, a11) == 1)
  {
    unint64_t v46 = v94;
    unint64_t v47 = *(char **)(v17 + 8);
    swift_bridgeObjectRetain(v103);
    swift_retain();
    swift_retain();
    unint64_t v98 = v47;
    ((void (*)(char *, uint64_t))v47)(v20, v104);
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v49 = v101;
    v48((char *)a9 + v30[10], (uint64_t)v101, v108);
    ((void (*)(char *))v105)(v49);
    uint64_t v92 = v21;
    uint64_t v93 = v38;
    uint64_t v74 = v46;
    v48(v46, (uint64_t)v49, v108);
    swift_retain_n(v109, 2LL);
    unint64_t v75 = v103;
    uint64_t v76 = swift_bridgeObjectRetain(v103);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.default.getter();
    BOOL v79 = os_log_type_enabled(v77, v78);
    v80  = v107;
    if (v79)
    {
      uint64_t v81 = swift_slowAlloc(22LL, -1LL);
      uint64_t v82 = swift_slowAlloc(64LL, -1LL);
      v111[0]  = v82;
      *(_DWORD *)uint64_t v81 = 136315394;
      swift_bridgeObjectRetain(v75);
      v110  = sub_10000235C(v96, v75, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
      swift_bridgeObjectRelease_n(v75, 3LL);
      *(_WORD *)(v81 + 12)  = 2080;
      Swift::String v83 = v109;
      uint64_t v84 = v106(v74);
      unint64_t v86 = v85;
      v110  = sub_10000235C(v84, v85, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
      swift_release_n(v83, 2LL);
      swift_bridgeObjectRelease(v86);
      uint64_t v87 = *(void (**)(char *, uint64_t))(v92 + 8);
      uint64_t v88 = v80;
      uint64_t v89 = v108;
      v87(v74, v108);
      _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "No initial value for %s set default to %s",  (uint8_t *)v81,  0x16u);
      swift_arrayDestroy(v82, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v82, -1LL, -1LL);
      swift_slowDealloc(v81, -1LL, -1LL);

      swift_release(v93);
      swift_release(v83);
      v87(v101, v89);
      ((void (*)(uint64_t, uint64_t))v98)(v88, v104);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v102, v100);
    }

    else
    {

      swift_release(v93);
      swift_release_n(v109, 3LL);
      uint64_t v90 = *(void (**)(char *, uint64_t))(v92 + 8);
      uint64_t v91 = v108;
      v90(v74, v108);
      swift_bridgeObjectRelease_n(v75, 2LL);
      v90(v49, v91);
      ((void (*)(uint64_t, uint64_t))v98)(v80, v104);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v37, v100);
    }
  }

  else
  {
    v105  = v17;
    uint64_t v50 = v98;
    uint64_t v51 = v108;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v98, v20, v108);
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v52((char *)a9 + v30[10], v50, v51);
    v52(v97, v50, v51);
    unint64_t v53 = v109;
    swift_retain_n(v109, 3LL);
    unint64_t v54 = v103;
    swift_bridgeObjectRetain_n(v103, 2LL);
    uint64_t v55 = swift_retain();
    uint64_t v56 = v38;
    char v57 = (os_log_s *)Logger.logObject.getter(v55);
    uint64_t v58 = v37;
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v59))
    {
      uint64_t v60 = swift_slowAlloc(22LL, -1LL);
      uint64_t v93 = v56;
      uint64_t v61 = v60;
      Swift::String v95 = (char *)swift_slowAlloc(64LL, -1LL);
      v111[0]  = (uint64_t)v95;
      *(_DWORD *)uint64_t v61 = 136315394;
      swift_bridgeObjectRetain(v54);
      v110  = sub_10000235C(v96, v54, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
      swift_bridgeObjectRelease_n(v54, 3LL);
      *(_WORD *)(v61 + 12)  = 2080;
      uint64_t v62 = v44;
      uint64_t v63 = v58;
      char v64 = v97;
      uint64_t v65 = v106(v97);
      unint64_t v67 = v66;
      v110  = sub_10000235C(v65, v66, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
      swift_release_n(v53, 2LL);
      swift_bridgeObjectRelease(v67);
      char v68 = *(void (**)(char *, uint64_t))(v62 + 8);
      uint64_t v69 = v108;
      v68(v64, v108);
      _os_log_impl((void *)&_mh_execute_header, v57, v59, "Initialized value for %s to %s", (uint8_t *)v61, 0x16u);
      uint64_t v70 = v95;
      swift_arrayDestroy(v95, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);

      swift_release(v93);
      swift_release(v53);
      v68(v101, v69);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v107, v104);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v63, v100);
      return ((uint64_t (*)(char *, uint64_t))v68)(v98, v69);
    }

    else
    {

      swift_release(v56);
      swift_release_n(v53, 3LL);
      unint64_t v72 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v73 = v108;
      v72(v97, v108);
      swift_bridgeObjectRelease_n(v54, 2LL);
      v72(v101, v73);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v107, v104);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v58, v100);
      return ((uint64_t (*)(char *, uint64_t))v72)(v98, v73);
    }
  }

uint64_t (*sub_100219E00(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003F1788, v12 + v8, v11 | 7);
  *(void *)(v13 + 16)  = a2;
  *(void *)(v13 + 24)  = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_100223F58;
}

uint64_t sub_100219EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1 & 0xFFFFFFFFFFFFLL, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_100219F9C(uint64_t a1, uint64_t a2, uint64_t a3))(unint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003F1760, v12 + v8, v11 | 7);
  *(void *)(v13 + 16)  = a2;
  *(void *)(v13 + 24)  = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_100223ED0;
}

uint64_t sub_10021A088(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 88);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1 | ((HIDWORD(a1) & 1) << 32), v10, AssociatedConformanceWitness);
}

uint64_t sub_10021A140(int *a1)
{
  if ((a1[1] & 1) != 0) {
    return 1701736302LL;
  }
  int v2 = *a1;
  uint64_t v9 = 0LL;
  unint64_t v10 = 0xE000000000000000LL;
  uint64_t v3 = (char *)swift_slowAlloc(16LL, -1LL);
  int v8 = v2;
  inet_ntop(2, &v8, v3, 0x10u);
  uint64_t v4 = String.init(cString:)(v3);
  uint64_t v6 = v5;
  swift_slowDealloc(v3, -1LL, -1LL);
  v7._countAndFlagsBits  = v4;
  v7._object  = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t MutableDriverProperty.init(name:logger:initialValue:updater:valueDescriber:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(char *)@<X6>, uint64_t (*a8)(char *)@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v29 = a8;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  uint64_t v26 = a9;
  uint64_t v25 = a11;
  uint64_t v13 = *(void *)(a10 - 8);
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Optional(0LL, a10);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v25 - v17;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a3, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v23(v18, a4, a10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0LL, 1LL, a10);
  v23(v15, a4, a10);
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)( v27,  v28,  (uint64_t)v22,  (uint64_t)v18,  v15,  v30,  v31,  v32,  v26,  v29,  a10,  v25);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a3, v19);
}

uint64_t (*sub_10021A3BC(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1003F1738, v12 + v8, v11 | 7);
  *(void *)(v13 + 16)  = a2;
  *(void *)(v13 + 24)  = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_100223E58;
}

uint64_t sub_10021A4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t sub_10021A558@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, a3, a4, a4);
  uint64_t v11 = *(int *)(v10 + 36);
  uint64_t v13 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0LL, a3, a4, v12);
  WitnessTable  = swift_getWitnessTable(&unk_10035CFC8, v13);
  *(void *)(a5 + v11)  = Dictionary.init()(v13, &type metadata for Int, WitnessTable);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for P2PControls);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a5,  a1,  AssociatedTypeWitness);
  uint64_t v16 = a5 + *(int *)(v10 + 40);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32LL))(v16, a2, v17);
}

uint64_t WiFiInterface.deinit()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 96LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 80LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v1,  v3,  &protocol requirements base descriptor for P2PControls);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(v2, AssociatedTypeWitness);
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 104LL) + 8));
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 112LL);
  uint64_t v6 = swift_getAssociatedTypeWitness(0LL, v1, v3, &protocol requirements base descriptor for P2PControls);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 120LL), (uint64_t *)&unk_10040FEC0);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 128LL), (uint64_t *)&unk_10040FE60);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 136LL), &qword_10040BDC0);
  sub_1000225EC(v0 + *(void *)(*(void *)v0 + 144LL), &qword_10040BDC8);
  uint64_t v7 = v0 + *(void *)(*(void *)v0 + 152LL);
  uint64_t v9 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0LL, v3, v1, v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v7, v9);
  uint64_t v10 = v0 + *(void *)(*(void *)v0 + 160LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  return v0;
}

uint64_t WiFiInterface.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10021A7EC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt8 v4 = *(_BYTE *)(v2 + 1);
  Swift::UInt8 v5 = *(_BYTE *)(v2 + 2);
  Swift::UInt8 v6 = *(_BYTE *)(v2 + 3);
  Swift::UInt8 v7 = *(_BYTE *)(v2 + 4);
  Swift::UInt8 v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  __int128 v15 = *(_OWORD *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  swift_bridgeObjectRetain(v10);
  uint64_t v11 = sub_1000EF854((uint64_t)&v15, (uint64_t)&v16);
  unint64_t v13 = v12;
  Data.hash(into:)(a1, v11, v12);
  sub_1000208D8(v11, v13);
  if (v10)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v9, v10);
    sub_100220CB0(v2);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return sub_100220CB0(v2);
}

uint64_t sub_10021A928(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)) {
    return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32));
  }
  else {
    return 0LL;
  }
}

Swift::Int sub_10021A9D0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10021AA14()
{
  return sub_10021A9D0();
}

uint64_t sub_10021AA4C(uint64_t a1)
{
  return sub_10021A7EC(a1);
}

Swift::Int sub_10021AA84(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  uint64_t v7 = *((void *)v1 + 4);
  sub_10021A7EC((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_10021AAD8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_10021A928((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = v6;
  uint64_t v64 = type metadata accessor for Logger(0LL);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v62 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a6 + 16);
  uint64_t v15 = *(void *)(a6 + 24);
  LOWORD(v76)  = a1;
  BYTE2(v76)  = BYTE2(a1);
  BYTE3(v76)  = BYTE3(a1);
  BYTE4(v76)  = BYTE4(a1);
  BYTE5(v76)  = BYTE5(a1);
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  *((void *)&v76 + 1)  = a2;
  *(void *)&__int128 v77 = a3;
  uint64_t v69 = *(int *)(a6 + 36);
  uint64_t v17 = *(void *)(v7 + v69);
  *((void *)&v77 + 1)  = a4;
  uint64_t v78 = a5;
  *(_OWORD *)uint64_t v74 = v76;
  *(_OWORD *)&v74[16]  = v77;
  uint64_t v75 = a5;
  swift_bridgeObjectRetain(a5);
  sub_100220C7C((uint64_t)&v76);
  uint64_t v19 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0LL, v16, v15, v18);
  WitnessTable  = swift_getWitnessTable(&unk_10035CFC8, v19);
  Dictionary.subscript.getter(v74, v17, v19, &type metadata for Int);
  sub_100220CB0((uint64_t)&v76);
  if (v71 == 1)
  {
    uint64_t v61 = v19;
    uint64_t v20 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v15,  v16,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v15,  v16,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                               + 136);
    uint64_t v24 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    unint64_t v25 = v68;
    v23(v20, a2, v65, v66, a5, v24, AssociatedConformanceWitness);
    if (v25) {
      return sub_100220CB0((uint64_t)&v76);
    }
    unint64_t v68 = v20;
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))( v24,  AssociatedConformanceWitness);
    unint64_t v29 = v28;
    uint64_t v30 = v63;
    uint64_t v31 = v62;
    uint64_t v32 = v64;
    (*(void (**)(char *, unint64_t, uint64_t))(v63 + 16))(v62, v7 + *(int *)(a6 + 40), v64);
    uint64_t v33 = swift_bridgeObjectRetain(v29);
    unint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      uint64_t v66 = v27;
      uint64_t v37 = v36;
      uint64_t v38 = swift_slowAlloc(64LL, -1LL);
      *(void *)uint64_t v74 = v38;
      *(_DWORD *)uint64_t v37 = 136315394;
      uint64_t v39 = WiFiAddress.description.getter(v68);
      unint64_t v41 = v40;
      uint64_t v70 = sub_10000235C(v39, v40, (uint64_t *)v74);
      unint64_t v68 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v37 + 12)  = 2080;
      swift_bridgeObjectRetain(v29);
      uint64_t v70 = sub_10000235C(v66, v29, (uint64_t *)v74);
      unint64_t v7 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(v29, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Posted peer presence for %s on %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
    }

    else
    {

      swift_bridgeObjectRelease_n(v29, 2LL);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
    }

    uint64_t v19 = v61;
  }

  *(_OWORD *)uint64_t v74 = v76;
  *(_OWORD *)&v74[16]  = v77;
  uint64_t v75 = v78;
  uint64_t v42 = v69;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*(void *)(v7 + v69));
  uint64_t v70 = *(void *)(v7 + v42);
  uint64_t v44 = v70;
  *(void *)(v7 + v42)  = 0x8000000000000000LL;
  uint64_t v45 = WitnessTable;
  unint64_t v46 = sub_1002205F0((uint64_t)v74, v19, WitnessTable);
  uint64_t v48 = *(void *)(v44 + 16);
  BOOL v49 = (v47 & 1) == 0;
  Swift::Int v50 = v48 + v49;
  if (__OFADD__(v48, v49))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v51 = v46;
  char v52 = v47;
  type metadata accessor for _NativeDictionary(0LL, v19, &type metadata for Int, v45);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50))
  {
LABEL_13:
    uint64_t v55 = v69;
    uint64_t v56 = *(void *)(v7 + v69);
    *(void *)(v7 + v69)  = v70;
    swift_bridgeObjectRelease(v56);
    uint64_t v57 = *(void *)(v7 + v55);
    if ((v52 & 1) != 0)
    {
      swift_bridgeObjectRetain(v57);
    }

    else
    {
      uint64_t v79 = 0LL;
      swift_bridgeObjectRetain(v57);
      LODWORD(v70)  = *(_DWORD *)v74;
      WORD2(v70)  = *(_WORD *)&v74[4];
      __int128 v71 = *(_OWORD *)&v74[8];
      uint64_t v72 = *(void *)&v74[24];
      uint64_t v73 = v75;
      swift_bridgeObjectRetain(v75);
      _NativeDictionary._insert(at:key:value:)(v51, &v70, &v79, v57, v19, &type metadata for Int, v45);
    }

    uint64_t v19 = *(void *)(v57 + 56);
    swift_bridgeObjectRelease(v57);
    uint64_t v58 = *(void *)(v19 + 8 * v51);
    BOOL v59 = __OFADD__(v58, 1LL);
    uint64_t v60 = v58 + 1;
    if (!v59)
    {
      *(void *)(v19 + 8 * v51)  = v60;
      return swift_bridgeObjectRelease(v75);
    }

    goto LABEL_19;
  }

  unint64_t v53 = sub_1002205F0((uint64_t)v74, v19, v45);
  if ((v52 & 1) == (v54 & 1))
  {
    unint64_t v51 = v53;
    goto LABEL_13;
  }

uint64_t WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  __chkstk_darwin(v13);
  char v47 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(a6 + 16);
  uint64_t v16 = *(void *)(a6 + 24);
  LOWORD(v59)  = a1;
  BYTE2(v59)  = BYTE2(a1);
  BYTE3(v59)  = BYTE3(a1);
  BYTE4(v59)  = BYTE4(a1);
  BYTE5(v59)  = BYTE5(a1);
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  *((void *)&v59 + 1)  = a2;
  *(void *)&__int128 v60 = a3;
  uint64_t v52 = a4;
  uint64_t v53 = v6;
  *((void *)&v60 + 1)  = a4;
  uint64_t v61 = a5;
  uint64_t v17 = *(void *)(v6 + *(int *)(a6 + 36));
  __int128 v54 = v59;
  __int128 v55 = v60;
  uint64_t v56 = a5;
  swift_bridgeObjectRetain(a5);
  sub_100220C7C((uint64_t)&v59);
  uint64_t v19 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0LL, v15, v16, v18);
  WitnessTable  = swift_getWitnessTable(&unk_10035CFC8, v19);
  Dictionary.subscript.getter(&v54, v17, v19, &type metadata for Int);
  sub_100220CB0((uint64_t)&v59);
  if (v58[0] == 1 || v57 < 1) {
    return sub_100220CB0((uint64_t)&v59);
  }
  if (v57 == 1)
  {
    uint64_t v23 = a1 & 0xFFFFFFFFFFFFLL;
    __int128 v54 = v59;
    __int128 v55 = v60;
    uint64_t v56 = v61;
    uint64_t v24 = type metadata accessor for Dictionary(0LL, v19, &type metadata for Int, WitnessTable);
    Dictionary.removeValue(forKey:)(&v54, v24);
    sub_100220CB0((uint64_t)&v59);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v16,  v15,  &protocol requirements base descriptor for P2PControls);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v16,  v15,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                                  + 144);
    uint64_t v28 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
    uint64_t v29 = v53;
    uint64_t v30 = v62;
    uint64_t result = v27(v23, v50, v51, v52, a5, v28, AssociatedConformanceWitness);
    if (!v30)
    {
      unint64_t v31 = v23;
      uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))( v28,  AssociatedConformanceWitness);
      unint64_t v33 = v32;
      uint64_t v34 = v29 + *(int *)(a6 + 40);
      uint64_t v36 = v47;
      uint64_t v35 = v48;
      uint64_t v37 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v34, v49);
      uint64_t v38 = swift_bridgeObjectRetain(v33);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc(22LL, -1LL);
        uint64_t v42 = swift_slowAlloc(64LL, -1LL);
        *(void *)&__int128 v54 = v42;
        *(_DWORD *)uint64_t v41 = 136315394;
        uint64_t v43 = WiFiAddress.description.getter(v31);
        unint64_t v45 = v44;
        uint64_t v57 = sub_10000235C(v43, v44, (uint64_t *)&v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
        swift_bridgeObjectRelease(v45);
        *(_WORD *)(v41 + 12)  = 2080;
        swift_bridgeObjectRetain(v33);
        uint64_t v57 = sub_10000235C(v62, v33, (uint64_t *)&v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
        swift_bridgeObjectRelease_n(v33, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Posted peer absence for %s on %s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy(v42, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v42, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);

        return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v47, v49);
      }

      else
      {

        swift_bridgeObjectRelease_n(v33, 2LL);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v37);
      }
    }
  }

  else
  {
    --v57;
    v58[0]  = 0;
    __int128 v54 = v59;
    __int128 v55 = v60;
    uint64_t v56 = v61;
    uint64_t v21 = type metadata accessor for Dictionary(0LL, v19, &type metadata for Int, WitnessTable);
    return Dictionary.subscript.setter(&v57, &v54, v21);
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(255LL, v2, v3, v1);
  WitnessTable  = swift_getWitnessTable(&unk_10035CFC8, v4);
  type metadata accessor for Dictionary(0LL, v4, &type metadata for Int, WitnessTable);
  Dictionary.removeAll(keepingCapacity:)(0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3,  v2,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152);
  uint64_t v9 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  v8(v9, AssociatedConformanceWitness);
}

uint64_t MutableDriverProperty.willTryUpdatingProperty.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 48));
  uint64_t v3 = *v2;
  sub_10002254C(*v2, v2[1]);
  return v3;
}

uint64_t MutableDriverProperty.willTryUpdatingProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 48));
  uint64_t result = sub_100021018(*v6, v6[1]);
  *uint64_t v6 = a1;
  v6[1]  = a2;
  return result;
}

uint64_t (*MutableDriverProperty.willTryUpdatingProperty.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t MutableDriverProperty.failedToUpdateProperty.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 52));
  uint64_t v3 = *v2;
  sub_10002254C(*v2, v2[1]);
  return v3;
}

uint64_t MutableDriverProperty.failedToUpdateProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 52));
  uint64_t result = sub_100021018(*v6, v6[1]);
  *uint64_t v6 = a1;
  v6[1]  = a2;
  return result;
}

uint64_t (*MutableDriverProperty.failedToUpdateProperty.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t MutableDriverProperty.didUpdateProperty.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  uint64_t v3 = *v2;
  sub_10002254C(*v2, v2[1]);
  return v3;
}

uint64_t MutableDriverProperty.didUpdateProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 56));
  uint64_t result = sub_100021018(*v6, v6[1]);
  *uint64_t v6 = a1;
  v6[1]  = a2;
  return result;
}

uint64_t (*MutableDriverProperty.didUpdateProperty.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_10021B770(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  __int128 v5 = (int *)sub_100002274((uint64_t *)&unk_10040FEC0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t *)((char *)&v57 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v57 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v57 - v18);
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v62 = v27;
  uint64_t v63 = v24;
  if (a1)
  {
    uint64_t v28 = (char *)&v57 - v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v57 - v25, v2 + v5[9], v26);
    sub_1000226B0(v2, (uint64_t)v19, (uint64_t *)&unk_10040FEC0);
    sub_1000226B0(v2, (uint64_t)v17, (uint64_t *)&unk_10040FEC0);
    char v66 = v4;
    sub_1000226B0(v2, (uint64_t)v14, (uint64_t *)&unk_10040FEC0);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v29 = swift_errorRetain(a1);
    uint64_t v61 = (uint64_t)v28;
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc(42LL, -1LL);
      uint64_t v58 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v60 = swift_slowAlloc(96LL, -1LL);
      uint64_t v65 = v60;
      *(_DWORD *)uint64_t v33 = 136315906;
      int v59 = v32;
      uint64_t v34 = *v19;
      unint64_t v35 = v19[1];
      swift_bridgeObjectRetain(v35);
      uint64_t v64 = sub_10000235C(v34, v35, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v35);
      sub_1000225EC((uint64_t)v19, (uint64_t *)&unk_10040FEC0);
      *(_WORD *)(v33 + 12)  = 2080;
      uint64_t v36 = (*(uint64_t (**)(char *))&v17[v5[15]])(&v66);
      unint64_t v38 = v37;
      uint64_t v64 = sub_10000235C(v36, v37, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v38);
      sub_1000225EC((uint64_t)v17, (uint64_t *)&unk_10040FEC0);
      *(_WORD *)(v33 + 22)  = 2080;
      uint64_t v39 = (*(uint64_t (**)(char *))&v14[v5[15]])(&v14[v5[10]]);
      unint64_t v41 = v40;
      uint64_t v64 = sub_10000235C(v39, v40, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v41);
      sub_1000225EC((uint64_t)v14, (uint64_t *)&unk_10040FEC0);
      *(_WORD *)(v33 + 32)  = 2112;
      swift_errorRetain(a1);
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v64 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      uint64_t v43 = v58;
      uint64_t *v58 = v42;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  (os_log_type_t)v59,  "Failed to update %s to %s (from %s) because %@",  (uint8_t *)v33,  0x2Au);
      uint64_t v44 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v43, 1LL, v44);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v45 = v60;
      swift_arrayDestroy(v60, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      sub_1000225EC((uint64_t)v19, (uint64_t *)&unk_10040FEC0);
      sub_1000225EC((uint64_t)v17, (uint64_t *)&unk_10040FEC0);
      sub_1000225EC((uint64_t)v14, (uint64_t *)&unk_10040FEC0);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v23, v2 + v5[9], v26);
    sub_1000226B0(v2, (uint64_t)v11, (uint64_t *)&unk_10040FEC0);
    uint64_t v46 = sub_1000226B0(v2, (uint64_t)v8, (uint64_t *)&unk_10040FEC0);
    char v66 = v4;
    char v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      uint64_t v61 = swift_slowAlloc(64LL, -1LL);
      uint64_t v65 = v61;
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v51 = *v11;
      unint64_t v50 = v11[1];
      swift_bridgeObjectRetain(v50);
      uint64_t v64 = sub_10000235C(v51, v50, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v50);
      sub_1000225EC((uint64_t)v11, (uint64_t *)&unk_10040FEC0);
      *(_WORD *)(v49 + 12)  = 2080;
      uint64_t v52 = (*(uint64_t (**)(char *))&v8[v5[15]])(&v66);
      unint64_t v54 = v53;
      uint64_t v64 = sub_10000235C(v52, v53, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v54);
      sub_1000225EC((uint64_t)v8, (uint64_t *)&unk_10040FEC0);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Successfully updated %s to %s", (uint8_t *)v49, 0x16u);
      uint64_t v55 = v61;
      swift_arrayDestroy(v61, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      sub_1000225EC((uint64_t)v11, (uint64_t *)&unk_10040FEC0);
      sub_1000225EC((uint64_t)v8, (uint64_t *)&unk_10040FEC0);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v23, v63);
  }

uint64_t sub_10021BDD8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v67 = sub_100002274((uint64_t *)&unk_10040FE60);
  uint64_t v6 = __chkstk_darwin(v67);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t *)((char *)&v59 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v66 = (unint64_t)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v65 = (os_log_s *)((char *)&v59 - v17);
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v26 = (char *)&v59 - v23;
  uint64_t v63 = v25;
  uint64_t v64 = v22;
  if (a1)
  {
    uint64_t v62 = (char *)(a2 >> 40);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v59 - v23, v3 + *(int *)(v67 + 36), v24);
    sub_1000226B0(v3, (uint64_t)v65, (uint64_t *)&unk_10040FE60);
    sub_1000226B0(v3, v66, (uint64_t *)&unk_10040FE60);
    __int16 v70 = a2;
    char v71 = BYTE2(a2);
    char v72 = BYTE3(a2);
    char v73 = BYTE4(a2);
    char v74 = (char)v62;
    sub_1000226B0(v3, (uint64_t)v14, (uint64_t *)&unk_10040FE60);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v27 = swift_errorRetain(a1);
    uint64_t v62 = v26;
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(42LL, -1LL);
      uint64_t v60 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v61 = swift_slowAlloc(96LL, -1LL);
      uint64_t v69 = v61;
      *(_DWORD *)uint64_t v30 = 136315906;
      os_log_t v31 = v65;
      uint64_t v32 = *(void *)v65;
      unint64_t v33 = *((void *)v65 + 1);
      swift_bridgeObjectRetain(v33);
      uint64_t v68 = sub_10000235C(v32, v33, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v33);
      sub_1000225EC((uint64_t)v31, (uint64_t *)&unk_10040FE60);
      *(_WORD *)(v30 + 12)  = 2080;
      uint64_t v65 = v28;
      uint64_t v34 = (uint64_t)v14;
      uint64_t v36 = v66;
      uint64_t v35 = v67;
      uint64_t v37 = (*(uint64_t (**)(__int16 *))(v66 + *(int *)(v67 + 60)))(&v70);
      unint64_t v39 = v38;
      uint64_t v68 = sub_10000235C(v37, v38, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v39);
      sub_1000225EC(v36, (uint64_t *)&unk_10040FE60);
      *(_WORD *)(v30 + 22)  = 2080;
      uint64_t v40 = (*(uint64_t (**)(uint64_t))(v34 + *(int *)(v35 + 60)))(v34 + *(int *)(v35 + 40));
      unint64_t v42 = v41;
      uint64_t v68 = sub_10000235C(v40, v41, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v42);
      sub_1000225EC(v34, (uint64_t *)&unk_10040FE60);
      *(_WORD *)(v30 + 32)  = 2112;
      swift_errorRetain(a1);
      uint64_t v43 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v68 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      uint64_t v44 = v60;
      *uint64_t v60 = v43;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      os_log_t v45 = v65;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v29,  "Failed to update %s to %s (from %s) because %@",  (uint8_t *)v30,  0x2Au);
      uint64_t v46 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v44, 1LL, v46);
      swift_slowDealloc(v44, -1LL, -1LL);
      uint64_t v47 = v61;
      swift_arrayDestroy(v61, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      sub_1000225EC((uint64_t)v65, (uint64_t *)&unk_10040FE60);
      sub_1000225EC(v66, (uint64_t *)&unk_10040FE60);
      sub_1000225EC((uint64_t)v14, (uint64_t *)&unk_10040FE60);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v62, v64);
  }

  else
  {
    unint64_t v66 = a2 >> 40;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v21, v3 + *(int *)(v67 + 36), v24);
    sub_1000226B0(v3, (uint64_t)v11, (uint64_t *)&unk_10040FE60);
    uint64_t v48 = sub_1000226B0(v3, (uint64_t)v8, (uint64_t *)&unk_10040FE60);
    __int16 v70 = a2;
    char v71 = BYTE2(a2);
    char v72 = BYTE3(a2);
    char v73 = BYTE4(a2);
    char v74 = v66;
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc(22LL, -1LL);
      uint64_t v52 = swift_slowAlloc(64LL, -1LL);
      uint64_t v69 = v52;
      *(_DWORD *)uint64_t v51 = 136315394;
      uint64_t v53 = *v11;
      unint64_t v54 = v11[1];
      swift_bridgeObjectRetain(v54);
      uint64_t v68 = sub_10000235C(v53, v54, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v54);
      sub_1000225EC((uint64_t)v11, (uint64_t *)&unk_10040FE60);
      *(_WORD *)(v51 + 12)  = 2080;
      uint64_t v55 = (*(uint64_t (**)(__int16 *))&v8[*(int *)(v67 + 60)])(&v70);
      unint64_t v57 = v56;
      uint64_t v68 = sub_10000235C(v55, v56, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
      swift_bridgeObjectRelease(v57);
      sub_1000225EC((uint64_t)v8, (uint64_t *)&unk_10040FE60);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Successfully updated %s to %s", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy(v52, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
      sub_1000225EC((uint64_t)v11, (uint64_t *)&unk_10040FE60);
      sub_1000225EC((uint64_t)v8, (uint64_t *)&unk_10040FE60);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v21, v64);
  }

uint64_t sub_10021C4C8(uint64_t a1, uint64_t a2)
{
  __int128 v5 = (int *)sub_100002274(&qword_10040BDC0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t *)((char *)&v57 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v57 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v57 - v18);
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v62 = v27;
  uint64_t v63 = v24;
  if (a1)
  {
    uint64_t v28 = (char *)&v57 - v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v57 - v25, v2 + v5[9], v26);
    sub_1000226B0(v2, (uint64_t)v19, &qword_10040BDC0);
    sub_1000226B0(v2, (uint64_t)v17, &qword_10040BDC0);
    int v66 = a2;
    char v67 = BYTE4(a2) & 1;
    sub_1000226B0(v2, (uint64_t)v14, &qword_10040BDC0);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v29 = swift_errorRetain(a1);
    uint64_t v61 = (uint64_t)v28;
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc(42LL, -1LL);
      uint64_t v59 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v60 = swift_slowAlloc(96LL, -1LL);
      uint64_t v65 = v60;
      *(_DWORD *)uint64_t v32 = 136315906;
      os_log_t v58 = v30;
      uint64_t v33 = *v19;
      unint64_t v34 = v19[1];
      swift_bridgeObjectRetain(v34);
      uint64_t v64 = sub_10000235C(v33, v34, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v34);
      sub_1000225EC((uint64_t)v19, &qword_10040BDC0);
      *(_WORD *)(v32 + 12)  = 2080;
      uint64_t v35 = (*(uint64_t (**)(int *))&v17[v5[15]])(&v66);
      unint64_t v37 = v36;
      uint64_t v64 = sub_10000235C(v35, v36, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v37);
      sub_1000225EC((uint64_t)v17, &qword_10040BDC0);
      *(_WORD *)(v32 + 22)  = 2080;
      uint64_t v38 = (*(uint64_t (**)(char *))&v14[v5[15]])(&v14[v5[10]]);
      unint64_t v40 = v39;
      uint64_t v64 = sub_10000235C(v38, v39, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v40);
      sub_1000225EC((uint64_t)v14, &qword_10040BDC0);
      *(_WORD *)(v32 + 32)  = 2112;
      swift_errorRetain(a1);
      uint64_t v41 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v64 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      unint64_t v42 = v59;
      *uint64_t v59 = v41;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      os_log_t v43 = v58;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  v31,  "Failed to update %s to %s (from %s) because %@",  (uint8_t *)v32,  0x2Au);
      uint64_t v44 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v42, 1LL, v44);
      swift_slowDealloc(v42, -1LL, -1LL);
      uint64_t v45 = v60;
      swift_arrayDestroy(v60, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      sub_1000225EC((uint64_t)v19, &qword_10040BDC0);
      sub_1000225EC((uint64_t)v17, &qword_10040BDC0);
      sub_1000225EC((uint64_t)v14, &qword_10040BDC0);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v23, v2 + v5[9], v26);
    sub_1000226B0(v2, (uint64_t)v11, &qword_10040BDC0);
    uint64_t v46 = sub_1000226B0(v2, (uint64_t)v8, &qword_10040BDC0);
    int v66 = a2;
    char v67 = BYTE4(a2) & 1;
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      uint64_t v61 = swift_slowAlloc(64LL, -1LL);
      uint64_t v65 = v61;
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v51 = *v11;
      unint64_t v50 = v11[1];
      swift_bridgeObjectRetain(v50);
      uint64_t v64 = sub_10000235C(v51, v50, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v50);
      sub_1000225EC((uint64_t)v11, &qword_10040BDC0);
      *(_WORD *)(v49 + 12)  = 2080;
      uint64_t v52 = (*(uint64_t (**)(int *))&v8[v5[15]])(&v66);
      unint64_t v54 = v53;
      uint64_t v64 = sub_10000235C(v52, v53, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v54);
      sub_1000225EC((uint64_t)v8, &qword_10040BDC0);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Successfully updated %s to %s", (uint8_t *)v49, 0x16u);
      uint64_t v55 = v61;
      swift_arrayDestroy(v61, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      sub_1000225EC((uint64_t)v11, &qword_10040BDC0);
      sub_1000225EC((uint64_t)v8, &qword_10040BDC0);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v23, v63);
  }

uint64_t sub_10021CB44(uint64_t a1, uint64_t a2)
{
  __int128 v5 = (int *)sub_100002274(&qword_10040BDC8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t *)((char *)&v59 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v59 - v18);
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v64 = v27;
  uint64_t v65 = v24;
  if (a1)
  {
    uint64_t v28 = (char *)&v59 - v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v59 - v25, v2 + v5[9], v26);
    sub_1000226B0(v2, (uint64_t)v19, &qword_10040BDC8);
    sub_1000226B0(v2, (uint64_t)v17, &qword_10040BDC8);
    uint64_t v68 = a2;
    sub_1000226B0(v2, (uint64_t)v14, &qword_10040BDC8);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a1);
    uint64_t v29 = swift_bridgeObjectRetain(a2);
    uint64_t v63 = (uint64_t)v28;
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc(42LL, -1LL);
      uint64_t v60 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v62 = swift_slowAlloc(96LL, -1LL);
      uint64_t v67 = v62;
      *(_DWORD *)uint64_t v33 = 136315906;
      int v61 = v32;
      os_log_t v59 = v30;
      uint64_t v34 = *v19;
      unint64_t v35 = v19[1];
      swift_bridgeObjectRetain(v35);
      uint64_t v66 = sub_10000235C(v34, v35, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(v35);
      sub_1000225EC((uint64_t)v19, &qword_10040BDC8);
      *(_WORD *)(v33 + 12)  = 2080;
      uint64_t v36 = (*(uint64_t (**)(uint64_t *))&v17[v5[15]])(&v68);
      unint64_t v38 = v37;
      uint64_t v66 = sub_10000235C(v36, v37, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v38);
      sub_1000225EC((uint64_t)v17, &qword_10040BDC8);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v33 + 22)  = 2080;
      uint64_t v39 = (*(uint64_t (**)(char *))&v14[v5[15]])(&v14[v5[10]]);
      unint64_t v41 = v40;
      uint64_t v66 = sub_10000235C(v39, v40, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(v41);
      sub_1000225EC((uint64_t)v14, &qword_10040BDC8);
      *(_WORD *)(v33 + 32)  = 2112;
      swift_errorRetain(a1);
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v66 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      os_log_t v43 = v60;
      *uint64_t v60 = v42;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      os_log_t v44 = v59;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  (os_log_type_t)v61,  "Failed to update %s to %s (from %s) because %@",  (uint8_t *)v33,  0x2Au);
      uint64_t v45 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v43, 1LL, v45);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v46 = v62;
      swift_arrayDestroy(v62, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      sub_1000225EC((uint64_t)v19, &qword_10040BDC8);
      swift_bridgeObjectRelease(a2);
      sub_1000225EC((uint64_t)v17, &qword_10040BDC8);
      swift_bridgeObjectRelease(a2);
      sub_1000225EC((uint64_t)v14, &qword_10040BDC8);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v23, v2 + v5[9], v26);
    sub_1000226B0(v2, (uint64_t)v11, &qword_10040BDC8);
    sub_1000226B0(v2, (uint64_t)v8, &qword_10040BDC8);
    uint64_t v68 = a2;
    uint64_t v47 = swift_bridgeObjectRetain_n(a2, 2LL);
    os_log_type_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.default.getter();
    int v50 = v49;
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v51 = swift_slowAlloc(22LL, -1LL);
      uint64_t v63 = swift_slowAlloc(64LL, -1LL);
      uint64_t v67 = v63;
      *(_DWORD *)uint64_t v51 = 136315394;
      LODWORD(v62)  = v50;
      uint64_t v53 = *v11;
      unint64_t v52 = v11[1];
      swift_bridgeObjectRetain(v52);
      uint64_t v66 = sub_10000235C(v53, v52, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(v52);
      sub_1000225EC((uint64_t)v11, &qword_10040BDC8);
      *(_WORD *)(v51 + 12)  = 2080;
      uint64_t v54 = (*(uint64_t (**)(uint64_t *))&v8[v5[15]])(&v68);
      unint64_t v56 = v55;
      uint64_t v66 = sub_10000235C(v54, v55, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v56);
      sub_1000225EC((uint64_t)v8, &qword_10040BDC8);
      swift_bridgeObjectRelease(v68);
      _os_log_impl( (void *)&_mh_execute_header,  v48,  (os_log_type_t)v62,  "Successfully updated %s to %s",  (uint8_t *)v51,  0x16u);
      uint64_t v57 = v63;
      swift_arrayDestroy(v63, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
      sub_1000225EC((uint64_t)v11, &qword_10040BDC8);
      swift_bridgeObjectRelease(a2);
      sub_1000225EC((uint64_t)v8, &qword_10040BDC8);

      swift_bridgeObjectRelease(a2);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v23, v65);
  }

uint64_t sub_10021D218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v79 = a2;
  uint64_t v84 = *(void *)(a3 + 16);
  uint64_t v83 = *(void *)(v84 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v78 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v73 - v9;
  uint64_t v82 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (uint64_t *)((char *)&v73 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v73 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v73 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (uint64_t *)((char *)&v73 - v24);
  uint64_t v26 = type metadata accessor for Logger(0LL);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v27);
  v80  = v33;
  uint64_t v81 = v30;
  if (a1)
  {
    uint64_t v34 = (char *)&v73 - v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)&v73 - v31, v3 + *(int *)(a3 + 36), v32);
    unint64_t v35 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v82 + 16);
    v35(v25, v3, a3);
    v35((uint64_t *)v23, v3, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v10, v79, v84);
    v35((uint64_t *)v20, v3, a3);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v36 = swift_errorRetain(a1);
    uint64_t v79 = (uint64_t)v34;
    unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    int v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v40 = swift_slowAlloc(42LL, -1LL);
      __int128 v76 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v78 = (char *)swift_slowAlloc(96LL, -1LL);
      unint64_t v86 = v78;
      *(_DWORD *)uint64_t v40 = 136315906;
      int v77 = v39;
      os_log_t v75 = v37;
      uint64_t v42 = *v25;
      unint64_t v41 = v25[1];
      swift_bridgeObjectRetain(v41);
      uint64_t v85 = sub_10000235C(v42, v41, (uint64_t *)&v86);
      char v74 = (uint64_t *)&v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
      swift_bridgeObjectRelease(v41);
      os_log_t v43 = *(void (**)(uint64_t *, uint64_t))(v82 + 8);
      v43(v25, a3);
      *(_WORD *)(v40 + 12)  = 2080;
      uint64_t v44 = (*(uint64_t (**)(char *))&v23[*(int *)(a3 + 60)])(v10);
      unint64_t v46 = v45;
      uint64_t v85 = sub_10000235C(v44, v45, (uint64_t *)&v86);
      uint64_t v47 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v74);
      swift_bridgeObjectRelease(v46);
      v43((uint64_t *)v23, a3);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v10, v84);
      *(_WORD *)(v40 + 22)  = 2080;
      uint64_t v48 = (*(uint64_t (**)(char *))&v20[*(int *)(a3 + 60)])(&v20[*(int *)(a3 + 40)]);
      unint64_t v50 = v49;
      uint64_t v85 = sub_10000235C(v48, v49, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v47);
      swift_bridgeObjectRelease(v50);
      v43((uint64_t *)v20, a3);
      *(_WORD *)(v40 + 32)  = 2112;
      swift_errorRetain(a1);
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v85 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v47);
      unint64_t v52 = v76;
      *__int128 v76 = v51;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      os_log_t v53 = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  (os_log_type_t)v77,  "Failed to update %s to %s (from %s) because %@",  (uint8_t *)v40,  0x2Au);
      uint64_t v54 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v52, 1LL, v54);
      swift_slowDealloc(v52, -1LL, -1LL);
      unint64_t v55 = v78;
      swift_arrayDestroy(v78, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      __int16 v70 = *(void (**)(uint64_t *, uint64_t))(v82 + 8);
      v70(v25, a3);
      v70((uint64_t *)v23, a3);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v10, v84);
      v70((uint64_t *)v20, a3);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v29, v3 + *(int *)(a3 + 36), v32);
    unint64_t v56 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v82 + 16);
    v56(v17, v3, a3);
    v56((uint64_t *)v14, v3, a3);
    uint64_t v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 16))(v78, v79, v84);
    os_log_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.default.getter();
    int v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v61 = swift_slowAlloc(22LL, -1LL);
      uint64_t v79 = swift_slowAlloc(64LL, -1LL);
      unint64_t v86 = (char *)v79;
      *(_DWORD *)uint64_t v61 = 136315394;
      int v77 = v60;
      uint64_t v63 = *v17;
      unint64_t v62 = v17[1];
      swift_bridgeObjectRetain(v62);
      uint64_t v85 = sub_10000235C(v63, v62, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
      swift_bridgeObjectRelease(v62);
      uint64_t v64 = *(void (**)(uint64_t *, uint64_t))(v82 + 8);
      v64(v17, a3);
      *(_WORD *)(v61 + 12)  = 2080;
      uint64_t v65 = v78;
      uint64_t v66 = (*(uint64_t (**)(char *))&v14[*(int *)(a3 + 60)])(v78);
      unint64_t v68 = v67;
      uint64_t v85 = sub_10000235C(v66, v67, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
      swift_bridgeObjectRelease(v68);
      v64((uint64_t *)v14, a3);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v65, v84);
      _os_log_impl( (void *)&_mh_execute_header,  v58,  (os_log_type_t)v77,  "Successfully updated %s to %s",  (uint8_t *)v61,  0x16u);
      uint64_t v69 = v79;
      swift_arrayDestroy(v79, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    else
    {
      char v72 = *(void (**)(uint64_t *, uint64_t))(v82 + 8);
      v72(v17, a3);
      v72((uint64_t *)v14, a3);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v78, v84);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v29, v81);
  }

void (*MutableDriverProperty.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  __int128 v5 = malloc(0x38uLL);
  *a1  = v5;
  *__int128 v5 = a2;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2]  = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3]  = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4]  = malloc(v8);
  uint64_t v9 = malloc(v8);
  uint64_t v10 = *(void (**)(void))(v7 + 16);
  v5[5]  = v9;
  v5[6]  = v10;
  v10();
  return sub_10021D9D4;
}

void sub_10021D9D4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    uint64_t v5 = *(void *)(v2 + 24);
    char v4 = *(void **)(v2 + 32);
    uint64_t v6 = *(void *)(v2 + 16);
    uint64_t v7 = *(void *)v2;
    (*(void (**)(void *, void *, uint64_t))(v2 + 48))(v4, v3, v6);
    sub_100220A00((uint64_t)v4, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v5 + 8);
    v8(v4, v6);
    v8(v3, v6);
  }

  else
  {
    char v4 = *(void **)(v2 + 32);
    uint64_t v3 = *(void **)(v2 + 40);
    uint64_t v9 = *(void *)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    sub_100220A00((uint64_t)v3, *(void *)v2);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v3, v9);
  }

  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t MutableDriverProperty.updated(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Optional(0LL, v5);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v5) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v2 + *(int *)(a2 + 40), v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v2 + *(int *)(a2 + 40), v13, v5);
}

Swift::Void __swiftcall MutableDriverProperty.restore()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *((void *)v0 - 1);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v6 = (char *)&v28 - v5;
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v28 - v7);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __chkstk_darwin();
  uint64_t v30 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v28 - v11;
  (*(void (**)(uint64_t))(v1 + v3[11]))(v1 + v3[10]);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v12, v1 + v3[9], v32);
  uint64_t v13 = *(void (**)(uint64_t *, uint64_t, int *))(v4 + 16);
  v13(v8, v2, v3);
  uint64_t v14 = ((uint64_t (*)(char *, uint64_t, int *))v13)(v6, v2, v3);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    LODWORD(v29)  = v17;
    uint64_t v19 = v18;
    uint64_t v30 = (char *)swift_slowAlloc(64LL, -1LL);
    v34[0]  = (uint64_t)v30;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v21 = *v8;
    unint64_t v20 = v8[1];
    swift_bridgeObjectRetain(v20);
    uint64_t v33 = sub_10000235C(v21, v20, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
    swift_bridgeObjectRelease(v20);
    uint64_t v22 = *(void (**)(uint64_t *, int *))(v4 + 8);
    v22(v8, v3);
    *(_WORD *)(v19 + 12)  = 2080;
    uint64_t v23 = (*(uint64_t (**)(char *))&v6[v3[15]])(&v6[v3[10]]);
    unint64_t v25 = v24;
    uint64_t v33 = sub_10000235C(v23, v24, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
    swift_bridgeObjectRelease(v25);
    v22((uint64_t *)v6, v3);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  (os_log_type_t)v29,  "Successfully restored %s to %s after a reset",  (uint8_t *)v19,  0x16u);
    uint64_t v26 = v30;
    swift_arrayDestroy(v30, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    uint64_t v27 = *(void (**)(uint64_t *, int *))(v4 + 8);
    v27(v8, v3);
    v27((uint64_t *)v6, v3);
  }

  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
}

uint64_t (*ObservableWiFiProperty.projectedValue.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x30uLL);
  *a1  = v5;
  *uint64_t v5 = a2;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  v5[2]  = v6;
  size_t v7 = *(void *)(v6 + 64);
  v5[3]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  uint64_t v9 = *(void (**)(void))(v6 + 16);
  v5[4]  = v8;
  v5[5]  = v9;
  v9();
  return sub_10021E208;
}

uint64_t MutableDriverProperty.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v3 = v7;
  uint64_t v4 = sub_10002278C(v6);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v4, v2, v3);
  return Mirror.init(reflecting:)(v6);
}

uint64_t MutableDriverProperty<>.description.getter(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(*(void *)(a1 + 16), a2);
}

uint64_t sub_10021E29C(uint64_t a1, uint64_t a2)
{
  return MutableDriverProperty<>.description.getter(a1, *(void *)(a2 - 8));
}

uint64_t MutableDriverProperty<>.debugDescription.getter(uint64_t a1)
{
  return dispatch thunk of CustomDebugStringConvertible.debugDescription.getter(*(void *)(a1 + 16));
}

uint64_t sub_10021E2CC(uint64_t a1)
{
  return MutableDriverProperty<>.debugDescription.getter(a1);
}

uint64_t WiFiPropertyUpdateRegistration.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t WiFiPropertyUpdateRegistration.__allocating_init(cancellationHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  UUID.init()();
  uint64_t v6 = (void *)(v5 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  *uint64_t v6 = a1;
  v6[1]  = a2;
  return v5;
}

uint64_t WiFiPropertyUpdateRegistration.init(cancellationHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  *uint64_t v5 = a1;
  v5[1]  = a2;
  return v2;
}

uint64_t WiFiPropertyUpdateRegistration.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_release(*(void *)(v2 + 8));
  return v1;
}

uint64_t WiFiPropertyUpdateRegistration.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_release(*(void *)(v2 + 8));
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t WiFiPropertyUpdateRegistration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

uint64_t static WiFiPropertyUpdateRegistration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static UUID.== infix(_:_:)( a1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id,  a2 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id);
}

Swift::Int WiFiPropertyUpdateRegistration.hashValue.getter()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_10021E5A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

Swift::Int sub_10021E5EC()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_10021E668(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_10021E6D4(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10021E718(void *a1, void *a2)
{
  return static UUID.== infix(_:_:)( *a1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id,  *a2 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id);
}

void sub_10021E734()
{
}

uint64_t sub_10021E760()
{
  return swift_release(*(void *)(v0 + qword_10040C0F8 + 8));
}

uint64_t sub_10021E774()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_release(*(void *)(v2 + 8));
  swift_release(*(void *)(v1 + qword_10040C0F8 + 8));
  return v1;
}

uint64_t sub_10021E7F8()
{
  uint64_t v0 = sub_10021E774();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t *sub_10021E818()
{
  return sub_10021E848();
}

uint64_t *sub_10021E848()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v4 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken( 0LL,  *(void *)(v1 + 80),  *(void *)(v1 + 88),  v3);
  uint64_t v5 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v0[2]  = Dictionary.init()(v2, v4, v5);
  return v0;
}

uint64_t sub_10021E8C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v6 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t (**)(char *))&v42[-v8];
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t (**)(char *))&v42[-v10];
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v42[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v1 + *(int *)(a1 + 52), v12);
  os_log_type_t v16 = *(void (**)(uint64_t (**)(char *), uint64_t, uint64_t))(v3 + 16);
  v16(v11, v1, a1);
  v16(v9, v1, a1);
  uint64_t v17 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v16)(v6, v1, a1);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v12;
    uint64_t v22 = v21;
    uint64_t v45 = swift_slowAlloc(64LL, -1LL);
    uint64_t v51 = v45;
    *(_DWORD *)uint64_t v22 = 136315650;
    os_log_t v44 = v18;
    uint64_t v23 = (uint64_t *)((char *)v11 + *(int *)(a1 + 48));
    uint64_t v46 = v13;
    int v43 = v20;
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    swift_bridgeObjectRetain(v24);
    uint64_t v49 = sub_10000235C(v25, v24, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
    swift_bridgeObjectRelease(v24);
    uint64_t v26 = *(void (**)(uint64_t (**)(char *), uint64_t))(v3 + 8);
    v26(v11, a1);
    *(_WORD *)(v22 + 12)  = 2080;
    uint64_t v27 = (*v9)((char *)v9 + *(int *)(a1 + 44));
    unint64_t v29 = v28;
    uint64_t v49 = sub_10000235C(v27, v28, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
    swift_bridgeObjectRelease(v29);
    v26(v9, a1);
    *(_WORD *)(v22 + 22)  = 2048;
    uint64_t v30 = *((void *)v6 + 2);
    swift_beginAccess(v30 + 16, &v49, 0LL, 0LL);
    uint64_t v31 = *(void *)(v30 + 16);
    uint64_t v32 = type metadata accessor for UUID(0LL);
    uint64_t v34 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken( 0LL,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  v33);
    uint64_t v35 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = swift_bridgeObjectRetain(v31);
    uint64_t v37 = Dictionary.count.getter(v36, v32, v34, v35);
    swift_bridgeObjectRelease(v31);
    v26((uint64_t (**)(char *))v6, a1);
    uint64_t v48 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    os_log_t v38 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v43,  "Updated %s to %s, will notify %ld observers",  (uint8_t *)v22,  0x20u);
    uint64_t v39 = v45;
    swift_arrayDestroy(v45, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v46 + 8))(v15, v47);
  }

  else
  {
    unint64_t v41 = *(void (**)(uint64_t (**)(char *), uint64_t))(v3 + 8);
    v41((uint64_t (**)(char *))v6, a1);
    v41(v11, a1);
    v41(v9, a1);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  }

uint64_t ObservableWiFiProperty.name.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 48));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)@<X0>( uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(char *)@<X5>, uint64_t (*a7)(char *)@<X6>, uint64_t a8@<X7>, uint64_t (**a9)(char *)@<X8>, uint64_t a10)
{
  unint64_t v47 = a4;
  uint64_t v48 = a7;
  uint64_t v54 = a6;
  uint64_t v16 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations(0LL, v20, a10, v19);
  swift_allocObject(v21, 24LL, 7LL);
  a9[2]  = (uint64_t (*)(char *))sub_10021E848();
  a9[3]  = a1;
  uint64_t v23 = (int *)type metadata accessor for ObservableWiFiProperty(0LL, a8, a10, v22);
  unint64_t v24 = (uint64_t *)((char *)a9 + v23[12]);
  uint64_t v46 = a3;
  *unint64_t v24 = a3;
  unint64_t v25 = v47;
  v24[1]  = v47;
  uint64_t v26 = (char *)a9 + v23[13];
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v51 = *(void *)(v27 - 8);
  uint64_t v52 = v27;
  (*(void (**)(char *, uint64_t))(v51 + 16))(v26, a5);
  unint64_t v28 = v48;
  *a9  = v54;
  a9[1]  = v28;
  unint64_t v29 = (char *)a9 + v23[11];
  uint64_t v50 = v16;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v31 = v28;
  v30(v29, a2, a8);
  uint64_t v49 = v18;
  v30(v18, a2, a8);
  swift_retain_n(v31, 3LL);
  swift_bridgeObjectRetain_n(v25, 2LL);
  os_log_t v53 = a1;
  uint64_t v32 = swift_retain();
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc(22LL, -1LL);
    uint64_t v36 = swift_slowAlloc(64LL, -1LL);
    uint64_t v45 = a2;
    uint64_t v37 = v36;
    uint64_t v56 = v36;
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain(v25);
    uint64_t v55 = sub_10000235C(v46, v25, &v56);
    uint64_t v46 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease_n(v25, 3LL);
    *(_WORD *)(v35 + 12)  = 2080;
    os_log_t v38 = v49;
    uint64_t v39 = v54(v49);
    unint64_t v41 = v40;
    uint64_t v55 = sub_10000235C(v39, v40, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_release_n(v31, 2LL);
    swift_bridgeObjectRelease(v41);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v50 + 8);
    v42(v38, a8);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Initialized value for %s to %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v37, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);

    swift_release(v53);
    swift_release(v31);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v46, v52);
    return ((uint64_t (*)(uint64_t, uint64_t))v42)(v45, a8);
  }

  else
  {

    swift_release(v53);
    swift_release_n(v31, 3LL);
    os_log_t v44 = *(void (**)(char *, uint64_t))(v50 + 8);
    v44(v49, a8);
    swift_bridgeObjectRelease_n(v25, 2LL);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(a5, v52);
    return ((uint64_t (*)(uint64_t, uint64_t))v44)(a2, a8);
  }

void ObservableWiFiProperty.wrappedValue.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t ObservableWiFiProperty.wrappedValue.setter(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - v11;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v3 + 24) + 16LL));
  uint64_t v13 = v3 + *(int *)(a2 + 44);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v10, v13, v6);
  uint64_t v15 = v5;
  uint64_t v37 = *(void *)(a2 + 24);
  LOBYTE(v5)  = dispatch thunk of static Equatable.== infix(_:_:)(v5, v10, v6, v37);
  os_log_t v38 = *(void (**)(char *, uint64_t))(v7 + 8);
  v38(v10, v6);
  if ((v5 & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v3 + 24) + 16LL));
    return ((uint64_t (*)(char *, uint64_t))v38)(v15, v6);
  }

  else
  {
    uint64_t v36 = v12;
    v14(v12, v13, v6);
    uint64_t v17 = v15;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 24))(v3 + *(int *)(a2 + 44), v15, v6);
    sub_10021E8C0(a2);
    uint64_t v18 = *(void *)(v3 + 16);
    swift_beginAccess(v18 + 16, v40, 0LL, 0LL);
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v20 = type metadata accessor for UUID(0LL);
    uint64_t v21 = v37;
    uint64_t v23 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken(0LL, v6, v37, v22);
    uint64_t v24 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = NANBitmap.Channel.operatingClass.getter(v19);
    uint64_t v39 = v25;
    __chkstk_darwin(v25);
    *(&v36 - 2)  = (char *)v6;
    *(&v36 - 1)  = (char *)v21;
    uint64_t v26 = type metadata accessor for Dictionary.Values(0LL, v20, v23, v24);
    FunctionTypeMetadata2  = swift_getFunctionTypeMetadata2(67108866LL, v6, v6, &type metadata for () + 1);
    swift_bridgeObjectRetain(v25);
    WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v26);
    uint64_t v29 = Sequence.compactMap<A>(_:)(sub_100220D88, &v36 - 4, v26, FunctionTypeMetadata2, WitnessTable);
    swift_bridgeObjectRelease(v39);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v3 + 24) + 16LL));
    uint64_t v39 = v29;
    __chkstk_darwin(v30);
    *(&v36 - 4)  = (char *)v6;
    *(&v36 - 3)  = (char *)v21;
    uint64_t v31 = v36;
    *(&v36 - 2)  = v36;
    *(&v36 - 1)  = v17;
    uint64_t v32 = v17;
    uint64_t v33 = type metadata accessor for Array(0LL, FunctionTypeMetadata2);
    uint64_t v34 = swift_getWitnessTable(&protocol conformance descriptor for [A], v33);
    Sequence.forEach(_:)(sub_100220DA0, &v36 - 6, v33, v34);
    swift_bridgeObjectRelease(v39);
    uint64_t v35 = (uint64_t (*)(char *, uint64_t))v38;
    v38(v32, v6);
    return v35(v31, v6);
  }

void *sub_10021F38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t result = (void *)swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v10 = *(void *)((char *)result + qword_10040C0F8);
    uint64_t v9 = *(void *)((char *)result + qword_10040C0F8 + 8);
    swift_retain();
    swift_release(v8);
    uint64_t result = (void *)swift_allocObject(&unk_1003F1710, 48LL, 7LL);
    result[2]  = a2;
    result[3]  = a3;
    result[4]  = v10;
    result[5]  = v9;
    uint64_t v11 = sub_100223E34;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  *a4  = v11;
  a4[1]  = (uint64_t (*)())result;
  return result;
}

void (*ObservableWiFiProperty.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1  = v5;
  *uint64_t v5 = a2;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2]  = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3]  = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4]  = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5]  = v9;
  ObservableWiFiProperty.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_10021F4A8;
}

void sub_10021F4A8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    ObservableWiFiProperty.wrappedValue.setter(v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }

  else
  {
    ObservableWiFiProperty.wrappedValue.setter((char *)(*a1)[5], *v2);
  }

  free(v4);
  free(v3);
  free(v2);
}

uint64_t _s7CoreP2P22ObservableWiFiPropertyV14projectedValueACyxGvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t))(v5 + 8))(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, a1, a2);
}

void sub_10021F588(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = (void *)v2[4];
    uint64_t v5 = v2[2];
    uint64_t v4 = (void *)v2[3];
    uint64_t v7 = *v2;
    uint64_t v6 = (void *)v2[1];
    ((void (*)(void *, void *, void))v2[5])(v4, v3, *v2);
    size_t v8 = *(void (**)(void *, uint64_t))(v5 + 8);
    v8(v6, v7);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v6, v4, v7);
    v8(v3, v7);
  }

  else
  {
    uint64_t v4 = (void *)v2[3];
    uint64_t v3 = (void *)v2[4];
    uint64_t v9 = v2[1];
    uint64_t v10 = v2[2];
    uint64_t v11 = *v2;
    (*(void (**)(uint64_t, void))(v10 + 8))(v9, *v2);
    (*(void (**)(uint64_t, void *, uint64_t))(v10 + 32))(v9, v3, v11);
  }

  free(v3);
  free(v4);
  free(v2);
}

uint64_t ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v36 = a6;
  uint64_t v37 = a2;
  uint64_t v34 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = a5;
  uint64_t v14 = *(void *)(a5 + 16);
  uint64_t v15 = *(void *)(a5 + 24);
  v32[1]  = type metadata accessor for ObservableWiFiProperty.Token(0LL, v14, v15, v16);
  uint64_t v17 = (void *)swift_allocObject(&unk_1003F1148, 56LL, 7LL);
  v17[2]  = v14;
  v17[3]  = v15;
  v17[4]  = a1;
  v17[5]  = a3;
  v17[6]  = a4;
  uint64_t v18 = *(void *)(v7 + 16);
  uint64_t v19 = *(void *)(v7 + 24);
  uint64_t v20 = swift_allocObject(&unk_1003F1170, 32LL, 7LL);
  *(void *)(v20 + 16)  = v19;
  *(void *)(v20 + 24)  = v18;
  id v21 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v22 = sub_100220CF0((uint64_t)sub_100220E08, (uint64_t)v17, (uint64_t)sub_100220E44, v20);
  swift_release(v17);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v7 + 24) + 16LL));
  uint64_t v23 = *(void *)(v7 + 16);
  uint64_t v25 = v33;
  uint64_t v24 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))( v33,  v22 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id,  v34);
  swift_retain();
  swift_weakInit(v39, v22);
  swift_release(v22);
  v39[8]  = 0;
  swift_beginAccess(v23 + 16, v38, 33LL, 0LL);
  uint64_t v27 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken(255LL, v14, v15, v26);
  uint64_t v28 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v29 = type metadata accessor for Dictionary(0LL, v24, v27, v28);
  Dictionary.subscript.setter(v39, v25, v29);
  swift_endAccess(v38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v36, v7 + *(int *)(v35 + 44), v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v7 + 24) + 16LL));
  uint64_t v30 = *v37;
  *uint64_t v37 = v22;
  return swift_release(v30);
}

uint64_t sub_10021F88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v40 = a5;
  uint64_t v41 = a7;
  uint64_t v39 = a4;
  uint64_t v46 = a3;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = *(void *)(v12 - 8);
  uint64_t v44 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a6 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = __chkstk_darwin(v13);
  uint64_t v19 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  id v21 = (char *)&v38 - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v22((char *)&v38 - v20, a1, a6);
  v22(v19, a2, a6);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v24 = (v23 + 48) & ~v23;
  uint64_t v25 = (v17 + v23 + v24) & ~v23;
  uint64_t v26 = (char *)swift_allocObject(&unk_1003F16C0, v25 + v17, v23 | 7);
  uint64_t v28 = v40;
  uint64_t v27 = v41;
  *((void *)v26 + 2)  = a6;
  *((void *)v26 + 3)  = v27;
  *((void *)v26 + 4)  = v39;
  *((void *)v26 + 5)  = v28;
  uint64_t v29 = &v26[v24];
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v30(v29, v21, a6);
  v30(&v26[v25], v19, a6);
  aBlock[4]  = sub_100223DA8;
  uint64_t v49 = v26;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F16D8;
  uint64_t v31 = _Block_copy(aBlock);
  uint64_t v32 = swift_retain();
  static DispatchQoS.unspecified.getter(v32);
  unint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v33 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = sub_100002274((uint64_t *)&unk_1004052A0);
  unint64_t v35 = sub_1000022B4();
  uint64_t v36 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v35, v42, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v11, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v36);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
  return swift_release(v49);
}

void sub_10021FB2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a3 + 2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(os_unfair_lock_s **)(a2 + 16);
  os_unfair_lock_lock(v6);
  uint64_t v7 = a1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  swift_beginAccess(v4, v14, 33LL, 0LL);
  uint64_t v8 = type metadata accessor for UUID(255LL);
  uint64_t v10 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken( 255LL,  *(void *)(v5 + 80),  *(void *)(v5 + 88),  v9);
  uint64_t v11 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v12 = type metadata accessor for Dictionary(0LL, v8, v10, v11);
  Dictionary.removeValue(forKey:)(v7, v12);
  uint64_t v13 = type metadata accessor for Optional(0LL, v10);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v15, v13);
  swift_endAccess(v14);
  os_unfair_lock_unlock(v6);
}

void ObservableWiFiProperty.registerForChangesIfNeeded(on:using:valueUpdateHandler:)( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*a2) {
    ObservableWiFiProperty.wrappedValue.getter(a5, a6);
  }
  else {
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t ObservableWiFiProperty.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v3 = v7;
  uint64_t v4 = sub_10002278C(v6);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v4, v2, v3);
  return Mirror.init(reflecting:)(v6);
}

uint64_t ObservableWiFiProperty<>.description.getter(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(*(void *)(a1 + 16), a2);
}

uint64_t sub_10021FCC8(uint64_t a1, uint64_t a2)
{
  return ObservableWiFiProperty<>.description.getter(a1, *(void *)(a2 - 8));
}

uint64_t ObservableWiFiProperty<>.debugDescription.getter(uint64_t a1)
{
  return dispatch thunk of CustomDebugStringConvertible.debugDescription.getter(*(void *)(a1 + 16));
}

uint64_t sub_10021FCF8(uint64_t a1)
{
  return ObservableWiFiProperty<>.debugDescription.getter(a1);
}

void *WiFiInterface.interfaceIndex.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 104LL));
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if ((v3 & 0x1000000000000000LL) != 0 || !(v3 & 0x2000000000000000LL | v2 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(v7, sub_10003BB6C, 0LL);
    return (void *)*(unsigned int *)v7;
  }

  else if ((v3 & 0x2000000000000000LL) != 0)
  {
    *(void *)uint64_t v7 = *v1;
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFFFLL;
    return (void *)if_nametoindex(v7);
  }

  else
  {
    if ((v2 & 0x1000000000000000LL) != 0)
    {
      uint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v4 = _StringObject.sharedUTF8.getter(v2, v3);
    }

    return sub_100052FAC(v4, v5, (void *(*)(uint64_t *__return_ptr))sub_100220E4C);
  }

uint64_t WiFiInterface.description.getter()
{
  uint64_t v12 = _typeName(_:qualified:)(*v0, 0LL);
  v1._countAndFlagsBits  = 91LL;
  v1._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  uint64_t v2 = (void *)((char *)v0 + *(void *)(*v0 + 104LL));
  uint64_t v3 = *v2;
  uint64_t v4 = (void *)v2[1];
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits  = v3;
  v5._object  = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits  = 15453LL;
  v6._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  unint64_t v7 = WiFiInterface.macAddress.getter();
  v8._countAndFlagsBits  = WiFiAddress.description.getter(v7);
  object  = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits  = 62LL;
  v10._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return v12;
}

uint64_t sub_10021FEB0()
{
  return WiFiInterface.description.getter();
}

uint64_t WiFiInterfaceRole.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10021FF10 + 4 * byte_10035C925[a1]))( 0x7274736172666E49LL,  0xEE00657275746375LL);
}

uint64_t sub_10021FF10()
{
  return 1279547201LL;
}

uint64_t sub_10021FF20()
{
  return 5128526LL;
}

uint64_t sub_10021FF30()
{
  return 0x61746144204E414ELL;
}

uint64_t sub_10021FF48()
{
  return 0x6574614C20776F4CLL;
}

uint64_t WiFiInterfaceRole.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10021FFAC + 4 * byte_10035C92A[a1]))( 0x7274736172666E69LL,  0xEE00657275746375LL);
}

uint64_t sub_10021FFAC()
{
  return 1818523489LL;
}

uint64_t sub_10021FFBC()
{
  return 0x67616E614D6E616ELL;
}

uint64_t sub_10021FFE0()
{
  return 0x617461446E616ELL;
}

uint64_t sub_10021FFF8()
{
  return 0x6E6574614C776F6CLL;
}

uint64_t sub_100220014(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002A724(*a1, *a2);
}

void sub_100220020()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_100220078()
{
  return Hasher._finalize()();
}

void sub_100220108()
{
  __asm { BR              X10 }

uint64_t sub_100220150(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

void sub_1002201CC(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_100220220()
{
  return Hasher._finalize()();
}

unint64_t sub_1002202B0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreP2P17WiFiInterfaceRoleO8rawValueACSgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_1002202DC()
{
  return ((uint64_t (*)(void))((char *)sub_100220318 + 4 * byte_10035C93E[*v0]))();
}

void sub_100220318(void *a1@<X8>)
{
  *a1  = 1818523489LL;
  a1[1]  = 0xE400000000000000LL;
}

void sub_10022032C(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14)  = -4864;
}

void sub_100220354(void *a1@<X8>)
{
  *a1  = 0x617461446E616ELL;
  a1[1]  = 0xE700000000000000LL;
}

void sub_100220370(void *a1@<X8>)
{
  *a1  = 0x6E6574614C776F6CLL;
  a1[1]  = 0xEA00000000007963LL;
}

uint64_t sub_100220390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100223CD8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002203EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100223CD8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100220438()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100220474 + 4 * byte_10035C943[*v0]))( 0x7274736172666E49LL,  0xEE00657275746375LL);
}

uint64_t sub_100220474()
{
  return 1279547201LL;
}

uint64_t sub_100220484()
{
  return 5128526LL;
}

uint64_t sub_100220494()
{
  return 0x61746144204E414ELL;
}

uint64_t sub_1002204AC()
{
  return 0x6574614C20776F4CLL;
}

uint64_t WiFiInterfaceLinkState.description.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x7055206B6E694CLL;
  }
  else {
    return 0x776F44206B6E694CLL;
  }
}

uint64_t sub_100220508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100223C94();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100220564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100223C94();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002205B0()
{
  if (*v0) {
    return 0x7055206B6E694CLL;
  }
  else {
    return 0x776F44206B6E694CLL;
  }
}

unint64_t sub_1002205F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = dispatch thunk of Hashable._rawHashValue(seed:)(*(void *)(v4 + 40), a2, a3);
  return sub_100220638(a1, v8, a2, a3);
}

unint64_t sub_100220638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v18 = a1;
  uint64_t v19 = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v12 = v11 & ~v10;
  if (((*(void *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v13 = ~v10;
    uint64_t v14 = *(void *)(v7 + 72);
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(void *)(v5 + 48) + v14 * v12, a3);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v18, a3, *(void *)(v19 + 8));
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
    }

    while (((*(void *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
  }

  return v12;
}

uint64_t sub_100220750(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v5[0]  = 0LL;
  v5[1]  = 0xE000000000000000LL;
  uint64_t v4 = v1;
  uint64_t v2 = sub_100002274(&qword_10040BEA0);
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_1002207A8(int *a1)
{
  __int16 v1 = *((_WORD *)a1 + 2);
  v5[0]  = 0LL;
  v5[1]  = 0xE000000000000000LL;
  int v3 = *a1;
  __int16 v4 = v1;
  _print_unlocked<A, B>(_:_:)( &v3,  v5,  &type metadata for WiFiAddress,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_100220800(char *a1)
{
  char v1 = *a1;
  v4[0]  = 0LL;
  v4[1]  = 0xE000000000000000LL;
  char v3 = v1;
  _print_unlocked<A, B>(_:_:)( &v3,  v4,  &type metadata for WiFiInterfaceLinkState,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v4[0];
}

unint64_t _s7CoreP2P17WiFiInterfaceRoleO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6250, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100220898(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v12 = a1;
  __int16 v4 = (int *)sub_100002274(&qword_10040BDC8);
  uint64_t v5 = v4[10];
  uint64_t v6 = *(void *)(v1 + v5);
  uint64_t v7 = swift_bridgeObjectRetain(v6);
  char v8 = sub_10007FD10(v7, a1);
  uint64_t result = swift_bridgeObjectRelease(v6);
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = (void (**)(uint64_t *))(v2 + v4[12]);
    if (*v10) {
      (*v10)(&v12);
    }
    (*(void (**)(uint64_t *))(v2 + v4[11]))(&v12);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease(v6);
    *(void *)(v2 + v5)  = a1;
    uint64_t v11 = *(void (**)(uint64_t *))(v2 + v4[14]);
    if (v11) {
      v11(&v12);
    }
    return sub_10021CB44(0LL, a1);
  }

  return result;
}

uint64_t sub_100220A00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v2 + *(int *)(v10 + 40);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)(v9, a1, v6, *(void *)(a2 + 24));
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = (void (**)(uint64_t))(v3 + *(int *)(a2 + 48));
    if (*v14) {
      (*v14)(a1);
    }
    (*(void (**)(uint64_t))(v3 + *(int *)(a2 + 44)))(a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v11, a1, v6);
    uint64_t v15 = *(void (**)(uint64_t))(v3 + *(int *)(a2 + 56));
    if (v15) {
      v15(a1);
    }
    return sub_10021D218(0LL, a1, a2);
  }

  return result;
}

uint64_t type metadata accessor for WiFiInterface.NeighborDiscoveryTable( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WiFiInterface.NeighborDiscoveryTable);
}

uint64_t type metadata accessor for WiFiInterface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WiFiInterface);
}

uint64_t sub_100220BA4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100220BC8(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100220BEC(unsigned __int16 *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16));
}

uint64_t sub_100220C18(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_100220C4C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t type metadata accessor for MutableDriverProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MutableDriverProperty);
}

uint64_t sub_100220C7C(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WiFiInterface.NeighborDiscoveryTable.Entry);
}

uint64_t sub_100220CB0(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ObservableWiFiProperty.TokenRegistrations( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableWiFiProperty.TokenRegistrations);
}

uint64_t type metadata accessor for ObservableWiFiProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableWiFiProperty);
}

uint64_t sub_100220CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v10 = (void *)(v9 + qword_10040C0F8);
  *uint64_t v10 = a1;
  v10[1]  = a2;
  uint64_t v11 = swift_retain(a2);
  UUID.init()(v11);
  char v12 = (void *)(v9 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  void *v12 = a3;
  v12[1]  = a4;
  return v9;
}

uint64_t type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ObservableWiFiProperty.TokenRegistrations.WeakToken);
}

void *sub_100220D88@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  return sub_10021F38C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100220DA0(uint64_t (**a1)(void, void))
{
  return (*a1)(*(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for ObservableWiFiProperty.Token( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableWiFiProperty.Token);
}

uint64_t sub_100220DDC()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100220E08(uint64_t a1, uint64_t a2)
{
  return sub_10021F88C(a1, a2, v2[4], v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_100220E18()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100220E44(uint64_t a1)
{
}

void *sub_100220E4C@<X0>(_DWORD *a1@<X8>)
{
  return sub_100052FFC(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100220E64()
{
  return sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100220E90()
{
  return sub_10000AF70( &qword_10040BDD8,  type metadata accessor for WiFiPropertyUpdateRegistration,  (uint64_t)&protocol conformance descriptor for WiFiPropertyUpdateRegistration);
}

uint64_t type metadata accessor for WiFiPropertyUpdateRegistration(uint64_t a1)
{
  uint64_t result = qword_10040BFD8;
  if (!qword_10040BFD8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WiFiPropertyUpdateRegistration);
  }
  return result;
}

unint64_t sub_100220EFC()
{
  unint64_t result = qword_10040BDE0;
  if (!qword_10040BDE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiInterfaceRole,  &type metadata for WiFiInterfaceRole);
    atomic_store(result, (unint64_t *)&qword_10040BDE0);
  }

  return result;
}

unint64_t sub_100220F44()
{
  unint64_t result = qword_10040BDE8[0];
  if (!qword_10040BDE8[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiInterfaceLinkState,  &type metadata for WiFiInterfaceLinkState);
    atomic_store(result, qword_10040BDE8);
  }

  return result;
}

void sub_100220F8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 319LL,  v2,  v3,  &protocol requirements base descriptor for P2PControls);
  if (v5 <= 0x3F)
  {
    v21[0]  = *(void *)(AssociatedTypeWitness - 8) + 64LL;
    v21[1]  = &unk_10035CDC0;
    uint64_t v6 = swift_getAssociatedTypeWitness(319LL, v2, v3, &protocol requirements base descriptor for P2PControls);
    if (v7 <= 0x3F)
    {
      v21[2]  = *(void *)(v6 - 8) + 64LL;
      sub_100221134( 319LL,  &qword_10040BE70,  (uint64_t (*)(void))sub_100220F44,  (uint64_t)&type metadata for WiFiInterfaceLinkState);
      if (v9 <= 0x3F)
      {
        void v21[3] = *(void *)(v8 - 8) + 64LL;
        sub_100221134( 319LL,  &qword_10040BE78,  (uint64_t (*)(void))sub_10021379C,  (uint64_t)&type metadata for WiFiAddress);
        if (v11 <= 0x3F)
        {
          v21[4]  = *(void *)(v10 - 8) + 64LL;
          sub_10022118C(319LL);
          if (v13 <= 0x3F)
          {
            v21[5]  = *(void *)(v12 - 8) + 64LL;
            sub_100221218(319LL);
            if (v16 <= 0x3F)
            {
              v21[6]  = *(void *)(v14 - 8) + 64LL;
              uint64_t v17 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(319LL, v3, v2, v15);
              if (v18 <= 0x3F)
              {
                v21[7]  = *(void *)(v17 - 8) + 64LL;
                uint64_t v19 = type metadata accessor for Logger(319LL);
                if (v20 <= 0x3F)
                {
                  v21[8]  = *(void *)(v19 - 8) + 64LL;
                  swift_initClassMetadata2(a1, 0LL, 9LL, v21, a1 + 96);
                }
              }
            }
          }
        }
      }
    }
  }

void sub_100221134(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (!*a2)
  {
    uint64_t v7 = a3();
    unint64_t v9 = type metadata accessor for MutableDriverProperty(a1, a4, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }

void sub_10022118C(uint64_t a1)
{
  if (!qword_10040BE80)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040BE88);
    uint64_t v3 = sub_100087780( &qword_10040BE90,  &qword_10040BE88,  (void (*)(void))sub_1000EEBAC,  (uint64_t)&protocol conformance descriptor for <A> A?);
    unint64_t v5 = type metadata accessor for MutableDriverProperty(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_10040BE80);
    }
  }

void sub_100221218(uint64_t a1)
{
  if (!qword_10040BE98)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040BEA0);
    uint64_t v3 = sub_100087780( qword_10040BEA8,  &qword_10040BEA0,  (void (*)(void))sub_1000EEBF4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t v5 = type metadata accessor for MutableDriverProperty(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_10040BE98);
    }
  }

uint64_t sub_1002212A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t sub_1002212AC(uint64_t a1)
{
  uint64_t result = swift_getAssociatedTypeWitness( 319LL,  *(void *)(a1 + 24),  *(void *)(a1 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  if (v3 <= 0x3F)
  {
    v5[0]  = *(void *)(result - 8) + 64LL;
    v5[1]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      v5[2]  = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 0LL, 3LL, v5, a1 + 32);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100221350(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 24),  *(void *)(a3 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unsigned int v11 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (((v10 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v10) + *(void *)(v9 + 64) <= 0x18
      ? (BOOL v12 = v11 > 7)
      : (BOOL v12 = 1),
        v12))
  {
    uint64_t v20 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v20 + (((v11 | 7) + 16LL) & ~(unint64_t)(v11 | 7)));
    swift_retain(v20);
  }

  else
  {
    uint64_t v13 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v14 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v15 = (uint64_t *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v16 = *v15;
    *uint64_t v14 = *v15;
    uint64_t v17 = ((unint64_t)v14 + v10 + 8) & ~v10;
    uint64_t v18 = ((unint64_t)v15 + v10 + 8) & ~v10;
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain(v16);
    v19(v17, v18, v13);
  }

  return a1;
}

uint64_t sub_100221498(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a2 + 24),  *(void *)(a2 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, AssociatedTypeWitness);
  unint64_t v5 = (void *)((a1 + *(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRelease(*v5);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))( ((unint64_t)v5 + *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL),  v6);
}

uint64_t sub_100221524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 24),  *(void *)(a3 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v6 + 64) + 7LL;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (uint64_t *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = *v9;
  *uint64_t v8 = *v9;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = ((unint64_t)v8 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v9 + v13 + 8) & ~v13;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain(v10);
  v16(v14, v15, v11);
  return a1;
}

uint64_t sub_1002215F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 24),  *(void *)(a3 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v6 + 64) + 7LL;
  uint64_t v8 = (uint64_t *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (uint64_t *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = *v9;
  uint64_t v11 = *v8;
  *uint64_t v8 = *v9;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 24))( ((unint64_t)v8 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80),  ((unint64_t)v9 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80),  v12);
  return a1;
}

uint64_t sub_1002216B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 24),  *(void *)(a3 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v6 + 64) + 7LL;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v8 = *v9;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))( ((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80),  ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80),  v10);
  return a1;
}

uint64_t sub_100221760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 24),  *(void *)(a3 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v6 + 64) + 7LL;
  uint64_t v8 = (uint64_t *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (uint64_t *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = *v8;
  *uint64_t v8 = *v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 40))( ((unint64_t)v8 + *(unsigned __int8 *)(v12 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  ((unint64_t)v9 + *(unsigned __int8 *)(v12 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  v11);
  return a1;
}

uint64_t sub_100221818(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a3 + 24),  *(void *)(a3 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  if (a2 <= v12) {
    goto LABEL_27;
  }
  unint64_t v15 = ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v14) + *(void *)(v9 + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)(a1 + v15);
      if (!v17) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15)) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v19 < 2)
    {
LABEL_27:
      if ((_DWORD)v7 == v12) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, AssociatedTypeWitness);
      }
      uint64_t v22 = (unint64_t *)((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL);
      if ((v11 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))( ((unint64_t)v22 + v14 + 8) & ~v14,  v10,  v8);
      }
      unint64_t v23 = *v22;
      if (v23 >= 0xFFFFFFFF) {
        LODWORD(v23)  = -1;
      }
      return (v23 + 1);
    }
  }

  int v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15)) {
    goto LABEL_27;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if ((_DWORD)v15)
  {
    else {
      int v21 = 4;
    }
    __asm { BR              X12 }
  }

  return v12 + v20 + 1;
}

void sub_100221A0C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness( 0LL,  *(void *)(a4 + 24),  *(void *)(a4 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver)
                 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v10 = v8;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  if (a3 <= v11)
  {
    unsigned int v13 = 0;
  }

  else if (v12 <= 3)
  {
    unsigned int v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v13 = &dword_100000004;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v13 = 2;
    }

    else
    {
      unsigned int v13 = v15 > 1;
    }
  }

  else
  {
    unsigned int v13 = &_mh_execute_header.magic + 1;
  }

  if (v11 < a2)
  {
    int v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        int v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1  = v16;
          a1[2]  = BYTE2(v16);
        }

        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1  = v16;
        }

        else
        {
          *a1  = v16;
        }
      }
    }

    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1  = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t sub_100221C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48LL);
}

uint64_t sub_100221C90(uint64_t a1)
{
  v5[0]  = &unk_10035CDC0;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[1]  = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
    if (v4 <= 0x3F)
    {
      v5[2]  = *(void *)(result - 8) + 64LL;
      v5[3]  = (char *)&value witness table for () + 64;
      v5[4]  = &unk_10035CE28;
      v5[5]  = &unk_10035CE28;
      v5[6]  = &unk_10035CE28;
      v5[7]  = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 0LL, 8LL, v5, a1 + 32);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100221D40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64) + 7LL;
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((((((((v13 + ((v9 + ((v8 + 16) & ~v8) + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
           + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 23) & 0xFFFFFFFFFFFFFFF8LL)
       + 23) & 0xFFFFFFFFFFFFFFF8LL)
     + 16 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1  = *a2;
    int v17 = (uint64_t *)(v16 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
  }

  else
  {
    uint64_t v18 = v6;
    uint64_t v19 = ~v8;
    uint64_t v20 = a2[1];
    *a1  = *a2;
    a1[1]  = v20;
    uint64_t v42 = a1;
    int v21 = (char *)a1 + v8;
    uint64_t v22 = (char *)a2 + v8;
    uint64_t v23 = (unint64_t)(v21 + 16) & v19;
    uint64_t v24 = (unint64_t)(v22 + 16) & v19;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain(v20);
    v25(v23, v24, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))( (v23 + v9 + v12) & ~v12,  (v24 + v9 + v12) & ~v12,  v10);
    uint64_t v26 = (void *)((v13 + ((v23 + v9 + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v27 = (void *)((v13 + ((v24 + v9 + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1]  = v28;
    unint64_t v29 = ((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v30 = (unint64_t *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    unint64_t v31 = *v30;
    swift_retain(v28);
    if (v31 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
    }

    else
    {
      unint64_t v32 = v30[1];
      *(void *)unint64_t v29 = v31;
      *(void *)(v29 + 8)  = v32;
      swift_retain(v32);
    }

    unint64_t v33 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v34 = ((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    int v17 = v42;
    if (*(void *)v34 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
    }

    else
    {
      uint64_t v35 = *(void *)(v34 + 8);
      *(void *)unint64_t v33 = *(void *)v34;
      *(void *)(v33 + 8)  = v35;
      swift_retain(v35);
    }

    unint64_t v36 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v37 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v37 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
    }

    else
    {
      uint64_t v38 = *(void *)(v37 + 8);
      *(void *)unint64_t v36 = *(void *)v37;
      *(void *)(v36 + 8)  = v38;
      swift_retain(v38);
    }

    uint64_t v39 = (void *)((v37 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v16 = v39[1];
    uint64_t v40 = (void *)((v36 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v40 = *v39;
    v40[1]  = v16;
  }

  swift_retain(v16);
  return v17;
}

uint64_t sub_100221F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v9);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v10 + 8));
  uint64_t v11 = (void *)((v10 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v11 >= 0xFFFFFFFFuLL) {
    swift_release(v11[1]);
  }
  uint64_t v12 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v12 >= 0xFFFFFFFFuLL) {
    swift_release(v12[1]);
  }
  uint64_t v13 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v13 >= 0xFFFFFFFFuLL) {
    swift_release(v13[1]);
  }
  return swift_release(*(void *)((((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8LL) + 8));
}

void *sub_10022209C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain(v6);
  v12(v10, v11, v7);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64) + 7LL;
  uint64_t v19 = (void *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v20 = (void *)((v18 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1]  = v21;
  unint64_t v22 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = (unint64_t *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v24 = *v23;
  swift_retain(v21);
  if (v24 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  }

  else
  {
    unint64_t v25 = v23[1];
    *(void *)unint64_t v22 = v24;
    *(void *)(v22 + 8)  = v25;
    swift_retain(v25);
  }

  unint64_t v26 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v27 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  }

  else
  {
    uint64_t v28 = *(void *)(v27 + 8);
    *(void *)unint64_t v26 = *(void *)v27;
    *(void *)(v26 + 8)  = v28;
    swift_retain(v28);
  }

  unint64_t v29 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v30 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v30 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
  }

  else
  {
    uint64_t v31 = *(void *)(v30 + 8);
    *(void *)unint64_t v29 = *(void *)v30;
    *(void *)(v29 + 8)  = v31;
    swift_retain(v31);
  }

  unint64_t v32 = (void *)((v30 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v33 = v32[1];
  unint64_t v34 = (void *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v34 = *v32;
  v34[1]  = v33;
  swift_retain(v33);
  return a1;
}

void *sub_100222244(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1]  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = ((unint64_t)a1 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)a2 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v11, v12, v8);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v13 + v15;
  uint64_t v17 = (v16 + v11) & ~v15;
  uint64_t v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 64) + 7LL;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v22 = v21[1];
  uint64_t v23 = v20[1];
  void *v20 = *v21;
  v20[1]  = v22;
  swift_retain(v22);
  swift_release(v23);
  unint64_t v24 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v25 = (unint64_t *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v26 = *v25;
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      unint64_t v29 = v25[1];
      *unint64_t v24 = v26;
      v24[1]  = v29;
      swift_retain(v29);
      goto LABEL_8;
    }
  }

  else
  {
    if (v26 >= 0xFFFFFFFF)
    {
      unint64_t v27 = v25[1];
      uint64_t v28 = v24[1];
      *unint64_t v24 = v26;
      v24[1]  = v27;
      swift_retain(v27);
      swift_release(v28);
      goto LABEL_8;
    }

    swift_release(v24[1]);
  }

  *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
LABEL_8:
  unint64_t v30 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v31 = (unint64_t *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v32 = *v31;
  if (*v30 < 0xFFFFFFFFuLL)
  {
    if (v32 >= 0xFFFFFFFF)
    {
      unint64_t v35 = v31[1];
      *unint64_t v30 = v32;
      v30[1]  = v35;
      swift_retain(v35);
      goto LABEL_15;
    }
  }

  else
  {
    if (v32 >= 0xFFFFFFFF)
    {
      unint64_t v33 = v31[1];
      uint64_t v34 = v30[1];
      *unint64_t v30 = v32;
      v30[1]  = v33;
      swift_retain(v33);
      swift_release(v34);
      goto LABEL_15;
    }

    swift_release(v30[1]);
  }

  *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
LABEL_15:
  unint64_t v36 = (void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v37 = (unint64_t *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v38 = *v37;
  if (*v36 < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      unint64_t v41 = v37[1];
      *unint64_t v36 = v38;
      v36[1]  = v41;
      swift_retain(v41);
      goto LABEL_22;
    }

_OWORD *sub_1002224C8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v11 + v13;
  uint64_t v15 = (v14 + v9) & ~v13;
  uint64_t v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v15, v16);
  uint64_t v17 = *(void *)(v12 + 64) + 7LL;
  uint64_t v18 = (_OWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v19 = (_OWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v21 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
  }

  else
  {
    uint64_t v22 = *(void *)(v21 + 8);
    *(void *)unint64_t v20 = *(void *)v21;
    *(void *)(v20 + 8)  = v22;
  }

  unint64_t v23 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v24 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v24 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  }

  else
  {
    uint64_t v25 = *(void *)(v24 + 8);
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8)  = v25;
  }

  unint64_t v26 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v27 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  }

  else
  {
    uint64_t v28 = *(void *)(v27 + 8);
    *(void *)unint64_t v26 = *(void *)v27;
    *(void *)(v26 + 8)  = v28;
  }

  *(_OWORD *)((v26 + 23) & 0xFFFFFFFFFFFFF8LL)  = *(_OWORD *)((v27 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

void *sub_100222640(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = ((unint64_t)a1 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)a2 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v11, v12, v8);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v13 + v15;
  uint64_t v17 = (v16 + v11) & ~v15;
  uint64_t v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 64) + 7LL;
  unint64_t v20 = (v19 + v17) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = v19 + v18;
  uint64_t v22 = *(void *)(v20 + 8);
  unint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8LL) + 23;
  *(_OWORD *)unint64_t v20 = *(_OWORD *)(v21 & 0xFFFFFFFFFFFFFFF8LL);
  swift_release(v22);
  unint64_t v24 = (void *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v26 = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8LL);
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      uint64_t v29 = *(void *)(v25 + 8);
      *unint64_t v24 = v26;
      v24[1]  = v29;
      goto LABEL_8;
    }
  }

  else
  {
    if (v26 >= 0xFFFFFFFF)
    {
      uint64_t v27 = *(void *)(v25 + 8);
      uint64_t v28 = v24[1];
      *unint64_t v24 = v26;
      v24[1]  = v27;
      swift_release(v28);
      goto LABEL_8;
    }

    swift_release(v24[1]);
  }

  *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
LABEL_8:
  unint64_t v30 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v31 = (unint64_t *)((v25 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v32 = *v31;
  if (*v30 < 0xFFFFFFFFuLL)
  {
    if (v32 >= 0xFFFFFFFF)
    {
      unint64_t v35 = v31[1];
      *unint64_t v30 = v32;
      v30[1]  = v35;
      goto LABEL_15;
    }
  }

  else
  {
    if (v32 >= 0xFFFFFFFF)
    {
      unint64_t v33 = v31[1];
      uint64_t v34 = v30[1];
      *unint64_t v30 = v32;
      v30[1]  = v33;
      swift_release(v34);
      goto LABEL_15;
    }

    swift_release(v30[1]);
  }

  *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
LABEL_15:
  unint64_t v36 = (void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v37 = (unint64_t *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v38 = *v37;
  if (*v36 < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      unint64_t v41 = v37[1];
      *unint64_t v36 = v38;
      v36[1]  = v41;
      goto LABEL_22;
    }

uint64_t sub_10022287C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = v6;
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(void *)(v7 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  if (v12 < a2)
  {
    if (((((((((((((*(void *)(v10 + 64) + ((v15 + ((v14 + 16) & ~v14) + v16) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
               + 23) & 0xFFFFFFFFFFFFFFF8LL)
             + 23) & 0xFFFFFFFFFFFFFFF8LL)
           + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 16) & 0xFFFFFFF8) != 0)
      unsigned int v17 = 2;
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0LL;
    }
    __asm { BR              X5 }
  }

  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v22 = (a1 + v14 + 16) & ~v14;
    if ((_DWORD)v8 == v12) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v22, v8, v13);
    }
    else {
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 48))( (v22 + v15 + v16) & ~v16,  *(unsigned int *)(v10 + 84),  v9);
    }
  }

  else
  {
    unint64_t v21 = *(void *)(a1 + 8);
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21)  = -1;
    }
    return (v21 + 1);
  }

void sub_100222A38(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  uint64_t v9 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v9 + 84)) {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v11 >= a3)
  {
    int v16 = 0;
    if (a2 <= v11) {
      goto LABEL_20;
    }
  }

  else
  {
    if (((((((((((*(_DWORD *)(v9 + 64)
                 + ((*(_DWORD *)(v8 + 64) + (((_DWORD)v12 + 16) & ~(_DWORD)v12) + (_DWORD)v13) & ~(_DWORD)v13)
                 + 7) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v14 = a3 - v11 + 1;
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (a2 <= v11) {
LABEL_20:
    }
      __asm { BR              X5 }
  }

  if (((((((((((*(_DWORD *)(v9 + 64)
               + ((*(_DWORD *)(v8 + 64) + (((_DWORD)v12 + 16) & ~(_DWORD)v12) + (_DWORD)v13) & ~(_DWORD)v13)
               + 7) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v17 = ~v11 + a2;
    bzero( a1,  ((((((((((*(void *)(v9 + 64) + ((*(void *)(v8 + 64) + ((v12 + 16) & ~v12) + v13) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 23) & 0xFFFFFFFFFFFFFFF8LL)
    + 16);
    *a1  = v17;
  }

  __asm { BR              X10 }

void sub_100222B9C()
{
  *(_BYTE *)(v0 + v1)  = v2;
  JUMPOUT(0x100222C08LL);
}

void sub_100222BA4()
{
  *(_DWORD *)(v0 + sub_1000208D8(v3, v2) = 0;
  if (v1) {
    JUMPOUT(0x100222BACLL);
  }
  JUMPOUT(0x100222C08LL);
}

void sub_100222BC0()
{
  *(_WORD *)(v0 + v1)  = v2;
  JUMPOUT(0x100222C08LL);
}

void sub_100222BC8()
{
  *(_DWORD *)(v0 + v1)  = v2;
  JUMPOUT(0x100222C08LL);
}

void sub_100222BD0()
{
  *(_WORD *)(v1 + v3)  = 0;
  if (v2)
  {
    if (v0 < 0) {
      JUMPOUT(0x100222BDCLL);
    }
    if (v2 < 0) {
      JUMPOUT(0x100222C00LL);
    }
    *(void *)(v1 + 8)  = (v2 - 1);
  }

  JUMPOUT(0x100222C08LL);
}

uint64_t sub_100222C4C()
{
  return type metadata accessor for WiFiPropertyUpdateRegistration(0LL);
}

uint64_t sub_100222C54(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = (char *)&value witness table for () + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100222CCC(uint64_t a1)
{
  v5[0]  = (char *)&value witness table for () + 64;
  v5[1]  = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[2]  = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[3]  = *(void *)(result - 8) + 64LL;
    v5[4]  = &unk_10035CDC0;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      v5[5]  = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 0LL, 6LL, v5, a1 + 32);
      return 0LL;
    }
  }

  return result;
}

void *sub_100222D7C(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64) + 7LL;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *a2;
  if ((v12 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) != 0
    || ((v12
       + ((v9 + ((v7 + 32LL) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8LL)
       + 16) & ~v12)
     + *(void *)(v11 + 64) > 0x18)
  {
    *a1  = v13;
    a1  = (void *)(v13
                  + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16)));
    swift_retain(v13);
  }

  else
  {
    unint64_t v16 = ~(unint64_t)v7;
    uint64_t v17 = a2[1];
    *a1  = v13;
    a1[1]  = v17;
    unsigned int v18 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v19 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v20 = *v19;
    *unsigned int v18 = *v19;
    uint64_t v35 = v10;
    unint64_t v21 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v22 = (uint64_t *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v23 = *v22;
    *unint64_t v21 = *v22;
    unint64_t v24 = (char *)v22 + v8;
    uint64_t v25 = ((unint64_t)v21 + v8 + 8) & ~v8;
    uint64_t v26 = (unint64_t)(v24 + 8) & v16;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain(v17);
    swift_retain(v20);
    swift_retain(v23);
    v27(v25, v26, v5);
    uint64_t v28 = (void *)((v9 + v25) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v29 = (void *)((v9 + v26) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v28 = *v29;
    uint64_t v30 = v29[1];
    v28[1]  = v30;
    uint64_t v31 = ((unint64_t)v28 + v12 + 16) & ~v12;
    uint64_t v32 = ((unint64_t)v29 + v12 + 16) & ~v12;
    unint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain(v30);
    v33(v31, v32, v35);
  }

  return a1;
}

uint64_t sub_100222F30(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)((a1 + 23) & 0xFFFFFFFFFFFFF8LL);
  swift_release(*v4);
  uint64_t v5 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  swift_release(*v5);
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v7 = ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v8 + 8));
  uint64_t v9 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))( (v8 + *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL),  v9);
}

void *sub_100222FDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v6 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v7 = *v6;
  *uint64_t v5 = *v6;
  unint64_t v8 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (uint64_t *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = *v9;
  *unint64_t v8 = *v9;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = ((unint64_t)v8 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v9 + v13 + 8) & ~v13;
  unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  swift_retain(v4);
  swift_retain(v7);
  swift_retain(v10);
  v16(v14, v15, v11);
  uint64_t v17 = *(void *)(v12 + 64) + 7LL;
  unsigned int v18 = (void *)((v17 + v14) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v19 = (void *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8LL);
  *unsigned int v18 = *v19;
  uint64_t v20 = v19[1];
  v18[1]  = v20;
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = ((unint64_t)v18 + v23 + 16) & ~v23;
  uint64_t v25 = ((unint64_t)v19 + v23 + 16) & ~v23;
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  swift_bridgeObjectRetain(v20);
  v26(v24, v25, v21);
  return a1;
}

void *sub_1002230F8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_retain(v6);
  swift_release(v7);
  unint64_t v8 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v10 = *v9;
  uint64_t v11 = *v8;
  *unint64_t v8 = *v9;
  swift_retain(v10);
  swift_release(v11);
  uint64_t v12 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v13 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v14 = *v13;
  uint64_t v15 = *v12;
  uint64_t *v12 = *v13;
  swift_retain(v14);
  swift_release(v15);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = ((unint64_t)v12 + v17 + 8) & ~v17;
  uint64_t v19 = ((unint64_t)v13 + v17 + 8) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v16 + 64) + 7LL;
  uint64_t v21 = (void *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v22 = (void *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v21 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v24 = v21[1];
  v21[1]  = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = type metadata accessor for Logger(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v26 + 24))( ((unint64_t)v21 + *(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80),  ((unint64_t)v22 + *(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80),  v25);
  return a1;
}

_OWORD *sub_100223228(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  uint64_t v11 = ((unint64_t)v7 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 64) + 7LL;
  uint64_t v13 = (_OWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v14 = (_OWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8LL);
  _OWORD *v13 = *v14;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))( ((unint64_t)v13 + *(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80),  ((unint64_t)v14 + *(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80),  v15);
  return a1;
}

uint64_t sub_1002232FC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (unint64_t)a2 + 23;
  *(_OWORD *)a1  = *a2;
  swift_release(v5);
  uint64_t v7 = (uint64_t *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v6 &= 0xFFFFFFFFFFFFF8uLL;
  uint64_t v8 = *v7;
  *uint64_t v7 = *(void *)v6;
  swift_release(v8);
  uint64_t v9 = (uint64_t *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (uint64_t *)((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v11 = *v9;
  *uint64_t v9 = *v10;
  swift_release(v11);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = ((unint64_t)v9 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v10 + v13 + 8) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 64) + 7LL;
  uint64_t v17 = (void *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v18 = (void *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v17 = *v18;
  uint64_t v19 = v17[1];
  v17[1]  = v18[1];
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 40))( ((unint64_t)v17 + *(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80),  ((unint64_t)v18 + *(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80),  v20);
  return a1;
}

uint64_t sub_100223408(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = v8;
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64) + 7LL;
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = v16 + 16;
  if (a2 <= v12) {
    goto LABEL_27;
  }
  unint64_t v18 = ((v17 + ((v15 + ((v14 + 32) & ~v14)) & 0xFFFFFFFFFFFFFFF8LL)) & ~v16) + *(void *)(v9 + 64);
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((a2 - v12 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      goto LABEL_18;
    }

    if (v22 < 2)
    {
LABEL_27:
      if ((v11 & 0x80000000) != 0)
      {
        unint64_t v26 = ((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + v14 + 8) & ~v14;
        if ((_DWORD)v7 == v12) {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v26, v7, v5);
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))( (v17 + ((v15 + v26) & 0xFFFFFFFFFFFFFFF8LL)) & ~v16,  v10,  v13);
        }
      }

      else
      {
        uint64_t v25 = *a1;
        if (*a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v25)  = -1;
        }
        return (v25 + 1);
      }
    }
  }

  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((_BYTE *)a1 + v18)) {
    goto LABEL_27;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if ((_DWORD)v18)
  {
    else {
      int v24 = 4;
    }
    __asm { BR              X12 }
  }

  return v12 + v23 + 1;
}

void sub_100223604(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v10 = v8;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = ((*(unsigned __int8 *)(v9 + 80)
        + 16LL
        + ((*(void *)(v7 + 64)
          + 7LL
  if (a3 <= v11)
  {
    unsigned int v13 = 0;
  }

  else if (v12 <= 3)
  {
    unsigned int v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v13 = &dword_100000004;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v13 = 2;
    }

    else
    {
      unsigned int v13 = v15 > 1;
    }
  }

  else
  {
    unsigned int v13 = &_mh_execute_header.magic + 1;
  }

  if (v11 < a2)
  {
    int v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        int v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1  = v16;
          a1[2]  = BYTE2(v16);
        }

        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1  = v16;
        }

        else
        {
          *a1  = v16;
        }
      }
    }

    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1  = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X0 }

uint64_t sub_10022388C(uint64_t a1)
{
  int v2 = (char *)&value witness table for () + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 136);
}

uint64_t sub_1002238D0(uint64_t a1)
{
  int v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 96);
}

uint64_t storeEnumTagSinglePayload for WiFiInterfaceRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100223960 + 4 * byte_10035C978[v4]))();
  }
  *a1  = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100223994 + 4 * byte_10035C973[v4]))();
}

uint64_t sub_100223994(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_10022399C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1002239A4LL);
  }
  return result;
}

uint64_t sub_1002239B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1002239B8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1002239BC(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1002239C4(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for WiFiInterfaceRole()
{
  return &type metadata for WiFiInterfaceRole;
}

uint64_t storeEnumTagSinglePayload for WiFiInterfaceLinkState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100223A2C + 4 * byte_10035C982[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100223A60 + 4 * byte_10035C97D[v4]))();
}

uint64_t sub_100223A60(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100223A68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100223A70LL);
  }
  return result;
}

uint64_t sub_100223A7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100223A84LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100223A88(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100223A90(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for WiFiInterfaceLinkState()
{
  return &type metadata for WiFiInterfaceLinkState;
}

uint64_t sub_100223AC0(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t sub_100223AC8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100223B0C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1)  = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2)  = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3)  = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100223B84(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100223BCC(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_100223C28(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40)  = 0;
    }
    if (a2) {
      *(void *)(result + 32)  = a2;
    }
  }

  return result;
}

uint64_t sub_100223C84(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035CFA0, a1);
}

unint64_t sub_100223C94()
{
  unint64_t result = qword_10040C300;
  if (!qword_10040C300)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiInterfaceLinkState,  &type metadata for WiFiInterfaceLinkState);
    atomic_store(result, (unint64_t *)&qword_10040C300);
  }

  return result;
}

unint64_t sub_100223CD8()
{
  unint64_t result = qword_10040C308;
  if (!qword_10040C308)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiInterfaceRole,  &type metadata for WiFiInterfaceRole);
    atomic_store(result, (unint64_t *)&qword_10040C308);
  }

  return result;
}

uint64_t sub_100223D1C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release(*(void *)(v0 + 40));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100223DA8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 32))( v0 + ((v2 + 48) & ~v2),  v0 + ((*(void *)(v1 + 64) + v2 + ((v2 + 48) & ~v2)) & ~v2));
}

uint64_t sub_100223DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_100223E08(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100223E10()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100223E34()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_100223E58(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_10021A4A8(a1, v1 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_100223ED0(unint64_t a1)
{
  unint64_t v2 = a1 | ((HIDWORD(a1) & 1) << 32);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_10021A088(v2, v1 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_100223F58(uint64_t a1)
{
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_100219EEC(v2, v1 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_100223FD0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v0 + 24),  *(void *)(v0 + 16),  &protocol requirements base descriptor for P2PControls,  &associated type descriptor for P2PControls.Driver);
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100224044(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls)
                                      - 8)
                          + 80LL);
  return sub_100217308(v2, v1 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t NANState.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x64656C62616E65LL;
  }
  else {
    return 0x64656C6261736964LL;
  }
}

uint64_t NANState.actionDescription.getter(char a1)
{
  if ((a1 & 1) != 0) {
    uint64_t v1 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v1 = 0x64656C6261736964LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0xE700000000000000LL;
  }
  else {
    unint64_t v2 = 0xE800000000000000LL;
  }
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = String.index(before:)((v2 >> 40) & 0xF0000 | 7, v1, v2);
  swift_bridgeObjectRelease(v2);
  uint64_t v4 = String.subscript.getter(15LL, v3, v1, v2);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(v2);
  uint64_t v11 = static String._fromSubstring(_:)(v4, v6, v8, v10);
  swift_bridgeObjectRelease(v10);
  return v11;
}

CoreP2P::NANState_optional __swiftcall NANState.init(rawValue:)(Swift::String rawValue)
{
  object  = rawValue._object;
  v2._countAndFlagsBits  = rawValue._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6A60, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    v4.value  = CoreP2P_NANState_enabled;
  }
  else {
    v4.value  = CoreP2P_NANState_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_10022422C(char *a1, char *a2)
{
  return sub_10002A56C(*a1, *a2);
}

Swift::Int sub_100224238()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v2 = 0x64656C6261736964LL;
  }
  if (v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  else {
    unint64_t v3 = 0xE800000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1002242B8(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v2 = 0x64656C6261736964LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  else {
    unint64_t v3 = 0xE800000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100224314(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v3 = 0x64656C6261736964LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE800000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100224390@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits  = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object  = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6A60, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2  = v7;
  return result;
}

void sub_1002243EC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x64656C6261736964LL;
  if (*v1) {
    uint64_t v2 = 0x64656C62616E65LL;
  }
  unint64_t v3 = 0xE800000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  *a1  = v2;
  a1[1]  = v3;
}

uint64_t sub_10022442C()
{
  if (*v0) {
    return 0x64656C62616E65LL;
  }
  else {
    return 0x64656C6261736964LL;
  }
}

void *NANDiscoveryWindowIndex.first.unsafeMutableAddressor()
{
  return &static NANDiscoveryWindowIndex.first;
}

void *NANDiscoveryWindowIndex.last.unsafeMutableAddressor()
{
  return &static NANDiscoveryWindowIndex.last;
}

CoreP2P::NANDiscoveryWindowIndex __swiftcall NANDiscoveryWindowIndex.next()()
{
  if (v0 == 15) {
    return 0LL;
  }
  BOOL v2 = __OFADD__(v0, 1LL);
  result.index  = v0 + 1;
  if (v2) {
    __break(1u);
  }
  return result;
}

CoreP2P::NANDiscoveryWindowIndex __swiftcall NANDiscoveryWindowIndex.previous()()
{
  if (!v0) {
    return (CoreP2P::NANDiscoveryWindowIndex)15LL;
  }
  BOOL v1 = __OFSUB__(v0, 1LL);
  result.index  = v0 - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002244C0()
{
  unint64_t result = qword_10040FCE0;
  if (!qword_10040FCE0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NANState, &type metadata for NANState);
    atomic_store(result, (unint64_t *)&qword_10040FCE0);
  }

  return result;
}

unint64_t sub_100224508()
{
  unint64_t result = qword_10040C310;
  if (!qword_10040C310)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDiscoveryWindowIndex,  &type metadata for NANDiscoveryWindowIndex);
    atomic_store(result, (unint64_t *)&qword_10040C310);
  }

  return result;
}

void *sub_10022454C()
{
  return &protocol witness table for Int;
}

uint64_t storeEnumTagSinglePayload for NANState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1002245A4 + 4 * byte_10035D015[v4]))();
  }
  *a1  = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002245D8 + 4 * byte_10035D010[v4]))();
}

uint64_t sub_1002245D8(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_1002245E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x1002245E8LL);
  }
  return result;
}

uint64_t sub_1002245F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x1002245FCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100224600(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100224608(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANState()
{
  return &type metadata for NANState;
}

ValueMetadata *type metadata accessor for NANDiscoveryWindowIndex()
{
  return &type metadata for NANDiscoveryWindowIndex;
}

uint64_t sub_100224634()
{
  return swift_unownedRetainStrong(*(void *)(v0 + qword_10040C328));
}

uint64_t sub_100224644@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_10040C330;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10022B484(v3, a1);
}

uint64_t sub_100224694@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004109C8;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1002246D8()
{
  Strong  = swift_unknownObjectWeakLoadStrong(v0 + qword_1004109D8);
  if (!Strong)
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    goto LABEL_7;
  }

  BOOL v2 = (void *)Strong;
  sub_100256944((uint64_t)&v6);

  if (!*((void *)&v7 + 1))
  {
LABEL_7:
    sub_1000225EC((uint64_t)&v6, &qword_100405280);
    return 0LL;
  }

  uint64_t v3 = sub_100002274(&qword_10040D450);
  else {
    return 0LL;
  }
}

uint64_t sub_10022477C(uint64_t a1, unint64_t a2)
{
  if (!(a2 >> 62)) {
    return 0x69646E6F70736552LL;
  }
  if (a2 >> 62 == 1) {
    return 0x73696C6261747345LL;
  }
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002247FC + 4 * byte_10035D220[a1]))( 0xD000000000000010LL,  0x8000000100367DD0LL);
}

uint64_t sub_1002247FC(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_100224824()
{
  return 0x74616E696D726554LL;
}

uint64_t sub_100224844(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin(v11);
  unsigned int v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v22[0]  = a1;
  v22[1]  = a2;
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v16 = _s17ResponderInstanceC5StateOMa(0LL, a3, a4, v15);
  uint64_t v17 = sub_100002274(&qword_100405DC0);
  unint64_t v18 = sub_10005CFF4();
  sub_1000E6DCC((uint64_t)v10);
  sub_10022B084(a1, a2);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v22, &v21, v13, v10, v16, v17, v18);
}

uint64_t sub_1002249A0()
{
  return sub_10022477C(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1002249B0(uint64_t a1)
{
  return sub_100224844(*(void **)v1, *(void *)(v1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1002249C0()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v5 = v0 + qword_10040C340;
  __n128 v6 = swift_beginAccess(v0 + qword_10040C340, v9, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v2 + 40))(v5, v4, v1, v6);
  return swift_endAccess(v9);
}

unint64_t sub_100224A7C()
{
  uint64_t v1 = v0 + qword_10040C330;
  swift_beginAccess(v0 + qword_10040C330, v3, 0LL, 0LL);
  return *(unsigned __int16 *)(v1 + 2) | ((unint64_t)*(unsigned int *)(v1 + 4) << 16);
}

uint64_t sub_100224AC8()
{
  unint64_t v1 = *(void *)(v0 + qword_10040C348 + 8);
  if (!(v1 >> 62)) {
    return 1LL;
  }
  if (v1 >> 62 == 2)
  {
    unint64_t v2 = *(void *)(v0 + qword_10040C348);
  }

  return 0LL;
}

uint64_t sub_100224B20()
{
  unint64_t v1 = *(void *)(v0 + qword_10040C348 + 8);
  if (v1 >> 62 == 1) {
    return swift_retain(v1 & 0x3FFFFFFFFFFFFFFFLL);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100224B60(uint64_t a1)
{
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  __n128 v6 = &v12[-v5];
  uint64_t v7 = v1 + qword_1004109E8;
  swift_beginAccess(v1 + qword_1004109E8, v13, 0LL, 0LL);
  sub_1000226B0(v7, (uint64_t)v6, &qword_100405D40);
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1LL, v8);
  uint64_t result = sub_1000225EC((uint64_t)v6, &qword_100405D40);
  if (v10 == 1 || *(void *)(v1 + qword_1004109E0) != a1)
  {
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0LL, 1LL, v8);
    swift_beginAccess(v7, v12, 33LL, 0LL);
    sub_10022B968((uint64_t)v4, v7);
    return swift_endAccess(v12);
  }

  return result;
}

uint64_t sub_100224CD0()
{
  return *(void *)(v0 + qword_1004109E0);
}

uint64_t sub_100224CE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_1004109E0);
  *(void *)(v1 + qword_1004109E0)  = a1;
  return sub_100224B60(v2);
}

uint64_t sub_100224CF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004109E8;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, &qword_100405D40);
}

id sub_100224D50(uint64_t a1, uint64_t a2)
{
  id v3 = sub_10022B928(a1, a2);
  swift_release(a1);
  return v3;
}

id sub_100224D80()
{
  uint64_t v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType(v0);
  uint64_t v4 = *(void *)((swift_isaMask & *(void *)v0) + 0x50LL);
  uint64_t v3 = *(void *)((swift_isaMask & *(void *)v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = &v20[-v7 - 8];
  unint64_t v9 = *(void *)&v1[qword_10040C348 + 8];
  if ((v9 & 0x8000000000000000LL) == 0
    || (unint64_t v10 = *(void *)&v1[qword_10040C348],
        (__int128)__PAIR128__(v9, v10) < (__int128)__PAIR128__(0x8000000000000000LL, 2LL)))
  {
    uint64_t v11 = *(void *)&v1[qword_10040C328];
    swift_unownedRetainStrong(v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( v8,  v11 + *(void *)(*(void *)v11 + 96LL),  AssociatedTypeWitness);
    swift_release(v11);
    uint64_t v12 = &v1[qword_10040C330];
    swift_beginAccess(&v1[qword_10040C330], v20, 0LL, 0LL);
    uint64_t v13 = *(unsigned int *)(v12 + 10);
    uint64_t v14 = *((unsigned __int16 *)v12 + 4);
    uint64_t v15 = *v12;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))( v15,  v14 | (v13 << 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
LABEL_4:
    sub_1002250D0(-1LL, 0x64657361656C6572LL, 0xE800000000000000LL);
    goto LABEL_5;
  }

  if (v9 == 0x8000000000000000LL && v10 == 2) {
    goto LABEL_4;
  }
LABEL_5:
  sub_100224F64(v1);
  v21.receiver  = v1;
  v21.super_class  = ObjectType;
  return objc_msgSendSuper2(&v21, "dealloc");
}

void sub_100224F64(void *a1)
{
  id v1 = a1;
  oslog  = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v4 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v3 = 138412290;
    id v8 = v1;
    id v5 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
    *uint64_t v4 = v1;

    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Destroyed %@", v3, 0xCu);
    uint64_t v6 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v4, 1LL, v6);
    swift_slowDealloc(v4, -1LL, -1LL);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_1002250D0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = swift_isaMask;
  uint64_t v9 = v3;
  swift_bridgeObjectRetain_n(a3, 2LL);
  unint64_t v10 = v9;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v114 = a1;
  if (a1 == 2)
  {
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12)) {
      goto LABEL_5;
    }
LABEL_6:
    swift_bridgeObjectRelease_n(a3, 2LL);

    goto LABEL_7;
  }

  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v11, v12)) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v111 = a2;
  uint64_t v13 = swift_slowAlloc(22LL, -1LL);
  uint64_t v104 = (void *)swift_slowAlloc(8LL, -1LL);
  uint64_t v106 = swift_slowAlloc(32LL, -1LL);
  *(void *)&v117[0]  = v106;
  *(_DWORD *)uint64_t v13 = 138412546;
  uint64_t v120 = (uint64_t)v10;
  loga  = v11;
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v16 = v10;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121);
  *uint64_t v104 = v10;

  uint64_t v7 = v15;
  uint64_t v8 = v14;
  *(_WORD *)(v13 + 12)  = 2080;
  swift_bridgeObjectRetain(a3);
  uint64_t v120 = sub_10000235C(v111, a3, (uint64_t *)v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121);
  swift_bridgeObjectRelease_n(a3, 3LL);
  _os_log_impl((void *)&_mh_execute_header, loga, v12, "%@ was terminated because %s", (uint8_t *)v13, 0x16u);
  uint64_t v17 = sub_100002274(&qword_100404DE0);
  swift_arrayDestroy(v104, 1LL, v17);
  swift_slowDealloc(v104, -1LL, -1LL);
  swift_arrayDestroy(v106, 1LL, &type metadata for Any[8]);
  swift_slowDealloc(v106, -1LL, -1LL);
  swift_slowDealloc(v13, -1LL, -1LL);

LABEL_7:
  uint64_t v18 = qword_10040C350;
  char v19 = &OBJC_CLASS____TtC7CoreP2P30WiFiPropertyUpdateRegistration;
  if (v10[qword_10040C350] == 1)
  {
    uint64_t v107 = v8 & v7;
    log  = (os_log_t)qword_10040C350;
    uint64_t v112 = sub_100229540();
    uint64_t v20 = (unsigned __int8 *)&v10[qword_10040C330];
    swift_beginAccess(&v10[qword_10040C330], v115, 0LL, 0LL);
    uint64_t v21 = v20[8];
    uint64_t v22 = v20[9];
    uint64_t v23 = v20[10];
    uint64_t v24 = v20[11];
    uint64_t v25 = v20[12];
    v105  = v20;
    uint64_t v26 = v20[13];
    uint64_t v27 = (uint64_t *)&v10[qword_10040C338];
    unint64_t v28 = *(void *)&v10[qword_10040C338 + 8];
    uint64_t v102 = &v10[qword_10040C338];
    if (v28 >> 60 == 15)
    {
      unint64_t v29 = v21 | (v22 << 8) | (v23 << 16) | (v24 << 24) | (v25 << 32) | (v26 << 40);
      WiFiAddress.ipv6LinkLocalAddress.getter(v29);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      uint64_t v37 = v36;
    }

    else
    {
      uint64_t v38 = *v27;
      sub_100020AFC(*v27, v28);
      uint64_t v98 = InterfaceIdentifier.ipv6Address.getter(v38, v28);
      uint64_t v100 = v10;
      uint64_t v96 = v39;
      uint64_t v41 = v40;
      uint64_t v37 = v42;
      sub_100020B40(v38, v28);
      uint64_t v43 = v21 | (v22 << 8);
      uint64_t v35 = v41;
      unint64_t v10 = v100;
      uint64_t v44 = v43 | (v23 << 16) | (v24 << 24) | (v25 << 32);
      uint64_t v33 = v96;
      uint64_t v31 = v98;
      unint64_t v29 = v44 | (v26 << 40);
    }

    uint64_t v45 = (void (*)(__int128 *, void))(*(uint64_t (**)(__int128 *))(*v112 + 392LL))(v117);
    uint64_t v47 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable( 0LL,  *(void *)(v107 + 80),  *(void *)(*(void *)(v107 + 88) + 8LL),  v46);
    WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v29, v31, v33, v35, v37, v47);
    v45(v117, 0LL);
    swift_release(v112);
    swift_bridgeObjectRelease(v37);
    uint64_t v48 = sub_100229540();
    uint64_t v49 = *(void *)&v10[qword_10040C328];
    swift_unownedRetainStrong(v49);
    uint64_t v50 = *(void **)(v49 + *(void *)(*(void *)v49 + 448LL));
    swift_retain();
    swift_release(v49);
    swift_release(v48);
    char v19 = &OBJC_CLASS____TtC7CoreP2P30WiFiPropertyUpdateRegistration;
    uint64_t v18 = (uint64_t)log;
    if (v50)
    {
      swift_release(v50);
      if (v48 == v50)
      {
        uint64_t v108 = v47;
        uint64_t v113 = v49;
        swift_unownedRetainStrong(v49);
        uint64_t v51 = v105[8];
        uint64_t v52 = v105[9];
        uint64_t v53 = v105[10];
        uint64_t v54 = v105[11];
        uint64_t v55 = v105[12];
        uint64_t v56 = v105[13];
        unint64_t v57 = *((void *)v102 + 1);
        if (v57 >> 60 == 15)
        {
          unint64_t v58 = v51 | (v52 << 8) | (v53 << 16) | (v54 << 24) | (v55 << 32) | (v56 << 40);
          WiFiAddress.ipv6LinkLocalAddress.getter(v58);
          uint64_t v60 = v59;
          uint64_t v62 = v61;
          uint64_t v64 = v63;
          uint64_t v66 = v65;
        }

        else
        {
          uint64_t v91 = *(void *)v102;
          sub_100020AFC(*(void *)v102, *((void *)v102 + 1));
          uint64_t v99 = InterfaceIdentifier.ipv6Address.getter(v91, v57);
          uint64_t v101 = v92;
          uint64_t v103 = v93;
          uint64_t v97 = v94;
          sub_100020B40(v91, v57);
          uint64_t v95 = v51 | (v52 << 8) | (v53 << 16);
          uint64_t v66 = v97;
          uint64_t v60 = v99;
          unint64_t v58 = v95 | (v54 << 24) | (v55 << 32) | (v56 << 40);
          uint64_t v62 = v101;
          uint64_t v64 = v103;
        }

        swift_beginAccess(v113 + *(void *)(*(void *)v113 + 152LL), v117, 33LL, 0LL);
        WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v58, v60, v62, v64, v66, v108);
        swift_endAccess(v117);
        swift_release(v113);
        swift_bridgeObjectRelease(v66);
        char v19 = &OBJC_CLASS____TtC7CoreP2P30WiFiPropertyUpdateRegistration;
        uint64_t v18 = (uint64_t)log;
      }
    }
  }

  sub_10022B404((void *)3, 0x8000000000000000LL);
  if (v10[v18] == 1)
  {
    uint64_t v67 = sub_1002246D8();
    if (v67)
    {
      unint64_t v68 = (void *)v67;
      sub_10022B448();
      uint64_t v69 = &v10[(unint64_t)v19[20].cache];
      swift_beginAccess(v69, v116, 0LL, 0LL);
      id v70 = WiFiAwarePublisherDataSessionHandle.init(_:)(*v69 | ((unint64_t)v69[8] << 8) | ((unint64_t)v69[9] << 16) | ((unint64_t)*(unsigned int *)(v69 + 10) << 24));
      [v68 publishDataTerminatedForHandle:v70 reason:2];

      swift_unknownObjectRelease(v68);
    }
  }

  char v71 = &v10[qword_1004109D8];
  Strong  = swift_unknownObjectWeakLoadStrong(&v10[qword_1004109D8]);
  if (Strong)
  {
    uint64_t v73 = (void *)Strong;
    char v74 = &v10[(unint64_t)v19[20].cache];
    swift_beginAccess(v74, v124, 0LL, 0LL);
    sub_1002569E8(*v74 | ((unint64_t)v74[8] << 8) | ((unint64_t)v74[9] << 16) | ((unint64_t)*(unsigned int *)(v74 + 10) << 24));
  }

  os_log_t v75 = (uint64_t *)&v10[qword_1004109D0];
  __int128 v76 = *(void (**)(void))&v10[qword_1004109D0];
  if (v76)
  {
    uint64_t v77 = v75[1];
    swift_retain();
    v76(0LL);
    sub_100021018((uint64_t)v76, v77);
  }

  swift_unknownObjectWeakAssign(v71, 0LL);
  uint64_t v78 = *v75;
  uint64_t v79 = v75[1];
  *os_log_t v75 = 0LL;
  v75[1]  = 0LL;
  uint64_t result = sub_100021018(v78, v79);
  if (v114 != -1)
  {
    uint64_t v81 = *(void *)&v10[qword_10040C328];
    uint64_t v82 = swift_unownedRetainStrong(v81);
    uint64_t v86 = sub_1002E8D68(v82, v83, v84, v85);
    swift_release(v81);
    sub_10027E64C((uint64_t)v10);
    uint64_t result = swift_release(v86);
  }

  uint64_t v87 = qword_10040C358;
  if (v10[qword_10040C358] == 1)
  {
    uint64_t v88 = &v10[(unint64_t)v19[20].cache];
    swift_beginAccess(v88, v119, 0LL, 0LL);
    sub_1000226B0((uint64_t)(v88 + 136), (uint64_t)v117, &qword_100409E58);
    if (v118 == 255)
    {
      return sub_1000225EC((uint64_t)v117, &qword_100409E58);
    }

    else if ((v118 & 1) != 0)
    {
      sub_1000589F8(v117, (uint64_t)&v120);
      uint64_t v89 = v122;
      uint64_t v90 = v123;
      sub_100021104(&v120, v122);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v90 + 16))( *((unsigned __int16 *)v88 + 1) | ((unint64_t)*((unsigned int *)v88 + 1) << 16),  v89,  v90);
      v10[v87]  = 0;
      return sub_100002AC4(&v120);
    }

    else
    {
      return sub_10017B2A8((uint64_t)v117);
    }
  }

  return result;
}

id sub_100225BD4(void *a1)
{
  id v1 = a1;
  return sub_100224D80();
}

uint64_t sub_100225BF8(uint64_t a1)
{
  uint64_t v2 = a1 + qword_1004109C8;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  sub_100020B40(*(void *)(a1 + qword_10040C338), *(void *)(a1 + qword_10040C338 + 8));
  sub_100021018(*(void *)(a1 + qword_1004109D0), *(void *)(a1 + qword_1004109D0 + 8));
  swift_unknownObjectWeakDestroy(a1 + qword_1004109D8);
  uint64_t v4 = a1 + qword_10040C340;
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  sub_10022B0C4(*(void **)(a1 + qword_10040C348), *(void *)(a1 + qword_10040C348 + 8));
  return sub_1000225EC(a1 + qword_1004109E8, &qword_100405D40);
}

uint64_t sub_100225CE8()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v24 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t v4 = *(void *)(v24 + 8);
  uint64_t v21 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (uint64_t *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v14 = (void *)*v13;
  uint64_t *v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)(v12);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) != 0)
  {
    uint64_t v17 = *(void *)((char *)v2 + qword_10040C328);
    swift_unownedRetainStrong(v17);
    sub_1002E8C08();
    uint64_t result = swift_release(v17);
    if (!v1)
    {
      swift_unownedRetainStrong(v17);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( v8,  v17 + *(void *)(*(void *)v17 + 96LL),  AssociatedTypeWitness);
      swift_release(v17);
      uint64_t v18 = (uint64_t)v2 + qword_10040C330;
      swift_beginAccess((char *)v2 + qword_10040C330, v23, 0LL, 0LL);
      sub_10022B484(v18, (uint64_t)v22);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v24,  v21,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(AssociatedConformanceWitness + 264))( v22,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      sub_10022B4C0((uint64_t)v22);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100225F08()
{
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v1 + 8),  v2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v6 = (char *)&v33 - v5;
  if (*(void *)((char *)v0 + qword_10040C348 + 8) >> 62)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = *(void *)((char *)v0 + qword_10040C348);
    Strong  = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong((char *)v0 + qword_1004109D8);
    if (!Strong || (int v9 = Strong[qword_100410A30], Strong, v9 != 1))
    {
      uint64_t v17 = v0;
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v18))
      {
        char v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v20 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)char v19 = 138412290;
        uint64_t v39 = v17;
        uint64_t v21 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40);
        void *v20 = v17;

        _os_log_impl( (void *)&_mh_execute_header,  v11,  v18,  "%@ cannot retry response because the associated publisher is no longer active",  v19,  0xCu);
        uint64_t v22 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v20, 1LL, v22);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {
      }

      goto LABEL_13;
    }

    uint64_t v10 = v0;
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    if ((v7 & 0x8000000000000000LL) == 0)
    {
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v14 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v13 = 138412290;
        uint64_t v39 = v10;
        id v15 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40);
        *uint64_t v14 = v10;

        _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "%@ is being terminated because response retries exceeded",  v13,  0xCu);
        uint64_t v16 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v14, 1LL, v16);
        swift_slowDealloc(v14, -1LL, -1LL);
        swift_slowDealloc(v13, -1LL, -1LL);
      }

      else
      {
      }

void sub_100226544()
{
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v44 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v2,  v44,  &protocol requirements base descriptor for P2PControls);
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v6 = (char *)&v40 - v5;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  os_log_type_t v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v14 & 1) != 0)
  {
    unint64_t v15 = *(void *)((char *)v0 + qword_10040C348 + 8);
    if ((v15 & 0x8000000000000000LL) != 0
      && (unint64_t v16 = *(void *)((char *)v0 + qword_10040C348),
          (__int128)__PAIR128__(v15, v16) >= (__int128)__PAIR128__(0x8000000000000000LL, 2LL)))
    {
      if (v15 == 0x8000000000000000LL && v16 == 2)
      {
        sub_1002250D0(2LL, 0x7165722072657375LL, 0xEC00000074736575LL);
      }

      else
      {
        uint64_t v32 = v0;
        uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v36 = 138412290;
          uint64_t v45 = v32;
          int v38 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);
          *uint64_t v37 = v32;

          _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "%@ was already in process of termination, ignoring request to terminate",  v36,  0xCu);
          uint64_t v39 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v37, 1LL, v39);
          swift_slowDealloc(v37, -1LL, -1LL);
          swift_slowDealloc(v36, -1LL, -1LL);
        }

        else
        {
        }
      }
    }

    else
    {
      uint64_t v17 = v0;
      os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v21 = swift_slowAlloc(8LL, -1LL);
        uint64_t v43 = v6;
        uint64_t v41 = (void *)v21;
        uint64_t v42 = v1;
        *(_DWORD *)uint64_t v20 = 138412290;
        uint64_t v45 = v17;
        uint64_t v22 = v17;
        uint64_t v1 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);
        os_log_type_t v23 = v41;
        *uint64_t v41 = v17;

        _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ will attempt to stop", v20, 0xCu);
        uint64_t v24 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v23, 1LL, v24);
        uint64_t v6 = v43;
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v20, -1LL, -1LL);
      }

      else
      {
      }

      sub_10022B404((void *)3, 0x8000000000000000LL);
      uint64_t v25 = *(void *)((char *)v17 + qword_10040C328);
      swift_unownedRetainStrong(v25);
      sub_1002E8C08();
      swift_release(v25);
      swift_unownedRetainStrong(v25);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( v6,  v25 + *(void *)(*(void *)v25 + 96LL),  AssociatedTypeWitness);
      swift_release(v25);
      uint64_t v26 = (unsigned __int8 *)v17 + qword_10040C330;
      swift_beginAccess((char *)v17 + qword_10040C330, &v45, 0LL, 0LL);
      uint64_t v27 = *(unsigned int *)(v26 + 10);
      uint64_t v28 = *((unsigned __int16 *)v26 + 4);
      uint64_t v29 = *v26;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v44,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))( v29,  v28 | (v27 << 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100226AAC(os_log_s *a1)
{
  v399  = (uint64_t)a1;
  ObjectType  = (char *)swift_getObjectType(v1);
  v402  = v1;
  v398  = *(void *)v1;
  v397  = (os_log_t)swift_isaMask;
  uint64_t v2 = sub_100002274(&qword_10040D440);
  __chkstk_darwin(v2);
  v395  = (uint64_t)&v387 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DriverEvent(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  v401  = (uint64_t)&v387 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  v400  = (uint64_t)&v387 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v387 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  char v14 = (char *)&v387 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v387 - v16;
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v387 - v18;
  uint64_t v20 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v23 = (unint64_t)&v387 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v25 = (void *)*v24;
  *(void *)unint64_t v23 = *v24;
  (*(void (**)(unint64_t, void, uint64_t))(v21 + 104))( v23,  enum case for DispatchPredicate.onQueue(_:),  v20);
  id v26 = v25;
  LOBYTE(v25)  = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(unint64_t, uint64_t))(v21 + 8))(v23, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_158:
    v383  = *v27;
    sub_100020AFC(*v27, v23);
    v342  = InterfaceIdentifier.ipv6Address.getter(v383, v23);
    v344  = v384;
    v346  = v385;
    v348  = v386;
    sub_100020B40(v383, v23);
    v340  = v401;
LABEL_159:
    swift_beginAccess(&v11[*(void *)(*(void *)v11 + 152LL)], v403, 33LL, 0LL);
    WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v340, v342, v344, v346, v348, v400);
    if (v20)
    {
      swift_endAccess(v403);
      uint64_t v30 = v394;
      swift_release(v11);
      swift_bridgeObjectRelease(v348);
      swift_errorRetain(v20);
      v327  = swift_errorRetain(v20);
      v328  = (os_log_s *)Logger.logObject.getter(v327);
      v329  = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v328, v329))
      {
        v330  = swift_slowAlloc(22LL, -1LL);
        v331  = (void *)swift_slowAlloc(8LL, -1LL);
        v400  = swift_slowAlloc(32LL, -1LL);
        *(void *)&v403[0]  = v400;
        *(_DWORD *)v330  = 136315394;
        v332  = WiFiAddress.description.getter(v401);
        v334  = v333;
        v405  = (char *)sub_10000235C(v332, v333, (uint64_t *)v403);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        swift_bridgeObjectRelease(v334);
        *(_WORD *)(v330 + 12)  = 2112;
        swift_errorRetain(v20);
        v335  = (char *)_swift_stdlib_bridgeErrorToNSError(v20);
        v405  = v335;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
        *v331  = v335;
        swift_errorRelease(v20);
        swift_errorRelease(v20);
        _os_log_impl( (void *)&_mh_execute_header,  v328,  v329,  "Failed to post peer presence for %s because %@",  (uint8_t *)v330,  0x16u);
        v336  = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v331, 1LL, v336);
        swift_slowDealloc(v331, -1LL, -1LL);
        v337  = v400;
        swift_arrayDestroy(v400, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v337, -1LL, -1LL);
        swift_slowDealloc(v330, -1LL, -1LL);
        swift_errorRelease(v20);
      }

      else
      {
        swift_errorRelease(v20);

        swift_errorRelease(v20);
        swift_errorRelease(v20);
      }
    }

    else
    {
      swift_endAccess(v403);
      swift_release(v11);
      swift_bridgeObjectRelease(v348);
      uint64_t v30 = v394;
    }

    uint64_t v125 = v387;
    v221  = v402;
    v197  = (char *)v391;
LABEL_133:
    v349  = sub_100229540();
    v350  = WiFiInterface.interfaceIndex.getter();
    swift_release(v349);
    v351  = sub_1002246D8();
    if (v351)
    {
      v352  = (void *)v351;
      v394  = v30;
      v353  = *(void *)(v389 + 8);
      if (v353 >> 60 == 15)
      {
        v354  = 0LL;
        v355  = 0LL;
        v356  = 0LL;
        v357  = 1LL;
      }

      else
      {
        v358  = *(void *)v389;
        sub_100020AFC(*(void *)v389, *(void *)(v389 + 8));
        v354  = InterfaceIdentifier.ipv6Address.getter(v358, v353);
        v355  = v359;
        v356  = v360;
        v357  = v361;
        sub_100020B40(v358, v353);
      }

      v362  = WiFiAddress.apiAddress(with:)(v354, v355, v356, v357, v401);
      sub_1000ABC94(v354, v355, v356, v357);
      v363  = objc_allocWithZone(&OBJC_CLASS___WiFiAwarePublisherDataSessionHandle);
      v364  = [v363 initWithDatapathID:v392 initiatorDataAddress:v362];

      v221  = v402;
      [v352 publishDataConfirmedForHandle:v364 localInterfaceIndex:v350 serviceSpecificInfo:v402];

      swift_unknownObjectRelease(v352);
      uint64_t v30 = v394;
      uint64_t v125 = v387;
      v197  = (char *)v391;
    }

LABEL_140:
    v365  = qword_10040C358;
    if ((v125[qword_10040C358] & 1) != 0)
    {
    }

    else
    {
      sub_1000226B0((uint64_t)(v197 + 136), (uint64_t)v403, &qword_100409E58);
      if (v404 == 255)
      {

        sub_1000225EC((uint64_t)v403, &qword_100409E58);
      }

      else if ((v404 & 1) != 0)
      {
        v402  = v221;
        v394  = v30;
        sub_1000589F8(v403, (uint64_t)&v405);
        v125[v365]  = 1;
        v366  = v407;
        v367  = v408;
        v401  = (uint64_t)sub_100021104(&v405, v407);
        v368  = v197[2];
        v369  = v197[3];
        v370  = (unint64_t)*((unsigned int *)v197 + 1) << 16;
        if (*((void *)v197 + 16) == 1LL)
        {
          v371  = 0LL;
          v372  = 0xF000000000000000LL;
        }

        else
        {
          v373  = v197;
          v371  = *((void *)v197 + 11);
          v372  = *((void *)v373 + 12);
          sub_100020AFC(v371, v372);
        }

        v374  = (uint64_t)ObjectType;
        WitnessTable  = swift_getWitnessTable(&unk_10035D5D8, ObjectType);
        v376  = sub_1002A1F20(v374, WitnessTable);
        (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v367 + 8))( v368 | (v369 << 8) | v370,  v371,  v372,  v376 & 0xFFFFFFFFFFFFFFLL,  v366,  v367);

        sub_100020B40(v371, v372);
        sub_100002AC4(&v405);
        uint64_t v30 = v394;
      }

      else
      {

        sub_10017B2A8((uint64_t)v403);
      }
    }

    return sub_10005802C(v30, type metadata accessor for DriverEvent);
  }

  os_log_t v28 = (os_log_t)v399;
  sub_100057FE8(v399, (uint64_t)v19, type metadata accessor for DriverEvent);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(v19, v4);
  uint64_t v30 = (uint64_t)v19;
  if (EnumCaseMultiPayload != 4)
  {
    os_log_t v31 = (os_log_t)v400;
    uint64_t v32 = v401;
    if (!EnumCaseMultiPayload)
    {
      sub_100057FE8((uint64_t)v19, (uint64_t)v17, type metadata accessor for DriverEvent);
      sub_100058090(v17, &v411);
      sub_100058090(&v411, v413);
      int v33 = sub_1001073D8((uint64_t)v413) - 4;
      unint64_t v34 = (unint64_t)v397 & v398;
      switch(v33)
      {
        case 0:
          uint64_t v35 = NANBitmap.Channel.operatingClass.getter(v413);
          int v36 = *(unsigned __int8 *)(v35 + 7);
          int v37 = *(unsigned __int8 *)(v35 + 8);
          int v38 = &v402[qword_10040C348];
          if (!(*(void *)&v402[qword_10040C348 + 8] >> 62) && v36 == 5)
          {
            if (!*(_BYTE *)(v35 + 8))
            {
              uint64_t v60 = 1LL;
              goto LABEL_25;
            }

            uint64_t v39 = *(char **)v38;
            uint64_t v40 = v402;
            uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
            os_log_type_t v42 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v41, v42))
            {
              v400  = (uint64_t)v41;
              v402  = v39;
              v394  = v30;
              uint64_t v43 = swift_slowAlloc(32LL, -1LL);
              uint64_t v44 = (char **)swift_slowAlloc(8LL, -1LL);
              v401  = swift_slowAlloc(32LL, -1LL);
              *(void *)&v403[0]  = v401;
              *(_DWORD *)uint64_t v43 = 138412802;
              v405  = v40;
              uint64_t v45 = v40;
              uint64_t v46 = v44;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              *uint64_t v44 = v40;

              *(_WORD *)(v43 + 12)  = 2080;
              unint64_t v47 = 0xE700000000000000LL;
              unint64_t v48 = 0x646570706F7264LL;
              if (v37 != 2)
              {
                unint64_t v48 = 0xD000000000000010LL;
                unint64_t v47 = 0x8000000100364C40LL;
              }

              if (v37 == 1) {
                uint64_t v49 = 0x756F2064656D6974LL;
              }
              else {
                uint64_t v49 = v48;
              }
              if (v37 == 1) {
                unint64_t v50 = 0xE900000000000074LL;
              }
              else {
                unint64_t v50 = v47;
              }
              v405  = (char *)sub_10000235C(v49, v50, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              swift_bridgeObjectRelease(v50);
              *(_WORD *)(v43 + 22)  = 2048;
              v405  = v402;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              os_log_t v51 = (os_log_t)v400;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v400,  v42,  "%@ failed to send datapath response, with status %s, for retry #%ld",  (uint8_t *)v43,  0x20u);
              uint64_t v52 = sub_100002274(&qword_100404DE0);
              swift_arrayDestroy(v46, 1LL, v52);
              swift_slowDealloc(v46, -1LL, -1LL);
              uint64_t v53 = v401;
              swift_arrayDestroy(v401, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v53, -1LL, -1LL);
              swift_slowDealloc(v43, -1LL, -1LL);

              uint64_t v30 = v394;
            }

            else
            {
            }

            sub_100225F08();
            return sub_10005802C(v30, type metadata accessor for DriverEvent);
          }

          v172  = v402;
          v173  = (os_log_s *)Logger.logObject.getter(v172);
          if (v37)
          {
            v174  = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v173, (os_log_type_t)v174))
            {
              LODWORD(v399)  = v174;
              v402  = (char *)v173;
              v398  = v34;
              v394  = v30;
              v175  = swift_slowAlloc(42LL, -1LL);
              v401  = swift_slowAlloc(8LL, -1LL);
              v400  = swift_slowAlloc(96LL, -1LL);
              *(void *)&v403[0]  = v400;
              *(_DWORD *)v175  = 138413058;
              v405  = v172;
              v176  = v172;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              *(void *)v401  = v172;

              *(_WORD *)(v175 + 12)  = 2080;
              v177  = NANManagementFrameType.description.getter(v36);
              v179  = v178;
              v405  = (char *)sub_10000235C(v177, v178, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              swift_bridgeObjectRelease(v179);
              *(_WORD *)(v175 + 22)  = 2080;
              v180  = 0xE700000000000000LL;
              v181  = 0x646570706F7264LL;
              if (v37 != 2)
              {
                v181  = 0xD000000000000010LL;
                v180  = 0x8000000100364C40LL;
              }

              if (v37 == 1) {
                v182  = 0x756F2064656D6974LL;
              }
              else {
                v182  = v181;
              }
              if (v37 == 1) {
                v183  = 0xE900000000000074LL;
              }
              else {
                v183  = v180;
              }
              v405  = (char *)sub_10000235C(v182, v183, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              swift_bridgeObjectRelease(v183);
              *(_WORD *)(v175 + 32)  = 2080;
              v184  = *(char **)v38;
              v185  = *((void *)v38 + 1);
              sub_10022B084(*(void **)v38, v185);

              v186  = sub_10022477C((uint64_t)v184, v185);
              v188  = v187;
              sub_10022B0C4(v184, v185);
              v405  = (char *)sub_10000235C(v186, v188, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);

              swift_bridgeObjectRelease(v188);
              os_log_t v115 = (os_log_t)v402;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v402,  (os_log_type_t)v399,  "%@ failed to transmit frame %s with status %s in %s",  (uint8_t *)v175,  0x2Au);
              v189  = sub_100002274(&qword_100404DE0);
              v190  = v401;
              swift_arrayDestroy(v401, 1LL, v189);
              swift_slowDealloc(v190, -1LL, -1LL);
              v191  = &type metadata for Any[8];
              v192  = (char *)v400;
              v193  = (char *)v400;
              v194  = 3LL;
LABEL_121:
              swift_arrayDestroy(v193, v194, v191);
              swift_slowDealloc(v192, -1LL, -1LL);
              uint64_t v118 = v175;
LABEL_122:
              swift_slowDealloc(v118, -1LL, -1LL);

              uint64_t v30 = v394;
              return sub_10005802C(v30, type metadata accessor for DriverEvent);
            }
          }

          else
          {
            v265  = static os_log_type_t.default.getter();
            v266  = v265;
            if (os_log_type_enabled(v173, v265))
            {
              v267  = swift_slowAlloc(32LL, -1LL);
              LODWORD(v399)  = v266;
              v268  = v267;
              v401  = swift_slowAlloc(8LL, -1LL);
              v400  = swift_slowAlloc(64LL, -1LL);
              *(void *)&v403[0]  = v400;
              *(_DWORD *)v268  = 138412802;
              v394  = v30;
              v405  = v172;
              v269  = v172;
              v402  = (char *)v173;
              v270  = v269;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              *(void *)v401  = v172;

              *(_WORD *)(v268 + 12)  = 2080;
              v271  = NANManagementFrameType.description.getter(v36);
              v273  = v272;
              v405  = (char *)sub_10000235C(v271, v272, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              swift_bridgeObjectRelease(v273);
              *(_WORD *)(v268 + 22)  = 2080;
              v274  = *(char **)v38;
              v275  = *((void *)v38 + 1);
              sub_10022B084(*(void **)v38, v275);

              v276  = sub_10022477C((uint64_t)v274, v275);
              v278  = v277;
              v279  = v274;
              uint64_t v30 = v394;
              sub_10022B0C4(v279, v275);
              v405  = (char *)sub_10000235C(v276, v278, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);

              swift_bridgeObjectRelease(v278);
              v280  = v402;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v402,  (os_log_type_t)v399,  "%@ successfully transmitted frame %s in %s",  (uint8_t *)v268,  0x20u);
              v281  = sub_100002274(&qword_100404DE0);
              v282  = v401;
              swift_arrayDestroy(v401, 1LL, v281);
              swift_slowDealloc(v282, -1LL, -1LL);
              v283  = v400;
              swift_arrayDestroy(v400, 2LL, &type metadata for Any[8]);
              swift_slowDealloc(v283, -1LL, -1LL);
              swift_slowDealloc(v268, -1LL, -1LL);

              return sub_10005802C(v30, type metadata accessor for DriverEvent);
            }
          }

          return sub_10005802C(v30, type metadata accessor for DriverEvent);
        case 1:
          uint64_t v62 = NANBitmap.Channel.operatingClass.getter(v413);
          unint64_t v63 = *(unsigned __int8 *)(v62 + 8);
          uint64_t v64 = *(unsigned __int8 *)(v62 + 9);
          v401  = *(unsigned int *)(v62 + 10);
          uint64_t v65 = *(void *)(v62 + 16);
          uint64_t v66 = v402;
          sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100107584);
          uint64_t v67 = v66;
          uint64_t v68 = sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100107584);
          uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
          os_log_type_t v70 = static os_log_type_t.default.getter();
          int v71 = v70;
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v72 = swift_slowAlloc(22LL, -1LL);
            v398  = v63;
            uint64_t v73 = v72;
            char v74 = (char **)swift_slowAlloc(8LL, -1LL);
            v402  = (char *)swift_slowAlloc(32LL, -1LL);
            *(void *)&v403[0]  = v402;
            *(_DWORD *)uint64_t v73 = 138412546;
            LODWORD(v400)  = v71;
            v405  = v67;
            v394  = v30;
            os_log_t v75 = v67;
            v399  = (uint64_t)v69;
            uint64_t v76 = v64;
            uint64_t v77 = v65;
            uint64_t v78 = v75;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
            char *v74 = v67;

            uint64_t v65 = v77;
            *(_WORD *)(v73 + 12)  = 2080;
            uint64_t v79 = WiFiAddress.description.getter(v398 | (v76 << 8) | (v401 << 16));
            unint64_t v81 = v80;
            v405  = (char *)sub_10000235C(v79, v80, (uint64_t *)v403);
            uint64_t v30 = v394;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
            swift_bridgeObjectRelease(v81);
            sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
            swift_bridgeObjectRelease(v77);
            os_log_t v82 = (os_log_t)v399;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v399,  (os_log_type_t)v400,  "%@ received a new datapath request from %s",  (uint8_t *)v73,  0x16u);
            uint64_t v83 = sub_100002274(&qword_100404DE0);
            swift_arrayDestroy(v74, 1LL, v83);
            swift_slowDealloc(v74, -1LL, -1LL);
            uint64_t v84 = v402;
            swift_arrayDestroy(v402, 1LL, &type metadata for Any[8]);
            swift_slowDealloc(v84, -1LL, -1LL);
            swift_slowDealloc(v73, -1LL, -1LL);
          }

          else
          {

            sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
            swift_bridgeObjectRelease(v65);
          }

          v195  = v395;
          Array<A>.retrieve(attribute:)(41, v65, v395);
          sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          v196  = type metadata accessor for NANAttribute(0LL);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v196 - 8) + 48LL))( v195,  1LL,  v196) == 1)
          {
            sub_1000225EC(v395, &qword_10040D440);
          }

          else if (swift_getEnumCaseMultiPayload(v395, v196) == 36)
          {
            v205  = *(void *)(v395 + 24);
            v206  = *(void *)(v395 + 32);
            v207  = *(void *)(v395 + 40);
            v208  = *(void *)(v395 + 48);
            v209  = v30;
            v210  = *(void *)(v395 + 56);
            v211  = (uint64_t *)&v67[qword_10040C338];
            v212  = *(void *)&v67[qword_10040C338];
            v213  = *(void *)&v67[qword_10040C338 + 8];
            *v211  = v205;
            v211[1]  = v206;
            sub_10002255C(v205, v206);
            sub_100020B40(v212, v213);
            sub_100020B40(v205, v206);
            v214  = v210;
            uint64_t v30 = v209;
            sub_1001062E0(v207, v208, v214);
          }

          else
          {
            sub_10005802C(v395, type metadata accessor for NANAttribute);
          }

          uint64_t v60 = 0LL;
          unint64_t v61 = 0x8000000000000000LL;
          goto LABEL_103;
        case 3:
          uint64_t v101 = NANBitmap.Channel.operatingClass.getter(v413);
          int v102 = *(unsigned __int8 *)(v101 + 1);
          uint64_t v103 = *(char **)(v101 + 16);
          uint64_t v104 = v402;
          v105  = sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100107584);
          uint64_t v106 = (void *)Logger.logObject.getter(v105);
          os_log_type_t v107 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled((os_log_t)v106, v107))
          {

            sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
            swift_bridgeObjectRelease(v103);
            return sub_10005802C(v30, type metadata accessor for DriverEvent);
          }

          v400  = (uint64_t)v106;
          v402  = v103;
          v394  = v30;
          uint64_t v108 = swift_slowAlloc(22LL, -1LL);
          uint64_t v109 = (char **)swift_slowAlloc(8LL, -1LL);
          v401  = swift_slowAlloc(32LL, -1LL);
          *(void *)&v403[0]  = v401;
          *(_DWORD *)uint64_t v108 = 138412546;
          v405  = v104;
          v110  = v104;
          uint64_t v111 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          *uint64_t v109 = v104;

          *(_WORD *)(v108 + 12)  = 2080;
          uint64_t v112 = 0x6465747065636361LL;
          if (v102 != 1) {
            uint64_t v112 = 0x64657463656A6572LL;
          }
          if (v102) {
            uint64_t v113 = v112;
          }
          else {
            uint64_t v113 = 0x65756E69746E6F63LL;
          }
          if (v102) {
            unint64_t v114 = 0xE800000000000000LL;
          }
          else {
            unint64_t v114 = 0xE900000000000064LL;
          }
          v405  = (char *)sub_10000235C(v113, v114, (uint64_t *)v403);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          swift_bridgeObjectRelease(v114);
          sub_1001074E8( (uint64_t)&v411,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
          swift_bridgeObjectRelease(v402);
          os_log_t v115 = (os_log_t)v400;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v400,  v107,  "%@ received datapath confirmation with status %s",  (uint8_t *)v108,  0x16u);
          uint64_t v116 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v111, 1LL, v116);
          swift_slowDealloc(v111, -1LL, -1LL);
          uint64_t v117 = v401;
          swift_arrayDestroy(v401, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v117, -1LL, -1LL);
          uint64_t v118 = v108;
          goto LABEL_122;
        case 4:
          uint64_t v119 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v413);
          v392  = *v119;
          uint64_t v120 = v119[1];
          v399  = v119[2];
          v121  = v119[3];
          v122  = v119[4];
          uint64_t v123 = (os_log_s *)v119[5];
          v400  = v119[6];
          uint64_t v124 = &v402[qword_1004109C8];
          uint64_t v125 = v402;
          uint64_t v126 = (os_log_s *)Logger.logObject.getter(v125);
          os_log_type_t v127 = static os_log_type_t.default.getter();
          LODWORD(v402)  = v127;
          BOOL v128 = os_log_type_enabled(v126, v127);
          v397  = v123;
          v398  = v34;
          v395  = v120;
          v401  = v121;
          if (v128)
          {
            v129  = swift_slowAlloc(22LL, -1LL);
            v389  = swift_slowAlloc(8LL, -1LL);
            v391  = swift_slowAlloc(32LL, -1LL);
            *(void *)&v403[0]  = v391;
            *(_DWORD *)v129  = 138412546;
            v390  = v126;
            v405  = v125;
            v393  = v124;
            v130  = v125;
            v394  = v30;
            v131  = v130;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
            uint64_t v132 = v389;
            *(void *)v389  = v125;

            uint64_t v30 = v394;
            *(_WORD *)(v129 + 12)  = 2080;
            v133  = WiFiAddress.description.getter(v120 | (v399 << 8) | (v401 << 16) | (v122 << 24) | ((void)v123 << 32) | (v400 << 40));
            unint64_t v135 = v134;
            v405  = (char *)sub_10000235C(v133, v134, (uint64_t *)v403);
            v136  = v393;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
            swift_bridgeObjectRelease(v135);
            v137  = v390;
            _os_log_impl( (void *)&_mh_execute_header,  v390,  (os_log_type_t)v402,  "%@ datapath established with %s",  (uint8_t *)v129,  0x16u);
            uint64_t v138 = sub_100002274(&qword_100404DE0);
            swift_arrayDestroy(v132, 1LL, v138);
            swift_slowDealloc(v132, -1LL, -1LL);
            uint64_t v139 = v391;
            swift_arrayDestroy(v391, 1LL, &type metadata for Any[8]);
            swift_slowDealloc(v139, -1LL, -1LL);
            swift_slowDealloc(v129, -1LL, -1LL);
          }

          else
          {

            v136  = v124;
          }

          v197  = &v125[qword_10040C330];
          swift_beginAccess(&v125[qword_10040C330], &v409, 0LL, 0LL);
          if (v197[74] == 2)
          {
            v164  = (os_log_s *)Logger.logObject.getter(v198);
            v199  = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v164, v199))
            {
              v200  = swift_slowAlloc(15LL, -1LL);
              v201  = swift_slowAlloc(32LL, -1LL);
              *(void *)&v403[0]  = v201;
              *(_DWORD *)v200  = 136315394;
              v202  = WiFiAddress.description.getter(v395 | (v399 << 8) | (v401 << 16) | (v122 << 24) | ((void)v397 << 32) | (v400 << 40));
              v204  = v203;
              v405  = (char *)sub_10000235C(v202, v203, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              swift_bridgeObjectRelease(v204);
              *(_WORD *)(v200 + 12)  = 256;
              LOBYTE(v405)  = v392;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, (char *)&v405 + 1);
              _os_log_impl( (void *)&_mh_execute_header,  v164,  v199,  "Established the datapath to %s[%hhu] even though we did not accept it in the datapath response. Force te rminating it now",  (uint8_t *)v200,  0xFu);
              swift_arrayDestroy(v201, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v201, -1LL, -1LL);
              swift_slowDealloc(v200, -1LL, -1LL);
            }

            goto LABEL_86;
          }

          v215  = *((void *)v197 + 2);
          v388  = v122;
          if (v215 == 4LL
            || (v217  = *((void *)v197 + 3),
                v216  = *((void *)v197 + 4),
                sub_100020AFC(v217, v216),
                NANServiceInfo.genericServiceProtocol.getter(v215, v217, v216),
                v219  = v218,
                sub_1001062E0(v215, v217, v216),
                !v219))
          {
            v220  = 0LL;
          }

          else
          {
            v220  = NANGenericServiceProtocol.apiDatapathServiceSpecificInfo.getter(v219);
            swift_bridgeObjectRelease(v219);
          }

          uint64_t v11 = *(char **)&v125[qword_10040C328];
          swift_unownedRetainStrong(v11);
          v221  = (char *)v220;
          v225  = sub_1002E8D68((uint64_t)v221, v222, v223, v224);
          swift_release(v11);
          v226  = sub_10027E498(*((unsigned __int16 *)v197 + 1) | ((unint64_t)*((unsigned int *)v197 + 1) << 16));
          swift_release(v225);
          sub_10022B404(v220, v226 | 0x4000000000000000LL);
          swift_release(v226);

          Strong  = swift_unknownObjectWeakLoadStrong(&v125[qword_1004109D8]);
          if (Strong)
          {
            v228  = (void *)Strong;
            sub_100256998();
          }

          v229  = v401;
          if ((v125[qword_10040C350] & 1) != 0) {
            goto LABEL_140;
          }
          v391  = (uint64_t)v197;
          v393  = v136;
          v402  = v221;
          v125[qword_10040C350]  = 1;
          v230  = sub_100229540();
          v231  = (uint64_t *)&v125[qword_10040C338];
          v232  = *(void *)&v125[qword_10040C338 + 8];
          v387  = v125;
          v389  = (uint64_t)&v125[qword_10040C338];
          if (v232 >> 60 == 15)
          {
            v233  = v395 | (v399 << 8) | (v229 << 16) | (v388 << 24) | ((void)v397 << 32) | (v400 << 40);
            WiFiAddress.ipv6LinkLocalAddress.getter(v233);
            v235  = v234;
            v390  = v236;
            v238  = v237;
            v240  = v239;
          }

          else
          {
            v315  = v30;
            v316  = *v231;
            sub_100020AFC(*v231, v232);
            v235  = InterfaceIdentifier.ipv6Address.getter(v316, v232);
            v390  = v317;
            v238  = v318;
            v240  = v319;
            v320  = v316;
            uint64_t v30 = v315;
            sub_100020B40(v320, v232);
            v233  = v395 | (v399 << 8) | (v229 << 16) | (v388 << 24) | ((void)v397 << 32) | (v400 << 40);
          }

          v321  = (void (*)(__int128 *, void))(*(uint64_t (**)(__int128 *))(*v230 + 392LL))(v403);
          v323  = type metadata accessor for WiFiInterface.NeighborDiscoveryTable( 0LL,  *(void *)(v398 + 80),  *(void *)(*(void *)(v398 + 88) + 8LL),  v322);
          v401  = v233;
          v324  = v233;
          v325  = v238;
          v326  = (os_log_s *)v323;
          uint64_t v20 = 0LL;
          WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)( v324,  v235,  (uint64_t)v390,  v325,  v240,  v323);
          v400  = (uint64_t)v326;
          v321(v403, 0LL);
          swift_release(v230);
          swift_bridgeObjectRelease(v240);
          uint64_t v125 = v387;
          v338  = sub_100229540();
          swift_unownedRetainStrong(v11);
          v339  = *(void **)&v11[*(void *)(*(void *)v11 + 448LL)];
          swift_retain();
          swift_release(v11);
          swift_release(v338);
          v221  = v402;
          v197  = (char *)v391;
          if (!v339) {
            goto LABEL_133;
          }
          swift_release(v339);
          if (v338 != v339) {
            goto LABEL_133;
          }
          swift_unownedRetainStrong(v11);
          uint64_t v27 = (uint64_t *)v389;
          unint64_t v23 = *(void *)(v389 + 8);
          v394  = v30;
          if (v23 >> 60 != 15) {
            goto LABEL_158;
          }
          v340  = v401;
          WiFiAddress.ipv6LinkLocalAddress.getter(v401);
          v342  = v341;
          v344  = v343;
          v346  = v345;
          v348  = v347;
          goto LABEL_159;
        case 5:
          v140  = *(char **)(NANBitmap.Channel.operatingClass.getter(v413) + 8);
          v141  = &v402[qword_10040C348];
          uint64_t v143 = *(char **)&v402[qword_10040C348];
          v142  = *(void *)&v402[qword_10040C348 + 8];
          if (!(v142 >> 62))
          {
            v398  = v34;
            v241  = v402;
            v242  = (os_log_s *)Logger.logObject.getter(v241);
            v243  = static os_log_type_t.error.getter();
            v244  = v243;
            if (os_log_type_enabled(v242, v243))
            {
              v245  = swift_slowAlloc(42LL, -1LL);
              v394  = v30;
              v246  = v245;
              v247  = (os_log_s *)swift_slowAlloc(8LL, -1LL);
              v400  = (uint64_t)v247;
              v248  = swift_slowAlloc(64LL, -1LL);
              v401  = v248;
              *(_DWORD *)v246  = 138413058;
              ObjectType  = v143;
              v402  = v140;
              *(void *)&v403[0]  = v248;
              v405  = v241;
              v395  = (uint64_t)v406;
              v249  = v241;
              LODWORD(v399)  = v244;
              v250  = v249;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              *(void *)v247  = v241;

              v397  = v242;
              *(_WORD *)(v246 + 12)  = 2080;
              v251  = WiFiAwareTerminationReason.description.getter((uint64_t)v402);
              v253  = v252;
              v405  = (char *)sub_10000235C(v251, v252, (uint64_t *)v403);
              v254  = v395;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v395);
              swift_bridgeObjectRelease(v253);
              *(_WORD *)(v246 + 22)  = 2080;
              v255  = *(void **)v141;
              v256  = *((void *)v141 + 1);
              sub_10022B084(v255, v256);

              v257  = sub_10022477C((uint64_t)v255, v256);
              v259  = v258;
              sub_10022B0C4(v255, v256);
              v405  = (char *)sub_10000235C(v257, v259, (uint64_t *)v403);
              v140  = v402;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v254);

              swift_bridgeObjectRelease(v259);
              *(_WORD *)(v246 + 32)  = 2048;
              v405  = ObjectType;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v254);
              v260  = v397;
              _os_log_impl( (void *)&_mh_execute_header,  v397,  (os_log_type_t)v399,  "%@ got early termination (%s) when %s for retry #%ld",  (uint8_t *)v246,  0x2Au);
              v261  = sub_100002274(&qword_100404DE0);
              v262  = v400;
              swift_arrayDestroy(v400, 1LL, v261);
              swift_slowDealloc(v262, -1LL, -1LL);
              v263  = v401;
              swift_arrayDestroy(v401, 2LL, &type metadata for Any[8]);
              swift_slowDealloc(v263, -1LL, -1LL);
              v264  = v246;
              uint64_t v30 = v394;
              swift_slowDealloc(v264, -1LL, -1LL);
            }

            else
            {
            }

            sub_1002250D0((uint64_t)v140, 0xD00000000000001BLL, 0x8000000100367D70LL);
            return sub_10005802C(v30, type metadata accessor for DriverEvent);
          }

          if (v142 >> 62 == 1
            || (__int128)__PAIR128__(v142, (unint64_t)v143) < (__int128)__PAIR128__(0x8000000000000000LL, 2LL))
          {
            uint64_t v57 = 3LL;
            uint64_t v55 = 0x7165722072656570LL;
LABEL_49:
            unint64_t v56 = 0xEC00000074736575LL;
            goto LABEL_50;
          }

          if (v142 != 0x8000000000000000LL || v143 != (char *)2)
          {
            uint64_t v55 = 0x7165722072657375LL;
            uint64_t v57 = 2LL;
            goto LABEL_49;
          }

          v398  = v34;
          v285  = v402;
          v286  = (void *)Logger.logObject.getter(v285);
          v287  = static os_log_type_t.info.getter();
          v288  = v287;
          if (!os_log_type_enabled((os_log_t)v286, v287))
          {

            return sub_10005802C(v30, type metadata accessor for DriverEvent);
          }

          uint64_t v89 = swift_slowAlloc(32LL, -1LL);
          v289  = (char **)swift_slowAlloc(8LL, -1LL);
          v401  = (uint64_t)v289;
          v402  = (char *)swift_slowAlloc(64LL, -1LL);
          *(void *)&v403[0]  = v402;
          *(_DWORD *)uint64_t v89 = 138412802;
          v394  = v30;
          v405  = v285;
          v400  = (uint64_t)v286;
          v290  = v285;
          LODWORD(v399)  = v288;
          v291  = v290;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          *v289  = v285;

          *(_WORD *)(v89 + 12)  = 2080;
          v292  = WiFiAwareTerminationReason.description.getter((uint64_t)v140);
          v294  = v293;
          v405  = (char *)sub_10000235C(v292, v293, (uint64_t *)v403);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
          swift_bridgeObjectRelease(v294);
          *(_WORD *)(v89 + 22)  = 2080;
          v295  = *(void *)v141;
          v296  = *((void *)v141 + 1);
          sub_10022B084(*(void **)v141, v296);

          v297  = sub_10022477C(v295, v296);
          v299  = v298;
          v300  = (void *)v295;
          uint64_t v30 = v394;
          sub_10022B0C4(v300, v296);
          v405  = (char *)sub_10000235C(v297, v299, (uint64_t *)v403);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);

          swift_bridgeObjectRelease(v299);
          os_log_t v95 = (os_log_t)v400;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v400,  (os_log_type_t)v399,  "%@ got early termination (%s) when %s, ignoring",  (uint8_t *)v89,  0x20u);
          v301  = sub_100002274(&qword_100404DE0);
          v302  = v401;
          swift_arrayDestroy(v401, 1LL, v301);
          swift_slowDealloc(v302, -1LL, -1LL);
          uint64_t v97 = &type metadata for Any[8];
          uint64_t v98 = v402;
          uint64_t v99 = v402;
          uint64_t v100 = 2LL;
          break;
        case 6:
          v144  = *(_BYTE *)(NANBitmap.Channel.operatingClass.getter(v413) + 15);
          uint64_t v145 = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong(&v402[qword_1004109D8]);
          if (v145 && (v146  = v145[qword_100410A30], v145, v146 == 1))
          {
            uint64_t v147 = &v402[qword_10040C348];
            uint64_t v148 = *(void *)&v402[qword_10040C348 + 8] >> 62;
            if (!(_DWORD)v148
              || (_DWORD)v148 != 1 && *(_OWORD *)v147 < (signed __int128)__PAIR128__(0x8000000000000000LL, 2LL))
            {
              uint64_t v149 = &v402[qword_10040C330];
              swift_beginAccess(&v402[qword_10040C330], v403, 1LL, 0LL);
              if (v149[74] == 1)
              {
                if (((v144 - 1) & 0xF8) != 0) {
                  v150  = 2;
                }
                else {
                  v150  = 0x101020102020200uLL >> (8 * (v144 - 1));
                }
                v149[74]  = v150;
              }

              v151  = v402;
              v152  = (os_log_s *)Logger.logObject.getter(v151);
              int v153 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v152, (os_log_type_t)v153))
              {
                v399  = (uint64_t)v152;
                LODWORD(v401)  = v153;
                v394  = v30;
                uint64_t v154 = swift_slowAlloc(32LL, -1LL);
                v155  = (os_log_s *)swift_slowAlloc(8LL, -1LL);
                v402  = (char *)swift_slowAlloc(64LL, -1LL);
                v405  = v402;
                *(_DWORD *)uint64_t v154 = 138412802;
                v409  = (uint64_t)v151;
                uint64_t v156 = v151;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v409, v410);
                v400  = (uint64_t)v155;
                *(void *)v155  = v151;

                *(_WORD *)(v154 + 12)  = 2080;
                LOBYTE(v409)  = v144;
                uint64_t v157 = String.init<A>(describing:)(&v409, &type metadata for NANDataHostAssistRequest.Reason);
                v159  = v158;
                v409  = sub_10000235C(v157, v158, (uint64_t *)&v405);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v409, v410);
                swift_bridgeObjectRelease(v159);
                *(_WORD *)(v154 + 22)  = 2080;
                int v160 = v149[74];

                if (v160)
                {
                  unint64_t v161 = 0xE800000000000000LL;
                  if (v160 == 1) {
                    v162  = 0x747065636361LL;
                  }
                  else {
                    v162  = 0x7463656A6572LL;
                  }
                  v377  = v162 & 0xFFFFFFFFFFFFLL | 0x6465000000000000LL;
                }

                else
                {
                  v377  = 0x65756E69746E6F63LL;
                  unint64_t v161 = 0xE900000000000064LL;
                }

                v409  = sub_10000235C(v377, v161, (uint64_t *)&v405);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v409, v410);

                swift_bridgeObjectRelease(v161);
                v378  = (os_log_t)v399;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v399,  (os_log_type_t)v401,  "%@ received host assist request for %s. Responding with %s",  (uint8_t *)v154,  0x20u);
                v379  = sub_100002274(&qword_100404DE0);
                v380  = v400;
                swift_arrayDestroy(v400, 1LL, v379);
                swift_slowDealloc(v380, -1LL, -1LL);
                v381  = v402;
                swift_arrayDestroy(v402, 2LL, &type metadata for Any[8]);
                swift_slowDealloc(v381, -1LL, -1LL);
                swift_slowDealloc(v154, -1LL, -1LL);

                uint64_t v30 = v394;
              }

              else
              {
              }

              sub_100225CE8();
              uint64_t v60 = 0LL;
              unint64_t v61 = 0LL;
              goto LABEL_103;
            }

            v398  = v34;
            v394  = v30;
            v303  = v402;
            os_log_t v115 = (os_log_t)Logger.logObject.getter(v303);
            v304  = static os_log_type_t.error.getter();
            v305  = v304;
            if (os_log_type_enabled(v115, v304))
            {
              v306  = swift_slowAlloc(22LL, -1LL);
              LODWORD(v401)  = v305;
              v175  = v306;
              v307  = (char **)swift_slowAlloc(8LL, -1LL);
              v402  = (char *)swift_slowAlloc(32LL, -1LL);
              *(void *)&v403[0]  = v402;
              *(_DWORD *)v175  = 138412546;
              v405  = v303;
              v308  = v303;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);
              *v307  = v303;

              *(_WORD *)(v175 + 12)  = 2080;
              v400  = v175 + 14;
              v309  = *(void **)v147;
              v310  = *((void *)v147 + 1);
              sub_10022B084(*(void **)v147, v310);

              v311  = sub_10022477C((uint64_t)v309, v310);
              v313  = v312;
              sub_10022B0C4(v309, v310);
              v405  = (char *)sub_10000235C(v311, v313, (uint64_t *)v403);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v405, v406);

              swift_bridgeObjectRelease(v313);
              _os_log_impl( (void *)&_mh_execute_header,  v115,  (os_log_type_t)v401,  "%@ ignoring host assist request when %s",  (uint8_t *)v175,  0x16u);
              v314  = sub_100002274(&qword_100404DE0);
              swift_arrayDestroy(v307, 1LL, v314);
              swift_slowDealloc(v307, -1LL, -1LL);
              v191  = &type metadata for Any[8];
              v192  = v402;
              v193  = v402;
              v194  = 1LL;
              goto LABEL_121;
            }

            uint64_t v30 = v394;
          }

          else
          {
            v163  = v402;
            v164  = (os_log_s *)Logger.logObject.getter(v163);
            v165  = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v164, v165))
            {
              v166  = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              v167  = swift_slowAlloc(8LL, -1LL);
              v394  = v30;
              v168  = (void *)v167;
              *(_DWORD *)v166  = 138412290;
              *(void *)&v403[0]  = v163;
              v169  = v163;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v403, (char *)v403 + 8);
              *v168  = v163;

              _os_log_impl( (void *)&_mh_execute_header,  v164,  v165,  "%@ cannot accept host assist request because the associated publisher is no longer active",  v166,  0xCu);
              v170  = sub_100002274(&qword_100404DE0);
              swift_arrayDestroy(v168, 1LL, v170);
              v171  = v168;
              uint64_t v30 = v394;
              swift_slowDealloc(v171, -1LL, -1LL);
              swift_slowDealloc(v166, -1LL, -1LL);
            }

            else
            {
            }

void *sub_100229540()
{
  uint64_t v1 = v0 + qword_10040C330;
  swift_beginAccess(v0 + qword_10040C330, v10, 0LL, 0LL);
  sub_1000226B0(v1 + 136, (uint64_t)v8, &qword_100409E58);
  unsigned __int8 v2 = v9;
  if (v9 == 255)
  {
    sub_1000225EC((uint64_t)v8, &qword_100409E58);
  }

  else
  {
    sub_10017B2A8((uint64_t)v8);
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void **)(v0 + qword_10040C328);
      swift_unownedRetainStrong(v3);
      uint64_t v4 = 57LL;
      goto LABEL_7;
    }
  }

  int v5 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = *(void **)(v0 + qword_10040C328);
  swift_unownedRetainStrong(v3);
  if (v5 != 2) {
    return v3;
  }
  uint64_t v4 = 56LL;
LABEL_7:
  uint64_t v6 = *(void *)((char *)v3 + *(void *)(*v3 + 8 * v4));
  swift_retain();
  swift_release(v3);
  if (!v6)
  {
    swift_unownedRetainStrong(v3);
    return v3;
  }

  return (void *)v6;
}

uint64_t sub_100229638()
{
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v2 = *(void *)(*(void *)((swift_isaMask & *v0) + 0x58LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v2,  v1,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v1,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v5 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v6 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v5,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v8 = type metadata accessor for Preferences(0LL, v5, v6, v7);
  uint64_t v97 = *(void *)(v8 - 8);
  uint64_t v98 = v8;
  __chkstk_darwin(v8);
  os_log_t v95 = (char *)&v93 - v9;
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v93 - v15;
  uint64_t v17 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v94 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v96 = (char *)&v93 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  os_log_t v99 = (os_log_t)((char *)&v93 - v24);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v100 = (char *)&v93 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v101 = (char *)&v93 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v93 = (char *)&v93 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  int v33 = (char **)((char *)&v93 - v32);
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v93 - v34;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  int v36 = v102;
  int v37 = &v102[qword_10040C340];
  __n128 v38 = swift_beginAccess(&v102[qword_10040C340], v107, 0LL, 0LL);
  (*(void (**)(char *, char *, uint64_t, __n128))(v11 + 16))(v14, v37, v10, v38);
  uint64_t v103 = v35;
  uint64_t v39 = v18;
  DispatchTime.distance(to:)(v16);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v40(v14, v10);
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  v40(v41, v10);
  *int v33 = 10LL;
  uint64_t v43 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v44 = *(void (**)(void *, uint64_t, uint64_t))(v18 + 104);
  uint64_t v104 = v33;
  v44(v33, enum case for DispatchTimeInterval.seconds(_:), v17);
  uint64_t v45 = *(void *)&v36[qword_10040C348];
  uint64_t v46 = *(void *)&v36[qword_10040C348 + 8] >> 62;
  if ((_DWORD)v46)
  {
    if ((_DWORD)v46 != 1) {
      __asm { BR              X9 }
    }

    unint64_t v47 = v36;
    uint64_t v48 = *(void *)&v36[qword_10040C328];
    swift_unownedRetainStrong(v48);
    uint64_t v49 = v95;
    WiFiInterface.preferences.getter();
    swift_release(v48);
    uint64_t v50 = v98;
    uint64_t v51 = Preferences.enableUserspaceP2POptions.getter(v98);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v49, v50);
    uint64_t v52 = *(void *)PreferenceDefaults.EnableUserspaceP2POptions.keepAliveTermination.unsafeMutableAddressor() & ~v51;
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    uint64_t v54 = (uint64_t)v96;
    uint64_t v55 = (uint64_t)v103;
    v53(v96, v103, v17);
    if (v52)
    {
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v59(v54, v17);
    }

    else
    {
      uint64_t v56 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
      uint64_t v57 = (uint64_t)v101;
      v53(v101, (char *)v56, v17);
      BOOL v58 = static DispatchTimeInterval.< infix(_:_:)(v57, v54);
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v59(v57, v17);
      v59(v54, v17);
      if (v58)
      {
        uint64_t v60 = v94;
        v53(v94, (char *)v55, v17);
        id v61 = v47;
        uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = swift_slowAlloc(22LL, -1LL);
          uint64_t v65 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v101 = (char *)swift_slowAlloc(32LL, -1LL);
          v105  = v101;
          *(_DWORD *)uint64_t v64 = 138412546;
          uint64_t v106 = (uint64_t)v61;
          int v102 = (char *)v17;
          id v66 = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
          void *v65 = v61;

          *(_WORD *)(v64 + 12)  = 2080;
          uint64_t v67 = v94;
          uint64_t v68 = DispatchTimeInterval.description.getter();
          unint64_t v70 = v69;
          uint64_t v106 = sub_10000235C(v68, v69, (uint64_t *)&v105);
          uint64_t v42 = (uint64_t)v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
          swift_bridgeObjectRelease(v70);
          v59((uint64_t)v67, v42);
          _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "%@ will be terminated because no keep alive was received for %s",  (uint8_t *)v64,  0x16u);
          uint64_t v71 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v65, 1LL, v71);
          uint64_t v72 = v65;
          uint64_t v55 = (uint64_t)v103;
          swift_slowDealloc(v72, -1LL, -1LL);
          uint64_t v73 = v101;
          swift_arrayDestroy(v101, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v73, -1LL, -1LL);
          swift_slowDealloc(v64, -1LL, -1LL);
        }

        else
        {

          v59((uint64_t)v60, v17);
        }

        sub_100226544();
      }
    }
  }

  else
  {
    os_log_t v75 = v100;
    uint64_t v74 = (uint64_t)v101;
    *(void *)uint64_t v101 = 15LL;
    v44((void *)v74, v43, v42);
    uint64_t v55 = (uint64_t)v103;
    BOOL v76 = static DispatchTimeInterval.< infix(_:_:)(v74, (uint64_t)v103);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v59(v74, v42);
    if (v76)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v75, v55, v42);
      uint64_t v77 = v36;
      uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
      os_log_type_t v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80  = swift_slowAlloc(32LL, -1LL);
        uint64_t v81 = swift_slowAlloc(8LL, -1LL);
        os_log_t v99 = v78;
        os_log_t v82 = (void *)v81;
        uint64_t v101 = (char *)swift_slowAlloc(32LL, -1LL);
        v105  = v101;
        *(_DWORD *)v80  = 138412802;
        uint64_t v106 = (uint64_t)v77;
        int v102 = (char *)v42;
        uint64_t v83 = v77;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
        uint64_t v84 = v82;
        *os_log_t v82 = v77;

        *(_WORD *)(v80 + 12)  = 2080;
        uint64_t v85 = v100;
        uint64_t v86 = DispatchTimeInterval.description.getter();
        unint64_t v88 = v87;
        uint64_t v106 = sub_10000235C(v86, v87, (uint64_t *)&v105);
        uint64_t v55 = (uint64_t)v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
        swift_bridgeObjectRelease(v88);
        v59((uint64_t)v85, (uint64_t)v102);
        *(_WORD *)(v80 + 22)  = 2048;
        uint64_t v106 = v45;
        uint64_t v42 = (uint64_t)v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
        os_log_t v89 = v99;
        _os_log_impl( (void *)&_mh_execute_header,  v99,  v79,  "%@ did not get the datapath response acknowledgement for %s, retry #%ld",  (uint8_t *)v80,  0x20u);
        uint64_t v90 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v84, 1LL, v90);
        swift_slowDealloc(v84, -1LL, -1LL);
        uint64_t v91 = v101;
        swift_arrayDestroy(v101, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v91, -1LL, -1LL);
        swift_slowDealloc(v80, -1LL, -1LL);
      }

      else
      {

        v59((uint64_t)v75, v42);
      }

      sub_100225F08();
    }
  }

  v59((uint64_t)v104, v42);
  return ((uint64_t (*)(uint64_t, uint64_t))v59)(v55, v42);
}

uint64_t sub_10022A314(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)&v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = v1 + qword_10040C330;
    swift_beginAccess(v11, v13, 33LL, 0LL);
    sub_10022B4F4(a1, v11);
    return swift_endAccess(v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10022A404(uint64_t a1, unint64_t a2)
{
  id v5 = v2;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v6 = v5;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = (uint64_t)v6;
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v9 = 138412546;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    *uint64_t v10 = v6;

    *(_WORD *)(v9 + 12)  = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v14 = sub_10000235C(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%@ will terminate because of unsatisfiable policy: %s",  (uint8_t *)v9,  0x16u);
    uint64_t v12 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_arrayDestroy(v13, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  sub_100226544();
}

uint64_t sub_10022A60C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v30 = a1;
  ObjectType  = swift_getObjectType(v1);
  sub_100002274((uint64_t *)&unk_10040DCC0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  id v6 = (char *)&v28 - v5;
  uint64_t v7 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(v1 + qword_10040C348 + 8) >> 62 == 1LL)
  {
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v16 = v1 + qword_10040C340;
    __n128 v17 = swift_beginAccess(v2 + qword_10040C340, v31, 33LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v12 + 40))(v16, v15, v11, v17);
    swift_endAccess(v31);
    uint64_t v18 = v2 + qword_10040C330;
    swift_beginAccess(v2 + qword_10040C330, v33, 0LL, 0LL);
    sub_1000226B0(v18 + 136, (uint64_t)v31, &qword_100409E58);
    unsigned __int8 v19 = v32;
    if (v32 == 255)
    {
      return sub_1000225EC((uint64_t)v31, &qword_100409E58);
    }

    else
    {
      uint64_t result = sub_10017B2A8((uint64_t)v31);
      if ((v19 & 1) == 0)
      {
        uint64_t v20 = v30 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
        uint64_t v21 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
        sub_1000226B0(v20 + *(int *)(v21 + 48), (uint64_t)v6, (uint64_t *)&unk_10040DCC0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
        {
          return sub_1000225EC((uint64_t)v6, (uint64_t *)&unk_10040DCC0);
        }

        else
        {
          sub_100022628((uint64_t)v6, (uint64_t)v10, type metadata accessor for NANInternetSharingStatistics.Requester);
          uint64_t v22 = *(void *)(v2 + qword_10040C328);
          swift_unownedRetainStrong(v22);
          uint64_t v23 = v22 + *(void *)(*(void *)v22 + 680LL);
          swift_beginAccess(v23, v31, 33LL, 0LL);
          if (*(void *)(v23 + 8))
          {
            uint64_t v24 = ObjectType;
            WitnessTable  = swift_getWitnessTable(&unk_10035D5D8, ObjectType);
            unint64_t v26 = sub_1002A1F20(v24, WitnessTable);
            sub_100057FE8((uint64_t)v10, (uint64_t)v4, type metadata accessor for NANInternetSharingStatistics.Requester);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0LL, 1LL, v7);
            sub_1002E8FC4((uint64_t)v4, v26 & 0xFFFFFFFFFFFFFFLL);
          }

          swift_endAccess(v31);
          swift_release(v22);
          swift_unownedRetainStrong(v22);
          sub_10005802C((uint64_t)v10, type metadata accessor for NANInternetSharingStatistics.Requester);
          uint64_t v27 = v22 + *(void *)(*(void *)v22 + 680LL);
          swift_beginAccess(v27, v31, 1LL, 0LL);
          if (*(void *)(v27 + 8)) {
            *(_BYTE *)uint64_t v27 = 0;
          }
          return swift_release(v22);
        }
      }
    }
  }

  return result;
}

uint64_t sub_10022A964()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v20 - v7;
  unint64_t v9 = *(void *)((char *)v0 + qword_10040C348 + 8);
  if ((v9 & 0x8000000000000000LL) != 0
    && (unint64_t v10 = *(void *)((char *)v0 + qword_10040C348),
        (__int128)__PAIR128__(v9, v10) >= (__int128)__PAIR128__(0x8000000000000000LL, 2LL)))
  {
    if (v9 == 0x8000000000000000LL && v10 == 2) {
      return sub_1002250D0(1LL, 0xD000000000000030LL, 0x8000000100367C20LL);
    }
  }

  else
  {
    uint64_t v11 = *(void *)((char *)v0 + qword_10040C328);
    swift_unownedRetainStrong(*(void *)((char *)v1 + qword_10040C328));
    sub_1002E8C08();
    swift_release(v11);
    swift_unownedRetainStrong(v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( v8,  v11 + *(void *)(*(void *)v11 + 96LL),  AssociatedTypeWitness);
    swift_release(v11);
    uint64_t v12 = (unsigned __int8 *)v1 + qword_10040C330;
    swift_beginAccess((char *)v1 + qword_10040C330, v26, 0LL, 0LL);
    uint64_t v20 = *(unsigned int *)(v12 + 10);
    uint64_t v13 = *((unsigned __int16 *)v12 + 4);
    uint64_t v14 = *v12;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))( v14,  v13 | (v20 << 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
    uint64_t result = sub_10022B404((void *)2, 0x8000000000000000LL);
    uint64_t v17 = qword_10040C358;
    if (*((_BYTE *)v1 + qword_10040C358) == 1)
    {
      sub_1000226B0((uint64_t)(v12 + 136), (uint64_t)v21, &qword_100409E58);
      if (v22 == 255)
      {
        return sub_1000225EC((uint64_t)v21, &qword_100409E58);
      }

      else if ((v22 & 1) != 0)
      {
        sub_1000589F8(v21, (uint64_t)v23);
        uint64_t v18 = v24;
        uint64_t v19 = v25;
        sub_100021104(v23, v24);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))( *((unsigned __int16 *)v12 + 1) | ((unint64_t)*((unsigned int *)v12 + 1) << 16),  v18,  v19);
        *((_BYTE *)v1 + v17)  = 0;
        return sub_100002AC4(v23);
      }

      else
      {
        return sub_10017B2A8((uint64_t)v21);
      }
    }
  }

  return result;
}

id sub_10022ACA4(void *a1)
{
  id v1 = a1;
  sub_10022ACF8();
  uint64_t v3 = v2;

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

unint64_t sub_10022ACF8()
{
  v13[0]  = 0LL;
  v13[1]  = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  unint64_t v14 = 0xD000000000000016LL;
  unint64_t v15 = 0x8000000100367E10LL;
  uint64_t v1 = v0 + qword_10040C330;
  swift_beginAccess(v0 + qword_10040C330, v13, 0LL, 0LL);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object  = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits  = 0x203A6F543C205DLL;
  v4._object  = (void *)0xE700000000000000LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits  = WiFiAddress.description.getter(*(unsigned __int16 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 10) << 16));
  id v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v7._countAndFlagsBits  = 8254LL;
  v7._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v8 = *(void **)(v1 + 64);
  swift_bridgeObjectRetain(v8);
  v10._countAndFlagsBits  = NANServiceName.description.getter(v9, v8);
  uint64_t v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v11);
  return v14;
}

void sub_10022AE38()
{
}

id sub_10022AE70(uint64_t a1, uint64_t a2)
{
  return sub_100224D50(a1, a2);
}

uint64_t sub_10022AE98()
{
  return sub_100225CE8();
}

uint64_t sub_10022AEB0(uint64_t a1)
{
  return sub_1000225EC(a1, &qword_100405280);
}

uint64_t sub_10022AED4@<X0>(uint64_t a1@<X8>)
{
  return sub_100224694(a1);
}

void sub_10022AEF4(uint64_t a1)
{
  v8[0]  = "\b";
  v8[1]  = &unk_10035D270;
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    _OWORD v8[2] = *(void *)(v2 - 8) + 64LL;
    v8[3]  = &unk_10035D288;
    v8[4]  = &unk_10035D2A0;
    v8[5]  = &unk_10035D2B8;
    uint64_t v4 = type metadata accessor for DispatchTime(319LL);
    if (v5 <= 0x3F)
    {
      v8[6]  = *(void *)(v4 - 8) + 64LL;
      v8[7]  = &unk_10035D2D0;
      v8[8]  = &unk_10035D2E8;
      v8[9]  = &unk_10035D2E8;
      v8[10]  = (char *)&value witness table for Builtin.Int64 + 64;
      sub_10022AFF4(319LL);
      if (v7 <= 0x3F)
      {
        v8[11]  = *(void *)(v6 - 8) + 64LL;
        swift_initClassMetadata2(a1, 0LL, 12LL, v8, a1 + 96);
      }
    }
  }

uint64_t _s17ResponderInstanceCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&_s17ResponderInstanceCMn);
}

void sub_10022AFF4(uint64_t a1)
{
  if (!qword_100405C10)
  {
    uint64_t v2 = type metadata accessor for DispatchTime(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100405C10);
    }
  }

void *sub_10022B048(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  sub_10022B084(*(void **)a2, v4);
  *a1  = v3;
  a1[1]  = v4;
  return a1;
}

void *sub_10022B084(void *result, unint64_t a2)
{
  if (a2 >> 62 == 1)
  {
    uint64_t v2 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    id v3 = result;
    return (void *)swift_retain(v2);
  }

  return result;
}

void sub_10022B0B8(uint64_t a1)
{
}

void sub_10022B0C4(void *a1, unint64_t a2)
{
  if (a2 >> 62 == 1)
  {
    swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
  }

uint64_t sub_10022B0FC(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  sub_10022B084(*(void **)a2, v4);
  unint64_t v5 = *(void **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  sub_10022B0C4(v5, v6);
  return a1;
}

uint64_t sub_10022B140(uint64_t a1, _OWORD *a2)
{
  id v3 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *a2;
  sub_10022B0C4(v3, v4);
  return a1;
}

uint64_t sub_10022B178(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x18 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_10022B1D4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 16)  = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 16)  = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8)  = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_10022B224(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10022B240(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_10022B250(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1]  = result[1] & 0xFFFFFFFFFFFFFF8LL | (a2 << 62);
  }

  else
  {
    *uint64_t result = (a2 - 2);
    result[1]  = 0x8000000000000000LL;
  }

  return result;
}

uint64_t _s17ResponderInstanceC5StateOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&_s17ResponderInstanceC5StateOMn);
}

uint64_t sub_10022B284@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10019ADD0(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2  = v4;
  return result;
}

uint64_t sub_10022B2C0()
{
  return sub_10000AF70( &qword_10040C4E8,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D4D0);
}

uint64_t sub_10022B2F0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t sub_10022B2F8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16)  = swift_getWitnessTable(&protocol conformance descriptor for NSObject, a2);
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, a2);
  *(void *)(a1 + 24)  = result;
  return result;
}

uint64_t sub_10022B33C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035D5A0, a2);
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_10022B36C()
{
  unint64_t result = qword_10040C540;
  if (!qword_10040C540)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.ResponseConfiguration,  &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_10040C540);
  }

  return result;
}

uint64_t sub_10022B3B0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035D5BC, a2);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_10022B3DC@<X0>(uint64_t (*a1)(void)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = a1();
  *a2  = result;
  return result;
}

uint64_t sub_10022B404(void *a1, unint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_10040C348);
  uint64_t v4 = *(void **)(v2 + qword_10040C348);
  unint64_t v5 = *(void *)(v2 + qword_10040C348 + 8);
  *uint64_t v3 = a1;
  v3[1]  = a2;
  sub_10022B084(a1, a2);
  sub_10022B0C4(v4, v5);
  return sub_1002249C0();
}

unint64_t sub_10022B448()
{
  unint64_t result = qword_10040C5C0;
  if (!qword_10040C5C0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___WiFiAwarePublisherDataSessionHandle);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10040C5C0);
  }

  return result;
}

uint64_t sub_10022B484(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10022B4C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10022B4F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_10022B530(uint64_t a1, uint64_t a2)
{
  ObjectType  = (objc_class *)swift_getObjectType(v2);
  unint64_t v6 = v2;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360A50LL);
  *(_OWORD *)&v6[qword_10040C338]  = xmmword_10033BED0;
  unint64_t v7 = &v6[qword_1004109D0];
  *unint64_t v7 = 0LL;
  v7[1]  = 0LL;
  swift_unknownObjectWeakInit(&v6[qword_1004109D8], 0LL);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  *(_OWORD *)&v6[qword_10040C348]  = xmmword_10035D7F0;
  v6[qword_10040C350]  = 0;
  v6[qword_10040C358]  = 0;
  *(void *)&v6[qword_1004109E0]  = 1LL;
  uint64_t v8 = &v6[qword_1004109E8];
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(void *)&v6[qword_10040C328]  = a1;
  sub_10022B484(a2, (uint64_t)&v6[qword_10040C330]);
  swift_unownedRetain(a1);

  v26.receiver  = v6;
  v26.super_class  = ObjectType;
  id v10 = objc_msgSendSuper2(&v26, "init");
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v14 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v13 = 138412290;
    id v25 = v10;
    id v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    *unint64_t v14 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Created %@", v13, 0xCu);
    uint64_t v16 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v14, 1LL, v16);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    uint64_t v11 = (os_log_s *)v10;
  }

  id v17 = v10;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 138412290;
    id v25 = v17;
    id v22 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    *uint64_t v21 = v17;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ was started", v20, 0xCu);
    uint64_t v23 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v21, 1LL, v23);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {

    uint64_t v18 = (os_log_s *)v17;
  }

  sub_10022B4C0(a2);
  return v17;
}

id sub_10022B928(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10022B530(a1, a2);
}

uint64_t sub_10022B968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_100405D40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_10022B9B0()
{
}

void type metadata accessor for WiFiP2PXPCResponderType(uint64_t a1)
{
}

void type metadata accessor for AWDLTrafficRegistrationOptions(uint64_t a1)
{
}

uint64_t sub_10022BA04()
{
  return sub_10000AF70( &qword_10040C660,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationOptions,  (uint64_t)&unk_10035D670);
}

uint64_t sub_10022BA30()
{
  return sub_10000AF70( &qword_10040C668,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationOptions,  (uint64_t)&unk_10035D640);
}

uint64_t sub_10022BA5C()
{
  return sub_10000AF70( &qword_10040C670,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationOptions,  (uint64_t)&unk_10035D698);
}

uint64_t sub_10022BA88()
{
  return sub_10000AF70( &qword_10040C678,  (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationOptions,  (uint64_t)&unk_10035D6D0);
}

uint64_t sub_10022BAB8(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v12 = swift_allocObject(&unk_1003F25B0, 25LL, 7LL);
  *(void *)(v12 + 16)  = v1;
  *(_BYTE *)(v12 + 24)  = a1;
  aBlock[4]  = sub_10022C690;
  uint64_t v23 = v12;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F25C8;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_100002234();
  uint64_t v17 = sub_100002274((uint64_t *)&unk_1004052A0);
  unint64_t v18 = sub_1000022B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v23);
}

uint64_t sub_10022BC80(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  uint64_t v11 = swift_allocBox(v10);
  sub_10022C5A0(a1, v12);
  uint64_t v13 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v14 = swift_allocObject(&unk_1003F2560, 32LL, 7LL);
  *(void *)(v14 + 16)  = v11;
  *(void *)(v14 + 24)  = v1;
  aBlock[4]  = sub_10022C610;
  uint64_t v26 = v14;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F2578;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v13;
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v24 = _swiftEmptyArrayStorage;
  unint64_t v18 = sub_100002234();
  uint64_t v19 = sub_100002274((uint64_t *)&unk_1004052A0);
  unint64_t v20 = sub_1000022B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v21 = v26;
  swift_release(v11);
  return swift_release(v21);
}

void sub_10022BE78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = swift_projectBox(a1);
  LOBYTE(a2)  = *(_BYTE *)(a2 + 16);
  swift_beginAccess(v7, v14, 1LL, 0LL);
  *(_BYTE *)(v7 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0LL) + 132))  = a2;
  NSString v8 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_beginAccess(v7, v13, 0LL, 0LL);
    sub_10022C5A0(v7, (uint64_t)v6);
    uint64_t v11 = AWDLStatistics.LowLatencyStatistics.eventPayload.getter();
    sub_10022C630((uint64_t)v6);
    sub_100021774();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    AnalyticsSendEvent(v10, isa);
  }

uint64_t sub_10022BFD0()
{
  return swift_deallocClassInstance(v0, 17LL, 7LL);
}

uint64_t type metadata accessor for CoreAnalyticsCommunicator()
{
  return objc_opt_self(&OBJC_CLASS____TtC12wifip2pdCore25CoreAnalyticsCommunicator);
}

uint64_t sub_10022C000(char a1)
{
  return sub_10022BAB8(a1);
}

void sub_10022C020()
{
  NSString v0 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    uint64_t v3 = NANCoreAnalyticsMetrics.eventPayload.getter();
    sub_100021774();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    AnalyticsSendEvent(v2, isa);
  }

void sub_10022C0F4(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t v7 = AWDLStatistics.ServiceRejection.eventPayload.getter(a1, a2);
    sub_100021774();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    AnalyticsSendEvent(v6, isa);
  }

void sub_10022C1E0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    uint64_t v11 = AWDLStatistics.TrafficRegistrationStart.eventPayload.getter( a1,  a2 & 0xFFFFFFFFFFFFLL,  a3 & 0x101FFFFFFFFFFFFLL,  a4);
    sub_100021774();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    AnalyticsSendEvent(v10, isa);
  }

void sub_10022C2EC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    uint64_t v3 = AWDLStatistics.TrafficRegistrationStop.eventPayload.getter();
    sub_100021774();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    AnalyticsSendEvent(v2, isa);
  }

void sub_10022C3C0(uint64_t a1, char a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t v7 = AWDLStatistics.Failure.eventPayload.getter(a1, a2);
    sub_100021774();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    AnalyticsSendEvent(v6, isa);
  }

uint64_t sub_10022C4AC(uint64_t a1)
{
  return sub_10022BC80(a1);
}

void sub_10022C4CC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    uint64_t v3 = AWDLStatistics.AirPlayStatistics.eventPayload.getter();
    sub_100021774();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    AnalyticsSendEvent(v2, isa);
  }

uint64_t sub_10022C5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022C5E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10022C610()
{
}

uint64_t sub_10022C618(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_10022C628(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10022C630(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10022C66C()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_10022C690()
{
  *(_BYTE *)(*(void *)(v0 + 16) + 16LL)  = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10022C6A8(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    v5[2]  = "\b";
    v5[3]  = "\b";
    v5[0]  = v4;
    v5[1]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[4]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[5]  = &unk_10035D8D0;
    v5[6]  = &unk_10035D8E8;
    v5[7]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[8]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v5[9] = &unk_10035D900;
    v5[10]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 11LL, v5, a1 + 120);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_10022C754(uint64_t a1, void (*a2)(id *), uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_getErrorValue(a1, v15, v14);
    id v16 = (id)Error.apiError.getter(v14[1]);
    a2(&v16);
    return;
  }

  uint64_t v19 = a1;
  swift_errorRetain(a1);
  uint64_t v6 = sub_100002274((uint64_t *)&unk_10040C5B0);
  if (swift_dynamicCast(&v16, &v19, v6, &type metadata for WiFiError, 6LL))
  {
    if (v18 == 1)
    {
      id v7 = [(id)objc_opt_self(WiFiP2PXPCConnection) convertError:v16];
      goto LABEL_11;
    }

    sub_10007030C((uint64_t)v16, v17, v18);
  }

  uint64_t v19 = a1;
  swift_errorRetain(a1);
  if (swift_dynamicCast(&v16, &v19, v6, &type metadata for WiFiError, 6LL))
  {
    int v8 = (int)v16;
    if (!v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
      uint64_t v11 = v10;
      id v12 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      id v9 = [v12 initWithDomain:v13 code:v8 userInfo:0];

      id v16 = v9;
      goto LABEL_12;
    }

    sub_10007030C((uint64_t)v16, v17, v18);
  }

  id v7 = (id)_convertErrorToNSError(_:)(a1);
LABEL_11:
  id v9 = v7;
  id v16 = v7;
LABEL_12:
  a2(&v16);
}

BOOL sub_10022C918(char *a1, char *a2)
{
  return static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10022C934()
{
  return AWDLPeer.Reachability.hashValue.getter(*v0);
}

void sub_10022C948(uint64_t a1)
{
}

Swift::Int sub_10022C95C(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_10022C9A8()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v1);
  __asm { BR              X10 }

uint64_t sub_10022CA44()
{
  *(void *)(v12 - 152)  = v4;
  *(void *)(v12 - 136)  = v3;
  *(_DWORD *)(v12 - 124)  = v2;
  *(void *)(v12 - 120)  = v1;
  *(void *)(v12 - 112)  = v0;
  *(_DWORD *)(v12 - 140)  = v11;
  Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x736E617254697073LL,  0xEF736E6F69746361LL);
  id v13 = v10;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    *(_DWORD *)(v12 - 156)  = v16;
    unint64_t v17 = v13;
    char v18 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
    *(void *)(v12 - 176)  = swift_slowAlloc(8LL, -1LL);
    *(void *)(v12 - 168)  = v18;
    *char v18 = 138412290;
    *(void *)(v12 - 184)  = v18 + 1;
    *(void *)(v12 - 88)  = v17;
    id v19 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 - 88, v12 - 80);
    unint64_t v20 = *(void **)(v12 - 176);
    void *v20 = v17;

    id v13 = v17;
    uint64_t v21 = *(uint8_t **)(v12 - 168);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  (os_log_type_t)*(_DWORD *)(v12 - 156),  "%@ activationInProgress ",  v21,  0xCu);
    uint64_t v22 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v20, 1LL, v22);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    uint64_t v14 = (os_log_s *)v13;
  }

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v9);
  id v23 = v13;
  int v24 = *(_DWORD *)(v12 - 140);
  sub_100245900(*(void *)(v12 - 104), *(void *)(v12 - 96));
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
    int v8 = sub_1002C9FBC(0LL, v8[2] + 1LL, 1, v8);
  }
  unint64_t v26 = v8[2];
  unint64_t v25 = v8[3];
  if (v26 >= v25 >> 1) {
    int v8 = sub_1002C9FBC((void *)(v25 > 1), v26 + 1, 1, v8);
  }
  uint64_t result = 0LL;
  _OWORD v8[2] = v26 + 1;
  uint64_t v28 = &v8[4 * v26];
  uint64_t v29 = *(void *)(v12 - 104);
  v28[4]  = v23;
  v28[5]  = v29;
  v28[6]  = *(void *)(v12 - 96);
  *((_BYTE *)v28 + 56)  = v24 & 1;
  uint64_t v30 = *(void *)(v12 - 152);
  uint64_t v31 = *(void *)(v12 - 112);
  *(void *)uint64_t v6 = v8;
  *(void *)(v6 + 8)  = v31;
  *(void *)(v6 + 16)  = *(void *)(v12 - 136);
  *(void *)(v6 + 24)  = v30;
  *(void *)(v6 + 32)  = *(void *)(v12 - 120);
  *(_BYTE *)(v6 + 40)  = *(_DWORD *)(v12 - 124);
  return result;
}

void sub_10022CF6C()
{
  __asm { BR              X10 }

uint64_t sub_10022CFD8()
{
  id v14 = v0;
  uint64_t v9 = v2;
  sub_100245900(v16, v2);
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
    int v8 = sub_1002C9FBC(0LL, v8[2] + 1LL, 1, v8);
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1) {
    int v8 = sub_1002C9FBC((void *)(v10 > 1), v11 + 1, 1, v8);
  }
  uint64_t result = 0LL;
  _OWORD v8[2] = v11 + 1;
  id v13 = &v8[4 * v11];
  v13[4]  = v14;
  v13[5]  = v16;
  v13[6]  = v9;
  *((_BYTE *)v13 + 56)  = v15 != 0;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8)  = v8;
  *(void *)(v3 + 16)  = v6;
  *(void *)(v3 + 24)  = v7;
  *(void *)(v3 + 32)  = v5;
  *(_BYTE *)(v3 + 40)  = v4;
  return result;
}

void *sub_10022D418(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = 8 * a2;
    uint64_t v6 = *(void **)(*(void *)(a5 + 48) + 8 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + v5);
    return v6;
  }

uint64_t sub_10022D478(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a5 + 56);
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(a5 + 48) + a2);
    uint64_t v9 = type metadata accessor for NANPeer.Service(0LL);
    sub_100057FE8(v7 + *(void *)(*(void *)(v9 - 8) + 72LL) * a2, v6, type metadata accessor for NANPeer.Service);
    return v8;
  }

uint64_t sub_10022D518(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0 || 1LL << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a6 + 36) == a4)
  {
    uint64_t v8 = *(void *)(a6 + 56);
    uint64_t v9 = *(void *)(a6 + 48) - a3 + 8 * a3;
    __int16 v10 = *(_WORD *)(v9 + 4);
    char v11 = *(_BYTE *)(v9 + 6);
    *(_DWORD *)uint64_t result = *(_DWORD *)v9;
    *(_WORD *)(result + 4)  = v10;
    *(_BYTE *)(result + 6)  = v11;
    uint64_t v12 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
    return sub_100057FE8( v8 + *(void *)(*(void *)(v12 - 8) + 72LL) * a3,  a2,  type metadata accessor for NANPeer.Service.AuthenticationStatus);
  }

id sub_10022D5D0(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    id v7 = result;
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = type metadata accessor for UUID(0LL);
    (*(void (**)(id, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))( v7,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a2,  v9);
    return *(id *)(*(void *)(a5 + 56) + 8 * a2);
  }

void sub_10022D674(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v6);
  uint64_t v4 = *(void *)(v2 + 24);
  id v5 = a1;
  __asm { BR              X9 }

uint64_t sub_10022D728()
{
  *(void *)(v5 - 96)  = v2;
  *(void *)(v5 - 88)  = v4;
  uint64_t v6 = v1;
  uint64_t v7 = sub_1002451DC((void *)(v5 - 88), v6);
  int64_t v8 = *(void *)(*(void *)(v5 - 88) + 16LL);
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_5;
  }

  sub_10027D7C0(v7, v8);
  uint64_t v9 = v6;
  uint64_t v10 = sub_1002451DC((void *)(v5 - 96), v9);
  int64_t v11 = *(void *)(*(void *)(v5 - 96) + 16LL);
  if (v11 < v10)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x10022DB90LL);
  }

  sub_10027D7C0(v10, v11);

  uint64_t result = 0LL;
  uint64_t v13 = *(void *)(v5 - 96);
  *(void *)uint64_t v0 = *(void *)(v5 - 88);
  *(void *)(v0 + 8)  = v13;
  *(void *)(v0 + 16)  = *(void *)(v5 - 136);
  *(void *)(v0 + 24)  = v3;
  *(void *)(v0 + 32)  = *(void *)(v5 - 120);
  *(_BYTE *)(v0 + 40)  = *(_DWORD *)(v5 - 128);
  return result;
}

void sub_10022DBA8()
{
  __asm { BR              X10 }

uint64_t sub_10022DBF8()
{
  *(void *)uint64_t v1 = 0LL;
  *(void *)(v1 + 8)  = 0LL;
  *(void *)(v1 + 16)  = 0LL;
  *(_OWORD *)(v1 + 24)  = xmmword_10035D850;
  *(_BYTE *)(v1 + 40)  = 0;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    unsigned __int8 v24 = v5;
    uint64_t v25 = v4;
    char v26 = v3;
    uint64_t v27 = v0;
    unint64_t v8 = sub_1000033FC();
    swift_bridgeObjectRetain_n(v6, 2LL);
    uint64_t v9 = (char *)(v6 + 56);
    do
    {
      uint64_t v10 = (void *)*((void *)v9 - 3);
      int64_t v11 = (void (*)(id *))*((void *)v9 - 2);
      uint64_t v12 = *((void *)v9 - 1);
      char v13 = *v9;
      v9 += 32;
      uint64_t v14 = swift_allocError(&type metadata for WiFiError, v8, 0LL, 0LL);
      *(_OWORD *)uint64_t v15 = xmmword_10035D880;
      *(_BYTE *)(v15 + 16)  = 1;
      id v16 = v10;
      sub_100245900((uint64_t)v11, v12);
      sub_10022C754(v14, v11, v12, v13);
      swift_errorRelease(v14);

      sub_100245908((uint64_t)v11, v12);
      --v7;
    }

    while (v7);
    swift_bridgeObjectRelease(v6);
    uint64_t v17 = *(void *)v1;
    uint64_t v18 = *(void *)(v1 + 8);
    uint64_t v19 = *(void *)(v1 + 16);
    unint64_t v20 = *(void *)(v1 + 24);
    uint64_t v21 = *(void *)(v1 + 32);
    unsigned __int8 v22 = *(_BYTE *)(v1 + 40);
    uint64_t v0 = v27;
    char v3 = v26;
    unsigned __int8 v5 = v24;
    uint64_t v4 = v25;
  }

  else
  {
    swift_bridgeObjectRetain(v6);
    unsigned __int8 v22 = 0;
    uint64_t v21 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v17 = 0LL;
    unint64_t v20 = 0xC000000000000000LL;
  }

  sub_10023EC24(v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease_n(v6, 2LL);
  uint64_t result = 0LL;
  *(void *)uint64_t v1 = _swiftEmptyArrayStorage;
  *(void *)(v1 + 8)  = v4;
  *(void *)(v1 + 16)  = v0;
  *(void *)(v1 + 24)  = v5;
  *(void *)(v1 + 32)  = v2;
  *(_BYTE *)(v1 + 40)  = v3;
  return result;
}

uint64_t sub_10022DEF4(uint64_t a1, unint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v87 = a3;
  unint64_t v6 = v5[1];
  os_log_t v82 = v5 + 1;
  uint64_t v83 = a5;
  uint64_t v7 = *v5;
  uint64_t v8 = v5[2];
  unint64_t v9 = v5[3];
  uint64_t v10 = v5[4];
  LODWORD(v5)  = *((unsigned __int8 *)v5 + 40);
  if (v9 >> 62) {
    goto LABEL_49;
  }
  unint64_t v12 = a2;
  int v14 = ~(_BYTE)a2;
  swift_bridgeObjectRetain_n(v6, 4LL);
  swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v89 = v10;
  sub_10023EB4C(v7, v6, v8, v9, v10, v5);
  unint64_t v88 = (uint64_t *)v8;
  if (v14)
  {
    sub_10023EBE8(a1, v12);
    sub_10023ECC0(v8, v9);
  }

  else
  {
    a1  = v8;
    unint64_t v12 = v9;
  }

  uint64_t v86 = a1;
  sub_10023EBE8(a1, v12);
  uint64_t v15 = v89;
  unsigned __int8 v16 = v5;
  if ((_BYTE)a4 != 0xFF)
  {
    uint64_t v15 = v87;
    sub_10023EBE8(v87, a4);
    sub_10023ECC0(v89, v5);
    LODWORD(v5)  = a4;
  }

  if ((_BYTE)v12 == 0xFF)
  {
    sub_10023EBE8(v15, v5);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v6, 3LL);
    sub_10023EC24(v7, v6, (uint64_t)v88, v9, v89, v16);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    unsigned __int8 v38 = v5;
    uint64_t v17 = v86;
LABEL_33:
    sub_10023ECC0(v15, v38);
    uint64_t result = 0LL;
    uint64_t v40 = v85;
    *(void *)uint64_t v85 = v7;
    *(void *)(v40 + 8)  = v6;
    *(void *)(v40 + 16)  = v17;
    *(void *)(v40 + 24)  = v12;
    *(void *)(v40 + 32)  = v15;
    *(_BYTE *)(v40 + 40)  = (_BYTE)v5;
    return result;
  }

  uint64_t v17 = v86;
  if ((_BYTE)v5 == 0xFF)
  {
    sub_10023EC00(v86, v12 & 1);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v6, 3LL);
    sub_10023ECC0(v86, v12);
    sub_10023EC24(v7, v6, (uint64_t)v88, v9, v89, v16);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    sub_10023ECC0(v86, v12);
    unsigned __int8 v38 = -1;
    goto LABEL_33;
  }

  sub_10023EC00(v15, v5 & 1);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  sub_10023ECC0(v15, v5);
  LODWORD(v9)  = v12 & v5;
  uint64_t v18 = v86;
  if ((v12 & v5 & 1) == 0)
  {
    sub_10023ECC0(v86, v12);
    uint64_t v18 = 0LL;
  }

  uint64_t v78 = v15;
  int v79 = (int)v5;
  v80  = v12;
  unint64_t v81 = v6;
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v87 = v18;
  uint64_t v84 = v7;
  uint64_t v19 = 0LL;
  if (!v10)
  {
    unsigned __int8 v5 = _swiftEmptyDictionarySingleton;
LABEL_35:
    swift_bridgeObjectRelease(v84);
    unint64_t v41 = v81;
    swift_bridgeObjectRelease(v81);
    if ((v9 & 1) != 0)
    {
      swift_bridgeObjectRelease(v81);
      uint64_t v42 = *(void *)(v81 + 16);
      if (v42)
      {
        uint64_t v43 = v5;
        swift_bridgeObjectRetain(v81);
        unint64_t v44 = v81 + 56;
        do
        {
          uint64_t v46 = *(void **)(v44 - 24);
          unint64_t v47 = *(void (**)(uint64_t **))(v44 - 16);
          uint64_t v48 = *(void *)(v44 - 8);
          uint64_t v91 = 0LL;
          id v45 = v46;
          sub_100245900((uint64_t)v47, v48);
          v47(&v91);

          sub_100245908((uint64_t)v47, v48);
          v44 += 32LL;
          --v42;
        }

        while (v42);
        swift_bridgeObjectRelease(v81);
        unsigned __int8 v5 = v43;
        uint64_t v18 = v87;
      }

      sub_10023ECD8(v18, 1);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v5);
      uint64_t v67 = v85;
      sub_10023EC24( *(void *)v85,  *(void *)(v85 + 8),  *(void *)(v85 + 16),  *(void *)(v85 + 24),  *(void *)(v85 + 32),  *(_BYTE *)(v85 + 40));
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v84);
      sub_10023ECC0(v86, v80);
      sub_10023ECC0(v78, v79);
      sub_100021018((uint64_t)v19, 0LL);
      uint64_t result = 0LL;
      *(void *)uint64_t v85 = 0LL;
      *(void *)(v67 + 8)  = 0LL;
      *(void *)(v67 + 16)  = 0LL;
      *(_OWORD *)(v67 + 24)  = xmmword_10035D850;
      *(_BYTE *)(v67 + 40)  = 0;
    }

    else
    {
      uint64_t v49 = v5[2];
      swift_bridgeObjectRelease(v81);
      if (v49)
      {
        uint64_t v50 = v85;
        uint64_t v51 = (uint64_t)v5;
        uint64_t v53 = *(void *)v85;
        uint64_t v52 = *(void *)(v85 + 8);
        uint64_t v54 = *(void *)(v85 + 16);
        unint64_t v55 = *(void *)(v85 + 24);
        uint64_t v56 = *(void *)(v85 + 32);
        unsigned __int8 v57 = *(_BYTE *)(v85 + 40);
        uint64_t v58 = v51;
        uint64_t v89 = v51;
        swift_bridgeObjectRetain(v51);
        uint64_t v59 = sub_10023EC24(v53, v52, v54, v55, v56, v57);
        unint64_t v88 = &v77;
        *(void *)uint64_t v85 = v58;
        uint64_t v60 = v82;
        *os_log_t v82 = 0LL;
        v60[1]  = 0LL;
        *(_OWORD *)(v50 + 24)  = xmmword_10035D860;
        *(_BYTE *)(v50 + 40)  = 0;
        uint64_t v97 = (uint64_t *)v41;
        char v90 = 0;
        __chkstk_darwin(v59);
        unint64_t v61 = v83[3];
        uint64_t v71 = (uint64_t *)v83[2];
        unint64_t v72 = v61;
        unint64_t v62 = v83[5];
        uint64_t v73 = v83[4];
        unint64_t v74 = v62;
        uint64_t v75 = v83[6];
        uint64_t v76 = v50;
        uint64_t v63 = sub_100002274(&qword_10040CC28);
        uint64_t v91 = v71;
        unint64_t v92 = v61;
        uint64_t v93 = v73;
        unint64_t v94 = v62;
        uint64_t v95 = v75;
        uint64_t v64 = _s16P2PActivityStateO14ActionRequiredOMa(0LL, (uint64_t)&v91);
        uint64_t v65 = sub_1000572E4( (unint64_t *)&unk_10040CC30,  &qword_10040CC28,  (uint64_t)&protocol conformance descriptor for [A]);
        Sequence.reduce<A>(_:_:)(&v91, &v90, sub_100245910, &v70, v63, v64, v65);
        id v66 = v97;
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v66);
        sub_10023ECC0(v86, v80);
        sub_10023ECC0(v78, v79);
        sub_100021018((uint64_t)v19, 0LL);
        return v91;
      }

      else
      {
        swift_bridgeObjectRelease(v5);
        uint64_t v68 = v85;
        sub_10023EC24( *(void *)v85,  *(void *)(v85 + 8),  *(void *)(v85 + 16),  *(void *)(v85 + 24),  *(void *)(v85 + 32),  *(_BYTE *)(v85 + 40));
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v84);
        sub_10023ECC0(v86, v80);
        sub_10023ECC0(v78, v79);
        sub_100021018((uint64_t)v19, 0LL);
        *(void *)uint64_t v85 = _swiftEmptyArrayStorage;
        *(void *)(v68 + 8)  = v41;
        *(_OWORD *)(v68 + 16)  = xmmword_10035D870;
        *(void *)(v68 + 32)  = 0LL;
        *(_BYTE *)(v68 + 40)  = -1;
        return 2LL;
      }
    }

    return result;
  }

  v7 += 56LL;
  unsigned __int8 v5 = _swiftEmptyDictionarySingleton;
  LODWORD(v88)  = v9;
  while (1)
  {
    unint64_t v20 = *(void (**)(id *))(v7 - 16);
    uint64_t v21 = *(void *)(v7 - 8);
    char v22 = *(_BYTE *)v7;
    id v23 = *(id *)(v7 - 24);
    uint64_t v8 = (uint64_t)v23;
    if ((v9 & 1) != 0)
    {
      sub_100245900((uint64_t)v20, v21);
      sub_10023EC00(v18, 1);
      sub_10022C754(v18, v20, v21, v22);
      sub_10023ECD8(v18, 1);

      sub_100245908((uint64_t)v20, v21);
      goto LABEL_14;
    }

    unint64_t v9 = (unint64_t)v23;
    uint64_t v89 = v21;
    sub_100245900((uint64_t)v20, v21);
    sub_100021018((uint64_t)v19, 0LL);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v5);
    uint64_t v91 = v5;
    unint64_t v6 = sub_1003277F4(v9);
    uint64_t v26 = v5[2];
    BOOL v27 = (v25 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      break;
    }
    uint64_t v8 = v25;
    if (v5[3] >= v28)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10032A484();
        unsigned __int8 v5 = v91;
      }
    }

    else
    {
      sub_100240168(v28, isUniquelyReferenced_nonNull_native);
      isUniquelyReferenced_nonNull_native  = type metadata accessor for XPCSession(0LL);
      LOBYTE(v5)  = (_BYTE)v91;
      uint64_t v29 = v91;
      unint64_t v30 = sub_1003277F4(v9);
      if ((v8 & 1) != (v31 & 1)) {
        goto LABEL_48;
      }
      unint64_t v6 = v30;
      unsigned __int8 v5 = v29;
      uint64_t v18 = v87;
    }

    swift_bridgeObjectRelease(0x8000000000000000LL);
    if ((v8 & 1) != 0)
    {
      swift_bridgeObjectRetain(v5);
    }

    else
    {
      v5[(v6 >> 6) + 8] |= 1LL << v6;
      uint64_t v32 = 8 * v6;
      *(void *)(v5[6] + v32)  = v9;
      *(void *)(v5[7] + v32)  = 0LL;
      uint64_t v33 = v5[2];
      uint64_t v8 = v33 + 1;
      isUniquelyReferenced_nonNull_native  = (uint64_t)v5;
      LOBYTE(v5)  = __OFADD__(v33, 1LL);
      swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
      *(void *)(isUniquelyReferenced_nonNull_native + 16)  = v8;
      id v34 = (id)v9;
      unsigned __int8 v5 = (uint64_t *)isUniquelyReferenced_nonNull_native;
    }

    uint64_t v8 = v5[7];
    swift_bridgeObjectRelease(v5);
    uint64_t v35 = *(void *)(v8 + 8 * v6);
    BOOL v36 = __OFADD__(v35, 1LL);
    uint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_46;
    }
    *(void *)(v8 + 8 * v6)  = v37;

    uint64_t v91 = 0LL;
    v20((id *)&v91);

    sub_100245908((uint64_t)v20, v89);
    uint64_t v19 = sub_100068A78;
    LOBYTE(v9)  = (_BYTE)v88;
LABEL_14:
    v7 += 32LL;
    if (!--v10) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(isUniquelyReferenced_nonNull_native);
  __break(1u);
LABEL_49:
  uint64_t v91 = 0LL;
  unint64_t v92 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(63LL);
  uint64_t v97 = v91;
  unint64_t v98 = v92;
  v69._object  = (void *)0x80000001003681A0LL;
  v69._countAndFlagsBits  = 0xD00000000000003DLL;
  String.append(_:)(v69);
  uint64_t v91 = (uint64_t *)v7;
  unint64_t v92 = v6;
  uint64_t v93 = v8;
  unint64_t v94 = v9;
  uint64_t v95 = v10;
  char v96 = (char)v5;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v91, v83);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v97,  v98,  "wifip2pdCore/P2PActivityCoordinator.swift",  41LL,  2LL,  243LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10022E7F4(uint64_t a1, unint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v70 = a5;
  uint64_t v71 = a3;
  uint64_t v74 = a1;
  unint64_t v6 = v5[3];
  if (v6 >> 62 != 2)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003FLL,  0x80000001003681E0LL,  "wifip2pdCore/P2PActivityCoordinator.swift",  41LL,  2LL,  282LL,  0);
    __break(1u);
    return result;
  }

  uint64_t v7 = v5;
  unint64_t v9 = a2;
  uint64_t v10 = v5[1];
  Swift::String v69 = v5 + 1;
  uint64_t v11 = *v5;
  uint64_t v12 = v5[2];
  uint64_t v13 = v7[4];
  int v14 = ~(_BYTE)a2;
  int v15 = *((unsigned __int8 *)v7 + 40);
  swift_bridgeObjectRetain_n(v11, 5LL);
  swift_bridgeObjectRetain_n(v10, 3LL);
  *(void *)&__int128 v76 = v13;
  int v73 = v15;
  sub_10023EB4C(v11, v10, v12, v6, v13, v15);
  *(void *)&__int128 v75 = v12;
  unint64_t v72 = v6;
  if (v14)
  {
    uint64_t v16 = v74;
    sub_10023EBE8(v74, v9);
    sub_10023ECC0(v12, v6);
  }

  else
  {
    uint64_t v16 = v12;
    unint64_t v9 = v6;
  }

  sub_10023EBE8(v16, v9);
  uint64_t v17 = v76;
  int v77 = v73;
  if ((_BYTE)a4 != 0xFF)
  {
    uint64_t v17 = v71;
    sub_10023EBE8(v71, a4);
    sub_10023ECC0(v76, v73);
    int v77 = a4;
  }

  if ((_BYTE)v9 == 0xFF)
  {
    unsigned __int8 v18 = v77;
    sub_10023EBE8(v17, v77);
    swift_bridgeObjectRelease_n(v10, 2LL);
    swift_bridgeObjectRelease_n(v11, 4LL);
    uint64_t v19 = v75;
LABEL_25:
    sub_10023EC24(v11, v10, v19, v72, v76, v73);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v11);
    sub_10023ECC0(v16, v9);
    sub_10023ECC0(v17, v18);
    uint64_t result = 0LL;
    *uint64_t v7 = v11;
    v7[1]  = v10;
    v7[2]  = v16;
    v7[3]  = v9 | 0x8000000000000000LL;
    v7[4]  = v17;
    *((_BYTE *)v7 + 40)  = v18;
    return result;
  }

  unsigned __int8 v18 = v77;
  uint64_t v19 = v75;
  if ((_BYTE)v77 == 0xFF)
  {
    sub_10023EC00(v16, v9 & 1);
    swift_bridgeObjectRelease_n(v10, 2LL);
    swift_bridgeObjectRelease_n(v11, 4LL);
    sub_10023ECC0(v16, v9);
    goto LABEL_25;
  }

  sub_10023EC00(v17, v77 & 1);
  uint64_t v68 = v11;
  swift_bridgeObjectRelease(v11);
  uint64_t v71 = v10;
  swift_bridgeObjectRelease(v10);
  uint64_t v66 = v17;
  sub_10023ECC0(v17, v77);
  char v20 = v9 & v77;
  uint64_t v21 = v16;
  if ((v9 & v77 & 1) == 0)
  {
    sub_10023ECC0(v16, v9);
    uint64_t v21 = 0LL;
  }

  uint64_t v74 = v16;
  unint64_t v67 = v9;
  uint64_t v22 = *(void *)(v71 + 16);
  if (v22)
  {
    id v23 = (char *)(v71 + 56);
    uint64_t v24 = *(void *)(v71 + 16);
    do
    {
      uint64_t v26 = (void *)*((void *)v23 - 3);
      BOOL v27 = (void (*)(id *))*((void *)v23 - 2);
      uint64_t v28 = *((void *)v23 - 1);
      char v29 = *v23;
      if ((v20 & 1) != 0)
      {
        id v25 = v26;
        sub_100245900((uint64_t)v27, v28);
        sub_10023EC00(v21, 1);
        sub_10022C754(v21, v27, v28, v29);
        sub_10023ECD8(v21, 1);
      }

      else
      {
        *(void *)&v80  = 0LL;
        id v30 = v26;
        sub_100245900((uint64_t)v27, v28);
        v27((id *)&v80);
      }

      sub_100245908((uint64_t)v27, v28);
      v23 += 32;
      --v24;
    }

    while (v24);
  }

  uint64_t v31 = v71;
  swift_bridgeObjectRelease(v71);
  uint64_t v32 = v68;
  sub_10023EC24(v68, v71, v75, v72, v76, v73);
  *uint64_t v7 = 0LL;
  v7[1]  = 0LL;
  v7[2]  = 0LL;
  *(_OWORD *)(v7 + 3)  = xmmword_10035D850;
  *((_BYTE *)v7 + 40)  = 0;
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease_n(v32, 2LL);
  if ((v20 & 1) == 0)
  {
    uint64_t v41 = swift_bridgeObjectRelease(v32);
    *(void *)&__int128 v76 = &v65;
    uint64_t v79 = v32;
    char v78 = 0;
    __chkstk_darwin(v41);
    uint64_t v42 = v70[3];
    uint64_t v59 = v70[2];
    uint64_t v60 = v42;
    uint64_t v43 = v70[5];
    uint64_t v61 = v70[4];
    uint64_t v62 = v43;
    uint64_t v63 = v70[6];
    uint64_t v64 = v7;
    uint64_t v44 = sub_100002274(&qword_10040CC28);
    *(void *)&v80  = v59;
    *((void *)&v80 + 1)  = v42;
    *(void *)&__int128 v81 = v61;
    *((void *)&v81 + 1)  = v43;
    uint64_t v82 = v63;
    uint64_t v45 = _s16P2PActivityStateO14ActionRequiredOMa(0LL, (uint64_t)&v80);
    uint64_t v46 = sub_1000572E4( (unint64_t *)&unk_10040CC30,  &qword_10040CC28,  (uint64_t)&protocol conformance descriptor for [A]);
    Sequence.reduce<A>(_:_:)(&v80, &v78, sub_100245938, &v58, v44, v45, v46);
    uint64_t v47 = v79;
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v47);
    sub_10023ECC0(v74, v67);
    sub_10023ECC0(v66, v77);
    return v80;
  }

  if (v22)
  {
    uint64_t v33 = v68;
    swift_bridgeObjectRelease(v68);
    *uint64_t v7 = sub_10022F118((uint64_t)_swiftEmptyArrayStorage);
    id v34 = v69;
    void *v69 = 0LL;
    v34[1]  = 0LL;
    *(_OWORD *)(v7 + 3)  = xmmword_10035D860;
    *((_BYTE *)v7 + 40)  = 0;
    uint64_t v35 = *(void *)(v33 + 16);
    if (v35)
    {
      __int128 v36 = *((_OWORD *)v70 + 1);
      __int128 v75 = *((_OWORD *)v70 + 2);
      __int128 v76 = v36;
      uint64_t v37 = v70[6];
      swift_bridgeObjectRetain(v33);
      uint64_t v38 = v33 + 56;
      do
      {
        v80  = v76;
        __int128 v81 = v75;
        uint64_t v82 = v37;
        _s16P2PActivityStateOMa(0LL, (uint64_t)&v80);
        sub_10022C9A8();
        v38 += 32LL;
        --v35;
      }

      while (v35);
      uint64_t v39 = v68;
      swift_bridgeObjectRelease_n(v68, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v33);
      uint64_t v39 = v33;
    }

    unint64_t v49 = v7[3];
    if (v49 >> 62 == 1)
    {
      uint64_t v50 = *v7;
      uint64_t v51 = v7[1];
      uint64_t v52 = v7[2];
      uint64_t v53 = v7[4];
      unsigned __int8 v54 = *((_BYTE *)v7 + 40);
      uint64_t v55 = *(void *)(*v7 + 16);
      sub_10023ECD8(v21, 1);
      if (!v55)
      {
        sub_10023EC24(v50, v51, v52, v49, v53, v54);
        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease(v39);
        sub_10023ECC0(v74, v67);
        sub_10023ECC0(v66, v77);
        *uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
        v7[1]  = (uint64_t)_swiftEmptyArrayStorage;
        *((_OWORD *)v7 + 1)  = xmmword_10035D870;
        v7[4]  = 0LL;
        *((_BYTE *)v7 + 40)  = -1;
        return 2LL;
      }
    }

    else
    {
      sub_10023ECD8(v21, 1);
    }

    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v71);
    uint64_t v56 = v74;
    unsigned __int8 v57 = v67;
  }

  else
  {
    uint64_t v48 = *(void *)(v68 + 16);
    swift_bridgeObjectRelease(v68);
    sub_10023ECD8(v21, 1);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v68);
    if (v48)
    {
      sub_10023ECC0(v74, v67);
      sub_10023ECC0(v66, v77);
      *uint64_t v7 = v68;
      v7[1]  = (uint64_t)_swiftEmptyArrayStorage;
      *((_OWORD *)v7 + 1)  = xmmword_10035D840;
      v7[4]  = 0LL;
      *((_BYTE *)v7 + 40)  = -1;
      return 1LL;
    }

    swift_bridgeObjectRelease(v68);
    uint64_t v56 = v74;
    unsigned __int8 v57 = v67;
  }

  sub_10023ECC0(v56, v57);
  sub_10023ECC0(v66, v77);
  return 0LL;
}

unint64_t sub_10022EF7C(uint64_t a1)
{
  uint64_t v2 = sub_100002274((uint64_t *)&unk_10040CC90);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unsigned __int8 v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100002274((uint64_t *)&unk_10040CC80);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000226B0(v13, (uint64_t)v5, (uint64_t *)&unk_10040CC90);
    __int128 v26 = *(_OWORD *)&v5[v10];
    unint64_t result = sub_10001C578((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(_OWORD *)(v8[7] + 16 * v17)  = v26;
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    _OWORD v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10022F118(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100002274((uint64_t *)&unk_100410480);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }

  swift_retain();
  unsigned __int8 v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = (id)*(v5 - 1);
    unint64_t result = sub_1003277F4((uint64_t)v7);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10)  = v7;
    *(void *)(v3[7] + v10)  = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v5 += 2;
    v3[2]  = v13;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10022F214(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100002274((uint64_t *)&unk_10040DCF0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000226B0(v7, (uint64_t)v16, &qword_10040CCB0);
    unint64_t result = sub_100327928((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32)  = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16)  = v12;
    unint64_t result = (unint64_t)sub_100022594(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10022F354@<X0>( unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  int v10 = *a1;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = a2[2];
  uint64_t v14 = *((unsigned __int8 *)a2 + 24);
  v17[0]  = a3;
  v17[1]  = a4;
  v17[2]  = a5;
  v17[3]  = a6;
  v17[4]  = a7;
  uint64_t v15 = _s16P2PActivityStateOMa(0LL, (uint64_t)v17);
  uint64_t result = a9(v11, v12, v13, v14, v15);
  if (v10)
  {
    if (v10 == 1)
    {
      if (result < 2u)
      {
        uint64_t result = 1LL;
        goto LABEL_8;
      }
    }

    else if (result != 1)
    {
      uint64_t result = 2LL;
      goto LABEL_8;
    }

    uint64_t result = 0LL;
  }

uint64_t sub_10022F420(uint64_t result, uint64_t a2, char a3, void *a4)
{
  unint64_t v5 = *(void *)(v4 + 24);
  if (v5 >> 62 == 3)
  {
    BOOL v6 = !*(_BYTE *)(v4 + 40) && v5 == 0xC000000000000000LL;
    if (v6 && (*(void *)(v4 + 16) | *(void *)(v4 + 32) | *(void *)(v4 + 8) | *(void *)v4) == 0LL) {
      return 0LL;
    }
  }

  int v8 = result;
  if ((_BYTE)result)
  {
    unint64_t v10 = a3 & 1;
    if (v8 == 1) {
      return sub_10022DEF4(a2, v10, 0LL, 255, a4);
    }
    else {
      return sub_10022E7F4(a2, v10, 0LL, 255, a4);
    }
  }

  return result;
}

uint64_t sub_10022F4A0(uint64_t result, uint64_t a2, char a3, void *a4)
{
  unint64_t v6 = *(void *)(v4 + 24);
  if (v6 >> 62 == 3)
  {
    BOOL v7 = !*(_BYTE *)(v4 + 40) && v6 == 0xC000000000000000LL;
    if (v7 && (*(void *)(v4 + 16) | *(void *)(v4 + 32) | *(void *)(v4 + 8) | *(void *)v4) == 0LL) {
      return 0LL;
    }
  }

  if ((_BYTE)result)
  {
    int v9 = a3 & 1;
    else {
      return sub_10022E7F4(0LL, 0xFFuLL, a2, v9, a4);
    }
  }

  return result;
}

uint64_t sub_10022F524()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (void *)((char *)&v23[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v6 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  BOOL v7 = (void *)*v6;
  *unint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7)  = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    unint64_t v10 = (void *)((char *)v0 + qword_10040C7A8);
    swift_beginAccess((char *)v0 + qword_10040C7A8, v24, 0LL, 0LL);
    uint64_t v11 = *v10;
    __chkstk_darwin();
    uint64_t v12 = v1[10];
    uint64_t v13 = v1[11];
    *(&v22 - 6)  = v12;
    *(&v22 - 5)  = v13;
    uint64_t v14 = v1[12];
    uint64_t v15 = v1[13];
    *(&v22 - 4)  = v14;
    *(&v22 - 3)  = v15;
    uint64_t v16 = v1[14];
    *(&v22 - 2)  = v16;
    uint64_t v17 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    swift_bridgeObjectRetain(v11);
    v23[0]  = v12;
    v23[1]  = v13;
    v23[2]  = v14;
    v23[3]  = v15;
    v23[4]  = v16;
    uint64_t v18 = _s16P2PActivityStateOMa(0LL, (uint64_t)v23);
    uint64_t v19 = sub_100002274(&qword_10040CD28);
    unint64_t v20 = sub_100245750();
    uint64_t v21 = Dictionary.compactMapValues<A>(_:)(sub_100246A20, &v22 - 8, v11, v17, v18, v19, v20);
    swift_bridgeObjectRelease(v11);
    return v21;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10022F6DC()
{
  Strong  = swift_unknownObjectWeakLoadStrong(v0 + qword_100410A08);
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    id v3 = String._bridgeToObjectiveC()();
    [v2 configureNotificationsWithBundleIdentifier:v3];
    swift_unknownObjectRelease(v2);
  }

uint64_t sub_10022F764()
{
  return swift_unknownObjectWeakLoadStrong(v0 + qword_100410A08);
}

uint64_t sub_10022F774(uint64_t (*a1)(void))
{
  uint64_t result = swift_weakLoadStrong(v1 + qword_100410A00);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = a1();
    swift_release(v4);
    return v5;
  }

  return result;
}

uint64_t (*sub_10022F7BC(char a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  if ((a1 & 4) != 0)
  {
    uint64_t v9 = *v3;
    uint64_t v10 = swift_allocObject(&unk_1003F2A20, 24LL, 7LL);
    swift_weakInit(v10 + 16, v3);
    uint64_t v11 = swift_allocObject(&unk_1003F3128, 80LL, 7LL);
    *(void *)(v11 + 16)  = *(void *)(v9 + 80);
    *(void *)(v11 + 24)  = *(void *)(v9 + 88);
    *(_OWORD *)(v11 + 32)  = *(_OWORD *)(v9 + 96);
    *(void *)(v11 + 48)  = *(void *)(v9 + 112);
    *(void *)(v11 + 56)  = v10;
    *(void *)(v11 + 64)  = a2;
    BOOL v7 = (void *)(v11 + 72);
    id v8 = sub_100246494;
  }

  else
  {
    uint64_t v6 = swift_allocObject(&unk_1003F3100, 32LL, 7LL);
    *(void *)(v6 + 16)  = a2;
    BOOL v7 = (void *)(v6 + 24);
    id v8 = sub_100247464;
  }

  *BOOL v7 = a3;
  swift_retain();
  return v8;
}

uint64_t sub_10022F8A4( uint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v68 = a5;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *a1;
  if (v19)
  {
    uint64_t v67 = a6;
    aBlock[0]  = v19;
    swift_errorRetain(v19);
    uint64_t v20 = sub_100002274((uint64_t *)&unk_10040C5B0);
    uint64_t v21 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CD60, &OBJC_CLASS___NSError_ptr);
    if ((swift_dynamicCast(v72, aBlock, v20, v21, 6LL) & 1) != 0)
    {
      uint64_t v64 = a7;
      uint64_t v65 = a8;
      id v22 = v72[0];
      id v23 = [v72[0] localizedFailureReason];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v66 = a2;
        id v25 = [v22 localizedRecoverySuggestion];
        if (v25)
        {
          __int128 v26 = v25;
          uint64_t v27 = v66 + 16;
          swift_beginAccess(v66 + 16, v72, 0LL, 0LL);
          uint64_t v63 = v27;
          Strong  = swift_weakLoadStrong(v27);
          if (Strong)
          {
            uint64_t v29 = Strong;
            uint64_t v62 = a3;
            id v30 = (void *)swift_unknownObjectWeakLoadStrong(Strong + qword_100410A08);
            swift_release(v29);
            id v61 = v30;
            if (v30)
            {
              id v60 = v22;
              NSString v31 = [v22 localizedDescription];
              if (!v31)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
                uint64_t v33 = v32;
                NSString v31 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v33);
              }

              id v34 = [objc_allocWithZone(UNMutableNotificationContent) init];
              [v34 setTitle:v31];

              [v34 setSubtitle:v24];
              [v34 setBody:v26];

              id v35 = [(id)objc_opt_self(UNNotificationSound) defaultSound];
              [v34 setSound:v35];

              [v34 setShouldIgnoreDoNotDisturb:1];
              [v34 setShouldIgnoreDowntime:1];
              [v34 setShouldHideDate:1];
              [v34 setShouldHideTime:1];
              NSString v36 = String._bridgeToObjectiveC()();
              id v37 = [(id)objc_opt_self(UNNotificationIcon) iconNamed:v36];

              [v34 setIcon:v37];
              uint64_t v39 = UUID.init()(v38);
              uint64_t v40 = UUID.uuidString.getter(v39);
              uint64_t v42 = v41;
              (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
              swift_bridgeObjectRetain(v42);
              id v43 = v34;
              NSString v44 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v42);
              id v45 =  [(id)objc_opt_self(UNNotificationRequest) requestWithIdentifier:v44 content:v43 trigger:0];

              uint64_t v46 = v63;
              swift_beginAccess(v63, v71, 0LL, 0LL);
              uint64_t v47 = swift_weakLoadStrong(v46);
              a3  = v62;
              if (v47)
              {
                int v48 = *(unsigned __int8 *)(v47 + qword_100410A18);
                swift_release(v47);
                if (v48 == 1)
                {
                  unint64_t v49 = (void *)swift_allocObject(&unk_1003F3150, 80LL, 7LL);
                  uint64_t v51 = v66;
                  uint64_t v50 = v67;
                  v49[2]  = v68;
                  v49[3]  = v50;
                  uint64_t v52 = v65;
                  v49[4]  = v64;
                  v49[5]  = v52;
                  v49[6]  = a9;
                  v49[7]  = v51;
                  v49[8]  = v40;
                  v49[9]  = v42;
                  aBlock[4]  = sub_100246508;
                  uint64_t v70 = v49;
                  aBlock[0]  = _NSConcreteStackBlock;
                  aBlock[1]  = 1107296256LL;
                  aBlock[2]  = sub_100300778;
                  aBlock[3]  = &unk_1003F3168;
                  uint64_t v53 = _Block_copy(aBlock);
                  unsigned __int8 v54 = v70;
                  swift_retain();
                  swift_release(v54);
                  id v55 = v61;
                  [v61 addNotificationRequest:v45 completionHandler:v53];
                  id v56 = v55;
                  unsigned __int8 v57 = v62;
                  swift_unknownObjectRelease(v56);

                  _Block_release(v53);
                  return v57(v19);
                }
              }

              swift_bridgeObjectRelease(v42);
              swift_beginAccess(v46, aBlock, 0LL, 0LL);
              uint64_t v59 = swift_weakLoadStrong(v46);
              swift_unknownObjectRelease(v61);

              if (v59)
              {
                *(_BYTE *)(v59 + qword_100410A18)  = 1;
                swift_release(v59);
              }
            }

            else
            {

              a3  = v62;
            }
          }

          else
          {
          }
        }

        else
        {
        }
      }

      else
      {
      }
    }
  }

  return a3(v19);
}

uint64_t sub_10022FDF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v62 = a7;
  uint64_t v63 = a8;
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v65 = a2;
  uint64_t v66 = a4;
  uint64_t v64 = a3;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v71 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v70 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v68 = *(void *)(v12 - 8);
  uint64_t v69 = v12;
  __chkstk_darwin();
  uint64_t v67 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void *)(v72 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin();
  id v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v56 - v23;
  Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 6516856LL, 0xE300000000000000LL);
  if (a1)
  {
    uint64_t v72 = v20;
    uint64_t v25 = v19;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v26 = swift_errorRetain(a1);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v30 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v29 = 138412290;
      swift_errorRetain(a1);
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError(a1);
      aBlock  = (void **)v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v74);
      *id v30 = v31;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to add notification request: %@", v29, 0xCu);
      uint64_t v32 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v30, 1LL, v32);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    uint64_t v54 = v25;
    uint64_t v20 = v72;
  }

  else
  {
    sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v57 = v10;
    uint64_t v58 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()(v58);
    + infix(_:_:)(v16, 5.0);
    uint64_t v59 = *(void (**)(char *, uint64_t))(v14 + 8);
    v59(v16, v72);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v24, v19);
    uint64_t v33 = *(unsigned __int8 *)(v20 + 80);
    uint64_t v34 = (v33 + 56) & ~v33;
    unint64_t v35 = (v21 + v34 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    id v37 = (char *)swift_allocObject(&unk_1003F31A0, v36 + 16, v33 | 7);
    uint64_t v38 = v61;
    *((void *)v37 + 2)  = v60;
    *((void *)v37 + 3)  = v38;
    uint64_t v39 = v63;
    *((void *)v37 + 4)  = v62;
    *((void *)v37 + 5)  = v39;
    *((void *)v37 + 6)  = a9;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v37[v34], v22, v19);
    uint64_t v40 = v64;
    *(void *)&v37[v35]  = v65;
    uint64_t v41 = &v37[v36];
    uint64_t v42 = v66;
    *(void *)uint64_t v41 = v40;
    *((void *)v41 + 1)  = v42;
    v74[3]  = sub_1002465C8;
    __int128 v75 = v37;
    aBlock  = _NSConcreteStackBlock;
    v74[0]  = 1107296256LL;
    v74[1]  = sub_1000021F0;
    v74[2]  = &unk_1003F31B8;
    id v43 = _Block_copy(&aBlock);
    NSString v44 = v75;
    swift_retain();
    swift_bridgeObjectRetain(v42);
    uint64_t v45 = swift_release(v44);
    uint64_t v46 = v67;
    static DispatchQoS.unspecified.getter(v45);
    aBlock  = (void **)_swiftEmptyArrayStorage;
    uint64_t v47 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v48 = sub_100002274((uint64_t *)&unk_1004052A0);
    uint64_t v49 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v50 = v70;
    uint64_t v51 = v48;
    uint64_t v52 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v51, v49, v57, v47);
    uint64_t v53 = (void *)v58;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v46, v50, v43);
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v71 + 8))(v50, v52);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v46, v69);
    v59(v18, v72);
    uint64_t v54 = v19;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v54);
}

uint64_t sub_100230338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + 16;
  BOOL v7 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Removing notification request in 5 seconds...", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  swift_beginAccess(v6, v16, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v6);
  if (result)
  {
    uint64_t v11 = result;
    Strong  = (void *)swift_unknownObjectWeakLoadStrong(result + qword_100410A08);
    uint64_t result = swift_release(v11);
    if (Strong)
    {
      uint64_t v13 = sub_100002274((uint64_t *)&unk_10040CD70);
      uint64_t v14 = swift_allocObject(v13, 48LL, 7LL);
      *(_OWORD *)(v14 + 16)  = xmmword_100339900;
      *(void *)(v14 + 32)  = a3;
      *(void *)(v14 + 40)  = a4;
      swift_bridgeObjectRetain(a4);
      isa  = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(Strong, "removeNotificationsWithIdentifiers:", isa, swift_bridgeObjectRelease(v14).n128_f64[0]);

      return swift_unknownObjectRelease(Strong);
    }
  }

  return result;
}

uint64_t sub_100230498()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_1002304CC();
  return v1;
}

void *sub_1002304CC()
{
  uint64_t v1 = (void *)*v0;
  Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x736E617254697073LL,  0xEF736E6F69746361LL);
  *(void *)((char *)v0 + qword_1004109F8)  = &_swiftEmptySetSingleton;
  swift_weakInit((char *)v0 + qword_100410A00, 0LL);
  swift_unknownObjectWeakInit((char *)v0 + qword_100410A08, 0LL);
  uint64_t v2 = qword_100410A10;
  uint64_t v3 = type metadata accessor for XPCSession(0LL);
  uint64_t v5 = v1[11];
  uint64_t v6 = v1[12];
  uint64_t v7 = v1[13];
  uint64_t v8 = v1[14];
  uint64_t v22 = v1[10];
  uint64_t v4 = v22;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v8;
  uint64_t v9 = _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa(0LL, (uint64_t)&v22);
  uint64_t v10 = sub_10000AF70( &qword_10040CD98,  type metadata accessor for XPCSession,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)((char *)v0 + sub_1000208D8(v3, v2) = Dictionary.init()(v3, v9, v10);
  *((_BYTE *)v0 + qword_100410A18)  = 1;
  *(void *)((char *)v0 + qword_100410A20)  = 0LL;
  uint64_t v11 = qword_10040C7A0;
  uint64_t v12 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v8;
  uint64_t v13 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v22);
  unint64_t v14 = sub_100245750();
  *(void *)((char *)v0 + v11)  = Dictionary.init()(v12, v13, v14);
  uint64_t v15 = qword_10040C7A8;
  *(void *)((char *)v0 + v15)  = Dictionary.init()(v12, v13, v14);
  uint64_t v16 = (char *)v0 + qword_10040C7B0;
  *(void *)uint64_t v16 = 0LL;
  *((void *)v16 + 1)  = 0LL;
  *((void *)v16 + 2)  = 0LL;
  *(_OWORD *)(v16 + 24)  = xmmword_10035D850;
  v16[40]  = 0;
  uint64_t v17 = qword_10040C7B8;
  type metadata accessor for WiFiP2PSPITransactionType(0LL);
  uint64_t v19 = v18;
  uint64_t v20 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  *(void *)((char *)v0 + v17)  = Dictionary.init()(v19, v13, v20);
  return v0;
}

uint64_t sub_100230704(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v116 = a1;
  uint64_t v8 = *(void **)v4;
  uint64_t v9 = *(void *)(*(void *)v4 + 96LL);
  uint64_t v10 = *(void *)(*(void *)v4 + 80LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v9,  v10,  &protocol requirements base descriptor for DeviceDriver);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v10,  AssociatedTypeWitness,  &protocol requirements base descriptor for DeviceDriver,  &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  uint64_t v13 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for Device);
  uint64_t v14 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v13,  &protocol requirements base descriptor for Device,  &associated conformance descriptor for Device.Device.PreferencesBacking: PreferencesStorage);
  uint64_t v16 = type metadata accessor for Preferences(0LL, v13, v14, v15);
  uint64_t v107 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)v105 - v17;
  uint64_t v19 = v8[11];
  uint64_t v20 = v8[13];
  uint64_t v21 = v8[14];
  uint64_t v113 = v10;
  uint64_t v114 = v9;
  uint64_t v117 = v10;
  uint64_t v118 = v19;
  uint64_t v111 = v19;
  uint64_t v112 = v20;
  uint64_t v119 = v9;
  uint64_t v120 = v20;
  v121  = v21;
  uint64_t v22 = type metadata accessor for P2PController.Components(0LL, (uint64_t)&v117);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v25 = (char *)v105 - v24;
  type metadata accessor for DispatchPredicate(0LL);
  uint64_t v26 = __chkstk_darwin();
  os_log_type_t v28 = (void *)((char *)v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v109 = v29;
  v110  = v26;
  uint64_t v108 = v21;
  switch(a2)
  {
    case 0LL:
    case 1LL:
      sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      id v30 = v116;
      id v31 = *(id *)&v116[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v32 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
      id v33 = (id)*v32;
      char v34 = static NSObject.== infix(_:_:)(v31, v33);

      if ((v34 & 1) == 0) {
        goto LABEL_25;
      }
      id v35 = (id)*v32;
      *os_log_type_t v28 = (uint64_t)v35;
      uint64_t v37 = v109;
      uint64_t v36 = v110;
      (*(void (**)(uint64_t *, void, uint64_t))(v109 + 104))( v28,  enum case for DispatchPredicate.onQueue(_:),  v110);
      id v38 = v35;
      LOBYTE(v35)  = _dispatchPreconditionTest(_:)(v28);
      (*(void (**)(uint64_t *, uint64_t))(v37 + 8))(v28, v36);
      if ((v35 & 1) == 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x100231018LL);
      }

      if (a2 == 1)
      {
        uint64_t v117 = v113;
        uint64_t v118 = v111;
        uint64_t v119 = v114;
        uint64_t v120 = v112;
        v121  = v108;
        uint64_t v100 = (objc_class *)_s25P2PTrafficPolicyResponderCMa(0LL, (uint64_t)&v117);
        uint64_t v101 = (char *)v30;
        uint64_t v41 = v115;
        swift_retain();
        id v102 = objc_allocWithZone(v100);
        id v43 = (void *)sub_100246848(v101, v41);
      }

      else
      {
        if (a2) {
          goto LABEL_32;
        }
        uint64_t v117 = v113;
        uint64_t v118 = v111;
        uint64_t v119 = v114;
        uint64_t v120 = v112;
        v121  = v108;
        uint64_t v39 = (objc_class *)_s23P2PTransactionResponderCMa(0LL, (uint64_t)&v117);
        id v40 = v30;
        uint64_t v41 = v115;
        swift_retain();
        id v42 = objc_allocWithZone(v39);
        id v43 = (void *)sub_1002466AC(v40, v41);
      }

      swift_release(v41);
      goto LABEL_32;
    case 2LL:
      sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      id v47 = v116;
      id v48 = *(id *)&v116[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v49 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
      id v50 = (id)*v49;
      char v51 = static NSObject.== infix(_:_:)(v48, v50);

      if ((v51 & 1) == 0) {
        goto LABEL_25;
      }
      id v52 = (id)*v49;
      *os_log_type_t v28 = (uint64_t)v52;
      uint64_t v54 = v109;
      uint64_t v53 = v110;
      (*(void (**)(uint64_t *, void, uint64_t))(v109 + 104))( v28,  enum case for DispatchPredicate.onQueue(_:),  v110);
      id v55 = v52;
      LOBYTE(v52)  = _dispatchPreconditionTest(_:)(v28);
      (*(void (**)(uint64_t *, uint64_t))(v54 + 8))(v28, v53);
      uint64_t v56 = sub_10022F774((uint64_t (*)(void))sub_1002B35D8);
      if (v56)
      {
        uint64_t v57 = v56;
        uint64_t v117 = v113;
        uint64_t v118 = v111;
        uint64_t v119 = v114;
        uint64_t v120 = v112;
        v121  = v108;
        uint64_t v58 = type metadata accessor for P2PController(255LL, (uint64_t)&v117);
        WitnessTable  = swift_getWitnessTable(&unk_10035F780, v58);
        type metadata accessor for AWDLBonjourOffload(0LL, v58, WitnessTable, v60);
        uint64_t v61 = (char *)v47;
        uint64_t v62 = sub_10026966C(v57, v61);
        goto LABEL_20;
      }

      id v103 = objc_allocWithZone((Class)type metadata accessor for EmptyBonjourOffload(0LL));
      os_log_t v99 = (char *)v47;
      goto LABEL_31;
    case 3LL:
      v105[1]  = a4;
      uint64_t v106 = a3;
      sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      id v63 = *(id *)&v116[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v64 = OS_dispatch_queue.nan.unsafeMutableAddressor();
      id v65 = (id)*v64;
      char v66 = static NSObject.== infix(_:_:)(v63, v65);

      if ((v66 & 1) == 0) {
        return v106(2LL);
      }
      id v67 = (id)*v64;
      *os_log_type_t v28 = *v64;
      uint64_t v69 = v109;
      uint64_t v68 = v110;
      (*(void (**)(uint64_t *, void, uint64_t))(v109 + 104))( v28,  enum case for DispatchPredicate.onQueue(_:),  v110);
      id v70 = v67;
      LOBYTE(v67)  = _dispatchPreconditionTest(_:)(v28);
      (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v28, v68);
      a3  = v106;
      Strong  = swift_weakLoadStrong(v115 + qword_100410A00);
      if (!Strong) {
        goto LABEL_27;
      }
      uint64_t v72 = Strong;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))( v25,  Strong + *(void *)(*(void *)Strong + 128LL),  v22);
      swift_release(v72);
      uint64_t v73 = v107;
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v18, v25, v16);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      uint64_t v74 = Preferences.enableUserspaceP2POptions.getter(v16);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v18, v16);
      if ((*(void *)PreferenceDefaults.EnableUserspaceP2POptions.awdlToWiFiAwareMigration.unsafeMutableAddressor() & ~v74) != 0) {
        goto LABEL_27;
      }
      uint64_t v75 = sub_10022F774(sub_1002B3640);
      if (v75)
      {
        uint64_t v57 = v75;
        uint64_t v117 = v113;
        uint64_t v118 = v111;
        uint64_t v119 = v114;
        uint64_t v120 = v112;
        v121  = v108;
        uint64_t v76 = type metadata accessor for P2PController(255LL, (uint64_t)&v117);
        uint64_t v77 = swift_getWitnessTable(&unk_10035F748, v76);
        type metadata accessor for WiFiAwareBonjourOffload(0LL, v76, v77, v78);
        uint64_t v61 = v116;
        uint64_t v62 = sub_100269084(v57, v61);
LABEL_20:

        a3(0LL);
        return swift_release(v57);
      }

      else
      {
LABEL_27:
        id v98 = objc_allocWithZone((Class)type metadata accessor for EmptyBonjourOffload(0LL));
        os_log_t v99 = v116;
LABEL_31:
        uint64_t v104 = v99;

LABEL_32:
        uint64_t v97 = 0LL;
        return a3(v97);
      }

    case 4LL:
      sub_100058CD0(0LL, (unint64_t *)&qword_1004044D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      v80  = v116;
      id v81 = *(id *)&v116[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v82 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
      id v83 = (id)*v82;
      char v84 = static NSObject.== infix(_:_:)(v81, v83);

      if ((v84 & 1) == 0) {
        goto LABEL_25;
      }
      id v85 = (id)*v82;
      *os_log_type_t v28 = (uint64_t)v85;
      uint64_t v87 = v109;
      uint64_t v86 = v110;
      (*(void (**)(uint64_t *, void, uint64_t))(v109 + 104))( v28,  enum case for DispatchPredicate.onQueue(_:),  v110);
      id v88 = v85;
      LOBYTE(v85)  = _dispatchPreconditionTest(_:)(v28);
      (*(void (**)(uint64_t *, uint64_t))(v87 + 8))(v28, v86);
      uint64_t v117 = v113;
      uint64_t v118 = v111;
      uint64_t v119 = v114;
      uint64_t v120 = v112;
      v121  = v108;
      uint64_t v89 = (objc_class *)_s16UIAgentResponderCMa(0LL, (uint64_t)&v117);
      char v90 = (char *)v80;
      id v91 = objc_allocWithZone(v89);
      unint64_t v92 = sub_10023E608(v90);
      uint64_t v93 = v115;
      if (v92)
      {
        unint64_t v94 = v92;
        a3(0LL);
        uint64_t v95 = *(void *)&v94[qword_10040CA78];
        uint64_t v96 = v93 + qword_100410A08;
        swift_unknownObjectRetain(v95);
        swift_unknownObjectWeakAssign(v96, v95);
        sub_10022F6DC();

        return swift_unknownObjectRelease(v95);
      }

char *sub_10023102C(char *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10023E608(a1);
}

void sub_10023105C(void *a1, unsigned int a2)
{
  void (*v58)(uint64_t *__return_ptr, uint64_t);
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  unsigned int v93;
  void *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  uint64_t aBlock;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  char v112[8];
  uint64_t v101 = a1;
  int v4 = a2;
  uint64_t v5 = (void *)*v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v13 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v4)
  {
    uint64_t v100 = v6;
    uint64_t v93 = a2;
    uint64_t v95 = v13;
    uint64_t v96 = v11;
    uint64_t v97 = v10;
    id v98 = v9;
    os_log_t v99 = v7;
    uint64_t v14 = (void *)swift_allocObject(&unk_1003F2E08, 56LL, 7LL);
    uint64_t v15 = v5[10];
    v14[2]  = v15;
    uint64_t v16 = v5[11];
    v14[3]  = v16;
    uint64_t v17 = v5[12];
    v14[4]  = v17;
    unint64_t v18 = v5[13];
    v14[5]  = v18;
    uint64_t v19 = v5[14];
    uint64_t v20 = v15;
    v14[6]  = v19;
    unint64_t v21 = sub_1000033FC();
    id v91 = swift_allocError(&type metadata for WiFiError, v21, 0LL, 0LL);
    *(_OWORD *)uint64_t v22 = xmmword_10033A940;
    *(_BYTE *)(v22 + 16)  = 1;
    unint64_t v92 = v2;
    uint64_t v23 = (void *)((char *)v2 + qword_10040C7A0);
    swift_beginAccess((char *)v2 + qword_10040C7A0, v112, 33LL, 0LL);
    uint64_t v24 = (void *)swift_allocObject(&unk_1003F2E30, 72LL, 7LL);
    v24[2]  = v20;
    v24[3]  = v16;
    v24[4]  = v17;
    v24[5]  = v18;
    v24[6]  = v19;
    v24[7]  = sub_1002474A4;
    unint64_t v94 = v14;
    v24[8]  = v14;
    id v25 = v101;
    LODWORD(v89)  = swift_isUniquelyReferenced_nonNull_native(*v23);
    *(void *)&uint64_t v109 = *v23;
    uint64_t v26 = v109;
    void *v23 = 0x8000000000000000LL;
    uint64_t v101 = v25;
    char v90 = sub_1003278A0((uint64_t)v25);
    uint64_t v28 = *(void *)(v26 + 16);
    BOOL v29 = (v27 & 1) == 0;
    Swift::Int v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
    }

    else
    {
      char v31 = v27;
      uint64_t v32 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      id v88 = v20;
      aBlock  = v20;
      uint64_t v104 = v16;
      uint64_t v87 = v16;
      v105  = v17;
      uint64_t v106 = v18;
      uint64_t v86 = v19;
      uint64_t v107 = v19;
      id v33 = (void *)_s16P2PActivityStateOMa(255LL, (uint64_t)&aBlock);
      unint64_t v34 = sub_100245750();
      id v85 = v32;
      type metadata accessor for _NativeDictionary(0LL, v32, v33, v34);
      Swift::Bool v35 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v89, v30);
      uint64_t v36 = v109;
      id v37 = v101;
      unint64_t v38 = v90;
      if (!v35)
      {
LABEL_6:
        char v90 = v18;
        uint64_t v41 = *v23;
        void *v23 = v36;
        swift_bridgeObjectRelease(v41);
        uint64_t v42 = *v23;
        if ((v31 & 1) != 0)
        {
          swift_bridgeObjectRetain(v42);
        }

        else
        {
          uint64_t v56 = swift_bridgeObjectRetain(v42);
          unint64_t v57 = v38;
          uint64_t v59 = v24[6];
          uint64_t v58 = (void (*)(uint64_t *__return_ptr, uint64_t))v24[7];
          uint64_t v89 = *((_OWORD *)v24 + 1);
          char v84 = *((_OWORD *)v24 + 2);
          v58(&aBlock, v56);
          uint64_t v109 = v89;
          v110  = v84;
          uint64_t v111 = v59;
          uint64_t v60 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v109);
          (*(void (**)(__int128 *, uint64_t *, uint64_t))(*(void *)(v60 - 8) + 32LL))(&v109, &aBlock, v60);
          aBlock  = (uint64_t)v37;
          uint64_t v61 = v37;
          _NativeDictionary._insert(at:key:value:)(v57, &aBlock, &v109, v42, v85, v33, v34);
        }

        uint64_t v62 = v87;
        id v63 = v86;
        swift_bridgeObjectRelease(v42);
        uint64_t v64 = v93;
        id v65 = v91;
        char v66 = sub_10022F4A0(v93, v91, 1, v33);
        swift_endAccess(v112);
        swift_errorRelease(v65);

        id v67 = v92;
        sub_10023105C(v37, v66);
        uint64_t v68 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
        uint64_t v69 = swift_allocObject(&unk_1003F2A20, 24LL, 7LL);
        swift_weakInit(v69 + 16, v67);
        id v70 = swift_allocObject(&unk_1003F2E58, 80LL, 7LL);
        *(void *)(v70 + 16)  = v88;
        *(void *)(v70 + 24)  = v62;
        uint64_t v71 = v90;
        *(void *)(v70 + 32)  = v17;
        *(void *)(v70 + 40)  = v71;
        *(void *)(v70 + 48)  = v63;
        *(void *)(v70 + 56)  = v69;
        *(_BYTE *)(v70 + 64)  = v64;
        *(void *)(v70 + 72)  = v37;
        uint64_t v107 = (uint64_t)sub_100245BAC;
        uint64_t v108 = v70;
        aBlock  = (uint64_t)_NSConcreteStackBlock;
        uint64_t v104 = 1107296256LL;
        v105  = (uint64_t)sub_1000021F0;
        uint64_t v106 = (unint64_t)&unk_1003F2E70;
        uint64_t v72 = _Block_copy(&aBlock);
        uint64_t v73 = v37;
        uint64_t v74 = v68;
        uint64_t v75 = swift_retain();
        uint64_t v76 = v95;
        static DispatchQoS.unspecified.getter(v75);
        *(void *)&uint64_t v109 = _swiftEmptyArrayStorage;
        uint64_t v77 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v78 = sub_100002274((uint64_t *)&unk_1004052A0);
        uint64_t v79 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
        v80  = v98;
        id v81 = v78;
        uint64_t v82 = v100;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v109, v81, v79, v100, v77);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v76, v80, v72);
        _Block_release(v72);

        (*(void (**)(char *, uint64_t))(v99 + 8))(v80, v82);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v76, v97);
        id v83 = v108;
        swift_release(v24);
        swift_release(v94);
        swift_release(v69);
        swift_release(v83);
        return;
      }

      unint64_t v39 = sub_1003278A0((uint64_t)v101);
      if ((v31 & 1) == (v40 & 1))
      {
        unint64_t v38 = v39;
        goto LABEL_6;
      }
    }

    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v85);
    __break(1u);
    return;
  }

  id v43 = (void *)((char *)v2 + qword_10040C7A0);
  swift_beginAccess((char *)v2 + qword_10040C7A0, v112, 0LL, 0LL);
  uint64_t v44 = *v43;
  if (*(void *)(*v43 + 16LL))
  {
    swift_bridgeObjectRetain(*v43);
    unint64_t v45 = sub_1003278A0((uint64_t)v101);
    if ((v46 & 1) != 0)
    {
      unint64_t v47 = v45;
      uint64_t v48 = *(unsigned int *)(v44 + 36);
      swift_bridgeObjectRelease(v44);
      uint64_t v49 = *v43;
      uint64_t v50 = sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      uint64_t v51 = v5[14];
      swift_bridgeObjectRetain(v49);
      __int128 v52 = *((_OWORD *)v5 + 6);
      uint64_t v109 = *((_OWORD *)v5 + 5);
      v110  = v52;
      uint64_t v111 = v51;
      uint64_t v53 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v109);
      unint64_t v54 = sub_100245750();
      Dictionary.subscript.getter(&v102, &aBlock, v47, v48, 0LL, v49, v50, v53, v54);
      swift_bridgeObjectRelease(v49);

      if (v106 >> 62 != 3 || (_BYTE)v108 || v106 != 0xC000000000000000LL || v104 | aBlock | v105 | v107)
      {
        sub_10023EC24(aBlock, v104, v105, v106, v107, v108);
      }

      else
      {
        swift_beginAccess(v43, &v109, 33LL, 0LL);
        uint64_t v55 = type metadata accessor for Dictionary(0LL, v50, v53, v54);
        Dictionary.remove(at:)(&v102, &aBlock, v47, v48, 0LL, v55);
        swift_endAccess(&v109);
        sub_10023EC24(aBlock, v104, v105, v106, v107, v108);
      }
    }

    else
    {
      swift_bridgeObjectRelease(v44);
    }
  }

uint64_t sub_1002317E4( uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v72 = a6;
  uint64_t v73 = a7;
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v74 = v12;
  uint64_t v75 = v13;
  __chkstk_darwin();
  uint64_t v15 = &v59[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = &v59[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  swift_beginAccess(a1 + 16, v79, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1 + 16);
  if (!result) {
    return result;
  }
  uint64_t v21 = result;
  uint64_t v64 = a8;
  uint64_t v65 = a1;
  int v63 = a2;
  uint64_t v22 = sub_10022F774((uint64_t (*)(void))sub_1002B35D8);
  uint64_t v23 = v22;
  uint64_t v68 = v17;
  uint64_t v69 = v16;
  uint64_t v66 = v21;
  id v67 = v19;
  if (a2 == 1)
  {
    if (v22)
    {
      sub_1003007CC(a3);
LABEL_7:
      swift_release(v23);
    }
  }

  else if (v22)
  {
    sub_1003008A8((uint64_t)a3);
    goto LABEL_7;
  }

  uint64_t v62 = a3;
  id v24 = a3;
  id v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    char v27 = v63;
    int v28 = v63;
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    uint64_t v60 = swift_slowAlloc(64LL, -1LL);
    aBlock[0]  = v60;
    *(_DWORD *)uint64_t v29 = 136315394;
    if (v28 == 1) {
      uint64_t v30 = 0x6465767265736572LL;
    }
    else {
      uint64_t v30 = 0x7672657365726E75LL;
    }
    uint64_t v61 = v15;
    if (v28 == 1) {
      unint64_t v31 = 0xE800000000000000LL;
    }
    else {
      unint64_t v31 = 0xEA00000000006465LL;
    }
    uint64_t v76 = (void *)sub_10000235C(v30, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, aBlock);
    *(void *)&double v32 = swift_bridgeObjectRelease(v31).n128_u64[0];
    *(_WORD *)(v29 + 12)  = 2080;
    id v33 = objc_msgSend(v24, "uniqueIdentifier", v32);
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v36 = v35;

    uint64_t v15 = v61;
    uint64_t v76 = (void *)sub_10000235C(v34, v36, aBlock);
    char v37 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, aBlock);

    swift_bridgeObjectRelease(v36);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Successfully %s traffic registrations for %s",  (uint8_t *)v29,  0x16u);
    uint64_t v38 = v60;
    swift_arrayDestroy(v60, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);

    unint64_t v39 = v62;
    uint64_t v40 = v73;
  }

  else
  {

    unint64_t v39 = v62;
    uint64_t v40 = v73;
    char v37 = v63;
  }

  uint64_t v42 = v71;
  uint64_t v41 = v72;
  uint64_t v43 = v70;
  uint64_t v44 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v45 = swift_allocObject(&unk_1003F2EA8, 89LL, 7LL);
  *(void *)(v45 + 16)  = v43;
  *(void *)(v45 + 24)  = v42;
  *(void *)(v45 + 32)  = v41;
  *(void *)(v45 + 40)  = v40;
  uint64_t v46 = v65;
  *(void *)(v45 + 48)  = v64;
  *(void *)(v45 + 56)  = v46;
  *(void *)(v45 + 64)  = v39;
  *(_BYTE *)(v45 + 72)  = v37;
  *(void *)(v45 + 80)  = 0LL;
  *(_BYTE *)(v45 + 88)  = 0;
  aBlock[4]  = (uint64_t)sub_100245C10;
  uint64_t v78 = v45;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = (uint64_t)sub_1000021F0;
  aBlock[3]  = (uint64_t)&unk_1003F2EC0;
  unint64_t v47 = _Block_copy(aBlock);
  uint64_t v48 = v39;
  uint64_t v49 = v47;
  id v50 = v48;
  id v51 = v44;
  swift_retain();
  uint64_t v52 = sub_10023EC00(0LL, 0);
  uint64_t v53 = v67;
  static DispatchQoS.unspecified.getter(v52);
  uint64_t v76 = _swiftEmptyArrayStorage;
  uint64_t v54 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v55 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v56 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v57 = v55;
  uint64_t v58 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v57, v56, v74, v54);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v53, v15, v49);
  _Block_release(v49);
  swift_release(v66);

  sub_10023ECD8(0LL, 0);
  (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v15, v58);
  (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v53, v69);
  return swift_release(v78);
}

uint64_t sub_100231FE8( uint64_t a1, void *a2, unsigned int a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = a1 + 16;
  swift_beginAccess(a1 + 16, v54, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v17);
  if (!result) {
    return result;
  }
  uint64_t v19 = result;
  unsigned int v47 = a3;
  uint64_t v48 = a4;
  uint64_t v20 = (void *)swift_allocObject(&unk_1003F2EF8, 56LL, 7LL);
  v20[2]  = a6;
  v20[3]  = a7;
  void v20[4] = a8;
  v20[5]  = a9;
  v20[6]  = a10;
  uint64_t v49 = v19;
  uint64_t v21 = (void *)(v19 + qword_10040C7A0);
  swift_beginAccess(v19 + qword_10040C7A0, v53, 33LL, 0LL);
  uint64_t v22 = (void *)swift_allocObject(&unk_1003F2F20, 72LL, 7LL);
  v22[2]  = a6;
  v22[3]  = a7;
  v22[4]  = a8;
  v22[5]  = a9;
  v22[6]  = a10;
  v22[7]  = sub_1002474A4;
  uint64_t v42 = v20;
  v22[8]  = v20;
  id v23 = a2;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v21);
  *(void *)&v51[0]  = *v21;
  uint64_t v24 = *(void *)&v51[0];
  *uint64_t v21 = 0x8000000000000000LL;
  uint64_t v46 = v23;
  unint64_t v50 = sub_1003278A0((uint64_t)v23);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = (v25 & 1) == 0;
  Swift::Int v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v41);
    __break(1u);
    return result;
  }

  char v29 = v25;
  uint64_t v30 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  v55[0]  = a6;
  v55[1]  = a7;
  v55[2]  = a8;
  v55[3]  = a9;
  v55[4]  = a10;
  unint64_t v31 = (void *)_s16P2PActivityStateOMa(255LL, (uint64_t)v55);
  unint64_t v32 = sub_100245750();
  uint64_t v41 = v30;
  type metadata accessor for _NativeDictionary(0LL, v30, v31, v32);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v28))
  {
    unint64_t v50 = sub_1003278A0((uint64_t)v46);
    if ((v29 & 1) != (v33 & 1)) {
      goto LABEL_11;
    }
  }

  uint64_t v34 = *v21;
  *uint64_t v21 = *(void *)&v51[0];
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = *v21;
  if ((v29 & 1) != 0)
  {
    swift_bridgeObjectRetain(v35);
  }

  else
  {
    uint64_t v36 = swift_bridgeObjectRetain(v35);
    uint64_t v37 = v22[6];
    *(_OWORD *)isUniquea  = *((_OWORD *)v22 + 2);
    __int128 v45 = *((_OWORD *)v22 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v22[7])(v55, v36);
    v51[0]  = v45;
    v51[1]  = *(_OWORD *)isUniquea;
    uint64_t v52 = v37;
    uint64_t v38 = _s16P2PActivityStateOMa(0LL, (uint64_t)v51);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v38 - 8) + 32LL))(v51, v55, v38);
    v55[0]  = v46;
    id v39 = v46;
    _NativeDictionary._insert(at:key:value:)(v50, v55, v51, v35, v30, v31, v32);
  }

  swift_bridgeObjectRelease(v35);
  uint64_t v40 = sub_10022F420(v47, v48, a5 & 1, v31);
  swift_endAccess(v53);

  sub_10023105C(v46, v40);
  swift_release(v22);
  swift_release(v42);
  return swift_release(v49);
}

uint64_t sub_1002322F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v4;
  uint64_t v7 = sub_10022F7BC((char)[a1 options], a3, a4);
  uint64_t v43 = v8;
  uint64_t v44 = (uint64_t)v7;
  uint64_t v9 = (void *)swift_allocObject(&unk_1003F3600, 56LL, 7LL);
  uint64_t v10 = v6[10];
  v9[2]  = v10;
  uint64_t v11 = v6[11];
  v9[3]  = v11;
  uint64_t v12 = v6[12];
  void v9[4] = v12;
  uint64_t v13 = v6[13];
  v9[5]  = v13;
  uint64_t v14 = v6[14];
  void v9[6] = v14;
  uint64_t v15 = (void *)((char *)v4 + qword_10040C7A0);
  swift_beginAccess((char *)v4 + qword_10040C7A0, v48, 33LL, 0LL);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003F3628, 72LL, 7LL);
  v16[2]  = v10;
  v16[3]  = v11;
  v16[4]  = v12;
  v16[5]  = v13;
  v16[6]  = v14;
  v16[7]  = sub_1002474A4;
  uint64_t v42 = v9;
  v16[8]  = v9;
  id v17 = a1;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v15);
  *(void *)&v46[0]  = *v15;
  uint64_t v18 = *(void *)&v46[0];
  *uint64_t v15 = 0x8000000000000000LL;
  uint64_t v41 = v17;
  unint64_t v45 = sub_1003278A0((uint64_t)v17);
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = (v19 & 1) == 0;
  Swift::Int v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
    __break(1u);
    return result;
  }

  char v23 = v19;
  uint64_t v24 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  v49[0]  = v10;
  v49[1]  = v11;
  v49[2]  = v12;
  v49[3]  = v13;
  v49[4]  = v14;
  uint64_t v14 = v24;
  uint64_t v25 = _s16P2PActivityStateOMa(255LL, (uint64_t)v49);
  unint64_t v26 = sub_100245750();
  type metadata accessor for _NativeDictionary(0LL, v14, v25, v26);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v22))
  {
    unint64_t v45 = sub_1003278A0((uint64_t)v41);
    if ((v23 & 1) != (v27 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v28 = *v15;
  *uint64_t v15 = *(void *)&v46[0];
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *v15;
  uint64_t v30 = *v15;
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRetain(v30);
  }

  else
  {
    uint64_t v31 = swift_bridgeObjectRetain(v30);
    uint64_t v32 = v16[6];
    __int128 v38 = *((_OWORD *)v16 + 2);
    *(_OWORD *)isUniquea  = *((_OWORD *)v16 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v16[7])(v49, v31);
    v46[0]  = *(_OWORD *)isUniquea;
    v46[1]  = v38;
    uint64_t v47 = v32;
    uint64_t v33 = _s16P2PActivityStateOMa(0LL, (uint64_t)v46);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v33 - 8) + 32LL))(v46, v49, v33);
    v49[0]  = v41;
    id v34 = v41;
    _NativeDictionary._insert(at:key:value:)(v45, v49, v46, v29, v14, v25, v26);
  }

  swift_bridgeObjectRelease(v29);
  sub_10022C9A8();
  unsigned int v36 = v35;
  swift_endAccess(v48);

  sub_10023105C(v41, v36);
  sub_100245908(v44, v43);
  swift_release(v16);
  return swift_release(v42);
}

uint64_t sub_100232618(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)*v4;
  uint64_t v8 = (void *)swift_allocObject(&unk_1003F3650, 56LL, 7LL);
  uint64_t v9 = v7[10];
  _OWORD v8[2] = v9;
  uint64_t v10 = v7[11];
  v8[3]  = v10;
  uint64_t v11 = v7[12];
  v8[4]  = v11;
  uint64_t v12 = v7[13];
  v8[5]  = v12;
  uint64_t v13 = v7[14];
  v8[6]  = v13;
  uint64_t v14 = swift_allocObject(&unk_1003F3678, 32LL, 7LL);
  *(void *)(v14 + 16)  = a3;
  *(void *)(v14 + 24)  = a4;
  uint64_t v44 = v14;
  uint64_t v15 = (void *)((char *)v4 + qword_10040C7A0);
  swift_beginAccess((char *)v4 + qword_10040C7A0, v51, 33LL, 0LL);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003F36A0, 72LL, 7LL);
  v16[2]  = v9;
  v16[3]  = v10;
  v16[4]  = v11;
  v16[5]  = v12;
  v16[6]  = v13;
  v16[7]  = sub_1002474A4;
  unint64_t v45 = v8;
  v16[8]  = v8;
  id v17 = a1;
  swift_retain();
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v15);
  uint64_t v48 = v17;
  *(void *)&v49[0]  = *v15;
  uint64_t v18 = *(void *)&v49[0];
  *uint64_t v15 = 0x8000000000000000LL;
  unint64_t v46 = sub_1003278A0((uint64_t)v17);
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = (v19 & 1) == 0;
  Swift::Int v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return result;
  }

  char v23 = v19;
  uint64_t v24 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  v52[0]  = v9;
  v52[1]  = v10;
  v52[2]  = v11;
  v52[3]  = v12;
  uint64_t v12 = v24;
  v52[4]  = v13;
  uint64_t v25 = _s16P2PActivityStateOMa(255LL, (uint64_t)v52);
  unint64_t v26 = sub_100245750();
  type metadata accessor for _NativeDictionary(0LL, v12, v25, v26);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v22))
  {
    unint64_t v46 = sub_1003278A0((uint64_t)v48);
    if ((v23 & 1) != (v27 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v28 = *v15;
  *uint64_t v15 = *(void *)&v49[0];
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *v15;
  uint64_t v30 = *v15;
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRetain(v30);
    uint64_t v31 = v45;
    uint64_t v32 = v44;
    uint64_t v33 = v48;
  }

  else
  {
    uint64_t v34 = swift_bridgeObjectRetain(v30);
    uint64_t v35 = v16[6];
    __int128 v41 = *((_OWORD *)v16 + 2);
    *(_OWORD *)isUniquea  = *((_OWORD *)v16 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v16[7])(v52, v34);
    v49[0]  = *(_OWORD *)isUniquea;
    v49[1]  = v41;
    uint64_t v50 = v35;
    uint64_t v36 = _s16P2PActivityStateOMa(0LL, (uint64_t)v49);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v36 - 8) + 32LL))(v49, v52, v36);
    uint64_t v33 = v48;
    v52[0]  = v48;
    id v37 = v48;
    _NativeDictionary._insert(at:key:value:)(v46, v52, v49, v29, v12, v25, v26);
    uint64_t v31 = v45;
    uint64_t v32 = v44;
  }

  swift_bridgeObjectRelease(v29);
  sub_10022CF6C();
  unsigned int v39 = v38;
  swift_endAccess(v51);

  swift_release(v32);
  sub_10023105C(v33, v39);
  swift_release(v16);
  return swift_release(v31);
}

uint64_t sub_100232934(void **a1, void *a2, void *a3)
{
  int v4 = (void *)*a2;
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)swift_allocObject(&unk_1003F36C8, 56LL, 7LL);
  uint64_t v7 = (void *)v4[10];
  v6[2]  = v7;
  unint64_t v57 = v4[11];
  v6[3]  = v57;
  uint64_t v8 = v4[12];
  v6[4]  = v8;
  uint64_t v9 = v4[13];
  v6[5]  = v9;
  uint64_t v47 = v4[14];
  void v6[6] = v47;
  uint64_t v52 = 0LL;
  unint64_t v53 = 0xE000000000000000LL;
  id v10 = v5;
  _StringGuts.grow(_:)(40LL);
  v11._object  = (void *)0x80000001003682C0LL;
  v11._countAndFlagsBits  = 0xD000000000000026LL;
  String.append(_:)(v11);
  *(void *)&v49[0]  = v10;
  uint64_t v12 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v12);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v49, v12, WitnessTable);
  unint64_t v43 = v53;
  uint64_t v14 = (void *)((char *)a2 + qword_10040C7A0);
  swift_beginAccess(v14, v51, 33LL, 0LL);
  uint64_t v15 = (void *)swift_allocObject(&unk_1003F36F0, 72LL, 7LL);
  uint64_t v40 = v7;
  void v15[2] = v7;
  uint64_t v16 = v8;
  unint64_t v17 = v57;
  v15[3]  = v57;
  v15[4]  = v16;
  v15[5]  = v9;
  v15[6]  = v47;
  v15[7]  = sub_1002474A4;
  unint64_t v46 = v6;
  v15[8]  = v6;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v14);
  *(void *)&v49[0]  = *v14;
  uint64_t v18 = *(void *)&v49[0];
  *uint64_t v14 = 0x8000000000000000LL;
  uint64_t v44 = v10;
  unint64_t v41 = sub_1003278A0((uint64_t)v10);
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = (v19 & 1) == 0;
  Swift::Int v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_10;
  }

  char v23 = v19;
  uint64_t v52 = v40;
  unint64_t v53 = v17;
  uint64_t v54 = v16;
  uint64_t v55 = v9;
  uint64_t v56 = v47;
  uint64_t v24 = _s16P2PActivityStateOMa(255LL, (uint64_t)&v52);
  unint64_t v57 = sub_100245750();
  type metadata accessor for _NativeDictionary(0LL, v12, v24, v57);
  Swift::Bool v25 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v22);
  uint64_t v26 = *(void *)&v49[0];
  unint64_t v27 = v41;
  if (v25)
  {
    unint64_t v28 = sub_1003278A0((uint64_t)v44);
    if ((v23 & 1) == (v29 & 1))
    {
      unint64_t v27 = v28;
      goto LABEL_5;
    }

void sub_100232CA4(void *a1, unsigned int a2, int a3)
{
  void (*v60)(uint64_t *__return_ptr, uint64_t);
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  int v95;
  unsigned int v96;
  void *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  uint64_t aBlock;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  char v115[8];
  uint64_t v104 = a1;
  int v6 = a2;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  Swift::String v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v6)
  {
    id v103 = v8;
    uint64_t v95 = a3;
    uint64_t v96 = a2;
    id v98 = v15;
    os_log_t v99 = v13;
    uint64_t v100 = v12;
    uint64_t v101 = v11;
    id v102 = v9;
    uint64_t v16 = (void *)swift_allocObject(&unk_1003F2C78, 56LL, 7LL);
    uint64_t v17 = v7[10];
    v16[2]  = v17;
    uint64_t v18 = v7[11];
    v16[3]  = v18;
    uint64_t v19 = v7[12];
    v16[4]  = v19;
    unint64_t v20 = v7[13];
    v16[5]  = v20;
    uint64_t v21 = v7[14];
    uint64_t v22 = v17;
    v16[6]  = v21;
    unint64_t v23 = sub_1000033FC();
    uint64_t v93 = swift_allocError(&type metadata for WiFiError, v23, 0LL, 0LL);
    *(_OWORD *)uint64_t v24 = xmmword_10033A940;
    *(_BYTE *)(v24 + 16)  = 1;
    unint64_t v94 = v3;
    Swift::Bool v25 = (void *)((char *)v3 + qword_10040C7A8);
    swift_beginAccess((char *)v3 + qword_10040C7A8, v115, 33LL, 0LL);
    uint64_t v26 = (void *)swift_allocObject(&unk_1003F2CA0, 72LL, 7LL);
    v26[2]  = v22;
    void v26[3] = v18;
    v26[4]  = v19;
    v26[5]  = v20;
    v26[6]  = v21;
    v26[7]  = sub_1002474A4;
    uint64_t v97 = v16;
    v26[8]  = v16;
    id v27 = v104;
    LODWORD(v91)  = swift_isUniquelyReferenced_nonNull_native(*v25);
    *(void *)&uint64_t v112 = *v25;
    uint64_t v28 = v112;
    *Swift::Bool v25 = 0x8000000000000000LL;
    uint64_t v104 = v27;
    unint64_t v92 = sub_1003278A0((uint64_t)v27);
    uint64_t v30 = *(void *)(v28 + 16);
    BOOL v31 = (v29 & 1) == 0;
    Swift::Int v32 = v30 + v31;
    if (__OFADD__(v30, v31))
    {
      __break(1u);
    }

    else
    {
      char v33 = v29;
      uint64_t v34 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      char v90 = v22;
      aBlock  = v22;
      uint64_t v107 = v18;
      uint64_t v89 = v18;
      uint64_t v108 = v19;
      uint64_t v109 = v20;
      id v88 = v21;
      v110  = v21;
      id v35 = (void *)_s16P2PActivityStateOMa(255LL, (uint64_t)&aBlock);
      unint64_t v36 = sub_100245750();
      uint64_t v87 = v34;
      type metadata accessor for _NativeDictionary(0LL, v34, v35, v36);
      Swift::Bool v37 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v91, v32);
      uint64_t v38 = v112;
      id v39 = v104;
      unint64_t v40 = v92;
      if (!v37)
      {
LABEL_6:
        unint64_t v92 = v20;
        uint64_t v43 = *v25;
        *Swift::Bool v25 = v38;
        swift_bridgeObjectRelease(v43);
        uint64_t v44 = *v25;
        if ((v33 & 1) != 0)
        {
          swift_bridgeObjectRetain(v44);
        }

        else
        {
          uint64_t v58 = swift_bridgeObjectRetain(v44);
          unint64_t v59 = v40;
          uint64_t v61 = v26[6];
          uint64_t v60 = (void (*)(uint64_t *__return_ptr, uint64_t))v26[7];
          id v91 = *((_OWORD *)v26 + 1);
          uint64_t v86 = *((_OWORD *)v26 + 2);
          v60(&aBlock, v58);
          uint64_t v112 = v91;
          uint64_t v113 = v86;
          uint64_t v114 = v61;
          uint64_t v62 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v112);
          (*(void (**)(__int128 *, uint64_t *, uint64_t))(*(void *)(v62 - 8) + 32LL))(&v112, &aBlock, v62);
          aBlock  = (uint64_t)v39;
          int v63 = v39;
          _NativeDictionary._insert(at:key:value:)(v59, &aBlock, &v112, v44, v87, v35, v36);
        }

        uint64_t v64 = v89;
        uint64_t v65 = v88;
        swift_bridgeObjectRelease(v44);
        uint64_t v66 = v96;
        id v67 = v93;
        uint64_t v68 = sub_10022F4A0(v96, v93, 1, v35);
        swift_endAccess(v115);
        swift_errorRelease(v67);

        uint64_t v69 = v94;
        sub_100232CA4(v39, v68, 0LL);
        uint64_t v70 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
        uint64_t v71 = swift_allocObject(&unk_1003F2A20, 24LL, 7LL);
        swift_weakInit(v71 + 16, v69);
        uint64_t v72 = swift_allocObject(&unk_1003F2CC8, 80LL, 7LL);
        *(void *)(v72 + 16)  = v90;
        *(void *)(v72 + 24)  = v64;
        uint64_t v73 = v92;
        *(void *)(v72 + 32)  = v19;
        *(void *)(v72 + 40)  = v73;
        *(void *)(v72 + 48)  = v65;
        *(void *)(v72 + 56)  = v71;
        *(_BYTE *)(v72 + 64)  = v95 & 1;
        *(_BYTE *)(v72 + 65)  = v66;
        *(void *)(v72 + 72)  = v39;
        v110  = (uint64_t)sub_100245A94;
        uint64_t v111 = v72;
        aBlock  = (uint64_t)_NSConcreteStackBlock;
        uint64_t v107 = 1107296256LL;
        uint64_t v108 = (uint64_t)sub_1000021F0;
        uint64_t v109 = (unint64_t)&unk_1003F2CE0;
        uint64_t v74 = _Block_copy(&aBlock);
        uint64_t v75 = v39;
        uint64_t v76 = v70;
        uint64_t v77 = swift_retain();
        uint64_t v78 = v98;
        static DispatchQoS.unspecified.getter(v77);
        *(void *)&uint64_t v112 = _swiftEmptyArrayStorage;
        uint64_t v79 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v80  = sub_100002274((uint64_t *)&unk_1004052A0);
        id v81 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v82 = v101;
        id v83 = v80;
        char v84 = v103;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v112, v83, v81, v103, v79);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v78, v82, v74);
        _Block_release(v74);

        (*(void (**)(char *, uint64_t))(v102 + 8))(v82, v84);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v78, v100);
        id v85 = v111;
        swift_release(v26);
        swift_release(v97);
        swift_release(v71);
        swift_release(v85);
        return;
      }

      unint64_t v41 = sub_1003278A0((uint64_t)v104);
      if ((v33 & 1) == (v42 & 1))
      {
        unint64_t v40 = v41;
        goto LABEL_6;
      }
    }

    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v87);
    __break(1u);
    return;
  }

  unint64_t v45 = (void *)((char *)v3 + qword_10040C7A8);
  swift_beginAccess((char *)v3 + qword_10040C7A8, v115, 0LL, 0LL);
  uint64_t v46 = *v45;
  if (*(void *)(*v45 + 16LL))
  {
    swift_bridgeObjectRetain(*v45);
    unint64_t v47 = sub_1003278A0((uint64_t)v104);
    if ((v48 & 1) != 0)
    {
      unint64_t v49 = v47;
      uint64_t v50 = *(unsigned int *)(v46 + 36);
      swift_bridgeObjectRelease(v46);
      uint64_t v51 = *v45;
      uint64_t v52 = sub_100058CD0( 0LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
      uint64_t v53 = v7[14];
      swift_bridgeObjectRetain(v51);
      __int128 v54 = *((_OWORD *)v7 + 6);
      uint64_t v112 = *((_OWORD *)v7 + 5);
      uint64_t v113 = v54;
      uint64_t v114 = v53;
      uint64_t v55 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v112);
      unint64_t v56 = sub_100245750();
      Dictionary.subscript.getter(&v105, &aBlock, v49, v50, 0LL, v51, v52, v55, v56);
      swift_bridgeObjectRelease(v51);

      if (v109 >> 62 != 3 || (_BYTE)v111 || v109 != 0xC000000000000000LL || v107 | aBlock | v108 | v110)
      {
        sub_10023EC24(aBlock, v107, v108, v109, v110, v111);
      }

      else
      {
        swift_beginAccess(v45, &v112, 33LL, 0LL);
        uint64_t v57 = type metadata accessor for Dictionary(0LL, v52, v55, v56);
        Dictionary.remove(at:)(&v105, &aBlock, v49, v50, 0LL, v57);
        swift_endAccess(&v112);
        sub_10023EC24(aBlock, v107, v108, v109, v110, v111);
      }
    }

    else
    {
      swift_bridgeObjectRelease(v46);
    }
  }

uint64_t sub_10023344C( uint64_t a1, char a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v90 = a7;
  uint64_t v91 = a8;
  uint64_t v88 = a5;
  uint64_t v89 = a6;
  uint64_t v93 = a4;
  int v92 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = &v78[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = &v78[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  swift_beginAccess(a1 + 16, v97, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    uint64_t v86 = v15;
    uint64_t v87 = v12;
    uint64_t v84 = result;
    uint64_t v85 = v16;
    uint64_t v83 = a1;
    uint64_t v82 = a9;
    id v81 = v14;
    v80  = v18;
    if ((a2 & 1) != 0)
    {
      uint64_t v20 = sub_10022F774((uint64_t (*)(void))sub_1002B35D8);
      if (v20)
      {
        uint64_t v21 = v20;
        sub_100300968(v93);
        swift_release(v21);
      }

      uint64_t v22 = v93;
      unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc(22LL, -1LL);
        uint64_t v26 = swift_slowAlloc(64LL, -1LL);
        aBlock[0]  = v26;
        *(_DWORD *)uint64_t v25 = 136315394;
        id v27 = [v22 uniqueIdentifier];
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        unint64_t v30 = v29;

        unint64_t v94 = (void *)sub_10000235C(v28, v30, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, aBlock);

        *(void *)&double v31 = swift_bridgeObjectRelease(v30).n128_u64[0];
        *(_WORD *)(v25 + 12)  = 2080;
        id v32 = objc_msgSend(v22, "peerAddress", v31);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v34 = v33;

        uint64_t v35 = WiFiAddress.description.getter(v34 & 0xFFFFFFFFFFFFLL);
        unint64_t v37 = v36;
        unint64_t v94 = (void *)sub_10000235C(v35, v36, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, aBlock);

        swift_bridgeObjectRelease(v37);
        _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Successfully updated traffic registration options for %s to %s",  (uint8_t *)v25,  0x16u);
        swift_arrayDestroy(v26, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v26, -1LL, -1LL);
        swift_slowDealloc(v25, -1LL, -1LL);
      }

      else
      {
      }

      goto LABEL_25;
    }

    int v38 = v92;
    uint64_t v39 = sub_10022F774((uint64_t (*)(void))sub_1002B35D8);
    uint64_t v40 = v39;
    if (v38 == 1)
    {
      if (v39)
      {
        sub_1003010B0(v93);
LABEL_13:
        swift_release(v40);
      }
    }

    else if (v39)
    {
      sub_1003022E8(v93);
      goto LABEL_13;
    }

    unint64_t v41 = v93;
    char v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      int v44 = v92;
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = swift_slowAlloc(96LL, -1LL);
      aBlock[0]  = v79;
      *(_DWORD *)uint64_t v45 = 136315650;
      if (v44 == 1) {
        uint64_t v46 = 7628147LL;
      }
      else {
        uint64_t v46 = 0x64657261656C63LL;
      }
      if (v44 == 1) {
        unint64_t v47 = 0xE300000000000000LL;
      }
      else {
        unint64_t v47 = 0xE700000000000000LL;
      }
      unint64_t v94 = (void *)sub_10000235C(v46, v47, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, aBlock);
      *(void *)&double v48 = swift_bridgeObjectRelease(v47).n128_u64[0];
      *(_WORD *)(v45 + 12)  = 2080;
      id v49 = objc_msgSend(v41, "uniqueIdentifier", v48);
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      unint64_t v52 = v51;

      unint64_t v94 = (void *)sub_10000235C(v50, v52, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, aBlock);

      *(void *)&double v53 = swift_bridgeObjectRelease(v52).n128_u64[0];
      *(_WORD *)(v45 + 22)  = 2080;
      id v54 = objc_msgSend(v41, "peerAddress", v53);
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v56 = v55;

      uint64_t v57 = WiFiAddress.description.getter(v56 & 0xFFFFFFFFFFFFLL);
      unint64_t v59 = v58;
      unint64_t v94 = (void *)sub_10000235C(v57, v58, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, aBlock);

      swift_bridgeObjectRelease(v59);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Successfully %s traffic registration for %s to %s",  (uint8_t *)v45,  0x20u);
      uint64_t v60 = v79;
      swift_arrayDestroy(v79, 3LL, &type metadata for Any[8]);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
    }

LABEL_25:
    uint64_t v62 = v90;
    uint64_t v61 = v91;
    uint64_t v63 = v89;
    uint64_t v64 = v88;
    uint64_t v65 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    uint64_t v66 = swift_allocObject(&unk_1003F2D18, 89LL, 7LL);
    *(void *)(v66 + 16)  = v64;
    *(void *)(v66 + 24)  = v63;
    *(void *)(v66 + 32)  = v62;
    *(void *)(v66 + 40)  = v61;
    uint64_t v67 = v83;
    *(void *)(v66 + 48)  = v82;
    *(void *)(v66 + 56)  = v67;
    uint64_t v68 = v93;
    *(void *)(v66 + 64)  = v93;
    *(_BYTE *)(v66 + 72)  = v92;
    *(void *)(v66 + 80)  = 0LL;
    *(_BYTE *)(v66 + 88)  = 0;
    aBlock[4]  = (uint64_t)sub_100245AD0;
    uint64_t v96 = v66;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = (uint64_t)sub_1000021F0;
    aBlock[3]  = (uint64_t)&unk_1003F2D30;
    uint64_t v69 = _Block_copy(aBlock);
    id v70 = v68;
    id v71 = v65;
    swift_retain();
    uint64_t v72 = sub_10023EC00(0LL, 0);
    uint64_t v73 = v80;
    static DispatchQoS.unspecified.getter(v72);
    unint64_t v94 = _swiftEmptyArrayStorage;
    uint64_t v74 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v75 = sub_100002274((uint64_t *)&unk_1004052A0);
    uint64_t v76 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v77 = v81;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v94, v75, v76, v11, v74);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v73, v77, v69);
    _Block_release(v69);
    swift_release(v84);

    sub_10023ECD8(0LL, 0);
    (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v77, v11);
    (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v73, v86);
    return swift_release(v96);
  }

  return result;
}

uint64_t sub_100233EEC( uint64_t a1, void *a2, unsigned int a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = a1 + 16;
  swift_beginAccess(a1 + 16, v54, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v17);
  if (!result) {
    return result;
  }
  uint64_t v19 = result;
  unsigned int v47 = a3;
  uint64_t v48 = a4;
  uint64_t v20 = (void *)swift_allocObject(&unk_1003F2D68, 56LL, 7LL);
  v20[2]  = a6;
  v20[3]  = a7;
  void v20[4] = a8;
  v20[5]  = a9;
  v20[6]  = a10;
  uint64_t v49 = v19;
  uint64_t v21 = (void *)(v19 + qword_10040C7A8);
  swift_beginAccess(v19 + qword_10040C7A8, v53, 33LL, 0LL);
  uint64_t v22 = (void *)swift_allocObject(&unk_1003F2D90, 72LL, 7LL);
  v22[2]  = a6;
  v22[3]  = a7;
  v22[4]  = a8;
  v22[5]  = a9;
  v22[6]  = a10;
  v22[7]  = sub_1002474A4;
  char v42 = v20;
  v22[8]  = v20;
  id v23 = a2;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v21);
  *(void *)&v51[0]  = *v21;
  uint64_t v24 = *(void *)&v51[0];
  *uint64_t v21 = 0x8000000000000000LL;
  uint64_t v46 = v23;
  unint64_t v50 = sub_1003278A0((uint64_t)v23);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = (v25 & 1) == 0;
  Swift::Int v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v41);
    __break(1u);
    return result;
  }

  char v29 = v25;
  uint64_t v30 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  v55[0]  = a6;
  v55[1]  = a7;
  v55[2]  = a8;
  v55[3]  = a9;
  v55[4]  = a10;
  double v31 = (void *)_s16P2PActivityStateOMa(255LL, (uint64_t)v55);
  unint64_t v32 = sub_100245750();
  uint64_t v41 = v30;
  type metadata accessor for _NativeDictionary(0LL, v30, v31, v32);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v28))
  {
    unint64_t v50 = sub_1003278A0((uint64_t)v46);
    if ((v29 & 1) != (v33 & 1)) {
      goto LABEL_11;
    }
  }

  uint64_t v34 = *v21;
  *uint64_t v21 = *(void *)&v51[0];
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = *v21;
  if ((v29 & 1) != 0)
  {
    swift_bridgeObjectRetain(v35);
  }

  else
  {
    uint64_t v36 = swift_bridgeObjectRetain(v35);
    uint64_t v37 = v22[6];
    *(_OWORD *)isUniquea  = *((_OWORD *)v22 + 2);
    __int128 v45 = *((_OWORD *)v22 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v22[7])(v55, v36);
    v51[0]  = v45;
    v51[1]  = *(_OWORD *)isUniquea;
    uint64_t v52 = v37;
    uint64_t v38 = _s16P2PActivityStateOMa(0LL, (uint64_t)v51);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v38 - 8) + 32LL))(v51, v55, v38);
    v55[0]  = v46;
    id v39 = v46;
    _NativeDictionary._insert(at:key:value:)(v50, v55, v51, v35, v30, v31, v32);
  }

  swift_bridgeObjectRelease(v35);
  uint64_t v40 = sub_10022F420(v47, v48, a5 & 1, v31);
  swift_endAccess(v53);

  sub_100232CA4(v46, v40, 0LL);
  swift_release(v22);
  swift_release(v42);
  return swift_release(v49);
}

uint64_t sub_1002341FC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void (*v78)(id *__return_ptr, uint64_t);
  uint64_t v79;
  uint64_t v80;
  id v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t result;
  BOOL v85;
  void *v86;
  id v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t WitnessTable;
  uint64_t v95;
  int v96;
  void *v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  id v101;
  id v102;
  void v103[6];
  uint64_t v104;
  id v105;
  void *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  void *v111;
  uint64_t (*v112)(uint64_t *);
  int v113;
  id *v114;
  id v115;
  void *v116;
  char v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  id v121[3];
  char v122[24];
  id v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v5 = v4;
  uint64_t v116 = a2;
  uint64_t v7 = *v4;
  uint64_t v8 = sub_10022F7BC((char)[a1 options], a3, a4);
  uint64_t v10 = v9;
  int v12 = v11 & 1;
  id v13 = [a1 uniqueIdentifier];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceUniversalControl);
  uint64_t v16 = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  if (v14 == v17 && v16 == v18)
  {

    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  else
  {
    uint64_t v20 = v18;
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0LL);

    swift_bridgeObjectRelease(v16);
    *(void *)&double v22 = swift_bridgeObjectRelease(v20).n128_u64[0];
    if ((v21 & 1) == 0) {
      goto LABEL_10;
    }
  }

  id v23 = objc_msgSend(a1, "peerAddress", v22);
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v25 = v24;

  uint64_t v26 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
  if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v25 & 0xFFFFFFFFFFFFLL,  *v26 | ((unint64_t)*(unsigned int *)(v26 + 1) << 16)))
  {
    uint64_t v123 = 0LL;
    v8((uint64_t *)&v123);
    uint64_t v27 = (uint64_t)v8;
    uint64_t v28 = v10;
    return sub_100245908(v27, v28);
  }

void sub_100234B8C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = *(void **)a1;
    uint64_t v18 = 0LL;
    uint64_t v19 = v8;
    v16[2]  = a2;
    v16[3]  = v9;
    v16[4]  = a3;
    v16[5]  = a4;
    v16[6]  = a5;
    char v17 = a6 & 1;
    id v10 = v9;
    uint64_t v11 = sub_100002274(&qword_10040CD40);
    uint64_t v12 = sub_100002274((uint64_t *)&unk_10040DD00);
    unint64_t v13 = sub_1002463D8();
    uint64_t v15 = sub_100302E9C( (void (*)(char *, char *))sub_1002463B0,  (uint64_t)v16,  v11,  v12,  (uint64_t)&type metadata for Never,  v13,  (uint64_t)&protocol witness table for Never,  v14);

    *a7  = v15;
  }

char *sub_100234C8C@<X0>( char *a1@<X1>, char *a2@<X2>, _BYTE *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X8>)
{
  if ((static NSObject.== infix(_:_:)( *(void *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection],  *(void *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection]) & 1) != 0 && (*a3 & 1) == 0)
  {
    *a3  = 1;
    *(void *)a7  = a1;
    *(void *)(a7 + 8)  = a4;
    *(void *)(a7 + 16)  = a5;
    *(_BYTE *)(a7 + 24)  = a6 & 1;
    uint64_t v15 = a1;
    return (char *)sub_100245900(a4, a5);
  }

  else
  {
    *(void *)a7  = a2;
    *(void *)(a7 + 8)  = NANBitmap.Channel.operatingClass.getter;
    *(void *)(a7 + 16)  = 0LL;
    *(_BYTE *)(a7 + 24)  = 0;
    return a2;
  }

void sub_100234D6C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return;
  }
  sub_1000696B4(0, v1, 0);
  uint64_t v4 = sub_100303870(a1);
  uint64_t v5 = 0LL;
  uint64_t v6 = a1 + 64;
  int64_t v23 = v1;
  int v24 = v3;
  uint64_t v25 = a1 + 64;
  while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v9 = (unint64_t)v4 >> 6;
    if (*(_DWORD *)(a1 + 36) != v3) {
      goto LABEL_26;
    }
    uint64_t v26 = v5;
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8 * v4);
    id v11 = *(id *)(*(void *)(a1 + 48) + 8 * v4);
    swift_bridgeObjectRetain(v10);
    id v12 = [v11 uniqueIdentifier];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v10);

    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      sub_1000696B4(v15 > 1, v16 + 1, 1);
    }
    _swiftEmptyArrayStorage[2]  = v16 + 1;
    char v17 = &_swiftEmptyArrayStorage[2 * v16];
    v17[4]  = v27;
    v17[5]  = v14;
    int64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
    if (v4 >= v7) {
      goto LABEL_27;
    }
    uint64_t v6 = a1 + 64;
    uint64_t v18 = *(void *)(v25 + 8 * v9);
    if ((v18 & (1LL << v4)) == 0) {
      goto LABEL_28;
    }
    int v3 = v24;
    if (*(_DWORD *)(a1 + 36) != v24) {
      goto LABEL_29;
    }
    unint64_t v19 = v18 & (-2LL << (v4 & 0x3F));
    if (v19)
    {
      int64_t v7 = __clz(__rbit64(v19)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v8 = v23;
    }

    else
    {
      unint64_t v20 = v9 + 1;
      unint64_t v21 = (unint64_t)(v7 + 63) >> 6;
      int64_t v8 = v23;
      if (v9 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v25 + 8 * v20);
        if (!v22)
        {
          unint64_t v20 = v9 + 2;
          if (v9 + 2 >= v21) {
            goto LABEL_4;
          }
          unint64_t v22 = *(void *)(v25 + 8 * v20);
          if (!v22)
          {
            while (v21 - 3 != v9)
            {
              unint64_t v22 = *(void *)(a1 + 88 + 8 * v9++);
              if (v22)
              {
                unint64_t v20 = v9 + 2;
                goto LABEL_17;
              }
            }

            goto LABEL_4;
          }
        }

uint64_t sub_100234FD8(void *a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = swift_allocObject(&unk_1003F3038, 32LL, 7LL);
  v140  = a3;
  *(void *)(v10 + 16)  = a3;
  *(void *)(v10 + 24)  = a4;
  v142  = v4;
  id v11 = (void *)((char *)v4 + qword_10040C7A8);
  swift_beginAccess((char *)v4 + qword_10040C7A8, v151, 32LL, 0LL);
  uint64_t v12 = *v11;
  uint64_t v145 = a1;
  uint64_t v13 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v14 = *(void *)(v9 + 112);
  swift_retain_n(a4, 2LL);
  id v15 = a1;
  __int128 v16 = *(_OWORD *)(v9 + 80);
  __int128 v17 = *(_OWORD *)(v9 + 96);
  uint64_t v18 = v13;
  v143[0]  = v16;
  v143[1]  = v17;
  v144  = v14;
  uint64_t v19 = _s16P2PActivityStateOMa(0LL, (uint64_t)v143);
  unint64_t v20 = sub_100245750();
  Dictionary.subscript.getter(&v145, v12, v18, v19);

  if (v148 >> 8 != 0xFFFFFFFF)
  {
    v152  = v146;
    uint64_t v153 = v147;
    unint64_t v154 = v148;
    v155  = v149;
    unsigned __int8 v156 = v150;
    swift_endAccess(v151);
    swift_release(a4);
    sub_10022CF6C();
    LODWORD(v140)  = v37;
    __int128 v38 = v152;
    uint64_t v39 = v11;
    uint64_t v41 = v153;
    unint64_t v40 = v154;
    uint64_t v42 = v155;
    v141  = v10;
    unsigned __int8 v43 = v156;
    v146  = v152;
    uint64_t v147 = v153;
    unint64_t v148 = v154;
    uint64_t v149 = v155;
    v150  = v156;
    v151[0]  = v15;
    swift_beginAccess(v39, v143, 33LL, 0LL);
    id v44 = v15;
    sub_10023EB4C(v38, *((uint64_t *)&v38 + 1), v41, v40, v42, v43);
    uint64_t v45 = type metadata accessor for Dictionary(0LL, v18, v19, v20);
    Dictionary.subscript.setter(&v146, v151, v45);
    swift_endAccess(v143);
    sub_100232CA4(v44, v140, 0);
    swift_release(v141);
    return sub_10023EC24(v38, *((uint64_t *)&v38 + 1), v41, v40, v42, v43);
  }

  uint64_t v139 = a4;
  swift_endAccess(v151);
  id v21 = [v15 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  unint64_t v22 = v15;
  uint64_t v24 = v23;

  uint64_t v25 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
  if (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v24 & 0xFFFFFFFFFFFFLL,  *v25 | ((unint64_t)*(unsigned int *)(v25 + 1) << 16)))
  {
    swift_release(v139);
    id v47 = v22;
    id v48 = a2;
    id v49 = v47;
    id v50 = v48;
    unint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      v141  = v10;
      uint64_t v54 = (void *)swift_slowAlloc(8LL, -1LL);
      v142  = (void *)swift_slowAlloc(64LL, -1LL);
      *(void *)&v152  = v142;
      *(_DWORD *)uint64_t v53 = 138412802;
      *(void *)&v146  = v50;
      id v55 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);
      *uint64_t v54 = v50;

      *(_WORD *)(v53 + 12)  = 2080;
      id v56 = [v49 uniqueIdentifier];
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      unint64_t v59 = v58;

      *(void *)&v146  = sub_10000235C(v57, v59, (uint64_t *)&v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);

      *(void *)&double v60 = swift_bridgeObjectRelease(v59).n128_u64[0];
      *(_WORD *)(v53 + 22)  = 2080;
      id v61 = objc_msgSend(v49, "peerAddress", v60);
      WiFiMACAddress.wifiAddress.getter();
      uint64_t v63 = v62;

      uint64_t v64 = WiFiAddress.description.getter(v63 & 0xFFFFFFFFFFFFLL);
      unint64_t v66 = v65;
      *(void *)&v146  = sub_10000235C(v64, v65, (uint64_t *)&v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);

      swift_bridgeObjectRelease(v66);
      _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "%@ failed to clear traffic registration for %s to %s because invalid peer address",  (uint8_t *)v53,  0x20u);
      uint64_t v67 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v54, 1LL, v67);
      uint64_t v10 = v141;
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_arrayDestroy(v142, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v142, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v92 = sub_1000033FC();
    uint64_t v93 = swift_allocError(&type metadata for WiFiError, v92, 0LL, 0LL);
    *(_OWORD *)uint64_t v94 = xmmword_10033A940;
    *(_BYTE *)(v94 + 16)  = 1;
    sub_10022C754(v93, (void (*)(id *))sub_100247464, v10, 1);
    swift_errorRelease(v93);
    uint64_t v95 = v10;
    return swift_release(v95);
  }

  uint64_t v26 = v19;
  uint64_t v27 = v18;
  id v138 = v22;
  id v28 = [v22 uniqueIdentifier];
  uint64_t v29 = AWDLTrafficRegistrationServiceAssistedDiscovery;
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v32 = v31;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v35 = v33;
  v137  = a2;
  if (v30 == v34 && v32 == v33)
  {

    swift_bridgeObjectRelease_n(v32, 2LL);
    uint64_t v36 = v10;
  }

  else
  {
    char v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0LL);

    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v35);
    uint64_t v36 = v10;
    if ((v68 & 1) == 0)
    {
      id v115 = v138;
      uint64_t v116 = v137;
      id v117 = v115;
      uint64_t v118 = v116;
      uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
      os_log_type_t v120 = static os_log_type_t.error.getter(v119);
      if (os_log_type_enabled(v119, v120))
      {
        v121  = swift_slowAlloc(22LL, -1LL);
        v122  = (void *)swift_slowAlloc(8LL, -1LL);
        v142  = (void *)swift_slowAlloc(32LL, -1LL);
        *(void *)&v152  = v142;
        *(_DWORD *)v121  = 138412546;
        *(void *)&v146  = v118;
        v141  = v36;
        uint64_t v123 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);
        void *v122 = v118;

        *(_WORD *)(v121 + 12)  = 2080;
        id v124 = [v117 uniqueIdentifier];
        uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
        unint64_t v127 = v126;

        uint64_t v36 = v141;
        *(void *)&v146  = sub_10000235C(v125, v127, (uint64_t *)&v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);

        swift_bridgeObjectRelease(v127);
        _os_log_impl( (void *)&_mh_execute_header,  v119,  v120,  "%@ failed to clear traffic registration for %s because the peer address was empty; return success to maintain compatibility",
          (uint8_t *)v121,
          0x16u);
        uint64_t v128 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v122, 1LL, v128);
        swift_slowDealloc(v122, -1LL, -1LL);
        swift_arrayDestroy(v142, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v142, -1LL, -1LL);
        swift_slowDealloc(v121, -1LL, -1LL);
      }

      else
      {
      }

      v130  = v139;
      goto LABEL_27;
    }
  }

  v141  = v36;
  uint64_t v69 = v27;
  uint64_t v70 = NANBitmap.Channel.operatingClass.getter(*v11);
  *(void *)&v152  = v70;
  __chkstk_darwin();
  id v71 = v138;
  v134[2]  = v138;
  uint64_t v72 = type metadata accessor for Dictionary.Keys(0LL, v69, v26, v20);
  swift_bridgeObjectRetain(v70);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v72);
  uint64_t v74 = Sequence.filter(_:)(sub_10024631C, v134, v72, WitnessTable);
  *(void *)&v152  = v74;
  uint64_t v75 = sub_100002274(&qword_10040CC10);
  uint64_t v76 = swift_getWitnessTable(&protocol conformance descriptor for [A], v75);
  if ((Collection.isEmpty.getter(v75, v76) & 1) != 0)
  {
    swift_bridgeObjectRelease(v74);
    id v77 = v71;
    uint64_t v78 = v137;
    id v79 = v77;
    v80  = v78;
    id v81 = (os_log_s *)Logger.logObject.getter(v80);
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = swift_slowAlloc(22LL, -1LL);
      v142  = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v84 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v152  = v84;
      *(_DWORD *)uint64_t v83 = 136315394;
      id v85 = [v79 uniqueIdentifier];
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      unint64_t v88 = v87;

      *(void *)&v146  = sub_10000235C(v86, v88, (uint64_t *)&v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);

      swift_bridgeObjectRelease(v88);
      *(_WORD *)(v83 + 12)  = 2112;
      *(void *)&v146  = v80;
      uint64_t v89 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);
      uint64_t v90 = v142;
      void *v142 = v80;

      _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Ignoring request to clear all traffic registrations for %s from %@ because none were previously registered",  (uint8_t *)v83,  0x16u);
      uint64_t v91 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v90, 1LL, v91);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_arrayDestroy(v84, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v84, -1LL, -1LL);
      swift_slowDealloc(v83, -1LL, -1LL);
    }

    else
    {
    }

    v129  = v139;
    v140(0LL);
    swift_release(v141);
    uint64_t v95 = v129;
    return swift_release(v95);
  }

  v136  = 0LL;
  uint64_t v96 = v142;
  id v97 = v71;
  swift_bridgeObjectRetain_n(v74, 2LL);
  id v98 = v137;
  id v99 = v97;
  uint64_t v100 = v98;
  uint64_t v101 = (void *)Logger.logObject.getter(v100);
  int v102 = static os_log_type_t.default.getter();
  id v138 = v101;
  if (os_log_type_enabled((os_log_t)v101, (os_log_type_t)v102))
  {
    uint64_t v103 = swift_slowAlloc(32LL, -1LL);
    v137  = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v104 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v152  = v104;
    *(_DWORD *)uint64_t v103 = 134218498;
    int v135 = v102;
    if ((unint64_t)v74 >> 62)
    {
      if (v74 < 0) {
        v133  = v74;
      }
      else {
        v133  = v74 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v74);
      v105  = _CocoaArrayWrapper.endIndex.getter(v133);
      swift_bridgeObjectRelease(v74);
    }

    else
    {
      v105  = *(void *)((v74 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v74);
    *(void *)&v146  = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);
    *(void *)&double v106 = swift_bridgeObjectRelease(v74).n128_u64[0];
    *(_WORD *)(v103 + 12)  = 2080;
    id v107 = objc_msgSend(v99, "uniqueIdentifier", v106, v103 + 14);
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v110  = v109;

    *(void *)&v146  = sub_10000235C(v108, v110, (uint64_t *)&v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);

    swift_bridgeObjectRelease(v110);
    *(_WORD *)(v103 + 22)  = 2112;
    *(void *)&v146  = v100;
    uint64_t v111 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, (char *)&v146 + 8);
    uint64_t v112 = v137;
    void *v137 = v100;

    id v113 = v138;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v138,  (os_log_type_t)v135,  "Clearing all (%ld total) traffic registrations for %s because %@ cleared with empty peer address",  (uint8_t *)v103,  0x20u);
    uint64_t v114 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v112, 1LL, v114);
    swift_slowDealloc(v112, -1LL, -1LL);
    swift_arrayDestroy(v104, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v104, -1LL, -1LL);
    swift_slowDealloc(v103, -1LL, -1LL);

    uint64_t v96 = v142;
  }

  else
  {

    swift_bridgeObjectRelease_n(v74, 2LL);
  }

  v130  = v139;
  *(void *)&v152  = v74;
  v131  = swift_getWitnessTable(&protocol conformance descriptor for [A], v75);
  Sequence.forEach(_:)(sub_100246338, v96, v75, v131);
  __n128 v132 = swift_bridgeObjectRelease(v74);
  uint64_t v36 = v141;
LABEL_27:
  ((void (*)(void, __n128))v140)(0LL, v132);
  swift_release(v36);
  uint64_t v95 = v130;
  return swift_release(v95);
}

uint64_t sub_100235EAC(id *a1, void *a2)
{
  id v3 = [*a1 uniqueIdentifier];
  id v4 = [a2 uniqueIdentifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  if (v5 == v8 && v7 == v9)
  {
    char v12 = 1;
    uint64_t v11 = v7;
  }

  else
  {
    uint64_t v11 = v9;
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
  }

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v11);

  return v12 & 1;
}

uint64_t sub_100235F80(void **a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  id v3 = *a1;
  id v4 = (void *)((char *)a2 + qword_10040C7A8);
  swift_beginAccess((char *)a2 + qword_10040C7A8, v60, 32LL, 0LL);
  uint64_t v54 = *v4;
  uint64_t v67 = v3;
  uint64_t v5 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v7 = v2[10];
  uint64_t v6 = v2[11];
  uint64_t v8 = v2[12];
  uint64_t v9 = v2[13];
  uint64_t v10 = v2[14];
  id v11 = v3;
  uint64_t v48 = v6;
  uint64_t v49 = v7;
  *(void *)&__int128 v57 = v7;
  *((void *)&v57 + 1)  = v6;
  uint64_t v12 = v8;
  *(void *)&__int128 v58 = v8;
  *((void *)&v58 + 1)  = v9;
  uint64_t v59 = v10;
  uint64_t v13 = _s16P2PActivityStateOMa(0LL, (uint64_t)&v57);
  unint64_t v14 = sub_100245750();
  uint64_t v15 = v54;
  unint64_t v53 = v14;
  uint64_t v55 = v5;
  Dictionary.subscript.getter(&v67, v15, v5, v13);
  unint64_t v51 = v11;

  unint64_t v16 = v64;
  uint64_t v56 = v13;
  if (v64 >> 8 != 0xFFFFFFFF)
  {
    uint64_t v17 = v61;
    uint64_t v18 = v65;
    unsigned __int8 v19 = v66;
    if (v64 >> 62 == 1)
    {
      uint64_t v46 = v62;
      uint64_t v47 = v63;
      swift_endAccess(v60);
      id v20 = v51;
      sub_100245D64(v17, (uint64_t)v20);

      sub_100245F84(v17, v46, v47, v16, v18, v19);
      goto LABEL_6;
    }

    sub_100245F84(v61, v62, v63, v64, v65, v66);
  }

  swift_endAccess(v60);
LABEL_6:
  id v21 = (void *)swift_allocObject(&unk_1003F3060, 56LL, 7LL);
  v21[2]  = v49;
  void v21[3] = v48;
  v21[4]  = v12;
  v21[5]  = v9;
  v21[6]  = v10;
  swift_beginAccess(v4, v60, 33LL, 0LL);
  unint64_t v22 = (void *)swift_allocObject(&unk_1003F3088, 72LL, 7LL);
  v22[2]  = v49;
  v22[3]  = v48;
  v22[4]  = v12;
  v22[5]  = v9;
  v22[6]  = v10;
  v22[7]  = sub_1002474A4;
  v22[8]  = v21;
  id v23 = v51;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v61 = *v4;
  uint64_t v25 = v61;
  *id v4 = 0x8000000000000000LL;
  unint64_t v26 = sub_1003278A0((uint64_t)v23);
  uint64_t v28 = *(void *)(v25 + 16);
  BOOL v29 = (v27 & 1) == 0;
  Swift::Int v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v31 = v26;
  char v32 = v27;
  type metadata accessor for _NativeDictionary(0LL, v55, v56, v53);
  Swift::Bool v33 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v30);
  uint64_t v34 = v61;
  if (v33)
  {
    unint64_t v35 = sub_1003278A0((uint64_t)v23);
    if ((v32 & 1) == (v36 & 1))
    {
      unint64_t v31 = v35;
      goto LABEL_10;
    }

double sub_10023631C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = (void *)((char *)v3 + *a2);
  swift_beginAccess(v7, v25, 0LL, 0LL);
  uint64_t v8 = *v7;
  uint64_t v9 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  uint64_t v10 = *(void *)(v6 + 112);
  __int128 v11 = *(_OWORD *)(v6 + 96);
  v23[0]  = *(_OWORD *)(v6 + 80);
  v23[1]  = v11;
  uint64_t v24 = v10;
  uint64_t v12 = _s16P2PActivityStateOMa(0LL, (uint64_t)v23);
  unint64_t v13 = sub_100245750();
  uint64_t v14 = NANBitmap.Channel.operatingClass.getter(v8);
  *(void *)&v23[0]  = v14;
  uint64_t v15 = type metadata accessor for Dictionary.Keys(0LL, v9, v12, v13);
  swift_bridgeObjectRetain(v14);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v15);
  *(void *)&v23[0]  = Array.init<A>(_:)(v23, v9, v15, WitnessTable);
  id v21 = v3;
  uint64_t v22 = a1;
  uint64_t v17 = sub_100002274(&qword_10040CC10);
  uint64_t v18 = swift_getWitnessTable(&protocol conformance descriptor for [A], v17);
  Sequence.forEach(_:)(a3, &v20, v17, v18);
  *(void *)&double result = swift_bridgeObjectRelease(*(void *)&v23[0]).n128_u64[0];
  return result;
}

uint64_t sub_100236470(void **a1, void *a2, void *a3)
{
  id v4 = (void *)*a2;
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)swift_allocObject(&unk_1003F3740, 56LL, 7LL);
  unint64_t v7 = v4[10];
  v6[2]  = v7;
  unint64_t v46 = v4[11];
  v6[3]  = v46;
  uint64_t v49 = v4[12];
  v6[4]  = v49;
  uint64_t v47 = v4[13];
  v6[5]  = v47;
  uint64_t v45 = v4[14];
  void v6[6] = v45;
  id v8 = v5;
  _StringGuts.grow(_:)(33LL);
  unint64_t v54 = 0xD000000000000019LL;
  unint64_t v55 = 0x80000001003682F0LL;
  id v9 = objc_msgSend(v8, "uniqueIdentifier", swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);
  v10._countAndFlagsBits  = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  object  = v10._object;
  String.append(_:)(v10);

  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits  = 544175136LL;
  v12._object  = (void *)0xE400000000000000LL;
  String.append(_:)(v12);
  id v13 = [v8 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  uint64_t v15 = v14;

  v16._countAndFlagsBits  = WiFiAddress.description.getter(v15 & 0xFFFFFFFFFFFFLL);
  uint64_t v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = (void *)((char *)a2 + qword_10040C7A8);
  swift_beginAccess(v18, v53, 33LL, 0LL);
  unsigned __int8 v19 = (void *)swift_allocObject(&unk_1003F3768, 72LL, 7LL);
  uint64_t v20 = v7;
  v19[2]  = v7;
  v19[3]  = v46;
  v19[4]  = v49;
  v19[5]  = v47;
  v19[6]  = v45;
  v19[7]  = sub_1002474A4;
  v19[8]  = v6;
  unsigned int v43 = v6;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v18);
  *(void *)&v51[0]  = *v18;
  uint64_t v21 = *(void *)&v51[0];
  *uint64_t v18 = 0x8000000000000000LL;
  id v42 = v8;
  unint64_t v59 = sub_1003278A0((uint64_t)v8);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = (v22 & 1) == 0;
  Swift::Int v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }

  char v26 = v22;
  uint64_t v27 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  unint64_t v54 = v7;
  unint64_t v55 = v46;
  uint64_t v20 = v27;
  uint64_t v56 = v49;
  uint64_t v57 = v47;
  uint64_t v58 = v45;
  uint64_t v28 = _s16P2PActivityStateOMa(255LL, (uint64_t)&v54);
  unint64_t v29 = sub_100245750();
  type metadata accessor for _NativeDictionary(0LL, v20, v28, v29);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v25))
  {
    unint64_t v59 = sub_1003278A0((uint64_t)v42);
    if ((v26 & 1) != (v30 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v31 = *v18;
  *uint64_t v18 = *(void *)&v51[0];
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *v18;
  uint64_t v33 = *v18;
  if ((v26 & 1) != 0)
  {
    swift_bridgeObjectRetain(v33);
  }

  else
  {
    uint64_t v34 = swift_bridgeObjectRetain(v33);
    uint64_t v35 = v19[6];
    __int128 v48 = *((_OWORD *)v19 + 2);
    __int128 v50 = *((_OWORD *)v19 + 1);
    ((void (*)(unint64_t *__return_ptr, uint64_t))v19[7])(&v54, v34);
    v51[0]  = v50;
    v51[1]  = v48;
    uint64_t v52 = v35;
    uint64_t v36 = _s16P2PActivityStateOMa(0LL, (uint64_t)v51);
    (*(void (**)(_OWORD *, unint64_t *, uint64_t))(*(void *)(v36 - 8) + 32LL))(v51, &v54, v36);
    unint64_t v54 = (unint64_t)v42;
    id v37 = v42;
    _NativeDictionary._insert(at:key:value:)(v59, &v54, v51, v32, v20, v28, v29);
  }

  swift_bridgeObjectRelease(v32);
  sub_10022D674(a3);
  unsigned int v39 = v38;
  swift_endAccess(v53);

  swift_bridgeObjectRelease(0x80000001003682F0LL);
  sub_100232CA4(v42, v39, 0);
  swift_release(v19);
  return swift_release(v43);
}

uint64_t sub_100236854(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (uint64_t *)&v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v8 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v9 = (void *)*v8;
  *unint64_t v7 = *v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9)  = _dispatchPreconditionTest(_:)(v7);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) != 0)
  {
    char v26 = a1;
    swift_beginAccess((char *)v1 + qword_10040C7A8, v25, 33LL, 0LL);
    uint64_t v12 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    uint64_t v13 = *(void *)(v3 + 112);
    __int128 v14 = *(_OWORD *)(v3 + 96);
    __int128 v31 = *(_OWORD *)(v3 + 80);
    __int128 v32 = v14;
    uint64_t v33 = v13;
    uint64_t v15 = _s16P2PActivityStateOMa(255LL, (uint64_t)&v31);
    unint64_t v16 = sub_100245750();
    uint64_t v17 = type metadata accessor for Dictionary(0LL, v12, v15, v16);
    Dictionary.removeValue(forKey:)(&v26, v17);
    uint64_t result = swift_endAccess(v25);
    unint64_t v18 = *((void *)&v28 + 1);
    if (*((void *)&v28 + 1) >> 8 != 0xFFFFFFFFLL)
    {
      __int128 v19 = v27;
      uint64_t v20 = v28;
      uint64_t v21 = v29;
      unsigned __int8 v22 = v30;
      __int128 v31 = v27;
      __int128 v32 = v28;
      uint64_t v33 = v29;
      unsigned __int8 v34 = v30;
      if (*((void *)&v28 + 1) >> 62 == 1LL)
      {
        id v23 = a1;
        sub_100245F70(v19, *((uint64_t *)&v19 + 1), v20, v18, v21, v22);
        sub_100245D64(v19, (uint64_t)v23);

        sub_100245F84(v19, *((uint64_t *)&v19 + 1), v20, v18, v21, v22);
      }

      sub_10022DBA8();
      return sub_10023EC24(v31, *((uint64_t *)&v31 + 1), v32, *((unint64_t *)&v32 + 1), v33, v34);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100236A64(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v11 = swift_allocObject(&unk_1003F2A20, 24LL, 7LL);
  swift_weakInit(v11 + 16, v1);
  uint64_t v12 = swift_allocObject(&unk_1003F2FE8, 72LL, 7LL);
  *(void *)(v12 + 16)  = *(void *)(v3 + 80);
  *(void *)(v12 + 24)  = *(void *)(v3 + 88);
  *(_OWORD *)(v12 + 32)  = *(_OWORD *)(v3 + 96);
  *(void *)(v12 + 48)  = *(void *)(v3 + 112);
  *(void *)(v12 + 56)  = v11;
  *(void *)(v12 + 64)  = a1;
  aBlock[4]  = sub_100245D50;
  uint64_t v26 = v12;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F3000;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v10;
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v15);
  BOOL v24 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v18 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  uint64_t v19 = v26;
  swift_release(v11);
  return swift_release(v19);
}

uint64_t sub_100236CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + qword_1004109F8);
    *(void *)(result + qword_1004109F8)  = a2;
    swift_bridgeObjectRetain(a2);
    swift_release(v5);
    return swift_bridgeObjectRelease(v6);
  }

  return result;
}

uint64_t sub_100236D40(uint64_t a1)
{
  uint64_t v2 = v1;
  int v4 = a1;
  uint64_t v5 = (void *)*v1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  uint64_t result = __chkstk_darwin();
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v4)
  {
    uint64_t v39 = v11;
    uint64_t v40 = result;
    unint64_t v14 = sub_1000033FC();
    uint64_t v15 = swift_allocError(&type metadata for WiFiError, v14, 0LL, 0LL);
    *(_OWORD *)uint64_t v16 = xmmword_10033A940;
    *(_BYTE *)(v16 + 16)  = 1;
    uint64_t v37 = v6;
    swift_beginAccess((char *)v2 + qword_10040C7B0, v47, 33LL, 0LL);
    uint64_t v36 = v9;
    uint64_t v18 = (void **)v5[10];
    uint64_t v17 = v5[11];
    uint64_t v38 = v7;
    uint64_t v19 = (uint64_t (*)(uint64_t))v5[12];
    uint64_t v20 = (void *)v5[13];
    uint64_t v21 = (uint64_t (*)())v5[14];
    aBlock  = v18;
    uint64_t v42 = v17;
    unsigned int v43 = v19;
    unsigned int v44 = v20;
    uint64_t v45 = v21;
    uint64_t v22 = (void *)_s16P2PActivityStateOMa(0LL, (uint64_t)&aBlock);
    uint64_t v23 = sub_10022F4A0(a1, v15, 1, v22);
    swift_endAccess(v47);
    swift_errorRelease(v15);
    sub_100236D40(v23);
    BOOL v24 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    uint64_t v25 = swift_allocObject(&unk_1003F2A20, 24LL, 7LL);
    swift_weakInit(v25 + 16, v2);
    uint64_t v26 = swift_allocObject(&unk_1003F2F48, 65LL, 7LL);
    *(void *)(v26 + 16)  = v18;
    *(void *)(v26 + 24)  = v17;
    *(void *)(v26 + 32)  = v19;
    *(void *)(v26 + 40)  = v20;
    *(void *)(v26 + 48)  = v21;
    *(void *)(v26 + 56)  = v25;
    *(_BYTE *)(v26 + 64)  = a1;
    uint64_t v45 = sub_100245C60;
    uint64_t v46 = v26;
    aBlock  = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256LL;
    unsigned int v43 = sub_1000021F0;
    unsigned int v44 = &unk_1003F2F60;
    __int128 v27 = _Block_copy(&aBlock);
    id v28 = v24;
    uint64_t v29 = swift_retain();
    static DispatchQoS.unspecified.getter(v29);
    v47[0]  = _swiftEmptyArrayStorage;
    uint64_t v30 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = sub_100002274((uint64_t *)&unk_1004052A0);
    uint64_t v32 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
    unsigned __int8 v34 = v36;
    uint64_t v33 = v37;
    dispatch thunk of SetAlgebra.init<A>(_:)(v47, v31, v32, v37, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v34, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v33);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v40);
    uint64_t v35 = v46;
    swift_release(v25);
    return swift_release(v35);
  }

  return result;
}

uint64_t sub_100237040(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v54 = a5;
  uint64_t v55 = a6;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v56 = &v44[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  swift_beginAccess(a1 + 16, v60, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1 + 16);
  if (!result) {
    return result;
  }
  uint64_t v18 = result;
  uint64_t v45 = v13;
  uint64_t v47 = a1;
  uint64_t v19 = sub_10022F774((uint64_t (*)(void))sub_1002B35D8);
  uint64_t v20 = v19;
  uint64_t v50 = v11;
  uint64_t v51 = v10;
  uint64_t v48 = v15;
  uint64_t v49 = v14;
  uint64_t v46 = a7;
  if (a2 == 1)
  {
    if (v19)
    {
      sub_1003033F4();
LABEL_7:
      uint64_t v19 = swift_release(v20);
    }
  }

  else if (v19)
  {
    sub_1003034C8();
    goto LABEL_7;
  }

  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v23 = 136315138;
    aBlock[0]  = v24;
    if (a2 == 1) {
      uint64_t v25 = 0x65646E6570737573LL;
    }
    else {
      uint64_t v25 = 0x64656D75736572LL;
    }
    if (a2 == 1) {
      unint64_t v26 = 0xE900000000000064LL;
    }
    else {
      unint64_t v26 = 0xE700000000000000LL;
    }
    uint64_t v57 = (void *)sub_10000235C(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, aBlock);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Successfully %s P2P activity", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    uint64_t v27 = v55;
  }

  else
  {

    uint64_t v27 = v55;
  }

  id v28 = v45;
  uint64_t v30 = v53;
  uint64_t v29 = v54;
  uint64_t v31 = v52;
  uint64_t v32 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v33 = swift_allocObject(&unk_1003F2F98, 81LL, 7LL);
  *(void *)(v33 + 16)  = v31;
  *(void *)(v33 + 24)  = v30;
  *(void *)(v33 + 32)  = v29;
  *(void *)(v33 + 40)  = v27;
  uint64_t v34 = v47;
  *(void *)(v33 + 48)  = v46;
  *(void *)(v33 + 56)  = v34;
  *(_BYTE *)(v33 + 64)  = a2;
  *(void *)(v33 + 72)  = 0LL;
  *(_BYTE *)(v33 + 80)  = 0;
  aBlock[4]  = (uint64_t)sub_100245CA4;
  uint64_t v59 = v33;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = (uint64_t)sub_1000021F0;
  aBlock[3]  = (uint64_t)&unk_1003F2FB0;
  uint64_t v35 = _Block_copy(aBlock);
  id v36 = v32;
  swift_retain();
  uint64_t v37 = sub_10023EC00(0LL, 0);
  uint64_t v38 = v56;
  static DispatchQoS.unspecified.getter(v37);
  uint64_t v57 = _swiftEmptyArrayStorage;
  uint64_t v39 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v40 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v41 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v42 = v40;
  uint64_t v43 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v42, v41, v51, v39);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v38, v28, v35);
  _Block_release(v35);
  swift_release(v18);

  sub_10023ECD8(0LL, 0);
  (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v28, v43);
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v38, v49);
  return swift_release(v59);
}

uint64_t sub_1002376A4( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v16);
  if (result)
  {
    uint64_t v18 = result;
    swift_beginAccess(result + qword_10040C7B0, v22, 33LL, 0LL);
    v21[0]  = a5;
    v21[1]  = a6;
    v21[2]  = a7;
    void v21[3] = a8;
    v21[4]  = a9;
    uint64_t v19 = (void *)_s16P2PActivityStateOMa(0LL, (uint64_t)v21);
    uint64_t v20 = sub_10022F420(a2, a3, a4 & 1, v19);
    swift_endAccess(v22);
    sub_100236D40(v20);
    return swift_release(v18);
  }

  return result;
}

uint64_t sub_1002377A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v9 = v6;
  uint64_t v13 = *v9;
  uint64_t v14 = swift_allocObject(a4, 32LL, 7LL);
  *(void *)(v14 + 16)  = a2;
  *(void *)(v14 + 24)  = a3;
  swift_beginAccess((char *)v9 + qword_10040C7B0, v22, 33LL, 0LL);
  uint64_t v15 = *(void *)(v13 + 112);
  swift_retain();
  __int128 v16 = *(_OWORD *)(v13 + 96);
  v20[0]  = *(_OWORD *)(v13 + 80);
  v20[1]  = v16;
  uint64_t v21 = v15;
  uint64_t v17 = _s16P2PActivityStateOMa(0LL, (uint64_t)v20);
  uint64_t v18 = a6(a1, a5, v14, 1LL, v17);
  swift_endAccess(v22);
  swift_release(v14);
  return sub_100236D40(v18);
}

uint64_t sub_100237894(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_beginAccess((char *)v2 + qword_10040C7B0, v12, 33LL, 0LL);
  uint64_t v5 = *(void *)(v4 + 112);
  __int128 v6 = *(_OWORD *)(v4 + 96);
  v10[0]  = *(_OWORD *)(v4 + 80);
  v10[1]  = v6;
  uint64_t v11 = v5;
  _s16P2PActivityStateOMa(0LL, (uint64_t)v10);
  sub_10022D674(a1);
  uint64_t v8 = v7;
  swift_endAccess(v12);
  return sub_100236D40(v8);
}

void sub_100237944(Swift::UInt a1, int a2)
{
  uint64_t v3 = v2;
  int v6 = a2;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v6)
  {
    uint64_t v65 = v12;
    uint64_t v64 = v13;
    __int128 v16 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v17 = swift_allocObject(&unk_1003F2A20, 24LL, 7LL);
    int v66 = a2;
    uint64_t v62 = v9;
    uint64_t v18 = v17;
    swift_weakInit(v17 + 16, v3);
    uint64_t v19 = swift_allocObject(&unk_1003F2A48, 73LL, 7LL);
    uint64_t v71 = v7[10];
    *(void *)(v19 + 16)  = v71;
    uint64_t v70 = v7[11];
    *(void *)(v19 + 24)  = v70;
    uint64_t v69 = v7[12];
    *(void *)(v19 + 32)  = v69;
    uint64_t v68 = v7[13];
    *(void *)(v19 + 40)  = v68;
    uint64_t v67 = v7[14];
    *(void *)(v19 + 48)  = v67;
    *(void *)(v19 + 56)  = v18;
    *(void *)(v19 + 64)  = a1;
    *(_BYTE *)(v19 + 72)  = a2;
    v80  = (uint64_t)sub_100245858;
    uint64_t v81 = v19;
    aBlock  = (uint64_t)_NSConcreteStackBlock;
    uint64_t v77 = 1107296256LL;
    uint64_t v78 = (uint64_t)sub_1000021F0;
    unint64_t v79 = (unint64_t)&unk_1003F2A60;
    uint64_t v20 = _Block_copy(&aBlock);
    Swift::UInt v63 = a1;
    uint64_t v21 = v20;
    id v22 = v16;
    uint64_t v23 = swift_retain();
    static DispatchQoS.unspecified.getter(v23);
    *(void *)&v72[0]  = _swiftEmptyArrayStorage;
    uint64_t v24 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v61 = v24;
    uint64_t v25 = sub_100002274((uint64_t *)&unk_1004052A0);
    uint64_t v60 = v25;
    uint64_t v59 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v72, v25, v59, v8, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v11, v21);
    _Block_release(v21);

    uint64_t v62 = *(void *)(v62 + 8);
    ((void (*)(char *, uint64_t))v62)(v11, v8);
    unint64_t v26 = *(void (**)(char *, uint64_t))(v64 + 8);
    uint64_t v27 = v65;
    v26(v15, v65);
    uint64_t v28 = v81;
    swift_release(v18);
    swift_release(v28);
    uint64_t v29 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    uint64_t v30 = swift_allocObject(&unk_1003F2A20, 24LL, 7LL);
    swift_weakInit(v30 + 16, v3);
    uint64_t v31 = swift_allocObject(&unk_1003F2A98, 80LL, 7LL);
    uint64_t v32 = v70;
    *(void *)(v31 + 16)  = v71;
    *(void *)(v31 + 24)  = v32;
    uint64_t v33 = v68;
    *(void *)(v31 + 32)  = v69;
    *(void *)(v31 + 40)  = v33;
    *(void *)(v31 + 48)  = v67;
    *(void *)(v31 + 56)  = v30;
    *(_BYTE *)(v31 + 64)  = v66;
    *(void *)(v31 + 72)  = v63;
    v80  = (uint64_t)sub_1002458AC;
    uint64_t v81 = v31;
    aBlock  = (uint64_t)_NSConcreteStackBlock;
    uint64_t v77 = 1107296256LL;
    uint64_t v78 = (uint64_t)sub_1000021F0;
    unint64_t v79 = (unint64_t)&unk_1003F2AB0;
    uint64_t v34 = _Block_copy(&aBlock);
    id v35 = v29;
    uint64_t v36 = swift_retain();
    static DispatchQoS.unspecified.getter(v36);
    *(void *)&v72[0]  = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(v72, v60, v59, v8, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v11, v34);
    _Block_release(v34);

    ((void (*)(char *, uint64_t))v62)(v11, v8);
    v26(v15, v27);
    uint64_t v37 = v81;
    swift_release(v30);
    swift_release(v37);
  }

  else
  {
    uint64_t v38 = (char *)v3 + qword_10040C7B8;
    swift_beginAccess((char *)v3 + qword_10040C7B8, v75, 0LL, 0LL);
    uint64_t v39 = *(void *)v38;
    if (*(void *)(*(void *)v38 + 16LL))
    {
      unint64_t v40 = sub_1003278D0(a1);
      if ((v41 & 1) != 0)
      {
        unint64_t v42 = v40;
        uint64_t v43 = *(unsigned int *)(v39 + 36);
        uint64_t v44 = *(void *)v38;
        type metadata accessor for WiFiP2PSPITransactionType(0LL);
        uint64_t v46 = v45;
        uint64_t v47 = v7[14];
        swift_bridgeObjectRetain(v44);
        __int128 v48 = *((_OWORD *)v7 + 6);
        v72[0]  = *((_OWORD *)v7 + 5);
        v72[1]  = v48;
        uint64_t v73 = v47;
        uint64_t v49 = _s16P2PActivityStateOMa(0LL, (uint64_t)v72);
        uint64_t v50 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
        Dictionary.subscript.getter(v74, &aBlock, v42, v43, 0LL, v44, v46, v49, v50);
        swift_bridgeObjectRelease(v44);
        uint64_t v51 = aBlock;
        uint64_t v52 = v77;
        uint64_t v53 = v78;
        unint64_t v54 = v79;
        uint64_t v55 = v80;
        unsigned __int8 v56 = v81;
        if (v79 >> 62 == 3 && !(_BYTE)v81 && v79 == 0xC000000000000000LL && !(v77 | aBlock | v78 | v80))
        {
          swift_beginAccess(v38, v72, 33LL, 0LL);
          uint64_t v57 = type metadata accessor for Dictionary(0LL, v46, v49, v50);
          Dictionary.remove(at:)(v74, &aBlock, v42, v43, 0LL, v57);
          swift_endAccess(v72);
          uint64_t v51 = aBlock;
          uint64_t v52 = v77;
          uint64_t v53 = v78;
          unint64_t v54 = v79;
          uint64_t v55 = v80;
          unsigned __int8 v56 = v81;
        }

        sub_10023EC24(v51, v52, v53, v54, v55, v56);
      }
    }
  }

uint64_t sub_100237EF8( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v83 = a6;
  uint64_t v84 = a7;
  uint64_t v81 = a4;
  uint64_t v82 = a5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v85 = v12;
  uint64_t v86 = v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1 + 16, v95, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    uint64_t v73 = a2;
    uint64_t v78 = v16;
    unint64_t v79 = v15;
    uint64_t v77 = v17;
    uint64_t v76 = v19;
    uint64_t v75 = result;
    uint64_t v74 = a8;
    v80  = a3;
    if (a2 == 16)
    {
      uint64_t v21 = sub_10022F774(sub_1002B3640);
      uint64_t v22 = v21;
      if (a3 == 1)
      {
        if (v21)
        {
          sub_1002E9B2C(16LL);
          uint64_t v21 = swift_release(v22);
        }

        uint64_t v23 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v24 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v23, v24)) {
          goto LABEL_30;
        }
        uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v26 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock  = v26;
        *(_DWORD *)uint64_t v25 = 136315138;
        unint64_t v27 = WiFiP2PSPITransactionType.description.getter(16LL);
        unint64_t v29 = v28;
        uint64_t v93 = (void *)sub_10000235C(v27, v28, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        swift_bridgeObjectRelease(v29);
        uint64_t v30 = "Successfully activated transaction for NAN: %s";
      }

      else
      {
        if (v21)
        {
          sub_1002E9BB4(16LL);
          uint64_t v21 = swift_release(v22);
        }

        uint64_t v23 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v24 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v23, v24)) {
          goto LABEL_30;
        }
        uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v26 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock  = v26;
        *(_DWORD *)uint64_t v25 = 136315138;
        unint64_t v57 = WiFiP2PSPITransactionType.description.getter(16LL);
        unint64_t v59 = v58;
        uint64_t v93 = (void *)sub_10000235C(v57, v58, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        swift_bridgeObjectRelease(v59);
        uint64_t v30 = "Successfully deactivated transaction for NAN: %s";
      }

      _os_log_impl((void *)&_mh_execute_header, v23, v24, v30, v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
LABEL_30:

      uint64_t v32 = 0LL;
      char v38 = 0;
      goto LABEL_31;
    }

    unint64_t v31 = sub_1000033FC();
    uint64_t v32 = swift_allocError(&type metadata for WiFiError, v31, 0LL, 0LL);
    *(_OWORD *)uint64_t v33 = xmmword_10033A940;
    *(_BYTE *)(v33 + 16)  = 1;
    swift_willThrow(v32);
    uint64_t v93 = (void *)v32;
    swift_errorRetain(v32);
    uint64_t v34 = sub_100002274((uint64_t *)&unk_10040C5B0);
    if (swift_dynamicCast(&aBlock, &v93, v34, &type metadata for WiFiError, 0LL))
    {
      if (v89 != 1)
      {
        uint64_t v72 = a1;
        sub_10007030C((uint64_t)aBlock, v88, (char)v89);
        goto LABEL_17;
      }

      if (aBlock == (void **)2)
      {
        swift_errorRelease(v32);
        unint64_t v36 = sub_1000033FC();
        uint64_t v32 = swift_allocError(&type metadata for WiFiError, v36, 0LL, 0LL);
        *(_OWORD *)uint64_t v37 = xmmword_10033A940;
        char v38 = 1;
        *(_BYTE *)(v37 + 16)  = 1;
        swift_errorRelease(v93);
LABEL_31:
        uint64_t v54 = v83;
        uint64_t v53 = v84;
        uint64_t v47 = v73;
        uint64_t v56 = v81;
        uint64_t v55 = v82;
LABEL_32:
        uint64_t v60 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
        uint64_t v61 = swift_allocObject(&unk_1003F2B88, 89LL, 7LL);
        *(void *)(v61 + 16)  = v56;
        *(void *)(v61 + 24)  = v55;
        *(void *)(v61 + 32)  = v54;
        *(void *)(v61 + 40)  = v53;
        *(void *)(v61 + 48)  = v74;
        *(void *)(v61 + 56)  = a1;
        *(void *)(v61 + 64)  = v47;
        *(_BYTE *)(v61 + 72)  = v80;
        *(void *)(v61 + 80)  = v32;
        *(_BYTE *)(v61 + 88)  = v38;
        uint64_t v91 = sub_1002459B8;
        uint64_t v92 = v61;
        aBlock  = _NSConcreteStackBlock;
        unint64_t v88 = 1107296256LL;
        uint64_t v89 = sub_1000021F0;
        uint64_t v90 = &unk_1003F2BA0;
        uint64_t v62 = _Block_copy(&aBlock);
        id v63 = v60;
        swift_retain();
        uint64_t v64 = sub_10023EC00(v32, v38);
        uint64_t v65 = v76;
        static DispatchQoS.unspecified.getter(v64);
        uint64_t v93 = _swiftEmptyArrayStorage;
        uint64_t v66 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v67 = sub_100002274((uint64_t *)&unk_1004052A0);
        uint64_t v68 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v69 = v79;
        uint64_t v70 = v85;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v93, v67, v68, v85, v66);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v65, v69, v62);
        _Block_release(v62);
        swift_release(v75);

        sub_10023ECD8(v32, v38);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v69, v70);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v65, v78);
        return swift_release(v92);
      }
    }

    uint64_t v72 = a1;
LABEL_17:
    swift_errorRelease(v93);
    swift_errorRetain(v32);
    uint64_t v39 = swift_errorRetain(v32);
    unint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v44 = (void **)swift_slowAlloc(64LL, -1LL);
      aBlock  = v44;
      *(_DWORD *)uint64_t v42 = 136315650;
      else {
        uint64_t v45 = 0x6176697463616564LL;
      }
      else {
        unint64_t v46 = 0xEA00000000006574LL;
      }
      uint64_t v93 = (void *)sub_10000235C(v45, v46, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v42 + 12)  = 2080;
      uint64_t v47 = v73;
      unint64_t v48 = WiFiP2PSPITransactionType.description.getter(v73);
      unint64_t v50 = v49;
      uint64_t v93 = (void *)sub_10000235C(v48, v49, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      swift_bridgeObjectRelease(v50);
      *(_WORD *)(v42 + 22)  = 2112;
      swift_errorRetain(v32);
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(v32);
      uint64_t v93 = (void *)v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      *uint64_t v43 = v51;
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Failed to %s transaction %s because %@",  (uint8_t *)v42,  0x20u);
      uint64_t v52 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v43, 1LL, v52);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_arrayDestroy(v44, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);

      a1  = v72;
      uint64_t v53 = v84;
    }

    else
    {

      swift_errorRelease(v32);
      swift_errorRelease(v32);
      a1  = v72;
      uint64_t v53 = v84;
      uint64_t v47 = v73;
    }

    uint64_t v55 = v82;
    uint64_t v54 = v83;
    uint64_t v56 = v81;
    char v38 = 1;
    goto LABEL_32;
  }

  return result;
}

uint64_t sub_100238754( uint64_t a1, int a2, Swift::UInt a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = a6;
  uint64_t v63 = a7;
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  Swift::UInt v65 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v64 = &v52[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = &v52[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  swift_beginAccess(a1 + 16, v69, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    uint64_t v19 = result;
    uint64_t v54 = a1;
    int v59 = a2;
    uint64_t v20 = sub_10022F774((uint64_t (*)(void))sub_1002B35D8);
    uint64_t v21 = v20;
    uint64_t v57 = v12;
    uint64_t v58 = v11;
    uint64_t v56 = v14;
    uint64_t v55 = v15;
    uint64_t v53 = a8;
    if (a2 == 1)
    {
      if (v20)
      {
        sub_10030359C(v65);
        uint64_t v20 = swift_release(v21);
      }

      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, v23)) {
        goto LABEL_12;
      }
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      aBlock[0]  = v25;
      *(_DWORD *)os_log_type_t v24 = 136315138;
      unint64_t v26 = WiFiP2PSPITransactionType.description.getter(v65);
      unint64_t v28 = v27;
      uint64_t v66 = (void *)sub_10000235C(v26, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, aBlock);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully activated transaction for AWDL: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1LL, &type metadata for Any[8]);
      uint64_t v29 = v25;
    }

    else
    {
      if (v20)
      {
        sub_100303718(v65);
        uint64_t v20 = swift_release(v21);
      }

      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, v30)) {
        goto LABEL_12;
      }
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      aBlock[0]  = v31;
      *(_DWORD *)os_log_type_t v24 = 136315138;
      unint64_t v32 = WiFiP2PSPITransactionType.description.getter(v65);
      unint64_t v34 = v33;
      uint64_t v66 = (void *)sub_10000235C(v32, v33, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, aBlock);
      swift_bridgeObjectRelease(v34);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v30,  "Successfully deactivated transaction for AWDL: %s",  v24,  0xCu);
      swift_arrayDestroy(v31, 1LL, &type metadata for Any[8]);
      uint64_t v29 = v31;
    }

    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
LABEL_12:

    uint64_t v35 = v63;
    char v36 = v59;
    uint64_t v38 = v61;
    uint64_t v37 = v62;
    uint64_t v39 = v60;
    unint64_t v40 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    uint64_t v41 = swift_allocObject(&unk_1003F2AE8, 89LL, 7LL);
    *(void *)(v41 + 16)  = v39;
    *(void *)(v41 + 24)  = v38;
    *(void *)(v41 + 32)  = v37;
    *(void *)(v41 + 40)  = v35;
    uint64_t v42 = v54;
    *(void *)(v41 + 48)  = v53;
    *(void *)(v41 + 56)  = v42;
    *(void *)(v41 + 64)  = v65;
    *(_BYTE *)(v41 + 72)  = v36;
    *(void *)(v41 + 80)  = 0LL;
    *(_BYTE *)(v41 + 88)  = 0;
    aBlock[4]  = (uint64_t)sub_1002458BC;
    uint64_t v68 = v41;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = (uint64_t)sub_1000021F0;
    aBlock[3]  = (uint64_t)&unk_1003F2B00;
    uint64_t v43 = _Block_copy(aBlock);
    id v44 = v40;
    swift_retain();
    uint64_t v45 = sub_10023EC00(0LL, 0);
    static DispatchQoS.unspecified.getter(v45);
    uint64_t v66 = _swiftEmptyArrayStorage;
    uint64_t v46 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v47 = sub_100002274((uint64_t *)&unk_1004052A0);
    uint64_t v48 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
    unint64_t v49 = v64;
    uint64_t v50 = v47;
    uint64_t v51 = v58;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v50, v48, v58, v46);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v49, v43);
    _Block_release(v43);
    swift_release(v19);

    sub_10023ECD8(0LL, 0);
    (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v49, v51);
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v17, v56);
    return swift_release(v68);
  }

  return result;
}

uint64_t sub_100238F68( uint64_t a1, Swift::UInt a2, unsigned int a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v21 = a1 + 16;
  swift_beginAccess(a1 + 16, v58, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v21);
  if (!result) {
    return result;
  }
  uint64_t v23 = result;
  unsigned int v51 = a3;
  os_log_type_t v24 = (void *)swift_allocObject(a11, 56LL, 7LL);
  v24[2]  = a6;
  v24[3]  = a7;
  v24[4]  = a8;
  v24[5]  = a9;
  v24[6]  = a10;
  uint64_t v52 = v23;
  uint64_t v25 = (void *)(v23 + qword_10040C7B8);
  swift_beginAccess(v23 + qword_10040C7B8, v57, 33LL, 0LL);
  unint64_t v26 = (void *)swift_allocObject(a12, 72LL, 7LL);
  v26[2]  = a6;
  void v26[3] = a7;
  v26[4]  = a8;
  v26[5]  = a9;
  v26[6]  = a10;
  v26[7]  = a13;
  v26[8]  = v24;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v25);
  Swift::UInt v54 = a2;
  *(void *)&v55[0]  = *v25;
  uint64_t v27 = *(void *)&v55[0];
  *uint64_t v25 = 0x8000000000000000LL;
  unint64_t v53 = sub_1003278D0(a2);
  uint64_t v28 = *(void *)(v27 + 16);
  char v47 = v29;
  BOOL v30 = (v29 & 1) == 0;
  Swift::Int v31 = v28 + v30;
  if (__OFADD__(v28, v30))
  {
    __break(1u);
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v46);
    __break(1u);
    return result;
  }

  type metadata accessor for WiFiP2PSPITransactionType(255LL);
  uint64_t v33 = v32;
  v59[0]  = a6;
  v59[1]  = a7;
  v59[2]  = a8;
  v59[3]  = a9;
  v59[4]  = a10;
  uint64_t v34 = _s16P2PActivityStateOMa(255LL, (uint64_t)v59);
  uint64_t v35 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  uint64_t v46 = v33;
  type metadata accessor for _NativeDictionary(0LL, v33, v34, v35);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v31))
  {
    unint64_t v53 = sub_1003278D0(v54);
    if ((v47 & 1) != (v36 & 1)) {
      goto LABEL_11;
    }
  }

  uint64_t v37 = a5 & 1;
  uint64_t v38 = *v25;
  *uint64_t v25 = *(void *)&v55[0];
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = *v25;
  uint64_t v40 = *v25;
  if ((v47 & 1) != 0)
  {
    swift_bridgeObjectRetain(v40);
    Swift::UInt v41 = v54;
  }

  else
  {
    uint64_t v42 = swift_bridgeObjectRetain(v40);
    uint64_t v43 = v26[6];
    *(_OWORD *)isUniquea  = *((_OWORD *)v26 + 2);
    __int128 v50 = *((_OWORD *)v26 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v26[7])(v59, v42);
    v55[0]  = v50;
    v55[1]  = *(_OWORD *)isUniquea;
    uint64_t v56 = v43;
    uint64_t v44 = _s16P2PActivityStateOMa(0LL, (uint64_t)v55);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v44 - 8) + 32LL))(v55, v59, v44);
    Swift::UInt v41 = v54;
    v59[0]  = v54;
    _NativeDictionary._insert(at:key:value:)(v53, v59, v55, v39, v33, v34, v35);
  }

  swift_bridgeObjectRelease(v39);
  uint64_t v45 = a14(v51, a4, v37, v34);
  swift_endAccess(v57);
  sub_100237944(v41, v45);
  swift_release(v26);
  swift_release(v24);
  return swift_release(v52);
}

uint64_t sub_100239268(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)*v4;
  uint64_t v8 = (void *)swift_allocObject(&unk_1003F33F8, 56LL, 7LL);
  uint64_t v9 = v7[10];
  _OWORD v8[2] = v9;
  uint64_t v10 = v7[11];
  v8[3]  = v10;
  uint64_t v11 = v7[12];
  v8[4]  = v11;
  uint64_t v12 = v7[13];
  v8[5]  = v12;
  uint64_t v13 = v7[14];
  v8[6]  = v13;
  uint64_t v14 = swift_allocObject(&unk_1003F3420, 32LL, 7LL);
  *(void *)(v14 + 16)  = a3;
  *(void *)(v14 + 24)  = a4;
  uint64_t v39 = v14;
  uint64_t v15 = (void *)((char *)v4 + qword_10040C7B8);
  swift_beginAccess((char *)v4 + qword_10040C7B8, v45, 33LL, 0LL);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003F3448, 72LL, 7LL);
  v16[2]  = v9;
  v16[3]  = v10;
  v16[4]  = v11;
  v16[5]  = v12;
  v16[6]  = v13;
  v16[7]  = sub_1002474A4;
  uint64_t v40 = v8;
  v16[8]  = v8;
  swift_retain();
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v15);
  *(void *)&v43[0]  = *v15;
  uint64_t v17 = *(void *)&v43[0];
  *uint64_t v15 = 0x8000000000000000LL;
  unint64_t v41 = sub_1003278D0(a1);
  uint64_t v19 = *(void *)(v17 + 16);
  BOOL v20 = (v18 & 1) == 0;
  Swift::Int v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }

  char v22 = v18;
  type metadata accessor for WiFiP2PSPITransactionType(255LL);
  v46[0]  = v9;
  v46[1]  = v10;
  uint64_t v10 = v23;
  v46[2]  = v11;
  v46[3]  = v12;
  v46[4]  = v13;
  uint64_t v24 = _s16P2PActivityStateOMa(255LL, (uint64_t)v46);
  uint64_t v25 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  type metadata accessor for _NativeDictionary(0LL, v10, v24, v25);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v21))
  {
    unint64_t v41 = sub_1003278D0(a1);
    if ((v22 & 1) != (v26 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v27 = *v15;
  *uint64_t v15 = *(void *)&v43[0];
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *v15;
  uint64_t v29 = *v15;
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRetain(v29);
  }

  else
  {
    uint64_t v30 = swift_bridgeObjectRetain(v29);
    uint64_t v31 = v16[6];
    __int128 v36 = *((_OWORD *)v16 + 2);
    *(_OWORD *)isUniquea  = *((_OWORD *)v16 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v16[7])(v46, v30);
    v43[0]  = *(_OWORD *)isUniquea;
    v43[1]  = v36;
    uint64_t v44 = v31;
    uint64_t v32 = _s16P2PActivityStateOMa(0LL, (uint64_t)v43);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v43, v46, v32);
    v46[0]  = a1;
    _NativeDictionary._insert(at:key:value:)(v41, v46, v43, v28, v10, v24, v25);
  }

  swift_bridgeObjectRelease(v28);
  sub_10022C9A8();
  int v34 = v33;
  swift_endAccess(v45);
  swift_release(v39);
  sub_100237944(a1, v34);
  swift_release(v16);
  return swift_release(v40);
}

uint64_t sub_100239578(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)*v4;
  uint64_t v8 = (void *)swift_allocObject(&unk_1003F3498, 56LL, 7LL);
  uint64_t v9 = v7[10];
  _OWORD v8[2] = v9;
  uint64_t v10 = v7[11];
  v8[3]  = v10;
  uint64_t v11 = v7[12];
  v8[4]  = v11;
  uint64_t v12 = v7[13];
  v8[5]  = v12;
  uint64_t v13 = v7[14];
  v8[6]  = v13;
  uint64_t v14 = swift_allocObject(&unk_1003F34C0, 32LL, 7LL);
  *(void *)(v14 + 16)  = a3;
  *(void *)(v14 + 24)  = a4;
  uint64_t v39 = v14;
  uint64_t v15 = (void *)((char *)v4 + qword_10040C7B8);
  swift_beginAccess((char *)v4 + qword_10040C7B8, v45, 33LL, 0LL);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003F34E8, 72LL, 7LL);
  v16[2]  = v9;
  v16[3]  = v10;
  v16[4]  = v11;
  v16[5]  = v12;
  v16[6]  = v13;
  v16[7]  = sub_100246BF8;
  uint64_t v40 = v8;
  v16[8]  = v8;
  swift_retain();
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v15);
  *(void *)&v43[0]  = *v15;
  uint64_t v17 = *(void *)&v43[0];
  *uint64_t v15 = 0x8000000000000000LL;
  unint64_t v41 = sub_1003278D0(a1);
  uint64_t v19 = *(void *)(v17 + 16);
  BOOL v20 = (v18 & 1) == 0;
  Swift::Int v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }

  char v22 = v18;
  type metadata accessor for WiFiP2PSPITransactionType(255LL);
  v46[0]  = v9;
  v46[1]  = v10;
  uint64_t v10 = v23;
  v46[2]  = v11;
  v46[3]  = v12;
  v46[4]  = v13;
  uint64_t v24 = _s16P2PActivityStateOMa(255LL, (uint64_t)v46);
  uint64_t v25 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  type metadata accessor for _NativeDictionary(0LL, v10, v24, v25);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v21))
  {
    unint64_t v41 = sub_1003278D0(a1);
    if ((v22 & 1) != (v26 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v27 = *v15;
  *uint64_t v15 = *(void *)&v43[0];
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *v15;
  uint64_t v29 = *v15;
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRetain(v29);
  }

  else
  {
    uint64_t v30 = swift_bridgeObjectRetain(v29);
    uint64_t v31 = v16[6];
    __int128 v36 = *((_OWORD *)v16 + 2);
    *(_OWORD *)isUniquea  = *((_OWORD *)v16 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v16[7])(v46, v30);
    v43[0]  = *(_OWORD *)isUniquea;
    v43[1]  = v36;
    uint64_t v44 = v31;
    uint64_t v32 = _s16P2PActivityStateOMa(0LL, (uint64_t)v43);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v43, v46, v32);
    v46[0]  = a1;
    _NativeDictionary._insert(at:key:value:)(v41, v46, v43, v28, v10, v24, v25);
  }

  swift_bridgeObjectRelease(v28);
  sub_10022CF6C();
  int v34 = v33;
  swift_endAccess(v45);
  swift_release(v39);
  sub_100237944(a1, v34);
  swift_release(v16);
  return swift_release(v40);
}

double sub_100239888(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)((char *)v1 + qword_10040C7B8);
  swift_beginAccess((char *)v1 + qword_10040C7B8, v23, 0LL, 0LL);
  uint64_t v5 = *v4;
  type metadata accessor for WiFiP2PSPITransactionType(0LL);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v3 + 112);
  __int128 v9 = *(_OWORD *)(v3 + 96);
  v21[0]  = *(_OWORD *)(v3 + 80);
  v21[1]  = v9;
  uint64_t v22 = v8;
  uint64_t v10 = _s16P2PActivityStateOMa(0LL, (uint64_t)v21);
  uint64_t v11 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  uint64_t v12 = NANBitmap.Channel.operatingClass.getter(v5);
  *(void *)&v21[0]  = v12;
  uint64_t v13 = type metadata accessor for Dictionary.Keys(0LL, v7, v10, v11);
  swift_bridgeObjectRetain(v12);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v13);
  *(void *)&v21[0]  = Array.init<A>(_:)(v21, v7, v13, WitnessTable);
  uint64_t v19 = v1;
  uint64_t v20 = a1;
  uint64_t v15 = sub_100002274(&qword_10040CC20);
  uint64_t v16 = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  Sequence.forEach(_:)(sub_100246E88, &v18, v15, v16);
  *(void *)&double result = swift_bridgeObjectRelease(*(void *)&v21[0]).n128_u64[0];
  return result;
}

uint64_t sub_1002399E4(Swift::UInt *a1, void *a2, void *a3)
{
  uint64_t v4 = (void *)*a2;
  Swift::UInt v63 = *a1;
  Swift::UInt v5 = v63;
  uint64_t v6 = (void *)swift_allocObject(&unk_1003F37E0, 56LL, 7LL);
  Swift::UInt v7 = v4[10];
  v6[2]  = v7;
  unint64_t v52 = v4[11];
  v6[3]  = v52;
  uint64_t v8 = v4[12];
  v6[4]  = v8;
  uint64_t v9 = v4[13];
  v6[5]  = v9;
  uint64_t v10 = v4[14];
  void v6[6] = v10;
  Swift::UInt v58 = 0LL;
  unint64_t v59 = 0xE000000000000000LL;
  v11._countAndFlagsBits  = 0x746361736E617274LL;
  v11._object  = (void *)0xEC000000206E6F69LL;
  String.append(_:)(v11);
  *(void *)&v55[0]  = v5;
  type metadata accessor for WiFiP2PSPITransactionType(0LL);
  unint64_t v13 = v12;
  uint64_t v14 = sub_10000AF70( qword_10040CDB0,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&protocol conformance descriptor for WiFiP2PSPITransactionType);
  unint64_t v48 = v13;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v55, v13, v14);
  unint64_t v49 = v59;
  uint64_t v15 = (void *)((char *)a2 + qword_10040C7B8);
  swift_beginAccess(v15, v57, 33LL, 0LL);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003F3808, 72LL, 7LL);
  Swift::UInt v46 = v7;
  v16[2]  = v7;
  uint64_t v17 = v9;
  unint64_t v18 = v52;
  v16[3]  = v52;
  v16[4]  = v8;
  v16[5]  = v17;
  v16[6]  = v10;
  uint64_t v19 = v10;
  v16[7]  = sub_1002474A4;
  v16[8]  = v6;
  unsigned int v51 = v6;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v15);
  *(void *)&v55[0]  = *v15;
  uint64_t v21 = *(void *)&v55[0];
  *uint64_t v15 = 0x8000000000000000LL;
  unint64_t v54 = sub_1003278D0(v63);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = (v22 & 1) == 0;
  BOOL v25 = __OFADD__(v23, v24);
  Swift::Int v26 = v23 + v24;
  if (v25)
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
    __break(1u);
    return result;
  }

  char v27 = v22;
  Swift::UInt v58 = v46;
  unint64_t v59 = v52;
  uint64_t v60 = v8;
  uint64_t v61 = v17;
  uint64_t v62 = v19;
  Swift::Int v28 = v26;
  Swift::Bool v29 = isUniquelyReferenced_nonNull_native;
  uint64_t v30 = _s16P2PActivityStateOMa(255LL, (uint64_t)&v58);
  uint64_t v31 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  unint64_t v18 = v48;
  type metadata accessor for _NativeDictionary(0LL, v48, v30, v31);
  Swift::Bool v32 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v29, v28);
  uint64_t v33 = *(void *)&v55[0];
  Swift::UInt v34 = v63;
  if (v32)
  {
    unint64_t v54 = sub_1003278D0(v63);
    if ((v27 & 1) != (v35 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v36 = *v15;
  *uint64_t v15 = v33;
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = *v15;
  uint64_t v38 = *v15;
  if ((v27 & 1) != 0)
  {
    swift_bridgeObjectRetain(v38);
  }

  else
  {
    uint64_t v39 = swift_bridgeObjectRetain(v38);
    uint64_t v40 = v31;
    uint64_t v41 = v16[6];
    __int128 v53 = *((_OWORD *)v16 + 1);
    __int128 v47 = *((_OWORD *)v16 + 2);
    ((void (*)(Swift::UInt *__return_ptr, uint64_t))v16[7])(&v58, v39);
    v55[0]  = v53;
    v55[1]  = v47;
    uint64_t v56 = v41;
    uint64_t v42 = _s16P2PActivityStateOMa(0LL, (uint64_t)v55);
    (*(void (**)(_OWORD *, Swift::UInt *, uint64_t))(*(void *)(v42 - 8) + 32LL))(v55, &v58, v42);
    Swift::UInt v58 = v34;
    _NativeDictionary._insert(at:key:value:)(v54, &v58, v55, v37, v48, v30, v40);
  }

  swift_bridgeObjectRelease(v37);
  sub_10022D674(a3);
  int v44 = v43;
  swift_endAccess(v57);
  swift_bridgeObjectRelease(v49);
  sub_100237944(v34, v44);
  swift_release(v16);
  return swift_release(v51);
}

double sub_100239D64()
{
  int64_t v1 = v0;
  uint64_t v2 = *v0;
  swift_beginAccess((char *)v0 + qword_10040C7B0, v32, 33LL, 0LL);
  uint64_t v3 = *(void *)(v2 + 112);
  __int128 v4 = *(_OWORD *)(v2 + 96);
  v30[0]  = *(_OWORD *)(v2 + 80);
  v30[1]  = v4;
  uint64_t v31 = v3;
  uint64_t v5 = _s16P2PActivityStateOMa(0LL, (uint64_t)v30);
  sub_10022DBA8();
  uint64_t v7 = v6;
  swift_endAccess(v32);
  sub_100236D40(v7);
  uint64_t v8 = (void *)((char *)v1 + qword_10040C7A0);
  swift_beginAccess((char *)v1 + qword_10040C7A0, v30, 0LL, 0LL);
  uint64_t v9 = *v8;
  uint64_t v10 = sub_100058CD0(0LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  unint64_t v11 = sub_100245750();
  uint64_t v12 = NANBitmap.Channel.operatingClass.getter(v9);
  v32[0]  = v12;
  uint64_t v13 = type metadata accessor for Dictionary.Keys(0LL, v10, v5, v11);
  swift_bridgeObjectRetain(v12);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v13);
  v32[0]  = Array.init<A>(_:)(v32, v10, v13, WitnessTable);
  uint64_t v15 = sub_100002274(&qword_10040CC10);
  uint64_t v16 = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  Sequence.forEach(_:)(sub_1002457A8, v1, v15, v16);
  swift_bridgeObjectRelease(v32[0]);
  uint64_t v17 = (void *)((char *)v1 + qword_10040C7A8);
  swift_beginAccess((char *)v1 + qword_10040C7A8, v32, 0LL, 0LL);
  v29[0]  = NANBitmap.Channel.operatingClass.getter(*v17);
  swift_bridgeObjectRetain(v29[0]);
  v29[0]  = Array.init<A>(_:)(v29, v10, v13, WitnessTable);
  Sequence.forEach(_:)(sub_1002457C0, v1, v15, v16);
  swift_bridgeObjectRelease(v29[0]);
  unint64_t v18 = (void *)((char *)v1 + qword_10040C7B8);
  swift_beginAccess((char *)v1 + qword_10040C7B8, v29, 0LL, 0LL);
  uint64_t v19 = *v18;
  type metadata accessor for WiFiP2PSPITransactionType(0LL);
  uint64_t v21 = v20;
  uint64_t v22 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  uint64_t v28 = NANBitmap.Channel.operatingClass.getter(v19);
  uint64_t v23 = type metadata accessor for Dictionary.Keys(0LL, v21, v5, v22);
  swift_bridgeObjectRetain(v28);
  uint64_t v24 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v23);
  uint64_t v28 = Array.init<A>(_:)(&v28, v21, v23, v24);
  uint64_t v25 = sub_100002274(&qword_10040CC20);
  uint64_t v26 = swift_getWitnessTable(&protocol conformance descriptor for [A], v25);
  Sequence.forEach(_:)(sub_1002457D8, v1, v25, v26);
  *(void *)&double result = swift_bridgeObjectRelease(v28).n128_u64[0];
  return result;
}

uint64_t sub_10023A074(void **a1, void *a2)
{
  uint64_t v3 = (void *)*a2;
  __int128 v4 = *a1;
  uint64_t v5 = (void *)swift_allocObject(&unk_1003F2DB8, 56LL, 7LL);
  uint64_t v6 = v3[10];
  v5[2]  = v6;
  uint64_t v7 = v3[11];
  v5[3]  = v7;
  uint64_t v8 = v3[12];
  v5[4]  = v8;
  uint64_t v9 = v3[13];
  v5[5]  = v9;
  uint64_t v10 = v3[14];
  v5[6]  = v10;
  unint64_t v11 = (void *)((char *)a2 + qword_10040C7A0);
  swift_beginAccess((char *)a2 + qword_10040C7A0, v43, 33LL, 0LL);
  uint64_t v12 = (void *)swift_allocObject(&unk_1003F2DE0, 72LL, 7LL);
  v12[2]  = v6;
  v12[3]  = v7;
  v12[4]  = v8;
  v12[5]  = v9;
  v12[6]  = v10;
  v12[7]  = sub_1002474A4;
  uint64_t v39 = v5;
  v12[8]  = v5;
  id v13 = v4;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v11);
  *(void *)&v41[0]  = *v11;
  uint64_t v14 = *(void *)&v41[0];
  *unint64_t v11 = 0x8000000000000000LL;
  id v45 = v13;
  unint64_t v40 = sub_1003278A0((uint64_t)v13);
  uint64_t v15 = *(void *)(v14 + 16);
  char v35 = v16;
  BOOL v17 = (v16 & 1) == 0;
  Swift::Int v18 = v15 + v17;
  if (__OFADD__(v15, v17))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }

  uint64_t v19 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  v44[0]  = v6;
  v44[1]  = v7;
  v44[2]  = v8;
  v44[3]  = v9;
  v44[4]  = v10;
  uint64_t v10 = v19;
  uint64_t v20 = _s16P2PActivityStateOMa(255LL, (uint64_t)v44);
  unint64_t v21 = sub_100245750();
  type metadata accessor for _NativeDictionary(0LL, v10, v20, v21);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v18))
  {
    unint64_t v40 = sub_1003278A0((uint64_t)v45);
    if ((v35 & 1) != (v22 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v23 = *v11;
  *unint64_t v11 = *(void *)&v41[0];
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *v11;
  uint64_t v25 = *v11;
  if ((v35 & 1) != 0)
  {
    swift_bridgeObjectRetain(v25);
    uint64_t v26 = v39;
    id v27 = v45;
  }

  else
  {
    uint64_t v28 = swift_bridgeObjectRetain(v25);
    uint64_t v29 = v12[6];
    __int128 v36 = *((_OWORD *)v12 + 2);
    *(_OWORD *)isUniquea  = *((_OWORD *)v12 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v12[7])(v44, v28);
    v41[0]  = *(_OWORD *)isUniquea;
    v41[1]  = v36;
    uint64_t v42 = v29;
    uint64_t v30 = _s16P2PActivityStateOMa(0LL, (uint64_t)v41);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v41, v44, v30);
    id v27 = v45;
    v44[0]  = v45;
    id v31 = v45;
    _NativeDictionary._insert(at:key:value:)(v40, v44, v41, v24, v10, v20, v21);
    uint64_t v26 = v39;
  }

  swift_bridgeObjectRelease(v24);
  sub_10022DBA8();
  unsigned int v33 = v32;
  swift_endAccess(v43);

  sub_10023105C(v27, v33);
  swift_release(v12);
  return swift_release(v26);
}

uint64_t sub_10023A354(void **a1, void *a2)
{
  uint64_t v3 = (void *)*a2;
  __int128 v4 = *a1;
  uint64_t v5 = (void *)swift_allocObject(&unk_1003F2C28, 56LL, 7LL);
  uint64_t v6 = v3[10];
  v5[2]  = v6;
  uint64_t v7 = v3[11];
  v5[3]  = v7;
  uint64_t v8 = v3[12];
  v5[4]  = v8;
  uint64_t v9 = v3[13];
  v5[5]  = v9;
  uint64_t v10 = v3[14];
  v5[6]  = v10;
  unint64_t v11 = (void *)((char *)a2 + qword_10040C7A8);
  swift_beginAccess((char *)a2 + qword_10040C7A8, v43, 33LL, 0LL);
  uint64_t v12 = (void *)swift_allocObject(&unk_1003F2C50, 72LL, 7LL);
  v12[2]  = v6;
  v12[3]  = v7;
  v12[4]  = v8;
  v12[5]  = v9;
  v12[6]  = v10;
  v12[7]  = sub_1002474A4;
  uint64_t v39 = v5;
  v12[8]  = v5;
  id v13 = v4;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v11);
  *(void *)&v41[0]  = *v11;
  uint64_t v14 = *(void *)&v41[0];
  *unint64_t v11 = 0x8000000000000000LL;
  id v45 = v13;
  unint64_t v40 = sub_1003278A0((uint64_t)v13);
  uint64_t v15 = *(void *)(v14 + 16);
  char v35 = v16;
  BOOL v17 = (v16 & 1) == 0;
  Swift::Int v18 = v15 + v17;
  if (__OFADD__(v15, v17))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }

  uint64_t v19 = sub_100058CD0(255LL, (unint64_t *)&unk_10040CC00, &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
  v44[0]  = v6;
  v44[1]  = v7;
  v44[2]  = v8;
  v44[3]  = v9;
  v44[4]  = v10;
  uint64_t v10 = v19;
  uint64_t v20 = _s16P2PActivityStateOMa(255LL, (uint64_t)v44);
  unint64_t v21 = sub_100245750();
  type metadata accessor for _NativeDictionary(0LL, v10, v20, v21);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v18))
  {
    unint64_t v40 = sub_1003278A0((uint64_t)v45);
    if ((v35 & 1) != (v22 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v23 = *v11;
  *unint64_t v11 = *(void *)&v41[0];
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *v11;
  uint64_t v25 = *v11;
  if ((v35 & 1) != 0)
  {
    swift_bridgeObjectRetain(v25);
    uint64_t v26 = v39;
    id v27 = v45;
  }

  else
  {
    uint64_t v28 = swift_bridgeObjectRetain(v25);
    uint64_t v29 = v12[6];
    __int128 v36 = *((_OWORD *)v12 + 2);
    *(_OWORD *)isUniquea  = *((_OWORD *)v12 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v12[7])(v44, v28);
    v41[0]  = *(_OWORD *)isUniquea;
    v41[1]  = v36;
    uint64_t v42 = v29;
    uint64_t v30 = _s16P2PActivityStateOMa(0LL, (uint64_t)v41);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v41, v44, v30);
    id v27 = v45;
    v44[0]  = v45;
    id v31 = v45;
    _NativeDictionary._insert(at:key:value:)(v40, v44, v41, v24, v10, v20, v21);
    uint64_t v26 = v39;
  }

  swift_bridgeObjectRelease(v24);
  sub_10022DBA8();
  unsigned int v33 = v32;
  swift_endAccess(v43);

  sub_100232CA4(v27, v33, 0);
  swift_release(v12);
  return swift_release(v26);
}

uint64_t sub_10023A638(Swift::UInt *a1, void *a2)
{
  uint64_t v3 = (void *)*a2;
  Swift::UInt v44 = *a1;
  __int128 v4 = (void *)swift_allocObject(&unk_1003F29D0, 56LL, 7LL);
  uint64_t v5 = v3[10];
  void v4[2] = v5;
  uint64_t v6 = v3[11];
  v4[3]  = v6;
  uint64_t v7 = v3[12];
  v4[4]  = v7;
  uint64_t v8 = v3[13];
  v4[5]  = v8;
  uint64_t v9 = v3[14];
  v4[6]  = v9;
  uint64_t v10 = (void *)((char *)a2 + qword_10040C7B8);
  swift_beginAccess((char *)a2 + qword_10040C7B8, v42, 33LL, 0LL);
  unint64_t v11 = (void *)swift_allocObject(&unk_1003F29F8, 72LL, 7LL);
  void v11[2] = v5;
  v11[3]  = v6;
  v11[4]  = v7;
  v11[5]  = v8;
  v11[6]  = v9;
  v11[7]  = sub_1002474A4;
  uint64_t v38 = v4;
  v11[8]  = v4;
  isUnique  = swift_isUniquelyReferenced_nonNull_native(*v10);
  *(void *)&v40[0]  = *v10;
  uint64_t v12 = *(void *)&v40[0];
  *uint64_t v10 = 0x8000000000000000LL;
  unint64_t v39 = sub_1003278D0(v44);
  uint64_t v13 = *(void *)(v12 + 16);
  char v34 = v14;
  BOOL v15 = (v14 & 1) == 0;
  Swift::Int v16 = v13 + v15;
  if (__OFADD__(v13, v15))
  {
    __break(1u);
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
    __break(1u);
    return result;
  }

  type metadata accessor for WiFiP2PSPITransactionType(255LL);
  uint64_t v17 = v5;
  uint64_t v19 = v18;
  v43[0]  = v17;
  v43[1]  = v6;
  v43[2]  = v7;
  v43[3]  = v8;
  v43[4]  = v9;
  uint64_t v20 = _s16P2PActivityStateOMa(255LL, (uint64_t)v43);
  uint64_t v21 = sub_10000AF70( &qword_10040CC18,  (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType,  (uint64_t)&unk_10035D490);
  uint64_t v33 = v19;
  type metadata accessor for _NativeDictionary(0LL, v19, v20, v21);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v16))
  {
    unint64_t v39 = sub_1003278D0(v44);
    if ((v34 & 1) != (v22 & 1)) {
      goto LABEL_9;
    }
  }

  uint64_t v23 = *v10;
  *uint64_t v10 = *(void *)&v40[0];
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *v10;
  uint64_t v25 = *v10;
  if ((v34 & 1) != 0)
  {
    swift_bridgeObjectRetain(v25);
    Swift::UInt v26 = v44;
  }

  else
  {
    uint64_t v27 = swift_bridgeObjectRetain(v25);
    uint64_t v28 = v11[6];
    __int128 v35 = *((_OWORD *)v11 + 2);
    *(_OWORD *)isUniquea  = *((_OWORD *)v11 + 1);
    ((void (*)(void *__return_ptr, uint64_t))v11[7])(v43, v27);
    v40[0]  = *(_OWORD *)isUniquea;
    v40[1]  = v35;
    uint64_t v41 = v28;
    uint64_t v29 = _s16P2PActivityStateOMa(0LL, (uint64_t)v40);
    (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v40, v43, v29);
    Swift::UInt v26 = v44;
    v43[0]  = v44;
    _NativeDictionary._insert(at:key:value:)(v39, v43, v40, v24, v19, v20, v21);
  }

  swift_bridgeObjectRelease(v24);
  sub_10022DBA8();
  int v31 = v30;
  swift_endAccess(v42);
  sub_100237944(v26, v31);
  swift_release(v11);
  return swift_release(v38);
}

uint64_t sub_10023A91C()
{
  uint64_t v1 = v0 + qword_1004109F0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + qword_1004109F8));
  swift_weakDestroy(v0 + qword_100410A00);
  sub_100246EC0(v0 + qword_100410A08);
  swift_bridgeObjectRelease(*(void *)(v0 + qword_100410A10));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_100410A20));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040C7A0));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040C7A8));
  sub_10023EC24( *(void *)(v0 + qword_10040C7B0),  *(void *)(v0 + qword_10040C7B0 + 8),  *(void *)(v0 + qword_10040C7B0 + 16),  *(void *)(v0 + qword_10040C7B0 + 24),  *(void *)(v0 + qword_10040C7B0 + 32),  *(_BYTE *)(v0 + qword_10040C7B0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040C7B8));
  return v0;
}

uint64_t sub_10023AA00()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t _s22P2PActivityCoordinatorCMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s22P2PActivityCoordinatorCMn);
}

uint64_t sub_10023AA30(uint64_t a1)
{
  v2[0]  = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 144);
}

uint64_t sub_10023AA80()
{
  return sub_10022F764();
}

uint64_t sub_10023AAA0(void *a1)
{
  return sub_100236854(a1);
}

uint64_t sub_10023AAC0(uint64_t a1)
{
  return sub_100236A64(a1);
}

uint64_t (*sub_10023AAE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6))(uint64_t a1)
{
  uint64_t v12 = (void *)swift_allocObject(&unk_1003F3510, 64LL, 7LL);
  v12[2]  = a1;
  v12[3]  = a2;
  v12[4]  = a5;
  v12[5]  = a6;
  v12[6]  = a3;
  v12[7]  = a4;
  id v13 = a6;
  swift_retain();
  sub_10002254C(a3, a4);
  return sub_100246C68;
}

uint64_t sub_10023AB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin();
  int v30 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v15 - 8);
  uint64_t v33 = v15;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v19 = (void *)swift_allocObject(&unk_1003F3538, 72LL, 7LL);
  v19[2]  = a1;
  v19[3]  = a2;
  v19[4]  = a3;
  v19[5]  = a4;
  v19[6]  = a5;
  v19[7]  = a6;
  v19[8]  = a7;
  aBlock[4]  = sub_100246CC4;
  uint64_t v37 = v19;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F3550;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v18;
  swift_errorRetain(a1);
  swift_retain();
  swift_retain();
  id v22 = a5;
  uint64_t v23 = sub_10002254C(a6, a7);
  static DispatchQoS.unspecified.getter(v23);
  __int128 v35 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_10000AF70( (unint64_t *)&qword_100408950,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100002274((uint64_t *)&unk_1004052A0);
  uint64_t v26 = sub_1000572E4( (unint64_t *)&qword_100408960,  (uint64_t *)&unk_1004052A0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = v30;
  uint64_t v28 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v31, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v27, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
  return swift_release(v37);
}

uint64_t sub_10023ADC0( uint64_t a1, void (*a2)(unint64_t, __n128), uint64_t a3, void *a4, void *a5, void (*a6)(void))
{
  if (a1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    if (!a6)
    {
LABEL_4:
      sub_100021018((uint64_t)v6, v7);
      return sub_100021018((uint64_t)v8, (uint64_t)v9);
    }

void sub_10023B08C(void *a1, int a2, void (*a3)(void), void *a4, os_log_s *a5)
{
  uint64_t v6 = v5;
  v220  = a5;
  v222  = a3;
  v223  = a4;
  LODWORD(v224)  = a2;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  unint64_t v9 = *(void *)(v8 - 8);
  v218  = v8;
  v219  = v9;
  __chkstk_darwin();
  unint64_t v11 = (os_log_s *)((char *)&v210 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  id v13 = (os_log_s *)((char *)&v210 - v12);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v210 - v14;
  sub_100058CD0(0LL, &qword_10040CDA0, &OBJC_CLASS___WiFiMACAddress_ptr);
  id v16 = [a1 peerAddress];
  id v17 = [(id)objc_opt_self(WiFiMACAddress) zeroAddress];
  char v18 = static NSObject.== infix(_:_:)(v16, v17);

  if ((v18 & 1) != 0)
  {
    char v19 = (char)v224;
    v221  = v15;
    unsigned __int8 v20 = [a1 options];
    if (*((_BYTE *)v6 + 16) == (v20 & 1))
    {
      v222(0LL);
    }

    else
    {
      uint64_t v21 = *v6;
      uint64_t v22 = (void *)v6[1];
      uint64_t v23 = v6[3];
      BOOL v24 = v6;
      if ((v20 & 1) != 0)
      {
        uint64_t v25 = swift_allocObject(&unk_1003F33A8, 57LL, 7LL);
        uint64_t v26 = v220;
        uint64_t v27 = (os_log_s *)*((void *)v220 + 2);
        uint64_t v28 = *((void *)v220 + 3);
        *(void *)(v25 + 16)  = v27;
        *(void *)(v25 + 24)  = v28;
        uint64_t v29 = *((void *)v26 + 4);
        int v30 = (os_log_s *)*((void *)v26 + 5);
        *(void *)(v25 + 32)  = v29;
        *(void *)(v25 + 40)  = v30;
        unint64_t v31 = (void (*)(void))*((void *)v26 + 6);
        *(void *)(v25 + 48)  = v31;
        *(_BYTE *)(v25 + 56)  = 1;
        v207  = v30;
        v208  = v31;
        v205  = v28;
        v206  = v29;
        v204  = v27;
        unint64_t v32 = sub_10023AAE0((uint64_t)sub_100246B44, v25, (uint64_t)v222, (uint64_t)v223, v21, v22);
        uint64_t v34 = v33;
        swift_unownedRetain(v21);
        id v35 = v22;
        swift_bridgeObjectRetain(v23);
        swift_release(v25);
        swift_unownedRelease(v21);
        swift_bridgeObjectRelease(v23);

        uint64_t v36 = *v6;
        swift_unownedRetainStrong(*v6);
        uint64_t v37 = (void *)v6[1];
        uint64_t v38 = swift_allocObject(&unk_1003F33D0, 32LL, 7LL);
        *(void *)(v38 + 16)  = v32;
        *(void *)(v38 + 24)  = v34;
        id v39 = v37;
        swift_retain();
        sub_100239268(0x11uLL, (uint64_t)v39, (uint64_t)sub_100246B50, v38);
        swift_release(v34);
        swift_release(v36);

        swift_release(v38);
      }

      else
      {
        uint64_t v145 = a1;
        v146  = swift_allocObject(&unk_1003F3358, 72LL, 7LL);
        uint64_t v147 = v220;
        unint64_t v148 = (os_log_s *)*((void *)v220 + 2);
        uint64_t v149 = *((void *)v220 + 3);
        *(void *)(v146 + 16)  = v148;
        *(void *)(v146 + 24)  = v149;
        v150  = *((void *)v147 + 4);
        v151  = (os_log_s *)*((void *)v147 + 5);
        *(void *)(v146 + 32)  = v150;
        *(void *)(v146 + 40)  = v151;
        v152  = (void (*)(void))*((void *)v147 + 6);
        *(void *)(v146 + 48)  = v152;
        *(_BYTE *)(v146 + 56)  = 0;
        *(void *)(v146 + 64)  = v145;
        v208  = v152;
        v215  = v151;
        v207  = v151;
        v216  = v150;
        v206  = v150;
        v217  = v149;
        v205  = v149;
        v220  = v148;
        v204  = v148;
        uint64_t v153 = sub_10023AAE0((uint64_t)sub_100246AFC, v146, (uint64_t)v222, (uint64_t)v223, v21, v22);
        v155  = v154;
        swift_unownedRetain(v21);
        id v156 = v22;
        swift_bridgeObjectRetain(v23);
        v223  = v145;
        swift_release(v146);
        swift_unownedRelease(v21);
        swift_bridgeObjectRelease(v23);

        uint64_t v157 = v155;
        uint64_t v158 = *v24;
        swift_unownedRetainStrong(*v24);
        v159  = v24;
        int v160 = (void *)v24[1];
        uint64_t v161 = swift_allocObject(&unk_1003F3380, 32LL, 7LL);
        *(void *)(v161 + 16)  = v153;
        *(void *)(v161 + 24)  = v157;
        v162  = v160;
        swift_retain();
        sub_100239578(0x11uLL, (uint64_t)v162, (uint64_t)sub_100247510, v161);
        swift_release(v158);

        swift_release(v161);
        if ((v19 & 1) != 0)
        {
          swift_release(v157);
        }

        else
        {
          v222  = v152;
          v164  = v159;
          v166  = *v159;
          v165  = (void *)v159[1];
          v167  = v159[3];
          v168  = swift_unownedRetainStrong(*v159);
          v169  = swift_unownedRetain(v168);
          swift_unownedRetain(v169);
          v170  = v165;
          swift_bridgeObjectRetain(v167);
          swift_unownedRelease(v166);
          v171  = v218;
          v172  = v221;
          (*(void (**)(char *, uint64_t, uint64_t))(v219 + 16))(v221, v166 + qword_1004109F0, v218);
          swift_release(v166);
          swift_unownedRetain(v166);
          v173  = v170;
          swift_unownedRetain(v166);
          v174  = v173;
          swift_bridgeObjectRetain(v167);
          v175  = v223;
          swift_unownedRetain(v166);
          v176  = v174;
          swift_bridgeObjectRetain(v167);
          v177  = v175;
          swift_unownedRetain(v166);
          v178  = v176;
          v179  = swift_bridgeObjectRetain(v167);
          v180  = (os_log_s *)Logger.logObject.getter(v179);
          v181  = static os_log_type_t.default.getter();
          LODWORD(v223)  = v181;
          v182  = os_log_type_enabled(v180, v181);
          v224  = v178;
          if (v182)
          {
            v183  = swift_slowAlloc(32LL, -1LL);
            v212  = v180;
            v184  = v183;
            v185  = (void *)swift_slowAlloc(8LL, -1LL);
            v211  = v185;
            v213  = swift_slowAlloc(32LL, -1LL);
            v225  = (uint64_t)v178;
            v226  = v213;
            *(_DWORD *)v184  = 138412802;
            v214  = v164;
            v210  = v157;
            v186  = v178;
            v187  = v178;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
            *v185  = v186;
            swift_unownedRelease(v166);
            swift_bridgeObjectRelease(v167);

            swift_unownedRelease(v166);
            *(_WORD *)(v184 + 12)  = 2080;
            v188  = [v177 uniqueIdentifier];
            v189  = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
            v191  = v190;

            uint64_t v157 = v210;
            v225  = sub_10000235C(v189, v191, &v226);
            v192  = v214;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);

            swift_bridgeObjectRelease(v191);
            *(_WORD *)(v184 + 22)  = 2048;
            v193  = *(void *)(v167 + 16);
            swift_unownedRelease(v166);
            swift_bridgeObjectRelease(v167);

            v225  = v193;
            v164  = v192;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
            swift_unownedRelease(v166);
            swift_bridgeObjectRelease(v167);

            v194  = v212;
            _os_log_impl( (void *)&_mh_execute_header,  v212,  (os_log_type_t)v223,  "%@ cleared %s with empty peer address, will clear all (%ld) registrations",  (uint8_t *)v184,  0x20u);
            v195  = sub_100002274(&qword_100404DE0);
            v196  = v211;
            swift_arrayDestroy(v211, 1LL, v195);
            swift_slowDealloc(v196, -1LL, -1LL);
            v197  = v213;
            swift_arrayDestroy(v213, 1LL, &type metadata for Any[8]);
            swift_slowDealloc(v197, -1LL, -1LL);
            swift_slowDealloc(v184, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v219 + 8))(v221, v218);
          }

          else
          {
            swift_unownedRelease(v166);

            swift_unownedRelease(v166);
            swift_bridgeObjectRelease(v167);

            swift_unownedRelease(v166);
            swift_bridgeObjectRelease(v167);

            swift_unownedRelease(v166);
            swift_bridgeObjectRelease(v167);

            (*(void (**)(char *, uint64_t))(v219 + 8))(v172, v171);
          }

          v198  = v164[3];
          v199  = __chkstk_darwin();
          v204  = v200;
          v205  = v201;
          v206  = v202;
          v207  = v203;
          v208  = (void (*)(void))v199;
          v209  = v164;
          swift_bridgeObjectRetain(v198);
          sub_1002FFB08((uint64_t (*)(int *))sub_100246B14, (uint64_t)(&v210 - 8), v198);
          swift_unownedRelease(v166);
          swift_bridgeObjectRelease(v198);
          swift_release(v157);
          swift_bridgeObjectRelease(v167);
        }
      }
    }

    return;
  }

  uint64_t v40 = v13;
  uint64_t v41 = v11;
  id v42 = [a1 peerAddress];
  WiFiMACAddress.wifiAddress.getter();
  unint64_t v44 = v43;

  v221  = (char *)v6[3];
  uint64_t v45 = *((void *)v221 + 2);
  Swift::UInt v46 = a1;
  if ((v224 & 1) != 0)
  {
    if (v45)
    {
      unint64_t v47 = v44 & 0xFFFFFFFFFFFFLL;
      unint64_t v48 = sub_10001C15C(v44 & 0xFFFFFFFFFFFFLL);
      if ((v49 & 1) != 0)
      {
        id v50 = *(id *)(*((void *)v221 + 7) + 8 * v48);
        if ([a1 options] == v50)
        {
          uint64_t v52 = *v6;
          uint64_t v51 = (void *)v6[1];
          uint64_t v53 = swift_unownedRetainStrong(*v6);
          uint64_t v54 = swift_unownedRetain(v53);
          swift_unownedRetain(v54);
          id v55 = v51;
          uint64_t v56 = v221;
          swift_bridgeObjectRetain(v221);
          swift_unownedRelease(v52);
          uint64_t v57 = v218;
          unint64_t v58 = v219;
          unint64_t v59 = v40;
          (*(void (**)(os_log_s *, uint64_t, uint64_t))(v219 + 16))(v40, v52 + qword_1004109F0, v218);
          swift_release(v52);
          id v60 = v46;
          swift_unownedRetain(v52);
          id v61 = v55;
          id v62 = v60;
          swift_unownedRetain(v52);
          id v63 = v61;
          uint64_t v64 = swift_bridgeObjectRetain(v56);
          Swift::UInt v65 = (os_log_s *)Logger.logObject.getter(v64);
          os_log_type_t v66 = static os_log_type_t.default.getter();
          int v67 = v66;
          if (os_log_type_enabled(v65, v66))
          {
            uint64_t v68 = swift_slowAlloc(32LL, -1LL);
            v220  = v59;
            uint64_t v69 = v68;
            uint64_t v70 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
            v214  = v70;
            v217  = swift_slowAlloc(64LL, -1LL);
            v225  = (uint64_t)v63;
            v226  = v217;
            *(_DWORD *)uint64_t v69 = 138412802;
            LODWORD(v216)  = v67;
            v215  = v65;
            id v71 = v63;
            v224  = v63;
            id v72 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
            *uint64_t v70 = (uint64_t)v224;
            swift_unownedRelease(v52);
            swift_bridgeObjectRelease(v221);

            swift_unownedRelease(v52);
            *(_WORD *)(v69 + 12)  = 2080;
            id v73 = [v62 uniqueIdentifier];
            uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
            unint64_t v76 = v75;

            v225  = sub_10000235C(v74, v76, &v226);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);

            swift_bridgeObjectRelease(v76);
            *(_WORD *)(v69 + 22)  = 2080;
            uint64_t v77 = WiFiAddress.description.getter(v47);
            unint64_t v79 = v78;
            v225  = sub_10000235C(v77, v78, &v226);
            id v63 = v224;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
            swift_bridgeObjectRelease(v79);
            v80  = v215;
            _os_log_impl( (void *)&_mh_execute_header,  v215,  (os_log_type_t)v216,  "%@ setting traffic registration for %s to %s but already exists, returning success",  (uint8_t *)v69,  0x20u);
            uint64_t v81 = sub_100002274(&qword_100404DE0);
            uint64_t v82 = v214;
            swift_arrayDestroy(v214, 1LL, v81);
            swift_slowDealloc(v82, -1LL, -1LL);
            uint64_t v83 = v217;
            swift_arrayDestroy(v217, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v83, -1LL, -1LL);
            swift_slowDealloc(v69, -1LL, -1LL);

            (*(void (**)(os_log_s *, uint64_t))(v219 + 8))(v220, v218);
          }

          else
          {
            swift_unownedRelease(v52);
            swift_bridgeObjectRelease(v221);

            swift_unownedRelease(v52);
            (*(void (**)(os_log_s *, uint64_t))(v58 + 8))(v59, v57);
          }

          v222(0LL);
          swift_unownedRelease(v52);
          swift_bridgeObjectRelease(v221);

          return;
        }
      }
    }

    v224  = (id)(v44 >> 40);
    v219  = HIDWORD(v44);
    uint64_t v85 = *v6;
    swift_unownedRetainStrong(*v6);
    uint64_t v100 = v221;
    uint64_t v101 = (void *)v6[1];
    uint64_t v102 = swift_allocObject(&unk_1003F3330, 72LL, 7LL);
    char v104 = v219;
    uint64_t v103 = v220;
    v105  = (os_log_s *)*((void *)v220 + 2);
    uint64_t v106 = *((void *)v220 + 3);
    *(void *)(v102 + 16)  = v105;
    *(void *)(v102 + 24)  = v106;
    uint64_t v107 = *((void *)v103 + 4);
    uint64_t v108 = (os_log_s *)*((void *)v103 + 5);
    *(void *)(v102 + 32)  = v107;
    *(void *)(v102 + 40)  = v108;
    unint64_t v109 = (void (*)(void))*((void *)v103 + 6);
    *(void *)(v102 + 48)  = v109;
    *(_WORD *)(v102 + 56)  = v44;
    *(_BYTE *)(v102 + 58)  = BYTE2(v44);
    *(_BYTE *)(v102 + 59)  = BYTE3(v44);
    *(_BYTE *)(v102 + 60)  = v104;
    *(_BYTE *)(v102 + 61)  = (_BYTE)v224;
    *(void *)(v102 + 64)  = a1;
    v207  = v108;
    v208  = v109;
    v205  = v106;
    v206  = v107;
    v204  = v105;
    v110  = sub_10023AAE0((uint64_t)sub_100246ADC, v102, (uint64_t)v222, (uint64_t)v223, v85, v101);
    uint64_t v98 = v111;
    id v112 = v101;
    id v113 = v46;
    swift_bridgeObjectRetain(v100);
    id v99 = v112;
    swift_unownedRetain(v85);
    swift_release(v102);
    swift_unownedRelease(v85);
    swift_bridgeObjectRelease(v100);

    sub_1002341FC(v113, v99, (uint64_t)v110, v98);
LABEL_16:
    swift_release(v85);

    swift_release(v98);
    return;
  }

  if (v45)
  {
    sub_10001C15C(v44 & 0xFFFFFFFFFFFFLL);
    if ((v84 & 1) != 0)
    {
      v224  = (id)(v44 >> 40);
      v219  = HIDWORD(v44);
      uint64_t v85 = *v6;
      swift_unownedRetainStrong(*v6);
      uint64_t v86 = v221;
      unint64_t v87 = (void *)v6[1];
      uint64_t v88 = swift_allocObject(&unk_1003F3308, 62LL, 7LL);
      char v90 = v219;
      uint64_t v89 = v220;
      uint64_t v91 = (os_log_s *)*((void *)v220 + 2);
      uint64_t v92 = *((void *)v220 + 3);
      *(void *)(v88 + 16)  = v91;
      *(void *)(v88 + 24)  = v92;
      uint64_t v93 = *((void *)v89 + 4);
      uint64_t v94 = (os_log_s *)*((void *)v89 + 5);
      *(void *)(v88 + 32)  = v93;
      *(void *)(v88 + 40)  = v94;
      uint64_t v95 = (void (*)(void))*((void *)v89 + 6);
      *(void *)(v88 + 48)  = v95;
      *(_WORD *)(v88 + 56)  = v44;
      *(_BYTE *)(v88 + 58)  = BYTE2(v44);
      *(_BYTE *)(v88 + 59)  = BYTE3(v44);
      *(_BYTE *)(v88 + 60)  = v90;
      *(_BYTE *)(v88 + 61)  = (_BYTE)v224;
      v207  = v94;
      v208  = v95;
      v205  = v92;
      v206  = v93;
      v204  = v91;
      uint64_t v96 = sub_10023AAE0((uint64_t)sub_100246AB4, v88, (uint64_t)v222, (uint64_t)v223, v85, v87);
      uint64_t v98 = v97;
      id v99 = v87;
      swift_unownedRetain(v85);
      swift_bridgeObjectRetain(v86);
      swift_release(v88);
      swift_unownedRelease(v85);
      swift_bridgeObjectRelease(v86);

      sub_100234FD8(v46, v99, (void (*)(void))v96, v98);
      goto LABEL_16;
    }
  }

  uint64_t v115 = *v6;
  uint64_t v114 = (void *)v6[1];
  uint64_t v116 = swift_unownedRetainStrong(*v6);
  swift_unownedRetain(v116);
  id v117 = v221;
  swift_bridgeObjectRetain(v221);
  swift_unownedRetain(v115);
  id v118 = v114;
  swift_unownedRelease(v115);
  uint64_t v120 = v218;
  unint64_t v119 = v219;
  (*(void (**)(os_log_s *, uint64_t, uint64_t))(v219 + 16))(v41, v115 + qword_1004109F0, v218);
  swift_release(v115);
  v121  = v46;
  swift_bridgeObjectRetain(v117);
  swift_unownedRetain(v115);
  v122  = v118;
  uint64_t v123 = v120;
  id v124 = v121;
  swift_bridgeObjectRetain(v117);
  swift_unownedRetain(v115);
  id v125 = v122;
  unint64_t v126 = (os_log_s *)Logger.logObject.getter(v125);
  os_log_type_t v127 = static os_log_type_t.default.getter();
  int v128 = v127;
  if (os_log_type_enabled(v126, v127))
  {
    v129  = swift_slowAlloc(32LL, -1LL);
    v130  = (void *)swift_slowAlloc(8LL, -1LL);
    v217  = (uint64_t)v130;
    v224  = (id)swift_slowAlloc(64LL, -1LL);
    v225  = (uint64_t)v125;
    v226  = (uint64_t)v224;
    *(_DWORD *)v129  = 138412802;
    v220  = v126;
    v215  = v41;
    v131  = v125;
    LODWORD(v216)  = v128;
    id v132 = v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
    *v130  = v125;
    swift_unownedRelease(v115);
    v133  = v221;
    swift_bridgeObjectRelease(v221);

    swift_unownedRelease(v115);
    swift_bridgeObjectRelease(v133);

    *(_WORD *)(v129 + 12)  = 2080;
    v134  = [v124 uniqueIdentifier];
    uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
    v137  = v136;

    v225  = sub_10000235C(v135, v137, &v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);

    swift_bridgeObjectRelease(v137);
    *(_WORD *)(v129 + 22)  = 2080;
    uint64_t v138 = WiFiAddress.description.getter(v44 & 0xFFFFFFFFFFFFLL);
    v140  = v139;
    v225  = sub_10000235C(v138, v139, &v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
    swift_bridgeObjectRelease(v140);
    v141  = v220;
    _os_log_impl( (void *)&_mh_execute_header,  v220,  (os_log_type_t)v216,  "%@ clearing traffic registration for %s to %s but does not exist, returning success",  (uint8_t *)v129,  0x20u);
    v142  = sub_100002274(&qword_100404DE0);
    uint64_t v143 = v217;
    swift_arrayDestroy(v217, 1LL, v142);
    swift_slowDealloc(v143, -1LL, -1LL);
    v144  = v224;
    swift_arrayDestroy(v224, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v144, -1LL, -1LL);
    swift_slowDealloc(v129, -1LL, -1LL);

    (*(void (**)(os_log_t, uint64_t))(v219 + 8))(v215, v218);
  }

  else
  {
    swift_unownedRelease(v115);
    v163  = v221;
    swift_bridgeObjectRelease(v221);

    swift_unownedRelease(v115);
    swift_bridgeObjectRelease(v163);

    (*(void (**)(os_log_s *, uint64_t))(v119 + 8))(v41, v123);
  }

  v222(0LL);
  swift_unownedRelease(v115);
  swift_bridgeObjectRelease(v221);
}

uint64_t sub_10023C1D8(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(a1 + 16)  = a2;
  id v4 =  [*(id *)(*(void *)(a1 + 8) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)(v9, v4);
  swift_unknownObjectRelease(v4);
  uint64_t v5 = sub_100002274((uint64_t *)&unk_10040CC60);
  uint64_t result = swift_dynamicCast(&v8, v9, &type metadata for Any[8], v5, 6LL);
  if ((result & 1) != 0)
  {
    id v7 = v8;
    [v8 invalidatedActiveTrafficRegistration:a3];
    return swift_unknownObjectRelease(v7);
  }

  return result;
}

void sub_10023C288(uint64_t a1, void (*a2)(void))
{
  id v3 = [(id)objc_opt_self(WiFiP2PXPCConnection) convertError:a1];
  a2();
}

uint64_t sub_10023C2EC( unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = *((void *)a1 + 1);
  uint64_t v31 = a1[1];
  uint64_t v32 = *a1;
  uint64_t v30 = a1[2];
  id v12 = AWDLTrafficRegistrationServiceAirPlay;
  id v13 = WiFiAddress.apiAddress.getter(v32 | (v31 << 8) | (v30 << 16) | (v8 << 24) | (v9 << 32) | (v10 << 40));
  id v14 = [objc_allocWithZone(AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v12 peerAddress:v13];

  uint64_t v15 = (char *)a2[1];
  id v16 = *(void **)&v15[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  id v17 = v15;
  id v18 = [v16 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)(v38, v18);

  swift_unknownObjectRelease(v18);
  uint64_t v19 = sub_100002274((uint64_t *)&unk_10040CC60);
  if ((swift_dynamicCast(&v39, v38, &type metadata for Any[8], v19, 6LL) & 1) != 0)
  {
    id v20 = v39;
    [v39 invalidatedActiveTrafficRegistration:v14];
    swift_unknownObjectRelease(v20);
  }

  [v14 setOptions:v11];
  uint64_t v21 = *a2;
  swift_unownedRetainStrong(*a2);
  uint64_t v22 = (void *)a2[1];
  uint64_t v23 = a2[3];
  uint64_t v24 = swift_allocObject(&unk_1003F3470, 62LL, 7LL);
  *(void *)(v24 + 16)  = a3;
  *(void *)(v24 + 24)  = a4;
  *(void *)(v24 + 32)  = a5;
  *(void *)(v24 + 40)  = a6;
  *(void *)(v24 + 48)  = a7;
  *(_BYTE *)(v24 + 56)  = v32;
  *(_BYTE *)(v24 + 57)  = v31;
  *(_BYTE *)(v24 + 58)  = v30;
  *(_BYTE *)(v24 + 59)  = v8;
  *(_BYTE *)(v24 + 60)  = v9;
  *(_BYTE *)(v24 + 61)  = v10;
  uint64_t v25 = sub_10023AAE0((uint64_t)sub_100246AB4, v24, 0LL, 0LL, v21, v22);
  uint64_t v27 = v26;
  id v28 = v22;
  swift_unownedRetain(v21);
  swift_bridgeObjectRetain(v23);
  swift_release(v24);
  swift_unownedRelease(v21);
  swift_bridgeObjectRelease(v23);

  sub_100234FD8(v14, v28, (void (*)(void))v25, v27);
  swift_release(v21);

  return swift_release(v27);
}

double sub_10023C57C(uint64_t a1, uint64_t a2, id a3)
{
  id v5 = [a3 options];
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 24));
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = 0x8000000000000000LL;
  sub_100244338((uint64_t)v5, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v9;
  *(void *)&double result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

double sub_10023C5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_10001C15C(v4);
  char v7 = v6;
  *(void *)&double result = swift_bridgeObjectRelease(v3).n128_u64[0];
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 24));
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 24)  = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native) {
      sub_10032A880();
    }
    sub_100328640(v5, v10);
    uint64_t v11 = *(void *)(a1 + 24);
    *(void *)(a1 + 24)  = v10;
    *(void *)&double result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }

  return result;
}

uint64_t sub_10023C694()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + qword_10040C8A8));
}

id sub_10023C6C0()
{
  uint64_t v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType(v0);
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  char v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v7 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *char v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)(v6);
  id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = *(void *)&v1[qword_10040C8A0];
    id v12 = *(void **)&v1[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    swift_retain();
    id v13 = v12;
    sub_100239888((uint64_t)v13);
    swift_release(v11);

    v14.receiver  = v1;
    v14.super_class  = ObjectType;
    return objc_msgSendSuper2(&v14, "dealloc");
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10023C7D8(void *a1)
{
  id v1 = a1;
  return sub_10023C6C0();
}

uint64_t sub_10023C7FC(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + qword_10040C8A8));
}

uint64_t sub_10023C834(void *a1, int a2, uint64_t a3, void *a4)
{
  return sub_10023CB40( a1,  a2,  a3,  a4,  (uint64_t)&unk_1003F37B8,  (uint64_t)sub_100247460,  "%@ is starting transaction: %s",  (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))sub_100239268);
}

uint64_t sub_10023C858( uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(uint64_t, void, uint64_t, uint64_t))
{
  uint64_t v38 = a5;
  uint64_t v39 = a1;
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  id v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v13 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  objc_super v14 = (void *)*v13;
  uint64_t *v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)(v12);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v16 & 1) != 0)
  {
    uint64_t v37 = a4;
    id v18 = v5;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      uint64_t v22 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v23;
      *(_DWORD *)uint64_t v21 = 138412546;
      os_log_t v34 = v19;
      uint64_t v24 = *(void **)&v18[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
      uint64_t v36 = a3;
      uint64_t v40 = (uint64_t)v24;
      uint64_t v41 = v23;
      id v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
      *uint64_t v22 = v24;

      *(_WORD *)(v21 + 12)  = 2080;
      uint64_t v26 = v39;
      unint64_t v27 = WiFiP2PSPITransactionType.description.getter(v39);
      unint64_t v29 = v28;
      uint64_t v40 = sub_10000235C(v27, v28, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
      unint64_t v30 = v29;
      a3  = v36;
      swift_bridgeObjectRelease(v30);
      os_log_t v31 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, v20, v37, (uint8_t *)v21, 0x16u);
      uint64_t v32 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v22, 1LL, v32);
      swift_slowDealloc(v22, -1LL, -1LL);
      uint64_t v33 = v35;
      swift_arrayDestroy(v35, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      uint64_t v26 = v39;
    }

    return v38(v26, *(void *)&v18[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session], a2, a3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10023CB1C(void *a1, int a2, uint64_t a3, void *a4)
{
  return sub_10023CB40( a1,  a2,  a3,  a4,  (uint64_t)&unk_1003F3790,  (uint64_t)sub_100246E80,  "%@ is ending transaction: %s",  (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))sub_100239578);
}

uint64_t sub_10023CB40( void *a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, const char *a7, uint64_t (*a8)(uint64_t, void, uint64_t, uint64_t))
{
  objc_super v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v15 + 16)  = v14;
  id v16 = a1;
  sub_10023C858(a3, a6, v15, a7, a8);

  return swift_release(v15);
}

uint64_t _s23P2PTransactionResponderCMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s23P2PTransactionResponderCMn);
}

uint64_t sub_10023CBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10023E53C(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

uint64_t sub_10023CBF4()
{
  return swift_release(*(void *)(v0 + qword_10040C990));
}

id sub_10023CC04()
{
  id v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType(v0);
  uint64_t v3 = *(void *)v0;
  uint64_t v4 = swift_isaMask;
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *uint64_t v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10)  = _dispatchPreconditionTest(_:)(v8);
  id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) != 0)
  {
    uint64_t v13 = qword_10040C990;
    uint64_t v14 = *(void *)&v1[qword_10040C990];
    uint64_t v15 = v4 & v3;
    uint64_t v16 = OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session;
    id v17 = *(void **)&v1[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    swift_retain();
    id v18 = v17;
    sub_10023631C((uint64_t)v18, &qword_10040C7A8, (uint64_t)sub_100246E48);
    swift_release(v14);

    uint64_t v19 = *(void *)&v1[v13];
    os_log_type_t v20 = *(void **)&v1[v16];
    swift_retain();
    id v21 = v20;
    sub_100237894(v21);
    swift_release(v19);

    uint64_t v22 = *(void *)&v1[v13];
    uint64_t v23 = *(void **)&v1[v16];
    swift_retain();
    id v24 = v23;
    sub_10023631C((uint64_t)v24, &qword_10040C7A0, (uint64_t)sub_100246E10);
    swift_release(v22);

    uint64_t v25 = *(void *)&v1[v13];
    uint64_t v26 = *(void **)&v1[v16];
    uint64_t v39 = v26;
    swift_beginAccess(v25 + qword_100410A10, v38, 33LL, 0LL);
    uint64_t v27 = type metadata accessor for XPCSession(255LL);
    uint64_t v28 = *(void *)(v15 + 136);
    id v29 = v26;
    __int128 v30 = *(_OWORD *)(v15 + 120);
    __int128 v35 = *(_OWORD *)(v15 + 104);
    __int128 v36 = v30;
    uint64_t v37 = v28;
    uint64_t v31 = _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa(255LL, (uint64_t)&v35);
    uint64_t v32 = sub_10000AF70( &qword_10040CD98,  type metadata accessor for XPCSession,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v33 = type metadata accessor for Dictionary(0LL, v27, v31, v32);
    Dictionary.removeValue(forKey:)(&v39, v33);
    swift_endAccess(v38);

    sub_100246DD0(v35, *((void **)&v35 + 1), v36, *((uint64_t *)&v36 + 1));
    v34.receiver  = v1;
    v34.super_class  = ObjectType;
    return objc_msgSendSuper2(&v34, "dealloc");
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10023CE68(void *a1)
{
  id v1 = a1;
  return sub_10023CC04();
}

uint64_t sub_10023CE8C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + qword_10040C990));
}

void sub_10023CE9C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v15 = (void *)*v14;
  uint64_t *v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchPredicate.onQueue(_:),  v10);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if ((v17 & 1) != 0)
  {
    id v18 = [a1 peerAddress];
    WiFiMACAddress.wifiAddress.getter();
    uint64_t v20 = v19;

    id v21 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
    if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v20 & 0xFFFFFFFFFFFFLL,  *v21 | ((unint64_t)*(unsigned int *)(v21 + 1) << 16)))
    {
      uint64_t v81 = a3;
      id v22 = v5;
      id v23 = a1;
      id v24 = (char *)v22;
      id v25 = v23;
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        id v29 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v77 = v29;
        uint64_t v79 = swift_slowAlloc(64LL, -1LL);
        uint64_t v83 = v79;
        *(_DWORD *)uint64_t v28 = 138412802;
        v80  = a4;
        __int128 v30 = *(void **)&v24[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
        os_log_t v78 = v26;
        uint64_t v82 = (uint64_t)v30;
        id v31 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        *id v29 = v30;

        *(_WORD *)(v28 + 12)  = 2080;
        if ((a2 & 1) != 0) {
          uint64_t v32 = 0x6E69767265736572LL;
        }
        else {
          uint64_t v32 = 0x7672657365726E75LL;
        }
        if ((a2 & 1) != 0) {
          unint64_t v33 = 0xE900000000000067LL;
        }
        else {
          unint64_t v33 = 0xEB00000000676E69LL;
        }
        uint64_t v82 = sub_10000235C(v32, v33, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        *(void *)&double v34 = swift_bridgeObjectRelease(v33).n128_u64[0];
        *(_WORD *)(v28 + 22)  = 2080;
        id v35 = objc_msgSend(v25, "uniqueIdentifier", v34);
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        char v37 = a2;
        unint64_t v39 = v38;

        uint64_t v40 = v36;
        a4  = v80;
        uint64_t v82 = sub_10000235C(v40, v39, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

        unint64_t v41 = v39;
        a2  = v37;
        swift_bridgeObjectRelease(v41);
        uint64_t v26 = v78;
        _os_log_impl((void *)&_mh_execute_header, v78, v27, "%@ %s traffic registrations for %s", (uint8_t *)v28, 0x20u);
        uint64_t v42 = sub_100002274(&qword_100404DE0);
        unint64_t v43 = v77;
        swift_arrayDestroy(v77, 1LL, v42);
        swift_slowDealloc(v43, -1LL, -1LL);
        uint64_t v44 = v79;
        swift_arrayDestroy(v79, 2LL, &type metadata for Any[8]);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v75 = *(void *)&v24[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
      if ((a2 & 1) != 0) {
        sub_1002322F4(v25, v75, v81, a4);
      }
      else {
        sub_100232618(v25, v75, v81, a4);
      }
    }

    else
    {
      char v45 = a2;
      id v46 = a1;
      id v47 = v5;
      id v48 = v46;
      char v49 = (char *)v47;
      id v50 = v48;
      uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.error.getter(v51);
      int v53 = v52;
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v54 = swift_slowAlloc(42LL, -1LL);
        id v55 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v79 = (uint64_t)v55;
        uint64_t v81 = swift_slowAlloc(96LL, -1LL);
        uint64_t v83 = v81;
        *(_DWORD *)uint64_t v54 = 138413058;
        LODWORD(v80)  = v53;
        uint64_t v56 = *(void **)&v49[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
        uint64_t v82 = (uint64_t)v56;
        id v57 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        *id v55 = v56;

        *(_WORD *)(v54 + 12)  = 2080;
        if ((v45 & 1) != 0) {
          uint64_t v58 = 0x65767265736572LL;
        }
        else {
          uint64_t v58 = 0x7672657365726E75LL;
        }
        if ((v45 & 1) != 0) {
          unint64_t v59 = 0xE700000000000000LL;
        }
        else {
          unint64_t v59 = 0xE900000000000065LL;
        }
        uint64_t v82 = sub_10000235C(v58, v59, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        *(void *)&double v60 = swift_bridgeObjectRelease(v59).n128_u64[0];
        *(_WORD *)(v54 + 22)  = 2080;
        id v61 = objc_msgSend(v50, "uniqueIdentifier", v60);
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        unint64_t v64 = v63;

        uint64_t v82 = sub_10000235C(v62, v64, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

        *(void *)&double v65 = swift_bridgeObjectRelease(v64).n128_u64[0];
        *(_WORD *)(v54 + 32)  = 2080;
        id v66 = objc_msgSend(v50, "peerAddress", v65);
        WiFiMACAddress.wifiAddress.getter();
        uint64_t v68 = v67;

        uint64_t v69 = WiFiAddress.description.getter(v68 & 0xFFFFFFFFFFFFLL);
        unint64_t v71 = v70;
        uint64_t v82 = sub_10000235C(v69, v70, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

        swift_bridgeObjectRelease(v71);
        _os_log_impl( (void *)&_mh_execute_header,  v51,  (os_log_type_t)v80,  "%@ incorrectly trying to %s traffic registrations for %s to a specific peer: %s",  (uint8_t *)v54,  0x2Au);
        uint64_t v72 = sub_100002274(&qword_100404DE0);
        uint64_t v73 = v79;
        swift_arrayDestroy(v79, 1LL, v72);
        swift_slowDealloc(v73, -1LL, -1LL);
        uint64_t v74 = v81;
        swift_arrayDestroy(v81, 3LL, &type metadata for Any[8]);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10023D560(void *a1, int a2, void *a3, uint64_t a4, void *a5)
{
  return sub_10023DD50( a1,  a2,  a3,  a4,  a5,  (uint64_t)&unk_1003F35D8,  (uint64_t)sub_10024745C,  (void (*)(id, uint64_t, uint64_t, uint64_t))sub_10023CE9C);
}

void sub_10023D57C(void *a1, int a2, void (*a3)(void), void *a4)
{
  unint64_t v98 = *v4;
  uint64_t v99 = swift_isaMask;
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (uint64_t *)((char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v14 = (void *)*v13;
  uint64_t *v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  id v16 = a1;
  char v17 = v4;
  id v18 = v16;
  uint64_t v19 = v17;
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc(42LL, -1LL);
    uint64_t v101 = a4;
    uint64_t v24 = v23;
    int v25 = a2;
    uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v94 = v26;
    uint64_t v97 = swift_slowAlloc(96LL, -1LL);
    uint64_t v102 = v97;
    *(_DWORD *)uint64_t v24 = 138413058;
    os_log_t v96 = v20;
    os_log_type_t v27 = *(void **)&v19[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    int v95 = v22;
    uint64_t v108 = (uint64_t)v27;
    uint64_t v100 = a3;
    id v28 = v27;
    uint64_t v93 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
    *uint64_t v26 = v27;

    *(_WORD *)(v24 + 12)  = 2080;
    if ((v25 & 1) != 0) {
      uint64_t v29 = 0x676E697472617473LL;
    }
    else {
      uint64_t v29 = 0x676E6970706F7473LL;
    }
    uint64_t v108 = sub_10000235C(v29, 0xE800000000000000LL, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
    *(void *)&double v30 = swift_bridgeObjectRelease(0xE800000000000000LL).n128_u64[0];
    *(_WORD *)(v24 + 22)  = 2080;
    id v31 = objc_msgSend(v18, "uniqueIdentifier", v30);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v34 = v33;

    uint64_t v35 = v32;
    a3  = v100;
    a2  = v25;
    uint64_t v108 = sub_10000235C(v35, v34, &v102);
    uint64_t v36 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v93);

    *(void *)&double v37 = swift_bridgeObjectRelease(v34).n128_u64[0];
    *(_WORD *)(v24 + 32)  = 2080;
    id v38 = objc_msgSend(v18, "peerAddress", v37);
    WiFiMACAddress.wifiAddress.getter();
    uint64_t v40 = v39;

    uint64_t v41 = WiFiAddress.description.getter(v40 & 0xFFFFFFFFFFFFLL);
    unint64_t v43 = v42;
    uint64_t v108 = sub_10000235C(v41, v42, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v36);

    swift_bridgeObjectRelease(v43);
    os_log_t v44 = v96;
    _os_log_impl( (void *)&_mh_execute_header,  v96,  (os_log_type_t)v95,  "%@ %s traffic registration for %s to %s",  (uint8_t *)v24,  0x2Au);
    uint64_t v45 = sub_100002274(&qword_100404DE0);
    id v46 = v94;
    swift_arrayDestroy(v94, 1LL, v45);
    swift_slowDealloc(v46, -1LL, -1LL);
    uint64_t v47 = v97;
    swift_arrayDestroy(v97, 3LL, &type metadata for Any[8]);
    swift_slowDealloc(v47, -1LL, -1LL);
    uint64_t v48 = v24;
    a4  = v101;
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
  }

  id v49 = [v18 uniqueIdentifier];
  uint64_t v50 = AWDLTrafficRegistrationServiceAirPlay;
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  uint64_t v53 = v52;
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  uint64_t v56 = v54;
  if (v51 == v55 && v53 == v54)
  {

    swift_bridgeObjectRelease_n(v53, 2LL);
  }

  else
  {
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v55, v54, 0LL);

    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v56);
    if ((v57 & 1) == 0) {
      goto LABEL_18;
    }
  }

  if (([v18 legacyUpgradeRequired] & 1) == 0)
  {
LABEL_18:
    unint64_t v87 = *(void **)&v19[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    if ((a2 & 1) != 0) {
      sub_1002341FC(v18, v87, (uint64_t)a3, (uint64_t)a4);
    }
    else {
      sub_100234FD8(v18, v87, a3, (uint64_t)a4);
    }
    return;
  }

  LODWORD(v97)  = a2;
  uint64_t v100 = a3;
  uint64_t v101 = a4;
  uint64_t v58 = (void *)(v99 & v98);
  uint64_t v59 = *(void *)&v19[qword_10040C990];
  uint64_t v99 = *(void *)&v19[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
  double v60 = (os_log_s *)swift_allocObject(&unk_1003F32B8, 24LL, 7LL);
  *((void *)v60 + 2)  = v19;
  id v61 = (uint64_t *)(v59 + qword_100410A10);
  swift_beginAccess(v59 + qword_100410A10, &v108, 33LL, 0LL);
  uint64_t v62 = (void *)swift_allocObject(&unk_1003F32E0, 72LL, 7LL);
  uint64_t v63 = v58[13];
  v62[2]  = v63;
  uint64_t v64 = v58[14];
  v62[3]  = v64;
  a1  = (void *)v58[15];
  v62[4]  = a1;
  uint64_t v65 = v58[16];
  v62[5]  = v65;
  uint64_t v66 = v58[17];
  v62[6]  = v66;
  v62[7]  = sub_100246A8C;
  os_log_t v96 = v60;
  v62[8]  = v60;
  uint64_t v67 = v19;
  id v68 = (id)v99;
  LODWORD(v94)  = swift_isUniquelyReferenced_nonNull_native(*v61);
  uint64_t v107 = *v61;
  uint64_t v69 = v107;
  *id v61 = 0x8000000000000000LL;
  uint64_t v99 = (uint64_t)v68;
  unint64_t v98 = sub_1003277F4((uint64_t)v68);
  uint64_t v70 = *(void *)(v69 + 16);
  int v95 = v71;
  BOOL v72 = (v71 & 1) == 0;
  Swift::Int v73 = v70 + v72;
  if (__OFADD__(v70, v72))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a1);
    __break(1u);
    return;
  }

  uint64_t v74 = type metadata accessor for XPCSession(255LL);
  uint64_t v102 = v63;
  uint64_t v103 = v64;
  char v104 = a1;
  v105  = v65;
  a1  = (void *)v74;
  uint64_t v106 = v66;
  uint64_t v75 = (os_log_s *)_s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa(255LL, (uint64_t)&v102);
  uint64_t v76 = sub_10000AF70( &qword_10040CD98,  type metadata accessor for XPCSession,  (uint64_t)&protocol conformance descriptor for NSObject);
  type metadata accessor for _NativeDictionary(0LL, a1, v75, v76);
  Swift::Bool v77 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)v94, v73);
  uint64_t v78 = v107;
  char v79 = v97;
  v80  = v95;
  if (v77)
  {
    unint64_t v98 = sub_1003277F4(v99);
    if ((v80 & 1) != (v81 & 1)) {
      goto LABEL_26;
    }
  }

  uint64_t v82 = *v61;
  *id v61 = v78;
  swift_bridgeObjectRelease(v82);
  uint64_t v83 = *v61;
  uint64_t v84 = *v61;
  if ((v80 & 1) != 0)
  {
    swift_bridgeObjectRetain(v84);
    id v86 = (id)v99;
    uint64_t v85 = v100;
  }

  else
  {
    uint64_t v88 = swift_bridgeObjectRetain(v84);
    uint64_t v102 = ((uint64_t (*)(uint64_t))v62[7])(v88);
    uint64_t v103 = v89;
    LOBYTE(v104)  = v90 & 1;
    v105  = v91;
    id v86 = (id)v99;
    uint64_t v107 = v99;
    id v92 = (id)v99;
    _NativeDictionary._insert(at:key:value:)(v98, &v107, &v102, v83, a1, v75, v76);
    uint64_t v85 = v100;
  }

  swift_bridgeObjectRelease(v83);
  sub_10023B08C(v18, v79 & 1, v85, v101, v75);
  swift_endAccess(&v108);
  swift_release(v62);
  swift_release(v96);
}

uint64_t sub_10023DCD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + qword_10040C990);
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session);
  swift_unownedRetain(v1);
  id v3 = v2;
  return v1;
}

uint64_t sub_10023DD34(void *a1, int a2, void *a3, uint64_t a4, void *a5)
{
  return sub_10023DD50( a1,  a2,  a3,  a4,  a5,  (uint64_t)&unk_1003F3290,  (uint64_t)sub_10024745C,  (void (*)(id, uint64_t, uint64_t, uint64_t))sub_10023D57C);
}

uint64_t sub_10023DD50( void *a1, int a2, void *a3, uint64_t a4, void *aBlock, uint64_t a6, uint64_t a7, void (*a8)(id, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_allocObject(a6, 24LL, 7LL);
  *(void *)(v15 + 16)  = v14;
  id v16 = a3;
  id v17 = a1;
  a8(v16, a4, a7, v15);

  return swift_release(v15);
}

uint64_t sub_10023DDF0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v10);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v14 & 1) != 0)
  {
    id v16 = v3;
    id v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v20 = swift_slowAlloc(8LL, -1LL);
      uint64_t v36 = a2;
      os_log_t v34 = v17;
      os_log_type_t v21 = (void *)v20;
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v22;
      *(_DWORD *)uint64_t v19 = 138412546;
      uint64_t v23 = a3;
      uint64_t v24 = *(void **)&v16[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
      uint64_t v37 = (uint64_t)v24;
      uint64_t v38 = v22;
      id v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      *os_log_type_t v21 = v24;
      a3  = v23;

      *(_WORD *)(v19 + 12)  = 2080;
      if ((a1 & 1) != 0) {
        uint64_t v26 = 0x69646E6570737573LL;
      }
      else {
        uint64_t v26 = 0x676E696D75736572LL;
      }
      if ((a1 & 1) != 0) {
        unint64_t v27 = 0xEA0000000000676ELL;
      }
      else {
        unint64_t v27 = 0xE800000000000000LL;
      }
      uint64_t v37 = sub_10000235C(v26, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease(v27);
      os_log_t v28 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, v18, "%@ %s AWDL", (uint8_t *)v19, 0x16u);
      uint64_t v29 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v21, 1LL, v29);
      a2  = v36;
      swift_slowDealloc(v21, -1LL, -1LL);
      uint64_t v30 = v35;
      swift_arrayDestroy(v35, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
    }

    if ((a1 & 1) != 0)
    {
      id v31 = &unk_1003F3240;
      uint64_t v32 = sub_10022C9A8;
    }

    else
    {
      id v31 = &unk_1003F3268;
      uint64_t v32 = sub_10022CF6C;
    }

    return sub_1002377A0( *(void *)&v16[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session],  a2,  a3,  (uint64_t)v31,  (uint64_t)sub_100247464,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v32);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10023E118(void *a1, int a2, char a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_allocObject(&unk_1003F3218, 24LL, 7LL);
  *(void *)(v7 + 16)  = v6;
  id v8 = a1;
  sub_10023DDF0(a3, (uint64_t)sub_100246A60, v7);

  return swift_release(v7);
}

void sub_10023E18C(void (*a1)(uint64_t, void, __n128), uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v8 = (void *)((char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *id v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10)  = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v2 + qword_10040C990);
    uint64_t v13 = sub_10022F524();
    sub_100234D6C(v13);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease(v13);
    uint64_t v16 = sub_100332A38(v15);
    swift_bridgeObjectRelease(v15);
    id v17 = sub_10026D794(v16);
    swift_bridgeObjectRelease(v16);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    id v46 = _swiftEmptyDictionarySingleton;
    sub_100244440((uint64_t)v17, 0xD000000000000023LL, 0x8000000100368260LL, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = v46;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v20 = *(void *)(v12 + qword_1004109F8);
    int64_t v21 = *(void *)(v20 + 16);
    uint64_t v22 = _swiftEmptyArrayStorage;
    if (!v21)
    {
LABEL_12:
      char v38 = swift_isUniquelyReferenced_nonNull_native(v19);
      id v46 = v19;
      sub_100244440((uint64_t)v22, 0xD000000000000023LL, 0x8000000100368290LL, v38);
      uint64_t v39 = (uint64_t)v46;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      uint64_t v40 = sub_100270874(v39);
      __n128 v41 = swift_bridgeObjectRelease(v39);
      a1(v40, 0LL, v41);
      swift_bridgeObjectRelease(v40);
      return;
    }

    v42[0]  = v19;
    v42[1]  = a2;
    unint64_t v43 = a1;
    id v46 = _swiftEmptyArrayStorage;
    uint64_t v44 = swift_bridgeObjectRetain(v20);
    sub_1000696B4(0, v21, 0);
    uint64_t v23 = v44;
    uint64_t v22 = v46;
    int64_t v24 = sub_1002455C8(v44);
    int v26 = v25;
    char v28 = v27 & 1;
    uint64_t v45 = v23 + 56;
    while ((v24 & 0x8000000000000000LL) == 0 && v24 < 1LL << *(_BYTE *)(v23 + 32))
    {
      if (*(_DWORD *)(v23 + 36) != v26) {
        goto LABEL_15;
      }
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v23 + 48) + 8 * v24));
      uint64_t v31 = v30;
      id v46 = v22;
      unint64_t v33 = v22[2];
      unint64_t v32 = v22[3];
      if (v33 >= v32 >> 1)
      {
        sub_1000696B4(v32 > 1, v33 + 1, 1);
        uint64_t v23 = v44;
        uint64_t v22 = v46;
      }

      v22[2]  = v33 + 1;
      os_log_t v34 = &v22[2 * v33];
      void v34[4] = v29;
      v34[5]  = v31;
      int64_t v35 = sub_10024566C(v24, v26, v28 & 1, v23);
      int64_t v24 = v35;
      int v26 = v36;
      char v28 = v37 & 1;
      if (!--v21)
      {
        sub_100022588(v35, v36, v37 & 1);
        swift_bridgeObjectRelease(v23);
        a1  = v43;
        uint64_t v19 = (void *)v42[0];
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10023E4B8(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = swift_allocObject(&unk_1003F31F0, 24LL, 7LL);
  *(void *)(v5 + 16)  = v4;
  id v6 = a1;
  sub_10023E18C((void (*)(uint64_t, void, __n128))sub_1002466A4, v5);

  return swift_release(v5);
}

uint64_t _s25P2PTrafficPolicyResponderCMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s25P2PTrafficPolicyResponderCMn);
}

uint64_t sub_10023E530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10023E53C(a1, a2, a3, (uint64_t)"\b");
}

uint64_t sub_10023E53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v5, a1 + 144);
}

void sub_10023E574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    v5.super.isa  = 0LL;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  v5.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

char *sub_10023E608(char *a1)
{
  uint64_t v2 = v1;
  ObjectType  = swift_getObjectType(v1);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v5);
  id v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
  uint64_t v9 = *(void **)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  uint64_t v10 = v2;
  v11._countAndFlagsBits  = 0xD000000000000014LL;
  v11._object  = (void *)0x8000000100368240LL;
  if (NSXPCConnection.has(entitlement:)(v11)
    && (v12 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PUIAgentXPCDelegate],  objc_msgSend(v9, "setRemoteObjectInterface:", v12),  v12,  v13 = objc_msgSend(*(id *)&a1[v8], "remoteObjectProxy"),  _bridgeAnyObjectToAny(_:)(&v30, v13),  swift_unknownObjectRelease(v13),  uint64_t v14 = sub_100002274(&qword_10040CD88),  (swift_dynamicCast(&v29, &v30, &type metadata for Any[8], v14, 6) & 1) != 0))
  {
    uint64_t v15 = v29;
    *(void *)((char *)v10 + qword_10040CA78)  = v29;
    swift_unknownObjectRetain(v15);

    uint64_t v16 = a1;
    Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 6516856LL, 0xE300000000000000LL);
    id v17 = &OBJC_PROTOCOL___NSObject;
    os_log_type_t v18 = sub_100264E4C(v16, (uint64_t)v7, (uint64_t)v17);

    uint64_t v19 = v16;
    uint64_t v20 = v18;
    int64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v28 = v15;
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int64_t v24 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v23 = 138412290;
      uint64_t v30 = v19;
      int v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      *int64_t v24 = v19;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ is now the current UI agent", v23, 0xCu);
      uint64_t v26 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v24, 1LL, v26);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_unknownObjectRelease(v28);
    }

    else
    {

      swift_unknownObjectRelease(v15);
    }
  }

  else
  {

    swift_deallocPartialClassInstance( v10,  ObjectType,  *(unsigned int *)((swift_isaMask & *v10) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v10) + 0x34LL));
    return 0LL;
  }

  return v20;
}

uint64_t sub_10023E970()
{
  return swift_unknownObjectRelease(*(void *)(v0 + qword_10040CA78));
}

id sub_10023E980()
{
  ObjectType  = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = v0;
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    id v7 = *(void **)&v2[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    Swift::String v11 = v7;
    id v8 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
    *uint64_t v6 = v7;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ is no longer the UI agent", v5, 0xCu);
    uint64_t v9 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v6, 1LL, v9);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

  v12.receiver  = v2;
  v12.super_class  = ObjectType;
  return objc_msgSendSuper2(&v12, "dealloc");
}

id sub_10023EB0C(void *a1)
{
  id v1 = a1;
  return sub_10023E980();
}

uint64_t sub_10023EB30(uint64_t a1)
{
  return swift_unknownObjectRelease(*(void *)(a1 + qword_10040CA78));
}

uint64_t _s16UIAgentResponderCMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s16UIAgentResponderCMn);
}

uint64_t sub_10023EB4C( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned __int8 v8 = a4;
  unint64_t v11 = a4 >> 62;
  if (a4 >> 62 == 2)
  {
LABEL_4:
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    sub_10023EBE8(a3, v8);
    return sub_10023EBE8(a5, a6);
  }

  if ((_DWORD)v11 != 1)
  {
    if ((_DWORD)v11) {
      return result;
    }
    goto LABEL_4;
  }

  return swift_bridgeObjectRetain(result);
}

uint64_t sub_10023EBE8(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10023EC00(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10023EC00(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_10023EC0C(uint64_t a1)
{
  return sub_10023EC24( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 40));
}

uint64_t sub_10023EC24( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned __int8 v8 = a4;
  unint64_t v11 = a4 >> 62;
  if (a4 >> 62 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    sub_10023ECC0(a3, v8);
    return sub_10023ECC0(a5, a6);
  }

  if ((_DWORD)v11 != 1)
  {
    if ((_DWORD)v11) {
      return result;
    }
    goto LABEL_4;
  }

  return swift_bridgeObjectRelease(result);
}

uint64_t sub_10023ECC0(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10023ECD8(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10023ECD8(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_10023ECE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(_BYTE *)(a2 + 40);
  sub_10023EB4C(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(_BYTE *)(a1 + 40)  = v8;
  return a1;
}

uint64_t sub_10023ED58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(_BYTE *)(a2 + 40);
  sub_10023EB4C(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  unsigned __int8 v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40)  = v8;
  sub_10023EC24(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t sub_10023EDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(void *)(a1 + 32)  = v3;
  unsigned __int8 v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40)  = v4;
  sub_10023EC24(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t sub_10023EE30(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 25);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_10023EE7C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8)  = 0LL;
      *(void *)(result + 16)  = 0LL;
      *(void *)(result + 24)  = (unint64_t)-a2 << 8;
      *(void *)(result + 32)  = 0LL;
      *(_BYTE *)(result + 40)  = 0;
      return result;
    }

    *(_BYTE *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_10023EED8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24) >> 62;
  if ((_DWORD)v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_10023EEF4(uint64_t result)
{
  *(void *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10023EF04(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(void *)(result + 24)  = *(unsigned __int8 *)(result + 24) | (unint64_t)(a2 << 62);
  }

  else
  {
    *(void *)(result + 8)  = 0LL;
    *(void *)(result + 16)  = 0LL;
    *(void *)uint64_t result = (a2 - 3);
    *(_OWORD *)(result + 24)  = xmmword_10035D850;
    *(_BYTE *)(result + 40)  = 0;
  }

  return result;
}

uint64_t _s16P2PActivityStateOMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s16P2PActivityStateOMn);
}

uint64_t sub_10023EF44(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t sub_10023EF74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unownedRetain(*(void *)a2);
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v6;
  id v7 = v5;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *sub_10023EFC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = swift_unownedRetain(*(void *)a2);
  uint64_t v5 = *a1;
  *a1  = v4;
  swift_unownedRelease(v5);
  uint64_t v6 = *(void **)(a2 + 8);
  id v7 = (void *)a1[1];
  a1[1]  = (uint64_t)v6;
  id v8 = v6;

  *((_BYTE *)a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = a1[3];
  a1[3]  = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_10023F03C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_10023F090(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_1000208D8(v3, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10023F0D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16)  = 0LL;
    *(void *)(result + 24)  = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMn);
}

Swift::Int sub_10023F124(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for NANAttribute(0LL);
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1  = *(void *)(*v3 + 24);
  }
  sub_100002274((uint64_t *)&unk_100410530);
  int v39 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  Swift::Int v11 = result;
  if (*(void *)(v9 + 16))
  {
    int64_t v12 = 0LL;
    uint64_t v13 = *(void *)(v9 + 64);
    char v37 = (void *)(v9 + 64);
    uint64_t v14 = 1LL << *(_BYTE *)(v9 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v16 = v15 & v13;
    int64_t v35 = v3;
    int64_t v36 = (unint64_t)(v14 + 63) >> 6;
    Swift::Int v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }

      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v37;
        if (v21 >= v36) {
          goto LABEL_36;
        }
        unint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          int64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v22 = v37[v12];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_36:
              if ((v39 & 1) == 0)
              {
                Swift::Int result = swift_release(v9);
                int v3 = v35;
                goto LABEL_43;
              }

              uint64_t v34 = 1LL << *(_BYTE *)(v9 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *char v37 = -1LL << v34;
              }
              int v3 = v35;
              *(void *)(v9 + 16)  = 0LL;
              break;
            }

            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v12 >= v36) {
                  goto LABEL_36;
                }
                unint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v12 = v23;
          }
        }

Swift::Int sub_10023F470(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004104E0);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    unint64_t v31 = v3;
    int64_t v32 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_36;
        }
        unint64_t v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v21 = v33[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                int v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v33 = -1LL << v30;
              }
              int v3 = v31;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v32) {
                  goto LABEL_36;
                }
                unint64_t v21 = v33[v9];
                ++v22;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

Swift::Int sub_10023F748(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040CC70);
  char v42 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v40 = (void *)(v5 + 64);
    Swift::Int v41 = v5;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v38 = v3;
    int64_t v39 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v43 = (v12 - 1) & v12;
        int64_t v44 = v9;
        unint64_t v19 = __clz(__rbit64(v12)) | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v40;
        if (v20 >= v39) {
          goto LABEL_36;
        }
        unint64_t v21 = v40[v20];
        int64_t v22 = v9 + 1;
        if (!v21)
        {
          int64_t v22 = v20 + 1;
          if (v20 + 1 >= v39) {
            goto LABEL_36;
          }
          unint64_t v21 = v40[v22];
          if (!v21)
          {
            int64_t v23 = v20 + 2;
            if (v23 >= v39)
            {
LABEL_36:
              if ((v42 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                int v3 = v38;
                goto LABEL_43;
              }

              uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
              if (v37 >= 64) {
                bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v40 = -1LL << v37;
              }
              int v3 = v38;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v21 = v40[v23];
            if (!v21)
            {
              while (1)
              {
                int64_t v22 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v22 >= v39) {
                  goto LABEL_36;
                }
                unint64_t v21 = v40[v22];
                ++v23;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v22 = v23;
          }
        }

void sub_10023FA80(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004104D0);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    Swift::Int v41 = (void *)(v5 + 64);
    uint64_t v42 = v5;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v39 = v3;
    int64_t v40 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v44 = (v12 - 1) & v12;
        int64_t v45 = v9;
        unint64_t v20 = __clz(__rbit64(v12)) | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }

        if (v21 >= v40) {
          goto LABEL_36;
        }
        unint64_t v22 = v41[v21];
        int64_t v23 = v9 + 1;
        if (!v22)
        {
          int64_t v23 = v21 + 1;
          if (v21 + 1 >= v40) {
            goto LABEL_36;
          }
          unint64_t v22 = v41[v23];
          if (!v22)
          {
            int64_t v24 = v21 + 2;
            if (v24 >= v40)
            {
LABEL_36:
              if ((v43 & 1) == 0)
              {
                swift_release(v5);
                int v3 = v39;
                goto LABEL_43;
              }

              uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
              if (v38 >= 64) {
                bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *Swift::Int v41 = -1LL << v38;
              }
              int v3 = v39;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v22 = v41[v24];
            if (!v22)
            {
              while (1)
              {
                int64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v23 >= v40) {
                  goto LABEL_36;
                }
                unint64_t v22 = v41[v23];
                ++v24;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v23 = v24;
          }
        }

void sub_10023FDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004104F0);
  char v50 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    int64_t v10 = 0LL;
    uint64_t v47 = (void *)(v6 + 64);
    uint64_t v48 = v6;
    uint64_t v11 = 1LL << *(_BYTE *)(v6 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v45 = v4;
    int64_t v46 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = v8 + 64;
    uint64_t v49 = v8;
    while (1)
    {
      if (v13)
      {
        uint64_t v51 = (v13 - 1) & v13;
        int64_t v52 = v10;
        unint64_t v24 = __clz(__rbit64(v13)) | (v10 << 6);
      }

      else
      {
        int64_t v25 = v10 + 1;
        if (__OFADD__(v10, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }

        if (v25 >= v46) {
          goto LABEL_36;
        }
        unint64_t v26 = v47[v25];
        int64_t v27 = v10 + 1;
        if (!v26)
        {
          int64_t v27 = v25 + 1;
          if (v25 + 1 >= v46) {
            goto LABEL_36;
          }
          unint64_t v26 = v47[v27];
          if (!v26)
          {
            int64_t v28 = v25 + 2;
            if (v28 >= v46)
            {
LABEL_36:
              if ((v50 & 1) == 0)
              {
                swift_release(v6);
                uint64_t v4 = v45;
                goto LABEL_43;
              }

              uint64_t v44 = 1LL << *(_BYTE *)(v6 + 32);
              if (v44 >= 64) {
                bzero(v47, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v47 = -1LL << v44;
              }
              uint64_t v4 = v45;
              *(void *)(v6 + 16)  = 0LL;
              break;
            }

            unint64_t v26 = v47[v28];
            if (!v26)
            {
              while (1)
              {
                int64_t v27 = v28 + 1;
                if (__OFADD__(v28, 1LL)) {
                  goto LABEL_45;
                }
                if (v27 >= v46) {
                  goto LABEL_36;
                }
                unint64_t v26 = v47[v27];
                ++v28;
                if (v26) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v27 = v28;
          }
        }

uint64_t sub_100240168(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_100410480);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint8x8_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_100240434(uint64_t a1, uint64_t a2)
{
  return sub_100242A94(a1, a2, type metadata accessor for AWDLPeer, &qword_10040CCB8);
}

uint64_t sub_100240448(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v5;
  if (*(void *)(*v5 + 24) > a1) {
    a1  = *(void *)(*v5 + 24);
  }
  sub_100002274(a3);
  int v44 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v43 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v41 = v5;
  int64_t v42 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  while (1)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v42) {
      break;
    }
    int64_t v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_36:
          swift_release(v12);
          uint64_t v5 = v41;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v42) {
              goto LABEL_36;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v28;
      }
    }

Swift::Int sub_1002407E4(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_10040CDA8);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v39 = a2;
    BOOL v38 = v3;
    int64_t v9 = 0LL;
    uint64_t v41 = (void *)(v5 + 64);
    Swift::Int v42 = v5;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v40 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v43 = v9;
        unint64_t v17 = v16 | (v9 << 6);
      }

      else
      {
        int64_t v18 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v41;
        if (v18 >= v40) {
          goto LABEL_34;
        }
        unint64_t v19 = v41[v18];
        int64_t v20 = v9 + 1;
        if (!v19)
        {
          int64_t v20 = v18 + 1;
          if (v18 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v19 = v41[v20];
          if (!v19)
          {
            int64_t v21 = v18 + 2;
            if (v21 >= v40)
            {
LABEL_34:
              if ((v39 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint8x8_t v3 = v38;
                goto LABEL_41;
              }

              uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
              if (v37 >= 64) {
                bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v41 = -1LL << v37;
              }
              uint8x8_t v3 = v38;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v19 = v41[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v20 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v19 = v41[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v20 = v21;
          }
        }

uint64_t sub_100240B10(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_10040CD90);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_100240E24(uint64_t a1, uint64_t a2)
{
  return sub_100240E54(a1, a2, (uint64_t *)&unk_10040CD00);
}

Swift::Int sub_100240E30(uint64_t a1, uint64_t a2)
{
  return sub_100240E54(a1, a2, &qword_10040CCF0);
}

Swift::Int sub_100240E3C(uint64_t a1, uint64_t a2)
{
  return sub_100240E54(a1, a2, &qword_10040CCF8);
}

Swift::Int sub_100240E48(uint64_t a1, uint64_t a2)
{
  return sub_100240E54(a1, a2, &qword_10040CCE8);
}

Swift::Int sub_100240E54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100002274(a3);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  Swift::Int v9 = result;
  if (*(void *)(v6 + 16))
  {
    uint64_t v32 = v4;
    int64_t v10 = 0LL;
    uint64_t v34 = (void *)(v6 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v6 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v33 = (unint64_t)(v11 + 63) >> 6;
    Swift::Int v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v10 << 6);
      }

      else
      {
        int64_t v21 = v10 + 1;
        if (__OFADD__(v10, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = v6 + 64;
        if (v21 >= v33) {
          goto LABEL_36;
        }
        unint64_t v22 = v34[v21];
        ++v10;
        if (!v22)
        {
          int64_t v10 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_36;
          }
          unint64_t v22 = v34[v10];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v6);
                uint64_t v4 = v32;
                goto LABEL_43;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v6 + 32);
              if (v31 >= 64) {
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v34 = -1LL << v31;
              }
              uint64_t v4 = v32;
              *(void *)(v6 + 16)  = 0LL;
              break;
            }

            unint64_t v22 = v34[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v10 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v10 >= v33) {
                  goto LABEL_36;
                }
                unint64_t v22 = v34[v10];
                ++v23;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v10 = v23;
          }
        }

uint64_t sub_100241120(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v38 = *(void *)(type metadata accessor for NANPeer.Service(0LL) - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1  = *(void *)(*v3 + 24);
  }
  sub_100002274(&qword_10040CCE0);
  int v39 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    int64_t v35 = v3;
    int64_t v11 = 0LL;
    uint64_t v12 = *(void *)(v8 + 64);
    char v37 = (void *)(v8 + 64);
    uint64_t v13 = 1LL << *(_BYTE *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v15 = v14 & v12;
    int64_t v36 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v11 << 6);
      }

      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        uint64_t result = (uint64_t)v37;
        if (v20 >= v36) {
          goto LABEL_36;
        }
        unint64_t v21 = v37[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v21 = v37[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_36:
              if ((v39 & 1) == 0)
              {
                uint64_t result = swift_release(v8);
                uint8x8_t v3 = v35;
                goto LABEL_43;
              }

              uint64_t v33 = 1LL << *(_BYTE *)(v8 + 32);
              if (v33 >= 64) {
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *char v37 = -1LL << v33;
              }
              uint8x8_t v3 = v35;
              *(void *)(v8 + 16)  = 0LL;
              break;
            }

            unint64_t v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v11 >= v36) {
                  goto LABEL_36;
                }
                unint64_t v21 = v37[v11];
                ++v22;
                if (v21) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v11 = v22;
          }
        }

uint64_t sub_100241454(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_100410540);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (void *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v19 >= v14) {
          goto LABEL_34;
        }
        unint64_t v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v20 = v10[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint8x8_t v3 = v32;
                goto LABEL_41;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v31;
              }
              uint8x8_t v3 = v32;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v20 = v10[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

Swift::Int sub_100241704(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_10040CD10);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    int64_t v9 = 0LL;
    char v37 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v9 << 6);
      }

      else
      {
        int64_t v18 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v18 >= v36) {
          goto LABEL_34;
        }
        unint64_t v19 = v37[v18];
        ++v9;
        if (!v19)
        {
          int64_t v9 = v18 + 1;
          if (v18 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v19 = v37[v9];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v36)
            {
LABEL_34:
              if ((v35 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint8x8_t v3 = v34;
                goto LABEL_41;
              }

              uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *char v37 = -1LL << v33;
              }
              uint8x8_t v3 = v34;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v19 = v37[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v9 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v19 = v37[v9];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v20;
          }
        }

Swift::Int sub_1002419F0(uint64_t a1, uint64_t a2)
{
  return sub_100241A04(a1, a2, type metadata accessor for NANPeer.Service.AuthenticationStatus, &qword_10040FE80);
}

Swift::Int sub_100241A04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  char v54 = a3;
  uint64_t v48 = *(void *)(a3(0LL) - 8);
  __chkstk_darwin();
  uint64_t v53 = (uint64_t)&v43 - v9;
  Swift::Int v10 = *v6;
  if (*(void *)(*v6 + 24) > a1) {
    a1  = *(void *)(*v6 + 24);
  }
  sub_100002274(a4);
  int v49 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  Swift::Int v12 = result;
  if (*(void *)(v10 + 16))
  {
    int64_t v13 = 0LL;
    uint64_t v14 = *(void *)(v10 + 64);
    uint64_t v44 = v6;
    __int128 v45 = (void *)(v10 + 64);
    uint64_t v15 = 1LL << *(_BYTE *)(v10 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v17 = v16 & v14;
    int64_t v46 = (unint64_t)(v15 + 63) >> 6;
    Swift::Int v47 = v10;
    Swift::Int v18 = result + 64;
    while (1)
    {
      if (v17)
      {
        uint64_t v50 = (v17 - 1) & v17;
        unint64_t v21 = __clz(__rbit64(v17)) | (v13 << 6);
      }

      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v45;
        if (v22 >= v46) {
          goto LABEL_36;
        }
        unint64_t v23 = v45[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v46) {
            goto LABEL_36;
          }
          unint64_t v23 = v45[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v46)
            {
LABEL_36:
              if ((v49 & 1) == 0)
              {
                Swift::Int result = swift_release(v10);
                uint64_t v6 = v44;
                goto LABEL_43;
              }

              uint64_t v42 = 1LL << *(_BYTE *)(v10 + 32);
              if (v42 >= 64) {
                bzero(v45, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *__int128 v45 = -1LL << v42;
              }
              uint64_t v6 = v44;
              *(void *)(v10 + 16)  = 0LL;
              break;
            }

            unint64_t v23 = v45[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v13 >= v46) {
                  goto LABEL_36;
                }
                unint64_t v23 = v45[v13];
                ++v24;
                if (v23) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v24;
          }
        }

Swift::Int sub_100241DC4(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_100405150);
  char v44 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v42 = (void *)(v5 + 64);
    Swift::Int v43 = v5;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    BOOL v40 = v3;
    int64_t v41 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v45 = (v12 - 1) & v12;
        int64_t v46 = v9;
        unint64_t v20 = __clz(__rbit64(v12)) | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v42;
        if (v21 >= v41) {
          goto LABEL_36;
        }
        unint64_t v22 = v42[v21];
        int64_t v23 = v9 + 1;
        if (!v22)
        {
          int64_t v23 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_36;
          }
          unint64_t v22 = v42[v23];
          if (!v22)
          {
            int64_t v24 = v21 + 2;
            if (v24 >= v41)
            {
LABEL_36:
              if ((v44 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint8x8_t v3 = v40;
                goto LABEL_43;
              }

              uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
              if (v39 >= 64) {
                bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v42 = -1LL << v39;
              }
              uint8x8_t v3 = v40;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v22 = v42[v24];
            if (!v22)
            {
              while (1)
              {
                int64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v23 >= v41) {
                  goto LABEL_36;
                }
                unint64_t v22 = v42[v23];
                ++v24;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v23 = v24;
          }
        }

Swift::Int sub_10024210C(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040CCD0);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v40 = a2;
    uint64_t v39 = v3;
    int64_t v9 = 0LL;
    uint64_t v42 = (void *)(v5 + 64);
    Swift::Int v43 = v5;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v41 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v42;
        if (v19 >= v41) {
          goto LABEL_34;
        }
        unint64_t v20 = v42[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v20 = v42[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v41)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint8x8_t v3 = v39;
                goto LABEL_41;
              }

              uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
              if (v38 >= 64) {
                bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v42 = -1LL << v38;
              }
              uint8x8_t v3 = v39;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v20 = v42[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v20 = v42[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

Swift::Int sub_10024241C(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040CCA0);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v9 = 0LL;
    unint64_t v33 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_36;
        }
        unint64_t v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v21 = v33[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint8x8_t v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v33 = -1LL << v30;
              }
              uint8x8_t v3 = v31;
              *(void *)(v5 + 16)  = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v32) {
                  goto LABEL_36;
                }
                unint64_t v21 = v33[v9];
                ++v22;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

uint64_t sub_1002426EC(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  int64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1  = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_10040CD80);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v42 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  char v40 = v2;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    unint64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v25 = v42[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v10);
          uint8x8_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v41) {
              goto LABEL_36;
            }
            unint64_t v25 = v42[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

Swift::Int sub_100242A94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = a3;
  uint64_t v7 = v4;
  uint64_t v49 = *(void *)(a3(0LL) - 8);
  __chkstk_darwin();
  uint64_t v53 = (uint64_t)&v44 - v10;
  Swift::Int v11 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1  = *(void *)(*v7 + 24);
  }
  sub_100002274(a4);
  int v50 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  Swift::Int v13 = result;
  if (*(void *)(v11 + 16))
  {
    int64_t v14 = 0LL;
    uint64_t v15 = *(void *)(v11 + 64);
    char v44 = v7;
    uint64_t v45 = (void *)(v11 + 64);
    uint64_t v16 = 1LL << *(_BYTE *)(v11 + 32);
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v18 = v17 & v15;
    int64_t v46 = (unint64_t)(v16 + 63) >> 6;
    Swift::Int v47 = v11;
    Swift::Int v19 = result + 64;
    uint64_t v48 = v6;
    while (1)
    {
      if (v18)
      {
        uint64_t v51 = (v18 - 1) & v18;
        unint64_t v22 = __clz(__rbit64(v18)) | (v14 << 6);
      }

      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v45;
        if (v23 >= v46) {
          goto LABEL_36;
        }
        unint64_t v24 = v45[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v46) {
            goto LABEL_36;
          }
          unint64_t v24 = v45[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v46)
            {
LABEL_36:
              if ((v50 & 1) == 0)
              {
                Swift::Int result = swift_release(v11);
                uint64_t v7 = v44;
                goto LABEL_43;
              }

              uint64_t v43 = 1LL << *(_BYTE *)(v11 + 32);
              if (v43 >= 64) {
                bzero(v45, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v45 = -1LL << v43;
              }
              uint64_t v7 = v44;
              *(void *)(v11 + 16)  = 0LL;
              break;
            }

            unint64_t v24 = v45[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_45;
                }
                if (v14 >= v46) {
                  goto LABEL_36;
                }
                unint64_t v24 = v45[v14];
                ++v25;
                if (v24) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v25;
          }
        }

Swift::Int sub_100242E54(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v46 = *(void *)(sub_100002274((uint64_t *)&unk_10040CC50) - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1  = *(void *)(*v3 + 24);
  }
  sub_100002274((uint64_t *)&unk_1004104B0);
  int v47 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  Swift::Int v10 = result;
  if (*(void *)(v8 + 16))
  {
    int64_t v11 = 0LL;
    uint64_t v12 = *(void *)(v8 + 64);
    BOOL v41 = v3;
    uint64_t v42 = (void *)(v8 + 64);
    uint64_t v13 = 1LL << *(_BYTE *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v15 = v14 & v12;
    int64_t v43 = (unint64_t)(v13 + 63) >> 6;
    Swift::Int v44 = v8;
    Swift::Int v16 = result + 64;
    uint64_t v45 = v7;
    while (1)
    {
      if (v15)
      {
        uint64_t v48 = (v15 - 1) & v15;
        unint64_t v19 = __clz(__rbit64(v15)) | (v11 << 6);
      }

      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v42;
        if (v20 >= v43) {
          goto LABEL_36;
        }
        unint64_t v21 = v42[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v43) {
            goto LABEL_36;
          }
          unint64_t v21 = v42[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v43)
            {
LABEL_36:
              if ((v47 & 1) == 0)
              {
                Swift::Int result = swift_release(v8);
                uint8x8_t v3 = v41;
                goto LABEL_43;
              }

              uint64_t v40 = 1LL << *(_BYTE *)(v8 + 32);
              if (v40 >= 64) {
                bzero(v42, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v42 = -1LL << v40;
              }
              uint8x8_t v3 = v41;
              *(void *)(v8 + 16)  = 0LL;
              break;
            }

            unint64_t v21 = v42[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v11 >= v43) {
                  goto LABEL_36;
                }
                unint64_t v21 = v42[v11];
                ++v22;
                if (v21) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v11 = v22;
          }
        }

void sub_10024320C(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  int64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1  = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_100410560);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  int64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  BOOL v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  swift_retain();
  int64_t v18 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v22 >= v42) {
      break;
    }
    uint64_t v23 = v43;
    unint64_t v24 = v43[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v24 = v43[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint8x8_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = v43[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v42) {
              goto LABEL_36;
            }
            unint64_t v24 = v43[v18];
            ++v25;
            if (v24) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v25;
      }
    }

void sub_1002435A0(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  int64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1  = *(void *)(*v2 + 24);
  }
  sub_100002274(&qword_10040CD20);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  int64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  BOOL v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  swift_retain();
  int64_t v18 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }

    if (v22 >= v42) {
      break;
    }
    uint64_t v23 = v43;
    unint64_t v24 = v43[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v24 = v43[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint8x8_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = v43[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v42) {
              goto LABEL_36;
            }
            unint64_t v24 = v43[v18];
            ++v25;
            if (v24) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v25;
      }
    }

void sub_100243934(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100002274((uint64_t *)&unk_10040CCC0);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v39 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    BOOL v41 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v40 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    swift_retain();
    int64_t v13 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v11)
      {
        unint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v23 = v22 | (v13 << 6);
      }

      else
      {
        int64_t v24 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }

        if (v24 >= v40) {
          goto LABEL_39;
        }
        unint64_t v25 = v41[v24];
        ++v13;
        if (!v25)
        {
          int64_t v13 = v24 + 1;
          if (v24 + 1 >= v40) {
            goto LABEL_39;
          }
          unint64_t v25 = v41[v13];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v40)
            {
LABEL_39:
              swift_release(v5);
              uint8x8_t v3 = v39;
              if ((v43 & 1) != 0)
              {
                uint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
                if (v38 >= 64) {
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *BOOL v41 = -1LL << v38;
                }
                *(void *)(v5 + 16)  = 0LL;
              }

              break;
            }

            unint64_t v25 = v41[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v13 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_46;
                }
                if (v13 >= v40) {
                  goto LABEL_39;
                }
                unint64_t v25 = v41[v13];
                ++v26;
                if (v25) {
                  goto LABEL_36;
                }
              }
            }

            int64_t v13 = v26;
          }
        }

uint64_t sub_100243CA0(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100327790(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      Swift::Int v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for NANAttribute(0LL);
        return sub_10002266C( a1,  v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v10,  type metadata accessor for NANAttribute);
      }

      return sub_100244D50(v10, a2, a1, v16, type metadata accessor for NANAttribute);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100329D68();
      goto LABEL_7;
    }

    sub_10023F124(v13, a3 & 1);
    unint64_t v20 = sub_100327790(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      Swift::Int v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_100244D50(v10, a2, a1, v16, type metadata accessor for NANAttribute);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANAttribute.AttributeType);
  __break(1u);
  return result;
}

uint64_t sub_100243DC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002441C4(a1, a2, a3, a4, (void (*)(void))sub_100329D7C, (uint64_t *)&unk_10040CC80);
}

void sub_100243DD4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v10 = sub_10001C15C(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v7[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      Swift::Int v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        swift_release(*(void *)(v17 + 8 * v10));
        *(void *)(v17 + 8 * v10)  = a1;
        return;
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10032A0E0();
      goto LABEL_7;
    }

    sub_10023FA80(v13, a3 & 1);
    unint64_t v18 = sub_10001C15C(v8);
    if ((v14 & 1) == (v19 & 1))
    {
      unint64_t v10 = v18;
      Swift::Int v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100244B78(v10, v8, a1, v16);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
  __break(1u);
}

uint64_t sub_100243EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v11 = (void *)*v5;
  uint64_t v12 = a4 & 0xFFFFFFFFFFFFLL;
  unint64_t v14 = sub_10001C15C(a4 & 0xFFFFFFFFFFFFLL);
  uint64_t v15 = v11[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v11[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      unint64_t v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = v20[7] + 24 * v14;
        uint64_t result = sub_100020B40(*(void *)(v21 + 8), *(void *)(v21 + 16));
        *(_WORD *)uint64_t v21 = a1;
        *(_BYTE *)(v21 + 2)  = BYTE2(a1);
        *(_BYTE *)(v21 + 3)  = BYTE3(a1);
        *(_BYTE *)(v21 + 4)  = BYTE4(a1);
        *(_BYTE *)(v21 + 5)  = BYTE5(a1);
        *(_BYTE *)(v21 + 6)  = BYTE6(a1);
        *(void *)(v21 + 8)  = a2;
        *(void *)(v21 + 16)  = a3;
        return result;
      }

      return sub_100244BEC(v14, v12, a1 & 0xFFFFFFFFFFFFFFLL, a2, a3, v20);
    }

    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_10032A298();
      goto LABEL_7;
    }

    sub_10023FDB8(v17, a5 & 1);
    unint64_t v23 = sub_10001C15C(v12);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v6;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_100244BEC(v14, v12, a1 & 0xFFFFFFFFFFFFFFLL, a2, a3, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
  __break(1u);
  return result;
}

uint64_t sub_100244050(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002445B8( a1,  a2,  a3,  (void (*)(void))sub_10032A470,  type metadata accessor for NANInternetSharingStatistics.Requester,  &qword_1004050C8);
}

id sub_10024406C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1003277F4((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = sub_10032A484();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      *(void *)(v15[7] + 8 * v9)  = a1;
      return result;
    }

uint64_t sub_1002441B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002441C4(a1, a2, a3, a4, (void (*)(void))sub_10032A638, (uint64_t *)&unk_100410570);
}

uint64_t sub_1002441C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), uint64_t *a6)
{
  uint64_t v30 = a6;
  uint64_t v31 = a1;
  char v8 = (void **)v6;
  uint64_t v32 = a2;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (void *)*v6;
  unint64_t v17 = sub_10001C578(a3);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v23 = *v8;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      char v24 = (void *)(v23[7] + 16 * v17);
      uint64_t result = swift_release(v24[1]);
      uint64_t v26 = v32;
      *char v24 = v31;
      v24[1]  = v26;
      return result;
    }

    goto LABEL_11;
  }

  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }

  sub_100240448(v20, a4 & 1, v30);
  unint64_t v27 = sub_10001C578(a3);
  if ((v21 & 1) != (v28 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return result;
  }

  unint64_t v17 = v27;
  unint64_t v23 = *v8;
  if ((v21 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  return sub_100244CA4(v17, (uint64_t)v14, v31, v32, v23);
}

uint64_t sub_100244338(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v10 = sub_10001C15C(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v7[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(void *)(v16[7] + 8 * v10)  = a1;
        return result;
      }

      return sub_100244B78(v10, v8, a1, v16);
    }

    if (v15 >= result && (a3 & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10032A880();
      goto LABEL_7;
    }

    sub_1002407E4(result, a3 & 1);
    uint64_t result = sub_10001C15C(v8);
    if ((v14 & 1) == (v17 & 1))
    {
      unint64_t v10 = result;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_100244B78(v10, v8, a1, v16);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
  __break(1u);
  return result;
}

void sub_100244440(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10001C008(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10032AA24();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      swift_bridgeObjectRelease(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12)  = a1;
      return;
    }

uint64_t sub_10024459C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002445B8( a1,  a2,  a3,  (void (*)(void))sub_10032B2F8,  type metadata accessor for NANPeer.Service.AuthenticationStatus,  &qword_10040FE80);
}

uint64_t sub_1002445B8( uint64_t a1, uint64_t a2, char a3, void (*a4)(void), uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v10 = (void **)v6;
  uint64_t v13 = (void *)*v6;
  uint64_t v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v16 = sub_10001C08C(a2 & 0xFFFFFFFFFFFFFFLL);
  uint64_t v17 = v13[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    char v20 = v15;
    uint64_t v21 = v13[3];
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v22 = *v10;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        uint64_t v23 = v22[7];
        uint64_t v24 = a5(0LL);
        return sub_10002266C(a1, v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v16, a5);
      }

      return sub_100244DF0(v16, v14, a1, v22, a5);
    }

    if (v21 >= v19 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }

    sub_100241A04(v19, a3 & 1, a5, a6);
    unint64_t v26 = sub_10001C08C(v14);
    if ((v20 & 1) == (v27 & 1))
    {
      unint64_t v16 = v26;
      uint64_t v22 = *v10;
      if ((v20 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_100244DF0(v16, v14, a1, v22, a5);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANPeerServiceIdentifier);
  __break(1u);
  return result;
}

uint64_t sub_1002446EC(__int128 *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10001C578(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      char v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = (void *)(v20[7] + 40 * v14);
        sub_100002AC4(v21);
        return sub_1000589F8(a1, (uint64_t)v21);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10032BA84();
      goto LABEL_7;
    }

    sub_1002426EC(v17, a3 & 1);
    unint64_t v23 = sub_10001C578(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      char v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100244EBC(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10024486C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100244A00(a1, a2, a3, (void (*)(void))sub_10032BCC4, type metadata accessor for NANPeer, &qword_10040FE70);
}

void sub_100244888(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  char v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10001C578(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14)  = a1;
      return;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10032C154();
    goto LABEL_7;
  }

  sub_10024320C(v17, a3 & 1);
  unint64_t v22 = sub_10001C578(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v14 = v22;
  char v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_100245018(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1002449E4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100244A00(a1, a2, a3, (void (*)(void))sub_10032A624, type metadata accessor for AWDLPeer, &qword_10040CCB8);
}

uint64_t sub_100244A00( uint64_t a1, uint64_t a2, char a3, void (*a4)(void), uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v10 = (void **)v6;
  char v13 = (void *)*v6;
  uint64_t v14 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v16 = sub_10001C15C(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v17 = v13[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    char v20 = v15;
    uint64_t v21 = v13[3];
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v22 = *v10;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        uint64_t v23 = v22[7];
        uint64_t v24 = a5(0LL);
        return sub_10002266C(a1, v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v16, a5);
      }

      return sub_1002450BC(v16, v14, a1, v22, a5);
    }

    if (v21 >= v19 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }

    sub_100242A94(v19, a3 & 1, a5, a6);
    unint64_t v26 = sub_10001C15C(v14);
    if ((v20 & 1) == (v27 & 1))
    {
      unint64_t v16 = v26;
      unint64_t v22 = *v10;
      if ((v20 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_1002450BC(v16, v14, a1, v22, a5);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
  __break(1u);
  return result;
}

unint64_t sub_100244B34(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(a4[6] + result)  = a2;
  *(void *)(a4[7] + 8 * result)  = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2]  = v6;
  }
  return result;
}

unint64_t sub_100244B78(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  uint64_t v4 = a4[6] + 6 * result;
  *(_WORD *)uint64_t v4 = a2;
  *(_BYTE *)(v4 + 2)  = BYTE2(a2);
  *(_BYTE *)(v4 + 3)  = BYTE3(a2);
  *(_BYTE *)(v4 + 4)  = BYTE4(a2);
  *(_BYTE *)(v4 + 5)  = BYTE5(a2);
  *(void *)(a4[7] + 8 * result)  = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2]  = v7;
  }
  return result;
}

unint64_t sub_100244BEC( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = a6[6] + 6 * result;
  *(_WORD *)uint64_t v6 = a2;
  *(_BYTE *)(v6 + 2)  = BYTE2(a2);
  *(_BYTE *)(v6 + 3)  = BYTE3(a2);
  *(_BYTE *)(v6 + 4)  = BYTE4(a2);
  *(_BYTE *)(v6 + 5)  = BYTE5(a2);
  uint64_t v7 = a6[7] + 24 * result;
  *(_WORD *)uint64_t v7 = a3;
  *(_BYTE *)(v7 + 2)  = BYTE2(a3);
  *(_BYTE *)(v7 + 3)  = BYTE3(a3);
  *(_BYTE *)(v7 + 4)  = BYTE4(a3);
  *(_BYTE *)(v7 + 5)  = BYTE5(a3);
  *(_BYTE *)(v7 + 6)  = BYTE6(a3);
  *(void *)(v7 + 8)  = a4;
  *(void *)(v7 + 16)  = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2]  = v10;
  }
  return result;
}

uint64_t sub_100244CA4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  char v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1]  = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2]  = v16;
  }
  return result;
}

uint64_t sub_100244D44(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  return sub_100244D50(a1, a2, a3, a4, type metadata accessor for NANPeer.Service);
}

uint64_t sub_100244D50( unint64_t a1, char a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_BYTE *)(a4[6] + a1)  = a2;
  uint64_t v9 = a4[7];
  uint64_t v10 = a5(0LL);
  uint64_t result = sub_100022628(a3, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1, a5);
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2]  = v14;
  }
  return result;
}

uint64_t sub_100244DE4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100244DF0(a1, a2, a3, a4, type metadata accessor for NANPeer.Service.AuthenticationStatus);
}

uint64_t sub_100244DF0( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v9 = a4[6] - a1 + 8 * a1;
  *(_WORD *)uint64_t v9 = a2;
  *(_BYTE *)(v9 + 2)  = BYTE2(a2);
  *(_BYTE *)(v9 + 3)  = BYTE3(a2);
  *(_BYTE *)(v9 + 4)  = BYTE4(a2);
  *(_BYTE *)(v9 + 5)  = BYTE5(a2);
  *(_BYTE *)(v9 + 6)  = BYTE6(a2);
  uint64_t v10 = a4[7];
  uint64_t v11 = a5(0LL);
  uint64_t result = sub_100022628(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1, a5);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2]  = v15;
  }
  return result;
}

uint64_t sub_100244EBC(unint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t result = sub_1000589F8(a3, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

uint64_t sub_100244F60(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v7 = a4[6] + 6 * a1;
  *(_WORD *)uint64_t v7 = a2;
  *(_BYTE *)(v7 + 2)  = BYTE2(a2);
  *(_BYTE *)(v7 + 3)  = BYTE3(a2);
  *(_BYTE *)(v7 + 4)  = BYTE4(a2);
  *(_BYTE *)(v7 + 5)  = BYTE5(a2);
  uint64_t v8 = a4[7];
  uint64_t v9 = sub_100002274((uint64_t *)&unk_10040CC50);
  uint64_t result = sub_100245CDC(a3, v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

uint64_t sub_100245018(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1)  = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

uint64_t sub_1002450B0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1002450BC(a1, a2, a3, a4, type metadata accessor for AWDLPeer);
}

uint64_t sub_1002450BC( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v9 = a4[6] + 6 * a1;
  *(_WORD *)uint64_t v9 = a2;
  *(_BYTE *)(v9 + 2)  = BYTE2(a2);
  *(_BYTE *)(v9 + 3)  = BYTE3(a2);
  *(_BYTE *)(v9 + 4)  = BYTE4(a2);
  *(_BYTE *)(v9 + 5)  = BYTE5(a2);
  uint64_t v10 = a4[7];
  uint64_t v11 = a5(0LL);
  uint64_t result = sub_100022628(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1, a5);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2]  = v15;
  }
  return result;
}

unint64_t sub_100245180( unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8)  = a3;
  *(_BYTE *)(v6 + 16)  = a4 & 1;
  *(_BYTE *)(v6 + 17)  = HIBYTE(a4);
  *(void *)(a6[7] + 8 * result)  = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2]  = v9;
  }
  return result;
}

uint64_t sub_1002451DC(void *a1, char *a2)
{
  uint64_t v52 = swift_allocObject(&unk_1003F3718, 24LL, 7LL);
  *(void *)(v52 + 16)  = a2;
  uint64_t v53 = a1;
  uint64_t v4 = (void *)*a1;
  uint64_t v59 = v4[2];
  if (v59)
  {
    sub_100058CD0(0LL, (unint64_t *)&qword_100405DF0, &OBJC_CLASS___NSObject_ptr);
    uint64_t v62 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    uint64_t v63 = a2;
    uint64_t v5 = a2;
    swift_bridgeObjectRetain(v4);
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    while (1)
    {
      BOOL v8 = v4;
      uint64_t v9 = &v4[v6];
      uint64_t v10 = (char *)v4[v6 + 4];
      uint64_t v11 = v4[v6 + 5];
      uint64_t v12 = v9[6];
      uint64_t v13 = *(void *)&v10[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
      uint64_t v14 = *(void *)&v63[v62];
      uint64_t v64 = v10;
      sub_100245900(v11, v12);
      LOBYTE(v13)  = static NSObject.== infix(_:_:)(v13, v14);

      sub_100245908(v11, v12);
      if ((v13 & 1) != 0) {
        break;
      }
      v6 += 4LL;
      ++v7;
      uint64_t v4 = v8;
      if (v59 == v7)
      {
        swift_bridgeObjectRelease(v8);
        unint64_t v15 = v8[2];
LABEL_9:
        a2  = v63;
        goto LABEL_10;
      }
    }

    uint64_t v17 = v8;
    uint64_t result = swift_bridgeObjectRelease(v8);
    unint64_t v19 = v7 + 1;
    if (!__OFADD__(v7, 1LL))
    {
      unint64_t v15 = v7;
      unint64_t v20 = v17[2];
      if (v19 == v20) {
        goto LABEL_9;
      }
      a2  = v63;
      uint64_t v21 = v6 * 8;
      while (v19 < v20)
      {
        unint64_t v24 = v19;
        uint64_t v65 = v17;
        uint64_t v58 = v21;
        uint64_t v25 = (char *)v17 + v21;
        unint64_t v26 = (char *)*((void *)v25 + 8);
        uint64_t v27 = *((void *)v25 + 9);
        uint64_t v28 = *((void *)v25 + 10);
        uint64_t v29 = *(void *)&v26[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
        uint64_t v30 = *(void *)&a2[v62];
        double v60 = v26;
        sub_100245900(v27, v28);
        LOBYTE(v29)  = static NSObject.== infix(_:_:)(v29, v30);

        uint64_t result = sub_100245908(v27, v28);
        if ((v29 & 1) != 0)
        {
          a2  = v63;
          uint64_t v17 = v65;
          uint64_t v22 = v58;
          unint64_t v23 = v24;
        }

        else
        {
          unint64_t v23 = v24;
          if (v24 == v15)
          {
            a2  = v63;
            uint64_t v17 = v65;
            uint64_t v22 = v58;
            BOOL v31 = __OFADD__(v15++, 1LL);
            if (v31) {
              goto LABEL_30;
            }
          }

          else
          {
            if ((v15 & 0x8000000000000000LL) != 0) {
              goto LABEL_31;
            }
            unint64_t v32 = v65[2];
            if (v15 >= v32) {
              goto LABEL_32;
            }
            if (v24 >= v32) {
              goto LABEL_33;
            }
            uint64_t v61 = 4 * v15;
            uint64_t v33 = (uint64_t)&v65[4 * v15 + 4];
            uint64_t v34 = *(void *)(v33 + 8);
            uint64_t v35 = *(void *)(v33 + 16);
            char v36 = *(_BYTE *)(v33 + 24);
            uint64_t v37 = *((void *)v25 + 9);
            char v57 = (void *)*((void *)v25 + 8);
            uint64_t v38 = *((void *)v25 + 10);
            char v39 = v25[88];
            id v40 = *(id *)v33;
            uint64_t v56 = v34;
            uint64_t v41 = v34;
            uint64_t v42 = v37;
            char v55 = v36;
            sub_100245900(v41, v35);
            id v43 = v57;
            sub_100245900(v37, v38);
            id v54 = v40;
            if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0) {
              uint64_t v65 = sub_10032CC14(v65);
            }
            Swift::Int v44 = &v65[v61];
            int v45 = (void *)v65[v61 + 4];
            uint64_t v46 = v65[v61 + 5];
            uint64_t v47 = v65[v61 + 6];
            v44[4]  = v43;
            v44[5]  = v42;
            uint64_t v17 = v65;
            v44[6]  = v38;
            *((_BYTE *)v44 + 56)  = v39;

            uint64_t result = sub_100245908(v46, v47);
            if (v24 >= v65[2]) {
              goto LABEL_34;
            }
            uint64_t v22 = v58;
            uint64_t v48 = (char *)v65 + v58;
            int64_t v49 = *(void **)((char *)v65 + v58 + 64);
            uint64_t v50 = *(void *)((char *)v65 + v58 + 72);
            uint64_t v51 = *(void *)((char *)v65 + v58 + 80);
            *((void *)v48 + 8)  = v54;
            *((void *)v48 + 9)  = v56;
            *((void *)v48 + 10)  = v35;
            v48[88]  = v55;

            uint64_t result = sub_100245908(v50, v51);
            unint64_t v23 = v24;
            *uint64_t v53 = v65;
            a2  = v63;
            BOOL v31 = __OFADD__(v15++, 1LL);
            if (v31) {
              goto LABEL_30;
            }
          }
        }

        unint64_t v19 = v23 + 1;
        unint64_t v20 = v17[2];
        uint64_t v21 = v22 + 32;
        if (v19 == v20) {
          goto LABEL_10;
        }
      }

      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    uint64_t v16 = a2;
    unint64_t v15 = 0LL;
LABEL_10:
    swift_release(v52);

    return v15;
  }

  return result;
}

uint64_t sub_1002455C8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t sub_10024566C(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

unint64_t sub_100245750()
{
  unint64_t result = qword_100410460;
  if (!qword_100410460)
  {
    uint64_t v1 = sub_100058CD0( 255LL,  (unint64_t *)&unk_10040CC00,  &OBJC_CLASS___AWDLTrafficRegistrationConfiguration_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100410460);
  }

  return result;
}

uint64_t sub_1002457A8(void **a1)
{
  return sub_10023A074(a1, v1);
}

uint64_t sub_1002457C0(void **a1)
{
  return sub_10023A354(a1, v1);
}

uint64_t sub_1002457D8(Swift::UInt *a1)
{
  return sub_10023A638(a1, v1);
}

uint64_t sub_1002457F0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245800()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245810()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100245834()
{
  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_100245858()
{
  return sub_100237EF8( *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(unsigned __int8 *)(v0 + 72),  *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_100245870(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_100245880(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100245888()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1002458AC()
{
  return sub_100245BB8((uint64_t (*)(void, void, void, void, void, void, void, void))sub_100238754);
}

uint64_t sub_1002458BC()
{
  return sub_1002459DC( (uint64_t)&unk_1003F2B38,  (uint64_t)&unk_1003F2B60,  (uint64_t)sub_1002474A4,  (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_10022F420);
}

uint64_t sub_1002458E0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1002458F0()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245900(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_100245908(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_100245910@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100245954(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10022CF6C, a3);
}

uint64_t _s16P2PActivityStateO14ActionRequiredOMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s16P2PActivityStateO14ActionRequiredOMn);
}

uint64_t sub_100245938@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100245954(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10022C9A8, a3);
}

uint64_t sub_100245954@<X0>( unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, _BYTE *a4@<X8>)
{
  return sub_10022F354(a1, a2, v4[2], v4[3], v4[4], v4[5], v4[6], a4, a3);
}

uint64_t sub_100245988()
{
  return swift_deallocObject(v0, 89LL, 7LL);
}

uint64_t sub_1002459B8()
{
  return sub_1002459DC( (uint64_t)&unk_1003F2BD8,  (uint64_t)&unk_1003F2C00,  (uint64_t)sub_1002474A4,  (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_10022F4A0);
}

uint64_t sub_1002459DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t, uint64_t))
{
  return sub_100238F68( *(void *)(v4 + 56),  *(void *)(v4 + 64),  *(unsigned __int8 *)(v4 + 72),  *(void *)(v4 + 80),  *(_BYTE *)(v4 + 88),  *(void *)(v4 + 16),  *(void *)(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40),  *(void *)(v4 + 48),  a1,  a2,  a3,  a4);
}

uint64_t sub_100245A30()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245A40()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245A50()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245A60()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245A70()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245A80()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245A94()
{
  return sub_10023344C( *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64),  *(unsigned __int8 *)(v0 + 65),  *(void **)(v0 + 72),  *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_100245AD0()
{
  return sub_100245ADC((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_100233EEC);
}

uint64_t sub_100245ADC( uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void))
{
  return a1( *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(unsigned __int8 *)(v1 + 72),  *(void *)(v1 + 80),  *(unsigned __int8 *)(v1 + 88),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100245B1C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245B2C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245B3C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245B4C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245B5C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245B6C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245B80()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100245BAC()
{
  return sub_100245BB8((uint64_t (*)(void, void, void, void, void, void, void, void))sub_1002317E4);
}

uint64_t sub_100245BB8( uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1( *(void *)(v1 + 56),  *(unsigned __int8 *)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100245BD8()
{
  sub_10023ECD8(*(void *)(v0 + 80), *(_BYTE *)(v0 + 88));
  return swift_deallocObject(v0, 89LL, 7LL);
}

uint64_t sub_100245C10()
{
  return sub_100245ADC((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_100231FE8);
}

uint64_t sub_100245C1C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100245C2C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245C3C()
{
  return swift_deallocObject(v0, 65LL, 7LL);
}

uint64_t sub_100245C60()
{
  return sub_100237040( *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64),  *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_100245C74()
{
  return swift_deallocObject(v0, 81LL, 7LL);
}

uint64_t sub_100245CA4()
{
  return sub_1002376A4( *(void *)(v0 + 56),  *(unsigned __int8 *)(v0 + 64),  *(void *)(v0 + 72),  *(_BYTE *)(v0 + 80),  *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_100245CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274((uint64_t *)&unk_10040CC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100245D24()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100245D50()
{
  return sub_100236CC4(*(void *)(v0 + 56), *(void *)(v0 + 64));
}

void sub_100245D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  if (v6) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v11 < v7)
    {
      unint64_t v12 = *(void *)(v3 + 8 * v11);
      ++v8;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v8 = v11 + 2;
      if (v11 + 2 >= v7) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v8 = v11 + 3;
      if (v11 + 3 >= v7) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (v12)
      {
LABEL_22:
        unint64_t v6 = (v12 - 1) & v12;
        for (i  = __clz(__rbit64(v12)) + (v8 << 6); ; i  = v9 | (v8 << 6))
        {
          uint64_t v14 = *(char **)(*(void *)(a1 + 48) + 8 * i);
          unint64_t v15 = *(void **)&v14[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
          uint64_t v16 = v14;
          id v17 = [v15 remoteObjectProxy];
          _bridgeAnyObjectToAny(_:)(v21, v17);
          swift_unknownObjectRelease(v17);
          uint64_t v18 = sub_100002274((uint64_t *)&unk_10040CC60);
          if (swift_dynamicCast(&v22, v21, &type metadata for Any[8], v18, 6LL))
          {
            id v19 = v22;
            [v22 invalidatedActiveTrafficRegistration:a2];

            swift_unknownObjectRelease(v19);
            if (!v6) {
              goto LABEL_7;
            }
          }

          else
          {

            if (!v6) {
              goto LABEL_7;
            }
          }

uint64_t sub_100245F70( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a4 >> 8 != 0xFFFFFFFF) {
    return sub_10023EB4C(result, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_100245F84( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a4 >> 8 != 0xFFFFFFFF) {
    return sub_10023EC24(result, a2, a3, a4, a5, a6);
  }
  return result;
}

unint64_t sub_100245F98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100002274(&qword_10040CD10);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i  = (char *)(a1 + 38); ; i += 8)
    {
      uint64_t v5 = *(unsigned int *)(i - 6);
      uint64_t v6 = *(i - 2);
      uint64_t v7 = *(i - 1);
      char v8 = *i;
      unint64_t result = sub_100327824(v5 | (v6 << 32) | (v7 << 40));
      if ((v10 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      uint64_t v11 = v3[6] + 8 * result;
      *(_DWORD *)uint64_t v11 = v5;
      *(_BYTE *)(v11 + 4)  = v6;
      *(_BYTE *)(v11 + 5)  = v7;
      *(_BYTE *)(v3[7] + result)  = v8;
      uint64_t v12 = v3[2];
      BOOL v13 = __OFADD__(v12, 1LL);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2]  = v14;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

unint64_t sub_10024608C(uint64_t a1)
{
  uint64_t v2 = sub_100002274(&qword_10040CD18);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_100002274((uint64_t *)&unk_100410530);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
    uint64_t v8 = (uint64_t)&v5[*(int *)(v2 + 48)];
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1000226B0(v9, (uint64_t)v5, &qword_10040CD18);
      char v11 = *v5;
      unint64_t result = sub_100327790(*v5);
      if ((v13 & 1) != 0) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(_BYTE *)(v7[6] + result)  = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for NANAttribute(0LL);
      unint64_t result = sub_100022628( v8,  v15 + *(void *)(*(void *)(v16 - 8) + 72LL) * v14,  type metadata accessor for NANAttribute);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1LL);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2]  = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }

  return result;
}

unint64_t sub_1002461F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100002274((uint64_t *)&unk_1004104E0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  char v4 = *(_BYTE *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_100327790(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }

  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v3[6] + result)  = v4;
    *(void *)(v3[7] + 8 * result)  = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1LL);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2]  = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    char v4 = *((_BYTE *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain(v5);
    unint64_t result = sub_100327790(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if ((v14 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1002462F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10024631C(id *a1)
{
  return sub_100235EAC(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100246338(void **a1)
{
  return sub_100235F80(a1, v1);
}

uint64_t sub_100246350()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246360()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246370()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246380()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100246390(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

char *sub_1002463B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100234C8C( *(char **)(v1 + 16),  *(char **)(v1 + 24),  *(_BYTE **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(_BYTE *)(v1 + 56),  a1);
}

unint64_t sub_1002463D8()
{
  unint64_t result = qword_10040CD48;
  if (!qword_10040CD48)
  {
    uint64_t v1 = sub_1000022F8(&qword_10040CD40);
    sub_100246444();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10040CD48);
  }

  return result;
}

unint64_t sub_100246444()
{
  unint64_t result = qword_10040CD50;
  if (!qword_10040CD50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10040CD50);
  }

  return result;
}

uint64_t sub_100246488()
{
  return sub_1002464D0((void (*)(void))&_swift_release);
}

uint64_t sub_100246494(uint64_t *a1)
{
  return sub_10022F8A4( a1,  *(void *)(v1 + 56),  *(uint64_t (**)(void))(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1002464C4()
{
  return sub_1002464D0((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002464D0(void (*a1)(void))
{
  return swift_deallocObject(v1, 80LL, 7LL);
}

uint64_t sub_100246508(uint64_t a1)
{
  return sub_10022FDF4(a1, v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100246538()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_1002465C8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100230338( v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

void sub_10024665C(uint64_t a1)
{
}

uint64_t sub_100246680()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002466A4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002466AC(void *a1, uint64_t a2)
{
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *(void *)&v2[qword_10040C8A8]  = _swiftEmptyDictionarySingleton;
  uint64_t v11 = v2;
  uint64_t v12 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = (void *)*v12;
  *BOOL v10 = *v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v14 = v13;
  LOBYTE(v13)  = _dispatchPreconditionTest(_:)(v10);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    *(void *)&v11[qword_10040C8A0]  = a2;
    swift_retain();

    Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x736E617254697073LL,  0xEF736E6F69746361LL);
    uint64_t v16 = &OBJC_PROTOCOL___WiFiP2PSPITransactionResponderXPC;
    uint64_t v17 = sub_100264E4C(a1, (uint64_t)v6, (uint64_t)v16);

    return (uint64_t)v17;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100246848(char *a1, uint64_t a2)
{
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = v2;
  uint64_t v12 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = (void *)*v12;
  *BOOL v10 = *v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v14 = v13;
  LOBYTE(v13)  = _dispatchPreconditionTest(_:)(v10);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    *(void *)&v11[qword_10040C990]  = a2;
    swift_retain();

    id v16 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___AWDLServiceDiscoveryManagerXPCDelegate];
    [*(id *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setRemoteObjectInterface:v16];

    Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x8000000100360620LL,  0x736E617254697073LL,  0xEF736E6F69746361LL);
    uint64_t v17 = &OBJC_PROTOCOL___AWDLServiceDiscoveryManagerXPC;
    uint64_t v18 = sub_100264E4C(a1, (uint64_t)v6, (uint64_t)v17);

    return (uint64_t)v18;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100246A20@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[3] >> 62 == 1LL) {
    uint64_t result = swift_bridgeObjectRetain(*a1);
  }
  else {
    uint64_t result = 0LL;
  }
  *a2  = result;
  return result;
}

void sub_100246A60(uint64_t a1)
{
}

uint64_t sub_100246A68()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100246A8C()
{
  return sub_10023DCD4(*(void *)(v0 + 16));
}

uint64_t sub_100246A94()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246AA4()
{
  return swift_deallocObject(v0, 62LL, 7LL);
}

uint64_t sub_100246AB8()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

double sub_100246ADC(uint64_t a1)
{
  return sub_10023C57C( a1,  *(unsigned __int16 *)(v1 + 56) | ((unint64_t)*(unsigned int *)(v1 + 58) << 16),  *(id *)(v1 + 64));
}

uint64_t sub_100246AFC(uint64_t a1)
{
  return sub_10023C1D8(a1, *(_BYTE *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_100246B14(unsigned __int8 *a1)
{
  return sub_10023C2EC( a1,  *(uint64_t **)(v1 + 56),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100246B34()
{
  return swift_deallocObject(v0, 57LL, 7LL);
}

uint64_t sub_100246B44(uint64_t result)
{
  *(_BYTE *)(result + 16)  = *(_BYTE *)(v1 + 56);
  return result;
}

void sub_100246B50(uint64_t a1)
{
}

uint64_t sub_100246B68()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246B78(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100246B9C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246BAC()
{
  return swift_deallocObject(v0, 62LL, 7LL);
}

double sub_100246BBC(uint64_t a1)
{
  return sub_10023C5F8(a1, *(unsigned __int16 *)(v1 + 56) | ((unint64_t)*(unsigned int *)(v1 + 58) << 16));
}

uint64_t sub_100246BE8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

double sub_100246BF8@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0LL;
  *(void *)(a1 + 8)  = 0LL;
  *(void *)(a1 + 16)  = 0LL;
  double result = -2.0;
  *(_OWORD *)(a1 + 24)  = xmmword_10035D850;
  *(_BYTE *)(a1 + 40)  = 0;
  return result;
}

uint64_t sub_100246C14()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246C24()
{
  if (*(void *)(v0 + 48)) {
    swift_release(*(void *)(v0 + 56));
  }
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100246C68(uint64_t a1)
{
  return sub_10023AB78( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_100246C78()
{
  if (*(void *)(v0 + 56)) {
    swift_release(*(void *)(v0 + 64));
  }
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246CC4()
{
  return sub_10023ADC0( *(void *)(v0 + 16),  *(void (**)(unint64_t, __n128))(v0 + 24),  *(void *)(v0 + 32),  *(void **)(v0 + 40),  *(void **)(v0 + 48),  *(void (**)(void))(v0 + 56));
}

uint64_t sub_100246CD8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100246D04()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  swift_unownedRetain(v1);
  id v3 = v2;
  return v1;
}

uint64_t sub_100246D4C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 56))();
  *(void *)a1  = result;
  *(void *)(a1 + 8)  = v4;
  *(_BYTE *)(a1 + 16)  = v5 & 1;
  *(void *)(a1 + 24)  = v6;
  return result;
}

uint64_t sub_100246D90()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246DA0()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246DB0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246DC0()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100246DD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_unownedRelease(a1);
    swift_bridgeObjectRelease(a4);
  }

uint64_t sub_100246E10(void **a1)
{
  return sub_100232934(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100246E28()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246E38()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246E48(void **a1)
{
  return sub_100236470(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100246E60()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246E70()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246E80(uint64_t a1)
{
  return sub_1002BD4B0(a1, *(void *)(v1 + 16));
}

uint64_t sub_100246E88(Swift::UInt *a1)
{
  return sub_1002399E4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100246EA0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100246EB0()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100246EC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100246EE4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4)  = 1;
  }
  else {
    LODWORD(v4)  = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100246F30 + 4 * byte_10035D899[v4]))();
  }
  *a1  = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100246F64 + 4 * byte_10035D894[v4]))();
}

uint64_t sub_100246F64(uint64_t result)
{
  *(_BYTE *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100246F6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1)  = 0;
  if (a2) {
    JUMPOUT(0x100246F74LL);
  }
  return result;
}

uint64_t sub_100246F80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1)  = 0;
  if (!a2) {
    JUMPOUT(0x100246F88LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100246F8C(uint64_t result)
{
  *(_DWORD *)(result + 1)  = v1;
  return result;
}

uint64_t sub_100246F94(uint64_t result)
{
  *(_WORD *)(result + 1)  = v1;
  return result;
}

void sub_100246FA0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 24);
  if (v2 != 255) {
    sub_10023ECD8(*(void *)(a1 + 16), v2 & 1);
  }
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != 255) {
    sub_10023ECD8(*(void *)(a1 + 32), v3 & 1);
  }
}

uint64_t sub_100247004(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1  = *a2;
  *(void *)(a1 + 8)  = v5;
  uint64_t v6 = a2 + 2;
  int v7 = *((unsigned __int8 *)a2 + 24);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7 == 255)
  {
    *(void *)(a1 + 16)  = *v6;
    *(_BYTE *)(a1 + 24)  = *((_BYTE *)v6 + 8);
  }

  else
  {
    uint64_t v8 = *v6;
    sub_10023EC00(v8, v7 & 1);
    *(void *)(a1 + 16)  = v8;
    *(_BYTE *)(a1 + 24)  = v7 & 1;
  }

  uint64_t v9 = a2 + 4;
  int v10 = *((unsigned __int8 *)a2 + 40);
  if (v10 == 255)
  {
    *(void *)(a1 + 32)  = *v9;
    *(_BYTE *)(a1 + 40)  = *((_BYTE *)a2 + 40);
  }

  else
  {
    char v11 = v10 & 1;
    uint64_t v12 = *v9;
    sub_10023EC00(*v9, v10 & 1);
    *(void *)(a1 + 32)  = v12;
    *(_BYTE *)(a1 + 40)  = v11;
  }

  return a1;
}

uint64_t *sub_1002470D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1]  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1 + 2;
  uint64_t v9 = a2 + 2;
  int v10 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned __int8 *)a1 + 24) == 255)
  {
    if (v10 == 255)
    {
      uint64_t v12 = *v9;
      *((_BYTE *)a1 + 24)  = *((_BYTE *)a2 + 24);
      *uint64_t v8 = v12;
    }

    else
    {
      char v17 = v10 & 1;
      uint64_t v18 = *v9;
      sub_10023EC00(v18, v10 & 1);
      a1[2]  = v18;
      *((_BYTE *)a1 + 24)  = v17;
    }
  }

  else if (v10 == 255)
  {
    sub_100247270((uint64_t)(a1 + 2));
    char v11 = *((_BYTE *)a2 + 24);
    *uint64_t v8 = *v9;
    *((_BYTE *)a1 + 24)  = v11;
  }

  else
  {
    char v13 = v10 & 1;
    uint64_t v14 = *v9;
    sub_10023EC00(v14, v10 & 1);
    uint64_t v15 = a1[2];
    char v16 = *((_BYTE *)a1 + 24);
    a1[2]  = v14;
    *((_BYTE *)a1 + 24)  = v13;
    sub_10023ECD8(v15, v16);
  }

  uint64_t v19 = a1 + 4;
  uint64_t v20 = a2 + 4;
  int v21 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned __int8 *)a1 + 40) == 255)
  {
    if (v21 == 255)
    {
      uint64_t v23 = *v20;
      *((_BYTE *)a1 + 40)  = *((_BYTE *)a2 + 40);
      *uint64_t v19 = v23;
    }

    else
    {
      char v28 = v21 & 1;
      uint64_t v29 = *v20;
      sub_10023EC00(*v20, v21 & 1);
      a1[4]  = v29;
      *((_BYTE *)a1 + 40)  = v28;
    }
  }

  else if (v21 == 255)
  {
    sub_100247270((uint64_t)(a1 + 4));
    char v22 = *((_BYTE *)a2 + 40);
    *uint64_t v19 = *v20;
    *((_BYTE *)a1 + 40)  = v22;
  }

  else
  {
    char v24 = v21 & 1;
    uint64_t v25 = *v20;
    sub_10023EC00(*v20, v21 & 1);
    uint64_t v26 = a1[4];
    char v27 = *((_BYTE *)a1 + 40);
    a1[4]  = v25;
    *((_BYTE *)a1 + 40)  = v24;
    sub_10023ECD8(v26, v27);
  }

  return a1;
}

uint64_t sub_100247270(uint64_t a1)
{
  uint64_t v2 = sub_100002274(qword_10040CE40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *sub_1002472B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[1];
  a1[1]  = a2[1];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2 + 2;
  int v7 = *((unsigned __int8 *)a1 + 24);
  if (v7 == 255) {
    goto LABEL_4;
  }
  int v8 = *((unsigned __int8 *)a2 + 24);
  if (v8 == 255)
  {
    sub_100247270((uint64_t)(a1 + 2));
LABEL_4:
    a1[2]  = *v6;
    *((_BYTE *)a1 + 24)  = *((_BYTE *)a2 + 24);
    goto LABEL_6;
  }

  uint64_t v9 = a1[2];
  a1[2]  = *v6;
  *((_BYTE *)a1 + 24)  = v8 & 1;
  sub_10023ECD8(v9, v7 & 1);
LABEL_6:
  int v10 = a2 + 4;
  int v11 = *((unsigned __int8 *)a1 + 40);
  if (v11 != 255)
  {
    int v12 = *((unsigned __int8 *)a2 + 40);
    if (v12 != 255)
    {
      uint64_t v13 = a1[4];
      a1[4]  = *v10;
      *((_BYTE *)a1 + 40)  = v12 & 1;
      sub_10023ECD8(v13, v11 & 1);
      return a1;
    }

    sub_100247270((uint64_t)(a1 + 4));
  }

  a1[4]  = *v10;
  *((_BYTE *)a1 + 40)  = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t sub_1002473AC(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_1002473F4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t _s16P2PActivityStateO16InProgressStatusVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s16P2PActivityStateO16InProgressStatusVMn);
}

uint64_t sub_10024744C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035DB70, a1);
}

uint64_t *sub_100247514(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v25 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for Logger(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(_DWORD *)int v10 = *(_DWORD *)v11;
    *((_WORD *)v10 + 2)  = *((_WORD *)v11 + 2);
    int v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    uint64_t v14 = type metadata accessor for DispatchTime(0LL);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
    v15(v12, v13, v14);
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    *((_WORD *)v18 + 2)  = *((_WORD *)v19 + 2);
    uint64_t v20 = (_DWORD *)((char *)a1 + v17);
    int v21 = (_DWORD *)((char *)a2 + v17);
    BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
    uint64_t v23 = *(void *)(BeaconInformation - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, BeaconInformation))
    {
      uint64_t v24 = sub_100002274(&qword_10040CEC8);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      _DWORD *v20 = *v21;
      *((_WORD *)v20 + 2)  = *((_WORD *)v21 + 2);
      *(_OWORD *)(v20 + 2)  = *(_OWORD *)(v21 + 2);
      *((void *)v20 + 3)  = *((void *)v21 + 3);
      v15((char *)v20 + *(int *)(BeaconInformation + 32), (char *)v21 + *(int *)(BeaconInformation + 32), v14);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, BeaconInformation);
    }

    uint64_t v26 = a3[9];
    uint64_t v27 = a3[10];
    char v28 = (char *)a1 + v26;
    uint64_t v29 = (char *)a2 + v26;
    *(_WORD *)char v28 = *(_WORD *)v29;
    v28[2]  = v29[2];
    uint64_t v30 = (char *)a1 + v27;
    BOOL v31 = (char *)a2 + v27;
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    v30[16]  = v31[16];
    uint64_t v32 = a3[11];
    uint64_t v33 = a3[12];
    uint64_t v34 = (char *)a1 + v32;
    uint64_t v35 = (char *)a2 + v32;
    *(_WORD *)uint64_t v34 = *(_WORD *)v35;
    v34[2]  = v35[2];
    char v36 = (char *)a1 + v33;
    uint64_t v37 = (char *)a2 + v33;
    v36[2]  = v37[2];
    *(_WORD *)char v36 = *(_WORD *)v37;
    uint64_t v38 = a3[13];
    uint64_t v39 = a3[14];
    id v40 = (char *)a1 + v38;
    uint64_t v41 = (char *)a2 + v38;
    *(void *)id v40 = *(void *)v41;
    *((_DWORD *)v40 + 2)  = *((_DWORD *)v41 + 2);
    uint64_t v42 = (char *)a1 + v39;
    id v43 = (char *)a2 + v39;
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    v42[4]  = v43[4];
    uint64_t v44 = a3[15];
    uint64_t v45 = a3[16];
    uint64_t v46 = (char *)a1 + v44;
    uint64_t v47 = (char *)a2 + v44;
    *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
    *((_WORD *)v46 + 2)  = *((_WORD *)v47 + 2);
    v46[6]  = v47[6];
    uint64_t v48 = *((void *)v47 + 1);
    *((void *)v46 + 1)  = v48;
    int64_t v49 = (char *)a1 + v45;
    uint64_t v50 = (char *)a2 + v45;
    uint64_t v51 = *(uint64_t *)((char *)a2 + v45 + 8);
    swift_bridgeObjectRetain(v48);
    if (v51)
    {
      *int64_t v49 = *v50;
      uint64_t v52 = *((void *)v50 + 2);
      uint64_t v53 = *((void *)v50 + 3);
      *((void *)v49 + 1)  = v51;
      *((void *)v49 + 2)  = v52;
      uint64_t v54 = *((void *)v50 + 4);
      *((void *)v49 + 3)  = v53;
      *((void *)v49 + 4)  = v54;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v54);
    }

    else
    {
      __int128 v55 = *((_OWORD *)v50 + 1);
      *(_OWORD *)int64_t v49 = *(_OWORD *)v50;
      *((_OWORD *)v49 + 1)  = v55;
      *((void *)v49 + 4)  = *((void *)v50 + 4);
    }

    uint64_t v56 = a3[17];
    uint64_t v57 = a3[18];
    uint64_t v58 = (char *)a1 + v56;
    uint64_t v59 = (char *)a2 + v56;
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    *((_DWORD *)v58 + 4)  = *((_DWORD *)v59 + 4);
    double v60 = (_DWORD *)((char *)a1 + v57);
    uint64_t v61 = (_DWORD *)((char *)a2 + v57);
    uint64_t v62 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
    uint64_t v63 = *(void *)(v62 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v63 + 48))(v61, 1LL, v62))
    {
      uint64_t v64 = sub_100002274(&qword_10040CED0);
      memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      uint64_t v124 = v63;
      *(_WORD *)double v60 = *(_WORD *)v61;
      v60[1]  = v61[1];
      uint64_t v126 = v62;
      os_log_type_t v127 = v60;
      uint64_t v65 = *(int *)(v62 + 28);
      uint64_t v66 = (char *)v60 + v65;
      uint64_t v67 = (char *)v61 + v65;
      char *v66 = *((_BYTE *)v61 + v65);
      *(_WORD *)(v66 + 1)  = *(_WORD *)((char *)v61 + v65 + 1);
      id v68 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
      uint64_t v69 = v68[6];
      uint64_t v70 = &v66[v69];
      int v71 = &v67[v69];
      uint64_t v72 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
      uint64_t v73 = *(void *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1LL, v72))
      {
        uint64_t v74 = sub_100002274((uint64_t *)&unk_10040D470);
        memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0LL, 1LL, v72);
      }

      uint64_t v75 = v68[7];
      uint64_t v76 = &v66[v75];
      Swift::Bool v77 = &v67[v75];
      unint64_t v78 = *((void *)v77 + 1);
      if (v78 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
      }

      else
      {
        uint64_t v79 = *(void *)v77;
        sub_100020AFC(*(void *)v77, *((void *)v77 + 1));
        *(void *)uint64_t v76 = v79;
        *((void *)v76 + 1)  = v78;
      }

      v80  = v68[8];
      char v81 = &v66[v80];
      uint64_t v82 = &v67[v80];
      unint64_t v83 = *((void *)v82 + 1);
      if (v83 >> 60 == 15)
      {
        *(_OWORD *)char v81 = *(_OWORD *)v82;
      }

      else
      {
        uint64_t v84 = *(void *)v82;
        sub_100020AFC(*(void *)v82, *((void *)v82 + 1));
        *(void *)char v81 = v84;
        *((void *)v81 + 1)  = v83;
      }

      uint64_t v85 = v68[9];
      id v86 = &v66[v85];
      unint64_t v87 = &v67[v85];
      unint64_t v88 = *((void *)v87 + 1);
      if (v88 >> 60 == 15)
      {
        *(_OWORD *)id v86 = *(_OWORD *)v87;
      }

      else
      {
        uint64_t v89 = *(void *)v87;
        sub_100020AFC(*(void *)v87, *((void *)v87 + 1));
        *(void *)id v86 = v89;
        *((void *)v86 + 1)  = v88;
      }

      uint64_t v90 = v68[10];
      uint64_t v91 = &v66[v90];
      id v92 = &v67[v90];
      uint64_t v93 = type metadata accessor for UUID(0LL);
      uint64_t v94 = *(void *)(v93 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1LL, v93))
      {
        uint64_t v95 = sub_100002274(qword_100410330);
        memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v91, v92, v93);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v91, 0LL, 1LL, v93);
      }

      uint64_t v96 = v68[11];
      uint64_t v97 = v68;
      uint64_t v98 = *(void *)&v67[v96];
      *(void *)&v66[v96]  = v98;
      id v125 = v97;
      uint64_t v99 = v97[12];
      __dst  = &v66[v99];
      uint64_t v100 = &v67[v99];
      uint64_t v101 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
      uint64_t v102 = *(void *)(v101 - 8);
      uint64_t v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48);
      swift_bridgeObjectRetain(v98);
      if (v103(v100, 1LL, v101))
      {
        uint64_t v104 = sub_100002274((uint64_t *)&unk_10040DCC0);
        memcpy(__dst, v100, *(void *)(*(void *)(v104 - 8) + 64LL));
      }

      else
      {
        v105  = type metadata accessor for DispatchTimeInterval(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16LL))(__dst, v100, v105);
        __dst[*(int *)(v101 + 20)]  = v100[*(int *)(v101 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(__dst, 0LL, 1LL, v101);
      }

      uint64_t v106 = v125[13];
      uint64_t v107 = &v66[v106];
      uint64_t v108 = &v67[v106];
      *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
      *(_OWORD *)(v107 + 9)  = *(_OWORD *)(v108 + 9);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v124 + 56))(v127, 0LL, 1LL, v126);
    }

    uint64_t v109 = a3[19];
    v110  = a3[20];
    uint64_t v111 = *(uint64_t *)((char *)a2 + v109);
    *(uint64_t *)((char *)a1 + v109)  = v111;
    id v112 = (char *)a1 + v110;
    id v113 = (char *)a2 + v110;
    uint64_t v114 = type metadata accessor for UUID(0LL);
    uint64_t v115 = *(void *)(v114 - 8);
    uint64_t v116 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48);
    swift_bridgeObjectRetain(v111);
    if (v116(v113, 1LL, v114))
    {
      uint64_t v117 = sub_100002274(qword_100410330);
      memcpy(v112, v113, *(void *)(*(void *)(v117 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v112, v113, v114);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0LL, 1LL, v114);
    }

    uint64_t v118 = a3[21];
    unint64_t v119 = (char *)a1 + v118;
    uint64_t v120 = (char *)a2 + v118;
    if (v116(v120, 1LL, v114))
    {
      v121  = sub_100002274(qword_100410330);
      memcpy(v119, v120, *(void *)(*(void *)(v121 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v119, v120, v114);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v119, 0LL, 1LL, v114);
    }
  }

  return a1;
}

uint64_t type metadata accessor for NANPeer.LastBeaconInformation(uint64_t a1)
{
  return sub_100020E48(a1, qword_10040D010, (uint64_t)&nominal type descriptor for NANPeer.LastBeaconInformation);
}

uint64_t sub_100247C54(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v5, v6);
  uint64_t v8 = a1 + a2[8];
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(BeaconInformation - 8) + 48LL))( v8,  1LL,  BeaconInformation)) {
    v7(v8 + *(int *)(BeaconInformation + 32), v6);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[15] + 8));
  int v10 = (void *)(a1 + a2[16]);
  uint64_t v11 = v10[1];
  if (v11)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10[2]);
    swift_bridgeObjectRelease(v10[3]);
    swift_bridgeObjectRelease(v10[4]);
  }

  uint64_t v12 = a1 + a2[18];
  uint64_t v13 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v12, 1LL, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 28);
    uint64_t v15 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v16 = v14 + v15[6];
    uint64_t v17 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = (uint64_t *)(v14 + v15[7]);
    unint64_t v20 = v19[1];
    if (v20 >> 60 != 15) {
      sub_1000208D8(*v19, v20);
    }
    int v21 = (uint64_t *)(v14 + v15[8]);
    unint64_t v22 = v21[1];
    if (v22 >> 60 != 15) {
      sub_1000208D8(*v21, v22);
    }
    uint64_t v23 = (uint64_t *)(v14 + v15[9]);
    unint64_t v24 = v23[1];
    if (v24 >> 60 != 15) {
      sub_1000208D8(*v23, v24);
    }
    uint64_t v25 = v14 + v15[10];
    uint64_t v26 = type metadata accessor for UUID(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    swift_bridgeObjectRelease(*(void *)(v14 + v15[11]));
    uint64_t v28 = v14 + v15[12];
    uint64_t v29 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48LL))(v28, 1LL, v29))
    {
      uint64_t v30 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL))(v28, v30);
    }
  }

  swift_bridgeObjectRelease(*(void *)(a1 + a2[19]));
  uint64_t v31 = a1 + a2[20];
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (!v34(v31, 1LL, v32)) {
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  }
  uint64_t v35 = a1 + a2[21];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v34)(v35, 1LL, v32);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v35, v32);
  }
  return result;
}

uint64_t sub_100247F50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  v14(v11, v12, v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_WORD *)(v17 + 4)  = *(_WORD *)(v18 + 4);
  uint64_t v19 = (_DWORD *)(a1 + v16);
  unint64_t v20 = (_DWORD *)(a2 + v16);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  uint64_t v22 = *(void *)(BeaconInformation - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, BeaconInformation))
  {
    uint64_t v23 = sub_100002274(&qword_10040CEC8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    *uint64_t v19 = *v20;
    *((_WORD *)v19 + 2)  = *((_WORD *)v20 + 2);
    *(_OWORD *)(v19 + 2)  = *(_OWORD *)(v20 + 2);
    *((void *)v19 + 3)  = *((void *)v20 + 3);
    v14((uint64_t)v19 + *(int *)(BeaconInformation + 32), (uint64_t)v20 + *(int *)(BeaconInformation + 32), v13);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, BeaconInformation);
  }

  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(_WORD *)uint64_t v26 = *(_WORD *)v27;
  *(_BYTE *)(v26 + 2)  = *(_BYTE *)(v27 + 2);
  uint64_t v28 = a1 + v25;
  uint64_t v29 = a2 + v25;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_BYTE *)(v28 + 16)  = *(_BYTE *)(v29 + 16);
  uint64_t v30 = a3[11];
  uint64_t v31 = a3[12];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(_WORD *)uint64_t v32 = *(_WORD *)v33;
  *(_BYTE *)(v32 + 2)  = *(_BYTE *)(v33 + 2);
  uint64_t v34 = a1 + v31;
  uint64_t v35 = a2 + v31;
  *(_BYTE *)(v34 + 2)  = *(_BYTE *)(v35 + 2);
  *(_WORD *)uint64_t v34 = *(_WORD *)v35;
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  *(_DWORD *)(v38 + 8)  = *(_DWORD *)(v39 + 8);
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4)  = *(_BYTE *)(v41 + 4);
  uint64_t v42 = a3[15];
  uint64_t v43 = a3[16];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  *(_WORD *)(v44 + 4)  = *(_WORD *)(v45 + 4);
  *(_BYTE *)(v44 + 6)  = *(_BYTE *)(v45 + 6);
  uint64_t v46 = *(void *)(v45 + 8);
  *(void *)(v44 + 8)  = v46;
  uint64_t v47 = a1 + v43;
  uint64_t v48 = a2 + v43;
  uint64_t v49 = *(void *)(a2 + v43 + 8);
  swift_bridgeObjectRetain(v46);
  if (v49)
  {
    *(_BYTE *)uint64_t v47 = *(_BYTE *)v48;
    uint64_t v50 = *(void *)(v48 + 16);
    uint64_t v51 = *(void *)(v48 + 24);
    *(void *)(v47 + 8)  = v49;
    *(void *)(v47 + 16)  = v50;
    uint64_t v52 = *(void *)(v48 + 32);
    *(void *)(v47 + 24)  = v51;
    *(void *)(v47 + 32)  = v52;
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v52);
  }

  else
  {
    __int128 v53 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
    *(_OWORD *)(v47 + 16)  = v53;
    *(void *)(v47 + 32)  = *(void *)(v48 + 32);
  }

  uint64_t v54 = a3[17];
  uint64_t v55 = a3[18];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = a2 + v54;
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *(_DWORD *)(v56 + 16)  = *(_DWORD *)(v57 + 16);
  uint64_t v58 = (_DWORD *)(a1 + v55);
  uint64_t v59 = (_DWORD *)(a2 + v55);
  uint64_t v60 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v61 + 48))(v59, 1LL, v60))
  {
    uint64_t v62 = sub_100002274(&qword_10040CED0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    uint64_t v123 = v61;
    uint64_t v124 = v60;
    *(_WORD *)uint64_t v58 = *(_WORD *)v59;
    v58[1]  = v59[1];
    uint64_t v63 = *(int *)(v60 + 28);
    id v125 = v58;
    uint64_t v64 = (char *)v58 + v63;
    uint64_t v65 = (char *)v59 + v63;
    *uint64_t v64 = *((_BYTE *)v59 + v63);
    *(_WORD *)(v64 + 1)  = *(_WORD *)((char *)v59 + v63 + 1);
    uint64_t v66 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v67 = v66[6];
    id v68 = &v64[v67];
    uint64_t v69 = &v65[v67];
    uint64_t v70 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    uint64_t v71 = *(void *)(v70 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1LL, v70))
    {
      uint64_t v72 = sub_100002274((uint64_t *)&unk_10040D470);
      memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v70);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0LL, 1LL, v70);
    }

    uint64_t v73 = v66[7];
    uint64_t v74 = &v64[v73];
    uint64_t v75 = &v65[v73];
    unint64_t v76 = *((void *)v75 + 1);
    if (v76 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    }

    else
    {
      uint64_t v77 = *(void *)v75;
      sub_100020AFC(*(void *)v75, *((void *)v75 + 1));
      *(void *)uint64_t v74 = v77;
      *((void *)v74 + 1)  = v76;
    }

    uint64_t v78 = v66[8];
    uint64_t v79 = &v64[v78];
    v80  = &v65[v78];
    unint64_t v81 = *((void *)v80 + 1);
    if (v81 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    }

    else
    {
      uint64_t v82 = *(void *)v80;
      sub_100020AFC(*(void *)v80, *((void *)v80 + 1));
      *(void *)uint64_t v79 = v82;
      *((void *)v79 + 1)  = v81;
    }

    uint64_t v83 = v66[9];
    uint64_t v84 = &v64[v83];
    uint64_t v85 = &v65[v83];
    unint64_t v86 = *((void *)v85 + 1);
    if (v86 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
    }

    else
    {
      uint64_t v87 = *(void *)v85;
      sub_100020AFC(*(void *)v85, *((void *)v85 + 1));
      *(void *)uint64_t v84 = v87;
      *((void *)v84 + 1)  = v86;
    }

    uint64_t v88 = v66[10];
    uint64_t v89 = &v64[v88];
    uint64_t v90 = &v65[v88];
    uint64_t v91 = type metadata accessor for UUID(0LL);
    uint64_t v92 = *(void *)(v91 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1LL, v91))
    {
      uint64_t v93 = sub_100002274(qword_100410330);
      memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v90, v91);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0LL, 1LL, v91);
    }

    uint64_t v94 = v66[11];
    uint64_t v95 = v66;
    uint64_t v96 = *(void *)&v65[v94];
    *(void *)&v64[v94]  = v96;
    v122  = v95;
    uint64_t v97 = v95[12];
    __dst  = &v64[v97];
    uint64_t v98 = &v65[v97];
    uint64_t v99 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    uint64_t v100 = *(void *)(v99 - 8);
    uint64_t v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
    swift_bridgeObjectRetain(v96);
    if (v101(v98, 1LL, v99))
    {
      uint64_t v102 = sub_100002274((uint64_t *)&unk_10040DCC0);
      memcpy(__dst, v98, *(void *)(*(void *)(v102 - 8) + 64LL));
    }

    else
    {
      uint64_t v103 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 16LL))(__dst, v98, v103);
      __dst[*(int *)(v99 + 20)]  = v98[*(int *)(v99 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(__dst, 0LL, 1LL, v99);
    }

    uint64_t v104 = v122[13];
    v105  = &v64[v104];
    uint64_t v106 = &v65[v104];
    *(_OWORD *)v105  = *(_OWORD *)v106;
    *(_OWORD *)(v105 + 9)  = *(_OWORD *)(v106 + 9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v123 + 56))(v125, 0LL, 1LL, v124);
  }

  uint64_t v107 = a3[19];
  uint64_t v108 = a3[20];
  uint64_t v109 = *(void *)(a2 + v107);
  *(void *)(a1 + v107)  = v109;
  v110  = (void *)(a1 + v108);
  uint64_t v111 = (const void *)(a2 + v108);
  uint64_t v112 = type metadata accessor for UUID(0LL);
  uint64_t v113 = *(void *)(v112 - 8);
  uint64_t v114 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v113 + 48);
  swift_bridgeObjectRetain(v109);
  if (v114(v111, 1LL, v112))
  {
    uint64_t v115 = sub_100002274(qword_100410330);
    memcpy(v110, v111, *(void *)(*(void *)(v115 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v113 + 16))(v110, v111, v112);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0LL, 1LL, v112);
  }

  uint64_t v116 = a3[21];
  uint64_t v117 = (void *)(a1 + v116);
  uint64_t v118 = (const void *)(a2 + v116);
  if (v114(v118, 1LL, v112))
  {
    uint64_t v119 = sub_100002274(qword_100410330);
    memcpy(v117, v118, *(void *)(*(void *)(v119 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v113 + 16))(v117, v118, v112);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56))(v117, 0LL, 1LL, v112);
  }

  return a1;
}

uint64_t sub_100248650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (_BYTE *)(a1 + v7);
  uint64_t v9 = (_BYTE *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1]  = v9[1];
  _OWORD v8[2] = v9[2];
  v8[3]  = v9[3];
  v8[4]  = v9[4];
  v8[5]  = v9[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  uint64_t v16 = a3[7];
  uint64_t v17 = (_BYTE *)(a1 + v16);
  uint64_t v18 = (_BYTE *)(a2 + v16);
  *uint64_t v17 = *v18;
  v17[1]  = v18[1];
  v17[2]  = v18[2];
  v17[3]  = v18[3];
  v17[4]  = v18[4];
  v17[5]  = v18[5];
  v224  = a3;
  v225  = a2;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  int v21 = (int *)(a2 + v19);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  uint64_t v23 = *(void *)(BeaconInformation - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1LL, BeaconInformation);
  int v26 = v24((uint64_t)v21, 1LL, BeaconInformation);
  if (v25)
  {
    if (!v26)
    {
      int v27 = *v21;
      *(_WORD *)(v20 + 4)  = *((_WORD *)v21 + 2);
      *(_DWORD *)uint64_t v20 = v27;
      *(void *)(v20 + 8)  = *((void *)v21 + 1);
      *(void *)(v20 + 16)  = *((void *)v21 + 2);
      *(void *)(v20 + 24)  = *((void *)v21 + 3);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))( v20 + *(int *)(BeaconInformation + 32),  (uint64_t)v21 + *(int *)(BeaconInformation + 32),  v13);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, BeaconInformation);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v26)
  {
    sub_10005802C(v20, type metadata accessor for NANPeer.LastBeaconInformation);
LABEL_6:
    uint64_t v28 = sub_100002274(&qword_10040CEC8);
    memcpy((void *)v20, v21, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_DWORD *)uint64_t v20 = *v21;
  *(_BYTE *)(v20 + 4)  = *((_BYTE *)v21 + 4);
  *(_BYTE *)(v20 + 5)  = *((_BYTE *)v21 + 5);
  *(void *)(v20 + 8)  = *((void *)v21 + 1);
  *(void *)(v20 + 16)  = *((void *)v21 + 2);
  *(void *)(v20 + 24)  = *((void *)v21 + 3);
  v15(v20 + *(int *)(BeaconInformation + 32), (uint64_t)v21 + *(int *)(BeaconInformation + 32), v13);
LABEL_7:
  uint64_t v29 = v224;
  uint64_t v30 = v225;
  uint64_t v31 = v224[9];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = (__int16 *)(v225 + v31);
  __int16 v34 = *v33;
  *(_BYTE *)(v32 + 2)  = *((_BYTE *)v33 + 2);
  *(_WORD *)uint64_t v32 = v34;
  uint64_t v35 = v224[10];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = (__int128 *)(v225 + v35);
  __int128 v38 = *v37;
  *(_BYTE *)(v36 + 16)  = *((_BYTE *)v37 + 16);
  *(_OWORD *)uint64_t v36 = v38;
  uint64_t v39 = v224[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (__int16 *)(v225 + v39);
  __int16 v42 = *v41;
  *(_BYTE *)(v40 + 2)  = *((_BYTE *)v41 + 2);
  *(_WORD *)uint64_t v40 = v42;
  uint64_t v43 = v224[12];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (__int16 *)(v225 + v43);
  __int16 v46 = *v45;
  *(_BYTE *)(v44 + 2)  = *((_BYTE *)v45 + 2);
  *(_WORD *)uint64_t v44 = v46;
  uint64_t v47 = v224[13];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t *)(v225 + v47);
  uint64_t v50 = *v49;
  *(_DWORD *)(v48 + 8)  = *((_DWORD *)v49 + 2);
  *(void *)uint64_t v48 = v50;
  uint64_t v51 = v224[14];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = v225 + v51;
  LODWORD(v50)  = *(_DWORD *)v53;
  *(_BYTE *)(v52 + 4)  = *(_BYTE *)(v53 + 4);
  *(_DWORD *)uint64_t v52 = v50;
  uint64_t v54 = v224[15];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = v225 + v54;
  *(_BYTE *)uint64_t v55 = *(_BYTE *)v56;
  *(_BYTE *)(v55 + 1)  = *(_BYTE *)(v56 + 1);
  *(_BYTE *)(v55 + 2)  = *(_BYTE *)(v56 + 2);
  *(_BYTE *)(v55 + 3)  = *(_BYTE *)(v56 + 3);
  *(_BYTE *)(v55 + 4)  = *(_BYTE *)(v56 + 4);
  *(_BYTE *)(v55 + 5)  = *(_BYTE *)(v56 + 5);
  *(_BYTE *)(v55 + 6)  = *(_BYTE *)(v56 + 6);
  uint64_t v57 = *(void *)(v56 + 8);
  uint64_t v58 = *(void *)(v55 + 8);
  *(void *)(v55 + 8)  = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  uint64_t v59 = v224[16];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (__int128 *)(v225 + v59);
  uint64_t v62 = *(void *)(a1 + v59 + 8);
  uint64_t v63 = *(void *)(v225 + v59 + 8);
  if (v62)
  {
    if (v63)
    {
      *(_BYTE *)uint64_t v60 = *(_BYTE *)v61;
      uint64_t v64 = *((void *)v61 + 1);
      v60[1]  = v64;
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRelease(v62);
      uint64_t v65 = *((void *)v61 + 2);
      uint64_t v66 = v60[2];
      v60[2]  = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66);
      uint64_t v67 = *((void *)v61 + 3);
      uint64_t v68 = v60[3];
      v60[3]  = v67;
      swift_bridgeObjectRetain(v67);
      swift_bridgeObjectRelease(v68);
      uint64_t v69 = *((void *)v61 + 4);
      uint64_t v70 = v60[4];
      v60[4]  = v69;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRelease(v70);
    }

    else
    {
      sub_100249440(v60);
      uint64_t v75 = *((void *)v61 + 4);
      __int128 v76 = v61[1];
      *(_OWORD *)uint64_t v60 = *v61;
      *((_OWORD *)v60 + 1)  = v76;
      v60[4]  = v75;
    }
  }

  else if (v63)
  {
    *(_BYTE *)uint64_t v60 = *(_BYTE *)v61;
    uint64_t v71 = *((void *)v61 + 1);
    v60[1]  = v71;
    uint64_t v72 = *((void *)v61 + 2);
    v60[2]  = v72;
    uint64_t v73 = *((void *)v61 + 3);
    v60[3]  = v73;
    uint64_t v74 = *((void *)v61 + 4);
    v60[4]  = v74;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
  }

  else
  {
    __int128 v77 = *v61;
    __int128 v78 = v61[1];
    v60[4]  = *((void *)v61 + 4);
    *(_OWORD *)uint64_t v60 = v77;
    *((_OWORD *)v60 + 1)  = v78;
  }

  uint64_t v79 = v224[17];
  v80  = a1 + v79;
  unint64_t v81 = (__int128 *)(v225 + v79);
  __int128 v82 = *v81;
  *(_DWORD *)(v80 + 16)  = *((_DWORD *)v81 + 4);
  *(_OWORD *)v80  = v82;
  uint64_t v83 = v224[18];
  uint64_t v84 = a1 + v83;
  uint64_t v85 = v225 + v83;
  uint64_t v86 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  uint64_t v87 = *(void *)(v86 - 8);
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
  int v89 = v88(v84, 1LL, v86);
  int v90 = v88(v85, 1LL, v86);
  if (!v89)
  {
    if (v90)
    {
      sub_10005802C(v84, type metadata accessor for NANAttribute.CustomDeviceInformation);
      goto LABEL_21;
    }

    *(_BYTE *)uint64_t v84 = *(_BYTE *)v85;
    *(_BYTE *)(v84 + 1)  = *(_BYTE *)(v85 + 1);
    *(_DWORD *)(v84 + 4)  = *(_DWORD *)(v85 + 4);
    uint64_t v102 = *(int *)(v86 + 28);
    uint64_t v103 = v84 + v102;
    uint64_t v104 = v85 + v102;
    *(_BYTE *)uint64_t v103 = *(_BYTE *)(v85 + v102);
    *(_WORD *)(v103 + 1)  = *(_WORD *)(v85 + v102 + 1);
    v105  = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v106 = v105[6];
    uint64_t v107 = (void *)(v103 + v106);
    uint64_t v108 = (void *)(v104 + v106);
    uint64_t v109 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    v110  = *(void *)(v109 - 8);
    uint64_t v111 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v110 + 48);
    int v112 = v111(v107, 1LL, v109);
    int v113 = v111(v108, 1LL, v109);
    if (v112)
    {
      if (!v113)
      {
        (*(void (**)(void *, void *, uint64_t))(v110 + 16))(v107, v108, v109);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0LL, 1LL, v109);
        goto LABEL_45;
      }
    }

    else
    {
      if (!v113)
      {
        (*(void (**)(void *, void *, uint64_t))(v110 + 24))(v107, v108, v109);
LABEL_45:
        v151  = v105[7];
        v152  = (uint64_t *)(v103 + v151);
        uint64_t v153 = (uint64_t *)(v104 + v151);
        unint64_t v154 = *(void *)(v104 + v151 + 8);
        if (*(void *)(v103 + v151 + 8) >> 60 == 15LL)
        {
          if (v154 >> 60 != 15)
          {
            v155  = *v153;
            sub_100020AFC(*v153, v154);
            uint64_t *v152 = v155;
            v152[1]  = v154;
            goto LABEL_52;
          }
        }

        else
        {
          if (v154 >> 60 != 15)
          {
            uint64_t v156 = *v153;
            sub_100020AFC(*v153, v154);
            uint64_t v157 = *v152;
            unint64_t v158 = v152[1];
            uint64_t *v152 = v156;
            v152[1]  = v154;
            sub_1000208D8(v157, v158);
LABEL_52:
            v159  = v105[8];
            int v160 = (uint64_t *)(v103 + v159);
            uint64_t v161 = (uint64_t *)(v104 + v159);
            v162  = *(void *)(v104 + v159 + 8);
            if (*(void *)(v103 + v159 + 8) >> 60 == 15LL)
            {
              if (v162 >> 60 != 15)
              {
                v163  = *v161;
                sub_100020AFC(*v161, v162);
                *int v160 = v163;
                v160[1]  = v162;
                goto LABEL_59;
              }
            }

            else
            {
              if (v162 >> 60 != 15)
              {
                v164  = *v161;
                sub_100020AFC(*v161, v162);
                v165  = *v160;
                v166  = v160[1];
                *int v160 = v164;
                v160[1]  = v162;
                sub_1000208D8(v165, v166);
LABEL_59:
                v167  = v105[9];
                v168  = (uint64_t *)(v103 + v167);
                v169  = (uint64_t *)(v104 + v167);
                v170  = *(void *)(v104 + v167 + 8);
                if (*(void *)(v103 + v167 + 8) >> 60 == 15LL)
                {
                  if (v170 >> 60 != 15)
                  {
                    v171  = *v169;
                    sub_100020AFC(*v169, v170);
                    *v168  = v171;
                    v168[1]  = v170;
                    goto LABEL_66;
                  }
                }

                else
                {
                  if (v170 >> 60 != 15)
                  {
                    v172  = *v169;
                    sub_100020AFC(*v169, v170);
                    v173  = *v168;
                    v174  = v168[1];
                    *v168  = v172;
                    v168[1]  = v170;
                    sub_1000208D8(v173, v174);
LABEL_66:
                    v175  = v105[10];
                    v176  = (void *)(v103 + v175);
                    v177  = (void *)(v104 + v175);
                    v178  = type metadata accessor for UUID(0LL);
                    v179  = *(void *)(v178 - 8);
                    v180  = *(uint64_t (**)(void *, uint64_t, uint64_t))(v179 + 48);
                    v181  = v180(v176, 1LL, v178);
                    v182  = v180(v177, 1LL, v178);
                    if (v181)
                    {
                      if (!v182)
                      {
                        (*(void (**)(void *, void *, uint64_t))(v179 + 16))(v176, v177, v178);
                        (*(void (**)(void *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0LL, 1LL, v178);
                        goto LABEL_72;
                      }
                    }

                    else
                    {
                      if (!v182)
                      {
                        (*(void (**)(void *, void *, uint64_t))(v179 + 24))(v176, v177, v178);
LABEL_72:
                        v184  = v105[11];
                        v185  = *(void *)(v104 + v184);
                        v186  = *(void *)(v103 + v184);
                        *(void *)(v103 + v184)  = v185;
                        swift_bridgeObjectRetain(v185);
                        swift_bridgeObjectRelease(v186);
                        v187  = v105[12];
                        v188  = (_BYTE *)(v103 + v187);
                        v189  = (_BYTE *)(v104 + v187);
                        v190  = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
                        v191  = *(void *)(v190 - 8);
                        v192  = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v191 + 48);
                        v193  = v192(v188, 1LL, v190);
                        v194  = v192(v189, 1LL, v190);
                        if (v193)
                        {
                          if (!v194)
                          {
                            v195  = type metadata accessor for DispatchTimeInterval(0LL);
                            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v195 - 8) + 16LL))( v188,  v189,  v195);
                            v188[*(int *)(v190 + 20)]  = v189[*(int *)(v190 + 20)];
                            (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v191 + 56))( v188,  0LL,  1LL,  v190);
LABEL_78:
                            v197  = v105[13];
                            v198  = (_OWORD *)(v103 + v197);
                            v199  = (__int128 *)(v104 + v197);
                            v200  = *v199;
                            *(_OWORD *)((char *)v198 + 9)  = *(__int128 *)((char *)v199 + 9);
                            *v198  = v200;
                            uint64_t v29 = v224;
                            uint64_t v30 = v225;
                            goto LABEL_79;
                          }
                        }

                        else
                        {
                          if (!v194)
                          {
                            v220  = type metadata accessor for DispatchTimeInterval(0LL);
                            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v220 - 8) + 24LL))( v188,  v189,  v220);
                            v188[*(int *)(v190 + 20)]  = v189[*(int *)(v190 + 20)];
                            goto LABEL_78;
                          }

                          sub_10005802C( (uint64_t)v188,  type metadata accessor for NANInternetSharingStatistics.Requester);
                        }

                        v196  = sub_100002274((uint64_t *)&unk_10040DCC0);
                        memcpy(v188, v189, *(void *)(*(void *)(v196 - 8) + 64LL));
                        goto LABEL_78;
                      }

                      (*(void (**)(void *, uint64_t))(v179 + 8))(v176, v178);
                    }

                    v183  = sub_100002274(qword_100410330);
                    memcpy(v176, v177, *(void *)(*(void *)(v183 - 8) + 64LL));
                    goto LABEL_72;
                  }

                  sub_1001682A8((uint64_t)v168);
                }

                *(_OWORD *)v168  = *(_OWORD *)v169;
                goto LABEL_66;
              }

              sub_1001682A8((uint64_t)v160);
            }

            *(_OWORD *)int v160 = *(_OWORD *)v161;
            goto LABEL_59;
          }

          sub_1001682A8((uint64_t)v152);
        }

        *(_OWORD *)v152  = *(_OWORD *)v153;
        goto LABEL_52;
      }

      (*(void (**)(void *, uint64_t))(v110 + 8))(v107, v109);
    }

    v150  = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v107, v108, *(void *)(*(void *)(v150 - 8) + 64LL));
    goto LABEL_45;
  }

  if (v90)
  {
LABEL_21:
    uint64_t v101 = sub_100002274(&qword_10040CED0);
    memcpy((void *)v84, (const void *)v85, *(void *)(*(void *)(v101 - 8) + 64LL));
    goto LABEL_79;
  }

  v223  = v87;
  *(_BYTE *)uint64_t v84 = *(_BYTE *)v85;
  *(_BYTE *)(v84 + 1)  = *(_BYTE *)(v85 + 1);
  *(_DWORD *)(v84 + 4)  = *(_DWORD *)(v85 + 4);
  uint64_t v91 = *(int *)(v86 + 28);
  uint64_t v92 = v84 + v91;
  uint64_t v93 = v85 + v91;
  *(_BYTE *)uint64_t v92 = *(_BYTE *)v93;
  *(_WORD *)(v92 + 1)  = *(_WORD *)(v93 + 1);
  uint64_t v94 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v95 = v94[6];
  uint64_t v96 = (void *)(v92 + v95);
  uint64_t v97 = (const void *)(v93 + v95);
  uint64_t v98 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v99 = *(void *)(v98 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v99 + 48))(v97, 1LL, v98))
  {
    uint64_t v100 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(v96, v97, v98);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0LL, 1LL, v98);
  }

  uint64_t v114 = v94[7];
  uint64_t v115 = v92 + v114;
  uint64_t v116 = (uint64_t *)(v93 + v114);
  unint64_t v117 = v116[1];
  if (v117 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
  }

  else
  {
    uint64_t v118 = *v116;
    sub_100020AFC(*v116, v116[1]);
    *(void *)uint64_t v115 = v118;
    *(void *)(v115 + 8)  = v117;
  }

  uint64_t v119 = v94[8];
  uint64_t v120 = v92 + v119;
  v121  = (uint64_t *)(v93 + v119);
  v122  = v121[1];
  if (v122 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
  }

  else
  {
    uint64_t v123 = *v121;
    sub_100020AFC(*v121, v121[1]);
    *(void *)uint64_t v120 = v123;
    *(void *)(v120 + 8)  = v122;
  }

  uint64_t v124 = v94[9];
  uint64_t v125 = v92 + v124;
  uint64_t v126 = (uint64_t *)(v93 + v124);
  unint64_t v127 = v126[1];
  if (v127 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
  }

  else
  {
    uint64_t v128 = *v126;
    sub_100020AFC(*v126, v126[1]);
    *(void *)uint64_t v125 = v128;
    *(void *)(v125 + 8)  = v127;
  }

  v129  = v94[10];
  v130  = (void *)(v92 + v129);
  v131  = (const void *)(v93 + v129);
  uint64_t v132 = type metadata accessor for UUID(0LL);
  v133  = *(void *)(v132 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v133 + 48))(v131, 1LL, v132))
  {
    v134  = sub_100002274(qword_100410330);
    memcpy(v130, v131, *(void *)(*(void *)(v134 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v133 + 16))(v130, v131, v132);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v133 + 56))(v130, 0LL, 1LL, v132);
  }

  uint64_t v135 = v94[11];
  v136  = v94;
  v137  = *(void *)(v93 + v135);
  *(void *)(v92 + v135)  = v137;
  v221  = v136;
  v222  = v92;
  uint64_t v138 = v136[12];
  unint64_t v139 = (void *)(v92 + v138);
  v140  = (const void *)(v93 + v138);
  v141  = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  v142  = *(void *)(v141 - 8);
  uint64_t v143 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v142 + 48);
  swift_bridgeObjectRetain(v137);
  if (v143(v140, 1LL, v141))
  {
    v144  = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v139, v140, *(void *)(*(void *)(v144 - 8) + 64LL));
  }

  else
  {
    uint64_t v145 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v145 - 8) + 16LL))(v139, v140, v145);
    *((_BYTE *)v139 + *(int *)(v141 + 20))  = *((_BYTE *)v140 + *(int *)(v141 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v142 + 56))(v139, 0LL, 1LL, v141);
  }

  uint64_t v29 = v224;
  uint64_t v30 = v225;
  v146  = v221[13];
  uint64_t v147 = (_OWORD *)(v222 + v146);
  unint64_t v148 = (__int128 *)(v93 + v146);
  __int128 v149 = *v148;
  *(_OWORD *)((char *)v147 + 9)  = *(__int128 *)((char *)v148 + 9);
  *uint64_t v147 = v149;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v223 + 56))(v84, 0LL, 1LL, v86);
LABEL_79:
  v201  = v29[19];
  v202  = *(void *)(v30 + v201);
  v203  = *(void *)(a1 + v201);
  *(void *)(a1 + v201)  = v202;
  swift_bridgeObjectRetain(v202);
  swift_bridgeObjectRelease(v203);
  v204  = v29[20];
  v205  = (void *)(a1 + v204);
  v206  = (void *)(v30 + v204);
  v207  = type metadata accessor for UUID(0LL);
  v208  = *(void *)(v207 - 8);
  v209  = *(uint64_t (**)(void *, uint64_t, uint64_t))(v208 + 48);
  v210  = v209(v205, 1LL, v207);
  v211  = v209(v206, 1LL, v207);
  if (v210)
  {
    if (!v211)
    {
      (*(void (**)(void *, void *, uint64_t))(v208 + 16))(v205, v206, v207);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v208 + 56))(v205, 0LL, 1LL, v207);
      goto LABEL_85;
    }

    goto LABEL_84;
  }

  if (v211)
  {
    (*(void (**)(void *, uint64_t))(v208 + 8))(v205, v207);
LABEL_84:
    v212  = sub_100002274(qword_100410330);
    memcpy(v205, v206, *(void *)(*(void *)(v212 - 8) + 64LL));
    goto LABEL_85;
  }

  (*(void (**)(void *, void *, uint64_t))(v208 + 24))(v205, v206, v207);
LABEL_85:
  v213  = v29[21];
  v214  = (void *)(a1 + v213);
  v215  = (void *)(v30 + v213);
  v216  = v209((void *)(a1 + v213), 1LL, v207);
  v217  = v209(v215, 1LL, v207);
  if (!v216)
  {
    if (!v217)
    {
      (*(void (**)(void *, void *, uint64_t))(v208 + 24))(v214, v215, v207);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v208 + 8))(v214, v207);
    goto LABEL_90;
  }

  if (v217)
  {
LABEL_90:
    v218  = sub_100002274(qword_100410330);
    memcpy(v214, v215, *(void *)(*(void *)(v218 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v208 + 16))(v214, v215, v207);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v208 + 56))(v214, 0LL, 1LL, v207);
  return a1;
}

void *sub_100249440(void *a1)
{
  return a1;
}

uint64_t sub_10024946C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL);
  v14(v11, v12, v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_WORD *)(v17 + 4)  = *(_WORD *)(v18 + 4);
  uint64_t v19 = (_DWORD *)(a1 + v16);
  uint64_t v20 = (_DWORD *)(a2 + v16);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  uint64_t v22 = *(void *)(BeaconInformation - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, BeaconInformation))
  {
    uint64_t v23 = sub_100002274(&qword_10040CEC8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    *uint64_t v19 = *v20;
    *((_WORD *)v19 + 2)  = *((_WORD *)v20 + 2);
    *(_OWORD *)(v19 + 2)  = *(_OWORD *)(v20 + 2);
    *((void *)v19 + 3)  = *((void *)v20 + 3);
    v14((uint64_t)v19 + *(int *)(BeaconInformation + 32), (uint64_t)v20 + *(int *)(BeaconInformation + 32), v13);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, BeaconInformation);
  }

  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(_WORD *)uint64_t v26 = *(_WORD *)v27;
  *(_BYTE *)(v26 + 2)  = *(_BYTE *)(v27 + 2);
  uint64_t v28 = a1 + v25;
  uint64_t v29 = a2 + v25;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_BYTE *)(v28 + 16)  = *(_BYTE *)(v29 + 16);
  uint64_t v30 = a3[11];
  uint64_t v31 = a3[12];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(_WORD *)uint64_t v32 = *(_WORD *)v33;
  *(_BYTE *)(v32 + 2)  = *(_BYTE *)(v33 + 2);
  uint64_t v34 = a1 + v31;
  uint64_t v35 = a2 + v31;
  *(_WORD *)uint64_t v34 = *(_WORD *)v35;
  *(_BYTE *)(v34 + 2)  = *(_BYTE *)(v35 + 2);
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(_DWORD *)(v38 + 8)  = *(_DWORD *)(v39 + 8);
  *(void *)uint64_t v38 = *(void *)v39;
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(_BYTE *)(v40 + 4)  = *(_BYTE *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  uint64_t v42 = a3[16];
  *(_OWORD *)(a1 + a3[15])  = *(_OWORD *)(a2 + a3[15]);
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  *(void *)(v43 + 32)  = *(void *)(v44 + 32);
  __int128 v45 = *(_OWORD *)(v44 + 16);
  *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
  *(_OWORD *)(v43 + 16)  = v45;
  uint64_t v46 = a3[17];
  uint64_t v47 = a3[18];
  uint64_t v48 = a1 + v46;
  uint64_t v49 = (__int128 *)(a2 + v46);
  __int128 v50 = *v49;
  *(_DWORD *)(v48 + 16)  = *((_DWORD *)v49 + 4);
  uint64_t v51 = (_DWORD *)(a1 + v47);
  uint64_t v52 = (_DWORD *)(a2 + v47);
  *(_OWORD *)uint64_t v48 = v50;
  uint64_t v53 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1LL, v53))
  {
    uint64_t v55 = sub_100002274(&qword_10040CED0);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
  }

  else
  {
    uint64_t v91 = v54;
    uint64_t v92 = v51;
    *(_WORD *)uint64_t v51 = *(_WORD *)v52;
    v51[1]  = v52[1];
    uint64_t v56 = *(int *)(v53 + 28);
    uint64_t v57 = (char *)v51 + v56;
    uint64_t v58 = (char *)v52 + v56;
    char *v57 = *((_BYTE *)v52 + v56);
    *(_WORD *)(v57 + 1)  = *(_WORD *)((char *)v52 + v56 + 1);
    uint64_t v59 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v60 = v59[6];
    __dst  = &v57[v60];
    uint64_t v61 = &v58[v60];
    uint64_t v62 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    uint64_t v63 = *(void *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1LL, v62))
    {
      uint64_t v64 = sub_100002274((uint64_t *)&unk_10040D470);
      memcpy(__dst, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(__dst, v61, v62);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dst, 0LL, 1LL, v62);
    }

    *(_OWORD *)&v57[v59[7]]  = *(_OWORD *)&v58[v59[7]];
    *(_OWORD *)&v57[v59[8]]  = *(_OWORD *)&v58[v59[8]];
    *(_OWORD *)&v57[v59[9]]  = *(_OWORD *)&v58[v59[9]];
    uint64_t v65 = v59[10];
    __dsta  = &v57[v65];
    uint64_t v66 = &v58[v65];
    uint64_t v67 = type metadata accessor for UUID(0LL);
    uint64_t v68 = *(void *)(v67 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1LL, v67))
    {
      uint64_t v69 = sub_100002274(qword_100410330);
      memcpy(__dsta, v66, *(void *)(*(void *)(v69 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(__dsta, v66, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(__dsta, 0LL, 1LL, v67);
    }

    *(void *)&v57[v59[11]]  = *(void *)&v58[v59[11]];
    uint64_t v70 = v59[12];
    __dstb  = &v57[v70];
    uint64_t v71 = &v58[v70];
    uint64_t v72 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
    uint64_t v73 = *(void *)(v72 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1LL, v72))
    {
      uint64_t v74 = sub_100002274((uint64_t *)&unk_10040DCC0);
      memcpy(__dstb, v71, *(void *)(*(void *)(v74 - 8) + 64LL));
    }

    else
    {
      uint64_t v75 = type metadata accessor for DispatchTimeInterval(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32LL))(__dstb, v71, v75);
      __dstb[*(int *)(v72 + 20)]  = v71[*(int *)(v72 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(__dstb, 0LL, 1LL, v72);
    }

    uint64_t v76 = v59[13];
    __int128 v77 = &v57[v76];
    __int128 v78 = &v58[v76];
    *(_OWORD *)__int128 v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 9)  = *(_OWORD *)(v78 + 9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v91 + 56))(v92, 0LL, 1LL, v53);
  }

  uint64_t v79 = a3[20];
  *(void *)(a1 + a3[19])  = *(void *)(a2 + a3[19]);
  v80  = (void *)(a1 + v79);
  unint64_t v81 = (const void *)(a2 + v79);
  uint64_t v82 = type metadata accessor for UUID(0LL);
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v83 + 48);
  if (v84(v81, 1LL, v82))
  {
    uint64_t v85 = sub_100002274(qword_100410330);
    memcpy(v80, v81, *(void *)(*(void *)(v85 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v83 + 32))(v80, v81, v82);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0LL, 1LL, v82);
  }

  uint64_t v86 = a3[21];
  uint64_t v87 = (void *)(a1 + v86);
  uint64_t v88 = (const void *)(a2 + v86);
  if (v84(v88, 1LL, v82))
  {
    uint64_t v89 = sub_100002274(qword_100410330);
    memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v83 + 32))(v87, v88, v82);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v87, 0LL, 1LL, v82);
  }

  return a1;
}

uint64_t sub_100249A68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  v175  = a3;
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_WORD *)(v18 + 4)  = *(_WORD *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  v174  = a2;
  uint64_t v21 = a2 + v17;
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  uint64_t v23 = *(void *)(BeaconInformation - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1LL, BeaconInformation);
  int v26 = v24(v21, 1LL, BeaconInformation);
  if (v25)
  {
    if (!v26)
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      *(_WORD *)(v20 + 4)  = *(_WORD *)(v21 + 4);
      *(_OWORD *)(v20 + 8)  = *(_OWORD *)(v21 + 8);
      *(void *)(v20 + 24)  = *(void *)(v21 + 24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))( v20 + *(int *)(BeaconInformation + 32),  v21 + *(int *)(BeaconInformation + 32),  v13);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, BeaconInformation);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v26)
  {
    sub_10005802C(v20, type metadata accessor for NANPeer.LastBeaconInformation);
LABEL_6:
    uint64_t v27 = sub_100002274(&qword_10040CEC8);
    memcpy((void *)v20, (const void *)v21, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_WORD *)(v20 + 4)  = *(_WORD *)(v21 + 4);
  *(_OWORD *)(v20 + 8)  = *(_OWORD *)(v21 + 8);
  *(void *)(v20 + 24)  = *(void *)(v21 + 24);
  v15(v20 + *(int *)(BeaconInformation + 32), v21 + *(int *)(BeaconInformation + 32), v13);
LABEL_7:
  uint64_t v29 = v174;
  uint64_t v28 = v175;
  uint64_t v30 = v175[9];
  uint64_t v31 = v175[10];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = v174 + v30;
  *(_WORD *)uint64_t v32 = *(_WORD *)v33;
  *(_BYTE *)(v32 + 2)  = *(_BYTE *)(v33 + 2);
  uint64_t v34 = a1 + v31;
  uint64_t v35 = v174 + v31;
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *(_BYTE *)(v34 + 16)  = *(_BYTE *)(v35 + 16);
  uint64_t v36 = v175[11];
  uint64_t v37 = v175[12];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = v174 + v36;
  *(_WORD *)uint64_t v38 = *(_WORD *)v39;
  *(_BYTE *)(v38 + 2)  = *(_BYTE *)(v39 + 2);
  uint64_t v40 = a1 + v37;
  uint64_t v41 = v174 + v37;
  *(_BYTE *)(v40 + 2)  = *(_BYTE *)(v41 + 2);
  *(_WORD *)uint64_t v40 = *(_WORD *)v41;
  uint64_t v42 = v175[13];
  uint64_t v43 = v175[14];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = v174 + v42;
  *(void *)uint64_t v44 = *(void *)v45;
  *(_DWORD *)(v44 + 8)  = *(_DWORD *)(v45 + 8);
  uint64_t v46 = a1 + v43;
  uint64_t v47 = v174 + v43;
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  *(_BYTE *)(v46 + 4)  = *(_BYTE *)(v47 + 4);
  uint64_t v48 = v175[15];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = v174 + v48;
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  *(_BYTE *)(v49 + 4)  = *(_BYTE *)(v50 + 4);
  *(_BYTE *)(v49 + 5)  = *(_BYTE *)(v50 + 5);
  *(_BYTE *)(v49 + 6)  = *(_BYTE *)(v50 + 6);
  uint64_t v51 = *(void *)(v49 + 8);
  *(void *)(v49 + 8)  = *(void *)(v50 + 8);
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = v175[16];
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = v174 + v52;
  uint64_t v55 = *(void *)(a1 + v52 + 8);
  if (v55)
  {
    uint64_t v56 = *(void *)(v54 + 8);
    if (v56)
    {
      *(_BYTE *)uint64_t v53 = *(_BYTE *)v54;
      v53[1]  = v56;
      swift_bridgeObjectRelease(v55);
      uint64_t v57 = v53[2];
      v53[2]  = *(void *)(v54 + 16);
      swift_bridgeObjectRelease(v57);
      uint64_t v58 = v53[3];
      v53[3]  = *(void *)(v54 + 24);
      swift_bridgeObjectRelease(v58);
      uint64_t v59 = v53[4];
      v53[4]  = *(void *)(v54 + 32);
      swift_bridgeObjectRelease(v59);
      goto LABEL_12;
    }

    sub_100249440(v53);
  }

  __int128 v60 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
  *((_OWORD *)v53 + 1)  = v60;
  v53[4]  = *(void *)(v54 + 32);
LABEL_12:
  uint64_t v61 = v175[17];
  uint64_t v62 = v175[18];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = v174 + v61;
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *(_DWORD *)(v63 + 16)  = *(_DWORD *)(v64 + 16);
  uint64_t v65 = (_DWORD *)(a1 + v62);
  uint64_t v66 = (_DWORD *)(v174 + v62);
  uint64_t v67 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  uint64_t v68 = *(void *)(v67 - 8);
  uint64_t v69 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v68 + 48);
  int v70 = v69(v65, 1LL, v67);
  int v71 = v69(v66, 1LL, v67);
  if (!v70)
  {
    if (v71)
    {
      sub_10005802C((uint64_t)v65, type metadata accessor for NANAttribute.CustomDeviceInformation);
      goto LABEL_18;
    }

    *(_WORD *)uint64_t v65 = *(_WORD *)v66;
    v65[1]  = v66[1];
    uint64_t v83 = *(int *)(v67 + 28);
    uint64_t v84 = (char *)v65 + v83;
    uint64_t v85 = (char *)v66 + v83;
    *uint64_t v84 = *((_BYTE *)v66 + v83);
    *(_WORD *)(v84 + 1)  = *(_WORD *)((char *)v66 + v83 + 1);
    uint64_t v86 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
    uint64_t v87 = v86[6];
    uint64_t v88 = &v84[v87];
    uint64_t v89 = &v85[v87];
    uint64_t v90 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
    uint64_t v91 = *(void *)(v90 - 8);
    uint64_t v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48);
    int v93 = v92(v88, 1LL, v90);
    int v94 = v92(v89, 1LL, v90);
    if (v93)
    {
      if (!v94)
      {
        (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v88, v89, v90);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v88, 0LL, 1LL, v90);
        goto LABEL_34;
      }
    }

    else
    {
      if (!v94)
      {
        (*(void (**)(char *, char *, uint64_t))(v91 + 40))(v88, v89, v90);
LABEL_34:
        uint64_t v112 = v86[7];
        int v113 = (uint64_t *)&v84[v112];
        uint64_t v114 = (uint64_t *)&v85[v112];
        unint64_t v115 = *(void *)&v84[v112 + 8];
        if (v115 >> 60 != 15)
        {
          unint64_t v116 = v114[1];
          if (v116 >> 60 != 15)
          {
            uint64_t v117 = *v113;
            uint64_t *v113 = *v114;
            v113[1]  = v116;
            sub_1000208D8(v117, v115);
LABEL_39:
            uint64_t v118 = v86[8];
            uint64_t v119 = (uint64_t *)&v84[v118];
            uint64_t v120 = (uint64_t *)&v85[v118];
            v121  = *(void *)&v84[v118 + 8];
            if (v121 >> 60 != 15)
            {
              v122  = v120[1];
              if (v122 >> 60 != 15)
              {
                uint64_t v123 = *v119;
                uint64_t *v119 = *v120;
                v119[1]  = v122;
                sub_1000208D8(v123, v121);
LABEL_44:
                uint64_t v124 = v86[9];
                uint64_t v125 = (uint64_t *)&v84[v124];
                uint64_t v126 = (uint64_t *)&v85[v124];
                unint64_t v127 = *(void *)&v84[v124 + 8];
                if (v127 >> 60 != 15)
                {
                  unint64_t v128 = v126[1];
                  if (v128 >> 60 != 15)
                  {
                    v129  = *v125;
                    *uint64_t v125 = *v126;
                    v125[1]  = v128;
                    sub_1000208D8(v129, v127);
LABEL_49:
                    v130  = v86[10];
                    v131  = &v84[v130];
                    uint64_t v132 = &v85[v130];
                    v133  = type metadata accessor for UUID(0LL);
                    v134  = *(void *)(v133 - 8);
                    uint64_t v135 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v134 + 48);
                    v136  = v135(v131, 1LL, v133);
                    v137  = v135(v132, 1LL, v133);
                    if (v136)
                    {
                      if (!v137)
                      {
                        (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v131, v132, v133);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v131, 0LL, 1LL, v133);
                        goto LABEL_55;
                      }
                    }

                    else
                    {
                      if (!v137)
                      {
                        (*(void (**)(char *, char *, uint64_t))(v134 + 40))(v131, v132, v133);
LABEL_55:
                        uint64_t v139 = v86[11];
                        v140  = *(void *)&v84[v139];
                        *(void *)&v84[v139]  = *(void *)&v85[v139];
                        swift_bridgeObjectRelease(v140);
                        v141  = v86[12];
                        v142  = &v84[v141];
                        uint64_t v143 = &v85[v141];
                        v144  = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
                        uint64_t v145 = *(void *)(v144 - 8);
                        v146  = *(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 48);
                        int v147 = v146(v142, 1LL, v144);
                        int v148 = v146(v143, 1LL, v144);
                        if (v147)
                        {
                          if (!v148)
                          {
                            uint64_t v149 = type metadata accessor for DispatchTimeInterval(0LL);
                            (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 32LL))( v142,  v143,  v149);
                            v142[*(int *)(v144 + 20)]  = v143[*(int *)(v144 + 20)];
                            (*(void (**)(char *, void, uint64_t, uint64_t))(v145 + 56))(v142, 0LL, 1LL, v144);
LABEL_61:
                            v151  = v86[13];
                            v152  = &v84[v151];
                            uint64_t v153 = &v85[v151];
                            *(_OWORD *)v152  = *(_OWORD *)v153;
                            *(_OWORD *)(v152 + 9)  = *(_OWORD *)(v153 + 9);
                            uint64_t v29 = v174;
                            uint64_t v28 = v175;
                            goto LABEL_62;
                          }
                        }

                        else
                        {
                          if (!v148)
                          {
                            v172  = type metadata accessor for DispatchTimeInterval(0LL);
                            (*(void (**)(char *, char *, uint64_t))(*(void *)(v172 - 8) + 40LL))( v142,  v143,  v172);
                            v142[*(int *)(v144 + 20)]  = v143[*(int *)(v144 + 20)];
                            goto LABEL_61;
                          }

                          sub_10005802C( (uint64_t)v142,  type metadata accessor for NANInternetSharingStatistics.Requester);
                        }

                        v150  = sub_100002274((uint64_t *)&unk_10040DCC0);
                        memcpy(v142, v143, *(void *)(*(void *)(v150 - 8) + 64LL));
                        goto LABEL_61;
                      }

                      (*(void (**)(char *, uint64_t))(v134 + 8))(v131, v133);
                    }

                    uint64_t v138 = sub_100002274(qword_100410330);
                    memcpy(v131, v132, *(void *)(*(void *)(v138 - 8) + 64LL));
                    goto LABEL_55;
                  }

                  sub_1001682A8((uint64_t)v125);
                }

                *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
                goto LABEL_49;
              }

              sub_1001682A8((uint64_t)v119);
            }

            *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
            goto LABEL_44;
          }

          sub_1001682A8((uint64_t)v113);
        }

        *(_OWORD *)int v113 = *(_OWORD *)v114;
        goto LABEL_39;
      }

      (*(void (**)(char *, uint64_t))(v91 + 8))(v88, v90);
    }

    uint64_t v111 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v88, v89, *(void *)(*(void *)(v111 - 8) + 64LL));
    goto LABEL_34;
  }

  if (v71)
  {
LABEL_18:
    uint64_t v82 = sub_100002274(&qword_10040CED0);
    memcpy(v65, v66, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_62;
  }

  v173  = v68;
  *(_WORD *)uint64_t v65 = *(_WORD *)v66;
  v65[1]  = v66[1];
  uint64_t v72 = *(int *)(v67 + 28);
  uint64_t v73 = (char *)v65 + v72;
  uint64_t v74 = (char *)v66 + v72;
  char *v73 = *((_BYTE *)v66 + v72);
  *(_WORD *)(v73 + 1)  = *(_WORD *)((char *)v66 + v72 + 1);
  uint64_t v75 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  uint64_t v76 = v75[6];
  __int128 v77 = &v73[v76];
  __int128 v78 = &v74[v76];
  uint64_t v79 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  v80  = *(void *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1LL, v79))
  {
    uint64_t v81 = sub_100002274((uint64_t *)&unk_10040D470);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0LL, 1LL, v79);
  }

  *(_OWORD *)&v73[v75[7]]  = *(_OWORD *)&v74[v75[7]];
  *(_OWORD *)&v73[v75[8]]  = *(_OWORD *)&v74[v75[8]];
  *(_OWORD *)&v73[v75[9]]  = *(_OWORD *)&v74[v75[9]];
  uint64_t v95 = v75[10];
  uint64_t v96 = &v73[v95];
  uint64_t v97 = &v74[v95];
  uint64_t v98 = type metadata accessor for UUID(0LL);
  uint64_t v99 = *(void *)(v98 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1LL, v98))
  {
    uint64_t v100 = sub_100002274(qword_100410330);
    memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v96, v97, v98);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0LL, 1LL, v98);
  }

  *(void *)&v73[v75[11]]  = *(void *)&v74[v75[11]];
  uint64_t v101 = v75[12];
  uint64_t v102 = &v73[v101];
  uint64_t v103 = &v74[v101];
  uint64_t v104 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  v105  = *(void *)(v104 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1LL, v104))
  {
    uint64_t v106 = sub_100002274((uint64_t *)&unk_10040DCC0);
    memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64LL));
  }

  else
  {
    uint64_t v107 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 32LL))(v102, v103, v107);
    v102[*(int *)(v104 + 20)]  = v103[*(int *)(v104 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0LL, 1LL, v104);
  }

  uint64_t v28 = v175;
  uint64_t v108 = v75[13];
  uint64_t v109 = &v73[v108];
  v110  = &v74[v108];
  *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
  *(_OWORD *)(v109 + 9)  = *(_OWORD *)(v110 + 9);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v173 + 56))(v65, 0LL, 1LL, v67);
  uint64_t v29 = v174;
LABEL_62:
  uint64_t v154 = v28[19];
  v155  = *(void *)(a1 + v154);
  *(void *)(a1 + v154)  = *(void *)(v29 + v154);
  swift_bridgeObjectRelease(v155);
  uint64_t v156 = v28[20];
  uint64_t v157 = (void *)(a1 + v156);
  unint64_t v158 = (void *)(v29 + v156);
  v159  = type metadata accessor for UUID(0LL);
  uint64_t v160 = *(void *)(v159 - 8);
  uint64_t v161 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v160 + 48);
  v162  = v161(v157, 1LL, v159);
  v163  = v161(v158, 1LL, v159);
  if (v162)
  {
    if (!v163)
    {
      (*(void (**)(void *, void *, uint64_t))(v160 + 32))(v157, v158, v159);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0LL, 1LL, v159);
      goto LABEL_68;
    }

    goto LABEL_67;
  }

  if (v163)
  {
    (*(void (**)(void *, uint64_t))(v160 + 8))(v157, v159);
LABEL_67:
    v164  = sub_100002274(qword_100410330);
    memcpy(v157, v158, *(void *)(*(void *)(v164 - 8) + 64LL));
    goto LABEL_68;
  }

  (*(void (**)(void *, void *, uint64_t))(v160 + 40))(v157, v158, v159);
LABEL_68:
  v165  = v28[21];
  v166  = (void *)(a1 + v165);
  v167  = (void *)(v29 + v165);
  v168  = v161((void *)(a1 + v165), 1LL, v159);
  v169  = v161(v167, 1LL, v159);
  if (!v168)
  {
    if (!v169)
    {
      (*(void (**)(void *, void *, uint64_t))(v160 + 40))(v166, v167, v159);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v160 + 8))(v166, v159);
    goto LABEL_73;
  }

  if (v169)
  {
LABEL_73:
    v170  = sub_100002274(qword_100410330);
    memcpy(v166, v167, *(void *)(*(void *)(v170 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v160 + 32))(v166, v167, v159);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v160 + 56))(v166, 0LL, 1LL, v159);
  return a1;
}

uint64_t sub_10024A604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024A610);
}

uint64_t sub_10024A610(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[6];
LABEL_14:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  uint64_t v14 = sub_100002274(&qword_10040CEC8);
  uint64_t v12 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v14;
    uint64_t v13 = a3[8];
    goto LABEL_14;
  }

  uint64_t v15 = sub_100002274(&qword_10040CED0);
  uint64_t v12 = *(void *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v15;
    uint64_t v13 = a3[18];
    goto LABEL_14;
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = sub_100002274(qword_100410330);
    uint64_t v12 = *(void *)(v8 - 8);
    uint64_t v13 = a3[20];
    goto LABEL_14;
  }

  unint64_t v16 = *(void *)(a1 + a3[19]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16)  = -1;
  }
  return (v16 + 1);
}

uint64_t sub_10024A730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024A73C);
}

uint64_t sub_10024A73C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = type metadata accessor for DispatchTime(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[6];
    }

    else
    {
      uint64_t v16 = sub_100002274(&qword_10040CEC8);
      uint64_t v14 = *(void *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v15 = a4[8];
      }

      else
      {
        uint64_t result = sub_100002274(&qword_10040CED0);
        uint64_t v14 = *(void *)(result - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          uint64_t v10 = result;
          uint64_t v15 = a4[18];
        }

        else
        {
          if (a3 == 0x7FFFFFFF)
          {
            *(void *)(a1 + a4[19])  = (a2 - 1);
            return result;
          }

          uint64_t v10 = sub_100002274(qword_100410330);
          uint64_t v14 = *(void *)(v10 - 8);
          uint64_t v15 = a4[20];
        }
      }
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NANPeer(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_10040CF30, (uint64_t)&nominal type descriptor for NANPeer);
}

void sub_10024A86C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v12[0]  = *(void *)(v2 - 8) + 64LL;
    v12[1]  = &unk_10035DBF0;
    uint64_t v4 = type metadata accessor for DispatchTime(319LL);
    if (v5 <= 0x3F)
    {
      v12[2]  = *(void *)(v4 - 8) + 64LL;
      v12[3]  = &unk_10035DBF0;
      sub_100056310(319LL, &qword_10040CF40, type metadata accessor for NANPeer.LastBeaconInformation);
      if (v7 <= 0x3F)
      {
        v12[4]  = *(void *)(v6 - 8) + 64LL;
        v12[5]  = &unk_10035DC08;
        v12[6]  = &unk_10035DC20;
        v12[7]  = &unk_10035DC08;
        v12[8]  = &unk_10035DC38;
        v12[9]  = &unk_10035DC50;
        v12[10]  = &unk_10035DC68;
        v12[11]  = &unk_10035DC80;
        v12[12]  = &unk_10035DC98;
        v12[13]  = &unk_10035DCB0;
        sub_100056310( 319LL,  (unint64_t *)&unk_10040CF48,  type metadata accessor for NANAttribute.CustomDeviceInformation);
        if (v9 <= 0x3F)
        {
          v12[14]  = *(void *)(v8 - 8) + 64LL;
          v12[15]  = (char *)&value witness table for Builtin.BridgeObject + 64;
          sub_100056310( 319LL,  (unint64_t *)&unk_10040B328,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          if (v11 <= 0x3F)
          {
            uint64_t v13 = *(void *)(v10 - 8) + 64LL;
            uint64_t v14 = v13;
            swift_initStructMetadata(a1, 256LL, 18LL, v12, a1 + 16);
          }
        }
      }
    }
  }

uint64_t destroy for NANPeer.Availability(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for NANPeer.Availability(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = v5;
  *(void *)(a1 + 32)  = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for NANPeer.Availability(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32)  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for NANPeer.Availability(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1  = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPeer.Availability(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_1000208D8(v3, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPeer.Availability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability()
{
  return &type metadata for NANPeer.Availability;
}

void *sub_10024ABFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(_DWORD *)a1  = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4)  = *((_WORD *)a2 + 2);
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24)  = a2[3];
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for DispatchTime(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_10024AC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t sub_10024ACD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_10024AD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_10024ADCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_10024AE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_10024AEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024AEC0);
}

uint64_t sub_10024AEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 253)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 4);
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTime(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t sub_10024AF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024AF40);
}

uint64_t sub_10024AF40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 4)  = a2 + 2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10024AFB0(uint64_t a1)
{
  v4[0]  = &unk_10035DCF8;
  v4[1]  = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3]  = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    v4[4]  = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_10024B034(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = v12 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_100020AFC(*(void *)a2, v8);
    *(void *)a1  = v7;
    *(void *)(a1 + 8)  = v8;
    *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
    *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
    *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
    *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 24)  = v9;
    unsigned __int8 v10 = *(_BYTE *)(a2 + 50);
    int v11 = *(unsigned __int16 *)(a2 + 48);
    swift_bridgeObjectRetain(v9);
    if (v10 == 255)
    {
      *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
    }

    else
    {
      uint64_t v13 = v11 & 0xFF00FFFF | (v10 << 16);
      uint64_t v14 = *(void *)(a2 + 32);
      unint64_t v15 = *(void *)(a2 + 40);
      sub_1001CDEC4(v14, v15, v13, BYTE2(v13) & 1);
      *(void *)(a1 + 32)  = v14;
      *(void *)(a1 + 40)  = v15;
      *(_WORD *)(a1 + 48)  = v13;
      *(_BYTE *)(a1 + 50)  = BYTE2(v13) & 1;
    }

    uint64_t v16 = *(unsigned __int8 *)(a2 + 56);
    if (v16 == 4)
    {
      *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
    }

    else
    {
      *(_BYTE *)(a1 + 56)  = v16;
      uint64_t v17 = *(void *)(a2 + 64);
      unint64_t v18 = *(void *)(a2 + 72);
      sub_100020AFC(v17, v18);
      *(void *)(a1 + 64)  = v17;
      *(void *)(a1 + 72)  = v18;
    }

    uint64_t v19 = (__int128 *)(a2 + 96);
    uint64_t v20 = *(unsigned __int8 *)(a2 + 96);
    if (v20 == 5)
    {
      __int128 v21 = *v19;
      *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96)  = v21;
      *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    }

    else
    {
      *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
      *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
      *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
      *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
      *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
      if (v20 == 4)
      {
        *(_OWORD *)(a1 + 96)  = *v19;
        *(void *)(a1 + 112)  = *(void *)(a2 + 112);
      }

      else
      {
        *(_BYTE *)(a1 + 96)  = v20;
        uint64_t v22 = *(void *)(a2 + 104);
        unint64_t v23 = *(void *)(a2 + 112);
        sub_100020AFC(v22, v23);
        *(void *)(a1 + 104)  = v22;
        *(void *)(a1 + 112)  = v23;
      }
    }

    int v24 = *(unsigned __int8 *)(a2 + 144);
    if (v24 == 255)
    {
      *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
    }

    else
    {
      char v25 = v24 & 1;
      uint64_t v26 = *(void *)(a2 + 120);
      uint64_t v27 = *(void *)(a2 + 128);
      unint64_t v28 = *(void *)(a2 + 136);
      sub_10024B284(v26, v27, v28, v24 & 1);
      *(void *)(a1 + 120)  = v26;
      *(void *)(a1 + 128)  = v27;
      *(void *)(a1 + 136)  = v28;
      *(_BYTE *)(a1 + 144)  = v25;
    }

    uint64_t v29 = *(int *)(a3 + 28);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    uint64_t v32 = type metadata accessor for DispatchTime(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
  }

  return a1;
}

uint64_t sub_10024B284(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return sub_100020AFC(a2, a3);
  }
  return result;
}

uint64_t sub_10024B298(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 50) != 255)
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
    sub_1001062D4(*(void *)(a1 + 32), *(void *)(a1 + 40), v4, BYTE2(v4) & 1);
  }

  if (*(_BYTE *)(a1 + 56) != 4LL) {
    sub_1000208D8(*(void *)(a1 + 64), *(void *)(a1 + 72));
  }
  if ((*(void *)(a1 + 96) & 0xFELL) != 4) {
    sub_1000208D8(*(void *)(a1 + 104), *(void *)(a1 + 112));
  }
  int v5 = *(unsigned __int8 *)(a1 + 144);
  if (v5 != 255) {
    sub_10024B358(*(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v5 & 1);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t sub_10024B358(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return sub_1000208D8(a2, a3);
  }
  return result;
}

uint64_t sub_10024B36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100020AFC(*(void *)a2, v7);
  *(void *)a1  = v6;
  *(void *)(a1 + 8)  = v7;
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v8;
  unsigned __int8 v9 = *(_BYTE *)(a2 + 50);
  int v10 = *(unsigned __int16 *)(a2 + 48);
  swift_bridgeObjectRetain(v8);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
  }

  else
  {
    uint64_t v11 = v10 & 0xFF00FFFF | (v9 << 16);
    uint64_t v12 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40);
    sub_1001CDEC4(v12, v13, v11, BYTE2(v11) & 1);
    *(void *)(a1 + 32)  = v12;
    *(void *)(a1 + 40)  = v13;
    *(_WORD *)(a1 + 48)  = v11;
    *(_BYTE *)(a1 + 50)  = BYTE2(v11) & 1;
  }

  uint64_t v14 = *(unsigned __int8 *)(a2 + 56);
  if (v14 == 4)
  {
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  }

  else
  {
    *(_BYTE *)(a1 + 56)  = v14;
    uint64_t v15 = *(void *)(a2 + 64);
    unint64_t v16 = *(void *)(a2 + 72);
    sub_100020AFC(v15, v16);
    *(void *)(a1 + 64)  = v15;
    *(void *)(a1 + 72)  = v16;
  }

  uint64_t v17 = (__int128 *)(a2 + 96);
  uint64_t v18 = *(unsigned __int8 *)(a2 + 96);
  if (v18 == 5)
  {
    __int128 v19 = *v17;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v19;
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  }

  else
  {
    *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
    *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
    *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
    *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
    *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
    if (v18 == 4)
    {
      *(_OWORD *)(a1 + 96)  = *v17;
      *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    }

    else
    {
      *(_BYTE *)(a1 + 96)  = v18;
      uint64_t v20 = *(void *)(a2 + 104);
      unint64_t v21 = *(void *)(a2 + 112);
      sub_100020AFC(v20, v21);
      *(void *)(a1 + 104)  = v20;
      *(void *)(a1 + 112)  = v21;
    }
  }

  int v22 = *(unsigned __int8 *)(a2 + 144);
  if (v22 == 255)
  {
    *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
  }

  else
  {
    char v23 = v22 & 1;
    uint64_t v24 = *(void *)(a2 + 120);
    uint64_t v25 = *(void *)(a2 + 128);
    unint64_t v26 = *(void *)(a2 + 136);
    sub_10024B284(v24, v25, v26, v22 & 1);
    *(void *)(a1 + 120)  = v24;
    *(void *)(a1 + 128)  = v25;
    *(void *)(a1 + 136)  = v26;
    *(_BYTE *)(a1 + 144)  = v23;
  }

  uint64_t v27 = *(int *)(a3 + 28);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
  return a1;
}

uint64_t sub_10024B590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100020AFC(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1  = v6;
  *(void *)(a1 + 8)  = v7;
  sub_1000208D8(v8, v9);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17)  = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18)  = *(_BYTE *)(a2 + 18);
  __int16 v10 = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  *(_WORD *)(a1 + 20)  = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 24)  = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  unint64_t v13 = (__int128 *)(a1 + 32);
  uint64_t v14 = (__int128 *)(a2 + 32);
  int v15 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (*(unsigned __int8 *)(a2 + 50) == 255)
    {
      __int128 v16 = *v14;
      *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
      __int128 *v13 = v16;
    }

    else
    {
      uint64_t v18 = *(void *)(a2 + 32);
      unint64_t v19 = *(void *)(a2 + 40);
      sub_1001CDEC4(v18, v19, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v15) & 1);
      *(void *)(a1 + 32)  = v18;
      *(void *)(a1 + 40)  = v19;
      *(_WORD *)(a1 + 48)  = v15;
      *(_BYTE *)(a1 + 50)  = BYTE2(v15) & 1;
    }
  }

  else if (*(unsigned __int8 *)(a2 + 50) == 255)
  {
    sub_1000225EC(a1 + 32, &qword_10040B218);
    int v17 = *(_DWORD *)(a2 + 47);
    __int128 *v13 = *v14;
    *(_DWORD *)(a1 + 47)  = v17;
  }

  else
  {
    uint64_t v20 = *(void *)(a2 + 32);
    unint64_t v21 = *(void *)(a2 + 40);
    sub_1001CDEC4(v20, v21, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v15) & 1);
    uint64_t v22 = *(void *)(a1 + 32);
    unint64_t v23 = *(void *)(a1 + 40);
    char v24 = *(_BYTE *)(a1 + 50);
    *(void *)(a1 + 32)  = v20;
    *(void *)(a1 + 40)  = v21;
    uint64_t v25 = *(unsigned __int16 *)(a1 + 48);
    *(_WORD *)(a1 + 48)  = v15;
    *(_BYTE *)(a1 + 50)  = BYTE2(v15) & 1;
    sub_1001062D4(v22, v23, v25, v24);
  }

  unint64_t v26 = (__int128 *)(a1 + 56);
  uint64_t v28 = (__int128 *)(a2 + 56);
  uint64_t v27 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a1 + 56) == 4LL)
  {
    if (v27 == 4)
    {
      __int128 v29 = *v28;
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
      *unint64_t v26 = v29;
    }

    else
    {
      *(_BYTE *)(a1 + 56)  = v27;
      uint64_t v31 = *(void *)(a2 + 64);
      unint64_t v32 = *(void *)(a2 + 72);
      sub_100020AFC(v31, v32);
      *(void *)(a1 + 64)  = v31;
      *(void *)(a1 + 72)  = v32;
    }
  }

  else if (v27 == 4)
  {
    sub_10017D06C(a1 + 56);
    uint64_t v30 = *(void *)(a2 + 72);
    *unint64_t v26 = *v28;
    *(void *)(a1 + 72)  = v30;
  }

  else
  {
    *(_BYTE *)(a1 + 56)  = v27;
    uint64_t v33 = *(void *)(a2 + 64);
    unint64_t v34 = *(void *)(a2 + 72);
    sub_100020AFC(v33, v34);
    uint64_t v35 = *(void *)(a1 + 64);
    unint64_t v36 = *(void *)(a1 + 72);
    *(void *)(a1 + 64)  = v33;
    *(void *)(a1 + 72)  = v34;
    sub_1000208D8(v35, v36);
  }

  uint64_t v38 = (_OWORD *)(a1 + 96);
  uint64_t v37 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v39 = (_OWORD *)(a1 + 80);
  uint64_t v41 = (_OWORD *)(a2 + 96);
  uint64_t v40 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v42 = (_OWORD *)(a2 + 80);
  if (v37 != 5)
  {
    if (v40 == 5)
    {
      sub_10024B9D4(a1 + 80);
      uint64_t v45 = *(void *)(a2 + 112);
      __int128 v46 = *(_OWORD *)(a2 + 96);
      *uint64_t v39 = *v42;
      *(_OWORD *)(a1 + 96)  = v46;
      *(void *)(a1 + 112)  = v45;
      goto LABEL_30;
    }

    *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
    *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
    int v49 = *(_DWORD *)(a2 + 84);
    *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(a1 + 84)  = v49;
    *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
    uint64_t v50 = *(unsigned __int8 *)(a2 + 96);
    if (v37 != 4)
    {
      if (v50 == 4)
      {
        sub_10017D06C(a1 + 96);
        uint64_t v52 = *(void *)(a2 + 112);
        *uint64_t v38 = *v41;
        *(void *)(a1 + 112)  = v52;
      }

      else
      {
        *(_BYTE *)(a1 + 96)  = v50;
        uint64_t v55 = *(void *)(a2 + 104);
        unint64_t v56 = *(void *)(a2 + 112);
        sub_100020AFC(v55, v56);
        uint64_t v57 = *(void *)(a1 + 104);
        unint64_t v58 = *(void *)(a1 + 112);
        *(void *)(a1 + 104)  = v55;
        *(void *)(a1 + 112)  = v56;
        sub_1000208D8(v57, v58);
      }

      goto LABEL_30;
    }

    if (v50 != 4)
    {
      *(_BYTE *)(a1 + 96)  = v50;
      goto LABEL_28;
    }

uint64_t sub_10024B9D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10024BA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v4;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v5;
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v6;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 120)  = v7;
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_10024BA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  sub_1000208D8(v6, v7);
  *(_BYTE *)(a1 + 16)  = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22)  = *(_BYTE *)(a2 + 22);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = (_OWORD *)(a2 + 32);
  unsigned int v10 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (HIWORD(v10) > 0xFEu)
  {
    sub_1000225EC(a1 + 32, &qword_10040B218);
LABEL_4:
    *(_OWORD *)(a1 + 32)  = *v9;
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
    goto LABEL_6;
  }

  uint64_t v11 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *v9;
  *(_WORD *)(a1 + 48)  = v10;
  *(_BYTE *)(a1 + 50)  = BYTE2(v10) & 1;
  sub_1001062D4(v12, v13, v11, BYTE2(v11) & 1);
LABEL_6:
  uint64_t v14 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a1 + 56) == 4LL)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
    goto LABEL_11;
  }

  if (v14 == 4)
  {
    sub_10017D06C(a1 + 56);
    goto LABEL_9;
  }

  *(_BYTE *)(a1 + 56)  = v14;
  uint64_t v15 = *(void *)(a1 + 64);
  unint64_t v16 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  sub_1000208D8(v15, v16);
LABEL_11:
  uint64_t v17 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v18 = *(unsigned __int8 *)(a2 + 96);
  if (v17 == 5)
  {
LABEL_14:
    __int128 v19 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v19;
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    goto LABEL_20;
  }

  if (v18 == 5)
  {
    sub_10024B9D4(a1 + 80);
    goto LABEL_14;
  }

  *(_BYTE *)(a1 + 80)  = *(_BYTE *)(a2 + 80);
  *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88)  = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
  if (v17 == 4) {
    goto LABEL_18;
  }
  if (v18 == 4)
  {
    sub_10017D06C(a1 + 96);
LABEL_18:
    *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    goto LABEL_20;
  }

  *(_BYTE *)(a1 + 96)  = v18;
  uint64_t v20 = *(void *)(a1 + 104);
  unint64_t v21 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  sub_1000208D8(v20, v21);
LABEL_20:
  int v22 = *(unsigned __int8 *)(a1 + 144);
  if (v22 != 255)
  {
    int v23 = *(unsigned __int8 *)(a2 + 144);
    if (v23 != 255)
    {
      char v24 = v22 & 1;
      uint64_t v25 = *(void *)(a2 + 136);
      uint64_t v26 = *(void *)(a1 + 120);
      uint64_t v27 = *(void *)(a1 + 128);
      unint64_t v28 = *(void *)(a1 + 136);
      *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 136)  = v25;
      *(_BYTE *)(a1 + 144)  = v23 & 1;
      sub_10024B358(v26, v27, v28, v24);
      goto LABEL_25;
    }

    sub_1000225EC(a1 + 120, &qword_10040D058);
  }

  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
LABEL_25:
  uint64_t v29 = *(int *)(a3 + 28);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40LL))(v30, v31, v32);
  return a1;
}

uint64_t sub_10024BD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024BD34);
}

uint64_t sub_10024BD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = type metadata accessor for DispatchTime(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v9);
  }

uint64_t sub_10024BDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024BDC8);
}

uint64_t sub_10024BDC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 24)  = a2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for NANPeer.Service(uint64_t a1)
{
  return sub_100020E48(a1, qword_10040D0B8, (uint64_t)&nominal type descriptor for NANPeer.Service);
}

uint64_t sub_10024BE50(uint64_t a1)
{
  v4[0]  = "P";
  v4[1]  = &unk_10035DD30;
  void v4[2] = &unk_10035DD48;
  uint64_t result = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    v4[3]  = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10024BED8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a2, v7);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = *a2;
      unint64_t v20 = a2[1];
      sub_100020AFC(*a2, v20);
      *a1  = v19;
      a1[1]  = v20;
      unint64_t v21 = a1;
      uint64_t v22 = v7;
      uint64_t v23 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v24 = *a2;
      *a1  = *a2;
      swift_bridgeObjectRetain(v24);
      unint64_t v21 = a1;
      uint64_t v22 = v7;
      uint64_t v23 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
LABEL_14:
        uint64_t v25 = *(int *)(a3 + 20);
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = type metadata accessor for DispatchTime(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
        return a1;
      }

      uint64_t v9 = type metadata accessor for SymmetricKey(0LL);
      unsigned int v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL);
      v10(a1, a2, v9);
      uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v10((uint64_t *)((char *)a1 + v11[5]), (uint64_t *)((char *)a2 + v11[5]), v9);
      v10((uint64_t *)((char *)a1 + v11[6]), (uint64_t *)((char *)a2 + v11[6]), v9);
      uint64_t v12 = v11[7];
      unint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = sub_100002274(&qword_100408AA8);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      unint64_t v21 = a1;
      uint64_t v22 = v7;
      uint64_t v23 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v21, v22, v23);
    goto LABEL_14;
  }

  uint64_t v18 = *a2;
  *a1  = *a2;
  a1  = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for NANPeer.Service.AuthenticationStatus.State(uint64_t a1)
{
  return sub_100020E48( a1,  qword_10040D1F8,  (uint64_t)&nominal type descriptor for NANPeer.Service.AuthenticationStatus.State);
}

uint64_t sub_10024C0F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a1, v4);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_1000208D8(*a1, a1[1]);
      break;
    case 1:
      swift_bridgeObjectRelease(*a1);
      break;
    case 0:
      uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v7 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v6 - 8) + 8LL);
      v7(a1, v6);
      uint64_t v8 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v7((uint64_t *)((char *)a1 + v8[5]), v6);
      v7((uint64_t *)((char *)a1 + v8[6]), v6);
      uint64_t v9 = (char *)a1 + v8[7];
      uint64_t v10 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v11 = *(void *)(v10 - 8);
      break;
  }

  uint64_t v12 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
}

uint64_t *sub_10024C210(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a2, v6);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v18 = a2[1];
      sub_100020AFC(*a2, v18);
      *a1  = v17;
      a1[1]  = v18;
      uint64_t v19 = a1;
      uint64_t v20 = v6;
      uint64_t v21 = 2LL;
LABEL_11:
      swift_storeEnumTagMultiPayload(v19, v20, v21);
      goto LABEL_12;
    case 1:
      uint64_t v22 = *a2;
      *a1  = *a2;
      swift_bridgeObjectRetain(v22);
      uint64_t v19 = a1;
      uint64_t v20 = v6;
      uint64_t v21 = 1LL;
      goto LABEL_11;
    case 0:
      uint64_t v8 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL);
      v9(a1, a2, v8);
      uint64_t v10 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v9((uint64_t *)((char *)a1 + v10[5]), (uint64_t *)((char *)a2 + v10[5]), v8);
      v9((uint64_t *)((char *)a1 + v10[6]), (uint64_t *)((char *)a2 + v10[6]), v8);
      uint64_t v11 = v10[7];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
      {
        uint64_t v16 = sub_100002274(&qword_100408AA8);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      }

      uint64_t v19 = a1;
      uint64_t v20 = v6;
      uint64_t v21 = 0LL;
      goto LABEL_11;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
LABEL_12:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v24, v25, v26);
  return a1;
}

uint64_t *sub_10024C3EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    goto LABEL_13;
  }
  sub_10005802C((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a2, v6);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v18 = a2[1];
      sub_100020AFC(*a2, v18);
      *a1  = v17;
      a1[1]  = v18;
      uint64_t v19 = a1;
      uint64_t v20 = v6;
      uint64_t v21 = 2LL;
LABEL_12:
      swift_storeEnumTagMultiPayload(v19, v20, v21);
      goto LABEL_13;
    case 1:
      uint64_t v22 = *a2;
      *a1  = *a2;
      swift_bridgeObjectRetain(v22);
      uint64_t v19 = a1;
      uint64_t v20 = v6;
      uint64_t v21 = 1LL;
      goto LABEL_12;
    case 0:
      uint64_t v8 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16LL);
      v9(a1, a2, v8);
      uint64_t v10 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v9((uint64_t *)((char *)a1 + v10[5]), (uint64_t *)((char *)a2 + v10[5]), v8);
      v9((uint64_t *)((char *)a1 + v10[6]), (uint64_t *)((char *)a2 + v10[6]), v8);
      uint64_t v11 = v10[7];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
      {
        uint64_t v16 = sub_100002274(&qword_100408AA8);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      }

      uint64_t v19 = a1;
      uint64_t v20 = v6;
      uint64_t v21 = 0LL;
      goto LABEL_12;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
LABEL_13:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24LL))(v24, v25, v26);
  return a1;
}

char *sub_10024C5E0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  if (swift_getEnumCaseMultiPayload(a2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL);
    v8(a1, a2, v7);
    uint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
    v8(&a1[v9[5]], &a2[v9[5]], v7);
    v8(&a1[v9[6]], &a2[v9[6]], v7);
    uint64_t v10 = v9[7];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
    {
      uint64_t v15 = sub_100002274(&qword_100408AA8);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
    }

    swift_storeEnumTagMultiPayload(a1, v6, 0LL);
  }

  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = &a1[v16];
  unint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  return a1;
}

char *sub_10024C76C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v6))
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL);
      v8(a1, a2, v7);
      uint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v8(&a1[v9[5]], &a2[v9[5]], v7);
      v8(&a1[v9[6]], &a2[v9[6]], v7);
      uint64_t v10 = v9[7];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
        uint64_t v15 = sub_100002274(&qword_100408AA8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      }

      swift_storeEnumTagMultiPayload(a1, v6, 0LL);
    }
  }

  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = &a1[v16];
  unint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_10024C910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024C91C);
}

uint64_t sub_10024C91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for DispatchTime(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10024C990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024C99C);
}

uint64_t sub_10024C99C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for DispatchTime(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NANPeer.Service.AuthenticationStatus(uint64_t a1)
{
  return sub_100020E48(a1, qword_10040D150, (uint64_t)&nominal type descriptor for NANPeer.Service.AuthenticationStatus);
}

uint64_t sub_10024CA2C(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(319LL);
  if (v3 <= 0x3F)
  {
    v5[0]  = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for DispatchTime(319LL);
    if (v4 <= 0x3F)
    {
      v5[1]  = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_10024CAB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v18 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v21 = *a2;
      unint64_t v20 = a2[1];
      sub_100020AFC(v21, v20);
      *a1  = v21;
      a1[1]  = v20;
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v22 = *a2;
      *a1  = *a2;
      swift_bridgeObjectRetain(v22);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL);
      v10(a1, a2, v9);
      uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v10((uint64_t *)((char *)a1 + v11[5]), (uint64_t *)((char *)a2 + v11[5]), v9);
      v10((uint64_t *)((char *)a1 + v11[6]), (uint64_t *)((char *)a2 + v11[6]), v9);
      uint64_t v12 = v11[7];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = sub_100002274(&qword_100408AA8);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

void sub_10024CC7C(uint64_t *a1, uint64_t a2)
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_1000208D8(*a1, a1[1]);
      break;
    case 1:
      swift_bridgeObjectRelease(*a1);
      break;
    case 0:
      uint64_t v4 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v5 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v4 - 8) + 8LL);
      v5(a1, v4);
      int v6 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v5((uint64_t *)((char *)a1 + v6[5]), v4);
      v5((uint64_t *)((char *)a1 + v6[6]), v4);
      uint64_t v7 = (char *)a1 + v6[7];
      uint64_t v8 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v9 = *(void *)(v8 - 8);
      break;
  }

uint64_t *sub_10024CD78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v16 = a2[1];
      sub_100020AFC(v17, v16);
      *a1  = v17;
      a1[1]  = v16;
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 2LL;
LABEL_11:
      swift_storeEnumTagMultiPayload(v18, v19, v20);
      return a1;
    case 1:
      uint64_t v21 = *a2;
      *a1  = *a2;
      swift_bridgeObjectRetain(v21);
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 1LL;
      goto LABEL_11;
    case 0:
      uint64_t v7 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
      v8(a1, a2, v7);
      uint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v8((uint64_t *)((char *)a1 + v9[5]), (uint64_t *)((char *)a2 + v9[5]), v7);
      v8((uint64_t *)((char *)a1 + v9[6]), (uint64_t *)((char *)a2 + v9[6]), v7);
      uint64_t v10 = v9[7];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
        uint64_t v15 = sub_100002274(&qword_100408AA8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 0LL;
      goto LABEL_11;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

uint64_t *sub_10024CF14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  sub_10005802C((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v16 = a2[1];
      sub_100020AFC(v17, v16);
      *a1  = v17;
      a1[1]  = v16;
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 2LL;
LABEL_12:
      swift_storeEnumTagMultiPayload(v18, v19, v20);
      return a1;
    case 1:
      uint64_t v21 = *a2;
      *a1  = *a2;
      swift_bridgeObjectRetain(v21);
      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 1LL;
      goto LABEL_12;
    case 0:
      uint64_t v7 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
      v8(a1, a2, v7);
      uint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v8((uint64_t *)((char *)a1 + v9[5]), (uint64_t *)((char *)a2 + v9[5]), v7);
      v8((uint64_t *)((char *)a1 + v9[6]), (uint64_t *)((char *)a2 + v9[6]), v7);
      uint64_t v10 = v9[7];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
        uint64_t v15 = sub_100002274(&qword_100408AA8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      }

      uint64_t v18 = a1;
      uint64_t v19 = a3;
      uint64_t v20 = 0LL;
      goto LABEL_12;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

char *sub_10024D0C8(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
    v7(a1, a2, v6);
    uint64_t v8 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
    v7(&a1[v8[5]], &a2[v8[5]], v6);
    v7(&a1[v8[6]], &a2[v8[6]], v6);
    uint64_t v9 = v8[7];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_100002274(&qword_100408AA8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

char *sub_10024D214(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005802C((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for SymmetricKey(0LL);
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0LL);
      v7(&a1[v8[5]], &a2[v8[5]], v6);
      v7(&a1[v8[6]], &a2[v8[6]], v6);
      uint64_t v9 = v8[7];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
      {
        uint64_t v14 = sub_100002274(&qword_100408AA8);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      }

      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_10024D378(uint64_t a1)
{
  uint64_t result = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[2] = &unk_10035DD80;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

Swift::Int sub_10024D3F4()
{
  Swift::UInt64 v2 = DispatchTime.rawValue.getter(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10024D48C(int a1)
{
  Swift::UInt64 v3 = DispatchTime.rawValue.getter(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_10024D500(uint64_t a1)
{
  Swift::UInt64 v3 = DispatchTime.rawValue.getter(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_10024D598()
{
  return sub_10000AF70( &qword_10040D230,  type metadata accessor for NANPeer.LastBeaconInformation,  (uint64_t)&unk_10035DD98);
}

void sub_10024D5C4()
{
  uint64_t v1 = v0;
  type metadata accessor for DispatchTime(0LL);
  __chkstk_darwin();
  type metadata accessor for DispatchTimeInterval(0LL);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v2 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100057FE8(v1, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_10024D6E8 + 4 * byte_10035DBD0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

BOOL sub_10024D6E8()
{
  uint64_t v8 = NANConstants.authenticationRequestTimeout.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v8, v0);
  BOOL v9 = static DispatchTimeInterval.< infix(_:_:)(v3, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10(v3, v0);
  v10(v4, v0);
  return v9;
}

uint64_t sub_10024D7BC()
{
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
  {
    uint64_t v2 = *(void *)(v0 + 120);
    uint64_t v3 = *(void *)(v0 + 128);
    unint64_t v4 = *(void *)(v0 + 136);
    int v5 = v1 & 1;
    uint64_t v6 = *(void *)(v0 + 96);
    if (v6 == 5)
    {
      uint64_t v7 = *(void *)(v0 + 56);
      if (v7 != 4LL)
      {
        BOOL v8 = v5 != 0;
        uint64_t v11 = v0 + 64;
        uint64_t v9 = *(void *)(v0 + 64);
        unint64_t v10 = *(void *)(v11 + 8);
        uint64_t v25 = v7;
        uint64_t v26 = v9;
        unint64_t v27 = v10;
        char v28 = 1;
        uint64_t v21 = v2;
        uint64_t v22 = v3;
        unint64_t v23 = v4;
        BOOL v24 = v8;
        sub_1001062A0(v7, v9, v10);
        sub_100020AFC(v9, v10);
        unint64_t v12 = sub_1001767BC();
        char v13 = static Either<>.== infix(_:_:)( (uint64_t)&v25,  (uint64_t)&v21,  (uint64_t)&type metadata for UInt8,  (uint64_t)&type metadata for NANServiceInfo,  (uint64_t)&protocol witness table for UInt8,  v12);
        sub_10024B358(v25, v26, v27, v28);
        sub_1001062E0(v7, v9, v10);
LABEL_12:
        char v14 = v13 ^ 1;
        return v14 & 1;
      }

      goto LABEL_8;
    }

    uint64_t v15 = *(void *)(v0 + 88);
    if ((v15 & 0x10000) != 0)
    {
      if (v6 == 4)
      {
LABEL_8:
        sub_10024B284(*(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), v5);
        sub_100254B88(0LL, 0LL, 0LL, 0xFFu);
        sub_100254B88(v2, v3, v4, v5);
        char v14 = 1;
        return v14 & 1;
      }

      uint64_t v16 = *(void *)(v0 + 104);
      unint64_t v17 = *(void *)(v0 + 112);
      sub_1001062A0(*(void *)(v0 + 96), v16, v17);
      unsigned __int8 v18 = 1;
    }

    else
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = 0LL;
      unsigned __int8 v18 = 0;
      uint64_t v6 = BYTE1(v15);
    }

    uint64_t v25 = v6;
    uint64_t v26 = v16;
    unint64_t v27 = v17;
    char v28 = v18;
    uint64_t v21 = v2;
    uint64_t v22 = v3;
    unint64_t v23 = v4;
    BOOL v24 = v5 != 0;
    sub_10024B284(v6, v16, v17, BYTE2(v15) & 1);
    unint64_t v19 = sub_1001767BC();
    char v13 = static Either<>.== infix(_:_:)( (uint64_t)&v25,  (uint64_t)&v21,  (uint64_t)&type metadata for UInt8,  (uint64_t)&type metadata for NANServiceInfo,  (uint64_t)&protocol witness table for UInt8,  v19);
    sub_10024B358(v25, v26, v27, v28);
    sub_100254B88(v6, v16, v17, v18);
    goto LABEL_12;
  }

  char v14 = 0;
  return v14 & 1;
}

BOOL sub_10024D9E0()
{
  uint64_t v1 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (unsigned __int8 *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040CED0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NANPeer(0LL);
  sub_100253E44(v0 + *(int *)(v7 + 72), (uint64_t)v6);
  sub_100022628((uint64_t)v6, (uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation);
  unsigned int v9 = *v4;
  BOOL v10 = (v9 & 0xFC) != 4 || (v9 & 3) != 0;
  BOOL v8 = v9 >= 4 && v10;
  sub_10005802C((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation);
  return v8;
}

uint64_t sub_10024DB04@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v30 = a1 >> 40;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xED00006E616E2E65LL, 1919247728LL, 0xE400000000000000LL);
  BOOL v8 = (int *)type metadata accessor for NANPeer(0LL);
  uint64_t v9 = a2 + v8[7];
  BOOL v10 = WiFiAddress.defaultClusterID.unsafeMutableAddressor();
  __int16 v11 = v10[2];
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = v11;
  uint64_t v12 = a2 + v8[8];
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(BeaconInformation - 8) + 56LL))( v12,  1LL,  1LL,  BeaconInformation);
  uint64_t v14 = a2 + v8[9];
  *(_WORD *)uint64_t v14 = 0;
  *(_BYTE *)(v14 + 2)  = 1;
  uint64_t v15 = a2 + v8[10];
  *(void *)uint64_t v15 = 0LL;
  *(void *)(v15 + 8)  = 0LL;
  *(_BYTE *)(v15 + 16)  = 1;
  uint64_t v16 = a2 + v8[11];
  *(_WORD *)uint64_t v16 = 0;
  *(_BYTE *)(v16 + 2)  = 1;
  uint64_t v17 = a2 + v8[12];
  *(_WORD *)uint64_t v17 = 0;
  *(_BYTE *)(v17 + 2)  = 1;
  uint64_t v18 = a2 + v8[13];
  *(void *)uint64_t v18 = 0LL;
  *(_DWORD *)(v18 + 8)  = 0x1000000;
  uint64_t v19 = a2 + v8[14];
  *(_DWORD *)uint64_t v19 = 0;
  *(_BYTE *)(v19 + 4)  = 1;
  uint64_t v20 = (void *)(a2 + v8[15]);
  void *v20 = 0LL;
  v20[1]  = 0LL;
  uint64_t v21 = a2 + v8[16];
  *(void *)(v21 + 32)  = 0LL;
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 16)  = 0u;
  uint64_t v22 = a2 + v8[17];
  *(_OWORD *)uint64_t v22 = xmmword_10035E150;
  *(_DWORD *)(v22 + 16)  = 0;
  uint64_t v23 = a2 + v8[18];
  uint64_t v24 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v23, 1LL, 1LL, v24);
  *(void *)(a2 + v8[19])  = &_swiftEmptyDictionarySingleton;
  uint64_t v25 = a2 + v8[20];
  uint64_t v26 = type metadata accessor for UUID(0LL);
  unint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
  v27(v25, 1LL, 1LL, v26);
  v27(a2 + v8[21], 1LL, 1LL, v26);
  char v28 = (_BYTE *)(a2 + v8[5]);
  *char v28 = v2;
  v28[1]  = v4;
  v28[2]  = v5;
  v28[3]  = v6;
  v28[4]  = v7;
  v28[5]  = v30;
  type metadata accessor for P2PTimer(0LL);
  return variable initialization expression of AWDLPeer.lastUpdated();
}

Swift::Int sub_10024DD4C(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_10024DDA0(int a1, uint64_t a2)
{
}

Swift::Int sub_10024DDB8(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

BOOL sub_10024DE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static NANClusterChangeEvent.__derived_struct_equals(_:_:)( *(unsigned __int16 *)(a1 + *(int *)(a3 + 20)) | ((unint64_t)*(unsigned int *)(a1 + *(int *)(a3 + 20)
                                                                                              + 2) << 16),
           *(unsigned __int16 *)(a2 + *(int *)(a3 + 20)) | ((unint64_t)*(unsigned int *)(a2
}

uint64_t sub_10024DE30( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  int v13 = a8;
  __int128 v51 = (char *)a7;
  char v14 = a6;
  uint64_t v58 = a3;
  unint64_t v16 = a6 >> 8;
  unint64_t v17 = a6 >> 16;
  unint64_t v18 = a6 >> 24;
  unint64_t v19 = HIDWORD(a6);
  unint64_t v54 = a6 >> 40;
  unint64_t v47 = HIDWORD(a8);
  unint64_t v48 = a8 >> 40;
  uint64_t v49 = a10;
  uint64_t v20 = type metadata accessor for DispatchTime(0LL);
  uint64_t v56 = *(void *)(v20 - 8);
  uint64_t v57 = v20;
  __chkstk_darwin();
  uint64_t v55 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  uint64_t v53 = *(void *)(BeaconInformation - 8);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = type metadata accessor for NANPeer(0LL);
  uint64_t v25 = *(int *)(v52 + 28);
  uint64_t v59 = v12;
  uint64_t v26 = (_BYTE *)(v12 + v25);
  *uint64_t v26 = v14;
  v26[1]  = v16;
  uint64_t v27 = v58;
  v26[2]  = v17;
  void v26[3] = v18;
  v26[4]  = v19;
  v26[5]  = v54;
  uint64_t v28 = type metadata accessor for P2PTimer(0LL);
  unint64_t v54 = BeaconInformation;
  uint64_t v50 = v28;
  variable initialization expression of AWDLPeer.lastUpdated();
  *(_DWORD *)uint64_t v24 = v13;
  v24[4]  = v47;
  v24[5]  = v48;
  *((void *)v24 + 1)  = v51;
  *((void *)v24 + 2)  = a1;
  unint64_t v48 = a1;
  __int128 v51 = v24;
  *((void *)v24 + 3)  = v49;
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    swift_bridgeObjectRetain(v27);
    unint64_t v30 = (unsigned __int8 *)(v27 + 80);
    uint64_t v31 = (unsigned __int8 *)(v27 + 80);
    do
    {
      int v32 = *v31;
      v31 += 56;
      if (v32 == 7)
      {
        uint64_t v34 = *((void *)v30 - 2);
        unint64_t v33 = *((void *)v30 - 1);
        unint64_t v36 = *((void *)v30 - 4);
        uint64_t v35 = *((void *)v30 - 3);
        uint64_t v37 = *((void *)v30 - 6);
        unint64_t v38 = *((void *)v30 - 5);
        uint64_t v39 = swift_bridgeObjectRetain(v37);
        sub_10024E0CC(v39, a11);
        sub_100057CD0(v37, v38, v36, v35, v34, v33, 7);
      }

      unint64_t v30 = v31;
      --v29;
    }

    while (v29);
    swift_bridgeObjectRelease(v58);
  }

  uint64_t v40 = v52;
  uint64_t v41 = v59 + *(int *)(v52 + 40);
  if ((*(_BYTE *)(v41 + 16) & 1) == 0 && !*(_BYTE *)(v41 + 8)) {
    *(_DWORD *)(v41 + 12)  = v48;
  }
  uint64_t v42 = v59;
  uint64_t v43 = v59 + *(int *)(v40 + 32);
  sub_1000225EC(v43, &qword_10040CEC8);
  sub_100022628((uint64_t)v51, v43, type metadata accessor for NANPeer.LastBeaconInformation);
  (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v53 + 56))(v43, 0LL, 1LL, v54);
  __int128 v44 = v55;
  variable initialization expression of AWDLPeer.lastUpdated();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v56 + 40))(v42 + *(int *)(v40 + 24), v44, v57);
}

uint64_t sub_10024E0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v257  = a2;
  sub_100002274(&qword_10040CED0);
  __chkstk_darwin();
  v256  = (char *)&v251 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v270  = type metadata accessor for DispatchTime(0LL);
  v269  = *(void *)(v270 - 8);
  __chkstk_darwin();
  v268  = (char *)&v251 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v271  = type metadata accessor for NANPeer.Service(0LL);
  v287  = *(void *)(v271 - 8);
  __chkstk_darwin();
  v285  = (uint64_t *)((char *)&v251 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v9 = (char *)&v251 - v8;
  uint64_t v10 = type metadata accessor for NANAttribute(0LL);
  v265  = *(void *)(v10 - 8);
  __chkstk_darwin();
  v281  = (unsigned __int8 *)&v251 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100002274(&qword_10040D248);
  v274  = *(void *)(v12 - 8);
  __chkstk_darwin();
  v264  = (char *)&v251 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040D250);
  __chkstk_darwin();
  v272  = (unint64_t *)((char *)&v251 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  v273  = (void **)((char *)&v251 - v15);
  v275  = *(void *)(a1 + 16);
  v253  = v9 + 80;
  v252  = v9 + 120;
  v254  = v9;
  v251  = v9 + 104;
  v266  = a1;
  swift_bridgeObjectRetain(a1);
  v260  = 0LL;
  v261  = 0LL;
  v258  = 0LL;
  v259  = 0LL;
  unint64_t v16 = 0LL;
  v255  = 0LL;
  v263  = _swiftEmptyArrayStorage;
  v262  = _swiftEmptyDictionarySingleton;
  v284  = v3;
  v267  = v10;
  v279  = v12;
  while (1)
  {
    if (v16 == v275)
    {
      uint64_t v20 = 1LL;
      v280  = v275;
      uint64_t v21 = (uint64_t)v272;
    }

    else
    {
      if (v16 >= v275)
      {
        __break(1u);
        JUMPOUT(0x100250488LL);
      }

      unint64_t v22 = v16 + 1;
      unint64_t v23 = v16;
      uint64_t v24 = (uint64_t)&v264[*(int *)(v12 + 48)];
      sub_100057FE8( v266 + ((*(unsigned __int8 *)(v265 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v265 + 80))
      + *(void *)(v265 + 72) * v16,
        v24,
        type metadata accessor for NANAttribute);
      uint64_t v21 = (uint64_t)v272;
      uint64_t v25 = (uint64_t)v272 + *(int *)(v12 + 48);
      *v272  = v23;
      sub_100022628(v24, v25, type metadata accessor for NANAttribute);
      uint64_t v20 = 0LL;
      v280  = v22;
    }

    uint64_t v26 = v274;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v274 + 56))(v21, v20, 1LL, v12);
    uint64_t v27 = v273;
    sub_100254E00(v21, (uint64_t)v273);
    uint64_t v28 = v27;
    uint64_t v29 = *v27;
    unint64_t v30 = v281;
    sub_100022628((uint64_t)v28 + *(int *)(v12 + 48), (uint64_t)v281, type metadata accessor for NANAttribute);
    switch(swift_getEnumCaseMultiPayload(v30, v10))
    {
      case 0u:
        __int16 v17 = *(_WORD *)v281;
        uint64_t v18 = *(int *)(type metadata accessor for NANPeer(0LL) + 36);
        goto LABEL_3;
      case 1u:
        v122  = *(void *)v281;
        unint64_t v123 = v281[8] | ((unint64_t)*((unsigned int *)v281 + 3) << 32);
        uint64_t v124 = v3 + *(int *)(type metadata accessor for NANPeer(0LL) + 40);
        *(void *)uint64_t v124 = v122;
        *(void *)(v124 + 8)  = v123;
        *(_BYTE *)(v124 + 16)  = 0;
        goto LABEL_4;
      case 2u:
      case 0x23u:
        v283  = *(void *)v281;
        uint64_t v31 = *(int *)(type metadata accessor for NANPeer(0LL) + 76);
        uint64_t v32 = sub_100303870(*(void *)(v3 + v31));
        if ((v34 & 1) != 0) {
          goto LABEL_176;
        }
        uint64_t v35 = v32;
        uint64_t v36 = v33;
        v278  = (unint64_t *)(v283 + 40);
        v286  = v31;
        uint64_t v37 = *(void *)(v3 + v31);
        if (*(_DWORD *)(v37 + 36) != (_DWORD)v33) {
          goto LABEL_162;
        }
        uint64_t v38 = v33;
        v277  = v33;
        while (2)
        {
          int64_t v39 = 1LL << *(_BYTE *)(v37 + 32);
          if (v35 != v39)
          {
            unint64_t v40 = (unint64_t)v35 >> 6;
            if (*(void *)(v283 + 16))
            {
              if ((v35 & 0x8000000000000000LL) == 0)
              {
                v292  = 1LL << v35;
                swift_bridgeObjectRetain_n(v283, 2LL);
                v290  = v36;
                v291  = v35;
                v289  = (unint64_t)v35 >> 6;
                uint64_t v41 = *(void *)(v3 + v31);
                if (v35 >= 1LL << *(_BYTE *)(v41 + 32))
                {
                  __break(1u);
                }

                else if ((*(void *)(v41 + 8 * v40 + 64) & v292) != 0)
                {
                  if (*(_DWORD *)(v41 + 36) == (_DWORD)v36)
                  {
                    uint64_t v42 = *(v278 - 1);
                    unint64_t v43 = *v278;
                    v293  = (unint64_t)(v278 + 2);
                    uint64_t v44 = *(void *)(v41 + 56);
                    v288  = *(void *)(v287 + 72) * v35;
                    uint64_t v45 = v285;
                    sub_100057FE8(v44 + v288, (uint64_t)v285, type metadata accessor for NANPeer.Service);
                    uint64_t v46 = *v45;
                    unint64_t v47 = v45[1];
                    sub_100020AFC(v42, v43);
                    sub_100020AFC(v46, v47);
                    sub_10005802C((uint64_t)v45, type metadata accessor for NANPeer.Service);
                    __asm { BR              X9 }
                  }

LABEL_161:
                  __break(1u);
                  JUMPOUT(0x100250420LL);
                }

                __break(1u);
                goto LABEL_161;
              }

LABEL_166:
              __break(1u);
              JUMPOUT(0x100250448LL);
            }

            if (v35 < 0 || v35 >= v39)
            {
              __break(1u);
            }

            else
            {
              uint64_t v48 = v37 + 64;
              unint64_t v49 = *(void *)(v37 + 64 + 8 * v40);
              if (((v49 >> v35) & 1) != 0)
              {
                if (*(_DWORD *)(v37 + 36) == (_DWORD)v36)
                {
                  unint64_t v50 = v49 & (-2LL << (v35 & 0x3F));
                  if (v50)
                  {
                    int64_t v39 = __clz(__rbit64(v50)) | v35 & 0xFFFFFFFFFFFFFFC0LL;
                    goto LABEL_30;
                  }

                  unint64_t v51 = v40 + 1;
                  unint64_t v52 = (unint64_t)(v39 + 63) >> 6;
                  if (v40 + 1 < v52)
                  {
                    unint64_t v53 = *(void *)(v48 + 8 * v51);
                    if (v53) {
                      goto LABEL_29;
                    }
                    unint64_t v51 = v40 + 2;
                    if (v40 + 2 < v52)
                    {
                      unint64_t v53 = *(void *)(v48 + 8 * v51);
                      if (v53) {
                        goto LABEL_29;
                      }
                      unint64_t v51 = v40 + 3;
                      if (v40 + 3 < v52)
                      {
                        unint64_t v53 = *(void *)(v48 + 8 * v51);
                        if (v53) {
                          goto LABEL_29;
                        }
                        uint64_t v55 = v37 + 96;
                        do
                        {
                          if (v52 - 4 == v40)
                          {
                            sub_100022588(v35, v36, 0);
                            uint64_t v38 = v277;
                            goto LABEL_30;
                          }

                          unint64_t v53 = *(void *)(v55 + 8 * v40++);
                        }

                        while (!v53);
                        sub_100022588(v35, v36, 0);
                        uint64_t v38 = v277;
                        unint64_t v51 = v40 + 3;
LABEL_29:
                        int64_t v39 = __clz(__rbit64(v53)) + (v51 << 6);
                      }
                    }
                  }

LABEL_175:
                      __break(1u);
LABEL_176:
                      __break(1u);
                      JUMPOUT(0x1002504C4LL);
                    }
                  }
                }
              }
            }

            v140  = v145;
          }

LABEL_100:
          unint64_t v138 = (v144 - 1) & v144;
          v142  = __clz(__rbit64(v144)) + (v140 << 6);
          goto LABEL_84;
        }

        uint64_t v10 = v267;
LABEL_145:
        v110  = v276;
        swift_release(v134);
        swift_bridgeObjectRelease(v134);
        uint64_t v12 = v279;
        unint64_t v120 = v277;
LABEL_146:
        int v119 = (int)v278;
LABEL_147:
        v235  = &_mh_execute_header;
        if (!(_DWORD)v282) {
          v235  = 0LL;
        }
        v236  = v118 | (v289 << 16) | (v286 << 24) | (unint64_t)v235 | (v290 << 40) | (v288 << 48) | (v283 << 56);
        *(void *)uint64_t v115 = v116 | (v293 << 16) | (v120 << 24) | (v109 << 32) | (v110 << 40) | (v292 << 48) | (v291 << 56);
        *(void *)(v115 + 8)  = v236;
        *(_DWORD *)(v115 + 16)  = v119;
        uint64_t v3 = v284;
        goto LABEL_4;
      case 0x28u:
        uint64_t v104 = v3 + *(int *)(type metadata accessor for NANPeer(0LL) + 72);
        sub_1000225EC(v104, &qword_10040CED0);
        sub_100022628((uint64_t)v281, v104, type metadata accessor for NANAttribute.CustomDeviceInformation);
        v105  = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56LL))(v104, 0LL, 1LL, v105);
        goto LABEL_4;
      case 0x29u:
        int v59 = v281[2];
        uint64_t v60 = *((void *)v281 + 1);
        unint64_t v61 = *((void *)v281 + 2);
        int v62 = *(unsigned __int16 *)v281;
        __int128 v63 = (unsigned __int16 *)OUI.apple.unsafeMutableAddressor();
        if ((static OUI.== infix(_:_:)(v62 | (v59 << 16), *v63 | (*((unsigned __int8 *)v63 + 2) << 16)) & 1) != 0)
        {
          type metadata accessor for BinaryDecoder();
          uint64_t v64 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
          sub_100020AFC(v60, v61);
          sub_10000AF70( &qword_10040E550,  type metadata accessor for NANAttribute.CustomDeviceInformation,  (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation);
          uint64_t v65 = v255;
          static BinaryDecoder.decode<A>(_:data:)(v64, v60, v61);
          if (v65)
          {
            swift_errorRelease(v65);
            v255  = 0LL;
            uint64_t v66 = 1LL;
          }

          else
          {
            v255  = 0LL;
            uint64_t v66 = 0LL;
          }

          sub_1000208D8(v60, v61);
          sub_1000208D8(v60, v61);
          v228  = (uint64_t)v256;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56LL))(v256, v66, 1LL, v64);
          v229  = type metadata accessor for NANPeer(0LL);
          sub_100254E48(v228, v3 + *(int *)(v229 + 72));
        }

        else
        {
          sub_1000208D8(v60, v61);
        }

        goto LABEL_4;
      default:
        sub_10005802C((uint64_t)v281, type metadata accessor for NANAttribute);
        goto LABEL_4;
    }
  }

  v246  = v266;
  swift_bridgeObjectRelease(v266);
  v247  = v263;
  sub_1002505F8((unint64_t)v263, v246, v257);
  swift_bridgeObjectRelease(v262);
  swift_bridgeObjectRelease(v247);
  type metadata accessor for P2PTimer(0LL);
  v248  = v268;
  variable initialization expression of AWDLPeer.lastUpdated();
  v249  = type metadata accessor for NANPeer(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(v269 + 40))(v3 + *(int *)(v249 + 24), v248, v270);
  sub_100021018((uint64_t)v260, v261);
  return sub_100021018((uint64_t)v258, (uint64_t)v259);
}

uint64_t sub_1002505F8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  v376  = type metadata accessor for NANAttribute(0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v334 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v9 = (unsigned __int8 *)&v334 - v8;
  __chkstk_darwin();
  uint64_t v12 = (uint64_t)&v334 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(a1 + 32);
  v366  = a1 + 32;
  if ((v14 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_292;
  }

  v375  = *(void *)(a2 + 16);
  if (v14 >= v375)
  {
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
LABEL_310:
    __break(1u);
LABEL_311:
    __break(1u);
LABEL_312:
    __break(1u);
LABEL_313:
    __break(1u);
LABEL_314:
    __break(1u);
LABEL_315:
    __break(1u);
LABEL_316:
    __break(1u);
    goto LABEL_317;
  }

  uint64_t v15 = *(void *)(v10 + 72);
  v374  = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v373  = v15;
  sub_100057FE8(v374 + v15 * v14, (uint64_t)&v334 - v11, type metadata accessor for NANAttribute);
  if (swift_getEnumCaseMultiPayload(v12, v376) != 17)
  {
    sub_10005802C(v12, type metadata accessor for NANAttribute);
    goto LABEL_26;
  }

  v372  = v13;
  v356  = v7;
  v357  = a3;
  v370  = *(unsigned __int8 *)v12;
  uint64_t v16 = *(unsigned __int16 *)(v12 + 2);
  v368  = *(void *)(v12 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t v17 = 0LL;
  v371  = a1;
  do
  {
    unint64_t v18 = *(void *)(a1 + 8 * v17 + 32);
    if (v18 >= v375)
    {
      __break(1u);
LABEL_289:
      swift_release(v9);
      swift_bridgeObjectRelease(v9);
      goto LABEL_290;
    }

    sub_100057FE8(v374 + v18 * v373, (uint64_t)v9, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload(v9, v376) != 17)
    {
      sub_10005802C((uint64_t)v9, type metadata accessor for NANAttribute);
LABEL_21:
      uint64_t v29 = (uint64_t *)&v390;
      goto LABEL_22;
    }

    a1  = *((void *)v9 + 1);
    if (!*(void *)(a1 + 16)
      || (int v19 = *v9, v20 = *((_WORD *)v9 + 1), v18 != v14)
      && (int v21 = NANAttribute.Availability.Control.mapID.getter(*((_WORD *)v9 + 1)),
          v21 == NANAttribute.Availability.Control.mapID.getter(v16)))
    {
      swift_bridgeObjectRelease(v368);
      uint64_t v29 = &v391;
LABEL_22:
      swift_bridgeObjectRelease(*(v29 - 32));
      unint64_t v30 = a1;
LABEL_25:
      swift_bridgeObjectRelease(v30);
      goto LABEL_26;
    }

    int v22 = NANAttribute.Availability.Control.scheduleChangeFlags.getter(v20);
    uint64_t v12 = (unsigned __int16)v22;
    unsigned __int16 v23 = NANAttribute.Availability.Control.scheduleChangeFlags.getter(v16);
    swift_bridgeObjectRelease(a1);
    if ((unsigned __int16)v22 != v23)
    {
      swift_bridgeObjectRelease(v368);
      uint64_t v28 = &v391;
      goto LABEL_24;
    }

    a1  = v371;
    if (v19 != (_DWORD)v370) {
      goto LABEL_21;
    }
    ++v17;
  }

  while (v372 != v17);
  swift_bridgeObjectRelease(v371);
  uint64_t v24 = (uint64_t *)(v369 + *(int *)(type metadata accessor for NANPeer(0LL) + 64));
  if (!v24[1])
  {
    v336  = v24;
    swift_bridgeObjectRelease(v368);
    uint64_t v25 = v357;
    uint64_t v26 = (uint64_t)v356;
    unint64_t v27 = v366;
    goto LABEL_35;
  }

  uint64_t v25 = v357;
  uint64_t v26 = (uint64_t)v356;
  unint64_t v27 = v366;
  if ((_DWORD)v370 == *(unsigned __int8 *)v24)
  {
    uint64_t v28 = (uint64_t *)&v390;
LABEL_24:
    unint64_t v30 = *(v28 - 32);
    goto LABEL_25;
  }

  v336  = v24;
  int v33 = *(unsigned __int16 *)NANAttribute.Availability.Control.committedChange.unsafeMutableAddressor();
  int v34 = *(unsigned __int16 *)NANAttribute.Availability.Control.potentialChange.unsafeMutableAddressor();
  swift_bridgeObjectRelease(v368);
  if (!v33)
  {
    if (v34) {
      goto LABEL_33;
    }
LABEL_26:
    uint64_t v31 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_27;
  }

  if ((v34 & ~v33) != 0) {
LABEL_33:
  }
    v33 |= v34;
  if ((v33 & v22) == 0) {
    goto LABEL_26;
  }
LABEL_35:
  swift_bridgeObjectRetain(a1);
  v349  = 0LL;
  v348  = 0LL;
  v347  = 0LL;
  v340  = 0LL;
  v341  = 0LL;
  v346  = 0LL;
  v342  = 0LL;
  v350  = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v36 = _swiftEmptyDictionarySingleton;
  v339  = _swiftEmptyDictionarySingleton;
  v351  = _swiftEmptyDictionarySingleton;
  v352  = _swiftEmptyDictionarySingleton;
  uint64_t v37 = v372;
  do
  {
    if (v35 == v37) {
      goto LABEL_298;
    }
    v358  = v36;
    unint64_t v38 = *(void *)(v27 + 8 * v35);
    if (v38 >= v375) {
      goto LABEL_299;
    }
    sub_100057FE8(v374 + v38 * v373, v26, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload(v26, v376) != 17)
    {
      sub_10005802C(v26, type metadata accessor for NANAttribute);
      goto LABEL_256;
    }

    v338  = v35;
    uint64_t v39 = *(void *)(v26 + 8);
    v365  = NANAttribute.Availability.Control.mapID.getter(*(_WORD *)(v26 + 2));
    v353  = *(void *)(v39 + 16);
    if (v353)
    {
      unint64_t v40 = 0LL;
      v355  = v39 + 32;
      unint64_t v41 = v16;
      v354  = v39;
      while (1)
      {
        if (v40 >= *(void *)(v39 + 16)) {
          goto LABEL_295;
        }
        v361  = a1;
        v360  = v41;
        v359  = v40;
        uint64_t v48 = (unsigned __int16 *)(v355 + 56 * v40);
        uint64_t v49 = *((void *)v48 + 1);
        uint64_t v50 = *((void *)v48 + 2);
        unint64_t v51 = *((void *)v48 + 3);
        v362  = *((unsigned __int8 *)v48 + 48);
        uint64_t v52 = *((void *)v48 + 5);
        unsigned int v53 = *v48;
        sub_100058430(v49, v50, v51);
        uint64_t v54 = v52;
        swift_bridgeObjectRetain(v52);
        int v55 = (unsigned __int16)(*(_WORD *)NANAvailabilityEntry.Control.committed.unsafeMutableAddressor() & ~(_WORD)v53);
        int v56 = *(unsigned __int16 *)NANAvailabilityEntry.Control.potential.unsafeMutableAddressor();
        int v57 = v56 & v53;
        int v58 = *(unsigned __int16 *)NANAvailabilityEntry.Control.conditional.unsafeMutableAddressor();
        int v59 = v58 & v53;
        v367  = v49;
        v368  = v50;
        v369  = v51;
        sub_100058430(v49, v50, v51);
        v364  = NANAvailabilityEntry.Control.usagePreference.getter(v53);
        v363  = NANAvailabilityEntry.Control.rxNSS.getter(v53);
        double v60 = NANAvailabilityEntry.Control.utilization.getter(v53);
        if (v55)
        {
          if (v57 != v56)
          {
            uint64_t v61 = v54;
            if (v59 != v58) {
              goto LABEL_283;
            }
            if (!v362)
            {
LABEL_284:
              swift_bridgeObjectRetain(v61);
LABEL_285:
              v328  = v367;
              v329  = v368;
              v330  = v369;
              sub_100057CA0(v367, v368, v369);
              swift_bridgeObjectRelease(v61);
              sub_100057CA0(v328, v329, v330);
              swift_bridgeObjectRelease(v352);
              swift_bridgeObjectRelease(v339);
              swift_bridgeObjectRelease(v351);
              swift_bridgeObjectRelease(v358);
              swift_bridgeObjectRelease(v371);
              swift_bridgeObjectRelease(v354);
              v327  = v61;
LABEL_286:
              swift_bridgeObjectRelease(v327);
              sub_100021018(v349, 0LL);
              sub_100021018(v348, 0LL);
              sub_100021018((uint64_t)v347, 0LL);
              sub_100021018(v340, 0LL);
              sub_100021018(v341, 0LL);
              uint64_t v16 = (uint64_t)v342;
              uint64_t v12 = v350;
LABEL_287:
              uint64_t v31 = v346;
LABEL_27:
              sub_100021018(v31, 0LL);
              sub_100021018(v16, 0LL);
              return sub_100021018(v12, 0LL);
            }

            if (*(void *)(v54 + 16) != 1LL
              || (v110  = v344 & 0xFF000000FF00LL | *(unsigned __int8 *)(v54 + 32) | ((unint64_t)*(unsigned __int16 *)(v54 + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(v54 + 36) << 32) | ((unint64_t)*(unsigned __int16 *)(v54 + 38) << 48),
                  unint64_t v111 = NANBitmap.Channel.channel.getter(v110),
                  (v111 & 0xFF00000000LL) == 0x300000000LL))
            {
LABEL_283:
              v324  = v367;
              v325  = v368;
              v326  = v369;
              sub_100057CA0(v367, v368, v369);
              swift_bridgeObjectRelease(v61);
              sub_100057CA0(v324, v325, v326);
              swift_bridgeObjectRelease(v352);
              swift_bridgeObjectRelease(v339);
              swift_bridgeObjectRelease(v351);
              swift_bridgeObjectRelease(v358);
              swift_bridgeObjectRelease(v371);
              v327  = v354;
              goto LABEL_286;
            }

            unint64_t v112 = v111;
            sub_100058430(v367, v368, v369);
            sub_100021018(v350, 0LL);
            int v113 = v352;
            isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v352);
            v381  = v113;
            unint64_t v116 = sub_100327738(v365);
            uint64_t v117 = v113[2];
            BOOL v118 = (v115 & 1) == 0;
            uint64_t v119 = v117 + v118;
            if (__OFADD__(v117, v118)) {
              goto LABEL_302;
            }
            char v120 = v115;
            v121  = v113[3];
            a1  = v361;
            v344  = v110;
            if (v121 >= v119)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_10032ABD8();
              }
            }

            else
            {
              sub_100240E24(v119, isUniquelyReferenced_nonNull_native);
              v122  = sub_100327738(v365);
              if ((v120 & 1) != (v123 & 1)) {
                goto LABEL_319;
              }
              unint64_t v116 = v122;
            }

            v137  = v381;
            swift_bridgeObjectRelease(0x8000000000000000LL);
            if ((v120 & 1) != 0)
            {
              uint64_t v138 = swift_bridgeObjectRetain(v137);
            }

            else
            {
              v137[(v116 >> 6) + 8] |= 1LL << v116;
              *(_BYTE *)(v137[6] + v116)  = v365;
              *(void *)(v137[7] + 8 * v116)  = _swiftEmptyArrayStorage;
              v177  = v137[2];
              v178  = v177 + 1;
              v179  = __OFADD__(v177, 1LL);
              swift_bridgeObjectRetain(v137);
              if (v179) {
                goto LABEL_308;
              }
              v137[2]  = v178;
              uint64_t v138 = (uint64_t)v137;
            }

            v180  = *(void *)(v138 + 56);
            v352  = (void *)v138;
            swift_bridgeObjectRelease(v138);
            v181  = *(void **)(v180 + 8 * v116);
            v182  = swift_isUniquelyReferenced_nonNull_native(v181);
            *(void *)(v180 + 8 * v116)  = v181;
            if ((v182 & 1) == 0)
            {
              v181  = sub_1002CA0DC(0LL, v181[2] + 1LL, 1, v181);
              *(void *)(v180 + 8 * v116)  = v181;
            }

            v184  = v181[2];
            v183  = v181[3];
            if (v184 >= v183 >> 1)
            {
              v181  = sub_1002CA0DC((void *)(v183 > 1), v184 + 1, 1, v181);
              *(void *)(v180 + 8 * v116)  = v181;
            }

            unint64_t v42 = v359;
            v181[2]  = v184 + 1;
            v185  = &v181[7 * v184];
            *((_DWORD *)v185 + 8)  = v112;
            *((_BYTE *)v185 + 36)  = BYTE4(v112);
            *((_BYTE *)v185 + 37)  = BYTE5(v112);
            v186  = v367;
            v187  = v368;
            v185[5]  = v367;
            v185[6]  = v187;
            v188  = v369;
            v185[7]  = v369;
            *((_BYTE *)v185 + 64)  = v364;
            v185[9]  = v363;
            *((double *)v185 + 10)  = v60;
            sub_100057CA0(v186, v187, v188);
            sub_100057CA0(v186, v187, v188);
            swift_bridgeObjectRelease(v61);
            unint64_t v47 = (uint64_t *)&v380;
            goto LABEL_42;
          }

          uint64_t v61 = v54;
          if (v59 == v58)
          {
            a1  = v361;
            if (!v362) {
              goto LABEL_284;
            }
            v381  = (void *)v61;
            if (!*(void *)(v61 + 16)) {
              goto LABEL_284;
            }
            uint64_t v79 = *(unsigned __int8 *)(v61 + 32);
            v80  = *(unsigned __int16 *)(v61 + 34);
            uint64_t v81 = *(unsigned __int8 *)(v61 + 36);
            uint64_t v82 = *(unsigned __int16 *)(v61 + 38);
            swift_bridgeObjectRetain(v61);
            unint64_t v83 = v337 & 0xFF000000FF00LL | v79 | (v80 << 16) | (v81 << 32) | (v82 << 48);
            unint64_t v84 = NANBitmap.Channel.channel.getter(v83);
            if ((v84 & 0xFF00000000LL) == 0x300000000LL) {
              goto LABEL_285;
            }
            unint64_t v85 = v84;
            sub_100058430(v367, v368, v369);
            sub_100021018(v346, 0LL);
            unsigned __int8 v86 = v352;
            uint64_t v87 = swift_isUniquelyReferenced_nonNull_native(v352);
            v378  = v86;
            unint64_t v89 = sub_100327738(v365);
            uint64_t v90 = v86[2];
            BOOL v91 = (v88 & 1) == 0;
            uint64_t v92 = v90 + v91;
            if (__OFADD__(v90, v91)) {
              goto LABEL_305;
            }
            char v93 = v88;
            if (v86[3] >= v92)
            {
              if ((v87 & 1) == 0) {
                sub_10032ABD8();
              }
            }

            else
            {
              sub_100240E24(v92, v87);
              unint64_t v94 = sub_100327738(v365);
              if ((v93 & 1) != (v95 & 1)) {
                goto LABEL_319;
              }
              unint64_t v89 = v94;
            }

            v218  = v378;
            swift_bridgeObjectRelease(0x8000000000000000LL);
            if ((v93 & 1) != 0)
            {
              v219  = swift_bridgeObjectRetain(v218);
            }

            else
            {
              v218[(v89 >> 6) + 8] |= 1LL << v89;
              *(_BYTE *)(v218[6] + v89)  = v365;
              *(void *)(v218[7] + 8 * v89)  = _swiftEmptyArrayStorage;
              v220  = v218[2];
              v221  = v220 + 1;
              v222  = __OFADD__(v220, 1LL);
              swift_bridgeObjectRetain(v218);
              if (v222) {
                goto LABEL_314;
              }
              v218[2]  = v221;
              v219  = (uint64_t)v218;
            }

            v223  = *(void *)(v219 + 56);
            v352  = (void *)v219;
            swift_bridgeObjectRelease(v219);
            v224  = *(void **)(v223 + 8 * v89);
            v225  = swift_isUniquelyReferenced_nonNull_native(v224);
            *(void *)(v223 + 8 * v89)  = v224;
            v337  = v83;
            if ((v225 & 1) == 0)
            {
              v224  = sub_1002CA0DC(0LL, v224[2] + 1LL, 1, v224);
              *(void *)(v223 + 8 * v89)  = v224;
            }

            v227  = v224[2];
            v226  = v224[3];
            if (v227 >= v226 >> 1)
            {
              v224  = sub_1002CA0DC((void *)(v226 > 1), v227 + 1, 1, v224);
              *(void *)(v223 + 8 * v89)  = v224;
            }

            v224[2]  = v227 + 1;
            v228  = &v224[7 * v227];
            *((_DWORD *)v228 + 8)  = v85;
            *((_BYTE *)v228 + 36)  = BYTE4(v85);
            *((_BYTE *)v228 + 37)  = BYTE5(v85);
            v229  = v368;
            v228[5]  = v367;
            v228[6]  = v229;
            v228[7]  = v369;
            *((_BYTE *)v228 + 64)  = v364;
            v228[9]  = v363;
            *((double *)v228 + 10)  = v60;
            if (!v381[2]) {
              goto LABEL_306;
            }
            sub_10027D938(0LL, 1LL);
            v230  = v381;
            v231  = v381[2];
            unint64_t v41 = v360;
            if (v231)
            {
              swift_bridgeObjectRetain(v381);
              v232  = v230 + 5;
              v233  = _swiftEmptyArrayStorage;
              do
              {
                unint64_t v41 = v41 & 0xFF000000FF00LL | *((unsigned __int8 *)v232 - 8) | ((unint64_t)*((unsigned __int16 *)v232 - 3) << 16) | ((unint64_t)*((unsigned __int8 *)v232 - 4) << 32) | ((unint64_t)*((unsigned __int16 *)v232 - 1) << 48);
                v235  = NANBitmap.Channel.channel.getter(v41);
                if ((v235 & 0xFF00000000LL) != 0x300000000LL)
                {
                  v236  = v235;
                  v237  = v41;
                  if ((swift_isUniquelyReferenced_nonNull_native(v233) & 1) == 0) {
                    v233  = sub_1000A65E8(0LL, v233[2] + 1LL, 1, v233);
                  }
                  v239  = v233[2];
                  v238  = v233[3];
                  if (v239 >= v238 >> 1) {
                    v233  = sub_1000A65E8((void *)(v238 > 1), v239 + 1, 1, v233);
                  }
                  v233[2]  = v239 + 1;
                  v234  = &v233[v239];
                  *((_DWORD *)v234 + 8)  = v236;
                  *((_BYTE *)v234 + 36)  = BYTE4(v236);
                  *((_BYTE *)v234 + 37)  = BYTE5(v236);
                  unint64_t v41 = v237;
                }

                v232  = (void *)((char *)v232 + 10);
                --v231;
              }

              while (v231);
              swift_bridgeObjectRelease_n(v230, 2LL);
              sub_100058430(v367, v368, v369);
              sub_100021018((uint64_t)v342, 0LL);
              v240  = v351;
              v241  = swift_isUniquelyReferenced_nonNull_native(v351);
              v378  = v240;
              v243  = sub_100327738(v365);
              v244  = v240[2];
              v245  = (v242 & 1) == 0;
              v246  = v244 + v245;
              if (__OFADD__(v244, v245)) {
                goto LABEL_310;
              }
              v247  = v242;
              if (v240[3] >= v246)
              {
                if ((v241 & 1) == 0) {
                  sub_10032ABF0();
                }
              }

              else
              {
                sub_100240E3C(v246, v241);
                v248  = sub_100327738(v365);
                if ((v247 & 1) != (v249 & 1)) {
                  goto LABEL_319;
                }
                v243  = v248;
              }

              v253  = v378;
              swift_bridgeObjectRelease(0x8000000000000000LL);
              swift_bridgeObjectRetain(v253);
              if ((v247 & 1) == 0) {
                sub_100244B34(v243, v365, (uint64_t)_swiftEmptyArrayStorage, v253);
              }
              v254  = v253[7];
              v351  = v253;
              swift_bridgeObjectRelease(v253);
              v255  = (void *)(v254 + 8 * v243);
              v256  = (void *)*v255;
              v257  = swift_isUniquelyReferenced_nonNull_native(*v255);
              *v255  = v256;
              if ((v257 & 1) == 0)
              {
                v256  = sub_1002CA104(0LL, v256[2] + 1LL, 1, v256);
                *v255  = v256;
              }

              unint64_t v42 = v359;
              v386[0]  = v233;
              v258  = v367;
              v259  = v368;
              v386[1]  = v367;
              v386[2]  = v368;
              v260  = v369;
              v386[3]  = v369;
              v387  = v364;
              v388  = v363;
              v389  = v60;
              v261  = (void *)v256[2];
              sub_100254248(v261);
              sub_1002E7D98((uint64_t)v261, (uint64_t)v386);
              NANBitmap.Channel.operatingClass.getter(v262);
              sub_100057CA0(v258, v259, v260);
              sub_100057CA0(v258, v259, v260);
              swift_bridgeObjectRelease(v61);
              v342  = sub_10005D56C;
            }

            else
            {
              swift_bridgeObjectRelease(v381);
              v250  = v367;
              v251  = v368;
              v252  = v369;
              sub_100057CA0(v367, v368, v369);
              sub_100057CA0(v250, v251, v252);
              swift_bridgeObjectRelease(v61);
              unint64_t v42 = v359;
            }

            v202  = &v377;
            goto LABEL_213;
          }

          uint64_t v124 = *(void *)(v54 + 16);
          a1  = v361;
          if ((v362 & 1) == 0)
          {
            if (!v124)
            {
              v204  = _swiftEmptyArrayStorage;
LABEL_234:
              sub_100058430(v367, v368, v369);
              sub_100021018(v340, 0LL);
              v287  = v339;
              v288  = swift_isUniquelyReferenced_nonNull_native(v339);
              v381  = v287;
              v290  = sub_100327738(v365);
              v291  = v287[2];
              v292  = (v289 & 1) == 0;
              v293  = v291 + v292;
              if (__OFADD__(v291, v292)) {
                goto LABEL_313;
              }
              v294  = v289;
              if (v287[3] >= v293)
              {
                if ((v288 & 1) == 0) {
                  sub_10032ABE4();
                }
              }

              else
              {
                sub_100240E30(v293, v288);
                v295  = sub_100327738(v365);
                if ((v294 & 1) != (v296 & 1)) {
                  goto LABEL_319;
                }
                v290  = v295;
              }

              v297  = v381;
              swift_bridgeObjectRelease(0x8000000000000000LL);
              if ((v294 & 1) != 0)
              {
                v298  = swift_bridgeObjectRetain(v297);
              }

              else
              {
                v297[(v290 >> 6) + 8] |= 1LL << v290;
                *(_BYTE *)(v297[6] + v290)  = v365;
                *(void *)(v297[7] + 8 * v290)  = _swiftEmptyArrayStorage;
                v299  = v297[2];
                v300  = v299 + 1;
                v301  = __OFADD__(v299, 1LL);
                swift_bridgeObjectRetain(v297);
                if (v301) {
                  goto LABEL_316;
                }
                v297[2]  = v300;
                v298  = (uint64_t)v297;
              }

              v302  = *(void *)(v298 + 56);
              v339  = (void *)v298;
              swift_bridgeObjectRelease(v298);
              v303  = *(void **)(v302 + 8 * v290);
              v304  = swift_isUniquelyReferenced_nonNull_native(v303);
              *(void *)(v302 + 8 * v290)  = v303;
              if ((v304 & 1) == 0)
              {
                v303  = sub_1002CA0F0(0LL, v303[2] + 1LL, 1, v303);
                *(void *)(v302 + 8 * v290)  = v303;
              }

              v306  = v303[2];
              v305  = v303[3];
              if (v306 >= v305 >> 1)
              {
                v303  = sub_1002CA0F0((void *)(v305 > 1), v306 + 1, 1, v303);
                *(void *)(v302 + 8 * v290)  = v303;
              }

              unint64_t v42 = v359;
              v303[2]  = v306 + 1;
              v307  = &v303[7 * v306];
              v308  = v367;
              v307[4]  = v204;
              v307[5]  = v308;
              v309  = v368;
              v310  = v369;
              v307[6]  = v368;
              v307[7]  = v310;
              *((_BYTE *)v307 + 64)  = v364;
              v307[9]  = v363;
              *((double *)v307 + 10)  = v60;
              sub_100057CA0(v308, v309, v310);
              sub_100057CA0(v308, v309, v310);
              swift_bridgeObjectRelease(v61);
              unint64_t v47 = &v373;
              goto LABEL_42;
            }

            swift_bridgeObjectRetain(v61);
            v203  = 0LL;
            v204  = _swiftEmptyArrayStorage;
            while (2)
            {
              v205  = NANBitmap.Band.bands.getter(*(unsigned __int8 *)(v61 + v203 + 32));
              v206  = *(void *)(v205 + 16);
              v207  = v204[2];
              v208  = v207 + v206;
              if (__OFADD__(v207, v206)) {
                goto LABEL_293;
              }
              v209  = v205;
              v210  = (void *)swift_isUniquelyReferenced_nonNull_native(v204);
              if ((_DWORD)v210 && v208 <= v204[3] >> 1)
              {
                if (!*(void *)(v209 + 16))
                {
LABEL_155:
                  if (v206) {
                    goto LABEL_294;
                  }
                  goto LABEL_156;
                }
              }

              else
              {
                if (v207 <= v208) {
                  v211  = v207 + v206;
                }
                else {
                  v211  = v207;
                }
                v204  = sub_1000A6E98(v210, v211, 1, v204);
                if (!*(void *)(v209 + 16)) {
                  goto LABEL_155;
                }
              }

              v212  = v204[2];
              if ((v204[3] >> 1) - v212 < v206) {
                goto LABEL_296;
              }
              v213  = (char *)v204 + v212 + 32;
              memcpy(v213, (const void *)(v209 + 32), v206);
              if (v206)
              {
                v215  = v204[2];
                v216  = __OFADD__(v215, v206);
                v217  = v215 + v206;
                if (v216) {
                  goto LABEL_297;
                }
                v204[2]  = v217;
              }

LABEL_317:
  __break(1u);
LABEL_318:
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
LABEL_319:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANMapID);
  __break(1u);
  return result;
}

uint64_t sub_10025294C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 120)  = 0LL;
  *(void *)(a2 + 128)  = 0LL;
  *(void *)(a2 + 136)  = 0LL;
  *(_BYTE *)(a2 + 144)  = -1;
  __int128 v4 = a1[3];
  *(_OWORD *)(a2 + 32)  = a1[2];
  *(_OWORD *)(a2 + 48)  = v4;
  *(_OWORD *)(a2 + 64)  = a1[4];
  __int128 v5 = a1[1];
  *(_OWORD *)a2  = *a1;
  *(_OWORD *)(a2 + 16)  = v5;
  *(void *)(a2 + 80)  = 0LL;
  *(void *)(a2 + 88)  = 0LL;
  *(void *)(a2 + 96)  = 5LL;
  type metadata accessor for P2PTimer(0LL);
  type metadata accessor for NANPeer.Service(0LL);
  *(void *)(a2 + 104)  = 0LL;
  *(void *)(a2 + 112)  = 0LL;
  sub_1001D332C((uint64_t)a1);
  return variable initialization expression of AWDLPeer.lastUpdated();
}

uint64_t sub_1002529DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for NANPeer.Service(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v14 = (uint64_t *)((char *)&v27 - v13);
  uint64_t v15 = *(void *)(v4 + *(int *)(type metadata accessor for NANPeer(0LL) + 76));
  if (!*(void *)(v15 + 16)) {
    goto LABEL_6;
  }
  unint64_t v16 = sub_100327958(a3);
  if ((v17 & 1) == 0) {
    goto LABEL_6;
  }
  sub_100057FE8( *(void *)(v15 + 56) + *(void *)(v10 + 72) * v16,  (uint64_t)v12,  type metadata accessor for NANPeer.Service);
  sub_100022628((uint64_t)v12, (uint64_t)v14, type metadata accessor for NANPeer.Service);
  uint64_t v18 = *v14;
  unint64_t v19 = v14[1];
  sub_100020AFC(*v14, v19);
  uint64_t v20 = NANServiceName.hash.getter(a1, a2);
  unint64_t v22 = v21;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v18, v19);
  char v24 = v23;
  sub_1000208D8(v20, v22);
  sub_1000208D8(v18, v19);
  if ((v24 & 1) == 0)
  {
    sub_10005802C((uint64_t)v14, type metadata accessor for NANPeer.Service);
LABEL_6:
    uint64_t v25 = 1LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v25, 1LL, v9);
  }

  sub_100022628((uint64_t)v14, a4, type metadata accessor for NANPeer.Service);
  uint64_t v25 = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v25, 1LL, v9);
}

uint64_t sub_100252B6C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v24 - v9);
  uint64_t result = type metadata accessor for NANPeer(0LL);
  uint64_t v12 = (uint64_t *)(v3 + *(int *)(result + 76));
  uint64_t v13 = *v12;
  if (*(void *)(*v12 + 16))
  {
    uint64_t result = sub_100327958(a3);
    if ((v14 & 1) != 0)
    {
      unint64_t v15 = result;
      int v16 = *(_DWORD *)(v13 + 36);
      sub_10022D478((uint64_t)v10, result, v16, 0LL, v13);
      uint64_t v17 = *v10;
      unint64_t v18 = v10[1];
      sub_100020AFC(*v10, v18);
      sub_10005802C((uint64_t)v10, type metadata accessor for NANPeer.Service);
      uint64_t v19 = NANServiceName.hash.getter(a1, a2);
      unint64_t v21 = v20;
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
      char v23 = v22;
      sub_1000208D8(v19, v21);
      uint64_t result = sub_1000208D8(v17, v18);
      if ((v23 & 1) != 0)
      {
        sub_10032C9A0((uint64_t)v8, v15, v16);
        return sub_10005802C((uint64_t)v8, type metadata accessor for NANPeer.Service);
      }
    }
  }

  return result;
}

Swift::Int sub_100252CDC()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 8);
    Swift::UInt16 v3 = *(_WORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100020AFC(v2, v1);
    Data.hash(into:)(v6, v2, v1);
    sub_100086D2C(v0);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 24));
  Hasher._combine(_:)(*(void *)(v0 + 32));
  if ((*(void *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v0 + 40);
  }
  else {
    Swift::UInt64 v4 = 0LL;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100252DB4()
{
  unint64_t v1 = v0;
  Hasher.init(_seed:)(v14, 0LL);
  uint64_t v2 = *v0;
  Swift::UInt v3 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt64 v4 = (unsigned __int8 *)(v2 + 37);
    do
    {
      uint64_t v5 = *(unsigned int *)(v4 - 5);
      uint64_t v6 = *(v4 - 1);
      unsigned int v7 = *v4;
      v4 += 8;
      Channel.hash(into:)((int)v14, v5 | (v6 << 32) | ((unint64_t)v7 << 40));
      --v3;
    }

    while (v3);
  }

  __int128 v8 = *(_OWORD *)(v1 + 3);
  __int128 v15 = *(_OWORD *)(v1 + 1);
  *(_OWORD *)int v16 = v8;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)(v1 + 5);
  uint64_t v9 = v8;
  if ((unint64_t)v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v10 = *((void *)&v15 + 1);
    Swift::UInt16 v11 = v15;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    sub_100086CBC((uint64_t)&v15);
    Data.hash(into:)(v14, v10, v9);
  }

  Hasher._combine(_:)(LOBYTE(v16[1]));
  Hasher._combine(_:)(v17[0]);
  if ((v17[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v17[1];
  }
  else {
    Swift::UInt64 v12 = 0LL;
  }
  Hasher._combine(_:)(v12);
  sub_100086D2C((uint64_t)&v15);
  return Hasher._finalize()();
}

Swift::Int sub_100252ED4()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::UInt v3 = (char *)(v1 + 32);
    do
    {
      char v4 = *v3++;
      Hasher._combine(_:)(0x801004u >> (8 * v4));
      --v2;
    }

    while (v2);
  }

  __int128 v5 = *(_OWORD *)(v0 + 3);
  __int128 v12 = *(_OWORD *)(v0 + 1);
  *(_OWORD *)uint64_t v13 = v5;
  *(_OWORD *)char v14 = *(_OWORD *)(v0 + 5);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v7 = *((void *)&v12 + 1);
    Swift::UInt16 v8 = v12;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    sub_100086CBC((uint64_t)&v12);
    Data.hash(into:)(v11, v7, v6);
  }

  Hasher._combine(_:)(LOBYTE(v13[1]));
  Hasher._combine(_:)(v14[0]);
  if ((v14[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v14[1];
  }
  else {
    Swift::UInt64 v9 = 0LL;
  }
  Hasher._combine(_:)(v9);
  sub_100086D2C((uint64_t)&v12);
  return Hasher._finalize()();
}

Swift::Int sub_100252FFC(void (*a1)(unsigned int *), void (*a2)(unsigned int *))
{
  unint64_t v5 = *((void *)v2 + 3);
  Swift::UInt v6 = *((unsigned __int8 *)v2 + 32);
  Swift::UInt v7 = *((void *)v2 + 5);
  Swift::UInt64 v8 = *((void *)v2 + 6);
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v9 = *((void *)v2 + 2);
    Swift::UInt16 v10 = *((_WORD *)v2 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
    a1(v2);
    Data.hash(into:)(v13, v9, v5);
  }

  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v8;
  }
  else {
    Swift::UInt64 v11 = 0LL;
  }
  Hasher._combine(_:)(v11);
  a2(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100253108()
{
  return sub_100252CDC();
}

void sub_100253140(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void *)(v2 + 16);
  Swift::UInt v5 = *(unsigned __int8 *)(v2 + 24);
  Swift::UInt v6 = *(void *)(v2 + 32);
  Swift::UInt64 v7 = *(void *)(v2 + 40);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v9 = *(void *)v2;
    uint64_t v8 = *(void *)(v2 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    sub_100020AFC(v8, v4);
    Data.hash(into:)(a1, v8, v4);
    sub_100057CA0(v9, v8, v4);
  }

  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v7;
  }
  else {
    Swift::UInt64 v10 = 0LL;
  }
  Hasher._combine(_:)(v10);
}

Swift::Int sub_1002531F8(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt v5 = *(unsigned __int8 *)(v1 + 24);
  Swift::UInt v6 = *(void *)(v1 + 32);
  Swift::UInt64 v7 = *(void *)(v1 + 40);
  Hasher.init(_seed:)(v10, a1);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    sub_100020AFC(v3, v4);
    Data.hash(into:)(v10, v3, v4);
    sub_100057CA0(v2, v3, v4);
  }

  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v7;
  }
  else {
    Swift::UInt64 v8 = 0LL;
  }
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL sub_1002532D4(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2]  = a1[2];
  v8[0]  = v3;
  __int128 v5 = a2[2];
  v8[1]  = v4;
  _OWORD v8[2] = v5;
  return sub_100254BA0((uint64_t)v7, (uint64_t)v8);
}

Swift::Int sub_100253318()
{
  return sub_100252FFC( (void (*)(unsigned int *))sub_10025571C,  (void (*)(unsigned int *))sub_100255748);
}

uint64_t sub_100253378(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  Swift::UInt v7 = *((unsigned __int8 *)v1 + 32);
  Swift::UInt v8 = v1[5];
  Swift::UInt64 v9 = v1[6];
  Swift::UInt v10 = *(void *)(*v1 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    Swift::UInt64 v11 = (unsigned __int8 *)(v4 + 37);
    do
    {
      uint64_t v12 = *(unsigned int *)(v11 - 5);
      uint64_t v13 = *(v11 - 1);
      unsigned int v14 = *v11;
      v11 += 8;
      Channel.hash(into:)(a1, v12 | (v13 << 32) | ((unint64_t)v14 << 40));
      --v10;
    }

    while (v10);
  }

  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100058430(v3, v5, v6);
    Data.hash(into:)(a1, v5, v6);
  }

  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v9;
  }
  else {
    Swift::UInt64 v15 = 0LL;
  }
  Hasher._combine(_:)(v15);
  return sub_100057CA0(v3, v5, v6);
}

Swift::Int sub_10025347C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  Swift::UInt v6 = *((unsigned __int8 *)v1 + 32);
  Swift::UInt v7 = v1[5];
  Swift::UInt64 v8 = v1[6];
  Hasher.init(_seed:)(v16, a1);
  Swift::UInt v9 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    Swift::UInt v10 = (unsigned __int8 *)(v3 + 37);
    do
    {
      uint64_t v11 = *(unsigned int *)(v10 - 5);
      uint64_t v12 = *(v10 - 1);
      unsigned int v13 = *v10;
      v10 += 8;
      Channel.hash(into:)((int)v16, v11 | (v12 << 32) | ((unint64_t)v13 << 40));
      --v9;
    }

    while (v9);
  }

  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    sub_100058430(v2, v4, v5);
    Data.hash(into:)(v16, v4, v5);
  }

  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v8;
  }
  else {
    Swift::UInt64 v14 = 0LL;
  }
  Hasher._combine(_:)(v14);
  sub_100057CA0(v2, v4, v5);
  return Hasher._finalize()();
}

BOOL sub_1002535A0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002537D4(a1, a2, a3, a4, _s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0);
}

uint64_t sub_1002535B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v6 = v2[2];
  unint64_t v7 = v2[3];
  Swift::UInt v8 = *((unsigned __int8 *)v2 + 32);
  Swift::UInt v9 = v2[5];
  Swift::UInt64 v10 = v2[6];
  Swift::UInt v11 = *(void *)(*v2 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v12 = (char *)(v5 + 32);
    do
    {
      char v13 = *v12++;
      Hasher._combine(_:)(0x801004u >> (8 * v13));
      --v11;
    }

    while (v11);
  }

  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    sub_100058430(v4, v6, v7);
    Data.hash(into:)(a1, v6, v7);
  }

  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v10;
  }
  else {
    Swift::UInt64 v14 = 0LL;
  }
  Hasher._combine(_:)(v14);
  return sub_100057CA0(v4, v6, v7);
}

Swift::Int sub_1002536A4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  Swift::UInt v6 = *((unsigned __int8 *)v1 + 32);
  Swift::UInt v7 = v1[5];
  Swift::UInt64 v8 = v1[6];
  Hasher.init(_seed:)(v14, a1);
  Swift::UInt v9 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    Swift::UInt64 v10 = (char *)(v3 + 32);
    do
    {
      char v11 = *v10++;
      Hasher._combine(_:)(0x801004u >> (8 * v11));
      --v9;
    }

    while (v9);
  }

  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    sub_100058430(v2, v4, v5);
    Data.hash(into:)(v14, v4, v5);
  }

  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v8;
  }
  else {
    Swift::UInt64 v12 = 0LL;
  }
  Hasher._combine(_:)(v12);
  sub_100057CA0(v2, v4, v5);
  return Hasher._finalize()();
}

BOOL sub_1002537C8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002537D4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_100326640);
}

BOOL sub_1002537D4( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  __int128 v6 = *(_OWORD *)(a1 + 3);
  v13[0]  = *(_OWORD *)(a1 + 1);
  v13[1]  = v6;
  uint64_t v7 = *a2;
  __int128 v8 = *(_OWORD *)(a2 + 1);
  __int128 v9 = *(_OWORD *)(a2 + 3);
  v13[2]  = *(_OWORD *)(a1 + 5);
  v14[0]  = v8;
  __int128 v10 = *(_OWORD *)(a2 + 5);
  v14[1]  = v9;
  v14[2]  = v10;
  return (a5(v5, v7) & 1) != 0 && sub_100254BA0((uint64_t)v13, (uint64_t)v14);
}

Swift::Int sub_100253840()
{
  return sub_100252FFC( (void (*)(unsigned int *))sub_100255A70,  (void (*)(unsigned int *))sub_100255A74);
}

uint64_t sub_100253890(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v5 = *((void *)v2 + 2);
  unint64_t v6 = *((void *)v2 + 3);
  Swift::UInt v7 = *((unsigned __int8 *)v2 + 32);
  Swift::UInt v8 = *((void *)v2 + 5);
  Swift::UInt64 v9 = *((void *)v2 + 6);
  Channel.hash(into:)( a1,  *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v2 + 5) << 40));
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    sub_100058430(v4, v5, v6);
    Data.hash(into:)(a1, v5, v6);
  }

  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v9;
  }
  else {
    Swift::UInt64 v10 = 0LL;
  }
  Hasher._combine(_:)(v10);
  return sub_100057CA0(v4, v5, v6);
}

Swift::Int sub_100253960(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 4);
  uint64_t v4 = *((unsigned __int8 *)v1 + 5);
  uint64_t v5 = *((void *)v1 + 1);
  uint64_t v6 = *((void *)v1 + 2);
  unint64_t v7 = *((void *)v1 + 3);
  Swift::UInt v8 = *((unsigned __int8 *)v1 + 32);
  Swift::UInt v9 = *((void *)v1 + 5);
  Swift::UInt64 v10 = *((void *)v1 + 6);
  Hasher.init(_seed:)(v13, a1);
  Channel.hash(into:)((int)v13, v2 | (v3 << 32) | (v4 << 40));
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    sub_100058430(v5, v6, v7);
    Data.hash(into:)(v13, v6, v7);
  }

  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v10;
  }
  else {
    Swift::UInt64 v11 = 0LL;
  }
  Hasher._combine(_:)(v11);
  sub_100057CA0(v5, v6, v7);
  return Hasher._finalize()();
}

BOOL sub_100253A64(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned __int8 *)a1 + 4);
  uint64_t v4 = *((unsigned __int8 *)a1 + 5);
  __int128 v5 = *(_OWORD *)(a1 + 6);
  v14[0]  = *(_OWORD *)(a1 + 2);
  v14[1]  = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  uint64_t v8 = *((unsigned __int8 *)a2 + 5);
  __int128 v9 = *(_OWORD *)(a2 + 2);
  __int128 v10 = *(_OWORD *)(a2 + 6);
  v14[2]  = *(_OWORD *)(a1 + 10);
  v15[0]  = v9;
  __int128 v11 = *(_OWORD *)(a2 + 10);
  v15[1]  = v10;
  void v15[2] = v11;
  return (sub_1001887C8(v2 | (v3 << 32) | (v4 << 40), v6 | (v7 << 32) | (v8 << 40)) & 1) != 0
      && sub_100254BA0((uint64_t)v14, (uint64_t)v15);
}

Swift::Int sub_100253AE8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  Swift::UInt8 v5 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v7, 0LL);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain(v1);
  sub_1002548E0((uint64_t)v7, v1);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRetain(v2);
  sub_1002545B8((uint64_t)v7, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  sub_100254288((uint64_t)v7, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v3);
  sub_1002548E0((uint64_t)v7, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

double sub_100253BB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  Hasher._combine(_:)(*(_BYTE *)v1);
  swift_bridgeObjectRetain(v3);
  sub_1002548E0(a1, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v4);
  sub_1002545B8(a1, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  sub_100254288(a1, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v6);
  sub_1002548E0(a1, v6);
  *(void *)&double result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

Swift::Int sub_100253C60(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  Swift::UInt8 v6 = *(_BYTE *)v1;
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain(v2);
  sub_1002548E0((uint64_t)v8, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  sub_1002545B8((uint64_t)v8, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  sub_100254288((uint64_t)v8, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v4);
  sub_1002548E0((uint64_t)v8, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100253D28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  uint64_t v5 = a2[3];
  uint64_t v4 = a2[4];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  sub_100253E8C(a1[1], a2[1], sub_100325DA4);
  if ((v8 & 1) == 0) {
    goto LABEL_6;
  }
  sub_100253E8C(v7, v6, sub_1003266E0);
  if ((v9 & 1) != 0 && (sub_100253E8C(v3, v5, sub_100325DE8), (v10 & 1) != 0)) {
    sub_100253E8C(v2, v4, sub_100325DA4);
  }
  else {
LABEL_6:
  }
    char v11 = 0;
  return v11 & 1;
}

unint64_t sub_100253DD4()
{
  unint64_t result = qword_10040D238;
  if (!qword_10040D238)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035DE00, &type metadata for NANPeer.Availability);
    atomic_store(result, (unint64_t *)&qword_10040D238);
  }

  return result;
}

uint64_t sub_100253E18()
{
  return sub_10000AF70(&qword_10040D240, type metadata accessor for NANPeer, (uint64_t)&unk_10035DE68);
}

uint64_t sub_100253E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040CED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100253E8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v6 = 0LL;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_24;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v14 >= v11) {
      return;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v11) {
            return;
          }
          unint64_t v15 = *(void *)(v7 + 8 * v6);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_10025403C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1LL;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }

uint64_t sub_1002541CC(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1LL << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_100254248(void *result)
{
  unint64_t v2 = (*v1)[3];
  if ((uint64_t)result + 1 > (uint64_t)(v2 >> 1))
  {
    unint64_t result = sub_1002CA104((void *)(v2 > 1), (int64_t)result + 1, 1, *v1);
    unsigned int *v1 = result;
  }

  return result;
}

void sub_100254288(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v29 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  Swift::UInt v5 = 0LL;
  for (i  = 0LL; ; i  = v34)
  {
    if (v4)
    {
      uint64_t v33 = (v4 - 1) & v4;
      int64_t v34 = i;
      unint64_t v7 = __clz(__rbit64(v4)) | (i << 6);
    }

    else
    {
      int64_t v8 = i + 1;
      if (__OFADD__(i, 1LL)) {
        goto LABEL_35;
      }
      if (v8 >= v29)
      {
LABEL_33:
        swift_release(a2);
        Hasher._combine(_:)(v5);
        return;
      }

      unint64_t v9 = *(void *)(v28 + 8 * v8);
      int64_t v10 = i + 1;
      if (!v9)
      {
        int64_t v10 = i + 2;
        if (i + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v28 + 8 * v10);
        if (!v9)
        {
          uint64_t v11 = i + 3;
          if (i + 3 >= v29) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)(v28 + 8 * v11);
          if (!v9)
          {
            while (1)
            {
              int64_t v10 = v11 + 1;
              if (__OFADD__(v11, 1LL)) {
                goto LABEL_36;
              }
              if (v10 >= v29) {
                goto LABEL_33;
              }
              unint64_t v9 = *(void *)(v28 + 8 * v10);
              ++v11;
              if (v9) {
                goto LABEL_19;
              }
            }
          }

          int64_t v10 = i + 3;
        }
      }

void sub_1002545B8(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v32 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  Swift::UInt v5 = 0LL;
  int64_t v6 = 0LL;
  while (1)
  {
    if (v4)
    {
      uint64_t v37 = (v4 - 1) & v4;
      unint64_t v7 = __clz(__rbit64(v4)) | (v6 << 6);
    }

    else
    {
      int64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_35;
      }
      if (v8 >= v32)
      {
LABEL_33:
        swift_release(a2);
        Hasher._combine(_:)(v5);
        return;
      }

      unint64_t v9 = *(void *)(v31 + 8 * v8);
      ++v6;
      if (!v9)
      {
        int64_t v6 = v8 + 1;
        if (v8 + 1 >= v32) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v31 + 8 * v6);
        if (!v9)
        {
          int64_t v10 = v8 + 2;
          if (v10 >= v32) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)(v31 + 8 * v10);
          if (!v9)
          {
            while (1)
            {
              int64_t v6 = v10 + 1;
              if (__OFADD__(v10, 1LL)) {
                goto LABEL_36;
              }
              if (v6 >= v32) {
                goto LABEL_33;
              }
              unint64_t v9 = *(void *)(v31 + 8 * v6);
              ++v10;
              if (v9) {
                goto LABEL_19;
              }
            }
          }

          int64_t v6 = v10;
        }
      }

void sub_1002548E0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v27 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  Swift::UInt v5 = 0LL;
  int64_t v6 = 0LL;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_20;
    }

    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v9 >= v27) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v26 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v27) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v26 + 8 * v6);
      if (!v10) {
        break;
      }
    }

uint64_t sub_100254B88(uint64_t result, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255) {
    return sub_10024B358(result, a2, a3, a4 & 1);
  }
  return result;
}

BOOL sub_100254BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v9 = *(void *)(a2 + 16);
  if (v6 >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      sub_100086CBC(a2);
      sub_100086CBC(a1);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v6);
      char v12 = v11;
      sub_100086D2C(a2);
      sub_100086D2C(a1);
      if ((v12 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_4;
    }

uint64_t sub_100254CC8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || ((0x801004u >> (8 * *(_BYTE *)(a1 + 4))) & 0xFFC) != ((0x801004u >> (8 * *(_BYTE *)(a2 + 4))) & 0xFFC))
  {
    return 0LL;
  }

  int v4 = *(unsigned __int8 *)(a2 + 5);
  switch(*(_BYTE *)(a1 + 5))
  {
    case 2:
      if (v4 != 2) {
        return 0LL;
      }
      break;
    case 3:
      if (v4 != 3) {
        return 0LL;
      }
      break;
    case 4:
      if (v4 != 4) {
        return 0LL;
      }
      break;
    case 5:
      if (v4 != 5) {
        return 0LL;
      }
      break;
    case 6:
      if (v4 != 6) {
        return 0LL;
      }
      break;
    default:
      break;
  }

  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0LL;
  }

  uint64_t v5 = *(int *)(type metadata accessor for NANPeer.LastBeaconInformation(0LL) + 32);
  return static DispatchTime.== infix(_:_:)(a1 + v5, a2 + v5);
}

uint64_t sub_100254E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040D250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100254E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040CED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100254E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return result;
}

uint64_t sub_100254EB8()
{
  if (*(unsigned __int8 *)(v0 + 66) != 255)
  {
    uint64_t v1 = *(unsigned __int16 *)(v0 + 64) | (*(unsigned __int8 *)(v0 + 66) << 16);
    sub_1001062D4(*(void *)(v0 + 48), *(void *)(v0 + 56), v1, BYTE2(v1) & 1);
  }

  if (*(_BYTE *)(v0 + 72) != 4LL) {
    sub_1000208D8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  }
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100254F1C@<X0>(uint64_t a1@<X8>)
{
  return sub_10025294C((_OWORD *)(v1 + 16), a1);
}

uint64_t sub_100254F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.ConditionalEntry()
{
  return &type metadata for NANPeer.Availability.ConditionalEntry;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.PotentialBandEntry()
{
  return &type metadata for NANPeer.Availability.PotentialBandEntry;
}

void _s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwxx_0(void *a1)
{
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_1000208D8(a1[2], v2);
  }
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwcp_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1  = *a2;
  unint64_t v5 = a2[3];
  swift_bridgeObjectRetain(v4);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24)  = a2[3];
  }

  else
  {
    *(_WORD *)(a1 + 8)  = *((_WORD *)a2 + 4);
    uint64_t v6 = a2[2];
    sub_100020AFC(v6, v5);
    *(void *)(a1 + 16)  = v6;
    *(void *)(a1 + 24)  = v5;
  }

  *(_BYTE *)(a1 + 32)  = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 5);
  return a1;
}

uint64_t *_s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (__int128 *)(a1 + 1);
  uint64_t v7 = (__int128 *)(a2 + 1);
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if ((unint64_t)a2[3] >> 60 == 15)
    {
      __int128 v8 = *v7;
      a1[3]  = a2[3];
      *uint64_t v6 = v8;
    }

    else
    {
      *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
      uint64_t v10 = a2[2];
      unint64_t v11 = a2[3];
      sub_100020AFC(v10, v11);
      a1[2]  = v10;
      a1[3]  = v11;
    }
  }

  else if ((unint64_t)a2[3] >> 60 == 15)
  {
    sub_10008826C((uint64_t)(a1 + 1));
    uint64_t v9 = a2[3];
    *uint64_t v6 = *v7;
    a1[3]  = v9;
  }

  else
  {
    *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
    uint64_t v12 = a2[2];
    unint64_t v13 = a2[3];
    sub_100020AFC(v12, v13);
    uint64_t v14 = a1[2];
    unint64_t v15 = a1[3];
    a1[2]  = v12;
    a1[3]  = v13;
    sub_1000208D8(v14, v15);
  }

  *((_BYTE *)a1 + 32)  = *((_BYTE *)a2 + 32);
  a1[5]  = a2[5];
  a1[6]  = a2[6];
  return a1;
}

uint64_t *_s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwta_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRelease(v4);
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15)
  {
    unint64_t v6 = a2[3];
    if (v6 >> 60 != 15)
    {
      *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
      uint64_t v7 = a1[2];
      a1[2]  = a2[2];
      a1[3]  = v6;
      sub_1000208D8(v7, v5);
      goto LABEL_6;
    }

    sub_10008826C((uint64_t)(a1 + 1));
  }

  *(_OWORD *)(a1 + 1)  = *(_OWORD *)(a2 + 1);
  a1[3]  = a2[3];
LABEL_6:
  *((_BYTE *)a1 + 32)  = *((_BYTE *)a2 + 32);
  a1[5]  = a2[5];
  a1[6]  = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for RadioResourceSchedule(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResourceSchedule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.PotentialChannelEntry()
{
  return &type metadata for NANPeer.Availability.PotentialChannelEntry;
}

uint64_t destroy for NANPeer.Availability.CommittedEntry(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (v1 >> 60 != 15) {
    return sub_1000208D8(*(void *)(result + 16), v1);
  }
  return result;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  }

  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    sub_100020AFC(v5, v4);
    *(void *)(a1 + 16)  = v5;
    *(void *)(a1 + 24)  = v4;
  }

  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwca_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4)  = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5)  = *(_BYTE *)(a2 + 5);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (__int128 *)(a2 + 8);
  if (*(void *)(a1 + 24) >> 60 == 15LL)
  {
    if (*(void *)(a2 + 24) >> 60 == 15LL)
    {
      __int128 v6 = *v5;
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v6;
    }

    else
    {
      *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      sub_100020AFC(v8, v9);
      *(void *)(a1 + 16)  = v8;
      *(void *)(a1 + 24)  = v9;
    }
  }

  else if (*(void *)(a2 + 24) >> 60 == 15LL)
  {
    sub_10008826C(a1 + 8);
    uint64_t v7 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16)  = v7;
  }

  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    sub_100020AFC(v10, v11);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    *(void *)(a1 + 16)  = v10;
    *(void *)(a1 + 24)  = v11;
    sub_1000208D8(v12, v13);
  }

  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwta_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16)  = *(void *)(a2 + 16);
      *(void *)(a1 + 24)  = v7;
      sub_1000208D8(v8, v6);
      goto LABEL_6;
    }

    sub_10008826C(a1 + 8);
  }

  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(void *)(v4 + 16)  = *(void *)(v5 + 16);
LABEL_6:
  *(_BYTE *)(a1 + 32)  = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwst_0( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 56)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 56)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4)  = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.CommittedEntry()
{
  return &type metadata for NANPeer.Availability.CommittedEntry;
}

unint64_t sub_100255600()
{
  unint64_t result = qword_10040D258;
  if (!qword_10040D258)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035DF38, &type metadata for NANPeer.Availability.CommittedEntry);
    atomic_store(result, (unint64_t *)&qword_10040D258);
  }

  return result;
}

unint64_t sub_100255648()
{
  unint64_t result = qword_10040D260;
  if (!qword_10040D260)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035DFA0, &type metadata for NANPeer.Availability.PotentialChannelEntry);
    atomic_store(result, (unint64_t *)&qword_10040D260);
  }

  return result;
}

unint64_t sub_100255690()
{
  unint64_t result = qword_10040D268;
  if (!qword_10040D268)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035E008, &type metadata for NANPeer.Availability.PotentialBandEntry);
    atomic_store(result, (unint64_t *)&qword_10040D268);
  }

  return result;
}

unint64_t sub_1002556D8()
{
  unint64_t result = qword_10040D270;
  if (!qword_10040D270)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035E070, &type metadata for NANPeer.Availability.ConditionalEntry);
    atomic_store(result, (unint64_t *)&qword_10040D270);
  }

  return result;
}

uint64_t sub_10025571C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100255748(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NANPeer.Availability.EntryAttributes(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1 >> 60 != 15) {
    return sub_1000208D8(*(void *)(result + 8), v1);
  }
  return result;
}

uint64_t initializeWithCopy for NANPeer.Availability.EntryAttributes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  }

  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    sub_100020AFC(v5, v4);
    *(void *)(a1 + 8)  = v5;
    *(void *)(a1 + 16)  = v4;
  }

  *(_BYTE *)(a1 + 24)  = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for NANPeer.Availability.EntryAttributes(uint64_t a1, __int128 *a2)
{
  if (*(void *)(a1 + 16) >> 60 == 15LL)
  {
    if (*((void *)a2 + 2) >> 60 == 15LL)
    {
      __int128 v4 = *a2;
      *(void *)(a1 + 16)  = *((void *)a2 + 2);
      *(_OWORD *)a1  = v4;
    }

    else
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v6 = *((void *)a2 + 1);
      unint64_t v7 = *((void *)a2 + 2);
      sub_100020AFC(v6, v7);
      *(void *)(a1 + 8)  = v6;
      *(void *)(a1 + 16)  = v7;
    }
  }

  else if (*((void *)a2 + 2) >> 60 == 15LL)
  {
    sub_10008826C(a1);
    uint64_t v5 = *((void *)a2 + 2);
    *(_OWORD *)a1  = *a2;
    *(void *)(a1 + 16)  = v5;
  }

  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    unint64_t v9 = *((void *)a2 + 2);
    sub_100020AFC(v8, v9);
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 8)  = v8;
    *(void *)(a1 + 16)  = v9;
    sub_1000208D8(v10, v11);
  }

  *(_BYTE *)(a1 + 24)  = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 32)  = *((void *)a2 + 4);
  *(void *)(a1 + 40)  = *((void *)a2 + 5);
  return a1;
}

uint64_t assignWithTake for NANPeer.Availability.EntryAttributes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 >> 60 != 15)
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v6 = *(void *)(a1 + 8);
      *(void *)(a1 + 8)  = *(void *)(a2 + 8);
      *(void *)(a1 + 16)  = v5;
      sub_1000208D8(v6, v4);
      goto LABEL_6;
    }

    sub_10008826C(a1);
  }

  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
LABEL_6:
  *(_BYTE *)(a1 + 24)  = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPeer.Availability.EntryAttributes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPeer.Availability.EntryAttributes( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 40)  = 0LL;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 48)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 48)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24)  = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.EntryAttributes()
{
  return &type metadata for NANPeer.Availability.EntryAttributes;
}

unint64_t sub_100255A24()
{
  unint64_t result = qword_10040D278;
  if (!qword_10040D278)
  {
    unint64_t result = swift_getWitnessTable(&unk_10035E0E8, &type metadata for NANPeer.Availability.EntryAttributes);
    atomic_store(result, (unint64_t *)&qword_10040D278);
  }

  return result;
}

uint64_t sub_100255A7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1  = *a2;
  *(void *)(a1 + 8)  = v4;
  *(_WORD *)(a1 + 16)  = *((_WORD *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *_s9GeneratorVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  *((_BYTE *)a1 + 16)  = *((_BYTE *)a2 + 16);
  a1[1]  = v6;
  *((_BYTE *)a1 + 17)  = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t *_s9GeneratorVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1]  = a2[1];
  *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
  return a1;
}

uint64_t _s9GeneratorVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t _s9GeneratorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16)  = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 18)  = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 18)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s9GeneratorVMa()
{
  return &_s9GeneratorVN;
}

void sub_100255BE8(uint64_t a1, uint64_t a2, __int16 a3)
{
  char v4 = a3;
  size_t v5 = a2;
  if ((a3 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = (unsigned __int128)(v7 * (__int128)5LL) >> 64;
    uint64_t v9 = 5 * v7;
    if (v8 != v9 >> 63) {
      goto LABEL_41;
    }
    BOOL v10 = __OFADD__(v9, 7LL);
    unint64_t v11 = v9 + 7;
    if (v10)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    if (v11 < 0x208)
    {
      uint64_t v12 = v11 >> 3;
      if (v12 <= 6) {
        size_t v5 = 6LL;
      }
      else {
        size_t v5 = v12;
      }
    }

    else
    {
      size_t v5 = 64LL;
    }
  }

  char v36 = HIBYTE(a3);
  if (HIBYTE(a3) != 4)
  {
LABEL_14:
    unint64_t v15 = (_UNKNOWN **)swift_slowAlloc(v5, -1LL);
    if ((v5 & 0x8000000000000000LL) != 0) {
      goto LABEL_40;
    }
    uint64_t v3 = v15;
    if (v5) {
      bzero(v15, v5);
    }
    uint64_t v32 = v5;
    uint64_t v33 = a1 + 56;
    uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
    uint64_t v17 = -1LL;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    unint64_t v18 = v17 & *(void *)(a1 + 56);
    int64_t v34 = (unint64_t)(v16 + 63) >> 6;
    char v19 = v4;
    swift_bridgeObjectRetain(a1);
    int64_t v20 = 0LL;
    while (1)
    {
      if (v18)
      {
        unint64_t v21 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        unint64_t v22 = v21 | (v20 << 6);
      }

      else
      {
        int64_t v29 = v20 + 1;
        if (__OFADD__(v20, 1LL))
        {
          __break(1u);
          goto LABEL_39;
        }

        if (v29 >= v34) {
          goto LABEL_37;
        }
        unint64_t v30 = *(void *)(v33 + 8 * v29);
        ++v20;
        if (!v30)
        {
          int64_t v20 = v29 + 1;
          if (v29 + 1 >= v34) {
            goto LABEL_37;
          }
          unint64_t v30 = *(void *)(v33 + 8 * v20);
          if (!v30)
          {
            int64_t v20 = v29 + 2;
            if (v29 + 2 >= v34) {
              goto LABEL_37;
            }
            unint64_t v30 = *(void *)(v33 + 8 * v20);
            if (!v30)
            {
              int64_t v31 = v29 + 3;
              if (v31 >= v34)
              {
LABEL_37:
                swift_release(a1);
                sub_100211E68(v3, v32);
                swift_slowDealloc(v3, -1LL, -1LL);
                return;
              }

              unint64_t v30 = *(void *)(v33 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  int64_t v20 = v31 + 1;
                  if (__OFADD__(v31, 1LL)) {
                    break;
                  }
                  if (v20 >= v34) {
                    goto LABEL_37;
                  }
                  unint64_t v30 = *(void *)(v33 + 8 * v20);
                  ++v31;
                  if (v30) {
                    goto LABEL_36;
                  }
                }

uint64_t sub_100255F20(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v7 = (unsigned __int128)(v6 * (__int128)5LL) >> 64;
    uint64_t v8 = 5 * v6;
    if (v7 != v8 >> 63)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    BOOL v9 = __OFADD__(v8, 7LL);
    unint64_t v10 = v8 + 7;
    if (v9)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    if (v10 > 0x207)
    {
      unint64_t v11 = 512LL;
      goto LABEL_11;
    }

    uint64_t v12 = v10 >> 3;
    if (v12 <= 6) {
      a4  = 6LL;
    }
    else {
      a4  = v12;
    }
  }

  if ((unint64_t)(a4 - 0x1000000000000000LL) >> 61 != 7)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v11 = 8 * a4;
LABEL_11:
  unint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v14 = WiFiAddress.data.getter(a1 & 0xFFFFFFFFFFFFLL);
  unint64_t v16 = v15;
  sub_100256454(4 * a2, v14, v15);
  if ((v11 & 0x8000000000000000LL) == 0)
  {
    if (HIDWORD(v11))
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
      goto LABEL_21;
    }

    unsigned int v18 = v17;
    sub_1000208D8(v14, v16);
    if ((_DWORD)v11)
    {
      uint64_t v19 = v18 % v11;
      uint64_t v20 = WiFiAddress.data.getter(v13);
      unint64_t v22 = v21;
      sub_100256454((4 * a2) | 1, v20, v21);
      unsigned int v24 = v23;
      sub_1000208D8(v20, v22);
      uint64_t v25 = v24 % v11;
      uint64_t v26 = WiFiAddress.data.getter(v13);
      unint64_t v28 = v27;
      sub_100256454((4 * a2) | 2, v26, v27);
      sub_1000208D8(v26, v28);
      uint64_t v29 = WiFiAddress.data.getter(v13);
      unint64_t v31 = v30;
      sub_100256454((4 * a2) | 3, v29, v30);
      sub_1000208D8(v29, v31);
      return v19 | (v25 << 32);
    }

    goto LABEL_16;
  }

void sub_100256164(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain_n(a1, 2LL);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v16 >= v6) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v2 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v2 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v2 + 8 * v7);
        if (!v17)
        {
          int64_t v7 = v16 + 3;
          if (v16 + 3 >= v6) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v2 + 8 * v7);
          if (!v17)
          {
            int64_t v7 = v16 + 4;
            if (v16 + 4 >= v6) {
              goto LABEL_25;
            }
            unint64_t v17 = *(void *)(v2 + 8 * v7);
            if (!v17) {
              break;
            }
          }
        }
      }
    }

void sub_10025636C()
{
}

void sub_100256374()
{
  off_10040D280  = &off_1003F1C68;
}

unint64_t sub_100256388(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0LL;
    swift_stdlib_random(&v3, 8LL);
    uint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0LL;
          swift_stdlib_random(&v3, 8LL);
        }

        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_100256410()
{
  unint64_t result = qword_10040D288;
  if (!qword_10040D288)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_10040D288);
  }

  return result;
}

void sub_100256454(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100002274(&qword_1004040A8);
  uint64_t v6 = swift_allocObject(v5, 33LL, 7LL);
  *(_OWORD *)(v6 + 16)  = xmmword_100339900;
  *(_BYTE *)(v6 + 32)  = a1;
  __asm { BR              X11 }

void sub_100256510()
{
  if (!__OFADD__(BYTE6(v0), 1LL))
  {
    Data._Representation.reserveCapacity(_:)(BYTE6(v0) + 1LL);
    uint64_t v4 = sub_100002274(&qword_100406978);
    *(void *)(v3 - 112)  = v4;
    *(void *)(v3 - 104)  = sub_100256800();
    *(void *)(v3 - 136)  = v2;
    uint64_t v5 = sub_100021104((void *)(v3 - 136), v4);
    uint64_t v6 = *v5 + 32LL;
    uint64_t v7 = v6 + *(void *)(*v5 + 16LL);
    swift_bridgeObjectRetain(v2);
    Data._Representation.append(contentsOf:)(v6, v7);
    sub_100002AC4((void *)(v3 - 136));
    sub_100020AFC(v1, v0);
    sub_1000FA9C4(v1, v0);
    sub_1000208D8(v1, v0);
    swift_bridgeObjectRelease(v2);
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100256748LL);
}

unint64_t sub_100256800()
{
  unint64_t result = qword_100408050;
  if (!qword_100408050)
  {
    uint64_t v1 = sub_1000022F8(&qword_100406978);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100408050);
  }

  return result;
}

void sub_10025684C(uint64_t a1)
{
  v10[0]  = "\b";
  uint64_t v2 = type metadata accessor for NANPublish.Configuration(319LL);
  if (v3 <= 0x3F)
  {
    v10[1]  = *(void *)(v2 - 8) + 64LL;
    v10[2]  = &unk_10035E208;
    uint64_t v4 = type metadata accessor for DispatchTime(319LL);
    if (v5 <= 0x3F)
    {
      v10[3]  = *(void *)(v4 - 8) + 64LL;
      v10[4]  = &unk_10035E220;
      v10[5]  = &unk_10035E220;
      v10[6]  = &unk_10035E220;
      uint64_t v6 = type metadata accessor for Logger(319LL);
      if (v7 <= 0x3F)
      {
        v10[7]  = *(void *)(v6 - 8) + 64LL;
        v10[8]  = &unk_10035E220;
        sub_1002607C8(319LL);
        if (v9 <= 0x3F)
        {
          v10[9]  = *(void *)(v8 - 8) + 64LL;
          v10[10]  = (char *)&value witness table for Builtin.BridgeObject + 64;
          v10[11]  = (char *)&value witness table for Builtin.Int32 + 64;
          v10[12]  = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_initClassMetadata2(a1, 0LL, 13LL, v10, a1 + 96);
        }
      }
    }
  }

uint64_t sub_100256944@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + qword_10040D2A8);
  if (v3)
  {
    *(void *)(a1 + 24)  = swift_getObjectType(*(void *)(v1 + qword_10040D2A8));
    *(void *)a1  = v3;
  }

  else
  {
    *(_OWORD *)a1  = 0u;
    *(_OWORD *)(a1 + 16)  = 0u;
  }

  return swift_unknownObjectRetain(v3);
}

uint64_t sub_100256998()
{
  uint64_t v1 = v0 + qword_100410A28;
  swift_beginAccess(v0 + qword_100410A28, v3, 1LL, 0LL);
  uint64_t result = type metadata accessor for NANPublish.Configuration(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 80))  = 0;
  return result;
}

uint64_t sub_1002569E8(uint64_t a1)
{
  uint64_t v2 = swift_isaMask & *v1;
  __int16 v12 = a1;
  char v13 = BYTE2(a1);
  char v14 = BYTE3(a1);
  char v15 = BYTE4(a1);
  char v16 = BYTE5(a1);
  char v17 = BYTE6(a1);
  uint64_t v3 = (void *)((char *)v1 + qword_100410A48);
  swift_beginAccess(v3, &v10, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v11 = v4;
  uint64_t v6 = _s17ResponderInstanceCMa(255LL, *(void *)(v2 + 80), *(void *)(v2 + 88), v5);
  unint64_t v7 = sub_10017B5C8();
  uint64_t v8 = type metadata accessor for Dictionary(0LL, &type metadata for NANPeerServiceIdentifier, v6, v7);
  swift_bridgeObjectRetain(v4);
  Dictionary.removeValue(forKey:)(&v12, v8);

  return sub_100257EE0(v11);
}

uint64_t sub_100256AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_10001C08C(a1 & 0xFFFFFFFFFFFFFFLL), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    sub_100057FE8(v8 + *(void *)(v10 + 72) * v7, a3, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v12 = a3;
    uint64_t v13 = 0LL;
    uint64_t v14 = v9;
  }

  else
  {
    uint64_t v14 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
    uint64_t v12 = a3;
    uint64_t v13 = 1LL;
  }

  return v11(v12, v13, 1LL, v14);
}

uint64_t sub_100256B90(uint64_t a1)
{
  uint64_t v61 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  double v60 = (uint64_t *)((char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v63 = sub_100002274(&qword_10040D488);
  __chkstk_darwin();
  uint64_t v49 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  int v59 = (_DWORD *)((char *)&v48 - v4);
  __chkstk_darwin();
  char v6 = (char *)&v48 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v57 = a1 + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v58 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v62 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v14 = 0LL;
  int v56 = _swiftEmptyArrayStorage;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  int64_t v64 = v14;
  for (i  = v15 | (v14 << 6); ; i  = __clz(__rbit64(v31)) + (v32 << 6))
  {
    uint64_t v17 = *(void *)(v62 + 56);
    uint64_t v18 = *(void *)(v62 + 48) - i + 8 * i;
    __int16 v19 = *(_WORD *)(v18 + 4);
    char v20 = *(_BYTE *)(v18 + 6);
    uint64_t v21 = v17
        + *(void *)(*(void *)(type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL) - 8) + 72LL) * i;
    uint64_t v22 = v63;
    int v23 = *(_DWORD *)v18;
    sub_100057FE8( v21,  (uint64_t)&v8[*(int *)(v63 + 48)],  type metadata accessor for NANPeer.Service.AuthenticationStatus);
    *(_DWORD *)uint64_t v8 = v23;
    *((_WORD *)v8 + 2)  = v19;
    v8[6]  = v20;
    sub_1000586C0((uint64_t)v8, (uint64_t)v6, &qword_10040D488);
    uint64_t v24 = *(int *)(v22 + 48);
    uint64_t v25 = v59;
    uint64_t v26 = (uint64_t)v59 + v24;
    uint64_t v27 = (uint64_t)&v6[v24];
    LOWORD(v24)  = *((_WORD *)v6 + 2);
    char v28 = v6[6];
    *int v59 = *(_DWORD *)v6;
    *((_WORD *)v25 + 2)  = v24;
    *((_BYTE *)v25 + 6)  = v28;
    sub_100057FE8(v27, v26, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v29 = v60;
    sub_100057FE8(v26, (uint64_t)v60, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    sub_10005802C(v26, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    if (swift_getEnumCaseMultiPayload(v29, v61) == 1)
    {
      uint64_t v55 = *v29;
      int64_t v34 = v49;
      uint64_t v35 = (uint64_t)&v49[*(int *)(v63 + 48)];
      char v36 = *v6;
      char v37 = v6[1];
      int v38 = v6[2];
      int v39 = v6[3];
      int v40 = v6[4];
      int v41 = v6[5];
      int v42 = v6[6];
      *uint64_t v49 = *v6;
      char v43 = v37;
      v34[1]  = v37;
      int v53 = v39;
      int v54 = v38;
      v34[2]  = v38;
      v34[3]  = v39;
      int v51 = v41;
      int v52 = v40;
      void v34[4] = v40;
      v34[5]  = v41;
      int v50 = v42;
      v34[6]  = v42;
      sub_100057FE8(v27, v35, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      sub_10005802C(v35, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      sub_1000225EC((uint64_t)v6, &qword_10040D488);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v56);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1002CA374(0LL, v56[2] + 1LL, 1, v56);
        int v56 = (void *)result;
      }

      int64_t v14 = v64;
      unint64_t v45 = v56[2];
      unint64_t v44 = v56[3];
      if (v45 >= v44 >> 1)
      {
        uint64_t result = (uint64_t)sub_1002CA374((void *)(v44 > 1), v45 + 1, 1, v56);
        int v56 = (void *)result;
      }

      unint64_t v46 = v56;
      v56[2]  = v45 + 1;
      unint64_t v47 = &v46[2 * v45];
      *((_BYTE *)v47 + 32)  = v36;
      *((_BYTE *)v47 + 33)  = v43;
      *((_BYTE *)v47 + 34)  = v54;
      *((_BYTE *)v47 + 35)  = v53;
      *((_BYTE *)v47 + 36)  = v52;
      *((_BYTE *)v47 + 37)  = v51;
      *((_BYTE *)v47 + 38)  = v50;
      v47[5]  = v55;
      if (v12) {
        goto LABEL_4;
      }
    }

    else
    {
      sub_10005802C((uint64_t)v29, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      uint64_t result = sub_1000225EC((uint64_t)v6, &qword_10040D488);
      int64_t v14 = v64;
      if (v12) {
        goto LABEL_4;
      }
    }

uint64_t sub_100257054()
{
  return swift_unownedRetainStrong(*(void *)(v0 + qword_10040D290));
}

uint64_t sub_100257064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410A28;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100057FE8(v3, a1, type metadata accessor for NANPublish.Configuration);
}

uint64_t sub_1002570BC(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    sub_1000225EC(a1, &qword_100405280);
    goto LABEL_5;
  }

  uint64_t v3 = sub_100002274(&qword_10040D450);
  if (!swift_dynamicCast(&v7, a1, &type metadata for Any[8], v3, 6LL))
  {
LABEL_5:
    uint64_t v4 = 0LL;
    goto LABEL_6;
  }

  uint64_t v4 = v7;
LABEL_6:
  uint64_t v5 = *(void *)(v1 + qword_10040D2A8);
  *(void *)(v1 + qword_10040D2A8)  = v4;
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_100257148@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410A38;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_10025718C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)((swift_isaMask & *v2) + 0x50LL);
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v4 + 8),  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = &v43[-v8 - 8];
  uint64_t v10 = (char *)v2 + qword_100410A28;
  swift_beginAccess((char *)v2 + qword_100410A28, v47, 0LL, 0LL);
  uint64_t v11 = type metadata accessor for NANPublish.Configuration(0LL);
  sub_1000226B0((uint64_t)&v10[*(int *)(v11 + 88)], (uint64_t)v45, &qword_100409E58);
  unsigned __int8 v12 = v46;
  if (v46 == 255) {
    return sub_1000225EC((uint64_t)v45, &qword_100409E58);
  }
  uint64_t result = sub_10017B2A8((uint64_t)v45);
  if ((v12 & 1) == 0)
  {
    uint64_t v15 = _s17ResponderInstanceCMa(0LL, v5, v4, v14);
    unint64_t v16 = sub_10017B5C8();
    if ((Dictionary.isEmpty.getter(a1, &type metadata for NANPeerServiceIdentifier, v15, v16) & 1) == 0) {
      goto LABEL_13;
    }
    int v42 = (void *)v16;
    uint64_t v17 = v15;
    uint64_t v18 = (void *)((char *)v2 + qword_100410A48);
    swift_beginAccess((char *)v2 + qword_100410A48, v43, 0LL, 0LL);
    uint64_t v19 = *v18;
    uint64_t v20 = swift_bridgeObjectRetain(v19);
    char v21 = Dictionary.isEmpty.getter(v20, &type metadata for NANPeerServiceIdentifier, v17, v42);
    uint64_t v22 = v19;
    uint64_t v15 = v17;
    unint64_t v16 = (unint64_t)v42;
    swift_bridgeObjectRelease(v22);
    if ((v21 & 1) == 0)
    {
      sub_100257554();
    }

    else
    {
LABEL_13:
      if ((Dictionary.isEmpty.getter(a1, &type metadata for NANPeerServiceIdentifier, v15, v16) & 1) == 0)
      {
        int v23 = (void *)((char *)v2 + qword_100410A48);
        swift_beginAccess((char *)v2 + qword_100410A48, v45, 0LL, 0LL);
        unint64_t v24 = v16;
        uint64_t v25 = v15;
        int v42 = v23;
        uint64_t v26 = *v23;
        uint64_t v27 = swift_bridgeObjectRetain(*v23);
        LOBYTE(v23)  = Dictionary.isEmpty.getter(v27, &type metadata for NANPeerServiceIdentifier, v25, v24);
        uint64_t v28 = v26;
        uint64_t v15 = v25;
        unint64_t v16 = v24;
        swift_bridgeObjectRelease(v28);
        if ((v23 & 1) != 0)
        {
          unint64_t v29 = v24;
          uint64_t v30 = v15;
          uint64_t v31 = *(void *)((char *)v2 + qword_10040D290);
          swift_unownedRetainStrong(v31);
          (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( v9,  v31 + *(void *)(*(void *)v31 + 96LL),  AssociatedTypeWitness);
          swift_release(v31);
          uint64_t v32 = *v42;
          uint64_t v33 = swift_bridgeObjectRetain(*v42);
          uint64_t v34 = Dictionary.count.getter(v33, &type metadata for NANPeerServiceIdentifier, v30, v29);
          swift_bridgeObjectRelease(v32);
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 16LL))( v34,  AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
          return sub_100257B8C();
        }
      }
    }

    uint64_t v36 = *(void *)((char *)v2 + qword_10040D290);
    swift_unownedRetainStrong(v36);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( v9,  v36 + *(void *)(*(void *)v36 + 96LL),  AssociatedTypeWitness);
    swift_release(v36);
    char v37 = (void *)((char *)v2 + qword_100410A48);
    swift_beginAccess((char *)v2 + qword_100410A48, v44, 0LL, 0LL);
    uint64_t v38 = *v37;
    uint64_t v39 = swift_bridgeObjectRetain(v38);
    uint64_t v40 = Dictionary.count.getter(v39, &type metadata for NANPeerServiceIdentifier, v15, v16);
    swift_bridgeObjectRelease(v38);
    uint64_t v41 = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 + 8) + 16LL))(v40, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }

  return result;
}

uint64_t sub_100257554()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t AssociatedConformanceWitness = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v3,  AssociatedConformanceWitness,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v68 = (char *)&v55 - v9;
  uint64_t v10 = (char *)v0 + qword_100410A28;
  swift_beginAccess(v10, v74, 0LL, 0LL);
  uint64_t v11 = type metadata accessor for NANPublish.Configuration(0LL);
  sub_1000226B0((uint64_t)&v10[*(int *)(v11 + 88)], (uint64_t)v71, &qword_100409E58);
  if (v73 == 255) {
    return sub_1000225EC((uint64_t)v71, &qword_100409E58);
  }
  if ((v73 & 1) != 0) {
    return sub_10017B2A8((uint64_t)v71);
  }
  uint64_t v13 = v71[1];
  uint64_t v63 = v71[0];
  unsigned int v60 = v72;
  uint64_t v14 = sub_100259AE4();
  (*(void (**)(uint64_t))(*v14 + 192LL))(1LL);
  swift_release(v14);
  uint64_t v15 = sub_100259AE4();
  unint64_t v16 = (void *)((char *)v15 + *(void *)(*v15 + 104LL));
  uint64_t v17 = v16[1];
  uint64_t v64 = *v16;
  swift_bridgeObjectRetain(v17);
  swift_release(v15);
  unint64_t v66 = v17;
  swift_bridgeObjectRetain_n(v17, 2LL);
  id v18 = v1;
  unint64_t v65 = v13;
  swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v19 = (char *)v18;
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  BOOL v23 = os_log_type_enabled(v20, v21);
  uint64_t v61 = v8;
  uint64_t v62 = v5;
  int v59 = v19;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    LODWORD(v57)  = v22;
    uint64_t v25 = v24;
    uint64_t v26 = (char **)swift_slowAlloc(8LL, -1LL);
    int v56 = v26;
    int64_t v58 = (void (*)(void, void, void))swift_slowAlloc(64LL, -1LL);
    v71[0]  = (uint64_t)v58;
    *(_DWORD *)uint64_t v25 = 138412802;
    uint64_t v69 = (uint64_t)v19;
    uint64_t v27 = v19;
    os_log_t v55 = v20;
    uint64_t v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    *uint64_t v26 = v19;

    unint64_t v29 = v65;
    *(_WORD *)(v25 + 12)  = 2080;
    swift_bridgeObjectRetain(v29);
    uint64_t v30 = v63;
    uint64_t v69 = sub_10000235C(v63, v29, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    swift_bridgeObjectRelease_n(v29, 3LL);
    *(_WORD *)(v25 + 22)  = 2080;
    uint64_t v5 = v62;
    unint64_t v31 = v66;
    swift_bridgeObjectRetain(v66);
    uint64_t v32 = v64;
    uint64_t v69 = sub_10000235C(v64, v31, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    swift_bridgeObjectRelease_n(v31, 3LL);
    os_log_t v33 = v55;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  (os_log_type_t)v57,  "%@ is attempting to starting sharing internet from %s to %s",  (uint8_t *)v25,  0x20u);
    uint64_t v34 = sub_100002274(&qword_100404DE0);
    uint64_t v35 = v56;
    swift_arrayDestroy(v56, 1LL, v34);
    swift_slowDealloc(v35, -1LL, -1LL);
    uint64_t v36 = v58;
    swift_arrayDestroy(v58, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);

    uint64_t v37 = v32;
  }

  else
  {
    swift_bridgeObjectRelease_n(v66, 2LL);
    swift_bridgeObjectRelease_n(v65, 2LL);

    uint64_t v30 = v63;
    uint64_t v37 = v64;
  }

  uint64_t v38 = v59;
  uint64_t v39 = *(void *)&v59[qword_10040D290];
  swift_unownedRetainStrong(v39);
  uint64_t v40 = v39 + *(void *)(*(void *)v39 + 96LL);
  int64_t v58 = *(void (**)(void, void, void))(v5 + 16);
  v58(v68, v40, AssociatedTypeWitness);
  swift_release(v39);
  uint64_t v41 = swift_allocObject(&unk_1003F3ED0, 24LL, 7LL);
  uint64_t v57 = v41;
  swift_unknownObjectWeakInit(v41 + 16, v38);
  int v42 = (void *)swift_allocObject(&unk_1003F3EF8, 72LL, 7LL);
  uint64_t v43 = AssociatedConformanceWitness;
  v42[2]  = AssociatedConformanceWitness;
  v42[3]  = v2;
  v42[4]  = v41;
  v42[5]  = v30;
  unint64_t v44 = v65;
  v42[6]  = v65;
  v42[7]  = v37;
  unint64_t v45 = v66;
  v42[8]  = v66;
  uint64_t v46 = swift_allocObject(&unk_1003F3ED0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v46 + 16, v38);
  unint64_t v47 = (void *)swift_allocObject(&unk_1003F3F20, 40LL, 7LL);
  v47[2]  = v43;
  v47[3]  = v2;
  v47[4]  = v46;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v43,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v48 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v49 = *(void (**)(void, void, void, void, void, void, void, void, void, void, void))(v48 + 8);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v44);
  uint64_t v50 = v57;
  swift_retain();
  swift_retain();
  uint64_t v54 = v48;
  int v51 = v68;
  v49(v63, v44, v64, v45, v60, sub_10026212C, v42, sub_100262214, v47, AssociatedTypeWitness, v54);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v45);
  swift_release(v42);
  swift_release(v47);
  int v52 = *(void (**)(void, void))(v62 + 8);
  v52(v51, AssociatedTypeWitness);
  swift_release(v50);
  swift_release(v46);
  swift_unownedRetainStrong(v39);
  int v53 = v61;
  v58(v61, v39 + *(void *)(*(void *)v39 + 96LL), AssociatedTypeWitness);
  swift_release(v39);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 320))(1LL, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v52)(v53, AssociatedTypeWitness);
}

uint64_t sub_100257B8C()
{
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v1 + 8),  v2,  &protocol requirements base descriptor for P2PControls);
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v31 = (char *)&v26 - v8;
  uint64_t v9 = v0;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v30 = v1;
    unsigned __int8 v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = (void *)swift_slowAlloc(8LL, -1LL);
    os_log_t v28 = v10;
    unint64_t v29 = v12;
    *(_DWORD *)unsigned __int8 v12 = 138412290;
    uint64_t v32 = v9;
    uint64_t v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    uint64_t v14 = v27;
    void *v27 = v9;

    uint64_t v15 = v29;
    uint64_t v1 = v30;
    uint64_t v10 = v28;
    _os_log_impl((void *)&_mh_execute_header, v28, v11, "%@ is attempting to stop sharing internet", v29, 0xCu);
    uint64_t v16 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v14, 1LL, v16);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v17 = *(void *)((char *)v9 + qword_10040D290);
  swift_unownedRetainStrong(v17);
  id v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v19 = v31;
  v18(v31, v17 + *(void *)(*(void *)v17 + 96LL), AssociatedTypeWitness);
  swift_release(v17);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 24LL))(AssociatedTypeWitness);
  os_log_type_t v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v19, AssociatedTypeWitness);
  swift_unownedRetainStrong(v17);
  v18(v7, v17 + *(void *)(*(void *)v17 + 96LL), AssociatedTypeWitness);
  swift_release(v17);
  (*(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 320))( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  v21(v7, AssociatedTypeWitness);
  swift_unownedRetainStrong(v17);
  uint64_t v22 = v17 + *(void *)(*(void *)v17 + 680LL);
  swift_beginAccess(v22, &v32, 1LL, 0LL);
  uint64_t v23 = *(void *)(v22 + 8);
  *(_BYTE *)(v22 + 16)  = 0;
  *(void *)uint64_t v22 = 0LL;
  *(void *)(v22 + 8)  = 0LL;
  swift_release(v17);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = sub_100259AE4();
  (*(void (**)(void))(*v24 + 192LL))(0LL);
  return swift_release(v24);
}

uint64_t sub_100257EE0(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + qword_100410A48);
  swift_beginAccess(v1 + qword_100410A48, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  sub_10025718C(v4);
  return swift_bridgeObjectRelease(v4);
}

void *sub_100257F44(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100257F8C(a1, a2);
}

void *sub_100257F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v93 = a2;
  uint64_t v94 = a1;
  ObjectType  = (objc_class *)swift_getObjectType(v2);
  uint64_t v4 = swift_isaMask & *v2;
  uint64_t v5 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v89 = *(void *)(v5 - 8);
  uint64_t v90 = v5;
  __chkstk_darwin();
  uint64_t v81 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v4 + 80);
  uint64_t v92 = *(void *)(v4 + 88);
  uint64_t v87 = v7;
  uint64_t v83 = *(void *)(v92 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v83,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v85 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v86 = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v82 = (char *)&v69 - v9;
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  uint64_t v88 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v84 = (char *)&v69 - v11;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchTime(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v3[qword_100410A30]  = 0;
  uint64_t v20 = &v3[qword_10040D298];
  type metadata accessor for P2PTimer(0LL);
  os_log_type_t v21 = v3;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v22 = NANConstants.maximumServiceRetryRate.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v22, v12);
  uint64_t v79 = v20;
  - infix(_:_:)(v19, v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v24 = v93;
  v80  = v16;
  char v78 = v23;
  v23(v19, v16);
  uint64_t v74 = qword_10040D2A0;
  *(void *)((char *)v21 + qword_10040D2A0)  = 0LL;
  uint64_t v75 = qword_10040D2A8;
  *(void *)((char *)v21 + qword_10040D2A8)  = 0LL;
  uint64_t v77 = qword_10040D2B0;
  *(void *)((char *)v21 + qword_10040D2B0)  = 0LL;
  uint64_t v25 = (char *)v21 + qword_100410A38;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xED00006E616E2E65LL, 0x6873696C627570LL, 0xE700000000000000LL);
  uint64_t v76 = qword_10040D2B8;
  *(void *)((char *)v21 + qword_10040D2B8)  = 0LL;
  uint64_t v26 = qword_100410A40;
  *(void *)((char *)v21 + qword_100410A40)  = _swiftEmptyDictionarySingleton;
  *(_DWORD *)((char *)v21 + qword_10040D2C8)  = -1;
  uint64_t v27 = qword_100410A48;
  uint64_t v28 = v87;
  uint64_t v30 = _s17ResponderInstanceCMa(0LL, v87, v92, v29);
  unint64_t v31 = sub_10017B5C8();
  uint64_t v32 = v30;
  uint64_t v33 = v94;
  *(void *)((char *)v21 + v27)  = Dictionary.init()(&type metadata for NANPeerServiceIdentifier, v32, v31);
  uint64_t v73 = qword_10040D290;
  *(void *)((char *)v21 + qword_10040D290)  = v33;
  uint64_t v34 = (uint64_t)v21 + qword_100410A28;
  sub_100057FE8(v24, (uint64_t)v21 + qword_100410A28, type metadata accessor for NANPublish.Configuration);
  uint64_t v35 = *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 96);
  if ((*(_BYTE *)(v24 + v35) & 1) != 0)
  {
    uint64_t v36 = v28;
    uint64_t v38 = v89;
    uint64_t v37 = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))( (uint64_t)v21 + qword_10040D2C0,  1LL,  1LL,  v90);
    swift_unownedRetain(v33);
  }

  else
  {
    uint64_t v69 = v34;
    uint64_t v70 = v27;
    uint64_t v71 = v26;
    unsigned __int8 v72 = v25;
    swift_unownedRetainStrong(v33);
    uint64_t v40 = v85;
    uint64_t v39 = v86;
    uint64_t v41 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v82, v33 + *(void *)(*(void *)v33 + 112LL), v86);
    uint64_t v42 = swift_unownedRetain(v33);
    swift_release(v42);
    uint64_t v36 = v28;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v83,  v28,  v39,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128))( v39,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    uint64_t v45 = (uint64_t)v84;
    (*(void (**)(void, void, BOOL))(*(void *)v44 + 136LL))( *(void *)(v24 + 8),  *(void *)(v24 + 16),  (*(_BYTE *)(v24 + v35) & 1) == 0);
    swift_release(v44);
    uint64_t v46 = (uint64_t)v21 + qword_10040D2C0;
    sub_1000586C0(v45, (uint64_t)v21 + qword_10040D2C0, &qword_10040D480);
    uint64_t v47 = v88;
    sub_1000226B0(v46, v88, &qword_10040D480);
    uint64_t v38 = v89;
    uint64_t v37 = v90;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v47, 1LL, v90) == 1)
    {
      sub_1000225EC(v88, &qword_10040D480);
      unint64_t v48 = sub_1000033FC();
      uint64_t v49 = swift_allocError(&type metadata for WiFiError, v48, 0LL, 0LL);
      *(_OWORD *)uint64_t v50 = xmmword_10035E1A0;
      *(_BYTE *)(v50 + 16)  = 1;
      swift_willThrow(v49);
      swift_release(v94);
      sub_10005802C(v24, type metadata accessor for NANPublish.Configuration);
      swift_unownedRelease(*(void *)((char *)v21 + v73));
      sub_10005802C(v69, type metadata accessor for NANPublish.Configuration);
      v78(v79, v80);
      swift_release(*(void *)((char *)v21 + v74));
      swift_unknownObjectRelease(*(void *)((char *)v21 + v75));

      uint64_t v51 = type metadata accessor for Logger(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8LL))(v72, v51);
      swift_release(*(void *)((char *)v21 + v76));
      sub_1000225EC(v46, &qword_10040D480);
      swift_bridgeObjectRelease(*(void *)((char *)v21 + v71));
      uint64_t v52 = *(void *)((char *)v21 + v70);

      swift_bridgeObjectRelease(v52);
      swift_deallocPartialClassInstance( v21,  ObjectType,  *(unsigned int *)((swift_isaMask & *v21) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v21) + 0x34LL));
      return v21;
    }

    sub_1000225EC(v88, &qword_10040D480);
  }

  v95.receiver  = v21;
  v95.super_class  = ObjectType;
  id v53 = objc_msgSendSuper2(&v95, "init");
  uint64_t v54 = (uint64_t)v53 + qword_10040D2C0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))((uint64_t)v53 + qword_10040D2C0, 1LL, v37))
  {
    id v55 = v53;
  }

  else
  {
    uint64_t v56 = v81;
    sub_100057FE8(v54, v81, type metadata accessor for LongTermPairingKeys);
    uint64_t v57 = swift_allocObject(&unk_1003F3ED0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v57 + 16, v53);
    int64_t v58 = (void *)swift_allocObject(&unk_1003F3F98, 40LL, 7LL);
    uint64_t v59 = v92;
    v58[2]  = v36;
    v58[3]  = v59;
    v58[4]  = v57;
    id v60 = v53;
    swift_retain();
    LongTermPairingKeys.updatedPairedDevicesHandler.setter((uint64_t)sub_100262A2C, (uint64_t)v58);
    sub_10005802C(v56, type metadata accessor for LongTermPairingKeys);
    swift_release(v57);
  }

  os_log_type_t v21 = v53;
  uint64_t v61 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v62 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v64 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v63 = 138412290;
    unint64_t v96 = v21;
    unint64_t v65 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    *uint64_t v64 = v21;

    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Created %@", v63, 0xCu);
    uint64_t v66 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v64, 1LL, v66);
    swift_slowDealloc(v64, -1LL, -1LL);
    unint64_t v67 = v63;
    uint64_t v24 = v93;
    swift_slowDealloc(v67, -1LL, -1LL);
  }

  else
  {

    uint64_t v61 = (os_log_s *)v21;
  }

  swift_release(v94);
  sub_10005802C(v24, type metadata accessor for NANPublish.Configuration);
  return v21;
}

void sub_100258824(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  Strong  = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    if (*(_BYTE *)(Strong + qword_100410A30) == 1) {
      sub_100258888();
    }
  }

double sub_100258888()
{
  uint64_t v1 = (void *)(v0 + qword_100410A40);
  swift_beginAccess(v0 + qword_100410A40, v19, 1LL, 0LL);
  uint64_t v2 = *v1;
  uint64_t v3 = swift_bridgeObjectRetain(*v1);
  uint64_t v4 = sub_100262228(v3);
  swift_bridgeObjectRelease(v2);
  uint64_t v5 = *v1;
  void *v1 = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *v1;
  uint64_t v7 = swift_bridgeObjectRetain(*v1);
  uint64_t v8 = sub_100256B90(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (unsigned __int8 *)(v8 + 32);
    swift_bridgeObjectRetain(v8);
    do
    {
      uint64_t v11 = *((void *)v10 + 1);
      unint64_t v12 = (unint64_t)*(unsigned int *)(v10 + 3) << 24;
      uint64_t v13 = v10[2];
      uint64_t v14 = v10[1];
      unsigned int v15 = *v10;
      v10 += 16;
      unint64_t v16 = v12 | (v13 << 16) | v15 | (v14 << 8);
      uint64_t v17 = swift_bridgeObjectRetain(v11);
      sub_100260A58(v17, v16);
      swift_bridgeObjectRelease(v11);
      --v9;
    }

    while (v9);
    swift_bridgeObjectRelease(v8);
  }

  *(void *)&double result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

id sub_100258988()
{
  uint64_t v1 = v0;
  ObjectType  = swift_getObjectType(v0);
  uint64_t v2 = swift_isaMask & *(void *)v0;
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v5 = *(void *)(v2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v5 + 8),  v6,  &protocol requirements base descriptor for P2PControls);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = (int *)&v0[qword_10040D2C8];
  swift_beginAccess(v11, v59, 1LL, 0LL);
  if (notify_is_valid_token(*v11))
  {
    uint64_t v12 = notify_cancel(*v11);
    *uint64_t v11 = -1;
    if ((_DWORD)v12)
    {
      int v13 = v12;
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v15 = static os_log_type_t.error.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v51 = swift_slowAlloc(32LL, -1LL);
        v58[0]  = v51;
        os_log_t v50 = v14;
        unint64_t v16 = v52;
        *(_DWORD *)uint64_t v52 = 136315138;
        uint64_t v49 = v16 + 4;
        unint64_t v17 = static WiFiError.notifyErrorMessage(from:)(v13);
        unint64_t v19 = v18;
        uint64_t v54 = sub_10000235C(v17, v18, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
        swift_bridgeObjectRelease(v19);
        os_log_t v20 = v50;
        os_log_type_t v21 = v15;
        uint64_t v22 = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v21,  "Failed to cancel monitoring statistic reset events with error: %s",  v52,  0xCu);
        uint64_t v23 = v51;
        swift_arrayDestroy(v51, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

  if (v1[qword_100410A30] == 1)
  {
    uint64_t v24 = *(void *)&v1[qword_10040D290];
    swift_unownedRetainStrong(v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( v10,  v24 + *(void *)(*(void *)v24 + 96LL),  AssociatedTypeWitness);
    swift_release(v24);
    uint64_t v25 = &v1[qword_100410A28];
    swift_beginAccess(&v1[qword_100410A28], &v54, 0LL, 0LL);
    uint64_t v26 = *v25;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))( v26,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }

  uint64_t v28 = &v1[qword_100410A48];
  swift_beginAccess(&v1[qword_100410A48], v58, 0LL, 0LL);
  uint64_t v29 = *(void *)v28;
  uint64_t v31 = _s17ResponderInstanceCMa(0LL, v6, v5, v30);
  unint64_t v32 = sub_10017B5C8();
  uint64_t v33 = NANBitmap.Channel.operatingClass.getter(v29);
  uint64_t v57 = v33;
  __chkstk_darwin();
  *(&v49 - 2)  = v1;
  uint64_t v34 = type metadata accessor for Dictionary.Keys(0LL, &type metadata for NANPeerServiceIdentifier, v31, v32);
  swift_bridgeObjectRetain(v33);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v34);
  Sequence.forEach(_:)(sub_100262AFC, &v49 - 4, v34, WitnessTable);
  *(void *)&double v36 = swift_bridgeObjectRelease(v57).n128_u64[0];
  uint64_t v37 = qword_10040D2A8;
  uint64_t v38 = *(void **)&v1[qword_10040D2A8];
  if (v38)
  {
    objc_msgSend(v38, "publishTerminatedWithReason:", -1, v36);
    uint64_t v38 = *(void **)&v1[v37];
  }

  *(void *)&v1[v37]  = 0LL;
  swift_unknownObjectRelease(v38);
  sub_1000226B0((uint64_t)&v1[qword_10040D2C0], (uint64_t)v4, &qword_10040D480);
  uint64_t v39 = type metadata accessor for LongTermPairingKeys(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48LL))(v4, 1LL, v39) == 1)
  {
    sub_1000225EC((uint64_t)v4, &qword_10040D480);
  }

  else
  {
    LongTermPairingKeys.updatedPairedDevicesHandler.setter(0LL, 0LL);
    sub_10005802C((uint64_t)v4, type metadata accessor for LongTermPairingKeys);
  }

  uint64_t v40 = v1;
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = (uint8_t **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v43 = 138412290;
    uint64_t v57 = (uint64_t)v40;
    uint64_t v45 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
    *uint64_t v44 = v40;

    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Destroyed %@", v43, 0xCu);
    uint64_t v46 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v44, 1LL, v46);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {

    uint64_t v41 = (os_log_s *)v40;
  }

  uint64_t v47 = (objc_class *)ObjectType;

  v56.receiver  = v40;
  v56.super_class  = v47;
  return objc_msgSendSuper2(&v56, "dealloc");
}

unsigned __int8 *sub_100258F60(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + qword_10040D2A8);
  if (v2)
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(result + 3) << 24;
    uint64_t v4 = result[2];
    uint64_t v5 = result[1];
    uint64_t v6 = *result;
    sub_10022B448();
    swift_unknownObjectRetain(v2);
    id v7 = WiFiAwarePublisherDataSessionHandle.init(_:)(v3 | (v4 << 16) | (v5 << 8) | v6);
    [v2 publishDataTerminatedForHandle:v7 reason:-1];

    return (unsigned __int8 *)swift_unknownObjectRelease(v2);
  }

  return result;
}

id sub_10025900C(void *a1)
{
  id v1 = a1;
  return sub_100258988();
}

double sub_100259030(uint64_t a1)
{
  uint64_t v2 = a1 + qword_10040D298;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_release(*(void *)(a1 + qword_10040D2A0));
  swift_unknownObjectRelease(*(void *)(a1 + qword_10040D2A8));

  uint64_t v4 = a1 + qword_100410A38;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_release(*(void *)(a1 + qword_10040D2B8));
  sub_1000225EC(a1 + qword_10040D2C0, &qword_10040D480);
  swift_bridgeObjectRelease(*(void *)(a1 + qword_100410A40));
  *(void *)&double result = swift_bridgeObjectRelease(*(void *)(a1 + qword_100410A48)).n128_u64[0];
  return result;
}

void sub_100259138()
{
  id v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = type metadata accessor for NANPublish.Configuration(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v87 - v10;
  type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin();
  int v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  if ((*((_BYTE *)v1 + qword_100410A30) & 1) != 0) {
    return;
  }
  uint64_t v95 = (uint64_t)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v96 = v13;
  uint64_t v89 = v7;
  uint64_t v90 = v6;
  BOOL v91 = v11;
  uint64_t v92 = v9;
  uint64_t v93 = AssociatedTypeWitness;
  uint64_t v94 = v5;
  uint64_t v88 = qword_100410A30;
  uint64_t v15 = *(void *)((char *)v1 + qword_10040D290);
  swift_unownedRetainStrong(v15);
  uint64_t v16 = WiFiInterface.macAddress.getter();
  uint64_t v100 = v15;
  swift_release(v15);
  unint64_t v17 = (unsigned __int8 *)v1 + qword_100410A28;
  swift_beginAccess((char *)v1 + qword_100410A28, v109, 1LL, 0LL);
  *((_WORD *)v17 + 39)  = v16;
  v17[80]  = BYTE2(v16);
  v17[81]  = BYTE3(v16);
  v17[82]  = BYTE4(v16);
  v17[83]  = BYTE5(v16);
  unint64_t v18 = v17;
  uint64_t v97 = v1;
  unint64_t v19 = sub_100259AE4();
  uint64_t v20 = (*(uint64_t (**)(void *))(*v19 + 232LL))(v19);
  swift_release(v19);
  *((_WORD *)v18 + 42)  = v20;
  v18[86]  = BYTE2(v20);
  v18[87]  = BYTE3(v20);
  v18[88]  = BYTE4(v20);
  v18[89]  = BYTE5(v20);
  uint64_t v21 = *(void *)&v18[*(int *)(v3 + 84) + 16];
  uint64_t v22 = *(void *)(v21 + 16);
  char v101 = v18;
  uint64_t v102 = v22;
  if (!v22)
  {
LABEL_12:
    uint64_t v47 = v97;
    uint64_t v48 = v95;
    sub_1000226B0((uint64_t)v97 + qword_10040D2C0, v95, &qword_10040D480);
    uint64_t v49 = type metadata accessor for LongTermPairingKeys(0LL);
    int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48LL))(v48, 1LL, v49);
    uint64_t v51 = (uint64_t)v96;
    if (v50 == 1)
    {
      sub_1000225EC(v48, &qword_10040D480);
      uint64_t v52 = 0LL;
      unint64_t v53 = 0xF000000000000000LL;
      uint64_t v54 = v98;
      uint64_t v55 = v100;
    }

    else
    {
      sub_100057FE8((uint64_t)&v101[*(int *)(v3 + 92)], (uint64_t)v96, type metadata accessor for OWEKeys);
      uint64_t v55 = v100;
      swift_unownedRetainStrong(v100);
      uint64_t v56 = WiFiInterface.macAddress.getter();
      swift_release(v55);
      uint64_t v57 = v56 & 0xFFFFFFFFFFFFLL;
      uint64_t v58 = v48;
      uint64_t v52 = LongTermPairingKeys.authenticationToken(using:on:)(v51, v57);
      unint64_t v53 = v59;
      sub_10005802C(v51, type metadata accessor for OWEKeys);
      sub_10005802C(v58, type metadata accessor for LongTermPairingKeys);
      uint64_t v54 = v98;
    }

    id v60 = v101;
    swift_beginAccess(v101, &v106, 33LL, 0LL);
    v110  = *((void *)v60 + 3);
    swift_bridgeObjectRetain(v110);
    NANGenericServiceProtocol.publisherAuthenticationToken.setter(v52, v53);
    NANPublish.Configuration.serviceSpecificInfo.setter(v110);
    swift_endAccess(&v106);
    v60[77]  = sub_100259BF4();
    sub_100259D68();
    swift_unownedRetainStrong(v55);
    sub_1002E8C08();
    if (v54)
    {
      swift_release(v55);
      v110  = v54;
      swift_errorRetain(v54);
      uint64_t v66 = sub_100002274((uint64_t *)&unk_10040C5B0);
      if (v108 != 1)
      {
        sub_10007030C((uint64_t)v106, v107, v108);
        goto LABEL_25;
      }

      if (v106 != (id)7)
      {
LABEL_25:
        swift_errorRelease(v110);
        return;
      }

      swift_errorRelease(v54);
      swift_unownedRetainStrong(v55);
      char v67 = sub_1002E9E34();
      swift_release(v55);
      if ((v67 & 1) != 0)
      {
        swift_bridgeObjectRelease(0xE700000000000000LL);
      }

      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x64656C6261736964LL,  0xE800000000000000LL,  0x64656C62616E65LL,  0xE700000000000000LL,  0LL);
        swift_bridgeObjectRelease(0xE800000000000000LL);
        if ((v68 & 1) == 0)
        {
          unint64_t v69 = sub_1000033FC();
          uint64_t v70 = swift_allocError(&type metadata for WiFiError, v69, 0LL, 0LL);
          *(_OWORD *)uint64_t v71 = xmmword_100337000;
          *(_BYTE *)(v71 + 16)  = 1;
          swift_willThrow(v70);
          goto LABEL_25;
        }
      }

      id v72 = v47;
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v74 = static os_log_type_t.error.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        BOOL v104 = (void *)swift_slowAlloc(8LL, -1LL);
        v105  = v72;
        *(_DWORD *)uint64_t v75 = 138412290;
        id v76 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
        uint64_t v77 = v104;
        *BOOL v104 = v72;

        _os_log_impl((void *)&_mh_execute_header, v73, v74, "%@ faking start until NAN becomes available", v75, 0xCu);
        uint64_t v78 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v77, 1LL, v78);
        swift_slowDealloc(v77, -1LL, -1LL);
        swift_slowDealloc(v75, -1LL, -1LL);
      }

      else
      {
      }

      swift_errorRelease(v110);
      uint64_t v47 = v97;
    }

    else
    {
      swift_release(v55);
      swift_unownedRetainStrong(v55);
      uint64_t v61 = v91;
      uint64_t v62 = v92;
      uint64_t v63 = v93;
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v91, v55 + *(void *)(*(void *)v55 + 96LL), v93);
      swift_release(v55);
      uint64_t v64 = (uint64_t)v94;
      sub_100057FE8((uint64_t)v101, (uint64_t)v94, type metadata accessor for NANPublish.Configuration);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v90,  v89,  v63,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 192))( v64,  v63,  AssociatedConformanceWitness);
      sub_10005802C(v64, type metadata accessor for NANPublish.Configuration);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v63);
    }

    *((_BYTE *)v47 + v88)  = 1;
    uint64_t v79 = v47;
    v80  = (os_log_s *)Logger.logObject.getter(v79);
    os_log_type_t v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v104 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v82 = 138412290;
      id v106 = v79;
      uint64_t v83 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107);
      unint64_t v84 = v104;
      *BOOL v104 = v79;

      _os_log_impl((void *)&_mh_execute_header, v80, v81, "%@ was started", v82, 0xCu);
      uint64_t v85 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v84, 1LL, v85);
      swift_slowDealloc(v84, -1LL, -1LL);
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v86 = *(void **)&v79[qword_10040D2A8];
    if (v86) {
      [v86 publishStartedWithInstanceID:*v101];
    }
    return;
  }

  uint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
  uint64_t v25 = v101 + 16;
  uint64_t v99 = v3;
  while (v24 < *(void *)(v21 + 16))
  {
    uint64_t v26 = v21 + v23 * 8;
    uint64_t v27 = *(void *)(v21 + v23 * 8 + 80);
    if (v27)
    {
      uint64_t v28 = *(void **)(v26 + 72);
      uint64_t v29 = v100;
      uint64_t v30 = v101;
      uint64_t v31 = *((void *)v101 + 2);
      uint64_t v103 = *((void *)v101 + 1);
      BOOL v104 = v28;
      char v32 = *(_BYTE *)(v26 + 32);
      swift_unownedRetainStrong(v100);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v31);
      uint64_t v33 = WiFiInterface.macAddress.getter();
      swift_release(v29);
      char v34 = v32;
      uint64_t v3 = v99;
      uint64_t v35 = NANPassphrase.pmk(for:serviceName:publisherAddress:)( v34,  v103,  v31,  v33 & 0xFFFFFFFFFFFFLL,  (uint64_t)v104,  v27);
      uint64_t v37 = v36;
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v27);
      swift_beginAccess(v30, &v106, 33LL, 0LL);
      uint64_t v38 = *(int *)(v3 + 84);
      uint64_t v39 = *(void **)&v25[v38];
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v39);
      *(void *)&v25[v38]  = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v39 = sub_10032CC00(v39);
        *(void *)&v25[v38]  = v39;
      }

      if (v24 >= v39[2]) {
        goto LABEL_38;
      }
      uint64_t v41 = &v39[v23];
      uint64_t v42 = v39[v23 + 5];
      unint64_t v43 = v39[v23 + 6];
      v41[5]  = v35;
      v41[6]  = v37;
      sub_1000208D8(v42, v43);
      uint64_t v44 = *(void *)&v25[v38];
      if (v24 >= *(void *)(v44 + 16)) {
        goto LABEL_39;
      }
      uint64_t v45 = v44 + v23 * 8;
      uint64_t v46 = *(void *)(v45 + 80);
      *(void *)(v45 + 72)  = 0LL;
      *(void *)(v45 + 80)  = 0LL;
      uint64_t v21 = *(void *)&v25[v38];
      swift_endAccess(&v106);
      swift_bridgeObjectRelease(v46);
    }

    ++v24;
    v23 += 7LL;
    if (v102 == v24) {
      goto LABEL_12;
    }
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void *sub_100259AE4()
{
  uint64_t v1 = v0 + qword_100410A28;
  swift_beginAccess(v0 + qword_100410A28, v11, 0LL, 0LL);
  uint64_t v2 = type metadata accessor for NANPublish.Configuration(0LL);
  sub_1000226B0(v1 + *(int *)(v2 + 88), (uint64_t)v9, &qword_100409E58);
  unsigned __int8 v3 = v10;
  if (v10 == 255)
  {
    sub_1000225EC((uint64_t)v9, &qword_100409E58);
  }

  else
  {
    sub_10017B2A8((uint64_t)v9);
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = *(void **)(v0 + qword_10040D290);
      swift_unownedRetainStrong(v4);
      uint64_t v5 = 57LL;
      goto LABEL_7;
    }
  }

  int v6 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 84) + 2);
  uint64_t v4 = *(void **)(v0 + qword_10040D290);
  swift_unownedRetainStrong(v4);
  if (v6 != 2) {
    return v4;
  }
  uint64_t v5 = 56LL;
LABEL_7:
  uint64_t v7 = *(void *)((char *)v4 + *(void *)(*v4 + 8 * v5));
  swift_retain();
  swift_release(v4);
  if (!v7)
  {
    swift_unownedRetainStrong(v4);
    return v4;
  }

  return (void *)v7;
}

uint64_t sub_100259BF4()
{
  uint64_t v1 = v0 + qword_100410A28;
  swift_beginAccess(v0 + qword_100410A28, v7, 0LL, 0LL);
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 96)) == 1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain(v2);
    unsigned __int8 v3 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
    NANGenericServiceProtocol.packetData(for:)(*v3, v2);
    unint64_t v5 = v4;
    swift_bridgeObjectRelease(v2);
    if (v5 >> 60 != 15) {
      __asm { BR              X10 }
    }
  }

  return 2LL;
}

void sub_100259CB4()
{
  if (BYTE6(v1) > 0x63uLL)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    swift_bridgeObjectRetain(v3);
    unint64_t v4 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.standardizedAttributes.unsafeMutableAddressor();
    NANGenericServiceProtocol.packetData(for:)(*v4, v3);
    uint64_t v6 = v5;
    unint64_t v8 = v7;
    sub_100020B40(v2, v1);
    swift_bridgeObjectRelease(v3);
    sub_100020B40(v6, v8);
  }

  else
  {
    sub_100020B40(v2, v1);
  }

  JUMPOUT(0x100259C80LL);
}

uint64_t sub_100259D68()
{
  unint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v42 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v41 = (char *)&v38 - v6;
  __chkstk_darwin();
  uint64_t v40 = (uint64_t *)((char *)&v38 - v7);
  uint64_t v8 = *(void *)(v2 + 80);
  uint64_t v39 = *(void *)(v2 + 88);
  uint64_t v9 = *(void *)(v39 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v9,  v8,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v8,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v12 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v15 = type metadata accessor for Preferences(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  unint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v21 = *(void *)((char *)v1 + qword_10040D290);
  swift_unownedRetainStrong(v21);
  WiFiInterface.preferences.getter();
  swift_release(v21);
  LOBYTE(AssociatedConformanceWitness)  = Preferences.unsolicitedPublishOnUpdate.getter(v15);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t result = v22(v20, v15);
  if ((AssociatedConformanceWitness & 1) != 0)
  {
    unint64_t v24 = (char *)v1 + qword_100410A28;
    swift_beginAccess((char *)v1 + qword_100410A28, v43, 1LL, 0LL);
    uint64_t result = type metadata accessor for NANPublish.Configuration(0LL);
    if (v24[*(int *)(result + 108)] == 1)
    {
      v24[72]  = 0;
      uint64_t v25 = *(void *)((char *)v1 + qword_10040D2B8);
      *(void *)((char *)v1 + qword_10040D2B8)  = 0LL;
      swift_release(v25);
      swift_unownedRetainStrong(v21);
      WiFiInterface.preferences.getter();
      swift_release(v21);
      unsigned int v26 = Preferences.unsolicitedPublishSeconds.getter(v15);
      v22(v18, v15);
      uint64_t v27 = (uint64_t)v40;
      *uint64_t v40 = v26;
      uint64_t v28 = *(void (**)(uint64_t, void, uint64_t))(v4 + 104);
      v28(v27, enum case for DispatchTimeInterval.seconds(_:), v3);
      uint64_t v29 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      uint64_t v30 = swift_allocObject(&unk_1003F3ED0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v30 + 16, v1);
      uint64_t v31 = (void *)swift_allocObject(&unk_1003F3F70, 40LL, 7LL);
      uint64_t v32 = v39;
      v31[2]  = v8;
      v31[3]  = v32;
      v31[4]  = v30;
      uint64_t v33 = (uint64_t)v41;
      v28((uint64_t)v41, enum case for DispatchTimeInterval.never(_:), v3);
      uint64_t v34 = (uint64_t)v42;
      *uint64_t v42 = 100LL;
      v28(v34, enum case for DispatchTimeInterval.milliseconds(_:), v3);
      uint64_t v35 = type metadata accessor for P2PTimer(0LL);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      uint64_t v36 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( v27,  v29,  v33,  v34,  (uint64_t)sub_1002629AC,  (uint64_t)v31);
      uint64_t v37 = *(void *)((char *)v1 + qword_10040D2B8);
      *(void *)((char *)v1 + qword_10040D2B8)  = v36;
      return swift_release(v37);
    }
  }

  return result;
}

uint64_t sub_10025A110(uint64_t a1)
{
  ObjectType  = swift_getObjectType(v1);
  v378  = v1;
  uint64_t v3 = swift_isaMask & *v1;
  v361  = type metadata accessor for NANPublish.Configuration(0LL);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v347 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v360  = (uint64_t)&v347 - v6;
  uint64_t v8 = v3 + 80;
  uint64_t v7 = *(void *)(v3 + 80);
  v376  = *(void **)(v8 + 8);
  uint64_t v9 = v376[1];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  v7,  &protocol requirements base descriptor for P2PControls);
  v370  = *(void *)(AssociatedTypeWitness - 8);
  v371  = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v347 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v359  = (uint64_t)&v347 - v13;
  uint64_t v14 = type metadata accessor for DispatchTime(0LL);
  v373  = *(void *)(v14 - 8);
  v374  = (char *)v14;
  __chkstk_darwin();
  v364  = (unint64_t)&v347 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v372  = (unint64_t)&v347 - v16;
  uint64_t v17 = type metadata accessor for DispatchTimeInterval(0LL);
  v367  = *(void *)(v17 - 8);
  v368  = v17;
  __chkstk_darwin();
  v366  = (uint64_t)&v347 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v365  = (unint64_t)&v347 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness(255LL, v9, v7, &protocol requirements base descriptor for P2PControls);
  v375  = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v7,  v20,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v22 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  v20,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v23 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v20,  v22,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v25 = type metadata accessor for Preferences(0LL, v22, v23, v24);
  v357  = *(void *)(v25 - 8);
  v358  = v25;
  __chkstk_darwin();
  v356  = (unint64_t)&v347 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v355  = (unint64_t)&v347 - v27;
  type metadata accessor for NANDriverCapabilities(0LL);
  __chkstk_darwin();
  v354  = (uint64_t)&v347 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040D440);
  __chkstk_darwin();
  v363  = (unsigned __int8 *)&v347 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v362  = (unsigned __int8 *)&v347 - v30;
  uint64_t v31 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v33 = (char *)&v347 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v35 = (char *)&v347 - v34;
  __chkstk_darwin();
  uint64_t v37 = (char *)&v347 - v36;
  __chkstk_darwin();
  uint64_t v39 = (char *)&v347 - v38;
  __chkstk_darwin();
  uint64_t v41 = (char *)&v347 - v40;
  sub_100057FE8(a1, (uint64_t)&v347 - v40, v42);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(v41, v31);
  if (EnumCaseMultiPayload == 4)
  {
    v374  = v33;
    sub_100057FE8((uint64_t)v41, (uint64_t)v37, type metadata accessor for DriverEvent);
    if (*v37 == 1)
    {
      uint64_t v44 = qword_100410A30;
      uint64_t v45 = (uint64_t)v378;
      if (*((_BYTE *)v378 + qword_100410A30) != 1) {
        return sub_10005802C((uint64_t)v41, type metadata accessor for DriverEvent);
      }
      v377  = v41;
      uint64_t v46 = *(void *)((char *)v378 + qword_10040D290);
      swift_unownedRetainStrong(v46);
      sub_1002E8C08();
      v373  = v44;
      swift_release(v46);
      swift_unownedRetainStrong(v46);
      uint64_t v119 = v370;
      uint64_t v118 = v371;
      (*(void (**)(char *, uint64_t, uint64_t))(v370 + 16))( v12,  v46 + *(void *)(*(void *)v46 + 96LL),  v371);
      swift_release(v46);
      uint64_t v120 = v45 + qword_100410A28;
      swift_beginAccess(v45 + qword_100410A28, &v392, 0LL, 0LL);
      sub_100057FE8(v120, (uint64_t)v5, type metadata accessor for NANPublish.Configuration);
      v121  = swift_getAssociatedConformanceWitness( v376,  v375,  v118,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(char *, uint64_t, uint64_t))(v121 + 192))(v5, v118, v121);
      sub_10005802C((uint64_t)v5, type metadata accessor for NANPublish.Configuration);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v12, v118);
LABEL_23:
      uint64_t v41 = v377;
      return sub_10005802C((uint64_t)v41, type metadata accessor for DriverEvent);
    }

uint64_t sub_10025C988(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  unsigned __int8 v11 = BYTE2(a1);
  unint64_t v81 = HIDWORD(a1);
  uint64_t v82 = a3;
  unint64_t v79 = HIWORD(a1);
  v80  = a1 >> 40;
  unint64_t v77 = a1 >> 24;
  unint64_t v78 = HIBYTE(a1);
  type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v76 = *(void *)(v16 - 8);
  __chkstk_darwin();
  unint64_t v75 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a4 == 4LL || (NANServiceInfo.genericServiceProtocol.getter(a4, a5, a6), !v22))
  {
LABEL_9:
    uint64_t v31 = v82;
    uint64_t v41 = swift_bridgeObjectRetain_n(v82, 2LL);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v35 = 136315138;
      v86[0]  = v36;
      uint64_t v42 = WiFiAddress.description.getter((v78 << 40) | ((unint64_t)v79 << 32) | ((_DWORD)v80 << 24) | ((unint64_t)v81 << 16) | ((unint64_t)v77 << 8) | v11);
      unint64_t v44 = v43;
      uint64_t v83 = sub_10000235C(v42, v43, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      swift_bridgeObjectRelease_n(v31, 2LL);
      swift_bridgeObjectRelease(v44);
      uint64_t v40 = "Rejecting datapath request from %s because invalid service specific info was provided in the datapath request";
      goto LABEL_11;
    }

double sub_10025D2D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1;
  uint64_t v70 = a1 >> 8;
  unint64_t v73 = HIBYTE(a1);
  unint64_t v74 = HIWORD(a1);
  uint64_t v7 = (unsigned __int8 *)(v3 + qword_100410A28);
  swift_beginAccess(v7, v79, 0LL, 0LL);
  uint64_t v8 = *((void *)v7 + 2);
  swift_bridgeObjectRetain(v8);
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v9 = String.lowercased()();
  Swift::String v10 = String.lowercased()();
  if (v9._countAndFlagsBits == v10._countAndFlagsBits && v9._object == v10._object)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease_n(v9._object, 2LL);
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)( v9._countAndFlagsBits,  v9._object,  v10._countAndFlagsBits,  v10._object,  0LL);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9._object);
    swift_bridgeObjectRelease(v10._object);
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = BYTE2(v6);
      goto LABEL_10;
    }
  }

  uint64_t v13 = BYTE2(v6);
  uint64_t v14 = NANFollowUpReceivedEvent.serviceInfo.getter(v6, a2, a3);
  if (v14 != 4LL)
  {
    uint64_t v17 = v14;
    uint64_t v18 = v15;
    unint64_t v19 = v16;
    uint64_t v20 = NANServiceInfo.csaMatterPayload.getter(v14, v15, v16);
    unint64_t v22 = v21;
    sub_1001062E0(v17, v18, v19);
    if (v22 >> 60 != 15)
    {
      unint64_t v50 = *(void **)(v76 + qword_10040D2A8);
      if (v50)
      {
        swift_unknownObjectRetain(*(void *)(v76 + qword_10040D2A8));
        isa  = Data._bridgeToObjectiveC()().super.isa;
        id v52 = WiFiAddress.apiAddress.getter((v73 << 40) | ((unint64_t)v74 << 32) | ((v6 >> 40) << 24) | ((unint64_t)BYTE4(v6) << 16) | ((unint64_t)BYTE3(v6) << 8) | BYTE2(v6));
        [v50 publishReceivedMessage:isa fromSubscriberID:v70 subscriberAddress:v52];
        sub_100020B40(v20, v22);

        swift_unknownObjectRelease(v50);
      }

      else
      {
        sub_100020B40(v20, v22);
      }

      return result;
    }
  }

uint64_t sub_10025D938(uint64_t a1)
{
  uint64_t v3 = v1 + qword_100410A28;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_100262968(a1, v3, type metadata accessor for NANPublish.Configuration);
  return swift_endAccess(v5);
}

uint64_t sub_10025D998()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *(void *)v0) + 0x50LL);
  uint64_t v2 = *(void *)((swift_isaMask & *(void *)v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v48 - v6;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v16 = qword_100410A30;
  if (v1[qword_100410A30] == 1)
  {
    uint64_t v53 = v15;
    uint64_t v54 = result;
    uint64_t v55 = (char *)&v48 - v12;
    uint64_t v56 = v14;
    uint64_t v57 = v13;
    uint64_t v58 = v7;
    uint64_t v59 = v5;
    uint64_t v60 = v2;
    uint64_t v17 = &v1[qword_100410A38];
    uint64_t v18 = v1;
    id v52 = v17;
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(12LL, -1LL);
      os_log_t v50 = v19;
      unint64_t v22 = (uint8_t *)v21;
      char v49 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v51 = AssociatedTypeWitness;
      *(_DWORD *)unint64_t v22 = 138412290;
      uint64_t v61 = v18;
      uint64_t v23 = v18;
      uint64_t AssociatedTypeWitness = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
      uint64_t v24 = v49;
      *char v49 = v18;

      os_log_t v25 = v50;
      _os_log_impl((void *)&_mh_execute_header, v50, v20, "%@ will attempt to stop", v22, 0xCu);
      uint64_t v26 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v24, 1LL, v26);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
    }

    v1[v16]  = 0;
    uint64_t v27 = NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor();
    uint64_t v28 = v53;
    uint64_t v29 = v54;
    uint64_t v30 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v55, v27, v54);
    uint64_t v31 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v32 = swift_allocObject(&unk_1003F3ED0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v32 + 16, v18);
    uint64_t v33 = (void *)swift_allocObject(&unk_1003F3F48, 40LL, 7LL);
    uint64_t v34 = v60;
    v33[2]  = v3;
    v33[3]  = v34;
    v33[4]  = v32;
    uint64_t v35 = *(void (**)(uint64_t, void, uint64_t))(v28 + 104);
    uint64_t v36 = v56;
    v35(v56, enum case for DispatchTimeInterval.never(_:), v29);
    uint64_t v37 = (uint64_t)v57;
    void *v57 = 100LL;
    v35(v37, enum case for DispatchTimeInterval.milliseconds(_:), v29);
    uint64_t v38 = type metadata accessor for P2PTimer(0LL);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    uint64_t v39 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( v30,  v31,  v36,  v37,  (uint64_t)sub_10026295C,  (uint64_t)v33);
    uint64_t v40 = *(void *)&v18[qword_10040D2A0];
    *(void *)&v18[qword_10040D2A0]  = v39;
    swift_release(v40);
    uint64_t v41 = v3;
    uint64_t v42 = *(void *)&v18[qword_10040D290];
    swift_unownedRetainStrong(v42);
    sub_1002E8C08();
    swift_release(v42);
    uint64_t v43 = v58;
    uint64_t v44 = v59;
    swift_unownedRetainStrong(v42);
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))( v43,  v42 + *(void *)(*(void *)v42 + 96LL),  AssociatedTypeWitness);
    swift_release(v42);
    uint64_t v45 = &v18[qword_100410A28];
    swift_beginAccess(&v18[qword_100410A28], &v61, 0LL, 0LL);
    uint64_t v46 = *v45;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v60,  v41,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))( v46,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v43, AssociatedTypeWitness);
  }

  return result;
}

void *sub_10025DFE4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v20, 0LL, 0LL);
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = result;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v7 = 138412290;
      unint64_t v19 = v4;
      uint64_t v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20);
      *uint64_t v8 = v3;

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ timed out while waiting for terminate event", v7, 0xCu);
      uint64_t v10 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v8, 1LL, v10);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v11 = qword_10040D2A8;
    uint64_t v12 = *(void **)&v4[qword_10040D2A8];
    if (v12)
    {
      [v12 publishTerminatedWithReason:2];
      uint64_t v12 = *(void **)&v4[v11];
    }

    *(void *)&v4[v11]  = 0LL;
    swift_unknownObjectRelease(v12);
    uint64_t v13 = *(void *)&v4[qword_10040D290];
    uint64_t v14 = swift_unownedRetainStrong(v13);
    uint64_t v18 = sub_1002E8D68(v14, v15, v16, v17);
    swift_release(v13);
    sub_10027F264((uint64_t)v4);

    return (void *)swift_release(v18);
  }

  return result;
}

uint64_t sub_10025E1C8()
{
  id v1 = v0;
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v4 = 138412290;
    *(void *)&v9[0]  = v1;
    id v6 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, (char *)v9 + 8);
    *uint64_t v5 = v1;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Terminating %@ because it's client was invalidated", v4, 0xCu);
    uint64_t v7 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v5, 1LL, v7);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
  }

  memset(v9, 0, sizeof(v9));
  sub_1002570BC((uint64_t)v9);
  return sub_10025D998();
}

uint64_t sub_10025E338()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  os_log_type_t v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v5 = (void *)*v4;
  *os_log_type_t v3 = *v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = v5;
  LOBYTE(v5)  = _dispatchPreconditionTest(_:)(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  __break(1u);
  return result;
}

void sub_10025E3F0(void *a1)
{
  id v1 = a1;
  sub_10025E338();
}

void sub_10025E424(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  uint64_t v8 = swift_isaMask;
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (uint64_t *)&v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 7];
  uint64_t v13 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v14 = (void *)*v13;
  uint64_t *v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) != 0)
  {
    if (*((_BYTE *)v3 + qword_100410A30) == 1)
    {
      uint64_t v33 = a2;
      uint64_t v16 = v8 & v7;
      unint64_t v17 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      char v18 = v17;
      unint64_t v19 = v17 >> 8;
      unint64_t v20 = v17 >> 16;
      unint64_t v21 = v17 >> 24;
      unint64_t v22 = HIDWORD(v17);
      unint64_t v23 = v17 >> 40;
      unint64_t v24 = HIWORD(v17);
      os_log_t v25 = (void *)((char *)v4 + qword_100410A48);
      swift_beginAccess(v25, v36, 32LL, 0LL);
      uint64_t v26 = *v25;
      v34[0]  = v18;
      v34[1]  = v19;
      v34[2]  = v20;
      v34[3]  = v21;
      void v34[4] = v22;
      v34[5]  = v23;
      v34[6]  = v24;
      uint64_t v28 = _s17ResponderInstanceCMa(0LL, *(void *)(v16 + 80), *(void *)(v16 + 88), v27);
      sub_10017B5C8();
      Dictionary.subscript.getter(v34, v26, &type metadata for NANPeerServiceIdentifier, v28);
      uint64_t v29 = v35;
      if (v35)
      {
        swift_endAccess(v36);
        uint64_t v30 = &v29[qword_1004109D0];
        uint64_t v31 = *(void *)&v29[qword_1004109D0];
        uint64_t v32 = *(void *)&v29[qword_1004109D0 + 8];
        *(void *)uint64_t v30 = v33;
        *((void *)v30 + 1)  = a3;
        sub_100021018(v31, v32);
        swift_retain();
        sub_100226544();

        return;
      }

      swift_endAccess(v36);
      a2  = v33;
    }

    a2(3LL);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10025E618(void *a1, int a2, void *a3, void *a4)
{
  return sub_100260120( a1,  a2,  a3,  a4,  (uint64_t)&unk_1003F40B0,  (uint64_t)sub_100247460,  (void (*)(id, uint64_t, uint64_t))sub_10025E424);
}

uint64_t sub_10025E634( uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = v5;
  uint64_t v45 = a3;
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (void *)*v15;
  *uint64_t v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchPredicate.onQueue(_:),  v11);
  id v17 = v16;
  LOBYTE(v16)  = _dispatchPreconditionTest(_:)(v14);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return result;
  }

  if (*(_BYTE *)(v6 + qword_100410A30) != 1) {
    return a5(3LL);
  }
  unsigned int v43 = a4;
  uint64_t v44 = a5;
  unint64_t v19 = (unsigned __int8 *)(v6 + qword_100410A28);
  swift_beginAccess(v6 + qword_100410A28, v47, 0LL, 0LL);
  uint64_t v20 = *((void *)v19 + 2);
  swift_bridgeObjectRetain(v20);
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v21 = String.lowercased()();
  Swift::String v22 = String.lowercased()();
  if (v21._countAndFlagsBits == v22._countAndFlagsBits && v21._object == v22._object)
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease_n(v21._object, 2LL);
    goto LABEL_11;
  }

  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)( v21._countAndFlagsBits,  v21._object,  v22._countAndFlagsBits,  v22._object,  0LL);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21._object);
  swift_bridgeObjectRelease(v22._object);
  if ((v24 & 1) != 0)
  {
LABEL_11:
    int v27 = NANServiceInfo.init(csaMatterPayload:)();
    uint64_t v29 = v32;
    unint64_t v31 = v33;
    sub_100020AFC(a1, a2);
    goto LABEL_12;
  }

  rawValue  = NANGenericServiceProtocol.init()().attributes._rawValue;
  sub_100020AFC(a1, a2);
  NANGenericServiceProtocol.blob.setter(a1, a2);
  uint64_t v25 = (uint64_t)rawValue;
  uint64_t v26 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
  int v27 = NANServiceInfo.init(information:filter:)(v25, *v26);
  uint64_t v29 = v28;
  unint64_t v31 = v30;
LABEL_12:
  uint64_t v34 = *(void *)(v6 + qword_10040D290);
  uint64_t v35 = swift_unownedRetainStrong(v34);
  uint64_t v39 = sub_1002E8D68(v35, v36, v37, v38);
  swift_release(v34);
  uint64_t v40 = *(void *)(v39 + *(void *)(*(void *)v39 + 272LL));
  swift_retain();
  swift_release(v39);
  WiFiMACAddress.wifiAddress.getter();
  sub_1002A213C(v27, v29, v31, v41 & 0xFFFFFFFFFFFFLL, v43, *v19);
  swift_release(v40);
  v44(0LL);
  return sub_1000208D8(v29, v31);
}

void sub_10025E8EC(void *a1, int a2, void *a3, void *a4, unsigned int a5, void *aBlock)
{
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = a3;
  id v12 = a4;
  id v17 = a1;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v15 = v14;

  uint64_t v16 = swift_allocObject(&unk_1003F4088, 24LL, 7LL);
  *(void *)(v16 + 16)  = v10;
  sub_10025E634(v13, v15, (uint64_t)v12, a5, (uint64_t (*)(uint64_t))sub_100247460);
  swift_release(v16);
  sub_1000208D8(v13, v15);
}

uint64_t sub_10025E9C8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    rawValue  = WiFiAwarePublishDatapathServiceSpecificInfo.genericServiceProtocol.getter();
  }
  else {
    rawValue  = (unint64_t)NANGenericServiceProtocol.init()().attributes._rawValue;
  }
  unint64_t v4 = rawValue;
  uint64_t v5 = a1 + qword_100410A28;
  swift_beginAccess(a1 + qword_100410A28, v9, 1LL, 0LL);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for NANPublish.Configuration(0LL) + 84);
  uint64_t v7 = *(void *)(v6 + 8);
  *(void *)(v6 + 8)  = v4;
  swift_bridgeObjectRelease(v7);
  return sub_100259D68();
}

uint64_t sub_10025EA58(void *a1, int a2, void *a3, void *a4)
{
  return sub_10025EDEC( a1,  a2,  a3,  a4,  (uint64_t)&unk_1003F4060,  (uint64_t (*)(uint64_t))sub_100247460,  (os_log_s *)sub_100262AE4);
}

uint64_t sub_10025EA74(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  return sub_10025EA80(a1, a2, a3, (os_log_s *)sub_100262A14);
}

uint64_t sub_10025EA80(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, os_log_s *a4)
{
  ObjectType  = swift_getObjectType(v4);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  id v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v14 = (void *)*v13;
  uint64_t *v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)(v12);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) != 0)
  {
    if (*(_BYTE *)(v4 + qword_100410A30) == 1)
    {
      __chkstk_darwin();
      *(&v19 - 2)  = v4;
      *(&v19 - 1)  = a1;
      WitnessTable  = swift_getWitnessTable(&unk_10035E2A8, ObjectType);
      sub_1002A247C(a4, &v19 - 4, ObjectType, WitnessTable);
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v18 = 3LL;
    }

    return a2(v18);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10025EC10(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + qword_100410A28;
  swift_beginAccess(a1 + qword_100410A28, v22, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v23 = v4;
  if (!a2)
  {
    swift_bridgeObjectRetain(v4);
    NANGenericServiceProtocol.blob.setter(0LL, 0xF000000000000000LL);
    NANGenericServiceProtocol.textInfo.setter(0LL, 0xF000000000000000LL);
LABEL_12:
    uint64_t v18 = 0LL;
    goto LABEL_13;
  }

  swift_bridgeObjectRetain(v4);
  id v5 = [a2 blob];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v9 = 0xF000000000000000LL;
  }

  NANGenericServiceProtocol.blob.setter(v7, v9);
  id v10 = [a2 txtRecordData];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v14 = v13;
  }

  else
  {
    uint64_t v12 = 0LL;
    unint64_t v14 = 0xF000000000000000LL;
  }

  NANGenericServiceProtocol.textInfo.setter(v12, v14);
  id v15 = [a2 instanceName];
  if (!v15)
  {
    a2  = 0LL;
    goto LABEL_12;
  }

  uint64_t v16 = v15;
  a2  = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

LABEL_13:
  NANGenericServiceProtocol.instanceName.setter((uint64_t)a2, v18);
  uint64_t v19 = v23;
  swift_beginAccess(v3, v21, 33LL, 0LL);
  NANPublish.Configuration.serviceSpecificInfo.setter(v19);
  swift_endAccess(v21);
  *(_BYTE *)(v3 + 77)  = sub_100259BF4();
  return sub_100259D68();
}

uint64_t sub_10025EDD0(void *a1, int a2, void *a3, void *a4)
{
  return sub_10025EDEC(a1, a2, a3, a4, (uint64_t)&unk_1003F4038, sub_100246E80, (os_log_s *)sub_100262A14);
}

uint64_t sub_10025EDEC( void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t (*a6)(uint64_t), os_log_s *a7)
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v13 + 16)  = v12;
  id v14 = a3;
  id v15 = a1;
  sub_10025EA80((uint64_t)a3, a6, v13, a7);

  return swift_release(v13);
}

void sub_10025EE80(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)((swift_isaMask & *v2) + 0x58LL);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v54 = *(void *)((swift_isaMask & *v2) + 0x50LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  v54,  &protocol requirements base descriptor for P2PControls);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v10 = (char *)&v50 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  id v14 = (uint64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (void *)*v15;
  *id v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchPredicate.onQueue(_:),  v11);
  id v17 = v16;
  LOBYTE(v16)  = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) != 0)
  {
    uint64_t v51 = v10;
    uint64_t v52 = v8;
    uint64_t v50 = a1;
    uint64_t v53 = a2;
    unint64_t v18 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
    char v19 = v18;
    unint64_t v20 = v18 >> 8;
    unint64_t v21 = v18 >> 16;
    unint64_t v22 = v18 >> 24;
    unint64_t v23 = HIDWORD(v18);
    unint64_t v24 = v18 >> 40;
    uint64_t v25 = v5;
    unint64_t v26 = HIWORD(v18);
    int v27 = (uint64_t *)(v55 + qword_100410A48);
    swift_beginAccess(v55 + qword_100410A48, v58, 32LL, 0LL);
    uint64_t v28 = *v27;
    v56[0]  = v19;
    v56[1]  = v20;
    v56[2]  = v21;
    v56[3]  = v22;
    v56[4]  = v23;
    v56[5]  = v24;
    v56[6]  = v26;
    uint64_t v29 = v25;
    uint64_t v30 = v54;
    uint64_t v32 = _s17ResponderInstanceCMa(0LL, v54, v25, v31);
    sub_10017B5C8();
    Dictionary.subscript.getter(v56, v28, &type metadata for NANPeerServiceIdentifier, v32);
    unint64_t v33 = v57;
    if (v57)
    {
      swift_endAccess(v58);
      uint64_t v34 = v50;
      sub_100224CE0(v50);
      uint64_t v35 = *(void *)(v55 + qword_10040D290);
      uint64_t v36 = swift_unownedRetainStrong(v35);
      uint64_t v40 = sub_1002E8D68(v36, v37, v38, v39);
      swift_release(v35);
      sub_10027F278();
      swift_release(v40);
      uint64_t v41 = swift_unownedRetainStrong(v35);
      uint64_t v45 = sub_1002E8D68(v41, v42, v43, v44);
      swift_release(v35);
      sub_10027F2A0();
      swift_release(v45);
      swift_unownedRetainStrong(v35);
      unint64_t v47 = v51;
      uint64_t v46 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))( v51,  v35 + *(void *)(*(void *)v35 + 96LL),  AssociatedTypeWitness);
      swift_release(v35);
      uint64_t v48 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v29,  v30,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 312))( v34,  v48 & 0xFFFFFFFFFFFFFFLL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, AssociatedTypeWitness);
    }

    else
    {
      swift_endAccess(v58);
    }
  }

  else
  {
    __break(1u);
  }

void sub_10025F3B8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a1;
  sub_10025EE80(a3, (uint64_t)v6);
}

void sub_10025F414(void *a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v4 = (char *)v3;
  uint64_t v85 = a3;
  id v86 = a1;
  uint64_t v7 = *(void *)((swift_isaMask & *v3) + 0x50LL);
  uint64_t v6 = *(void *)((swift_isaMask & *v3) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v6 + 8),  v7,  &protocol requirements base descriptor for P2PControls);
  unint64_t v81 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v78 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v15 = (void *)*v14;
  uint64_t *v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchPredicate.onQueue(_:),  v10);
  id v16 = v15;
  LOBYTE(v15)  = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) != 0)
  {
    v80  = v9;
    unint64_t v79 = (void **)v14;
    uint64_t v84 = a2;
    unint64_t v17 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
    char v18 = v17;
    unint64_t v19 = v17 >> 8;
    unint64_t v20 = v17 >> 16;
    uint64_t v21 = v6;
    unint64_t v22 = v17 >> 24;
    unint64_t v23 = v4;
    unint64_t v24 = HIDWORD(v17);
    unint64_t v25 = v17 >> 40;
    unint64_t v26 = HIWORD(v17);
    uint64_t v83 = v23;
    int v27 = (uint64_t *)&v23[qword_100410A48];
    swift_beginAccess(&v23[qword_100410A48], &aBlock, 32LL, 0LL);
    uint64_t v28 = *v27;
    v93[0]  = v18;
    v93[1]  = v19;
    v93[2]  = v20;
    v93[3]  = v22;
    uint64_t v29 = v21;
    uint64_t v30 = v7;
    v93[4]  = v24;
    v93[5]  = v25;
    v93[6]  = v26;
    uint64_t v32 = _s17ResponderInstanceCMa(0LL, v7, v29, v31);
    sub_10017B5C8();
    Dictionary.subscript.getter(v93, v28, &type metadata for NANPeerServiceIdentifier, v32);
    id v33 = (id)v94;
    if (v94)
    {
      swift_endAccess(&aBlock);
      unint64_t v34 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      uint64_t v35 = v83;
      uint64_t v36 = *(void *)&v83[qword_10040D290];
      swift_unownedRetainStrong(v36);
      unint64_t v37 = v81;
      uint64_t v38 = v80;
      uint64_t v39 = AssociatedTypeWitness;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))( v80,  v36 + *(void *)(*(void *)v36 + 96LL),  AssociatedTypeWitness);
      swift_release(v36);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v29,  v30,  v39,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      uint64_t v50 = (void *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))( (v34 >> 8) & 0xFFFFFFFFFFFFLL,  v39,  AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
      uint64_t v51 = &v35[qword_100410A28];
      swift_beginAccess(&v35[qword_100410A28], v93, 0LL, 0LL);
      uint64_t v52 = type metadata accessor for NANPublish.Configuration(0LL);
      sub_1000226B0((uint64_t)&v51[*(int *)(v52 + 88)], (uint64_t)&aBlock, &qword_100409E58);
      if (v92 == 255)
      {
        sub_1000225EC((uint64_t)&aBlock, &qword_100409E58);
      }

      else if ((v92 & 1) != 0)
      {
        sub_1000589F8(&aBlock, (uint64_t)&v94);
        uint64_t v53 = v96;
        uint64_t v54 = v97;
        sub_100021104(&v94, v96);
        objc_msgSend( v50,  "setInfraRelayOperationStatus:",  (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 24))(v53, v54) & 1);
        sub_100002AC4(&v94);
      }

      else
      {
        sub_10017B2A8((uint64_t)&aBlock);
      }

      uint64_t v55 = *(void **)&v35[qword_10040D2B0];
      if (v55)
      {
        id v56 = v55;
        WiFiAwareDataSessionStatisticsReport.difference(from:)(v56);
      }

      else
      {
        *(void *)&v35[qword_10040D2B0]  = v50;
        uint64_t v57 = (int *)&v35[qword_10040D2C8];
        id v58 = v50;
        swift_beginAccess(v57, &v94, 0LL, 0LL);
        if (!notify_is_valid_token(*v57))
        {
          uint64_t AssociatedTypeWitness = HIWORD(v34);
          unint64_t v81 = v34 >> 40;
          v80  = (char *)HIDWORD(v34);
          id v86 = v33;
          uint64_t v59 = *v79;
          uint64_t v60 = v50;
          uint64_t v61 = swift_allocObject(&unk_1003F3ED0, 24LL, 7LL);
          swift_unknownObjectWeakInit(v61 + 16, v35);
          uint64_t v62 = swift_allocObject(&unk_1003F3FE8, 46LL, 7LL);
          *(void *)(v62 + 16)  = v30;
          *(void *)(v62 + 24)  = v29;
          *(void *)(v62 + 32)  = v61;
          *(_BYTE *)(v62 + 40)  = BYTE1(v34);
          *(_BYTE *)(v62 + 41)  = BYTE2(v34);
          *(_BYTE *)(v62 + 42)  = BYTE3(v34);
          *(_BYTE *)(v62 + 43)  = (_BYTE)v80;
          *(_BYTE *)(v62 + 44)  = v81;
          *(_BYTE *)(v62 + 45)  = AssociatedTypeWitness;
          unint64_t v91 = sub_100262AB4;
          uint64_t v92 = v62;
          *(void *)&aBlock  = _NSConcreteStackBlock;
          *((void *)&aBlock + 1)  = 1107296256LL;
          uint64_t v89 = sub_100130204;
          uint64_t v90 = &unk_1003F4000;
          int v63 = _Block_copy(&aBlock);
          uint64_t v64 = v92;
          uint64_t v65 = v59;
          id v33 = v86;
          uint64_t v66 = v65;
          swift_release(v64);
          swift_beginAccess(v57, &aBlock, 33LL, 0LL);
          uint32_t v67 = notify_register_dispatch("com.apple.airplay.isPlayingAmbientAudioChanged", v57, v66, v63);
          swift_endAccess(&aBlock);
          unint64_t v68 = v63;
          uint64_t v50 = v60;
          _Block_release(v68);

          if (v67)
          {
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.error.getter(v70);
            if (os_log_type_enabled(v70, v71))
            {
              uint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v73 = swift_slowAlloc(32LL, -1LL);
              *(void *)&aBlock  = v73;
              *(_DWORD *)uint64_t v72 = 136315138;
              unint64_t v74 = static WiFiError.notifyErrorMessage(from:)(v67);
              unint64_t v76 = v75;
              uint64_t v87 = sub_10000235C(v74, v75, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &aBlock);
              swift_bridgeObjectRelease(v76);
              _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "Failed to start monitoring statistic reset events with error: %s",  v72,  0xCu);
              swift_arrayDestroy(v73, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v73, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            uint64_t v50 = v60;
          }
        }
      }

      id v77 = v50;
      v84(0LL, v50);
    }

    else
    {
      swift_endAccess(&aBlock);
      id v41 = v86;
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v45 = swift_slowAlloc(32LL, -1LL);
        *(void *)&aBlock  = v45;
        *(_DWORD *)uint64_t v44 = 136315138;
        uint64_t v46 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
        uint64_t v47 = NANPeerServiceIdentifier.description.getter(v46 & 0xFFFFFFFFFFFFFFLL);
        unint64_t v49 = v48;
        uint64_t v94 = sub_10000235C(v47, v48, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);

        swift_bridgeObjectRelease(v49);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Unable to generate data session statistics for %s because the publish or datapath responder referenced doesn't exist",  v44,  0xCu);
        swift_arrayDestroy(v45, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      else
      {
      }

      v84(3LL, 0LL);
    }
  }

  else
  {
    __break(1u);
  }

void sub_10025FDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a5 + 8),  a4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v12 = v20 - v11 + 8;
  a2 += 16LL;
  swift_beginAccess(a2, v20, 0LL, 0LL);
  Strong  = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    id v14 = (char *)Strong;
    uint64_t v15 = *(void *)(Strong + qword_10040D290);
    swift_unownedRetainStrong(v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( v12,  v15 + *(void *)(*(void *)v15 + 96LL),  AssociatedTypeWitness);
    swift_release(v15);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a5,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))( a3 & 0xFFFFFFFFFFFFLL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    char v18 = *(void **)&v14[qword_10040D2B0];
    *(void *)&v14[qword_10040D2B0]  = v17;
  }

uint64_t sub_100260104(void *a1, int a2, void *a3, void *a4)
{
  return sub_100260120( a1,  a2,  a3,  a4,  (uint64_t)&unk_1003F3FC0,  (uint64_t)sub_100262A88,  (void (*)(id, uint64_t, uint64_t))sub_10025F414);
}

uint64_t sub_100260120( void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v13 + 16)  = v12;
  id v14 = a3;
  id v15 = a1;
  a7(v14, a6, v13);

  return swift_release(v13);
}

void sub_1002601B0(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = swift_isaMask;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11)  = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) != 0)
  {
    if (*((_BYTE *)v1 + qword_100410A30) == 1)
    {
      uint64_t v55 = a1;
      uint64_t v13 = v5 & v4;
      unint64_t v14 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      char v15 = v14;
      unint64_t v16 = v14 >> 8;
      unint64_t v17 = v14 >> 16;
      unint64_t v18 = v14 >> 24;
      unint64_t v19 = HIDWORD(v14);
      unint64_t v20 = v14 >> 40;
      unint64_t v21 = HIWORD(v14);
      unint64_t v22 = (void *)((char *)v2 + qword_100410A48);
      swift_beginAccess((char *)v2 + qword_100410A48, &v59, 32LL, 0LL);
      uint64_t v23 = *v22;
      v58[0]  = v15;
      v58[1]  = v16;
      v58[2]  = v17;
      v58[3]  = v18;
      v58[4]  = v19;
      v58[5]  = v20;
      v58[6]  = v21;
      uint64_t v25 = _s17ResponderInstanceCMa(0LL, *(void *)(v13 + 80), *(void *)(v13 + 88), v24);
      sub_10017B5C8();
      Dictionary.subscript.getter(v58, v23, &type metadata for NANPeerServiceIdentifier, v25);
      unint64_t v26 = v56;
      if (v56)
      {
        swift_endAccess(&v59);
        id v27 = v26;
        uint64_t v28 = v55;
        uint64_t v29 = (char *)v27;
        uint64_t v30 = v28;
        uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
        os_log_type_t v32 = static os_log_type_t.error.getter(v31);
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = swift_slowAlloc(22LL, -1LL);
          uint64_t v34 = swift_slowAlloc(16LL, -1LL);
          uint64_t v55 = v29;
          uint64_t v35 = (void *)v34;
          *(_DWORD *)uint64_t v33 = 138412546;
          uint64_t v59 = v55;
          uint64_t v36 = v55;
          uint64_t v54 = v31;
          unint64_t v37 = v30;
          uint64_t v38 = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
          *uint64_t v35 = v26;

          *(_WORD *)(v33 + 12)  = 2112;
          uint64_t v59 = v37;
          uint64_t v39 = v37;
          uint64_t v30 = v37;
          uint64_t v31 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
          v35[1]  = v30;

          _os_log_impl((void *)&_mh_execute_header, v31, v32, "%@ got an issue report %@", (uint8_t *)v33, 0x16u);
          uint64_t v40 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v35, 2LL, v40);
          id v41 = v35;
          uint64_t v29 = v55;
          swift_slowDealloc(v41, -1LL, -1LL);
          swift_slowDealloc(v33, -1LL, -1LL);
        }

        else
        {
        }

        uint64_t v42 = *(void *)((char *)v2 + qword_10040D290);
        swift_unownedRetainStrong(v42);
        os_log_type_t v43 = &v29[qword_10040C330];
        swift_beginAccess(&v29[qword_10040C330], &v59, 0LL, 0LL);
        id v56 = (void *)NANPeerServiceIdentifier.description.getter(*v43 | ((unint64_t)v43[8] << 8) | ((unint64_t)v43[9] << 16) | ((unint64_t)*(unsigned int *)(v43 + 10) << 24));
        uint64_t v57 = v44;
        v45._countAndFlagsBits  = 0x686374696C47203ALL;
        v45._object  = (void *)0xE900000000000020LL;
        String.append(_:)(v45);
        id v46 = [v30 rtpSequenceNumber];
        if (v46)
        {
          uint64_t v47 = v46;
          id v48 = [v46 description];

          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          uint64_t v51 = v50;
        }

        else
        {
          uint64_t v49 = 0LL;
          uint64_t v51 = (void *)0xE000000000000000LL;
        }

        v52._countAndFlagsBits  = v49;
        v52._object  = v51;
        String.append(_:)(v52);
        swift_bridgeObjectRelease(v51);
        uint64_t v53 = v57;
        sub_1002E9E88((uint64_t)v56, v57);

        swift_release(v42);
        swift_bridgeObjectRelease(v53);
      }

      else
      {
        swift_endAccess(&v59);
      }
    }
  }

  else
  {
    __break(1u);
  }

void sub_100260600(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_1002601B0(v6);
}

id sub_100260668(void *a1)
{
  id v1 = a1;
  sub_1002606BC();
  uint64_t v3 = v2;

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1002606BC()
{
  BYTE5(v11[1])  = 0;
  HIWORD(v11[1])  = -5120;
  uint64_t v1 = v0 + qword_100410A28;
  swift_beginAccess(v0 + qword_100410A28, v10, 0LL, 0LL);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object  = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits  = 8285LL;
  v4._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v5 = *(void **)(v1 + 16);
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits  = NANServiceName.description.getter(v6, v5);
  id v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v11[0];
}

void sub_1002607A0()
{
}

uint64_t _s8InstanceCMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&_s8InstanceCMn_0);
}

void sub_1002607C8(uint64_t a1)
{
  if (!qword_10040D3B0)
  {
    uint64_t v2 = type metadata accessor for LongTermPairingKeys(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10040D3B0);
    }
  }

void *sub_10026081C(uint64_t a1, uint64_t a2)
{
  return sub_100257F44(a1, a2);
}

void sub_100260834()
{
}

uint64_t sub_10026085C@<X0>(uint64_t a1@<X8>)
{
  return sub_100257148(a1);
}

uint64_t sub_10026087C()
{
  return sub_100182408(&qword_10040A000, (uint64_t)&protocol conformance descriptor for NANPublish.Configuration);
}

uint64_t sub_1002608A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035E270, a2);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_1002608CC()
{
  return sub_100182408(&qword_10040D408, (uint64_t)&protocol conformance descriptor for NANPublish.Configuration);
}

uint64_t sub_1002608F0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035E28C, a2);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_10026091C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100260940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  Strong  = (char *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    Swift::String v7 = Strong;
    if (Strong[qword_100410A30] == 1)
    {
      uint64_t v8 = *(void *)&Strong[qword_10040D2B8];
      *(void *)&v7[qword_10040D2B8]  = 0LL;
      swift_release(v8);
      __chkstk_darwin();
      v12[2]  = (uint64_t)v7;
      uint64_t v10 = _s8InstanceCMa_0(0LL, a2, a3, v9);
      WitnessTable  = swift_getWitnessTable(&unk_10035E2A8, v10);
      sub_1002A247C((os_log_s *)sub_1002629B8, v12, v10, WitnessTable);
    }

    else
    {
    }
  }

uint64_t sub_100260A58(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  v162  = a1;
  v163  = a2;
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  uint64_t v149 = (uint64_t)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v152  = (char *)&v138 - v5;
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v153 = *(void *)(v6 - 8);
  unint64_t v154 = (unsigned __int8 *)v6;
  __chkstk_darwin();
  unsigned int v158 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v159  = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  uint64_t v157 = *(void *)(v159 - 8);
  __chkstk_darwin();
  uint64_t v148 = (uint64_t)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v151  = (uint64_t)&v138 - v9;
  uint64_t v156 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  v150  = (uint64_t *)((char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  v155  = (uint64_t)&v138 - v11;
  type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  char v15 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v161 = (uint64_t)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  unint64_t v20 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for LongTermPairingKeys(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v160 = v3;
  sub_1000226B0(v3 + qword_10040D2C0, (uint64_t)v20, &qword_10040D480);
  sub_100022628((uint64_t)v20, (uint64_t)v24, type metadata accessor for LongTermPairingKeys);
  NANGenericServiceProtocol.publicKey.getter(v162, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    unint64_t v26 = v163;
    uint64_t v27 = sub_1000225EC((uint64_t)v15, (uint64_t *)&unk_10040D470);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      v167[0]  = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v32 = NANPeerServiceIdentifier.description.getter(v26 & 0xFFFFFFFFFFFFFFLL);
      unint64_t v34 = v33;
      v165  = sub_10000235C(v32, v33, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166);
      swift_bridgeObjectRelease(v34);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Failed to authenticate %s because missing public key in the authentication request",  v30,  0xCu);
      swift_arrayDestroy(v31, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    uint64_t v35 = (uint64_t)v24;
    return sub_10005802C(v35, type metadata accessor for LongTermPairingKeys);
  }

  unint64_t v36 = HIWORD(v163);
  unint64_t v37 = HIDWORD(v163);
  unsigned int v147 = v24;
  unint64_t v38 = v163 >> 24;
  uint64_t v139 = v17;
  uint64_t v39 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  v140  = v163 >> 16;
  v146  = v16;
  v39(v161, v15, v16);
  unint64_t v40 = v160;
  id v41 = (unsigned __int8 *)(v160 + qword_100410A28);
  swift_beginAccess(v160 + qword_100410A28, v167, 0LL, 0LL);
  uint64_t v42 = type metadata accessor for NANPublish.Configuration(0LL);
  sub_100057FE8((uint64_t)&v41[*(int *)(v42 + 92)], v13, type metadata accessor for OWEKeys);
  uint64_t v43 = *(void *)(v40 + qword_10040D290);
  swift_unownedRetainStrong(v43);
  uint64_t v44 = WiFiInterface.macAddress.getter();
  uint64_t v138 = v43;
  swift_release(v43);
  uint64_t v45 = *((void *)v41 + 3);
  uint64_t v145 = BYTE6(v163);
  v141  = BYTE5(v163);
  v144  = BYTE4(v163);
  unint64_t v46 = ((unint64_t)BYTE5(v163) << 32) & 0xFFFF00FF00FFFFFFLL | ((unint64_t)v36 << 40) | ((unint64_t)v37 << 24);
  __int16 v47 = v163;
  uint64_t v143 = BYTE3(v163);
  v142  = BYTE2(v163);
  unint64_t v48 = v46 & 0xFFFFFFFFFF0000FFLL | ((unint64_t)v38 << 16) | ((unint64_t)v140 << 8);
  uint64_t v49 = BYTE1(v163);
  unint64_t v50 = v48 & 0xFFFFFFFFFFFFFF00LL | BYTE1(v163);
  swift_bridgeObjectRetain(v45);
  uint64_t v51 = LongTermPairingKeys.authenticationResponse(forPeer:with:using:on:myServiceSpecificInfo:)( v50,  v162,  (void (*)(uint64_t, void, uint64_t, uint64_t))v13,  v44 & 0xFFFFFFFFFFFFLL,  v45);
  uint64_t v53 = v52;
  swift_bridgeObjectRelease(v45);
  uint64_t v54 = sub_10005802C(v13, type metadata accessor for OWEKeys);
  if (v51)
  {
    uint64_t v55 = (unsigned __int8 *)HIBYTE(v47);
    v162  = v51;
    swift_bridgeObjectRelease(v53);
    v152  = (char *)v42;
    sub_100057FE8((uint64_t)&v41[*(int *)(v42 + 92)], v13, type metadata accessor for OWEKeys);
    uint64_t v56 = OWEKeys.generatePMK(for:asClient:)(v161, 0);
    unint64_t v58 = v57;
    sub_10005802C(v13, type metadata accessor for OWEKeys);
    if (v58 >> 60 == 15)
    {
      swift_bridgeObjectRelease(v162);
      uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v63 = swift_slowAlloc(32LL, -1LL);
        v165  = v63;
        *(_DWORD *)uint64_t v62 = 136315138;
        uint64_t v64 = NANPeerServiceIdentifier.description.getter((v141 << 40) | (v145 << 48) | (v144 << 32) | (v143 << 24) | (v142 << 16) | (v49 << 8) | v163);
        unint64_t v66 = v65;
        v164  = sub_10000235C(v64, v65, &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
        swift_bridgeObjectRelease(v66);
        _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Failed to authenticate %s because PMK generation failed",  v62,  0xCu);
        swift_arrayDestroy(v63, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v63, -1LL, -1LL);
        swift_slowDealloc(v62, -1LL, -1LL);
      }

      goto LABEL_31;
    }

    uint64_t v76 = v155;
    uint64_t v77 = v156;
    *(void *)v155  = v56;
    *(void *)(v76 + 8)  = v58;
    swift_storeEnumTagMultiPayload(v76, v77, 2LL);
    uint64_t v78 = (uint64_t *)(v40 + qword_100410A40);
    swift_beginAccess(v40 + qword_100410A40, &v165, 33LL, 0LL);
    unint64_t v160 = v58;
    sub_100020AFC(v56, v58);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v78);
    v164  = *v78;
    v80  = v164;
    *uint64_t v78 = 0x8000000000000000LL;
    unint64_t v81 = (v141 << 40) | (v145 << 48) | (v144 << 32) | (v143 << 24) | (v142 << 16) | ((unint64_t)HIBYTE(v47) << 8) | v47;
    unint64_t v83 = sub_10001C08C(v81);
    uint64_t v84 = *(void *)(v80 + 16);
    BOOL v85 = (v82 & 1) == 0;
    uint64_t v86 = v84 + v85;
    if (__OFADD__(v84, v85))
    {
      __break(1u);
    }

    else
    {
      LOBYTE(v13)  = v82;
      uint64_t v55 = v41;
      if (*(void *)(v80 + 24) < v86)
      {
        sub_1002419F0(v86, isUniquelyReferenced_nonNull_native);
        v80  = v164;
        unint64_t v87 = sub_10001C08C(v81);
        if ((v13 & 1) != (v88 & 1))
        {
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANPeerServiceIdentifier);
          __break(1u);
          return result;
        }

        unint64_t v83 = v87;
        goto LABEL_23;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_23:
        uint64_t v104 = v153;
        uint64_t v103 = v154;
        uint64_t v153 = v56;
        unint64_t v154 = v55;
        v105  = *v78;
        *uint64_t v78 = v80;
        swift_bridgeObjectRelease(v105);
        unint64_t v106 = (void *)*v78;
        if ((v13 & 1) != 0)
        {
          swift_bridgeObjectRetain(v106);
          uint64_t v108 = v158;
          uint64_t v107 = v159;
        }

        else
        {
          unint64_t v109 = v83;
          v110  = (uint64_t)v150;
          swift_storeEnumTagMultiPayload(v150, v156, 3LL);
          uint64_t v111 = v148;
          sub_100057FE8(v110, v148, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          type metadata accessor for P2PTimer(0LL);
          swift_bridgeObjectRetain(v106);
          uint64_t v108 = v158;
          variable initialization expression of AWDLPeer.lastUpdated();
          uint64_t v112 = v110;
          unint64_t v83 = v109;
          sub_10005802C(v112, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          uint64_t v107 = v159;
          (*(void (**)(uint64_t, char *, unsigned __int8 *))(v104 + 32))( v111 + *(int *)(v159 + 20),  v108,  v103);
          uint64_t v113 = v151;
          sub_100022628(v111, v151, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          sub_100244DE4(v83, v81, v113, v106);
        }

        uint64_t v114 = v152;
        uint64_t v115 = v106[7];
        swift_bridgeObjectRelease(v106);
        uint64_t v116 = v115 + *(void *)(v157 + 72) * v83;
        uint64_t v117 = v155;
        sub_100262968(v155, v116, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        type metadata accessor for P2PTimer(0LL);
        variable initialization expression of AWDLPeer.lastUpdated();
        (*(void (**)(uint64_t, char *, unsigned __int8 *))(v104 + 40))(v116 + *(int *)(v107 + 20), v108, v103);
        sub_10005802C(v117, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        swift_endAccess(&v165);
        uint64_t v118 = v138;
        uint64_t v119 = swift_unownedRetainStrong(v138);
        uint64_t v123 = sub_1002E8D68(v119, v120, v121, v122);
        swift_release(v118);
        uint64_t v124 = *(void *)(v123 + *(void *)(*(void *)v123 + 272LL));
        swift_retain();
        swift_release(v123);
        uint64_t v125 = *((int *)v114 + 24);
        Swift::String v126 = v154;
        uint64_t v127 = Optional<A>.attributeFilter.getter(v154[v125]);
        int v128 = NANServiceInfo.init(information:filter:)(v162, v127);
        v130  = v129;
        unint64_t v132 = v131;
        sub_1002A213C(v128, v129, v131, v50, v163, *v126);
        sub_1000208D8(v130, v132);
        swift_release(v124);
        sub_100020B40(v153, v160);
        goto LABEL_31;
      }
    }

    sub_10032B2F8();
    v80  = v164;
    goto LABEL_23;
  }

  uint32_t v67 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v68 = static os_log_type_t.error.getter(v67);
  BOOL v69 = os_log_type_enabled(v67, v68);
  v155  = v49;
  if (v69)
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v71 = swift_slowAlloc(32LL, -1LL);
    v165  = v71;
    *(_DWORD *)uint64_t v70 = 136315138;
    uint64_t v72 = v155;
    uint64_t v73 = NANPeerServiceIdentifier.description.getter((v141 << 40) | (v145 << 48) | (v144 << 32) | (v143 << 24) | (v142 << 16) | (v155 << 8) | v163);
    unint64_t v75 = v74;
    v164  = sub_10000235C(v73, v74, &v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
    swift_bridgeObjectRelease(v75);
    _os_log_impl( (void *)&_mh_execute_header,  v67,  v68,  "Failed to authenticate %s because authentication response generation failed",  v70,  0xCu);
    swift_arrayDestroy(v71, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  else
  {
    uint64_t v72 = v49;
  }

  uint64_t v89 = v146;
  unint64_t v91 = v158;
  uint64_t v90 = v159;
  uint64_t v92 = (uint64_t)v152;
  uint64_t v93 = (uint64_t *)(v160 + qword_100410A40);
  __n128 v94 = swift_beginAccess(v160 + qword_100410A40, &v165, 32LL, 0LL);
  uint64_t v95 = *v93;
  if (*(void *)(*v93 + 16))
  {
    uint64_t v96 = (v141 << 40) | (v145 << 48) | (v144 << 32) | (v143 << 24) | (v142 << 16) | (v72 << 8);
    unsigned __int8 v97 = v163;
    unint64_t v98 = sub_10001C08C(v96 & 0xFFFFFFFFFFFFFF00LL | v163);
    if ((v99 & 1) != 0)
    {
      uint64_t v100 = *(void *)(v95 + 56);
      uint64_t v101 = v157;
      sub_100057FE8( v100 + *(void *)(v157 + 72) * v98,  v92,  type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
      v102(v92, 0LL, 1LL, v90);
    }

    else
    {
      uint64_t v101 = v157;
      uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
      v102(v92, 1LL, 1LL, v90);
    }
  }

  else
  {
    uint64_t v101 = v157;
    uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v102)(v92, 1LL, 1LL, v90, v94);
    unsigned __int8 v97 = v163;
  }

  swift_endAccess(&v165);
  v133  = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v92, 1LL, v90);
  sub_1000225EC(v92, (uint64_t *)&unk_10040F0F0);
  if (v133 != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v161, v89);
    goto LABEL_32;
  }

  v134  = (uint64_t)v150;
  uint64_t v135 = v162;
  void *v150 = v162;
  swift_storeEnumTagMultiPayload(v134, v156, 1LL);
  v136  = v151;
  sub_100057FE8(v134, v151, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
  type metadata accessor for P2PTimer(0LL);
  swift_bridgeObjectRetain(v135);
  variable initialization expression of AWDLPeer.lastUpdated();
  sub_10005802C(v134, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
  (*(void (**)(uint64_t, char *, unsigned __int8 *))(v153 + 32))(v136 + *(int *)(v90 + 20), v91, v154);
  v137  = v149;
  sub_100022628(v136, v149, type metadata accessor for NANPeer.Service.AuthenticationStatus);
  v102(v137, 0LL, 1LL, v90);
  swift_beginAccess(v93, &v165, 33LL, 0LL);
  sub_1002E9124(v137, (v141 << 40) | (v145 << 48) | (v144 << 32) | (v143 << 24) | (v142 << 16) | (v155 << 8) | v97);
  swift_endAccess(&v165);
LABEL_31:
  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v161, v146);
LABEL_32:
  uint64_t v35 = (uint64_t)v147;
  return sub_10005802C(v35, type metadata accessor for LongTermPairingKeys);
}

uint64_t sub_100261908(uint64_t a1)
{
  uint64_t result = NANGenericServiceProtocol.blob.getter(a1);
  if (v3 >> 60 != 15) {
    __asm { BR              X10 }
  }

  return result;
}

void sub_100261C5C( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = a2 + 16;
  swift_beginAccess(a2 + 16, v55, 0LL, 0LL);
  Strong  = (void *)swift_unknownObjectWeakLoadStrong(v15);
  if (Strong)
  {
    uint64_t v17 = Strong;
    uint64_t v49 = a3;
    id v18 = Strong;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_errorRetain(a1);
    uint64_t v19 = (char *)v18;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    uint64_t v20 = swift_errorRetain(a1);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v44 = a5;
      uint64_t v24 = swift_slowAlloc(42LL, -1LL);
      uint64_t v42 = (void *)swift_slowAlloc(16LL, -1LL);
      uint64_t v47 = swift_slowAlloc(64LL, -1LL);
      v54[0]  = v47;
      *(_DWORD *)uint64_t v24 = 138413058;
      unint64_t v46 = v21;
      uint64_t v43 = a1;
      int v45 = v23;
      id v50 = v19;
      uint64_t v48 = a8;
      uint64_t v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      unint64_t v26 = v42;
      *uint64_t v42 = v17;

      *(_WORD *)(v24 + 12)  = 2080;
      swift_bridgeObjectRetain(a4);
      id v50 = (id)sub_10000235C(v49, a4, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v24 + 22)  = 2080;
      swift_bridgeObjectRetain(a6);
      id v50 = (id)sub_10000235C(v44, a6, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      swift_bridgeObjectRelease_n(a6, 3LL);
      *(_WORD *)(v24 + 32)  = 2112;
      uint64_t v27 = v43;
      swift_errorRetain(v43);
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError(v43);
      id v50 = (id)v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      v26[1]  = v28;
      a8  = v48;
      swift_errorRelease(v27);
      uint64_t v29 = v27;
      swift_errorRelease(v27);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  (os_log_type_t)v45,  "%@ internet sharing from %s to %s failed because %@",  (uint8_t *)v24,  0x2Au);
      uint64_t v30 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v26, 2LL, v30);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_arrayDestroy(v47, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_bridgeObjectRelease_n(a4, 2LL);

      swift_errorRelease(a1);
      uint64_t v29 = a1;
      swift_errorRelease(a1);
    }

    uint64_t v31 = &v19[qword_100410A48];
    swift_beginAccess(&v19[qword_100410A48], v54, 0LL, 0LL);
    uint64_t v32 = *(void *)v31;
    uint64_t v34 = _s17ResponderInstanceCMa(0LL, a7, a8, v33);
    uint64_t v35 = a8;
    unint64_t v36 = sub_10017B5C8();
    uint64_t v37 = NANBitmap.Channel.operatingClass.getter(v32);
    id v50 = (id)v37;
    __chkstk_darwin(v37);
    v41[2]  = a7;
    v41[3]  = v35;
    uint64_t v38 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v34, v36);
    swift_bridgeObjectRetain(v37);
    WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v38);
    Sequence.forEach(_:)(sub_100262910, v41, v38, WitnessTable);
    swift_bridgeObjectRelease(v50);
    uint64_t v53 = v29;
    swift_errorRetain(v29);
    uint64_t v40 = sub_100002274((uint64_t *)&unk_10040C5B0);
    if (swift_dynamicCast(&v50, &v53, v40, &type metadata for WiFiError, 6LL))
    {
      if (v52 == 1)
      {
        if (v50 == (id)7) {
          sub_10025D998();
        }
      }

      else
      {
        sub_10007030C((uint64_t)v50, v51, v52);
      }
    }
  }

uint64_t sub_1002620F8()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10026212C(uint64_t a1)
{
}

uint64_t sub_100262140(__int16 a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = *(void *)(result + qword_10040D290);
    swift_unownedRetainStrong(v6);
    int v7 = NANInternetSharingStatistics.init(provider:)(a1 & 0x101);
    uint64_t v9 = v8;
    char v11 = v10;

    uint64_t v12 = v7 & 0x101FF;
    uint64_t v13 = v6 + *(void *)(*(void *)v6 + 680LL);
    swift_beginAccess(v13, &v15, 1LL, 0LL);
    uint64_t v14 = *(void *)(v13 + 8);
    *(void *)uint64_t v13 = v12;
    *(void *)(v13 + 8)  = v9;
    *(_BYTE *)(v13 + 16)  = v11 & 1;
    swift_release(v6);
    return swift_bridgeObjectRelease(v14);
  }

  return result;
}

uint64_t sub_100262214(__int16 a1)
{
  return sub_100262140(a1 & 0x101, *(void *)(v1 + 32));
}

void *sub_100262228(uint64_t a1)
{
  unint64_t v2 = (void *)a1;
  char v3 = *(_BYTE *)(a1 + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    uint64_t v8 = sub_100262378((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v6, (uint64_t)v2);
    if (v1) {
      swift_willThrow(v8);
    }
    else {
      return v8;
    }
  }

  else
  {
    uint64_t v9 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v9, v7);
    unint64_t v2 = sub_100262378((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return v2;
}

void *sub_100262378(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a2;
  unint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  __chkstk_darwin();
  uint64_t v55 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  __chkstk_darwin();
  char v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v51 = (char *)&v44 - v8;
  uint64_t v61 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  uint64_t v64 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_100002274(&qword_10040D488);
  __chkstk_darwin();
  uint64_t v59 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  os_log_type_t v68 = (char *)&v44 - v11;
  uint64_t v50 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0LL);
  uint64_t v58 = *(void *)(v50 - 8);
  __chkstk_darwin();
  uint64_t v67 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v47 = 0LL;
  uint64_t v48 = (void *)(a3 + 64);
  uint64_t v14 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v49 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) != 0)
  {
    uint64_t v65 = (v16 - 1) & v16;
    uint64_t v66 = 0LL;
    unint64_t v17 = __clz(__rbit64(v16));
    goto LABEL_18;
  }

  if (v49 > 1)
  {
    unint64_t v18 = v48[1];
    uint64_t v19 = 1LL;
    if (v18) {
      goto LABEL_17;
    }
    uint64_t v19 = 2LL;
    if (v49 <= 2) {
      return sub_1002F9464(v46, v45, v47, v62);
    }
    unint64_t v18 = v48[2];
    if (v18) {
      goto LABEL_17;
    }
    uint64_t v19 = 3LL;
    if (v49 <= 3) {
      return sub_1002F9464(v46, v45, v47, v62);
    }
    unint64_t v18 = v48[3];
    if (v18)
    {
LABEL_17:
      uint64_t v65 = (v18 - 1) & v18;
      uint64_t v66 = v19;
      unint64_t v17 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_18:
      uint64_t v21 = v62[7];
      os_log_type_t v22 = (char *)(v62[6] - v17 + 8 * v17);
      char v23 = *v22;
      char v24 = v22[1];
      char v25 = v22[2];
      char v26 = v22[3];
      char v27 = v22[4];
      char v28 = v22[5];
      char v29 = v22[6];
      uint64_t v30 = *(void *)(v58 + 72);
      unint64_t v63 = v17;
      uint64_t v31 = v67;
      sub_100057FE8(v21 + v30 * v17, v67, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v32 = v60;
      uint64_t v33 = *(int *)(v60 + 48);
      uint64_t v34 = v68;
      uint64_t v35 = (uint64_t)&v68[v33];
      *os_log_type_t v68 = v23;
      v34[1]  = v24;
      v34[2]  = v25;
      v34[3]  = v26;
      void v34[4] = v27;
      v34[5]  = v28;
      v34[6]  = v29;
      uint64_t v36 = v31;
      uint64_t v37 = (uint64_t)&v34[v33];
      sub_100057FE8(v36, v35, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v38 = *(int *)(v32 + 48);
      uint64_t v39 = v59;
      uint64_t v40 = (uint64_t)&v59[v38];
      *uint64_t v59 = v23;
      v39[1]  = v24;
      v39[2]  = v25;
      v39[3]  = v26;
      v39[4]  = v27;
      v39[5]  = v28;
      v39[6]  = v29;
      sub_100057FE8(v37, (uint64_t)&v39[v38], type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v41 = v64;
      sub_100057FE8(v40, v64, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      uint64_t v42 = (char *)&loc_100262810 + dword_1002628FC[swift_getEnumCaseMultiPayload(v41, v61)];
      __asm { BR              X9 }
    }

    uint64_t v20 = 4LL;
    if (v49 > 4)
    {
      unint64_t v18 = v48[4];
      if (v18)
      {
        uint64_t v19 = 4LL;
        goto LABEL_17;
      }

      while (1)
      {
        uint64_t v19 = v20 + 1;
        if (__OFADD__(v20, 1LL))
        {
          __break(1u);
          JUMPOUT(0x1002628FCLL);
        }

        if (v19 >= v49) {
          break;
        }
        unint64_t v18 = v48[v19];
        ++v20;
        if (v18) {
          goto LABEL_17;
        }
      }
    }
  }

  return sub_1002F9464(v46, v45, v47, v62);
}

void sub_100262910()
{
}

uint64_t sub_100262938()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void *sub_10026295C()
{
  return sub_10025DFE4(*(void *)(v0 + 32));
}

uint64_t sub_100262968(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24LL))(a2, a1, v5);
  return a2;
}

void sub_1002629AC()
{
}

uint64_t sub_1002629B8()
{
  uint64_t v1 = *(void *)(v0 + 16) + qword_100410A28;
  uint64_t result = swift_beginAccess(v1, v3, 1LL, 0LL);
  *(_BYTE *)(v1 + 72)  = 1;
  return result;
}

uint64_t sub_100262A14()
{
  return sub_10025EC10(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100262A2C()
{
}

void sub_100262A38()
{
}

uint64_t sub_100262A64()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100262A88(uint64_t a1, uint64_t a2)
{
  return sub_100270FEC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100262A90()
{
  return swift_deallocObject(v0, 46LL, 7LL);
}

void sub_100262AB4(uint64_t a1)
{
}

uint64_t sub_100262ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_100262ADC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100262AE4()
{
  return sub_10025E9C8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unsigned __int8 *sub_100262AFC(unsigned __int8 *a1)
{
  return sub_100258F60(a1, *(void *)(v1 + 16));
}

uint64_t sub_100262B30(uint64_t a1, uint64_t a2)
{
  char v3 = (void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8);
  *char v3 = a1;
  v3[1]  = a2;
  return sub_100021018(v4, v5);
}

id sub_100262B50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = &v3[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  *(void *)uint64_t v11 = NANBitmap.Channel.operatingClass.getter;
  *((void *)v11 + 1)  = 0LL;
  uint64_t v12 = &v3[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  *(void *)uint64_t v12 = 0LL;
  *((void *)v12 + 1)  = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher]  = 0LL;
  uint64_t v13 = v3;
  UUID.init()(v13);
  id v14 = [objc_allocWithZone(NSXPCConnection) init];
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection]  = v14;
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue]  = a3;
  id v15 = a3;
  Logger.init(subsystem:category:)(0xD000000000000012LL, 0x8000000100360620LL, 6516856LL, 0xE300000000000000LL);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))( &v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_logger],  v10,  v7);
  uint64_t v29 = 0x6470327069666977LL;
  unint64_t v30 = 0xE90000000000002ELL;
  v16._countAndFlagsBits  = a1;
  v16._object  = a2;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(a2);
  unint64_t v17 = v30;
  unint64_t v18 = (uint64_t *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName];
  *unint64_t v18 = v29;
  v18[1]  = v17;

  uint64_t v19 = (objc_class *)type metadata accessor for XPCSession(0LL);
  v28.receiver  = v13;
  v28.super_class  = v19;
  id v20 = objc_msgSendSuper2(&v28, "init");
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v24 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v23 = 138412290;
    uint64_t v29 = (uint64_t)v20;
    id v25 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    *char v24 = v20;

    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ was created", v23, 0xCu);
    uint64_t v26 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v24, 1LL, v26);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    id v15 = v20;
  }

  return v20;
}

id sub_100262E2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v10 = v1;
    uint64_t v6 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    *uint64_t v5 = v1;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ was destroyed", v4, 0xCu);
    uint64_t v7 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v5, 1LL, v7);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
  }

  [*(id *)&v1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] invalidate];
  uint64_t v8 = (objc_class *)type metadata accessor for XPCSession(0LL);
  v11.receiver  = v1;
  v11.super_class  = v8;
  return objc_msgSendSuper2(&v11, "dealloc");
}

uint64_t sub_1002630B4()
{
  return type metadata accessor for XPCSession(0LL);
}

uint64_t type metadata accessor for XPCSession(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_10040D4E8, (uint64_t)&nominal type descriptor for XPCSession);
}

void sub_1002630D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a1 += 16LL;
  swift_beginAccess(a1, v24, 0LL, 0LL);
  Strong  = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void (**)(void))(Strong + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    if (v8)
    {
      uint64_t v9 = *(void **)(Strong + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue);
      uint64_t v10 = *(void *)(Strong + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8);
      *uint64_t v5 = v9;
      (*(void (**)(void *, void, uint64_t))(v3 + 104))( v5,  enum case for DispatchPredicate.onQueue(_:),  v2);
      sub_10002254C((uint64_t)v8, v10);
      id v11 = v9;
      LOBYTE(v9)  = _dispatchPreconditionTest(_:)(v5);
      (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
      if ((v9 & 1) == 0)
      {
        __break(1u);
        return;
      }

      id v12 = v7;
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.error.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v16 = swift_slowAlloc(8LL, -1LL);
        uint64_t v22 = v10;
        id v23 = v12;
        unint64_t v17 = (void *)v16;
        *(_DWORD *)id v15 = 138412290;
        id v18 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24);
        *unint64_t v17 = v7;

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "%@ was invalidated", v15, 0xCu);
        uint64_t v19 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v17, 1LL, v19);
        id v20 = v17;
        uint64_t v10 = v22;
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      else
      {
      }

      v8();
      sub_100021018((uint64_t)v8, v10);
    }
  }

uint64_t sub_10026331C(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection);
  sub_100089C80(a1, (uint64_t)v11);
  uint64_t v4 = v12;
  if (v12)
  {
    uint64_t v5 = sub_100021104(v11, v12);
    uint64_t v6 = *(void *)(v4 - 8);
    __chkstk_darwin(v5);
    uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v6 + 16))(v8);
    uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)(v8, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100002AC4(v11);
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  [v3 setExportedObject:v9];
  swift_unknownObjectRelease(v9);
  return sub_1000B2F2C(a1);
}

uint64_t sub_10026341C()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  return swift_unknownObjectRelease(v1);
}

uint64_t sub_1002634D4()
{
  *(void *)&double v1 = swift_bridgeObjectRelease(0xE000000000000000LL).n128_u64[0];
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName);
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName + 8);
  }

  else
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection), "processIdentifier", v1);
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    uint64_t v4 = v5;
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRetain(v2);
  v6._countAndFlagsBits  = v3;
  v6._object  = v4;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v4);
  v7._countAndFlagsBits  = 32LL;
  v7._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  unint64_t v9 = sub_100265478();
  v10._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
  object  = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits  = 93LL;
  v12._object  = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return 0x6973736553435058LL;
}

uint64_t sub_100263648(uint64_t a1)
{
  v5[0]  = (char *)&value witness table for () + 64;
  v5[1]  = &unk_10035E300;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[2]  = *(void *)(result - 8) + 64LL;
    v5[3]  = &unk_10035E318;
    v5[4]  = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[5]  = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[6]  = &unk_10035E300;
    uint64_t result = type metadata accessor for UUID(319LL);
    if (v4 <= 0x3F)
    {
      v5[7]  = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100263704()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin();
  Swift::String v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = *v0;
  Swift::String v7 = v15;
  os_log_type_t v14 = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for Mirror.AncestorRepresentation.generated(_:),  v1);
  uint64_t v9 = type metadata accessor for XPCSession(0LL);
  id v10 = v7;
  uint64_t v11 = sub_100002274(&qword_100405DC0);
  unint64_t v12 = sub_10005CFF4();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v6, v4, v9, v11, v12);
}

uint64_t sub_10026384C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = __chkstk_darwin();
  id v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[0]  = a1;
  v19[1]  = a2;
  v19[3]  = 0LL;
  v19[4]  = 0LL;
  v19[2]  = a3;
  char v20 = 0;
  static DispatchWorkItemFlags.assignCurrentContext.getter(v8);
  aBlock[4]  = NANBitmap.Channel.operatingClass.getter;
  aBlock[5]  = 0LL;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F4680;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = DispatchWorkItem.init(flags:block:)(v10, v11);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher);
  *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher)  = v13;
  swift_release(v14);
  uint64_t v16 = *(void (**)(void *, uint64_t))(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  uint64_t v15 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
  swift_retain();
  v16(v19, v4);
  return swift_release(v15);
}

uint64_t sub_1002639C4(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v15 + 16)  = v14;
  id v16 = a3;
  id v17 = a1;
  sub_1002643E8((uint64_t)v16, a6, v15, a7, a8);

  return swift_release(v15);
}

uint64_t sub_100263AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = __chkstk_darwin();
  id v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[0]  = a1;
  v19[1]  = a2;
  v19[3]  = 0LL;
  v19[4]  = 0LL;
  v19[2]  = a3;
  char v20 = 4;
  if ((a1 | 4) != 4)
  {
    static DispatchWorkItemFlags.assignCurrentContext.getter(v8);
    aBlock[4]  = NANBitmap.Channel.operatingClass.getter;
    aBlock[5]  = 0LL;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = sub_1000021F0;
    aBlock[3]  = &unk_1003F4540;
    uint64_t v11 = _Block_copy(aBlock);
    uint64_t v12 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v13 = DispatchWorkItem.init(flags:block:)(v10, v11);
    uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher);
    *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher)  = v13;
    swift_release(v14);
  }

  id v16 = *(void (**)(void *, uint64_t))(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  uint64_t v15 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
  swift_retain();
  v16(v19, v4);
  return swift_release(v15);
}

uint64_t sub_100263D50(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_allocObject(a4, 24LL, 7LL);
  *(void *)(v13 + 16)  = v12;
  id v14 = a1;
  sub_10026456C(a5, v13, a6, a7);

  return swift_release(v13);
}

uint64_t sub_100263DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin();
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  WiFiMACAddress.wifiAddress.getter();
  v18[0]  = v9 & 0xFFFFFFFFFFFFLL;
  v18[1]  = a2;
  v18[3]  = 0LL;
  v18[4]  = 0LL;
  v18[2]  = a3;
  char v19 = 7;
  static DispatchWorkItemFlags.assignCurrentContext.getter(v9);
  aBlock[4]  = NANBitmap.Channel.operatingClass.getter;
  aBlock[5]  = 0LL;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F4478;
  id v10 = _Block_copy(aBlock);
  uint64_t v11 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = DispatchWorkItem.init(flags:block:)(v8, v10);
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher);
  *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher)  = v12;
  swift_release(v13);
  uint64_t v15 = *(void (**)(void *, uint64_t))(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
  swift_retain();
  v15(v18, v4);
  return swift_release(v14);
}

void sub_100263F5C(uint64_t a1, uint64_t a2)
{
  isa  = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_100263FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(a1);
    if (v10) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease(a1);
    uint64_t v13 = _swiftEmptyArrayStorage;
LABEL_27:
    v37[0]  = v13;
    v37[1]  = a2;
    v37[3]  = 0LL;
    v37[4]  = 0LL;
    v37[2]  = a3;
    char v38 = 14;
    uint64_t v27 = swift_retain();
    static DispatchWorkItemFlags.assignCurrentContext.getter(v27);
    aBlock[4]  = NANBitmap.Channel.operatingClass.getter;
    aBlock[5]  = 0LL;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = 1107296256LL;
    aBlock[2]  = sub_1000021F0;
    aBlock[3]  = &unk_1003F4338;
    objc_super v28 = _Block_copy(aBlock);
    uint64_t v29 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    uint64_t v30 = DispatchWorkItem.init(flags:block:)(v9, v28);
    uint64_t v31 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher);
    *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher)  = v30;
    swift_release(v31);
    uint64_t v32 = *(void (**)(void *, uint64_t))(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
    uint64_t v33 = *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
    swift_retain();
    v32(v37, v4);
    swift_release(a3);
    swift_bridgeObjectRelease(v13);
    return swift_release(v33);
  }

  if (a1 < 0) {
    uint64_t v26 = a1;
  }
  else {
    uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v26);
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_26;
  }
LABEL_3:
  if (v10 >= 1)
  {
    uint64_t v34 = a2;
    uint64_t v35 = a3;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a1);
        unint64_t v16 = Channel.init(apiChannel:)(v15);
        if ((v16 & 0xFF00000000LL) != 0x300000000LL)
        {
          unint64_t v17 = v16;
          if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
            uint64_t v13 = sub_1000A65E8(0LL, v13[2] + 1LL, 1, v13);
          }
          unint64_t v19 = v13[2];
          unint64_t v18 = v13[3];
          if (v19 >= v18 >> 1) {
            uint64_t v13 = sub_1000A65E8((void *)(v18 > 1), v19 + 1, 1, v13);
          }
          v13[2]  = v19 + 1;
          uint64_t v14 = &v13[v19];
          *((_DWORD *)v14 + 8)  = v17;
          *((_BYTE *)v14 + 36)  = BYTE4(v17);
          *((_BYTE *)v14 + 37)  = BYTE5(v17);
        }

        ++v12;
      }

      while (v10 != v12);
    }

    else
    {
      uint64_t v20 = 0LL;
      uint64_t v13 = _swiftEmptyArrayStorage;
      do
      {
        unint64_t v22 = Channel.init(apiChannel:)(*(id *)(a1 + 8 * v20 + 32));
        if ((v22 & 0xFF00000000LL) != 0x300000000LL)
        {
          unint64_t v23 = v22;
          if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
            uint64_t v13 = sub_1000A65E8(0LL, v13[2] + 1LL, 1, v13);
          }
          unint64_t v25 = v13[2];
          unint64_t v24 = v13[3];
          if (v25 >= v24 >> 1) {
            uint64_t v13 = sub_1000A65E8((void *)(v24 > 1), v25 + 1, 1, v13);
          }
          v13[2]  = v25 + 1;
          uint64_t v21 = &v13[v25];
          *((_DWORD *)v21 + 8)  = v23;
          *((_BYTE *)v21 + 36)  = BYTE4(v23);
          *((_BYTE *)v21 + 37)  = BYTE5(v23);
        }

        ++v20;
      }

      while (v10 != v20);
    }

    swift_bridgeObjectRelease(a1);
    a2  = v34;
    a3  = v35;
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

uint64_t sub_1002643E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8 = v5;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[0]  = a1;
  v23[1]  = a2;
  v23[3]  = 0LL;
  v23[4]  = 0LL;
  v23[2]  = a3;
  char v24 = a4;
  static DispatchWorkItemFlags.assignCurrentContext.getter(v12);
  aBlock[4]  = NANBitmap.Channel.operatingClass.getter;
  aBlock[5]  = 0LL;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = a5;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = DispatchWorkItem.init(flags:block:)(v14, v15);
  uint64_t v18 = *(void *)(v8 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher);
  *(void *)(v8 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher)  = v17;
  swift_release(v18);
  uint64_t v20 = *(void (**)(void *, uint64_t))(v8 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  uint64_t v19 = *(void *)(v8 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
  swift_retain();
  v20(v23, v8);
  return swift_release(v19);
}

uint64_t sub_10026456C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = v4;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[0]  = a1;
  v21[1]  = a2;
  memset(&v21[2], 0, 24);
  char v22 = a3;
  static DispatchWorkItemFlags.assignCurrentContext.getter(v10);
  aBlock[4]  = NANBitmap.Channel.operatingClass.getter;
  aBlock[5]  = 0LL;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = a4;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = DispatchWorkItem.init(flags:block:)(v12, v13);
  uint64_t v16 = *(void *)(v7 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher);
  *(void *)(v7 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher)  = v15;
  swift_release(v16);
  uint64_t v18 = *(void (**)(void *, uint64_t))(v7 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  uint64_t v17 = *(void *)(v7 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
  swift_retain();
  v18(v21, v7);
  return swift_release(v17);
}

void sub_1002646C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  isa  = Array._bridgeToObjectiveC()().super.isa;
  sub_100058CD0(0LL, (unint64_t *)&unk_10040D590, &OBJC_CLASS___NSNumber_ptr);
  Class v5 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, Class))(a3 + 16))(a3, isa, v5);
}

uint64_t sub_100264748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[0]  = a1;
  v23[1]  = a2;
  v23[2]  = a3;
  v23[3]  = a4;
  v23[4]  = a5;
  char v24 = 15;
  static DispatchWorkItemFlags.assignCurrentContext.getter(v12);
  aBlock[4]  = NANBitmap.Channel.operatingClass.getter;
  aBlock[5]  = 0LL;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256LL;
  aBlock[2]  = sub_1000021F0;
  aBlock[3]  = &unk_1003F41F8;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = DispatchWorkItem.init(flags:block:)(v14, v15);
  uint64_t v18 = *(void *)(v6 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher);
  *(void *)(v6 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher)  = v17;
  swift_release(v18);
  uint64_t v20 = *(void (**)(void *, uint64_t))(v6 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  uint64_t v19 = *(void *)(v6 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler + 8);
  swift_retain();
  v20(v23, v6);
  return swift_release(v19);
}

uint64_t sub_10026494C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t *v1 = 0LL;
  v1[1]  = 0LL;
  sub_100021018(v2, v3);
  memset(v5, 0, sizeof(v5));
  return sub_10026331C((uint64_t)v5);
}

id sub_1002649CC()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for XPCResponder(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100264A50()
{
  return type metadata accessor for XPCResponder(0LL);
}

uint64_t type metadata accessor for XPCResponder(uint64_t a1)
{
  return sub_100020E48(a1, (uint64_t *)&unk_10040D580, (uint64_t)&nominal type descriptor for XPCResponder);
}

uint64_t sub_100264A6C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *sub_100264AE4(void *result, void *a2, void *a3, uint64_t a4, void *a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 11:
      id v8 = result;
      goto LABEL_3;
    case 3:
    case 6:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_4;
    case 4:
    case 7:
LABEL_3:
      a2  = a3;
      goto LABEL_4;
    case 14:
      swift_bridgeObjectRetain(result);
      a2  = a3;
      goto LABEL_4;
    case 15:
      swift_bridgeObjectRetain(result);
      id v10 = a2;
      a2  = a5;
LABEL_4:
      uint64_t result = (void *)swift_retain(a2);
      break;
    default:
      return result;
  }

  return result;
}

void *destroy for XPCSession.Request(uint64_t a1)
{
  return sub_100264B7C( *(void **)a1,  *(void **)(a1 + 8),  *(void **)(a1 + 16),  *(void *)(a1 + 24),  *(void **)(a1 + 32),  *(_BYTE *)(a1 + 40));
}

void *sub_100264B7C(void *result, void *a2, void *a3, uint64_t a4, void *a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 11:

      goto LABEL_3;
    case 3:
    case 6:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_4;
    case 4:
    case 7:
LABEL_3:
      a2  = a3;
      goto LABEL_4;
    case 14:
      swift_bridgeObjectRelease(result);
      a2  = a3;
      goto LABEL_4;
    case 15:
      swift_bridgeObjectRelease(result);

      a2  = a5;
LABEL_4:
      uint64_t result = (void *)swift_release(a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for XPCSession.Request(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 40);
  sub_100264AE4(*(void **)a2, v4, v5, v6, v7, v8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(_BYTE *)(a1 + 40)  = v8;
  return a1;
}

uint64_t assignWithCopy for XPCSession.Request(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 40);
  sub_100264AE4(*(void **)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void **)a1;
  id v10 = *(void **)(a1 + 8);
  uint64_t v11 = *(void **)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void **)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  char v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40)  = v8;
  sub_100264B7C(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for XPCSession.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void **)(a1 + 32);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(void *)(a1 + 32)  = v3;
  char v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40)  = v4;
  sub_100264B7C(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCSession.Request(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF1 && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 241);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 0xF) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCSession.Request(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_BYTE *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 - 241;
    if (a3 >= 0xF1) {
      *(_BYTE *)(result + 41)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xF1) {
      *(_BYTE *)(result + 41)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40)  = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100264DE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_100264DE8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for XPCSession.Request()
{
  return &type metadata for XPCSession.Request;
}

uint64_t sub_100264E04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_logger;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

char *sub_100264E4C(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session]  = a1;
  uint64_t v7 = &v3[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_logger];
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  __int128 v10 = (objc_class *)type metadata accessor for XPCResponder(0LL);
  v28.receiver  = v3;
  v28.super_class  = v10;
  id v11 = a1;
  uint64_t v12 = (char *)objc_msgSendSuper2(&v28, "init");
  uint64_t v13 = OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session;
  char v14 = *(void **)&v12[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
  uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  uint64_t v16 = v12;
  uint64_t v17 = v14;
  id v18 = [v15 interfaceWithProtocol:a3];
  [*(id *)&v17[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setExportedInterface:v18];

  uint64_t v19 = *(void *)&v12[v13];
  uint64_t v20 = swift_allocObject(&unk_1003F46B8, 24LL, 7LL);
  *(void *)(v20 + 16)  = v16;
  uint64_t v21 = (uint64_t (**)())(v19 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v22 = *(void *)(v19 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v23 = (uint64_t)v21[1];
  *uint64_t v21 = sub_1002654E4;
  v21[1]  = (uint64_t (*)())v20;
  char v24 = v16;
  sub_100021018(v22, v23);
  v27[3]  = v10;
  v27[0]  = v24;
  unint64_t v25 = v24;
  sub_10026331C((uint64_t)v27);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  return v25;
}

void **sub_100264FEC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = &v5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  *(void *)id v11 = NANBitmap.Channel.operatingClass.getter;
  *((void *)v11 + 1)  = 0LL;
  uint64_t v12 = &v5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  *(void *)uint64_t v12 = 0LL;
  *((void *)v12 + 1)  = 0LL;
  *(void *)&v5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher]  = 0LL;
  uint64_t v13 = v5;
  UUID.init()(v13);
  char v14 = &unk_10040D000;
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection]  = a1;
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue]  = a2;
  uint64_t v15 = &v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_logger];
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a3, v16);
  id v18 = &v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName];
  *(void *)id v18 = a4;
  *((void *)v18 + 1)  = a5;
  id v19 = a1;
  id v20 = a2;

  v41.receiver  = v13;
  v41.super_class  = (Class)type metadata accessor for XPCSession(0LL);
  uint64_t v21 = (void **)objc_msgSendSuper2(&v41, "init");
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v37 = a3;
    char v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v25 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v24 = 138412290;
    aBlock  = v21;
    uint64_t v26 = v21;
    char v14 = (void *)&unk_10040D000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v39);
    *unint64_t v25 = v21;

    a3  = v37;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%@ was created", v24, 0xCu);
    uint64_t v27 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v25, 1LL, v27);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v28 = v14[149];
  uint64_t v29 = *(void **)((char *)v21 + v28);
  uint64_t v30 = (void *)objc_opt_self(&OBJC_CLASS___WiFiP2PXPCConnection);
  id v31 = v29;
  id v32 = [v30 wifip2pRemoteXPCInterface];
  [v31 setExportedInterface:v32];

  uint64_t v33 = *(void **)((char *)v21 + v28);
  [v33 setExportedObject:v21];
  uint64_t v34 = swift_allocObject(&unk_1003F4190, 24LL, 7LL);
  swift_unknownObjectWeakInit(v34 + 16, v21);
  v39[3]  = sub_10026536C;
  uint64_t v40 = v34;
  aBlock  = _NSConcreteStackBlock;
  v39[0]  = 1107296256LL;
  v39[1]  = sub_1000021F0;
  v39[2]  = &unk_1003F41A8;
  uint64_t v35 = _Block_copy(&aBlock);
  objc_msgSend(v33, "setInvalidationHandler:", v35, swift_release(v40).n128_f64[0]);

  _Block_release(v35);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  return v21;
}

uint64_t sub_100265348()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10026536C()
{
}

uint64_t sub_100265374(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_100265384(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10026538C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100265394()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1002653B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  isa  = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);
}

uint64_t sub_100265400()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_100265414()
{
  uint64_t v1 = *(void *)(v0 + 16);
  isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);
}

void sub_100265470(uint64_t a1)
{
}

unint64_t sub_100265478()
{
  unint64_t result = qword_10040D5B0;
  if (!qword_10040D5B0)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10040D5B0);
  }

  return result;
}

uint64_t sub_1002654C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002654E4()
{
  return sub_10026494C(*(void *)(v0 + 16));
}

uint64_t sub_1002655A4(uint64_t a1)
{
  v2[0]  = "\b";
  v2[1]  = &unk_10035E3A0;
  v2[2]  = &unk_10035E3B8;
  v2[3]  = &unk_10035E3A0;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 120);
}

uint64_t (*sub_1002655F8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10026563C()
{
  uint64_t v1 = *(void *)(v0 + qword_100410A80);
  uint64_t v2 = *(void *)(v0 + qword_100410A80 + 8);
  uint64_t v3 = *(void *)(v0 + qword_100410A80 + 16);
  swift_bridgeObjectRelease(*(void *)(v0 + qword_100410A80 + 24));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return swift_unknownObjectRelease(*(void *)(v0 + qword_10040D5C0));
}

id sub_1002656B8()
{
  ObjectType  = (objc_class *)swift_getObjectType(v0);
  swift_getWitnessTable(&unk_10035E4A0, ObjectType);
  BonjourOffload.stopAllServices()();
  v3.receiver  = v0;
  v3.super_class  = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

id sub_100265714(void *a1)
{
  id v1 = a1;
  return sub_1002656B8();
}

uint64_t sub_100265738(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + qword_100410A80);
  uint64_t v3 = *(void *)(a1 + qword_100410A80 + 8);
  uint64_t v4 = *(void *)(a1 + qword_100410A80 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + qword_100410A80 + 24));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return swift_unknownObjectRelease(*(void *)(a1 + qword_10040D5C0));
}

id sub_1002657B8(void *a1, uint64_t a2)
{
  return sub_100266154(a1, a2, (void (*)(void))sub_10026999C);
}

void sub_1002657C4(void *a1, int a2, void *a3, void *a4)
{
}

uint64_t sub_1002657E8( void *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void *, uint64_t, uint64_t), void (*a5)(void *, uint64_t, uint64_t), void (*a6)(void *, uint64_t, uint64_t))
{
  unint64_t v25 = a5;
  uint64_t v26 = a6;
  ObjectType  = swift_getObjectType(v6);
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  char v14 = (uint64_t *)((char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (void *)*v15;
  *char v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchPredicate.onQueue(_:),  v11);
  id v17 = v16;
  LOBYTE(v16)  = _dispatchPreconditionTest(_:)(v14);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) != 0)
  {
    WitnessTable  = swift_getWitnessTable(&unk_10035E4A0, ObjectType);
    BonjourOffload.record(from:)(a1, (uint64_t)&v27);
    if (!v28)
    {
      sub_1000225EC((uint64_t)&v27, &qword_100409580);
      return a2(0LL);
    }

    sub_1000589F8(&v27, (uint64_t)v29);
    id v20 = [a1 serviceValue];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
      unint64_t v24 = v23;

      sub_1000208D8(v22, v24);
      if ([a1 isResolve])
      {
        v25(v29, ObjectType, WitnessTable);
LABEL_8:
        sub_100002AC4(v29);
        return a2(0LL);
      }

      a4  = v26;
    }

    a4(v29, ObjectType, WitnessTable);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

void sub_10026599C(void *a1, int a2, void *a3, void *a4)
{
}

void sub_1002659C0( void *a1, int a2, void *a3, void *aBlock, uint64_t (*a5)(void), void (*a6)(void *, uint64_t, uint64_t), void (*a7)(void *, uint64_t, uint64_t), void (*a8)(void *, uint64_t, uint64_t))
{
  char v14 = _Block_copy(aBlock);
  v17[2]  = v14;
  id v15 = a3;
  id v16 = a1;
  sub_1002657E8(v15, a5, (uint64_t)v17, a6, a7, a8);
  _Block_release(v14);
}

uint64_t type metadata accessor for WiFiAwareBonjourOffload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WiFiAwareBonjourOffload);
}

uint64_t sub_100265A6C(uint64_t a1)
{
  v4[0]  = "\b";
  v4[1]  = &unk_10035E3A0;
  void v4[2] = &unk_10035E3B8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[3]  = *(void *)(result - 8) + 64LL;
    v4[4]  = &unk_10035E3A0;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 5LL, v4, a1 + 120);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100265AF8()
{
  uint64_t v0 = sub_1002696AC();
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100265B0C()
{
  return sub_100265BD8(&qword_100410A80);
}

double sub_100265B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100267C90(a1, a2, a3, a4, a5, a6, &qword_100410A80);
}

void (*sub_100265B34(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = sub_1002655F8((uint64_t)v2);
  return sub_100265B78;
}

uint64_t sub_100265B7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100265C98(&qword_100410A70, (uint64_t (*)(void))sub_1002E8D68);
  *a1  = result;
  return result;
}

unint64_t sub_100265BB0()
{
  return BonjourOffload.peersToInvalidate()();
}

uint64_t sub_100265BD8(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v8, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v5 = v2[3];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  return v3;
}

uint64_t (*sub_100265C54(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100265C98(void *a1, uint64_t (*a2)(void))
{
  Strong  = swift_weakLoadStrong(v2 + *a1);
  if (!Strong) {
    return 0LL;
  }
  uint64_t v5 = Strong;
  uint64_t v6 = a2();
  swift_release(v5);
  return v6;
}

uint64_t sub_100265CE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = os_transaction_create();
  *a1  = result;
  return result;
}

uint64_t sub_100265D10(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v43[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AWDLPeer(0LL);
  uint64_t v9 = (unsigned __int8 *)(a1 + *(int *)(v8 + 20));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  unint64_t v12 = (unint64_t)*(unsigned int *)(v9 + 2) << 16;
  uint64_t v13 = a1 + *(int *)(v8 + 52);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v16 = *(void *)(v13 + 16);
  }

  else
  {
    uint64_t v17 = UUID.init()(v8);
    uint64_t v15 = UUID.uuidString.getter(v17);
    uint64_t v16 = v18;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v14);
  WiFiAddress.ipv6LinkLocalAddress.getter(v10 | (v11 << 8) | v12);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v44 = &type metadata for DNSRecords.AAAA;
  uint64_t v45 = &protocol witness table for DNSRecords.AAAA;
  uint64_t v27 = swift_allocObject(&unk_1003F48A8, 80LL, 7LL);
  v43[0]  = v27;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(v27 + 16)  = 27;
  *(void *)(v27 + 24)  = v15;
  *(void *)(v27 + 32)  = v16;
  *(_BYTE *)(v27 + 40)  = 1;
  *(void *)(v27 + 48)  = v20;
  *(void *)(v27 + 56)  = v22;
  *(void *)(v27 + 64)  = v24;
  *(void *)(v27 + 72)  = v26;
  if (a2)
  {
    uint64_t v28 = v44;
    uint64_t v29 = v45;
    sub_100021104(v43, (uint64_t)v44);
    uint64_t v30 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v29[1])(v28, v29);
    unint64_t v32 = v31;
    v33.super.isa  = Data._bridgeToObjectiveC()().super.isa;
    sub_1000208D8(v30, v32);
    uint64_t v34 = v44;
    uint64_t v35 = v45;
    sub_100021104(v43, (uint64_t)v44);
    uint64_t v36 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v35[2])(v34, v35);
    if (v37 >> 60 == 15)
    {
      isa  = 0LL;
    }

    else
    {
      uint64_t v39 = v36;
      unint64_t v40 = v37;
      isa  = Data._bridgeToObjectiveC()().super.isa;
      sub_100020B40(v39, v40);
    }

    [a2 handleEventType:3 keyData:v33.super.isa valueData:isa];
  }

  return sub_100002AC4(v43);
}

uint64_t sub_100265F3C()
{
  uint64_t v1 = *(void *)(v0 + qword_100410A98);
  uint64_t v2 = *(void *)(v0 + qword_100410A98 + 8);
  uint64_t v3 = *(void *)(v0 + qword_100410A98 + 16);
  swift_bridgeObjectRelease(*(void *)(v0 + qword_100410A98 + 24));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = v0 + qword_100410AA0;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_unknownObjectRelease(*(void *)(v0 + qword_10040D648));
}

id sub_100265FE0()
{
  uint64_t v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType(v0);
  Strong  = swift_weakLoadStrong(&v0[qword_100410A88]);
  if (Strong)
  {
    uint64_t v4 = Strong;
    sub_100304230((uint64_t)v1 + qword_100410AA0);
    swift_release(v4);
  }

  swift_getWitnessTable(&unk_10035E474, ObjectType);
  BonjourOffload.stopAllServices()();
  v6.receiver  = v1;
  v6.super_class  = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

id sub_10026607C(void *a1)
{
  id v1 = a1;
  return sub_100265FE0();
}

uint64_t sub_1002660A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + qword_100410A98);
  uint64_t v3 = *(void *)(a1 + qword_100410A98 + 8);
  uint64_t v4 = *(void *)(a1 + qword_100410A98 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + qword_100410A98 + 24));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  uint64_t v5 = a1 + qword_100410AA0;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_unknownObjectRelease(*(void *)(a1 + qword_10040D648));
}

id sub_100266148(void *a1, uint64_t a2)
{
  return sub_100266154(a1, a2, (void (*)(void))sub_1002661AC);
}

id sub_100266154(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_1002661AC()
{
  ObjectType  = swift_getObjectType(v0);
  return _typeName(_:qualified:)(ObjectType, 0LL);
}

uint64_t sub_1002661C8(void *a1, uint64_t (*a2)(void), char *a3)
{
  id v4 = v3;
  v168  = a2;
  ObjectType  = swift_getObjectType(v3);
  v164  = *v3;
  v163  = swift_isaMask;
  sub_100002274((uint64_t *)&unk_10040D800);
  __chkstk_darwin();
  v165  = (unsigned __int8 *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v167  = sub_100002274(&qword_10040D7B0);
  uint64_t v9 = *(void *)(v167 - 8);
  __chkstk_darwin();
  v166  = (char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v162  = (uint64_t)&v148 - v11;
  __chkstk_darwin();
  uint64_t v161 = (unsigned __int8 *)&v148 - v12;
  __chkstk_darwin();
  unint64_t v160 = (char *)&v148 - v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v148 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (uint64_t *)((char *)&v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v21 = (void *)*v20;
  *uint64_t v19 = *v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.onQueue(_:),  v16);
  id v22 = v21;
  LOBYTE(v21)  = _dispatchPreconditionTest(_:)(v19);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  if ((v21 & 1) != 0)
  {
    WitnessTable  = (void (**)(uint64_t, char *))swift_getWitnessTable(&unk_10035E474, ObjectType);
    BonjourOffload.record(from:)(a1, (uint64_t)&v178);
    if (!v180)
    {
      sub_1000225EC((uint64_t)&v178, &qword_100409580);
      return v168(0LL);
    }

    unsigned int v158 = v15;
    sub_1000589F8(&v178, (uint64_t)v175);
    uint64_t v25 = v176;
    uint64_t v26 = v177;
    sub_100021104(v175, v176);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
    if (v28)
    {
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      __int16 v32 = v29;
      v159  = a3;
      uint64_t v33 = *DNSRecords.Identifier.deniedList.unsafeMutableAddressor();
      char v34 = v32 & 1;
      swift_bridgeObjectRetain(v33);
      LOBYTE(v32)  = sub_100303B24(v30, v31, v32 & 0xFF01, v33);
      swift_bridgeObjectRelease(v33);
      if ((v32 & 1) != 0)
      {
        uint64_t v35 = swift_bridgeObjectRetain(v31);
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.error.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          char v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v39 = swift_slowAlloc(32LL, -1LL);
          *(void *)&v178  = v39;
          *(_DWORD *)char v38 = 136315138;
          swift_bridgeObjectRetain(v31);
          DNSRecords.Identifier.description.getter(v30, v31, v34);
          uint64_t v40 = v30;
          unint64_t v42 = v41;
          swift_bridgeObjectRelease(v31);
          v172  = sub_10000235C(v40, v42, (uint64_t *)&v178);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, v173);
          swift_bridgeObjectRelease_n(v31, 2LL);
          swift_bridgeObjectRelease(v42);
          _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Denied service: %s, not starting discovery over AWDL",  v38,  0xCu);
          swift_arrayDestroy(v39, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v39, -1LL, -1LL);
          swift_slowDealloc(v38, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v31, 2LL);
        }

        sub_100002AC4(v175);
        return v168(0LL);
      }

      swift_bridgeObjectRelease(v31);
      a3  = v159;
    }

    id v43 = [a1 serviceValue];
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
      unint64_t v47 = v46;

      sub_1000208D8(v45, v47);
      else {
        BonjourOffload.startAdvertising(record:)((uint64_t)v175, ObjectType, (uint64_t)WitnessTable);
      }
      goto LABEL_18;
    }

    BonjourOffload.startBrowsing(record:)((uint64_t)v175, ObjectType, (uint64_t)WitnessTable);
    sub_10002084C((uint64_t)v175, (uint64_t)&v178);
    uint64_t v48 = sub_100002274(&qword_100404DB8);
    if ((swift_dynamicCast(&v172, &v178, v48, &type metadata for DNSRecords.BrowseHost, 6LL) & 1) != 0)
    {
      unint64_t v157 = v173[1];
      if (v172 != 27)
      {
LABEL_16:
        swift_bridgeObjectRelease(v157);
        goto LABEL_18;
      }

      uint64_t v49 = v173[0];
      int v50 = v174;
      uint64_t v51 = sub_100265C98(&qword_100410A88, (uint64_t (*)(void))sub_100304074);
      int v156 = v50;
      v155  = v49;
      if (v51)
      {
        uint64_t v52 = v51;
        uint64_t v53 = v163 & v164;
        uint64_t v54 = (uint64_t *)(v51 + qword_100410B70);
        swift_beginAccess(v51 + qword_100410B70, v169, 0LL, 0LL);
        uint64_t v55 = *v54;
        swift_bridgeObjectRetain(v55);
        swift_release(v52);
        *(void *)&v178  = v55;
        __chkstk_darwin();
        uint64_t v56 = *(void *)(v53 + 104);
        uint64_t v57 = *(void *)(v53 + 112);
        *(&v148 - 6)  = v56;
        *(&v148 - 5)  = v57;
        *((_BYTE *)&v148 - 32)  = 27;
        unint64_t v58 = v157;
        *(&v148 - 3)  = v49;
        *(&v148 - 2)  = v58;
        *((_BYTE *)&v148 - 8)  = v50;
        uint64_t v60 = type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator(255LL, v56, v57, v59);
        unint64_t v61 = sub_100004E30();
        uint64_t v62 = type metadata accessor for Dictionary(0LL, &type metadata for DNSRecords.PTR, v60, v61);
        uint64_t v63 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v62);
        LOBYTE(v60)  = Sequence.contains(where:)(sub_1002698DC, &v148 - 8, v62, v63);
        swift_bridgeObjectRelease(v178);
        uint64_t v64 = v158;
        if ((v60 & 1) != 0) {
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v64 = v158;
      }

      Strong  = swift_weakLoadStrong((char *)v4 + qword_100410A88);
      if (Strong)
      {
        uint64_t v66 = Strong;
        uint64_t v67 = (uint64_t *)(Strong + *(void *)(*(void *)Strong + 424LL));
        swift_beginAccess(v67, &v172, 0LL, 0LL);
        uint64_t v68 = *v67;
        swift_bridgeObjectRetain(v68);
        swift_release(v66);
        uint64_t v69 = v157;
        swift_bridgeObjectRetain(v157);
        uint64_t v70 = v165;
        sub_100266FB0(v68, v155, v69, (uint64_t)v165);
        __n128 v71 = swift_bridgeObjectRelease(v68);
        uint64_t v72 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t, __n128))(v9 + 48);
        uint64_t v73 = v167;
        if (v72(v70, 1LL, v167, v71) != 1)
        {
          uint64_t v74 = *(int *)(v73 + 48);
          uint64_t v75 = (uint64_t)&v64[v74];
          uint64_t v76 = (uint64_t)&v70[v74];
          uint64_t v77 = *v70;
          uint64_t v78 = v64;
          uint64_t v79 = v70[1];
          v80  = v70[2];
          uint64_t v81 = v70[3];
          uint64_t v82 = v70[4];
          uint64_t v83 = v70[5];
          *uint64_t v78 = v77;
          v78[1]  = v79;
          v78[2]  = v80;
          v78[3]  = v81;
          v78[4]  = v82;
          v78[5]  = v83;
          uint64_t v84 = v75;
          sub_100269850(v76, v75);
          v159  = (char *)v4 + OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_logger;
          uint64_t v85 = *(int *)(v73 + 48);
          uint64_t v86 = v160;
          uint64_t v87 = (uint64_t)&v160[v85];
          v165  = (unsigned __int8 *)v77;
          *unint64_t v160 = v77;
          v163  = v79;
          v86[1]  = v79;
          uint64_t v154 = v80;
          v86[2]  = v80;
          uint64_t v153 = v81;
          v86[3]  = v81;
          v152  = v82;
          v86[4]  = v82;
          uint64_t v88 = v162;
          v151  = v83;
          v86[5]  = v83;
          v164  = v84;
          sub_1002696BC(v84, v87);
          uint64_t v89 = v161;
          sub_100269894((uint64_t)v86, (uint64_t)v161);
          sub_100269700((uint64_t)v86, v88);
          uint64_t v90 = swift_bridgeObjectRetain_n(v157, 2LL);
          unint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
          os_log_type_t v92 = static os_log_type_t.default.getter();
          int v93 = v92;
          if (os_log_type_enabled(v91, v92))
          {
            uint64_t v94 = swift_slowAlloc(22LL, -1LL);
            v150  = v93;
            uint64_t v95 = v94;
            unint64_t v160 = (_BYTE *)swift_slowAlloc(64LL, -1LL);
            *(void *)&v178  = v160;
            *(_DWORD *)uint64_t v95 = 136315394;
            uint64_t v148 = v95 + 4;
            uint64_t v96 = *(int *)(v167 + 48);
            uint64_t v97 = (uint64_t)&v166[v96];
            uint64_t v98 = *v89;
            uint64_t v99 = v89[1];
            uint64_t v100 = v89[2];
            v159  = a3;
            uint64_t v101 = v89[3];
            os_log_t v149 = v91;
            uint64_t v102 = v89[4];
            uint64_t v103 = v89[5];
            *v166  = v98;
            v166[1]  = v99;
            v166[2]  = v100;
            v166[3]  = v101;
            v166[4]  = v102;
            v166[5]  = v103;
            sub_1002696BC((uint64_t)&v89[v96], v97);
            unint64_t v104 = v98 | (v99 << 8) | (v100 << 16) | (v101 << 24) | (v102 << 32) | (v103 << 40);
            v105  = v167;
            WiFiAddress.ipv6LinkLocalAddress.getter(v104);
            uint64_t v107 = v106;
            unint64_t v109 = v108;
            uint64_t v111 = v110;
            uint64_t v113 = v112;
            sub_100269748(v97);
            unint64_t v114 = v157;
            uint64_t v115 = IPv6Address.description.getter(v107, v109, v111, v113);
            unint64_t v117 = v116;
            swift_bridgeObjectRelease(v113);
            v170  = sub_10000235C(v115, v117, (uint64_t *)&v178);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
            swift_bridgeObjectRelease(v117);
            sub_1000225EC(v162, &qword_10040D7B0);
            sub_1000225EC((uint64_t)v89, &qword_10040D7B0);
            *(_WORD *)(v95 + 12)  = 2080;
            swift_bridgeObjectRetain(v114);
            uint64_t v118 = v155;
            v170  = sub_10000235C(v155, v114, (uint64_t *)&v178);
            uint64_t v119 = v166;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
            swift_bridgeObjectRelease_n(v114, 3LL);
            os_log_t v120 = v149;
            _os_log_impl( (void *)&_mh_execute_header,  v149,  (os_log_type_t)v150,  "Recovered by providing ad-hoc AAAA record to %s for %s",  (uint8_t *)v95,  0x16u);
            v121  = v160;
            swift_arrayDestroy(v160, 2LL, &type metadata for Any[8]);
            swift_slowDealloc(v121, -1LL, -1LL);
            swift_slowDealloc(v95, -1LL, -1LL);
          }

          else
          {

            sub_1000225EC(v88, &qword_10040D7B0);
            sub_1000225EC((uint64_t)v89, &qword_10040D7B0);
            swift_bridgeObjectRelease_n(v157, 2LL);
            uint64_t v118 = v155;
            uint64_t v119 = v166;
            v105  = v167;
          }

          v122  = (uint64_t)&v119[*(int *)(v105 + 48)];
          uint64_t v123 = (uint64_t)v165;
          _BYTE *v119 = (_BYTE)v165;
          uint64_t v124 = v163;
          v119[1]  = v163;
          uint64_t v125 = v154;
          v119[2]  = v154;
          uint64_t v126 = v153;
          v119[3]  = v153;
          uint64_t v127 = v119;
          uint64_t v128 = v152;
          v119[4]  = v152;
          v129  = v151;
          v127[5]  = v151;
          sub_1002696BC(v164, v122);
          WiFiAddress.ipv6LinkLocalAddress.getter(v123 | (v124 << 8) | (v125 << 16) | (v126 << 24) | (v128 << 32) | (v129 << 40));
          v131  = v130;
          LOBYTE(v178)  = 27;
          *((void *)&v178 + 1)  = v118;
          v179  = v157;
          LOBYTE(v180)  = v156;
          v181  = v132;
          v182  = v133;
          v183  = v134;
          v184  = v130;
          sub_100269748(v122);
          uint64_t v135 = *(void **)((char *)v4 + qword_100410A90);
          if (v135)
          {
            swift_unknownObjectRetain(*(uint64_t *)((char *)v4 + qword_100410A90));
            v136  = v157;
            DNSRecords.BrowseHost.keyData.getter(27LL, v118, v157);
            uint64_t v138 = v137;
            v140  = v139;
            v141.super.isa  = Data._bridgeToObjectiveC()().super.isa;
            sub_1000208D8(v138, v140);
            v142  = DNSRecords.AAAA.valueData.getter();
            v144  = v143;
            swift_bridgeObjectRelease(v136);
            *(void *)&double v145 = swift_bridgeObjectRelease(v131).n128_u64[0];
            if (v144 >> 60 == 15)
            {
              isa  = 0LL;
            }

            else
            {
              isa  = Data._bridgeToObjectiveC()().super.isa;
              sub_100020B40(v142, v144);
            }

            uint64_t v147 = (uint64_t)v158;
            objc_msgSend(v135, "handleEventType:keyData:valueData:", 0, v141.super.isa, isa, v145);
            swift_unknownObjectRelease(v135);
          }

          else
          {
            swift_bridgeObjectRelease(v157);
            swift_bridgeObjectRelease(v131);
            uint64_t v147 = (uint64_t)v158;
          }

          sub_1000225EC(v147, &qword_10040D7B0);
          goto LABEL_18;
        }
      }

      else
      {
        uint64_t v70 = v165;
        (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v165, 1LL, 1LL, v167);
      }

      swift_bridgeObjectRelease(v157);
      sub_1000225EC((uint64_t)v70, (uint64_t *)&unk_10040D800);
    }

uint64_t sub_100266F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 40) + qword_100410B98;
  swift_beginAccess(v6, v12, 0LL, 0LL);
  NSString v7 = (void *)(v6 + *(int *)(type metadata accessor for DNSRecords.SRV(0LL) + 24));
  uint64_t v8 = v7[1];
  if (*v7 == a3 && v8 == a4) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(*v7, v8, a3, a4, 0LL);
  }
  return v10 & 1;
}

void sub_100266FB0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v43 = a3;
  uint64_t v41 = a2;
  uint64_t v46 = sub_100002274(&qword_10040D7B0);
  uint64_t v38 = *(void *)(v46 - 8);
  __chkstk_darwin();
  uint64_t v44 = (_DWORD *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  NSString v7 = (char *)&v37 - v6;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v40 = a1 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v45 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_22;
    }

    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v17 >= v42) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v40 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v42) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v40 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v42) {
          goto LABEL_29;
        }
        unint64_t v18 = *(void *)(v40 + 8 * v14);
        if (!v18)
        {
          int64_t v14 = v17 + 3;
          if (v17 + 3 >= v42) {
            goto LABEL_29;
          }
          unint64_t v18 = *(void *)(v40 + 8 * v14);
          if (!v18)
          {
            int64_t v19 = v17 + 4;
            if (v19 >= v42)
            {
LABEL_29:
              swift_release(v45);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v39, 1LL, 1LL, v46);
              goto LABEL_32;
            }

            unint64_t v18 = *(void *)(v40 + 8 * v19);
            int64_t v14 = v19;
            if (!v18) {
              break;
            }
          }
        }
      }
    }

void sub_10026731C(void *a1, int a2, void *a3, void *a4)
{
}

uint64_t sub_100267330(void *a1, uint64_t (*a2)(void))
{
  ObjectType  = swift_getObjectType(v2);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11)  = _dispatchPreconditionTest(_:)(v9);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) != 0)
  {
    WitnessTable  = swift_getWitnessTable(&unk_10035E474, ObjectType);
    BonjourOffload.record(from:)(a1, (uint64_t)&v29);
    if (v30)
    {
      sub_1000589F8(&v29, (uint64_t)v31);
      uint64_t v15 = v32;
      uint64_t v16 = v33;
      sub_100021104(v31, v32);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 40))(v15, v16);
      if (!v18) {
        goto LABEL_5;
      }
      uint64_t v20 = v17;
      uint64_t v21 = v18;
      __int16 v22 = v19;
      uint64_t v23 = *DNSRecords.Identifier.deniedList.unsafeMutableAddressor();
      swift_bridgeObjectRetain(v23);
      LOBYTE(v20)  = sub_100303B24(v20, v21, v22 & 0xFF01, v23);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v23);
      if ((v20 & 1) == 0)
      {
LABEL_5:
        id v24 = [a1 serviceValue];
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
          unint64_t v28 = v27;

          sub_1000208D8(v26, v28);
          else {
            BonjourOffload.stopAdvertising(record:)((unint64_t)v31, ObjectType, WitnessTable);
          }
        }

        else
        {
          BonjourOffload.stopBrowsing(record:)((uint64_t)v31, ObjectType, WitnessTable);
        }
      }

      sub_100002AC4(v31);
    }

    else
    {
      sub_1000225EC((uint64_t)&v29, &qword_100409580);
    }

    return a2(0LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100267584(void *a1, int a2, void *a3, void *a4)
{
}

void sub_100267598( void *a1, int a2, void *a3, void *aBlock, uint64_t a5, void (*a6)(id, uint64_t, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  v13[2]  = v10;
  id v11 = a3;
  id v12 = a1;
  a6(v11, a5, v13);
  _Block_release(v10);
}

uint64_t type metadata accessor for AWDLBonjourOffload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AWDLBonjourOffload);
}

uint64_t sub_100267628()
{
  uint64_t v78 = type metadata accessor for UUID(0LL);
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin();
  uint64_t v76 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = sub_100002274(&qword_10040D7B0);
  __chkstk_darwin();
  uint64_t v86 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v85 = (char *)&v74 - v4;
  __chkstk_darwin();
  uint64_t v95 = (char *)&v74 - v5;
  __chkstk_darwin();
  uint64_t v84 = (char *)&v74 - v6;
  __chkstk_darwin();
  uint64_t v83 = (char *)&v74 - v7;
  Strong  = swift_weakLoadStrong(v0 + qword_100410A88);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (!Strong)
  {
LABEL_33:
    uint64_t v70 = v9[2];
    if (v70)
    {
      sub_100002274((uint64_t *)&unk_100405150);
      __n128 v71 = (void *)static _DictionaryStorage.allocate(capacity:)(v70);
    }

    else
    {
      __n128 v71 = _swiftEmptyDictionarySingleton;
    }

    uint64_t v96 = v71;
    uint64_t v72 = swift_bridgeObjectRetain(v9);
    sub_100268A54(v72, 1, &v96);
    swift_bridgeObjectRelease(v9);
    return (uint64_t)v96;
  }

  uint64_t v10 = Strong;
  id v11 = (void *)(Strong + *(void *)(*(void *)Strong + 424LL));
  swift_beginAccess(v11, v97, 0LL, 0LL);
  uint64_t v12 = *v11;
  swift_bridgeObjectRetain(*v11);
  swift_release(v10);
  int64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
LABEL_32:
    swift_bridgeObjectRelease(v12);
    goto LABEL_33;
  }

  uint64_t v96 = _swiftEmptyArrayStorage;
  sub_100267F78(0, v13, 0);
  uint64_t v14 = sub_100303870(v12);
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    unint64_t v16 = v14;
    if (v14 < 1LL << *(_BYTE *)(v12 + 32))
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = v12 + 64;
      uint64_t v75 = v12 + 88;
      uint64_t v1 = 1LL;
      uint64_t v82 = v12;
      int64_t v79 = v13;
      v80  = v15;
      uint64_t v81 = v12 + 64;
      do
      {
        if ((*(void *)(v18 + 8 * (v16 >> 6)) & (1LL << v16)) == 0) {
          goto LABEL_38;
        }
        if (*(_DWORD *)(v12 + 36) != (_DWORD)v15) {
          goto LABEL_39;
        }
        uint64_t v89 = 1LL << v16;
        unint64_t v90 = v16 >> 6;
        uint64_t v88 = v17;
        uint64_t v19 = v87;
        uint64_t v20 = v83;
        int v93 = &v83[*(int *)(v87 + 48)];
        uint64_t v21 = *(void *)(v12 + 48);
        uint64_t v22 = *(void *)(v12 + 56);
        uint64_t v23 = (char *)(v21 + 6 * v16);
        char v24 = *v23;
        char v25 = v23[1];
        char v26 = v23[2];
        char v27 = v23[3];
        char v28 = v23[4];
        char v29 = v23[5];
        uint64_t v91 = type metadata accessor for AWDLPeer(0LL);
        uint64_t v30 = *(void *)(*(void *)(v91 - 8) + 72LL);
        int64_t v94 = v16;
        uint64_t v31 = v22 + v30 * v16;
        uint64_t v32 = (uint64_t)v93;
        sub_1002696BC(v31, (uint64_t)v93);
        _BYTE *v20 = v24;
        v20[1]  = v25;
        v20[2]  = v26;
        v20[3]  = v27;
        void v20[4] = v28;
        v20[5]  = v29;
        uint64_t v33 = v84;
        *uint64_t v84 = v24;
        v33[1]  = v25;
        v33[2]  = v26;
        v33[3]  = v27;
        v33[4]  = v28;
        uint64_t v34 = (uint64_t)&v33[*(int *)(v19 + 48)];
        v33[5]  = v29;
        sub_1002696BC(v32, v34);
        uint64_t v35 = (uint64_t)v33;
        uint64_t v36 = v95;
        sub_100269700(v35, (uint64_t)v95);
        sub_1000225EC((uint64_t)v20, &qword_10040D7B0);
        uint64_t v37 = *(int *)(v19 + 48);
        uint64_t v38 = v85;
        uint64_t v39 = (uint64_t)&v85[v37];
        uint64_t v40 = (uint64_t)&v36[v37];
        char v41 = *v36;
        char v42 = v36[1];
        char v43 = v36[2];
        char v44 = v36[3];
        int v45 = v36[4];
        LODWORD(v20)  = v36[5];
        *uint64_t v85 = *v36;
        v38[1]  = v42;
        v38[2]  = v43;
        v38[3]  = v44;
        v38[4]  = v45;
        v38[5]  = (char)v20;
        sub_1002696BC((uint64_t)&v36[v37], (uint64_t)&v38[v37]);
        uint64_t v46 = *(int *)(v19 + 48);
        unint64_t v47 = v86;
        uint64_t v48 = (uint64_t)&v86[v46];
        *uint64_t v86 = v41;
        v47[1]  = v42;
        v47[2]  = v43;
        v47[3]  = v44;
        int v92 = (int)v20;
        LODWORD(v93)  = v45;
        v47[4]  = v45;
        v47[5]  = (_BYTE)v20;
        sub_1002696BC(v40, (uint64_t)&v47[v46]);
        uint64_t v49 = v48 + *(int *)(v91 + 52);
        uint64_t v50 = *(void *)(v49 + 8);
        uint64_t v51 = *(void *)(v49 + 16);
        swift_bridgeObjectRetain(v51);
        uint64_t v52 = sub_100269748(v48);
        if (!v51)
        {
          uint64_t v53 = v76;
          uint64_t v54 = UUID.init()(v52);
          uint64_t v55 = UUID.uuidString.getter(v54);
          uint64_t v51 = v56;
          uint64_t v57 = v53;
          uint64_t v50 = v55;
          (*(void (**)(char *, uint64_t))(v77 + 8))(v57, v78);
        }

        sub_100269748(v39);
        sub_1000225EC((uint64_t)v95, &qword_10040D7B0);
        uint64_t v9 = v96;
        uint64_t v1 = 1LL;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
        {
          sub_100267F78(0, v9[2] + 1LL, 1);
          uint64_t v9 = v96;
        }

        unint64_t v59 = v9[2];
        unint64_t v58 = v9[3];
        if (v59 >= v58 >> 1)
        {
          sub_100267F78(v58 > 1, v59 + 1, 1);
          uint64_t v9 = v96;
        }

        v9[2]  = v59 + 1;
        uint64_t v60 = &v9[3 * v59];
        *((_BYTE *)v60 + 32)  = v41;
        *((_BYTE *)v60 + 33)  = v42;
        *((_BYTE *)v60 + 34)  = v43;
        *((_BYTE *)v60 + 35)  = v44;
        *((_BYTE *)v60 + 36)  = (_BYTE)v93;
        *((_BYTE *)v60 + 37)  = v92;
        v60[5]  = v50;
        v60[6]  = v51;
        uint64_t v12 = v82;
        uint64_t v61 = 1LL << *(_BYTE *)(v82 + 32);
        if (v94 >= v61) {
          goto LABEL_40;
        }
        uint64_t v18 = v81;
        unint64_t v62 = v90;
        uint64_t v63 = *(void *)(v81 + 8 * v90);
        if ((v63 & v89) == 0) {
          goto LABEL_41;
        }
        LODWORD(v15)  = v80;
        if (*(_DWORD *)(v82 + 36) != (_DWORD)v80) {
          goto LABEL_42;
        }
        unint64_t v64 = v63 & (-2LL << (v94 & 0x3F));
        if (v64)
        {
          unint64_t v16 = __clz(__rbit64(v64)) | v94 & 0xFFFFFFFFFFFFFFC0LL;
          int64_t v65 = v79;
          uint64_t v66 = v88;
        }

        else
        {
          unint64_t v67 = v90 + 1;
          unint64_t v68 = (unint64_t)(v61 + 63) >> 6;
          int64_t v65 = v79;
          uint64_t v66 = v88;
          if (v90 + 1 >= v68) {
            goto LABEL_27;
          }
          unint64_t v69 = *(void *)(v81 + 8 * v67);
          if (!v69)
          {
            unint64_t v67 = v90 + 2;
            if (v90 + 2 >= v68) {
              goto LABEL_27;
            }
            unint64_t v69 = *(void *)(v81 + 8 * v67);
            if (!v69)
            {
              while (v68 - 3 != v62)
              {
                unint64_t v69 = *(void *)(v75 + 8 * v62++);
                if (v69)
                {
                  unint64_t v67 = v62 + 2;
                  goto LABEL_21;
                }
              }

uint64_t sub_100267C54()
{
  uint64_t v0 = sub_100269784();
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100267C68()
{
  return sub_100265BD8(&qword_100410A98);
}

double sub_100267C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100267C90(a1, a2, a3, a4, a5, a6, &qword_100410A98);
}

double sub_100267C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  *(void *)&double result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

void (*sub_100267CEC(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = sub_100265C54((uint64_t)v2);
  return sub_100265B78;
}

void sub_100267D30(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t sub_100267D5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100265C98(&qword_100410A88, (uint64_t (*)(void))sub_100304074);
  *a1  = result;
  return result;
}

uint64_t sub_100267E08()
{
  return swift_unknownObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC12wifip2pdCore19EmptyBonjourOffload_transaction));
}

id sub_100267E18()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100267E5C()
{
  return type metadata accessor for EmptyBonjourOffload(0LL);
}

uint64_t type metadata accessor for EmptyBonjourOffload(uint64_t a1)
{
  uint64_t result = qword_10040D700;
  if (!qword_10040D700) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EmptyBonjourOffload);
  }
  return result;
}

uint64_t sub_100267EA0(uint64_t a1)
{
  objc_super v2 = &unk_10035E3A0;
  return swift_updateClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 104);
}

_UNKNOWN **sub_100267EE0()
{
  return &off_10040EC58;
}

_UNKNOWN **sub_100267EEC()
{
  return &off_10040E2F8;
}

uint64_t sub_100267EF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10006AD28(a1, a2, a3, *v3, &qword_10040F230);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100267F1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100267FF4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100267F38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10026817C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100267F54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10006AD28(a1, a2, a3, *v3, &qword_10040D7D8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100267F78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002682E4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100267F94(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100268488(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100267FB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100268610(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100267FCC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100268794(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100267FE8(char a1, int64_t a2, char a3, char *a4)
{
  return sub_10006AD28(a1, a2, a3, a4, &qword_10040F230);
}

uint64_t sub_100267FF4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274((uint64_t *)&unk_10040E4D0);
    id v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2)  = v8;
    *((void *)v11 + 3)  = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8]) {
      memmove(v13, v14, 56 * v8);
    }
    *((void *)a4 + 2)  = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[56 * v8] || v13 >= &v14[56 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10026817C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274(&qword_10040D7D0);
    id v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2)  = v8;
    *((void *)v11 + 3)  = 2 * (v13 >> 4);
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2)  = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1002682E4(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274(&qword_10040D7B8);
    id v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    void v11[2] = v8;
    v11[3]  = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    id v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2]  = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100002274((uint64_t *)&unk_10040D7C0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100268488(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274((uint64_t *)&unk_10040D7F0);
    id v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2)  = v8;
    *((void *)v11 + 3)  = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8]) {
      memmove(v13, v14, 56 * v8);
    }
    *((void *)a4 + 2)  = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[56 * v8] || v13 >= &v14[56 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100268610(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274(&qword_10040D830);
    id v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    void v11[2] = v8;
    v11[3]  = 2 * (v13 >> 3);
  }

  else
  {
    id v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2]  = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    type metadata accessor for AWDLTrafficRegistrationService(0LL);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100268794(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274(&qword_100406B00);
    id v11 = (char *)swift_allocObject(v10, 6 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2)  = v8;
    *((void *)v11 + 3)  = 2 * ((uint64_t)(v12 - 32) / 6);
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[6 * v8]) {
      memmove(v13, v14, 6 * v8);
    }
    *((void *)a4 + 2)  = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[6 * v8] || v13 >= &v14[6 * v8])
  {
    memcpy(v13, v14, 6 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100268908(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100002274(&qword_10040D7E8);
    id v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2)  = v8;
    *((void *)v11 + 3)  = 2 * v12 - 64;
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2)  = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100268A54(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v39 = v4;
  if (!v4) {
    return swift_bridgeObjectRelease_n(a1, 2LL);
  }
  unint64_t v5 = 0LL;
  for (i  = (unsigned __int8 *)(a1 + 32); ; i += 24)
  {
    if (v5 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiAddress);
      __break(1u);
      goto LABEL_24;
    }

    uint64_t v7 = *i;
    uint64_t v8 = i[1];
    uint64_t v9 = i[2];
    uint64_t v10 = i[3];
    uint64_t v11 = i[4];
    uint64_t v12 = i[5];
    uint64_t v13 = *((void *)i + 1);
    uint64_t v14 = swift_bridgeObjectRetain(*((void *)i + 2));
    if (!v14) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    uint64_t v15 = v10;
    char v16 = a2;
    uint64_t v43 = v13;
    uint64_t v44 = v14;
    unint64_t v17 = (v12 << 40) | (v11 << 32) | v7 | (v8 << 8) | (v9 << 16) | (v15 << 24);
    char v42 = v7;
    v49[0]  = v7;
    v49[1]  = v8;
    v49[2]  = v9;
    char v18 = v15;
    v49[3]  = v15;
    unint64_t v41 = v5;
    v49[4]  = BYTE4(v17);
    v49[5]  = BYTE5(v17);
    uint64_t v19 = (void *)*a3;
    unint64_t v21 = sub_10001C15C(v17);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      goto LABEL_21;
    }
    char v25 = v20;
    if (v19[3] < v24) {
      break;
    }
    if ((v16 & 1) != 0)
    {
      if ((v20 & 1) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      sub_10032B570();
      if ((v25 & 1) != 0) {
        goto LABEL_16;
      }
    }

char *sub_100268DB0(uint64_t a1, char *a2)
{
  unint64_t v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = &v2[qword_100410A70];
  swift_weakInit(&v2[qword_100410A70], 0LL);
  uint64_t v8 = qword_100410A78;
  *(void *)&v2[qword_100410A78]  = 0LL;
  uint64_t v9 = (uint64_t *)&v2[qword_100410A80];
  uint64_t v10 = v2;
  *uint64_t v9 = OffloadedServices.init()( (uint64_t)&type metadata for UInt8,  (uint64_t)&type metadata for UInt8,  (uint64_t)&type metadata for NANPeerServiceIdentifier);
  v9[1]  = v11;
  v9[2]  = v12;
  v9[3]  = v13;
  if (((unint64_t)"re19EmptyBonjourOffload" & 0x1000000000000000LL) != 0)
  {
    sub_100002274((uint64_t *)&unk_10040FEB0);
    _StringGuts._slowWithCString<A>(_:)(v26, sub_100269988, 0LL);
    uint64_t v14 = v26[0];
  }

  else
  {
    __chkstk_darwin();
    *(&v25 - 2)  = (uint64_t)sub_100269988;
    *(&v25 - 1)  = 0LL;
    if (((unint64_t)"re19EmptyBonjourOffload" & 0x2000000000000000LL) != 0)
    {
      v26[0]  = 0xD00000000000001ELL;
      v26[1]  = (unint64_t)"re19EmptyBonjourOffload" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v14 = os_transaction_create(v26);
    }

    else
    {
      uint64_t v14 = sub_100331510( ((unint64_t)"re19EmptyBonjourOffload" & 0xFFFFFFFFFFFFFFFLL) + 32,  30LL,  (uint64_t (*)(void))sub_100269904);
    }
  }

  *(void *)&v10[qword_10040D5C0]  = v14;
  swift_weakAssign(v7, a1);
  id v15 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPCDelegate];
  char v16 = *(void **)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  [v16 setRemoteObjectInterface:v15];

  id v17 = [v16 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)(v26, v17);
  swift_unknownObjectRelease(v17);
  uint64_t v18 = sub_100002274((uint64_t *)&unk_10040D820);
  int v19 = swift_dynamicCast(&v25, v26, &type metadata for Any[8], v18, 6LL);
  uint64_t v20 = v25;
  if (!v19) {
    uint64_t v20 = 0LL;
  }
  uint64_t v21 = *(void *)&v2[v8];
  *(void *)&v2[v8]  = v20;

  swift_unknownObjectRelease(v21);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xED00006E616E2E65LL, 7564900LL, 0xE300000000000000LL);
  uint64_t v22 = &OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPC;
  BOOL v23 = sub_100264E4C(a2, (uint64_t)v6, (uint64_t)v22);

  return v23;
}

char *sub_100269084(uint64_t a1, char *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100268DB0(a1, a2);
}

char *sub_1002690C4(char *a1)
{
  uint64_t v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (((unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0x1000000000000000LL) != 0)
  {
    uint64_t v12 = v1;
    sub_100002274((uint64_t *)&unk_10040FEB0);
    _StringGuts._slowWithCString<A>(_:)(v14, sub_100269988, 0LL);
    uint64_t v6 = v14[0];
  }

  else
  {
    __chkstk_darwin();
    *(&v13 - 2)  = (uint64_t)sub_100269988;
    *(&v13 - 1)  = 0LL;
    if (((unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0x2000000000000000LL) != 0)
    {
      v14[0]  = 0xD00000000000001ALL;
      v14[1]  = (unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = v1;
      uint64_t v6 = os_transaction_create(v14);
    }

    else
    {
      id v5 = v1;
      uint64_t v6 = sub_100331510( ((unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0xFFFFFFFFFFFFFFFLL) + 32,  26LL,  (uint64_t (*)(void))sub_100269974);
    }
  }

  *(void *)&v1[OBJC_IVAR____TtC12wifip2pdCore19EmptyBonjourOffload_transaction]  = v6;

  id v8 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPCDelegate];
  [*(id *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setRemoteObjectInterface:v8];

  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xEE006C6477612E65LL, 7564900LL, 0xE300000000000000LL);
  uint64_t v9 = &OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPC;
  uint64_t v10 = sub_100264E4C(a1, (uint64_t)v4, (uint64_t)v9);

  return v10;
}

char *sub_1002692B4(uint64_t a1, char *a2)
{
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v32 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = &v2[qword_100410A88];
  swift_weakInit(&v2[qword_100410A88], 0LL);
  uint64_t v11 = qword_100410A90;
  *(void *)&v2[qword_100410A90]  = 0LL;
  uint64_t v12 = (uint64_t *)&v2[qword_100410A98];
  uint64_t v13 = v2;
  uint64_t *v12 = OffloadedServices.init()( (uint64_t)&type metadata for DNSRecords.Identifier,  (uint64_t)&type metadata for DNSRecords.PTR,  (uint64_t)&type metadata for DNSRecords.PTR);
  v12[1]  = v14;
  v12[2]  = v15;
  v12[3]  = v16;
  if (((unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0x1000000000000000LL) != 0)
  {
    sub_100002274((uint64_t *)&unk_10040FEB0);
    _StringGuts._slowWithCString<A>(_:)(v34, sub_100265CE4, 0LL);
    uint64_t v17 = v34[0];
  }

  else
  {
    uint64_t v31 = v11;
    __chkstk_darwin();
    *(&v31 - 2)  = (uint64_t)sub_100265CE4;
    *(&v31 - 1)  = 0LL;
    if (((unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0x2000000000000000LL) != 0)
    {
      v34[0]  = 0xD00000000000001FLL;
      v34[1]  = (unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v17 = os_transaction_create(v34);
    }

    else
    {
      uint64_t v17 = sub_100331510( ((unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0xFFFFFFFFFFFFFFFLL) + 32,  31LL,  (uint64_t (*)(void))sub_100269974);
    }

    uint64_t v11 = v31;
  }

  *(void *)&v13[qword_10040D648]  = v17;
  swift_weakAssign(v10, a1);
  id v18 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPCDelegate];
  int v19 = *(void **)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  [v19 setRemoteObjectInterface:v18];

  id v20 = [v19 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)(v34, v20);
  swift_unknownObjectRelease(v20);
  uint64_t v21 = sub_100002274((uint64_t *)&unk_10040D820);
  int v22 = swift_dynamicCast(&v33, v34, &type metadata for Any[8], v21, 6LL);
  uint64_t v23 = v33;
  if (!v22) {
    uint64_t v23 = 0LL;
  }
  uint64_t v24 = *(void *)&v2[v11];
  *(void *)&v2[v11]  = v23;
  swift_unknownObjectRelease(v24);
  uint64_t v25 = *(void *)&v2[v11];
  uint64_t v26 = swift_allocObject(&unk_1003F4880, 24LL, 7LL);
  *(void *)(v26 + 16)  = v25;
  swift_unknownObjectRetain_n(v25, 2LL);
  uint64_t v27 = v32;
  sub_1003040F8((uint64_t)sub_100269940, v26, v32);
  swift_unknownObjectRelease(v25);
  swift_release(v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v13[qword_100410AA0], v27, v7);

  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xEE006C6477612E65LL, 7564900LL, 0xE300000000000000LL);
  char v28 = &OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPC;
  char v29 = sub_100264E4C(a2, (uint64_t)v6, (uint64_t)v28);

  return v29;
}

char *sub_10026966C(uint64_t a1, char *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1002692B4(a1, a2);
}

uint64_t sub_1002696AC()
{
  return *(void *)(v0 + qword_100410A78);
}

uint64_t sub_1002696BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLPeer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100269700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040D7B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100269748(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AWDLPeer(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100269784()
{
  return *(void *)(v0 + qword_100410A90);
}

uint64_t sub_100269794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = (uint64_t *)(v5 + *a5);
  swift_beginAccess(v10, v16, 1LL, 0LL);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[3];
  *uint64_t v10 = a1;
  v10[1]  = a2;
  v10[2]  = a3;
  v10[3]  = a4;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_100269850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLPeer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100269894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002274(&qword_10040D7B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002698DC(uint64_t a1)
{
  return sub_100266F14(a1, *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48)) & 1;
}

void *sub_100269904@<X0>(void *a1@<X8>)
{
  return sub_10033154C(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10026991C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100269940(uint64_t a1)
{
  return sub_100265D10(a1, *(void **)(v1 + 16));
}

uint64_t sub_100269948()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

void *sub_100269974@<X0>(void *a1@<X8>)
{
  return sub_100269904(a1);
}

uint64_t sub_100269988@<X0>(uint64_t *a1@<X8>)
{
  return sub_100265CE4(a1);
}

uint64_t sub_1002699A0(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_100002274(&qword_10040DA48);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v28 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v30 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_5;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v23 >= v28) {
      return swift_release(v30);
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v28) {
        return swift_release(v30);
      }
      unint64_t v24 = *(void *)(v27 + 8 * v14);
      if (!v24)
      {
        int64_t v14 = v23 + 2;
        if (v23 + 2 >= v28) {
          return swift_release(v30);
        }
        unint64_t v24 = *(void *)(v27 + 8 * v14);
        if (!v24)
        {
          int64_t v14 = v23 + 3;
          if (v23 + 3 >= v28) {
            return swift_release(v30);
          }
          unint64_t v24 = *(void *)(v27 + 8 * v14);
          if (!v24) {
            break;
          }
        }
      }
    }

uint64_t sub_100269C38( uint64_t a1, uint64_t (*a2)(uint64_t), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain(a1);
  uint64_t v7 = *(void *)a2(v6);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(a1 + 64);
    do
    {
      uint64_t v10 = *(v9 - 2);
      uint64_t v11 = *(v9 - 1);
      uint64_t v12 = *v9;
      v9 += 5;
      a3(v10, v11, v12);
      --v8;
    }

    while (v8);
  }

  swift_bridgeObjectRelease(a1);
  return v7;
}

uint64_t sub_100269CD4( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  unsigned int v52 = a6;
  unint64_t v8 = a3 >> 8;
  unint64_t v9 = a3 >> 16;
  uint64_t v10 = (unsigned __int8 *)(a3 >> 24);
  unint64_t v11 = HIDWORD(a3);
  unint64_t v12 = a3 >> 40;
  uint64_t v13 = HIWORD(a3);
  unint64_t v14 = HIBYTE(a3);
  uint64_t v61 = a1;
  uint64_t v15 = *v7;
  uint64_t v16 = *(void *)(*v7 + 16LL);
  uint64_t v44 = v7;
  if (v16)
  {
    uint64_t v47 = 0LL;
    unint64_t v48 = 0LL;
    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v43 = swift_bridgeObjectRetain(v15);
    uint64_t v10 = (unsigned __int8 *)(v43 + 71);
    uint64_t v57 = _swiftEmptyArrayStorage;
    __int16 v49 = 255;
    while (1)
    {
      unint64_t v17 = *(void *)(v10 - 39);
      LOWORD(v12)  = *(v10 - 31);
      unsigned int v18 = *(v10 - 30);
      uint64_t v19 = *(void *)(v10 - 23);
      uint64_t v13 = *(void *)(v10 - 15);
      uint64_t v60 = *(v10 - 7);
      unint64_t v9 = *(v10 - 6);
      uint64_t v59 = *(v10 - 5);
      uint64_t v20 = *(v10 - 4);
      uint64_t v58 = *(v10 - 3);
      unint64_t v11 = *(v10 - 2);
      unint64_t v14 = *(v10 - 1);
      uint64_t v61 = *v10;
      if (v18 > v52) {
        break;
      }
      if (v18 == v52
        && (uint64_t v55 = *(v10 - 2),
            unint64_t v11 = *(v10 - 1),
            uint64_t v21 = *(void *)(v10 - 23),
            char v22 = static RadioResources.SymbolicChannel.__derived_enum_equals(_:_:)(v17, v12, a4, a5),
            uint64_t v19 = v21,
            unint64_t v14 = v11,
            LOBYTE(v11)  = v55,
            (v22 & 1) != 0))
      {
        __int16 v49 = v12 | ((_WORD)v18 << 8);
        uint64_t v47 = v60 | (v9 << 8) | (v59 << 16) | (v20 << 24) | (v58 << 32) | (v55 << 40) | (v14 << 48) | (v61 << 56);
        unint64_t v48 = v17;
        uint64_t v45 = v13;
        uint64_t v46 = v19;
      }

      else
      {
        unint64_t v56 = v17;
        if (v18 >= v52)
        {
          uint64_t v53 = v19;
          uint64_t v54 = v13;
          uint64_t v62 = v19;
          LOBYTE(v64)  = v60;
          BYTE1(v64)  = v9;
          BYTE2(v64)  = v59;
          BYTE3(v64)  = v20;
          BYTE4(v64)  = v58;
          BYTE5(v64)  = v11;
          BYTE6(v64)  = v14;
          HIBYTE(v64)  = v61;
          TimeBitmap.SlotsView.formIntersection(_:)(a1, a2, a3);
          LOBYTE(v8)  = v62;
          unint64_t v24 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
          if (!static TimeBitmap.SlotsView.== infix(_:_:)(v62, v13, v64, *v24, v24[1], v24[2]))
          {
            __break(1u);
            goto LABEL_35;
          }

          goto LABEL_13;
        }

        uint64_t v63 = v19;
        TimeBitmap.SlotsView.subtract(_:)(a1, a2, a3);
        int64_t v23 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
        uint64_t v53 = v63;
        uint64_t v54 = v13;
        if (!static TimeBitmap.SlotsView.== infix(_:_:)( v63,  v13,  v60 | ((unint64_t)v9 << 8) | ((unint64_t)v59 << 16) | ((unint64_t)v20 << 24) | ((unint64_t)v58 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v14 << 48) | ((unint64_t)v61 << 56),  *v23,  v23[1],  v23[2])) {
          goto LABEL_13;
        }
      }

uint64_t sub_10026A454()
{
  return sub_100269C38( *v0,  (uint64_t (*)(uint64_t))TimeBitmap.zero.unsafeMutableAddressor,  (void (*)(uint64_t, uint64_t, uint64_t))TimeBitmap.SlotsView.formUnion(_:));
}

uint64_t sub_10026A47C()
{
  return sub_100269C38( *v0,  (uint64_t (*)(uint64_t))TimeBitmap.all.unsafeMutableAddressor,  (void (*)(uint64_t, uint64_t, uint64_t))TimeBitmap.SlotsView.subtract(_:));
}

uint64_t sub_10026A4A4(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  return sub_100269CD4(a1, a2, a3, 3uLL, 2, a4);
}

uint64_t sub_10026A4B8()
{
  if ((*(_BYTE *)(v0 + 8) & 1) != 0
    && (__int128 v1 = *(_OWORD *)(v0 + 32),
        v10[0]  = *(_OWORD *)(v0 + 16),
        v10[1]  = v1,
        sub_1000586C0((uint64_t)v10 + 8, (uint64_t)v11, (uint64_t *)&unk_10040FD40),
        sub_1000586C0((uint64_t)v11, (uint64_t)v12, (uint64_t *)&unk_10040FD40),
        (unint64_t)v12[4] << 32 != 0x300000000LL))
  {
    uint64_t v2 = &off_1003F1B78;
  }

  else
  {
    uint64_t v2 = &off_1003F1BA0;
  }

  BOOL v3 = sub_1003044F0(1LL, (uint64_t)v2);
  swift_bridgeObjectRelease(v2);
  if (!v3)
  {
    uint64_t v5 = sub_100002274(&qword_10040DA40);
    goto LABEL_9;
  }

  char v4 = *(_BYTE *)(v0 + 9);
  uint64_t v5 = sub_100002274(&qword_10040DA40);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    uint64_t v6 = swift_allocObject(v5, 33LL, 7LL);
    *(_OWORD *)(v6 + 16)  = xmmword_100339900;
    uint64_t v7 = (_BYTE *)(v6 + 32);
    unint64_t v8 = NANMapID.primary.unsafeMutableAddressor();
    goto LABEL_10;
  }

  uint64_t v6 = swift_allocObject(v5, 34LL, 7LL);
  *(_OWORD *)(v6 + 16)  = xmmword_10033B810;
  *(_BYTE *)(v6 + 32)  = *(_BYTE *)NANMapID.primary.unsafeMutableAddressor();
  uint64_t v7 = (_BYTE *)(v6 + 33);
  unint64_t v8 = NANMapID.secondary.unsafeMutableAddressor();
LABEL_10:
  *uint64_t v7 = *v8;
  return v6;
}

_UNKNOWN **sub_10026A5E0(unint64_t a1)
{
  if ((*(_BYTE *)(v1 + 8) & 1) != 0
    && (__int128 v3 = *(_OWORD *)(v1 + 32),
        v12[0]  = *(_OWORD *)(v1 + 16),
        v12[1]  = v3,
        sub_1000586C0((uint64_t)v12 + 8, (uint64_t)v13, (uint64_t *)&unk_10040FD40),
        sub_1000586C0((uint64_t)v13, (uint64_t)v14, (uint64_t *)&unk_10040FD40),
        (unint64_t)v14[4] << 32 != 0x300000000LL))
  {
    uint64_t result = &off_1003F1B28;
    uint64_t v5 = 2LL;
  }

  else
  {
    uint64_t result = &off_1003F1B50;
    uint64_t v5 = 1LL;
  }

  unsigned int v6 = (0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC;
  if (((0x801004u >> (8 * *((_BYTE *)result + 32))) & 0xFFC) == v6)
  {
LABEL_6:
    swift_bridgeObjectRelease(result);
    if (v6 == 16)
    {
      if ((*(_BYTE *)(v1 + 9) & 1) != 0)
      {
        unint64_t v11 = (unsigned __int8 *)NANMapID.secondary.unsafeMutableAddressor();
        goto LABEL_19;
      }
    }

    else if (v6 != 4)
    {
      goto LABEL_15;
    }

    unint64_t v11 = (unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
LABEL_19:
    int v10 = 0;
    int v9 = *v11;
    return (_UNKNOWN **)(v9 | (v10 << 8));
  }

  if (v5 == 1)
  {
LABEL_14:
    swift_bridgeObjectRelease(result);
LABEL_15:
    int v9 = 0;
    int v10 = 1;
    return (_UNKNOWN **)(v9 | (v10 << 8));
  }

  uint64_t v7 = 33LL;
  while (1)
  {
    uint64_t v8 = v7 - 31;
    if (__OFADD__(v7 - 32, 1LL)) {
      break;
    }
    ++v7;
    if (v8 == v5) {
      goto LABEL_14;
    }
  }

  __break(1u);
  return result;
}

void sub_10026A730(unint64_t a1, char a2, void (*a3)(unint64_t))
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_35;
  }

  char v4 = (void *)v3;
  LOBYTE(v5)  = a2;
  uint64_t v7 = *(unsigned int *)(v3 + 16);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 20);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 21);
  unint64_t v10 = *(unsigned int *)(v3 + 24) | ((unint64_t)*(unsigned __int16 *)(v3 + 28) << 32);
  unint64_t v11 = *((unsigned int *)v4 + 8) | ((unint64_t)*((unsigned __int16 *)v4 + 18) << 32);
  unint64_t v12 = (void *)v4[5];
  char v13 = *((_BYTE *)v4 + 9);
  swift_bridgeObjectRetain(v12);
  unint64_t v14 = (unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
  uint64_t v15 = RadioResources.SymbolicChannel.Resolver.channel(for:supportsSimulatenousDualBand:on:)( a1,  v5,  v13,  *v14,  v7 | (v8 << 32) | (v9 << 40),  v10,  v11,  v12);
  swift_bridgeObjectRelease(v12);
  if ((v15 & 0xFF00000000LL) == 0x300000000LL) {
    goto LABEL_9;
  }
  __int128 v16 = *((_OWORD *)v4 + 1);
  v52[0]  = *(_OWORD *)v4;
  v52[1]  = v16;
  v52[2]  = *((_OWORD *)v4 + 2);
  uint64_t v53 = v4[6];
  sub_100270288(v52);
  LOWORD(v17)  = (unsigned __int16)sub_10026A5E0(v15 & 0xFFFFFFFFFFFFLL);
  sub_100270244((uint64_t *)v52);
  if ((v17 & 0x100) != 0)
  {
LABEL_9:
    __int128 v27 = *((_OWORD *)v4 + 1);
    v50[0]  = *(_OWORD *)v4;
    v50[1]  = v27;
    v50[2]  = *((_OWORD *)v4 + 2);
    uint64_t v51 = v4[6];
    sub_100270288(v50);
    uint64_t v17 = sub_10026A4B8();
    sub_100270244((uint64_t *)v50);
    uint64_t v28 = *(void *)(v17 + 16);
    if (!v28)
    {
      swift_bridgeObjectRelease(v17);
      return;
    }

    swift_bridgeObjectRetain(v17);
    uint64_t v29 = 0LL;
    while (1)
    {
      unint64_t v21 = *(unsigned __int8 *)(v17 + v29 + 32);
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*v4);
      uint64_t v31 = *v4;
      uint64_t v49 = *v4;
      *char v4 = 0x8000000000000000LL;
      unint64_t v5 = sub_100327738(v21);
      uint64_t v33 = *(void *)(v31 + 16);
      BOOL v34 = (v32 & 1) == 0;
      uint64_t v35 = v33 + v34;
      if (__OFADD__(v33, v34)) {
        break;
      }
      char v36 = v32;
      if (*(void *)(v31 + 24) >= v35)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10032B8E4();
          uint64_t v31 = v49;
        }
      }

      else
      {
        sub_10024241C(v35, isUniquelyReferenced_nonNull_native);
        uint64_t v31 = v49;
        unint64_t v37 = sub_100327738(v21);
        if ((v36 & 1) != (v38 & 1)) {
          goto LABEL_35;
        }
        unint64_t v5 = v37;
      }

      uint64_t v39 = *v4;
      *char v4 = v31;
      swift_bridgeObjectRelease(v39);
      unint64_t v40 = (void *)*v4;
      if ((v36 & 1) == 0)
      {
        v40[(v5 >> 6) + 8] |= 1LL << v5;
        *(_BYTE *)(v40[6] + v5)  = v21;
        *(void *)(v40[7] + 8 * v5)  = _swiftEmptyArrayStorage;
        uint64_t v41 = v40[2];
        BOOL v42 = __OFADD__(v41, 1LL);
        uint64_t v43 = v41 + 1;
        if (v42) {
          goto LABEL_31;
        }
        v40[2]  = v43;
      }

      ++v29;
      a3(v40[7] + 8 * v5);
      if (v28 == v29)
      {
        swift_bridgeObjectRelease_n(v17, 2LL);
        return;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v18 = swift_isUniquelyReferenced_nonNull_native(*v4);
  *(void *)&v50[0]  = *v4;
  uint64_t v19 = *(void *)&v50[0];
  *char v4 = 0x8000000000000000LL;
  unint64_t v21 = sub_100327738(v17);
  uint64_t v22 = *(void *)(v19 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  LOBYTE(v5)  = v20;
  if (*(void *)(v19 + 24) >= v24)
  {
    if ((v18 & 1) != 0) {
      goto LABEL_26;
    }
LABEL_33:
    sub_10032B8E4();
    uint64_t v19 = *(void *)&v50[0];
    goto LABEL_26;
  }

  sub_10024241C(v24, v18);
  uint64_t v19 = *(void *)&v50[0];
  unint64_t v25 = sub_100327738(v17);
  if ((v5 & 1) != (v26 & 1))
  {
LABEL_35:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANMapID);
    __break(1u);
    return;
  }

  unint64_t v21 = v25;
LABEL_26:
  uint64_t v44 = *v4;
  *char v4 = v19;
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = (void *)*v4;
  swift_bridgeObjectRetain(*v4);
  if ((v5 & 1) == 0) {
    sub_100244B34(v21, v17, (uint64_t)_swiftEmptyArrayStorage, v45);
  }
  uint64_t v46 = v45[7];
  __n128 v47 = swift_bridgeObjectRelease(v45);
  ((void (*)(unint64_t, __n128))a3)(v46 + 8 * v21, v47);
}

__int16 sub_10026AAC8@<W0>(unint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)a2;
  if (!*(void *)(*(void *)a2 + 16LL)) {
    goto LABEL_28;
  }
  unsigned __int8 v7 = *(_BYTE *)a1;
  a1  = sub_100327738(*(_BYTE *)a1);
  if ((v8 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v47 = v3;
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v10 = *(void *)(v9 + 8 * a1);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v46 = a3;
    unint64_t v12 = (void *)*((void *)a2 + 5);
    char v13 = a2[9];
    unint64_t v53 = *((unsigned int *)a2 + 6) | ((unint64_t)*((unsigned __int16 *)a2 + 14) << 32);
    unint64_t v54 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
    uint64_t v14 = a2[21];
    uint64_t v15 = a2[20];
    uint64_t v16 = *((unsigned int *)a2 + 4);
    uint64_t v17 = v15 << 32;
    uint64_t v52 = v14 << 40;
    swift_bridgeObjectRetain_n(v10, 2LL);
    uint64_t v45 = v10;
    char v20 = (unint64_t *)(v10 + 64);
    unint64_t v21 = _swiftEmptyDictionarySingleton;
    uint64_t v22 = v16 | v17;
    unint64_t v23 = (unint64_t)&unk_10035E000;
    unsigned __int8 v51 = v7;
    uint64_t v50 = v12;
    char v49 = v13;
    uint64_t v48 = v22;
    while (1)
    {
      uint64_t v57 = *(v20 - 2);
      uint64_t v56 = *(v20 - 1);
      unint64_t v55 = *v20;
      unint64_t v59 = v18 & 0xFFFF000000000000LL | v53;
      unint64_t v60 = v23 & 0xFFFF000000000000LL | v22 | v52;
      unint64_t v58 = v19 & 0xFFFF000000000000LL | v54;
      uint64_t v24 = RadioResources.SymbolicChannel.Resolver.channel(for:supportsSimulatenousDualBand:on:)( *(v20 - 4),  *((_BYTE *)v20 - 24),  v13,  v7,  v60,  v59,  v58,  v12);
      if ((v24 & 0xFF00000000LL) != 0x300000000LL)
      {
        uint64_t v25 = v24;
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v21);
        uint64_t v61 = v21;
        unint64_t v28 = sub_100327824(v25 & 0xFFFFFFFFFFFFLL);
        uint64_t v29 = v21[2];
        BOOL v30 = (v27 & 1) == 0;
        uint64_t v31 = v29 + v30;
        if (__OFADD__(v29, v30))
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Channel);
          __break(1u);
LABEL_33:
          LOWORD(a1)  = swift_release(v61);
          __break(1u);
          return a1;
        }

        char v32 = v27;
        if (v21[3] >= v31)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10032B730();
            unint64_t v21 = v61;
          }
        }

        else
        {
          sub_10024210C(v31, isUniquelyReferenced_nonNull_native);
          unint64_t v21 = v61;
          uint64_t v33 = sub_100327824(v25 & 0xFFFFFFFFFFFFLL);
          if ((v32 & 1) != (v34 & 1)) {
            goto LABEL_32;
          }
          unint64_t v28 = v33;
        }

        swift_bridgeObjectRelease(0x8000000000000000LL);
        if ((v32 & 1) != 0)
        {
          swift_bridgeObjectRetain(v21);
        }

        else
        {
          v21[(v28 >> 6) + 8] |= 1LL << v28;
          uint64_t v35 = v21[6] + 8 * v28;
          *(_DWORD *)uint64_t v35 = v25;
          *(_BYTE *)(v35 + 4)  = BYTE4(v25);
          *(_BYTE *)(v35 + 5)  = BYTE5(v25);
          uint64_t v36 = v21[7] + 24 * v28;
          *(_OWORD *)uint64_t v36 = xmmword_10035E4C0;
          *(void *)(v36 + 16)  = 0LL;
          uint64_t v37 = v21[2];
          uint64_t v38 = v37 + 1;
          BOOL v39 = __OFADD__(v37, 1LL);
          swift_bridgeObjectRetain(v21);
          if (v39) {
            goto LABEL_31;
          }
          v21[2]  = v38;
        }

        swift_bridgeObjectRelease(v21);
        TimeBitmap.SlotsView.formUnion(_:)(v57, v56, v55);
        unsigned __int8 v7 = v51;
        unint64_t v12 = v50;
        char v13 = v49;
        uint64_t v22 = v48;
      }

      v20 += 5;
      --v11;
      unint64_t v18 = v59;
      unint64_t v23 = v60;
      unint64_t v19 = v58;
      if (!v11)
      {
        uint64_t v10 = v45;
        swift_bridgeObjectRelease(v45);
        a3  = v46;
        goto LABEL_23;
      }
    }
  }

  swift_bridgeObjectRetain(*(void *)(v9 + 8 * a1));
  unint64_t v21 = _swiftEmptyDictionarySingleton;
LABEL_23:
  swift_bridgeObjectRelease(v10);
  if (!v21[2])
  {
    LOWORD(a1)  = swift_bridgeObjectRelease(v21);
LABEL_28:
    *a3  = 0LL;
    a3[1]  = 0LL;
    return a1;
  }

  swift_bridgeObjectRetain_n(v21, 2LL);
  unint64_t v40 = sub_10026D878((uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  uint64_t v61 = v40;
  sub_10026DA30((uint64_t *)&v61);
  if (v47) {
    goto LABEL_33;
  }
  swift_bridgeObjectRelease(v21);
  uint64_t v41 = (uint64_t)v61;
  swift_bridgeObjectRetain(v21);
  BOOL v42 = sub_10026FFF8(v41, (uint64_t)v21);
  swift_release(v41);
  swift_bridgeObjectRelease_n(v21, 2LL);
  if (v42[2])
  {
    uint64_t v43 = (CoreP2P::NANAttribute::Availability::Control *)NANAttribute.Availability.Control.committedChange.unsafeMutableAddressor();
    LOWORD(a1)  = NANAttribute.Availability.Control.init(mapID:with:)( (CoreP2P::NANMapID)v7,  (CoreP2P::NANAttribute::Availability::Control)v43->rawValue);
    *a3  = (unint64_t)(unsigned __int16)a1 << 16;
    a3[1]  = v42;
  }

  else
  {
    LOWORD(a1)  = swift_bridgeObjectRelease(v42);
    *a3  = 0LL;
    a3[1]  = 0LL;
  }

  return a1;
}

uint64_t sub_10026AEB8(uint64_t result)
{
  if (*(_BYTE *)(v1 + 9)) {
    return result;
  }
  else {
    return 11LL;
  }
}

uint64_t sub_10026AECC()
{
  else {
    return swift_bridgeObjectRetain(&off_1003F1BF0);
  }
}

uint64_t sub_10026AEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a2 + 24) + 8LL))( a1,  a3,  a4,  *(void *)(a2 + 16));
}

uint64_t sub_10026AF34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v5, v1 + *(int *)(v3 + 36), v2);
  return String.init<A>(describing:)(v5, v2);
}

uint64_t sub_10026AFAC(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v3 = v7;
  uint64_t v4 = sub_10002278C(v6);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v4, v2, v3);
  return Mirror.init(reflecting:)(v6);
}

uint64_t sub_10026B010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10026AEFC(a1, a4, a2, a3);
}

uint64_t sub_10026B030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for RadioConstraint(0LL, a3, a4, a4);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v20 - v13;
  char v15 = static UUID.== infix(_:_:)(a1, a2);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v14, a1, v9);
  v16(v12, a2, v9);
  if ((v15 & 1) != 0) {
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(&v14[*(int *)(v9 + 36)], &v12[*(int *)(v9 + 36)], a3, a5);
  }
  else {
    char v17 = 0;
  }
  unint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  v18(v14, v9);
  return v17 & 1;
}

uint64_t sub_10026B154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10026B030(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t sub_10026B164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  return dispatch thunk of Hashable.hash(into:)(a1, *(void *)(a2 + 16), a3);
}

Swift::Int sub_10026B1E8(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10026B23C(uint64_t a1, uint64_t a2)
{
  return sub_10026B1E8(a1, *(void *)(a2 - 8));
}

uint64_t sub_10026B244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026B164(a1, a2, *(void *)(a3 - 8));
}

Swift::Int sub_10026B24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  Hasher.init(_seed:)(v6, a1);
  sub_10026B164((uint64_t)v6, a2, v4);
  return Hasher._finalize()();
}

uint64_t sub_10026B29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for PriorityRadioConstraint(0LL);
  return RadioSchedule.set(_:to:with:)( *(void *)(v3 + v6[7]),  *(void *)(v3 + v6[7] + 8),  *(void *)(v3 + v6[7] + 16),  *(void *)(v3 + v6[6]),  *(unsigned __int8 *)(v3 + v6[6] + 8),  *(_BYTE *)(v3 + v6[5]),  a2,  a3);
}

void sub_10026B308(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_10000AF70( &qword_10040F8C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  uint64_t v5 = (int *)type metadata accessor for PriorityRadioConstraint(0LL);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v5[5]));
  RadioResources.SymbolicChannel.hash(into:)(a1, *(void *)(v1 + v5[6]), *(_BYTE *)(v1 + v5[6] + 8));
  uint64_t v6 = (Swift::UInt8 *)(v1 + v5[7]);
  Swift::UInt8 v7 = v6[17];
  LOBYTE(v5)  = v6[18];
  Swift::UInt8 v8 = v6[19];
  Swift::UInt8 v9 = v6[20];
  Swift::UInt8 v10 = v6[21];
  Swift::UInt8 v11 = v6[22];
  Swift::UInt8 v12 = v6[23];
  Hasher._combine(_:)(v6[16]);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)((Swift::UInt8)v5);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
}

uint64_t sub_10026B41C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

Swift::Int sub_10026B454()
{
  return Hasher._finalize()();
}

Swift::Int sub_10026B494(uint64_t a1)
{
  return Hasher._finalize()();
}

double sub_10026B4D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100002274(&qword_10040DA58);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Strong  = swift_weakLoadStrong((char *)v1 + qword_100410AB0);
  if (Strong)
  {
    uint64_t v8 = Strong;
    uint64_t v29 = v3;
    sub_10026BE3C((uint64_t)&v37);
    uint64_t v30 = v37;
    int v33 = v39;
    int v34 = v38;
    int v32 = v40;
    unint64_t v31 = v41 | ((unint64_t)v42 << 32);
    __int128 v35 = v43;
    Swift::UInt8 v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 176LL);
    uint64_t v10 = swift_retain();
    uint64_t v11 = v9(v10);
    swift_release(v8);
    uint64_t v12 = *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor();
    v36[0]  = v11;
    uint64_t v44 = v12;
    unint64_t v13 = sub_100270384();
    swift_bridgeObjectRetain_n(v12, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))v36,  &type metadata for WiFiDriverCapabilities.Kind,  v13);
    uint64_t v14 = v44;
    char v15 = sub_10007990C(v44, v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v14);
    char v16 = v15 & 1;
    uint64_t v17 = swift_retain();
    uint64_t v18 = v9(v17);
    swift_release(v8);
    uint64_t v19 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    v36[0]  = v18;
    uint64_t v44 = v19;
    swift_bridgeObjectRetain_n(v19, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))v36,  &type metadata for WiFiDriverCapabilities.Kind,  v13);
    uint64_t v20 = v44;
    LOBYTE(v13)  = sub_10007990C(v44, v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v20);
    char v21 = v13 & 1;
    sub_1002CF42C((uint64_t)v5);
    uint64_t v22 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v23 = swift_allocObject(&unk_1003F4B10, 24LL, 7LL);
    swift_weakInit(v23 + 16, v1);
    uint64_t v24 = swift_allocObject(&unk_1003F4B60, 56LL, 7LL);
    *(void *)(v24 + 16)  = *(void *)(v2 + 80);
    *(_OWORD *)(v24 + 24)  = *(_OWORD *)(v2 + 88);
    *(void *)(v24 + 40)  = *(void *)(v2 + 104);
    *(void *)(v24 + 48)  = v23;
    uint64_t v25 = (void *)((char *)v1 + qword_10040D838);
    swift_beginAccess((char *)v1 + qword_10040D838, v36, 33LL, 0LL);
    id v26 = v22;
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v26,  v25,  (uint64_t)sub_1002703C8,  v24,  v29,  (uint64_t)&v44);
    sub_1000225EC((uint64_t)v5, &qword_10040DA58);
    swift_endAccess(v36);

    swift_release(v24);
    if (v45)
    {
      unint64_t v27 = v49 | ((unint64_t)v50 << 32);
      swift_bridgeObjectRelease(v45);
    }

    else
    {
      unint64_t v27 = 0x300000000LL;
    }

    uint64_t v44 = v30;
    LOBYTE(v45)  = v16;
    BYTE1(v45)  = v21;
    int v46 = v34;
    char v47 = v33;
    char v48 = v32;
    unsigned int v49 = v31;
    unsigned __int16 v50 = WORD2(v31);
    int v51 = v27;
    __int16 v52 = WORD2(v27);
    __int128 v53 = v35;
    sub_10026BFE4(&v44);
    *(void *)&double result = swift_release(v8).n128_u64[0];
  }

  return result;
}

double sub_10026B82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(unsigned __int16 *)(a2 + 28);
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = a3 + 16;
  swift_beginAccess(a3 + 16, v11, 0LL, 0LL);
  Strong  = swift_weakLoadStrong(v6);
  if (Strong)
  {
    uint64_t v9 = Strong;
    if (v3) {
      uint64_t v10 = v5 | (v4 << 32);
    }
    else {
      uint64_t v10 = 0x300000000LL;
    }
    sub_10026BE3C((uint64_t)&v12);
    uint64_t v20 = v12;
    char v21 = v13;
    char v22 = v14;
    int v23 = v15;
    __int16 v24 = v16;
    __int16 v26 = v18;
    int v25 = v17;
    int v27 = v10;
    __int16 v28 = WORD2(v10);
    __int128 v29 = v19;
    sub_10026BFE4(&v20);
    *(void *)&double result = swift_release(v9).n128_u64[0];
  }

  return result;
}

uint64_t sub_10026B904()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100002274((uint64_t *)&unk_10040FC30);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = swift_weakLoadStrong((char *)v0 + qword_100410AB8);
  if (result)
  {
    uint64_t v7 = result;
    sub_1002EA3DC((uint64_t)v5);
    uint64_t v8 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v9 = swift_allocObject(&unk_1003F4B10, 24LL, 7LL);
    swift_weakInit(v9 + 16, v1);
    uint64_t v10 = swift_allocObject(&unk_1003F4B38, 56LL, 7LL);
    *(void *)(v10 + 16)  = *(void *)(v2 + 80);
    *(_OWORD *)(v10 + 24)  = *(_OWORD *)(v2 + 88);
    *(void *)(v10 + 40)  = *(void *)(v2 + 104);
    *(void *)(v10 + 48)  = v9;
    uint64_t v11 = (void *)((char *)v1 + qword_10040D840);
    swift_beginAccess((char *)v1 + qword_10040D840, &v37, 33LL, 0LL);
    id v12 = v8;
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v12,  v11,  (uint64_t)sub_100270234,  v10,  v3,  (uint64_t)&v30);
    sub_1000225EC((uint64_t)v5, (uint64_t *)&unk_10040FC30);
    swift_endAccess(&v37);

    swift_release(v10);
    v13._rawValue  = v30;
    sub_10026BE3C((uint64_t)v26);
    __int128 v23 = v27;
    uint64_t v14 = v29;
    uint64_t v24 = v28;
    swift_bridgeObjectRetain(v29);
    sub_100270244(v26);
    uint64_t v25 = v14;
    uint64_t v22 = v7;
    unint64_t v15 = sub_1002EA434();
    RadioResources.SymbolicChannel.Resolver.primaryChannel.setter(v15 & 0xFFFFFFFFFFFFLL);
    unint64_t v16 = sub_1002EA480();
    RadioResources.SymbolicChannel.Resolver.secondaryChannel.setter(v16 & 0xFFFFFFFFFFFFLL);
    RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)(v13);
    swift_bridgeObjectRelease(v13._rawValue);
    LODWORD(v13._rawValue)  = v23;
    __int16 v17 = WORD2(v23);
    uint64_t v21 = DWORD2(v23);
    LOWORD(v12)  = WORD6(v23);
    LODWORD(v8)  = v24;
    __int16 v18 = WORD2(v24);
    uint64_t v19 = v25;
    sub_10026BE3C((uint64_t)&v30);
    LOBYTE(v14)  = v32;
    LOBYTE(v7)  = v31;
    uint64_t v20 = (uint64_t)v30;
    v36[0]  = v33;
    v36[1]  = v34;
    sub_1000FB9E4((uint64_t)v36);
    uint64_t v37 = v20;
    char v38 = v7;
    char v39 = v14;
    rawValue  = (int)v13._rawValue;
    __int16 v41 = v17;
    __int16 v43 = (__int16)v12;
    int v42 = v21;
    __int16 v45 = v18;
    int v44 = (int)v8;
    uint64_t v46 = v19;
    uint64_t v47 = v35;
    sub_10026BFE4(&v37);
    return swift_release(v22);
  }

  return result;
}

uint64_t sub_10026BBB0(uint64_t a1, void **a2, uint64_t a3)
{
  v3._rawValue  = *a2;
  uint64_t v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    sub_10026BE3C((uint64_t)v7);
    RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)(v3);
    sub_10026BFE4(v7);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_10026BC34()
{
  return swift_weakLoadStrong(v0 + qword_100410AB8);
}

uint64_t *sub_10026BC44(uint64_t a1)
{
  __int128 v25 = v13;
  __int128 v26 = v14;
  sub_1000586C0((uint64_t)&v26, (uint64_t)v27, (uint64_t *)&unk_10040FD40);
  uint64_t v2 = v12[0];
  uint64_t v3 = WORD2(v14);
  uint64_t v4 = v14;
  uint64_t v5 = *((void *)&v14 + 1);
  uint64_t v6 = v15;
  sub_1000586C0((uint64_t)v27, (uint64_t)v28, (uint64_t *)&unk_10040FD40);
  if ((unint64_t)v28[4] << 32 == 0x300000000LL)
  {
    sub_100270244(v12);
    int v7 = 3;
  }

  else
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v2);
    int v7 = ((v4 | (unint64_t)(v3 << 32)) >> 32);
  }

  __int128 v8 = *(_OWORD *)(a1 + 32);
  __int128 v22 = *(_OWORD *)(a1 + 16);
  __int128 v23 = v8;
  sub_1000586C0((uint64_t)&v23, (uint64_t)v24, (uint64_t *)&unk_10040FD40);
  sub_1000586C0((uint64_t)v24, (uint64_t)v29, (uint64_t *)&unk_10040FD40);
  char v9 = v30;
  if (v7 == 3)
  {
    if (v9 != 3) {
      return sub_10026C4C0();
    }
  }

  else if (v9 == 3 || ((0x801004u >> (8 * v7)) & 0xFFC) != ((0x801004u >> (8 * v9)) & 0xFFC))
  {
    return sub_10026C4C0();
  }

  sub_10026BE3C((uint64_t)v16);
  sub_100270244(v16);
  if (((unint64_t)v17 << 32 != 0x300000000LL) != ((unint64_t)BYTE12(v22) << 32 == 0x300000000LL))
  {
    sub_10026BE3C((uint64_t)v18);
    v21[0]  = v19;
    v21[1]  = v20;
    uint64_t v10 = *((void *)&v20 + 1);
    swift_bridgeObjectRetain(*((void *)&v20 + 1));
    sub_100270244(v18);
    LOBYTE(v10)  = sub_1003274D0(v10, *((uint64_t *)&v23 + 1));
    sub_1000FB9E4((uint64_t)v21);
    if ((v10 & 1) != 0) {
      return (uint64_t *)sub_10026C608();
    }
  }

  return sub_10026C4C0();
}

uint64_t sub_10026BE3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + qword_10040D848);
  uint64_t v4 = *(void *)(v1 + qword_10040D848);
  unint64_t v5 = *(void *)(v1 + qword_10040D848 + 8);
  unint64_t v7 = *(void *)(v1 + qword_10040D848 + 16);
  uint64_t v6 = *(void *)(v1 + qword_10040D848 + 24);
  uint64_t v8 = *(void *)(v1 + qword_10040D848 + 32);
  uint64_t v9 = *(void *)(v1 + qword_10040D848 + 40);
  uint64_t v10 = *(void *)(v1 + qword_10040D848 + 48);
  if (v4)
  {
    char v31 = v5 & 1;
    uint64_t v11 = (v5 >> 8) & 1;
    unint64_t v12 = HIDWORD(v7);
    __int128 v13 = *(void **)(v1 + qword_10040D848);
    unint64_t v14 = v7 >> 40;
    uint64_t v33 = *(void *)(v1 + qword_10040D848 + 16);
    uint64_t v15 = *(void *)(v1 + qword_10040D848 + 24);
    uint64_t v16 = *(void *)(v1 + qword_10040D848 + 32);
    unsigned __int8 v17 = (void *)v9;
    __int16 v18 = (void *)v10;
  }

  else
  {
    unint64_t v30 = *(void *)(v1 + qword_10040D848 + 8);
    uint64_t v28 = *(void *)(v1 + qword_10040D848 + 32);
    uint64_t v29 = *(void *)(v1 + qword_10040D848 + 24);
    uint64_t v19 = *(void *)(v1 + qword_10040D848 + 40);
    uint64_t v11 = v10;
    __int128 v20 = Channel.nanPrimary.unsafeMutableAddressor();
    unint64_t v12 = *((unsigned __int8 *)v20 + 4);
    unint64_t v14 = *((unsigned __int8 *)v20 + 5);
    uint64_t v33 = *v20;
    uint64_t v32 = *v3;
    uint64_t v26 = v3[2];
    uint64_t v27 = v3[1];
    uint64_t v24 = v3[4];
    uint64_t v25 = v3[3];
    uint64_t v23 = v3[5];
    __int128 v13 = _swiftEmptyDictionarySingleton;
    uint64_t v22 = v3[6];
    *uint64_t v3 = (uint64_t)_swiftEmptyDictionarySingleton;
    v3[1]  = 0LL;
    uint64_t v15 = 0x300000000LL;
    v3[2]  = v33 | (v12 << 32) | (v14 << 40);
    *(int64x2_t *)(v3 + 3)  = vdupq_n_s64(0x300000000uLL);
    unsigned __int8 v17 = _swiftEmptyArrayStorage;
    v3[5]  = (uint64_t)_swiftEmptyArrayStorage;
    v3[6]  = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRetain_n(_swiftEmptyArrayStorage, 2LL);
    sub_1002702CC(v32, v27, v26, v25, v24, v23, v22);
    uint64_t v10 = v11;
    uint64_t v9 = v19;
    uint64_t v8 = v28;
    uint64_t v6 = v29;
    unint64_t v5 = v30;
    uint64_t v4 = 0LL;
    char v31 = 0;
    LOBYTE(v11)  = 0;
    uint64_t v16 = 0x300000000LL;
    __int16 v18 = _swiftEmptyArrayStorage;
  }

  uint64_t result = sub_100270304(v4, v5, v7, v6, v8, v9, v10);
  *(void *)a1  = v13;
  *(_BYTE *)(a1 + 8)  = v31;
  *(_BYTE *)(a1 + 9)  = v11;
  *(_DWORD *)(a1 + 16)  = v33;
  *(_BYTE *)(a1 + 20)  = v12;
  *(_BYTE *)(a1 + 21)  = v14;
  *(_DWORD *)(a1 + 24)  = v15;
  *(_WORD *)(a1 + 28)  = WORD2(v15);
  *(_DWORD *)(a1 + 32)  = v16;
  *(_WORD *)(a1 + 36)  = WORD2(v16);
  *(void *)(a1 + 40)  = v17;
  *(void *)(a1 + 48)  = v18;
  return result;
}

uint64_t *sub_10026BFE4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 9);
  uint64_t v5 = *((unsigned int *)a1 + 4);
  uint64_t v6 = *((unsigned __int8 *)a1 + 20);
  uint64_t v7 = *((unsigned __int8 *)a1 + 21);
  unint64_t v8 = *((unsigned int *)a1 + 6) | ((unint64_t)*((unsigned __int16 *)a1 + 14) << 32);
  unint64_t v9 = *((unsigned int *)a1 + 8) | ((unint64_t)*((unsigned __int16 *)a1 + 18) << 32);
  uint64_t v10 = a1[1] & 1;
  sub_10026BE3C((uint64_t)v20);
  uint64_t v11 = v1 + qword_10040D848;
  uint64_t v12 = *(void *)(v1 + qword_10040D848);
  uint64_t v13 = *(void *)(v1 + qword_10040D848 + 8);
  uint64_t v14 = *(void *)(v1 + qword_10040D848 + 16);
  uint64_t v15 = *(void *)(v1 + qword_10040D848 + 24);
  uint64_t v16 = *(void *)(v1 + qword_10040D848 + 32);
  uint64_t v17 = *(void *)(v1 + qword_10040D848 + 40);
  uint64_t v18 = *(void *)(v1 + qword_10040D848 + 48);
  *(void *)uint64_t v11 = v3;
  *(void *)(v11 + 8)  = v10 & 0xFFFFFFFFFFFFFEFFLL | ((unint64_t)(v4 & 1) << 8);
  *(void *)(v11 + 16)  = v5 | (v6 << 32) | (v7 << 40);
  *(void *)(v11 + 24)  = v8;
  *(void *)(v11 + 32)  = v9;
  *(_OWORD *)(v11 + 40)  = *(_OWORD *)(a1 + 5);
  sub_1002702CC(v12, v13, v14, v15, v16, v17, v18);
  sub_10026BC44((uint64_t)v20);
  return sub_100270244(v20);
}

uint64_t sub_10026C0B4()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_10026C0E8();
  return v1;
}

uint64_t sub_10026C0E8()
{
  *(void *)(v0 + qword_10040D838)  = 0LL;
  swift_weakInit(v0 + qword_100410AB0, 0LL);
  *(void *)(v0 + qword_10040D840)  = 0LL;
  swift_weakInit(v0 + qword_100410AB8, 0LL);
  swift_weakInit(v0 + qword_100410AC0, 0LL);
  uint64_t v1 = v0 + qword_10040D848;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16)  = 0u;
  *(_OWORD *)(v1 + 32)  = 0u;
  *(void *)(v1 + 48)  = 0LL;
  *(void *)(v0 + qword_10040D850)  = &_swiftEmptyDictionarySingleton;
  return v0;
}

uint64_t *sub_10026C1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  type metadata accessor for UUID(0LL);
  __chkstk_darwin();
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (uint64_t *)&v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v17 = (void *)*v16;
  *uint64_t v15 = *v16;
  (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchPredicate.onQueue(_:),  v12);
  id v18 = v17;
  LOBYTE(v17)  = _dispatchPreconditionTest(_:)(v15);
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v15, v12);
  if ((v17 & 1) != 0)
  {
    dispatch thunk of Identifiable.id.getter(a2, a4);
    v22[3]  = a2;
    v22[4]  = a3;
    __int128 v20 = sub_10002278C(v22);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v20, a1, a2);
    swift_beginAccess(v5 + qword_10040D850, v21, 33LL, 0LL);
    sub_1002E9284((uint64_t)v22, (uint64_t)v11);
    swift_endAccess(v21);
    return sub_10026C4C0();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t *sub_10026C344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v15 = (void *)*v14;
  uint64_t *v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchPredicate.onQueue(_:),  v10);
  id v16 = v15;
  LOBYTE(v15)  = _dispatchPreconditionTest(_:)(v13);
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) != 0)
  {
    dispatch thunk of Identifiable.id.getter(a2, v20);
    swift_beginAccess(v4 + qword_10040D850, v21, 33LL, 0LL);
    double v18 = sub_1002F8134((uint64_t)v9, (uint64_t)v22);
    (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v18);
    sub_1000225EC((uint64_t)v22, &qword_10040DA50);
    swift_endAccess(v21);
    return sub_10026C4C0();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t *sub_10026C4C0()
{
  int v1 = v18;
  __int16 v2 = v19;
  int v3 = v20;
  __int16 v4 = v21;
  int v5 = v22;
  __int16 v6 = v23;
  uint64_t v7 = v24;
  swift_bridgeObjectRetain(v24);
  sub_100270244(v17);
  sub_10026BE3C((uint64_t)&v25);
  sub_100270244(&v25);
  char v8 = v26;
  sub_10026BE3C((uint64_t)&v27);
  sub_100270244(&v27);
  *(void *)&__int128 v13 = _swiftEmptyDictionarySingleton;
  BYTE8(v13)  = v8;
  BYTE9(v13)  = v28;
  LODWORD(v14)  = v1;
  WORD2(v14)  = v2;
  WORD6(v14)  = v4;
  DWORD2(v14)  = v3;
  WORD2(v15)  = v6;
  LODWORD(v15)  = v5;
  unint64_t v9 = (void *)(v0 + qword_10040D850);
  *((void *)&v15 + 1)  = v7;
  id v16 = _swiftEmptyArrayStorage;
  swift_beginAccess(v0 + qword_10040D850, v31, 0LL, 0LL);
  uint64_t v10 = *v9;
  uint64_t v11 = swift_bridgeObjectRetain(*v9);
  sub_1002699A0(v11, (uint64_t)&v13);
  swift_bridgeObjectRelease(v10);
  v29[0]  = v13;
  v29[1]  = v14;
  v29[2]  = v15;
  unint64_t v30 = v16;
  sub_100270288(v29);
  sub_10026BFE4(v29);
  return sub_100270244((uint64_t *)v29);
}

uint64_t sub_10026C608()
{
  uint64_t v1 = v0;
  sub_10026BE3C((uint64_t)v7);
  uint64_t v2 = sub_10026A4B8();
  sub_100270288(v7);
  int v3 = sub_1002FB0CC(v2, (char *)v7);
  sub_100270244(v7);
  swift_bridgeObjectRelease(v2);
  sub_100270244(v7);
  Strong  = swift_weakLoadStrong(v1 + qword_100410AB8);
  if (Strong)
  {
    uint64_t v5 = Strong;
    if ((*(_BYTE *)(Strong + *(void *)(*(void *)Strong + 664LL)) & 1) != 0)
    {
      sub_1002EA4C4((uint64_t)v3);
      return swift_release(v5);
    }

    swift_release(Strong);
  }

  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10026C6C8()
{
  uint64_t v1 = v0 + qword_100410AA8;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + qword_10040D838));
  swift_weakDestroy(v0 + qword_100410AB0);
  swift_release(*(void *)(v0 + qword_10040D840));
  swift_weakDestroy(v0 + qword_100410AB8);
  swift_weakDestroy(v0 + qword_100410AC0);
  sub_1002702CC( *(void *)(v0 + qword_10040D848),  *(void *)(v0 + qword_10040D848 + 8),  *(void *)(v0 + qword_10040D848 + 16),  *(void *)(v0 + qword_10040D848 + 24),  *(void *)(v0 + qword_10040D848 + 32),  *(void *)(v0 + qword_10040D848 + 40),  *(void *)(v0 + qword_10040D848 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + qword_10040D850));
  return v0;
}

uint64_t sub_10026C78C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t *sub_10026C7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10026C1C8(a1, a2, a3, a4);
}

uint64_t *sub_10026C7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10026C344(a1, a2, a3, a4);
}

uint64_t sub_10026C7F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 == 2)
  {
    if ((a4 & 1) == 0)
    {
      uint64_t v36 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v37 = *v36;
      char v38 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v39 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v37, *v38, *v38, *v38);
      uint64_t v77 = v40;
      uint64_t v78 = v39;
      uint64_t v42 = v41;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a7,  a6,  &protocol requirements base descriptor for RadioSchedule);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a7,  a6,  AssociatedTypeWitness,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
      __int16 v45 = *(void (**)(void))(AssociatedConformanceWitness + 32);
      uint64_t v46 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
      ((void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v45)( v78,  v77,  v42,  0LL,  2LL,  a3,  v46,  AssociatedConformanceWitness);
      uint64_t v47 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v38, *v36, *v38, *v38);
      v45(v47);
      uint64_t v48 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v38, *v38, *v36, *v38);
      v45(v48);
      uint64_t v49 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v38, *v38, *v38, *v36);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v45)( v49,  v50,  v51,  1LL,  0LL,  a3,  v46,  AssociatedConformanceWitness);
    }
  }

  else if (v10 == 1)
  {
    if ((a4 & 1) != 0 || (a5 & 1) != 0)
    {
      int64_t v65 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
      unint64_t v66 = *v65;
      uint64_t v67 = v65[1];
      uint64_t v68 = v65[2];
      uint64_t v69 = swift_getAssociatedTypeWitness(255LL, a7, a6, &protocol requirements base descriptor for RadioSchedule);
      uint64_t v70 = swift_getAssociatedConformanceWitness( a7,  a6,  v69,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
      __n128 v71 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 32);
      uint64_t v72 = swift_checkMetadataState(0LL, v69);
      v71(v66, v67, v68, 1LL, 2LL, a3, v72, v70);
      unint64_t v73 = TimeBitmap.inverted()(*v65, v65[1], v65[2]);
      return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))v71)( v73,  v74,  v75,  0LL,  0LL,  a3,  v72,  v70);
    }

    else
    {
      __int16 v21 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v22 = *v21;
      __int16 v23 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v76 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v22, *v23, *v23, *v23);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v28 = swift_getAssociatedTypeWitness(255LL, a7, a6, &protocol requirements base descriptor for RadioSchedule);
      uint64_t v29 = swift_getAssociatedConformanceWitness( a7,  a6,  v28,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
      unint64_t v30 = *(void (**)(void))(v29 + 32);
      uint64_t v31 = swift_checkMetadataState(0LL, v28);
      ((void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v30)( v76,  v25,  v27,  0LL,  2LL,  a3,  v31,  v29);
      uint64_t v32 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v23, *v21, *v23, *v23);
      v30(v32);
      uint64_t v33 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v23, *v23, *v21, *v21);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))v30)( v33,  v34,  v35,  0LL,  0LL,  a3,  v31,  v29);
    }
  }

  else if (v10)
  {
    __int16 v52 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
    char v53 = *v52;
    unint64_t v54 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
    uint64_t v55 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v53, *v54, *v54, *v54);
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    uint64_t v60 = swift_getAssociatedTypeWitness(255LL, a7, a6, &protocol requirements base descriptor for RadioSchedule);
    uint64_t v61 = swift_getAssociatedConformanceWitness( a7,  a6,  v60,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
    uint64_t v62 = *(uint64_t (**)(void))(v61 + 32);
    uint64_t v63 = swift_checkMetadataState(0LL, v60);
    ((void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v62)( v55,  v57,  v59,  0LL,  2LL,  a3,  v63,  v61);
    uint64_t v64 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v54, *v52, *v54, *v54);
    return v62(v64);
  }

  else
  {
    uint64_t v11 = (uint64_t *)TimeBitmap.all.unsafeMutableAddressor();
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = v11[2];
    uint64_t v15 = swift_getAssociatedTypeWitness(255LL, a7, a6, &protocol requirements base descriptor for RadioSchedule);
    uint64_t v16 = swift_getAssociatedConformanceWitness( a7,  a6,  v15,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 32);
    uint64_t v18 = swift_checkMetadataState(0LL, v15);
    return v17(v12, v13, v14, 1LL, 2LL, a3, v18, v16);
  }

  return result;
}

uint64_t sub_10026CCD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v25 = a13;
  unint64_t v27 = a11;
  uint64_t v26 = a12;
  switch(v21)
  {
    case 0LL:
      uint64_t v28 = (uint64_t *)TimeBitmap.all.unsafeMutableAddressor();
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = v28[2];
      goto LABEL_19;
    case 1LL:
      if ((a6 & 1) != 0
        || a7 == 1
        && (unsigned int v76 = *(_DWORD *)(a2 + 32),
            swift_bridgeObjectRetain(a2),
            LOBYTE(v76)  = Channel.isDFS.getter(v76),
            swift_bridgeObjectRelease(a2),
            unint64_t v27 = a11,
            uint64_t v26 = a12,
            uint64_t v25 = a13,
            (v76 & 1) != 0))
      {
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a18,  a17,  &protocol requirements base descriptor for RadioSchedule);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a18,  a17,  AssociatedTypeWitness,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
        uint64_t v35 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
        uint64_t v36 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
        v35(a8, a9, a10, a3, a4, a5, v36, AssociatedConformanceWitness);
        unint64_t v37 = TimeBitmap.inverted()(a8, a9, a10);
        return ((uint64_t (*)(unint64_t))v35)(v37);
      }

      else
      {
        unint64_t v77 = v27;
        uint64_t v78 = v26;
        uint64_t v79 = v25;
        v80  = swift_getAssociatedTypeWitness(255LL, a18, a17, &protocol requirements base descriptor for RadioSchedule);
        uint64_t v81 = swift_getAssociatedConformanceWitness( a18,  a17,  v80,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
        uint64_t v82 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 32);
        uint64_t v83 = swift_checkMetadataState(0LL, v80);
        v82(v77, v78, v79, a3, a4, a5, v83, v81);
        unint64_t v84 = TimeBitmap.inverted()(v77, v78, v79);
        return ((uint64_t (*)(unint64_t))v82)(v84);
      }

    case 2LL:
      unsigned int v39 = *(_DWORD *)(a2 + 32);
      swift_bridgeObjectRetain(a2);
      if (Channel.isDFS.getter(v39) || Channel.isDFS.getter(*(_DWORD *)(a2 + 40))) {
        goto LABEL_13;
      }
      swift_bridgeObjectRelease(a2);
      if ((a6 & 1) != 0)
      {
        if (*(_BYTE *)(a2 + 38) == 1)
        {
LABEL_9:
          uint64_t v40 = 1LL;
LABEL_42:
          uint64_t v99 = swift_getAssociatedTypeWitness( 255LL,  a18,  a17,  &protocol requirements base descriptor for RadioSchedule);
          uint64_t v100 = swift_getAssociatedConformanceWitness( a18,  a17,  v99,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
          __n128 v71 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 32);
          uint64_t v101 = swift_checkMetadataState(0LL, v99);
          v71(a11, a12, a13, a3, a4, a5, v101, v100);
          v71(a14, a15, a16, v40, 0LL, a5, v101, v100);
          char v102 = *(_BYTE *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
          uint64_t v103 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
          uint64_t v75 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v102, v102, *v103, *v103);
          return ((uint64_t (*)(uint64_t))v71)(v75);
        }

        if (*(_BYTE *)(a2 + 46) == 1)
        {
LABEL_41:
          uint64_t v40 = 0LL;
          goto LABEL_42;
        }
      }

      else if (a7 == 1)
      {
        uint64_t v85 = swift_bridgeObjectRetain(a2);
        uint64_t v86 = sub_100270424(v85);
        swift_bridgeObjectRelease(a2);
        uint64_t v87 = *(void *)(v86 + 16);
        swift_bridgeObjectRelease(v86);
        if (v87 == 1)
        {
          if (Channel.isDFS.getter(*(_DWORD *)(a2 + 32))) {
            goto LABEL_9;
          }
          if (Channel.isDFS.getter(*(_DWORD *)(a2 + 40))) {
            goto LABEL_41;
          }
        }
      }

      unint64_t v117 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v88 = *v117;
      uint64_t v115 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v89 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v88, v88, *v115, *v115);
      uint64_t v119 = v90;
      uint64_t v92 = v91;
      uint64_t v93 = swift_getAssociatedTypeWitness(255LL, a18, a17, &protocol requirements base descriptor for RadioSchedule);
      uint64_t v94 = swift_getAssociatedConformanceWitness( a18,  a17,  v93,  &protocol requirements base descriptor for RadioSchedule,  &associated conformance descriptor for RadioSchedule.RadioSchedule.Map: RadioMap);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 32);
      uint64_t v95 = swift_checkMetadataState(0LL, v93);
      v50(v89, v119, v92, a3, a4, a5, v95, v94);
      if ((*(_BYTE *)(a2 + 39) & 1) == 0)
      {
        if ((*(_BYTE *)(a2 + 47) & 1) == 0)
        {
          uint64_t v98 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v115, *v115, *v117, *v115);
          ((void (*)(uint64_t))v50)(v98);
          char v96 = *v117;
          char v97 = *v115;
          goto LABEL_39;
        }

double NANQualityOfService.update<A>(schedule:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 5)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1) != 0)
    {
      uint64_t v7 = a1;
      int v8 = 6;
      goto LABEL_7;
    }

    uint64_t v10 = a1;
    uint64_t v11 = 6LL;
    return sub_10026EE20(v10, v11, a3, a4);
  }

  if (a2 == 4)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1) != 0)
    {
      uint64_t v7 = a1;
      int v8 = 0;
LABEL_7:
      sub_10026E818(v7, v8, a3, a4);
      return result;
    }

    uint64_t v10 = a1;
    uint64_t v11 = 0LL;
    return sub_10026EE20(v10, v11, a3, a4);
  }

  return result;
}

double sub_10026D784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NANQualityOfService.update<A>(schedule:)(a1, *v3, a2, a3);
}

void *sub_10026D794(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100002274((uint64_t *)&unk_10040CD70);
  __int16 v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  void v4[2] = v1;
  v4[3]  = 2 * (v6 >> 4);
  uint64_t v7 = sub_10026E218((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100057324(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10026D878(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100002274(&qword_10040F230);
  __int16 v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  void v4[2] = v1;
  v4[3]  = 2 * (v6 >> 3);
  uint64_t v7 = sub_10026E414(&v10, (uint64_t)(v4 + 4), v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100057324(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10026D95C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100002274(&qword_10040D7E8);
  uint64_t v4 = swift_allocObject(v3, v1 + 32, 7LL);
  size_t v5 = j__malloc_size((const void *)v4);
  *(void *)(v4 + 16)  = v1;
  *(void *)(v4 + 24)  = 2 * v5 - 64;
  uint64_t v6 = sub_10026E5B8(&v9, (_BYTE *)(v4 + 32), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100057324(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return (void *)v4;
}

Swift::Int sub_10026DA30(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_10026E74C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0]  = v2 + 32;
  v5[1]  = v3;
  Swift::Int result = sub_10026DA98(v5);
  *a1  = v2;
  return result;
}

Swift::Int sub_10026DA98(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v86 = *a1;
      uint64_t v87 = *a1 + 8;
      uint64_t v88 = -1LL;
      uint64_t v89 = 1LL;
      while (1)
      {
        uint64_t v90 = v87;
        uint64_t v91 = v88;
        do
        {
          int v92 = *(_DWORD *)v90;
          if (*(_DWORD *)v90 >= *(_DWORD *)(v90 - 8)) {
            break;
          }
          if (!v86) {
            goto LABEL_147;
          }
          __int16 v93 = *(_WORD *)(v90 + 4);
          *(void *)uint64_t v90 = *(void *)(v90 - 8);
          *(_DWORD *)(v90 - 8)  = v92;
          *(_WORD *)(v90 - 4)  = v93;
          v90 -= 8LL;
        }

        while (!__CFADD__(v91++, 1LL));
        ++v89;
        --v88;
        v87 += 8LL;
        if (v89 == v3) {
          return result;
        }
      }
    }

    goto LABEL_143;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_152:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  Swift::Int v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst  = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_109;
    }

    uint64_t v103 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Channel);
    *(void *)(v8 + 16)  = v7;
    uint64_t v103 = (void *)v8;
    __dst  = (char *)(v8 + 32);
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 16;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v104 = v6;
  v105  = v3;
  uint64_t v106 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = *(_DWORD *)(v11 + 8 * v10);
      uint64_t v16 = 8 * v14;
      unsigned int v17 = *(_DWORD *)(v11 + 8 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (_DWORD *)(v102 + 8 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 2))
        {
          v18 += 2;
          if (v3 == ++v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }

      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_144;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 8 * v10 - 8;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_150;
              }
              __int16 v23 = (void *)(v11 + v16);
              int v24 = *(_DWORD *)(v11 + v16);
              char v25 = *(_BYTE *)(v11 + v16 + 4);
              char v26 = *(_BYTE *)(v11 + v16 + 5);
              uint64_t v22 = v11 + v19;
              *(_DWORD *)uint64_t v22 = v24;
              *(_BYTE *)(v22 + 4)  = v25;
              *(_BYTE *)(v22 + 5)  = v26;
            }

            ++v21;
            v19 -= 8LL;
            v16 += 8LL;
          }

          while (v21 < v20);
        }
      }
    }

    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14)) {
        goto LABEL_142;
      }
      if (v10 - v14 < v6)
      {
        Swift::Int v27 = v14 + v6;
        if (__OFADD__(v14, v6)) {
          goto LABEL_145;
        }
        if (v27 >= v3) {
          Swift::Int v27 = v3;
        }
        if (v27 < v14) {
          goto LABEL_146;
        }
        if (v10 != v27)
        {
          uint64_t v28 = (int *)(v11 + 8 * v10);
          do
          {
            uint64_t v29 = v28;
            Swift::Int v30 = v14;
            do
            {
              int v31 = *v29;
              if (!v11) {
                goto LABEL_148;
              }
              __int16 v32 = *((_WORD *)v29 + 2);
              *(void *)uint64_t v29 = *((void *)v29 - 1);
              *(v29 - 2)  = v31;
              *((_WORD *)v29 - 2)  = v32;
              ++v30;
              v29 -= 2;
            }

            while (v10 != v30);
            ++v10;
            v28 += 2;
          }

          while (v10 != v27);
          Swift::Int v10 = v27;
        }
      }
    }

    if (v10 < v14)
    {
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
      uint64_t v12 = sub_1000EA720(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    unint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    uint64_t v11 = v106;
    if (v34 >= v33 >> 1)
    {
      uint64_t v83 = sub_1000EA720((char *)(v33 > 1), v34 + 1, 1, v12);
      uint64_t v11 = v106;
      uint64_t v12 = v83;
    }

    *((void *)v12 + 2)  = v13;
    uint64_t v35 = v12 + 32;
    uint64_t v36 = &v12[16 * v34 + 32];
    *(void *)uint64_t v36 = v14;
    *((void *)v36 + 1)  = v10;
    if (v34) {
      break;
    }
    unint64_t v13 = 1LL;
LABEL_15:
    Swift::Int v6 = v104;
    Swift::Int v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
LABEL_109:
      uint64_t v85 = v12;
      uint64_t v103 = v9;
      if (v13 < 2) {
        goto LABEL_99;
      }
      uint64_t v95 = *v101;
      while (1)
      {
        unint64_t v96 = v13 - 2;
        if (v13 < 2) {
          break;
        }
        if (!v95) {
          goto LABEL_151;
        }
        unint64_t v84 = v85;
        uint64_t v97 = *(void *)&v85[16 * v96 + 32];
        uint64_t v98 = *(void *)&v85[16 * v13 + 24];
        sub_1000820E4( (char *)(v95 + 8 * v97),  (char *)(v95 + 8LL * *(void *)&v85[16 * v13 + 16]),  v95 + 8 * v98,  __dst);
        if (v1) {
          goto LABEL_98;
        }
        if (v98 < v97) {
          goto LABEL_139;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v84) & 1) == 0) {
          unint64_t v84 = sub_1000EAA0C((uint64_t)v84);
        }
        if (v96 >= *((void *)v84 + 2)) {
          goto LABEL_140;
        }
        uint64_t v99 = &v84[16 * v96 + 32];
        *(void *)uint64_t v99 = v97;
        *((void *)v99 + 1)  = v98;
        unint64_t v100 = *((void *)v84 + 2);
        if (v13 > v100) {
          goto LABEL_141;
        }
        memmove(&v84[16 * v13 + 16], &v84[16 * v13 + 32], 16 * (v100 - v13));
        uint64_t v85 = v84;
        *((void *)v84 + 2)  = v100 - 1;
        unint64_t v13 = v100 - 1;
        if (v100 <= 2) {
          goto LABEL_99;
        }
      }

char *sub_10026E188(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    char v7 = 2;
    Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v7,  1046LL,  0);
    __break(1u);
  }

  else
  {
    Swift::Int result = (char *)*a1;
    if (result != v3 || result >= &v3[v4]) {
      return (char *)memmove(result, v3, v4);
    }
  }

  return result;
}

uint64_t sub_10026E218(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1]  = v6;
    v5[2]  = ~v7;
    v5[3]  = v12;
    v5[4]  = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    Swift::Int v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1]  = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    Swift::Int result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void *sub_10026E414(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3  = 0LL;
LABEL_35:
    *Swift::Int result = a4;
    result[1]  = v4;
    result[2]  = ~v6;
    result[3]  = v8;
    result[4]  = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 8 * v12;
    int v14 = *(_DWORD *)v13;
    LOWORD(v13)  = *(_WORD *)(v13 + 4);
    *(_DWORD *)a2  = v14;
    *(_WORD *)(a2 + 4)  = v13;
    a2 += 8LL;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v15;
    goto LABEL_34;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }

  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }

  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3  = v9;
    goto LABEL_35;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }

void *sub_10026E5B8(void *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3  = 0LL;
LABEL_35:
    *Swift::Int result = a4;
    result[1]  = v4;
    result[2]  = ~v6;
    result[3]  = v8;
    result[4]  = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++  = *(_BYTE *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3  = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

uint64_t sub_10026E74C(uint64_t a1)
{
  return sub_100267FE8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10026E760(uint64_t a1)
{
  return sub_100268908(0, *(void *)(a1 + 16), 0, (char *)a1);
}

BOOL sub_10026E774(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = type metadata accessor for PriorityRadioConstraint(0LL);
  uint64_t v5 = v4;
  if ((static RadioResources.SymbolicChannel.__derived_enum_equals(_:_:)( *(void *)(a1 + *(int *)(v4 + 24)),  *(_BYTE *)(a1 + *(int *)(v4 + 24) + 8),  *(void *)(a2 + *(int *)(v4 + 24)),  *(_BYTE *)(a2 + *(int *)(v4 + 24) + 8)) & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = *(int *)(v5 + 28);
  return static TimeBitmap.SlotsView.== infix(_:_:)( *(void *)(a1 + v6),  *(void *)(a1 + v6 + 8),  *(void *)(a1 + v6 + 16),  *(void *)(a2 + v6),  *(void *)(a2 + v6 + 8),  *(void *)(a2 + v6 + 16));
}

void sub_10026E818(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v55 = a2;
  uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v7 = v54(a3, a4);
  uint64_t v8 = sub_10026ECF4(v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = *(void *)(v8 + 16);
  __n128 v10 = swift_bridgeObjectRelease(v8);
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a4 + 40);
  uint64_t v77 = a3;
  uint64_t v78 = a4;
  uint64_t v12 = v11(a3, a4, v10);
  uint64_t v57 = *(void *)(v12 + 16);
  if (!v57)
  {
    swift_bridgeObjectRelease(v12);
    return;
  }

  unint64_t v13 = 0LL;
  v51[1]  = v9 == 1;
  uint64_t v56 = v12 + 32;
  uint64_t v53 = a1;
  uint64_t v52 = v12;
  while (v13 < *(void *)(v12 + 16))
  {
    int v15 = *(unsigned __int8 *)(v56 + v13);
    if (!*(_BYTE *)(v56 + v13))
    {
      unint64_t v76 = v13;
      Swift::Int v27 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
      uint64_t v28 = *v27;
      uint64_t v73 = v27[1];
      uint64_t v74 = v28;
      uint64_t v29 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v30 = *v29;
      int v31 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v32 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v30, *v31, *v31, *v31);
      uint64_t v71 = v33;
      uint64_t v72 = v32;
      uint64_t v70 = v34;
      uint64_t v35 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v31, *v29, *v31, *v31);
      uint64_t v68 = v36;
      uint64_t v69 = v35;
      uint64_t v66 = 0LL;
      unint64_t v67 = v37;
      goto LABEL_11;
    }

    if (v15 == 1)
    {
      unint64_t v76 = v13;
      unint64_t v16 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
      uint64_t v17 = *v16;
      uint64_t v73 = v16[1];
      uint64_t v74 = v17;
      unint64_t v18 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      char v19 = *v18;
      Swift::Int v20 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      uint64_t v21 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v19, *v20, *v18, *v18);
      uint64_t v71 = v22;
      uint64_t v72 = v21;
      uint64_t v70 = v23;
      uint64_t v24 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v20, *v18, *v18, *v18);
      uint64_t v68 = v25;
      uint64_t v69 = v24;
      uint64_t v66 = 1LL;
      unint64_t v67 = v26;
LABEL_11:
      uint64_t v38 = v54(v77, v78);
      uint64_t v39 = *(void *)(v38 + 16);
      int v75 = v15;
      uint64_t v65 = v38;
      if (v39)
      {
        if (v15) {
          int v40 = 16;
        }
        else {
          int v40 = 4;
        }
        char v41 = (char *)(v38 + 39);
        unint64_t v14 = _swiftEmptyArrayStorage;
        LODWORD(v79)  = v40;
        while (1)
        {
          int v45 = *(_DWORD *)(v41 - 7);
          int v46 = *(v41 - 3);
          char v47 = *(v41 - 2);
          char v48 = *(v41 - 1);
          char v49 = *v41;
          if (*(v41 - 3))
          {
            if (v46 == 1 && v40 == 16)
            {
LABEL_25:
              isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(v14);
              v80  = v14;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1000698F0(0, v14[2] + 1LL, 1);
                unint64_t v14 = v80;
              }

              unint64_t v43 = v14[2];
              unint64_t v42 = v14[3];
              if (v43 >= v42 >> 1)
              {
                sub_1000698F0(v42 > 1, v43 + 1, 1);
                unint64_t v14 = v80;
              }

              v14[2]  = v43 + 1;
              uint64_t v44 = &v14[v43];
              *((_DWORD *)v44 + 8)  = v45;
              *((_BYTE *)v44 + 36)  = v46;
              *((_BYTE *)v44 + 37)  = v47;
              *((_BYTE *)v44 + 38)  = v48;
              *((_BYTE *)v44 + 39)  = v49;
              int v40 = (int)v79;
            }
          }

          else if (v40 == 4)
          {
            goto LABEL_25;
          }

          v41 += 8;
          if (!--v39) {
            goto LABEL_4;
          }
        }
      }

      unint64_t v14 = _swiftEmptyArrayStorage;
LABEL_4:
      unint64_t v58 = v67 >> 8;
      unint64_t v59 = v67 >> 16;
      unint64_t v60 = v67 >> 24;
      unint64_t v61 = HIDWORD(v67);
      unint64_t v62 = v67 >> 40;
      unint64_t v63 = HIWORD(v67);
      unint64_t v64 = HIBYTE(v67);
      swift_bridgeObjectRelease(v65);
      uint64_t v79 = v51;
      __chkstk_darwin();
      (*(void (**)(void))(v78 + 24))();
      swift_release(v14);
      uint64_t v12 = v52;
      unint64_t v13 = v76;
    }

    if (++v13 == v57)
    {
      swift_bridgeObjectRelease(v12);
      return;
    }
  }

  __break(1u);
}

uint64_t sub_10026ECF4(uint64_t result)
{
  unint64_t v1 = 0LL;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 24;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  uint64_t v5 = v3 + 8 * v1;
  unint64_t v6 = v4 + 1;
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v6 == ++v1) {
      break;
    }
    uint64_t v7 = (int *)(v5 + 8);
    int v8 = *(unsigned __int8 *)(v5 + 14);
    v5 += 8LL;
    if (v8 == 1)
    {
      uint64_t v16 = v3;
      int v9 = *v7;
      char v10 = *((_BYTE *)v7 + 4);
      char v11 = *((_BYTE *)v7 + 5);
      char v12 = *((_BYTE *)v7 + 7);
      Swift::Int result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0) {
        Swift::Int result = sub_1000698F0(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        Swift::Int result = sub_1000698F0(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v14 + 1;
      int v15 = &_swiftEmptyArrayStorage[v14];
      *((_DWORD *)v15 + 8)  = v9;
      *((_BYTE *)v15 + 36)  = v10;
      *((_BYTE *)v15 + 37)  = v11;
      *((_BYTE *)v15 + 38)  = 1;
      *((_BYTE *)v15 + 39)  = v12;
      uint64_t v3 = v16;
      goto LABEL_2;
    }
  }

  __break(1u);
  return result;
}

double sub_10026EE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v7 = v6(a3, a4);
  uint64_t v8 = v7;
  int64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v28 = v6;
    uint64_t v29 = v5;
    uint64_t v30 = v4;
    sub_100267EF8(0, v9, 0);
    unint64_t v10 = 0LL;
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = v11;
    do
    {
      int v13 = *(_DWORD *)(v8 + v10 + 32);
      char v14 = *(_BYTE *)(v8 + v10 + 36);
      char v15 = *(_BYTE *)(v8 + v10 + 37);
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      unint64_t v17 = v11 + 1;
      if (v11 >= v16 >> 1) {
        sub_100267EF8(v16 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v17;
      unint64_t v18 = &_swiftEmptyArrayStorage[v12 + v10 / 8];
      *((_DWORD *)v18 + 8)  = v13;
      *((_BYTE *)v18 + 36)  = v14;
      *((_BYTE *)v18 + 37)  = v15;
      v10 += 8LL;
      unint64_t v11 = v17;
      --v9;
    }

    while (v9);
    __n128 v19 = swift_bridgeObjectRelease(v8);
    uint64_t v5 = v29;
    uint64_t v4 = v30;
    unint64_t v6 = v28;
    uint64_t v20 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v28)(v29, v30, v19);
  }

  else
  {
    __n128 v21 = swift_bridgeObjectRelease(v7);
    uint64_t v20 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v6)(v5, v4, v21);
  }

  uint64_t v22 = v20;
  uint64_t v23 = sub_100270424(v20);
  swift_bridgeObjectRelease(v22);
  __n128 v24 = swift_bridgeObjectRelease(v23);
  uint64_t v25 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v6)(v5, v4, v24);
  uint64_t v26 = sub_10026ECF4(v25);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  __chkstk_darwin();
  (*(void (**)(void, uint64_t, uint64_t (*)(uint64_t)))(v4 + 24))(0LL, 2LL, sub_10027056C);
  *(void *)&double result = swift_bridgeObjectRelease(_swiftEmptyArrayStorage).n128_u64[0];
  return result;
}

uint64_t sub_10026F02C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = "\b";
    void v4[2] = &unk_10035E530;
    v4[3]  = "\b";
    v4[4]  = &unk_10035E530;
    v4[5]  = &unk_10035E530;
    v4[6]  = &unk_10035E548;
    void v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 8LL, v4, a1 + 112);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for RadioResourceManager(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for RadioResourceManager);
}

void *sub_10026F0D4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1  = *a2;
    a1  = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5])  = *((_BYTE *)a2 + a3[5]);
    int64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    *(void *)int64_t v9 = *(void *)v10;
    v9[8]  = v10[8];
    uint64_t v11 = a3[7];
    unint64_t v12 = (char *)a1 + v11;
    int v13 = (char *)a2 + v11;
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
    *((void *)v12 + 2)  = *((void *)v13 + 2);
  }

  return a1;
}

uint64_t sub_10026F190(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_10026F1C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5])  = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8)  = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16)  = *(void *)(v12 + 16);
  return a1;
}

uint64_t sub_10026F254(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5])  = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8)  = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8)  = *(void *)(v13 + 8);
  *(_BYTE *)(v12 + 16)  = *(_BYTE *)(v13 + 16);
  *(_BYTE *)(v12 + 17)  = *(_BYTE *)(v13 + 17);
  *(_BYTE *)(v12 + 18)  = *(_BYTE *)(v13 + 18);
  *(_BYTE *)(v12 + 19)  = *(_BYTE *)(v13 + 19);
  *(_BYTE *)(v12 + 20)  = *(_BYTE *)(v13 + 20);
  *(_BYTE *)(v12 + 21)  = *(_BYTE *)(v13 + 21);
  *(_BYTE *)(v12 + 22)  = *(_BYTE *)(v13 + 22);
  *(_BYTE *)(v12 + 23)  = *(_BYTE *)(v13 + 23);
  return a1;
}

uint64_t sub_10026F328(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5])  = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8)  = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16)  = *(void *)(v12 + 16);
  return a1;
}

uint64_t sub_10026F3B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5])  = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8)  = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16)  = *(void *)(v12 + 16);
  return a1;
}

uint64_t sub_10026F448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10026F454);
}

uint64_t sub_10026F454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 > 2) {
    return (v9 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10026F4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10026F4DC);
}

uint64_t sub_10026F4DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8)  = -(char)a2;
  return result;
}

uint64_t type metadata accessor for PriorityRadioConstraint(uint64_t a1)
{
  uint64_t result = qword_10040D930;
  if (!qword_10040D930) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PriorityRadioConstraint);
  }
  return result;
}

uint64_t sub_10026F594(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(result - 8) + 64LL;
    v4[1]  = &unk_10035E5A8;
    void v4[2] = &unk_10035E5C0;
    v4[3]  = &unk_10035E5D8;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10026F618(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0]  = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
    if (v4 <= 0x3F)
    {
      v5[1]  = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 0LL, 2LL, v5, a1 + 32);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_10026F6A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(v7 + 64) + v10;
  uint64_t v12 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(v9 + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain(v15);
  }

  else
  {
    uint64_t v16 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( ((unint64_t)a1 + v11) & v16,  ((unint64_t)a2 + v11) & v16,  v8);
  }

  return a1;
}

uint64_t sub_10026F778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))((*(void *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
}

uint64_t sub_10026F7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10026F858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10026F8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10026F950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10026F9CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = *(void *)(v7 + 64) + v13;
  if (a2 <= v12) {
    goto LABEL_23;
  }
  uint64_t v15 = (v14 & ~v13) + *(void *)(v10 + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v18 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      int v17 = *(_DWORD *)(a1 + v15);
      if (!v17) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v18 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v18 < 2)
    {
LABEL_23:
      if (v12)
      {
        else {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 48))( (v14 + a1) & ~v13,  *(unsigned int *)(v10 + 84),  v9);
        }
      }

      return 0LL;
    }
  }

  int v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15)) {
    goto LABEL_23;
  }
LABEL_14:
  int v19 = (v17 - 1) << v16;
  if ((_DWORD)v15)
  {
    else {
      int v20 = 4;
    }
    __asm { BR              X12 }
  }

  return v12 + v19 + 1;
}

void sub_10026FB5C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v9 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84)) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((*(void *)(v8 + 64) + v11) & ~v11) + *(void *)(v9 + 64);
  if (a3 <= v10)
  {
    unsigned int v13 = 0;
  }

  else if (v12 <= 3)
  {
    unsigned int v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v13 = &dword_100000004;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v13 = 2;
    }

    else
    {
      unsigned int v13 = v15 > 1;
    }
  }

  else
  {
    unsigned int v13 = &_mh_execute_header.magic + 1;
  }

  if (v10 < a2)
  {
    unsigned int v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        int v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, ((*(void *)(v8 + 64) + v11) & ~v11) + *(void *)(v9 + 64));
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1  = v16;
          a1[2]  = BYTE2(v16);
        }

        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1  = v16;
        }

        else
        {
          *a1  = v16;
        }
      }
    }

    else
    {
      bzero(a1, ((*(void *)(v8 + 64) + v11) & ~v11) + *(void *)(v9 + 64));
      *(_DWORD *)a1  = v14;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t type metadata accessor for RadioConstraint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RadioConstraint);
}

uint64_t destroy for RadioResourceSchedule(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for RadioResourceSchedule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1  = *a2;
  *(_WORD *)(a1 + 8)  = *((_WORD *)a2 + 4);
  *(_DWORD *)(a1 + 16)  = *((_DWORD *)a2 + 4);
  *(_WORD *)(a1 + 20)  = *((_WORD *)a2 + 10);
  *(_DWORD *)(a1 + 24)  = *((_DWORD *)a2 + 6);
  *(_WORD *)(a1 + 28)  = *((_WORD *)a2 + 14);
  *(_WORD *)(a1 + 36)  = *((_WORD *)a2 + 18);
  *(_DWORD *)(a1 + 32)  = *((_DWORD *)a2 + 8);
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[6];
  *(void *)(a1 + 40)  = v4;
  *(void *)(a1 + 48)  = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for RadioResourceSchedule(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8)  = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9)  = *((_BYTE *)a2 + 9);
  *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
  *((_BYTE *)a1 + 20)  = *((_BYTE *)a2 + 20);
  *((_BYTE *)a1 + 21)  = *((_BYTE *)a2 + 21);
  int v6 = *((_DWORD *)a2 + 6);
  *((_WORD *)a1 + 14)  = *((_WORD *)a2 + 14);
  *((_DWORD *)a1 + 6)  = v6;
  int v7 = *((_DWORD *)a2 + 8);
  *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
  *((_DWORD *)a1 + 8)  = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5]  = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6]  = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t *assignWithTake for RadioResourceSchedule(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1  = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8)  = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9)  = *((_BYTE *)a2 + 9);
  *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
  *((_WORD *)a1 + 10)  = *((_WORD *)a2 + 10);
  *((_DWORD *)a1 + 6)  = *((_DWORD *)a2 + 6);
  *((_WORD *)a1 + 14)  = *((_WORD *)a2 + 14);
  *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
  *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v5 = a1[6];
  *(_OWORD *)(a1 + 5)  = *(_OWORD *)(a2 + 5);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for RadioResourceSchedule()
{
  return &type metadata for RadioResourceSchedule;
}

_UNKNOWN **sub_10026FF88()
{
  return &off_1003F4AA0;
}

uint64_t sub_10026FF94()
{
  return sub_10000AF70(&qword_10040DA38, type metadata accessor for PriorityRadioConstraint, (uint64_t)&unk_10035E6E0);
}

uint64_t sub_10026FFC0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10035E7EC, a1);
}

void *sub_10026FFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v31 = swift_bridgeObjectRetain(a1);
  uint64_t v4 = (unsigned __int8 *)(v31 + 37);
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v10 = ((unint64_t)*v4 << 40) | ((unint64_t)*(v4 - 1) << 32) | *(unsigned int *)(v4 - 5);
    unint64_t v11 = NANBitmap.Channel.init(channel:)(v10);
    if ((v12 & 0x100) == 0)
    {
      if (*(void *)(a2 + 16))
      {
        unint64_t v13 = v11;
        char v14 = v12;
        uint64_t v15 = sub_100327824(v10);
        if ((v16 & 1) != 0)
        {
          int v17 = (unint64_t *)(*(void *)(a2 + 56) + 24 * v15);
          unint64_t v18 = *v17;
          unint64_t v19 = v17[1];
          unint64_t v20 = v17[2];
          __n128 v21 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
          if (!static TimeBitmap.SlotsView.== infix(_:_:)(v18, v19, v20, *v21, v21[1], v21[2]))
          {
            unsigned __int16 v22 = TimeBitmap.nanBitmap.getter(v18, v19, v20);
            uint64_t v24 = v23;
            unint64_t v26 = v25;
            unint64_t v27 = v13 & 0xFFFF00FFFFFF00FFLL | v32 & 0xFF000000FF00LL;
            static NANAvailabilityEntry.committedEntry(on:for:)(v27, v14 & 1, v22, v23, v25, (uint64_t)v33);
            sub_1000208D8(v24, v26);
            if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
              uint64_t v5 = sub_1000A70B4(0LL, v5[2] + 1LL, 1, v5);
            }
            unint64_t v29 = v5[2];
            unint64_t v28 = v5[3];
            unint64_t v32 = v27;
            if (v29 >= v28 >> 1) {
              uint64_t v5 = sub_1000A70B4((void *)(v28 > 1), v29 + 1, 1, v5);
            }
            v5[2]  = v29 + 1;
            int v6 = &v5[7 * v29];
            __int128 v7 = v33[0];
            __int128 v8 = v33[1];
            __int128 v9 = v33[2];
            *((_BYTE *)v6 + 80)  = v34;
            *((_OWORD *)v6 + 3)  = v8;
            *((_OWORD *)v6 + 4)  = v9;
            *((_OWORD *)v6 + 2)  = v7;
          }
        }
      }
    }

    v4 += 8;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(v31);
  return v5;
}

uint64_t sub_1002701D8(uint64_t a1)
{
  return sub_100270350(a1, &qword_100410AB8, sub_10026B904);
}

uint64_t sub_1002701EC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100270210()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100270234(uint64_t a1, void **a2)
{
  return sub_10026BBB0(a1, a2, *(void *)(v2 + 48));
}

uint64_t *sub_100270244(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void *sub_100270288(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1002702CC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a7);
  }

  return result;
}

uint64_t sub_100270304( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a7);
  }

  return result;
}

uint64_t sub_10027033C(uint64_t a1)
{
  return sub_100270350(a1, &qword_100410AB0, (uint64_t (*)(void))sub_10026B4D0);
}

uint64_t sub_100270350(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  return a3();
}

unint64_t sub_100270384()
{
  unint64_t result = qword_10040E390;
  if (!qword_10040E390)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for WiFiDriverCapabilities,  &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040E390);
  }

  return result;
}

double sub_1002703C8(uint64_t a1, uint64_t a2)
{
  return sub_10026B82C(a1, a2, *(void *)(v2 + 48));
}

uint64_t sub_1002703D8(uint64_t a1)
{
  return sub_10026CCD0( a1,  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48),  *(unsigned __int8 *)(v1 + 49),  *(_BYTE *)(v1 + 50),  *(_BYTE *)(v1 + 51),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 88),  *(void *)(v1 + 96),  *(void *)(v1 + 104),  *(void *)(v1 + 112),  *(void *)(v1 + 120),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t sub_100270424(uint64_t result)
{
  unint64_t v1 = 0LL;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 39;
  unint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v18 = result + 39;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  unint64_t v5 = v4 + 1;
  int v6 = (char *)(v3 + 8 * v1);
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)v19;
    }
    if (v5 == ++v1) {
      break;
    }
    __int128 v7 = v6 + 8;
    unsigned int v8 = *(_DWORD *)(v6 - 7);
    char v9 = *(v6 - 3);
    char v10 = *(v6 - 2);
    char v11 = *(v6 - 1);
    char v12 = *v6;
    unint64_t result = Channel.isDFS.getter(v8);
    int v6 = v7;
    if ((result & 1) != 0)
    {
      unint64_t v13 = v19;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native(v19);
      if ((result & 1) == 0)
      {
        unint64_t result = sub_1000698F0(0, v19[2] + 1LL, 1);
        unint64_t v13 = v19;
      }

      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      unint64_t v16 = v15 + 1;
      if (v15 >= v14 >> 1)
      {
        unint64_t result = sub_1000698F0(v14 > 1, v15 + 1, 1);
        unint64_t v16 = v15 + 1;
        unint64_t v13 = v19;
      }

      v13[2]  = v16;
      unint64_t v19 = v13;
      int v17 = &v13[v15];
      *((_DWORD *)v17 + 8)  = v8;
      *((_BYTE *)v17 + 36)  = v9;
      *((_BYTE *)v17 + 37)  = v10;
      *((_BYTE *)v17 + 38)  = v11;
      *((_BYTE *)v17 + 39)  = v12;
      uint64_t v3 = v18;
      goto LABEL_2;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10027056C(uint64_t a1)
{
  return sub_10026C7F0( a1,  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40),  *(_BYTE *)(v1 + 41),  *(_BYTE *)(v1 + 42),  *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

uint64_t getEnumTagSinglePayload for RadioResourceSchedule.RadioResourceMap.Constraint( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResourceSchedule.RadioResourceMap.Constraint( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 40)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 40)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8)  = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RadioResourceSchedule.RadioResourceMap.Constraint()
{
  return &type metadata for RadioResourceSchedule.RadioResourceMap.Constraint;
}

ValueMetadata *type metadata accessor for RadioResourceSchedule.RadioResourceMap()
{
  return &type metadata for RadioResourceSchedule.RadioResourceMap;
}

void sub_10027063C(uint64_t a1)
{
  v10[0]  = "\b";
  v10[1]  = &unk_10035E8A0;
  v10[2]  = &unk_10035E8B8;
  v10[3]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[4]  = &unk_10035E8B8;
  v10[5]  = &unk_10035E8D0;
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v10[6]  = *(void *)(v2 - 8) + 64LL;
    v10[7]  = &unk_10035E8E8;
    v10[8]  = &unk_10035E900;
    v10[9]  = &unk_10035E918;
    v10[10]  = &unk_10035E930;
    uint64_t v4 = type metadata accessor for DispatchTime(319LL);
    if (v5 <= 0x3F)
    {
      v10[11]  = *(void *)(v4 - 8) + 64LL;
      v10[12]  = &unk_10035E948;
      v10[13]  = &unk_10035E8D0;
      v10[14]  = &unk_10035E8D0;
      v10[15]  = (char *)&value witness table for Builtin.Int32 + 64;
      v10[16]  = &unk_10035E8D0;
      v10[17]  = (char *)&value witness table for Builtin.Int64 + 64;
      sub_100056310( 319LL,  (unint64_t *)&qword_100405C10,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
      if (v7 <= 0x3F)
      {
        v10[18]  = *(void *)(v6 - 8) + 64LL;
        sub_100056310(319LL, qword_10040DB60, type metadata accessor for NANInternetSharingStatistics.Requester);
        if (v9 <= 0x3F)
        {
          v10[19]  = *(void *)(v8 - 8) + 64LL;
          v10[20]  = &unk_10035E960;
          swift_initClassMetadata2(a1, 0LL, 21LL, v10, a1 + 96);
        }
      }
    }
  }

uint64_t sub_1002707AC(uint64_t a1)
{
  unint64_t v2 = 0xED000066664F2079LL;
  unint64_t v3 = 0x63696C6F50205249LL;
  switch(a1)
  {
    case 0LL:
      goto LABEL_8;
    case 1LL:
      unint64_t v3 = 0xD000000000000014LL;
      uint64_t v4 = "IR Policy For 2.4GHz";
      goto LABEL_7;
    case 2LL:
      unint64_t v5 = "IR Policy for DFS";
      goto LABEL_5;
    case 3LL:
      unint64_t v3 = 0xD00000000000001BLL;
      uint64_t v4 = "IR Policy for Multiple 5GHz";
LABEL_7:
      unint64_t v2 = (unint64_t)(v4 - 32) | 0x8000000000000000LL;
      goto LABEL_8;
    default:
      unint64_t v5 = "Unknown IR Policy";
LABEL_5:
      unint64_t v2 = (unint64_t)(v5 - 32) | 0x8000000000000000LL;
      unint64_t v3 = 0xD000000000000011LL;
LABEL_8:
      unint64_t v6 = v2;
      String.append(_:)(*(Swift::String *)&v3);
      return swift_bridgeObjectRelease(v2);
  }

uint64_t sub_100270874(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100002274((uint64_t *)&unk_10040DCF0);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    unint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v30 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain();
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v29) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v29) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v29) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v30 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v29) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v30 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_100270C28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100002274((uint64_t *)&unk_10040DCF0);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    unint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain();
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_100270FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t sub_100271004()
{
  return swift_unownedRetainStrong(*(void *)(v0 + qword_10040DA60));
}

uint64_t sub_100271014@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_10040DA68;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10027D18C(v3, a1);
}

uint64_t sub_100271064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + qword_10040DA70);
  if (v3)
  {
    *(void *)(a1 + 24)  = swift_getObjectType(*(void *)(v1 + qword_10040DA70));
    *(void *)a1  = v3;
  }

  else
  {
    *(_OWORD *)a1  = 0u;
    *(_OWORD *)(a1 + 16)  = 0u;
  }

  return swift_unknownObjectRetain(v3);
}

uint64_t sub_1002710B8(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    sub_1000225EC(a1, &qword_100405280);
    goto LABEL_5;
  }

  uint64_t v3 = sub_100002274(&qword_10040DCE8);
  if (!swift_dynamicCast(&v7, a1, &type metadata for Any[8], v3, 6LL))
  {
LABEL_5:
    uint64_t v4 = 0LL;
    goto LABEL_6;
  }

  uint64_t v4 = v7;
LABEL_6:
  uint64_t v5 = *(void *)(v1 + qword_10040DA70);
  *(void *)(v1 + qword_10040DA70)  = v4;
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_100271144@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410AC8;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100271188(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002711D0 + 4 * byte_10035E854[a3]))( 0x696C616974696E49LL,  0xEB0000000064657ALL);
}

uint64_t sub_1002711D0()
{
  return 0x6574736575716552LL;
}

uint64_t sub_1002711EC()
{
  return 0x696D7269666E6F43LL;
}

uint64_t sub_100271208()
{
  return 0x73696C6261747345LL;
}

unint64_t sub_100271228@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 | a1;
  if (v1 ^ 1 | a1) {
    uint64_t v3 = 0x74616E696D726554LL;
  }
  else {
    uint64_t v3 = 0x65736E6F70736552LL;
  }
  if (v2) {
    return v3;
  }
  else {
    return 0xD000000000000012LL;
  }
}

uint64_t sub_1002712A4@<X0>( void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v23[1]  = a6;
  uint64_t v11 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  int64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_100408800);
  __chkstk_darwin();
  int64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[0]  = a1;
  v25[1]  = a2;
  char v26 = a3;
  char v24 = _swiftEmptyArrayStorage;
  uint64_t v17 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  uint64_t v19 = _s17InitiatorInstanceC5StateOMa(0LL, a4, a5, v18);
  uint64_t v20 = sub_100002274(&qword_100405DC0);
  unint64_t v21 = sub_10005CFF4();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for Mirror.AncestorRepresentation.generated(_:),  v11);
  sub_10027BE18(a1, a2, a3);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v25, &v24, v16, v14, v19, v20, v21);
}

uint64_t sub_100271420()
{
  return sub_100271188(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_100271434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002712A4( *(void **)v2,  *(void *)(v2 + 8),  *(_BYTE *)(v2 + 16),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2);
}

uint64_t sub_100271448()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v5 = v0 + qword_10040DAA0;
  __n128 v6 = swift_beginAccess(v0 + qword_10040DAA0, v9, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v2 + 40))(v5, v4, v1, v6);
  return swift_endAccess(v9);
}

unint64_t sub_100271504()
{
  uint64_t v1 = v0 + qword_10040DA68;
  swift_beginAccess(v0 + qword_10040DA68, v3, 0LL, 0LL);
  return *(unsigned __int16 *)(v1 + 25) | ((unint64_t)*(unsigned int *)(v1 + 27) << 16);
}

BOOL sub_100271550()
{
  int v1 = *(unsigned __int8 *)(v0 + qword_10040DAA8 + 16);
  if (v1 == 4) {
    return __PAIR128__( (unint64_t)(*(void *)(v0 + qword_10040DAA8) != 0LL) + *(void *)(v0 + qword_10040DAA8 + 8) - 1,  *(void *)(v0 + qword_10040DAA8) - 1LL) < 2;
  }
  return 0LL;
}

uint64_t sub_1002715A4()
{
  if (*(_BYTE *)(v0 + qword_10040DAA8 + 16) == 3) {
    return swift_retain(*(void *)(v0 + qword_10040DAA8 + 8));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1002715E0(uint64_t a1)
{
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  __n128 v6 = &v12[-v5];
  uint64_t v7 = v1 + qword_100410AE8;
  swift_beginAccess(v1 + qword_100410AE8, v13, 0LL, 0LL);
  sub_1000226B0(v7, (uint64_t)v6, &qword_100405D40);
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1LL, v8);
  uint64_t result = sub_1000225EC((uint64_t)v6, &qword_100405D40);
  if (v10 == 1 || *(void *)(v1 + qword_100410AE0) != a1)
  {
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0LL, 1LL, v8);
    swift_beginAccess(v7, v12, 33LL, 0LL);
    sub_100057104((uint64_t)v4, v7, &qword_100405D40);
    return swift_endAccess(v12);
  }

  return result;
}

uint64_t sub_100271758()
{
  return *(void *)(v0 + qword_100410AE0);
}

uint64_t sub_100271768@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100410AE8;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000226B0(v3, a1, &qword_100405D40);
}

id sub_1002717C0()
{
  uint64_t v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType(v0);
  uint64_t v4 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = (int *)((char *)v0 + qword_10040DAC0);
  swift_beginAccess(v9, v40, 1LL, 0LL);
  if (notify_is_valid_token(*v9))
  {
    uint64_t v10 = notify_cancel(*v9);
    *uint64_t v9 = -1;
    if ((_DWORD)v10)
    {
      int v11 = v10;
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v13 = static os_log_type_t.error.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc(12LL, -1LL);
        os_log_t v33 = v12;
        uint64_t v15 = (uint8_t *)v14;
        uint64_t v34 = swift_slowAlloc(32LL, -1LL);
        v38[0]  = v34;
        __int128 v35 = ObjectType;
        *(_DWORD *)uint64_t v15 = 136315138;
        uint64_t v32 = v15 + 4;
        unint64_t v16 = static WiFiError.notifyErrorMessage(from:)(v11);
        unint64_t v18 = v17;
        uint64_t v36 = sub_10000235C(v16, v17, v38);
        ObjectType  = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        swift_bridgeObjectRelease(v18);
        os_log_t v19 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v13,  "Failed to cancel monitoring statistic reset events with error: %s",  v15,  0xCu);
        uint64_t v20 = v34;
        swift_arrayDestroy(v34, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

  unint64_t v21 = (uint64_t *)&v1[qword_10040DAA8];
  if (v1[qword_10040DAA8 + 16] - 1 >= 3)
  {
    if (!v1[qword_10040DAA8 + 16]) {
      goto LABEL_12;
    }
    uint64_t v30 = *v21;
    uint64_t v29 = v21[1];
    if (!(v30 | v29)) {
      goto LABEL_12;
    }
    if (v30 ^ 1 | v29) {
      goto LABEL_13;
    }
  }

  unint64_t v22 = ObjectType;
  uint64_t v23 = *(void *)&v1[qword_10040DA60];
  swift_unownedRetainStrong(v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( v8,  v23 + *(void *)(*(void *)v23 + 96LL),  AssociatedTypeWitness);
  swift_release(v23);
  char v24 = &v1[qword_10040DA68];
  swift_beginAccess(&v1[qword_10040DA68], v38, 0LL, 0LL);
  uint64_t v25 = *(unsigned int *)(v24 + 3);
  uint64_t v26 = *(unsigned __int16 *)(v24 + 1);
  uint64_t v27 = *v24;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))( v27,  v26 | (v25 << 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  ObjectType  = v22;
LABEL_12:
  sub_100271C88(-1LL, 0x64657361656C6572LL, 0xE800000000000000LL);
LABEL_13:
  sub_100271B1C(v1);
  v39.receiver  = v1;
  v39.super_class  = ObjectType;
  return objc_msgSendSuper2(&v39, "dealloc");
}

void sub_100271B1C(void *a1)
{
  id v1 = a1;
  oslog  = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v4 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v3 = 138412290;
    id v8 = v1;
    id v5 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
    *uint64_t v4 = v1;

    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Destroyed %@", v3, 0xCu);
    uint64_t v6 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v4, 1LL, v6);
    swift_slowDealloc(v4, -1LL, -1LL);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  else
  {
  }

void sub_100271C88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = swift_isaMask;
  uint64_t v9 = v3;
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v10 = v9;
  uint64_t v11 = Logger.logObject.getter(v10);
  uint64_t v12 = (os_log_s *)v11;
  if (a1 == 2)
  {
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13)) {
      goto LABEL_5;
    }
  }

  else
  {
    os_log_type_t v13 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v12, v13))
    {
LABEL_5:
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v78 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v79 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v90[0]  = v79;
      *(_DWORD *)uint64_t v14 = 138412546;
      *(void *)&__int128 v87 = v10;
      v80  = a2;
      uint64_t v15 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8);
      *uint64_t v78 = v10;

      *(_WORD *)(v14 + 12)  = 2080;
      swift_bridgeObjectRetain(a3);
      *(void *)&__int128 v87 = sub_10000235C(v80, a3, (uint64_t *)v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%@ was terminated because %s", (uint8_t *)v14, 0x16u);
      uint64_t v16 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v78, 1LL, v16);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_arrayDestroy(v79, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease_n(a3, 2LL);

LABEL_7:
  if ((v10[qword_100410AD0 + 6] & 1) == 0 && v10[qword_10040DAB0] == 1)
  {
    uint64_t v17 = v8 & v7;
    unint64_t v18 = *(unsigned int *)&v10[qword_100410AD0] | ((unint64_t)*(unsigned __int16 *)&v10[qword_100410AD0 + 4] << 32);
    os_log_t v19 = sub_100272BF4();
    uint64_t v20 = (uint64_t *)&v10[qword_10040DA98];
    unint64_t v21 = *(void *)&v10[qword_10040DA98 + 8];
    uint64_t v81 = &v10[qword_10040DA98];
    if (v21 >> 60 == 15)
    {
      uint64_t v22 = v18 & 0xFFFFFFFFFFFFLL;
      WiFiAddress.ipv6LinkLocalAddress.getter(v22);
      uint64_t v82 = v23;
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
    }

    else
    {
      uint64_t v30 = *v20;
      sub_100020AFC(*v20, v21);
      uint64_t v82 = InterfaceIdentifier.ipv6Address.getter(v30, v21);
      uint64_t v25 = v31;
      uint64_t v27 = v32;
      uint64_t v29 = v33;
      sub_100020B40(v30, v21);
      uint64_t v22 = v18 & 0xFFFFFFFFFFFFLL;
    }

    uint64_t v34 = (void (*)(__int128 *, void))(*(uint64_t (**)(__int128 *))(*v19 + 392LL))(v90);
    uint64_t v36 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable( 0LL,  *(void *)(v17 + 80),  *(void *)(*(void *)(v17 + 88) + 8LL),  v35);
    uint64_t v37 = v25;
    uint64_t v38 = v36;
    WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v22, v82, v37, v27, v29, v36);
    v34(v90, 0LL);
    swift_release(v19);
    swift_bridgeObjectRelease(v29);
    objc_super v39 = sub_100272BF4();
    uint64_t v40 = *(void *)&v10[qword_10040DA60];
    swift_unownedRetainStrong(v40);
    char v41 = *(void **)(v40 + *(void *)(*(void *)v40 + 448LL));
    swift_retain();
    uint64_t v42 = v40;
    swift_release(v40);
    swift_release(v39);
    if (v41)
    {
      swift_release(v41);
      if (v39 == v41)
      {
        uint64_t v83 = v38;
        swift_unownedRetainStrong(v40);
        unint64_t v43 = *((void *)v81 + 1);
        if (v43 >> 60 == 15)
        {
          WiFiAddress.ipv6LinkLocalAddress.getter(v22);
          uint64_t v45 = v44;
          uint64_t v47 = v46;
          uint64_t v49 = v48;
          uint64_t v51 = v50;
        }

        else
        {
          uint64_t v59 = *(void *)v81;
          sub_100020AFC(*(void *)v81, *((void *)v81 + 1));
          uint64_t v60 = InterfaceIdentifier.ipv6Address.getter(v59, v43);
          uint64_t v47 = v61;
          uint64_t v49 = v62;
          uint64_t v51 = v63;
          unint64_t v64 = v43;
          uint64_t v45 = v60;
          sub_100020B40(v59, v64);
        }

        swift_beginAccess(v42 + *(void *)(*(void *)v42 + 152LL), v90, 33LL, 0LL);
        WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v22, v45, v47, v49, v51, v83);
        swift_endAccess(v90);
        swift_release(v42);
        swift_bridgeObjectRelease(v51);
      }
    }
  }

  sub_10027D13C((void *)2, 0LL, 4);
  uint64_t v52 = qword_10040DA70;
  uint64_t v53 = *(void **)&v10[qword_10040DA70];
  if (v53) {
    [v53 datapathTerminatedWithReason:a1];
  }
  uint64_t v54 = (uint64_t *)&v10[qword_10040DA78];
  swift_beginAccess(&v10[qword_10040DA78], v91, 1LL, 0LL);
  uint64_t v55 = *v54;
  if ((unint64_t)*v54 >> 62)
  {
    if (v55 < 0) {
      uint64_t v65 = *v54;
    }
    else {
      uint64_t v65 = v55 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(*v54, 2LL);
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter(v65);
    if (!v56) {
      goto LABEL_32;
    }
  }

  else
  {
    uint64_t v56 = *(void *)((v55 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain_n(*v54, 2LL);
    if (!v56) {
      goto LABEL_32;
    }
  }

  if (v56 < 1)
  {
    __break(1u);
    return;
  }

  for (i  = 0LL; i != v56; ++i)
  {
    if ((v55 & 0xC000000000000001LL) != 0)
    {
      unint64_t v58 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v55);
    }

    else
    {
      unint64_t v58 = *(void **)(v55 + 8 * i + 32);
      swift_unknownObjectRetain(v58);
    }

    objc_msgSend(v58, "datapathTerminatedWithReason:", a1, v78);
    swift_unknownObjectRelease(v58);
  }

id sub_1002725EC(void *a1)
{
  id v1 = a1;
  return sub_1002717C0();
}

uint64_t sub_100272610(uint64_t a1)
{
  uint64_t v2 = a1 + qword_100410AC8;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  sub_1001062E0( *(void *)(a1 + qword_10040DA90),  *(void *)(a1 + qword_10040DA90 + 8),  *(void *)(a1 + qword_10040DA90 + 16));
  sub_100020B40(*(void *)(a1 + qword_10040DA98), *(void *)(a1 + qword_10040DA98 + 8));
  swift_unknownObjectWeakDestroy(a1 + qword_100410AD8);
  uint64_t v4 = a1 + qword_10040DAA0;
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  sub_10027BE5C( *(void **)(a1 + qword_10040DAA8),  *(void *)(a1 + qword_10040DAA8 + 8),  *(_BYTE *)(a1 + qword_10040DAA8 + 16));
  sub_1000225EC(a1 + qword_100410AE8, &qword_100405D40);
  return sub_1000225EC(a1 + qword_10040DAD0, (uint64_t *)&unk_10040DCC0);
}

void sub_100272750()
{
  uint64_t v2 = v0;
  uint64_t v4 = *(void *)((swift_isaMask & *(void *)v0) + 0x50LL);
  uint64_t v3 = *(void *)((swift_isaMask & *(void *)v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v3 + 8),  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v39 - v5;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12)  = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) != 0)
  {
    if (!v2[qword_10040DAA8 + 16] && (v2[qword_10040DAA8] & 1) != 0)
    {
      uint64_t v14 = *(void *)&v2[qword_10040DA60];
      uint64_t v15 = swift_unownedRetainStrong(v14);
      uint64_t v19 = sub_1002E8D68(v15, v16, v17, v18);
      swift_release(v14);
      uint64_t v20 = (uint64_t)&v2[qword_10040DA68];
      swift_beginAccess(&v2[qword_10040DA68], v44, 0LL, 0LL);
      char v21 = sub_10027F690(*(unsigned __int16 *)(v20 + 25) | ((unint64_t)*(unsigned int *)(v20 + 27) << 16));
      swift_release(v19);
      if ((v21 & 1) == 0)
      {
        swift_unownedRetainStrong(v14);
        sub_1002E8C08();
        swift_release(v14);
        if (!v1)
        {
          uint64_t v22 = sub_100272BF4();
          (*(void (**)(uint64_t))(*v22 + 192LL))(1LL);
          swift_release(v22);
          swift_unownedRetainStrong(v14);
          uint64_t v23 = AssociatedTypeWitness;
          (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))( v6,  v14 + *(void *)(*(void *)v14 + 96LL),  AssociatedTypeWitness);
          swift_release(v14);
          sub_10027D18C(v20, (uint64_t)&v42);
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v4,  v23,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
          (*(void (**)(char **, uint64_t, uint64_t))(AssociatedConformanceWitness + 200))( &v42,  v23,  AssociatedConformanceWitness);
          sub_10027D1C8(&v42);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v23);
          sub_10027D13C(0LL, 0LL, 1);
          uint64_t v25 = v2;
          uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
          os_log_type_t v27 = static os_log_type_t.default.getter();
          BOOL v28 = os_log_type_enabled(v26, v27);
          uint64_t v40 = (unsigned __int8 *)v20;
          if (v28)
          {
            uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v45 = swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v29 = 138412290;
            uint64_t v42 = v25;
            uint64_t v30 = v25;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
            uint64_t v31 = v45;
            *(void *)uint64_t v45 = v25;

            _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ was started", v29, 0xCu);
            uint64_t v32 = sub_100002274(&qword_100404DE0);
            swift_arrayDestroy(v31, 1LL, v32);
            swift_slowDealloc(v31, -1LL, -1LL);
            swift_slowDealloc(v29, -1LL, -1LL);
          }

          else
          {
          }

          uint64_t v33 = *(void **)&v25[qword_10040DA70];
          if (v33)
          {
            uint64_t v34 = *v40;
            unint64_t v35 = *(unsigned __int16 *)(v40 + 1) | ((unint64_t)*(unsigned int *)(v40 + 3) << 16);
            swift_unknownObjectRetain(*(void *)&v25[qword_10040DA70]);
            id v36 = WiFiAddress.apiAddress.getter(v35);
            uint64_t v37 = sub_100272BF4();
            uint64_t v38 = WiFiInterface.interfaceIndex.getter();
            swift_release(v37);
            [v33 datapathStartedWithInstanceID:v34 initiatorDataAddress:v36 localInterfaceIndex:v38];

            swift_unknownObjectRelease(v33);
          }
        }
      }
    }
  }

  else
  {
    __break(1u);
  }

void *sub_100272BF4()
{
  uint64_t v1 = v0 + qword_10040DA68;
  swift_beginAccess(v0 + qword_10040DA68, v9, 0LL, 0LL);
  sub_1000226B0(v1 + 104, (uint64_t)v7, (uint64_t *)&unk_10040DCB0);
  if (v8)
  {
    if (v8 == 1) {
      sub_1000225EC((uint64_t)v7, (uint64_t *)&unk_10040DCB0);
    }
    else {
      sub_10017B1A0(v7);
    }
    int v4 = *(unsigned __int8 *)(v1 + 32);
    uint64_t v2 = *(void **)(v0 + qword_10040DA60);
    swift_unownedRetainStrong(v2);
    if (v4 != 2) {
      return v2;
    }
    uint64_t v3 = 56LL;
  }

  else
  {
    sub_10017B1A0(v7);
    uint64_t v2 = *(void **)(v0 + qword_10040DA60);
    swift_unownedRetainStrong(v2);
    uint64_t v3 = 57LL;
  }

  uint64_t v5 = *(void *)((char *)v2 + *(void *)(*v2 + 8 * v3));
  swift_retain();
  swift_release(v2);
  if (!v5)
  {
    swift_unownedRetainStrong(v2);
    return v2;
  }

  return (void *)v5;
}

void sub_100272CF4()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = (void *)((char *)v0 + qword_10040DAA8);
  if (*((_BYTE *)v0 + qword_10040DAA8 + 16) == 1)
  {
    uint64_t v9 = *v8;
    if (*v8 > 2)
    {
      uint64_t v14 = v0;
      uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v16 = static os_log_type_t.error.getter(v15);
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v17 = 138412290;
        uint64_t v22 = v14;
        uint64_t v19 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
        *uint64_t v18 = v14;

        _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "%@ is being terminated because request retries exceeded",  v17,  0xCu);
        uint64_t v20 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v18, 1LL, v20);
        swift_slowDealloc(v18, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
      }

      else
      {
      }

      sub_1002730CC();
    }

    else
    {
      uint64_t v10 = *(void *)((char *)v0 + qword_10040DA60);
      swift_unownedRetainStrong(v10);
      sub_1002E8C08();
      swift_release(v10);
      uint64_t v11 = sub_100272BF4();
      (*(void (**)(uint64_t))(*v11 + 192LL))(1LL);
      swift_release(v11);
      swift_unownedRetainStrong(v10);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( v7,  v10 + *(void *)(*(void *)v10 + 96LL),  AssociatedTypeWitness);
      swift_release(v10);
      uint64_t v12 = (uint64_t)v1 + qword_10040DA68;
      swift_beginAccess((char *)v1 + qword_10040DA68, v24, 0LL, 0LL);
      sub_10027D18C(v12, (uint64_t)&v22);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(void **, uint64_t, uint64_t))(AssociatedConformanceWitness + 200))( &v22,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      sub_10027D1C8(&v22);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
      sub_10027D13C((void *)(v9 + 1), 0LL, 1);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1002730CC()
{
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v43 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v2,  v43,  &protocol requirements base descriptor for P2PControls);
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v39 - v5;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = (void *)((char *)v0 + qword_10040DAA8);
    if (!*((_BYTE *)v0 + qword_10040DAA8 + 16) || (uint64_t v25 = *v15, v24 = v15[1], !(v25 | v24)))
    {
      sub_100271C88(2LL, 0x7165722072657375LL, 0xEC00000074736575LL);
      return;
    }

    if (v25 ^ 1 | v24)
    {
      uint64_t v26 = v0;
      os_log_type_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v30 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v29 = 138412290;
        uint64_t v44 = v26;
        uint64_t v31 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
        *uint64_t v30 = v26;

        _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "%@ was already in process of termination, ignoring request to terminate",  v29,  0xCu);
        uint64_t v32 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v30, 1LL, v32);
        swift_slowDealloc(v30, -1LL, -1LL);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      else
      {
      }
    }

    else
    {
LABEL_3:
      os_log_type_t v16 = v0;
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v20 = swift_slowAlloc(8LL, -1LL);
        uint64_t v42 = v6;
        uint64_t v40 = (void *)v20;
        uint64_t v41 = v1;
        *(_DWORD *)uint64_t v19 = 138412290;
        uint64_t v44 = v16;
        uint64_t v21 = v16;
        uint64_t v1 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
        uint64_t v22 = v40;
        *uint64_t v40 = v16;

        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ will attempt to stop", v19, 0xCu);
        uint64_t v23 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v22, 1LL, v23);
        uint64_t v6 = v42;
        swift_slowDealloc(v22, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {
      }

      sub_10027D13C((void *)2, 0LL, 4);
      uint64_t v33 = *(void *)((char *)v16 + qword_10040DA60);
      swift_unownedRetainStrong(v33);
      sub_1002E8C08();
      swift_release(v33);
      swift_unownedRetainStrong(v33);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( v6,  v33 + *(void *)(*(void *)v33 + 96LL),  AssociatedTypeWitness);
      swift_release(v33);
      uint64_t v34 = (unsigned __int8 *)v16 + qword_10040DA68;
      swift_beginAccess((char *)v16 + qword_10040DA68, &v44, 0LL, 0LL);
      uint64_t v35 = *(unsigned int *)(v34 + 3);
      uint64_t v36 = *(unsigned __int16 *)(v34 + 1);
      uint64_t v37 = *v34;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v43,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))( v37,  v36 | (v35 << 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
    }
  }

  else
  {
    __break(1u);
  }

void sub_100273638()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - v6;
  uint64_t v8 = (char *)v0 + qword_10040DAA8;
  if (*((_BYTE *)v0 + qword_10040DAA8 + 16) == 2)
  {
    uint64_t v9 = *((void *)v8 + 1);
    if (v9 > 2)
    {
      sub_100271C88(1LL, 0xD00000000000001DLL, 0x8000000100368A60LL);
    }

    else
    {
      uint64_t v10 = *(void **)v8;
      uint64_t v11 = *(void *)((char *)v0 + qword_10040DA60);
      swift_unownedRetainStrong(*(void *)((char *)v1 + qword_10040DA60));
      sub_1002E8C08();
      swift_release(v11);
      swift_unownedRetainStrong(v11);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( v7,  v11 + *(void *)(*(void *)v11 + 96LL),  AssociatedTypeWitness);
      swift_release(v11);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 272))( v10,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
      sub_10027D13C(v10, v9 + 1, 2);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1002738A0(os_log_s *a1)
{
  v341  = a1;
  ObjectType  = swift_getObjectType(v1);
  v342  = (uint64_t)v1;
  uint64_t v2 = swift_isaMask & *v1;
  sub_100002274(&qword_10040D440);
  __chkstk_darwin();
  v331  = (uint64_t)&v326 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v335  = (uint64_t)&v326 - v4;
  uint64_t v5 = *(char **)(v2 + 80);
  v337  = *(void *)(v2 + 88);
  uint64_t v6 = *(void *)(v337 + 8);
  v336  = v5;
  uint64_t AssociatedTypeWitness = (os_log_s *)swift_getAssociatedTypeWitness( 0LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  v333  = *((void *)AssociatedTypeWitness - 1);
  v334  = AssociatedTypeWitness;
  __chkstk_darwin();
  v332  = (os_log_t)((char *)&v326 - v8);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  v329  = *(void *)(v9 - 8);
  v330  = v9;
  __chkstk_darwin();
  v328  = (os_log_t)((char *)&v326 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  v339  = (uint64_t)&v326 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v340  = (uint64_t)&v326 - v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v326 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v326 - v16;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v326 - v18;
  __chkstk_darwin();
  uint64_t v21 = (os_log_s *)((char *)&v326 - v20);
  uint64_t v22 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v25 = (uint64_t *)((char *)&v326 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v327  = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v26 = (void *)*v327;
  *uint64_t v25 = *v327;
  (*(void (**)(uint64_t *, void, uint64_t))(v23 + 104))( v25,  enum case for DispatchPredicate.onQueue(_:),  v22);
  id v27 = v26;
  LOBYTE(v26)  = _dispatchPreconditionTest(_:)(v25);
  (*(void (**)(uint64_t *, uint64_t))(v23 + 8))(v25, v22);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x10027661CLL);
  }

  os_log_t v28 = v341;
  sub_1000E77F4((uint64_t)v341, (uint64_t)v21);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(v21, v11);
  uint64_t v30 = v21;
  if (EnumCaseMultiPayload != 4)
  {
    if (!EnumCaseMultiPayload)
    {
      sub_1000E77F4((uint64_t)v21, (uint64_t)v19);
      sub_100058090(v19, &v351);
      sub_100058090(&v351, v353);
      switch(sub_1001073D8((uint64_t)v353))
      {
        case 4u:
          uint64_t v31 = NANBitmap.Channel.operatingClass.getter(v353);
          int v32 = *(unsigned __int8 *)(v31 + 7);
          int v33 = *(unsigned __int8 *)(v31 + 8);
          uint64_t v34 = (char *)(v342 + qword_10040DAA8);
          int v35 = *(unsigned __int8 *)(v342 + qword_10040DAA8 + 16);
          if (v35 != 1)
          {
            if (v35 == 2 && v32 == 6)
            {
              if (*(_BYTE *)(v31 + 8))
              {
                v341  = v30;
                uint64_t v36 = *((void *)v34 + 1);
                id v37 = (id)v342;
                uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
                os_log_type_t v39 = static os_log_type_t.error.getter(v38);
                if (os_log_type_enabled(v38, v39))
                {
                  v339  = (uint64_t)v38;
                  v342  = v36;
                  uint64_t v40 = swift_slowAlloc(32LL, -1LL);
                  uint64_t v41 = (void *)swift_slowAlloc(8LL, -1LL);
                  v340  = swift_slowAlloc(32LL, -1LL);
                  *(void *)&v345[0]  = v340;
                  *(_DWORD *)uint64_t v40 = 138412802;
                  *(void *)&v355  = v37;
                  id v42 = v37;
                  uint64_t v43 = v41;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                  *uint64_t v41 = v37;

                  *(_WORD *)(v40 + 12)  = 2080;
                  if (v33 == 1)
                  {
                    uint64_t v45 = 0x756F2064656D6974LL;
                    unint64_t v44 = 0xE900000000000074LL;
                  }

                  else if (v33 == 2)
                  {
                    unint64_t v44 = 0xE700000000000000LL;
                    uint64_t v45 = 0x646570706F7264LL;
                  }

                  else
                  {
                    unint64_t v44 = 0x8000000100364C40LL;
                    uint64_t v45 = 0xD000000000000010LL;
                  }

                  uint64_t v38 = (os_log_s *)v339;
                  *(void *)&v355  = sub_10000235C(v45, v44, (uint64_t *)v345);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                  swift_bridgeObjectRelease(v44);
                  *(_WORD *)(v40 + 22)  = 2048;
                  *(void *)&v355  = v342;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, (char *)&v355 + 8);
                  _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "%@ failed to send datapath confirmation, with status %s, for retry #%ld",  (uint8_t *)v40,  0x20u);
                  v324  = sub_100002274(&qword_100404DE0);
                  swift_arrayDestroy(v43, 1LL, v324);
                  swift_slowDealloc(v43, -1LL, -1LL);
                  v325  = v340;
                  swift_arrayDestroy(v340, 1LL, &type metadata for Any[8]);
                  swift_slowDealloc(v325, -1LL, -1LL);
                  swift_slowDealloc(v40, -1LL, -1LL);
                }

                else
                {
                }

                uint64_t v30 = v341;
                sub_100273638();
                return sub_10005802C((uint64_t)v30, type metadata accessor for DriverEvent);
              }

void sub_100276684(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  Strong  = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100272CF4();
  }

uint64_t sub_1002766D4()
{
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v72 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t v2 = *(void *)(v72 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v2,  v1,  &protocol requirements base descriptor for P2PControls);
  uint64_t v77 = v1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v1,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v5 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v6 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v5,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v8 = type metadata accessor for Preferences(0LL, v5, v6, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v74 = v8;
  uint64_t v75 = v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v12 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v61 - v14;
  uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v78 = v16;
  uint64_t v79 = v17;
  __chkstk_darwin();
  uint64_t v76 = (uint64_t *)((char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = swift_getAssociatedTypeWitness(0LL, v2, v1, &protocol requirements base descriptor for P2PControls);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v65 = v19;
  uint64_t v21 = v20;
  uint64_t v70 = v20;
  __chkstk_darwin();
  uint64_t v73 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v61 - v23;
  uint64_t v69 = (char *)&v61 - v23;
  uint64_t v25 = type metadata accessor for DispatchTime(0LL);
  uint64_t v81 = *(void *)(v25 - 8);
  uint64_t v82 = v25;
  uint64_t v66 = *(void *)(v81 + 64);
  __chkstk_darwin();
  unint64_t v64 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v80  = (char *)&v61 - v27;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v28 = v63;
  uint64_t v29 = *(void *)(v63 + qword_10040DA60);
  swift_unownedRetainStrong(v29);
  uint64_t v30 = v29 + *(void *)(*(void *)v29 + 96LL);
  uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v71(v24, v30, v19);
  swift_release(v29);
  uint64_t v31 = v28;
  int v32 = sub_100272BF4();
  int v33 = (void *)((char *)v32 + *(void *)(*v32 + 104LL));
  uint64_t v34 = *v33;
  uint64_t v67 = v33[1];
  uint64_t v68 = v34;
  swift_bridgeObjectRetain(v67);
  swift_release(v32);
  swift_unownedRetainStrong(v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29 + *(void *)(*(void *)v29 + 112LL), v12);
  swift_release(v29);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120))(v12, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v35 = v74;
  LODWORD(v32)  = Preferences.linkTestIntervalMinutes.getter(v74);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v11, v35);
  *uint64_t v76 = 60LL * v32;
  (*(void (**)(void))(v79 + 104))();
  uint64_t v36 = swift_allocObject(&unk_1003F4E80, 24LL, 7LL);
  uint64_t v74 = v36;
  swift_unknownObjectWeakInit(v36 + 16, v31);
  id v37 = (void *)swift_allocObject(&unk_1003F4ED0, 40LL, 7LL);
  uint64_t v62 = v37;
  uint64_t v38 = v77;
  uint64_t v39 = v72;
  v37[2]  = v77;
  v37[3]  = v39;
  v37[4]  = v36;
  uint64_t v40 = swift_allocObject(&unk_1003F4E80, 24LL, 7LL);
  uint64_t v75 = v40;
  swift_unknownObjectWeakInit(v40 + 16, v31);
  uint64_t v41 = (void *)swift_allocObject(&unk_1003F4EF8, 40LL, 7LL);
  v41[2]  = v38;
  v41[3]  = v39;
  v41[4]  = v40;
  uint64_t v42 = swift_allocObject(&unk_1003F4E80, 24LL, 7LL);
  swift_unknownObjectWeakInit(v42 + 16, v31);
  uint64_t v43 = v81;
  unint64_t v44 = v64;
  uint64_t v45 = v82;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v64, v80, v82);
  uint64_t v46 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v47 = (v46 + 40) & ~v46;
  uint64_t v48 = (char *)swift_allocObject(&unk_1003F4F20, v47 + v66, v46 | 7);
  uint64_t v49 = v77;
  *((void *)v48 + 2)  = v77;
  *((void *)v48 + 3)  = v39;
  *((void *)v48 + 4)  = v42;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v48[v47], v44, v45);
  uint64_t v50 = v65;
  uint64_t v77 = swift_getAssociatedConformanceWitness( v39,  v49,  v65,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  uint64_t v51 = *(void *)(v77 + 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, void *, uint64_t (*)(uint64_t, uint64_t), void *, void (*)(uint64_t), void *, void (*)(), char *, uint64_t, uint64_t))(v51 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v60 = v51;
  uint64_t v53 = v67;
  id v54 = v76;
  uint64_t v55 = v62;
  os_log_type_t v56 = v69;
  v52(v68, v67, v76, sub_10027D2CC, v62, sub_10027D2FC, v41, sub_10027D37C, v48, v50, v60);
  swift_bridgeObjectRelease(v53);
  swift_release(v55);
  swift_release(v41);
  swift_release(v48);
  (*(void (**)(void *, uint64_t))(v79 + 8))(v54, v78);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v70 + 8);
  v57(v56, v50);
  swift_release(v74);
  swift_release(v75);
  swift_release(v42);
  swift_unownedRetainStrong(v29);
  unint64_t v58 = v73;
  v71(v73, v29 + *(void *)(*(void *)v29 + 96LL), v50);
  swift_release(v29);
  (*(void (**)(uint64_t, uint64_t))(v77 + 320))(1LL, v50);
  v57(v58, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v80, v82);
}

void sub_100276D08()
{
  uint64_t v1 = v0;
  uint64_t v2 = qword_10040DAB0;
  if ((*((_BYTE *)v1 + qword_10040DAB0) & 1) == 0 && *((_BYTE *)v1 + qword_10040DAA8 + 16) == 3)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = swift_isaMask;
    uint64_t v5 = (unsigned int *)((char *)v1 + qword_100410AD0);
    char v6 = *((_BYTE *)v1 + qword_100410AD0 + 6);
    id v7 = *(id *)((char *)v1 + qword_10040DAA8);
    if ((v6 & 1) != 0)
    {
    }

    else
    {
      id v86 = v7;
      uint64_t v8 = v4 & v3;
      unint64_t v9 = *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
      *((_BYTE *)v1 + (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v2) = 1;
      uint64_t v10 = sub_100272BF4();
      uint64_t v11 = (void *)((char *)v1 + qword_10040DA98);
      unint64_t v12 = *(void *)((char *)v1 + qword_10040DA98 + 8);
      uint64_t v85 = (char *)v1 + qword_10040DA98;
      if (v12 >> 60 == 15)
      {
        uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
        WiFiAddress.ipv6LinkLocalAddress.getter(v9 & 0xFFFFFFFFFFFFLL);
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        uint64_t v21 = v20;
      }

      else
      {
        uint64_t v22 = *v11;
        sub_100020AFC(*v11, v12);
        uint64_t v15 = InterfaceIdentifier.ipv6Address.getter(v22, v12);
        uint64_t v17 = v23;
        uint64_t v19 = v24;
        uint64_t v21 = v25;
        sub_100020B40(v22, v12);
        uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
      }

      uint64_t v26 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v10 + 392LL))(v87);
      uint64_t v28 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable( 0LL,  *(void *)(v8 + 80),  *(void *)(*(void *)(v8 + 88) + 8LL),  v27);
      WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v13, v15, v17, v19, v21, v28);
      v26(v87, 0LL);
      swift_release(v10);
      swift_bridgeObjectRelease(v21);
      uint64_t v29 = sub_100272BF4();
      uint64_t v30 = *(void *)((char *)v1 + qword_10040DA60);
      swift_unownedRetainStrong(v30);
      uint64_t v31 = *(void **)(v30 + *(void *)(*(void *)v30 + 448LL));
      swift_retain();
      swift_release(v30);
      swift_release(v29);
      int v32 = (uint64_t *)v85;
      if (v31)
      {
        swift_release(v31);
        if (v29 == v31)
        {
          swift_unownedRetainStrong(v30);
          unint64_t v33 = *((void *)v85 + 1);
          if (v33 >> 60 == 15)
          {
            WiFiAddress.ipv6LinkLocalAddress.getter(v13);
            uint64_t v35 = v34;
            uint64_t v37 = v36;
            uint64_t v39 = v38;
            uint64_t v41 = v40;
          }

          else
          {
            uint64_t v76 = *(void *)v85;
            sub_100020AFC(*(void *)v85, *((void *)v85 + 1));
            uint64_t v77 = InterfaceIdentifier.ipv6Address.getter(v76, v33);
            uint64_t v37 = v78;
            uint64_t v39 = v79;
            uint64_t v41 = v80;
            unint64_t v81 = v33;
            uint64_t v35 = v77;
            sub_100020B40(v76, v81);
          }

          swift_beginAccess(v30 + *(void *)(*(void *)v30 + 152LL), v87, 33LL, 0LL);
          WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v13, v35, v37, v39, v41, v28);
          swift_endAccess(v87);
          swift_release(v30);
          swift_bridgeObjectRelease(v41);
          int v32 = (uint64_t *)v85;
        }
      }

      uint64_t v42 = (char *)v1 + qword_10040DA68;
      swift_beginAccess((char *)v1 + qword_10040DA68, v87, 0LL, 0LL);
      uint64_t v43 = qword_10040DA70;
      if (v42[32] == 2)
      {
        unint64_t v44 = *(void **)((char *)v1 + qword_10040DA70);
        if (v44)
        {
          uint64_t v45 = v42[25];
          unint64_t v46 = (unint64_t)*(unsigned int *)(v42 + 27) << 16;
          unint64_t v47 = v32[1];
          if (v47 >> 60 == 15)
          {
            uint64_t v48 = v42[26];
            unint64_t v49 = v46;
            swift_unknownObjectRetain(*(void *)((char *)v1 + qword_10040DA70));
            unint64_t v50 = v49;
            uint64_t v51 = v48;
            uint64_t v52 = 0LL;
            uint64_t v53 = 0LL;
            uint64_t v54 = 0LL;
            uint64_t v55 = 1LL;
          }

          else
          {
            uint64_t v83 = v42[26];
            uint64_t v84 = v42[25];
            os_log_type_t v56 = v32;
            uint64_t v57 = *v32;
            unint64_t v82 = (unint64_t)*(unsigned int *)(v42 + 27) << 16;
            swift_unknownObjectRetain(v44);
            sub_10002255C(v57, v47);
            uint64_t v52 = InterfaceIdentifier.ipv6Address.getter(v57, v47);
            uint64_t v53 = v58;
            uint64_t v54 = v59;
            uint64_t v55 = v60;
            uint64_t v61 = v57;
            int v32 = v56;
            uint64_t v45 = v84;
            sub_100020B40(v61, v47);
            unint64_t v50 = v82;
            uint64_t v51 = v83;
          }

          id v62 = WiFiAddress.apiAddress(with:)(v52, v53, v54, v55, v45 | (v51 << 8) | v50);
          sub_1000ABC94(v52, v53, v54, v55);
          uint64_t v63 = *(void *)((char *)v1 + qword_10040DA60);
          swift_unownedRetainStrong(v63);
          unint64_t v64 = WiFiInterface.interfaceIndex.getter();
          swift_release(v63);
          [v44 datapathReceivedControlDataAddress:v62 serviceSpecificInfo:v86 onInterfaceIndex:v64];

          swift_unknownObjectRelease(v44);
          uint64_t v43 = qword_10040DA70;
        }
      }

      uint64_t v65 = *(void **)((char *)v1 + v43);
      if (v65)
      {
        unint64_t v66 = v32[1];
        if (v66 >> 60 == 15)
        {
          swift_unknownObjectRetain(v65);
          uint64_t v67 = 0LL;
          uint64_t v68 = 0LL;
          uint64_t v69 = 0LL;
          uint64_t v70 = 1LL;
        }

        else
        {
          uint64_t v71 = *v32;
          swift_unknownObjectRetain(v65);
          sub_10002255C(v71, v66);
          uint64_t v67 = InterfaceIdentifier.ipv6Address.getter(v71, v66);
          uint64_t v68 = v72;
          uint64_t v69 = v73;
          uint64_t v70 = v74;
          sub_100020B40(v71, v66);
        }

        id v75 = WiFiAddress.apiAddress(with:)(v67, v68, v69, v70, v13);
        sub_1000ABC94(v67, v68, v69, v70);
        [v65 datapathConfirmedForPeerDataAddress:v75 serviceSpecificInfo:v86];

        swift_unknownObjectRelease(v65);
      }
    }
  }

uint64_t sub_10027741C()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v27 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)((char *)v1 + qword_10040DA60);
  swift_unownedRetainStrong(v12);
  uint64_t v13 = v12 + *(void *)(*(void *)v12 + 96LL);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v29(v11, v13, AssociatedTypeWitness);
  swift_release(v12);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 40LL))(AssociatedTypeWitness);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v15 = v28(v11, AssociatedTypeWitness);
  uint64_t v16 = qword_10040DAC8;
  if (*((_BYTE *)v1 + qword_10040DAC8) == 1)
  {
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Restarting infrastructure WiFi connectivity", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    swift_unownedRetainStrong(v12);
    uint64_t v20 = *(void *)(v12 + *(void *)(*(void *)v12 + 688LL));
    swift_unownedRetainStrong(v20);
    swift_release(v12);
    sub_1002D4410();
    swift_release(v20);
    *((_BYTE *)v1 + v16)  = 0;
  }

  swift_unownedRetainStrong(v12);
  uint64_t v21 = v29;
  v29(v9, v12 + *(void *)(*(void *)v12 + 96LL), AssociatedTypeWitness);
  swift_release(v12);
  (*(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 320))( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v22 = (void (*)(char *, uint64_t))v28;
  v28(v9, AssociatedTypeWitness);
  swift_unownedRetainStrong(v12);
  uint64_t v23 = v12 + *(void *)(*(void *)v12 + 680LL);
  swift_beginAccess(v23, v30, 1LL, 0LL);
  uint64_t v24 = *(void *)(v23 + 8);
  *(_BYTE *)(v23 + 16)  = 0;
  *(void *)uint64_t v23 = 0LL;
  *(void *)(v23 + 8)  = 0LL;
  swift_release(v12);
  swift_bridgeObjectRelease(v24);
  swift_unownedRetainStrong(v12);
  v21(v7, v12 + *(void *)(*(void *)v12 + 96LL), AssociatedTypeWitness);
  swift_release(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 328))( 256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  v22(v7, AssociatedTypeWitness);
  uint64_t v25 = sub_100272BF4();
  (*(void (**)(void))(*v25 + 192LL))(0LL);
  return swift_release(v25);
}

void sub_100277770()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v40 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t v3 = *(void *)(v40 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3,  v2,  &protocol requirements base descriptor for P2PControls);
  v39[1]  = v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v3,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v6 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v7 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v6,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v9 = type metadata accessor for Preferences(0LL, v6, v7, v8);
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  __chkstk_darwin();
  uint64_t v53 = (char *)v39 - v10;
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0LL);
  uint64_t v50 = *(void *)(BeaconInformation - 8);
  uint64_t v51 = BeaconInformation;
  __chkstk_darwin();
  uint64_t v43 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040CEC8);
  __chkstk_darwin();
  uint64_t v48 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  unint64_t v49 = (char *)v39 - v14;
  uint64_t v44 = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v45 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchTime(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v21 = (char *)v39 - v20;
  uint64_t v22 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin();
  os_log_type_t v56 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v52 = (char *)v39 - v25;
  __chkstk_darwin();
  uint64_t v42 = (char *)v39 - v26;
  __chkstk_darwin();
  unint64_t v47 = (char *)v39 - v27;
  __chkstk_darwin();
  unint64_t v46 = (char *)v39 - v28;
  __chkstk_darwin();
  uint64_t v41 = (char *)v39 - v29;
  __chkstk_darwin();
  uint64_t v57 = (char *)v39 - v30;
  __chkstk_darwin();
  int v32 = (void *)((char *)v39 - v31);
  __chkstk_darwin();
  uint64_t v34 = (char *)v39 - v33;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v35 = (char *)v0 + qword_10040DAA0;
  __n128 v36 = swift_beginAccess(v35, v61, 0LL, 0LL);
  (*(void (**)(char *, char *, uint64_t, __n128))(v17 + 16))(v19, v35, v16, v36);
  uint64_t v58 = v34;
  DispatchTime.distance(to:)(v21);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v17 + 8);
  v37(v19, v16);
  v37(v21, v16);
  *int v32 = 10LL;
  uint64_t v38 = *(void (**)(void *, void, uint64_t))(v23 + 104);
  uint64_t v59 = v32;
  uint64_t v60 = v22;
  v38(v32, enum case for DispatchTimeInterval.seconds(_:), v22);
  __asm { BR              X10 }

uint64_t sub_100277BE4()
{
  if ((v2 & 1) != 0)
  {
    uint64_t v7 = *(void *)(v0 + qword_10040DA60);
    uint64_t v8 = swift_unownedRetainStrong(v7);
    uint64_t v12 = sub_1002E8D68(v8, v9, v10, v11);
    swift_release(v7);
    uint64_t v13 = v0 + qword_10040DA68;
    swift_beginAccess(v0 + qword_10040DA68, v3 - 112, 0LL, 0LL);
    LOBYTE(v13)  = sub_10027F690(*(unsigned __int16 *)(v13 + 25) | ((unint64_t)*(unsigned int *)(v13 + 27) << 16));
    swift_release(v12);
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
      uint64_t v15 = *(void *)(v3 - 200);
      uint64_t v5 = *(void *)(v3 - 176);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v15, v14, v5);
      uint64_t v6 = *(void *)(v3 - 192);
      BOOL v16 = static DispatchTimeInterval.< infix(_:_:)(v15, v6);
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
      v4(v15, v5);
      uint64_t v17 = *(void *)(v3 - 184);
      if (v16) {
        sub_100271C88(1LL, 0xD000000000000025LL, 0x80000001003689E0LL);
      }
    }

    else
    {
      sub_100272750();
      uint64_t v17 = *(void *)(v3 - 184);
      uint64_t v5 = *(void *)(v3 - 176);
      uint64_t v6 = *(void *)(v3 - 192);
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    }

    v4(v17, v5);
  }

  else
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    uint64_t v5 = *(void *)(v3 - 176);
    uint64_t v6 = *(void *)(v3 - 192);
    v4(*(void *)(v3 - 184), v5);
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(v6, v5);
}

uint64_t sub_100278CB4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)&v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)(v6);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = v1 + qword_10040DA68;
    swift_beginAccess(v11, v13, 33LL, 0LL);
    sub_10027E190(a1, v11);
    return swift_endAccess(v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100278DA4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)&v2[qword_10040DA60];
  swift_unownedRetainStrong(v6);
  BOOL v7 = sub_1002EA6D4();
  swift_release(v6);
  if (v7)
  {
    uint64_t v8 = &v3[qword_10040DA68];
    swift_beginAccess(&v3[qword_10040DA68], v56, 0LL, 0LL);
    sub_1000226B0((uint64_t)(v8 + 104), (uint64_t)&v58, (uint64_t *)&unk_10040DCB0);
    if (v59)
    {
      if (v59 == 1)
      {
        sub_1000225EC((uint64_t)&v58, (uint64_t *)&unk_10040DCB0);
      }

      else
      {
        sub_1000589F8(&v58, (uint64_t)v61);
        uint64_t v9 = qword_10040DAB8;
        if (v3[qword_10040DAB8] == 1)
        {
          uint64_t v10 = v62;
          uint64_t v11 = v63;
          sub_100021104(v61, v62);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))( *(unsigned __int16 *)(v8 + 25) | ((unint64_t)*(unsigned int *)(v8 + 27) << 16),  v10,  v11);
          v3[v9]  = 0;
          sub_100002AC4(v61);
          return;
        }

        sub_100002AC4(v61);
      }
    }

    else
    {
      sub_10017B1A0(&v58);
    }
  }

  uint64_t v12 = v3;
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v13 = v12;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v17 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    v61[0]  = v54;
    *(_DWORD *)uint64_t v16 = 138412546;
    *(void *)&__int128 v58 = v13;
    uint64_t v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 8);
    *uint64_t v17 = v13;

    *(_WORD *)(v16 + 12)  = 2080;
    swift_bridgeObjectRetain(a2);
    *(void *)&__int128 v58 = sub_10000235C(a1, a2, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 8);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "%@ is unsatisfiable, will terminate because %s",  (uint8_t *)v16,  0x16u);
    uint64_t v19 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v17, 1LL, v19);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_arrayDestroy(v54, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  if (v13[qword_10040DAA8 + 16] != 3) {
    goto LABEL_60;
  }
  uint64_t v20 = &v13[qword_10040DA68];
  swift_beginAccess(&v13[qword_10040DA68], v60, 0LL, 0LL);
  sub_1000226B0((uint64_t)(v20 + 104), (uint64_t)&v58, (uint64_t *)&unk_10040DCB0);
  if (!v59)
  {
    sub_10017B1A0(&v58);
    goto LABEL_60;
  }

  if (v59 != 1)
  {
    sub_1000589F8(&v58, (uint64_t)v61);
    uint64_t v21 = v62;
    uint64_t v22 = v63;
    sub_100021104(v61, v62);
    uint64_t v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))( *(unsigned __int16 *)(v20 + 25) | ((unint64_t)*(unsigned int *)(v20 + 27) << 16),  v21,  v22);
    if (!v23)
    {
LABEL_59:
      sub_100002AC4(v61);
      goto LABEL_60;
    }

    uint64_t v24 = v23;
    uint64_t v25 = v13;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    uint64_t v53 = v13;
    if (!os_log_type_enabled(v26, v27))
    {

      goto LABEL_30;
    }

    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v55 = swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = (uint64_t)v25;
    *(void *)&__int128 v58 = v55;
    *(_DWORD *)uint64_t v28 = 138412546;
    uint64_t v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    *uint64_t v29 = v25;

    *(_WORD *)(v28 + 12)  = 2080;
    if (v24 == 1)
    {
      uint64_t v32 = 0xD000000000000014LL;
      uint64_t v34 = "IR Policy For 2.4GHz";
    }

    else
    {
      if (v24 != 3)
      {
        uint64_t v31 = v55;
        uint64_t v32 = 0xD000000000000011LL;
        if (v24 == 2) {
          uint64_t v33 = "IR Policy for DFS";
        }
        else {
          uint64_t v33 = "Unknown IR Policy";
        }
        unint64_t v35 = (unint64_t)(v33 - 32) | 0x8000000000000000LL;
        goto LABEL_29;
      }

      uint64_t v32 = 0xD00000000000001BLL;
      uint64_t v34 = "IR Policy for Multiple 5GHz";
    }

    unint64_t v35 = (unint64_t)(v34 - 32) | 0x8000000000000000LL;
    uint64_t v31 = v55;
LABEL_29:
    uint64_t v57 = sub_10000235C(v32, v35, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease(v35);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "%@ terminating because of unsatisfiable internet sharing policy %s",  (uint8_t *)v28,  0x16u);
    uint64_t v36 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v29, 1LL, v36);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_arrayDestroy(v31, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
LABEL_30:

    uint64_t v37 = qword_10040DA70;
    uint64_t v38 = *(void **)&v25[qword_10040DA70];
    if (v38) {
      [v38 datapathUpdatedInternetSharingPolicy:v24];
    }
    uint64_t v39 = (uint64_t *)&v25[qword_10040DA78];
    swift_beginAccess(&v25[qword_10040DA78], &v58, 1LL, 0LL);
    uint64_t v40 = *v39;
    if ((unint64_t)*v39 >> 62)
    {
      if (v40 < 0) {
        uint64_t v44 = *v39;
      }
      else {
        uint64_t v44 = v40 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*v39, 2LL);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v44);
      if (!v41) {
        goto LABEL_44;
      }
    }

    else
    {
      uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain_n(*v39, 2LL);
      if (!v41) {
        goto LABEL_44;
      }
    }

    if (v41 < 1)
    {
      __break(1u);
      goto LABEL_63;
    }

    for (i  = 0LL; i != v41; ++i)
    {
      if ((v40 & 0xC000000000000001LL) != 0)
      {
        uint64_t v43 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v40);
      }

      else
      {
        uint64_t v43 = *(void **)(v40 + 8 * i + 32);
        swift_unknownObjectRetain(v43);
      }

      objc_msgSend(v43, "datapathUpdatedInternetSharingPolicy:", v24, v53);
      swift_unknownObjectRelease(v43);
    }

uint64_t sub_10027956C(uint64_t a1)
{
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = v1 + qword_10040DAD0;
  swift_beginAccess(v1 + qword_10040DAD0, v11, 32LL, 0LL);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0LL) + 28);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL) + 48);
  sub_1000225EC(v7, (uint64_t *)&unk_10040DCC0);
  sub_1000226B0(v5, v7, (uint64_t *)&unk_10040DCC0);
  swift_endAccess(v11);
  uint64_t v8 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v4, 1LL, 1LL, v8);
  swift_beginAccess(v5, v11, 33LL, 0LL);
  sub_100057104((uint64_t)v4, v5, (uint64_t *)&unk_10040DCC0);
  return swift_endAccess(v11);
}

uint64_t sub_100279690()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (*(_BYTE *)(v0 + qword_10040DAA8 + 16) == 3)
  {
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v7 = v0 + qword_10040DAA0;
    __n128 v8 = swift_beginAccess(v1 + qword_10040DAA0, v10, 33LL, 0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v3 + 40))(v7, v6, v2, v8);
    return swift_endAccess(v10);
  }

  return result;
}

void sub_100279764()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x50LL);
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v17 - v6;
  __n128 v8 = (void *)((char *)v0 + qword_10040DAA8);
  if (!*((_BYTE *)v0 + qword_10040DAA8 + 16))
  {
    sub_100272750();
    return;
  }

  uint64_t v15 = *v8;
  uint64_t v14 = v8[1];
  if (!(v15 | v14))
  {
    sub_100271C88(1LL, 0xD000000000000030LL, 0x8000000100367C20LL);
    return;
  }

  if (!(v15 ^ 1 | v14))
  {
LABEL_2:
    uint64_t v9 = *(void *)((char *)v0 + qword_10040DA60);
    swift_unownedRetainStrong(*(void *)((char *)v1 + qword_10040DA60));
    sub_1002E8C08();
    swift_release(v9);
    swift_unownedRetainStrong(v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( v7,  v9 + *(void *)(*(void *)v9 + 96LL),  AssociatedTypeWitness);
    swift_release(v9);
    uint64_t v10 = (unsigned __int8 *)v1 + qword_10040DA68;
    swift_beginAccess((char *)v1 + qword_10040DA68, v21, 0LL, 0LL);
    uint64_t v18 = *(unsigned int *)(v10 + 3);
    uint64_t v11 = *(unsigned __int16 *)(v10 + 1);
    uint64_t v12 = *v10;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))( v12,  v11 | (v18 << 16),  AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    sub_10027D13C(0LL, 0LL, 4);
    sub_1000226B0((uint64_t)(v10 + 104), (uint64_t)&v19, (uint64_t *)&unk_10040DCB0);
    if (v20)
    {
      if (v20 == 1) {
        sub_1000225EC((uint64_t)&v19, (uint64_t *)&unk_10040DCB0);
      }
      else {
        sub_10017B1A0(&v19);
      }
    }

    else
    {
      sub_10017B1A0(&v19);
      uint64_t v16 = qword_10040DAB8;
      if (*((_BYTE *)v1 + qword_10040DAB8) == 1)
      {
        sub_10027741C();
        *((_BYTE *)v1 + v16)  = 0;
      }
    }
  }

uint64_t sub_100279AF8(uint64_t a1)
{
  uint64_t v1 = sub_100002274(&qword_10040DCE8);
  uint64_t result = swift_dynamicCast(&v4, v5, &type metadata for Any[8], v1, 6LL);
  if ((_DWORD)result)
  {
    uint64_t v3 = v4;
    sub_100279B64(v4);
    return swift_unknownObjectRelease(v3);
  }

  return result;
}

void sub_100279B64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = swift_isaMask;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = qword_10040DA70;
  uint64_t v11 = *(void *)&v1[qword_10040DA70];
  uint64_t v12 = (uint64_t *)&v1[qword_10040DA78];
  if (v11) {
    BOOL v13 = v11 == a1;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    swift_beginAccess(v12, v57, 0LL, 0LL);
    a1  = *v12;
    if (!((unint64_t)*v12 >> 62))
    {
      if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_26;
      }
LABEL_10:
      swift_beginAccess(v12, &v53, 33LL, 0LL);
      uint64_t v14 = *v12;
      if ((unint64_t)*v12 >> 62)
      {
        if (v14 < 0) {
          uint64_t v45 = *v12;
        }
        else {
          uint64_t v45 = v14 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v12);
        uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v45);
        swift_bridgeObjectRelease(v14);
        if (v46)
        {
LABEL_12:
          uint64_t v15 = sub_10027D0D0();
          if (v15)
          {
LABEL_16:
            swift_endAccess(&v53);
            uint64_t v18 = *(void *)&v2[v10];
            *(void *)&v2[v10]  = v15;
            swift_unknownObjectRelease(v18);
            return;
          }

          uint64_t v14 = *v12;
          if (!((unint64_t)*v12 >> 62))
          {
            uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v17 = v16 - 1;
            if (!__OFSUB__(v16, 1LL))
            {
LABEL_15:
              uint64_t v15 = sub_100320F58(v17);
              goto LABEL_16;
            }

void sub_10027A194()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v5 = (void *)*v4;
  *uint64_t v3 = *v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = v5;
  LOBYTE(v5)  = _dispatchPreconditionTest(_:)(v3);
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  else {
    __break(1u);
  }
}

void sub_10027A24C(void *a1)
{
  id v1 = a1;
  sub_10027A194();
}

uint64_t sub_10027A280(uint64_t a1)
{
  uint64_t v2 = v1;
  ObjectType  = swift_getObjectType(v1);
  uint64_t v5 = *(void *)((swift_isaMask & *v1) + 0x50LL);
  uint64_t v36 = *(void *)((swift_isaMask & *v1) + 0x58LL);
  uint64_t v6 = *(void *)(v36 + 8);
  uint64_t v35 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (void *)*v15;
  *uint64_t v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchPredicate.onQueue(_:),  v11);
  id v17 = v16;
  LOBYTE(v16)  = _dispatchPreconditionTest(_:)(v14);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) != 0)
  {
    uint64_t v19 = *(void *)((char *)v2 + qword_100410AE0);
    *(void *)((char *)v2 + qword_100410AE0)  = a1;
    sub_1002715E0(v19);
    uint64_t v20 = *(void *)((char *)v2 + qword_10040DA60);
    uint64_t v21 = swift_unownedRetainStrong(v20);
    uint64_t v25 = sub_1002E8D68(v21, v22, v23, v24);
    swift_release(v20);
    sub_10027F278();
    swift_release(v25);
    uint64_t v26 = swift_unownedRetainStrong(v20);
    uint64_t v30 = sub_1002E8D68(v26, v27, v28, v29);
    swift_release(v20);
    sub_10027F2A0();
    swift_release(v30);
    swift_unownedRetainStrong(v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( v10,  v20 + *(void *)(*(void *)v20 + 96LL),  AssociatedTypeWitness);
    swift_release(v20);
    WitnessTable  = swift_getWitnessTable(&unk_10035EA58, ObjectType);
    unint64_t v32 = sub_1002A1F20(ObjectType, WitnessTable);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v36,  v35,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 312))( a1,  v32 & 0xFFFFFFFFFFFFFFLL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10027A710(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_10027A280(a3);
}

void sub_10027A750(void (*a1)(uint64_t, void))
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (void *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    return;
  }

  uint64_t v10 = v1 + qword_10040DA68;
  swift_beginAccess(v1 + qword_10040DA68, v21, 0LL, 0LL);
  sub_1000226B0(v10 + 104, (uint64_t)v19, (uint64_t *)&unk_10040DCB0);
  if (v20)
  {
    if (v20 == 1) {
      sub_1000225EC((uint64_t)v19, (uint64_t *)&unk_10040DCB0);
    }
    else {
      sub_10017B1A0(v19);
    }
    goto LABEL_10;
  }

  sub_10017B1A0(v19);
  if ((*(_BYTE *)(v1 + qword_100410AD0 + 6) & 1) != 0)
  {
LABEL_10:
    a1(3LL, 0LL);
    return;
  }

  unint64_t v11 = *(unsigned int *)(v1 + qword_100410AD0) | ((unint64_t)*(unsigned __int16 *)(v1 + qword_100410AD0 + 4) << 32);
  uint64_t v13 = *(void *)(v10 + 8);
  unint64_t v12 = *(void *)(v10 + 16);
  uint64_t v14 = *(void *)(v1 + qword_10040DA60);
  swift_unownedRetainStrong(v14);
  unint64_t v15 = sub_1002EA480();
  swift_bridgeObjectRetain(v12);
  swift_release(v14);
  if ((v15 & 0xFF00000000LL) == 0x300000000LL)
  {
    swift_unownedRetainStrong(v14);
    unint64_t v15 = sub_1002EA434();
    swift_release(v14);
  }

  unint64_t v16 = WiFiNetwork.createRecord()(v13, v12, v11 & 0xFFFFFFFFFFFFLL, v15 & 0xFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease(v12);
  uint64_t v17 = sub_100270C28(v16);
  __n128 v18 = swift_bridgeObjectRelease(v16);
  ((void (*)(void, uint64_t, __n128))a1)(0LL, v17, v18);
  swift_bridgeObjectRelease(v17);
}

uint64_t sub_10027A958(void *a1, int a2, void *a3)
{
  return sub_10027B69C( a1,  a2,  a3,  (uint64_t)&unk_1003F5010,  (uint64_t)sub_10027E284,  (void (*)(uint64_t, uint64_t))sub_10027A750);
}

void sub_10027A974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    v5.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v5.super.isa  = 0LL;
  }
  isa  = v5.super.isa;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_10027A9EC(char a1, uint64_t (*a2)(void))
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v9 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *uint64_t v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10)  = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(v2 + qword_10040DA88)  = a1 & 1;
    return a2(0LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10027AAD0(void *a1, int a2, char a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_allocObject(&unk_1003F4FE8, 24LL, 7LL);
  *(void *)(v7 + 16)  = v6;
  id v8 = a1;
  sub_10027A9EC(a3, sub_100246E80);

  return swift_release(v7);
}

void sub_10027AB44(void (*a1)(uint64_t, id), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v62 = a2;
  uint64_t v63 = a1;
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + 0x50LL);
  uint64_t v61 = *(void *)((swift_isaMask & *v2) + 0x58LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v61 + 8),  v4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v8 = &v59.i8[-v7];
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (uint64_t *)((char *)v59.i64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v14 = (void *)*v13;
  uint64_t *v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)(v12);
  uint64_t v16 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) != 0)
  {
    uint64_t v17 = (unsigned int *)((char *)v3 + qword_100410AD0);
    if ((*((_BYTE *)v3 + qword_100410AD0 + 6) & 1) != 0)
    {
      __n128 v18 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v19 = static os_log_type_t.error.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Unable to generate a data session statistics because the datapath referenced doesn't exist or isn't established yet",  v20,  2u);
        swift_slowDealloc(v20, -1LL, -1LL);
      }

      v63(3LL, 0LL);
    }

    else
    {
      uint64_t v21 = *((unsigned __int16 *)v17 + 2);
      int v22 = *v17;
      unint64_t v23 = *v17 | (unint64_t)(v21 << 32);
      uint64_t v24 = *(void *)((char *)v3 + qword_10040DA60);
      swift_unownedRetainStrong(v24);
      (*(void (**)(__int8 *, uint64_t, uint64_t))(v6 + 16))( v8,  v24 + *(void *)(*(void *)v24 + 96LL),  AssociatedTypeWitness);
      swift_release(v24);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v61,  v4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      id v60 = (id)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))( v23,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      v59.i64[0]  = v21;
      (*(void (**)(__int8 *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
      uint64_t v26 = (char *)v3 + qword_10040DA68;
      swift_beginAccess((char *)v3 + qword_10040DA68, v71, 0LL, 0LL);
      sub_1000226B0((uint64_t)(v26 + 104), (uint64_t)&v69, (uint64_t *)&unk_10040DCB0);
      if (v70)
      {
        if (v70 == 1)
        {
          sub_1000225EC((uint64_t)&v69, (uint64_t *)&unk_10040DCB0);
        }

        else
        {
          sub_1000589F8(&v69, (uint64_t)aBlock);
          uint64_t v27 = v66;
          uint64_t v28 = v67;
          sub_100021104(aBlock, (uint64_t)v66);
          BOOL v29 = (*((uint64_t (**)(void *, void (*)(uint64_t)))v28 + 5))(v27, v28) != 0;
          id v30 = v60;
          [v60 setInfraRelayOperationStatus:v29];
          isa  = Int._bridgeToObjectiveC()().super.super.isa;
          [v30 setInfraRelayRequestersCount:isa];

          sub_100002AC4(aBlock);
        }
      }

      else
      {
        sub_10017B1A0(&v69);
      }

      unsigned __int32 v32 = v59.i32[0];
      uint64_t v33 = *(void **)((char *)v3 + qword_10040DA80);
      if (v33)
      {
        id v34 = v33;
        id v35 = v60;
        WiFiAwareDataSessionStatisticsReport.difference(from:)(v34);
      }

      else
      {
        id v35 = v60;
        *(void *)((char *)v3 + qword_10040DA80)  = v60;
        uint64_t v36 = (int *)((char *)v3 + qword_10040DAC0);
        id v37 = v35;
        swift_beginAccess(v36, &v69, 0LL, 0LL);
        if (!notify_is_valid_token(*v36))
        {
          uint64x2_t v38 = (uint64x2_t)vdupq_n_s64(v23);
          int32x4_t v39 = vuzp1q_s32( (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_10033A8F0),  (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_10033A8E0));
          unsigned __int32 v40 = v32 >> 8;
          *(int16x4_t *)v39.i8  = vmovn_s32(v39);
          int16x8_t v59 = (int16x8_t)v39;
          uint64_t v41 = (void *)*v13;
          uint64_t v42 = swift_allocObject(&unk_1003F4E80, 24LL, 7LL);
          swift_unknownObjectWeakInit(v42 + 16, v3);
          uint64_t v43 = swift_allocObject(&unk_1003F4F98, 46LL, 7LL);
          uint64_t v44 = v61;
          *(void *)(v43 + 16)  = v4;
          *(void *)(v43 + 24)  = v44;
          *(void *)(v43 + 32)  = v42;
          *(_BYTE *)(v43 + 40)  = v22;
          *(_DWORD *)(v43 + 41)  = vmovn_s16(v59).u32[0];
          *(_BYTE *)(v43 + 45)  = v40;
          uint64_t v67 = sub_10027E254;
          uint64_t v68 = v43;
          aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
          aBlock[1]  = 1107296256LL;
          aBlock[2]  = (uint64_t)sub_100130204;
          unint64_t v66 = &unk_1003F4FB0;
          uint64_t v45 = _Block_copy(aBlock);
          uint64_t v46 = v68;
          uint64_t v47 = v41;
          swift_release(v46);
          swift_beginAccess(v36, aBlock, 33LL, 0LL);
          uint32_t v48 = notify_register_dispatch("com.apple.airplay.isPlayingAmbientAudioChanged", v36, v47, v45);
          swift_endAccess(aBlock);
          _Block_release(v45);

          if (v48)
          {
            id v50 = v35;
            uint64_t v51 = (os_log_s *)Logger.logObject.getter(v49);
            os_log_type_t v52 = static os_log_type_t.error.getter(v51);
            if (os_log_type_enabled(v51, v52))
            {
              uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v54 = swift_slowAlloc(32LL, -1LL);
              aBlock[0]  = v54;
              *(_DWORD *)uint64_t v53 = 136315138;
              unint64_t v55 = static WiFiError.notifyErrorMessage(from:)(v48);
              unint64_t v57 = v56;
              uint64_t v64 = sub_10000235C(v55, v56, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock);
              swift_bridgeObjectRelease(v57);
              _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Failed to start monitoring statistic reset events with error: %s",  v53,  0xCu);
              swift_arrayDestroy(v54, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v54, -1LL, -1LL);
              swift_slowDealloc(v53, -1LL, -1LL);
            }

            id v35 = v50;
          }
        }
      }

      id v58 = v35;
      v63(0LL, v35);
    }
  }

  else
  {
    __break(1u);
  }

void sub_10027B368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a5 + 8),  a4,  &protocol requirements base descriptor for P2PControls);
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v12 = v20 - v11 + 8;
  a2 += 16LL;
  swift_beginAccess(a2, v20, 0LL, 0LL);
  Strong  = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v14 = (char *)Strong;
    uint64_t v15 = *(void *)(Strong + qword_10040DA60);
    swift_unownedRetainStrong(v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( v12,  v15 + *(void *)(*(void *)v15 + 96LL),  AssociatedTypeWitness);
    swift_release(v15);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a5,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))( a3 & 0xFFFFFFFFFFFFLL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    __n128 v18 = *(void **)&v14[qword_10040DA80];
    *(void *)&v14[qword_10040DA80]  = v17;
  }

uint64_t sub_10027B680(void *a1, int a2, void *a3)
{
  return sub_10027B69C( a1,  a2,  a3,  (uint64_t)&unk_1003F4F70,  (uint64_t)sub_10027E21C,  (void (*)(uint64_t, uint64_t))sub_10027AB44);
}

uint64_t sub_10027B69C( void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject(a4, 24LL, 7LL);
  *(void *)(v11 + 16)  = v10;
  id v12 = a1;
  a6(a5, v11);

  return swift_release(v11);
}

void sub_10027B718(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    if (*((_BYTE *)v1 + qword_10040DAA8 + 16) == 3)
    {
      id v10 = v1;
      id v11 = a1;
      id v12 = (char *)v10;
      uint64_t v13 = (char *)v11;
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.error.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc(22LL, -1LL);
        uint64_t v17 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v16 = 138412546;
        uint64_t v47 = v12;
        __n128 v18 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
        *uint64_t v17 = v12;

        *(_WORD *)(v16 + 12)  = 2112;
        uint64_t v47 = v13;
        os_log_type_t v19 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
        v17[1]  = v13;

        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ got an issue report: %@", (uint8_t *)v16, 0x16u);
        uint64_t v20 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v17, 2LL, v20);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v21 = *(void *)&v12[qword_10040DA60];
      swift_unownedRetainStrong(v21);
      uint64_t v49 = 0LL;
      uint64_t v50 = 0xE000000000000000LL;
      int v22 = &v12[qword_10040DA68];
      __n128 v23 = swift_beginAccess(&v12[qword_10040DA68], &v47, 0LL, 0LL);
      uint64_t v24 = &v12[qword_100410AD0];
      if ((v12[qword_100410AD0 + 6] & 1) != 0)
      {
        LOBYTE(v25)  = v22[25];
        LOBYTE(v26)  = v22[26];
        v23.n128_u32[0]  = *(_DWORD *)(v22 + 27);
        uint64x2_t v27 = (uint64x2_t)vmovl_u8((uint8x8_t)v23.n128_u64[0]);
      }

      else
      {
        uint64_t v28 = *((unsigned __int16 *)v24 + 2);
        uint64_t v25 = *(unsigned int *)v24;
        unint64_t v29 = v25 | (v28 << 32);
        v30.i64[0]  = 0xFFFFFFFFFFFFLL;
        v30.i64[1]  = 0xFFFFFFFFFFFFLL;
        uint64x2_t v27 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v29), v30);
        *(int16x4_t *)v27.i8  = vmovn_s32( vuzp1q_s32( (int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_10033E7F0),  (int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_10033E800)));
        unint64_t v26 = v29 >> 8;
      }

      uint32x4_t v31 = vmovl_u16((uint16x4_t)(v27.i64[0] & 0xFF00FF00FF00FFLL));
      v32.i64[0]  = v31.u32[0];
      v32.i64[1]  = v31.u32[1];
      uint64x2_t v33 = v32;
      v32.i64[0]  = v31.u32[2];
      v32.i64[1]  = v31.u32[3];
      int8x16_t v34 = vorrq_s8( (int8x16_t)vshlq_u64(v33, (uint64x2_t)xmmword_10035C790),  (int8x16_t)vshlq_u64(v32, (uint64x2_t)xmmword_10035EA80));
      v35._countAndFlagsBits  = NANPeerServiceIdentifier.description.getter(*(void *)&vorr_s8( *(int8x8_t *)v34.i8,  (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)) | ((unint64_t)v26 << 16) | *v22 | ((unint64_t)v25 << 8));
      object  = v35._object;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(object);
      v37._countAndFlagsBits  = 0x6374696C47202D20LL;
      v37._object  = (void *)0xEA00000000002068LL;
      String.append(_:)(v37);
      id v38 = [v13 rtpSequenceNumber];
      if (v38)
      {
        int32x4_t v39 = v38;
        id v40 = [v38 description];

        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        uint64_t v43 = v42;
      }

      else
      {
        uint64_t v41 = 0LL;
        uint64_t v43 = (void *)0xE000000000000000LL;
      }

      v44._countAndFlagsBits  = v41;
      v44._object  = v43;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v43);
      uint64_t v45 = v50;
      sub_1002E9E88(v49, v50);
      swift_release(v21);
      swift_bridgeObjectRelease(v45);
    }
  }

  else
  {
    __break(1u);
  }

void sub_10027BB20(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_10027B718(v4);
}

id sub_10027BB74(void *a1)
{
  id v1 = a1;
  sub_10027BBC8();
  uint64_t v3 = v2;

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

unint64_t sub_10027BBC8()
{
  v28[0]  = 0LL;
  v28[1]  = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  unint64_t v29 = 0xD000000000000016LL;
  unint64_t v30 = 0x8000000100368B20LL;
  uint64_t v1 = v0 + qword_10040DA68;
  swift_beginAccess(v0 + qword_10040DA68, v28, 0LL, 0LL);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object  = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits  = 0x203A6F543C205DLL;
  v4._object  = (void *)0xE700000000000000LL;
  String.append(_:)(v4);
  uint64_t v6 = (unsigned int *)(v0 + qword_100410AD0);
  if ((*(_BYTE *)(v0 + qword_100410AD0 + 6) & 1) != 0)
  {
    LOBYTE(v7)  = *(_BYTE *)(v1 + 25);
    LOBYTE(v8)  = *(_BYTE *)(v1 + 26);
    v5.i32[0]  = *(_DWORD *)(v1 + 27);
    uint64x2_t v9 = (uint64x2_t)vmovl_u8(v5);
  }

  else
  {
    uint64_t v10 = *((unsigned __int16 *)v6 + 2);
    uint64_t v7 = *v6;
    unint64_t v11 = v7 | (v10 << 32);
    unint64_t v8 = v11 >> 8;
    v12.i64[0]  = 0xFFFFFFFFFFFFLL;
    v12.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v9 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v11), v12);
    *(int16x4_t *)v9.i8  = vmovn_s32( vuzp1q_s32( (int32x4_t)vshlq_u64(v9, (uint64x2_t)xmmword_10033E7F0),  (int32x4_t)vshlq_u64(v9, (uint64x2_t)xmmword_10033E800)));
  }

  uint32x4_t v13 = vmovl_u16((uint16x4_t)(v9.i64[0] & 0xFF00FF00FF00FFLL));
  v14.i64[0]  = v13.u32[0];
  v14.i64[1]  = v13.u32[1];
  uint64x2_t v15 = v14;
  v14.i64[0]  = v13.u32[2];
  v14.i64[1]  = v13.u32[3];
  int8x16_t v16 = vorrq_s8( (int8x16_t)vshlq_u64(v15, (uint64x2_t)xmmword_10035EAA0),  (int8x16_t)vshlq_u64(v14, (uint64x2_t)xmmword_10035EA90));
  v17._countAndFlagsBits  = WiFiAddress.description.getter(*(void *)&vorr_s8( *(int8x8_t *)v16.i8,  (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)) | ((unint64_t)v8 << 8) | v7);
  __n128 v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  v19._countAndFlagsBits  = 8250LL;
  v19._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v19);
  v20._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v21);
  v22._countAndFlagsBits  = 8254LL;
  v22._object  = (void *)0xE200000000000000LL;
  String.append(_:)(v22);
  uint64_t v24 = *(void *)(v1 + 8);
  __n128 v23 = *(void **)(v1 + 16);
  swift_bridgeObjectRetain(v23);
  v25._countAndFlagsBits  = NANServiceName.description.getter(v24, v23);
  unint64_t v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v26);
  return v29;
}

void sub_10027BDEC()
{
}

uint64_t _s17InitiatorInstanceCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&_s17InitiatorInstanceCMn);
}

void *sub_10027BE18(void *result, uint64_t a2, char a3)
{
  if (a3 == 3)
  {
    id v4 = result;
    return (void *)swift_retain(a2);
  }

  return result;
}

void sub_10027BE4C(uint64_t a1)
{
}

void sub_10027BE5C(void *a1, uint64_t a2, char a3)
{
  if (a3 == 3)
  {
    swift_release(a2);
  }

uint64_t sub_10027BE94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10027BE18(*(void **)a2, v4, v5);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(_BYTE *)(a1 + 16)  = v5;
  return a1;
}

uint64_t sub_10027BEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10027BE18(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16)  = v5;
  sub_10027BE5C(v6, v7, v8);
  return a1;
}

uint64_t sub_10027BF30(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16)  = v3;
  sub_10027BE5C(v4, v5, v6);
  return a1;
}

uint64_t sub_10027BF74(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_10027BFBC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16)  = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8)  = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17)  = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17)  = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16)  = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10027C000(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10027C018(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(void *)(result + 8)  = 0LL;
    LOBYTE(a2)  = 4;
  }

  *(_BYTE *)(result + 16)  = a2;
  return result;
}

uint64_t _s17InitiatorInstanceC5StateOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&_s17InitiatorInstanceC5StateOMn);
}

id sub_10027C05C(uint64_t a1, void *a2)
{
  id v3 = sub_10027D778(a1, a2);
  swift_release(a1);
  return v3;
}

void sub_10027C0A0()
{
}

uint64_t sub_10027C0C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100271144(a1);
}

uint64_t sub_10027C0EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035EA20, a2);
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_10027C11C()
{
  unint64_t result = qword_10040DC38;
  if (!qword_10040DC38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NANDatapath.Configuration,  &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_10040DC38);
  }

  return result;
}

uint64_t sub_10027C160(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_10035EA3C, a2);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_10027C18C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int v4 = (id *)(v2 + qword_10040DAA8);
  if (*(_BYTE *)(v2 + qword_10040DAA8 + 16) != 3) {
    return 0LL;
  }
  uint64_t v7 = (unsigned int *)(v3 + qword_100410AD0);
  char v8 = *(_BYTE *)(v3 + qword_100410AD0 + 6);
  id v9 = *v4;
  uint64_t v10 = v9;
  if ((v8 & 1) != 0)
  {

    return 0LL;
  }

  unint64_t v12 = *v7 | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 32);
  uint32x4_t v13 = (unsigned __int8 *)(v3 + qword_10040DA68);
  __n128 v14 = swift_beginAccess(v3 + qword_10040DA68, v27, 0LL, 0LL);
  uint64_t v15 = *v13;
  uint64_t v16 = (*(uint64_t (**)(__n128))(*(void *)a2 + 232LL))(v14);
  id v17 = WiFiAddress.apiAddress.getter(v16 & 0xFFFFFFFFFFFFLL);
  [a1 datapathStartedWithInstanceID:v15 initiatorDataAddress:v17 localInterfaceIndex:WiFiInterface.interfaceIndex.getter()];

  id v18 = WiFiAddress.apiAddress.getter(v12);
  [a1 datapathConfirmedForPeerDataAddress:v18 serviceSpecificInfo:v10];

  uint64_t v19 = qword_10040DA70;
  if (*(void *)(v3 + qword_10040DA70))
  {
    Swift::String v20 = (void *)(v3 + qword_10040DA78);
    swift_beginAccess(v3 + qword_10040DA78, v26, 33LL, 0LL);
    uint64_t v21 = swift_unknownObjectRetain(a1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
    unint64_t v23 = *(void *)((*v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v22 = *(void *)((*v20 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v23 >= v22 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1LL);
    }
    uint64_t v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, a1);
    specialized Array._endMutation()(v24);
    swift_endAccess(v26);
  }

  else
  {

    uint64_t v25 = *(void *)(v3 + v19);
    *(void *)(v3 + v19)  = a1;
    swift_unknownObjectRelease(v25);
    swift_unknownObjectRetain(a1);
  }

  return 1LL;
}

void sub_10027C34C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  Strong  = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    if (!*(void *)&Strong[qword_10040DA70])
    {
      int v4 = Strong;
      uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
      os_log_type_t v6 = static os_log_type_t.error.getter(v5);
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        char v8 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v7 = 138412290;
        unint64_t v11 = v4;
        id v9 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12);
        *char v8 = v3;

        _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Terminating %@ (after delay) because it's client was invalidated",  v7,  0xCu);
        uint64_t v10 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v8, 1LL, v10);
        swift_slowDealloc(v8, -1LL, -1LL);
        swift_slowDealloc(v7, -1LL, -1LL);
      }

      else
      {
      }

      sub_1002730CC();
    }
  }

uint64_t sub_10027C4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a5,  a4,  &protocol requirements base descriptor for NANController);
  uint64_t v11 = *(void *)(swift_getAssociatedConformanceWitness( a5,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.NANController.InfraController: InfrastructureController)
                  + 8);
  uint64_t v12 = swift_getAssociatedTypeWitness( 0LL,  v11,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = v22 - v14 + 8;
  swift_beginAccess(a3 + 16, v22, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a3 + 16);
  if (result)
  {
    id v17 = (void *)result;
    uint64_t v18 = *(void *)(result + qword_10040DA60);
    swift_unownedRetainStrong(v18);
    uint64_t v19 = *(void *)(v18 + *(void *)(*(void *)v18 + 688LL));
    swift_unownedRetainStrong(v19);
    swift_release(v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v19 + *(void *)(*(void *)v19 + 96LL), v12);
    swift_release(v19);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v11,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 168))( a1,  a2,  v12,  AssociatedConformanceWitness);

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  return result;
}

void sub_10027C898(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0LL, 0LL);
  Strong  = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = Strong;
    id v6 = Strong;
    swift_errorRetain(a1);
    id v7 = v6;
    uint64_t v8 = swift_errorRetain(a1);
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v19 = (void *)swift_slowAlloc(16LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = (uint64_t)v7;
      uint64_t v23 = v21;
      *(_DWORD *)uint64_t v11 = 138412802;
      type  = v10;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      *uint64_t v19 = v5;

      *(_WORD *)(v11 + 12)  = 2080;
      uint64_t v13 = sub_100272BF4();

      uint64_t v14 = WiFiInterface.description.getter();
      unint64_t v16 = v15;
      swift_release(v13);
      uint64_t v22 = sub_10000235C(v14, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);

      swift_bridgeObjectRelease(v16);
      *(_WORD *)(v11 + 22)  = 2112;
      swift_errorRetain(a1);
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      v19[1]  = v17;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  type,  "%@ internet sharing on %s failed because %@",  (uint8_t *)v11,  0x20u);
      uint64_t v18 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v19, 2LL, v18);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_arrayDestroy(v21, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    sub_1002730CC();
  }

void sub_10027CB50(uint64_t a1, uint64_t (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4)
{
  int16x8_t v59 = a2;
  uint64_t v56 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(a4 + 8),  a3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v58 = AssociatedTypeWitness;
  __chkstk_darwin();
  id v60 = (char *)v50 - v7;
  sub_100002274((uint64_t *)&unk_10040DCC0);
  __chkstk_darwin();
  id v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v14 = *(void *)(v61 - 8);
  __chkstk_darwin();
  unint64_t v55 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v17 = (char *)v50 - v16;
  __chkstk_darwin();
  uint64_t v62 = (char *)v50 - v18;
  swift_beginAccess(a1 + 16, v66, 0LL, 0LL);
  Strong  = (char *)swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (Strong)
  {
    Swift::String v20 = Strong;
    if (Strong[qword_100410AF0 + 8] == 1)
    {
    }

    else
    {
      unint64_t v51 = *(void *)&Strong[qword_100410AF0];
      uint64_t v52 = (uint64_t)&Strong[qword_100410AC8];
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(Strong);
      os_log_type_t v22 = static os_log_type_t.default.getter();
      BOOL v23 = os_log_type_enabled(v21, v22);
      uint64_t v54 = a3;
      if (v23)
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Triggering infrastructure WiFi disconnect", v24, 2u);
        swift_slowDealloc(v24, -1LL, -1LL);
      }

      v20[qword_10040DAC8]  = 1;
      uint64_t v53 = qword_10040DA60;
      uint64_t v25 = *(void *)&v20[qword_10040DA60];
      swift_unownedRetainStrong(v25);
      uint64_t v26 = *(void *)(v25 + *(void *)(*(void *)v25 + 688LL));
      swift_unownedRetainStrong(v26);
      swift_release(v25);
      sub_1002D4384(0);
      swift_release(v26);
      type metadata accessor for P2PTimer(0LL);
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64x2_t v27 = v62;
      DispatchTime.distance(to:)(v13);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      uint64_t v28 = v61;
      int16x8_t v59 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 16);
      uint64_t v29 = v59(v17, v27, v61);
      unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64x2_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v52 = swift_slowAlloc(32LL, -1LL);
        v65[0]  = v52;
        *(_DWORD *)uint64x2_t v32 = 136315138;
        v50[1]  = v32 + 4;
        uint64_t v33 = DispatchTimeInterval.description.getter();
        unint64_t v35 = v34;
        uint64_t v63 = sub_10000235C(v33, v34, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
        __n128 v36 = swift_bridgeObjectRelease(v35);
        Swift::String v37 = *(void (**)(char *, uint64_t, __n128))(v14 + 8);
        v37(v17, v28, v36);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "DHCP took %s", v32, 0xCu);
        uint64_t v38 = v52;
        swift_arrayDestroy(v52, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      else
      {

        Swift::String v37 = *(void (**)(char *, uint64_t, __n128))(v14 + 8);
        ((void (*)(char *, uint64_t))v37)(v17, v28);
      }

      uint64_t v40 = v57;
      uint64_t v39 = v58;
      uint64_t v41 = v55;
      uint64_t v42 = v56;
      unint64_t v43 = v51;
      v59(v55, v62, v28);
      if (v43 >= 4) {
        char v44 = 0;
      }
      else {
        char v44 = 0x3040102u >> (8 * v43);
      }
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v41, v28);
      uint64_t v45 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
      v9[*(int *)(v45 + 20)]  = v44;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v9, 0LL, 1LL, v45);
      uint64_t v46 = (uint64_t)&v20[qword_10040DAD0];
      swift_beginAccess(&v20[qword_10040DAD0], v65, 33LL, 0LL);
      sub_100057104((uint64_t)v9, v46, (uint64_t *)&unk_10040DCC0);
      swift_endAccess(v65);
      uint64_t v47 = *(void *)&v20[v53];
      swift_unownedRetainStrong(v47);
      uint32_t v48 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v60, v47 + *(void *)(*(void *)v47 + 96LL), v39);
      swift_release(v47);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v42,  v54,  v39,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 328))( 65792LL,  v39,  AssociatedConformanceWitness);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v39);
      ((void (*)(char *, uint64_t))v37)(v62, v61);
    }
  }

uint64_t sub_10027D0D0()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *uint64_t v0 = v1;
  if (!(_DWORD)result || v1 < 0 || (v1 & 0x4000000000000000LL) != 0)
  {
    uint64_t result = sub_10032CC28(v1);
    uint64_t v1 = result;
    *uint64_t v0 = result;
  }

  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 8 * v5 + 0x20);
    *(void *)(v3 + 16)  = v5;
    specialized Array._endMutation()();
    return v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10027D13C(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3 + qword_10040DAA8;
  uint64_t v5 = *(void **)(v3 + qword_10040DAA8);
  uint64_t v6 = *(void *)(v3 + qword_10040DAA8 + 8);
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8)  = a2;
  char v7 = *(_BYTE *)(v4 + 16);
  *(_BYTE *)(v4 + 16)  = a3;
  sub_10027BE18(a1, a2, a3);
  sub_10027BE5C(v5, v6, v7);
  return sub_100271448();
}

uint64_t sub_10027D18C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10027D1C8(void *a1)
{
  return a1;
}

uint64_t sub_10027D1FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10027D228(uint64_t a1)
{
  return a1;
}

void *sub_10027D254(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  sub_100020B40(a1[3], a1[4]);
  sub_1001062E0(v2, v3, v4);
  return a1;
}

uint64_t sub_10027D29C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10027D2C0()
{
}

uint64_t sub_10027D2CC(uint64_t a1, uint64_t a2)
{
  return sub_10027C4E4(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t sub_10027D2D8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10027D2FC(uint64_t a1)
{
}

uint64_t sub_10027D308()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10027D37C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for DispatchTime(0LL) - 8) + 80LL);
  sub_10027CB50(v0[4], (uint64_t (*)(char *, char *, uint64_t))((char *)v0 + ((v3 + 40) & ~v3)), v1, v2);
}

id sub_10027D3C8(uint64_t a1, void *a2)
{
  ObjectType  = (objc_class *)swift_getObjectType(v2);
  *(void *)&v2[qword_10040DA70]  = 0LL;
  *(void *)&v2[qword_10040DA78]  = _swiftEmptyArrayStorage;
  *(void *)&v2[qword_10040DA80]  = 0LL;
  v2[qword_10040DA88]  = 0;
  uint64_t v6 = v2;
  Logger.init(subsystem:category:)( 0x6C7070612E6D6F63LL,  0xED00006E616E2E65LL,  0xD000000000000011LL,  0x8000000100360A30LL);
  char v7 = &v6[qword_100410AD0];
  *((_WORD *)v7 + 2)  = 0;
  *(_DWORD *)char v7 = 0;
  v7[6]  = 1;
  uint64_t v8 = &v6[qword_10040DA90];
  *uint64_t v8 = 4LL;
  v8[1]  = 0LL;
  _OWORD v8[2] = 0LL;
  *(_OWORD *)&v6[qword_10040DA98]  = xmmword_10033BED0;
  swift_unknownObjectWeakInit(&v6[qword_100410AD8], 0LL);
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  id v9 = &v6[qword_10040DAA8];
  *(_OWORD *)id v9 = xmmword_100337020;
  v9[16]  = 0;
  v6[qword_10040DAB0]  = 0;
  v6[qword_10040DAB8]  = 0;
  *(_DWORD *)&v6[qword_10040DAC0]  = -1;
  v6[qword_10040DAC8]  = 0;
  *(void *)&v6[qword_100410AE0]  = 1LL;
  uint64_t v10 = &v6[qword_100410AE8];
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = &v6[qword_10040DAD0];
  uint64_t v13 = type metadata accessor for NANInternetSharingStatistics.Requester(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = &v6[qword_100410AF0];
  *(void *)uint64_t v14 = 0LL;
  v14[8]  = 1;
  *(void *)&v6[qword_10040DA60]  = a1;
  sub_10027D18C((uint64_t)a2, (uint64_t)&v6[qword_10040DA68]);
  swift_unownedRetain(a1);

  v23.receiver  = v6;
  v23.super_class  = ObjectType;
  id v15 = objc_msgSendSuper2(&v23, "init");
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v22 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v18 = 138412290;
    id v24 = v15;
    id v19 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    *os_log_type_t v22 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Created %@", v18, 0xCu);
    uint64_t v20 = sub_100002274(&qword_100404DE0);
    swift_arrayDestroy(v22, 1LL, v20);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    uint64_t v16 = (os_log_s *)v15;
  }

  sub_10027D1C8(a2);
  return v15;
}

id sub_10027D778(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10027D3C8(a1, a2);
}

void *sub_10027D7C0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1002C9FBC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t v12 = 32 * a1;
  uint64_t v13 = (char *)&v4[4 * a1 + 4];
  uint64_t v14 = sub_100002274((uint64_t *)&unk_10040DD00);
  uint64_t result = (void *)swift_arrayDestroy(v13, v7, v14);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v16 = v4[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000LL) == 0)
  {
    id v19 = (char *)&v4[4 * a2 + 4];
    size_t v20 = 32 * v18;
    if (v12 != 32 * a2 || v13 >= &v19[v20]) {
      uint64_t result = memmove(v13, v19, v20);
    }
    uint64_t v21 = v4[2];
    BOOL v17 = __OFADD__(v21, v8);
    uint64_t v22 = v21 - v7;
    if (!v17)
    {
      void v4[2] = v22;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

char *sub_10027D938(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= v4[3] >> 1)
  {
    if (!v8) {
      goto LABEL_24;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)sub_1000A6F98(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_24;
    }
  }

  uint64_t v12 = v4[2];
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_30;
  }
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = (char *)v4 + 10 * a1 + 32;
    id v15 = (char *)v4 + 10 * a2 + 32;
    size_t v16 = 10 * v14;
    if (10 * a1 < 10 * a2 || (result < &v15[v16] ? (BOOL v17 = a1 == a2) : (BOOL v17 = 0), !v17)) {
      uint64_t result = (char *)memmove(result, v15, v16);
    }
    uint64_t v18 = v4[2];
    BOOL v13 = __OFADD__(v18, v8);
    uint64_t v19 = v18 + v8;
    if (!v13)
    {
      void v4[2] = v19;
LABEL_24:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_31;
  }

uint64_t sub_10027DAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v5 = 0LL;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }

      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_unknownObjectRetain(v6);
      }

      swift_unknownObjectRelease(v6);
      if (v6 == a2) {
        break;
      }
      uint64_t v7 = v5 + 1;
      if (__OFADD__(v5, 1LL))
      {
        __break(1u);
LABEL_11:
        if (a1 < 0) {
          uint64_t v8 = a1;
        }
        else {
          uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a1);
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v8);
        swift_bridgeObjectRelease(a1);
        uint64_t v5 = 0LL;
        if (!v4) {
          return v5;
        }
      }

      else
      {
        ++v5;
        if (v7 == v4) {
          return 0LL;
        }
      }
    }
  }

  return v5;
}

uint64_t sub_10027DB98(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v6 = swift_bridgeObjectRetain(*a1);
  unint64_t v7 = sub_10027DAA8(v6, a2);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2) {
    return v7;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_57;
    }
    unint64_t v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if ((v9 & 0x8000000000000000LL) != 0LL) {
        uint64_t v29 = v9;
      }
      else {
        uint64_t v29 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v9);
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v9);
      if (v10 != v30) {
        goto LABEL_6;
      }
    }

    else if (v10 != *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      for (i  = v7 + 5; ; ++i)
      {
        unint64_t v9 = i - 4;
        unint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
        }

        else
        {
          if ((v9 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }

          if (v9 >= *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_48;
          }
          uint64_t v13 = *(void *)(v12 + 8 * i);
          swift_unknownObjectRetain(v13);
        }

        swift_unknownObjectRelease(v13);
        if (v13 != a2) {
          break;
        }
LABEL_32:
        uint64_t v10 = i - 3;
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_49;
        }
        uint64_t v24 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v24 < 0) {
            uint64_t v26 = *a1;
          }
          else {
            uint64_t v26 = v24 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*a1);
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v26);
          swift_bridgeObjectRelease(v24);
        }

        else
        {
          uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v10 == v25) {
          return v7;
        }
      }

      if (v9 == v7)
      {
LABEL_31:
        if (__OFADD__(v7++, 1LL)) {
          goto LABEL_50;
        }
        goto LABEL_32;
      }

      uint64_t v10 = *a1;
      if ((*a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        uint64_t v10 = *a1;
        if ((*a1 & 0xC000000000000001LL) == 0)
        {
LABEL_17:
          if ((v9 & 0x8000000000000000LL) != 0) {
            goto LABEL_53;
          }
          if (v9 >= *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_54;
          }
          uint64_t v15 = *(void *)(v10 + 8 * i);
          swift_unknownObjectRetain(v15);
          goto LABEL_20;
        }
      }

      else
      {
        if ((v7 & 0x8000000000000000LL) != 0) {
          goto LABEL_51;
        }
        if (v7 >= *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_52;
        }
        uint64_t v14 = *(void *)(v10 + 8 * v7 + 32);
        swift_unknownObjectRetain(v14);
        if ((v10 & 0xC000000000000001LL) == 0) {
          goto LABEL_17;
        }
      }

      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
      uint64_t v10 = *a1;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject  = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *a1  = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000LL) != 0)
      {
        uint64_t v10 = sub_10032CC28(v10);
        *a1  = v10;
      }

      uint64_t v17 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20);
      *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20)  = v15;
      uint64_t v18 = swift_unknownObjectRelease(v17);
      specialized Array._endMutation()(v18);
      uint64_t v10 = *a1;
      int v19 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1  = v10;
      if (!v19 || v10 < 0 || (v10 & 0x4000000000000000LL) != 0)
      {
        uint64_t v10 = sub_10032CC28(v10);
        *a1  = v10;
      }

      if ((v9 & 0x8000000000000000LL) != 0) {
        goto LABEL_55;
      }
      uint64_t v20 = v10 & 0xFFFFFFFFFFFFFF8LL;
      if (v9 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_56;
      }
      uint64_t v21 = *(void *)(v20 + 8 * i);
      *(void *)(v20 + 8 * i)  = v14;
      uint64_t v22 = swift_unknownObjectRelease(v21);
      specialized Array._endMutation()(v22);
      goto LABEL_31;
    }

    return v7;
  }

  uint64_t v27 = *a1;
  if (v27 < 0) {
    uint64_t v31 = v27;
  }
  else {
    uint64_t v31 = v27 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v27);
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v27);
  return v32;
}

uint64_t sub_10027DEB4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v21 = v5;
  }
  else {
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v7;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }

void sub_10027E184()
{
}

uint64_t sub_10027E190(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10027E1CC()
{
}

uint64_t sub_10027E1F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10027E21C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10027E230()
{
  return swift_deallocObject(v0, 46LL, 7LL);
}

void sub_10027E254(uint64_t a1)
{
}

uint64_t sub_10027E26C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain(v2);
}

uint64_t sub_10027E27C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10027E284(uint64_t a1, uint64_t a2)
{
}

void sub_10027E2A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v18[0]  = *(void *)(v2 - 8) + 64LL;
    v18[1]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v18[2]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v18[3]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v18[4]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v18[5]  = (char *)&value witness table for Builtin.BridgeObject + 64;
    v18[6]  = (char *)&value witness table for Builtin.Int64 + 64;
    v18[7]  = "\b";
    v18[8]  = "\b";
    uint64_t v4 = type metadata accessor for DispatchTime(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v19 = *(void *)(v4 - 8) + 64LL;
      uint64_t v20 = v19;
      uint64_t v21 = &unk_10035EB80;
      uint64_t v22 = &unk_10035EB80;
      uint64_t v23 = (char *)&value witness table for Builtin.NativeObject + 64;
      uint64_t v24 = (char *)&value witness table for Builtin.NativeObject + 64;
      uint64_t v25 = (char *)&value witness table for Builtin.NativeObject + 64;
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = *(void *)(*(void *)(a1 + 88) + 8LL);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v7,  v6,  &protocol requirements base descriptor for P2PControls);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v7,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
      uint64_t v10 = swift_getAssociatedTypeWitness( 319LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
      if (v11 <= 0x3F)
      {
        uint64_t v26 = *(void *)(v10 - 8) + 64LL;
        sub_100281F74(319LL);
        if (v13 <= 0x3F)
        {
          uint64_t v27 = *(void *)(v12 - 8) + 64LL;
          sub_100056310(319LL, &qword_10040DE18, type metadata accessor for PriorityRadioConstraint);
          if (v15 <= 0x3F)
          {
            uint64_t v28 = *(void *)(v14 - 8) + 64LL;
            sub_100281FCC(319LL);
            if (v17 <= 0x3F)
            {
              uint64_t v29 = *(void *)(v16 - 8) + 64LL;
              uint64_t v30 = (char *)&value witness table for Builtin.UnknownObject + 64;
              uint64_t v31 = (char *)&value witness table for Builtin.UnknownObject + 64;
              uint64_t v32 = (char *)&value witness table for Builtin.NativeObject + 64;
              uint64_t v33 = &unk_10035EB98;
              unint64_t v34 = &unk_10035EBB0;
              swift_initClassMetadata2(a1, 0LL, 25LL, v18, a1 + 96);
            }
          }
        }
      }
    }
  }

uint64_t sub_10027E498(unint64_t a1)
{
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  uint64_t v8 = *v1;
  uint64_t v9 = (uint64_t *)((char *)v1 + qword_10040DD30);
  swift_beginAccess((char *)v1 + qword_10040DD30, v32, 32LL, 0LL);
  uint64_t v10 = *v9;
  char v25 = a1;
  char v26 = v3;
  char v27 = v4;
  char v22 = v5;
  char v23 = v6;
  char v28 = v5;
  char v29 = v6;
  char v24 = v7;
  char v30 = v7;
  uint64_t v11 = *(void *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 88);
  uint64_t v14 = type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink(0LL, v11, v12, v13);
  unint64_t v15 = sub_10029F2C0();
  Dictionary.subscript.getter(&v25, v10, &type metadata for WiFiAddress, v14);
  uint64_t v16 = v31;
  if (v31)
  {
    swift_endAccess(v32);
    uint64_t v17 = swift_unownedRetainStrong(v16);
    sub_1002A0180(v17);
  }

  else
  {
    swift_endAccess(v32);
    type metadata accessor for NANDeviceLink(0LL, v11, v12, v18);
    uint64_t v19 = swift_unownedRetainStrong(*(uint64_t *)((char *)v1 + *(void *)(*v1 + 280)));
    uint64_t v16 = sub_1002A7528(v19, a1 & 0xFFFFFFFFFFFFLL);
    uint64_t v31 = swift_unownedRetain(v16);
    char v25 = a1;
    char v26 = v3;
    char v27 = v4;
    char v28 = v22;
    char v29 = v23;
    char v30 = v24;
    swift_beginAccess(v9, v32, 33LL, 0LL);
    uint64_t v20 = type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v14, v15);
    Dictionary.subscript.setter(&v31, &v25, v20);
    swift_endAccess(v32);
  }

  return v16;
}

uint64_t sub_10027E64C(uint64_t a1)
{
  KeyPath  = (void *)swift_getKeyPath(&unk_10035EF70);
  sub_10028F4E8(a1, KeyPath, 0LL);
  return swift_release(KeyPath);
}

uint64_t sub_10027E6B0(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100407450);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000226B0(v1, (uint64_t)v9, &qword_100407450);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v9, v4);
  a1(&v12, v7);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

void sub_10027E804( uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  if (a2)
  {
    uint64_t v11 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      uint64_t v14 = a6 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(a2);
      uint64_t v15 = NANPassphrase.pmk(for:serviceName:publisherAddress:)(a3, a4, a5, v14, a1, a2);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease(a2);
      *a7  = v15;
      a7[1]  = v17;
      swift_bridgeObjectRelease(a5);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    swift_bridgeObjectRelease(a5);
    *(_OWORD *)a7  = xmmword_10033BED0;
  }

void *sub_10027E8CC( void *(*a1)(uint64_t *__return_ptr, __int16 *), uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x1000000000000LL) != 0)
  {
    int v5 = 0;
  }

  else
  {
    __int16 v7 = a3;
    char v8 = BYTE2(a3);
    char v9 = BYTE3(a3);
    char v10 = BYTE4(a3);
    char v11 = BYTE5(a3);
    uint64_t result = a1(&v12, &v7);
    if (v3) {
      return result;
    }
    int v5 = v12;
  }

  return (void *)(v5 | ((HIWORD(a3) & 1) << 8));
}

void *sub_10027E95C(void *(*a1)(uint64_t *__return_ptr, __int16 *), uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000LL) != 0) {
    return (void *)((a3 & 0x1000000000000uLL) >> 48);
  }
  __int16 v6 = a3;
  char v7 = BYTE2(a3);
  char v8 = BYTE3(a3);
  char v9 = BYTE4(a3);
  char v10 = BYTE5(a3);
  uint64_t result = a1(&v11, &v6);
  if (!v3) {
    return (void *)((a3 & 0x1000000000000uLL) >> 48);
  }
  return result;
}

void *sub_10027E9D8(void *(*a1)(uint64_t *__return_ptr, __int16 *), uint64_t a2, int a3)
{
  if ((a3 & 0x10000) != 0) {
    return (void *)((a3 & 0x10000u) >> 16);
  }
  __int16 v6 = a3;
  uint64_t result = a1(&v7, &v6);
  if (!v3) {
    return (void *)((a3 & 0x10000u) >> 16);
  }
  return result;
}

uint64_t sub_10027EA2C@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  char v27 = a1;
  uint64_t v24 = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    }
    uint64_t v22 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(a6, v22, 1LL);
}

void sub_10027EBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v10 = *v6;
  uint64_t v12 = *(void *)(*v6 + 80);
  uint64_t v11 = *(void *)(*v6 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v11 + 8),  v12,  &protocol requirements base descriptor for P2PControls);
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *(uint64_t *)((char *)v6 + *(void *)(v10 + 280));
  swift_unownedRetainStrong(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( v16,  v17 + *(void *)(*(void *)v17 + 96LL),  AssociatedTypeWitness);
  swift_release(v17);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v11,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))( a1,  a2 & 0xFFFFFFFFFFFFLL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  uint64_t v19 = swift_bridgeObjectRetain_n(a5, 2LL);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(25LL, -1LL);
    uint64_t v23 = swift_slowAlloc(64LL, -1LL);
    v31[0]  = v23;
    *(_DWORD *)uint64_t v22 = 136315650;
    uint64_t v24 = WiFiAddress.description.getter(v28 & 0xFFFFFFFFFFFFLL);
    unint64_t v26 = v25;
    uint64_t v30 = sub_10000235C(v24, v25, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v22 + 12)  = 256;
    LOBYTE(v30)  = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 1);
    *(_WORD *)(v22 + 15)  = 2080;
    swift_bridgeObjectRetain(a5);
    uint64_t v30 = sub_10000235C(v29, a5, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
    swift_bridgeObjectRelease_n(a5, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Terminated datapath request from %s[%hhu] because %s",  (uint8_t *)v22,  0x19u);
    swift_arrayDestroy(v23, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a5, 2LL);
  }
}

char *sub_10027F0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  char v8 = v4;
  uint64_t v10 = *(void *)(*v4 + 80);
  uint64_t v9 = *(void *)(*v4 + 88);
  uint64_t v11 = _s17ResponderInstanceCMa(0LL, v10, v9, a4);
  uint64_t v12 = *(uint64_t *)((char *)v8 + *(void *)(v7 + 280));
  swift_unownedRetainStrong(v12);
  sub_10022B484(a1, (uint64_t)v30);
  uint64_t v13 = (char *)sub_10022B928(v12, (uint64_t)v30);
  swift_release(v12);
  swift_unknownObjectWeakAssign(&v13[qword_1004109D8], a2);
  char v14 = *(_BYTE *)a1;
  __int16 v15 = *(_WORD *)(a1 + 12);
  uint64_t v16 = v13;
  WitnessTable  = swift_getWitnessTable(&unk_10035D5BC, v11);
  LODWORD(v8)  = *(_DWORD *)(a1 + 8);
  sub_10029FC24((uint64_t)v16, 0LL, v10, v11, v9, WitnessTable);
  uint64_t v19 = v18;

  v29[0]  = v16;
  v29[1]  = v19;
  char v26 = v14;
  int v27 = (int)v8;
  __int16 v28 = v15;
  swift_beginAccess(v24 + qword_10040DD28, v25, 33LL, 0LL);
  v30[0]  = v10;
  v30[1]  = v11;
  v30[2]  = v9;
  v30[3]  = WitnessTable;
  uint64_t v20 = type metadata accessor for NANDiscoveryEngine.ServiceSession(255LL, (uint64_t)v30);
  unint64_t v21 = sub_10017B5C8();
  uint64_t v22 = type metadata accessor for Dictionary(0LL, &type metadata for NANPeerServiceIdentifier, v20, v21);
  Dictionary.subscript.setter(v29, &v26, v22);
  swift_endAccess(v25);
  sub_10027FACC();
  return v16;
}

uint64_t sub_10027F264(uint64_t a1)
{
  return sub_10029E618(a1, (uint64_t)&unk_10035EFA8, (uint64_t)&unk_10035EFE0);
}

void sub_10027F278()
{
}

uint64_t sub_10027F2A0()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v7 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = (uint64_t *)(v1 + qword_10040DD20);
  swift_beginAccess(v1 + qword_10040DD20, v40, 0LL, 0LL);
  uint64_t v14 = *v13;
  uint64_t v16 = _s17InitiatorInstanceCMa(0LL, v3, v2, v15);
  swift_bridgeObjectRetain(v14);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA58, v16);
  LOBYTE(v16)  = sub_100288610(v14, v3, v16, v2, WitnessTable);
  uint64_t result = swift_bridgeObjectRelease(v14);
  if ((v16 & 1) != 0)
  {
    uint64_t v19 = (_BYTE *)(v1 + *(void *)(*(void *)v1 + 288LL));
    if ((*v19 & 1) != 0) {
      return result;
    }
    char v20 = 1;
  }

  else
  {
    unint64_t v21 = (uint64_t *)(v1 + qword_10040DD28);
    swift_beginAccess(v1 + qword_10040DD28, v39, 0LL, 0LL);
    uint64_t v22 = *v21;
    uint64_t v24 = _s17ResponderInstanceCMa(0LL, v3, v2, v23);
    swift_bridgeObjectRetain(v22);
    uint64_t v25 = swift_getWitnessTable(&unk_10035D5D8, v24);
    char v20 = sub_100288610(v22, v3, v24, v2, v25);
    uint64_t result = swift_bridgeObjectRelease(v22);
    uint64_t v19 = (_BYTE *)(v1 + *(void *)(*(void *)v1 + 288LL));
    if ((v20 & 1) == *v19) {
      return result;
    }
  }

  uint64_t v26 = v20 & 1;
  *uint64_t v19 = v20 & 1;
  int v27 = (os_log_s *)Logger.logObject.getter(result);
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v29 = 67109120;
    int v38 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "NAN realtime mode has changed to %{BOOL}d", v29, 8u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  uint64_t v30 = *(void *)(v1 + *(void *)(*(void *)v1 + 280LL));
  swift_unownedRetainStrong(v30);
  uint64_t v31 = *(void *)(v30 + *(void *)(*(void *)v30 + 688LL));
  swift_unownedRetainStrong(v31);
  swift_release(v30);
  uint64_t v32 = sub_1003323F8((uint64_t)&off_1003F2088);
  sub_1002D3C68(v26, (uint64_t)v32);
  swift_release(v31);
  swift_bridgeObjectRelease(v32);
  swift_unownedRetainStrong(v30);
  uint64_t v33 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v12, v30 + *(void *)(*(void *)v30 + 112LL), v10);
  swift_release(v30);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144))(v10, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
  uint64_t v34 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  v10,  v7,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.CoreAnalytics: CoreAnalyticsControls);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 8))(v26, v7, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v9, v7);
}

uint64_t sub_10027F690(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)((char *)v1 + qword_10040DD20);
  swift_beginAccess((char *)v1 + qword_10040DD20, v20, 0LL, 0LL);
  uint64_t v5 = *v4;
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v6 = *(void *)(v3 + 88);
  uint64_t v9 = _s17InitiatorInstanceCMa(0LL, v7, v6, v8);
  swift_bridgeObjectRetain(v5);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA58, v9);
  unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  LOBYTE(v9)  = sub_100287DAC(v5, v11, v7, v9, v6, WitnessTable);
  swift_bridgeObjectRelease(v5);
  if ((v9 & 1) != 0)
  {
    char v12 = 1;
  }

  else
  {
    uint64_t v13 = (uint64_t *)((char *)v1 + qword_10040DD28);
    swift_beginAccess(v13, &v19, 0LL, 0LL);
    uint64_t v14 = *v13;
    uint64_t v16 = _s17ResponderInstanceCMa(0LL, v7, v6, v15);
    swift_bridgeObjectRetain(v14);
    uint64_t v17 = swift_getWitnessTable(&unk_10035D5D8, v16);
    char v12 = sub_100287DAC(v14, v11, v7, v16, v6, v17);
    swift_bridgeObjectRelease(v14);
  }

  return v12 & 1;
}

uint64_t sub_10027F7D0(uint64_t a1)
{
  return sub_10029E618(a1, (uint64_t)&unk_10035F000, (uint64_t)&unk_10035F038);
}

void *sub_10027F7E4(void *result)
{
  if (result)
  {
    id v2 = result;
    return (void *)sub_10027F824(&v2, v1);
  }

  return result;
}

uint64_t sub_10027F824(id *a1, uint64_t a2)
{
  id v3 = *a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v4 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v4 + 0x10);
  unint64_t v5 = *(void *)(v4 + 24);
  if (v6 >= v5 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1LL);
  }
  uint64_t v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v3);
  return specialized Array._endMutation()(v7);
}

uint64_t sub_10027F8A0(uint64_t a1, uint64_t a2)
{
  if (!((unint64_t)a2 >> 62))
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n(a2, 2LL);
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n(a2, 2LL);
  }

  if (a2 < 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v15);
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n(a2, 2LL);
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0LL;
    unint64_t v17 = a2 & 0xC000000000000001LL;
    do
    {
      if (v17) {
        unint64_t v11 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a2);
      }
      else {
        unint64_t v11 = (char *)*(id *)(a2 + 8 * v5 + 32);
      }
      char v12 = v11;
      memset(v20, 0, sizeof(v20));
      uint64_t v13 = *(void **)&v11[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
      sub_1000226B0((uint64_t)v20, (uint64_t)v18, &qword_100405280);
      uint64_t v14 = v19;
      if (v19)
      {
        unint64_t v6 = sub_100021104(v18, v19);
        uint64_t v7 = *(void *)(v14 - 8);
        __chkstk_darwin(v6);
        uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v7 + 16))(v9);
        uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v14);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v14);
        sub_100002AC4(v18);
      }

      else
      {
        uint64_t v10 = 0LL;
      }

      ++v5;
      [v13 setExportedObject:v10];
      swift_unknownObjectRelease(v10);
      sub_1000225EC((uint64_t)v20, &qword_100405280);
    }

    while (v3 != v5);
    return swift_bridgeObjectRelease_n(a2, 2LL);
  }

  __break(1u);
  return result;
}

uint64_t sub_10027FA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[3]  = a4;
  v5[0]  = a1;
  swift_unknownObjectRetain(a1);
  return Mirror.init(reflecting:)(v5);
}

uint64_t sub_10027FAB8(uint64_t a1)
{
  return sub_10027FA7C(*v1, v1[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

void sub_10027FACC()
{
  uint64_t v1 = v0;
  id v2 = (void *)*v0;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)((char *)v0 + v2[35]);
  swift_unownedRetainStrong(v7);
  int v48 = sub_1002E9E34();
  swift_release(v7);
  uint64_t v8 = (void *)((char *)v0 + qword_10040DD20);
  swift_beginAccess((char *)v0 + qword_10040DD20, v55, 0LL, 0LL);
  uint64_t v9 = *v8;
  uint64_t v10 = v2[10];
  uint64_t v11 = v2[11];
  uint64_t v13 = _s17InitiatorInstanceCMa(255LL, v10, v11, v12);
  swift_bridgeObjectRetain(v9);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v13);
  uint64_t v51 = v10;
  uint64_t v52 = v13;
  uint64_t v53 = v11;
  uint64_t v54 = WitnessTable;
  uint64_t v15 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v51);
  unint64_t v16 = sub_10017B5C8();
  LOBYTE(v15)  = Dictionary.isEmpty.getter(v9, &type metadata for NANPeerServiceIdentifier, v15, v16);
  swift_bridgeObjectRelease(v9);
  if ((v15 & 1) != 0)
  {
    unint64_t v17 = (void *)((char *)v1 + qword_10040DD28);
    swift_beginAccess((char *)v1 + qword_10040DD28, v50, 0LL, 0LL);
    uint64_t v18 = *v17;
    uint64_t v20 = _s17ResponderInstanceCMa(255LL, v10, v11, v19);
    swift_bridgeObjectRetain(v18);
    uint64_t v21 = swift_getWitnessTable(&unk_10035D5BC, v20);
    uint64_t v51 = v10;
    uint64_t v52 = v20;
    uint64_t v53 = v11;
    uint64_t v54 = v21;
    uint64_t v22 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v51);
    char v23 = Dictionary.isEmpty.getter(v18, &type metadata for NANPeerServiceIdentifier, v22, v16);
    swift_bridgeObjectRelease(v18);
    if ((v23 & 1) != 0)
    {
      uint64_t v24 = (void *)((char *)v1 + qword_10040DD30);
      swift_beginAccess((char *)v1 + qword_10040DD30, v49, 0LL, 0LL);
      uint64_t v25 = *v24;
      uint64_t v27 = type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink(0LL, v10, v11, v26);
      unint64_t v28 = sub_10029F2C0();
      uint64_t v46 = v6;
      unint64_t v29 = v28;
      uint64_t v30 = NANBitmap.Channel.operatingClass.getter(v25);
      uint64_t v45 = (uint64_t)&v45;
      uint64_t v51 = v30;
      __chkstk_darwin();
      uint64_t v47 = v4;
      *(&v45 - 2)  = v10;
      *(&v45 - 1)  = v11;
      uint64_t v31 = type metadata accessor for Dictionary.Values(0LL, &type metadata for WiFiAddress, v27, v29);
      swift_bridgeObjectRetain(v30);
      uint64_t v32 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v31);
      uint64_t v4 = v47;
      Sequence.forEach(_:)(sub_10029F304, &v45 - 4, v31, v32);
      swift_bridgeObjectRelease(v51);
      swift_beginAccess(v24, &v51, 33LL, 0LL);
      unint64_t v33 = v29;
      unint64_t v6 = v46;
      type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v27, v33);
      Dictionary.removeAll(keepingCapacity:)(0);
      swift_endAccess(&v51);
    }
  }

  swift_unownedRetainStrong(v7);
  sub_10028009C();
  sub_1002EA9AC(v34 > 0);
  swift_release(v7);
  sub_100285EA0();
  sub_100286518();
  sub_100286C18();
  sub_1002814F4();
  sub_10027F2A0();
  sub_10028DC40();
  sub_10028DE68();
  swift_unownedRetainStrong(v7);
  char v35 = sub_1002E9E34();
  swift_release(v7);
  if ((v48 & 1) != 0) {
    uint64_t v36 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v36 = 0x64656C6261736964LL;
  }
  if ((v48 & 1) != 0) {
    unint64_t v37 = 0xE700000000000000LL;
  }
  else {
    unint64_t v37 = 0xE800000000000000LL;
  }
  if ((v35 & 1) != 0) {
    uint64_t v38 = 0x64656C62616E65LL;
  }
  else {
    uint64_t v38 = 0x64656C6261736964LL;
  }
  if ((v35 & 1) != 0) {
    unint64_t v39 = 0xE700000000000000LL;
  }
  else {
    unint64_t v39 = 0xE800000000000000LL;
  }
  if (v36 == v38 && v37 == v39)
  {
    swift_bridgeObjectRelease_n(v37, 2LL);
  }

  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v38, v39, 0LL);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v39);
    if ((v40 & 1) == 0)
    {
      uint64_t v41 = *(void *)NANDiscoveryWindowIndex.first.unsafeMutableAddressor();
      uint64_t v42 = *(void *)((char *)v1 + qword_10040DD38);
      *(void *)((char *)v1 + qword_10040DD38)  = v41;
      sub_1002806A0(v42);
      type metadata accessor for P2PTimer(0LL);
      variable initialization expression of AWDLPeer.lastUpdated();
      unint64_t v43 = (char *)v1 + qword_10040DD58;
      __n128 v44 = swift_beginAccess((char *)v1 + qword_10040DD58, &v51, 33LL, 0LL);
      (*(void (**)(char *, char *, uint64_t, __n128))(v4 + 40))(v43, v6, v3, v44);
      swift_endAccess(&v51);
    }
  }

uint64_t sub_10027FF58()
{
  return sub_100280000(&qword_10040DD10);
}

uint64_t sub_10027FF64()
{
  return sub_100280000(&qword_10040DD18);
}

uint64_t sub_10027FF70()
{
  return sub_100280000(&qword_10040DD20);
}

void (*sub_10027FF7C(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24)  = v1;
  swift_beginAccess(v1 + qword_10040DD20, a1, 33LL, 0LL);
  return sub_10027FFC4;
}

void sub_10027FFC4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    sub_10027FACC();
  }
}

uint64_t sub_10027FFF4()
{
  return sub_100280000(&qword_10040DD28);
}

uint64_t sub_100280000(void *a1)
{
  id v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v2);
}

void sub_100280044(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v6, 1LL, 0LL);
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
  swift_bridgeObjectRelease(v5);
  sub_10027FACC();
}

void sub_10028009C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)((char *)v0 + qword_10040DD10);
  swift_beginAccess((char *)v0 + qword_10040DD10, v42, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v7 = _s8InstanceCMa(255LL, v5, v4, v6);
  swift_bridgeObjectRetain(v3);
  uint64_t v38 = v5;
  uint64_t v39 = v7;
  uint64_t v40 = v4;
  WitnessTable  = swift_getWitnessTable(&unk_10035F874, v7);
  uint64_t v8 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v38);
  uint64_t v9 = Dictionary.count.getter(v3, &type metadata for UInt8, v8, &protocol witness table for UInt8);
  swift_bridgeObjectRelease(v3);
  uint64_t v10 = (uint64_t *)((char *)v0 + qword_10040DD18);
  swift_beginAccess((char *)v0 + qword_10040DD18, v37, 0LL, 0LL);
  uint64_t v11 = *v10;
  uint64_t v13 = _s8InstanceCMa_0(255LL, v5, v4, v12);
  swift_bridgeObjectRetain(v11);
  uint64_t v14 = swift_getWitnessTable(&unk_10035E28C, v13);
  uint64_t v38 = v5;
  uint64_t v39 = v13;
  uint64_t v40 = v4;
  WitnessTable  = v14;
  uint64_t v15 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v38);
  uint64_t v16 = Dictionary.count.getter(v11, &type metadata for UInt8, v15, &protocol witness table for UInt8);
  swift_bridgeObjectRelease(v11);
  BOOL v17 = __OFADD__(v9, v16);
  uint64_t v18 = v9 + v16;
  if (v17)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v19 = (uint64_t *)((char *)v0 + qword_10040DD20);
  swift_beginAccess((char *)v0 + qword_10040DD20, v36, 0LL, 0LL);
  uint64_t v20 = *v19;
  uint64_t v22 = _s17InitiatorInstanceCMa(255LL, v5, v4, v21);
  swift_bridgeObjectRetain(v20);
  uint64_t v23 = swift_getWitnessTable(&unk_10035EA3C, v22);
  uint64_t v38 = v5;
  uint64_t v39 = v22;
  uint64_t v40 = v4;
  WitnessTable  = v23;
  uint64_t v24 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v38);
  unint64_t v25 = sub_10017B5C8();
  uint64_t v26 = Dictionary.count.getter(v20, &type metadata for NANPeerServiceIdentifier, v24, v25);
  swift_bridgeObjectRelease(v20);
  BOOL v17 = __OFADD__(v18, v26);
  uint64_t v27 = v18 + v26;
  if (v17)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  unint64_t v28 = (uint64_t *)((char *)v0 + qword_10040DD28);
  swift_beginAccess(v28, &v35, 0LL, 0LL);
  uint64_t v29 = *v28;
  uint64_t v31 = _s17ResponderInstanceCMa(255LL, v5, v4, v30);
  swift_bridgeObjectRetain(v29);
  uint64_t v32 = swift_getWitnessTable(&unk_10035D5BC, v31);
  uint64_t v38 = v5;
  uint64_t v39 = v31;
  uint64_t v40 = v4;
  WitnessTable  = v32;
  uint64_t v33 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v38);
  uint64_t v34 = Dictionary.count.getter(v29, &type metadata for NANPeerServiceIdentifier, v33, v25);
  swift_bridgeObjectRelease(v29);
  if (__OFADD__(v27, v34)) {
LABEL_7:
  }
    __break(1u);
}

uint64_t sub_100280334()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)((char *)v0 + qword_10040DD10);
  swift_beginAccess((char *)v0 + qword_10040DD10, v32, 0LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v28 = v5;
  uint64_t v29 = _s8InstanceCMa(255LL, v5, v6, v7);
  uint64_t v30 = v6;
  WitnessTable  = swift_getWitnessTable(&unk_10035F874, v29);
  uint64_t v8 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v28);
  uint64_t v9 = NANBitmap.Channel.operatingClass.getter(v4);
  uint64_t v28 = v9;
  uint64_t v25 = v5;
  uint64_t v26 = v6;
  uint64_t v10 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt8,  v8,  &protocol witness table for UInt8);
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v10);
  LOBYTE(v9)  = Sequence.contains(where:)(sub_10029FFF8, v24, v10, v11);
  swift_bridgeObjectRelease(v28);
  if ((v9 & 1) != 0)
  {
    char v12 = 1;
  }

  else
  {
    uint64_t v13 = (void *)((char *)v1 + qword_10040DD18);
    swift_beginAccess((char *)v1 + qword_10040DD18, v27, 0LL, 0LL);
    uint64_t v14 = *v13;
    uint64_t v16 = _s8InstanceCMa_0(255LL, v5, v6, v15);
    uint64_t v17 = swift_getWitnessTable(&unk_10035E28C, v16);
    uint64_t v28 = v5;
    uint64_t v29 = v16;
    uint64_t v30 = v6;
    WitnessTable  = v17;
    uint64_t v18 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v28);
    uint64_t v19 = NANBitmap.Channel.operatingClass.getter(v14);
    uint64_t v28 = v19;
    __chkstk_darwin();
    v23[2]  = v5;
    v23[3]  = v6;
    uint64_t v20 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt8,  v18,  &protocol witness table for UInt8);
    swift_bridgeObjectRetain(v19);
    uint64_t v21 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v20);
    char v12 = Sequence.contains(where:)(sub_1002A0058, v23, v20, v21);
    swift_bridgeObjectRelease(v28);
  }

  return v12 & 1;
}

uint64_t sub_100280578()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)((char *)v0 + qword_10040DD30);
  swift_beginAccess((char *)v0 + qword_10040DD30, v18, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v7 = type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink(0LL, v4, v5, v6);
  unint64_t v8 = sub_10029F2C0();
  uint64_t v17 = NANBitmap.Channel.operatingClass.getter(v3);
  v16[2]  = v4;
  v16[3]  = v5;
  uint64_t v9 = type metadata accessor for Dictionary.Values(0LL, &type metadata for WiFiAddress, v7, v8);
  uint64_t v11 = type metadata accessor for NANDeviceLink(0LL, v4, v5, v10);
  swift_bridgeObjectRetain(v17);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v9);
  uint64_t v14 = sub_100302E9C( (void (*)(char *, char *))sub_10029FD88,  (uint64_t)v16,  v9,  v11,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v13);
  swift_bridgeObjectRelease(v17);
  return v14;
}

uint64_t *sub_1002806A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v41 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v40 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v39 - v6);
  __chkstk_darwin();
  uint64_t v42 = (uint64_t *)((char *)&v39 - v8);
  uint64_t v10 = v3[10];
  uint64_t v9 = v3[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v9 + 8),  v10,  &protocol requirements base descriptor for P2PControls);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = *(void *)((char *)v2 + v3[35]);
  swift_unownedRetainStrong(v15);
  char v16 = sub_1002E9E34();
  swift_release(v15);
  if ((v16 & 1) == 0)
  {
    uint64_t v17 = *(void *)((char *)v2 + qword_10040DD40);
    *(void *)((char *)v2 + qword_10040DD40)  = 0LL;
    return (uint64_t *)swift_release(v17);
  }

  swift_unownedRetainStrong(v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))( v14,  v15 + *(void *)(*(void *)v15 + 96LL),  AssociatedTypeWitness);
  swift_release(v15);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v10,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 368))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = qword_10040DD38;
    if (*(void *)((char *)v2 + qword_10040DD38) != v41 || !*(void *)((char *)v2 + qword_10040DD40))
    {
      sub_100288A80();
      uint64_t result = sub_10028DC40();
      uint64_t v22 = *(void *)((char *)v2 + v21);
      if (v22 == 15)
      {
        uint64_t v23 = 0LL;
      }

      else
      {
        uint64_t v23 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_15;
        }
      }

      uint64_t result = (uint64_t *)NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor();
      uint64_t v24 = *result;
      if ((unint64_t)*result >> 54)
      {
        __break(1u);
      }

      else
      {
        uint64_t v41 = v23;
        uint64_t v25 = v24 << 10;
        if ((v25 & 0x8000000000000000LL) == 0)
        {
          *uint64_t v7 = v25;
          uint64_t v26 = v39;
          uint64_t v27 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v39 + 104);
          v27(v7, enum case for DispatchTimeInterval.microseconds(_:), v4);
          uint64_t v28 = (uint64_t)v40;
          *uint64_t v40 = 12LL;
          uint64_t v29 = enum case for DispatchTimeInterval.milliseconds(_:);
          v27((uint64_t *)v28, enum case for DispatchTimeInterval.milliseconds(_:), v4);
          static DispatchTimeInterval.+ infix(_:_:)((uint64_t)v7, v28, v42);
          uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
          v30(v28, v4);
          v30((uint64_t)v7, v4);
          uint64_t v31 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
          *uint64_t v7 = 2LL;
          v27(v7, v29, v4);
          uint64_t v32 = swift_allocObject(&unk_1003F5748, 24LL, 7LL);
          swift_weakInit(v32 + 16, v2);
          uint64_t v33 = (void *)swift_allocObject(&unk_1003F5770, 48LL, 7LL);
          v33[2]  = v10;
          v33[3]  = v9;
          uint64_t v34 = v41;
          v33[4]  = v32;
          v33[5]  = v34;
          v27((uint64_t *)v28, enum case for DispatchTimeInterval.never(_:), v4);
          uint64_t v35 = type metadata accessor for P2PTimer(0LL);
          swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
          id v36 = v31;
          uint64_t v37 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v42,  v36,  v28,  (uint64_t)v7,  (uint64_t)sub_10029F384,  (uint64_t)v33);
          uint64_t v38 = *(void *)((char *)v2 + qword_10040DD40);
          *(void *)((char *)v2 + qword_10040DD40)  = v37;
          return (uint64_t *)swift_release(v38);
        }
      }

      __break(1u);
LABEL_15:
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100280A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_100280AB8(a2);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100280AB8(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(void *)(v1 + qword_10040DD38) != a1)
  {
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(a1);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v6 = 134217984;
      uint64_t v9 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missed DW start event for DW index: %ld", v6, 0xCu);
      swift_slowDealloc(v6, -1LL, -1LL);
    }
  }

  uint64_t v7 = *(void *)(v2 + qword_10040DD38);
  *(void *)(v2 + qword_10040DD38)  = a1;
  return sub_1002806A0(v7);
}

uint64_t sub_100280BC0(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  sub_100002274(&qword_10040E428);
  __chkstk_darwin();
  os_log_type_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = (uint64_t)v1 + v3[29];
  swift_beginAccess(v6, v18, 0LL, 0LL);
  sub_1000226B0(v6, (uint64_t)v5, &qword_10040E428);
  uint64_t v7 = v3[10];
  uint64_t v8 = *(void *)(v3[11] + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v8,  v7,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v8,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v11 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v12 = sub_100002274(&qword_10040DE10);
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v11,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.RadioManager: RadioResourceControls);
  uint64_t v14 = sub_100087780(&qword_10040E430, &qword_10040DE10, (void (*)(void))sub_1002A00B8, (uint64_t)&unk_10035E7A0);
  uint64_t v15 = sub_1000572E4((unint64_t *)&unk_10040E440, &qword_10040DE10, (uint64_t)&unk_10035E698);
  RadioResourceControls.update<A>(from:to:)(a1, (uint64_t)v5, v11, v12, v13, (uint64_t)&off_1003F4AC8, v14, v15);
  return sub_1000225EC((uint64_t)v5, &qword_10040E428);
}

uint64_t sub_100280D94(uint64_t a1)
{
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 232LL);
  swift_beginAccess(v5, v8, 0LL, 0LL);
  sub_1000226B0(v5, (uint64_t)v4, &qword_10040E428);
  swift_beginAccess(v5, v7, 33LL, 0LL);
  sub_1002A17A0(a1, v5, &qword_10040E428);
  swift_endAccess(v7);
  sub_100280BC0((uint64_t)v4);
  sub_1000225EC(a1, &qword_10040E428);
  return sub_1000225EC((uint64_t)v4, &qword_10040E428);
}

uint64_t sub_100280E80(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = sub_100002274(&qword_10040E398);
  __chkstk_darwin(v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = (uint64_t)v1 + v3[30];
  swift_beginAccess(v7, v19, 0LL, 0LL);
  sub_1000226B0(v7, (uint64_t)v6, &qword_10040E398);
  uint64_t v8 = v3[10];
  uint64_t v9 = *(void *)(v3[11] + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v9,  v8,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v8,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v12 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v13 = type metadata accessor for PriorityRadioConstraint(0LL);
  uint64_t v14 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.RadioManager: RadioResourceControls);
  uint64_t v15 = sub_10000AF70(&qword_10040E3B0, type metadata accessor for PriorityRadioConstraint, (uint64_t)&unk_10035E708);
  uint64_t v16 = sub_10000AF70(&qword_10040E3B8, type metadata accessor for PriorityRadioConstraint, (uint64_t)&unk_10035E748);
  RadioResourceControls.update<A>(from:to:)(a1, (uint64_t)v6, v12, v13, v14, (uint64_t)&off_1003F4AD8, v15, v16);
  return sub_1000225EC((uint64_t)v6, &qword_10040E398);
}

uint64_t sub_100281050(uint64_t a1)
{
  uint64_t v3 = sub_100002274(&qword_10040E398);
  __chkstk_darwin(v3);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 240LL);
  swift_beginAccess(v6, v9, 0LL, 0LL);
  sub_1000226B0(v6, (uint64_t)v5, &qword_10040E398);
  swift_beginAccess(v6, v8, 33LL, 0LL);
  sub_1002A17A0(a1, v6, &qword_10040E398);
  swift_endAccess(v8);
  sub_100280E80((uint64_t)v5);
  sub_1000225EC(a1, &qword_10040E398);
  return sub_1000225EC((uint64_t)v5, &qword_10040E398);
}

uint64_t sub_10028113C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  sub_100002274(&qword_10040E3C8);
  __chkstk_darwin();
  uint64_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v8 = &v24[-v7 - 8];
  uint64_t v23 = (char *)v1 + v4[28];
  sub_1000226B0(a1, (uint64_t)&v24[-v7 - 8], &qword_10040E3C0);
  uint64_t v9 = sub_100002274(&qword_10040E3C0);
  uint64_t v10 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 0LL, 1LL, v9);
  uint64_t v11 = (uint64_t)v2 + *(void *)(*v2 + 248LL);
  swift_beginAccess(v11, v24, 0LL, 0LL);
  sub_1000226B0(v11, (uint64_t)v6, &qword_10040E3C0);
  v10(v6, 0LL, 1LL, v9);
  uint64_t v12 = v4[10];
  uint64_t v13 = *(void *)(v4[11] + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v13,  v12,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v16 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v17 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v16,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.RadioManager: RadioResourceControls);
  uint64_t v18 = sub_100087780(&qword_10040E3D0, &qword_10040E3C0, (void (*)(void))sub_10029FCF8, (uint64_t)&unk_10035E7A0);
  uint64_t v19 = sub_1000572E4(&qword_10040E3E8, &qword_10040E3C0, (uint64_t)&unk_10035E698);
  RadioResourceControls.update<A>(from:to:)((uint64_t)v8, (uint64_t)v6, v16, v9, v17, (uint64_t)&off_1003F4AC8, v18, v19);
  sub_1000225EC((uint64_t)v6, &qword_10040E3C8);
  sub_1000225EC((uint64_t)v8, &qword_10040E3C8);
  uint64_t v20 = *(void *)((char *)v2 + *(void *)(*v2 + 280LL));
  swift_unownedRetainStrong(v20);
  uint64_t v21 = *(void *)(v20 + *(void *)(*(void *)v20 + 688LL));
  swift_unownedRetainStrong(v21);
  swift_release(v20);
  sub_1002D49C0(*(_BYTE *)(v11 + *(int *)(v9 + 36)));
  return swift_release(v21);
}

uint64_t sub_1002813D0(uint64_t a1)
{
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 248LL);
  swift_beginAccess(v5, v8, 0LL, 0LL);
  sub_1000226B0(v5, (uint64_t)v4, &qword_10040E3C0);
  swift_beginAccess(v5, v7, 33LL, 0LL);
  sub_1002A17A0(a1, v5, &qword_10040E3C0);
  swift_endAccess(v7);
  sub_10028113C((uint64_t)v4);
  sub_1000225EC(a1, &qword_10040E3C0);
  return sub_1000225EC((uint64_t)v4, &qword_10040E3C0);
}

uint64_t sub_1002814BC(uint64_t a1)
{
  return sub_10028D6E4(a1);
}

uint64_t sub_1002814F4()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100002274(&qword_10040E398);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = NANAttribute.DataCluster.empty.unsafeMutableAddressor();
  __int16 v7 = *((_WORD *)v6 + 2);
  char v8 = *((_BYTE *)v6 + 6);
  uint64_t v9 = *((void *)v6 + 1);
  int v101 = *v6;
  __int16 v102 = v7;
  char v103 = v8;
  uint64_t v104 = v9;
  uint64_t v10 = (uint64_t *)((char *)v0 + qword_10040DD18);
  swift_beginAccess(v10, v100, 0LL, 0LL);
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(v2 + 80);
  uint64_t v13 = *(void *)(v2 + 88);
  uint64_t v15 = _s8InstanceCMa_0(255LL, v12, v13, v14);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  WitnessTable  = swift_getWitnessTable(&unk_10035E28C, v15);
  uint64_t v96 = v12;
  uint64_t v97 = v15;
  uint64_t v98 = v13;
  uint64_t v99 = WitnessTable;
  uint64_t v17 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v96);
  LOBYTE(v15)  = Dictionary.isEmpty.getter(v11, &type metadata for UInt8, v17, &protocol witness table for UInt8);
  swift_bridgeObjectRelease(v11);
  if ((v15 & 1) != 0 && sub_100287EF4() < 1)
  {
    uint64_t v76 = type metadata accessor for PriorityRadioConstraint(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))(v5, 1LL, 1LL, v76);
  }

  else
  {
    uint64_t v18 = *(void *)(v1 + *(void *)(*(void *)v1 + 280LL));
    swift_unownedRetainStrong(v18);
    uint64_t v19 = WiFiInterface.capabilities.getter();
    swift_release(v18);
    unint64_t v91 = WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v20 = *v91;
    v94[0]  = v19;
    uint64_t v96 = v20;
    unint64_t v21 = sub_100270384();
    swift_bridgeObjectRetain_n(v20, 2LL);
    unint64_t v92 = v21;
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))v94,  &type metadata for WiFiDriverCapabilities.Kind,  v21);
    uint64_t v22 = v96;
    char v23 = sub_10007990C(v96, v20);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) != 0)
    {
      uint64_t v24 = (uint64_t *)(v1 + qword_10040DD20);
      swift_beginAccess(v1 + qword_10040DD20, v94, 0LL, 0LL);
      uint64_t v25 = *v24;
      uint64_t v27 = _s17InitiatorInstanceCMa(255LL, v12, v13, v26);
      uint64_t v28 = swift_getWitnessTable(&unk_10035EA3C, v27);
      uint64_t v96 = v12;
      uint64_t v97 = v27;
      uint64_t v98 = v13;
      uint64_t v99 = v28;
      uint64_t v29 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v96);
      unint64_t v30 = sub_10017B5C8();
      unint64_t v90 = v5;
      unint64_t v31 = v30;
      uint64_t v32 = NANBitmap.Channel.operatingClass.getter(v25);
      uint64_t v96 = v32;
      uint64_t v33 = (void *)swift_allocObject(&unk_1003F5798, 40LL, 7LL);
      v33[2]  = v27;
      uint64_t v34 = swift_getWitnessTable(&unk_10035EA58, v27);
      v33[3]  = v34;
      v33[4]  = v1;
      __chkstk_darwin(v34);
      v88[-4]  = v12;
      v88[-3]  = v13;
      v88[-2]  = sub_10029FCC0;
      v88[-1]  = v33;
      unint64_t v89 = v31;
      unint64_t v35 = v31;
      uint64_t v5 = v90;
      uint64_t v36 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v29, v35);
      swift_bridgeObjectRetain(v32);
      swift_retain();
      uint64_t v37 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v36);
      LOBYTE(v32)  = Sequence.contains(where:)(sub_10029FCCC, &v88[-6], v36, v37);
      uint64_t v38 = v96;
      swift_release(v33);
      swift_bridgeObjectRelease(v38);
      if ((v32 & 1) == 0)
      {
        uint64_t v39 = (uint64_t *)(v1 + qword_10040DD28);
        swift_beginAccess(v1 + qword_10040DD28, v93, 0LL, 0LL);
        uint64_t v40 = *v39;
        uint64_t v42 = _s17ResponderInstanceCMa(255LL, v12, v13, v41);
        uint64_t v43 = swift_getWitnessTable(&unk_10035D5BC, v42);
        uint64_t v96 = v12;
        uint64_t v97 = v42;
        uint64_t v98 = v13;
        uint64_t v99 = v43;
        uint64_t v44 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v96);
        v88[1]  = 0LL;
        unint64_t v45 = v89;
        uint64_t v46 = NANBitmap.Channel.operatingClass.getter(v40);
        uint64_t v96 = v46;
        uint64_t v47 = (void *)swift_allocObject(&unk_1003F57C0, 40LL, 7LL);
        v47[2]  = v42;
        uint64_t v48 = swift_getWitnessTable(&unk_10035D5D8, v42);
        v88[0]  = v88;
        v47[3]  = v48;
        v47[4]  = v1;
        __chkstk_darwin(v48);
        v88[-4]  = v12;
        v88[-3]  = v13;
        v88[-2]  = sub_1002A1CC0;
        v88[-1]  = v47;
        unint64_t v49 = v45;
        uint64_t v5 = v90;
        uint64_t v50 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v44, v49);
        swift_retain();
        swift_bridgeObjectRetain(v46);
        uint64_t v51 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v50);
        LOBYTE(v46)  = Sequence.contains(where:)(sub_1002A1C8C, &v88[-6], v50, v51);
        uint64_t v52 = v96;
        swift_release(v47);
        swift_bridgeObjectRelease(v52);
        if ((v46 & 1) == 0) {
          goto LABEL_7;
        }
      }
    }

    swift_unownedRetainStrong(v18);
    unint64_t v53 = sub_1002EA480();
    swift_release(v18);
    if ((v53 & 0xFF00000000LL) != 0x300000000LL)
    {
      uint64_t v70 = sub_100002274((uint64_t *)&unk_10040E3A0);
      uint64_t v9 = swift_allocObject(v70, 64LL, 7LL);
      *(_OWORD *)(v9 + 16)  = xmmword_100339900;
      swift_unownedRetainStrong(v18);
      uint64_t v71 = WiFiInterface.capabilities.getter();
      swift_release(v18);
      uint64_t v72 = *v91;
      uint64_t v95 = v71;
      uint64_t v96 = v72;
      swift_bridgeObjectRetain_n(v72, 2LL);
      ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v95,  &type metadata for WiFiDriverCapabilities.Kind,  v92);
      uint64_t v73 = v96;
      char v74 = sub_10007990C(v96, v72);
      swift_bridgeObjectRelease(v71);
      swift_bridgeObjectRelease(v72);
      swift_bridgeObjectRelease(v73);
      if ((v74 & 1) != 0) {
        id v75 = (char *)NANMapID.secondary.unsafeMutableAddressor();
      }
      else {
        id v75 = (char *)NANMapID.primary.unsafeMutableAddressor();
      }
      char v77 = *v75;
      uint64_t v78 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      unint64_t v79 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v78, 2, *v78, *v78);
      __int16 v82 = TimeBitmap.nanBitmap.getter(v79, v80, v81);
      *(_BYTE *)(v9 + 32)  = v77;
      *(_WORD *)(v9 + 40)  = v82;
      *(void *)(v9 + 48)  = v83;
      *(void *)(v9 + 56)  = v84;
      swift_bridgeObjectRelease(v104);
      uint64_t v104 = v9;
      uint64_t v85 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
      uint64_t v65 = *v85;
      uint64_t v64 = v85[1];
      uint64_t v66 = v85[2];
      UUID.init()(v85);
      uint64_t v67 = (int *)type metadata accessor for PriorityRadioConstraint(0LL);
      uint64_t v68 = v67;
      v5[v67[5]]  = 5;
      __int128 v69 = &v5[v67[6]];
      *(void *)__int128 v69 = 1LL;
    }

    else
    {
LABEL_7:
      uint64_t v54 = sub_100002274((uint64_t *)&unk_10040E3A0);
      uint64_t v9 = swift_allocObject(v54, 64LL, 7LL);
      *(_OWORD *)(v9 + 16)  = xmmword_100339900;
      char v55 = *(_BYTE *)NANMapID.primary.unsafeMutableAddressor();
      uint64_t v56 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      unint64_t v57 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(2, *v56, *v56, *v56);
      __int16 v60 = TimeBitmap.nanBitmap.getter(v57, v58, v59);
      *(_BYTE *)(v9 + 32)  = v55;
      *(_WORD *)(v9 + 40)  = v60;
      *(void *)(v9 + 48)  = v61;
      *(void *)(v9 + 56)  = v62;
      swift_bridgeObjectRelease(v104);
      uint64_t v104 = v9;
      uint64_t v63 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      uint64_t v66 = v63[2];
      UUID.init()(v63);
      uint64_t v67 = (int *)type metadata accessor for PriorityRadioConstraint(0LL);
      uint64_t v68 = v67;
      v5[v67[5]]  = 5;
      __int128 v69 = &v5[v67[6]];
      *(void *)__int128 v69 = 0LL;
    }

    v69[8]  = 2;
    id v86 = &v5[v67[7]];
    *(void *)id v86 = v65;
    *((void *)v86 + 1)  = v64;
    *((void *)v86 + 2)  = v66;
    (*(void (**)(char *, void, uint64_t, int *))(*((void *)v68 - 1) + 56LL))(v5, 0LL, 1LL, v68);
  }

  sub_100281050((uint64_t)v5);
  sub_10028BD68(v1, (unsigned int *)&v101);
  return swift_bridgeObjectRelease(v9);
}

char *sub_100281C50()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v23 = sub_100280578();
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 88);
  v22[2]  = v3;
  v22[3]  = v4;
  uint64_t v6 = type metadata accessor for NANDeviceLink(255LL, v3, v4, v5);
  uint64_t v7 = type metadata accessor for Array(0LL, v6);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  Sequence.forEach(_:)(sub_1002A1888, v22, v7, WitnessTable);
  swift_bridgeObjectRelease(v23);
  uint64_t v9 = &v0[qword_100410AF8];
  uint64_t v10 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  swift_bridgeObjectRelease(*(void *)&v1[qword_10040DD10]);
  swift_bridgeObjectRelease(*(void *)&v1[qword_10040DD18]);
  swift_bridgeObjectRelease(*(void *)&v1[qword_10040DD20]);
  swift_bridgeObjectRelease(*(void *)&v1[qword_10040DD28]);
  swift_bridgeObjectRelease(*(void *)&v1[qword_10040DD30]);
  swift_release(*(void *)&v1[qword_10040DD40]);
  swift_release(*(void *)&v1[qword_10040DD48]);
  uint64_t v11 = &v1[qword_10040DD50];
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  uint64_t v13 = *(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8LL);
  v13(v11, v12);
  v13(&v1[qword_10040DD58], v12);
  uint64_t v14 = *(void *)&v1[qword_10040DD60 + 8];
  swift_bridgeObjectRelease(*(void *)&v1[qword_10040DD60]);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)&v1[qword_10040DD68 + 8];
  swift_bridgeObjectRelease(*(void *)&v1[qword_10040DD68]);
  swift_bridgeObjectRelease(v15);
  swift_release(*(void *)&v1[qword_10040DD70]);
  swift_release(*(void *)&v1[qword_10040DD78]);
  swift_release(*(void *)&v1[qword_10040DD80]);
  uint64_t v16 = &v1[*(void *)(*(void *)v1 + 224LL)];
  uint64_t v17 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v17,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v17,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v20 = swift_getAssociatedTypeWitness( 0LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v16, v20);
  sub_1000225EC((uint64_t)&v1[*(void *)(*(void *)v1 + 232LL)], &qword_10040E428);
  sub_1000225EC((uint64_t)&v1[*(void *)(*(void *)v1 + 240LL)], &qword_10040E398);
  sub_1000225EC((uint64_t)&v1[*(void *)(*(void *)v1 + 248LL)], &qword_10040E3C0);

  swift_release(*(void *)&v1[*(void *)(*(void *)v1 + 272LL)]);
  swift_unownedRelease(*(void *)&v1[*(void *)(*(void *)v1 + 280LL)]);
  return v1;
}

uint64_t sub_100281F44()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NANDiscoveryEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDiscoveryEngine);
}

void sub_100281F74(uint64_t a1)
{
  if (!qword_10040DE08)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040DE10);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10040DE08);
    }
  }

void sub_100281FCC(uint64_t a1)
{
  if (!qword_10040DE20)
  {
    uint64_t v2 = sub_1000022F8(&qword_10040DE28);
    unint64_t v3 = sub_100282030();
    unint64_t v5 = type metadata accessor for RadioConstraint(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_10040DE20);
    }
  }

unint64_t sub_100282030()
{
  unint64_t result = qword_10040DE30;
  if (!qword_10040DE30)
  {
    uint64_t v1 = sub_1000022F8(&qword_10040DE28);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10040DE30);
  }

  return result;
}

uint64_t sub_10028208C(uint64_t a1)
{
  v4[0]  = &unk_10035EC08;
  uint64_t result = type metadata accessor for DispatchTime(319LL);
  if (v3 <= 0x3F)
  {
    v4[1]  = *(void *)(result - 8) + 64LL;
    void v4[2] = "\b";
    v4[3]  = &unk_10035EB98;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100282118(uint64_t a1)
{
  *(void *)&v518  = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  v508  = *(void *)(v3 - 8);
  v509  = v3;
  __chkstk_darwin();
  v507  = (unint64_t)&v472 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  v486  = (char *)&v472 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v495  = *(void *)(v6 - 8);
  v496  = (_BYTE *)v6;
  __chkstk_darwin();
  v474  = (char *)&v472 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v476  = (char *)&v472 - v8;
  v482  = sub_100002274(&qword_100408B18);
  __chkstk_darwin();
  v483  = (uint64_t)&v472 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  v475  = (uint64_t)&v472 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v487  = (char *)&v472 - v11;
  __chkstk_darwin();
  v480  = (uint64_t)&v472 - v12;
  __chkstk_darwin();
  v479  = (uint64_t)&v472 - v13;
  __chkstk_darwin();
  v491  = (uint64_t)&v472 - v14;
  __chkstk_darwin();
  v493  = (uint64_t)&v472 - v15;
  sub_100002274(&qword_10040D440);
  __chkstk_darwin();
  v502  = (uint64_t)&v472 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v494  = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  v489  = (char *)&v472 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v2 + 80);
  uint64_t v19 = *(void *)(v2 + 88);
  v513  = v2;
  v516  = v19;
  uint64_t v20 = *(void *)(v19 + 8);
  v515  = (void *)v18;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v20,  v18,  &protocol requirements base descriptor for P2PControls);
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  v511  = AssociatedTypeWitness;
  v512  = v22;
  __chkstk_darwin();
  v506  = (unint64_t)&v472 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v478  = (char *)&v472 - v24;
  __chkstk_darwin();
  v510  = (uint64_t)&v472 - v25;
  __chkstk_darwin();
  v484  = (char *)&v472 - v26;
  v499  = type metadata accessor for NANAttribute(0LL);
  v501  = *(void *)(v499 - 8);
  __chkstk_darwin();
  v498  = (unsigned __int16 *)((char *)&v472 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v514  = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin();
  v477  = (uint64_t)&v472 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v485  = (char *)&v472 - v29;
  __chkstk_darwin();
  v490  = (char *)&v472 - v30;
  __chkstk_darwin();
  v492  = (uint64_t)&v472 - v31;
  __chkstk_darwin();
  v481  = (char *)&v472 - v32;
  __chkstk_darwin();
  v500  = (uint64_t)&v472 - v33;
  v505  = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  v497  = (uint64_t)&v472 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v488  = (uint64_t)&v472 - v35;
  __chkstk_darwin();
  v504  = (uint64_t)&v472 - v36;
  __chkstk_darwin();
  v503  = (uint64_t)&v472 - v37;
  uint64_t v38 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v472 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v42 = (char *)&v472 - v41;
  __chkstk_darwin();
  uint64_t v44 = (char *)&v472 - v43;
  __chkstk_darwin();
  uint64_t v46 = (uint64_t *)((char *)&v472 - v45);
  uint64_t v47 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  __chkstk_darwin();
  uint64_t v50 = (uint64_t *)((char *)&v472 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v51 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v52 = (void *)*v51;
  *uint64_t v50 = *v51;
  (*(void (**)(uint64_t *, void, uint64_t))(v48 + 104))( v50,  enum case for DispatchPredicate.onQueue(_:),  v47);
  id v53 = v52;
  uint64_t v54 = _dispatchPreconditionTest(_:)(v50);
  (*(void (**)(uint64_t *, uint64_t))(v48 + 8))(v50, v47);
  if ((v54 & 1) == 0)
  {
    __break(1u);
LABEL_92:
    v382  = v483;
    v383  = v483 + *(int *)(v482 + 48);
    sub_1000226B0((uint64_t)v46 + *(int *)(v514 + 28) + (uint64_t)v494[10], v483, qword_100410330);
    sub_1000226B0(v47, v383, qword_100410330);
    v258  = ((unsigned int (*)(uint64_t, uint64_t, _BYTE *))v54)(v382, 1LL, v42) == 1;
    v384  = v47;
    v367  = v508;
    if (v258)
    {
      sub_1000225EC(v384, qword_100410330);
      sub_10005802C((uint64_t)v46, type metadata accessor for NANAttribute.CustomDeviceInformation);
      v385  = ((uint64_t (*)(uint64_t, uint64_t, _BYTE *))v54)(v383, 1LL, v42);
      v369  = (uint64_t)v485;
      v368  = v509;
      if (v385 == 1)
      {
        sub_1000225EC(v382, qword_100410330);
        LODWORD(v513)  = 1;
        goto LABEL_111;
      }
    }

    else
    {
      v390  = v479;
      sub_1000226B0(v382, v479, qword_100410330);
      v391  = ((uint64_t (*)(uint64_t, uint64_t, _BYTE *))v54)(v383, 1LL, v42);
      if (v391 != 1)
      {
        v392  = v495;
        v393  = v390;
        v394  = v476;
        (*(void (**)(char *, uint64_t, _BYTE *))(v495 + 32))(v476, v383, v42);
        v395  = sub_10000AF70( &qword_1004050E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        LODWORD(v513)  = dispatch thunk of static Equatable.== infix(_:_:)(v393, v394, v42, v395);
        v396  = *(void (**)(char *, _BYTE *))(v392 + 8);
        v396(v394, v42);
        sub_1000225EC(v491, qword_100410330);
        sub_10005802C((uint64_t)v490, type metadata accessor for NANAttribute.CustomDeviceInformation);
        v396((char *)v393, v42);
        sub_1000225EC(v382, qword_100410330);
        v369  = (uint64_t)v485;
        v368  = v509;
        goto LABEL_111;
      }

      sub_1000225EC(v491, qword_100410330);
      sub_10005802C((uint64_t)v490, type metadata accessor for NANAttribute.CustomDeviceInformation);
      (*(void (**)(uint64_t, _BYTE *))(v495 + 8))(v390, v42);
      v369  = (uint64_t)v485;
      v368  = v509;
    }

    sub_1000225EC(v382, &qword_100408B18);
    LODWORD(v513)  = 0;
    goto LABEL_111;
  }

  uint64_t v55 = v518;
  sub_100057FE8(v518, (uint64_t)v46, type metadata accessor for DriverEvent);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload(v46, v38);
  uint64_t v50 = v46;
  if (EnumCaseMultiPayload == 4)
  {
    sub_100057FE8((uint64_t)v46, (uint64_t)v42, type metadata accessor for DriverEvent);
    if (*v42 == 1)
    {
      v473  = v46;
      unint64_t v59 = v517;
      __int16 v60 = (uint64_t *)((char *)v517 + qword_10040DD10);
      swift_beginAccess((char *)v517 + qword_10040DD10, &v525, 0LL, 0LL);
      uint64_t v61 = *v60;
      uint64_t v62 = v516;
      uint64_t v63 = (uint64_t)v515;
      uint64_t v65 = _s8InstanceCMa(255LL, (uint64_t)v515, v516, v64);
      WitnessTable  = swift_getWitnessTable(&unk_10035F874, v65);
      v527  = v63;
      v528  = v65;
      v529  = v62;
      v530  = WitnessTable;
      uint64_t v67 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v527);
      uint64_t v68 = NANBitmap.Channel.operatingClass.getter(v61);
      *(void *)v533  = v68;
      __chkstk_darwin();
      *(&v472 - 2)  = (uint64_t)v59;
      *(&v472 - 1)  = v55;
      uint64_t v69 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt8,  v67,  &protocol witness table for UInt8);
      swift_bridgeObjectRetain(v68);
      uint64_t v70 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v69);
      Sequence.forEach(_:)(sub_1002A16B4, &v472 - 4, v69, v70);
      swift_bridgeObjectRelease(*(void *)v533);
      uint64_t v71 = (uint64_t *)((char *)v59 + qword_10040DD18);
      swift_beginAccess((char *)v59 + qword_10040DD18, &v521, 0LL, 0LL);
      uint64_t v72 = *v71;
      uint64_t v74 = _s8InstanceCMa_0(255LL, v63, v62, v73);
      uint64_t v75 = swift_getWitnessTable(&unk_10035E28C, v74);
      v527  = v63;
      v528  = v74;
      v529  = v62;
      v530  = v75;
      uint64_t v76 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v527);
      uint64_t v77 = NANBitmap.Channel.operatingClass.getter(v72);
      v527  = v77;
      __chkstk_darwin();
      uint64_t v78 = v518;
      *(&v472 - 2)  = (uint64_t)v59;
      *(&v472 - 1)  = v78;
      uint64_t v79 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt8,  v76,  &protocol witness table for UInt8);
      swift_bridgeObjectRetain(v77);
      v80  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v79);
      Sequence.forEach(_:)(sub_1002A16DC, &v472 - 4, v79, v80);
      swift_bridgeObjectRelease(v527);
      sub_1002A2D40(v78, v81, v82, v83);
      v513  = swift_allocBox(v514);
      uint64_t v85 = v84;
      uint64_t v86 = *(uint64_t *)((char *)v59 + *(void *)(*v59 + 280));
      swift_unownedRetainStrong(v86);
      uint64_t v87 = v511;
      uint64_t v88 = v512;
      unint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v512 + 16);
      uint64_t v90 = v510;
      v89(v510, v86 + *(void *)(*(void *)v86 + 96LL), v511);
      swift_release(v86);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v516,  v515,  v87,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
      LOBYTE(v76)  = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( v87,  AssociatedConformanceWitness);
      unint64_t v92 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
      v92(v90, v87);
      swift_unownedRetainStrong(v86);
      unint64_t v93 = v506;
      v89(v506, v86 + *(void *)(*(void *)v86 + 96LL), v87);
      swift_release(v86);
      LOBYTE(v89)  = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))( v87,  AssociatedConformanceWitness);
      v92(v93, v87);
      LODWORD(AssociatedConformanceWitness)  = *(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset.unsafeMutableAddressor();
      NANAttribute.CustomDeviceInformation.CustomAttributes.init()(v85 + *(int *)(v514 + 28));
      *(_BYTE *)uint64_t v85 = v76;
      *(_BYTE *)(v85 + 1)  = (_BYTE)v89;
      *(_DWORD *)(v85 + 4)  = AssociatedConformanceWitness;
      uint64_t v94 = swift_allocObject(&unk_1003F8880, 24LL, 7LL);
      *(void *)(v94 + 16)  = &_swiftEmptySetSingleton;
      uint64_t v95 = (uint64_t *)((char *)v59 + qword_10040DD20);
      swift_beginAccess((char *)v59 + qword_10040DD20, &v527, 0LL, 0LL);
      uint64_t v96 = *v95;
      uint64_t v97 = (uint64_t)v515;
      uint64_t v98 = v516;
      uint64_t v100 = _s17InitiatorInstanceCMa(0LL, (uint64_t)v515, v516, v99);
      swift_bridgeObjectRetain(v96);
      uint64_t v101 = swift_getWitnessTable(&unk_10035EA58, v100);
      uint64_t v102 = v513;
      uint64_t v103 = v518;
      sub_100287410(v96, v94, v513, v59, v518, v100, v101);
      swift_bridgeObjectRelease(v96);
      uint64_t v104 = (uint64_t *)((char *)v59 + qword_10040DD28);
      swift_beginAccess((char *)v59 + qword_10040DD28, v533, 0LL, 0LL);
      v105  = *v104;
      uint64_t v107 = _s17ResponderInstanceCMa(0LL, v97, v98, v106);
      swift_bridgeObjectRetain(v105);
      uint64_t v108 = swift_getWitnessTable(&unk_10035D5D8, v107);
      sub_100287410(v105, v94, v102, v59, v103, v107, v108);
      swift_bridgeObjectRelease(v105);
      swift_unownedRetainStrong(v86);
      sub_1002EA8D0((uint64_t)sub_100287CA0, 0LL);
      swift_release(v86);
      type metadata accessor for P2PTimer(0LL);
      char v109 = (char *)v507;
      variable initialization expression of AWDLPeer.lastUpdated();
      v110  = (char *)v59 + qword_10040DD50;
      __n128 v111 = swift_beginAccess((char *)v59 + qword_10040DD50, &v531, 33LL, 0LL);
      (*(void (**)(char *, char *, uint64_t, __n128))(v508 + 40))(v110, v109, v509, v111);
      swift_endAccess(&v531);
      sub_100285EA0();
      sub_100286518();
      uint64_t v50 = v473;
      sub_1002814F4();
      swift_release(v102);
      swift_release(v94);
      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    }

    goto LABEL_48;
  }

  if (EnumCaseMultiPayload)
  {
LABEL_48:
    v314  = sub_100057FE8(v55, (uint64_t)v40, type metadata accessor for DriverEvent);
    v315  = (os_log_s *)Logger.logObject.getter(v314);
    v316  = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v315, v316))
    {
      v317  = swift_slowAlloc(22LL, -1LL);
      v318  = swift_slowAlloc(64LL, -1LL);
      v527  = v318;
      *(_DWORD *)v317  = 136315394;
      v319  = _typeName(_:qualified:)(v513, 0LL);
      v321  = v320;
      v525  = sub_10000235C(v319, v320, &v527);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v525, v526);
      swift_bridgeObjectRelease(v321);
      *(_WORD *)(v317 + 12)  = 2080;
      DriverEvent.shortDescription.getter();
      v323  = v322;
      v525  = sub_10000235C(v324, v322, &v527);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v525, v526);
      swift_bridgeObjectRelease(v323);
      sub_10005802C((uint64_t)v40, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v315, v316, "%s unable to handle event: %s", (uint8_t *)v317, 0x16u);
      swift_arrayDestroy(v318, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v318, -1LL, -1LL);
      swift_slowDealloc(v317, -1LL, -1LL);

      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    }

    v325  = type metadata accessor for DriverEvent;
    v326  = (uint64_t)v40;
LABEL_51:
    sub_10005802C(v326, v325);
    return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
  }

  sub_100057FE8((uint64_t)v46, (uint64_t)v44, type metadata accessor for DriverEvent);
  sub_100058090(v44, &v525);
  sub_100058090(&v525, &v527);
  switch(sub_1001073D8((uint64_t)&v527))
  {
    case 2u:
      v473  = v46;
      v206  = NANBitmap.Channel.operatingClass.getter(&v527);
      v207  = *(_BYTE *)v206;
      v208  = *(unsigned int *)(v206 + 4);
      v209  = v55;
      v210  = v517;
      v211  = (uint64_t *)((char *)v517 + qword_10040DD10);
      v212  = *(unsigned __int16 *)(v206 + 2);
      LODWORD(v514)  = *(unsigned __int8 *)(v206 + 1);
      swift_beginAccess((char *)v517 + qword_10040DD10, v533, 32LL, 0LL);
      v213  = *v211;
      LOBYTE(v531)  = v207;
      v215  = v515;
      v214  = v516;
      v217  = _s8InstanceCMa(255LL, (uint64_t)v515, v516, v216);
      v218  = swift_getWitnessTable(&unk_10035F874, v217);
      v521  = v215;
      v522  = v217;
      v523  = v214;
      v524  = v218;
      v219  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      Dictionary.subscript.getter(&v531, v213, &type metadata for UInt8, v219);
      v220  = v521;
      v221  = v522;
      swift_endAccess(v533);
      sub_1002856C0((uint64_t)v220, v221, (uint64_t)v210, v209, v217, v218);
      sub_1002A0210(v220, v221);
      v222  = *(uint64_t *)((char *)v210 + *(void *)(*v210 + 280));
      swift_unownedRetainStrong(v222);
      v223  = v503;
      sub_1002EA528(v212 | (v208 << 16), v503);
      v224  = sub_1002E9C38(&v521, v514);
      v226  = v225;
      v227  = type metadata accessor for NANPeer.Service(0LL);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v227 - 8) + 48LL))(v226, 1LL, v227))
      {
        sub_100254B88(*(void *)(v226 + 120), *(void *)(v226 + 128), *(void *)(v226 + 136), *(_BYTE *)(v226 + 144));
        *(void *)(v226 + 120)  = 0LL;
        *(void *)(v226 + 128)  = 0LL;
        *(void *)(v226 + 136)  = 0LL;
        *(_BYTE *)(v226 + 144)  = -1;
      }

      ((void (*)(void **, void))v224)(&v521, 0LL);
      v228  = v223;
      v229  = v212 | (v208 << 16);
      goto LABEL_29;
    case 3u:
      v473  = v46;
      v230  = NANBitmap.Channel.operatingClass.getter(&v527);
      v231  = *(_BYTE *)v230;
      v232  = *(unsigned int *)(v230 + 4);
      v233  = v517;
      v234  = (uint64_t *)((char *)v517 + qword_10040DD18);
      v235  = *(unsigned __int16 *)(v230 + 2);
      LODWORD(v514)  = *(unsigned __int8 *)(v230 + 1);
      swift_beginAccess((char *)v517 + qword_10040DD18, v533, 32LL, 0LL);
      v236  = *v234;
      LOBYTE(v531)  = v231;
      v237  = v515;
      v238  = v55;
      v239  = v516;
      v241  = _s8InstanceCMa_0(255LL, (uint64_t)v515, v516, v240);
      v242  = swift_getWitnessTable(&unk_10035E28C, v241);
      v521  = v237;
      v522  = v241;
      v523  = v239;
      v524  = v242;
      v243  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      Dictionary.subscript.getter(&v531, v236, &type metadata for UInt8, v243);
      v244  = v521;
      v245  = v522;
      swift_endAccess(v533);
      sub_1002856C0((uint64_t)v244, v245, (uint64_t)v233, v238, v241, v242);
      sub_1002A0210(v244, v245);
      v222  = *(uint64_t *)((char *)v233 + *(void *)(*v233 + 280));
      swift_unownedRetainStrong(v222);
      v246  = v504;
      sub_1002EA528(v235 | (v232 << 16), v504);
      v247  = sub_1002E9C38(&v521, v514);
      v249  = v248;
      v250  = type metadata accessor for NANPeer.Service(0LL);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v250 - 8) + 48LL))(v249, 1LL, v250))
      {
        sub_100254B88(*(void *)(v249 + 120), *(void *)(v249 + 128), *(void *)(v249 + 136), *(_BYTE *)(v249 + 144));
        *(void *)(v249 + 120)  = 0LL;
        *(void *)(v249 + 128)  = 0LL;
        *(void *)(v249 + 136)  = 0LL;
        *(_BYTE *)(v249 + 144)  = -1;
      }

      ((void (*)(void **, void))v247)(&v521, 0LL);
      v228  = v246;
      v229  = v235 | (v232 << 16);
LABEL_29:
      sub_1002EA6EC(v228, v229);
      sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
      swift_release(v222);
      uint64_t v50 = v473;
      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    case 4u:
    case 8u:
    case 9u:
      unint64_t v57 = (unsigned __int16 *)NANBitmap.Channel.operatingClass.getter(&v527);
      unint64_t v58 = *v57 | ((unint64_t)*((unsigned __int8 *)v57 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v57 + 3) << 24);
      goto LABEL_9;
    case 5u:
      v473  = v46;
      v170  = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v527);
      v171  = *v170;
      LODWORD(v514)  = v170[1];
      v512  = v170[2];
      v511  = v170[3];
      v507  = *((unsigned int *)v170 + 1);
      v172  = v170[8];
      v173  = v170[9];
      v174  = v170[10];
      v175  = v170[11];
      v176  = v170[12];
      v177  = v170[13];
      v178  = (uint64_t *)((char *)v517 + qword_10040DD28);
      swift_beginAccess((char *)v517 + qword_10040DD28, v533, 32LL, 0LL);
      v179  = *v178;
      LODWORD(v513)  = v171;
      LOBYTE(v519)  = v171;
      v509  = v173;
      v510  = v172;
      BYTE1(v519)  = v172;
      BYTE2(v519)  = v173;
      v508  = v174;
      BYTE3(v519)  = v174;
      BYTE4(v519)  = v175;
      BYTE5(v519)  = v176;
      BYTE6(v519)  = v177;
      v181  = v515;
      v180  = v516;
      v183  = _s17ResponderInstanceCMa(255LL, (uint64_t)v515, v516, v182);
      v184  = swift_getWitnessTable(&unk_10035D5BC, v183);
      v521  = v181;
      v522  = v183;
      v523  = v180;
      v524  = v184;
      v185  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      sub_10017B5C8();
      Dictionary.subscript.getter(&v519, v179, &type metadata for NANPeerServiceIdentifier, v185);
      v186  = v531;
      if (v531)
      {
        v187  = v532[0];
        swift_endAccess(v533);
        sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
        v188  = v186;
        swift_bridgeObjectRetain(v187);
        v189  = (uint64_t)v186;
        v190  = v187;
        v191  = v517;
LABEL_55:
        sub_1002856C0(v189, v190, (uint64_t)v191, v518, v183, v184);
        sub_1002A0210(v186, v187);
        swift_bridgeObjectRelease(v187);

        sub_100285EA0();
        sub_100286518();
        sub_1002814F4();
        uint64_t v50 = v473;
        return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
      }

      v504  = v177;
      v505  = v176;
      v506  = v175;
      swift_endAccess(v533);
      v191  = v517;
      v328  = (uint64_t *)((char *)v517 + qword_10040DD18);
      swift_beginAccess((char *)v517 + qword_10040DD18, v533, 32LL, 0LL);
      v329  = *v328;
      v330  = v514;
      LOBYTE(v519)  = v514;
      v183  = _s8InstanceCMa_0(255LL, (uint64_t)v181, v180, v331);
      v184  = swift_getWitnessTable(&unk_10035E28C, v183);
      v521  = v181;
      v522  = v183;
      v523  = v180;
      v524  = v184;
      v332  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      Dictionary.subscript.getter(&v519, v329, &type metadata for UInt8, v332);
      v186  = v531;
      if (v531)
      {
        v187  = v532[0];
        swift_endAccess(v533);
        sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
        v188  = v186;
        swift_bridgeObjectRetain(v187);
        v189  = (uint64_t)v186;
        v190  = v187;
        goto LABEL_55;
      }

      v346  = v507 << 16;
      swift_endAccess(v533);
      v521  = 0LL;
      v522  = 0xE000000000000000LL;
      _StringGuts.grow(_:)(18LL);
      swift_bridgeObjectRelease(v522);
      v521  = (void *)0xD000000000000010LL;
      v522  = 0x8000000100368E80LL;
      v533[0]  = v330;
      v347._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      object  = v347._object;
      String.append(_:)(v347);
      swift_bridgeObjectRelease(object);
      v349  = v522;
      sub_10027EBBC( v513,  v510 | (v509 << 8) | (v508 << 16) | (v506 << 24) | (v505 << 32) | (v504 << 40),  v512 | (v511 << 8) | v346,  (uint64_t)v521,  v522);
      swift_bridgeObjectRelease(v349);
      sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
      uint64_t v50 = v473;
      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    case 6u:
    case 7u:
      uint64_t v112 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v527);
      uint64_t v113 = *v112;
      uint64_t v114 = v112[2];
      uint64_t v115 = v112[3];
      uint64_t v116 = *((unsigned int *)v112 + 1);
      sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
      unint64_t v58 = v113 | (v114 << 8) | (v115 << 16) | (v116 << 24);
LABEL_9:
      sub_1002858BC(v58, v517, v55);
      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    case 0xAu:
      v473  = v46;
      v288  = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v527);
      v289  = *v288;
      v511  = v288[2];
      v510  = v288[3];
      v509  = *((unsigned int *)v288 + 1);
      v290  = v288[8];
      v291  = v288[9];
      v292  = v288[10];
      v293  = v288[11];
      v294  = v288[12];
      v295  = v288[13];
      v296  = (uint64_t *)((char *)v517 + qword_10040DD20);
      swift_beginAccess((char *)v517 + qword_10040DD20, v533, 32LL, 0LL);
      v297  = *v296;
      v513  = v290;
      v514  = v289;
      LOBYTE(v531)  = v289;
      BYTE1(v531)  = v290;
      v512  = v291;
      BYTE2(v531)  = v291;
      BYTE3(v531)  = v292;
      BYTE4(v531)  = v293;
      BYTE5(v531)  = v294;
      BYTE6(v531)  = v295;
      v299  = v515;
      v298  = v516;
      v301  = _s17InitiatorInstanceCMa(255LL, (uint64_t)v515, v516, v300);
      v302  = swift_getWitnessTable(&unk_10035EA3C, v301);
      v521  = v299;
      v522  = v301;
      v523  = v298;
      v524  = v302;
      v303  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      sub_10017B5C8();
      Dictionary.subscript.getter(&v531, v297, &type metadata for NANPeerServiceIdentifier, v303);
      v304  = v521;
      v305  = v522;
      swift_endAccess(v533);
      sub_1002A0210(v304, v305);
      if (v304) {
        goto LABEL_46;
      }
      v306  = (uint64_t *)((char *)v517 + qword_10040DD28);
      swift_beginAccess((char *)v517 + qword_10040DD28, v533, 32LL, 0LL);
      v307  = *v306;
      LOBYTE(v531)  = v514;
      BYTE1(v531)  = v513;
      BYTE2(v531)  = v512;
      BYTE3(v531)  = v292;
      BYTE4(v531)  = v293;
      BYTE5(v531)  = v294;
      BYTE6(v531)  = v295;
      v309  = _s17ResponderInstanceCMa(255LL, (uint64_t)v299, v298, v308);
      v310  = swift_getWitnessTable(&unk_10035D5BC, v309);
      v521  = v299;
      v522  = v309;
      v523  = v298;
      v524  = v310;
      v311  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      Dictionary.subscript.getter(&v531, v307, &type metadata for NANPeerServiceIdentifier, v311);
      v312  = v521;
      v313  = v522;
      swift_endAccess(v533);
      sub_1002A0210(v312, v313);
      if (v312)
      {
LABEL_46:
        sub_1002858BC( v514 | (v513 << 8) | (v512 << 16) | (v292 << 24) | (v293 << 32) | (v294 << 40) | (v295 << 48),  v517,  v518);
        uint64_t v50 = v473;
      }

      else
      {
        *(void *)&v518  = v509 << 16;
        v521  = 0LL;
        v522  = 0xE000000000000000LL;
        _StringGuts.grow(_:)(19LL);
        swift_bridgeObjectRelease(v522);
        v521  = (void *)0xD000000000000011LL;
        v522  = 0x8000000100368E60LL;
        v351  = v513;
        v350  = v514;
        v352  = v512;
        v353._countAndFlagsBits  = NANPeerServiceIdentifier.description.getter(v514 | (v513 << 8) | (v512 << 16) | (v292 << 24) | (v293 << 32) | (v294 << 40) | (v295 << 48));
        v354  = v353._object;
        String.append(_:)(v353);
        swift_bridgeObjectRelease(v354);
        v355  = v522;
        sub_10027EBBC( v350,  (v292 << 16) | (v352 << 8) | (v293 << 24) | (v294 << 32) | (v295 << 40) | v351,  v511 | (v510 << 8) | v518,  (uint64_t)v521,  v522);
        swift_bridgeObjectRelease(v355);
        uint64_t v50 = v473;
      }

      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    case 0xBu:
      v278  = *(_BYTE *)NANBitmap.Channel.operatingClass.getter(&v527);
      uint64_t v158 = v517;
      v279  = (uint64_t *)((char *)v517 + qword_10040DD10);
      swift_beginAccess((char *)v517 + qword_10040DD10, v533, 32LL, 0LL);
      uint64_t v160 = *v279;
      LOBYTE(v531)  = v278;
      uint64_t v161 = v55;
      v163  = v515;
      v162  = v516;
      v165  = _s8InstanceCMa(255LL, (uint64_t)v515, v516, v280);
      v166  = &unk_10035F874;
      goto LABEL_43;
    case 0xCu:
      char v157 = *(_BYTE *)NANBitmap.Channel.operatingClass.getter(&v527);
      uint64_t v158 = v517;
      v159  = (uint64_t *)((char *)v517 + qword_10040DD18);
      swift_beginAccess((char *)v517 + qword_10040DD18, v533, 32LL, 0LL);
      uint64_t v160 = *v159;
      LOBYTE(v531)  = v157;
      uint64_t v161 = v55;
      v163  = v515;
      v162  = v516;
      v165  = _s8InstanceCMa_0(255LL, (uint64_t)v515, v516, v164);
      v166  = &unk_10035E28C;
LABEL_43:
      v281  = swift_getWitnessTable(v166, v165);
      v521  = v163;
      v522  = v165;
      v523  = v162;
      v524  = v281;
      v282  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      Dictionary.subscript.getter(&v531, v160, &type metadata for UInt8, v282);
      v283  = v521;
      v284  = v522;
      swift_endAccess(v533);
      sub_1002856C0((uint64_t)v283, v284, (uint64_t)v158, v161, v165, v281);
      sub_1002A0210(v283, v284);
      sub_1002A2D40(v161, v285, v286, v287);
      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    case 0xDu:
      v192  = v55;
      v193  = *(_BYTE *)NANBitmap.Channel.operatingClass.getter(&v527);
      v194  = v517;
      v195  = (uint64_t *)((char *)v517 + qword_10040DD10);
      swift_beginAccess((char *)v517 + qword_10040DD10, v533, 32LL, 0LL);
      v196  = *v195;
      LOBYTE(v519)  = v193;
      v198  = v515;
      v197  = v516;
      v200  = _s8InstanceCMa(255LL, (uint64_t)v515, v516, v199);
      v201  = swift_getWitnessTable(&unk_10035F874, v200);
      v521  = v198;
      v522  = v200;
      v523  = v197;
      v524  = v201;
      v202  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      Dictionary.subscript.getter(&v519, v196, &type metadata for UInt8, v202);
      v203  = v531;
      if (v531)
      {
        v204  = v532[0];
        swift_endAccess(v533);
        v205  = v203;
        swift_bridgeObjectRetain(v204);
        sub_1002856C0((uint64_t)v203, v204, (uint64_t)v194, v192, v200, v201);
        sub_1002A0210(v203, v204);
        swift_bridgeObjectRelease(v204);

        v198  = v515;
        v197  = v516;
      }

      else
      {
        swift_endAccess(v533);
      }

      v333  = (uint64_t *)((char *)v194 + qword_10040DD18);
      swift_beginAccess((char *)v194 + qword_10040DD18, v533, 32LL, 0LL);
      v334  = *v333;
      LOBYTE(v519)  = v193;
      v336  = _s8InstanceCMa_0(255LL, (uint64_t)v198, v197, v335);
      v337  = swift_getWitnessTable(&unk_10035E28C, v336);
      v521  = v198;
      v522  = v336;
      v523  = v197;
      v524  = v337;
      v338  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v521);
      Dictionary.subscript.getter(&v519, v334, &type metadata for UInt8, v338);
      v339  = v531;
      if (v531)
      {
        v340  = v532[0];
        swift_endAccess(v533);
        sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
        v341  = v339;
        swift_bridgeObjectRetain(v340);
        sub_1002856C0((uint64_t)v339, v340, (uint64_t)v194, v192, v336, v337);
        sub_1002A0210(v339, v340);
        swift_bridgeObjectRelease(v340);
      }

      else
      {
        swift_endAccess(v533);
LABEL_60:
        sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
      }

      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    case 0xEu:
      NANBitmap.Channel.operatingClass.getter(&v527);
      sub_1002A2D40(v55, v167, v168, v169);
      return sub_10005802C((uint64_t)v50, type metadata accessor for DriverEvent);
    case 0x10u:
      uint64_t v117 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v527);
      uint64_t v118 = *v117;
      __int16 v119 = *(_WORD *)(v117 + 9);
      unsigned __int8 v120 = v117[11];
      v121  = v117[16];
      v122  = *((void *)v117 + 3);
      v533[0]  = *v117;
      *(void *)&__int128 v123 = *(void *)(v117 + 1);
      v518  = v123;
      *(void *)&v533[1]  = v123;
      v534  = v119;
      v535  = v120;
      v536  = v121;
      v537  = v122;
      __int128 v124 = *((_OWORD *)v117 + 2);
      v538  = v124;
      if ((v122 & 0xC0000000) != 0) {
        goto LABEL_81;
      }
      uint64_t v125 = v124;
      if (!*(void *)(v124 + 16))
      {
        sub_100058090(&v525, &v521);
        v344  = (uint64_t *)NANBitmap.Channel.operatingClass.getter(&v521);
        sub_10005852C(v344[3], v344[4], v344[5]);
        v345  = 1LL;
        uint64_t v128 = v499;
        uint64_t v38 = v500;
        goto LABEL_73;
      }

      uint64_t v126 = v124 + ((*(unsigned __int8 *)(v501 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v501 + 80));
      uint64_t v127 = v498;
      sub_100057FE8(v126, (uint64_t)v498, type metadata accessor for NANAttribute);
      uint64_t v128 = v499;
      v129  = swift_getEnumCaseMultiPayload(v127, v499);
      uint64_t v38 = v500;
      if (v129 != 41)
      {
        sub_100058090(&v525, &v521);
        v356  = (uint64_t *)NANBitmap.Channel.operatingClass.getter(&v521);
        sub_10005852C(v356[3], v356[4], v356[5]);
        v357  = sub_10005802C((uint64_t)v127, type metadata accessor for NANAttribute);
LABEL_71:
        if (!*(void *)(v125 + 16))
        {
          __break(1u);
          swift_bridgeObjectRelease(v357);
          swift_release(v521);
          __break(1u);
          JUMPOUT(0x100285660LL);
        }

        sub_100057FE8(v126, v502, type metadata accessor for NANAttribute);
        v345  = 0LL;
LABEL_73:
        v359  = v501;
        v358  = v502;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v501 + 56))(v502, v345, 1LL, v128);
        sub_1001074E8( (uint64_t)&v525,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v359 + 48))(v358, 1LL, v128) == 1)
        {
          sub_1000225EC(v502, &qword_10040D440);
        }

        else
        {
          if (swift_getEnumCaseMultiPayload(v502, v128) == 40)
          {
            v360  = v492;
            sub_100022628(v502, v492, type metadata accessor for NANAttribute.CustomDeviceInformation);
            sub_100022628(v360, v38, type metadata accessor for NANAttribute.CustomDeviceInformation);
            unint64_t v156 = 0LL;
            goto LABEL_77;
          }

          sub_10005802C(v502, type metadata accessor for NANAttribute);
        }

void sub_1002856C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 88);
    swift_unknownObjectRetain(a1);
    v12(a4, a5, a6);
    swift_unknownObjectRelease(a1);
  }

  else
  {
    uint64_t v13 = sub_100057FE8(a4, (uint64_t)v11, type metadata accessor for DriverEvent);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      DriverEvent.description.getter();
      unint64_t v19 = v18;
      uint64_t v21 = sub_10000235C(v20, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease(v19);
      sub_10005802C((uint64_t)v11, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Did not find a service to handle %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {

      sub_10005802C((uint64_t)v11, type metadata accessor for DriverEvent);
    }
  }

void sub_1002858BC(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v64 = a3;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  uint64_t v10 = *a2;
  unint64_t v11 = HIWORD(a1);
  uint64_t v62 = type metadata accessor for DriverEvent(0LL);
  __chkstk_darwin();
  __int16 v60 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v61 = (char *)&v52 - v13;
  __chkstk_darwin();
  uint64_t v53 = (uint64_t)&v52 - v14;
  uint64_t v65 = a2;
  os_log_type_t v15 = (void *)((char *)a2 + qword_10040DD20);
  swift_beginAccess(v15, &v66, 32LL, 0LL);
  uint64_t v63 = *v15;
  char v72 = a1;
  unint64_t v54 = v5;
  unint64_t v55 = v6;
  char v73 = v5;
  char v74 = v6;
  unint64_t v56 = v7;
  unint64_t v57 = v8;
  char v75 = v7;
  char v76 = v8;
  unint64_t v58 = v11;
  unint64_t v59 = v9;
  char v77 = v9;
  char v78 = v11;
  uint64_t v17 = *(void *)(v10 + 80);
  uint64_t v16 = *(void *)(v10 + 88);
  uint64_t v19 = _s17InitiatorInstanceCMa(255LL, v17, v16, v18);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v19);
  uint64_t v68 = v17;
  uint64_t v69 = v19;
  uint64_t v70 = v16;
  uint64_t v71 = WitnessTable;
  uint64_t v21 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v68);
  sub_10017B5C8();
  Dictionary.subscript.getter(&v72, v63, &type metadata for NANPeerServiceIdentifier, v21);
  uint64_t v22 = v79;
  if (v79)
  {
    uint64_t v23 = v80;
    swift_endAccess(&v66);
    id v24 = v22;
    swift_bridgeObjectRetain(v23);
    uint64_t v25 = (uint64_t)v22;
    uint64_t v26 = v23;
    uint64_t v28 = v64;
    uint64_t v27 = (uint64_t)v65;
  }

  else
  {
    uint64_t v28 = v64;
    swift_endAccess(&v66);
    uint64_t v27 = (uint64_t)v65;
    uint64_t v29 = (void *)((char *)v65 + qword_10040DD28);
    swift_beginAccess((char *)v65 + qword_10040DD28, &v66, 32LL, 0LL);
    uint64_t v30 = *v29;
    char v72 = a1;
    char v73 = v54;
    char v74 = v55;
    char v75 = v56;
    char v76 = v57;
    char v77 = v59;
    char v78 = v58;
    uint64_t v19 = _s17ResponderInstanceCMa(255LL, v17, v16, v31);
    WitnessTable  = swift_getWitnessTable(&unk_10035D5BC, v19);
    uint64_t v68 = v17;
    uint64_t v69 = v19;
    uint64_t v70 = v16;
    uint64_t v71 = WitnessTable;
    uint64_t v32 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v68);
    Dictionary.subscript.getter(&v72, v30, &type metadata for NANPeerServiceIdentifier, v32);
    uint64_t v22 = v79;
    if (!v79)
    {
      swift_endAccess(&v66);
      uint64_t v40 = v53;
      uint64_t v41 = sub_100057FE8(v28, v53, type metadata accessor for DriverEvent);
      uint64_t v42 = (void *)Logger.logObject.getter(v41);
      uint64_t v43 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v42, (os_log_type_t)v43))
      {

        uint64_t v39 = v40;
        goto LABEL_12;
      }

      uint64_t v44 = swift_slowAlloc(22LL, -1LL);
      uint64_t v45 = swift_slowAlloc(64LL, -1LL);
      uint64_t v68 = v45;
      *(_DWORD *)uint64_t v44 = 136315394;
      uint64_t v46 = NANPeerServiceIdentifier.description.getter(a1 & 0xFFFFFFFFFFFFFFLL);
      unint64_t v48 = v47;
      uint64_t v66 = sub_10000235C(v46, v47, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v44 + 12)  = 2080;
      DriverEvent.description.getter();
      unint64_t v50 = v49;
      uint64_t v66 = sub_10000235C(v51, v49, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      swift_bridgeObjectRelease(v50);
      sub_10005802C(v40, type metadata accessor for DriverEvent);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v42,  (os_log_type_t)v43,  "Did not find a datapath[%s] to handle %s",  (uint8_t *)v44,  0x16u);
      swift_arrayDestroy(v45, 2LL, &type metadata for Any[8]);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);

      return;
    }

    uint64_t v23 = v80;
    swift_endAccess(&v66);
    id v24 = v22;
    swift_bridgeObjectRetain(v23);
    uint64_t v25 = (uint64_t)v22;
    uint64_t v26 = v23;
  }

  sub_1002856C0(v25, v26, v27, v28, v19, WitnessTable);
  sub_1002A0210(v22, v23);
  swift_bridgeObjectRelease(v23);

  sub_100285EA0();
  sub_100286518();
  sub_1002814F4();
  uint64_t v33 = v61;
  sub_100057FE8(v28, (uint64_t)v61, type metadata accessor for DriverEvent);
  uint64_t v34 = v62;
  if (swift_getEnumCaseMultiPayload(v33, v62))
  {
    sub_10005802C((uint64_t)v33, type metadata accessor for DriverEvent);
  }

  else
  {
    sub_100058090(v33, &v66);
    sub_100058090(&v66, &v68);
    if (sub_1001073D8((uint64_t)&v68) == 8)
    {
      NANBitmap.Channel.operatingClass.getter(&v68);
      sub_1002A2D40(v28, v35, v36, v37);
      sub_10027F2A0();
LABEL_15:
      sub_100286C18();
      sub_10028DC40();
      sub_10028DE68();
      return;
    }

    sub_1001074E8( (uint64_t)&v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
  }

  uint64_t v38 = v60;
  sub_100057FE8(v28, (uint64_t)v60, type metadata accessor for DriverEvent);
  if (swift_getEnumCaseMultiPayload(v38, v34))
  {
    uint64_t v39 = (uint64_t)v38;
LABEL_12:
    sub_10005802C(v39, type metadata accessor for DriverEvent);
    return;
  }

  sub_100058090(v38, &v66);
  sub_100058090(&v66, &v68);
  if (sub_1001073D8((uint64_t)&v68) == 9)
  {
    NANBitmap.Channel.operatingClass.getter(&v68);
    sub_100288A80();
    goto LABEL_15;
  }

  sub_1001074E8( (uint64_t)&v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1000578CC);
}

uint64_t sub_100285EA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  unint64_t v6 = (char *)&v32 - v5;
  __chkstk_darwin();
  unint64_t v8 = (char *)&v32 - v7;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = *(void *)((char *)v0 + qword_10040DE48);
  swift_unownedRetainStrong(v11);
  char v12 = sub_1002E9E34();
  swift_release(v11);
  if ((v12 & 1) != 0)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x64656C6261736964LL,  0xE800000000000000LL,  0x64656C62616E65LL,  0xE700000000000000LL,  0LL);
    swift_bridgeObjectRelease(0xE800000000000000LL);
    if ((v13 & 1) == 0)
    {
      unsigned __int8 v14 = *((_BYTE *)v1 + 16);
      *((_BYTE *)v1 + 16)  = 0;
      return sub_10028BF74(v14);
    }
  }

  uint64_t v34 = v6;
  uint64_t v16 = swift_unownedRetainStrong(v11);
  uint64_t v20 = sub_1002E8D68(v16, v17, v18, v19);
  swift_release(v11);
  char v21 = sub_100280334();
  swift_release(v20);
  if ((v21 & 1) == 0)
  {
    uint64_t v33 = v2;
    uint64_t v23 = enum case for DispatchTimeInterval.seconds(_:);
    goto LABEL_11;
  }

  int v22 = *((unsigned __int8 *)v1 + 16);
  if (v22 == 4)
  {
    uint64_t v33 = v2;
    sub_10028C4AC();
    *(void *)unint64_t v8 = 20LL;
    uint64_t v23 = enum case for DispatchTimeInterval.seconds(_:);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v8, enum case for DispatchTimeInterval.seconds(_:), v3);
    BOOL v24 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v10, (uint64_t)v8);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
    v25(v8, v3);
    v25(v10, v3);
    if (v24)
    {
      LOBYTE(v22)  = *((_BYTE *)v1 + 16);
      goto LABEL_9;
    }

void sub_100286240()
{
  *uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  v4(v3, v5, v1);
  uint64_t v8 = *(void *)(v7 - 176);
  BOOL v9 = static DispatchTimeInterval.< infix(_:_:)(v8, (uint64_t)v3);
  v6(v3, v1);
  v6((void *)v8, v1);
  if (*(_BYTE *)(v0 + 16) == 4)
  {
    if (!v9)
    {
      uint64_t v10 = swift_unownedRetainStrong(v2);
      uint64_t v14 = sub_1002E8D68(v10, v11, v12, v13);
      swift_release(v2);
      os_log_type_t v15 = (uint64_t *)(v14 + qword_10040DD10);
      swift_beginAccess(v14 + qword_10040DD10, v7 - 104, 0LL, 0LL);
      uint64_t v16 = *v15;
      uint64_t v17 = *(void *)(v7 - 184);
      uint64_t v18 = *(void *)(v17 + 80);
      uint64_t v19 = *(void *)(v17 + 88);
      uint64_t v21 = _s8InstanceCMa(255LL, v18, v19, v20);
      WitnessTable  = swift_getWitnessTable(&unk_10035F874, v21);
      *(void *)(v7 - 136)  = v18;
      *(void *)(v7 - 128)  = v21;
      *(void *)(v7 - 120)  = v19;
      *(void *)(v7 - 112)  = WitnessTable;
      uint64_t v23 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, v7 - 136);
      uint64_t v24 = NANBitmap.Channel.operatingClass.getter(v16);
      swift_bridgeObjectRetain(v24);
      swift_release(v14);
      *(void *)(v7 - 136)  = v24;
      __chkstk_darwin();
      uint64_t v42 = v18;
      uint64_t v43 = v19;
      uint64_t v25 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt8,  v23,  &protocol witness table for UInt8);
      uint64_t v26 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v25);
      Sequence.forEach(_:)(sub_10029FFA8, v41, v25, v26);
      swift_bridgeObjectRelease(*(void *)(v7 - 136));
      uint64_t v27 = swift_unownedRetainStrong(v2);
      uint64_t v31 = sub_1002E8D68(v27, v28, v29, v30);
      swift_release(v2);
      uint64_t v32 = (uint64_t *)(v31 + qword_10040DD18);
      swift_beginAccess(v31 + qword_10040DD18, v7 - 168, 0LL, 0LL);
      uint64_t v33 = *v32;
      uint64_t v35 = _s8InstanceCMa_0(255LL, v18, v19, v34);
      uint64_t v36 = swift_getWitnessTable(&unk_10035E28C, v35);
      *(void *)(v7 - 136)  = v18;
      *(void *)(v7 - 128)  = v35;
      *(void *)(v7 - 120)  = v19;
      *(void *)(v7 - 112)  = v36;
      uint64_t v37 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, v7 - 136);
      uint64_t v38 = NANBitmap.Channel.operatingClass.getter(v33);
      swift_bridgeObjectRetain(v38);
      swift_release(v31);
      *(void *)(v7 - 136)  = v38;
      __chkstk_darwin();
      uint64_t v42 = v18;
      uint64_t v43 = v19;
      uint64_t v39 = type metadata accessor for Dictionary.Values( 0LL,  &type metadata for UInt8,  v37,  &protocol witness table for UInt8);
      uint64_t v40 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v39);
      Sequence.forEach(_:)(sub_10029FFD0, v41, v39, v40);
      swift_bridgeObjectRelease(*(void *)(v7 - 136));
      goto LABEL_8;
    }
  }

  else if (!v9)
  {
LABEL_8:
    JUMPOUT(0x100286184LL);
  }

  JUMPOUT(0x100286190LL);
}

uint64_t sub_100286518()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v70 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v67 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = sub_100002274((uint64_t *)&unk_10040E3F0);
  __chkstk_darwin();
  uint64_t v71 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_100407450);
  __chkstk_darwin();
  uint64_t v69 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v73 = (uint64_t)&v65 - v7;
  __chkstk_darwin();
  char v72 = (uint64_t *)((char *)&v65 - v8);
  BOOL v9 = (void *)((char *)v0 + qword_10040DD20);
  swift_beginAccess((char *)v0 + qword_10040DD20, v84, 0LL, 0LL);
  uint64_t v10 = *v9;
  uint64_t v11 = *(void *)(v2 + 80);
  uint64_t v12 = *(void *)(v2 + 88);
  uint64_t v14 = _s17InitiatorInstanceCMa(255LL, v11, v12, v13);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v14);
  v80  = v11;
  uint64_t v81 = v14;
  uint64_t v82 = v12;
  uint64_t v83 = WitnessTable;
  uint64_t v16 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v80);
  unint64_t v17 = sub_10017B5C8();
  uint64_t v18 = NANBitmap.Channel.operatingClass.getter(v10);
  v80  = v18;
  uint64_t v76 = v11;
  uint64_t v77 = v12;
  uint64_t v19 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v16, v17);
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v19);
  LOBYTE(v18)  = Sequence.contains(where:)(sub_10029FDB0, v75, v19, v20);
  swift_bridgeObjectRelease(v80);
  uint64_t v74 = 0LL;
  if ((v18 & 1) != 0)
  {
    char v21 = 1;
  }

  else
  {
    int v22 = (void *)((char *)v1 + qword_10040DD28);
    swift_beginAccess((char *)v1 + qword_10040DD28, v79, 0LL, 0LL);
    uint64_t v23 = *v22;
    uint64_t v25 = v1;
    uint64_t v26 = _s17ResponderInstanceCMa(255LL, v11, v12, v24);
    uint64_t v27 = swift_getWitnessTable(&unk_10035D5BC, v26);
    v80  = v11;
    uint64_t v81 = v26;
    uint64_t v82 = v12;
    uint64_t v83 = v27;
    uint64_t v28 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v80);
    uint64_t v66 = v3;
    uint64_t v29 = NANBitmap.Channel.operatingClass.getter(v23);
    uint64_t v65 = (uint64_t)&v65;
    v80  = v29;
    __chkstk_darwin();
    *(&v65 - 2)  = v11;
    *(&v65 - 1)  = v12;
    uint64_t v30 = v28;
    uint64_t v1 = v25;
    uint64_t v31 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v30, v17);
    swift_bridgeObjectRetain(v29);
    uint64_t v32 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v31);
    uint64_t v33 = v31;
    uint64_t v3 = v66;
    uint64_t v34 = v74;
    char v21 = Sequence.contains(where:)(sub_10029FDDC, &v65 - 4, v33, v32);
    uint64_t v74 = v34;
    swift_bridgeObjectRelease(v80);
  }

  uint64_t v35 = *v9;
  uint64_t v36 = swift_bridgeObjectRetain(v35);
  char v37 = Dictionary.isEmpty.getter(v36, &type metadata for NANPeerServiceIdentifier, v16, v17);
  swift_bridgeObjectRelease(v35);
  uint64_t v38 = (uint64_t)v69;
  if ((v37 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v39 = (void *)((char *)v1 + qword_10040DD28);
  swift_beginAccess((char *)v1 + qword_10040DD28, v78, 0LL, 0LL);
  uint64_t v40 = *v39;
  uint64_t v42 = _s17ResponderInstanceCMa(255LL, v11, v12, v41);
  swift_bridgeObjectRetain(v40);
  uint64_t v43 = swift_getWitnessTable(&unk_10035D5BC, v42);
  v80  = v11;
  uint64_t v81 = v42;
  uint64_t v82 = v12;
  uint64_t v83 = v43;
  uint64_t v44 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v80);
  LOBYTE(v42)  = Dictionary.isEmpty.getter(v40, &type metadata for NANPeerServiceIdentifier, v44, v17);
  swift_bridgeObjectRelease(v40);
  if ((v42 & 1) != 0)
  {
    uint64_t v45 = v70;
    uint64_t v46 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v70 + 56);
    uint64_t v47 = (uint64_t)v72;
    v46(v72, 1LL, 1LL, v3);
  }

  else
  {
LABEL_7:
    uint64_t v45 = v70;
    if ((v21 & 1) != 0) {
      uint64_t v48 = 1LL;
    }
    else {
      uint64_t v48 = 3LL;
    }
    uint64_t v47 = (uint64_t)v72;
    *char v72 = v48;
    (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))( v47,  enum case for DispatchTimeInterval.seconds(_:),  v3);
    uint64_t v46 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v45 + 56);
    v46((uint64_t *)v47, 0LL, 1LL, v3);
  }

  uint64_t v49 = (uint64_t)v71;
  uint64_t v50 = v73;
  uint64_t v51 = qword_10040DD48;
  uint64_t v52 = *(void *)((char *)v1 + qword_10040DD48);
  if (v52)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))( v73,  v52 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval,  v3);
    uint64_t v53 = 0LL;
  }

  else
  {
    uint64_t v53 = 1LL;
  }

  v46((uint64_t *)v50, v53, 1LL, v3);
  uint64_t v54 = v49 + *(int *)(v68 + 48);
  sub_1000226B0(v47, v49, &qword_100407450);
  sub_1000226B0(v50, v54, &qword_100407450);
  unint64_t v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v55(v49, 1LL, v3) == 1)
  {
    sub_1000225EC(v50, &qword_100407450);
    if (v55(v54, 1LL, v3) == 1)
    {
      sub_1000225EC(v49, &qword_100407450);
      return sub_1000225EC(v47, &qword_100407450);
    }

    goto LABEL_19;
  }

  sub_1000226B0(v49, v38, &qword_100407450);
  if (v55(v54, 1LL, v3) == 1)
  {
    sub_1000225EC(v50, &qword_100407450);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v38, v3);
LABEL_19:
    sub_1000225EC(v49, (uint64_t *)&unk_10040E3F0);
    goto LABEL_22;
  }

  unint64_t v56 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v67, v54, v3);
  uint64_t v57 = sub_10000AF70( (unint64_t *)&unk_10040E400,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval,  (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v56, v3, v57);
  uint64_t v59 = v38;
  uint64_t v60 = v3;
  uint64_t v61 = *(void (**)(char *, uint64_t))(v45 + 8);
  v61(v56, v60);
  sub_1000225EC(v73, &qword_100407450);
  v61((char *)v59, v60);
  sub_1000225EC(v49, &qword_100407450);
  if ((v58 & 1) != 0) {
    return sub_1000225EC(v47, &qword_100407450);
  }
LABEL_22:
  uint64_t v63 = sub_10027E6B0((void (*)(uint64_t *__return_ptr, char *))sub_10029FE08);
  sub_1000225EC(v47, &qword_100407450);
  uint64_t v64 = *(void *)((char *)v1 + v51);
  *(void *)((char *)v1 + v51)  = v63;
  return swift_release(v64);
}

uint64_t sub_100286C18()
{
  uint64_t v1 = sub_100002274(&qword_10040E3C0);
  __chkstk_darwin();
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (sub_1002883DC() < 1)
  {
    uint64_t v6 = sub_10028805C();
    uint64_t v7 = *(void *)(v6 + 16);
    swift_bridgeObjectRelease(v6);
    if (v7) {
      char v5 = 4;
    }
    else {
      char v5 = 6;
    }
    uint64_t v4 = v0 + *(void *)(*(void *)v0 + 248LL);
    swift_beginAccess(v4, v10, 0LL, 0LL);
  }

  else
  {
    uint64_t v4 = v0 + *(void *)(*(void *)v0 + 248LL);
    swift_beginAccess(v4, v10, 0LL, 0LL);
    char v5 = 5;
  }

  sub_1000226B0(v4, (uint64_t)v3, &qword_10040E3C0);
  v3[*(int *)(v1 + 36)]  = v5;
  return sub_1002813D0((uint64_t)v3);
}

uint64_t sub_100286D18(uint64_t a1)
{
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = v1 + qword_10040DED0;
  swift_beginAccess(v1 + qword_10040DED0, v8, 0LL, 0LL);
  sub_1000226B0(v5, (uint64_t)v4, &qword_100405D40);
  swift_beginAccess(v5, v7, 33LL, 0LL);
  sub_1002A17A0(a1, v5, &qword_100405D40);
  swift_endAccess(v7);
  sub_10028CB94((uint64_t)v4);
  sub_1000225EC(a1, &qword_100405D40);
  return sub_1000225EC((uint64_t)v4, &qword_100405D40);
}

uint64_t sub_100286E04(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a7 + 8);
  v31[0]  = a4;
  v31[1]  = a5;
  v31[2]  = a6;
  v31[3]  = v14;
  uint64_t v15 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v31);
  unint64_t v16 = sub_10017B5C8();
  uint64_t v17 = NANBitmap.Channel.operatingClass.getter(a1);
  v31[0]  = v17;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = a2;
  char v30 = a3;
  uint64_t v18 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v15, v16);
  swift_bridgeObjectRetain(v17);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v18);
  v31[0]  = Sequence.filter(_:)(sub_1002A1740, v24, v18, WitnessTable);
  v23[2]  = a4;
  v23[3]  = a5;
  v23[4]  = a6;
  v23[5]  = a7;
  uint64_t v20 = type metadata accessor for Array(0LL, v15);
  uint64_t v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
  Sequence.forEach(_:)(sub_1002A1768, v23, v20, v21);
  return swift_bridgeObjectRelease(v31[0]);
}

uint64_t sub_100286F58( uint64_t a1, unsigned __int16 *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a5, a7);
  if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)( v11 & 0xFFFFFFFFFFFFLL,  *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16)))
  {
    char v12 = !sub_1002A2024(a5, a7) | a3;
  }

  else
  {
    char v12 = 0;
  }

  return v12 & 1;
}

void sub_100286FE4(unsigned __int8 *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = (uint64_t *)((char *)a2 + qword_10040DD20);
  swift_beginAccess((char *)a2 + qword_10040DD20, &v50, 32LL, 0LL);
  uint64_t v43 = *v11;
  uint64_t v39 = v5;
  uint64_t v40 = v4;
  char v52 = v4;
  char v53 = v5;
  uint64_t v37 = v10;
  uint64_t v38 = v6;
  char v54 = v6;
  uint64_t v12 = v7;
  char v55 = v7;
  char v56 = v8;
  char v57 = v9;
  char v58 = v10;
  uint64_t v14 = *(void *)(v3 + 80);
  uint64_t v13 = *(void *)(v3 + 88);
  uint64_t v16 = _s17InitiatorInstanceCMa(255LL, v14, v13, v15);
  uint64_t v44 = v14;
  uint64_t v45 = v16;
  uint64_t v46 = v13;
  WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v16);
  uint64_t v17 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v44);
  sub_10017B5C8();
  Dictionary.subscript.getter(&v52, v43, &type metadata for NANPeerServiceIdentifier, v17);
  uint64_t v18 = v48;
  if (v48)
  {
    uint64_t v19 = v49;
    swift_endAccess(&v50);
    sub_1002A1608(v18, v19);
    swift_bridgeObjectRelease(v19);
    sub_1002A0210(v18, v19);
    sub_100279690();
  }

  else
  {
    swift_endAccess(&v50);
    uint64_t v20 = (uint64_t *)((char *)a2 + qword_10040DD28);
    swift_beginAccess((char *)a2 + qword_10040DD28, &v50, 32LL, 0LL);
    uint64_t v21 = *v20;
    char v52 = v40;
    char v53 = v39;
    char v54 = v38;
    char v55 = v12;
    char v56 = v8;
    char v57 = v9;
    char v58 = v10;
    uint64_t v23 = _s17ResponderInstanceCMa(255LL, v14, v13, v22);
    uint64_t v24 = swift_getWitnessTable(&unk_10035D5BC, v23);
    uint64_t v44 = v14;
    uint64_t v45 = v23;
    uint64_t v46 = v13;
    WitnessTable  = v24;
    uint64_t v25 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v44);
    Dictionary.subscript.getter(&v52, v21, &type metadata for NANPeerServiceIdentifier, v25);
    uint64_t v26 = v48;
    if (v48)
    {
      uint64_t v27 = v49;
      swift_endAccess(&v50);
      sub_1002A1608(v26, v27);
      swift_bridgeObjectRelease(v27);
      sub_1002A0210(v26, v27);
      sub_10022A60C(a3);
    }

    else
    {
      uint64_t v42 = v8;
      uint64_t v28 = swift_endAccess(&v50);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      uint64_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, (os_log_type_t)v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v44 = v32;
        *(_DWORD *)uint64_t v31 = 136315138;
        uint64_t v33 = NANPeerServiceIdentifier.description.getter(v40 | (v39 << 8) | (v38 << 16) | (v12 << 24) | (v42 << 32) | (v9 << 40) | (v37 << 48));
        unint64_t v35 = v34;
        uint64_t v50 = sub_10000235C(v33, v34, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
        swift_bridgeObjectRelease(v35);
        _os_log_impl( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v30,  "Received a keep alive for a datapath: %s, but datapath not found",  v31,  0xCu);
        swift_arrayDestroy(v32, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }
    }
  }

void sub_10028738C( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a4(0LL, *(void *)(*(void *)a2 + 80LL), *(void *)(*(void *)a2 + 88LL));
  WitnessTable  = swift_getWitnessTable(a5, v10);
  sub_1002856C0(v8, v9, a2, a3, v10, WitnessTable);
}

double sub_100287410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *a4;
  uint64_t v14 = a2 + 16;
  type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  uint64_t v15 = swift_projectBox(a3);
  uint64_t v16 = *(void *)(v13 + 88);
  uint64_t v17 = *(void *)(a7 + 8);
  v25[0]  = *(void *)(v13 + 80);
  v25[1]  = a6;
  void v25[2] = v16;
  void v25[3] = v17;
  uint64_t v18 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v25);
  unint64_t v19 = sub_10017B5C8();
  uint64_t v20 = NANBitmap.Channel.operatingClass.getter(a1);
  v25[0]  = v20;
  v24[2]  = a6;
  v24[3]  = a7;
  v24[4]  = v14;
  v24[5]  = v15;
  v24[6]  = a4;
  v24[7]  = a5;
  uint64_t v21 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v18, v19);
  swift_bridgeObjectRetain(v20);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v21);
  Sequence.forEach(_:)(sub_1002A17E4, v24, v21, WitnessTable);
  *(void *)&double result = swift_bridgeObjectRelease(v25[0]).n128_u64[0];
  return result;
}

void sub_100287534(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v92 = a4;
  uint64_t v89 = a5;
  uint64_t v84 = a3;
  uint64_t v86 = a2;
  uint64_t v10 = *a4;
  uint64_t v83 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  uint64_t v81 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v82 = (char *)&v71 - v12;
  uint64_t v85 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin();
  uint64_t v76 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v10 + 80);
  uint64_t v78 = *(void *)(v10 + 88);
  uint64_t v15 = *(void *)(v78 + 8);
  uint64_t v77 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v15,  v14,  &protocol requirements base descriptor for P2PControls);
  uint64_t v79 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v71 - v16;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  unint64_t v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v71 - v23;
  uint64_t v25 = *a1;
  uint64_t v87 = a1[1];
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a6, a7);
  uint64_t v90 = a6;
  uint64_t v93 = a7;
  uint64_t v88 = v25;
  if (!sub_1002A2024(a6, a7)) {
    goto LABEL_3;
  }
  char v72 = v24;
  uint64_t v73 = v20;
  uint64_t v74 = v19;
  char v75 = v22;
  uint64_t v71 = v17;
  uint64_t v28 = v85;
  uint64_t v27 = v86;
  swift_beginAccess(v86, v97, 0LL, 0LL);
  uint64_t v29 = *v27;
  uint64_t v30 = v26 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(*v27);
  BOOL v31 = sub_100303A00(v26 & 0xFFFFFFFFFFFFLL, v29);
  swift_bridgeObjectRelease(v29);
  if (!v31)
  {
    swift_beginAccess(v27, v96, 33LL, 0LL);
    sub_10032CF5C((uint64_t)v95, v30);
    swift_endAccess(v96);
    uint64_t v34 = (uint64_t)v92;
    uint64_t v35 = *(void *)((char *)v92 + *(void *)(*v92 + 280LL));
    swift_unownedRetainStrong(v35);
    uint64_t v36 = (uint64_t)v72;
    sub_1002EA528(v30, (uint64_t)v72);
    swift_release(v35);
    uint64_t v37 = (uint64_t)v74;
    sub_1000226B0(v36 + *(int *)(v73 + 80), (uint64_t)v74, qword_100410330);
    sub_10005802C(v36, type metadata accessor for NANPeer);
    uint64_t v38 = v84;
    swift_beginAccess(v84, v96, 1LL, 0LL);
    uint64_t v39 = v28;
    sub_10029FF60(v37, v38 + *(int *)(v28 + 28) + *(int *)(v83 + 40));
    swift_unownedRetainStrong(v35);
    uint64_t v40 = (uint64_t)v75;
    sub_1002EA528(v30, (uint64_t)v75);
    swift_release(v35);
    LOBYTE(v37)  = sub_10024D9E0();
    sub_10005802C(v40, type metadata accessor for NANPeer);
    if ((v37 & 1) == 0) {
      goto LABEL_6;
    }
    swift_unownedRetainStrong(v35);
    uint64_t v41 = v79;
    uint64_t v42 = v71;
    uint64_t v43 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))( v71,  v35 + *(void *)(*(void *)v35 + 96LL),  AssociatedTypeWitness);
    swift_release(v35);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v78,  v77,  v43,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
    unsigned int v45 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( v43,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    if (v45 >= 5)
    {
      swift_beginAccess(v38, v95, 0LL, 0LL);
      uint64_t v51 = v76;
      sub_100057FE8(v38, v76, type metadata accessor for NANAttribute.CustomDeviceInformation);
      unsigned __int8 v48 = NANActionFrame.init(customDeviceInformation:)(v51);
      unint64_t v50 = v52;
    }

    else
    {
LABEL_6:
      swift_beginAccess(v38, v95, 0LL, 0LL);
      uint64_t v46 = v82;
      sub_100057FE8( v38 + *(int *)(v39 + 28),  (uint64_t)v82,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      *uint64_t v46 = *(_DWORD *)(v38 + 4);
      sub_100057FE8((uint64_t)v46, v81, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      NANActionFrame.init(customAttributes:)();
      unsigned __int8 v48 = v47;
      unint64_t v50 = v49;
      sub_10005802C((uint64_t)v46, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    }

    uint64_t v53 = v48;
    uint64_t v54 = swift_unownedRetainStrong(v35);
    char v58 = sub_1002EA84C(v54, v55, v56, v57);
    swift_release(v35);
    uint64_t v59 = v91;
    sub_1002CB9AC(0, v53, v50, 0LL, v30, 1);
    if (v59)
    {
      sub_100057AA0(v53, v50, 0LL);
      swift_release(v58);
      swift_errorRetain(v59);
      uint64_t v60 = swift_errorRetain(v59);
      uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = swift_slowAlloc(22LL, -1LL);
        uint64_t v64 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v91 = swift_slowAlloc(32LL, -1LL);
        uint64_t v98 = v91;
        *(_DWORD *)uint64_t v63 = 136315394;
        uint64_t v65 = WiFiAddress.description.getter(v30);
        unint64_t v67 = v66;
        uint64_t v94 = sub_10000235C(v65, v66, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
        swift_bridgeObjectRelease(v67);
        *(_WORD *)(v63 + 12)  = 2112;
        swift_errorRetain(v59);
        uint64_t v68 = _swift_stdlib_bridgeErrorToNSError(v59);
        uint64_t v94 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
        *uint64_t v64 = v68;
        swift_errorRelease(v59);
        swift_errorRelease(v59);
        _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "Failed to transmit SOS watchdog recovery to %s because %@",  (uint8_t *)v63,  0x16u);
        uint64_t v69 = sub_100002274(&qword_100404DE0);
        swift_arrayDestroy(v64, 1LL, v69);
        swift_slowDealloc(v64, -1LL, -1LL);
        uint64_t v70 = v91;
        swift_arrayDestroy(v91, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v70, -1LL, -1LL);
        swift_slowDealloc(v63, -1LL, -1LL);
        swift_errorRelease(v59);
      }

      else
      {
        swift_errorRelease(v59);

        swift_errorRelease(v59);
        swift_errorRelease(v59);
      }
    }

    else
    {
      sub_100057AA0(v53, v50, 0LL);
      swift_release(v58);
    }

    uint64_t v32 = v89;
    uint64_t v33 = v90;
  }

  else
  {
LABEL_3:
    uint64_t v32 = v89;
    uint64_t v33 = v90;
    uint64_t v34 = (uint64_t)v92;
  }

  sub_1002856C0(v88, v87, v34, v32, v33, *(void *)(v93 + 8));
}

uint64_t sub_100287CA0(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for NANPeer(0LL) + 80);
  sub_1000225EC(v1, qword_100410330);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_100287CFC(uint64_t a1)
{
  uint64_t v2 = *v1;
  __int16 v3 = *(_WORD *)(a1 + qword_100410B58 + 4);
  int v10 = *(_DWORD *)(a1 + qword_100410B58);
  __int16 v11 = v3;
  swift_beginAccess((char *)v1 + qword_10040DD30, v9, 33LL, 0LL);
  uint64_t v5 = type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink( 255LL,  *(void *)(v2 + 80),  *(void *)(v2 + 88),  v4);
  unint64_t v6 = sub_10029F2C0();
  uint64_t v7 = type metadata accessor for Dictionary(0LL, &type metadata for WiFiAddress, v5, v6);
  Dictionary.removeValue(forKey:)(&v10, v7);
  swift_endAccess(v9);
  return sub_1002A0180(v12);
}

uint64_t sub_100287DAC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10 = a2;
  uint64_t v12 = *(void *)(a6 + 8);
  unint64_t v13 = a2 >> 8;
  unint64_t v14 = a2 >> 16;
  v35[0]  = a3;
  v35[1]  = a4;
  unint64_t v21 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = a2 >> 40;
  v35[2]  = a5;
  v35[3]  = v12;
  uint64_t v15 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v35);
  unint64_t v16 = sub_10017B5C8();
  uint64_t v17 = NANBitmap.Channel.operatingClass.getter(a1);
  v35[0]  = v17;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  char v29 = v10;
  char v30 = v13;
  char v31 = v14;
  char v32 = v21;
  char v33 = v22;
  char v34 = v23;
  uint64_t v18 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v15, v16);
  swift_bridgeObjectRetain(v17);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v18);
  LOBYTE(v18)  = Sequence.contains(where:)(sub_1002A018C, v24, v18, WitnessTable);
  swift_bridgeObjectRelease(v35[0]);
  return v18 & 1;
}

uint64_t sub_100287EF4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)((char *)v0 + qword_10040DD20);
  swift_beginAccess((char *)v0 + qword_10040DD20, v24, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v7 = _s17InitiatorInstanceCMa(255LL, v5, v4, v6);
  swift_bridgeObjectRetain(v3);
  uint64_t v20 = v5;
  uint64_t v21 = v7;
  uint64_t v22 = v4;
  WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v7);
  uint64_t v8 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v20);
  unint64_t v9 = sub_10017B5C8();
  uint64_t v10 = Dictionary.count.getter(v3, &type metadata for NANPeerServiceIdentifier, v8, v9);
  swift_bridgeObjectRelease(v3);
  __int16 v11 = (uint64_t *)((char *)v0 + qword_10040DD28);
  swift_beginAccess(v11, &v19, 0LL, 0LL);
  uint64_t v12 = *v11;
  uint64_t v14 = _s17ResponderInstanceCMa(255LL, v5, v4, v13);
  swift_bridgeObjectRetain(v12);
  uint64_t v15 = swift_getWitnessTable(&unk_10035D5BC, v14);
  uint64_t v20 = v5;
  uint64_t v21 = v14;
  uint64_t v22 = v4;
  WitnessTable  = v15;
  uint64_t v16 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v20);
  uint64_t v17 = Dictionary.count.getter(v12, &type metadata for NANPeerServiceIdentifier, v16, v9);
  swift_bridgeObjectRelease(v12);
  uint64_t result = v10 + v17;
  if (__OFADD__(v10, v17)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10028805C()
{
  uint64_t v1 = *v0;
  uint64_t v13 = sub_100280578();
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v11 = *(void *)(v1 + 80);
  uint64_t v12 = v2;
  uint64_t v4 = type metadata accessor for NANDeviceLink(255LL, v11, v2, v3);
  uint64_t v5 = type metadata accessor for Array(0LL, v4);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  uint64_t v8 = sub_100302E9C( (void (*)(char *, char *))sub_10029FD60,  (uint64_t)&v10,  v5,  (uint64_t)&type metadata for WiFiAddress,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v7);
  swift_bridgeObjectRelease(v13);
  return v8;
}

uint64_t sub_100288108(unint64_t a1)
{
  char v2 = a1;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  uint64_t v8 = *v1;
  unint64_t v9 = (uint64_t *)((char *)v1 + qword_10040DD30);
  swift_beginAccess(v9, v19, 32LL, 0LL);
  uint64_t v10 = *v9;
  v17[0]  = v2;
  v17[1]  = v3;
  v17[2]  = v4;
  v17[3]  = v5;
  v17[4]  = v6;
  v17[5]  = v7;
  uint64_t v12 = type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink( 0LL,  *(void *)(v8 + 80),  *(void *)(v8 + 88),  v11);
  sub_10029F2C0();
  Dictionary.subscript.getter(v17, v10, &type metadata for WiFiAddress, v12);
  uint64_t v13 = v18;
  if (v18)
  {
    swift_endAccess(v19);
    uint64_t v14 = swift_unownedRetain(v13);
    sub_1002A0180(v14);
    uint64_t v15 = swift_unownedRetainStrong(v13);
    swift_unownedRelease(v15);
  }

  else
  {
    swift_endAccess(v19);
  }

  return v13;
}

void *sub_100288204(char a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = (uint64_t *)((char *)v1 + qword_10040DD10);
  swift_beginAccess((char *)v1 + qword_10040DD10, v30, 32LL, 0LL);
  uint64_t v5 = *v4;
  char v27 = a1;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v23 = v6;
  uint64_t v24 = _s8InstanceCMa(255LL, v6, v7, v8);
  uint64_t v25 = v7;
  WitnessTable  = swift_getWitnessTable(&unk_10035F874, v24);
  uint64_t v9 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v23);
  Dictionary.subscript.getter(&v27, v5, &type metadata for UInt8, v9);
  uint64_t v10 = v28;
  if (v28)
  {
    uint64_t v11 = v29;
    swift_endAccess(v30);
    uint64_t v12 = v10;
    sub_1002A0210(v10, v11);
    uint64_t v13 = (void *)v12[qword_100410BB8];
  }

  else
  {
    swift_endAccess(v30);
    uint64_t v14 = (uint64_t *)((char *)v1 + qword_10040DD18);
    swift_beginAccess(v14, v30, 32LL, 0LL);
    uint64_t v15 = *v14;
    char v27 = a1;
    uint64_t v17 = _s8InstanceCMa_0(255LL, v6, v7, v16);
    uint64_t v18 = swift_getWitnessTable(&unk_10035E28C, v17);
    uint64_t v23 = v6;
    uint64_t v24 = v17;
    uint64_t v25 = v7;
    WitnessTable  = v18;
    uint64_t v19 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v23);
    Dictionary.subscript.getter(&v27, v15, &type metadata for UInt8, v19);
    uint64_t v13 = v28;
    if (v28)
    {
      uint64_t v20 = v29;
      swift_endAccess(v30);
      uint64_t v21 = v13;
      sub_1002A0210(v13, v20);
      uint64_t v13 = (void *)v21[qword_100410A30];
    }

    else
    {
      swift_endAccess(v30);
    }
  }

  return v13;
}

uint64_t sub_1002883DC()
{
  uint64_t v1 = *v0;
  char v2 = (uint64_t *)((char *)v0 + qword_10040DD20);
  swift_beginAccess((char *)v0 + qword_10040DD20, v18, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v7 = _s17InitiatorInstanceCMa(0LL, v5, v4, v6);
  swift_bridgeObjectRetain(v3);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA58, v7);
  uint64_t v9 = sub_100288508(v3, v5, v7, v4, WitnessTable);
  swift_bridgeObjectRelease(v3);
  uint64_t v10 = (uint64_t *)((char *)v0 + qword_10040DD28);
  swift_beginAccess(v10, &v17, 0LL, 0LL);
  uint64_t v11 = *v10;
  uint64_t v13 = _s17ResponderInstanceCMa(0LL, v5, v4, v12);
  swift_bridgeObjectRetain(v11);
  uint64_t v14 = swift_getWitnessTable(&unk_10035D5D8, v13);
  uint64_t v15 = sub_100288508(v11, v5, v13, v4, v14);
  swift_bridgeObjectRelease(v11);
  uint64_t result = v9 + v15;
  if (__OFADD__(v9, v15)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100288508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 8);
  v20[0]  = a2;
  v20[1]  = a3;
  v20[2]  = a4;
  v20[3]  = v10;
  uint64_t v11 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v20);
  unint64_t v12 = sub_10017B5C8();
  uint64_t v13 = NANBitmap.Channel.operatingClass.getter(a1);
  v20[0]  = v13;
  v19[2]  = a2;
  v19[3]  = a3;
  v19[4]  = a4;
  v19[5]  = a5;
  uint64_t v14 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v11, v12);
  swift_bridgeObjectRetain(v13);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v14);
  uint64_t v16 = Sequence.filter(_:)(sub_10029F434, v19, v14, WitnessTable);
  uint64_t v17 = Array.count.getter(v16, v11);
  swift_bridgeObjectRelease(v16);
  return v17;
}

uint64_t sub_100288610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 8);
  v18[0]  = a2;
  v18[1]  = a3;
  v18[2]  = a4;
  v18[3]  = v10;
  uint64_t v11 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v18);
  unint64_t v12 = sub_10017B5C8();
  uint64_t v13 = NANBitmap.Channel.operatingClass.getter(a1);
  v18[0]  = v13;
  v17[2]  = a2;
  v17[3]  = a3;
  v17[4]  = a4;
  v17[5]  = a5;
  uint64_t v14 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v11, v12);
  swift_bridgeObjectRetain(v13);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v14);
  LOBYTE(v14)  = Sequence.contains(where:)(sub_10029FCA0, v17, v14, WitnessTable);
  swift_bridgeObjectRelease(v18[0]);
  return v14 & 1;
}

BOOL sub_10028870C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1002A3D90(a3, a5)
}

void sub_100288784(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v46 = a2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v14 & 1) != 0)
  {
    unint64_t v45 = a3;
    id v15 = (id)HIWORD(a1);
    unint64_t v16 = a1 >> 40;
    unint64_t v17 = HIDWORD(a1);
    uint64_t v18 = (void *)((char *)v3 + qword_10040DD20);
    swift_beginAccess((char *)v3 + qword_10040DD20, v59, 32LL, 0LL);
    uint64_t v19 = *v18;
    __int16 v51 = a1;
    unint64_t v42 = a1 >> 8;
    unint64_t v43 = a1 >> 16;
    char v52 = BYTE2(a1);
    unint64_t v44 = a1 >> 24;
    char v53 = BYTE3(a1);
    char v54 = BYTE4(a1);
    char v55 = BYTE5(a1);
    char v56 = BYTE6(a1);
    uint64_t v20 = *(void *)(v6 + 80);
    uint64_t v21 = *(void *)(v6 + 88);
    uint64_t v23 = _s17InitiatorInstanceCMa(255LL, v20, v21, v22);
    WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v23);
    uint64_t v47 = v20;
    uint64_t v48 = v23;
    uint64_t v49 = v21;
    uint64_t v50 = WitnessTable;
    uint64_t v25 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v47);
    unint64_t v41 = sub_10017B5C8();
    Dictionary.subscript.getter(&v51, v19, &type metadata for NANPeerServiceIdentifier, v25);
    uint64_t v26 = v57;
    if (v57)
    {
      uint64_t v27 = v58;
      swift_endAccess(v59);
      id v28 = v26;
      uint64_t v40 = v3;
      id v15 = v28;
      sub_1002A0210(v26, v27);
      unint64_t v29 = v45;
      sub_100278DA4(v46, v45);

      LOBYTE(v15)  = BYTE6(a1);
      LOBYTE(v16)  = BYTE5(a1);
      LOBYTE(v17)  = BYTE4(a1);
      uint64_t v3 = v40;
    }

    else
    {
      swift_endAccess(v59);
      unint64_t v29 = v45;
    }

    char v30 = (void *)((char *)v3 + qword_10040DD28);
    swift_beginAccess(v30, v59, 32LL, 0LL);
    uint64_t v31 = *v30;
    LOBYTE(v51)  = a1;
    HIBYTE(v51)  = v42;
    char v52 = v43;
    char v53 = v44;
    char v54 = v17;
    char v55 = v16;
    char v56 = (char)v15;
    uint64_t v33 = _s17ResponderInstanceCMa(255LL, v20, v21, v32);
    uint64_t v34 = swift_getWitnessTable(&unk_10035D5BC, v33);
    uint64_t v47 = v20;
    uint64_t v48 = v33;
    uint64_t v49 = v21;
    uint64_t v50 = v34;
    uint64_t v35 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v47);
    Dictionary.subscript.getter(&v51, v31, &type metadata for NANPeerServiceIdentifier, v35);
    uint64_t v36 = v57;
    if (v57)
    {
      uint64_t v37 = v58;
      swift_endAccess(v59);
      id v38 = v36;
      sub_1002A0210(v36, v37);
      sub_10022A404(v46, v29);
    }

    else
    {
      swift_endAccess(v59);
    }
  }

  else
  {
    __break(1u);
  }

void sub_100288A80()
{
  uint64_t v1 = *v0;
  v18[4]  = *(void *)(type metadata accessor for DispatchTimeInterval(0LL) - 8);
  __chkstk_darwin();
  v18[6]  = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v18[5]  = (char *)v18 - v3;
  __chkstk_darwin();
  v18[7]  = (char *)v18 - v4;
  __chkstk_darwin();
  v18[3]  = (char *)v18 - v5;
  __chkstk_darwin();
  uint64_t v20 = (char *)v18 - v6;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  type metadata accessor for DispatchTime(0LL);
  __chkstk_darwin();
  __chkstk_darwin();
  v18[2]  = (char *)v18 - v7;
  uint64_t v8 = *(void *)(v1 + 88);
  uint64_t v19 = *(void *)(v1 + 80);
  v18[9]  = v8;
  uint64_t v21 = type metadata accessor for NANDiscoveryEngine.BeaconScheduler.Reason(0LL, v19, v8, v9);
  uint64_t v22 = Array.init()(v21);
  v18[8]  = *(void *)NANTimeUnit.defaultDiscoveryBeaconPeriod.unsafeMutableAddressor();
  uint64_t v10 = *(uint64_t *)((char *)v0 + qword_10040DEE0);
  uint64_t v11 = swift_unownedRetainStrong(v10);
  uint64_t v15 = sub_1002E8D68(v11, v12, v13, v14);
  swift_release(v10);
  uint64_t v16 = *(void *)(v15 + qword_10040DD70);
  swift_retain();
  swift_release(v15);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 16);
  swift_release(v16);
  __asm { BR              X9 }

uint64_t sub_100288CB0()
{
  return swift_release(v0);
}

uint64_t sub_100288CF4()
{
  *(void *)(v7 - 272)  = *(void *)NANTimeUnit.initialDiscoveryBeaconPeriod.unsafeMutableAddressor();
  *(_WORD *)(v7 - 120)  = 256;
  uint64_t v8 = type metadata accessor for Array(0LL, *(void *)(v7 - 240));
  Array.append(_:)(v7 - 120, v8);
  uint64_t v9 = v1;
  uint64_t v10 = v1 + qword_10040DED0;
  swift_beginAccess(v1 + qword_10040DED0, v7 - 120, 0LL, 0LL);
  sub_1000226B0(v10, v6, &qword_100405D40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1LL, v2) == 1)
  {
    sub_1000225EC(v6, &qword_100405D40);
    uint64_t v11 = *(void *)(v7 - 304);
  }

  else
  {
    *(void *)(v7 - 328)  = v1;
    uint64_t v12 = *(void *)(v7 - 320);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12, v6, v2);
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v13 = *(void *)(v7 - 248);
    DispatchTime.distance(to:)(v5);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v14(v5, v2);
    uint64_t v15 = *(void **)(v7 - 312);
    *uint64_t v15 = 2LL;
    uint64_t v11 = *(void *)(v7 - 304);
    (*(void (**)(void *, void, uint64_t))(v11 + 104))( v15,  enum case for DispatchTimeInterval.seconds(_:),  v4);
    BOOL v16 = static DispatchTimeInterval.< infix(_:_:)(v13, (uint64_t)v15);
    uint64_t v17 = *(void (**)(void *, uint64_t))(v11 + 8);
    v17(v15, v4);
    v17((void *)v13, v4);
    if (v16)
    {
      *(_WORD *)(v7 - 144)  = 257;
      uint64_t v18 = type metadata accessor for Array(0LL, *(void *)(v7 - 240));
      Array.append(_:)(v7 - 144, v18);
    }

    v14(v12, v2);
    uint64_t v9 = *(void *)(v7 - 328);
  }

  uint64_t v19 = swift_unownedRetainStrong(v0);
  uint64_t v23 = sub_1002E8D68(v19, v20, v21, v22);
  swift_release(v0);
  uint64_t v24 = (uint64_t *)(v23 + qword_10040DD20);
  swift_beginAccess(v23 + qword_10040DD20, v7 - 144, 0LL, 0LL);
  uint64_t v25 = *v24;
  swift_bridgeObjectRetain(v25);
  swift_release(v23);
  uint64_t v26 = *(void *)(v7 - 256);
  uint64_t v27 = *(void *)(v7 - 264);
  uint64_t v29 = _s17InitiatorInstanceCMa(0LL, v26, v27, v28);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA58, v29);
  uint64_t v31 = *(void *)(v7 - 296);
  sub_10028CDEC(v25, v26, v29, v27, WitnessTable, v31);
  swift_bridgeObjectRelease(v25);
  uint64_t v32 = swift_unownedRetainStrong(v0);
  uint64_t v36 = sub_1002E8D68(v32, v33, v34, v35);
  swift_release(v0);
  uint64_t v37 = (uint64_t *)(v36 + qword_10040DD28);
  swift_beginAccess(v36 + qword_10040DD28, v7 - 168, 0LL, 0LL);
  uint64_t v38 = *v37;
  swift_bridgeObjectRetain(v38);
  swift_release(v36);
  uint64_t v40 = _s17ResponderInstanceCMa(0LL, v26, v27, v39);
  uint64_t v41 = swift_getWitnessTable(&unk_10035D5D8, v40);
  uint64_t v42 = *(void *)(v7 - 288);
  sub_10028CDEC(v38, v26, v40, v27, v41, v42);
  swift_bridgeObjectRelease(v38);
  if (static DispatchTimeInterval.< infix(_:_:)(v42, v31)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v31;
  }
  uint64_t v44 = *(void *)(v7 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v44, v43, v4);
  unint64_t v45 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v45(v42, v4);
  v45(v31, v4);
  uint64_t v46 = *(void **)(v7 - 248);
  *uint64_t v46 = 256LL;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))( v46,  enum case for DispatchTimeInterval.milliseconds(_:),  v4);
  BOOL v47 = static DispatchTimeInterval.< infix(_:_:)(v44, (uint64_t)v46);
  v45((uint64_t)v46, v4);
  v45(v44, v4);
  if (v47)
  {
    *(_WORD *)(v7 - 192)  = 259;
    uint64_t v48 = type metadata accessor for Array(0LL, *(void *)(v7 - 240));
    Array.append(_:)(v7 - 192, v48);
  }

  uint64_t v49 = swift_unownedRetainStrong(v0);
  uint64_t v53 = sub_1002E8D68(v49, v50, v51, v52);
  swift_release(v0);
  uint64_t v54 = sub_1002883DC();
  swift_release(v53);
  if (v54 < 1) {
    goto LABEL_15;
  }
  uint64_t v55 = swift_unownedRetainStrong(v0);
  uint64_t v59 = sub_1002E8D68(v55, v56, v57, v58);
  swift_release(v0);
  unint64_t v60 = *(void *)(v59 + qword_10040DD38);
  swift_release(v59);
  if (v60 <= 6 && ((1LL << v60) & 0x66) != 0)
  {
    *(_WORD *)(v7 - 192)  = 258;
    uint64_t v61 = type metadata accessor for Array(0LL, *(void *)(v7 - 240));
    Array.append(_:)(v7 - 192, v61);
LABEL_15:
    char v62 = 0;
    char v63 = 1;
    goto LABEL_16;
  }

  if ((v60 & 0xFFFFFFFFFFFFFFFELL) != 0xA) {
    goto LABEL_15;
  }
  if (*(_BYTE *)(v9 + qword_10040DED8 + 1) == 1) {
    char v62 = sub_10029F228(8LL);
  }
  else {
    char v62 = *(_BYTE *)(v9 + qword_10040DED8);
  }
  *(_BYTE *)(v7 - 192)  = v62;
  *(_BYTE *)(v7 - 191)  = 0;
  uint64_t v108 = type metadata accessor for Array(0LL, *(void *)(v7 - 240));
  Array.append(_:)(v7 - 192, v108);
  char v63 = 0;
LABEL_16:
  uint64_t v64 = (_BYTE *)(v9 + qword_10040DED8);
  *uint64_t v64 = v62;
  v64[1]  = v63;
  uint64_t v65 = swift_unownedRetainStrong(v0);
  int v66 = *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 616LL));
  swift_release(v65);
  if ((v66 - 2) < 3 || v66 == 5)
  {
    swift_bridgeObjectRelease(*(void *)(v7 - 96));
    unint64_t v67 = _swiftEmptyArrayStorage;
    uint64_t v68 = *(void *)(v7 - 272);
  }

  else
  {
    swift_unownedRetainStrong(v0);
    uint64_t v69 = WiFiInterface.capabilities.getter();
    swift_release(v0);
    uint64_t v70 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    *(void *)(v7 - 224)  = v69;
    *(void *)(v7 - 192)  = v70;
    unint64_t v71 = sub_100270384();
    swift_bridgeObjectRetain_n(v70, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))(v7 - 224),  &type metadata for WiFiDriverCapabilities.Kind,  v71);
    uint64_t v72 = *(void *)(v7 - 192);
    LODWORD(v71)  = sub_10007990C(v72, v70);
    swift_bridgeObjectRelease(v69);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v72);
    uint64_t v73 = *(void *)(v7 - 96);
    *(void *)(v7 - 200)  = v73;
    swift_bridgeObjectRetain(v73);
    uint64_t v74 = TimeBitmap.zero.unsafeMutableAddressor();
    uint64_t v75 = v74[2];
    *(_OWORD *)(v7 - 224)  = *(_OWORD *)v74;
    *(void *)(v7 - 208)  = v75;
    __chkstk_darwin();
    uint64_t v76 = *(void *)(v7 - 264);
    v110[0]  = *(void *)(v7 - 256);
    v110[1]  = v76;
    *(_DWORD *)(v7 - 248)  = v71;
    LOBYTE(v111)  = v71 & 1;
    uint64_t v77 = type metadata accessor for Array(0LL, *(void *)(v7 - 240));
    uint64_t v78 = swift_getWitnessTable(&protocol conformance descriptor for [A], v77);
    *(void *)(v7 - 240)  = v77;
    *(void *)(v7 - 272)  = v78;
    ((void (*)(uint64_t, int8x8_t (*)(uint64_t, unsigned __int8 *), uint64_t *, uint64_t, ValueMetadata *))Sequence.reduce<A>(into:_:))( v7 - 224,  sub_10029F39C,  &v109,  v77,  &type metadata for TimeBitmap);
    swift_bridgeObjectRelease(*(void *)(v7 - 200));
    unint64_t v79 = *(void *)(v7 - 192);
    v80  = *(void *)(v7 - 184);
    unint64_t v81 = *(void *)(v7 - 176);
    char v82 = *(_BYTE *)NANMapID.primary.unsafeMutableAddressor();
    __int16 v83 = TimeBitmap.nanBitmap.getter(v79, v80, v81);
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    unint64_t v67 = sub_1002CA480(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v89 = v67[2];
    unint64_t v88 = v67[3];
    if (v89 >= v88 >> 1) {
      unint64_t v67 = sub_1002CA480((void *)(v88 > 1), v89 + 1, 1, v67);
    }
    v67[2]  = v89 + 1;
    uint64_t v90 = &v67[4 * v89];
    *((_BYTE *)v90 + 32)  = v82;
    *((_WORD *)v90 + 20)  = v83;
    v90[6]  = v85;
    v90[7]  = v87;
    swift_unownedRetainStrong(v0);
    unint64_t v91 = sub_1002EA480();
    swift_release(v0);
    if ((((v91 & 0xFF00000000LL) != 0x300000000LL) & *(_DWORD *)(v7 - 248)) == 1)
    {
      *(void *)(v7 - 200)  = *(void *)(v7 - 96);
      uint64_t v92 = v74[2];
      *(_OWORD *)(v7 - 224)  = *(_OWORD *)v74;
      *(void *)(v7 - 208)  = v92;
      uint64_t v93 = __chkstk_darwin();
      uint64_t v94 = *(void *)(v7 - 264);
      uint64_t v111 = *(void *)(v7 - 256);
      uint64_t v112 = v94;
      swift_bridgeObjectRetain(v93);
      ((void (*)(uint64_t, int8x8_t (*)(uint64_t, unsigned __int8 *), void *, void, ValueMetadata *, void))Sequence.reduce<A>(into:_:))( v7 - 224,  sub_10029F3E8,  v110,  *(void *)(v7 - 240),  &type metadata for TimeBitmap,  *(void *)(v7 - 272));
      swift_bridgeObjectRelease(*(void *)(v7 - 200));
      swift_bridgeObjectRelease(*(void *)(v7 - 96));
      unint64_t v95 = *(void *)(v7 - 192);
      unint64_t v96 = *(void *)(v7 - 184);
      unint64_t v97 = *(void *)(v7 - 176);
      char v98 = *(_BYTE *)NANMapID.secondary.unsafeMutableAddressor();
      __int16 v99 = TimeBitmap.nanBitmap.getter(v95, v96, v97);
      uint64_t v101 = v100;
      uint64_t v103 = v102;
      v105  = v67[2];
      unint64_t v104 = v67[3];
      if (v105 >= v104 >> 1) {
        unint64_t v67 = sub_1002CA480((void *)(v104 > 1), v105 + 1, 1, v67);
      }
      v67[2]  = v105 + 1;
      uint64_t v106 = &v67[4 * v105];
      *((_BYTE *)v106 + 32)  = v98;
      *((_WORD *)v106 + 20)  = v99;
      v106[6]  = v101;
      v106[7]  = v103;
    }

    else
    {
      swift_bridgeObjectRelease(*(void *)(v7 - 96));
    }

    uint64_t v68 = *(void *)NANTimeUnit.zero.unsafeMutableAddressor();
  }

  swift_unownedRetainStrong(v0);
  sub_1002EACC8(v68, (uint64_t)v67);
  return swift_release(v0);
}

uint64_t sub_100289574@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v5 = *a2;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (id *)((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v11 = (char *)&v19 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14((char *)&v19 - v12, a1, v6);
  id v19 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  v14(v11, a1, v6);
  uint64_t v15 = swift_allocObject(&unk_1003F5748, 24LL, 7LL);
  swift_weakInit(v15 + 16, a2);
  BOOL v16 = (void *)swift_allocObject(&unk_1003F57E8, 40LL, 7LL);
  v16[2]  = *(void *)(v5 + 80);
  v16[3]  = *(void *)(v5 + 88);
  v16[4]  = v15;
  *uint64_t v9 = 100LL;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))( v9,  enum case for DispatchTimeInterval.milliseconds(_:),  v6);
  uint64_t v17 = type metadata accessor for P2PTimer(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t result = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v13,  v19,  (uint64_t)v11,  (uint64_t)v9,  (uint64_t)sub_10029FE48,  (uint64_t)v16);
  uint64_t *v20 = result;
  return result;
}

uint64_t sub_100289728()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  v144  = *(void *)(*v0 + 88);
  uint64_t v4 = *(void *)(v144 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v139 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v140  = (char *)v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  BOOL v138 = (char *)v120 - v6;
  v136  = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin();
  v137  = (char *)v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v134  = v4;
  uint64_t v145 = v3;
  v133  = swift_getAssociatedTypeWitness(0LL, v4, v3, &protocol requirements base descriptor for P2PControls);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin();
  v131  = (char *)v120 - v8;
  sub_100002274(&qword_10040D480);
  __chkstk_darwin();
  __int128 v135 = (char *)v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = type metadata accessor for DispatchTime(0LL);
  v142  = *(void *)(v147 - 8);
  __chkstk_darwin();
  uint64_t v143 = (char *)v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v146  = (char *)v120 - v11;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (void *)((char *)v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin();
  uint64_t v17 = (char *)v120 - v16;
  uint64_t v18 = *(uint64_t *)((char *)v0 + *(void *)(v2 + 280));
  swift_unownedRetainStrong(v18);
  BOOL v19 = sub_1002EA6D4();
  uint64_t result = swift_release(v18);
  if (v19) {
    return result;
  }
  swift_unownedRetainStrong(v18);
  sub_1002EAA14((uint64_t)v17);
  swift_release(v18);
  *uint64_t v15 = 3LL;
  unsigned int v21 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v22 = *(void (**)(void *, void, uint64_t))(v13 + 104);
  v22(v15, enum case for DispatchTimeInterval.seconds(_:), v12);
  BOOL v23 = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v17, (uint64_t)v15);
  uint64_t v24 = *(void (**)(void *, uint64_t))(v13 + 8);
  v24(v15, v12);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v17, v12);
  if (v23) {
    return result;
  }
  uint64_t v25 = type metadata accessor for P2PTimer(0LL);
  v129  = v21;
  uint64_t v26 = v1;
  uint64_t v27 = v146;
  uint64_t v128 = v25;
  variable initialization expression of AWDLPeer.lastUpdated();
  v130  = v26;
  uint64_t v28 = v26 + qword_10040DD58;
  __n128 v29 = swift_beginAccess(v28, v158, 0LL, 0LL);
  uint64_t v127 = v24;
  uint64_t v30 = v142;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v142 + 16);
  uint64_t v32 = v143;
  v121  = v28;
  uint64_t v33 = v147;
  __int128 v124 = v31;
  v31(v143, v28, v147, v29);
  DispatchTime.distance(to:)(v27);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v35 = v15;
  uint64_t v36 = v127;
  v34(v32, v33);
  uint64_t v125 = v34;
  v34(v27, v33);
  uint64_t v37 = v36;
  uint64_t v38 = v35;
  *uint64_t v35 = 2592000LL;
  v22(v35, v129, v12);
  LOBYTE(v32)  = static DispatchTimeInterval.< infix(_:_:)((uint64_t)v35, (uint64_t)v17);
  v37(v35, v12);
  uint64_t v39 = v17;
  uint64_t v123 = v12;
  v37(v17, v12);
  uint64_t v126 = v22;
  if ((v32 & 1) != 0)
  {
    uint64_t v40 = v130;
    uint64_t v41 = (uint64_t *)(v130 + qword_10040DD20);
    swift_beginAccess(v130 + qword_10040DD20, v153, 0LL, 0LL);
    uint64_t v42 = *v41;
    uint64_t v157 = v42;
    __chkstk_darwin();
    uint64_t v43 = v145;
    uint64_t v44 = v144;
    v120[-2]  = v145;
    v120[-1]  = v44;
    uint64_t v46 = _s17InitiatorInstanceCMa(255LL, v43, v44, v45);
    swift_bridgeObjectRetain(v42);
    WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v46);
    uint64_t v149 = v43;
    v150  = v46;
    v151  = v44;
    v152  = WitnessTable;
    uint64_t v48 = type metadata accessor for NANDiscoveryEngine.ServiceSession(255LL, (uint64_t)&v149);
    v122  = sub_10017B5C8();
    uint64_t v49 = type metadata accessor for Dictionary(0LL, &type metadata for NANPeerServiceIdentifier, v48, v122);
    uint64_t v50 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v49);
    LOBYTE(v48)  = Sequence.contains(where:)(sub_10029FE84, &v120[-4], v49, v50);
    uint64_t v51 = v43;
    uint64_t v37 = v127;
    swift_bridgeObjectRelease(v157);
    uint64_t v52 = (uint64_t)v39;
    if ((v48 & 1) != 0)
    {
      v122  = 0LL;
LABEL_8:
      swift_unownedRetainStrong(v18);
      uint64_t v61 = v132;
      char v62 = v131;
      uint64_t v63 = v133;
      (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))( v131,  v18 + *(void *)(*(void *)v18 + 112LL),  v133);
      swift_release(v18);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v134,  v51,  v63,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
      uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128))( v63,  AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
      int v66 = NANConstants.airplayServiceName.unsafeMutableAddressor();
      uint64_t v67 = *v66;
      uint64_t v68 = v66[1];
      uint64_t v69 = *(void (**)(uint64_t, uint64_t, void))(*(void *)v65 + 136LL);
      swift_bridgeObjectRetain(v68);
      uint64_t v70 = (uint64_t)v135;
      uint64_t v51 = v145;
      v69(v67, v68, 0LL);
      uint64_t v37 = v127;
      uint64_t v44 = v144;
      swift_release(v65);
      swift_bridgeObjectRelease(v68);
      sub_1000225EC(v70, &qword_10040D480);
      unint64_t v71 = v146;
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v72 = v121;
      __n128 v73 = swift_beginAccess(v121, &v149, 33LL, 0LL);
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v142 + 40))(v72, v71, v147, v73);
      swift_endAccess(&v149);
      goto LABEL_9;
    }

    uint64_t v53 = (uint64_t *)(v40 + qword_10040DD28);
    swift_beginAccess(v40 + qword_10040DD28, v148, 0LL, 0LL);
    v120[1]  = v120;
    uint64_t v54 = *v53;
    uint64_t v157 = v54;
    __chkstk_darwin();
    v120[-2]  = v51;
    v120[-1]  = v44;
    uint64_t v56 = _s17ResponderInstanceCMa(255LL, v51, v44, v55);
    swift_bridgeObjectRetain(v54);
    uint64_t v57 = swift_getWitnessTable(&unk_10035D5BC, v56);
    uint64_t v149 = v145;
    v150  = v56;
    v151  = v44;
    v152  = v57;
    uint64_t v58 = type metadata accessor for NANDiscoveryEngine.ServiceSession(255LL, (uint64_t)&v149);
    uint64_t v59 = type metadata accessor for Dictionary(0LL, &type metadata for NANPeerServiceIdentifier, v58, v122);
    uint64_t v60 = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v59);
    LOBYTE(v54)  = Sequence.contains(where:)(sub_10029FEA0, &v120[-4], v59, v60);
    v122  = 0LL;
    uint64_t v51 = v145;
    swift_bridgeObjectRelease(v157);
    if ((v54 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    v122  = 0LL;
    uint64_t v44 = v144;
    uint64_t v51 = v145;
    uint64_t v52 = (uint64_t)v39;
  }

uint64_t sub_10028A424(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) + qword_10040DA68;
  swift_beginAccess(v1, v8, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain(v2);
  NANConstants.airplayServiceName.unsafeMutableAddressor();
  Swift::String v3 = String.lowercased()();
  Swift::String v4 = String.lowercased()();
  if (v3._countAndFlagsBits == v4._countAndFlagsBits && v3._object == v4._object) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)( v3._countAndFlagsBits,  v3._object,  v4._countAndFlagsBits,  v4._object,  0LL);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3._object);
  swift_bridgeObjectRelease(v4._object);
  return v6 & 1;
}

uint64_t sub_10028A508(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) + qword_10040C330;
  swift_beginAccess(v1, v8, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 64);
  swift_bridgeObjectRetain(v2);
  NANConstants.airplayServiceName.unsafeMutableAddressor();
  Swift::String v3 = String.lowercased()();
  Swift::String v4 = String.lowercased()();
  if (v3._countAndFlagsBits == v4._countAndFlagsBits && v3._object == v4._object) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)( v3._countAndFlagsBits,  v3._object,  v4._countAndFlagsBits,  v4._object,  0LL);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3._object);
  swift_bridgeObjectRelease(v4._object);
  return v6 & 1;
}

uint64_t sub_10028A5EC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(*(void *)a5 + 88LL);
  uint64_t v12 = *(void *)(a7 + 8);
  uint64_t v22 = a3 + 16;
  v42[0]  = *(void *)(*(void *)a5 + 80LL);
  uint64_t v10 = v42[0];
  v42[1]  = a6;
  v42[2]  = v11;
  v42[3]  = v12;
  uint64_t v13 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v42);
  unint64_t v14 = sub_10017B5C8();
  uint64_t v15 = NANBitmap.Channel.operatingClass.getter(a1);
  v42[0]  = v15;
  uint64_t v38 = v10;
  uint64_t v39 = a6;
  uint64_t v40 = v11;
  uint64_t v41 = a7;
  uint64_t v16 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v13, v14);
  swift_bridgeObjectRetain(v15);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v16);
  Sequence.forEach(_:)(sub_10029FEBC, v37, v16, WitnessTable);
  swift_bridgeObjectRelease(v42[0]);
  v42[0]  = v15;
  uint64_t v32 = v10;
  uint64_t v33 = a6;
  uint64_t v34 = v11;
  uint64_t v35 = a7;
  char v36 = a2;
  swift_bridgeObjectRetain(v15);
  v42[0]  = Sequence.filter(_:)(sub_10029FEF4, v31, v16, WitnessTable);
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = v22;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v18 = type metadata accessor for Array(0LL, v13);
  uint64_t v19 = swift_getWitnessTable(&protocol conformance descriptor for [A], v18);
  Sequence.forEach(_:)(sub_10029FF40, v25, v18, v19);
  return swift_bridgeObjectRelease(v42[0]);
}

uint64_t sub_10028A78C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v90 = a4;
  uint64_t v107 = a3;
  uint64_t v98 = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v92 = (uint64_t)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v91 = (uint64_t)&v86 - v11;
  __chkstk_darwin();
  uint64_t v89 = (uint64_t)&v86 - v12;
  sub_100002274(qword_100410330);
  __chkstk_darwin();
  uint64_t v97 = (uint64_t)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v100 = (char *)&v86 - v14;
  __chkstk_darwin();
  uint64_t v101 = (char *)&v86 - v15;
  sub_100002274(&qword_10040E420);
  __chkstk_darwin();
  uint64_t v96 = (uint64_t)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v88 = (uint64_t)&v86 - v17;
  __chkstk_darwin();
  uint64_t v99 = (uint64_t)&v86 - v18;
  uint64_t v108 = sub_100002274((uint64_t *)&unk_10040CC50);
  uint64_t v106 = *(void *)(v108 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v22 = (uint64_t)&v86 - v21;
  v105  = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *a1;
  BOOL v104 = sub_1002A2024(a5, a6);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 24);
  uint64_t v102 = v26(a5, a6);
  uint64_t v27 = v26(a5, a6);
  char v103 = v24;
  sub_100057FE8(v107, (uint64_t)v24, type metadata accessor for NANAttribute.CustomDeviceInformation);
  uint64_t v94 = a5;
  uint64_t v95 = a6;
  uint64_t v93 = v25;
  unint64_t v28 = sub_1002A1F20(a5, a6);
  swift_beginAccess(a2, v109, 33LL, 0LL);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native(*a2);
  v110  = (void *)*a2;
  uint64_t v30 = v110;
  *a2  = 0x8000000000000000LL;
  uint64_t v31 = v27 & 0xFFFFFFFFFFFFLL;
  uint64_t v33 = sub_10001C15C(v27 & 0xFFFFFFFFFFFFLL);
  uint64_t v34 = v30[2];
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (!__OFADD__(v34, v35))
  {
    LOBYTE(v37)  = v32;
    if (v30[3] >= v36)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
        goto LABEL_6;
      }
      goto LABEL_43;
    }

    sub_100242E54(v36, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = v110;
    unint64_t v38 = sub_10001C15C(v31);
    if ((v37 & 1) == (v39 & 1))
    {
      uint64_t v33 = v38;
      goto LABEL_6;
    }

void sub_10028B2AC(unsigned __int8 *a1, void *a2)
{
  Swift::String v4 = (void *)*a2;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0LL);
  __chkstk_darwin();
  uint64_t v103 = (uint64_t)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v98 - v6;
  v110  = (os_log_t)sub_100002274((uint64_t *)&unk_10040E410);
  __chkstk_darwin();
  uint64_t v104 = (uint64_t)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v105  = (unsigned __int8 *)&v98 - v9;
  __chkstk_darwin();
  uint64_t v101 = (char *)&v98 - v10;
  __chkstk_darwin();
  uint64_t v109 = (char *)&v98 - v11;
  uint64_t v12 = v4[10];
  uint64_t v100 = (char *)v4[11];
  uint64_t v13 = *((void *)v100 + 1);
  uint64_t v99 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v13,  v12,  &protocol requirements base descriptor for P2PControls);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v98 - v16;
  type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = v4[35];
  uint64_t v102 = a2;
  uint64_t v21 = *(void *)((char *)a2 + v20);
  swift_unownedRetainStrong(v21);
  unint64_t v22 = *a1;
  uint64_t v23 = *(unsigned int *)(a1 + 2);
  uint64_t v106 = a1[1];
  uint64_t v107 = v22;
  sub_1002EA528(v22 | (v106 << 8) | (v23 << 16), (uint64_t)v19);
  swift_release(v21);
  LOBYTE(v4)  = sub_10024D9E0();
  sub_10005802C((uint64_t)v19, type metadata accessor for NANPeer);
  if ((v4 & 1) == 0)
  {
    uint64_t v99 = v23 >> 8;
    uint64_t v100 = v7;
    uint64_t v98 = WORD1(v23);
    unsigned __int8 v27 = BYTE3(v23);
    os_log_t v26 = v110;
    goto LABEL_5;
  }

  swift_unownedRetainStrong(v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))( v17,  v21 + *(void *)(*(void *)v21 + 96LL),  AssociatedTypeWitness);
  swift_release(v21);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v100,  v99,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  unsigned int v25 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  os_log_t v26 = v110;
  if (v25 <= 4)
  {
    uint64_t v107 = *a1;
    uint64_t v106 = a1[1];
    LOBYTE(v23)  = a1[2];
    uint64_t v99 = a1[3];
    uint64_t v100 = v7;
    uint64_t v98 = a1[4];
    unsigned __int8 v27 = a1[5];
LABEL_5:
    uint64_t v28 = *((int *)v26 + 12);
    uint64_t v29 = v109;
    uint64_t v30 = (uint64_t)&v109[v28];
    uint64_t v31 = sub_100002274((uint64_t *)&unk_10040CC50);
    uint64_t v32 = *(int *)(v31 + 48);
    uint64_t v33 = (uint64_t)&a1[v28];
    *uint64_t v29 = v107;
    v29[1]  = v106;
    v29[2]  = v23;
    v29[3]  = v99;
    v29[4]  = v98;
    v29[5]  = v27;
    sub_100057FE8(v33, v30, type metadata accessor for NANAttribute.CustomDeviceInformation);
    *(_BYTE *)(v30 + v32)  = *(_BYTE *)(v33 + v32);
    uint64_t v34 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
    BOOL v35 = v100;
    sub_100057FE8( v30 + *(int *)(v34 + 28),  (uint64_t)v100,  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_10005802C(v30, type metadata accessor for NANAttribute.CustomDeviceInformation);
    uint64_t v36 = (uint64_t)&v29[*((int *)v110 + 12)];
    uint64_t v37 = *(int *)(v31 + 48);
    __int16 v38 = *((_WORD *)a1 + 2);
    *(_DWORD *)uint64_t v29 = *(_DWORD *)a1;
    *((_WORD *)v29 + 2)  = v38;
    sub_100057FE8(v33, v36, type metadata accessor for NANAttribute.CustomDeviceInformation);
    *(_BYTE *)(v36 + v37)  = *(_BYTE *)(v33 + v32);
    LODWORD(v37)  = *(_DWORD *)(v36 + 4);
    sub_10005802C(v36, type metadata accessor for NANAttribute.CustomDeviceInformation);
    *BOOL v35 = v37;
    sub_100057FE8((uint64_t)v35, v103, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    NANActionFrame.init(customAttributes:)();
    unsigned __int8 v40 = v39;
    uint64_t v107 = v41;
    sub_10005802C((uint64_t)v35, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    goto LABEL_7;
  }

  uint64_t v42 = *((int *)v110 + 12);
  uint64_t v29 = v109;
  uint64_t v43 = (uint64_t)&v109[v42];
  sub_100057FE8((uint64_t)&a1[v42], (uint64_t)&v109[v42], type metadata accessor for NANAttribute.CustomDeviceInformation);
  unsigned __int8 v40 = NANActionFrame.init(customDeviceInformation:)(v43);
  uint64_t v107 = v44;
LABEL_7:
  uint64_t v45 = swift_unownedRetainStrong(v21);
  unint64_t v49 = sub_1002EA84C(v45, v46, v47, v48);
  swift_release(v21);
  uint64_t v50 = *((int *)v110 + 12);
  uint64_t v51 = (uint64_t)&v29[v50];
  uint64_t v106 = sub_100002274((uint64_t *)&unk_10040CC50);
  uint64_t v52 = *(int *)(v106 + 48);
  uint64_t v53 = (uint64_t)&a1[v50];
  __int16 v54 = *((_WORD *)a1 + 2);
  *(_DWORD *)uint64_t v29 = *(_DWORD *)a1;
  *((_WORD *)v29 + 2)  = v54;
  sub_100057FE8(v53, v51, type metadata accessor for NANAttribute.CustomDeviceInformation);
  int v55 = *(unsigned __int8 *)(v53 + v52);
  uint64_t v103 = v52;
  *(_BYTE *)(v51 + v52)  = v55;
  sub_10005802C(v51, type metadata accessor for NANAttribute.CustomDeviceInformation);
  uint64_t v56 = *a1;
  uint64_t v57 = a1[1];
  uint64_t v58 = a1[2];
  uint64_t v59 = a1[3];
  uint64_t v60 = a1[4];
  uint64_t v61 = a1[5];
  uint64_t v99 = v57;
  uint64_t v100 = (char *)v56;
  uint64_t v98 = v58;
  if (v55) {
    int v62 = 4;
  }
  else {
    int v62 = 0;
  }
  unint64_t v64 = v107;
  uint64_t v63 = v108;
  sub_1002CB9AC(v62, v40, v107, 0LL, v56 | (v57 << 8) | (v58 << 16) | (v59 << 24) | (v60 << 32) | (v61 << 40), 0);
  if (v63)
  {
    swift_release(v49);
    swift_bridgeObjectRelease(v64);
    uint64_t v65 = v101;
    uint64_t v108 = (uint64_t)v102 + qword_100410AF8;
    uint64_t v66 = (uint64_t)&v101[*((int *)v110 + 12)];
    uint64_t v67 = *(int *)(v106 + 48);
    *uint64_t v101 = (_BYTE)v100;
    v65[1]  = v99;
    v65[2]  = v98;
    v65[3]  = v59;
    v65[4]  = v60;
    v65[5]  = v61;
    sub_100057FE8(v53, v66, type metadata accessor for NANAttribute.CustomDeviceInformation);
    *(_BYTE *)(v66 + v67)  = *(_BYTE *)(v53 + v103);
    uint64_t v68 = v105;
    sub_1000226B0((uint64_t)v65, (uint64_t)v105, (uint64_t *)&unk_10040E410);
    uint64_t v69 = v104;
    sub_1000586C0((uint64_t)v65, v104, (uint64_t *)&unk_10040E410);
    swift_errorRetain(v63);
    uint64_t v70 = swift_errorRetain(v63);
    char v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.error.getter();
    int v73 = v72;
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v74 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      uint64_t v107 = swift_slowAlloc(8LL, -1LL);
      uint64_t v108 = swift_slowAlloc(32LL, -1LL);
      uint64_t v113 = v108;
      _DWORD *v74 = 136315394;
      uint64_t v101 = v74;
      uint64_t v102 = v74 + 1;
      unint64_t v75 = v109;
      uint64_t v76 = *((int *)v110 + 12);
      uint64_t v77 = (uint64_t)&v109[v76];
      uint64_t v78 = *(int *)(v106 + 48);
      uint64_t v79 = (uint64_t)&v68[v76];
      v80  = *v68;
      v110  = v71;
      uint64_t v81 = v68[1];
      uint64_t v103 = v63;
      uint64_t v82 = v68[2];
      LODWORD(v106)  = v73;
      uint64_t v83 = v68[3];
      uint64_t v84 = v68;
      uint64_t v85 = v68[4];
      uint64_t v86 = v84[5];
      *uint64_t v109 = v80;
      v75[1]  = v81;
      v75[2]  = v82;
      v75[3]  = v83;
      v75[4]  = v85;
      v75[5]  = v86;
      sub_100057FE8(v79, v77, type metadata accessor for NANAttribute.CustomDeviceInformation);
      *(_BYTE *)(v77 + v78)  = *(_BYTE *)(v79 + v78);
      sub_10005802C(v77, type metadata accessor for NANAttribute.CustomDeviceInformation);
      uint64_t v87 = WiFiAddress.description.getter(v80 | (v81 << 8) | (v82 << 16) | (v83 << 24) | (v85 << 32) | (v86 << 40));
      unint64_t v89 = v88;
      uint64_t v90 = sub_10000235C(v87, v88, &v113);
      uint64_t v91 = v101;
      uint64_t v111 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      swift_bridgeObjectRelease(v89);
      sub_1000225EC(v104, (uint64_t *)&unk_10040E410);
      sub_1000225EC((uint64_t)v105, (uint64_t *)&unk_10040E410);
      *((_WORD *)v91 + 6)  = 2112;
      uint64_t v92 = v103;
      swift_errorRetain(v103);
      uint64_t v93 = _swift_stdlib_bridgeErrorToNSError(v92);
      uint64_t v111 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      unint64_t v94 = v107;
      *(void *)uint64_t v107 = v93;
      swift_errorRelease(v92);
      swift_errorRelease(v92);
      os_log_t v95 = v110;
      _os_log_impl( (void *)&_mh_execute_header,  v110,  (os_log_type_t)v106,  "Failed to send the keep alive frame to %s because %@",  v91,  0x16u);
      uint64_t v96 = sub_100002274(&qword_100404DE0);
      swift_arrayDestroy(v94, 1LL, v96);
      swift_slowDealloc(v94, -1LL, -1LL);
      uint64_t v97 = v108;
      swift_arrayDestroy(v108, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v97, -1LL, -1LL);
      swift_slowDealloc(v91, -1LL, -1LL);
      swift_errorRelease(v92);
    }

    else
    {
      swift_errorRelease(v63);

      sub_1000225EC(v69, (uint64_t *)&unk_10040E410);
      sub_1000225EC((uint64_t)v68, (uint64_t *)&unk_10040E410);
      swift_errorRelease(v63);
      swift_errorRelease(v63);
    }
  }

  else
  {
    swift_release(v49);
    swift_bridgeObjectRelease(v64);
  }

BOOL sub_10028BB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_100002274(&qword_10040CED0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NANPeer(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v14 = sub_1002A3DC8(a4, a5);
  if (v14)
  {
    if (v14 != 1)
    {
      swift_bridgeObjectRelease(0xEA00000000007963LL);
      goto LABEL_8;
    }

    uint64_t v15 = 0x656D69746C616572LL;
  }

  else
  {
    uint64_t v15 = 0x6576697470616461LL;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)( v15,  0xE800000000000000LL,  0x6E6574614C776F6CLL,  0xEA00000000007963LL,  0LL);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  BOOL v17 = 0LL;
  if ((v16 & 1) == 0) {
    return v17;
  }
LABEL_8:
  uint64_t v18 = *(void *)(a3 + *(void *)(*(void *)a3 + 280LL));
  swift_unownedRetainStrong(v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  sub_1002EA528(v19 & 0xFFFFFFFFFFFFLL, (uint64_t)v13);
  swift_release(v18);
  sub_1000226B0((uint64_t)&v13[*(int *)(v11 + 72)], (uint64_t)v10, &qword_10040CED0);
  uint64_t v20 = type metadata accessor for NANAttribute.CustomDeviceInformation(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48LL))(v10, 1LL, v20) == 1)
  {
    sub_1000225EC((uint64_t)v10, &qword_10040CED0);
  }

  else
  {
    int v21 = *((_DWORD *)v10 + 1);
    sub_10005802C((uint64_t)v10, type metadata accessor for NANAttribute.CustomDeviceInformation);
    if ((*(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor() & ~v21) == 0)
    {
LABEL_13:
      BOOL v17 = 1LL;
      goto LABEL_14;
    }
  }

  uint64_t v22 = *(void *)&v13[*(int *)(v11 + 64) + 8];
  if (!v22) {
    goto LABEL_13;
  }
  BOOL v17 = *(void *)(v22 + 16) < 2uLL;
LABEL_14:
  sub_10005802C((uint64_t)v13, type metadata accessor for NANPeer);
  return v17;
}

uint64_t sub_10028BD68(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + *(void *)(*(void *)a1 + 280LL));
  swift_unownedRetainStrong(v3);
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int8 *)a2 + 4);
  uint64_t v6 = *((unsigned __int8 *)a2 + 5);
  uint64_t v7 = *((unsigned __int8 *)a2 + 6);
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = v4 | (v5 << 32) | (v6 << 40) | (v7 << 48);
  swift_bridgeObjectRetain(v8);
  sub_1002ECA28(v9, v8);
  return swift_release(v3);
}

void sub_10028BDD8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10028BE14()
{
  uint64_t v2 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
  RadioSchedule.set(_:to:with:)(*v2, v2[1], v2[2], 0LL, 2LL, 3, v1, v0);
  char v3 = *(_BYTE *)TimeBitmap.Slot.OF.unsafeMutableAddressor();
  uint64_t v4 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
  uint64_t v5 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v3, *v4, *v4, *v4);
  RadioSchedule.set(_:to:with:)(v5, v6, v7, 0LL, 2LL, 3, v1, v0);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v0 + 56))(v1, v0) & 1) != 0)
  {
    uint64_t v8 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
    char v9 = *v4;
    char v10 = *v8;
    char v11 = v10;
  }

  else
  {
    char v12 = *v4;
    uint64_t v13 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
    char v9 = *v4;
    char v11 = *v13;
    char v10 = v12;
  }

  uint64_t v14 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v10, v11, v9, v9);
  return RadioSchedule.set(_:to:with:)(v14, v15, v16, 1LL, 2LL, 3, v1, v0);
}

void sub_10028BF64(uint64_t a1)
{
}

uint64_t sub_10028BF74(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  sub_100002274(&qword_10040E428);
  __chkstk_darwin();
  uint64_t v5 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin();
  uint64_t v7 = &v42[-v6];
  __chkstk_darwin();
  char v9 = &v42[-v8];
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v14 = &v42[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (*(unsigned __int8 *)(v2 + 16) != a1)
  {
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v15 = v2 + qword_10040DE38;
    __n128 v16 = swift_beginAccess(v2 + qword_10040DE38, v43, 33LL, 0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v11 + 40))(v15, v14, v10, v16);
    swift_endAccess(v43);
    sub_10028C28C();
    uint64_t v17 = *(void *)(v2 + qword_10040DE48);
    uint64_t v18 = swift_unownedRetainStrong(v17);
    uint64_t v22 = sub_1002E8D68(v18, v19, v20, v21);
    swift_release(v17);
    sub_100288A80();
    swift_release(v22);
    LODWORD(v22)  = *(unsigned __int8 *)(v2 + 16);
    uint64_t v23 = swift_unownedRetainStrong(v17);
    uint64_t v27 = sub_1002E8D68(v23, v24, v25, v26);
    swift_release(v17);
    if ((_DWORD)v22)
    {
      uint64_t v28 = v27 + *(void *)(*(void *)v27 + 232LL);
      swift_beginAccess(v28, v43, 0LL, 0LL);
      sub_1000226B0(v28, (uint64_t)v7, &qword_10040E428);
      swift_release(v27);
      uint64_t v29 = sub_100002274(&qword_10040DE10);
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48);
      int v32 = v31(v7, 1LL, v29);
      sub_1000225EC((uint64_t)v7, &qword_10040E428);
      uint64_t v33 = swift_unownedRetainStrong(v17);
      uint64_t v27 = sub_1002E8D68(v33, v34, v35, v36);
      uint64_t v37 = swift_release(v17);
      char v38 = *(_BYTE *)(v2 + 16);
      if (v32 != 1)
      {
        uint64_t v41 = v27 + *(void *)(*(void *)v27 + 232LL);
        swift_beginAccess(v41, v42, 0LL, 0LL);
        sub_1000226B0(v41, (uint64_t)v5, &qword_10040E428);
        uint64_t result = v31(v5, 1LL, v29);
        if ((_DWORD)result == 1)
        {
          __break(1u);
          return result;
        }

        v5[*(int *)(v29 + 36)]  = v38;
        uint64_t v40 = (uint64_t)v5;
        goto LABEL_9;
      }

      UUID.init()(v37);
      v9[*(int *)(v29 + 36)]  = v38;
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v30 + 56))(v9, 0LL, 1LL, v29);
    }

    else
    {
      uint64_t v39 = sub_100002274(&qword_10040DE10);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v9, 1LL, 1LL, v39);
    }

    uint64_t v40 = (uint64_t)v9;
LABEL_9:
    sub_100280D94(v40);
    return swift_release(v27);
  }

  return result;
}

void sub_10028C28C()
{
  __asm { BR              X10 }

uint64_t sub_10028C33C()
{
  uint64_t v1 = *(void *)(v0 + qword_10040DE40);
  *(void *)(v0 + qword_10040DE40)  = 0LL;
  return swift_release(v1);
}

uint64_t sub_10028C36C()
{
  *uint64_t v5 = 8LL;
  uint64_t v7 = *(void (**)(void *, void, uint64_t))(v0 + 104);
  v7(v5, enum case for DispatchTimeInterval.seconds(_:), v4);
  uint64_t v8 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v9 = swift_allocObject(&unk_1003F5838, 24LL, 7LL);
  swift_weakInit(v9 + 16, v1);
  uint64_t v10 = (void *)swift_allocObject(&unk_1003F5860, 40LL, 7LL);
  v10[2]  = *(void *)(v6 + 80);
  v10[3]  = *(void *)(v6 + 88);
  v10[4]  = v9;
  v7((void *)v3, enum case for DispatchTimeInterval.never(_:), v4);
  *uint64_t v2 = 100LL;
  v7(v2, enum case for DispatchTimeInterval.milliseconds(_:), v4);
  uint64_t v11 = type metadata accessor for P2PTimer(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)( (uint64_t)v5,  v8,  v3,  (uint64_t)v2,  (uint64_t)sub_1002A00FC,  (uint64_t)v10);
  uint64_t v13 = *(void *)(v1 + qword_10040DE40);
  *(void *)(v1 + qword_10040DE40)  = v12;
  return swift_release(v13);
}

uint64_t sub_10028C4AC()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin();
  uint64_t v6 = &v12[-v5 - 8];
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v7 = v0 + qword_10040DE38;
  __n128 v8 = swift_beginAccess(v7, v12, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16))(v4, v7, v1, v8);
  DispatchTime.distance(to:)(v6);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v4, v1);
  return ((uint64_t (*)(char *, uint64_t))v9)(v6, v1);
}

uint64_t sub_10028C5B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    a4();
    return swift_release(v7);
  }

  return result;
}

uint64_t sub_10028C60C()
{
  uint64_t v1 = v0 + qword_10040DE38;
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + qword_10040DE40));
  swift_unownedRelease(*(void *)(v0 + qword_10040DE48));
  return v0;
}

uint64_t sub_10028C670()
{
  uint64_t v0 = sub_10028C60C();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NANDiscoveryEngine.StateMachine( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDiscoveryEngine.StateMachine);
}

void sub_10028C69C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0]  = *(void *)(v2 - 8) + 64LL;
    v4[1]  = &unk_10035EC58;
    void v4[2] = &unk_10035EB98;
    swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 96);
  }

Swift::UInt64 sub_10028C72C(uint64_t a1, __int16 a2)
{
  unint64_t v3 = (Swift::UInt64 *)TimeBitmap.zero.unsafeMutableAddressor();
  Swift::UInt64 v4 = *v3;
  Swift::UInt64 v5 = v3[1];
  char v6 = *((_BYTE *)v3 + 16);
  char v7 = *((_BYTE *)v3 + 17);
  char v8 = *((_BYTE *)v3 + 18);
  char v9 = *((_BYTE *)v3 + 19);
  char v10 = *((_BYTE *)v3 + 20);
  char v11 = *((_BYTE *)v3 + 21);
  char v12 = *((_BYTE *)v3 + 22);
  char v13 = *((_BYTE *)v3 + 23);
  Swift::UInt64 v21 = *v3;
  Swift::UInt64 v22 = v5;
  LOBYTE(v23)  = v6;
  BYTE1(v23)  = v7;
  BYTE2(v23)  = v8;
  BYTE3(v23)  = v9;
  BYTE4(v23)  = v10;
  BYTE5(v23)  = v11;
  BYTE6(v23)  = v12;
  HIBYTE(v23)  = v13;
  if ((a2 & 0x100) != 0) {
    __asm { BR              X10 }
  }

  if (v4 != v5)
  {
    rawValue  = v4;
    do
    {
      v15.rawValue  = TimeBitmap.SlotsView.index(after:)((CoreP2P::NANTimeUnit)rawValue).rawValue;
      uint64_t v20 = v23;
      unint64_t v16 = NANIntervalDuration.timeUnits.getter(0);
      if (!v16)
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x10028CA18LL);
      }

      if (((rawValue / v16) & 0x8000000000000000LL) != 0) {
        goto LABEL_13;
      }
      LOBYTE(v20)  = *((_BYTE *)&v20 + ((rawValue / v16) >> 3));
      TimeBitmap.Slot.setBit(_:)(a2);
      char v17 = v20;
      unint64_t v18 = NANIntervalDuration.timeUnits.getter(0);
      if (!v18) {
        goto LABEL_14;
      }
      if (((rawValue / v18) & 0x8000000000000000LL) != 0) {
        goto LABEL_15;
      }
      *((_BYTE *)&v23 + ((rawValue / v18) >> 3))  = v17;
      rawValue  = v15.rawValue;
    }

    while (v15.rawValue != v5);
  }

  return v21;
}

uint64_t sub_10028CA2C(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)TimeBitmap.zero.unsafeMutableAddressor();
  uint64_t v7 = result;
  if (a1 - 3 >= 2)
  {
    TimeBitmap.subscript.setter(1LL, 0xAuLL);
    TimeBitmap.subscript.setter(1LL, 0xEuLL);
    TimeBitmap.subscript.setter(1LL, 0x2AuLL);
    TimeBitmap.subscript.setter(1LL, 0x2EuLL);
    return v7;
  }

  return result;
}

void sub_10028CB94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  char v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = sub_100002274(&qword_10040E558);
  __chkstk_darwin();
  char v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = v2 + qword_10040DED0;
  swift_beginAccess(v2 + qword_10040DED0, v20, 0LL, 0LL);
  uint64_t v14 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1000226B0(v13, (uint64_t)v12, &qword_100405D40);
  sub_1000226B0(a1, v14, &qword_100405D40);
  CoreP2P::NANTimeUnit v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v15((uint64_t)v12, 1LL, v4) == 1)
  {
    if (v15(v14, 1LL, v4) == 1)
    {
      sub_1000225EC((uint64_t)v12, &qword_100405D40);
      return;
    }
  }

  else
  {
    sub_1000226B0((uint64_t)v12, (uint64_t)v9, &qword_100405D40);
    if (v15(v14, 1LL, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v14, v4);
      uint64_t v16 = sub_10000AF70( (unint64_t *)&unk_10040E560,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime,  (uint64_t)&protocol conformance descriptor for DispatchTime);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v4, v16);
      unint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v7, v4);
      v18(v9, v4);
      sub_1000225EC((uint64_t)v12, &qword_100405D40);
      if ((v17 & 1) != 0) {
        return;
      }
      goto LABEL_8;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }

  sub_1000225EC((uint64_t)v12, &qword_10040E558);
LABEL_8:
  sub_100288A80();
}

uint64_t sub_10028CDEC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v34 = a6;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  char v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for DispatchTime(0LL);
  uint64_t v32 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(a5 + 8);
  v45[0]  = a2;
  v45[1]  = a3;
  v45[2]  = a4;
  v45[3]  = v15;
  uint64_t v16 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v45);
  unint64_t v17 = sub_10017B5C8();
  uint64_t v18 = NANBitmap.Channel.operatingClass.getter(a1);
  v45[0]  = v18;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v19 = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v16, v17);
  swift_bridgeObjectRetain(v18);
  WitnessTable  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v19);
  v45[0]  = Sequence.filter(_:)(sub_10029F494, v40, v19, WitnessTable);
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v21 = type metadata accessor for Array(0LL, v16);
  uint64_t v22 = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  Sequence.min(by:)(v46, sub_10029F4B4, v35, v21, v22);
  swift_bridgeObjectRelease(v45[0]);
  uint64_t v23 = v46[0];
  if (v46[0])
  {
    uint64_t v24 = v46[1];
    type metadata accessor for P2PTimer(0LL);
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
    uint64_t v25 = v32;
    uint64_t v26 = v33;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v12, 1LL, v33);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }

    else
    {
      DispatchTime.distance(to:)(v14);
      swift_bridgeObjectRelease(v24);
      swift_unknownObjectRelease(v23);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v25 + 8);
      v28(v14, v26);
      return ((uint64_t (*)(char *, uint64_t))v28)(v12, v26);
    }
  }

  else
  {
    uint64_t v29 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v30 = type metadata accessor for DispatchTimeInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104LL))(v34, v29, v30);
  }

  return result;
}

BOOL sub_10028D080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  sub_1000225EC((uint64_t)v8, &qword_100405D40);
  return v10 != 1 && (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a3, a5) == 1;
}

uint64_t sub_10028D174(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a4;
  sub_100002274(&qword_100405D40);
  __chkstk_darwin();
  uint64_t v37 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  int v10 = (char *)&v30 - v9;
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v35 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v32 = *(void *)(v16 - 8);
  uint64_t v33 = v16;
  __chkstk_darwin();
  uint64_t v31 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v38 = (uint64_t)&v30 - v18;
  uint64_t v34 = *a2;
  type metadata accessor for P2PTimer(0LL);
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  uint64_t v36 = a6;
  v19(v39, a6);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t result = v20(v10, 1LL, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    DispatchTime.distance(to:)(v15);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
    v22(v15, v11);
    v22(v10, v11);
    uint64_t v23 = v35;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v24 = v37;
    v19(v39, v36);
    uint64_t result = v20(v24, 1LL, v11);
    if ((_DWORD)result != 1)
    {
      uint64_t v25 = (uint64_t)v31;
      DispatchTime.distance(to:)(v23);
      v22(v23, v11);
      v22(v24, v11);
      uint64_t v26 = v38;
      BOOL v27 = static DispatchTimeInterval.< infix(_:_:)(v38, v25);
      uint64_t v28 = v33;
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v29(v25, v33);
      v29(v26, v28);
      return v27;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10028D408()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for NANDiscoveryEngine.BeaconScheduler( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDiscoveryEngine.BeaconScheduler);
}

uint64_t sub_10028D45C(uint64_t a1)
{
  v2[0]  = "\b";
  v2[1]  = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2]  = &unk_10035ECD8;
  v2[3]  = &unk_10035EB98;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 96);
}

BOOL sub_10028D4BC(char *a1, char *a2)
{
  return static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10028D4D0()
{
  return AWDLPeer.Reachability.hashValue.getter(*v0);
}

void sub_10028D4DC(uint64_t a1)
{
}

Swift::Int sub_10028D4E8(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10028D52C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t result = sub_10025403C(*(void *)(v1 + 24), a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(v1 + 40);
    uint64_t v5 = swift_unownedRetainStrong(v4);
    swift_unownedRetainStrong(v5);
    uint64_t v6 = WiFiInterface.capabilities.getter();
    swift_release(v4);
    uint64_t v7 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    unint64_t v8 = sub_100270384();
    swift_bridgeObjectRetain_n(v7, 2LL);
    ExtendableOptionSet.formIntersection(_:)( (uint64_t (*)(_BYTE *, void))&v12,  &type metadata for WiFiDriverCapabilities.Kind,  v8);
    uint64_t v9 = v13;
    LOBYTE(v8)  = sub_10007990C(v13, v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain(v10);
    uint64_t v11 = static Array<A>.potentialAvailability(using:supportsSimultaneousDualBand:for:)(0, v8 & 1, v10);
    swift_bridgeObjectRelease(v10);
    sub_1002EAD2C((uint64_t)v11);
    return swift_release(v4);
  }

  return result;
}

double sub_10028D634(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)(v1 + 24)  = a1;
  sub_10028D52C(v2);
  *(void *)&double result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t sub_10028D660()
{
  if (!*(_BYTE *)(v0 + 32))
  {
    unint64_t v2 = sub_100245F98((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v3 = *(void *)(v0 + 24);
    *(void *)(v0 + 24)  = v2;
    sub_10028D52C(v3);
    swift_bridgeObjectRelease(v3);
  }

  uint64_t v4 = *(void *)(v0 + 40);
  swift_unownedRetainStrong(v4);
  uint64_t v5 = swift_bridgeObjectRetain(*(void *)(v0 + 24));
  sub_1002EA7E8(v5);
  return swift_release(v4);
}

uint64_t sub_10028D6DC(char a1)
{
  *(_BYTE *)(v1 + 32)  = a1;
  return sub_10028D660();
}

uint64_t sub_10028D6E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002274(&qword_10040D440);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100002274(&qword_10040DA58);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16)  = 0LL;
  uint64_t v10 = (uint64_t *)(v1 + 16);
  *(void *)(v1 + 24)  = &_swiftEmptyDictionarySingleton;
  *(_BYTE *)(v1 + 32)  = 0;
  *(void *)(v1 + 40)  = a1;
  swift_unownedRetainStrong(a1);
  uint64_t v11 = *(void *)(a1 + *(void *)(*(void *)a1 + 688LL));
  swift_unownedRetainStrong(v11);
  uint64_t v12 = swift_unownedRetain(a1);
  swift_release(v12);
  sub_1002CF42C((uint64_t)v9);
  swift_release(v11);
  uint64_t v13 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v14 = swift_allocObject(&unk_1003F88A8, 24LL, 7LL);
  swift_weakInit(v14 + 16, v2);
  uint64_t v15 = swift_allocObject(&unk_1003F88D0, 32LL, 7LL);
  *(void *)(v15 + 16)  = v14;
  *(void *)(v15 + 24)  = a1;
  swift_beginAccess(v10, v32, 33LL, 0LL);
  id v16 = v13;
  swift_retain();
  ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)( v16,  v10,  (uint64_t)sub_1002A1880,  v15,  v7,  (uint64_t)&v33);
  swift_endAccess(v32);

  swift_release(v15);
  sub_1000225EC((uint64_t)v9, &qword_10040DA58);
  if (v34)
  {
    *(void *)uint64_t v6 = NANAttribute.ExtendedWLANInfrastructure.init(network:)( v33,  v34,  v35 & 0xFFFFFFFFFFFFLL,  v36 | ((unint64_t)v37 << 32));
    v6[8]  = v17;
    void v6[9] = v18;
    v6[10]  = v19;
    v6[11]  = v20;
    v6[12]  = v21 & 1;
    v6[13]  = v22;
    v6[14]  = v23;
    v6[15]  = v24;
    *((_WORD *)v6 + 8)  = v25;
    *((_WORD *)v6 + 9)  = v26;
    uint64_t v27 = type metadata accessor for NANAttribute(0LL);
    swift_storeEnumTagMultiPayload(v6, v27, 26LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v6, 0LL, 1LL, v27);
    uint64_t v28 = a1 + *(void *)(*(void *)a1 + 592LL);
    swift_beginAccess(v28, &v33, 33LL, 0LL);
    uint64_t v29 = sub_100002274(qword_10040E570);
    v32[0]  = *(void *)(v28 + *(int *)(v29 + 40));
    swift_bridgeObjectRetain(v32[0]);
    sub_1002E8DEC((uint64_t)v6, 30);
    uint64_t v31 = v32[0];
    MutableDriverProperty.wrappedValue.setter((uint64_t)&v31, v29);
    swift_endAccess(&v33);
  }

  swift_release(a1);
  return v2;
}

uint64_t sub_10028DA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100002274(&qword_10040D440);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(unsigned __int16 *)(a2 + 28);
  a3 += 16LL;
  uint64_t v14 = *(unsigned int *)(a2 + 24);
  swift_beginAccess(a3, v35, 0LL, 0LL);
  Strong  = swift_weakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v16 = Strong;
    sub_10028DE68();
    swift_release(v16);
  }

  if (v11)
  {
    swift_bridgeObjectRetain(v11);
    *(void *)uint64_t v9 = NANAttribute.ExtendedWLANInfrastructure.init(network:)( v10,  v11,  v12 & 0xFFFFFFFFFFFFLL,  (v14 | (v13 << 32)) & 0xFFFFFFFFFFFFLL);
    v9[8]  = v17;
    v9[9]  = v18;
    v9[10]  = v19;
    v9[11]  = v20;
    v9[12]  = v21 & 1;
    v9[13]  = v22;
    v9[14]  = v23;
    v9[15]  = v24;
    *((_WORD *)v9 + 8)  = v25;
    *((_WORD *)v9 + 9)  = v26;
    uint64_t v27 = type metadata accessor for NANAttribute(0LL);
    swift_storeEnumTagMultiPayload(v9, v27, 26LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v9, 0LL, 1LL, v27);
  }

  else
  {
    uint64_t v28 = type metadata accessor for NANAttribute(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v9, 1LL, 1LL, v28);
  }

  uint64_t v29 = a4 + *(void *)(*(void *)a4 + 592LL);
  swift_beginAccess(v29, v34, 33LL, 0LL);
  uint64_t v30 = sub_100002274(qword_10040E570);
  uint64_t v33 = *(void *)(v29 + *(int *)(v30 + 40));
  swift_bridgeObjectRetain(v33);
  sub_1002E8DEC((uint64_t)v9, 30);
  uint64_t v32 = v33;
  MutableDriverProperty.wrappedValue.setter((uint64_t)&v32, v30);
  return swift_endAccess(v34);
}

uint64_t *sub_10028DC40()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v2 + 8),  v3,  &protocol requirements base descriptor for P2PControls);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = &v31[-v6 - 8];
  uint64_t v8 = *(void *)(v1 + 40);
  swift_unownedRetainStrong(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( v7,  v8 + *(void *)(*(void *)v8 + 96LL),  AssociatedTypeWitness);
  swift_release(v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v2,  v3,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANController,  &associated conformance descriptor for NANController.P2PControls.Driver: NANWiFiDriver);
  LOBYTE((*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v2) = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 368))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  if ((v2 & 1) != 0) {
    goto LABEL_2;
  }
  uint64_t v12 = swift_unownedRetainStrong(v8);
  uint64_t v16 = sub_1002E8D68(v12, v13, v14, v15);
  swift_release(v8);
  uint64_t v17 = sub_1002883DC();
  swift_release(v16);
  if (v17 <= 0)
  {
    uint64_t v18 = swift_unownedRetainStrong(v8);
    uint64_t v22 = sub_1002E8D68(v18, v19, v20, v21);
    swift_release(v8);
    uint64_t v23 = v22 + *(void *)(*(void *)v22 + 248LL);
    swift_beginAccess(v23, v31, 0LL, 0LL);
    LODWORD(v23)  = *(unsigned __int8 *)(v23 + *(int *)(sub_100002274(&qword_10040E3C0) + 36));
    swift_release(v22);
    if ((_DWORD)v23 != 4)
    {
LABEL_2:
      char v10 = 0;
LABEL_3:
      *(_BYTE *)(v1 + 32)  = v10;
      return (uint64_t *)sub_10028D660();
    }
  }

  uint64_t v24 = swift_unownedRetainStrong(v8);
  uint64_t v28 = sub_1002E8D68(v24, v25, v26, v27);
  swift_release(v8);
  uint64_t v29 = *(void *)(v28 + qword_10040DD38);
  swift_release(v28);
  if (!v29)
  {
    char v10 = 1;
    goto LABEL_3;
  }

  if (v29 == 4)
  {
    char v10 = 2;
    goto LABEL_3;
  }

  double result = (uint64_t *)NANDiscoveryWindowIndex.last.unsafeMutableAddressor();
  if (*result < 8)
  {
    __break(1u);
    return result;
  }

  if (v29 >= 8 && *result >= v29)
  {
    char v10 = 3;
    goto LABEL_3;
  }

  return result;
}

uint64_t sub_10028DE68()
{
  uint64_t v1 = type metadata accessor for NANPeer(0LL);
  uint64_t result = __chkstk_darwin(v1);
  uint64_t v96 = (uint64_t)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(v0 + 32))
  {
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v95 = v0;
    swift_unownedRetainStrong(v4);
    BOOL v5 = sub_1002EA6D4();
    uint64_t result = swift_release(v4);
    if (!v5)
    {
      uint64_t v93 = v1;
      swift_unownedRetainStrong(v4);
      uint64_t v6 = 0LL;
      sub_1002E8C08();
      swift_release(v4);
      swift_unownedRetainStrong(v4);
      uint64_t v7 = *(void *)(v4 + *(void *)(*(void *)v4 + 688LL));
      swift_unownedRetainStrong(v7);
      uint64_t v92 = v4;
      swift_release(v4);
      sub_1002CF2F0();
      uint64_t v9 = v8;
      int64_t v11 = v10;
      swift_release(v7);
      if (v9)
      {
        swift_bridgeObjectRelease(v9);
        uint64_t v12 = sub_1002CA58C(0LL, 1LL, 1, _swiftEmptyArrayStorage);
        uint64_t v7 = v12[2];
        unint64_t v13 = v12[3];
        uint64_t v14 = (void *)(v7 + 1);
        if (v7 >= v13 >> 1) {
          goto LABEL_113;
        }
        goto LABEL_6;
      }

      uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_8:
      uint64_t v16 = v92;
      uint64_t v17 = swift_unownedRetainStrong(v92);
      uint64_t v14 = (void *)sub_1002E8D68(v17);
      swift_release(v16);
      int64_t v11 = sub_10028805C();
      swift_release(v14);
      uint64_t v18 = *(void *)(v11 + 16);
      if (v18)
      {
        unint64_t v19 = 0LL;
        int64_t v88 = v11 + 32;
        uint64_t v20 = v95;
        uint64_t v100 = v6;
        int64_t v87 = v11;
        uint64_t v86 = v18;
        do
        {
          unint64_t v13 = *(void *)(v11 + 16);
          if (v19 >= v13)
          {
LABEL_111:
            __break(1u);
            goto LABEL_112;
          }

          if (*(_BYTE *)(v20 + 32) != 1)
          {
            unint64_t v94 = v19;
            uint64_t v21 = (unsigned __int16 *)(v88 + 6 * v19);
            uint64_t v22 = *(unsigned int *)(v21 + 1);
            uint64_t v23 = *v21;
            uint64_t v24 = v92;
            swift_unownedRetainStrong(v92);
            uint64_t v25 = v23 | (v22 << 16);
            uint64_t v26 = v96;
            sub_1002EA528(v25, v96);
            swift_release(v24);
            uint64_t v27 = (uint64_t *)(v26 + *(int *)(v93 + 64));
            uint64_t v14 = (void *)v27[1];
            uint64_t v28 = v27[2];
            uint64_t v7 = v27[3];
            uint64_t v29 = v27[4];
            sub_1002A1804(*v27, (uint64_t)v14, v28, v7, v29);
            sub_10005802C(v26, type metadata accessor for NANPeer);
            if (v14)
            {
              uint64_t v89 = v29;
              uint64_t v90 = v7;
              uint64_t v91 = v14;
              uint64_t v30 = *(void *)(v28 + 64);
              uint64_t v97 = v28 + 64;
              uint64_t v31 = 1LL << *(_BYTE *)(v28 + 32);
              if (v31 < 64) {
                uint64_t v32 = ~(-1LL << v31);
              }
              else {
                uint64_t v32 = -1LL;
              }
              int64_t v11 = v32 & v30;
              int64_t v99 = (unint64_t)(v31 + 63) >> 6;
              swift_bridgeObjectRetain_n(v28, 2LL);
              unint64_t v33 = 0LL;
              uint64_t v34 = _swiftEmptyArrayStorage;
              uint64_t v101 = v12;
              uint64_t v98 = (void *)v28;
              while (2)
              {
                if (v11)
                {
                  uint64_t v104 = (v11 - 1) & v11;
                  v105  = v33;
                  unint64_t v13 = __clz(__rbit64(v11)) | (v33 << 6);
                }

                else
                {
                  unint64_t v13 = v33 + 1;
                  if (__OFADD__(v33, 1LL)) {
                    goto LABEL_105;
                  }
                  if ((uint64_t)v13 >= v99)
                  {
LABEL_64:
                    swift_release(v28);
                    swift_bridgeObjectRelease(v89);
                    swift_bridgeObjectRelease(v90);
                    swift_bridgeObjectRelease_n(v28, 2LL);
                    swift_bridgeObjectRelease(v91);
                    int64_t v99 = v34[2];
                    if (!v99)
                    {
LABEL_10:
                      swift_bridgeObjectRelease(v34);
                      goto LABEL_11;
                    }

                    uint64_t v7 = 0LL;
                    uint64_t v56 = v34 + 4;
                    uint64_t v98 = v34 + 4;
                    uint64_t v103 = v34;
                    while (1)
                    {
                      unint64_t v13 = v34[2];
                      if (v7 >= v13) {
                        goto LABEL_106;
                      }
                      uint64_t v57 = &v56[7 * v7];
                      uint64_t v58 = *v57;
                      uint64_t v59 = v57[1];
                      uint64_t v60 = v57[2];
                      unint64_t v61 = v57[3];
                      int64_t v62 = *(void *)(*v57 + 16LL);
                      v105  = v61;
                      uint64_t v106 = v7;
                      uint64_t v104 = v60;
                      if (v62)
                      {
                        uint64_t v101 = v12;
                        unsigned int v63 = LOBYTE(v56[7 * v7 + 4]);
                        swift_bridgeObjectRetain(v58);
                        uint64_t v102 = v59;
                        sub_100058430(v59, v60, v61);
                        v107[0]  = (uint64_t)_swiftEmptyArrayStorage;
                        swift_bridgeObjectRetain(v58);
                        sub_100267F54(0, v62, 0);
                        unint64_t v64 = 0LL;
                        uint64_t v14 = (void *)v107[0];
                        if (v63 >= 2) {
                          char v65 = 2;
                        }
                        else {
                          char v65 = v63;
                        }
                        unint64_t v66 = *(void *)(v107[0] + 16);
                        uint64_t v67 = v66;
                        do
                        {
                          int v68 = *(_DWORD *)(v58 + v64 + 32);
                          char v69 = *(_BYTE *)(v58 + v64 + 36);
                          char v70 = *(_BYTE *)(v58 + v64 + 37);
                          v107[0]  = (uint64_t)v14;
                          unint64_t v71 = v14[3];
                          unint64_t v72 = v66 + 1;
                          if (v66 >= v71 >> 1)
                          {
                            sub_100267F54(v71 > 1, v66 + 1, 1);
                            uint64_t v14 = (void *)v107[0];
                          }

                          v14[2]  = v72;
                          int v73 = &v14[v67 + v64 / 8];
                          *((_DWORD *)v73 + 8)  = v68;
                          *((_BYTE *)v73 + 36)  = v69;
                          *((_BYTE *)v73 + 37)  = v70;
                          *((_BYTE *)v73 + 38)  = v65;
                          v64 += 8LL;
                          unint64_t v66 = v72;
                          --v62;
                        }

                        while (v62);
                        swift_bridgeObjectRelease(v58);
                        uint64_t v6 = v100;
                        uint64_t v12 = v101;
                        uint64_t v59 = v102;
                        uint64_t v34 = v103;
                      }

                      else
                      {
                        swift_bridgeObjectRetain(v58);
                        sub_100058430(v59, v60, v61);
                        uint64_t v14 = _swiftEmptyArrayStorage;
                      }

                      int64_t v11 = v14[2];
                      int64_t v74 = v12[2];
                      uint64_t v7 = v74 + v11;
                      if (__OFADD__(v74, v11)) {
                        goto LABEL_107;
                      }
                      isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native(v12);
                      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v7 > v12[3] >> 1)
                      {
                        if (v74 <= v7) {
                          int64_t v76 = v74 + v11;
                        }
                        else {
                          int64_t v76 = v74;
                        }
                        uint64_t v12 = sub_1002CA58C(isUniquelyReferenced_nonNull_native, v76, 1, v12);
                      }

                      unint64_t v77 = v105;
                      uint64_t v7 = v106;
                      unint64_t v13 = v14[2];
                      if (v13)
                      {
                        unint64_t v13 = v12[2];
                        uint64_t v78 = &v12[v13 + 4];
                        if (v14 + 4 < &v78[v11] && v78 < &v14[v11 + 4]) {
                          goto LABEL_114;
                        }
                        memcpy(v78, v14 + 4, 8 * v11);
                        if (v11)
                        {
                          v80  = v12[2];
                          BOOL v55 = __OFADD__(v80, v11);
                          unint64_t v13 = v80 + v11;
                          if (v55) {
                            goto LABEL_110;
                          }
                          v12[2]  = v13;
                        }
                      }

                      else if (v11)
                      {
                        goto LABEL_108;
                      }

                      ++v7;
                      swift_bridgeObjectRelease(v14);
                      swift_bridgeObjectRelease(v58);
                      sub_100057CA0(v59, v104, v77);
                      uint64_t v56 = v98;
                      if (v7 == v99) {
                        goto LABEL_10;
                      }
                    }
                  }

                  unint64_t v35 = *(void *)(v97 + 8 * v13);
                  int64_t v36 = v33 + 1;
                  if (!v35)
                  {
                    int64_t v36 = v33 + 2;
                    unint64_t v35 = *(void *)(v97 + 8 * v36);
                    if (!v35)
                    {
                      int64_t v36 = v33 + 3;
                      unint64_t v35 = *(void *)(v97 + 8 * v36);
                      if (!v35)
                      {
                        int64_t v36 = v33 + 4;
                        unint64_t v35 = *(void *)(v97 + 8 * v36);
                        if (!v35)
                        {
                          unint64_t v13 = v33 + 5;
                          unint64_t v35 = *(void *)(v97 + 8 * v13);
                          int64_t v36 = v33 + 5;
                          if (!v35)
                          {
                            while (1)
                            {
                              int64_t v36 = v13 + 1;
                              if (__OFADD__(v13, 1LL)) {
                                break;
                              }
                              if (v36 >= v99) {
                                goto LABEL_64;
                              }
                              unint64_t v35 = *(void *)(v97 + 8 * v36);
                              ++v13;
                              if (v35) {
                                goto LABEL_38;
                              }
                            }

LABEL_112:
                            __break(1u);
LABEL_113:
                            uint64_t v12 = sub_1002CA58C((void *)(v13 > 1), (int64_t)v14, 1, v12);
LABEL_6:
                            v12[2]  = v14;
                            uint64_t v15 = &v12[v7];
                            *((_DWORD *)v15 + 8)  = v11;
                            *((_BYTE *)v15 + 36)  = BYTE4(v11);
                            *((_BYTE *)v15 + 37)  = BYTE5(v11);
                            *((_BYTE *)v15 + 38)  = 3;
                            goto LABEL_8;
                          }
                        }
                      }
                    }
                  }

void *sub_10028E840()
{
  return v0;
}

uint64_t sub_10028E86C()
{
  uint64_t v0 = sub_10028E840();
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for NANDiscoveryEngine.PeerChannelLearner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000227C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NANDiscoveryEngine.PeerChannelLearner);
}

uint64_t sub_10028E898(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v108 = a1;
  v105  = *v3;
  uint64_t v100 = a2;
  uint64_t v5 = *(void *)(class metadata base offset for ReferenceWritableKeyPath + *a2 + 8LL);
  __chkstk_darwin();
  uint64_t v7 = (char *)v93 - v6;
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v106 = *(void *)(v8 + 40);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v99 = *(void *)(v106 + 8);
  uint64_t v107 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v99,  v9,  &protocol requirements base descriptor for NANService);
  uint64_t v109 = *(void (***)(void, void, void))(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v98 = (char *)v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v102 = (char *)v93 - v11;
  uint64_t v114 = type metadata accessor for Logger(0LL);
  uint64_t v112 = *(void *)(v114 - 8);
  uint64_t v12 = *(void *)(v112 + 64);
  __chkstk_darwin();
  uint64_t v101 = (char *)v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  uint64_t v14 = (char *)v93 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (void *)((char *)v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v19 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v20 = (void *)*v19;
  *uint64_t v18 = *v19;
  (*(void (**)(uint64_t *, void, uint64_t))(v16 + 104))( v18,  enum case for DispatchPredicate.onQueue(_:),  v15);
  id v21 = v20;
  LOBYTE(v20)  = _dispatchPreconditionTest(_:)(v18);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8))(v18, v15);
  if ((v20 & 1) != 0)
  {
    uint64_t v96 = v7;
    uint64_t v111 = v14;
    sub_1000226B0(a3, (uint64_t)v118, (uint64_t *)&unk_10040E450);
    uint64_t v97 = v5;
    if ((v119 & 1) != 0)
    {
      sub_100022594(v118, &v120);
      v110  = 0LL;
    }

    else
    {
      v110  = *(void *)&v118[0];
      id v23 =  [*(id *)(*(void *)&v118[0] + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)(&v120, v23);
      swift_unknownObjectRelease(v23);
    }

    uint64_t v24 = v113;
    uint64_t v25 = v114;
    uint64_t v26 = v111;
    uint64_t v27 = v112;
    uint64_t v28 = *(void (**)(char *))(v112 + 16);
    v93[1]  = v113 + qword_100410AF8;
    v28(v111);
    uint64_t v29 = swift_allocObject(&unk_1003F8830, 24LL, 7LL);
    uint64_t v95 = v29 + 16;
    swift_unknownObjectWeakInit(v29 + 16, 0LL);
    uint64_t v30 = v25;
    uint64_t v31 = v107;
    uint64_t v32 = v106;
    unint64_t v33 = (char *)v110;
    if (v110)
    {
      uint64_t v94 = v12;
      uint64_t v34 = v30;
      uint64_t v35 = swift_allocObject(&unk_1003F8060, 24LL, 7LL);
      swift_unknownObjectWeakInit(v35 + 16, v33);
      int64_t v36 = v101;
      ((void (*)(char *, char *, uint64_t))v28)(v101, v26, v34);
      sub_100002AE4((uint64_t)&v120, (uint64_t)v118);
      uint64_t v37 = *(unsigned __int8 *)(v27 + 80);
      uint64_t v38 = (v37 + 56) & ~v37;
      unint64_t v39 = (v94 + v38 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v40 = (char *)swift_allocObject(&unk_1003F8858, v39 + 32, v37 | 7);
      *((void *)v40 + 2)  = *(void *)(v105 + 80);
      *((void *)v40 + 3)  = v31;
      *((void *)v40 + 4)  = v32;
      *((void *)v40 + 5)  = v29;
      *((void *)v40 + 6)  = v35;
      uint64_t v41 = v36;
      unint64_t v33 = (char *)v110;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v40[v38], v41, v114);
      uint64_t v42 = v113;
      sub_100022594(v118, &v40[v39]);
      uint64_t v43 = (void (**)())&v33[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v45 = *(void *)&v33[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v44 = *(void *)&v33[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8];
      *uint64_t v43 = sub_1002A15A0;
      v43[1]  = (void (*)())v40;
      swift_retain();
      uint64_t v46 = v44;
      uint64_t v24 = v42;
      sub_100021018(v45, v46);
    }

    unint64_t v47 = v33;
    v110  = v29;
    uint64_t v48 = *(void *)(v24 + *(void *)(*(void *)v24 + 280LL));
    swift_unownedRetainStrong(v48);
    int64_t v49 = v102;
    uint64_t v50 = AssociatedTypeWitness;
    ((void (**)(char *, uint64_t, uint64_t))v109)[2](v102, v108, AssociatedTypeWitness);
    uint64_t v51 = v103;
    uint64_t v52 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v32 + 16))(v48, v49, v31, v32);
    if (v51)
    {
      (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v114);
      sub_100002AC4(&v120);
      swift_release(v110);
    }

    else
    {
      uint64_t v53 = v31;
      uint64_t v54 = v32;
      uint64_t v108 = 0LL;
      sub_100002AE4((uint64_t)&v120, (uint64_t)v118);
      BOOL v55 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v32 + 64);
      uint64_t v56 = v53;
      v55(v118, v53, v54);
      uint64_t v57 = v95;
      swift_beginAccess(v95, v117, 1LL, 0LL);
      swift_unknownObjectWeakAssign(v57, v52);
      uint64_t v58 = v52;
      uint64_t v59 = v47;
      if (v47)
      {
        uint64_t v60 = (void *)objc_opt_self(&OBJC_CLASS___WiFiP2PXPCConnection);
        id v61 = v47;
        id v62 = [v60 weakExportedObjectProxy:v58];
        _bridgeAnyObjectToAny(_:)(v118, v62);
        swift_unknownObjectRelease(v62);
        sub_10026331C((uint64_t)v118);
      }

      uint64_t v63 = v99;
      unint64_t v64 = *(void (**)(uint64_t, uint64_t))(v99 + 64);
      swift_retain();
      char v65 = v98;
      uint64_t v66 = v56;
      v64(v56, v63);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v63,  v56,  v50,  &protocol requirements base descriptor for NANService,  &associated conformance descriptor for NANService.NANService.Configuration: NANServiceConfiguration);
      int v68 = v96;
      (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v50, AssociatedConformanceWitness);
      ((void (*)(char *, uint64_t))v109[1])(v65, v50);
      uint64_t v69 = *(void *)(v105 + 80);
      uint64_t v70 = *(void *)(v105 + 88);
      id v71 = v59;
      uint64_t v72 = swift_unknownObjectRetain(v58);
      sub_10029FC24(v72, v59, v69, v66, v70, v54);
      uint64_t v73 = v72;
      uint64_t v75 = v74;
      swift_unknownObjectRelease(v58);

      uint64_t v115 = v73;
      uint64_t v116 = v75;
      v121  = v113;
      int64_t v76 = (void (*)(_OWORD *, void))swift_modifyAtReferenceWritableKeyPath(v118, &v121, v100);
      Dictionary.subscript.setter(&v115, v68, v97);
      v76(v118, 0LL);
      swift_release(v121);
      uint64_t v77 = v108;
      (*(void (**)(uint64_t, uint64_t))(v54 + 32))(v66, v54);
      uint64_t v52 = v58;
      if (v77)
      {
        uint64_t v109 = (void (**)(void, void, void))v71;
        swift_errorRetain(v77);
        uint64_t v78 = swift_errorRetain(v77);
        uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
        v80  = static os_log_type_t.error.getter(v79);
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = swift_slowAlloc(22LL, -1LL);
          uint64_t v82 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          uint64_t v108 = swift_slowAlloc(32LL, -1LL);
          *(void *)&v118[0]  = v108;
          *(_DWORD *)uint64_t v81 = 136315394;
          uint64_t v83 = _typeName(_:qualified:)(v66, 0LL);
          unint64_t v85 = v84;
          uint64_t v115 = sub_10000235C(v83, v84, (uint64_t *)v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
          swift_bridgeObjectRelease(v85);
          *(_WORD *)(v81 + 12)  = 2112;
          swift_errorRetain(v77);
          uint64_t v86 = _swift_stdlib_bridgeErrorToNSError(v77);
          uint64_t v115 = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
          *uint64_t v82 = v86;
          swift_errorRelease(v77);
          swift_errorRelease(v77);
          _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "Attempt to create service %s failed because of %@",  (uint8_t *)v81,  0x16u);
          uint64_t v87 = sub_100002274(&qword_100404DE0);
          swift_arrayDestroy(v82, 1LL, v87);
          swift_slowDealloc(v82, -1LL, -1LL);
          uint64_t v88 = v108;
          swift_arrayDestroy(v108, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v88, -1LL, -1LL);
          swift_slowDealloc(v81, -1LL, -1LL);
        }

        else
        {

          swift_errorRelease(v77);
          swift_errorRelease(v77);
        }

        uint64_t v89 = v114;
        uint64_t v91 = v110;
        sub_10028F4E8(v58, v100, 0LL);
        swift_willThrow(v92);
        swift_unknownObjectRelease(v58);
        (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v89);
        sub_100002AC4(&v120);

        uint64_t v90 = v91;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v114);
        sub_100002AC4(&v120);

        uint64_t v90 = v110;
      }

      swift_release(v90);
    }

    return v52;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10028F1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (uint64_t *)((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v17 = (void *)*v16;
  *uint64_t v15 = *v16;
  (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchPredicate.onQueue(_:),  v12);
  id v18 = v17;
  LOBYTE(v17)  = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v15, v12);
  if ((v17 & 1) != 0)
  {
    uint64_t v19 = a1 + 16;
    swift_beginAccess(v19, v49, 0LL, 0LL);
    Strong  = swift_unknownObjectWeakLoadStrong(v19);
    if (Strong)
    {
      uint64_t v21 = Strong;
      uint64_t v22 = a2 + 16;
      swift_beginAccess(v22, v48, 0LL, 0LL);
      uint64_t v23 = swift_unknownObjectWeakLoadStrong(v22);
      if (v23)
      {
        uint64_t v24 = (void *)v23;
        uint64_t v45 = a4;
        swift_unknownObjectRetain_n(v21, 2LL);
        id v25 = v24;
        uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc(22LL, -1LL);
          uint64_t v44 = a6;
          uint64_t v29 = v28;
          uint64_t v30 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v42 = swift_slowAlloc(32LL, -1LL);
          uint64_t v46 = (uint64_t)v25;
          uint64_t v47 = v42;
          *(_DWORD *)uint64_t v29 = 138412546;
          id v43 = v25;
          id v31 = v25;
          os_log_t v41 = v26;
          id v32 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
          *uint64_t v30 = v24;

          *(_WORD *)(v29 + 12)  = 2080;
          uint64_t v46 = v21;
          uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter( v44,  *(void *)(*(void *)(a7 + 8) + 16LL));
          unint64_t v35 = v34;
          uint64_t v46 = sub_10000235C(v33, v34, &v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
          swift_unknownObjectRelease_n(v21, 2LL);
          swift_bridgeObjectRelease(v35);
          os_log_t v36 = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  v27,  "%@ was invalidated detaching from %s",  (uint8_t *)v29,  0x16u);
          uint64_t v37 = sub_100002274(&qword_100404DE0);
          id v25 = v43;
          swift_arrayDestroy(v30, 1LL, v37);
          swift_slowDealloc(v30, -1LL, -1LL);
          uint64_t v38 = v42;
          swift_arrayDestroy(v42, 1LL, &type metadata for Any[8]);
          swift_slowDealloc(v38, -1LL, -1LL);
          uint64_t v39 = v29;
          a6  = v44;
          swift_slowDealloc(v39, -1LL, -1LL);
        }

        else
        {
          swift_unknownObjectRelease_n(v21, 2LL);
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 80))(v45, a6, a7);
        swift_unknownObjectRelease(v21);
      }

      else
      {
        swift_unknownObjectRelease(v21);
      }
    }
  }

  else
  {
    __break(1u);
  }

void sub_10028F4E8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v52 = a1;
  uint64_t v4 = *v3;
  uint64_t v46 = a3;
  uint64_t v47 = v4;
  uint64_t v48 = a2;
  uint64_t v51 = *(void *)(*(void *)(class metadata base offset for ReferenceWritableKeyPath + *a2 + 8LL) + 16LL);
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v44 - v5;
  uint64_t v49 = v7;
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v45 = *(void *)(v8 + 40);
  uint64_t v9 = *(void *)(v45 + 8);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  v10,  &protocol requirements base descriptor for NANService);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (uint64_t *)((char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v20 = (void *)*v19;
  *id v18 = *v19;
  (*(void (**)(uint64_t *, void, uint64_t))(v16 + 104))( v18,  enum case for DispatchPredicate.onQueue(_:),  v15);
  id v21 = v20;
  LOBYTE(v20)  = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v18, v15);
  if ((v20 & 1) != 0)
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v9 + 64);
    uint64_t v23 = v53;
    swift_retain();
    uint64_t v24 = v52;
    v22(v10, v9);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v10,  AssociatedTypeWitness,  &protocol requirements base descriptor for NANService,  &associated conformance descriptor for NANService.NANService.Configuration: NANServiceConfiguration);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))( AssociatedTypeWitness,  AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    uint64_t v55 = v23;
    uint64_t v26 = (void (*)(uint64_t *, void))swift_modifyAtReferenceWritableKeyPath(v54, &v55, v48);
    Dictionary.removeValue(forKey:)(v6, v49);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v51);
    v26(v54, 0LL);
    swift_release(v55);
    uint64_t v27 = v56;
    if (v56)
    {
      uint64_t v28 = v57;
      uint64_t v29 = v47;
      uint64_t v30 = v45;
      uint64_t v31 = sub_10027F8A0(v56, v57);
      v54[0]  = v46;
      __chkstk_darwin(v31);
      *(&v44 - 4)  = v32;
      *(&v44 - 3)  = v30;
      *(&v44 - 2)  = v53;
      *(&v44 - 1)  = v24;
      uint64_t v33 = sub_1000022F8(&qword_10040E378);
      uint64_t v34 = type metadata accessor for ReferenceWritableKeyPath(255LL, v29, v33);
      type metadata accessor for Optional(0LL, v34);
      sub_10027EA2C( (void (*)(char *, char *))sub_10029EC48,  (uint64_t)(&v44 - 6),  (uint64_t)&type metadata for Never,  (uint64_t)(&type metadata for () + 1),  v35,  (uint64_t)&v56);
      swift_bridgeObjectRelease(v28);
      swift_unknownObjectRelease(v27);
    }

    else
    {
      uint64_t v36 = swift_unknownObjectRetain_n(v24, 2LL);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v40 = swift_slowAlloc(32LL, -1LL);
        v54[0]  = v40;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v56 = v24;
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v10, *(void *)(v9 + 16));
        unint64_t v43 = v42;
        uint64_t v56 = sub_10000235C(v41, v42, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
        swift_unknownObjectRelease_n(v24, 2LL);
        swift_bridgeObjectRelease(v43);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to find %s when it was terminated", v39, 0xCu);
        swift_arrayDestroy(v40, 1LL, &type metadata for Any[8]);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
        swift_unknownObjectRelease_n(v24, 2LL);
      }
    }
  }

  else
  {
    __break(1u);
  }

uint8_t *sub_10028F950(uint64_t a1, void *a2)
{
  uint64_t v128 = a1;
  uint64_t v5 = *(void *)(*(void *)v2 + 80LL);
  uint64_t v4 = *(void *)(*(void *)v2 + 88LL);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v6,  v5,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v6,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v9 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v10 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v9,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v12 = type metadata accessor for Preferences(0LL, v9, v10, v11);
  v122  = *(void *)(v12 - 8);
  uint64_t v123 = v12;
  __chkstk_darwin();
  v121  = (char *)&v112 - v13;
  uint64_t v120 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin();
  uint64_t v127 = (uint64_t *)((char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for NANSubscribe.Configuration(0LL);
  __chkstk_darwin();
  uint64_t v124 = (uint64_t)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NANDriverCapabilities(0LL);
  __chkstk_darwin();
  id v18 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v19 = [a2 serviceName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  v23._countAndFlagsBits  = v20;
  v23._object  = v22;
  CoreP2P::NANServiceName_optional v24 = NANServiceName.init(_:)(v23);
  if (!v24.value.string._object)
  {
    uint64_t v48 = &v129[qword_100410AF8];
    id v49 = a2;
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v48 = 136315138;
      v129  = v48 + 4;
      v130[0]  = v52;
      id v53 = [v49 serviceName];
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      unint64_t v56 = v55;

      v133  = sub_10000235C(v54, v56, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);

      swift_bridgeObjectRelease(v56);
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Cannot create new subscribe because '%s' is not a valid service name",  v48,  0xCu);
      swift_arrayDestroy(v52, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v67 = sub_1000033FC();
    uint64_t v68 = swift_allocError(&type metadata for WiFiError, v67, 0LL, 0LL);
    __int128 v70 = xmmword_10033A940;
    goto LABEL_24;
  }

  countAndFlagsBits  = v24.value.string._countAndFlagsBits;
  uint64_t v118 = a2;
  id v25 = v129;
  uint64_t v26 = &v129[qword_10040DD10];
  swift_beginAccess(&v129[qword_10040DD10], &v133, 0LL, 0LL);
  uint64_t v117 = v26;
  uint64_t v27 = *(void *)v26;
  uint64_t v29 = _s8InstanceCMa(255LL, v5, v4, v28);
  swift_bridgeObjectRetain(v27);
  WitnessTable  = swift_getWitnessTable(&unk_10035F874, v29);
  uint64_t v114 = v5;
  v130[0]  = v5;
  v130[1]  = v29;
  uint64_t v115 = v4;
  v130[2]  = v4;
  v130[3]  = WitnessTable;
  uint64_t v116 = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)v130);
  uint64_t v31 = v25;
  uint64_t v32 = Dictionary.count.getter(v27, &type metadata for UInt8, v116, &protocol witness table for UInt8);
  swift_bridgeObjectRelease(v27);
  uint64_t v33 = *(void *)&v25[*(void *)(*(void *)v25 + 280LL)];
  swift_unownedRetainStrong(v33);
  uint64_t v34 = v33 + *(void *)(*(void *)v33 + 656LL);
  swift_beginAccess(v34, v132, 0LL, 0LL);
  sub_100057FE8(v34, (uint64_t)v18, type metadata accessor for NANDriverCapabilities);
  swift_release(v33);
  uint64_t v35 = *(void *)&v18[*(int *)(v16 + 40)];
  sub_10005802C((uint64_t)v18, type metadata accessor for NANDriverCapabilities);
  uint64_t v36 = &v31[qword_100410AF8];
  if (v32 >= v35)
  {
    swift_retain_n(v31, 2LL);
    uint64_t v57 = swift_bridgeObjectRetain(v24.value.string._object);
    uint64_t v48 = (uint8_t *)Logger.logObject.getter(v57);
    os_log_type_t v58 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled((os_log_t)v48, v58))
    {
      uint64_t v59 = swift_slowAlloc(22LL, -1LL);
      uint64_t v60 = swift_slowAlloc(32LL, -1LL);
      v130[0]  = v60;
      *(_DWORD *)uint64_t v59 = 136315394;
      swift_bridgeObjectRetain(v24.value.string._object);
      uint64_t v61 = NANServiceName.description.getter(countAndFlagsBits, v24.value.string._object);
      unint64_t v63 = v62;
      swift_bridgeObjectRelease(v24.value.string._object);
      uint64_t v135 = sub_10000235C(v61, v63, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
      swift_bridgeObjectRelease_n(v24.value.string._object, 2LL);
      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v59 + 12)  = 2048;
      uint64_t v64 = *(void *)v117;
      uint64_t v65 = swift_bridgeObjectRetain(*(void *)v117);
      uint64_t v66 = Dictionary.count.getter(v65, &type metadata for UInt8, v116, &protocol witness table for UInt8);
      swift_release(v31);
      swift_bridgeObjectRelease(v64);
      uint64_t v135 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
      swift_release(v31);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v48,  v58,  "Cannot create new subscribe %s because exceeded maximum active count %ld",  (uint8_t *)v59,  0x16u);
      swift_arrayDestroy(v60, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v24.value.string._object, 2LL);

      swift_release_n(v31, 2LL);
    }

    unint64_t v72 = sub_1000033FC();
    uint64_t v68 = swift_allocError(&type metadata for WiFiError, v72, 0LL, 0LL);
    __int128 v70 = xmmword_1003453F0;
    goto LABEL_24;
  }

  object  = v24.value.string._object;
  uint64_t v38 = swift_bridgeObjectRetain_n(v24.value.string._object, 2LL);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.default.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v113 = v36;
  if (v41)
  {
    unint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    v130[0]  = v43;
    *(_DWORD *)unint64_t v42 = 136315138;
    uint64_t v117 = v42 + 4;
    swift_bridgeObjectRetain(v24.value.string._object);
    uint64_t v44 = NANServiceName.description.getter(countAndFlagsBits, v24.value.string._object);
    unint64_t v46 = v45;
    swift_bridgeObjectRelease(v24.value.string._object);
    uint64_t v47 = v44;
    object  = v24.value.string._object;
    uint64_t v135 = sub_10000235C(v47, v46, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
    swift_bridgeObjectRelease_n(v24.value.string._object, 2LL);
    swift_bridgeObjectRelease(v46);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "New client requesting a subscribe with service name %s",  v42,  0xCu);
    swift_arrayDestroy(v43, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v24.value.string._object, 2LL);
  }

  id v71 = v129;
  sub_1000226B0(v128, (uint64_t)v130, (uint64_t *)&unk_10040E450);
  if (v131 == 1)
  {
    sub_1000225EC((uint64_t)v130, (uint64_t *)&unk_10040E450);
  }

  else
  {
    uint64_t v73 = (char *)v130[0];
    uint64_t v74 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
    id v75 = [v74 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareSubscriberXPC];
    uint64_t v76 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    [*(id *)&v73[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setExportedInterface:v75];

    id v77 = [v74 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareSubscriberXPCDelegate];
    [*(id *)&v73[v76] setRemoteObjectInterface:v77];
  }

  uint64_t v78 = v118;
  uint64_t v79 = (uint64_t)&v71[qword_10040DD60];
  swift_beginAccess(&v71[qword_10040DD60], v130, 33LL, 0LL);
  v80  = sub_100002274(&qword_10040E378);
  IDPool.availableID()(v80, (uint64_t)&v135);
  swift_endAccess(v130);
  if ((v135 & 0x100) != 0)
  {
    uint64_t v81 = swift_bridgeObjectRetain(object);
    uint64_t v48 = v113;
    uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
    os_log_type_t v83 = static os_log_type_t.error.getter(v82);
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v84 = swift_slowAlloc(32LL, -1LL);
      v130[0]  = v84;
      *(_DWORD *)uint64_t v48 = 136315138;
      swift_bridgeObjectRetain(object);
      unint64_t v85 = object;
      uint64_t v86 = NANServiceName.description.getter(countAndFlagsBits, object);
      unint64_t v88 = v87;
      swift_bridgeObjectRelease(v85);
      uint64_t v135 = sub_10000235C(v86, v88, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
      swift_bridgeObjectRelease_n(v85, 2LL);
      swift_bridgeObjectRelease(v88);
      _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "Cannot create new subscribe %s because no more instance IDs were available",  v48,  0xCu);
      swift_arrayDestroy(v84, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v84, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(object, 2LL);
    }

    unint64_t v94 = sub_1000033FC();
    uint64_t v68 = swift_allocError(&type metadata for WiFiError, v94, 0LL, 0LL);
    __int128 v70 = xmmword_10035EAB0;
LABEL_24:
    *(_OWORD *)uint64_t v69 = v70;
    *(_BYTE *)(v69 + 16)  = 1;
    goto LABEL_25;
  }

  int v89 = v135;
  id v90 = [v78 multicastAddress];
  if (v90)
  {
    WiFiMACAddress.wifiAddress.getter();
    uint64_t v92 = v91;

    uint64_t v93 = v92 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v93 = 0LL;
  }

  id v96 = [v78 serviceSpecificInfo];
  if (v96)
  {
    uint64_t v97 = v96;
    uint64_t v118 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
    uint64_t v117 = v98;
  }

  else
  {
    uint64_t v118 = 0LL;
    uint64_t v117 = (uint8_t *)0xF000000000000000LL;
  }

  uint64_t result = (uint8_t *)NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor();
  if (*(void *)result >> 54)
  {
    __break(1u);
  }

  else
  {
    uint64_t v99 = *(void *)result << 10;
    if ((v99 & 0x8000000000000000LL) == 0)
    {
      uint64_t v116 = v79;
      *uint64_t v127 = v99;
      (*(void (**)(void))(v119 + 104))();
      id v100 = [v78 fastDiscoveryConfiguration];
      id v101 = v100;
      if (v100) {

      }
      swift_unownedRetainStrong(v33);
      uint64_t v102 = v121;
      WiFiInterface.preferences.getter();
      swift_release(v33);
      uint64_t v103 = v123;
      char v104 = Preferences.disableAuthentication.getter(v123);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v102, v103);
      v105  = (v104 & 1) != 0 || [v78 authenticationType] != (id)1;
      uint64_t v106 = v128;
      BOOL v107 = v90 == 0LL;
      LOBYTE(v130[0])  = v90 == 0LL;
      uint64_t v108 = v124;
      NANSubscribe.Configuration.init(instanceID:serviceName:serviceSpecificInfo:queryPeriod:enableFastDiscovery:authenticationType:multicastAddress:type:multicastServiceType:)( v89,  countAndFlagsBits,  (uint64_t)object,  (uint64_t)v118,  (unint64_t)v117,  (uint64_t)v127,  v101 != 0LL,  v105,  v124,  v93,  (v93 | ((unint64_t)v107 << 48)) >> 32,  (v93 | ((unint64_t)v107 << 48)) >> 48,  (v93 | ((unint64_t)v107 << 48)) >> 56,  1,  1u);
      __chkstk_darwin();
      KeyPath  = (void *)swift_getKeyPath(&unk_10035F068);
      v110  = v125;
      uint64_t v111 = sub_10028E898(v108, KeyPath, v106);
      if (!v110)
      {
        uint64_t v48 = (uint8_t *)v111;
        sub_10005802C(v108, type metadata accessor for NANSubscribe.Configuration);
        swift_release(KeyPath);
        return v48;
      }

      sub_10005802C(v108, type metadata accessor for NANSubscribe.Configuration);
      swift_release(KeyPath);
      uint64_t v48 = (uint8_t *)v116;
      swift_beginAccess(v116, v130, 33LL, 0LL);
      sub_10013F868(v89);
      uint64_t v68 = swift_endAccess(v130);
LABEL_25:
      swift_willThrow(v68);
      return v48;
    }
  }

  __break(1u);
  return result;
}

int64_t sub_10029069C(uint64_t a1, void *a2)
{
  v326  = a1;
  uint64_t v4 = *v2;
  v318  = type metadata accessor for DispatchTimeInterval(0LL);
  v317  = *(void *)(v318 - 8);
  __chkstk_darwin();
  v324  = (uint64_t *)((char *)&v302 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for NANPublish.Configuration(0LL);
  __chkstk_darwin();
  v319  = (uint64_t)&v302 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v9,  v8,  &protocol requirements base descriptor for P2PControls);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  v8,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v12 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v13 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v12,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  rawValue  = type metadata accessor for Preferences(0LL, v12, v13, v14);
  v321  = *(void *)(rawValue - 8);
  __chkstk_darwin();
  v315  = (uint64_t)&v302 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v320  = (char *)&v302 - v16;
  v328  = (void *)type metadata accessor for NANDriverCapabilities(0LL);
  __chkstk_darwin();
  v314  = (uint64_t)&v302 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  *(void *)&v316  = (char *)&v302 - v18;
  __chkstk_darwin();
  *(void *)&v313  = (char *)&v302 - v19;
  __chkstk_darwin();
  id v21 = (char *)&v302 - v20;
  id v22 = [a2 serviceName];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  id v25 = v24;

  v26._countAndFlagsBits  = v23;
  v26._object  = v25;
  CoreP2P::NANServiceName_optional v27 = NANServiceName.init(_:)(v26);
  countAndFlagsBits  = v27.value.string._countAndFlagsBits;
  if (!v27.value.string._object)
  {
    id v49 = a2;
    p_type  = Logger.logObject.getter(v49);
    os_log_type_t v50 = static os_log_type_t.error.getter(p_type);
    if (os_log_type_enabled((os_log_t)p_type, v50))
    {
      os_log_type_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v52 = (void *)swift_slowAlloc(32LL, -1LL);
      v332  = v52;
      *(_DWORD *)os_log_type_t v51 = 136315138;
      v330  = v51 + 4;
      id v53 = [v49 serviceName];
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      unint64_t v56 = v55;

      *(void *)&v340  = sub_10000235C(v54, v56, (uint64_t *)&v332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, (char *)&v340 + 8);

      swift_bridgeObjectRelease(v56);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)p_type,  v50,  "Cannot create new publish because '%s' is not a valid service name",  v51,  0xCu);
      swift_arrayDestroy(v52, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v68 = sub_1000033FC();
    uint64_t v69 = swift_allocError(&type metadata for WiFiError, v68, 0LL, 0LL);
    __int128 v71 = xmmword_10033A940;
    goto LABEL_18;
  }

  v325  = a2;
  uint64_t v28 = (uint64_t)v330;
  uint64_t v29 = &v330[qword_10040DD18];
  swift_beginAccess(&v330[qword_10040DD18], v345, 0LL, 0LL);
  uint64_t v30 = *(void *)v29;
  uint64_t v32 = _s8InstanceCMa_0(255LL, v8, v7, v31);
  swift_bridgeObjectRetain(v30);
  WitnessTable  = swift_getWitnessTable(&unk_10035E28C, v32);
  v322  = v8;
  v332  = (void *)v8;
  *(void *)&v333  = v32;
  v312  = v7;
  *((void *)&v333 + 1)  = v7;
  *(void *)&v334  = WitnessTable;
  v310  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v332);
  uint64_t v34 = v28;
  uint64_t v35 = Dictionary.count.getter(v30, &type metadata for UInt8, v310, &protocol witness table for UInt8);
  swift_bridgeObjectRelease(v30);
  unint64_t v36 = *(void *)(v28 + *(void *)(*(void *)v28 + 280LL));
  swift_unownedRetainStrong(v36);
  uint64_t v37 = v36 + *(void *)(*(void *)v36 + 656LL);
  swift_beginAccess(v37, v344, 0LL, 0LL);
  sub_100057FE8(v37, (uint64_t)v21, type metadata accessor for NANDriverCapabilities);
  v311  = v36;
  swift_release(v36);
  p_type  = *(void *)&v21[*((int *)v328 + 9)];
  sub_10005802C((uint64_t)v21, type metadata accessor for NANDriverCapabilities);
  uint64_t v39 = v34 + qword_100410AF8;
  if (v35 >= p_type)
  {
    swift_retain_n(v34, 2LL);
    uint64_t v57 = swift_bridgeObjectRetain(v27.value.string._object);
    os_log_type_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = swift_slowAlloc(22LL, -1LL);
      v328  = (void *)swift_slowAlloc(32LL, -1LL);
      v332  = v328;
      *(_DWORD *)uint64_t v60 = 136315394;
      swift_bridgeObjectRetain(v27.value.string._object);
      uint64_t v61 = NANServiceName.description.getter(countAndFlagsBits, v27.value.string._object);
      unint64_t v63 = v62;
      swift_bridgeObjectRelease(v27.value.string._object);
      *(void *)&v340  = sub_10000235C(v61, v63, (uint64_t *)&v332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, (char *)&v340 + 8);
      swift_bridgeObjectRelease_n(v27.value.string._object, 2LL);
      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v60 + 12)  = 2048;
      uint64_t v64 = *(void *)v29;
      uint64_t v65 = swift_bridgeObjectRetain(v64);
      uint64_t v66 = Dictionary.count.getter(v65, &type metadata for UInt8, v310, &protocol witness table for UInt8);
      uint64_t v67 = (uint64_t)v330;
      swift_release(v330);
      swift_bridgeObjectRelease(v64);
      *(void *)&v340  = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, (char *)&v340 + 8);
      swift_release(v67);
      _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "Cannot create new publish %s because exceeded maximum active count %ld",  (uint8_t *)v60,  0x16u);
      p_type  = (int64_t)v328;
      swift_arrayDestroy(v328, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(p_type, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v27.value.string._object, 2LL);

      swift_release_n(v34, 2LL);
    }

    v80  = sub_1000033FC();
    uint64_t v69 = swift_allocError(&type metadata for WiFiError, v80, 0LL, 0LL);
    __int128 v71 = xmmword_1003453F0;
LABEL_18:
    *(_OWORD *)uint64_t v70 = v71;
    *(_BYTE *)(v70 + 16)  = 1;
    swift_willThrow(v69);
    return p_type;
  }

  uint64_t v40 = swift_bridgeObjectRetain_n(v27.value.string._object, 2LL);
  v328  = (void *)v39;
  BOOL v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  object  = v27.value.string._object;
  if (v43)
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v45 = (void *)swift_slowAlloc(32LL, -1LL);
    v332  = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    p_type  = (int64_t)(v44 + 12);
    swift_bridgeObjectRetain(v27.value.string._object);
    uint64_t v46 = NANServiceName.description.getter(countAndFlagsBits, v27.value.string._object);
    unint64_t v48 = v47;
    swift_bridgeObjectRelease(v27.value.string._object);
    *(void *)&v340  = sub_10000235C(v46, v48, (uint64_t *)&v332);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, (char *)&v340 + 8);
    swift_bridgeObjectRelease_n(v27.value.string._object, 2LL);
    swift_bridgeObjectRelease(v48);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "New client requesting a publish with service name %s",  v44,  0xCu);
    swift_arrayDestroy(v45, 1LL, &type metadata for Any[8]);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v27.value.string._object, 2LL);
  }

  uint64_t v72 = (uint64_t)v330;
  uint64_t v73 = v326;
  uint64_t v74 = v312;
  uint64_t v75 = v322;
  uint64_t v76 = (uint64_t)v325;
  id v77 = [v325 datapathConfiguration];
  if (v77)
  {
    uint64_t v78 = v77;
    p_type  = (int64_t)[v77 serviceType];

    int v79 = p_type == 1;
    if (p_type == 2) {
      int v79 = 2;
    }
    LODWORD(v310)  = v79;
  }

  else
  {
    LODWORD(v310)  = 0;
  }

  id v82 = [(id)v76 internetSharingConfiguration];
  if (!v82)
  {
    v342  = 0LL;
    v340  = 0u;
    v341  = 0u;
    v343  = -1;
    goto LABEL_64;
  }

  os_log_type_t v83 = v82;
  p_type  = (int64_t)&stru_100401FF0.type;
  id v84 = [v82 interfaceName];
  if (!v84)
  {
LABEL_28:
    id v89 = [v83 interfaceName];
    if (v89)
    {

LABEL_37:
      id v92 = v83;
      uint64_t v93 = object;
      swift_bridgeObjectRetain(object);
      id v94 = v92;
      uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
      os_log_type_t v96 = static os_log_type_t.error.getter(v95);
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = swift_slowAlloc(52LL, -1LL);
        v330  = (uint8_t *)swift_slowAlloc(160LL, -1LL);
        v332  = v330;
        *(_DWORD *)uint64_t v97 = 136316162;
        swift_bridgeObjectRetain(v93);
        uint64_t v98 = NANServiceName.description.getter(countAndFlagsBits, v93);
        unint64_t v100 = v99;
        swift_bridgeObjectRelease(v93);
        v338  = sub_10000235C(v98, v100, (uint64_t *)&v332);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);
        swift_bridgeObjectRelease_n(v93, 2LL);
        *(void *)&double v101 = swift_bridgeObjectRelease(v100).n128_u64[0];
        *(_WORD *)(v97 + 12)  = 2080;
        unsigned int v102 = objc_msgSend(v94, "automatic", v101);
        BOOL v103 = v102 == 0;
        if (v102) {
          uint64_t v104 = 0x6974616D6F747561LL;
        }
        else {
          uint64_t v104 = 0LL;
        }
        if (v103) {
          v105  = 0xE000000000000000LL;
        }
        else {
          v105  = 0xEA00000000002063LL;
        }
        v338  = sub_10000235C(v104, v105, (uint64_t *)&v332);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);

        *(void *)&double v106 = swift_bridgeObjectRelease(v105).n128_u64[0];
        *(_WORD *)(v97 + 22)  = 2080;
        unsigned int v107 = objc_msgSend(v94, "provider", v106);
        BOOL v108 = v107 == 0;
        if (v107) {
          uint64_t v109 = 0x72656469766F7270LL;
        }
        else {
          uint64_t v109 = 0x6574736575716572LL;
        }
        if (v108) {
          v110  = 0xE900000000000072LL;
        }
        else {
          v110  = 0xE800000000000000LL;
        }
        v338  = sub_10000235C(v109, v110, (uint64_t *)&v332);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);

        *(void *)&double v111 = swift_bridgeObjectRelease(v110).n128_u64[0];
        *(_WORD *)(v97 + 32)  = 2080;
        id v112 = objc_msgSend(v94, "interfaceName", v111);
        if (v112)
        {
          uint64_t v113 = v112;
          uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
          unint64_t v116 = v115;
        }

        else
        {
          unint64_t v116 = 0xE400000000000000LL;
          uint64_t v114 = 1701736302LL;
        }

        v338  = sub_10000235C(v114, v116, (uint64_t *)&v332);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);

        swift_bridgeObjectRelease(v116);
        *(_WORD *)(v97 + 42)  = 2080;
        if ((_DWORD)v310)
        {
          uint64_t v117 = (uint64_t)v330;
          if ((_DWORD)v310 == 1)
          {
            p_type  = 0xE800000000000000LL;
            uint64_t v118 = 0x656D69746C616572LL;
          }

          else
          {
            uint64_t v118 = 0x6E6574614C776F6CLL;
            p_type  = 0xEA00000000007963LL;
          }
        }

        else
        {
          uint64_t v118 = 0x6576697470616461LL;
          p_type  = 0xE800000000000000LL;
          uint64_t v117 = (uint64_t)v330;
        }

        v338  = sub_10000235C(v118, p_type, (uint64_t *)&v332);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);
        swift_bridgeObjectRelease(p_type);
        _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "Cannot create new publish %s because of invalid internet sharing policy %s%s on interface: %s with service type: %s",  (uint8_t *)v97,  0x34u);
        swift_arrayDestroy(v117, 5LL, &type metadata for Any[8]);
        swift_slowDealloc(v117, -1LL, -1LL);
        swift_slowDealloc(v97, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v93, 2LL);
      }

      unint64_t v119 = sub_1000033FC();
      uint64_t v120 = swift_allocError(&type metadata for WiFiError, v119, 0LL, 0LL);
      *(_OWORD *)v121  = xmmword_10033A940;
      *(_BYTE *)(v121 + 16)  = 1;
      swift_willThrow(v120);

      return p_type;
    }

    if ((_DWORD)v310)
    {
      if ((_DWORD)v310 != 1)
      {
        swift_bridgeObjectRelease(0xEA00000000007963LL);
        goto LABEL_62;
      }

      uint64_t v90 = 0x656D69746C616572LL;
    }

    else
    {
      uint64_t v90 = 0x6576697470616461LL;
    }

    p_type  = _stringCompareWithSmolCheck(_:_:expecting:)( v90,  0xE800000000000000LL,  0x6E6574614C776F6CLL,  0xEA00000000007963LL,  0LL);
    swift_bridgeObjectRelease(0xE800000000000000LL);
    if ((p_type & 1) == 0) {
      goto LABEL_37;
    }
LABEL_62:
    v122  = *(void **)(v72 + *(void *)(*(void *)v72 + 256LL));
    *((void *)&v341 + 1)  = type metadata accessor for LowLatencyInternetRequesterPolicy(0LL, v75, v74, v91);
    v342  = &off_1003FA9E8;
    p_type  = v122;

    *(void *)&v340  = p_type;
    v343  = 1;
    goto LABEL_63;
  }

  unint64_t v85 = v84;
  uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
  uint64_t v88 = v87;

  if (([v83 automatic] & 1) != 0 || !objc_msgSend(v83, "provider"))
  {
    swift_bridgeObjectRelease(v88);
    uint64_t v75 = v322;
    goto LABEL_28;
  }

  p_type  = (int64_t)[v83 useBridging];

  *(void *)&v340  = v86;
  *((void *)&v340 + 1)  = v88;
  LOBYTE(v341)  = p_type;
  v343  = 0;
LABEL_63:
  uint64_t v76 = (uint64_t)v325;
LABEL_64:
  sub_1000226B0((uint64_t)&v340, (uint64_t)&v332, &qword_100409E58);
  unint64_t v123 = v311;
  if (v335 == 255)
  {
    sub_1000225EC((uint64_t)&v332, &qword_100409E58);
  }

  else
  {
    if ((v335 & 1) == 0)
    {
      swift_bridgeObjectRelease(v333);
      swift_unownedRetainStrong(v123);
      unint64_t v124 = *(void *)(v123 + *(void *)(*(void *)v123 + 456LL));
      swift_retain();
      swift_release(v123);
      uint64_t v125 = v327;
      if (v124) {
        goto LABEL_78;
      }
      swift_unownedRetainStrong(v123);
      uint64_t v126 = v125;
      uint64_t v127 = sub_1002EAD90();
      goto LABEL_74;
    }

    sub_10017B2A8((uint64_t)&v332);
  }

  id v128 = [(id)v76 datapathConfiguration];
  if (!v128
    || (v129  = v128, p_type  = (int64_t)[v128 serviceType], v129, p_type != 2))
  {
    swift_unownedRetainStrong(v123);
    unint64_t v124 = v123;
    goto LABEL_77;
  }

  swift_unownedRetainStrong(v123);
  unint64_t v124 = *(void *)(v123 + *(void *)(*(void *)v123 + 448LL));
  swift_retain();
  swift_release(v123);
  if (v124)
  {
LABEL_77:
    uint64_t v125 = v327;
    goto LABEL_78;
  }

  swift_unownedRetainStrong(v123);
  uint64_t v126 = v327;
  uint64_t v127 = sub_1002EB704();
LABEL_74:
  uint64_t v125 = v126;
  if (v126)
  {
    sub_1000225EC((uint64_t)&v340, &qword_100409E58);
    swift_release(v123);
    swift_bridgeObjectRelease(object);
    return p_type;
  }

  unint64_t v124 = v127;
  swift_release(v123);
LABEL_78:
  sub_1000226B0(v73, (uint64_t)&v332, (uint64_t *)&unk_10040E450);
  *(void *)&v327  = v125;
  if (BYTE8(v334) == 1)
  {
    sub_1000225EC((uint64_t)&v332, (uint64_t *)&unk_10040E450);
  }

  else
  {
    v130  = v332;
    v131  = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
    id v132 = [v131 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwarePublisherXPC];
    v133  = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    [*(id *)((char *)v130 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) setExportedInterface:v132];

    p_type  = (int64_t) [v131 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwarePublisherXPCDelegate];
    [*(id *)((char *)v130 + v133) setRemoteObjectInterface:p_type];

    unint64_t v123 = v311;
  }

  v134  = v72 + qword_10040DD60;
  swift_beginAccess(v72 + qword_10040DD60, &v332, 33LL, 0LL);
  uint64_t v135 = sub_100002274(&qword_10040E378);
  IDPool.availableID()(v135, (uint64_t)&v338);
  swift_endAccess(&v332);
  if ((v338 & 0x100) != 0)
  {
    v136  = object;
    v137  = swift_bridgeObjectRetain(object);
    BOOL v138 = (os_log_s *)Logger.logObject.getter(v137);
    os_log_type_t v139 = static os_log_type_t.error.getter(v138);
    if (os_log_type_enabled(v138, v139))
    {
      v140  = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v141  = (void *)swift_slowAlloc(32LL, -1LL);
      v332  = v141;
      *(_DWORD *)v140  = 136315138;
      p_type  = (int64_t)(v140 + 12);
      swift_bridgeObjectRetain(v136);
      v142  = NANServiceName.description.getter(countAndFlagsBits, v136);
      v308  = v124;
      v144  = v143;
      swift_bridgeObjectRelease(v136);
      v338  = sub_10000235C(v142, v144, (uint64_t *)&v332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);
      swift_bridgeObjectRelease_n(v136, 2LL);
      unint64_t v145 = v144;
      unint64_t v124 = v308;
      swift_bridgeObjectRelease(v145);
      _os_log_impl( (void *)&_mh_execute_header,  v138,  v139,  "Cannot create new publish %s because no more instance IDs were available",  v140,  0xCu);
      swift_arrayDestroy(v141, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v141, -1LL, -1LL);
      swift_slowDealloc(v140, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v136, 2LL);
    }

    v151  = sub_1000033FC();
    v152  = swift_allocError(&type metadata for WiFiError, v151, 0LL, 0LL);
    *(_OWORD *)uint64_t v153 = xmmword_10035EAB0;
    *(_BYTE *)(v153 + 16)  = 1;
    swift_willThrow(v152);
    swift_release(v124);
    sub_1000225EC((uint64_t)&v340, &qword_100409E58);
    return p_type;
  }

  v305  = v134;
  v307  = v338;
  swift_unownedRetainStrong(v123);
  v146  = v320;
  WiFiInterface.preferences.getter();
  swift_release(v123);
  uint64_t v147 = rawValue;
  char v148 = Preferences.disableAuthentication.getter(rawValue);
  uint64_t v149 = *(void (**)(char *, uint64_t))(v321 + 8);
  v149(v146, v147);
  v304  = (void (*)(uint64_t, uint64_t))v149;
  v150  = (v148 & 1) != 0 || [(id)v76 authenticationType] != (id)1;
  v306  = v150;
  v346  = _swiftEmptyArrayStorage;
  char v154 = (char *)[(id)v76 datapathConfiguration];
  v320  = v154;
  v308  = v124;
  if (!v154)
  {
    uint64_t v156 = object;
LABEL_97:
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_147;
    }
    goto LABEL_98;
  }

  v155  = [v154 securityConfiguration];
  uint64_t v156 = object;
  if (!v155) {
    goto LABEL_97;
  }
  v303  = v155;
  id v157 = [v155 pmkList];
  uint64_t v158 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v157, &type metadata for Data);

  if (v158[2])
  {
    v159  = v158[4];
    unint64_t v160 = v158[5];
    sub_100020AFC(v159, v160);
    swift_bridgeObjectRelease(v158);
    uint64_t v161 = NANPMK.init(pmk:)(v159, v160);
    if (v162 >> 60 != 15)
    {
      v163  = v161;
      v164  = v162;
      v165  = [v303 pmkID];
      if (v165)
      {
        v166  = v165;
        v167  = v156;
        v168  = static Data._unconditionallyBridgeFromObjectiveC(_:)(v165);
        v170  = v169;

        NANPMK.ID.init(_:)(v168, v170);
        if (v172 >> 60 == 15)
        {
          sub_100020B40(v163, v164);
          uint64_t v156 = v167;
        }

        else
        {
          v197  = v172;
          v321  = v171;
          v198  = v311;
          swift_unownedRetainStrong(v311);
          v199  = v198 + *(void *)(*(void *)v198 + 656LL);
          swift_beginAccess(v199, v331, 0LL, 0LL);
          v200  = v313;
          sub_100057FE8(v199, v313, type metadata accessor for NANDriverCapabilities);
          swift_release(v198);
          v201  = *(void **)(v200 + 8);
          swift_bridgeObjectRetain(v201);
          sub_10005802C(v200, type metadata accessor for NANDriverCapabilities);
          v332  = v201;
          v202  = sub_100002274((uint64_t *)&unk_10040D460);
          v203  = sub_1000572E4( (unint64_t *)&qword_100407E70,  (uint64_t *)&unk_10040D460,  (uint64_t)&protocol conformance descriptor for [A]);
          v204  = Collection<>.strongestSupportedPublicKeySuite.getter(v202, v203);
          swift_bridgeObjectRelease(v201);
          if (v204 != 8)
          {
            swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
            v300  = sub_100002274((uint64_t *)&unk_10040E4D0);
            v263  = swift_allocObject(v300, 88LL, 7LL);
            *(_OWORD *)(v263 + 16)  = xmmword_100339900;
            *(_BYTE *)(v263 + 32)  = v204;
            *(void *)(v263 + 40)  = v163;
            *(void *)(v263 + 48)  = v164;
            *(void *)(v263 + 56)  = v321;
            *(void *)(v263 + 64)  = v197;
            *(void *)(v263 + 72)  = 0LL;
            *(void *)(v263 + 80)  = 0LL;

            v346  = (void *)v263;
            uint64_t v156 = v167;
            uint64_t v76 = (uint64_t)v325;
            goto LABEL_146;
          }

          sub_100020B40(v163, v164);
          sub_100020B40(v321, v197);
          uint64_t v156 = v167;
          unint64_t v124 = v308;
        }
      }

      else
      {
        sub_100020B40(v163, v164);
      }
    }
  }

  else
  {
    swift_bridgeObjectRelease(v158);
  }

  v205  = v311;
  swift_unownedRetainStrong(v311);
  v206  = v205 + *(void *)(*(void *)v205 + 656LL);
  swift_beginAccess(v206, v336, 0LL, 0LL);
  v207  = v316;
  sub_100057FE8(v206, v316, type metadata accessor for NANDriverCapabilities);
  swift_release(v205);
  v208  = *(void **)(v207 + 8);
  swift_bridgeObjectRetain(v208);
  sub_10005802C(v207, type metadata accessor for NANDriverCapabilities);
  v332  = v208;
  v209  = sub_100002274((uint64_t *)&unk_10040D460);
  v210  = sub_1000572E4( (unint64_t *)&qword_100407E70,  (uint64_t *)&unk_10040D460,  (uint64_t)&protocol conformance descriptor for [A]);
  LODWORD(v321)  = Collection<>.strongestSupportedSharedKeySuite.getter(v209, v210);
  v211  = v321;
  *(void *)&v212  = swift_bridgeObjectRelease(v208).n128_u64[0];
  if (v211 == 8)
  {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v213  = swift_bridgeObjectRetain(v156);
    v214  = (os_log_s *)Logger.logObject.getter(v213);
    v215  = v156;
    v216  = static os_log_type_t.error.getter(v214);
    if (os_log_type_enabled(v214, v216))
    {
      v217  = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v218  = (void *)swift_slowAlloc(32LL, -1LL);
      v332  = v218;
      *(_DWORD *)v217  = 136315138;
      swift_bridgeObjectRetain(v215);
      v219  = NANServiceName.description.getter(countAndFlagsBits, v215);
      v221  = v220;
      swift_bridgeObjectRelease(v215);
      v338  = sub_10000235C(v219, v221, (uint64_t *)&v332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339);
      swift_bridgeObjectRelease_n(v215, 2LL);
      v222  = v221;
      unint64_t v124 = v308;
      swift_bridgeObjectRelease(v222);
      _os_log_impl( (void *)&_mh_execute_header,  v214,  v216,  "Cannot create new publish %s because the client specified a security configuration but failed to derive a valid configuration",  v217,  0xCu);
      swift_arrayDestroy(v218, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v218, -1LL, -1LL);
      swift_slowDealloc(v217, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v215, 2LL);
    }

    v237  = v305;
    v238  = v320;
    v239  = sub_1000033FC();
    v240  = swift_allocError(&type metadata for WiFiError, v239, 0LL, 0LL);
    *(_OWORD *)v241  = xmmword_10035E1A0;
    *(_BYTE *)(v241 + 16)  = 1;
    swift_willThrow(v240);

    v242  = v307;
    p_type  = (int64_t)v303;
LABEL_173:

    swift_beginAccess(v237, &v332, 33LL, 0LL);
    sub_10013F868(v242);
    v296  = swift_endAccess(&v332);
    swift_willThrow(v296);
    swift_release(v124);
    sub_1000225EC((uint64_t)&v340, &qword_100409E58);
    return p_type;
  }

  v223  = objc_msgSend(v303, "pmkList", v212);
  v224  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v223, &type metadata for Data);

  v225  = *(void *)(v224 + 16);
  v226  = _swiftEmptyArrayStorage;
  if (v225)
  {
    swift_bridgeObjectRetain(v224);
    v227  = v224;
    v228  = (unint64_t *)(v224 + 40);
    v316  = xmmword_10033BED0;
    uint64_t v76 = (uint64_t)v325;
    do
    {
      v230  = *(v228 - 1);
      v231  = *v228;
      sub_100020AFC(v230, *v228);
      sub_100020AFC(v230, v231);
      v232  = NANPMK.init(pmk:)(v230, v231);
      v234  = v233;
      sub_1000208D8(v230, v231);
      if (v234 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v226) & 1) == 0) {
          v226  = sub_1002C9E94(0LL, v226[2] + 1LL, 1, v226);
        }
        v236  = v226[2];
        v235  = v226[3];
        if (v236 >= v235 >> 1) {
          v226  = sub_1002C9E94((void *)(v235 > 1), v236 + 1, 1, v226);
        }
        v226[2]  = v236 + 1;
        v229  = &v226[7 * v236];
        *((_BYTE *)v229 + 32)  = v321;
        v229[5]  = v232;
        v229[6]  = v234;
        *(_OWORD *)(v229 + 7)  = v316;
        v229[9]  = 0LL;
        v229[10]  = 0LL;
        uint64_t v76 = (uint64_t)v325;
      }

      v228 += 2;
      --v225;
    }

    while (v225);
    v224  = v227;
    swift_bridgeObjectRelease(v227);
    uint64_t v156 = object;
  }

  else
  {
    uint64_t v76 = (uint64_t)v325;
  }

  swift_bridgeObjectRelease(v224);
  sub_100304878((uint64_t)v226);
  v243  = [v303 passphraseList];
  v192  = static Array._unconditionallyBridgeFromObjectiveC(_:)(v243, &type metadata for String);

  unint64_t v124 = *(void *)(v192 + 16);
  if (v124)
  {
    v332  = _swiftEmptyArrayStorage;
    sub_100267F38(0, v124, 0);
    v193  = (void *)v192;
    v180  = v332;
    v244  = (uint64_t *)(v192 + 40);
    do
    {
      v245  = *(v244 - 1);
      uint64_t v76 = *v244;
      v246  = HIBYTE(*v244) & 0xF;
      if ((*v244 & 0x2000000000000000LL) == 0) {
        v246  = v245 & 0xFFFFFFFFFFFFLL;
      }
      if (!v246)
      {
        __break(1u);
        goto LABEL_179;
      }

      v332  = v180;
      v248  = v180[2];
      v247  = v180[3];
      swift_bridgeObjectRetain(v76);
      if (v248 >= v247 >> 1)
      {
        sub_100267F38(v247 > 1, v248 + 1, 1);
        v193  = (void *)v192;
        v180  = v332;
      }

      v244 += 2;
      v180[2]  = v248 + 1;
      v249  = &v180[2 * v248];
      v249[4]  = v245;
      v249[5]  = v76;
      --v124;
    }

    while (v124);
    swift_bridgeObjectRelease(v193);
    uint64_t v156 = object;
    uint64_t v76 = (uint64_t)v325;
  }

  else
  {
    swift_bridgeObjectRelease(v192);
    v180  = _swiftEmptyArrayStorage;
  }

  v250  = v180[2];
  if (v250)
  {
    v251  = (uint64_t)v156;
    v337  = _swiftEmptyArrayStorage;
    sub_100267F1C(0, v250, 0);
    v252  = v337;
    v253  = v180 + 5;
    v254  = v327;
    do
    {
      v255  = *v253;
      v338  = *(v253 - 1);
      v339[0]  = v255;
      swift_bridgeObjectRetain(v255);
      sub_100292D58(&v338, v321, countAndFlagsBits, v251, (uint64_t)v330, (uint64_t)&v332);
      swift_bridgeObjectRelease(v255);
      v256  = (char)v332;
      v257  = v333;
      v258  = v334;
      v259  = v335;
      v337  = v252;
      v261  = v252[2];
      v260  = v252[3];
      if (v261 >= v260 >> 1)
      {
        v327  = v333;
        v316  = v334;
        v313  = v335;
        sub_100267F1C(v260 > 1, v261 + 1, 1);
        v259  = v313;
        v258  = v316;
        v257  = v327;
        v252  = v337;
      }

      v252[2]  = v261 + 1;
      v262  = &v252[7 * v261];
      *((_BYTE *)v262 + 32)  = v256;
      v253 += 2;
      *(_OWORD *)(v262 + 5)  = v257;
      *(_OWORD *)(v262 + 7)  = v258;
      *(_OWORD *)(v262 + 9)  = v259;
      --v250;
    }

    while (v250);
    *(void *)&v327  = v254;
    swift_bridgeObjectRelease(v180);
    uint64_t v156 = (void *)v251;
    uint64_t v76 = (uint64_t)v325;
  }

  else
  {
    swift_bridgeObjectRelease(v180);
    v252  = _swiftEmptyArrayStorage;
  }

  sub_100304878((uint64_t)v252);

  v263  = (uint64_t)v346;
LABEL_146:
  unint64_t v124 = v308;
  unint64_t v123 = v311;
  if (!*(void *)(v263 + 16))
  {
LABEL_98:
    swift_unownedRetainStrong(v123);
    v173  = v315;
    WiFiInterface.preferences.getter();
    swift_release(v123);
    v174  = rawValue;
    v175  = Preferences.automaticallyUseEncryption.getter(rawValue);
    v304(v173, v174);
    if ((v175 & 1) == 0 && v306) {
      goto LABEL_147;
    }
    swift_unownedRetainStrong(v123);
    v176  = v123 + *(void *)(*(void *)v123 + 656LL);
    swift_beginAccess(v176, &v338, 0LL, 0LL);
    v177  = v314;
    sub_100057FE8(v176, v314, type metadata accessor for NANDriverCapabilities);
    swift_release(v123);
    v178  = *(void **)(v177 + 8);
    swift_bridgeObjectRetain(v178);
    sub_10005802C(v177, type metadata accessor for NANDriverCapabilities);
    v332  = v178;
    v180  = (void *)sub_100002274((uint64_t *)&unk_10040D460);
    v179  = sub_1000572E4( (unint64_t *)&qword_100407E70,  (uint64_t *)&unk_10040D460,  (uint64_t)&protocol conformance descriptor for [A]);
    LOBYTE(v180)  = Collection<>.strongestSupportedSharedKeySuite.getter((uint64_t)v180, v179);
    swift_bridgeObjectRelease(v178);
    if (v180 != 8)
    {
      v191  = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v191, *(unsigned int *)(v191 + 48), *(unsigned __int16 *)(v191 + 52));
      v192  = __DataStorage.init(length:)(32LL);
      v193  = v346;
      if ((swift_isUniquelyReferenced_nonNull_native(v346) & 1) != 0) {
        goto LABEL_106;
      }
      goto LABEL_181;
    }

    swift_bridgeObjectRelease(v346);
    v181  = swift_bridgeObjectRetain(v156);
    v182  = (os_log_s *)Logger.logObject.getter(v181);
    v183  = v156;
    v184  = static os_log_type_t.error.getter(v182);
    if (os_log_type_enabled(v182, v184))
    {
      v185  = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v186  = (void *)swift_slowAlloc(32LL, -1LL);
      v332  = v186;
      *(_DWORD *)v185  = 136315138;
      swift_bridgeObjectRetain(v183);
      v187  = NANServiceName.description.getter(countAndFlagsBits, v183);
      v189  = v188;
      swift_bridgeObjectRelease(v183);
      v337  = (void *)sub_10000235C(v187, v189, (uint64_t *)&v332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v337, &v338);
      swift_bridgeObjectRelease_n(v183, 2LL);
      v190  = v189;
      unint64_t v124 = v308;
      swift_bridgeObjectRelease(v190);
      _os_log_impl( (void *)&_mh_execute_header,  v182,  v184,  "Cannot create new publish %s because encryption is required but no suitable cipher suite exists",  v185,  0xCu);
      swift_arrayDestroy(v186, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v186, -1LL, -1LL);
      swift_slowDealloc(v185, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v183, 2LL);
    }

    v237  = v305;
    p_type  = (int64_t)v320;
    v297  = sub_1000033FC();
    v298  = swift_allocError(&type metadata for WiFiError, v297, 0LL, 0LL);
    *(_OWORD *)v299  = xmmword_10035E1A0;
    *(_BYTE *)(v299 + 16)  = 1;
    swift_willThrow(v298);
    v242  = v307;
    goto LABEL_173;
  }

  while (1)
  {
LABEL_147:
    v192  = (uint64_t)[(id)v76 multicastAddress];
    if (v192)
    {
      WiFiMACAddress.wifiAddress.getter();
      v265  = v264;

      v266  = v265 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      v266  = 0LL;
    }

    if (v320 && (v267  = [v320 serviceSpecificInfo]) != 0)
    {
      v268  = v267;
      rawValue  = WiFiAwarePublishDatapathServiceSpecificInfo.genericServiceProtocol.getter();
    }

    else
    {
      rawValue  = (uint64_t)NANGenericServiceProtocol.init()().attributes._rawValue;
    }

    v328  = v346;
    v269  = [(id)v76 serviceSpecificInfo];
    if (v269
      && (v270  = v269,
          v271  = [v269 instanceName],
          v270,
          v271))
    {
      v321  = static String._unconditionallyBridgeFromObjectiveC(_:)(v271);
      *(void *)&v316  = v272;
    }

    else
    {
      v321  = 0LL;
      *(void *)&v316  = 0LL;
    }

    v273  = [(id)v76 serviceSpecificInfo];
    if (v273
      && (v274  = v273, v275  = [v273 blob], v274, v275))
    {
      v315  = static Data._unconditionallyBridgeFromObjectiveC(_:)(v275);
      v314  = v276;
    }

    else
    {
      v315  = 0LL;
      v314  = 0xF000000000000000LL;
    }

    v277  = [(id)v76 serviceSpecificInfo];
    if (v277)
    {
      v278  = v277;
      v279  = (void *)v124;
      v280  = [v277 txtRecordData];

      v281  = v266;
      if (v280)
      {
        v180  = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v280);
        unint64_t v124 = v282;

        goto LABEL_167;
      }
    }

    else
    {
      v281  = v266;
      v279  = (void *)v124;
    }

    v180  = 0LL;
    unint64_t v124 = 0xF000000000000000LL;
LABEL_167:
    v283  = v311;
    swift_unownedRetainStrong(v311);
    uint64_t v76 = WiFiInterface.macAddress.getter();
    v284  = swift_release(v283);
    v193  = v279;
    v285  = (*(uint64_t (**)(uint64_t))(*v279 + 232LL))(v284);
    v286  = NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor();
    if (*v286 >> 54)
    {
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }

    v287  = *v286 << 10;
    if ((v287 & 0x8000000000000000LL) == 0) {
      break;
    }
LABEL_180:
    __break(1u);
LABEL_181:
    v193  = sub_1002C9E94(0LL, v193[2] + 1LL, 1, v193);
LABEL_106:
    v195  = v193[2];
    v194  = v193[3];
    if (v195 >= v194 >> 1) {
      v193  = sub_1002C9E94((void *)(v194 > 1), v195 + 1, 1, v193);
    }
    v193[2]  = v195 + 1;
    v196  = &v193[7 * v195];
    *((_BYTE *)v196 + 32)  = (_BYTE)v180;
    v196[5]  = 0x2000000000LL;
    v196[6]  = v192 | 0x4000000000000000LL;
    *(_OWORD *)(v196 + 7)  = xmmword_10033BED0;
    v196[9]  = 0LL;
    v196[10]  = 0LL;
    v346  = v193;
  }

  *v324  = v287;
  (*(void (**)(void))(v317 + 104))();
  v288  = v325;
  v289  = WiFiAwarePublishConfiguration.furtherServiceDiscoveryFunction.getter();
  v290  = [v288 fastDiscoveryConfiguration];
  v291  = v290;
  if (v290) {

  }
  sub_1000226B0((uint64_t)&v340, (uint64_t)&v332, &qword_100409E58);
  LOBYTE(v337)  = v192 == 0;
  v301  = v281 | ((unint64_t)(v192 == 0) << 48);
  v292  = v319;
  v242  = v307;
  NANPublish.Configuration.init(instanceID:serviceName:instanceName:blob:txtRecordData:managementAddress:responderAddress:datapathConfiguration:announcementPeriod:furtherServiceDiscoveryFunction:enableFastDiscovery:authenticationType:internetSharingConfiguration:pairingBootstrappingMethod:publisherType:multicastAddress:multicastServiceType:)( v307,  countAndFlagsBits,  (uint64_t)object,  v321,  v316,  v315,  v314,  (uint64_t)v180,  v319,  v124,  v76 & 0xFFFFFFFFFFFFLL,  v285 & 0xFFFFFFFFFFFFLL,  ((_DWORD)v310 << 16) | 0x200,  rawValue,  (uint64_t)v328,  (uint64_t)v324,  v289,  v291 != 0LL,  v306,  (uint64_t)&v332,  0,  1u,  v301,  1);
  __chkstk_darwin();
  KeyPath  = (void *)swift_getKeyPath(&unk_10035EFA8);
  v294  = v327;
  v295  = sub_10028E898(v292, KeyPath, v326);
  if (v294)
  {
    sub_10005802C(v292, type metadata accessor for NANPublish.Configuration);
    swift_release(KeyPath);
    p_type  = (int64_t)v320;
    unint64_t v124 = v308;
    v237  = v305;
    goto LABEL_173;
  }

  p_type  = v295;

  swift_release(KeyPath);
  swift_release(v308);
  sub_10005802C(v292, type metadata accessor for NANPublish.Configuration);
  sub_1000225EC((uint64_t)&v340, &qword_100409E58);
  return p_type;
}

uint64_t sub_100292CF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1) {
    return NWEndpoint.Port.init(rawValue:)([a1 servicePort]);
  }
  uint64_t v4 = type metadata accessor for NWEndpoint.Port(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a2, 1LL, 1LL, v4);
}

uint64_t sub_100292D58@<X0>( uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a5 + *(void *)(*(void *)a5 + 280LL));
  swift_unownedRetainStrong(v12);
  uint64_t v13 = WiFiInterface.macAddress.getter();
  swift_release(v12);
  uint64_t v14 = NANPassphrase.pmk(for:serviceName:publisherAddress:)(a2, a3, a4, v13 & 0xFFFFFFFFFFFFLL, v10, v11);
  *(_BYTE *)a6  = a2;
  *(void *)(a6 + 8)  = v14;
  *(void *)(a6 + 16)  = v15;
  *(_OWORD *)(a6 + 24)  = xmmword_10033BED0;
  *(void *)(a6 + 40)  = v10;
  *(void *)(a6 + 48)  = v11;
  return swift_bridgeObjectRetain(v11);
}

uint64_t sub_100292E0C(uint64_t a1, void *a2)
{
  v963  = a1;
  uint64_t v4 = *v2;
  sub_100002274(&qword_1004050A0);
  __chkstk_darwin();
  v933  = (uint64_t)&v917 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for OWEKeys(0LL);
  __chkstk_darwin();
  v928  = (uint64_t)&v917 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040D470);
  __chkstk_darwin();
  v932  = (uint64_t)&v917 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v927  = (uint64_t)&v917 - v8;
  v930  = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v9 = *(void *)(v930 - 8);
  __chkstk_darwin();
  v923  = (char *)&v917 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274((uint64_t *)&unk_10040F0F0);
  __chkstk_darwin();
  v925  = (uint64_t)&v917 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v924  = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0LL);
  __chkstk_darwin();
  v926  = (uint64_t *)((char *)&v917 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void *)(v4 + 80);
  v957  = *(uint8_t **)(v4 + 88);
  uint64_t v14 = *((void *)v957 + 1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v14,  v13,  &protocol requirements base descriptor for P2PControls);
  v956  = v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v14,  v13,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PControls,  &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  uint64_t v17 = swift_getAssociatedTypeWitness( 255LL,  AssociatedConformanceWitness,  AssociatedTypeWitness,  &protocol requirements base descriptor for P2PComponents);
  uint64_t v18 = swift_getAssociatedConformanceWitness( AssociatedConformanceWitness,  AssociatedTypeWitness,  v17,  &protocol requirements base descriptor for P2PComponents,  &associated conformance descriptor for P2PComponents.P2PComponents.PreferencesBacking: PreferencesStorage);
  uint64_t v20 = type metadata accessor for Preferences(0LL, v17, v18, v19);
  v937  = *(void *)(v20 - 8);
  __chkstk_darwin();
  v936  = (char *)&v917 - v21;
  type metadata accessor for NANPeer(0LL);
  __chkstk_darwin();
  v934  = (uint64_t)&v917 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100002274(&qword_10040E460);
  __chkstk_darwin();
  v935  = (uint64_t *)((char *)&v917 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v942  = type metadata accessor for NANDriverCapabilities(0LL);
  __chkstk_darwin();
  v929  = (uint64_t)&v917 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v931  = (uint64_t)&v917 - v25;
  __chkstk_darwin();
  v922  = (uint64_t)&v917 - v26;
  __chkstk_darwin();
  v941  = (uint64_t)&v917 - v27;
  v951  = type metadata accessor for Logger(0LL);
  v946  = *(uint8_t **)(v951 - 8);
  __chkstk_darwin();
  v938  = v28;
  v939  = (char *)&v917 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin();
  v945  = (unint64_t)&v917 - v29;
  id v30 = [a2 discoveryResult];
  id v31 = [v30 serviceName];

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  v35._countAndFlagsBits  = v32;
  v35._object  = v34;
  CoreP2P::NANServiceName_optional v36 = NANServiceName.init(_:)(v35);
  if (!v36.value.string._object)
  {
    uint64_t v100 = swift_allocObject(&unk_1003F5888, 24LL, 7LL);
    *(void *)(v100 + 16)  = a2;
    double v101 = (os_log_s *)Logger.logObject.getter(a2);
    int v102 = static os_log_type_t.error.getter(v101);
    uint64_t v103 = swift_allocObject(&unk_1003F58B0, 17LL, 7LL);
    *(_BYTE *)(v103 + 16)  = 32;
    p_type  = swift_allocObject(&unk_1003F58D8, 17LL, 7LL);
    *(_BYTE *)(p_type + 16)  = 8;
    uint64_t v104 = swift_allocObject(&unk_1003F5900, 32LL, 7LL);
    *(void *)(v104 + 16)  = sub_1002A08B8;
    *(void *)(v104 + 24)  = v100;
    v105  = swift_allocObject(&unk_1003F5928, 32LL, 7LL);
    *(void *)(v105 + 16)  = sub_1002A08E8;
    *(void *)(v105 + 24)  = v104;
    uint64_t v106 = sub_100002274(&qword_10040E468);
    uint64_t v107 = swift_allocObject(v106, 80LL, 7LL);
    *(_OWORD *)(v107 + 16)  = xmmword_100339910;
    *(void *)(v107 + 32)  = sub_1002A08D0;
    *(void *)(v107 + 40)  = v103;
    BOOL v108 = (uint8_t *)sub_1002A1A0C;
    *(void *)(v107 + 48)  = sub_1002A1A0C;
    *(void *)(v107 + 56)  = p_type;
    *(void *)(v107 + 64)  = sub_1002A08F0;
    *(void *)(v107 + 72)  = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v107);
    if (os_log_type_enabled(v101, (os_log_type_t)v102))
    {
      LODWORD(v973)  = v102;
      uint64_t v109 = (uint8_t *)sub_100002B30(12LL);
      v110  = swift_slowAlloc(32LL, -1LL);
      *(void *)&v979[0]  = 0LL;
      v988[0]  = v110;
      *(_WORD *)uint64_t v109 = 258;
      *(void *)&v989[0]  = v109 + 2;
      *(void *)&v980  = sub_1002A08D0;
      *((void *)&v980 + 1)  = v103;
      double v111 = v974;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
      uint64_t v112 = (uint64_t)v111;
      if (v111) {
        goto LABEL_232;
      }
      swift_release(v103);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = p_type;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
      swift_release(p_type);
      *(void *)&v980  = sub_1002A08F0;
      *((void *)&v980 + 1)  = v105;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
      swift_release(v105);
      _os_log_impl( (void *)&_mh_execute_header,  v101,  (os_log_type_t)v973,  "Cannot create new datapath because '%s' is not a valid service name",  v109,  0xCu);
      swift_arrayDestroy(v110, 1LL, &type metadata for Any[8]);
      swift_slowDealloc(v110, -1LL, -1LL);
      sub_100002B24((uint64_t)v109);
    }

    else
    {
      swift_release(v105);
      swift_release(p_type);
      swift_release(v103);
    }

    unint64_t v124 = sub_1000033FC();
    uint64_t v125 = swift_allocError(&type metadata for WiFiError, v124, 0LL, 0LL);
    *(_OWORD *)uint64_t v126 = xmmword_10033A940;
    *(_BYTE *)(v126 + 16)  = 1;
    swift_willThrow(v125);
    return p_type;
  }

  v919  = v9;
  v920  = v20;
  object  = v36.value.string._object;
  id v37 = [a2 discoveryResult];
  id v38 = [v37 publisherAddress];

  WiFiMACAddress.wifiAddress.getter();
  unint64_t v40 = v39;

  v968  = (os_log_s *)HIDWORD(v40);
  v969  = v40 >> 24;
  v970  = (_BYTE *)(v40 >> 40);
  id v41 = [a2 discoveryResult];
  LODWORD(v971)  = [v41 publishID];

  v950  = a2;
  id v42 = [a2 discoveryResult];
  unsigned int v43 = [v42 subscribeID];

  uint64_t v44 = (char *)v973 + qword_100410AF8;
  uint64_t v45 = swift_allocObject(&unk_1003F5950, 32LL, 7LL);
  countAndFlagsBits  = (uint8_t *)v36.value.string._countAndFlagsBits;
  uint64_t v46 = object;
  *(void *)(v45 + 16)  = v36.value.string._countAndFlagsBits;
  *(void *)(v45 + 24)  = v46;
  uint64_t v47 = swift_allocObject(&unk_1003F5978, 32LL, 7LL);
  *(void *)(v47 + 16)  = sub_1002A08F8;
  *(void *)(v47 + 24)  = v45;
  v960  = (_BYTE *)swift_allocObject(&unk_1003F59A0, 17LL, 7LL);
  v943  = v43;
  v960[16]  = v43;
  unint64_t v48 = (_BYTE *)swift_allocObject(&unk_1003F59C8, 22LL, 7LL);
  v952  = v40;
  v953  = v40 >> 16;
  v48[16]  = v40;
  v954  = v40 >> 8;
  v48[17]  = BYTE1(v40);
  v48[18]  = BYTE2(v40);
  v48[19]  = v969;
  v48[20]  = (_BYTE)v968;
  v48[21]  = (_BYTE)v970;
  uint64_t v49 = swift_allocObject(&unk_1003F59F0, 32LL, 7LL);
  *(void *)(v49 + 16)  = sub_1002A1CC4;
  *(void *)(v49 + 24)  = v48;
  v949  = (uint8_t *)swift_allocObject(&unk_1003F5A18, 17LL, 7LL);
  v949[16]  = v971;
  uint64_t v50 = swift_bridgeObjectRetain(v46);
  v944  = v44;
  v962  = (uint8_t *)Logger.logObject.getter(v50);
  LODWORD(v961)  = static os_log_type_t.default.getter();
  v964  = (uint8_t *)swift_allocObject(&unk_1003F5A40, 17LL, 7LL);
  v964[16]  = 32;
  v966  = (_BYTE *)swift_allocObject(&unk_1003F5A68, 17LL, 7LL);
  v966[16]  = 8;
  uint64_t v51 = swift_allocObject(&unk_1003F5A90, 32LL, 7LL);
  *(void *)(v51 + 16)  = sub_1002A0904;
  *(void *)(v51 + 24)  = v47;
  uint64_t v52 = swift_allocObject(&unk_1003F5AB8, 32LL, 7LL);
  v965  = v52;
  *(void *)(v52 + 16)  = sub_1002A19EC;
  *(void *)(v52 + 24)  = v51;
  id v53 = (_BYTE *)swift_allocObject(&unk_1003F5AE0, 17LL, 7LL);
  v53[16]  = 0;
  uint64_t v54 = swift_allocObject(&unk_1003F5B08, 17LL, 7LL);
  *(_BYTE *)(v54 + 16)  = 1;
  unint64_t v55 = (uint8_t *)v54;
  uint64_t v56 = swift_allocObject(&unk_1003F5B30, 32LL, 7LL);
  uint64_t v57 = v960;
  *(void *)(v56 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
  *(void *)(v56 + 24)  = v57;
  uint64_t v58 = swift_allocObject(&unk_1003F5B58, 32LL, 7LL);
  v958  = v58;
  *(void *)(v58 + 16)  = sub_1002A0984;
  *(void *)(v58 + 24)  = v56;
  uint64_t v59 = swift_allocObject(&unk_1003F5B80, 17LL, 7LL);
  *(_BYTE *)(v59 + 16)  = 32;
  uint64_t v60 = v59;
  v947  = v59;
  v948  = swift_allocObject(&unk_1003F5BA8, 17LL, 7LL);
  *(_BYTE *)(v948 + 16)  = 8;
  uint64_t v61 = swift_allocObject(&unk_1003F5BD0, 32LL, 7LL);
  *(void *)(v61 + 16)  = sub_1002A092C;
  *(void *)(v61 + 24)  = v49;
  uint64_t v62 = swift_allocObject(&unk_1003F5BF8, 32LL, 7LL);
  *(void *)(v62 + 16)  = sub_1002A19EC;
  *(void *)(v62 + 24)  = v61;
  uint64_t v63 = v62;
  v959  = (uint8_t *)v62;
  v960  = (_BYTE *)swift_allocObject(&unk_1003F5C20, 17LL, 7LL);
  v960[16]  = 0;
  uint64_t v64 = swift_allocObject(&unk_1003F5C48, 17LL, 7LL);
  *(_BYTE *)(v64 + 16)  = 1;
  uint64_t v65 = v64;
  uint64_t v66 = swift_allocObject(&unk_1003F5C70, 32LL, 7LL);
  uint64_t v67 = v949;
  *(void *)(v66 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
  *(void *)(v66 + 24)  = v67;
  uint64_t v68 = swift_allocObject(&unk_1003F5C98, 32LL, 7LL);
  *(void *)(v68 + 16)  = sub_1002A1CC8;
  *(void *)(v68 + 24)  = v66;
  v967  = v53;
  v940  = sub_100002274(&qword_10040E468);
  uint64_t v69 = swift_allocObject(v940, 224LL, 7LL);
  v921  = xmmword_10035EAC0;
  *(_OWORD *)(v69 + 16)  = xmmword_10035EAC0;
  *(void *)(v69 + 32)  = sub_1002A1A0C;
  uint64_t v70 = v965;
  *(void *)(v69 + 40)  = v964;
  *(void *)(v69 + 48)  = sub_1002A1A0C;
  *(void *)(v69 + 56)  = v966;
  *(void *)(v69 + 64)  = sub_1002A19FC;
  *(void *)(v69 + 72)  = v70;
  *(void *)(v69 + 80)  = sub_1002A1A0C;
  *(void *)(v69 + 88)  = v53;
  *(void *)(v69 + 96)  = sub_1002A1A0C;
  __int128 v71 = v55;
  *(void *)(v69 + 104)  = v55;
  *(void *)(v69 + 112)  = sub_1002A098C;
  uint64_t v72 = v958;
  *(void *)(v69 + 120)  = v958;
  *(void *)(v69 + 128)  = sub_1002A1A0C;
  *(void *)(v69 + 136)  = v60;
  *(void *)(v69 + 144)  = sub_1002A1A0C;
  uint64_t v73 = v948;
  *(void *)(v69 + 152)  = v948;
  *(void *)(v69 + 160)  = sub_1002A19FC;
  *(void *)(v69 + 168)  = v63;
  *(void *)(v69 + 176)  = sub_1002A1A0C;
  uint64_t v74 = v960;
  *(void *)(v69 + 184)  = v960;
  *(void *)(v69 + 192)  = sub_1002A1A0C;
  *(void *)(v69 + 200)  = v65;
  *(void *)(v69 + 208)  = sub_1002A1A00;
  *(void *)(v69 + 216)  = v68;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v75 = v959;
  swift_retain();
  v949  = v71;
  uint64_t v76 = v947;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v77 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease(v69);
  uint64_t v78 = v962;
  if (os_log_type_enabled((os_log_t)v962, (os_log_type_t)v961))
  {
    int v79 = v949;
    p_type  = v76;
    uint64_t v81 = v77;
    v918  = v65;
    id v82 = (uint8_t *)sub_100002B30(28LL);
    uint64_t v83 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v979[0]  = 0LL;
    v988[0]  = v83;
    *(_WORD *)id v82 = 1026;
    *(void *)&v989[0]  = v82 + 2;
    *(void *)&v980  = sub_1002A1A0C;
    id v84 = v964;
    *((void *)&v980 + 1)  = v964;
    unint64_t v85 = v974;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    uint64_t v86 = (uint64_t)v85;
    if (v85)
    {
LABEL_225:
      swift_errorRelease(v86);
      __break(1u);
      swift_errorRelease(v85);
      __break(1u);
      goto LABEL_226;
    }

    v917  = v83;
    v974  = v82;
    swift_release(v84);
    *(void *)&v980  = sub_1002A1A0C;
    uint64_t v87 = v966;
    *((void *)&v980 + 1)  = v966;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(v87);
    *(void *)&v980  = sub_1002A19FC;
    uint64_t v88 = v965;
    *((void *)&v980 + 1)  = v965;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    id v89 = v973;
    swift_release(v88);
    *(void *)&v980  = sub_1002A1A0C;
    uint64_t v90 = v967;
    *((void *)&v980 + 1)  = v967;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(v90);
    *(void *)&v980  = sub_1002A1A0C;
    *((void *)&v980 + 1)  = v79;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(v79);
    *(void *)&v980  = sub_1002A098C;
    uint64_t v91 = v958;
    *((void *)&v980 + 1)  = v958;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(v91);
    *(void *)&v980  = sub_1002A1A0C;
    *((void *)&v980 + 1)  = p_type;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(p_type);
    *(void *)&v980  = sub_1002A1A0C;
    *((void *)&v980 + 1)  = v81;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    id v92 = (os_log_s *)v962;
    swift_release(v81);
    *(void *)&v980  = sub_1002A19FC;
    uint64_t v93 = v959;
    *((void *)&v980 + 1)  = v959;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(v93);
    *(void *)&v980  = sub_1002A1A0C;
    id v94 = v960;
    *((void *)&v980 + 1)  = v960;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(v94);
    *(void *)&v980  = sub_1002A1A0C;
    uint64_t v95 = v918;
    *((void *)&v980 + 1)  = v918;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    swift_release(v95);
    *(void *)&v980  = sub_1002A1A00;
    uint64_t v96 = v68;
    *((void *)&v980 + 1)  = v68;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v989,  (uint64_t)v979,  (uint64_t)v988);
    uint64_t v97 = 0LL;
    swift_release(v96);
    uint64_t v98 = v974;
    _os_log_impl( (void *)&_mh_execute_header,  v92,  (os_log_type_t)v961,  "New client requesting a datapath for the service %s[%hhu] to %s[%hhu]",  v974,  0x1Cu);
    uint64_t v99 = v917;
    swift_arrayDestroy(v917, 2LL, &type metadata for Any[8]);
    swift_slowDealloc(v99, -1LL, -1LL);
    sub_100002B24((uint64_t)v98);
  }

  else
  {
    swift_release(v68);
    swift_release(v65);
    swift_release(v74);
    swift_release(v75);
    swift_release(v77);
    swift_release(v76);
    swift_release(v72);
    swift_release(v949);
    swift_release(v967);
    swift_release(v965);
    swift_release(v966);
    swift_release(v964);

    id v89 = v973;
    uint64_t v97 = v974;
  }

  sub_1000226B0(v963, (uint64_t)&v980, (uint64_t *)&unk_10040E450);
  if (v983 == 1)
  {
    sub_1000225EC((uint64_t)&v980, (uint64_t *)&unk_10040E450);
  }

  else
  {
    uint64_t v113 = (char *)v980;
    uint64_t v114 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
    id v115 = [v114 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareDatapathXPC];
    uint64_t v116 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    [*(id *)&v113[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setExportedInterface:v115];

    id v117 = [v114 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareDatapathXPCDelegate];
    [*(id *)&v113[v116] setRemoteObjectInterface:v117];
  }

  id v118 = v950;
  p_type  = (uint64_t)&stru_100401FF0.type;
  id v119 = [v950 serviceType];
  if (v119 == (id)2) {
    int v120 = 2;
  }
  else {
    int v120 = v119 == (id)1;
  }
  v121  = [v118 internetSharingConfiguration];
  v974  = v97;
  if (!v121)
  {
    memset(v989, 0, 24);
    *(_OWORD *)((char *)&v989[1] + 8)  = xmmword_100337020;
    goto LABEL_19;
  }

  v122  = v121;
  id v123 = [v121 interfaceName];
  if (v123)
  {
  }

  else if (([v122 automatic] & 1) == 0 {
         && ([v122 provider] & 1) == 0)
  }
  {

    memset(v989, 0, 40);
    goto LABEL_19;
  }

  id v127 = [v122 interfaceName];
  if (v127)
  {

LABEL_32:
    v131  = swift_allocObject(&unk_1003F8178, 32LL, 7LL);
    id v132 = object;
    *(void *)(v131 + 16)  = countAndFlagsBits;
    *(void *)(v131 + 24)  = v132;
    v133  = swift_allocObject(&unk_1003F81A0, 32LL, 7LL);
    *(void *)(v133 + 16)  = sub_1002A1CA4;
    *(void *)(v133 + 24)  = v131;
    v134  = swift_allocObject(&unk_1003F81C8, 17LL, 7LL);
    *(_BYTE *)(v134 + 16)  = v943;
    uint64_t v135 = (_BYTE *)swift_allocObject(&unk_1003F81F0, 22LL, 7LL);
    v135[16]  = v952;
    v135[17]  = v954;
    v135[18]  = v953;
    v135[19]  = v969;
    v135[20]  = (_BYTE)v968;
    v135[21]  = (_BYTE)v970;
    v136  = swift_allocObject(&unk_1003F8218, 32LL, 7LL);
    *(void *)(v136 + 16)  = sub_1002A12F4;
    *(void *)(v136 + 24)  = v135;
    v137  = swift_allocObject(&unk_1003F8240, 17LL, 7LL);
    *(_BYTE *)(v137 + 16)  = (_BYTE)v971;
    v973  = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F8268, 24LL, 7LL);
    *((void *)v973 + 2)  = v122;
    v961  = swift_allocObject(&unk_1003F8290, 24LL, 7LL);
    *(void *)(v961 + 16)  = v122;
    v964  = (uint8_t *)swift_allocObject(&unk_1003F82B8, 24LL, 7LL);
    *((void *)v964 + 2)  = v122;
    uint64_t v138 = swift_allocObject(&unk_1003F82E0, 17LL, 7LL);
    *(_BYTE *)(v138 + 16)  = v120;
    uint64_t v139 = swift_allocObject(&unk_1003F8308, 32LL, 7LL);
    v963  = v139;
    *(void *)(v139 + 16)  = sub_1002A13D0;
    *(void *)(v139 + 24)  = v138;
    v949  = v122;
    v959  = (uint8_t *)Logger.logObject.getter(v949);
    LODWORD(v952)  = static os_log_type_t.error.getter(v959);
    v953  = swift_allocObject(&unk_1003F8330, 17LL, 7LL);
    *(_BYTE *)(v953 + 16)  = 32;
    countAndFlagsBits  = (uint8_t *)swift_allocObject(&unk_1003F8358, 17LL, 7LL);
    countAndFlagsBits[16]  = 8;
    v140  = swift_allocObject(&unk_1003F8380, 32LL, 7LL);
    *(void *)(v140 + 16)  = sub_1002A19F0;
    *(void *)(v140 + 24)  = v133;
    v141  = swift_allocObject(&unk_1003F83A8, 32LL, 7LL);
    v954  = v141;
    *(void *)(v141 + 16)  = sub_1002A19EC;
    *(void *)(v141 + 24)  = v140;
    v956  = swift_allocObject(&unk_1003F83D0, 17LL, 7LL);
    *(_BYTE *)(v956 + 16)  = 0;
    v966  = (_BYTE *)swift_allocObject(&unk_1003F83F8, 17LL, 7LL);
    v966[16]  = 1;
    v142  = swift_allocObject(&unk_1003F8420, 32LL, 7LL);
    *(void *)(v142 + 16)  = NANDriverCapabilities.mode.getter;
    *(void *)(v142 + 24)  = v134;
    uint64_t v143 = swift_allocObject(&unk_1003F8448, 32LL, 7LL);
    v965  = v143;
    *(void *)(v143 + 16)  = sub_1002A1CC8;
    *(void *)(v143 + 24)  = v142;
    v967  = (_BYTE *)swift_allocObject(&unk_1003F8470, 17LL, 7LL);
    v967[16]  = 32;
    v969  = swift_allocObject(&unk_1003F8498, 17LL, 7LL);
    *(_BYTE *)(v969 + 16)  = 8;
    v144  = swift_allocObject(&unk_1003F84C0, 32LL, 7LL);
    *(void *)(v144 + 16)  = sub_1002A19F4;
    *(void *)(v144 + 24)  = v136;
    unint64_t v145 = (os_log_s *)swift_allocObject(&unk_1003F84E8, 32LL, 7LL);
    v968  = v145;
    *((void *)v145 + 2)  = sub_1002A19EC;
    *((void *)v145 + 3)  = v144;
    v970  = (_BYTE *)swift_allocObject(&unk_1003F8510, 17LL, 7LL);
    v970[16]  = 0;
    object  = (_BYTE *)swift_allocObject(&unk_1003F8538, 17LL, 7LL);
    object[16]  = 1;
    v146  = swift_allocObject(&unk_1003F8560, 32LL, 7LL);
    *(void *)(v146 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
    *(void *)(v146 + 24)  = v137;
    uint64_t v147 = (void *)swift_allocObject(&unk_1003F8588, 32LL, 7LL);
    v971  = v147;
    v147[2]  = sub_1002A1CC8;
    v147[3]  = v146;
    v962  = (uint8_t *)swift_allocObject(&unk_1003F85B0, 17LL, 7LL);
    v962[16]  = 32;
    v957  = (uint8_t *)swift_allocObject(&unk_1003F85D8, 17LL, 7LL);
    v957[16]  = 8;
    uint64_t v148 = swift_allocObject(&unk_1003F8600, 32LL, 7LL);
    uint64_t v149 = v973;
    *(void *)(v148 + 16)  = sub_1002A1318;
    *(void *)(v148 + 24)  = v149;
    v150  = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F8628, 32LL, 7LL);
    v973  = v150;
    *((void *)v150 + 2)  = sub_1002A19EC;
    *((void *)v150 + 3)  = v148;
    v151  = swift_allocObject(&unk_1003F8650, 17LL, 7LL);
    *(_BYTE *)(v151 + 16)  = 32;
    v152  = v151;
    uint64_t v153 = swift_allocObject(&unk_1003F8678, 17LL, 7LL);
    *(_BYTE *)(v153 + 16)  = 8;
    uint64_t v154 = swift_allocObject(&unk_1003F86A0, 32LL, 7LL);
    v155  = v961;
    *(void *)(v154 + 16)  = sub_1002A1360;
    *(void *)(v154 + 24)  = v155;
    uint64_t v156 = swift_allocObject(&unk_1003F86C8, 32LL, 7LL);
    *(void *)(v156 + 16)  = sub_1002A19EC;
    *(void *)(v156 + 24)  = v154;
    uint64_t v157 = v156;
    v950  = (id)swift_allocObject(&unk_1003F86F0, 17LL, 7LL);
    *((_BYTE *)v950 + 16)  = 32;
    v951  = swift_allocObject(&unk_1003F8718, 17LL, 7LL);
    *(_BYTE *)(v951 + 16)  = 8;
    uint64_t v158 = swift_allocObject(&unk_1003F8740, 32LL, 7LL);
    v159  = v964;
    *(void *)(v158 + 16)  = sub_1002A13B8;
    *(void *)(v158 + 24)  = v159;
    uint64_t v160 = swift_allocObject(&unk_1003F8768, 32LL, 7LL);
    v961  = v160;
    *(void *)(v160 + 16)  = sub_1002A19EC;
    *(void *)(v160 + 24)  = v158;
    v960  = (_BYTE *)swift_allocObject(&unk_1003F8790, 17LL, 7LL);
    v960[16]  = 32;
    v964  = (uint8_t *)swift_allocObject(&unk_1003F87B8, 17LL, 7LL);
    v964[16]  = 8;
    uint64_t v161 = swift_allocObject(&unk_1003F87E0, 32LL, 7LL);
    v162  = v963;
    *(void *)(v161 + 16)  = sub_1002A13DC;
    *(void *)(v161 + 24)  = v162;
    v163  = swift_allocObject(&unk_1003F8808, 32LL, 7LL);
    v963  = v163;
    *(void *)(v163 + 16)  = sub_1002A19EC;
    *(void *)(v163 + 24)  = v161;
    v958  = v153;
    v164  = swift_allocObject(v940, 416LL, 7LL);
    *(_OWORD *)(v164 + 16)  = xmmword_10035EAD0;
    *(void *)(v164 + 32)  = sub_1002A1A0C;
    v165  = v954;
    *(void *)(v164 + 40)  = v953;
    *(void *)(v164 + 48)  = sub_1002A1A0C;
    v166  = v956;
    *(void *)(v164 + 56)  = countAndFlagsBits;
    *(void *)(v164 + 64)  = sub_1002A19FC;
    *(void *)(v164 + 72)  = v165;
    *(void *)(v164 + 80)  = sub_1002A1A0C;
    *(void *)(v164 + 88)  = v166;
    *(void *)(v164 + 96)  = sub_1002A1A0C;
    *(void *)(v164 + 104)  = v966;
    *(void *)(v164 + 112)  = sub_1002A1A00;
    *(void *)(v164 + 120)  = v965;
    *(void *)(v164 + 128)  = sub_1002A1A0C;
    *(void *)(v164 + 136)  = v967;
    *(void *)(v164 + 144)  = sub_1002A1A0C;
    *(void *)(v164 + 152)  = v969;
    *(void *)(v164 + 160)  = sub_1002A19FC;
    *(void *)(v164 + 168)  = v968;
    *(void *)(v164 + 176)  = sub_1002A1A0C;
    *(void *)(v164 + 184)  = v970;
    *(void *)(v164 + 192)  = sub_1002A1A0C;
    *(void *)(v164 + 200)  = object;
    *(void *)(v164 + 208)  = sub_1002A1A00;
    *(void *)(v164 + 216)  = v971;
    *(void *)(v164 + 224)  = sub_1002A1A0C;
    *(void *)(v164 + 232)  = v962;
    *(void *)(v164 + 240)  = sub_1002A1A0C;
    *(void *)(v164 + 248)  = v957;
    *(void *)(v164 + 256)  = sub_1002A19FC;
    *(void *)(v164 + 264)  = v973;
    *(void *)(v164 + 272)  = sub_1002A1A0C;
    v167  = v152;
    *(void *)(v164 + 280)  = v152;
    *(void *)(v164 + 288)  = sub_1002A1A0C;
    *(void *)(v164 + 296)  = v153;
    *(void *)(v164 + 304)  = sub_1002A19FC;
    uint64_t v86 = v157;
    *(void *)(v164 + 312)  = v157;
    *(void *)(v164 + 320)  = sub_1002A1A0C;
    v168  = v950;
    uint64_t v68 = v951;
    *(void *)(v164 + 328)  = v950;
    *(void *)(v164 + 336)  = sub_1002A1A0C;
    *(void *)(v164 + 344)  = v68;
    *(void *)(v164 + 352)  = sub_1002A19FC;
    *(void *)(v164 + 360)  = v961;
    *(void *)(v164 + 368)  = sub_1002A1A0C;
    *(void *)(v164 + 376)  = v960;
    *(void *)(v164 + 384)  = sub_1002A1A0C;
    *(void *)(v164 + 392)  = v964;
    *(void *)(v164 + 400)  = sub_1002A19FC;
    *(void *)(v164 + 408)  = v963;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v169  = v962;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v948  = v167;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v170  = v961;
    swift_retain();
    v171  = v960;
    swift_retain();
    p_type  = (uint64_t)v964;
    swift_retain();
    v172  = v963;
    swift_retain();
    swift_bridgeObjectRelease(v164);
    if (!os_log_type_enabled((os_log_t)v959, (os_log_type_t)v952))
    {
      swift_release(v172);
      swift_release(p_type);
      swift_release(v171);
      swift_release(v170);
      swift_release(v68);
      swift_release(v168);
      swift_release(v86);
      swift_release(v958);
      swift_release(v948);
      swift_release(v973);
      swift_release(v957);
      swift_release(v169);
      swift_release(v971);
      swift_release(object);
      swift_release(v970);
      swift_release(v968);
      swift_release(v969);
      swift_release(v967);
      swift_release(v965);
      swift_release(v966);
      swift_release(v956);
      swift_release(v954);
      swift_release(countAndFlagsBits);
      swift_release(v953);

      goto LABEL_36;
    }

    v947  = v86;
    v173  = (uint8_t *)sub_100002B30(68LL);
    v174  = swift_slowAlloc(192LL, -1LL);
    v988[0]  = 0LL;
    v945  = v174;
    v946  = v173;
    v987[0]  = v174;
    *(_WORD *)v173  = 2050;
    *(void *)&v979[0]  = v173 + 2;
    *(void *)&v980  = sub_1002A1A0C;
    id v84 = (uint8_t *)v953;
    *((void *)&v980 + 1)  = v953;
    unint64_t v85 = v974;
    sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
    if (!v85)
    {
      swift_release(v84);
      *(void *)&v980  = sub_1002A1A0C;
      v175  = countAndFlagsBits;
      *((void *)&v980 + 1)  = countAndFlagsBits;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      v176  = v962;
      v177  = v970;
      v178  = v966;
      v179  = v967;
      v180  = v956;
      swift_release(v175);
      *(void *)&v980  = sub_1002A19FC;
      v181  = v954;
      *((void *)&v980 + 1)  = v954;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v181);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v180;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v180);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v178;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v178);
      *(void *)&v980  = sub_1002A1A00;
      v182  = v965;
      *((void *)&v980 + 1)  = v965;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      v183  = v958;
      v184  = v948;
      swift_release(v182);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v179;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v179);
      *(void *)&v980  = sub_1002A1A0C;
      v185  = v969;
      *((void *)&v980 + 1)  = v969;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v185);
      *(void *)&v980  = sub_1002A19FC;
      v186  = v968;
      *((void *)&v980 + 1)  = v968;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v186);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v177;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v177);
      *(void *)&v980  = sub_1002A1A0C;
      v187  = object;
      *((void *)&v980 + 1)  = object;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v187);
      *(void *)&v980  = sub_1002A1A00;
      v188  = v971;
      *((void *)&v980 + 1)  = v971;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v188);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v176;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v176);
      *(void *)&v980  = sub_1002A1A0C;
      v189  = v957;
      *((void *)&v980 + 1)  = v957;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      v190  = v189;
      v191  = v960;
      swift_release(v190);
      *(void *)&v980  = sub_1002A19FC;
      v192  = v973;
      *((void *)&v980 + 1)  = v973;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      v193  = v951;
      swift_release(v192);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v184;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v184);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v183;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v183);
      *(void *)&v980  = sub_1002A19FC;
      v194  = v947;
      *((void *)&v980 + 1)  = v947;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      v195  = v950;
      swift_release(v194);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v195;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v195);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v193;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      v196  = v964;
      swift_release(v193);
      *(void *)&v980  = sub_1002A19FC;
      v197  = v961;
      *((void *)&v980 + 1)  = v961;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v197);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v191;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v191);
      *(void *)&v980  = sub_1002A1A0C;
      *((void *)&v980 + 1)  = v196;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v196);
      *(void *)&v980  = sub_1002A19FC;
      v198  = v963;
      *((void *)&v980 + 1)  = v963;
      sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v988,  (uint64_t)v987);
      swift_release(v198);
      v199  = v959;
      v200  = v946;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v959,  (os_log_type_t)v952,  "Cannot create new datapath %s[%hhu] to %s[%hhu] because of invalid internet sharing policy %s%s on interface: %s with service type: %s",  v946,  0x44u);
      p_type  = v945;
      swift_arrayDestroy(v945, 6LL, &type metadata for Any[8]);
      swift_slowDealloc(p_type, -1LL, -1LL);
      sub_100002B24((uint64_t)v200);

LABEL_36:
      v201  = sub_1000033FC();
      v202  = swift_allocError(&type metadata for WiFiError, v201, 0LL, 0LL);
      *(_OWORD *)v203  = xmmword_10033A940;
      *(_BYTE *)(v203 + 16)  = 1;
      swift_willThrow(v202);

      return p_type;
    }

    swift_errorRelease(v85);
    __break(1u);
    goto LABEL_225;
  }

  if (![v122 automatic]
    || ![v122 provider]
    || (sub_10002B484(v120, 2u) & 1) == 0)
  {
    goto LABEL_32;
  }

  v129  = *(void **)((char *)v89 + *(void *)(*(void *)v89 + 264LL));
  *((void *)&v989[1] + 1)  = type metadata accessor for LowLatencyInternetProviderPolicy( 0LL,  v956,  (uint64_t)v957,  v128);
  *(void *)&v989[2]  = &off_1003FAA08;
  v130  = v129;

  *(void *)&v989[0]  = v130;
  uint64_t v97 = v974;
LABEL_19:
  sub_1000226B0((uint64_t)v989, (uint64_t)&v980, (uint64_t *)&unk_10040DCB0);
  if (!v982)
  {
    sub_10017B1A0(&v980);
    v204  = *(void *)((char *)v89 + *(void *)(*(void *)v89 + 280LL));
    swift_unownedRetainStrong(v204);
    v205  = *(_BYTE **)(v204 + *(void *)(*(void *)v204 + 456LL));
    swift_retain();
    swift_release(v204);
    if (v205)
    {
LABEL_43:
      v965  = v204;
      LODWORD(v966)  = v120;
      goto LABEL_48;
    }

    swift_unownedRetainStrong(v204);
    v206  = sub_1002EAD90();
    if (!v97) {
      goto LABEL_47;
    }
LABEL_39:
    sub_1000225EC((uint64_t)v989, (uint64_t *)&unk_10040DCB0);
    swift_release(v204);
    swift_bridgeObjectRelease(object);
    return p_type;
  }

  if (v982 == 1) {
    sub_1000225EC((uint64_t)&v980, (uint64_t *)&unk_10040DCB0);
  }
  else {
    sub_10017B1A0(&v980);
  }
  v207  = [v118 serviceType];
  v204  = *(void *)((char *)v89 + *(void *)(*(void *)v89 + 280LL));
  swift_unownedRetainStrong(v204);
  if (v207 != (id)2)
  {
    LODWORD(v966)  = v120;
    v965  = v204;
    v205  = (_BYTE *)v204;
    goto LABEL_48;
  }

  v205  = *(_BYTE **)(v204 + *(void *)(*(void *)v204 + 448LL));
  swift_retain();
  swift_release(v204);
  if (v205) {
    goto LABEL_43;
  }
  swift_unownedRetainStrong(v204);
  v208  = v974;
  v206  = sub_1002EB704();
  uint64_t v97 = v208;
  if (v208) {
    goto LABEL_39;
  }
LABEL_47:
  v205  = (_BYTE *)v206;
  v974  = v97;
  LODWORD(v966)  = v120;
  v965  = v204;
  swift_release(v204);
LABEL_48:
  v209  = (uint64_t *)((char *)v973 + qword_10040DD20);
  swift_beginAccess((char *)v973 + qword_10040DD20, v988, 0LL, 0LL);
  v210  = *v209;
  v211  = v956;
  v212  = v957;
  v214  = _s17InitiatorInstanceCMa(255LL, v956, (uint64_t)v957, v213);
  WitnessTable  = swift_getWitnessTable(&unk_10035EA3C, v214);
  *(void *)&v980  = v211;
  v961  = v214;
  *((void *)&v980 + 1)  = v214;
  v981  = v212;
  v982  = WitnessTable;
  v216  = (uint8_t *)type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v980);
  v217  = (uint8_t *)sub_10017B5C8();
  v218  = NANBitmap.Channel.operatingClass.getter(v210);
  *(void *)&v980  = v218;
  __chkstk_darwin();
  v911[2]  = v212;
  LOBYTE(v912)  = (_BYTE)v971;
  v913  = countAndFlagsBits;
  v914  = object;
  LOBYTE(v915)  = (_BYTE)v966;
  BYTE1(v915)  = v952;
  BYTE2(v915)  = v954;
  BYTE3(v915)  = v953;
  BYTE4(v915)  = v969;
  BYTE5(v915)  = (_BYTE)v968;
  BYTE6(v915)  = (_BYTE)v970;
  v967  = v205;
  v916  = v205;
  v964  = v216;
  v962  = v217;
  v219  = type metadata accessor for Dictionary.Values(0LL, &type metadata for NANPeerServiceIdentifier, v216, v217);
  swift_bridgeObjectRetain(v218);
  v220  = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v219);
  v221  = v974;
  Sequence.first(where:)(v979, sub_1002A09D4, v911, v219, v220);
  v222  = v221;
  swift_bridgeObjectRelease(v980);
  v223  = *(uint8_t **)&v979[0];
  if (!*(void *)&v979[0])
  {
    v229  = v973;
    v230  = v965;
LABEL_66:
    v264  = sub_100287EF4();
    swift_unownedRetainStrong(v230);
    v265  = v230 + *(void *)(*(void *)v230 + 656LL);
    swift_beginAccess(v265, v987, 0LL, 0LL);
    v266  = v941;
    sub_100057FE8(v265, v941, type metadata accessor for NANDriverCapabilities);
    swift_release(v230);
    v267  = *(void *)(v266 + *(int *)(v942 + 48));
    sub_10005802C(v266, type metadata accessor for NANDriverCapabilities);
    v974  = v222;
    if (v264 < v267)
    {
      v268  = (uint64_t *)((char *)v229 + qword_10040DD10);
      swift_beginAccess((char *)v229 + qword_10040DD10, v979, 32LL, 0LL);
      v269  = *v268;
      LOBYTE(v985[0])  = v943;
      v271  = v956;
      v270  = v957;
      v273  = _s8InstanceCMa(255LL, v956, (uint64_t)v957, v272);
      v274  = swift_getWitnessTable(&unk_10035F874, v273);
      *(void *)&v980  = v271;
      *((void *)&v980 + 1)  = v273;
      v981  = v270;
      v982  = v274;
      v275  = type metadata accessor for NANDiscoveryEngine.ServiceSession(0LL, (uint64_t)&v980);
      Dictionary.subscript.getter(v985, v269, &type metadata for UInt8, v275);
      v276  = (char *)v986[0];
      if (v986[0])
      {
        v277  = v986[1];
        swift_endAccess(v979);
        sub_1002A1608(v276, v277);
        swift_bridgeObjectRelease(v277);
        sub_1002A0210(v276, v277);
        v278  = (char)v971;
        if (v276[qword_100410BB8] == 1)
        {
          v965  = v230;
          v279  = (uint8_t *)&v276[qword_100410BB0];
          swift_beginAccess(&v276[qword_100410BB0], v986, 0LL, 0LL);
          v962  = v279;
          v280  = String.lowercased()();
          v281  = countAndFlagsBits;
          v282  = String.lowercased()();
          if (v280._countAndFlagsBits == v282._countAndFlagsBits && v280._object == v282._object)
          {
            swift_bridgeObjectRelease_n(v280._object, 2LL);
            v283  = v952;
          }

          else
          {
            v401  = _stringCompareWithSmolCheck(_:_:expecting:)( v280._countAndFlagsBits,  v280._object,  v282._countAndFlagsBits,  v282._object,  0LL);
            swift_bridgeObjectRelease(v280._object);
            swift_bridgeObjectRelease(v282._object);
            v283  = v952;
            if ((v401 & 1) == 0)
            {
              v456  = (_BYTE *)swift_allocObject(&unk_1003F6440, 22LL, 7LL);
              v456[16]  = v283;
              v456[17]  = v954;
              v456[18]  = v953;
              v456[19]  = v969;
              v456[20]  = (_BYTE)v968;
              v456[21]  = (_BYTE)v970;
              v457  = v276;
              v458  = swift_allocObject(&unk_1003F6468, 32LL, 7LL);
              *(void *)(v458 + 16)  = sub_1002A1CC4;
              *(void *)(v458 + 24)  = v456;
              v459  = swift_allocObject(&unk_1003F6490, 17LL, 7LL);
              *(_BYTE *)(v459 + 16)  = (_BYTE)v971;
              v460  = swift_allocObject(&unk_1003F64B8, 24LL, 7LL);
              *(void *)(v460 + 16)  = v457;
              v461  = swift_allocObject(&unk_1003F64E0, 32LL, 7LL);
              v462  = object;
              *(void *)(v461 + 16)  = v281;
              *(void *)(v461 + 24)  = v462;
              v463  = swift_allocObject(&unk_1003F6508, 32LL, 7LL);
              *(void *)(v463 + 16)  = sub_1002A1CA4;
              *(void *)(v463 + 24)  = v461;
              v962  = v457;
              v968  = (os_log_s *)Logger.logObject.getter(v962);
              LODWORD(v966)  = static os_log_type_t.error.getter(v968);
              v971  = (_BYTE *)swift_allocObject(&unk_1003F6530, 17LL, 7LL);
              v971[16]  = 32;
              object  = (_BYTE *)swift_allocObject(&unk_1003F6558, 17LL, 7LL);
              object[16]  = 8;
              v464  = swift_allocObject(&unk_1003F6580, 32LL, 7LL);
              *(void *)(v464 + 16)  = sub_1002A19F4;
              *(void *)(v464 + 24)  = v458;
              v465  = (void *)swift_allocObject(&unk_1003F65A8, 32LL, 7LL);
              v970  = v465;
              v465[2]  = sub_1002A19EC;
              v465[3]  = v464;
              v466  = swift_allocObject(&unk_1003F65D0, 17LL, 7LL);
              *(_BYTE *)(v466 + 16)  = 0;
              v969  = swift_allocObject(&unk_1003F65F8, 17LL, 7LL);
              *(_BYTE *)(v969 + 16)  = 1;
              v467  = swift_allocObject(&unk_1003F6620, 32LL, 7LL);
              *(void *)(v467 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
              *(void *)(v467 + 24)  = v459;
              v468  = swift_allocObject(&unk_1003F6648, 32LL, 7LL);
              v963  = v468;
              *(void *)(v468 + 16)  = sub_1002A1CC8;
              *(void *)(v468 + 24)  = v467;
              v469  = (uint8_t *)swift_allocObject(&unk_1003F6670, 17LL, 7LL);
              v469[16]  = 64;
              v470  = v469;
              v959  = v469;
              v973  = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F6698, 17LL, 7LL);
              *((_BYTE *)v973 + 16)  = 8;
              v471  = swift_allocObject(&unk_1003F66C0, 32LL, 7LL);
              *(void *)(v471 + 16)  = sub_1002A1CA8;
              *(void *)(v471 + 24)  = v460;
              v472  = swift_allocObject(&unk_1003F66E8, 32LL, 7LL);
              *(void *)(v472 + 16)  = sub_1002A08E8;
              *(void *)(v472 + 24)  = v471;
              v473  = v472;
              v965  = v472;
              v964  = (uint8_t *)swift_allocObject(&unk_1003F6710, 17LL, 7LL);
              v964[16]  = 32;
              v960  = (_BYTE *)swift_allocObject(&unk_1003F6738, 17LL, 7LL);
              v960[16]  = 8;
              v474  = swift_allocObject(&unk_1003F6760, 32LL, 7LL);
              *(void *)(v474 + 16)  = sub_1002A19F0;
              *(void *)(v474 + 24)  = v463;
              v475  = swift_allocObject(&unk_1003F6788, 32LL, 7LL);
              *(void *)(v475 + 16)  = sub_1002A19EC;
              *(void *)(v475 + 24)  = v474;
              v476  = swift_allocObject(v940, 224LL, 7LL);
              *(_OWORD *)(v476 + 16)  = v921;
              *(void *)(v476 + 32)  = sub_1002A1A0C;
              v477  = object;
              *(void *)(v476 + 40)  = v971;
              *(void *)(v476 + 48)  = sub_1002A1A0C;
              *(void *)(v476 + 56)  = v477;
              *(void *)(v476 + 64)  = sub_1002A19FC;
              *(void *)(v476 + 72)  = v970;
              *(void *)(v476 + 80)  = sub_1002A1A0C;
              *(void *)(v476 + 88)  = v466;
              *(void *)(v476 + 96)  = sub_1002A1A0C;
              *(void *)(v476 + 104)  = v969;
              *(void *)(v476 + 112)  = sub_1002A1A00;
              v478  = v963;
              *(void *)(v476 + 120)  = v963;
              *(void *)(v476 + 128)  = sub_1002A1A0C;
              *(void *)(v476 + 136)  = v470;
              *(void *)(v476 + 144)  = sub_1002A1A0C;
              *(void *)(v476 + 152)  = v973;
              *(void *)(v476 + 160)  = sub_1002A0C20;
              *(void *)(v476 + 168)  = v473;
              *(void *)(v476 + 176)  = sub_1002A1A0C;
              v479  = v964;
              *(void *)(v476 + 184)  = v964;
              *(void *)(v476 + 192)  = sub_1002A1A0C;
              v480  = v960;
              *(void *)(v476 + 200)  = v960;
              *(void *)(v476 + 208)  = sub_1002A19FC;
              *(void *)(v476 + 216)  = v475;
              swift_retain();
              swift_retain();
              swift_retain();
              v961  = v466;
              v481  = v475;
              v482  = v965;
              swift_retain();
              id v84 = v959;
              swift_retain();
              swift_retain();
              swift_retain();
              p_type  = (uint64_t)v973;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease(v476);
              v483  = v968;
              if (os_log_type_enabled(v968, (os_log_type_t)v966))
              {
                v958  = v481;
                v485  = v969;
                v484  = v970;
                v486  = (uint8_t *)sub_100002B30(35LL);
                v487  = (uint8_t *)swift_slowAlloc(8LL, -1LL);
                v488  = swift_slowAlloc(64LL, -1LL);
                countAndFlagsBits  = v487;
                v956  = v488;
                v985[0]  = v487;
                v978[0]  = v488;
                v957  = v486;
                *(_WORD *)v486  = 1026;
                *(void *)&v979[0]  = v486 + 2;
                *(void *)&v980  = sub_1002A1A0C;
                v489  = v971;
                *((void *)&v980 + 1)  = v971;
                v490  = v974;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                p_type  = (uint64_t)v490;
                if (v490) {
                  goto LABEL_229;
                }
                swift_release(v489);
                *(void *)&v980  = sub_1002A1A0C;
                v491  = object;
                *((void *)&v980 + 1)  = object;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v491);
                *(void *)&v980  = sub_1002A19FC;
                *((void *)&v980 + 1)  = v484;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                v492  = v961;
                swift_release(v484);
                *(void *)&v980  = sub_1002A1A0C;
                *((void *)&v980 + 1)  = v492;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v492);
                *(void *)&v980  = sub_1002A1A0C;
                *((void *)&v980 + 1)  = v485;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                v493  = v84;
                swift_release(v485);
                *(void *)&v980  = sub_1002A1A00;
                v494  = v963;
                *((void *)&v980 + 1)  = v963;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v494);
                *(void *)&v980  = sub_1002A1A0C;
                *((void *)&v980 + 1)  = v493;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v493);
                *(void *)&v980  = sub_1002A1A0C;
                v495  = v973;
                *((void *)&v980 + 1)  = v973;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v495);
                *(void *)&v980  = sub_1002A0C20;
                v496  = v965;
                *((void *)&v980 + 1)  = v965;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v496);
                *(void *)&v980  = sub_1002A1A0C;
                v497  = v964;
                *((void *)&v980 + 1)  = v964;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v497);
                *(void *)&v980  = sub_1002A1A0C;
                *((void *)&v980 + 1)  = v480;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                v498  = v967;
                p_type  = (uint64_t)v968;
                swift_release(v480);
                *(void *)&v980  = sub_1002A19FC;
                v499  = v958;
                *((void *)&v980 + 1)  = v958;
                sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v985,  (uint64_t)v978);
                swift_release(v499);
                v500  = v957;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)p_type,  (os_log_type_t)v966,  "Cannot create new datapath to %s[%hhu] because %@ does not match the service name provided for the datapath: %s",  v957,  0x23u);
                v501  = sub_100002274(&qword_100404DE0);
                v502  = countAndFlagsBits;
                swift_arrayDestroy(countAndFlagsBits, 1LL, v501);
                swift_slowDealloc(v502, -1LL, -1LL);
                v503  = v956;
                swift_arrayDestroy(v956, 2LL, &type metadata for Any[8]);
                swift_slowDealloc(v503, -1LL, -1LL);
                sub_100002B24((uint64_t)v500);
              }

              else
              {
                swift_release(v481);
                swift_release(v480);
                swift_release(v479);
                swift_release(v482);
                swift_release(p_type);
                swift_release(v84);
                swift_release(v478);
                swift_release(v969);
                swift_release(v961);
                swift_release(v970);
                swift_release(object);
                swift_release(v971);

                v498  = v967;
              }

              v608  = v962;
              v609  = sub_1000033FC();
              v610  = swift_allocError(&type metadata for WiFiError, v609, 0LL, 0LL);
              *(_OWORD *)v611  = xmmword_10035D880;
              *(_BYTE *)(v611 + 16)  = 1;
              swift_willThrow(v610);
              goto LABEL_123;
            }
          }

          v402  = (uint64_t *)&v276[qword_100410BD0];
          swift_beginAccess(&v276[qword_100410BD0], v985, 0LL, 0LL);
          v403  = *v402;
          v964  = (uint8_t *)v276;
          v405  = v953;
          v404  = v954;
          v406  = v971;
          v407  = ((unint64_t)BYTE4(v283) << 40) & 0xFF00FF00000000FFLL | ((unint64_t)v970 << 48) | ((unint64_t)v969 << 32) | ((unint64_t)v953 << 24) | ((unint64_t)v954 << 16) | ((unint64_t)v283 << 8) | v971;
          swift_bridgeObjectRetain(v403);
          v408  = sub_100303D14(v407, v403);
          swift_bridgeObjectRelease(v403);
          if (!v408)
          {
            swift_bridgeObjectRelease(object);
            v418  = swift_allocObject(&unk_1003F67B0, 24LL, 7LL);
            v419  = v964;
            *(void *)(v418 + 16)  = v964;
            v420  = (_BYTE *)swift_allocObject(&unk_1003F67D8, 22LL, 7LL);
            v420[16]  = v283;
            v420[17]  = v404;
            v420[18]  = v405;
            v420[19]  = v969;
            v420[20]  = (_BYTE)v968;
            v420[21]  = (_BYTE)v970;
            v421  = swift_allocObject(&unk_1003F6800, 32LL, 7LL);
            *(void *)(v421 + 16)  = sub_1002A1CC4;
            *(void *)(v421 + 24)  = v420;
            v966  = (_BYTE *)swift_allocObject(&unk_1003F6828, 17LL, 7LL);
            v966[16]  = v406;
            v968  = v419;
            v971  = (_BYTE *)Logger.logObject.getter(v968);
            LODWORD(v970)  = static os_log_type_t.error.getter(v971);
            v973  = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F6850, 17LL, 7LL);
            *((_BYTE *)v973 + 16)  = 64;
            object  = (_BYTE *)swift_allocObject(&unk_1003F6878, 17LL, 7LL);
            object[16]  = 8;
            v422  = swift_allocObject(&unk_1003F68A0, 32LL, 7LL);
            *(void *)(v422 + 16)  = sub_1002A1CA8;
            *(void *)(v422 + 24)  = v418;
            v423  = swift_allocObject(&unk_1003F68C8, 32LL, 7LL);
            *(void *)(v423 + 16)  = sub_1002A19EC;
            *(void *)(v423 + 24)  = v422;
            v424  = v423;
            p_type  = swift_allocObject(&unk_1003F68F0, 17LL, 7LL);
            *(_BYTE *)(p_type + 16)  = 32;
            v965  = swift_allocObject(&unk_1003F6918, 17LL, 7LL);
            *(_BYTE *)(v965 + 16)  = 8;
            v425  = swift_allocObject(&unk_1003F6940, 32LL, 7LL);
            *(void *)(v425 + 16)  = sub_1002A19F4;
            *(void *)(v425 + 24)  = v421;
            v426  = swift_allocObject(&unk_1003F6968, 32LL, 7LL);
            *(void *)(v426 + 16)  = sub_1002A19EC;
            *(void *)(v426 + 24)  = v425;
            v427  = swift_allocObject(&unk_1003F6990, 17LL, 7LL);
            *(_BYTE *)(v427 + 16)  = 0;
            v428  = v427;
            v969  = v427;
            BOOL v108 = (uint8_t *)swift_allocObject(&unk_1003F69B8, 17LL, 7LL);
            v108[16]  = 1;
            v429  = swift_allocObject(&unk_1003F69E0, 32LL, 7LL);
            v430  = v966;
            *(void *)(v429 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
            *(void *)(v429 + 24)  = v430;
            v431  = swift_allocObject(&unk_1003F6A08, 32LL, 7LL);
            *(void *)(v431 + 16)  = sub_1002A1CC8;
            *(void *)(v431 + 24)  = v429;
            v432  = swift_allocObject(v940, 176LL, 7LL);
            *(_OWORD *)(v432 + 16)  = xmmword_10035EAF0;
            *(void *)(v432 + 32)  = sub_1002A1A0C;
            v433  = object;
            *(void *)(v432 + 40)  = v973;
            *(void *)(v432 + 48)  = sub_1002A1A0C;
            *(void *)(v432 + 56)  = v433;
            *(void *)(v432 + 64)  = sub_1002A1A04;
            v434  = (_BYTE *)v424;
            *(void *)(v432 + 72)  = v424;
            *(void *)(v432 + 80)  = sub_1002A1A0C;
            *(void *)(v432 + 88)  = p_type;
            *(void *)(v432 + 96)  = sub_1002A1A0C;
            v435  = v965;
            *(void *)(v432 + 104)  = v965;
            *(void *)(v432 + 112)  = sub_1002A19FC;
            *(void *)(v432 + 120)  = v426;
            *(void *)(v432 + 128)  = sub_1002A1A0C;
            *(void *)(v432 + 136)  = v428;
            *(void *)(v432 + 144)  = sub_1002A1A0C;
            *(void *)(v432 + 152)  = v108;
            *(void *)(v432 + 160)  = sub_1002A1A00;
            *(void *)(v432 + 168)  = v431;
            v436  = v971;
            v437  = v434;
            swift_retain();
            swift_retain();
            v966  = v437;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            v438  = v969;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease(v432);
            if (os_log_type_enabled((os_log_t)v436, (os_log_type_t)v970))
            {
              v963  = v426;
              v964  = (uint8_t *)p_type;
              v959  = (uint8_t *)v431;
              v439  = object;
              v440  = v435;
              v441  = (uint8_t *)sub_100002B30(25LL);
              v442  = (_BYTE *)swift_slowAlloc(8LL, -1LL);
              v443  = swift_slowAlloc(32LL, -1LL);
              v960  = v442;
              v961  = v443;
              v978[0]  = v442;
              v977[0]  = v443;
              v962  = v441;
              *(_WORD *)v441  = 770;
              *(void *)&v979[0]  = v441 + 2;
              *(void *)&v980  = sub_1002A1A0C;
              v444  = v973;
              double v111 = v974;
              *((void *)&v980 + 1)  = v973;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              uint64_t v109 = v111;
              if (v111) {
                goto LABEL_233;
              }
              v445  = v108;
              swift_release(v444);
              *(void *)&v980  = sub_1002A1A0C;
              *((void *)&v980 + 1)  = v439;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              swift_release(v439);
              *(void *)&v980  = sub_1002A1A04;
              v446  = v966;
              *((void *)&v980 + 1)  = v966;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              swift_release(v446);
              *(void *)&v980  = sub_1002A1A0C;
              v447  = v964;
              *((void *)&v980 + 1)  = v964;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              swift_release(v447);
              *(void *)&v980  = sub_1002A1A0C;
              *((void *)&v980 + 1)  = v440;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              swift_release(v440);
              *(void *)&v980  = sub_1002A19FC;
              v448  = v963;
              *((void *)&v980 + 1)  = v963;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              swift_release(v448);
              *(void *)&v980  = sub_1002A1A0C;
              v449  = v969;
              *((void *)&v980 + 1)  = v969;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              swift_release(v449);
              *(void *)&v980  = sub_1002A1A0C;
              *((void *)&v980 + 1)  = v445;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              v450  = v967;
              p_type  = (uint64_t)v971;
              swift_release(v445);
              *(void *)&v980  = sub_1002A1A00;
              v451  = v959;
              *((void *)&v980 + 1)  = v959;
              sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
              swift_release(v451);
              v452  = v962;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)p_type,  (os_log_type_t)v970,  "Cannot create new datapath because %@ has not discovered %s[%hhu]",  v962,  0x19u);
              v453  = sub_100002274(&qword_100404DE0);
              v454  = v960;
              swift_arrayDestroy(v960, 1LL, v453);
              swift_slowDealloc(v454, -1LL, -1LL);
              v455  = v961;
              swift_arrayDestroy(v961, 1LL, &type metadata for Any[8]);
              swift_slowDealloc(v455, -1LL, -1LL);
              sub_100002B24((uint64_t)v452);
            }

            else
            {
              swift_release(v431);
              swift_release(v108);
              swift_release(v438);
              swift_release(v426);
              swift_release(v435);
              swift_release(p_type);
              swift_release(v966);
              swift_release(object);
              swift_release(v973);

              v450  = v967;
            }

            v534  = sub_1000033FC();
            v535  = swift_allocError(&type metadata for WiFiError, v534, 0LL, 0LL);
            *(_OWORD *)v536  = xmmword_10035D880;
            *(_BYTE *)(v536 + 16)  = 1;
            swift_willThrow(v535);
            swift_release(v450);
            v537  = (uint8_t *)v968;
            goto LABEL_120;
          }

          v948  = v407;
          v409  = v965;
          swift_unownedRetainStrong(v965);
          v410  = v934;
          v949  = (uint8_t *)(((unint64_t)BYTE4(v283) << 32) | ((unint64_t)BYTE5(v283) << 40) | ((unint64_t)BYTE3(v283) << 24) | ((unint64_t)BYTE2(v283) << 16) | ((unint64_t)BYTE1(v283) << 8) | v283);
          sub_1002EA528((uint64_t)v949, v934);
          swift_release(v409);
          v411  = v935;
          sub_1002529DC((uint64_t)countAndFlagsBits, (uint64_t)object, v406, (uint64_t)v935);
          sub_10005802C(v410, type metadata accessor for NANPeer);
          v412  = type metadata accessor for NANPeer.Service(0LL);
          v413  = v406;
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v412 - 8) + 48LL))( v411,  1LL,  v412) == 1)
          {
            sub_1000225EC((uint64_t)v411, &qword_10040E460);
            v414  = 0;
            v415  = 0LL;
            v951  = 0LL;
            v959  = 0LL;
            v960  = 0LL;
            v958  = 5LL;
            v416  = v974;
            v417  = v954;
            goto LABEL_113;
          }

          v415  = v411[10];
          v505  = v411[12];
          v504  = (uint8_t *)v411[13];
          v506  = (_BYTE *)v411[14];
          v951  = v411[11];
          v959  = v504;
          v960  = v506;
          sub_100254E90(v415, v951, v505, (uint64_t)v504, (unint64_t)v506);
          sub_10005802C((uint64_t)v411, type metadata accessor for NANPeer.Service);
          v958  = v505;
          v507  = v505;
          v416  = v974;
          v417  = v954;
          if (v505 == 5LL
            || (*(unsigned __int16 *)NANAttribute.ServiceDescriptorExtension.Control.securityRequired.unsafeMutableAddressor() & ~WORD1(v415)) != 0)
          {
            v414  = 0;
            goto LABEL_113;
          }

          v961  = v415;
          v508  = &stru_100401FF0.type;
          v509  = [v950 pmk];
          if (v509)
          {
            v510  = v509;
            v511  = static Data._unconditionallyBridgeFromObjectiveC(_:)(v509);
            v513  = v512;

            v514  = v965;
            if (v513 >> 60 != 15)
            {
              sub_100020AFC(v511, v513);
              v947  = NANPMK.init(pmk:)(v511, v513);
              v515  = v511;
              v517  = v516;
              sub_100020B40(v515, v513);
              v946  = v517;
              v518  = [v950 pmkID];
              if (v518)
              {
                v519  = v518;
                v520  = static Data._unconditionallyBridgeFromObjectiveC(_:)(v518);
                v522  = v521;

                if (v522 >> 60 != 15)
                {
                  sub_100020AFC(v520, v522);
                  NANPMK.ID.init(_:)(v520, v522);
                  v942  = v523;
                  v525  = v524;
                  sub_100020B40(v520, v522);
                  v945  = v525;
                  v526  = v525 >> 60 == 15;
                  v508  = (char **)(&stru_100401FF0 + 16);
                  if (!v526)
                  {
                    swift_unownedRetainStrong(v514);
                    v527  = v514 + *(void *)(*(void *)v514 + 656LL);
                    swift_beginAccess(v527, &v975, 0LL, 0LL);
                    v528  = v527;
                    v529  = v922;
                    sub_100057FE8(v528, v922, type metadata accessor for NANDriverCapabilities);
                    swift_release(v514);
                    v530  = *(void *)(v529 + 8);
                    swift_bridgeObjectRetain(v530);
                    sub_10005802C(v529, type metadata accessor for NANDriverCapabilities);
                    *(void *)&v980  = v530;
                    v531  = sub_100002274((uint64_t *)&unk_10040D460);
                    v532  = sub_1000572E4( (unint64_t *)&qword_100407E70,  (uint64_t *)&unk_10040D460,  (uint64_t)&protocol conformance descriptor for [A]);
                    v533  = Collection<>.strongestSupportedPublicKeySuite.getter(v531, v532);
                    swift_bridgeObjectRelease(v530);
                    if (v533 != 8)
                    {
                      swift_beginAccess(v962, &v980, 32LL, 0LL);
                      v880  = NANSubscribe.Configuration.requiresAuthentication.getter();
                      swift_endAccess(&v980);
                      if (v880)
                      {
                        swift_bridgeObjectRelease(object);
                        v881  = swift_allocObject(&unk_1003F7DB8, 24LL, 7LL);
                        v882  = v964;
                        *(void *)(v881 + 16)  = v964;
                        v883  = (_BYTE *)swift_allocObject(&unk_1003F7DE0, 22LL, 7LL);
                        v883[16]  = v952;
                        v883[17]  = v954;
                        v883[18]  = v953;
                        v883[19]  = v969;
                        v883[20]  = (_BYTE)v968;
                        v883[21]  = (_BYTE)v970;
                        v884  = swift_allocObject(&unk_1003F7E08, 32LL, 7LL);
                        *(void *)(v884 + 16)  = sub_1002A1CC4;
                        *(void *)(v884 + 24)  = v883;
                        v969  = swift_allocObject(&unk_1003F7E30, 17LL, 7LL);
                        *(_BYTE *)(v969 + 16)  = (_BYTE)v971;
                        v962  = v882;
                        v971  = (_BYTE *)Logger.logObject.getter(v962);
                        LODWORD(v970)  = static os_log_type_t.error.getter(v971);
                        object  = (_BYTE *)swift_allocObject(&unk_1003F7E58, 17LL, 7LL);
                        object[16]  = 64;
                        v973  = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F7E80, 17LL, 7LL);
                        *((_BYTE *)v973 + 16)  = 8;
                        v885  = swift_allocObject(&unk_1003F7EA8, 32LL, 7LL);
                        *(void *)(v885 + 16)  = sub_1002A1CA8;
                        *(void *)(v885 + 24)  = v881;
                        v886  = swift_allocObject(&unk_1003F7ED0, 32LL, 7LL);
                        *(void *)(v886 + 16)  = sub_1002A19EC;
                        *(void *)(v886 + 24)  = v885;
                        v887  = swift_allocObject(&unk_1003F7EF8, 17LL, 7LL);
                        *(_BYTE *)(v887 + 16)  = 32;
                        p_type  = swift_allocObject(&unk_1003F7F20, 17LL, 7LL);
                        *(_BYTE *)(p_type + 16)  = 8;
                        v888  = swift_allocObject(&unk_1003F7F48, 32LL, 7LL);
                        *(void *)(v888 + 16)  = sub_1002A19F4;
                        *(void *)(v888 + 24)  = v884;
                        v889  = (uint8_t *)swift_allocObject(&unk_1003F7F70, 32LL, 7LL);
                        *((void *)v889 + 2)  = sub_1002A19EC;
                        *((void *)v889 + 3)  = v888;
                        v890  = (os_log_s *)swift_allocObject(&unk_1003F7F98, 17LL, 7LL);
                        *((_BYTE *)v890 + 16)  = 0;
                        v891  = swift_allocObject(&unk_1003F7FC0, 17LL, 7LL);
                        *(_BYTE *)(v891 + 16)  = 1;
                        v892  = swift_allocObject(&unk_1003F7FE8, 32LL, 7LL);
                        v893  = v969;
                        *(void *)(v892 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                        *(void *)(v892 + 24)  = v893;
                        v894  = swift_allocObject(&unk_1003F8010, 32LL, 7LL);
                        *(void *)(v894 + 16)  = sub_1002A1CC8;
                        *(void *)(v894 + 24)  = v892;
                        v895  = swift_allocObject(v940, 176LL, 7LL);
                        *(_OWORD *)(v895 + 16)  = xmmword_10035EAF0;
                        *(void *)(v895 + 32)  = sub_1002A1A0C;
                        v896  = v973;
                        *(void *)(v895 + 40)  = object;
                        *(void *)(v895 + 48)  = sub_1002A1A0C;
                        *(void *)(v895 + 56)  = v896;
                        *(void *)(v895 + 64)  = sub_1002A1A04;
                        *(void *)(v895 + 72)  = v886;
                        *(void *)(v895 + 80)  = sub_1002A1A0C;
                        *(void *)(v895 + 88)  = v887;
                        *(void *)(v895 + 96)  = sub_1002A1A0C;
                        *(void *)(v895 + 104)  = p_type;
                        *(void *)(v895 + 112)  = sub_1002A19FC;
                        *(void *)(v895 + 120)  = v889;
                        *(void *)(v895 + 128)  = sub_1002A1A0C;
                        *(void *)(v895 + 136)  = v890;
                        *(void *)(v895 + 144)  = sub_1002A1A0C;
                        *(void *)(v895 + 152)  = v891;
                        *(void *)(v895 + 160)  = sub_1002A1A00;
                        *(void *)(v895 + 168)  = v894;
                        swift_retain();
                        swift_retain();
                        v963  = v886;
                        swift_retain();
                        v965  = v887;
                        swift_retain();
                        v966  = (_BYTE *)p_type;
                        swift_retain();
                        v964  = v889;
                        swift_retain();
                        v968  = v890;
                        swift_retain();
                        v969  = v891;
                        swift_retain();
                        v897  = v894;
                        swift_retain();
                        swift_bridgeObjectRelease(v895);
                        if (os_log_type_enabled((os_log_t)v971, (os_log_type_t)v970))
                        {
                          BOOL v108 = (uint8_t *)sub_100002B30(25LL);
                          v898  = swift_slowAlloc(8LL, -1LL);
                          v899  = swift_slowAlloc(32LL, -1LL);
                          v978[0]  = v898;
                          v977[0]  = v899;
                          *(_WORD *)BOOL v108 = 770;
                          *(void *)&v979[0]  = v108 + 2;
                          *(void *)&v980  = sub_1002A1A0C;
                          *((void *)&v980 + 1)  = object;
                          double v111 = v974;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          uint64_t v109 = v111;
                          if (v111) {
                            goto LABEL_233;
                          }
                          swift_release(object);
                          *(void *)&v980  = sub_1002A1A0C;
                          *((void *)&v980 + 1)  = v973;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          swift_release(v973);
                          *(void *)&v980  = sub_1002A1A04;
                          *((void *)&v980 + 1)  = v963;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          p_type  = 0LL;
                          swift_release(v963);
                          *(void *)&v980  = sub_1002A1A0C;
                          *((void *)&v980 + 1)  = v965;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          swift_release(v965);
                          *(void *)&v980  = sub_1002A1A0C;
                          *((void *)&v980 + 1)  = v966;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          swift_release(v966);
                          *(void *)&v980  = sub_1002A19FC;
                          *((void *)&v980 + 1)  = v964;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          swift_release(v964);
                          *(void *)&v980  = sub_1002A1A0C;
                          *((void *)&v980 + 1)  = v968;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          swift_release(v968);
                          *(void *)&v980  = sub_1002A1A0C;
                          *((void *)&v980 + 1)  = v969;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          swift_release(v969);
                          *(void *)&v980  = sub_1002A1A00;
                          *((void *)&v980 + 1)  = v897;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v978,  (uint64_t)v977);
                          swift_release(v897);
                          v900  = v971;
                          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v971,  (os_log_type_t)v970,  "Cannot create new datapath for %@ to %s[%hhu] because unable to derive security parameters w ith client provided PMK and PMKID and with authentication type set",  v108,  0x19u);
                          v901  = sub_100002274(&qword_100404DE0);
                          swift_arrayDestroy(v898, 1LL, v901);
                          swift_slowDealloc(v898, -1LL, -1LL);
                          swift_arrayDestroy(v899, 1LL, &type metadata for Any[8]);
                          swift_slowDealloc(v899, -1LL, -1LL);
                          sub_100002B24((uint64_t)v108);
                        }

                        else
                        {
                          swift_release(v894);
                          swift_release(v969);
                          swift_release(v968);
                          swift_release(v964);
                          swift_release(v966);
                          swift_release(v965);
                          swift_release(v963);
                          swift_release(v973);
                          swift_release(object);
                        }

                        v905  = sub_1000033FC();
                        v906  = swift_allocError(&type metadata for WiFiError, v905, 0LL, 0LL);
                        *(_OWORD *)v907  = xmmword_10035E1A0;
                        *(_BYTE *)(v907 + 16)  = 1;
                        swift_willThrow(v906);
                        sub_100020B40(v947, (unint64_t)v946);
                        sub_100020B40(v942, v945);
                        goto LABEL_212;
                      }

                      v613  = 0LL;
                      v416  = v974;
                      v658  = (char)v970;
                      v541  = v953;
                      v417  = v954;
                      v655  = v946;
                      v654  = v947;
                      v657  = v945;
                      v656  = v942;
LABEL_132:
                      v990[0]  = v533;
                      v990[1]  = v654;
                      v990[2]  = v655;
                      v990[3]  = v656;
                      v942  = v656;
                      v945  = v657;
                      v990[4]  = v657;
                      v990[5]  = 0LL;
                      v970  = (_BYTE *)v613;
                      v990[6]  = v613;
                      swift_beginAccess((char *)v973 + qword_10040DD68, &v980, 33LL, 0LL);
                      v659  = sub_100002274(&qword_10040E378);
                      IDPool.availableID()(v659, (uint64_t)v979);
                      v660  = swift_endAccess(&v980);
                      v946  = v655;
                      v947  = v654;
                      v965  = v533;
                      if ((BYTE1(v979[0]) & 1) != 0)
                      {
                        v974  = v416;
                        swift_bridgeObjectRelease(object);
                        v661  = v417;
                        v662  = v541;
                        v663  = swift_allocObject(&unk_1003F6A30, 24LL, 7LL);
                        v664  = v964;
                        *(void *)(v663 + 16)  = v964;
                        v665  = (_BYTE *)swift_allocObject(&unk_1003F6A58, 22LL, 7LL);
                        v665[16]  = v952;
                        v665[17]  = v661;
                        v665[18]  = v662;
                        v665[19]  = v969;
                        v665[20]  = (_BYTE)v968;
                        v665[21]  = v658;
                        v666  = swift_allocObject(&unk_1003F6A80, 32LL, 7LL);
                        *(void *)(v666 + 16)  = sub_1002A1CC4;
                        *(void *)(v666 + 24)  = v665;
                        v966  = (_BYTE *)swift_allocObject(&unk_1003F6AA8, 17LL, 7LL);
                        v966[16]  = (_BYTE)v971;
                        v964  = v664;
                        object  = (_BYTE *)Logger.logObject.getter(v964);
                        LODWORD(v971)  = static os_log_type_t.error.getter(object);
                        v973  = (void (*)(uint64_t, char))swift_allocObject(&unk_1003F6AD0, 17LL, 7LL);
                        *((_BYTE *)v973 + 16)  = 64;
                        v667  = swift_allocObject(&unk_1003F6AF8, 17LL, 7LL);
                        *(_BYTE *)(v667 + 16)  = 8;
                        v668  = swift_allocObject(&unk_1003F6B20, 32LL, 7LL);
                        *(void *)(v668 + 16)  = sub_1002A1CA8;
                        *(void *)(v668 + 24)  = v663;
                        v669  = (void *)swift_allocObject(&unk_1003F6B48, 32LL, 7LL);
                        v669[2]  = sub_1002A19EC;
                        v669[3]  = v668;
                        v968  = (os_log_s *)swift_allocObject(&unk_1003F6B70, 17LL, 7LL);
                        *((_BYTE *)v968 + 16)  = 32;
                        v670  = (uint8_t *)swift_allocObject(&unk_1003F6B98, 17LL, 7LL);
                        v670[16]  = 8;
                        v671  = swift_allocObject(&unk_1003F6BC0, 32LL, 7LL);
                        *(void *)(v671 + 16)  = sub_1002A19F4;
                        *(void *)(v671 + 24)  = v666;
                        v672  = swift_allocObject(&unk_1003F6BE8, 32LL, 7LL);
                        *(void *)(v672 + 16)  = sub_1002A19EC;
                        *(void *)(v672 + 24)  = v671;
                        v969  = swift_allocObject(&unk_1003F6C10, 17LL, 7LL);
                        *(_BYTE *)(v969 + 16)  = 0;
                        v673  = (uint8_t *)swift_allocObject(&unk_1003F6C38, 17LL, 7LL);
                        v673[16]  = 1;
                        v962  = v673;
                        v674  = swift_allocObject(&unk_1003F6C60, 32LL, 7LL);
                        v675  = v966;
                        *(void *)(v674 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                        *(void *)(v674 + 24)  = v675;
                        v676  = swift_allocObject(&unk_1003F6C88, 32LL, 7LL);
                        *(void *)(v676 + 16)  = sub_1002A1CC8;
                        *(void *)(v676 + 24)  = v674;
                        v677  = swift_allocObject(v940, 176LL, 7LL);
                        *(_OWORD *)(v677 + 16)  = xmmword_10035EAF0;
                        *(void *)(v677 + 32)  = sub_1002A1A0C;
                        *(void *)(v677 + 40)  = v973;
                        *(void *)(v677 + 48)  = sub_1002A1A0C;
                        *(void *)(v677 + 56)  = v667;
                        *(void *)(v677 + 64)  = sub_1002A1A04;
                        *(void *)(v677 + 72)  = v669;
                        *(void *)(v677 + 80)  = sub_1002A1A0C;
                        uint64_t v109 = (uint8_t *)v968;
                        v678  = v969;
                        *(void *)(v677 + 88)  = v968;
                        *(void *)(v677 + 96)  = sub_1002A1A0C;
                        *(void *)(v677 + 104)  = v670;
                        *(void *)(v677 + 112)  = sub_1002A19FC;
                        *(void *)(v677 + 120)  = v672;
                        *(void *)(v677 + 128)  = sub_1002A1A0C;
                        *(void *)(v677 + 136)  = v678;
                        *(void *)(v677 + 144)  = sub_1002A1A0C;
                        *(void *)(v677 + 152)  = v673;
                        *(void *)(v677 + 160)  = sub_1002A1A00;
                        *(void *)(v677 + 168)  = v676;
                        v679  = (os_log_t)object;
                        swift_retain();
                        v963  = v667;
                        swift_retain();
                        v966  = v669;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        v680  = (uint8_t *)v672;
                        swift_retain();
                        swift_retain();
                        p_type  = (uint64_t)v962;
                        swift_retain();
                        swift_retain();
                        swift_bridgeObjectRelease(v677);
                        if (!os_log_type_enabled(v679, (os_log_type_t)v971))
                        {
                          swift_release(v676);
                          swift_release(p_type);
                          swift_release(v678);
                          swift_release(v680);
                          swift_release(v670);
                          swift_release(v109);
                          swift_release(v966);
                          swift_release(v963);
                          swift_release(v973);

                          v685  = v967;
                          v692  = v946;
                          p_type  = v947;
                          goto LABEL_150;
                        }

                        countAndFlagsBits  = v680;
                        v956  = v676;
                        v681  = v963;
                        v957  = v670;
                        v682  = (uint8_t *)sub_100002B30(25LL);
                        v683  = swift_slowAlloc(8LL, -1LL);
                        BOOL v108 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
                        v954  = v683;
                        v991  = v683;
                        v984  = (uint64_t)v108;
                        *(_WORD *)v682  = 770;
                        *(void *)&v979[0]  = v682 + 2;
                        *(void *)&v980  = sub_1002A1A0C;
                        v684  = v973;
                        double v111 = v974;
                        *((void *)&v980 + 1)  = v973;
                        sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                        uint64_t v112 = (uint64_t)v111;
                        if (!v111)
                        {
                          v974  = v108;
                          swift_release(v684);
                          *(void *)&v980  = sub_1002A1A0C;
                          *((void *)&v980 + 1)  = v681;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          swift_release(v681);
                          *(void *)&v980  = sub_1002A1A04;
                          *((void *)&v980 + 1)  = v966;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          v685  = v967;
                          swift_release(v966);
                          *(void *)&v980  = sub_1002A1A0C;
                          v686  = v968;
                          *((void *)&v980 + 1)  = v968;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          swift_release(v686);
                          *(void *)&v980  = sub_1002A1A0C;
                          v687  = v957;
                          *((void *)&v980 + 1)  = v957;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          swift_release(v687);
                          *(void *)&v980  = sub_1002A19FC;
                          v688  = countAndFlagsBits;
                          *((void *)&v980 + 1)  = countAndFlagsBits;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          v689  = v682;
                          swift_release(v688);
                          *(void *)&v980  = sub_1002A1A0C;
                          v690  = v969;
                          *((void *)&v980 + 1)  = v969;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          swift_release(v690);
                          *(void *)&v980  = sub_1002A1A0C;
                          v691  = p_type;
                          *((void *)&v980 + 1)  = p_type;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          v692  = v946;
                          p_type  = v947;
                          v693  = (os_log_s *)object;
                          swift_release(v691);
                          *(void *)&v980  = sub_1002A1A00;
                          v694  = v956;
                          *((void *)&v980 + 1)  = v956;
                          sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)&v991,  (uint64_t)&v984);
                          swift_release(v694);
                          _os_log_impl( (void *)&_mh_execute_header,  v693,  (os_log_type_t)v971,  "Cannot create new datapath for %@ to %s[%hhu] because no more instance IDs were available",  v689,  0x19u);
                          v695  = sub_100002274(&qword_100404DE0);
                          v696  = v954;
                          swift_arrayDestroy(v954, 1LL, v695);
                          swift_slowDealloc(v696, -1LL, -1LL);
                          v697  = v974;
                          swift_arrayDestroy(v974, 1LL, &type metadata for Any[8]);
                          swift_slowDealloc(v697, -1LL, -1LL);
                          sub_100002B24((uint64_t)v689);

LABEL_150:
                          v721  = sub_1000033FC();
                          v722  = swift_allocError(&type metadata for WiFiError, v721, 0LL, 0LL);
                          *(_OWORD *)v723  = xmmword_10035EAB0;
                          *(_BYTE *)(v723 + 16)  = 1;
                          swift_willThrow(v722);
                          sub_100111F98(v961, v951, v958, (uint64_t)v959, (unint64_t)v960);
                          swift_release(v685);

                          sub_1000AADB0(v965, p_type, (unint64_t)v692, v942, v945, 0LL, (uint64_t)v970);
                          goto LABEL_124;
                        }

                        goto LABEL_231;
                      }

                      LODWORD(v974)  = LOBYTE(v979[0]);
                      v969  = (*(uint64_t (**)(uint64_t))(*(void *)v967 + 232LL))(v660);
                      v698  = v962;
                      swift_beginAccess(v962, v979, 32LL, 0LL);
                      v699  = NANSubscribe.Configuration.requiresAuthentication.getter();
                      swift_endAccess(v979);
                      if (v699)
                      {
                        v700  = 1LL;
                        v701  = v930;
                        v702  = v932;
                      }

                      else
                      {
                        v724  = type metadata accessor for NANSubscribe.Configuration(0LL);
                        v725  = v928;
                        v726  = sub_100057FE8( (uint64_t)&v698[*(int *)(v724 + 64)],  v928,  type metadata accessor for OWEKeys);
                        v702  = v932;
                        OWEKeys.publicKey.getter(v726);
                        sub_10005802C(v725, type metadata accessor for OWEKeys);
                        v700  = 0LL;
                        v701  = v930;
                      }

                      v727  = v950;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v919 + 56))(v702, v700, 1LL, v701);
                      v728  = [v727 serviceSpecificInfo];
                      if (v728)
                      {
                        v729  = v728;
                        v730  = [v728 protocolType];

                        v727  = v950;
                        v731  = v730 != 0LL;
                      }

                      else
                      {
                        v731  = 2;
                      }

                      v732  = v933;
                      v733  = [v727 serviceSpecificInfo];
                      sub_100292CF8(v733, v732);

                      v734  = [v727 serviceSpecificInfo];
                      v735  = v734;
                      v968  = (os_log_s *)v416;
                      if (v734)
                      {
                        v736  = [v734 hostname];

                        if (v736)
                        {
                          v735  = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v736);
                          v738  = v737;

LABEL_181:
                          sub_1000226B0((uint64_t)v989, (uint64_t)v979, (uint64_t *)&unk_10040DCB0);
                          v788  = (int *)type metadata accessor for NANSubscribe.Configuration(0LL);
                          v789  = &v698[v788[18]];
                          v790  = v698;
                          v791  = *(unsigned int *)v789 | ((unint64_t)*((unsigned __int16 *)v789 + 2) << 32);
                          v792  = v789[6];
                          p_type  = v790[v788[19]];
                          v793  = v965;
                          sub_10017D3D0(v965, v947, (unint64_t)v946, v942, v945, 0LL, (uint64_t)v970);
                          LOBYTE(v991)  = v792;
                          NANDatapath.Configuration.init(instanceID:serviceName:responderPublishID:responderManagementAddress:initiatorDataAddress:initiatorSubscribeID:publicOWEKey:protocolType:port:hostname:serviceType:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)( (int)v974,  (uint64_t)countAndFlagsBits,  (uint64_t)object,  (int)v971,  (unint64_t)v949,  v969 & 0xFFFFFFFFFFFFLL,  v943,  v932,  (uint64_t)&v980,  v731,  v933,  (uint64_t)v735,  v738,  v966,  (uint64_t)v990,  (uint64_t)v979,  v791 | ((unint64_t)v792 << 48),  p_type);
                          __chkstk_darwin();
                          v915  = v956;
                          v916  = v957;
                          KeyPath  = (void *)swift_getKeyPath(&unk_10035F000);
                          v795  = v968;
                          v796  = sub_10028E898((uint64_t)&v980, KeyPath, v963);
                          if (!v795)
                          {
                            p_type  = v796;
                            v798  = v946;
                            v797  = v947;
                            swift_release(KeyPath);
                            v799  = v964;
                            if ((v962[v788[15]] & 1) != 0 || v962[v788[19]] != 1)
                            {
                              sub_100111F98(v961, v951, v958, (uint64_t)v959, (unint64_t)v960);
                              sub_1000AADB0(v793, v797, (unint64_t)v798, v942, v945, 0LL, (uint64_t)v970);
                              swift_release(v967);
                              sub_10027D1C8(&v980);
                              sub_1000225EC((uint64_t)v989, (uint64_t *)&unk_10040DCB0);
                              swift_unknownObjectWeakAssign(p_type + qword_100410AD8, v799);
                            }

                            else
                            {
                              swift_release(v967);
                              sub_1000AADB0(v793, v797, (unint64_t)v798, v942, v945, 0LL, (uint64_t)v970);
                              sub_100111F98(v961, v951, v958, (uint64_t)v959, (unint64_t)v960);
                              sub_10027D1C8(&v980);
                              sub_1000225EC((uint64_t)v989, (uint64_t *)&unk_10040DCB0);
                            }

                            return p_type;
                          }

                          swift_release(KeyPath);
                          sub_100111F98(v961, v951, v958, (uint64_t)v959, (unint64_t)v960);

                          sub_1000AADB0(v793, v947, (unint64_t)v946, v942, v945, 0LL, (uint64_t)v970);
                          swift_release(v967);
                          sub_10027D1C8(&v980);
                          goto LABEL_124;
                        }

                        v735  = 0LL;
                      }

                      v738  = 0LL;
                      goto LABEL_181;
                    }

                    sub_100020B40(v947, (unint64_t)v946);
                    sub_100020B40(v942, v945);
                    v417  = v954;
                    v514  = v965;
LABEL_143:
                    swift_unownedRetainStrong(v514);
                    v708  = v514 + *(void *)(*(void *)v514 + 656LL);
                    swift_beginAccess(v708, v978, 0LL, 0LL);
                    v709  = v708;
                    v710  = v931;
                    sub_100057FE8(v709, v931, type metadata accessor for NANDriverCapabilities);
                    swift_release(v514);
                    v711  = *(void *)(v710 + 8);
                    swift_bridgeObjectRetain(v711);
                    sub_10005802C(v710, type metadata accessor for NANDriverCapabilities);
                    *(void *)&v980  = v711;
                    v712  = sub_100002274((uint64_t *)&unk_10040D460);
                    v946  = (uint8_t *)sub_1000572E4( (unint64_t *)&qword_100407E70,  (uint64_t *)&unk_10040D460,  (uint64_t)&protocol conformance descriptor for [A]);
                    v533  = Collection<>.strongestSupportedSharedKeySuite.getter(v712, (uint64_t)v946);
                    *(void *)&v713  = swift_bridgeObjectRelease(v711).n128_u64[0];
                    v947  = v712;
                    if (v533 == 8)
                    {
                      v416  = v974;
                      goto LABEL_165;
                    }

                    v714  = objc_msgSend(v950, v508[505], v713);
                    if (v714)
                    {
                      v715  = v714;
                      v716  = static Data._unconditionallyBridgeFromObjectiveC(_:)(v714);
                      v718  = v717;

                      if (v718 >> 60 != 15)
                      {
                        sub_100020AFC(v716, v718);
                        v719  = NANPMK.init(pmk:)(v716, v718);
                        v655  = v720;
                        sub_100020B40(v716, v718);
                        if ((unint64_t)v655 >> 60 != 15)
                        {
                          v416  = v974;
                          v654  = v719;
LABEL_171:
                          swift_beginAccess(v962, &v980, 32LL, 0LL);
                          v754  = NANSubscribe.Configuration.requiresAuthentication.getter();
                          swift_endAccess(&v980);
                          v541  = v953;
                          if (!v754)
                          {
                            v656  = 0LL;
                            v613  = 0LL;
                            v657  = 0xF000000000000000LL;
LABEL_131:
                            v658  = (char)v970;
                            goto LABEL_132;
                          }

                          v946  = v655;
                          v947  = v654;
                          v974  = v416;
                          swift_bridgeObjectRelease(object);
                          v755  = swift_allocObject(&unk_1003F7B38, 24LL, 7LL);
                          v756  = v964;
                          *(void *)(v755 + 16)  = v964;
                          v757  = (_BYTE *)swift_allocObject(&unk_1003F7B60, 22LL, 7LL);
                          v757[16]  = v952;
                          v757[17]  = v417;
                          v757[18]  = v541;
                          v757[19]  = v969;
                          v757[20]  = (_BYTE)v968;
                          v757[21]  = (_BYTE)v970;
                          v758  = swift_allocObject(&unk_1003F7B88, 32LL, 7LL);
                          *(void *)(v758 + 16)  = sub_1002A1CC4;
                          *(void *)(v758 + 24)  = v757;
                          v968  = (os_log_s *)swift_allocObject(&unk_1003F7BB0, 17LL, 7LL);
                          *((_BYTE *)v968 + 16)  = (_BYTE)v971;
                          v969  = v756;
                          v973  = (void (*)(uint64_t, char))Logger.logObject.getter(v969);
                          LODWORD(v970)  = static os_log_type_t.error.getter(v973);
                          v971  = (_BYTE *)swift_allocObject(&unk_1003F7BD8, 17LL, 7LL);
                          v971[16]  = 64;
                          object  = (_BYTE *)swift_allocObject(&unk_1003F7C00, 17LL, 7LL);
                          object[16]  = 8;
                          v759  = swift_allocObject(&unk_1003F7C28, 32LL, 7LL);
                          *(void *)(v759 + 16)  = sub_1002A1CA8;
                          *(void *)(v759 + 24)  = v755;
                          v760  = swift_allocObject(&unk_1003F7C50, 32LL, 7LL);
                          *(void *)(v760 + 16)  = sub_1002A19EC;
                          *(void *)(v760 + 24)  = v759;
                          v761  = (uint8_t *)swift_allocObject(&unk_1003F7C78, 17LL, 7LL);
                          v761[16]  = 32;
                          p_type  = swift_allocObject(&unk_1003F7CA0, 17LL, 7LL);
                          *(_BYTE *)(p_type + 16)  = 8;
                          v762  = swift_allocObject(&unk_1003F7CC8, 32LL, 7LL);
                          *(void *)(v762 + 16)  = sub_1002A19F4;
                          *(void *)(v762 + 24)  = v758;
                          v763  = swift_allocObject(&unk_1003F7CF0, 32LL, 7LL);
                          *(void *)(v763 + 16)  = sub_1002A19EC;
                          *(void *)(v763 + 24)  = v762;
                          v764  = (_BYTE *)swift_allocObject(&unk_1003F7D18, 17LL, 7LL);
                          v764[16]  = 0;
                          v765  = (os_log_s *)swift_allocObject(&unk_1003F7D40, 17LL, 7LL);
                          *((_BYTE *)v765 + 16)  = 1;
                          v766  = swift_allocObject(&unk_1003F7D68, 32LL, 7LL);
                          v767  = v968;
                          *(void *)(v766 + 16)  = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                          *(void *)(v766 + 24)  = v767;
                          v768  = swift_allocObject(&unk_1003F7D90, 32LL, 7LL);
                          *(void *)(v768 + 16)  = sub_1002A1CC8;
                          *(void *)(v768 + 24)  = v766;
                          v769  = swift_allocObject(v940, 176LL, 7LL);
                          *(_OWORD *)(v769 + 16)  = xmmword_10035EAF0;
                          *(void *)(v769 + 32)  = sub_1002A1A0C;
                          v770  = object;
                          *(void *)(v769 + 40)  = v971;
                          *(void *)(v769 + 48)  = sub_1002A1A0C;
                          *(void *)(v769 + 56)  = v770;
                          *(void *)(v769 + 64)  = sub_1002A1A04;
                          *(void *)(v769 + 72)  = v760;
                          *(void *)(v769 + 80)  = sub_1002A1A0C;
                          *(void *)(v769 + 88)  = v761;
                          *(void *)(v769 + 96)  = sub_1002A1A0C;
                          *(void *)(v769 + 104)  = p_type;
                          *(void *)(v769 + 112)  = sub_1002A19FC;
                          *(void *)(v769 + 120)  = v763;
                          *(void *)(v769 + 128)  = sub_1002A1A0C;
                          *(void *)(v769 + 136)  = v764;
                          *(void *)(v769 + 144)  = sub_1002A1A0C;
                          *(void *)(v769 + 152)  = v765;
                          *(void *)(v769 + 160)  = sub_1002A1A00;
                          *(void *)(v769 + 168)  = v768;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          v964  = v761;
                          swift_retain();
                          v965  = p_type;
                          swift_retain();
                          v963  = v763;
                          swift_retain();
                          v966  = v764;
                          swift_retain();
                          v968  = v765;
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease(v769);
                          if (os_log_type_enabled((os_log_t)v973, (os_log_type_t)v970))
                          {
                            v771  = (uint8_t *)sub_100002B30(25LL);
                            v772  = (uint8_t *)swift_slowAlloc(8LL, -1LL);
                            v773  = swift_slowAlloc(32LL, -1LL);
                            v962  = v772;
                            v977[0]  = v772;
                            v976[0]  = v773;
                            *(_WORD *)v771  = 770;
                            *(void *)&v979[0]  = v771 + 2;
                            *(void *)&v980  = sub_1002A1A0C;
                            BOOL v108 = v971;
                            *((void *)&v980 + 1)  = v971;
                            double v111 = v974;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            uint64_t v109 = v111;
                            if (v111) {
                              goto LABEL_233;
                            }
                            swift_release(v108);
                            *(void *)&v980  = sub_1002A1A0C;
                            v774  = object;
                            *((void *)&v980 + 1)  = object;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            swift_release(v774);
                            *(void *)&v980  = sub_1002A1A04;
                            *((void *)&v980 + 1)  = v760;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            p_type  = 0LL;
                            swift_release(v760);
                            *(void *)&v980  = sub_1002A1A0C;
                            v775  = v964;
                            *((void *)&v980 + 1)  = v964;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            swift_release(v775);
                            *(void *)&v980  = sub_1002A1A0C;
                            v776  = v965;
                            *((void *)&v980 + 1)  = v965;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            swift_release(v776);
                            *(void *)&v980  = sub_1002A19FC;
                            v777  = v963;
                            *((void *)&v980 + 1)  = v963;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            swift_release(v777);
                            *(void *)&v980  = sub_1002A1A0C;
                            v778  = v966;
                            *((void *)&v980 + 1)  = v966;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            swift_release(v778);
                            *(void *)&v980  = sub_1002A1A0C;
                            v779  = v968;
                            *((void *)&v980 + 1)  = v968;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            swift_release(v779);
                            *(void *)&v980  = sub_1002A1A00;
                            *((void *)&v980 + 1)  = v768;
                            sub_100004D18( (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v980,  (uint64_t)v979,  (uint64_t)v977,  (uint64_t)v976);
                            swift_release(v768);
                            v780  = v973;
                            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v973,  (os_log_type_t)v970,  "Cannot create new datapath for %@ to %s[%hhu] because unable to derive security parameters with client provided PMK and with authentication type set",  v771,  0x19u);
                            v781  = sub_100002274(&qword_100404DE0);
                            v782  = v962;
                            swift_arrayDestroy(v962, 1LL, v781);
                            swift_slowDealloc(v782, -1LL, -1LL);
                            swift_arrayDestroy(v773, 1LL, &type metadata for Any[8]);
                            swift_slowDealloc(v773, -1LL, -1LL);
                            sub_100002B24((uint64_t)v771);
                          }

                          else
                          {
                            swift_release(v768);
                            swift_release(v968);
                            swift_release(v966);
                            swift_release(v963);
                            swift_release(v965);
                            swift_release(v964);
                            swift_release(v760);
                            swift_release(object);
                            swift_release(v971);
                          }

                          v833  = v961;
                          v834  = sub_1000033FC();
                          v835  = swift_allocError(&type metadata for WiFiError, v834, 0LL, 0LL);
                          *(_OWORD *)v836  = xmmword_10035E1A0;
                          *(_BYTE *)(v836 + 16)  = 1;
                          swift_willThrow(v835);
                          sub_100020B40(v947, (unint64_t)v946);
                          sub_100111F98(v833, v951, v958, (uint64_t)v959, (unint64_t)v960);
                          swift_release(v967);
                          v537  = (uint8_t *)v969;
LABEL_120:

                          goto LABEL_124;
                        }